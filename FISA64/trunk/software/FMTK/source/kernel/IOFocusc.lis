     1	
     2	typedef unsigned int uint;
     3	
     4	typedef struct tagMSG {
     5		struct tagMSG *link;
     6		uint d1;
     7		uint d2;
     8		byte type;
     9		byte resv[7];
    10	} MSG;
    11	
    12	typedef struct _tagJCB
    13	{
    14	    struct _tagJCB *iof_next;
    15	    struct _tagJCB *iof_prev;
    16	    char UserName[32];
    17	    char path[256];
    18	    char exitRunFile[256];
    19	    char commandLine[256];
    20	    unsigned __int32 *pVidMem;
    21	    unsigned __int32 *pVirtVidMem;
    22	    unsigned __int16 VideoRows;
    23	    unsigned __int16 VideoCols;
    24	    unsigned __int16 CursorRow;
    25	    unsigned __int16 CursorCol;
    26	    unsigned __int32 NormAttr;
    27	    __int8 KeybdHead;
    28	    __int8 KeybdTail;
    29	    unsigned __int16 KeybdBuffer[16];
    30	    __int16 number;
    31	} JCB;
    32	
    33	struct tagMBX;
    34	
    35	typedef struct _tagTCB {
    36		int regs[32];
    37		int isp;
    38		int dsp;
    39		int esp;
    40		int ipc;
    41		int dpc;
    42		int epc;
    43		int cr0;
    44		struct _tagTCB *next;
    45		struct _tagTCB *prev;
    46		struct _tagTCB *mbq_next;
    47		struct _tagTCB *mbq_prev;
    48		int *sys_stack;
    49		int *bios_stack;
    50		int *stack;
    51		__int64 timeout;
    52		JCB *hJob;
    53		struct tagMBX *mailboxes;
    54		__int8 priority;
    55		__int8 status;
    56		__int8 affinity;
    57		__int16 number;
    58	} TCB;
    59	
    60	typedef struct tagMBX {
    61	    struct tagMBX *next;
    62		TCB *tq_head;
    63		TCB *tq_tail;
    64		MSG *mq_head;
    65		MSG *mq_tail;
    66		uint tq_count;
    67		uint mq_size;
    68		uint mq_count;
    69		uint mq_missed;
    70		uint owner;		// hJcb of owner
    71		char mq_strategy;
    72		byte resv[7];
    73	} MBX;
    74	
    75	typedef struct tagALARM {
    76		struct tagALARM *next;
    77		struct tagALARM *prev;
    78		MBX *mbx;
    79		MSG *msg;
    80		uint BaseTimeout;
    81		uint timeout;
    82		uint repeat;
    83		byte resv[8];		// padding to 64 bytes
    84	} ALARM;
    85	
    86	
    87	TCB *GetRunningTCB();
    88	JCB *GetJCBPtr();                   // get the JCB pointer of the running task
    89	void set_vector(unsigned int, unsigned int);
    90	
    91	
    92	extern JCB *IOFocusNdx;
    93	extern int IOFocusTbl[4];
    94	
    95	void ForceIOFocus(JCB *j)
    96	{
    97	    RequestIOFocus(j);   // In case it isn't requested yet.
    98	    LockIOF();
    99	        if (j != IOFocusNdx) {
   100	            CopyScreenToVirtualScreen();
   101	            j->pVidMem = j->pVirtVidMem;
   102	            IOFocusNdx = j;
   103	            j->pVidMem = 0xFFD00000;
   104	            CopyVirtualScreenToScreen();
   105	        }
   106	    UnlockIOF();
   107	}
   108	
   109	// First check if it's even possible to switch the focus to another
   110	// task. The I/O focus list could be empty or there may be only a
   111	// single task in the list. In either case it's not possible to
   112	// switch.


*** local symbol table ***

j          =000018    -    Auto        Pointer to struct _tagJCB 



   113	void SwitchIOFocus()
   114	{
   115	     JCB *j, *p;
   116	
   117	     LockIOF();
   118	         j = IOFocusNdx;
   119	         if (j) {
   120	             p = IOFocusNdx->iof_next;
   121	             if (p <> IOFocusNdx) {
   122	                 if (p) {
   123	                     CopyScreenToVirtualScreen();
   124	                     j->pVidMem = j->pVirtVidMem;
   125	                     IOFocusNdx = p;
   126	                     p->pVidMem = 0xFFD00000;
   127	                     CopyVirtualScreenToScreen();
   128	                 }
   129	             }
   130	         }
   131	     UnlockIOF();
   132	}
   133	
   134	//-----------------------------------------------------------------------------
   135	// The I/O focus list is an array indicating which jobs are requesting the
   136	// I/O focus. The I/O focus is user controlled by pressing ALT-TAB on the
   137	// keyboard.
   138	//-----------------------------------------------------------------------------
   139	


*** local symbol table ***

j          =fffffff8    -    Auto        Pointer to struct _tagJCB 
p          =fffffff0    -    Auto        Pointer to struct _tagJCB 



   140	void RequestIOFocus(JCB *j)
   141	{
   142	     int nj;
   143	     int stat;
   144	
   145	     nj = j->number;
   146	     LockIOF();
   147	        stat = (IOFocusTbl[0] >> nj) & 1;
   148	        if (!stat) {
   149	           if (IOFocusNdx==null) {
   150	               IOFocusNdx = j;
   151	               j->iof_next = j;
   152	               j->iof_prev = j;
   153	           }
   154	           else {
   155	               j->iof_prev = IOFocusNdx->iof_prev;
   156	               j->iof_next = IOFocusNdx;
   157	               IOFocusNdx->iof_prev->iof_next = j;
   158	               IOFocusNdx->iof_prev = j;
   159	           }
   160	           IOFocusTbl[0] |= (1 << nj);
   161	        }
   162	     UnlockIOF();
   163	}
   164	        
   165	//-----------------------------------------------------------------------------
   166	// Release the IO focus for the current job.
   167	//-----------------------------------------------------------------------------


*** local symbol table ***

j          =000018    -    Auto        Pointer to struct _tagJCB 
nj         =fffffff8    -    Auto        Long
stat       =fffffff0    -    Auto        Long



   168	void ReleaseIOFocus()
   169	{
   170	     ForceReleaseIOFocus(GetJCBPtr());
   171	}
   172	
   173	//-----------------------------------------------------------------------------
   174	// Releasing the I/O focus causes the focus to switch if the running job
   175	// had the I/O focus.
   176	// ForceReleaseIOFocus forces the release of the IO focus for a job
   177	// different than the one currently running.
   178	//-----------------------------------------------------------------------------
   179	


*** local symbol table ***




   180	void ForceReleaseIOFocus(JCB * j)
   181	{
   182	     JCB *p;
   183	     
   184	     LockIOF();
   185	         if (IOFocusTbl[0] & (1 << (int)j->number)) {
   186	             IOFocusTbl[0] &= ~(1 << j->number);
   187	             if (j == IOFocusNdx)
   188	                SwitchIOFocus();
   189	             p = j->iof_next;
   190	             if (p) {
   191	                  if (p <> j) {
   192	                        p->iof_prev = j->iof_prev;
   193	                        j->iof_prev->iof_next = p;
   194	                  } 
   195	                  else {
   196	                       IOFocusNdx = null;
   197	                  }
   198	                  j->iof_next = null;
   199	                  j->iof_prev = null;
   200	             }
   201	         }
   202	     UnlockIOF();
   203	}
   204	


*** local symbol table ***

j          =000018    -    Auto        Pointer to struct _tagJCB 
p          =fffffff8    -    Auto        Pointer to struct _tagJCB 



   205	void CopyVirtualScreenToScreen()
   206	{
   207	     short int *p, *q;
   208	     JCB *j;
   209	     int nn, pos;
   210	
   211	     j = IOFocusNdx;
   212	     p = j->pVidMem;
   213	     q = j->pVirtVidMem;
   214	     nn = j->VideoRows * j->VideoCols;
   215	     for (; nn >= 0; nn--)
   216	         p[nn] = q[nn];
   217	    pos = j->CursorRow * j->VideoCols + j->CursorCol;
   218	    SetVideoReg(11,pos);
   219	}
   220	


*** local symbol table ***

p          =fffffff8    -    Auto        Pointer to Short
q          =fffffff0    -    Auto        Pointer to Short
j          =ffffffe8    -    Auto        Pointer to struct _tagJCB 
nn         =ffffffe0    -    Auto        Long
pos        =ffffffd8    -    Auto        Long



   221	void CopyScreenToVirtualScreen()
   222	{
   223	     short int *p, *q;
   224	     JCB *j;
   225	     int nn;
   226	
   227	     j = IOFocusNdx;
   228	     p = j->pVidMem;
   229	     q = j->pVirtVidMem;
   230	     nn = j->VideoRows * j->VideoCols;
   231	     for (; nn >= 0; nn--)
   232	         q[nn] = p[nn];
   233	}


*** local symbol table ***

p          =fffffff8    -    Auto        Pointer to Short
q          =fffffff0    -    Auto        Pointer to Short
j          =ffffffe8    -    Auto        Pointer to struct _tagJCB 
nn         =ffffffe0    -    Auto        Long




 *** global scope typedef symbol table ***

CopyScreenToVirtualScreen =0008e8    -    Global      Function returning 
CopyVirtualScreenToScreen =0008e8    -    Global      Function returning 
SwitchIOFocus =0008e8    -    Global      Function returning 
GetJCBPtr  =0008e8    -    External    Function returning Pointer to struct _tagJCB 
set_vector =0008e8    -    Global      Function returning 
SetVideoReg =000000    -    External    Function returning Long
ForceReleaseIOFocus =0008e8    -    Global      Function returning 
UnlockIOF  =000000    -    External    Function returning Long
ReleaseIOFocus =0008e8    -    Global      Function returning 
LockIOF    =000000    -    External    Function returning Long
ALARM      =0008a8    1   struct tagALARM 
RequestIOFocus =0008e8    -    Global      Function returning 
ForceIOFocus =0008e8    -    Global      Function returning 
IOFocusTbl =000000    -    External    Array of Long
uint       =000000    1   
IOFocusNdx =000000    -    External    Pointer to struct _tagJCB 
JCB        =000028    1   struct _tagJCB 
TCB        =0006b8    1   struct _tagTCB 
GetRunningTCB =0008e8    -    External    Function returning Pointer to struct _tagTCB 
MSG        =000008    1   struct tagMSG 
MBX        =000848    1   struct tagMBX 

 *** structures and unions ***

tagMSG     =000000    -    Type        struct tagMSG 
    link       =000000    -    Member      Pointer to struct tagMSG 
    d1         =000008    -    Member      
    d2         =000010    -    Member      
    type       =000018    -    Member      Byte
    resv       =000019    -    Member      Array of Byte
_tagJCB    =000000    -    Type        struct _tagJCB 
    iof_next   =000000    -    Member      Pointer to struct _tagJCB 
    iof_prev   =000008    -    Member      Pointer to struct _tagJCB 
    UserName   =000010    -    Member      Array of Char
    path       =000050    -    Member      Array of Char
    exitRunFile =000250    -    Member      Array of Char
    commandLine =000450    -    Member      Array of Char
    pVidMem    =000650    -    Member      Pointer to 
    pVirtVidMem =000658    -    Member      Pointer to 
    VideoRows  =000660    -    Member      
    VideoCols  =000662    -    Member      
    CursorRow  =000664    -    Member      
    CursorCol  =000666    -    Member      
    NormAttr   =000668    -    Member      
    KeybdHead  =00066c    -    Member      Byte
    KeybdTail  =00066d    -    Member      Byte
    KeybdBuffer =00066e    -    Member      Array of 
    number     =00068e    -    Member      Char
tagMBX     =000000    -    Type        struct tagMBX 
    next       =000000    -    Member      Pointer to struct tagMBX 
    tq_head    =000008    -    Member      Pointer to struct _tagTCB 
    tq_tail    =000010    -    Member      Pointer to struct _tagTCB 
    mq_head    =000018    -    Member      Pointer to struct tagMSG 
    mq_tail    =000020    -    Member      Pointer to struct tagMSG 
    tq_count   =000028    -    Member      
    mq_size    =000030    -    Member      
    mq_count   =000038    -    Member      
    mq_missed  =000040    -    Member      
    owner      =000048    -    Member      
    mq_strategy =000050    -    Member      Char
    resv       =000052    -    Member      Array of Byte
_tagTCB    =000000    -    Type        struct _tagTCB 
    regs       =000000    -    Member      Array of Long
    isp        =000100    -    Member      Long
    dsp        =000108    -    Member      Long
    esp        =000110    -    Member      Long
    ipc        =000118    -    Member      Long
    dpc        =000120    -    Member      Long
    epc        =000128    -    Member      Long
    cr0        =000130    -    Member      Long
    next       =000138    -    Member      Pointer to struct _tagTCB 
    prev       =000140    -    Member      Pointer to struct _tagTCB 
    mbq_next   =000148    -    Member      Pointer to struct _tagTCB 
    mbq_prev   =000150    -    Member      Pointer to struct _tagTCB 
    sys_stack  =000158    -    Member      Pointer to Long
    bios_stack =000160    -    Member      Pointer to Long
    stack      =000168    -    Member      Pointer to Long
    timeout    =000170    -    Member      Long
    hJob       =000178    -    Member      Pointer to struct _tagJCB 
    mailboxes  =000180    -    Member      Pointer to struct tagMBX 
    priority   =000188    -    Member      Byte
    status     =000189    -    Member      Byte
    affinity   =00018a    -    Member      Byte
    number     =00018c    -    Member      Char
tagALARM   =000000    -    Type        struct tagALARM 
    next       =000000    -    Member      Pointer to struct tagALARM 
    prev       =000008    -    Member      Pointer to struct tagALARM 
    mbx        =000010    -    Member      Pointer to struct tagMBX 
    msg        =000018    -    Member      Pointer to struct tagMSG 
    BaseTimeout =000020    -    Member      
    timeout    =000028    -    Member      
    repeat     =000030    -    Member      
    resv       =000038    -    Member      Array of Byte
