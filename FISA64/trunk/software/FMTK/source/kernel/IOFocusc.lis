     1	
     2	typedef unsigned int uint;
     3	
     4	typedef struct tagMSG align(32) {
     5		struct tagMSG *link;
     6		uint d1;
     7		uint d2;
     8		uint type;
     9	} MSG;
    10	
    11	typedef struct _tagJCB align(2048)
    12	{
    13	    struct _tagJCB *iof_next;
    14	    struct _tagJCB *iof_prev;
    15	    char UserName[32];
    16	    char path[256];
    17	    char exitRunFile[256];
    18	    char commandLine[256];
    19	    unsigned __int32 *pVidMem;
    20	    unsigned __int32 *pVirtVidMem;
    21	    unsigned __int16 VideoRows;
    22	    unsigned __int16 VideoCols;
    23	    unsigned __int16 CursorRow;
    24	    unsigned __int16 CursorCol;
    25	    unsigned __int32 NormAttr;
    26	    __int8 KeybdHead;
    27	    __int8 KeybdTail;
    28	    unsigned __int16 KeybdBuffer[16];
    29	    __int16 number;
    30	} JCB;
    31	
    32	struct tagMBX;
    33	
    34	typedef struct _tagTCB align(512) {
    35		int regs[32];
    36		int isp;
    37		int dsp;
    38		int esp;
    39		int ipc;
    40		int dpc;
    41		int epc;
    42		int cr0;
    43		struct _tagTCB *next;
    44		struct _tagTCB *prev;
    45		struct _tagTCB *mbq_next;
    46		struct _tagTCB *mbq_prev;
    47		int *sys_stack;
    48		int *bios_stack;
    49		int *stack;
    50		__int64 timeout;
    51		JCB *hJob;
    52		int msgD1;
    53		int msgD2;
    54		MSG *MsgPtr;
    55		uint hWaitMbx;
    56		struct tagMBX *mailboxes;
    57		__int8 priority;
    58		__int8 status;
    59		__int8 affinity;
    60		__int16 number;
    61	} TCB;
    62	
    63	typedef struct tagMBX align(128) {
    64	    struct tagMBX *link;
    65		TCB *tq_head;
    66		TCB *tq_tail;
    67		MSG *mq_head;
    68		MSG *mq_tail;
    69		uint tq_count;
    70		uint mq_size;
    71		uint mq_count;
    72		uint mq_missed;
    73		uint owner;		// hJcb of owner
    74		char mq_strategy;
    75		byte resv[7];
    76	} MBX;
    77	
    78	typedef struct tagALARM {
    79		struct tagALARM *next;
    80		struct tagALARM *prev;
    81		MBX *mbx;
    82		MSG *msg;
    83		uint BaseTimeout;
    84		uint timeout;
    85		uint repeat;
    86		byte resv[8];		// padding to 64 bytes
    87	} ALARM;
    88	
    89	
    90	TCB *GetRunningTCB();
    91	JCB *GetJCBPtr();                   // get the JCB pointer of the running task
    92	void set_vector(unsigned int, unsigned int);
    93	int getCPU();
    94	void outb(unsigned int, int);
    95	void outc(unsigned int, int);
    96	void outh(unsigned int, int);
    97	void outw(unsigned int, int);
    98	
    99	
   100	extern JCB *IOFocusNdx;
   101	extern int IOFocusTbl[4];
   102	
   103	void ForceIOFocus(JCB *j)
   104	{
   105	    RequestIOFocus(j);   // In case it isn't requested yet.
   106	    LockIOF();
   107	        if (j != IOFocusNdx) {
   108	            CopyScreenToVirtualScreen();
   109	            j->pVidMem = j->pVirtVidMem;
   110	            IOFocusNdx = j;
   111	            j->pVidMem = 0xFFD00000;
   112	            CopyVirtualScreenToScreen();
   113	        }
   114	    UnlockIOF();
   115	}
   116	
   117	// First check if it's even possible to switch the focus to another
   118	// task. The I/O focus list could be empty or there may be only a
   119	// single task in the list. In either case it's not possible to
   120	// switch.


*** local symbol table ***

j_         =000018    -    Auto        Pointer to struct _tagJCB_ 



   121	void SwitchIOFocus()
   122	{
   123	     JCB *j, *p;
   124	
   125	     LockIOF();
   126	         j = IOFocusNdx;
   127	         if (j) {
   128	             p = IOFocusNdx->iof_next;
   129	             if (p <> IOFocusNdx) {
   130	                 if (p) {
   131	                     CopyScreenToVirtualScreen();
   132	                     j->pVidMem = j->pVirtVidMem;
   133	                     IOFocusNdx = p;
   134	                     p->pVidMem = 0xFFD00000;
   135	                     CopyVirtualScreenToScreen();
   136	                 }
   137	             }
   138	         }
   139	     UnlockIOF();
   140	}
   141	
   142	//-----------------------------------------------------------------------------
   143	// The I/O focus list is an array indicating which jobs are requesting the
   144	// I/O focus. The I/O focus is user controlled by pressing ALT-TAB on the
   145	// keyboard.
   146	//-----------------------------------------------------------------------------
   147	


*** local symbol table ***

j_         =fffffff8    -    Auto        Pointer to struct _tagJCB_ 
p_         =fffffff0    -    Auto        Pointer to struct _tagJCB_ 



   148	void RequestIOFocus(JCB *j)
   149	{
   150	     int nj;
   151	     int stat;
   152	
   153	     nj = j->number;
   154	     LockIOF();
   155	        stat = (IOFocusTbl[0] >> nj) & 1;
   156	        if (!stat) {
   157	           if (IOFocusNdx==null) {
   158	               IOFocusNdx = j;
   159	               j->iof_next = j;
   160	               j->iof_prev = j;
   161	           }
   162	           else {
   163	               j->iof_prev = IOFocusNdx->iof_prev;
   164	               j->iof_next = IOFocusNdx;
   165	               IOFocusNdx->iof_prev->iof_next = j;
   166	               IOFocusNdx->iof_prev = j;
   167	           }
   168	           IOFocusTbl[0] |= (1 << nj);
   169	        }
   170	     UnlockIOF();
   171	}
   172	        
   173	//-----------------------------------------------------------------------------
   174	// Release the IO focus for the current job.
   175	//-----------------------------------------------------------------------------


*** local symbol table ***

j_         =000018    -    Auto        Pointer to struct _tagJCB_ 
nj_        =fffffff8    -    Auto        Long
stat_      =fffffff0    -    Auto        Long



   176	void ReleaseIOFocus()
   177	{
   178	     ForceReleaseIOFocus(GetJCBPtr());
   179	}
   180	
   181	//-----------------------------------------------------------------------------
   182	// Releasing the I/O focus causes the focus to switch if the running job
   183	// had the I/O focus.
   184	// ForceReleaseIOFocus forces the release of the IO focus for a job
   185	// different than the one currently running.
   186	//-----------------------------------------------------------------------------
   187	


*** local symbol table ***




   188	void ForceReleaseIOFocus(JCB * j)
   189	{
   190	     JCB *p;
   191	     
   192	     LockIOF();
   193	         if (IOFocusTbl[0] & (1 << (int)j->number)) {
   194	             IOFocusTbl[0] &= ~(1 << j->number);
   195	             if (j == IOFocusNdx)
   196	                SwitchIOFocus();
   197	             p = j->iof_next;
   198	             if (p) {
   199	                  if (p <> j) {
   200	                        p->iof_prev = j->iof_prev;
   201	                        j->iof_prev->iof_next = p;
   202	                  } 
   203	                  else {
   204	                       IOFocusNdx = null;
   205	                  }
   206	                  j->iof_next = null;
   207	                  j->iof_prev = null;
   208	             }
   209	         }
   210	     UnlockIOF();
   211	}
   212	


*** local symbol table ***

j_         =000018    -    Auto        Pointer to struct _tagJCB_ 
p_         =fffffff8    -    Auto        Pointer to struct _tagJCB_ 



   213	void CopyVirtualScreenToScreen()
   214	{
   215	     short int *p, *q;
   216	     JCB *j;
   217	     int nn, pos;
   218	
   219	     j = IOFocusNdx;
   220	     p = j->pVidMem;
   221	     q = j->pVirtVidMem;
   222	     nn = j->VideoRows * j->VideoCols;
   223	     for (; nn >= 0; nn--)
   224	         p[nn] = q[nn];
   225	    pos = j->CursorRow * j->VideoCols + j->CursorCol;
   226	    SetVideoReg(11,pos);
   227	}
   228	


*** local symbol table ***

p_         =fffffff8    -    Auto        Pointer to Short
q_         =fffffff0    -    Auto        Pointer to Short
j_         =ffffffe8    -    Auto        Pointer to struct _tagJCB_ 
nn_        =ffffffe0    -    Auto        Long
pos_       =ffffffd8    -    Auto        Long



   229	void CopyScreenToVirtualScreen()
   230	{
   231	     short int *p, *q;
   232	     JCB *j;
   233	     int nn;
   234	
   235	     j = IOFocusNdx;
   236	     p = j->pVidMem;
   237	     q = j->pVirtVidMem;
   238	     nn = j->VideoRows * j->VideoCols;
   239	     for (; nn >= 0; nn--)
   240	         q[nn] = p[nn];
   241	}


*** local symbol table ***

p_         =fffffff8    -    Auto        Pointer to Short
q_         =fffffff0    -    Auto        Pointer to Short
j_         =ffffffe8    -    Auto        Pointer to struct _tagJCB_ 
nn_        =ffffffe0    -    Auto        Long




 *** global scope typedef symbol table ***

outb_      =0012c0    -    Global      Function returning 
IOFocusTbl_ =000000    -    External    Array of Long
outc_      =0012c0    -    Global      Function returning 
uint_      =000000    1   
outh_      =0012c0    -    Global      Function returning 
IOFocusNdx_ =000000    -    External    Pointer to struct _tagJCB_ 
JCB_       =000800    1   struct _tagJCB_ 
outw_      =0012c0    -    Global      Function returning 
TCB_       =001000    1   struct _tagTCB_ 
GetRunningTCB_ =0012c0    -    External    Function returning Pointer to struct _tagTCB_ 
MSG_       =000020    1   struct tagMSG_ 
MBX_       =001200    1   struct tagMBX_ 
CopyScreenToVirtualScreen_ =0012c0    -    Global      Function returning 
CopyVirtualScreenToScreen_ =0012c0    -    Global      Function returning 
SwitchIOFocus_ =0012c0    -    Global      Function returning 
GetJCBPtr_ =0012c0    -    External    Function returning Pointer to struct _tagJCB_ 
getCPU_    =0012c0    -    External    Function returning Long
set_vector_ =0012c0    -    Global      Function returning 
SetVideoReg_ =000000    -    External    Function returning Long
ForceReleaseIOFocus_ =0012c0    -    Global      Function returning 
UnlockIOF_ =000000    -    External    Function returning Long
ReleaseIOFocus_ =0012c0    -    Global      Function returning 
LockIOF_   =000000    -    External    Function returning Long
ALARM_     =001280    1   struct tagALARM_ 
RequestIOFocus_ =0012c0    -    Global      Function returning 
ForceIOFocus_ =0012c0    -    Global      Function returning 

 *** structures and unions ***

tagMSG_    =000000    -    Type        struct tagMSG_ 
    link_      =000000    -    Member      Pointer to struct tagMSG_ 
    d1_        =000008    -    Member      
    d2_        =000010    -    Member      
    type_      =000018    -    Member      
_tagJCB_   =000000    -    Type        struct _tagJCB_ 
    iof_next_  =000000    -    Member      Pointer to struct _tagJCB_ 
    iof_prev_  =000008    -    Member      Pointer to struct _tagJCB_ 
    UserName_  =000010    -    Member      Array of Char
    path_      =000050    -    Member      Array of Char
    exitRunFile_ =000250    -    Member      Array of Char
    commandLine_ =000450    -    Member      Array of Char
    pVidMem_   =000650    -    Member      Pointer to 
    pVirtVidMem_ =000658    -    Member      Pointer to 
    VideoRows_ =000660    -    Member      
    VideoCols_ =000662    -    Member      
    CursorRow_ =000664    -    Member      
    CursorCol_ =000666    -    Member      
    NormAttr_  =000668    -    Member      
    KeybdHead_ =00066c    -    Member      Byte
    KeybdTail_ =00066d    -    Member      Byte
    KeybdBuffer_ =00066e    -    Member      Array of 
    number_    =00068e    -    Member      Char
tagMBX_    =000000    -    Type        struct tagMBX_ 
    link_      =000000    -    Member      Pointer to struct tagMBX_ 
    tq_head_   =000008    -    Member      Pointer to struct _tagTCB_ 
    tq_tail_   =000010    -    Member      Pointer to struct _tagTCB_ 
    mq_head_   =000018    -    Member      Pointer to struct tagMSG_ 
    mq_tail_   =000020    -    Member      Pointer to struct tagMSG_ 
    tq_count_  =000028    -    Member      
    mq_size_   =000030    -    Member      
    mq_count_  =000038    -    Member      
    mq_missed_ =000040    -    Member      
    owner_     =000048    -    Member      
    mq_strategy_ =000050    -    Member      Char
    resv_      =000052    -    Member      Array of Byte
_tagTCB_   =000000    -    Type        struct _tagTCB_ 
    regs_      =000000    -    Member      Array of Long
    isp_       =000100    -    Member      Long
    dsp_       =000108    -    Member      Long
    esp_       =000110    -    Member      Long
    ipc_       =000118    -    Member      Long
    dpc_       =000120    -    Member      Long
    epc_       =000128    -    Member      Long
    cr0_       =000130    -    Member      Long
    next_      =000138    -    Member      Pointer to struct _tagTCB_ 
    prev_      =000140    -    Member      Pointer to struct _tagTCB_ 
    mbq_next_  =000148    -    Member      Pointer to struct _tagTCB_ 
    mbq_prev_  =000150    -    Member      Pointer to struct _tagTCB_ 
    sys_stack_ =000158    -    Member      Pointer to Long
    bios_stack_ =000160    -    Member      Pointer to Long
    stack_     =000168    -    Member      Pointer to Long
    timeout_   =000170    -    Member      Long
    hJob_      =000178    -    Member      Pointer to struct _tagJCB_ 
    msgD1_     =000180    -    Member      Long
    msgD2_     =000188    -    Member      Long
    MsgPtr_    =000190    -    Member      Pointer to struct tagMSG_ 
    hWaitMbx_  =000198    -    Member      
    mailboxes_ =0001a0    -    Member      Pointer to struct tagMBX_ 
    priority_  =0001a8    -    Member      Byte
    status_    =0001a9    -    Member      Byte
    affinity_  =0001aa    -    Member      Byte
    number_    =0001ac    -    Member      Char
tagALARM_  =000000    -    Type        struct tagALARM_ 
    next_      =000000    -    Member      Pointer to struct tagALARM_ 
    prev_      =000008    -    Member      Pointer to struct tagALARM_ 
    mbx_       =000010    -    Member      Pointer to struct tagMBX_ 
    msg_       =000018    -    Member      Pointer to struct tagMSG_ 
    BaseTimeout_ =000020    -    Member      
    timeout_   =000028    -    Member      
    repeat_    =000030    -    Member      
    resv_      =000038    -    Member      Array of Byte
