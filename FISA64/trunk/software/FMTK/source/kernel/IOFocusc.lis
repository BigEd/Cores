     1	
     2	typedef unsigned int uint;
     3	typedef __int16 hTCB;
     4	typedef __int8 hJCB;
     5	typedef __int16 hMBX;
     6	typedef __int16 hMSG;
     7	
     8	typedef struct tagMSG align(32) {
     9		unsigned __int16 link;
    10		unsigned __int16 retadr;    // return address
    11		unsigned __int16 tgtadr;    // target address
    12		unsigned __int16 type;
    13		unsigned int d1;            // payload data 1
    14		unsigned int d2;            // payload data 2
    15		unsigned int d3;            // payload data 3
    16	} MSG;
    17	
    18	typedef struct _tagJCB align(2048)
    19	{
    20	    struct _tagJCB *iof_next;
    21	    struct _tagJCB *iof_prev;
    22	    char UserName[32];
    23	    char path[256];
    24	    char exitRunFile[256];
    25	    char commandLine[256];
    26	    unsigned __int32 *pVidMem;
    27	    unsigned __int32 *pVirtVidMem;
    28	    unsigned __int16 VideoRows;
    29	    unsigned __int16 VideoCols;
    30	    unsigned __int16 CursorRow;
    31	    unsigned __int16 CursorCol;
    32	    unsigned __int32 NormAttr;
    33	    __int8 KeyState1;
    34	    __int8 KeyState2;
    35	    __int8 KeybdWaitFlag;
    36	    __int8 KeybdHead;
    37	    __int8 KeybdTail;
    38	    unsigned __int8 KeybdBuffer[32];
    39	    hJCB number;
    40	    hTCB tasks[8];
    41	    hJCB next;
    42	} JCB;
    43	
    44	struct tagMBX;
    45	
    46	typedef struct _tagTCB align(1024) {
    47	    // exception storage area
    48		int regs[32];
    49		int isp;
    50		int dsp;
    51		int esp;
    52		int ipc;
    53		int dpc;
    54		int epc;
    55		int cr0;
    56		// interrupt storage
    57		int iregs[32];
    58		int iisp;
    59		int idsp;
    60		int iesp;
    61		int iipc;
    62		int idpc;
    63		int iepc;
    64		int icr0;
    65		hTCB next;
    66		hTCB prev;
    67		hTCB mbq_next;
    68		hTCB mbq_prev;
    69		int *sys_stack;
    70		int *bios_stack;
    71		int *stack;
    72		__int64 timeout;
    73		MSG msg;
    74		hMBX hMailboxes[4]; // handles of mailboxes owned by task
    75		hMBX hWaitMbx;      // handle of mailbox task is waiting at
    76		hTCB number;
    77		__int8 priority;
    78		__int8 status;
    79		__int8 affinity;
    80		hJCB hJob;
    81		__int64 startTick;
    82		__int64 endTick;
    83		__int64 ticks;
    84		int exception;
    85	} TCB;
    86	
    87	typedef struct tagMBX align(64) {
    88	    hMBX link;
    89		hJCB owner;		// hJcb of owner
    90		hTCB tq_head;
    91		hTCB tq_tail;
    92		hMSG mq_head;
    93		hMSG mq_tail;
    94		char mq_strategy;
    95		byte resv[2];
    96		uint tq_count;
    97		uint mq_size;
    98		uint mq_count;
    99		uint mq_missed;
   100	} MBX;
   101	
   102	typedef struct tagALARM {
   103		struct tagALARM *next;
   104		struct tagALARM *prev;
   105		MBX *mbx;
   106		MSG *msg;
   107		uint BaseTimeout;
   108		uint timeout;
   109		uint repeat;
   110		byte resv[8];		// padding to 64 bytes
   111	} ALARM;
   112	
   113	
   114	// ============================================================================
   115	//        __
   116	//   \\__/ o\    (C) 2012-2015  Robert Finch, Stratford
   117	//    \  __ /    All rights reserved.
   118	//     \/_//     robfinch<remove>@finitron.ca
   119	//       ||
   120	//
   121	// TCB.c
   122	// Task Control Block related functions.
   123	//
   124	// This source file is free software: you can redistribute it and/or modify 
   125	// it under the terms of the GNU Lesser General Public License as published 
   126	// by the Free Software Foundation, either version 3 of the License, or     
   127	// (at your option) any later version.                                      
   128	//                                                                          
   129	// This source file is distributed in the hope that it will be useful,      
   130	// but WITHOUT ANY WARRANTY; without even the implied warranty of           
   131	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
   132	// GNU General Public License for more details.                             
   133	//                                                                          
   134	// You should have received a copy of the GNU General Public License        
   135	// along with this program.  If not, see <http://www.gnu.org/licenses/>.    
   136	//                                                                          
   137	// ============================================================================
   138	//
   139	// JCB functions
   140	JCB *GetJCBPtr();                   // get the JCB pointer of the running task
   141	
   142	// TCB functions
   143	TCB *GetRunningTCBPtr();
   144	hTCB GetRunningTCB();
   145	pascal void SetRunningTCB(hTCB ht);
   146	pascal int chkTCB(TCB *p);
   147	pascal int InsertIntoReadyList(hTCB ht);
   148	pascal int RemoveFromReadyList(hTCB ht);
   149	pascal int InsertIntoTimeoutList(hTCB ht, int to);
   150	pascal int RemoveFromTimeoutList(hTCB ht);
   151	void DumpTaskList();
   152	
   153	pascal void SetBound48(TCB *ps, TCB *pe, int algn);
   154	pascal void SetBound49(JCB *ps, JCB *pe, int algn);
   155	pascal void SetBound50(MBX *ps, MBX *pe, int algn);
   156	pascal void SetBound51(MSG *ps, MSG *pe, int algn);
   157	
   158	pascal void set_vector(unsigned int, unsigned int);
   159	int getCPU();
   160	int GetVecno();          // get the last interrupt vector number
   161	void outb(unsigned int, int);
   162	void outc(unsigned int, int);
   163	void outh(unsigned int, int);
   164	void outw(unsigned int, int);
   165	pascal int LockSemaphore(int *sema, int retries);
   166	pascal void UnlockSemaphore(int *sema);
   167	
   168	// The following causes a privilege violation if called from user mode
   169	
   170	
   171	extern JCB *IOFocusNdx;
   172	extern int IOFocusTbl[4];
   173	extern int iof_sema;
   174	
   175	void ForceIOFocus(JCB *j)
   176	{
   177	    RequestIOFocus(j);   // In case it isn't requested yet.
   178	     if (LockSemaphore(&iof_sema,-1)) {
   179	        if (j != IOFocusNdx) {
   180	            CopyScreenToVirtualScreen();
   181	            j->pVidMem = j->pVirtVidMem;
   182	            IOFocusNdx = j;
   183	            j->pVidMem = 0xFFD00000;
   184	            CopyVirtualScreenToScreen();
   185	        }
   186	        UnlockSemaphore(&iof_sema);
   187	     }
   188	}
   189	
   190	
   191	// First check if it's even possible to switch the focus to another
   192	// task. The I/O focus list could be empty or there may be only a
   193	// single task in the list. In either case it's not possible to
   194	// switch.


*** local symbol table ***

j_         =000018    -    Auto        Pointer to struct _tagJCB_ 



   195	void SwitchIOFocus()
   196	{
   197	     JCB *j, *p;
   198	
   199	     if (LockSemaphore(&iof_sema,-1)) {
   200	         j = IOFocusNdx;
   201	         if (j) {
   202	             p = IOFocusNdx->iof_next;
   203	             if (p <> IOFocusNdx) {
   204	                 if (p) {
   205	                     CopyScreenToVirtualScreen();
   206	                     j->pVidMem = j->pVirtVidMem;
   207	                     IOFocusNdx = p;
   208	                     p->pVidMem = 0xFFD00000;
   209	                     CopyVirtualScreenToScreen();
   210	                 }
   211	             }
   212	         }
   213	        UnlockSemaphore(&iof_sema);
   214	     }
   215	}
   216	
   217	//-----------------------------------------------------------------------------
   218	// The I/O focus list is an array indicating which jobs are requesting the
   219	// I/O focus. The I/O focus is user controlled by pressing ALT-TAB on the
   220	// keyboard.
   221	//-----------------------------------------------------------------------------
   222	


*** local symbol table ***

j_         =fffffff8    -    Auto        Pointer to struct _tagJCB_ 
p_         =fffffff0    -    Auto        Pointer to struct _tagJCB_ 



   223	void RequestIOFocus(JCB *j)
   224	{
   225	     int nj;
   226	     int stat;
   227	
   228	     nj = j->number;
   229	     if (LockSemaphore(&iof_sema,-1)) {
   230	        stat = (IOFocusTbl[0] >> nj) & 1;
   231	        if (!stat) {
   232	           if (IOFocusNdx==null) {
   233	               IOFocusNdx = j;
   234	               j->iof_next = j;
   235	               j->iof_prev = j;
   236	           }
   237	           else {
   238	               j->iof_prev = IOFocusNdx->iof_prev;
   239	               j->iof_next = IOFocusNdx;
   240	               IOFocusNdx->iof_prev->iof_next = j;
   241	               IOFocusNdx->iof_prev = j;
   242	           }
   243	           IOFocusTbl[0] |= (1 << nj);
   244	        }
   245	        UnlockSemaphore(&iof_sema);
   246	     }
   247	}
   248	        
   249	//-----------------------------------------------------------------------------
   250	// Release the IO focus for the current job.
   251	//-----------------------------------------------------------------------------


*** local symbol table ***

j_         =000018    -    Auto        Pointer to struct _tagJCB_ 
nj_        =fffffff8    -    Auto        Long
stat_      =fffffff0    -    Auto        Long



   252	void ReleaseIOFocus()
   253	{
   254	     ForceReleaseIOFocus(GetJCBPtr());
   255	}
   256	
   257	//-----------------------------------------------------------------------------
   258	// Releasing the I/O focus causes the focus to switch if the running job
   259	// had the I/O focus.
   260	// ForceReleaseIOFocus forces the release of the IO focus for a job
   261	// different than the one currently running.
   262	//-----------------------------------------------------------------------------
   263	


*** local symbol table ***




   264	void ForceReleaseIOFocus(JCB * j)
   265	{
   266	     JCB *p;
   267	     
   268	     if (LockSemaphore(&iof_sema,-1)) {
   269	         if (IOFocusTbl[0] & (1 << (int)j->number)) {
   270	             IOFocusTbl[0] &= ~(1 << j->number);
   271	             if (j == IOFocusNdx)
   272	                SwitchIOFocus();
   273	             p = j->iof_next;
   274	             if (p) {
   275	                  if (p <> j) {
   276	                        p->iof_prev = j->iof_prev;
   277	                        j->iof_prev->iof_next = p;
   278	                  } 
   279	                  else {
   280	                       IOFocusNdx = null;
   281	                  }
   282	                  j->iof_next = null;
   283	                  j->iof_prev = null;
   284	             }
   285	         }
   286	        UnlockSemaphore(&iof_sema);
   287	     }
   288	}
   289	


*** local symbol table ***

j_         =000018    -    Auto        Pointer to struct _tagJCB_ 
p_         =fffffff8    -    Auto        Pointer to struct _tagJCB_ 



   290	void CopyVirtualScreenToScreen()
   291	{
   292	     short int *p, *q;
   293	     JCB *j;
   294	     int nn, pos;
   295	
   296	     j = IOFocusNdx;
   297	     p = j->pVidMem;
   298	     q = j->pVirtVidMem;
   299	     nn = j->VideoRows * j->VideoCols;
   300	     for (; nn >= 0; nn--)
   301	         p[nn] = q[nn];
   302	    pos = j->CursorRow * j->VideoCols + j->CursorCol;
   303	    SetVideoReg(11,pos);
   304	}
   305	


*** local symbol table ***

p_         =fffffff8    -    Auto        Pointer to Short
q_         =fffffff0    -    Auto        Pointer to Short
j_         =ffffffe8    -    Auto        Pointer to struct _tagJCB_ 
nn_        =ffffffe0    -    Auto        Long
pos_       =ffffffd8    -    Auto        Long



   306	void CopyScreenToVirtualScreen()
   307	{
   308	     short int *p, *q;
   309	     JCB *j;
   310	     int nn;
   311	
   312	     j = IOFocusNdx;
   313	     p = j->pVidMem;
   314	     q = j->pVirtVidMem;
   315	     nn = j->VideoRows * j->VideoCols;
   316	     for (; nn >= 0; nn--)
   317	         q[nn] = p[nn];
   318	}
   319	


*** local symbol table ***

p_         =fffffff8    -    Auto        Pointer to Short
q_         =fffffff0    -    Auto        Pointer to Short
j_         =ffffffe8    -    Auto        Pointer to struct _tagJCB_ 
nn_        =ffffffe0    -    Auto        Long




 *** global scope typedef symbol table ***

outb_      =001480    -    Global      Function returning 
IOFocusTbl_ =000000    -    External    Array of Long
outc_      =001480    -    Global      Function returning 
uint_      =000000    1   
outh_      =001480    -    Global      Function returning 
IOFocusNdx_ =000000    -    External    Pointer to struct _tagJCB_ 
DumpTaskList_ =001480    -    External    Function returning 
JCB_       =000800    1   struct _tagJCB_ 
outw_      =001480    -    Global      Function returning 
TCB_       =001000    1   struct _tagTCB_ 
GetRunningTCB_ =001480    -    External    Function returning Char
SetRunningTCB_ =001480    -    Global      Function returning 
MSG_       =000020    1   struct tagMSG_ 
MBX_       =001400    1   struct tagMBX_ 
CopyScreenToVirtualScreen_ =001480    -    Global      Function returning 
CopyVirtualScreenToScreen_ =001480    -    Global      Function returning 
SwitchIOFocus_ =001480    -    Global      Function returning 
chkTCB_    =001480    -    Global      Function returning Long
GetRunningTCBPtr_ =001480    -    External    Function returning Pointer to struct _tagTCB_ 
UnlockSemaphore_ =001480    -    Global      Function returning 
GetVecno_  =001480    -    External    Function returning Long
GetJCBPtr_ =001480    -    External    Function returning Pointer to struct _tagJCB_ 
getCPU_    =001480    -    External    Function returning Long
LockSemaphore_ =001480    -    Global      Function returning Long
hJCB_      =00000a    1   Byte
set_vector_ =001480    -    Global      Function returning 
hTCB_      =000008    1   Char
SetVideoReg_ =000000    -    External    Function returning Long
iof_sema_  =000000    -    External    Long
ForceReleaseIOFocus_ =001480    -    Global      Function returning 
hMBX_      =00000c    1   Char
hMSG_      =00000e    1   Char
ReleaseIOFocus_ =001480    -    Global      Function returning 
ALARM_     =001440    1   struct tagALARM_ 
RequestIOFocus_ =001480    -    Global      Function returning 
RemoveFromTimeoutList_ =001480    -    Global      Function returning Long
ForceIOFocus_ =001480    -    Global      Function returning 
SetBound50_ =001480    -    Global      Function returning 
SetBound51_ =001480    -    Global      Function returning 
SetBound48_ =001480    -    Global      Function returning 
SetBound49_ =001480    -    Global      Function returning 
InsertIntoTimeoutList_ =001480    -    Global      Function returning Long
RemoveFromReadyList_ =001480    -    Global      Function returning Long
InsertIntoReadyList_ =001480    -    Global      Function returning Long

 *** structures and unions ***

tagMSG_    =000000    -    Type        struct tagMSG_ 
    link_      =000000    -    Member      
    retadr_    =000002    -    Member      
    tgtadr_    =000004    -    Member      
    type_      =000006    -    Member      
    d1_        =000008    -    Member      
    d2_        =000010    -    Member      
    d3_        =000018    -    Member      
_tagJCB_   =000000    -    Type        struct _tagJCB_ 
    iof_next_  =000000    -    Member      Pointer to struct _tagJCB_ 
    iof_prev_  =000008    -    Member      Pointer to struct _tagJCB_ 
    UserName_  =000010    -    Member      Array of Char
    path_      =000050    -    Member      Array of Char
    exitRunFile_ =000250    -    Member      Array of Char
    commandLine_ =000450    -    Member      Array of Char
    pVidMem_   =000650    -    Member      Pointer to 
    pVirtVidMem_ =000658    -    Member      Pointer to 
    VideoRows_ =000660    -    Member      
    VideoCols_ =000662    -    Member      
    CursorRow_ =000664    -    Member      
    CursorCol_ =000666    -    Member      
    NormAttr_  =000668    -    Member      
    KeyState1_ =00066c    -    Member      Byte
    KeyState2_ =00066d    -    Member      Byte
    KeybdWaitFlag_ =00066e    -    Member      Byte
    KeybdHead_ =00066f    -    Member      Byte
    KeybdTail_ =000670    -    Member      Byte
    KeybdBuffer_ =000671    -    Member      Array of Unsigned Byte
    number_    =000691    -    Member      Byte
    tasks_     =000692    -    Member      Array of Char
    next_      =0006a2    -    Member      Byte
tagMBX_    =000000    -    Type        struct tagMBX_ 
    link_      =000000    -    Member      Char
    owner_     =000002    -    Member      Byte
    tq_head_   =000004    -    Member      Char
    tq_tail_   =000006    -    Member      Char
    mq_head_   =000008    -    Member      Char
    mq_tail_   =00000a    -    Member      Char
    mq_strategy_ =00000c    -    Member      Char
    resv_      =00000e    -    Member      Array of Byte
    tq_count_  =000010    -    Member      
    mq_size_   =000018    -    Member      
    mq_count_  =000020    -    Member      
    mq_missed_ =000028    -    Member      
_tagTCB_   =000000    -    Type        struct _tagTCB_ 
    regs_      =000000    -    Member      Array of Long
    isp_       =000100    -    Member      Long
    dsp_       =000108    -    Member      Long
    esp_       =000110    -    Member      Long
    ipc_       =000118    -    Member      Long
    dpc_       =000120    -    Member      Long
    epc_       =000128    -    Member      Long
    cr0_       =000130    -    Member      Long
    iregs_     =000138    -    Member      Array of Long
    iisp_      =000238    -    Member      Long
    idsp_      =000240    -    Member      Long
    iesp_      =000248    -    Member      Long
    iipc_      =000250    -    Member      Long
    idpc_      =000258    -    Member      Long
    iepc_      =000260    -    Member      Long
    icr0_      =000268    -    Member      Long
    next_      =000270    -    Member      Char
    prev_      =000272    -    Member      Char
    mbq_next_  =000274    -    Member      Char
    mbq_prev_  =000276    -    Member      Char
    sys_stack_ =000278    -    Member      Pointer to Long
    bios_stack_ =000280    -    Member      Pointer to Long
    stack_     =000288    -    Member      Pointer to Long
    timeout_   =000290    -    Member      Long
    msg_       =0002a0    -    Member      struct tagMSG_ 
    hMailboxes_ =0002c0    -    Member      Array of Char
    hWaitMbx_  =0002c8    -    Member      Char
    number_    =0002ca    -    Member      Char
    priority_  =0002cc    -    Member      Byte
    status_    =0002cd    -    Member      Byte
    affinity_  =0002ce    -    Member      Byte
    hJob_      =0002cf    -    Member      Byte
    startTick_ =0002d0    -    Member      Long
    endTick_   =0002d8    -    Member      Long
    ticks_     =0002e0    -    Member      Long
    exception_ =0002e8    -    Member      Long
tagALARM_  =000000    -    Type        struct tagALARM_ 
    next_      =000000    -    Member      Pointer to struct tagALARM_ 
    prev_      =000008    -    Member      Pointer to struct tagALARM_ 
    mbx_       =000010    -    Member      Pointer to struct tagMBX_ 
    msg_       =000018    -    Member      Pointer to struct tagMSG_ 
    BaseTimeout_ =000020    -    Member      
    timeout_   =000028    -    Member      
    repeat_    =000030    -    Member      
    resv_      =000038    -    Member      Array of Byte
