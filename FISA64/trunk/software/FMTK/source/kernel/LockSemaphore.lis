     1	// ============================================================================
     2	//        __
     3	//   \\__/ o\    (C) 2012-2015  Robert Finch, Stratford
     4	//    \  __ /    All rights reserved.
     5	//     \/_//     robfinch<remove>@finitron.ca
     6	//       ||
     7	//
     8	// LockSemaphore.c
     9	//
    10	// This source file is free software: you can redistribute it and/or modify 
    11	// it under the terms of the GNU Lesser General Public License as published 
    12	// by the Free Software Foundation, either version 3 of the License, or     
    13	// (at your option) any later version.                                      
    14	//                                                                          
    15	// This source file is distributed in the hope that it will be useful,      
    16	// but WITHOUT ANY WARRANTY; without even the implied warranty of           
    17	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
    18	// GNU General Public License for more details.                             
    19	//                                                                          
    20	// You should have received a copy of the GNU General Public License        
    21	// along with this program.  If not, see <http://www.gnu.org/licenses/>.    
    22	//                                                                          
    23	// ============================================================================
    24	//
    25	pascal int LockSemaphore(int *sema, int retries)
    26	{
    27	    asm {
    28	        lw      r1,24[bp]
    29	        lw      r2,32[bp]
    30	    .0001:
    31	        beq     r2,.0004  
    32	        subui   r2,r2,#1  
    33	        lwar    r3,[r1]
    34	        beq     r3,.0003            ; branch if free
    35	        cmpu    r2,r3,tr            ; test if already locked by this task
    36	        beq     r2,.0002
    37	        ;chk     r3,r0,#256          ; check if locked by a valid task
    38	    .0003:
    39	        swcr    tr,[r1]             ; try and lock it
    40	        nop                         ; cr0 needs time to update???
    41	        nop
    42	        mfspr   r3,cr0
    43	        bfextu  r3,r3,#36,#36       ; status is bit 36 of cr0
    44	        beq     r3,.0001            ; lock failed, go try again
    45	    .0002:
    46	        ldi     r1,#1
    47	        bra     .0005
    48	    .0004:
    49	        ldi     r1,#0
    50	    .0005:
    51	    }
    52	}


*** local symbol table ***

sema_      =000018    -    Auto        Pointer to Long
retries_   =000020    -    Auto        Long




 *** global scope typedef symbol table ***

LockSemaphore_ =000000    -    Global      Function returning Long

 *** structures and unions ***

