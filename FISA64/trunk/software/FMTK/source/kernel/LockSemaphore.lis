     1	// ============================================================================
     2	//        __
     3	//   \\__/ o\    (C) 2012-2015  Robert Finch, Stratford
     4	//    \  __ /    All rights reserved.
     5	//     \/_//     robfinch<remove>@finitron.ca
     6	//       ||
     7	//
     8	// TCB.c
     9	// Task Control Block related functions.
    10	//
    11	// This source file is free software: you can redistribute it and/or modify 
    12	// it under the terms of the GNU Lesser General Public License as published 
    13	// by the Free Software Foundation, either version 3 of the License, or     
    14	// (at your option) any later version.                                      
    15	//                                                                          
    16	// This source file is distributed in the hope that it will be useful,      
    17	// but WITHOUT ANY WARRANTY; without even the implied warranty of           
    18	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
    19	// GNU General Public License for more details.                             
    20	//                                                                          
    21	// You should have received a copy of the GNU General Public License        
    22	// along with this program.  If not, see <http://www.gnu.org/licenses/>.    
    23	//                                                                          
    24	// ============================================================================
    25	//
    26	pascal int LockSemaphore(int *sema, int retries)
    27	{
    28	    asm {
    29	        lw      r1,24[bp]
    30	        lw      r2,32[bp]
    31	        ; Interrupts should be already enabled or there would be no way for a locked
    32	        ; semaphore to clear. Let's enable interrupts just in case.
    33	        cli
    34	    .0001:
    35	        beq     r2,.0004  
    36	        subui   r2,r2,#1  
    37	        lwar    r3,[r1]
    38	        beq     r3,.0003            ; branch if free
    39	        cmpu    r2,r3,tr            ; test if already locked by this task
    40	        beq     r2,.0002
    41	        chk     r2,r3,b48           ; check if locked by a valid task
    42	        bne     r2,.0001
    43	    .0003:
    44	        swcr    tr,[r1]             ; try and lock it
    45	        nop                         ; cr0 needs time to update???
    46	        nop
    47	        mfspr   r3,cr0
    48	        bfextu  r3,r3,#36,#36       ; status is bit 36 of cr0
    49	        beq     r3,.0001            ; lock failed, go try again
    50	    .0002:
    51	        ldi     r1,#1
    52	        bra     .0005
    53	    .0004:
    54	        ldi     r1,#0
    55	    .0005:
    56	    }
    57	}


*** local symbol table ***

sema_      =000018    -    Auto        Pointer to Long
retries_   =000020    -    Auto        Long




 *** global scope typedef symbol table ***

LockSemaphore_ =000000    -    Global      Function returning Long

 *** structures and unions ***

