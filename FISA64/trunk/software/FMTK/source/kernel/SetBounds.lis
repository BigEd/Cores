     1	// ============================================================================
     2	//        __
     3	//   \\__/ o\    (C) 2012-2015  Robert Finch, Stratford
     4	//    \  __ /    All rights reserved.
     5	//     \/_//     robfinch<remove>@finitron.ca
     6	//       ||
     7	//
     8	// SetBounds.c
     9	// Set processor bounds registers for FMTK.
    10	//
    11	// This source file is free software: you can redistribute it and/or modify 
    12	// it under the terms of the GNU Lesser General Public License as published 
    13	// by the Free Software Foundation, either version 3 of the License, or     
    14	// (at your option) any later version.                                      
    15	//                                                                          
    16	// This source file is distributed in the hope that it will be useful,      
    17	// but WITHOUT ANY WARRANTY; without even the implied warranty of           
    18	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
    19	// GNU General Public License for more details.                             
    20	//                                                                          
    21	// You should have received a copy of the GNU General Public License        
    22	// along with this program.  If not, see <http://www.gnu.org/licenses/>.    
    23	//                                                                          
    24	// ============================================================================
    25	//
    26	
    27	
    28	
    29	
    30	
    31	
    32	// message types
    33	
    34	enum {
    35	     E_Ok = 0,
    36	     E_BadTCBHandle,
    37	     E_BadPriority,
    38	     E_BadCallno,
    39	     E_Arg,
    40	     E_BadMbx,
    41	     E_QueFull,
    42	     E_NoThread,
    43	     E_NotAlloc,
    44	     E_NoMsg,
    45	     E_Timeout,
    46	     E_BadAlarm,
    47	     E_NotOwner,
    48	     E_QueStrategy,
    49	     E_DCBInUse,
    50	     //; Device driver errors
    51	     E_BadDevNum =	0x20,
    52	     E_NoDev,
    53	     E_BadDevOp,
    54	     E_ReadError,
    55	     E_WriteError,
    56	     E_BadBlockNum,
    57	     E_TooManyBlocks,
    58	
    59	     // resource errors
    60	     E_NoMoreMbx =	0x40,
    61	     E_NoMoreMsgBlks,
    62	     E_NoMoreAlarmBlks,
    63	     E_NoMoreTCBs,
    64	     E_NoMem
    65	};
    66	
    67	
    68	typedef unsigned int uint;
    69	typedef __int16 hTCB;
    70	typedef __int8 hJCB;
    71	typedef __int16 hMBX;
    72	typedef __int16 hMSG;
    73	
    74	typedef struct tagMSG align(32) {
    75		unsigned __int16 link;
    76		unsigned __int16 retadr;    // return address
    77		unsigned __int16 tgtadr;    // target address
    78		unsigned __int16 type;
    79		unsigned int d1;            // payload data 1
    80		unsigned int d2;            // payload data 2
    81		unsigned int d3;            // payload data 3
    82	} MSG;
    83	
    84	typedef struct _tagJCB align(2048)
    85	{
    86	    struct _tagJCB *iof_next;
    87	    struct _tagJCB *iof_prev;
    88	    char UserName[32];
    89	    char path[256];
    90	    char exitRunFile[256];
    91	    char commandLine[256];
    92	    unsigned __int32 *pVidMem;
    93	    unsigned __int32 *pVirtVidMem;
    94	    unsigned __int16 VideoRows;
    95	    unsigned __int16 VideoCols;
    96	    unsigned __int16 CursorRow;
    97	    unsigned __int16 CursorCol;
    98	    unsigned __int32 NormAttr;
    99	    __int8 KeybdHead;
   100	    __int8 KeybdTail;
   101	    unsigned __int16 KeybdBuffer[16];
   102	    hJCB number;
   103	} JCB;
   104	
   105	struct tagMBX;
   106	
   107	typedef struct _tagTCB align(1024) {
   108	    // exception storage area
   109		int regs[32];
   110		int isp;
   111		int dsp;
   112		int esp;
   113		int ipc;
   114		int dpc;
   115		int epc;
   116		int cr0;
   117		// interrupt storage
   118		int iregs[32];
   119		int iisp;
   120		int idsp;
   121		int iesp;
   122		int iipc;
   123		int idpc;
   124		int iepc;
   125		int icr0;
   126		hTCB next;
   127		hTCB prev;
   128		hTCB mbq_next;
   129		hTCB mbq_prev;
   130		int *sys_stack;
   131		int *bios_stack;
   132		int *stack;
   133		__int64 timeout;
   134		MSG msg;
   135		hMBX hMailboxes[4]; // handles of mailboxes owned by task
   136		hMBX hWaitMbx;      // handle of mailbox task is waiting at
   137		hTCB number;
   138		__int8 priority;
   139		__int8 status;
   140		__int8 affinity;
   141		hJCB hJob;
   142	} TCB;
   143	
   144	typedef struct tagMBX align(64) {
   145	    hMBX link;
   146		hJCB owner;		// hJcb of owner
   147		hTCB tq_head;
   148		hTCB tq_tail;
   149		hMSG mq_head;
   150		hMSG mq_tail;
   151		char mq_strategy;
   152		byte resv[2];
   153		uint tq_count;
   154		uint mq_size;
   155		uint mq_count;
   156		uint mq_missed;
   157	} MBX;
   158	
   159	typedef struct tagALARM {
   160		struct tagALARM *next;
   161		struct tagALARM *prev;
   162		MBX *mbx;
   163		MSG *msg;
   164		uint BaseTimeout;
   165		uint timeout;
   166		uint repeat;
   167		byte resv[8];		// padding to 64 bytes
   168	} ALARM;
   169	
   170	
   171	// ============================================================================
   172	//        __
   173	//   \\__/ o\    (C) 2012-2015  Robert Finch, Stratford
   174	//    \  __ /    All rights reserved.
   175	//     \/_//     robfinch<remove>@finitron.ca
   176	//       ||
   177	//
   178	// TCB.c
   179	// Task Control Block related functions.
   180	//
   181	// This source file is free software: you can redistribute it and/or modify 
   182	// it under the terms of the GNU Lesser General Public License as published 
   183	// by the Free Software Foundation, either version 3 of the License, or     
   184	// (at your option) any later version.                                      
   185	//                                                                          
   186	// This source file is distributed in the hope that it will be useful,      
   187	// but WITHOUT ANY WARRANTY; without even the implied warranty of           
   188	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
   189	// GNU General Public License for more details.                             
   190	//                                                                          
   191	// You should have received a copy of the GNU General Public License        
   192	// along with this program.  If not, see <http://www.gnu.org/licenses/>.    
   193	//                                                                          
   194	// ============================================================================
   195	//
   196	// JCB functions
   197	JCB *GetJCBPtr();                   // get the JCB pointer of the running task
   198	
   199	// TCB functions
   200	hTCB GetRunningTCB();
   201	pascal void SetRunningTCB(hTCB ht);
   202	pascal int chkTCB(TCB *p);
   203	pascal int InsertIntoReadyList(hTCB ht);
   204	pascal int RemoveFromReadyList(hTCB ht);
   205	pascal int InsertIntoTimeoutList(hTCB ht, int to);
   206	pascal int RemoveFromTimeoutList(hTCB ht);
   207	void DumpTaskList();
   208	
   209	pascal void SetBound48(TCB *ps, TCB *pe, int algn);
   210	pascal void SetBound49(JCB *ps, JCB *pe, int algn);
   211	pascal void SetBound50(MBX *ps, MBX *pe, int algn);
   212	pascal void SetBound51(MSG *ps, MSG *pe, int algn);
   213	
   214	void set_vector(unsigned int, unsigned int);
   215	int getCPU();
   216	int GetVecno();          // get the last interrupt vector number
   217	void outb(unsigned int, int);
   218	void outc(unsigned int, int);
   219	void outh(unsigned int, int);
   220	void outw(unsigned int, int);
   221	pascal int LockSemaphore(int *sema, int retries);
   222	pascal void UnlockSemaphore(int *sema);
   223	
   224	
   225	pascal void SetBound48(TCB *ps, TCB *pe, int algn)
   226	{
   227	     asm {
   228	     lw      r1,24[bp]
   229	     mtspr   112,r1      ; set lower bound
   230	     lw      r1,32[bp]
   231	     mtspr   176,r1      ; set upper bound
   232	     lw      r1,40[bp]
   233	     mtspr   240,r1      ; modulo mask not used
   234	     }
   235	}
   236	


*** local symbol table ***

ps_        =000018    -    Auto        Pointer to struct _tagTCB_ 
pe_        =000020    -    Auto        Pointer to struct _tagTCB_ 
algn_      =000028    -    Auto        Long



   237	pascal void SetBound49(JCB *ps, JCB *pe, int algn)
   238	{
   239	     asm {
   240	     lw      r1,24[bp]
   241	     mtspr   113,r1      ; set lower bound
   242	     lw      r1,32[bp]
   243	     mtspr   177,r1      ; set upper bound
   244	     lw      r1,40[bp]
   245	     mtspr   241,r1      ; modulo mask not used
   246	     }
   247	}
   248	


*** local symbol table ***

ps_        =000018    -    Auto        Pointer to struct _tagJCB_ 
pe_        =000020    -    Auto        Pointer to struct _tagJCB_ 
algn_      =000028    -    Auto        Long



   249	pascal void SetBound50(MBX *ps, MBX *pe, int algn)
   250	{
   251	     asm {
   252	     lw      r1,24[bp]
   253	     mtspr   114,r1      ; set lower bound
   254	     lw      r1,32[bp]
   255	     mtspr   178,r1      ; set upper bound
   256	     lw      r1,40[bp]
   257	     mtspr   242,r1      ; modulo mask not used
   258	     }
   259	}
   260	


*** local symbol table ***

ps_        =000018    -    Auto        Pointer to struct tagMBX_ 
pe_        =000020    -    Auto        Pointer to struct tagMBX_ 
algn_      =000028    -    Auto        Long



   261	pascal void SetBound51(MSG *ps, MSG *pe, int algn)
   262	{
   263	     asm {
   264	     lw      r1,24[bp]
   265	     mtspr   115,r1      ; set lower bound
   266	     lw      r1,32[bp]
   267	     mtspr   179,r1      ; set upper bound
   268	     lw      r1,40[bp]
   269	     mtspr   243,r1      ; modulo mask not used
   270	     }
   271	}
   272	


*** local symbol table ***

ps_        =000018    -    Auto        Pointer to struct tagMSG_ 
pe_        =000020    -    Auto        Pointer to struct tagMSG_ 
algn_      =000028    -    Auto        Long




 *** global scope typedef symbol table ***

E_NoMoreMsgBlks_ =000041    -    Constant    Long
E_NoThread_ =000007    -    Constant    Long
E_WriteError_ =000024    -    Constant    Long
outb_      =001480    -    Global      Function returning 
outc_      =001480    -    Global      Function returning 
E_Arg_     =000004    -    Constant    Long
E_NotAlloc_ =000008    -    Constant    Long
uint_      =000000    1   
outh_      =001480    -    Global      Function returning 
DumpTaskList_ =001480    -    External    Function returning 
E_BadBlockNum_ =000025    -    Constant    Long
E_TooManyBlocks_ =000026    -    Constant    Long
JCB_       =000800    1   struct _tagJCB_ 
outw_      =001480    -    Global      Function returning 
E_BadTCBHandle_ =000001    -    Constant    Long
E_BadMbx_  =000005    -    Constant    Long
TCB_       =001000    1   struct _tagTCB_ 
GetRunningTCB_ =001480    -    External    Function returning Char
E_NotOwner_ =00000c    -    Constant    Long
SetRunningTCB_ =001480    -    Global      Function returning 
MSG_       =000020    1   struct tagMSG_ 
MBX_       =001400    1   struct tagMBX_ 
E_BadDevNum_ =000020    -    Constant    Long
E_BadCallno_ =000003    -    Constant    Long
E_BadPriority_ =000002    -    Constant    Long
chkTCB_    =001480    -    Global      Function returning Long
UnlockSemaphore_ =001480    -    Global      Function returning 
E_NoMoreMbx_ =000040    -    Constant    Long
GetVecno_  =001480    -    External    Function returning Long
E_QueStrategy_ =00000d    -    Constant    Long
GetJCBPtr_ =001480    -    External    Function returning Pointer to struct _tagJCB_ 
getCPU_    =001480    -    External    Function returning Long
E_ReadError_ =000023    -    Constant    Long
LockSemaphore_ =001480    -    Global      Function returning Long
hJCB_      =00000a    1   Byte
set_vector_ =001480    -    Global      Function returning 
E_NoMoreTCBs_ =000043    -    Constant    Long
hTCB_      =000008    1   Char
hMBX_      =00000c    1   Char
hMSG_      =00000e    1   Char
E_DCBInUse_ =00000e    -    Constant    Long
E_Ok_      =000000    -    Constant    Long
E_QueFull_ =000006    -    Constant    Long
E_NoMoreAlarmBlks_ =000042    -    Constant    Long
ALARM_     =001440    1   struct tagALARM_ 
E_NoDev_   =000021    -    Constant    Long
E_NoMem_   =000044    -    Constant    Long
RemoveFromTimeoutList_ =001480    -    Global      Function returning Long
E_NoMsg_   =000009    -    Constant    Long
E_BadDevOp_ =000022    -    Constant    Long
SetBound50_ =001480    -    Global      Function returning 
SetBound51_ =001480    -    Global      Function returning 
E_Timeout_ =00000a    -    Constant    Long
SetBound48_ =001480    -    Global      Function returning 
SetBound49_ =001480    -    Global      Function returning 
InsertIntoTimeoutList_ =001480    -    Global      Function returning Long
RemoveFromReadyList_ =001480    -    Global      Function returning Long
E_BadAlarm_ =00000b    -    Constant    Long
InsertIntoReadyList_ =001480    -    Global      Function returning Long

 *** structures and unions ***

tagMSG_    =000000    -    Type        struct tagMSG_ 
    link_      =000000    -    Member      
    retadr_    =000002    -    Member      
    tgtadr_    =000004    -    Member      
    type_      =000006    -    Member      
    d1_        =000008    -    Member      
    d2_        =000010    -    Member      
    d3_        =000018    -    Member      
_tagJCB_   =000000    -    Type        struct _tagJCB_ 
    iof_next_  =000000    -    Member      Pointer to struct _tagJCB_ 
    iof_prev_  =000008    -    Member      Pointer to struct _tagJCB_ 
    UserName_  =000010    -    Member      Array of Char
    path_      =000050    -    Member      Array of Char
    exitRunFile_ =000250    -    Member      Array of Char
    commandLine_ =000450    -    Member      Array of Char
    pVidMem_   =000650    -    Member      Pointer to 
    pVirtVidMem_ =000658    -    Member      Pointer to 
    VideoRows_ =000660    -    Member      
    VideoCols_ =000662    -    Member      
    CursorRow_ =000664    -    Member      
    CursorCol_ =000666    -    Member      
    NormAttr_  =000668    -    Member      
    KeybdHead_ =00066c    -    Member      Byte
    KeybdTail_ =00066d    -    Member      Byte
    KeybdBuffer_ =00066e    -    Member      Array of 
    number_    =00068e    -    Member      Byte
tagMBX_    =000000    -    Type        struct tagMBX_ 
    link_      =000000    -    Member      Char
    owner_     =000002    -    Member      Byte
    tq_head_   =000004    -    Member      Char
    tq_tail_   =000006    -    Member      Char
    mq_head_   =000008    -    Member      Char
    mq_tail_   =00000a    -    Member      Char
    mq_strategy_ =00000c    -    Member      Char
    resv_      =00000e    -    Member      Array of Byte
    tq_count_  =000010    -    Member      
    mq_size_   =000018    -    Member      
    mq_count_  =000020    -    Member      
    mq_missed_ =000028    -    Member      
_tagTCB_   =000000    -    Type        struct _tagTCB_ 
    regs_      =000000    -    Member      Array of Long
    isp_       =000100    -    Member      Long
    dsp_       =000108    -    Member      Long
    esp_       =000110    -    Member      Long
    ipc_       =000118    -    Member      Long
    dpc_       =000120    -    Member      Long
    epc_       =000128    -    Member      Long
    cr0_       =000130    -    Member      Long
    iregs_     =000138    -    Member      Array of Long
    iisp_      =000238    -    Member      Long
    idsp_      =000240    -    Member      Long
    iesp_      =000248    -    Member      Long
    iipc_      =000250    -    Member      Long
    idpc_      =000258    -    Member      Long
    iepc_      =000260    -    Member      Long
    icr0_      =000268    -    Member      Long
    next_      =000270    -    Member      Char
    prev_      =000272    -    Member      Char
    mbq_next_  =000274    -    Member      Char
    mbq_prev_  =000276    -    Member      Char
    sys_stack_ =000278    -    Member      Pointer to Long
    bios_stack_ =000280    -    Member      Pointer to Long
    stack_     =000288    -    Member      Pointer to Long
    timeout_   =000290    -    Member      Long
    msg_       =0002a0    -    Member      struct tagMSG_ 
    hMailboxes_ =0002c0    -    Member      Array of Char
    hWaitMbx_  =0002c8    -    Member      Char
    number_    =0002ca    -    Member      Char
    priority_  =0002cc    -    Member      Byte
    status_    =0002cd    -    Member      Byte
    affinity_  =0002ce    -    Member      Byte
    hJob_      =0002cf    -    Member      Byte
tagALARM_  =000000    -    Type        struct tagALARM_ 
    next_      =000000    -    Member      Pointer to struct tagALARM_ 
    prev_      =000008    -    Member      Pointer to struct tagALARM_ 
    mbx_       =000010    -    Member      Pointer to struct tagMBX_ 
    msg_       =000018    -    Member      Pointer to struct tagMSG_ 
    BaseTimeout_ =000020    -    Member      
    timeout_   =000028    -    Member      
    repeat_    =000030    -    Member      
    resv_      =000038    -    Member      Array of Byte
