     1	
     2	typedef unsigned int uint;
     3	typedef __int16 hTCB;
     4	typedef __int8 hJCB;
     5	typedef __int16 hMBX;
     6	typedef __int16 hMSG;
     7	
     8	typedef struct tagMSG align(32) {
     9		unsigned __int16 link;
    10		unsigned __int16 retadr;    // return address
    11		unsigned __int16 tgtadr;    // target address
    12		unsigned __int16 type;
    13		unsigned int d1;            // payload data 1
    14		unsigned int d2;            // payload data 2
    15		unsigned int d3;            // payload data 3
    16	} MSG;
    17	
    18	typedef struct _tagJCB align(2048)
    19	{
    20	    struct _tagJCB *iof_next;
    21	    struct _tagJCB *iof_prev;
    22	    char UserName[32];
    23	    char path[256];
    24	    char exitRunFile[256];
    25	    char commandLine[256];
    26	    unsigned __int32 *pVidMem;
    27	    unsigned __int32 *pVirtVidMem;
    28	    unsigned __int16 VideoRows;
    29	    unsigned __int16 VideoCols;
    30	    unsigned __int16 CursorRow;
    31	    unsigned __int16 CursorCol;
    32	    unsigned __int32 NormAttr;
    33	    __int8 KeyState1;
    34	    __int8 KeyState2;
    35	    __int8 KeybdWaitFlag;
    36	    __int8 KeybdHead;
    37	    __int8 KeybdTail;
    38	    unsigned __int16 KeybdBuffer[16];
    39	    hJCB number;
    40	} JCB;
    41	
    42	struct tagMBX;
    43	
    44	typedef struct _tagTCB align(1024) {
    45	    // exception storage area
    46		int regs[32];
    47		int isp;
    48		int dsp;
    49		int esp;
    50		int ipc;
    51		int dpc;
    52		int epc;
    53		int cr0;
    54		// interrupt storage
    55		int iregs[32];
    56		int iisp;
    57		int idsp;
    58		int iesp;
    59		int iipc;
    60		int idpc;
    61		int iepc;
    62		int icr0;
    63		hTCB next;
    64		hTCB prev;
    65		hTCB mbq_next;
    66		hTCB mbq_prev;
    67		int *sys_stack;
    68		int *bios_stack;
    69		int *stack;
    70		__int64 timeout;
    71		MSG msg;
    72		hMBX hMailboxes[4]; // handles of mailboxes owned by task
    73		hMBX hWaitMbx;      // handle of mailbox task is waiting at
    74		hTCB number;
    75		__int8 priority;
    76		__int8 status;
    77		__int8 affinity;
    78		hJCB hJob;
    79		__int64 startTick;
    80		__int64 endTick;
    81		__int64 ticks;
    82	} TCB;
    83	
    84	typedef struct tagMBX align(64) {
    85	    hMBX link;
    86		hJCB owner;		// hJcb of owner
    87		hTCB tq_head;
    88		hTCB tq_tail;
    89		hMSG mq_head;
    90		hMSG mq_tail;
    91		char mq_strategy;
    92		byte resv[2];
    93		uint tq_count;
    94		uint mq_size;
    95		uint mq_count;
    96		uint mq_missed;
    97	} MBX;
    98	
    99	typedef struct tagALARM {
   100		struct tagALARM *next;
   101		struct tagALARM *prev;
   102		MBX *mbx;
   103		MSG *msg;
   104		uint BaseTimeout;
   105		uint timeout;
   106		uint repeat;
   107		byte resv[8];		// padding to 64 bytes
   108	} ALARM;
   109	
   110	
   111	// ============================================================================
   112	//        __
   113	//   \\__/ o\    (C) 2012-2015  Robert Finch, Stratford
   114	//    \  __ /    All rights reserved.
   115	//     \/_//     robfinch<remove>@finitron.ca
   116	//       ||
   117	//
   118	// TCB.c
   119	// Task Control Block related functions.
   120	//
   121	// This source file is free software: you can redistribute it and/or modify 
   122	// it under the terms of the GNU Lesser General Public License as published 
   123	// by the Free Software Foundation, either version 3 of the License, or     
   124	// (at your option) any later version.                                      
   125	//                                                                          
   126	// This source file is distributed in the hope that it will be useful,      
   127	// but WITHOUT ANY WARRANTY; without even the implied warranty of           
   128	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
   129	// GNU General Public License for more details.                             
   130	//                                                                          
   131	// You should have received a copy of the GNU General Public License        
   132	// along with this program.  If not, see <http://www.gnu.org/licenses/>.    
   133	//                                                                          
   134	// ============================================================================
   135	//
   136	// JCB functions
   137	JCB *GetJCBPtr();                   // get the JCB pointer of the running task
   138	
   139	// TCB functions
   140	TCB *GetRunningTCBPtr();
   141	hTCB GetRunningTCB();
   142	pascal void SetRunningTCB(hTCB ht);
   143	pascal int chkTCB(TCB *p);
   144	pascal int InsertIntoReadyList(hTCB ht);
   145	pascal int RemoveFromReadyList(hTCB ht);
   146	pascal int InsertIntoTimeoutList(hTCB ht, int to);
   147	pascal int RemoveFromTimeoutList(hTCB ht);
   148	void DumpTaskList();
   149	
   150	pascal void SetBound48(TCB *ps, TCB *pe, int algn);
   151	pascal void SetBound49(JCB *ps, JCB *pe, int algn);
   152	pascal void SetBound50(MBX *ps, MBX *pe, int algn);
   153	pascal void SetBound51(MSG *ps, MSG *pe, int algn);
   154	
   155	void set_vector(unsigned int, unsigned int);
   156	int getCPU();
   157	int GetVecno();          // get the last interrupt vector number
   158	void outb(unsigned int, int);
   159	void outc(unsigned int, int);
   160	void outh(unsigned int, int);
   161	void outw(unsigned int, int);
   162	pascal int LockSemaphore(int *sema, int retries);
   163	pascal void UnlockSemaphore(int *sema);
   164	
   165	// The following causes a privilege violation if called from user mode
   166	
   167	
   168	// The text screen memory can only handle half-word transfers, hence the use
   169	// of memsetH, memcpyH.
   170	
   171	extern int IOFocusNdx;
   172	
   173	short int *GetScreenLocation()
   174	{
   175	      return GetJCBPtr()->pVidMem;
   176	}
   177	


*** local symbol table ***




   178	short int GetCurrAttr()
   179	{
   180	      return GetJCBPtr()->NormAttr;
   181	}
   182	


*** local symbol table ***




   183	void SetCurrAttr(short int attr)
   184	{
   185	     GetJCBPtr()->NormAttr = attr & 0xFFFFFC00;
   186	}
   187	


*** local symbol table ***

attr_      =000018    -    Auto        Short



   188	void SetVideoReg(int regno, int val)
   189	{
   190	     asm {
   191	         lw   r1,24[bp]
   192	         lw   r2,32[bp]
   193	         asl  r1,r1,#2
   194	         sh   r2,$FFDA0000[r1]
   195	     }
   196	}
   197	


*** local symbol table ***

regno_     =000018    -    Auto        Long
val_       =000020    -    Auto        Long



   198	void SetCursorPos(int row, int col)
   199	{
   200	    JCB *j;
   201	
   202	    j = GetJCBPtr();
   203	    j->CursorCol = col;
   204	    j->CursorRow = row;
   205	    UpdateCursorPos();
   206	}
   207	


*** local symbol table ***

row_       =000018    -    Auto        Long
col_       =000020    -    Auto        Long
j_         =fffffff8    -    Auto        Pointer to struct _tagJCB_ 



   208	void SetCursorCol(int col)
   209	{
   210	    JCB *j;
   211	
   212	    j = GetJCBPtr();
   213	    j->CursorCol = col;
   214	    UpdateCursorPos();
   215	}
   216	


*** local symbol table ***

col_       =000018    -    Auto        Long
j_         =fffffff8    -    Auto        Pointer to struct _tagJCB_ 



   217	int GetCursorPos()
   218	{
   219	    JCB *j;
   220	
   221	    j = GetJCBPtr();
   222	    return j->CursorCol | (j->CursorRow << 8);
   223	}
   224	


*** local symbol table ***

j_         =fffffff8    -    Auto        Pointer to struct _tagJCB_ 



   225	int GetTextCols()
   226	{
   227	    return GetJCBPtr()->VideoCols;
   228	}
   229	


*** local symbol table ***




   230	int GetTextRows()
   231	{
   232	    return GetJCBPtr()->VideoRows;
   233	}
   234	


*** local symbol table ***




   235	char AsciiToScreen(char ch)
   236	{
   237	     if (ch==0x5B)
   238	         return 0x1B;
   239	     if (ch==0x5D)
   240	         return 0x1D;
   241	     ch &= 0xFF;
   242	     ch |= 0x100;
   243	     if (!(ch & 0x20))
   244	         return ch;
   245	     if (!(ch & 0x40))
   246	         return ch;
   247	     ch = ch & 0x19F;
   248	     return ch;
   249	}
   250	


*** local symbol table ***

ch_        =000018    -    Auto        Char



   251	char ScreenToAscii(char ch)
   252	{
   253	     ch &= 0xFF;
   254	     if (ch==0x1B)
   255	        return 0x5B;
   256	     if (ch==0x1D)
   257	        return 0x5D;
   258	     if (ch < 27)
   259	        ch += 0x60;
   260	     return ch;
   261	}
   262	    
   263	


*** local symbol table ***

ch_        =000018    -    Auto        Char



   264	void UpdateCursorPos()
   265	{
   266	    JCB *j;
   267	    int pos;
   268	
   269	    j = GetJCBPtr();
   270	//    if (j == IOFocusNdx) {
   271	       pos = j->CursorRow * j->VideoCols + j->CursorCol;
   272	       SetVideoReg(11,pos);
   273	//    }
   274	}
   275	


*** local symbol table ***

j_         =fffffff8    -    Auto        Pointer to struct _tagJCB_ 
pos_       =fffffff0    -    Auto        Long



   276	void HomeCursor()
   277	{
   278	    JCB *j;
   279	
   280	    j = GetJCBPtr();
   281	    j->CursorCol = 0;
   282	    j->CursorRow = 0;
   283	    UpdateCursorPos();
   284	}
   285	


*** local symbol table ***

j_         =fffffff8    -    Auto        Pointer to struct _tagJCB_ 



   286	short int *CalcScreenLocation()
   287	{
   288	    JCB *j;
   289	    int pos;
   290	
   291	    j = GetJCBPtr();
   292	    pos = j->CursorRow * j->VideoCols + j->CursorCol;
   293	//    if (j == IOFocusNdx) {
   294	       SetVideoReg(11,pos);
   295	//    }
   296	    return GetScreenLocation()+pos;
   297	}
   298	


*** local symbol table ***

j_         =fffffff8    -    Auto        Pointer to struct _tagJCB_ 
pos_       =fffffff0    -    Auto        Long



   299	void ClearScreen()
   300	{
   301	     short int *p;
   302	     int nn;
   303	     int mx;
   304	     JCB *j;
   305	     short int vc;
   306	     
   307	     j = GetJCBPtr();
   308	     p = GetScreenLocation();
   309	     // Compiler did a byte multiply generating a single byte result first
   310	     // before assigning it to mx. The (int) casts force the compiler to use
   311	     // an int result.
   312	     mx = (int)j->VideoRows * (int)j->VideoCols;
   313	     vc = GetCurrAttr() | AsciiToScreen(' ');
   314	     memsetH(p, vc, mx);
   315	}
   316	


*** local symbol table ***

p_         =fffffff8    -    Auto        Pointer to Short
nn_        =fffffff0    -    Auto        Long
mx_        =ffffffe8    -    Auto        Long
j_         =ffffffe0    -    Auto        Pointer to struct _tagJCB_ 
vc_        =ffffffdc    -    Auto        Short



   317	void ClearBmpScreen()
   318	{
   319	     memsetW(0x400000, 0, 0x80000);
   320	}
   321	


*** local symbol table ***




   322	void BlankLine(int row)
   323	{
   324	     short int *p;
   325	     int nn;
   326	     int mx;
   327	     JCB *j;
   328	     short int vc;
   329	     
   330	     j = GetJCBPtr();
   331	     p = GetScreenLocation();
   332	     p = p + (int)j->VideoCols * row;
   333	     vc = GetCurrAttr() | AsciiToScreen(' ');
   334	     memsetH(p, vc, j->VideoCols);
   335	}
   336	
   337	// ScrollUp will call BlankLine. Scrollup is written in assembler for
   338	// performance reasons and is included as part of the video BIOS. Note the
   339	// BIOS cannot be called with SYS #10 because the bios isn't re-entrant and
   340	// the bios is already active from putch().


*** local symbol table ***

row_       =000018    -    Auto        Long
p_         =fffffff8    -    Auto        Pointer to Short
nn_        =fffffff0    -    Auto        Long
mx_        =ffffffe8    -    Auto        Long
j_         =ffffffe0    -    Auto        Pointer to struct _tagJCB_ 
vc_        =ffffffdc    -    Auto        Short



   341	naked ScrollUp()
   342	{
   343	     asm {
   344	         push  lr
   345	         bsr   VBScrollUp
   346	         rts
   347	     }
   348	}
   349	


*** local symbol table ***




   350	void IncrementCursorRow()
   351	{
   352	     JCB *j;
   353	     
   354	     j = GetJCBPtr();
   355	     j->CursorRow++;
   356	     if (j->CursorRow < j->VideoRows) {
   357	         UpdateCursorPos();
   358	         return;
   359	     }
   360	     j->CursorRow--;
   361	     UpdateCursorPos();
   362	     ScrollUp();
   363	}
   364	


*** local symbol table ***

j_         =fffffff8    -    Auto        Pointer to struct _tagJCB_ 



   365	void IncrementCursorPos()
   366	{
   367	     JCB *j;
   368	     
   369	     j = GetJCBPtr();
   370	     j->CursorCol++;
   371	     if (j->CursorCol < j->VideoCols) {
   372	         UpdateCursorPos();
   373	         return;
   374	     }
   375	     j->CursorCol = 0;
   376	     IncrementCursorRow();
   377	}
   378	


*** local symbol table ***

j_         =fffffff8    -    Auto        Pointer to struct _tagJCB_ 



   379	void DisplayChar(char ch)
   380	{
   381	     short int *p;
   382	     int nn;
   383	     JCB *j;
   384	
   385	     j = GetJCBPtr();
   386	     switch(ch) {
   387	     case '\r':  j->CursorCol = 0; UpdateCursorPos(); break;
   388	     case '\n':  IncrementCursorRow(); break;
   389	     case 0x91:
   390	          if (j->CursorCol < j->VideoCols-1) {
   391	             j->CursorCol++;
   392	             UpdateCursorPos();
   393	          }
   394	          break;
   395	     case 0x90:
   396	          if (j->CursorRow > 0) {
   397	               j->CursorRow--;
   398	               UpdateCursorPos();
   399	          }
   400	          break;
   401	     case 0x93:
   402	          if (j->CursorCol > 0) {
   403	               j->CursorCol--;
   404	               UpdateCursorPos();
   405	          }
   406	          break;
   407	     case 0x92:
   408	          if (j->CursorRow < j->VideoRows-1) {
   409	             j->CursorRow++;
   410	             UpdateCursorPos();
   411	          }
   412	          break;
   413	     case 0x94:
   414	          if (j->CursorCol==0)
   415	             j->CursorRow = 0;
   416	          j->CursorCol = 0;
   417	          UpdateCursorPos();
   418	          break;
   419	     case 0x99:  // delete
   420	          p = CalcScreenLocation();
   421	          for (nn = j->CursorCol; nn < j->VideoCols-1; nn++) {
   422	              p[nn-j->CursorCol] = p[nn+1-j->CursorCol];
   423	          }
   424	          p[nn-j->CursorCol] = GetCurrAttr() | AsciiToScreen(' ');
   425	          break;
   426	     case 0x08: // backspace
   427	          if (j->CursorCol > 0) {
   428	              j->CursorCol--;
   429	              p = CalcScreenLocation();
   430	              for (nn = j->CursorCol; nn < j->VideoCols-1; nn++) {
   431	                  p[nn-j->CursorCol] = p[nn+1-j->CursorCol];
   432	              }
   433	              p[nn-j->CursorCol] = GetCurrAttr() | AsciiToScreen(' ');
   434	          }
   435	          break;
   436	     case 0x0C:   // CTRL-L
   437	          ClearScreen();
   438	          HomeCursor();
   439	          break;
   440	     case '\t':
   441	          DisplayChar(' ');
   442	          DisplayChar(' ');
   443	          DisplayChar(' ');
   444	          DisplayChar(' ');
   445	          break;
   446	     default:
   447	          p = CalcScreenLocation();
   448	          *p = GetCurrAttr() | AsciiToScreen(ch);
   449	          IncrementCursorPos();
   450	          break;
   451	     }
   452	}
   453	


*** local symbol table ***

ch_        =000018    -    Auto        Char
p_         =fffffff8    -    Auto        Pointer to Short
nn_        =fffffff0    -    Auto        Long
j_         =ffffffe8    -    Auto        Pointer to struct _tagJCB_ 



   454	void CRLF()
   455	{
   456	     DisplayChar('\r');
   457	     DisplayChar('\n');
   458	}
   459	


*** local symbol table ***




   460	void DisplayString(char *s)
   461	{
   462	     while (*s) { DisplayChar(*s); s++; }
   463	}
   464	


*** local symbol table ***

s_         =000018    -    Auto        Pointer to Char



   465	void DisplayStringCRLF(char *s)
   466	{
   467	     DisplayString(s);
   468	     CRLF();
   469	}
   470	


*** local symbol table ***

s_         =000018    -    Auto        Pointer to Char




 *** global scope typedef symbol table ***

GetScreenLocation_ =001480    -    Global      Function returning Pointer to Short
outb_      =001480    -    Global      Function returning 
outc_      =001480    -    Global      Function returning 
uint_      =000000    1   
outh_      =001480    -    Global      Function returning 
IOFocusNdx_ =000000    -    External    Long
DumpTaskList_ =001480    -    External    Function returning 
SetCursorCol_ =001480    -    Global      Function returning 
JCB_       =000800    1   struct _tagJCB_ 
outw_      =001480    -    Global      Function returning 
GetCursorPos_ =001480    -    Global      Function returning Long
memsetH_   =000000    -    External    Function returning Long
TCB_       =001000    1   struct _tagTCB_ 
GetRunningTCB_ =001480    -    External    Function returning Char
SetCursorPos_ =001480    -    Global      Function returning 
memsetW_   =000000    -    External    Function returning Long
SetRunningTCB_ =001480    -    Global      Function returning 
MSG_       =000020    1   struct tagMSG_ 
MBX_       =001400    1   struct tagMBX_ 
HomeCursor_ =001480    -    Global      Function returning 
AsciiToScreen_ =001480    -    Global      Function returning Char
ScreenToAscii_ =001480    -    Global      Function returning Char
CalcScreenLocation_ =001480    -    Global      Function returning Pointer to Short
chkTCB_    =001480    -    Global      Function returning Long
GetRunningTCBPtr_ =001480    -    External    Function returning Pointer to struct _tagTCB_ 
UnlockSemaphore_ =001480    -    Global      Function returning 
UpdateCursorPos_ =001480    -    Global      Function returning 
GetVecno_  =001480    -    External    Function returning Long
GetJCBPtr_ =001480    -    External    Function returning Pointer to struct _tagJCB_ 
CRLF_      =001480    -    Global      Function returning 
getCPU_    =001480    -    External    Function returning Long
LockSemaphore_ =001480    -    Global      Function returning Long
ScrollUp_  =001480    -    Global      Function returning Long
hJCB_      =00000a    1   Byte
set_vector_ =001480    -    Global      Function returning 
hTCB_      =000008    1   Char
SetVideoReg_ =001480    -    Global      Function returning 
ClearScreen_ =001480    -    Global      Function returning 
DisplayString_ =001480    -    Global      Function returning 
hMBX_      =00000c    1   Char
hMSG_      =00000e    1   Char
DisplayChar_ =001480    -    Global      Function returning 
IncrementCursorPos_ =001480    -    Global      Function returning 
GetTextCols_ =001480    -    Global      Function returning Long
GetCurrAttr_ =001480    -    Global      Function returning Short
IncrementCursorRow_ =001480    -    Global      Function returning 
SetCurrAttr_ =001480    -    Global      Function returning 
ClearBmpScreen_ =001480    -    Global      Function returning 
ALARM_     =001440    1   struct tagALARM_ 
GetTextRows_ =001480    -    Global      Function returning Long
BlankLine_ =001480    -    Global      Function returning 
DisplayStringCRLF_ =001480    -    Global      Function returning 
RemoveFromTimeoutList_ =001480    -    Global      Function returning Long
SetBound50_ =001480    -    Global      Function returning 
SetBound51_ =001480    -    Global      Function returning 
SetBound48_ =001480    -    Global      Function returning 
SetBound49_ =001480    -    Global      Function returning 
InsertIntoTimeoutList_ =001480    -    Global      Function returning Long
RemoveFromReadyList_ =001480    -    Global      Function returning Long
InsertIntoReadyList_ =001480    -    Global      Function returning Long

 *** structures and unions ***

tagMSG_    =000000    -    Type        struct tagMSG_ 
    link_      =000000    -    Member      
    retadr_    =000002    -    Member      
    tgtadr_    =000004    -    Member      
    type_      =000006    -    Member      
    d1_        =000008    -    Member      
    d2_        =000010    -    Member      
    d3_        =000018    -    Member      
_tagJCB_   =000000    -    Type        struct _tagJCB_ 
    iof_next_  =000000    -    Member      Pointer to struct _tagJCB_ 
    iof_prev_  =000008    -    Member      Pointer to struct _tagJCB_ 
    UserName_  =000010    -    Member      Array of Char
    path_      =000050    -    Member      Array of Char
    exitRunFile_ =000250    -    Member      Array of Char
    commandLine_ =000450    -    Member      Array of Char
    pVidMem_   =000650    -    Member      Pointer to 
    pVirtVidMem_ =000658    -    Member      Pointer to 
    VideoRows_ =000660    -    Member      
    VideoCols_ =000662    -    Member      
    CursorRow_ =000664    -    Member      
    CursorCol_ =000666    -    Member      
    NormAttr_  =000668    -    Member      
    KeyState1_ =00066c    -    Member      Byte
    KeyState2_ =00066d    -    Member      Byte
    KeybdWaitFlag_ =00066e    -    Member      Byte
    KeybdHead_ =00066f    -    Member      Byte
    KeybdTail_ =000670    -    Member      Byte
    KeybdBuffer_ =000672    -    Member      Array of 
    number_    =000692    -    Member      Byte
tagMBX_    =000000    -    Type        struct tagMBX_ 
    link_      =000000    -    Member      Char
    owner_     =000002    -    Member      Byte
    tq_head_   =000004    -    Member      Char
    tq_tail_   =000006    -    Member      Char
    mq_head_   =000008    -    Member      Char
    mq_tail_   =00000a    -    Member      Char
    mq_strategy_ =00000c    -    Member      Char
    resv_      =00000e    -    Member      Array of Byte
    tq_count_  =000010    -    Member      
    mq_size_   =000018    -    Member      
    mq_count_  =000020    -    Member      
    mq_missed_ =000028    -    Member      
_tagTCB_   =000000    -    Type        struct _tagTCB_ 
    regs_      =000000    -    Member      Array of Long
    isp_       =000100    -    Member      Long
    dsp_       =000108    -    Member      Long
    esp_       =000110    -    Member      Long
    ipc_       =000118    -    Member      Long
    dpc_       =000120    -    Member      Long
    epc_       =000128    -    Member      Long
    cr0_       =000130    -    Member      Long
    iregs_     =000138    -    Member      Array of Long
    iisp_      =000238    -    Member      Long
    idsp_      =000240    -    Member      Long
    iesp_      =000248    -    Member      Long
    iipc_      =000250    -    Member      Long
    idpc_      =000258    -    Member      Long
    iepc_      =000260    -    Member      Long
    icr0_      =000268    -    Member      Long
    next_      =000270    -    Member      Char
    prev_      =000272    -    Member      Char
    mbq_next_  =000274    -    Member      Char
    mbq_prev_  =000276    -    Member      Char
    sys_stack_ =000278    -    Member      Pointer to Long
    bios_stack_ =000280    -    Member      Pointer to Long
    stack_     =000288    -    Member      Pointer to Long
    timeout_   =000290    -    Member      Long
    msg_       =0002a0    -    Member      struct tagMSG_ 
    hMailboxes_ =0002c0    -    Member      Array of Char
    hWaitMbx_  =0002c8    -    Member      Char
    number_    =0002ca    -    Member      Char
    priority_  =0002cc    -    Member      Byte
    status_    =0002cd    -    Member      Byte
    affinity_  =0002ce    -    Member      Byte
    hJob_      =0002cf    -    Member      Byte
    startTick_ =0002d0    -    Member      Long
    endTick_   =0002d8    -    Member      Long
    ticks_     =0002e0    -    Member      Long
tagALARM_  =000000    -    Type        struct tagALARM_ 
    next_      =000000    -    Member      Pointer to struct tagALARM_ 
    prev_      =000008    -    Member      Pointer to struct tagALARM_ 
    mbx_       =000010    -    Member      Pointer to struct tagMBX_ 
    msg_       =000018    -    Member      Pointer to struct tagMSG_ 
    BaseTimeout_ =000020    -    Member      
    timeout_   =000028    -    Member      
    repeat_    =000030    -    Member      
    resv_      =000038    -    Member      Array of Byte
