     1	
     2	typedef unsigned int uint;
     3	typedef __int16 hTCB;
     4	typedef __int8 hJCB;
     5	typedef __int16 hMBX;
     6	typedef __int16 hMSG;
     7	
     8	typedef struct tagMSG align(32) {
     9		unsigned __int16 link;
    10		unsigned __int16 retadr;    // return address
    11		unsigned __int16 tgtadr;    // target address
    12		unsigned __int16 type;
    13		unsigned int d1;            // payload data 1
    14		unsigned int d2;            // payload data 2
    15		unsigned int d3;            // payload data 3
    16	} MSG;
    17	
    18	typedef struct _tagJCB align(2048)
    19	{
    20	    struct _tagJCB *iof_next;
    21	    struct _tagJCB *iof_prev;
    22	    char UserName[32];
    23	    char path[256];
    24	    char exitRunFile[256];
    25	    char commandLine[256];
    26	    unsigned __int32 *pVidMem;
    27	    unsigned __int32 *pVirtVidMem;
    28	    unsigned __int16 VideoRows;
    29	    unsigned __int16 VideoCols;
    30	    unsigned __int16 CursorRow;
    31	    unsigned __int16 CursorCol;
    32	    unsigned __int32 NormAttr;
    33	    __int8 KeyState1;
    34	    __int8 KeyState2;
    35	    __int8 KeybdWaitFlag;
    36	    __int8 KeybdHead;
    37	    __int8 KeybdTail;
    38	    unsigned __int8 KeybdBuffer[32];
    39	    hJCB number;
    40	    hTCB tasks[8];
    41	    hJCB next;
    42	} JCB;
    43	
    44	struct tagMBX;
    45	
    46	typedef struct _tagTCB align(1024) {
    47	    // exception storage area
    48		int regs[32];
    49		int isp;
    50		int dsp;
    51		int esp;
    52		int ipc;
    53		int dpc;
    54		int epc;
    55		int cr0;
    56		// interrupt storage
    57		int iregs[32];
    58		int iisp;
    59		int idsp;
    60		int iesp;
    61		int iipc;
    62		int idpc;
    63		int iepc;
    64		int icr0;
    65		hTCB next;
    66		hTCB prev;
    67		hTCB mbq_next;
    68		hTCB mbq_prev;
    69		int *sys_stack;
    70		int *bios_stack;
    71		int *stack;
    72		__int64 timeout;
    73		MSG msg;
    74		hMBX hMailboxes[4]; // handles of mailboxes owned by task
    75		hMBX hWaitMbx;      // handle of mailbox task is waiting at
    76		hTCB number;
    77		__int8 priority;
    78		__int8 status;
    79		__int8 affinity;
    80		hJCB hJob;
    81		__int64 startTick;
    82		__int64 endTick;
    83		__int64 ticks;
    84		int exception;
    85	} TCB;
    86	
    87	typedef struct tagMBX align(64) {
    88	    hMBX link;
    89		hJCB owner;		// hJcb of owner
    90		hTCB tq_head;
    91		hTCB tq_tail;
    92		hMSG mq_head;
    93		hMSG mq_tail;
    94		char mq_strategy;
    95		byte resv[2];
    96		uint tq_count;
    97		uint mq_size;
    98		uint mq_count;
    99		uint mq_missed;
   100	} MBX;
   101	
   102	typedef struct tagALARM {
   103		struct tagALARM *next;
   104		struct tagALARM *prev;
   105		MBX *mbx;
   106		MSG *msg;
   107		uint BaseTimeout;
   108		uint timeout;
   109		uint repeat;
   110		byte resv[8];		// padding to 64 bytes
   111	} ALARM;
   112	
   113	
   114	// ============================================================================
   115	//        __
   116	//   \\__/ o\    (C) 2012-2015  Robert Finch, Stratford
   117	//    \  __ /    All rights reserved.
   118	//     \/_//     robfinch<remove>@finitron.ca
   119	//       ||
   120	//
   121	// TCB.c
   122	// Task Control Block related functions.
   123	//
   124	// This source file is free software: you can redistribute it and/or modify 
   125	// it under the terms of the GNU Lesser General Public License as published 
   126	// by the Free Software Foundation, either version 3 of the License, or     
   127	// (at your option) any later version.                                      
   128	//                                                                          
   129	// This source file is distributed in the hope that it will be useful,      
   130	// but WITHOUT ANY WARRANTY; without even the implied warranty of           
   131	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
   132	// GNU General Public License for more details.                             
   133	//                                                                          
   134	// You should have received a copy of the GNU General Public License        
   135	// along with this program.  If not, see <http://www.gnu.org/licenses/>.    
   136	//                                                                          
   137	// ============================================================================
   138	//
   139	// JCB functions
   140	JCB *GetJCBPtr();                   // get the JCB pointer of the running task
   141	
   142	// TCB functions
   143	TCB *GetRunningTCBPtr();
   144	hTCB GetRunningTCB();
   145	pascal void SetRunningTCB(hTCB ht);
   146	pascal int chkTCB(TCB *p);
   147	pascal int InsertIntoReadyList(hTCB ht);
   148	pascal int RemoveFromReadyList(hTCB ht);
   149	pascal int InsertIntoTimeoutList(hTCB ht, int to);
   150	pascal int RemoveFromTimeoutList(hTCB ht);
   151	void DumpTaskList();
   152	
   153	pascal void SetBound48(TCB *ps, TCB *pe, int algn);
   154	pascal void SetBound49(JCB *ps, JCB *pe, int algn);
   155	pascal void SetBound50(MBX *ps, MBX *pe, int algn);
   156	pascal void SetBound51(MSG *ps, MSG *pe, int algn);
   157	
   158	pascal void set_vector(unsigned int, unsigned int);
   159	int getCPU();
   160	int GetVecno();          // get the last interrupt vector number
   161	void outb(unsigned int, int);
   162	void outc(unsigned int, int);
   163	void outh(unsigned int, int);
   164	void outw(unsigned int, int);
   165	pascal int LockSemaphore(int *sema, int retries);
   166	pascal void UnlockSemaphore(int *sema);
   167	
   168	// The following causes a privilege violation if called from user mode
   169	
   170	
   171	// The text screen memory can only handle half-word transfers, hence the use
   172	// of memsetH, memcpyH.
   173	
   174	extern int IOFocusNdx;
   175	
   176	short int *GetScreenLocation()
   177	{
   178	      return GetJCBPtr()->pVidMem;
   179	}
   180	


*** local symbol table ***




   181	short int GetCurrAttr()
   182	{
   183	      return GetJCBPtr()->NormAttr;
   184	}
   185	


*** local symbol table ***




   186	void SetCurrAttr(short int attr)
   187	{
   188	     GetJCBPtr()->NormAttr = attr & 0xFFFFFC00;
   189	}
   190	


*** local symbol table ***

attr_      =000018    -    Auto        Short



   191	static pascal void SetVideoReg(int regno, int val)
   192	{
   193	     if (regno < 0 or regno > 11) {
   194	         printf("bad video regno: %d", regno);
   195	         return;
   196	     }
   197	     asm {
   198	         lw   r1,24[bp]
   199	         lw   r2,32[bp]
   200	         asl  r1,r1,#2
   201	         sh   r2,$FFDA0000[r1]
   202	     }
   203	}
   204	


*** local symbol table ***

regno_     =000018    -    Auto        Long
val_       =000020    -    Auto        Long



   205	void SetCursorPos(int row, int col)
   206	{
   207	    JCB *j;
   208	
   209	    j = GetJCBPtr();
   210	    j->CursorCol = col;
   211	    j->CursorRow = row;
   212	    UpdateCursorPos();
   213	}
   214	


*** local symbol table ***

row_       =000018    -    Auto        Long
col_       =000020    -    Auto        Long
j_         =fffffff8    -    Auto        Pointer to struct _tagJCB_ 



   215	void SetCursorCol(int col)
   216	{
   217	    JCB *j;
   218	
   219	    j = GetJCBPtr();
   220	    j->CursorCol = col;
   221	    UpdateCursorPos();
   222	}
   223	


*** local symbol table ***

col_       =000018    -    Auto        Long
j_         =fffffff8    -    Auto        Pointer to struct _tagJCB_ 



   224	int GetCursorPos()
   225	{
   226	    JCB *j;
   227	
   228	    j = GetJCBPtr();
   229	    return j->CursorCol | (j->CursorRow << 8);
   230	}
   231	


*** local symbol table ***

j_         =fffffff8    -    Auto        Pointer to struct _tagJCB_ 



   232	int GetTextCols()
   233	{
   234	    return GetJCBPtr()->VideoCols;
   235	}
   236	


*** local symbol table ***




   237	int GetTextRows()
   238	{
   239	    return GetJCBPtr()->VideoRows;
   240	}
   241	


*** local symbol table ***




   242	char AsciiToScreen(char ch)
   243	{
   244	     if (ch==0x5B)
   245	         return 0x1B;
   246	     if (ch==0x5D)
   247	         return 0x1D;
   248	     ch &= 0xFF;
   249	     ch |= 0x100;
   250	     if (!(ch & 0x20))
   251	         return ch;
   252	     if (!(ch & 0x40))
   253	         return ch;
   254	     ch = ch & 0x19F;
   255	     return ch;
   256	}
   257	


*** local symbol table ***

ch_        =000018    -    Auto        Char



   258	char ScreenToAscii(char ch)
   259	{
   260	     ch &= 0xFF;
   261	     if (ch==0x1B)
   262	        return 0x5B;
   263	     if (ch==0x1D)
   264	        return 0x5D;
   265	     if (ch < 27)
   266	        ch += 0x60;
   267	     return ch;
   268	}
   269	    
   270	


*** local symbol table ***

ch_        =000018    -    Auto        Char



   271	void UpdateCursorPos()
   272	{
   273	    JCB *j;
   274	    int pos;
   275	
   276	    j = GetJCBPtr();
   277	//    if (j == IOFocusNdx) {
   278	       pos = j->CursorRow * j->VideoCols + j->CursorCol;
   279	       SetVideoReg(11,pos);
   280	//    }
   281	}
   282	


*** local symbol table ***

j_         =fffffff8    -    Auto        Pointer to struct _tagJCB_ 
pos_       =fffffff0    -    Auto        Long



   283	void HomeCursor()
   284	{
   285	    JCB *j;
   286	
   287	    j = GetJCBPtr();
   288	    j->CursorCol = 0;
   289	    j->CursorRow = 0;
   290	    UpdateCursorPos();
   291	}
   292	


*** local symbol table ***

j_         =fffffff8    -    Auto        Pointer to struct _tagJCB_ 



   293	short int *CalcScreenLocation()
   294	{
   295	    JCB *j;
   296	    int pos;
   297	
   298	    j = GetJCBPtr();
   299	    pos = j->CursorRow * j->VideoCols + j->CursorCol;
   300	//    if (j == IOFocusNdx) {
   301	       SetVideoReg(11,pos);
   302	//    }
   303	    return GetScreenLocation()+pos;
   304	}
   305	


*** local symbol table ***

j_         =fffffff8    -    Auto        Pointer to struct _tagJCB_ 
pos_       =fffffff0    -    Auto        Long



   306	void ClearScreen()
   307	{
   308	     short int *p;
   309	     int nn;
   310	     int mx;
   311	     JCB *j;
   312	     short int vc;
   313	     
   314	     j = GetJCBPtr();
   315	     p = GetScreenLocation();
   316	     // Compiler did a byte multiply generating a single byte result first
   317	     // before assigning it to mx. The (int) casts force the compiler to use
   318	     // an int result.
   319	     mx = (int)j->VideoRows * (int)j->VideoCols;
   320	     vc = GetCurrAttr() | AsciiToScreen(' ');
   321	     memsetH(p, vc, mx);
   322	}
   323	


*** local symbol table ***

p_         =fffffff8    -    Auto        Pointer to Short
nn_        =fffffff0    -    Auto        Long
mx_        =ffffffe8    -    Auto        Long
j_         =ffffffe0    -    Auto        Pointer to struct _tagJCB_ 
vc_        =ffffffdc    -    Auto        Short



   324	void ClearBmpScreen()
   325	{
   326	     memsetW(0x400000, 0, 0x80000);
   327	}
   328	


*** local symbol table ***




   329	void BlankLine(int row)
   330	{
   331	     short int *p;
   332	     int nn;
   333	     int mx;
   334	     JCB *j;
   335	     short int vc;
   336	     
   337	     j = GetJCBPtr();
   338	     p = GetScreenLocation();
   339	     p = p + (int)j->VideoCols * row;
   340	     vc = GetCurrAttr() | AsciiToScreen(' ');
   341	     memsetH(p, vc, j->VideoCols);
   342	}
   343	
   344	// ScrollUp will call BlankLine. Scrollup is written in assembler for
   345	// performance reasons and is included as part of the video BIOS. Note the
   346	// BIOS cannot be called with SYS #10 because the bios isn't re-entrant and
   347	// the bios is already active from putch().


*** local symbol table ***

row_       =000018    -    Auto        Long
p_         =fffffff8    -    Auto        Pointer to Short
nn_        =fffffff0    -    Auto        Long
mx_        =ffffffe8    -    Auto        Long
j_         =ffffffe0    -    Auto        Pointer to struct _tagJCB_ 
vc_        =ffffffdc    -    Auto        Short



   348	naked ScrollUp()
   349	{
   350	     asm {
   351	         push  lr
   352	         bsr   VBScrollUp
   353	         rts
   354	     }
   355	}
   356	


*** local symbol table ***




   357	void IncrementCursorRow()
   358	{
   359	     JCB *j;
   360	     
   361	     j = GetJCBPtr();
   362	     j->CursorRow++;
   363	     if (j->CursorRow < j->VideoRows) {
   364	         UpdateCursorPos();
   365	         return;
   366	     }
   367	     j->CursorRow--;
   368	     UpdateCursorPos();
   369	     ScrollUp();
   370	}
   371	


*** local symbol table ***

j_         =fffffff8    -    Auto        Pointer to struct _tagJCB_ 



   372	void IncrementCursorPos()
   373	{
   374	     JCB *j;
   375	     
   376	     j = GetJCBPtr();
   377	     j->CursorCol++;
   378	     if (j->CursorCol < j->VideoCols) {
   379	         UpdateCursorPos();
   380	         return;
   381	     }
   382	     j->CursorCol = 0;
   383	     IncrementCursorRow();
   384	}
   385	


*** local symbol table ***

j_         =fffffff8    -    Auto        Pointer to struct _tagJCB_ 



   386	void DisplayChar(char ch)
   387	{
   388	     short int *p;
   389	     int nn;
   390	     JCB *j;
   391	
   392	     j = GetJCBPtr();
   393	     switch(ch) {
   394	     case '\r':  j->CursorCol = 0; UpdateCursorPos(); break;
   395	     case '\n':  IncrementCursorRow(); break;
   396	     case 0x91:
   397	          if (j->CursorCol < j->VideoCols-1) {
   398	             j->CursorCol++;
   399	             UpdateCursorPos();
   400	          }
   401	          break;
   402	     case 0x90:
   403	          if (j->CursorRow > 0) {
   404	               j->CursorRow--;
   405	               UpdateCursorPos();
   406	          }
   407	          break;
   408	     case 0x93:
   409	          if (j->CursorCol > 0) {
   410	               j->CursorCol--;
   411	               UpdateCursorPos();
   412	          }
   413	          break;
   414	     case 0x92:
   415	          if (j->CursorRow < j->VideoRows-1) {
   416	             j->CursorRow++;
   417	             UpdateCursorPos();
   418	          }
   419	          break;
   420	     case 0x94:
   421	          if (j->CursorCol==0)
   422	             j->CursorRow = 0;
   423	          j->CursorCol = 0;
   424	          UpdateCursorPos();
   425	          break;
   426	     case 0x99:  // delete
   427	          p = CalcScreenLocation();
   428	          for (nn = j->CursorCol; nn < j->VideoCols-1; nn++) {
   429	              p[nn-j->CursorCol] = p[nn+1-j->CursorCol];
   430	          }
   431	          p[nn-j->CursorCol] = GetCurrAttr() | AsciiToScreen(' ');
   432	          break;
   433	     case 0x08: // backspace
   434	          if (j->CursorCol > 0) {
   435	              j->CursorCol--;
   436	              p = CalcScreenLocation();
   437	              for (nn = j->CursorCol; nn < j->VideoCols-1; nn++) {
   438	                  p[nn-j->CursorCol] = p[nn+1-j->CursorCol];
   439	              }
   440	              p[nn-j->CursorCol] = GetCurrAttr() | AsciiToScreen(' ');
   441	          }
   442	          break;
   443	     case 0x0C:   // CTRL-L
   444	          ClearScreen();
   445	          HomeCursor();
   446	          break;
   447	     case '\t':
   448	          DisplayChar(' ');
   449	          DisplayChar(' ');
   450	          DisplayChar(' ');
   451	          DisplayChar(' ');
   452	          break;
   453	     default:
   454	          p = CalcScreenLocation();
   455	          *p = GetCurrAttr() | AsciiToScreen(ch);
   456	          IncrementCursorPos();
   457	          break;
   458	     }
   459	}
   460	


*** local symbol table ***

ch_        =000018    -    Auto        Char
p_         =fffffff8    -    Auto        Pointer to Short
nn_        =fffffff0    -    Auto        Long
j_         =ffffffe8    -    Auto        Pointer to struct _tagJCB_ 



   461	void CRLF()
   462	{
   463	     DisplayChar('\r');
   464	     DisplayChar('\n');
   465	}
   466	


*** local symbol table ***




   467	void DisplayString(char *s)
   468	{
   469	     while (*s) { DisplayChar(*s); s++; }
   470	}
   471	


*** local symbol table ***

s_         =000018    -    Auto        Pointer to Char



   472	void DisplayStringCRLF(char *s)
   473	{
   474	     DisplayString(s);
   475	     CRLF();
   476	}
   477	


*** local symbol table ***

s_         =000018    -    Auto        Pointer to Char




 *** global scope typedef symbol table ***

GetScreenLocation_ =001480    -    Global      Function returning Pointer to Short
outb_      =001480    -    Global      Function returning 
outc_      =001480    -    Global      Function returning 
uint_      =000000    1   
outh_      =001480    -    Global      Function returning 
IOFocusNdx_ =000000    -    External    Long
DumpTaskList_ =001480    -    External    Function returning 
SetCursorCol_ =001480    -    Global      Function returning 
JCB_       =000800    1   struct _tagJCB_ 
outw_      =001480    -    Global      Function returning 
GetCursorPos_ =001480    -    Global      Function returning Long
memsetH_   =000000    -    External    Function returning Long
TCB_       =001000    1   struct _tagTCB_ 
GetRunningTCB_ =001480    -    External    Function returning Char
SetCursorPos_ =001480    -    Global      Function returning 
memsetW_   =000000    -    External    Function returning Long
SetRunningTCB_ =001480    -    Global      Function returning 
MSG_       =000020    1   struct tagMSG_ 
MBX_       =001400    1   struct tagMBX_ 
HomeCursor_ =001480    -    Global      Function returning 
AsciiToScreen_ =001480    -    Global      Function returning Char
ScreenToAscii_ =001480    -    Global      Function returning Char
CalcScreenLocation_ =001480    -    Global      Function returning Pointer to Short
chkTCB_    =001480    -    Global      Function returning Long
GetRunningTCBPtr_ =001480    -    External    Function returning Pointer to struct _tagTCB_ 
UnlockSemaphore_ =001480    -    Global      Function returning 
UpdateCursorPos_ =001480    -    Global      Function returning 
GetVecno_  =001480    -    External    Function returning Long
GetJCBPtr_ =001480    -    External    Function returning Pointer to struct _tagJCB_ 
CRLF_      =001480    -    Global      Function returning 
getCPU_    =001480    -    External    Function returning Long
LockSemaphore_ =001480    -    Global      Function returning Long
ScrollUp_  =001480    -    Global      Function returning Long
hJCB_      =00000a    1   Byte
set_vector_ =001480    -    Global      Function returning 
hTCB_      =000008    1   Char
SetVideoReg_ =000009    -    Static      Function returning 
ClearScreen_ =001480    -    Global      Function returning 
DisplayString_ =001480    -    Global      Function returning 
hMBX_      =00000c    1   Char
hMSG_      =00000e    1   Char
DisplayChar_ =001480    -    Global      Function returning 
IncrementCursorPos_ =001480    -    Global      Function returning 
GetTextCols_ =001480    -    Global      Function returning Long
GetCurrAttr_ =001480    -    Global      Function returning Short
IncrementCursorRow_ =001480    -    Global      Function returning 
SetCurrAttr_ =001480    -    Global      Function returning 
ClearBmpScreen_ =001480    -    Global      Function returning 
ALARM_     =001440    1   struct tagALARM_ 
GetTextRows_ =001480    -    Global      Function returning Long
BlankLine_ =001480    -    Global      Function returning 
DisplayStringCRLF_ =001480    -    Global      Function returning 
RemoveFromTimeoutList_ =001480    -    Global      Function returning Long
SetBound50_ =001480    -    Global      Function returning 
SetBound51_ =001480    -    Global      Function returning 
SetBound48_ =001480    -    Global      Function returning 
SetBound49_ =001480    -    Global      Function returning 
InsertIntoTimeoutList_ =001480    -    Global      Function returning Long
RemoveFromReadyList_ =001480    -    Global      Function returning Long
printf_    =000000    -    External    Function returning Long
InsertIntoReadyList_ =001480    -    Global      Function returning Long

 *** structures and unions ***

tagMSG_    =000000    -    Type        struct tagMSG_ 
    link_      =000000    -    Member      
    retadr_    =000002    -    Member      
    tgtadr_    =000004    -    Member      
    type_      =000006    -    Member      
    d1_        =000008    -    Member      
    d2_        =000010    -    Member      
    d3_        =000018    -    Member      
_tagJCB_   =000000    -    Type        struct _tagJCB_ 
    iof_next_  =000000    -    Member      Pointer to struct _tagJCB_ 
    iof_prev_  =000008    -    Member      Pointer to struct _tagJCB_ 
    UserName_  =000010    -    Member      Array of Char
    path_      =000050    -    Member      Array of Char
    exitRunFile_ =000250    -    Member      Array of Char
    commandLine_ =000450    -    Member      Array of Char
    pVidMem_   =000650    -    Member      Pointer to 
    pVirtVidMem_ =000658    -    Member      Pointer to 
    VideoRows_ =000660    -    Member      
    VideoCols_ =000662    -    Member      
    CursorRow_ =000664    -    Member      
    CursorCol_ =000666    -    Member      
    NormAttr_  =000668    -    Member      
    KeyState1_ =00066c    -    Member      Byte
    KeyState2_ =00066d    -    Member      Byte
    KeybdWaitFlag_ =00066e    -    Member      Byte
    KeybdHead_ =00066f    -    Member      Byte
    KeybdTail_ =000670    -    Member      Byte
    KeybdBuffer_ =000671    -    Member      Array of Unsigned Byte
    number_    =000691    -    Member      Byte
    tasks_     =000692    -    Member      Array of Char
    next_      =0006a2    -    Member      Byte
tagMBX_    =000000    -    Type        struct tagMBX_ 
    link_      =000000    -    Member      Char
    owner_     =000002    -    Member      Byte
    tq_head_   =000004    -    Member      Char
    tq_tail_   =000006    -    Member      Char
    mq_head_   =000008    -    Member      Char
    mq_tail_   =00000a    -    Member      Char
    mq_strategy_ =00000c    -    Member      Char
    resv_      =00000e    -    Member      Array of Byte
    tq_count_  =000010    -    Member      
    mq_size_   =000018    -    Member      
    mq_count_  =000020    -    Member      
    mq_missed_ =000028    -    Member      
_tagTCB_   =000000    -    Type        struct _tagTCB_ 
    regs_      =000000    -    Member      Array of Long
    isp_       =000100    -    Member      Long
    dsp_       =000108    -    Member      Long
    esp_       =000110    -    Member      Long
    ipc_       =000118    -    Member      Long
    dpc_       =000120    -    Member      Long
    epc_       =000128    -    Member      Long
    cr0_       =000130    -    Member      Long
    iregs_     =000138    -    Member      Array of Long
    iisp_      =000238    -    Member      Long
    idsp_      =000240    -    Member      Long
    iesp_      =000248    -    Member      Long
    iipc_      =000250    -    Member      Long
    idpc_      =000258    -    Member      Long
    iepc_      =000260    -    Member      Long
    icr0_      =000268    -    Member      Long
    next_      =000270    -    Member      Char
    prev_      =000272    -    Member      Char
    mbq_next_  =000274    -    Member      Char
    mbq_prev_  =000276    -    Member      Char
    sys_stack_ =000278    -    Member      Pointer to Long
    bios_stack_ =000280    -    Member      Pointer to Long
    stack_     =000288    -    Member      Pointer to Long
    timeout_   =000290    -    Member      Long
    msg_       =0002a0    -    Member      struct tagMSG_ 
    hMailboxes_ =0002c0    -    Member      Array of Char
    hWaitMbx_  =0002c8    -    Member      Char
    number_    =0002ca    -    Member      Char
    priority_  =0002cc    -    Member      Byte
    status_    =0002cd    -    Member      Byte
    affinity_  =0002ce    -    Member      Byte
    hJob_      =0002cf    -    Member      Byte
    startTick_ =0002d0    -    Member      Long
    endTick_   =0002d8    -    Member      Long
    ticks_     =0002e0    -    Member      Long
    exception_ =0002e8    -    Member      Long
tagALARM_  =000000    -    Type        struct tagALARM_ 
    next_      =000000    -    Member      Pointer to struct tagALARM_ 
    prev_      =000008    -    Member      Pointer to struct tagALARM_ 
    mbx_       =000010    -    Member      Pointer to struct tagMBX_ 
    msg_       =000018    -    Member      Pointer to struct tagMSG_ 
    BaseTimeout_ =000020    -    Member      
    timeout_   =000028    -    Member      
    repeat_    =000030    -    Member      
    resv_      =000038    -    Member      Array of Byte
