     1	
     2	typedef unsigned int uint;
     3	
     4	typedef struct tagMSG {
     5		struct tagMSG *link;
     6		uint d1;
     7		uint d2;
     8		byte type;
     9		byte resv[7];
    10	} MSG;
    11	
    12	typedef struct _tagJCB
    13	{
    14	    struct _tagJCB *iof_next;
    15	    struct _tagJCB *iof_prev;
    16	    char UserName[32];
    17	    char path[256];
    18	    char exitRunFile[256];
    19	    char commandLine[256];
    20	    unsigned __int32 *pVidMem;
    21	    unsigned __int32 *pVirtVidMem;
    22	    unsigned __int16 VideoRows;
    23	    unsigned __int16 VideoCols;
    24	    unsigned __int16 CursorRow;
    25	    unsigned __int16 CursorCol;
    26	    unsigned __int32 NormAttr;
    27	    __int8 KeybdHead;
    28	    __int8 KeybdTail;
    29	    unsigned __int16 KeybdBuffer[16];
    30	    __int16 number;
    31	} JCB;
    32	
    33	struct tagMBX;
    34	
    35	typedef struct _tagTCB {
    36		int regs[32];
    37		int isp;
    38		int dsp;
    39		int esp;
    40		int ipc;
    41		int dpc;
    42		int epc;
    43		int cr0;
    44		struct _tagTCB *next;
    45		struct _tagTCB *prev;
    46		struct _tagTCB *mbq_next;
    47		struct _tagTCB *mbq_prev;
    48		int *sys_stack;
    49		int *bios_stack;
    50		int *stack;
    51		__int64 timeout;
    52		JCB *hJob;
    53		struct tagMBX *mailboxes;
    54		__int8 priority;
    55		__int8 status;
    56		__int8 affinity;
    57		__int16 number;
    58	} TCB;
    59	
    60	typedef struct tagMBX {
    61	    struct tagMBX *next;
    62		TCB *tq_head;
    63		TCB *tq_tail;
    64		MSG *mq_head;
    65		MSG *mq_tail;
    66		uint tq_count;
    67		uint mq_size;
    68		uint mq_count;
    69		uint mq_missed;
    70		uint owner;		// hJcb of owner
    71		char mq_strategy;
    72		byte resv[7];
    73	} MBX;
    74	
    75	typedef struct tagALARM {
    76		struct tagALARM *next;
    77		struct tagALARM *prev;
    78		MBX *mbx;
    79		MSG *msg;
    80		uint BaseTimeout;
    81		uint timeout;
    82		uint repeat;
    83		byte resv[8];		// padding to 64 bytes
    84	} ALARM;
    85	
    86	
    87	TCB *GetRunningTCB();
    88	JCB *GetJCBPtr();                   // get the JCB pointer of the running task
    89	void set_vector(unsigned int, unsigned int);
    90	
    91	
    92	// The text screen memory can only handle half-word transfers, hence the use
    93	// of memsetH, memcpyH.
    94	
    95	extern int IOFocusNdx;
    96	
    97	short int *GetScreenLocation()
    98	{
    99	      return GetJCBPtr()->pVidMem;
   100	}
   101	


*** local symbol table ***




   102	short int GetCurrAttr()
   103	{
   104	      return GetJCBPtr()->NormAttr;
   105	}
   106	


*** local symbol table ***




   107	void SetCurrAttr(short int attr)
   108	{
   109	     GetJCBPtr()->NormAttr = attr;
   110	}
   111	


*** local symbol table ***

attr       =000018    -    Auto        Short



   112	void SetVideoReg(int regno, int val)
   113	{
   114	     asm {
   115	         lw   r1,24[bp]
   116	         lw   r2,32[bp]
   117	         asl  r1,r1,#2
   118	         sh   r2,$FFDA0000[r1]
   119	     }
   120	}
   121	


*** local symbol table ***

regno      =000018    -    Auto        Long
val        =000020    -    Auto        Long



   122	void SetCursorPos(int row, int col)
   123	{
   124	    JCB *j;
   125	
   126	    j = GetJCBPtr();
   127	    j->CursorCol = col;
   128	    j->CursorRow = row;
   129	    UpdateCursorPos();
   130	}
   131	


*** local symbol table ***

row        =000018    -    Auto        Long
col        =000020    -    Auto        Long
j          =fffffff8    -    Auto        Pointer to struct _tagJCB 



   132	void SetCursorCol(int col)
   133	{
   134	    JCB *j;
   135	
   136	    j = GetJCBPtr();
   137	    j->CursorCol = col;
   138	    UpdateCursorPos();
   139	}
   140	


*** local symbol table ***

col        =000018    -    Auto        Long
j          =fffffff8    -    Auto        Pointer to struct _tagJCB 



   141	int GetCursorPos()
   142	{
   143	    JCB *j;
   144	
   145	    j = GetJCBPtr();
   146	    return j->CursorCol | (j->CursorRow << 8);
   147	}
   148	
   149	


*** local symbol table ***

j          =fffffff8    -    Auto        Pointer to struct _tagJCB 



   150	char AsciiToScreen(char ch)
   151	{
   152	     if (ch==0x5B)
   153	         return 0x1B;
   154	     if (ch==0x5D)
   155	         return 0x1D;
   156	     ch &= 0xFF;
   157	     ch |= 0x100;
   158	     if (!(ch & 0x20))
   159	         return ch;
   160	     if (!(ch & 0x40))
   161	         return ch;
   162	     ch = ch & 0x19F;
   163	     return ch;
   164	}
   165	


*** local symbol table ***

ch         =000018    -    Auto        Char



   166	char ScreenToAscii(char ch)
   167	{
   168	     ch &= 0xFF;
   169	     if (ch==0x1B)
   170	        return 0x5B;
   171	     if (ch==0x1D)
   172	        return 0x5D;
   173	     if (ch < 27)
   174	        ch += 0x60;
   175	     return ch;
   176	}
   177	    
   178	


*** local symbol table ***

ch         =000018    -    Auto        Char



   179	void UpdateCursorPos()
   180	{
   181	    JCB *j;
   182	    int pos;
   183	
   184	    j = GetJCBPtr();
   185	//    if (j == IOFocusNdx) {
   186	       pos = j->CursorRow * j->VideoCols + j->CursorCol;
   187	       SetVideoReg(11,pos);
   188	//    }
   189	}
   190	


*** local symbol table ***

j          =fffffff8    -    Auto        Pointer to struct _tagJCB 
pos        =fffffff0    -    Auto        Long



   191	void HomeCursor()
   192	{
   193	    JCB *j;
   194	
   195	    j = GetJCBPtr();
   196	    j->CursorCol = 0;
   197	    j->CursorRow = 0;
   198	    UpdateCursorPos();
   199	}
   200	


*** local symbol table ***

j          =fffffff8    -    Auto        Pointer to struct _tagJCB 



   201	short int *CalcScreenLocation()
   202	{
   203	    JCB *j;
   204	    int pos;
   205	
   206	    j = GetJCBPtr();
   207	    pos = j->CursorRow * j->VideoCols + j->CursorCol;
   208	//    if (j == IOFocusNdx) {
   209	       SetVideoReg(11,pos);
   210	//    }
   211	    return GetScreenLocation()+pos;
   212	}
   213	


*** local symbol table ***

j          =fffffff8    -    Auto        Pointer to struct _tagJCB 
pos        =fffffff0    -    Auto        Long



   214	void ClearScreen()
   215	{
   216	     short int *p;
   217	     int nn;
   218	     int mx;
   219	     JCB *j;
   220	     short int vc;
   221	     
   222	     j = GetJCBPtr();
   223	     p = GetScreenLocation();
   224	     // Compiler did a byte multiply generating a single byte result first
   225	     // before assigning it to mx. The (int) casts force the compiler to use
   226	     // an int result.
   227	     mx = (int)j->VideoRows * (int)j->VideoCols;
   228	     vc = GetCurrAttr() | AsciiToScreen(' ');
   229	     memsetH(p, vc, mx);
   230	}
   231	


*** local symbol table ***

p          =fffffff8    -    Auto        Pointer to Short
nn         =fffffff0    -    Auto        Long
mx         =ffffffe8    -    Auto        Long
j          =ffffffe0    -    Auto        Pointer to struct _tagJCB 
vc         =ffffffdc    -    Auto        Short



   232	void BlankLine(int row)
   233	{
   234	     short int *p;
   235	     int nn;
   236	     int mx;
   237	     JCB *j;
   238	     short int vc;
   239	     
   240	     j = GetJCBPtr();
   241	     p = GetScreenLocation();
   242	     p = p + j->VideoCols * row;
   243	     vc = GetCurrAttr() | AsciiToScreen(' ');
   244	     memsetH(p, vc, j->VideoCols);
   245	}
   246	


*** local symbol table ***

row        =000018    -    Auto        Long
p          =fffffff8    -    Auto        Pointer to Short
nn         =fffffff0    -    Auto        Long
mx         =ffffffe8    -    Auto        Long
j          =ffffffe0    -    Auto        Pointer to struct _tagJCB 
vc         =ffffffdc    -    Auto        Short



   247	void ScrollUp()
   248	{
   249	     short int *p;
   250	     int nn;
   251	     int mx;
   252	     JCB *j;
   253	     
   254	     j = GetJCBPtr();
   255	     p = GetScreenLocation();
   256	     mx = (j->VideoRows-1) * j->VideoCols;
   257	     memcpyH(p, &p[j->VideoCols], mx);
   258	     BlankLine(j->VideoRows-1);
   259	}
   260	


*** local symbol table ***

p          =fffffff8    -    Auto        Pointer to Short
nn         =fffffff0    -    Auto        Long
mx         =ffffffe8    -    Auto        Long
j          =ffffffe0    -    Auto        Pointer to struct _tagJCB 



   261	void IncrementCursorPos()
   262	{
   263	     JCB *j;
   264	     
   265	     j = GetJCBPtr();
   266	     j->CursorCol++;
   267	     if (j->CursorCol < j->VideoCols) {
   268	         UpdateCursorPos();
   269	         return;
   270	     }
   271	     j->CursorCol = 0;
   272	     j->CursorRow++;
   273	     if (j->CursorRow < j->VideoRows) {
   274	         UpdateCursorPos();
   275	         return;
   276	     }
   277	     j->CursorRow--;
   278	     ScrollUp();
   279	}
   280	


*** local symbol table ***

j          =fffffff8    -    Auto        Pointer to struct _tagJCB 



   281	void DisplayChar(char ch)
   282	{
   283	     short int *p;
   284	     int nn;
   285	     JCB *j;
   286	
   287	     j = GetJCBPtr();
   288	     switch(ch) {
   289	     case '\r':  j->CursorCol = 0; UpdateCursorPos(); break;
   290	     case '\n':  if (j->CursorRow < j->VideoRows) { j->CursorRow++; UpdateCursorPos(); } else ScrollUp(); break;
   291	     case 0x91:
   292	          if (j->CursorCol < j->VideoCols) {
   293	             j->CursorCol++;
   294	             UpdateCursorPos();
   295	          }
   296	          break;
   297	     case 0x90:
   298	          if (j->CursorRow > 0) {
   299	               j->CursorRow--;
   300	               UpdateCursorPos();
   301	          }
   302	          break;
   303	     case 0x93:
   304	          if (j->CursorCol > 0) {
   305	               j->CursorCol--;
   306	               UpdateCursorPos();
   307	          }
   308	          break;
   309	     case 0x92:
   310	          if (j->CursorRow < j->VideoRows) {
   311	             j->CursorRow++;
   312	             UpdateCursorPos();
   313	          }
   314	          break;
   315	     case 0x94:
   316	          if (j->CursorCol==0)
   317	             j->CursorRow = 0;
   318	          j->CursorCol = 0;
   319	          UpdateCursorPos();
   320	          break;
   321	     case 0x99:  // delete
   322	          p = CalcScreenLocation();
   323	          for (nn = j->CursorCol; nn < j->VideoCols-1; nn++) {
   324	              p[nn] = p[nn+1];
   325	          }
   326	          p[nn] = GetCurrAttr() | AsciiToScreen(' ');
   327	          break;
   328	     case 0x08: // backspace
   329	          if (j->CursorCol > 0) {
   330	              j->CursorCol--;
   331	              p = CalcScreenLocation();
   332	              for (nn = j->CursorCol; nn < j->VideoCols-1; nn++) {
   333	                  p[nn] = p[nn+1];
   334	              }
   335	              p[nn] = GetCurrAttr() | AsciiToScreen(' ');
   336	          }
   337	          break;
   338	     case '\t':
   339	          DisplayChar(' ');
   340	          DisplayChar(' ');
   341	          DisplayChar(' ');
   342	          DisplayChar(' ');
   343	          break;
   344	     default:
   345	          p = CalcScreenLocation();
   346	          *p = GetCurrAttr() | AsciiToScreen(ch);
   347	          IncrementCursorPos();
   348	          break;
   349	     }
   350	}
   351	


*** local symbol table ***

ch         =000018    -    Auto        Char
p          =fffffff8    -    Auto        Pointer to Short
nn         =fffffff0    -    Auto        Long
j          =ffffffe8    -    Auto        Pointer to struct _tagJCB 



   352	void CRLF()
   353	{
   354	     DisplayChar('\r');
   355	     DisplayChar('\n');
   356	}
   357	


*** local symbol table ***




   358	void DisplayString(char *s)
   359	{
   360	     while (*s) { DisplayChar(*s); s++; }
   361	}
   362	


*** local symbol table ***

s          =000018    -    Auto        Pointer to Char



   363	void DisplayStringCRLF(char *s)
   364	{
   365	     DisplayString(s);
   366	     CRLF();
   367	}
   368	


*** local symbol table ***

s          =000018    -    Auto        Pointer to Char




 *** global scope typedef symbol table ***

HomeCursor =0008e8    -    Global      Function returning 
AsciiToScreen =0008e8    -    Global      Function returning Char
ScreenToAscii =0008e8    -    Global      Function returning Char
CalcScreenLocation =0008e8    -    Global      Function returning Pointer to Short
UpdateCursorPos =0008e8    -    Global      Function returning 
GetJCBPtr  =0008e8    -    External    Function returning Pointer to struct _tagJCB 
CRLF       =0008e8    -    Global      Function returning 
ScrollUp   =0008e8    -    Global      Function returning 
set_vector =0008e8    -    Global      Function returning 
SetVideoReg =0008e8    -    Global      Function returning 
ClearScreen =0008e8    -    Global      Function returning 
DisplayString =0008e8    -    Global      Function returning 
DisplayChar =0008e8    -    Global      Function returning 
IncrementCursorPos =0008e8    -    Global      Function returning 
GetCurrAttr =0008e8    -    Global      Function returning Short
SetCurrAttr =0008e8    -    Global      Function returning 
ALARM      =0008a8    1   struct tagALARM 
BlankLine  =0008e8    -    Global      Function returning 
DisplayStringCRLF =0008e8    -    Global      Function returning 
GetScreenLocation =0008e8    -    Global      Function returning Pointer to Short
uint       =000000    1   
IOFocusNdx =000000    -    External    Long
SetCursorCol =0008e8    -    Global      Function returning 
JCB        =000028    1   struct _tagJCB 
GetCursorPos =0008e8    -    Global      Function returning Long
memsetH    =000000    -    External    Function returning Long
memcpyH    =000000    -    External    Function returning Long
TCB        =0006b8    1   struct _tagTCB 
GetRunningTCB =0008e8    -    External    Function returning Pointer to struct _tagTCB 
SetCursorPos =0008e8    -    Global      Function returning 
MSG        =000008    1   struct tagMSG 
MBX        =000848    1   struct tagMBX 

 *** structures and unions ***

tagMSG     =000000    -    Type        struct tagMSG 
    link       =000000    -    Member      Pointer to struct tagMSG 
    d1         =000008    -    Member      
    d2         =000010    -    Member      
    type       =000018    -    Member      Byte
    resv       =000019    -    Member      Array of Byte
_tagJCB    =000000    -    Type        struct _tagJCB 
    iof_next   =000000    -    Member      Pointer to struct _tagJCB 
    iof_prev   =000008    -    Member      Pointer to struct _tagJCB 
    UserName   =000010    -    Member      Array of Char
    path       =000050    -    Member      Array of Char
    exitRunFile =000250    -    Member      Array of Char
    commandLine =000450    -    Member      Array of Char
    pVidMem    =000650    -    Member      Pointer to 
    pVirtVidMem =000658    -    Member      Pointer to 
    VideoRows  =000660    -    Member      
    VideoCols  =000662    -    Member      
    CursorRow  =000664    -    Member      
    CursorCol  =000666    -    Member      
    NormAttr   =000668    -    Member      
    KeybdHead  =00066c    -    Member      Byte
    KeybdTail  =00066d    -    Member      Byte
    KeybdBuffer =00066e    -    Member      Array of 
    number     =00068e    -    Member      Char
tagMBX     =000000    -    Type        struct tagMBX 
    next       =000000    -    Member      Pointer to struct tagMBX 
    tq_head    =000008    -    Member      Pointer to struct _tagTCB 
    tq_tail    =000010    -    Member      Pointer to struct _tagTCB 
    mq_head    =000018    -    Member      Pointer to struct tagMSG 
    mq_tail    =000020    -    Member      Pointer to struct tagMSG 
    tq_count   =000028    -    Member      
    mq_size    =000030    -    Member      
    mq_count   =000038    -    Member      
    mq_missed  =000040    -    Member      
    owner      =000048    -    Member      
    mq_strategy =000050    -    Member      Char
    resv       =000052    -    Member      Array of Byte
_tagTCB    =000000    -    Type        struct _tagTCB 
    regs       =000000    -    Member      Array of Long
    isp        =000100    -    Member      Long
    dsp        =000108    -    Member      Long
    esp        =000110    -    Member      Long
    ipc        =000118    -    Member      Long
    dpc        =000120    -    Member      Long
    epc        =000128    -    Member      Long
    cr0        =000130    -    Member      Long
    next       =000138    -    Member      Pointer to struct _tagTCB 
    prev       =000140    -    Member      Pointer to struct _tagTCB 
    mbq_next   =000148    -    Member      Pointer to struct _tagTCB 
    mbq_prev   =000150    -    Member      Pointer to struct _tagTCB 
    sys_stack  =000158    -    Member      Pointer to Long
    bios_stack =000160    -    Member      Pointer to Long
    stack      =000168    -    Member      Pointer to Long
    timeout    =000170    -    Member      Long
    hJob       =000178    -    Member      Pointer to struct _tagJCB 
    mailboxes  =000180    -    Member      Pointer to struct tagMBX 
    priority   =000188    -    Member      Byte
    status     =000189    -    Member      Byte
    affinity   =00018a    -    Member      Byte
    number     =00018c    -    Member      Char
tagALARM   =000000    -    Type        struct tagALARM 
    next       =000000    -    Member      Pointer to struct tagALARM 
    prev       =000008    -    Member      Pointer to struct tagALARM 
    mbx        =000010    -    Member      Pointer to struct tagMBX 
    msg        =000018    -    Member      Pointer to struct tagMSG 
    BaseTimeout =000020    -    Member      
    timeout    =000028    -    Member      
    repeat     =000030    -    Member      
    resv       =000038    -    Member      Array of Byte
