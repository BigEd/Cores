     1	// The keyboard semaphore is locked only for short durations, so the interrupt
     2	// routine doesn't need to make many attempts to lock the semaphore.
     3	
     4	
     5	
     6	
     7	
     8	
     9	
    10	// message types
    11	
    12	enum {
    13	     E_Ok = 0,
    14	     E_BadTCBHandle,
    15	     E_BadPriority,
    16	     E_BadCallno,
    17	     E_Arg,
    18	     E_BadMbx,
    19	     E_QueFull,
    20	     E_NoThread,
    21	     E_NotAlloc,
    22	     E_NoMsg,
    23	     E_Timeout,
    24	     E_BadAlarm,
    25	     E_NotOwner,
    26	     E_QueStrategy,
    27	     E_DCBInUse,
    28	     //; Device driver errors
    29	     E_BadDevNum =	0x20,
    30	     E_NoDev,
    31	     E_BadDevOp,
    32	     E_ReadError,
    33	     E_WriteError,
    34	     E_BadBlockNum,
    35	     E_TooManyBlocks,
    36	
    37	     // resource errors
    38	     E_NoMoreMbx =	0x40,
    39	     E_NoMoreMsgBlks,
    40	     E_NoMoreAlarmBlks,
    41	     E_NoMoreTCBs,
    42	     E_NoMem,
    43	     E_TooManyTasks
    44	};
    45	
    46	
    47	typedef unsigned int uint;
    48	typedef __int16 hTCB;
    49	typedef __int8 hJCB;
    50	typedef __int16 hMBX;
    51	typedef __int16 hMSG;
    52	
    53	typedef struct tagMSG align(32) {
    54		unsigned __int16 link;
    55		unsigned __int16 retadr;    // return address
    56		unsigned __int16 tgtadr;    // target address
    57		unsigned __int16 type;
    58		unsigned int d1;            // payload data 1
    59		unsigned int d2;            // payload data 2
    60		unsigned int d3;            // payload data 3
    61	} MSG;
    62	
    63	typedef struct _tagJCB align(2048)
    64	{
    65	    struct _tagJCB *iof_next;
    66	    struct _tagJCB *iof_prev;
    67	    char UserName[32];
    68	    char path[256];
    69	    char exitRunFile[256];
    70	    char commandLine[256];
    71	    unsigned __int32 *pVidMem;
    72	    unsigned __int32 *pVirtVidMem;
    73	    unsigned __int16 VideoRows;
    74	    unsigned __int16 VideoCols;
    75	    unsigned __int16 CursorRow;
    76	    unsigned __int16 CursorCol;
    77	    unsigned __int32 NormAttr;
    78	    __int8 KeyState1;
    79	    __int8 KeyState2;
    80	    __int8 KeybdWaitFlag;
    81	    __int8 KeybdHead;
    82	    __int8 KeybdTail;
    83	    unsigned __int8 KeybdBuffer[32];
    84	    hJCB number;
    85	    hTCB tasks[8];
    86	    hJCB next;
    87	} JCB;
    88	
    89	struct tagMBX;
    90	
    91	typedef struct _tagTCB align(1024) {
    92	    // exception storage area
    93		int regs[32];
    94		int isp;
    95		int dsp;
    96		int esp;
    97		int ipc;
    98		int dpc;
    99		int epc;
   100		int cr0;
   101		// interrupt storage
   102		int iregs[32];
   103		int iisp;
   104		int idsp;
   105		int iesp;
   106		int iipc;
   107		int idpc;
   108		int iepc;
   109		int icr0;
   110		hTCB next;
   111		hTCB prev;
   112		hTCB mbq_next;
   113		hTCB mbq_prev;
   114		int *sys_stack;
   115		int *bios_stack;
   116		int *stack;
   117		__int64 timeout;
   118		MSG msg;
   119		hMBX hMailboxes[4]; // handles of mailboxes owned by task
   120		hMBX hWaitMbx;      // handle of mailbox task is waiting at
   121		hTCB number;
   122		__int8 priority;
   123		__int8 status;
   124		__int8 affinity;
   125		hJCB hJob;
   126		__int64 startTick;
   127		__int64 endTick;
   128		__int64 ticks;
   129		int exception;
   130	} TCB;
   131	
   132	typedef struct tagMBX align(64) {
   133	    hMBX link;
   134		hJCB owner;		// hJcb of owner
   135		hTCB tq_head;
   136		hTCB tq_tail;
   137		hMSG mq_head;
   138		hMSG mq_tail;
   139		char mq_strategy;
   140		byte resv[2];
   141		uint tq_count;
   142		uint mq_size;
   143		uint mq_count;
   144		uint mq_missed;
   145	} MBX;
   146	
   147	typedef struct tagALARM {
   148		struct tagALARM *next;
   149		struct tagALARM *prev;
   150		MBX *mbx;
   151		MSG *msg;
   152		uint BaseTimeout;
   153		uint timeout;
   154		uint repeat;
   155		byte resv[8];		// padding to 64 bytes
   156	} ALARM;
   157	
   158	
   159	extern int irq_stack[];
   160	extern int FMTK_Inited;
   161	extern JCB jcbs[];
   162	extern TCB tcbs[];
   163	extern hTCB readyQ[];
   164	extern hTCB freeTCB;
   165	extern int sysstack[];
   166	extern int stacks[][];
   167	extern int sys_stacks[][];
   168	extern int bios_stacks[][];
   169	extern int fmtk_irq_stack[];
   170	extern int fmtk_sys_stack[];
   171	extern MBX mailbox[];
   172	extern MSG message[];
   173	extern int nMsgBlk;
   174	extern int nMailbox;
   175	extern hMSG freeMSG;
   176	extern hMBX freeMBX;
   177	extern JCB *IOFocusNdx;
   178	extern int IOFocusTbl[];
   179	extern int iof_switch;
   180	extern int BIOS1_sema;
   181	extern int iof_sema;
   182	extern int sys_sema;
   183	extern int kbd_sema;
   184	extern int BIOS_RespMbx;
   185	extern char hasUltraHighPriorityTasks;
   186	extern int missed_ticks;
   187	extern short int video_bufs[][];
   188	extern hTCB TimeoutList;
   189	
   190	
   191	// ============================================================================
   192	//        __
   193	//   \\__/ o\    (C) 2012-2015  Robert Finch, Stratford
   194	//    \  __ /    All rights reserved.
   195	//     \/_//     robfinch<remove>@finitron.ca
   196	//       ||
   197	//
   198	// TCB.c
   199	// Task Control Block related functions.
   200	//
   201	// This source file is free software: you can redistribute it and/or modify 
   202	// it under the terms of the GNU Lesser General Public License as published 
   203	// by the Free Software Foundation, either version 3 of the License, or     
   204	// (at your option) any later version.                                      
   205	//                                                                          
   206	// This source file is distributed in the hope that it will be useful,      
   207	// but WITHOUT ANY WARRANTY; without even the implied warranty of           
   208	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
   209	// GNU General Public License for more details.                             
   210	//                                                                          
   211	// You should have received a copy of the GNU General Public License        
   212	// along with this program.  If not, see <http://www.gnu.org/licenses/>.    
   213	//                                                                          
   214	// ============================================================================
   215	//
   216	// JCB functions
   217	JCB *GetJCBPtr();                   // get the JCB pointer of the running task
   218	
   219	// TCB functions
   220	TCB *GetRunningTCBPtr();
   221	hTCB GetRunningTCB();
   222	pascal void SetRunningTCB(hTCB ht);
   223	pascal int chkTCB(TCB *p);
   224	pascal int InsertIntoReadyList(hTCB ht);
   225	pascal int RemoveFromReadyList(hTCB ht);
   226	pascal int InsertIntoTimeoutList(hTCB ht, int to);
   227	pascal int RemoveFromTimeoutList(hTCB ht);
   228	void DumpTaskList();
   229	
   230	pascal void SetBound48(TCB *ps, TCB *pe, int algn);
   231	pascal void SetBound49(JCB *ps, JCB *pe, int algn);
   232	pascal void SetBound50(MBX *ps, MBX *pe, int algn);
   233	pascal void SetBound51(MSG *ps, MSG *pe, int algn);
   234	
   235	pascal void set_vector(unsigned int, unsigned int);
   236	int getCPU();
   237	int GetVecno();          // get the last interrupt vector number
   238	void outb(unsigned int, int);
   239	void outc(unsigned int, int);
   240	void outh(unsigned int, int);
   241	void outw(unsigned int, int);
   242	pascal int LockSemaphore(int *sema, int retries);
   243	pascal void UnlockSemaphore(int *sema);
   244	
   245	// The following causes a privilege violation if called from user mode
   246	
   247	
   248	/*
   249	SC_DEL		EQU		$71		; extend
   250	SC_LCTRL	EQU		$58
   251	*/
   252	
   253	extern byte keybdExtendedCodes[];
   254	extern byte keybdControlCodes[];
   255	extern byte shiftedScanCodes[];
   256	extern byte unshiftedScanCodes[];
   257	extern signed byte KeybdGetStatus();
   258	extern byte KeybdGetScancode();
   259	extern void KeybdClearRcv();
   260	int kbd_sema = 0;
   261	
   262	//
   263	// KeyState2_
   264	// 876543210
   265	// ||||||||+ = shift
   266	// |||||||+- = alt
   267	// ||||||+-- = control
   268	// |||||+--- = numlock
   269	// ||||+---- = capslock
   270	// |||+----- = scrolllock
   271	// ||+------ =
   272	// |+------- = 
   273	// +-------- = extended
   274	//
   275	
   276	unsigned int keybd_irq_stack[256];
   277	
   278	void KeybdIRQ()
   279	{
   280	    __int8 sc;
   281	    __int8 kh, kt;
   282	    hTCB ht;
   283	    TCB *t;
   284	    JCB *jcb;
   285	    int nn;
   286	
   287	     prolog asm {
   288	         lea   sp,keybd_irq_stack_+2040
   289	         sw    r1,8+312[tr]
   290	         sw    r2,16+312[tr]
   291	         sw    r3,24+312[tr]
   292	         sw    r4,32+312[tr]
   293	         sw    r5,40+312[tr]
   294	         sw    r6,48+312[tr]
   295	         sw    r7,56+312[tr]
   296	         sw    r8,64+312[tr]
   297	         sw    r9,72+312[tr]
   298	         sw    r10,80+312[tr]
   299	         sw    r11,88+312[tr]
   300	         sw    r12,96+312[tr]
   301	         sw    r13,104+312[tr]
   302	         sw    r14,112+312[tr]
   303	         sw    r15,120+312[tr]
   304	         sw    r16,128+312[tr]
   305	         sw    r17,136+312[tr]
   306	         sw    r18,144+312[tr]
   307	         sw    r19,152+312[tr]
   308	         sw    r20,160+312[tr]
   309	         sw    r21,168+312[tr]
   310	         sw    r22,176+312[tr]
   311	         sw    r23,184+312[tr]
   312	         sw    r24,192+312[tr]
   313	         sw    r25,200+312[tr]
   314	         sw    r26,208+312[tr]
   315	         sw    r27,216+312[tr]
   316	         sw    r28,224+312[tr]
   317	         sw    r29,232+312[tr]
   318	         sw    r30,240+312[tr]
   319	         sw    r31,248+312[tr]
   320	         mfspr r1,cr0
   321	         sw    r1,304[tr]
   322	     }
   323	     while (KeybdGetStatus() < 0) {    // Is there actually a scancode available ?
   324	         sc = KeybdGetScancode();
   325	         jcb = IOFocusNdx;             // Are there any jobs with focus ?     
   326	         if (jcb) {
   327	          	 if (LockSemaphore(&kbd_sema,200)) {
   328	                 KeybdClearRcv();              // clear recieve register
   329	                 kh = jcb->KeybdHead;
   330	                 kt = jcb->KeybdTail;
   331	                 kh++;
   332	                 kh &= 31;
   333	                 if (kh <> kt) {
   334	                     jcb->KeybdHead = kh;   
   335	                     jcb->KeybdBuffer[kh] = sc;
   336	                 }
   337	                 UnlockSemaphore(&kbd_sema);
   338	             }
   339	             // If CTRL-C is pressed, cause the tasks to return to the 
   340	             // catch handler.
   341	             if (jcb->KeyState2 & 4) {
   342	                 if(sc == 0x21) {      // control-c ?
   343	                     for (nn = 0; nn < 8; nn++) {
   344	                         if (jcb->tasks[nn]==-1)
   345	                             break;
   346	                         t = &tcbs[jcb->tasks[nn]];
   347	                         t->exception = 512+3;     // CTRL-C type exception
   348	                     }
   349	                 }
   350	                 else if (sc==0x2C || sc==0x1A) {
   351	                      t = &tcbs[2];
   352	                      t->exception = (512 + ((sc==0x2C) ? 20 : 26)) | (GetRunningTCB() << 32);
   353	                 }
   354	             }
   355	             if ((jcb->KeyState2 & 2) && sc == 0x0D)    // ALT + TAB ?
   356	                 iof_switch++;       
   357	         }
   358	     }
   359	     // Restore the processor registers and return using an RTI.
   360	     epilog asm {
   361	         lw    r1,304[tr]
   362	         mtspr cr0,r1
   363	         lw    r1,8+312[tr]
   364	         lw    r2,16+312[tr]
   365	         lw    r3,24+312[tr]
   366	         lw    r4,32+312[tr]
   367	         lw    r5,40+312[tr]
   368	         lw    r6,48+312[tr]
   369	         lw    r7,56+312[tr]
   370	         lw    r8,64+312[tr]
   371	         lw    r9,72+312[tr]
   372	         lw    r10,80+312[tr]
   373	         lw    r11,88+312[tr]
   374	         lw    r12,96+312[tr]
   375	         lw    r13,104+312[tr]
   376	         lw    r14,112+312[tr]
   377	         lw    r15,120+312[tr]
   378	         lw    r16,128+312[tr]
   379	         lw    r17,136+312[tr]
   380	         lw    r18,144+312[tr]
   381	         lw    r19,152+312[tr]
   382	         lw    r20,160+312[tr]
   383	         lw    r21,168+312[tr]
   384	         lw    r22,176+312[tr]
   385	         lw    r23,184+312[tr]
   386	         lw    r25,200+312[tr]
   387	         lw    r26,208+312[tr]
   388	         lw    r27,216+312[tr]
   389	         lw    r28,224+312[tr]
   390	         lw    r29,232+312[tr]
   391	         lw    r31,248+312[tr]
   392	         rti
   393	     }
   394	}
   395	
   396	
   397	// Return -1 if there is a scancode available in the buffer.
   398	


*** local symbol table ***

sc_        =ffffffff    -    Auto        Byte
kh_        =fffffffe    -    Auto        Byte
kt_        =fffffffd    -    Auto        Byte
ht_        =fffffffa    -    Auto        Char
t_         =fffffff0    -    Auto        Pointer to struct _tagTCB_ 
jcb_       =ffffffe8    -    Auto        Pointer to struct _tagJCB_ 
nn_        =ffffffe0    -    Auto        Long



   399	int KeybdGetBufferStatus()
   400	{
   401	    JCB *j;
   402	    __int8 kh, kt;
   403	
   404	    kh = kt = 0;
   405	    j = GetJCBPtr();
   406	    if (LockSemaphore(&kbd_sema,200)) {
   407	        kh = j->KeybdHead;
   408	        kt = j->KeybdTail;
   409	        UnlockSemaphore(&kbd_sema);
   410	    }
   411	    if (kh<>kt)
   412	        return -1;
   413	    return 0;
   414	            
   415	}
   416	
   417	// Get a scancode from the keyboard buffer.
   418	


*** local symbol table ***

j_         =fffffff8    -    Auto        Pointer to struct _tagJCB_ 
kh_        =fffffff7    -    Auto        Byte
kt_        =fffffff6    -    Auto        Byte



   419	__int8 KeybdGetBufferedScancode()
   420	{
   421	    JCB *j;
   422	    __int8 kh, kt;
   423	    __int8 sc;
   424	
   425	    j = GetJCBPtr();
   426	    sc = 0;
   427	    if (LockSemaphore(&kbd_sema,200)) {
   428	        kh = j->KeybdHead;
   429	        kt = j->KeybdTail;
   430	        if (kh <> kt) {
   431	            sc = j->KeybdBuffer[kt];
   432	            kt++;
   433	            kt &= 31;
   434	            j->KeybdTail = kt;
   435	        }
   436	        UnlockSemaphore(&kbd_sema);
   437	    }
   438	    return sc;
   439	}
   440	


*** local symbol table ***

j_         =fffffff8    -    Auto        Pointer to struct _tagJCB_ 
kh_        =fffffff7    -    Auto        Byte
kt_        =fffffff6    -    Auto        Byte
sc_        =fffffff5    -    Auto        Byte



   441	private char KeybdGetBufferedChar()
   442	{
   443	    JCB *j;
   444	    unsigned __int8 sc;
   445	    char ch;
   446	
   447	    j = GetJCBPtr();
   448	    forever {
   449	        while (KeybdGetBufferStatus() >= 0) {
   450	            if (j->KeybdWaitFlag==0)
   451	                return -1;
   452	        }
   453	        // The following typecast is needed to avoid a compiler bug in the
   454	        // optimizer which removes the conversion from byte to word by zero
   455	        // extension.
   456	        sc = (unsigned __int8)KeybdGetBufferedScancode();
   457	        switch(sc) {
   458	        case 0xF0:
   459	            j->KeyState1 = -1;
   460	            break;
   461	        case 0xE0:
   462	            j->KeyState2 |= 0x80;
   463	            break;
   464	        case 0x14:
   465	            if (j->KeyState1 >= 0)
   466	                j->KeyState2 |= 4;
   467	            else
   468	                j->KeyState2 &= ~4;
   469	            j->KeyState1 = 0;
   470	            break;
   471	        case 0x59:
   472	            if (j->KeyState1 >= 0)
   473	                j->KeyState2 |= 1;
   474	            else
   475	                j->KeyState2 &= ~1;
   476	            j->KeyState1 = 0;
   477	            break;
   478	        case 0x77:
   479	            j->KeyState2 ^= 16;
   480	            //KeybdSetLEDStatus();
   481	            break;
   482	        case 0x58:
   483	            j->KeyState2 ^= 32;
   484	            //KeybdSetLEDStatus();
   485	            break;
   486	        case 0x7E:
   487	            j->KeyState2 ^= 64;
   488	            //KeybdSetLEDStatus();
   489	            break;
   490	        case 0x11:
   491	            if (j->KeyState1 >= 0)
   492	                j->KeyState2 |= 2;
   493	            else
   494	                j->KeyState2 &= ~2;
   495	            j->KeyState1 = 0;
   496	            break;
   497	        default:
   498	            if (sc == 0x0D && (j->KeyState2 & 2) && j->KeyState1==0) {
   499	                iof_switch++;
   500	            }
   501	            else {
   502	                 if (j->KeyState1) {
   503	                     j->KeyState1 = 0;
   504	                 }
   505	                 else {
   506	                      if (j->KeyState2 & 0x80) { // Extended code ?
   507	                          j->KeyState2 &= ~0x80;
   508	                          ch = keybdExtendedCodes[sc];
   509	                          j->KeyState1 = 0;
   510	                          return ch;
   511	                      }
   512	                      else if (j->KeyState2 & 0x04) { // control ?
   513	                          ch = keybdControlCodes[sc];
   514	                          return ch;
   515	                      }
   516	                      else if (j->KeyState2 & 0x01) { // shifted ?
   517	                          ch = shiftedScanCodes[sc];
   518	                          return ch;
   519	                      }
   520	                      else {
   521	                          ch = unshiftedScanCodes[sc];
   522	                          return ch;
   523	                      }
   524	                 }
   525	            }
   526	        }
   527	    }
   528	}
   529	


*** local symbol table ***

j_         =fffffff8    -    Auto        Pointer to struct _tagJCB_ 
sc_        =fffffff7    -    Auto        Unsigned Byte
ch_        =fffffff4    -    Auto        Char



   530	char KeybdGetBufferedCharWait() {
   531	    JCB *j;
   532	    j = GetJCBPtr();
   533	    j->KeybdWaitFlag = 1;
   534	    return KeybdGetBufferedChar();     
   535	}
   536	


*** local symbol table ***

j_         =fffffff8    -    Auto        Pointer to struct _tagJCB_ 



   537	char KeybdGetBufferedCharNoWait() {
   538	    JCB *j;
   539	    j = GetJCBPtr();
   540	    j->KeybdWaitFlag = 0;
   541	    return KeybdGetBufferedChar();     
   542	}
   543	


*** local symbol table ***

j_         =fffffff8    -    Auto        Pointer to struct _tagJCB_ 




 *** global scope typedef symbol table ***

jcbs_      =000000    -    External    Array of struct _tagJCB_ 
E_NoMoreMsgBlks_ =000041    -    Constant    Long
tcbs_      =000000    -    External    Array of struct _tagTCB_ 
nMsgBlk_   =000000    -    External    Long
KeybdGetBufferedChar_ =000029    -    Static      Function returning Char
E_NoThread_ =000007    -    Constant    Long
E_WriteError_ =000024    -    Constant    Long
IOFocusTbl_ =000000    -    External    Array of Long
outb_      =001480    -    Global      Function returning 
outc_      =001480    -    Global      Function returning 
E_Arg_     =000004    -    Constant    Long
E_NotAlloc_ =000008    -    Constant    Long
uint_      =000000    1   
outh_      =001480    -    Global      Function returning 
irq_stack_ =000000    -    External    Array of Long
IOFocusNdx_ =000000    -    External    Pointer to struct _tagJCB_ 
DumpTaskList_ =001480    -    External    Function returning 
E_BadBlockNum_ =000025    -    Constant    Long
E_TooManyBlocks_ =000026    -    Constant    Long
JCB_       =000800    1   struct _tagJCB_ 
outw_      =001480    -    Global      Function returning 
E_BadTCBHandle_ =000001    -    Constant    Long
E_BadMbx_  =000005    -    Constant    Long
fmtk_irq_stack_ =000000    -    External    Array of Long
TCB_       =001000    1   struct _tagTCB_ 
GetRunningTCB_ =001480    -    External    Function returning Char
KeybdIRQ_  =001c88    -    Global      Function returning 
keybdControlCodes_ =000000    -    External    Array of Byte
E_NotOwner_ =00000c    -    Constant    Long
fmtk_sys_stack_ =000000    -    External    Array of Long
message_   =000000    -    External    Array of struct tagMSG_ 
SetRunningTCB_ =001480    -    Global      Function returning 
MSG_       =000020    1   struct tagMSG_ 
MBX_       =001400    1   struct tagMBX_ 
mailbox_   =000000    -    External    Array of struct tagMBX_ 
KeybdGetBufferStatus_ =001c88    -    Global      Function returning Long
FMTK_Inited_ =000000    -    External    Long
E_BadDevNum_ =000020    -    Constant    Long
KeybdClearRcv_ =000000    -    External    Function returning 
missed_ticks_ =000000    -    External    Long
KeybdGetBufferedCharNoWait_ =001c88    -    Global      Function returning Char
E_BadCallno_ =000003    -    Constant    Long
E_BadPriority_ =000002    -    Constant    Long
chkTCB_    =001480    -    Global      Function returning Long
GetRunningTCBPtr_ =001480    -    External    Function returning Pointer to struct _tagTCB_ 
UnlockSemaphore_ =001480    -    Global      Function returning 
E_NoMoreMbx_ =000040    -    Constant    Long
GetVecno_  =001480    -    External    Function returning Long
E_QueStrategy_ =00000d    -    Constant    Long
GetJCBPtr_ =001480    -    External    Function returning Pointer to struct _tagJCB_ 
video_bufs_ =000000    -    External    Array of Array of Short
getCPU_    =001480    -    External    Function returning Long
E_ReadError_ =000023    -    Constant    Long
hasUltraHighPriorityTasks_ =000000    -    External    Char
LockSemaphore_ =001480    -    Global      Function returning Long
keybdExtendedCodes_ =000000    -    External    Array of Byte
iof_switch_ =000000    -    External    Long
KeybdGetScancode_ =000000    -    External    Function returning Byte
keybd_irq_stack_ =001488    -    Global      Array of 
kbd_sema_  =000000    -    External    Long
hJCB_      =00000a    1   Byte
nMailbox_  =000000    -    External    Long
unshiftedScanCodes_ =000000    -    External    Array of Byte
set_vector_ =001480    -    Global      Function returning 
E_NoMoreTCBs_ =000043    -    Constant    Long
hTCB_      =000008    1   Char
iof_sema_  =000000    -    External    Long
KeybdGetBufferedCharWait_ =001c88    -    Global      Function returning Char
sys_stacks_ =000000    -    External    Array of Array of Long
BIOS_RespMbx_ =000000    -    External    Long
hMBX_      =00000c    1   Char
hMSG_      =00000e    1   Char
E_DCBInUse_ =00000e    -    Constant    Long
KeybdGetBufferedScancode_ =001c88    -    Global      Function returning Byte
shiftedScanCodes_ =000000    -    External    Array of Byte
E_Ok_      =000000    -    Constant    Long
E_QueFull_ =000006    -    Constant    Long
BIOS1_sema_ =000000    -    External    Long
sys_sema_  =000000    -    External    Long
readyQ_    =000000    -    External    Array of Char
E_NoMoreAlarmBlks_ =000042    -    Constant    Long
ALARM_     =001440    1   struct tagALARM_ 
E_TooManyTasks_ =000045    -    Constant    Long
sysstack_  =000000    -    External    Array of Long
freeTCB_   =000000    -    External    Char
E_NoDev_   =000021    -    Constant    Long
E_NoMem_   =000044    -    Constant    Long
TimeoutList_ =000000    -    External    Char
RemoveFromTimeoutList_ =001480    -    Global      Function returning Long
E_NoMsg_   =000009    -    Constant    Long
E_BadDevOp_ =000022    -    Constant    Long
stacks_    =000000    -    External    Array of Array of Long
freeMSG_   =000000    -    External    Char
freeMBX_   =000000    -    External    Char
SetBound50_ =001480    -    Global      Function returning 
SetBound51_ =001480    -    Global      Function returning 
E_Timeout_ =00000a    -    Constant    Long
SetBound48_ =001480    -    Global      Function returning 
SetBound49_ =001480    -    Global      Function returning 
InsertIntoTimeoutList_ =001480    -    Global      Function returning Long
RemoveFromReadyList_ =001480    -    Global      Function returning Long
KeybdGetStatus_ =000000    -    External    Function returning Byte
bios_stacks_ =000000    -    External    Array of Array of Long
E_BadAlarm_ =00000b    -    Constant    Long
InsertIntoReadyList_ =001480    -    Global      Function returning Long

 *** structures and unions ***

tagMSG_    =000000    -    Type        struct tagMSG_ 
    link_      =000000    -    Member      
    retadr_    =000002    -    Member      
    tgtadr_    =000004    -    Member      
    type_      =000006    -    Member      
    d1_        =000008    -    Member      
    d2_        =000010    -    Member      
    d3_        =000018    -    Member      
_tagJCB_   =000000    -    Type        struct _tagJCB_ 
    iof_next_  =000000    -    Member      Pointer to struct _tagJCB_ 
    iof_prev_  =000008    -    Member      Pointer to struct _tagJCB_ 
    UserName_  =000010    -    Member      Array of Char
    path_      =000050    -    Member      Array of Char
    exitRunFile_ =000250    -    Member      Array of Char
    commandLine_ =000450    -    Member      Array of Char
    pVidMem_   =000650    -    Member      Pointer to 
    pVirtVidMem_ =000658    -    Member      Pointer to 
    VideoRows_ =000660    -    Member      
    VideoCols_ =000662    -    Member      
    CursorRow_ =000664    -    Member      
    CursorCol_ =000666    -    Member      
    NormAttr_  =000668    -    Member      
    KeyState1_ =00066c    -    Member      Byte
    KeyState2_ =00066d    -    Member      Byte
    KeybdWaitFlag_ =00066e    -    Member      Byte
    KeybdHead_ =00066f    -    Member      Byte
    KeybdTail_ =000670    -    Member      Byte
    KeybdBuffer_ =000671    -    Member      Array of Unsigned Byte
    number_    =000691    -    Member      Byte
    tasks_     =000692    -    Member      Array of Char
    next_      =0006a2    -    Member      Byte
tagMBX_    =000000    -    Type        struct tagMBX_ 
    link_      =000000    -    Member      Char
    owner_     =000002    -    Member      Byte
    tq_head_   =000004    -    Member      Char
    tq_tail_   =000006    -    Member      Char
    mq_head_   =000008    -    Member      Char
    mq_tail_   =00000a    -    Member      Char
    mq_strategy_ =00000c    -    Member      Char
    resv_      =00000e    -    Member      Array of Byte
    tq_count_  =000010    -    Member      
    mq_size_   =000018    -    Member      
    mq_count_  =000020    -    Member      
    mq_missed_ =000028    -    Member      
_tagTCB_   =000000    -    Type        struct _tagTCB_ 
    regs_      =000000    -    Member      Array of Long
    isp_       =000100    -    Member      Long
    dsp_       =000108    -    Member      Long
    esp_       =000110    -    Member      Long
    ipc_       =000118    -    Member      Long
    dpc_       =000120    -    Member      Long
    epc_       =000128    -    Member      Long
    cr0_       =000130    -    Member      Long
    iregs_     =000138    -    Member      Array of Long
    iisp_      =000238    -    Member      Long
    idsp_      =000240    -    Member      Long
    iesp_      =000248    -    Member      Long
    iipc_      =000250    -    Member      Long
    idpc_      =000258    -    Member      Long
    iepc_      =000260    -    Member      Long
    icr0_      =000268    -    Member      Long
    next_      =000270    -    Member      Char
    prev_      =000272    -    Member      Char
    mbq_next_  =000274    -    Member      Char
    mbq_prev_  =000276    -    Member      Char
    sys_stack_ =000278    -    Member      Pointer to Long
    bios_stack_ =000280    -    Member      Pointer to Long
    stack_     =000288    -    Member      Pointer to Long
    timeout_   =000290    -    Member      Long
    msg_       =0002a0    -    Member      struct tagMSG_ 
    hMailboxes_ =0002c0    -    Member      Array of Char
    hWaitMbx_  =0002c8    -    Member      Char
    number_    =0002ca    -    Member      Char
    priority_  =0002cc    -    Member      Byte
    status_    =0002cd    -    Member      Byte
    affinity_  =0002ce    -    Member      Byte
    hJob_      =0002cf    -    Member      Byte
    startTick_ =0002d0    -    Member      Long
    endTick_   =0002d8    -    Member      Long
    ticks_     =0002e0    -    Member      Long
    exception_ =0002e8    -    Member      Long
tagALARM_  =000000    -    Type        struct tagALARM_ 
    next_      =000000    -    Member      Pointer to struct tagALARM_ 
    prev_      =000008    -    Member      Pointer to struct tagALARM_ 
    mbx_       =000010    -    Member      Pointer to struct tagMBX_ 
    msg_       =000018    -    Member      Pointer to struct tagMSG_ 
    BaseTimeout_ =000020    -    Member      
    timeout_   =000028    -    Member      
    repeat_    =000030    -    Member      
    resv_      =000038    -    Member      Array of Byte
