     1	
     2	typedef unsigned int uint;
     3	typedef __int16 hTCB;
     4	typedef __int8 hJCB;
     5	typedef __int16 hMBX;
     6	typedef __int16 hMSG;
     7	
     8	typedef struct tagMSG align(32) {
     9		unsigned __int16 link;
    10		unsigned __int16 retadr;    // return address
    11		unsigned __int16 tgtadr;    // target address
    12		unsigned __int16 type;
    13		unsigned int d1;            // payload data 1
    14		unsigned int d2;            // payload data 2
    15		unsigned int d3;            // payload data 3
    16	} MSG;
    17	
    18	typedef struct _tagJCB align(2048)
    19	{
    20	    struct _tagJCB *iof_next;
    21	    struct _tagJCB *iof_prev;
    22	    char UserName[32];
    23	    char path[256];
    24	    char exitRunFile[256];
    25	    char commandLine[256];
    26	    unsigned __int32 *pVidMem;
    27	    unsigned __int32 *pVirtVidMem;
    28	    unsigned __int16 VideoRows;
    29	    unsigned __int16 VideoCols;
    30	    unsigned __int16 CursorRow;
    31	    unsigned __int16 CursorCol;
    32	    unsigned __int32 NormAttr;
    33	    __int8 KeyState1;
    34	    __int8 KeyState2;
    35	    __int8 KeybdWaitFlag;
    36	    __int8 KeybdHead;
    37	    __int8 KeybdTail;
    38	    unsigned __int8 KeybdBuffer[32];
    39	    hJCB number;
    40	    hTCB tasks[8];
    41	    hJCB next;
    42	} JCB;
    43	
    44	struct tagMBX;
    45	
    46	typedef struct _tagTCB align(1024) {
    47	    // exception storage area
    48		int regs[32];
    49		int isp;
    50		int dsp;
    51		int esp;
    52		int ipc;
    53		int dpc;
    54		int epc;
    55		int cr0;
    56		// interrupt storage
    57		int iregs[32];
    58		int iisp;
    59		int idsp;
    60		int iesp;
    61		int iipc;
    62		int idpc;
    63		int iepc;
    64		int icr0;
    65		hTCB next;
    66		hTCB prev;
    67		hTCB mbq_next;
    68		hTCB mbq_prev;
    69		int *sys_stack;
    70		int *bios_stack;
    71		int *stack;
    72		__int64 timeout;
    73		MSG msg;
    74		hMBX hMailboxes[4]; // handles of mailboxes owned by task
    75		hMBX hWaitMbx;      // handle of mailbox task is waiting at
    76		hTCB number;
    77		__int8 priority;
    78		__int8 status;
    79		__int8 affinity;
    80		hJCB hJob;
    81		__int64 startTick;
    82		__int64 endTick;
    83		__int64 ticks;
    84		int exception;
    85	} TCB;
    86	
    87	typedef struct tagMBX align(64) {
    88	    hMBX link;
    89		hJCB owner;		// hJcb of owner
    90		hTCB tq_head;
    91		hTCB tq_tail;
    92		hMSG mq_head;
    93		hMSG mq_tail;
    94		char mq_strategy;
    95		byte resv[2];
    96		uint tq_count;
    97		uint mq_size;
    98		uint mq_count;
    99		uint mq_missed;
   100	} MBX;
   101	
   102	typedef struct tagALARM {
   103		struct tagALARM *next;
   104		struct tagALARM *prev;
   105		MBX *mbx;
   106		MSG *msg;
   107		uint BaseTimeout;
   108		uint timeout;
   109		uint repeat;
   110		byte resv[8];		// padding to 64 bytes
   111	} ALARM;
   112	
   113	
   114	
   115	
   116	
   117	// message types
   118	
   119	enum {
   120	     E_Ok = 0,
   121	     E_BadTCBHandle,
   122	     E_BadPriority,
   123	     E_BadCallno,
   124	     E_Arg,
   125	     E_BadMbx,
   126	     E_QueFull,
   127	     E_NoThread,
   128	     E_NotAlloc,
   129	     E_NoMsg,
   130	     E_Timeout,
   131	     E_BadAlarm,
   132	     E_NotOwner,
   133	     E_QueStrategy,
   134	     E_DCBInUse,
   135	     //; Device driver errors
   136	     E_BadDevNum =	0x20,
   137	     E_NoDev,
   138	     E_BadDevOp,
   139	     E_ReadError,
   140	     E_WriteError,
   141	     E_BadBlockNum,
   142	     E_TooManyBlocks,
   143	
   144	     // resource errors
   145	     E_NoMoreMbx =	0x40,
   146	     E_NoMoreMsgBlks,
   147	     E_NoMoreAlarmBlks,
   148	     E_NoMoreTCBs,
   149	     E_NoMem,
   150	     E_TooManyTasks
   151	};
   152	
   153	
   154	
   155	
   156	// ============================================================================
   157	//        __
   158	//   \\__/ o\    (C) 2012-2015  Robert Finch, Stratford
   159	//    \  __ /    All rights reserved.
   160	//     \/_//     robfinch<remove>@finitron.ca
   161	//       ||
   162	//
   163	// TCB.c
   164	// Task Control Block related functions.
   165	//
   166	// This source file is free software: you can redistribute it and/or modify 
   167	// it under the terms of the GNU Lesser General Public License as published 
   168	// by the Free Software Foundation, either version 3 of the License, or     
   169	// (at your option) any later version.                                      
   170	//                                                                          
   171	// This source file is distributed in the hope that it will be useful,      
   172	// but WITHOUT ANY WARRANTY; without even the implied warranty of           
   173	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
   174	// GNU General Public License for more details.                             
   175	//                                                                          
   176	// You should have received a copy of the GNU General Public License        
   177	// along with this program.  If not, see <http://www.gnu.org/licenses/>.    
   178	//                                                                          
   179	// ============================================================================
   180	//
   181	// JCB functions
   182	JCB *GetJCBPtr();                   // get the JCB pointer of the running task
   183	
   184	// TCB functions
   185	TCB *GetRunningTCBPtr();
   186	hTCB GetRunningTCB();
   187	pascal void SetRunningTCB(hTCB ht);
   188	pascal int chkTCB(TCB *p);
   189	pascal int InsertIntoReadyList(hTCB ht);
   190	pascal int RemoveFromReadyList(hTCB ht);
   191	pascal int InsertIntoTimeoutList(hTCB ht, int to);
   192	pascal int RemoveFromTimeoutList(hTCB ht);
   193	void DumpTaskList();
   194	
   195	pascal void SetBound48(TCB *ps, TCB *pe, int algn);
   196	pascal void SetBound49(JCB *ps, JCB *pe, int algn);
   197	pascal void SetBound50(MBX *ps, MBX *pe, int algn);
   198	pascal void SetBound51(MSG *ps, MSG *pe, int algn);
   199	
   200	pascal void set_vector(unsigned int, unsigned int);
   201	int getCPU();
   202	int GetVecno();          // get the last interrupt vector number
   203	void outb(unsigned int, int);
   204	void outc(unsigned int, int);
   205	void outh(unsigned int, int);
   206	void outw(unsigned int, int);
   207	pascal int LockSemaphore(int *sema, int retries);
   208	pascal void UnlockSemaphore(int *sema);
   209	
   210	// The following causes a privilege violation if called from user mode
   211	
   212	
   213	extern int irq_stack[];
   214	extern int FMTK_Inited;
   215	extern JCB jcbs[];
   216	extern TCB tcbs[];
   217	extern hTCB readyQ[];
   218	extern hTCB freeTCB;
   219	extern int sysstack[];
   220	extern int stacks[][];
   221	extern int sys_stacks[][];
   222	extern int bios_stacks[][];
   223	extern int fmtk_irq_stack[];
   224	extern int fmtk_sys_stack[];
   225	extern MBX mailbox[];
   226	extern MSG message[];
   227	extern int nMsgBlk;
   228	extern int nMailbox;
   229	extern hMSG freeMSG;
   230	extern hMBX freeMBX;
   231	extern JCB *IOFocusNdx;
   232	extern int IOFocusTbl[];
   233	extern int iof_switch;
   234	extern int BIOS1_sema;
   235	extern int iof_sema;
   236	extern int sys_sema;
   237	extern int kbd_sema;
   238	extern int BIOS_RespMbx;
   239	extern char hasUltraHighPriorityTasks;
   240	extern int missed_ticks;
   241	extern short int video_bufs[][];
   242	extern hTCB TimeoutList;
   243	
   244	
   245	extern int sys_sema;
   246	
   247	/* ---------------------------------------------------------------
   248		Description:
   249			Queue a message at a mailbox.
   250	
   251		Assumptions:
   252			valid mailbox parameter.
   253	
   254		Called from:
   255			SendMsg
   256			PostMsg
   257	--------------------------------------------------------------- */
   258	private pascal int QueueMsg(MBX *mbx, MSG *msg)
   259	{
   260	    MSG *tmpmsg;
   261	    hMSG htmp;
   262		int rr = E_Ok;
   263	
   264		if (LockSemaphore(&sys_sema,-1)) {
   265			mbx->mq_count++;
   266		
   267			// handle potential queue overflows
   268		    switch (mbx->mq_strategy) {
   269		    
   270		    	// unlimited queing (do nothing)
   271				case 0:
   272					break;
   273					
   274				// buffer newest
   275				// if the queue is full then old messages are lost
   276				// Older messages are at the head of the queue.
   277				// loop incase message queing strategy was changed
   278			    case 2:
   279			        while (mbx->mq_count > mbx->mq_size) {
   280			            // return outdated message to message pool
   281			            htmp = message[mbx->mq_head].link;
   282			            tmpmsg = &message[htmp];
   283			            message[mbx->mq_head].link = freeMSG;
   284			            freeMSG = mbx->mq_head;
   285						nMsgBlk++;
   286						mbx->mq_count--;
   287			            mbx->mq_head = htmp;
   288						if (mbx->mq_missed < 0xFFFFFFFFFFFFFFFFL)
   289							mbx->mq_missed++;
   290						rr = E_QueFull;
   291					}
   292			        break;
   293	   
   294				// buffer oldest
   295				// if the queue is full then new messages are lost
   296				// loop incase message queing strategy was changed
   297				case 1:
   298					// first return the passed message to free pool
   299					if (mbx->mq_count > mbx->mq_size) {
   300						// return new message to pool
   301						msg->link = freeMSG;
   302						freeMSG = msg-message;
   303						nMsgBlk++;
   304						if (mbx->mq_missed < 0xFFFFFFFFFFFFFFFFL)
   305							mbx->mq_missed++;
   306						rr = E_QueFull;
   307						mbx->mq_count--;
   308					}
   309					// next if still over the message limit (which
   310					// might happen if que strategy was changed), return
   311					// messages to free pool
   312					while (mbx->mq_count > mbx->mq_size) {
   313						// locate the second last message on the que
   314						tmpmsg = &message[mbx->mq_head];
   315						while (tmpmsg-message <> mbx->mq_tail) {
   316							msg = tmpmsg;
   317							tmpmsg = &message[tmpmsg->link];
   318						}
   319						mbx->mq_tail = msg-message;
   320						tmpmsg->link = freeMSG;
   321						freeMSG = tmpmsg-message;
   322						nMsgBlk++;
   323						if (mbx->mq_missed < 0xFFFFFFFFFFFFFFFFL)
   324							mbx->mq_missed++;
   325						mbx->mq_count--;
   326						rr = E_QueFull;
   327					}
   328					if (rr == E_QueFull) {
   329	             	    UnlockSemaphore(&sys_sema);
   330						return rr;
   331	                }
   332	                break;
   333			}
   334			// if there is a message in the queue
   335			if (mbx->mq_tail >= 0)
   336				message[mbx->mq_tail].link = msg-message;
   337			else
   338				mbx->mq_head = msg-message;
   339			mbx->mq_tail = msg-message;
   340			msg->link = -1;
   341		    UnlockSemaphore(&sys_sema);
   342	    }
   343		return rr;
   344	}
   345	
   346	
   347	/* ---------------------------------------------------------------
   348		Description:
   349			Dequeues a message from a mailbox.
   350	
   351		Assumptions:
   352			Mailbox parameter is valid.
   353			System semaphore is locked already.
   354	
   355		Called from:
   356			FreeMbx - (locks mailbox)
   357			WaitMsg	-	"
   358			CheckMsg-	"
   359	--------------------------------------------------------------- */
   360	


*** local symbol table ***

mbx_       =000018    -    Auto        Pointer to struct tagMBX_ 
msg_       =000020    -    Auto        Pointer to struct tagMSG_ 
tmpmsg_    =fffffff8    -    Auto        Pointer to struct tagMSG_ 
htmp_      =fffffff6    -    Auto        Char
rr_        =ffffffe8    -    Auto        Long



   361	private pascal MSG *DequeueMsg(MBX *mbx)
   362	{
   363		MSG *tmpmsg = (void *)0;
   364	    hMSG hm;
   365	 
   366		if (mbx->mq_count) {
   367			mbx->mq_count--;
   368			hm = mbx->mq_head;
   369			if (hm >= 0) {	// should not be null
   370			    tmpmsg = &message[hm];
   371				mbx->mq_head = tmpmsg->link;
   372				if (mbx->mq_head < 0)
   373					mbx->mq_tail = -1;
   374				tmpmsg->link = hm;
   375			}
   376		}
   377		return tmpmsg;
   378	}
   379	
   380	
   381	/* ---------------------------------------------------------------
   382		Description:
   383			Allocate a mailbox. The default queue strategy is to
   384		queue the eight most recent messages.
   385	--------------------------------------------------------------- */


*** local symbol table ***

mbx_       =000018    -    Auto        Pointer to struct tagMBX_ 
tmpmsg_    =fffffff8    -    Auto        Pointer to struct tagMSG_ 
hm_        =fffffff6    -    Auto        Char



   386	public int FMTK_AllocMbx(hMBX *phMbx)
   387	{
   388		MBX *mbx;
   389	
   390	    asm { mfspr r1,ivno };
   391		if (phMbx==(void *)0)
   392	    	return E_Arg;
   393		if (LockSemaphore(&sys_sema,-1)) {
   394			if (freeMBX < 0 || freeMBX >= 1024) {
   395	    	    UnlockSemaphore(&sys_sema);
   396				return E_NoMoreMbx;
   397	        }
   398			mbx = &mailbox[freeMBX];
   399			freeMBX = mbx->link;
   400			nMailbox--;
   401		    UnlockSemaphore(&sys_sema);
   402	    }
   403		*phMbx = mbx - mailbox;
   404		mbx->owner = GetJCBPtr();
   405		mbx->tq_head = -1;
   406		mbx->tq_tail = -1;
   407		mbx->mq_head = -1;
   408		mbx->mq_tail = -1;
   409		mbx->tq_count = 0;
   410		mbx->mq_count = 0;
   411		mbx->mq_missed = 0;
   412		mbx->mq_size = 8;
   413		mbx->mq_strategy = 2;
   414		return E_Ok;
   415	}
   416	
   417	
   418	/* ---------------------------------------------------------------
   419		Description:
   420			Free up a mailbox. When the mailbox is freed any queued
   421		messages must be freed. Any queued threads must also be
   422		dequeued. 
   423	--------------------------------------------------------------- */


*** local symbol table ***

phMbx_     =000018    -    Auto        Pointer to Char
mbx_       =fffffff8    -    Auto        Pointer to struct tagMBX_ 



   424	public int FMTK_FreeMbx(hMBX hMbx) 
   425	{
   426		MBX *mbx;
   427		MSG *msg;
   428		TCB *thrd;
   429		
   430	    asm { mfspr r1,ivno };
   431		__check (hMbx >= 0 && hMbx < 1024);
   432		mbx = &mailbox[hMbx];
   433		if (LockSemaphore(&sys_sema,-1)) {
   434			if ((mbx->owner <> GetJCBPtr()) and (GetJCBPtr() <> &jcbs)) {
   435	    	    UnlockSemaphore(&sys_sema);
   436				return E_NotOwner;
   437	        }
   438			// Free up any queued messages
   439			while (msg = DequeueMsg(mbx)) {
   440	            msg->type = 1;
   441	            msg->retadr = -1;
   442	            msg->tgtadr = -1;
   443				msg->link = freeMSG;
   444				freeMSG = msg - message;
   445				nMsgBlk++;
   446			}
   447			// Send an indicator to any queued threads that the mailbox
   448			// is now defunct Setting MsgPtr = null will cause any
   449			// outstanding WaitMsg() to return E_NoMsg.
   450			forever {
   451				DequeThreadFromMbx(mbx, &thrd);
   452				if (thrd == (void *)0)
   453					break;
   454				thrd->msg.type = 0;
   455				if (thrd->status & 1)
   456					RemoveFromTimeoutList(thrd-tcbs);
   457				InsertIntoReadyList(thrd-tcbs);
   458			}
   459			mbx->link = freeMBX;
   460			freeMBX = mbx-mailbox;
   461			nMailbox++;
   462		    UnlockSemaphore(&sys_sema);
   463	    }
   464		return E_Ok;
   465	}
   466	
   467	
   468	/* ---------------------------------------------------------------
   469		Description:
   470			Set the mailbox message queueing strategy.
   471	--------------------------------------------------------------- */


*** local symbol table ***

hMbx_      =000018    -    Auto        Char
mbx_       =fffffff8    -    Auto        Pointer to struct tagMBX_ 
msg_       =fffffff0    -    Auto        Pointer to struct tagMSG_ 
thrd_      =ffffffe8    -    Auto        Pointer to struct _tagTCB_ 



   472	public int SetMbxMsgQueStrategy(hMBX hMbx, int qStrategy, int qSize)
   473	{
   474		MBX *mbx;
   475	
   476	    asm { mfspr r1,ivno };
   477		__check (hMbx >= 0 && hMbx < 1024);
   478		if (qStrategy > 2)
   479			return E_Arg;
   480		mbx = &mailbox[hMbx];
   481		if (LockSemaphore(&sys_sema,-1)) {
   482			if ((mbx->owner <> GetJCBPtr()) and GetJCBPtr() <> &jcbs[0]) {
   483	      	    UnlockSemaphore(&sys_sema);
   484				return E_NotOwner;
   485	        }
   486			mbx->mq_strategy = qStrategy;
   487			mbx->mq_size = qSize;
   488		    UnlockSemaphore(&sys_sema);
   489	    }
   490		return E_Ok;
   491	}
   492	
   493	
   494	/* ---------------------------------------------------------------
   495		Description:
   496			Send a message.
   497	--------------------------------------------------------------- */


*** local symbol table ***

hMbx_      =000018    -    Auto        Char
qStrategy_ =000020    -    Auto        Long
qSize_     =000028    -    Auto        Long
mbx_       =fffffff8    -    Auto        Pointer to struct tagMBX_ 



   498	public int FMTK_SendMsg(hMBX hMbx, int d1, int d2, int d3)
   499	{
   500		MBX *mbx;
   501		MSG *msg;
   502		TCB *thrd;
   503	
   504	    asm { mfspr r1,ivno };
   505		__check (hMbx >= 0 && hMbx < 1024);
   506		mbx = &mailbox[hMbx];
   507		if (LockSemaphore(&sys_sema,-1)) {
   508			// check for a mailbox owner which indicates the mailbox
   509			// is active.
   510			if (mbx->owner < 0 || mbx->owner >= 51) {
   511	    	    UnlockSemaphore(&sys_sema);
   512	            return E_NotAlloc;
   513	        }
   514			if (freeMSG < 0 || freeMSG >= 16384) {
   515	    	    UnlockSemaphore(&sys_sema);
   516				return E_NoMoreMsgBlks;
   517	        }
   518			msg = &message[freeMSG];
   519			freeMSG = msg->link;
   520			--nMsgBlk;
   521			msg->retadr = GetJCBPtr()-jcbs;
   522			msg->tgtadr = hMbx;
   523			msg->type = 2;
   524			msg->d1 = d1;
   525			msg->d2 = d2;
   526			msg->d3 = d3;
   527			DequeThreadFromMbx(mbx, &thrd);
   528		    UnlockSemaphore(&sys_sema);
   529	    }
   530		if (thrd == (void *)0)
   531			return QueueMsg(mbx, msg);
   532		if (LockSemaphore(&sys_sema,-1)) {
   533	        thrd->msg.retadr = msg->retadr;
   534	        thrd->msg.tgtadr = msg->tgtadr;
   535	        thrd->msg.type = msg->type;
   536	        thrd->msg.d1 = msg->d1;
   537	        thrd->msg.d2 = msg->d2;
   538	        thrd->msg.d3 = msg->d3;
   539	        // free message here
   540	        msg->type = 1;
   541	        msg->retadr = -1;
   542	        msg->tgtadr = -1;
   543	        msg->link = freeMSG;
   544	        freeMSG = msg-message;
   545	    	if (thrd->status & 1)
   546	    		RemoveFromTimeoutList(thrd-tcbs);
   547	    	InsertIntoReadyList(thrd-tcbs);
   548		    UnlockSemaphore(&sys_sema);
   549	    }
   550		return E_Ok;
   551	}
   552	
   553	
   554	/* ---------------------------------------------------------------
   555		Description:
   556			PostMsg() is meant to be called in order to send a
   557		message without causing the thread to switch. This is
   558		useful in some cases. For example interrupts that don't
   559		require a low latency. Normally SendMsg() will be called,
   560		even from an ISR to allow the OS to prioritize events.
   561	--------------------------------------------------------------- */


*** local symbol table ***

hMbx_      =000018    -    Auto        Char
d1_        =000020    -    Auto        Long
d2_        =000028    -    Auto        Long
d3_        =000030    -    Auto        Long
mbx_       =fffffff8    -    Auto        Pointer to struct tagMBX_ 
msg_       =fffffff0    -    Auto        Pointer to struct tagMSG_ 
thrd_      =ffffffe8    -    Auto        Pointer to struct _tagTCB_ 



   562	public int FMTK_PostMsg(hMBX hMbx, int d1, int d2, int d3)
   563	{
   564		MBX *mbx;
   565		MSG *msg;
   566		TCB *thrd;
   567	    int ret;
   568	
   569	    asm { mfspr r1,ivno };
   570		__check (hMbx >= 0 && hMbx < 1024);
   571		mbx = &mailbox[hMbx];
   572		if (LockSemaphore(&sys_sema,-1)) {
   573			// check for a mailbox owner which indicates the mailbox
   574			// is active.
   575			if (mbx->owner < 0 || mbx->owner >= 51) {
   576	    	    UnlockSemaphore(&sys_sema);
   577				return E_NotAlloc;
   578	        }
   579			if (freeMSG  <0 || freeMSG >= 16384) {
   580	    	    UnlockSemaphore(&sys_sema);
   581				return E_NoMoreMsgBlks;
   582	        }
   583			msg = &message[freeMSG];
   584			freeMSG = msg->link;
   585			--nMsgBlk;
   586			msg->retadr = GetJCBPtr()-jcbs;
   587			msg->tgtadr = hMbx;
   588			msg->type = 2;
   589			msg->d1 = d1;
   590			msg->d2 = d2;
   591			msg->d3 = d3;
   592			DequeueThreadFromMbx(mbx, &thrd);
   593		    UnlockSemaphore(&sys_sema);
   594	    }
   595		if (thrd == (void *)0) {
   596	        ret = QueueMsg(mbx, msg);
   597			return ret;
   598	    }
   599		if (LockSemaphore(&sys_sema,-1)) {
   600	        thrd->msg.retadr = msg->retadr;
   601	        thrd->msg.tgtadr = msg->tgtadr;
   602	        thrd->msg.type = msg->type;
   603	        thrd->msg.d1 = msg->d1;
   604	        thrd->msg.d2 = msg->d2;
   605	        thrd->msg.d3 = msg->d3;
   606	        // free message here
   607	        msg->type = 1;
   608	        msg->retadr = -1;
   609	        msg->tgtadr = -1;
   610	        msg->link = freeMSG;
   611	        freeMSG = msg-message;
   612	    	if (thrd->status & 1)
   613	    		RemoveFromTimeoutList(thrd-tcbs);
   614	    	InsertIntoReadyList(thrd-tcbs);
   615		    UnlockSemaphore(&sys_sema);
   616	    }
   617		return E_Ok;
   618	}
   619	
   620	
   621	/* ---------------------------------------------------------------
   622		Description:
   623			Wait for message. If timelimit is zero then the thread
   624		will wait indefinately for a message.
   625	--------------------------------------------------------------- */
   626	


*** local symbol table ***

hMbx_      =000018    -    Auto        Char
d1_        =000020    -    Auto        Long
d2_        =000028    -    Auto        Long
d3_        =000030    -    Auto        Long
mbx_       =fffffff8    -    Auto        Pointer to struct tagMBX_ 
msg_       =fffffff0    -    Auto        Pointer to struct tagMSG_ 
thrd_      =ffffffe8    -    Auto        Pointer to struct _tagTCB_ 
ret_       =ffffffe0    -    Auto        Long



   627	public int FMTK_WaitMsg(hMBX hMbx, int *d1, int *d2, int *d3, int timelimit)
   628	{
   629		MBX *mbx;
   630		MSG *msg;
   631		TCB *thrd;
   632		TCB *rt;
   633	
   634	    asm { mfspr r1,ivno };
   635		__check (hMbx >= 0 && hMbx < 1024);
   636		mbx = &mailbox[hMbx];
   637		if (LockSemaphore(&sys_sema,-1)) {
   638	    	// check for a mailbox owner which indicates the mailbox
   639	    	// is active.
   640	    	if (mbx->owner <0 || mbx->owner >= 51) {
   641	     	    UnlockSemaphore(&sys_sema);
   642	        	return E_NotAlloc;
   643	        }
   644	    	msg = DequeueMsg(mbx);
   645		    UnlockSemaphore(&sys_sema);
   646	    }
   647		if (msg == (void *)0) {
   648	    	if (LockSemaphore(&sys_sema,-1)) {
   649				thrd = GetRunningTCBPtr();
   650				RemoveFromReadyList(thrd-tcbs);
   651	    	    UnlockSemaphore(&sys_sema);
   652	        }
   653			//-----------------------
   654			// Queue task at mailbox
   655			//-----------------------
   656			thrd->status |= 2;
   657			thrd->hWaitMbx = hMbx;
   658			thrd->mbq_next = -1;
   659	    	if (LockSemaphore(&sys_sema,-1)) {
   660				if (mbx->tq_head < 0) {
   661					thrd->mbq_prev = -1;
   662					mbx->tq_head = thrd-tcbs;
   663					mbx->tq_tail = thrd-tcbs;
   664					mbx->tq_count = 1;
   665				}
   666				else {
   667					thrd->mbq_prev = mbx->tq_tail;
   668					tcbs[mbx->tq_tail].mbq_next = thrd-tcbs;
   669					mbx->tq_tail = thrd-tcbs;
   670					mbx->tq_count++;
   671				}
   672	    	    UnlockSemaphore(&sys_sema);
   673	        }
   674			//---------------------------
   675			// Is a timeout specified ?
   676			if (timelimit) {
   677	            asm { ; Waitmsg here; }
   678	        	if (LockSemaphore(&sys_sema,-1)) {
   679	        	    InsertIntoTimeoutList(thrd-tcbs, timelimit);
   680	        	    UnlockSemaphore(&sys_sema);
   681	            }
   682	        }
   683			asm { int #2 }     // reschedule
   684			// Control will return here as a result of a SendMsg or a
   685			// timeout expiring
   686			rt = GetRunningTCBPtr(); 
   687			if (rt->msg.type == 0)
   688				return E_NoMsg;
   689			// rip up the envelope
   690			rt->msg.type = 0;
   691			rt->msg.tgtadr = -1;
   692			rt->msg.retadr = -1;
   693	    	if (d1)
   694	    		*d1 = rt->msg.d1;
   695	    	if (d2)
   696	    		*d2 = rt->msg.d2;
   697	    	if (d3)
   698	    		*d3 = rt->msg.d3;
   699			return E_Ok;
   700		}
   701		//-----------------------------------------------------
   702		// We get here if there was initially a message
   703		// available in the mailbox, or a message was made
   704		// available after a task switch.
   705		//-----------------------------------------------------
   706		if (d1)
   707			*d1 = msg->d1;
   708		if (d2)
   709			*d2 = msg->d2;
   710		if (d3)
   711			*d3 = msg->d3;
   712	   	if (LockSemaphore(&sys_sema,-1)) {
   713	        msg->type = 1;
   714	        msg->retadr = -1;
   715	        msg->tgtadr = -1;
   716			msg->link = freeMSG;
   717			freeMSG = msg-message;
   718			nMsgBlk++;
   719		    UnlockSemaphore(&sys_sema);
   720	    }
   721		return E_Ok;
   722	}
   723	
   724	// ----------------------------------------------------------------------------
   725	// PeekMsg()
   726	//     Look for a message in the queue but don't remove it from the queue.
   727	//     This is a convenince wrapper for CheckMsg().
   728	// ----------------------------------------------------------------------------
   729	


*** local symbol table ***

hMbx_      =000018    -    Auto        Char
d1_        =000020    -    Auto        Pointer to Long
d2_        =000028    -    Auto        Pointer to Long
d3_        =000030    -    Auto        Pointer to Long
timelimit_ =000038    -    Auto        Long
mbx_       =fffffff8    -    Auto        Pointer to struct tagMBX_ 
msg_       =fffffff0    -    Auto        Pointer to struct tagMSG_ 
thrd_      =ffffffe8    -    Auto        Pointer to struct _tagTCB_ 
rt_        =ffffffe0    -    Auto        Pointer to struct _tagTCB_ 



   730	int FMTK_PeekMsg(uint hMbx, int *d1, int *d2)
   731	{
   732	    return CheckMsg(hMbx, d1, d2, 0);
   733	}
   734	
   735	/* ---------------------------------------------------------------
   736		Description:
   737			Check for message at mailbox. If no message is
   738		available return immediately to the caller (CheckMsg() is
   739		non blocking). Optionally removes the message from the
   740		mailbox.
   741	--------------------------------------------------------------- */
   742	


*** local symbol table ***

hMbx_      =000018    -    Auto        
d1_        =000020    -    Auto        Pointer to Long
d2_        =000028    -    Auto        Pointer to Long



   743	int FMTK_CheckMsg(hMBX hMbx, int *d1, int *d2, int *d3, int qrmv)
   744	{
   745		MBX *mbx;
   746		MSG *msg;
   747	
   748	    asm { mfspr r1,ivno };
   749		__check (hMbx >= 0 && hMbx < 1024);
   750		mbx = &mailbox[hMbx];
   751	   	if (LockSemaphore(&sys_sema,-1)) {
   752	    	// check for a mailbox owner which indicates the mailbox
   753	    	// is active.
   754	    	if (mbx->owner == (void *)0) {
   755	    	    UnlockSemaphore(&sys_sema);
   756	    		return E_NotAlloc;
   757	        }
   758	    	if (qrmv == true)
   759	    		msg = DequeueMsg(mbx);
   760	    	else
   761	    		msg = mbx->mq_head;
   762		    UnlockSemaphore(&sys_sema);
   763	    }
   764		if (msg == (void *)0)
   765			return E_NoMsg;
   766		if (d1)
   767			*d1 = msg->d1;
   768		if (d2)
   769			*d2 = msg->d2;
   770		if (d3)
   771			*d3 = msg->d3;
   772		if (qrmv == true) {
   773	       	if (LockSemaphore(&sys_sema,-1)) {
   774	            msg->type = 1;
   775	            msg->retadr = -1;
   776	            msg->tgtadr = -1;
   777	    		msg->link = freeMSG;
   778	    		freeMSG = msg-message;
   779	    		nMsgBlk++;
   780	    	    UnlockSemaphore(&sys_sema);
   781	        }
   782		}
   783		return E_Ok;
   784	}
   785	
   786	


*** local symbol table ***

hMbx_      =000018    -    Auto        Char
d1_        =000020    -    Auto        Pointer to Long
d2_        =000028    -    Auto        Pointer to Long
d3_        =000030    -    Auto        Pointer to Long
qrmv_      =000038    -    Auto        Long
mbx_       =fffffff8    -    Auto        Pointer to struct tagMBX_ 
msg_       =fffffff0    -    Auto        Pointer to struct tagMSG_ 




 *** global scope typedef symbol table ***

jcbs_      =000000    -    External    Array of struct _tagJCB_ 
FMTK_AllocMbx_ =001480    -    Global      Function returning Long
E_NoMoreMsgBlks_ =000041    -    Constant    Long
tcbs_      =000000    -    External    Array of struct _tagTCB_ 
nMsgBlk_   =000000    -    External    Long
E_NoThread_ =000007    -    Constant    Long
E_WriteError_ =000024    -    Constant    Long
outb_      =001480    -    Global      Function returning 
IOFocusTbl_ =000000    -    External    Array of Long
outc_      =001480    -    Global      Function returning 
E_Arg_     =000004    -    Constant    Long
uint_      =000000    1   
E_NotAlloc_ =000008    -    Constant    Long
outh_      =001480    -    Global      Function returning 
irq_stack_ =000000    -    External    Array of Long
IOFocusNdx_ =000000    -    External    Pointer to struct _tagJCB_ 
DumpTaskList_ =001480    -    External    Function returning 
E_BadBlockNum_ =000025    -    Constant    Long
E_TooManyBlocks_ =000026    -    Constant    Long
JCB_       =000800    1   struct _tagJCB_ 
outw_      =001480    -    Global      Function returning 
E_BadTCBHandle_ =000001    -    Constant    Long
E_BadMbx_  =000005    -    Constant    Long
fmtk_irq_stack_ =000000    -    External    Array of Long
TCB_       =001000    1   struct _tagTCB_ 
GetRunningTCB_ =001480    -    External    Function returning Char
E_NotOwner_ =00000c    -    Constant    Long
DequeueThreadFromMbx_ =000000    -    External    Function returning Long
fmtk_sys_stack_ =000000    -    External    Array of Long
message_   =000000    -    External    Array of struct tagMSG_ 
SetRunningTCB_ =001480    -    Global      Function returning 
MSG_       =000020    1   struct tagMSG_ 
MBX_       =001400    1   struct tagMBX_ 
mailbox_   =000000    -    External    Array of struct tagMBX_ 
FMTK_Inited_ =000000    -    External    Long
DequeueMsg_ =00001c    -    Static      Function returning Pointer to struct tagMSG_ 
SetMbxMsgQueStrategy_ =001480    -    Global      Function returning Long
E_BadDevNum_ =000020    -    Constant    Long
missed_ticks_ =000000    -    External    Long
E_BadCallno_ =000003    -    Constant    Long
CheckMsg_  =000000    -    External    Function returning Long
DequeThreadFromMbx_ =000000    -    External    Function returning Long
E_BadPriority_ =000002    -    Constant    Long
chkTCB_    =001480    -    Global      Function returning Long
GetRunningTCBPtr_ =001480    -    External    Function returning Pointer to struct _tagTCB_ 
UnlockSemaphore_ =001480    -    Global      Function returning 
E_NoMoreMbx_ =000040    -    Constant    Long
GetVecno_  =001480    -    External    Function returning Long
E_QueStrategy_ =00000d    -    Constant    Long
GetJCBPtr_ =001480    -    External    Function returning Pointer to struct _tagJCB_ 
video_bufs_ =000000    -    External    Array of Array of Short
getCPU_    =001480    -    External    Function returning Long
E_ReadError_ =000023    -    Constant    Long
hasUltraHighPriorityTasks_ =000000    -    External    Char
QueueMsg_  =000000    -    Static      Function returning Long
LockSemaphore_ =001480    -    Global      Function returning Long
iof_switch_ =000000    -    External    Long
kbd_sema_  =000000    -    External    Long
hJCB_      =00000a    1   Byte
nMailbox_  =000000    -    External    Long
FMTK_FreeMbx_ =001480    -    Global      Function returning Long
FMTK_PeekMsg_ =001480    -    Global      Function returning Long
set_vector_ =001480    -    Global      Function returning 
E_NoMoreTCBs_ =000043    -    Constant    Long
hTCB_      =000008    1   Char
FMTK_SendMsg_ =001480    -    Global      Function returning Long
iof_sema_  =000000    -    External    Long
sys_stacks_ =000000    -    External    Array of Array of Long
BIOS_RespMbx_ =000000    -    External    Long
FMTK_WaitMsg_ =001480    -    Global      Function returning Long
hMBX_      =00000c    1   Char
hMSG_      =00000e    1   Char
E_DCBInUse_ =00000e    -    Constant    Long
E_Ok_      =000000    -    Constant    Long
FMTK_PostMsg_ =001480    -    Global      Function returning Long
E_QueFull_ =000006    -    Constant    Long
BIOS1_sema_ =000000    -    External    Long
sys_sema_  =000000    -    External    Long
readyQ_    =000000    -    External    Array of Char
ALARM_     =001440    1   struct tagALARM_ 
E_NoMoreAlarmBlks_ =000042    -    Constant    Long
E_TooManyTasks_ =000045    -    Constant    Long
sysstack_  =000000    -    External    Array of Long
freeTCB_   =000000    -    External    Char
E_NoDev_   =000021    -    Constant    Long
E_NoMem_   =000044    -    Constant    Long
TimeoutList_ =000000    -    External    Char
RemoveFromTimeoutList_ =001480    -    Global      Function returning Long
E_NoMsg_   =000009    -    Constant    Long
E_BadDevOp_ =000022    -    Constant    Long
SetBound50_ =001480    -    Global      Function returning 
stacks_    =000000    -    External    Array of Array of Long
freeMSG_   =000000    -    External    Char
freeMBX_   =000000    -    External    Char
SetBound51_ =001480    -    Global      Function returning 
E_Timeout_ =00000a    -    Constant    Long
SetBound48_ =001480    -    Global      Function returning 
SetBound49_ =001480    -    Global      Function returning 
InsertIntoTimeoutList_ =001480    -    Global      Function returning Long
RemoveFromReadyList_ =001480    -    Global      Function returning Long
bios_stacks_ =000000    -    External    Array of Array of Long
FMTK_CheckMsg_ =001480    -    Global      Function returning Long
E_BadAlarm_ =00000b    -    Constant    Long
InsertIntoReadyList_ =001480    -    Global      Function returning Long

 *** structures and unions ***

tagMSG_    =000000    -    Type        struct tagMSG_ 
    link_      =000000    -    Member      
    retadr_    =000002    -    Member      
    tgtadr_    =000004    -    Member      
    type_      =000006    -    Member      
    d1_        =000008    -    Member      
    d2_        =000010    -    Member      
    d3_        =000018    -    Member      
_tagJCB_   =000000    -    Type        struct _tagJCB_ 
    iof_next_  =000000    -    Member      Pointer to struct _tagJCB_ 
    iof_prev_  =000008    -    Member      Pointer to struct _tagJCB_ 
    UserName_  =000010    -    Member      Array of Char
    path_      =000050    -    Member      Array of Char
    exitRunFile_ =000250    -    Member      Array of Char
    commandLine_ =000450    -    Member      Array of Char
    pVidMem_   =000650    -    Member      Pointer to 
    pVirtVidMem_ =000658    -    Member      Pointer to 
    VideoRows_ =000660    -    Member      
    VideoCols_ =000662    -    Member      
    CursorRow_ =000664    -    Member      
    CursorCol_ =000666    -    Member      
    NormAttr_  =000668    -    Member      
    KeyState1_ =00066c    -    Member      Byte
    KeyState2_ =00066d    -    Member      Byte
    KeybdWaitFlag_ =00066e    -    Member      Byte
    KeybdHead_ =00066f    -    Member      Byte
    KeybdTail_ =000670    -    Member      Byte
    KeybdBuffer_ =000671    -    Member      Array of Unsigned Byte
    number_    =000691    -    Member      Byte
    tasks_     =000692    -    Member      Array of Char
    next_      =0006a2    -    Member      Byte
tagMBX_    =000000    -    Type        struct tagMBX_ 
    link_      =000000    -    Member      Char
    owner_     =000002    -    Member      Byte
    tq_head_   =000004    -    Member      Char
    tq_tail_   =000006    -    Member      Char
    mq_head_   =000008    -    Member      Char
    mq_tail_   =00000a    -    Member      Char
    mq_strategy_ =00000c    -    Member      Char
    resv_      =00000e    -    Member      Array of Byte
    tq_count_  =000010    -    Member      
    mq_size_   =000018    -    Member      
    mq_count_  =000020    -    Member      
    mq_missed_ =000028    -    Member      
_tagTCB_   =000000    -    Type        struct _tagTCB_ 
    regs_      =000000    -    Member      Array of Long
    isp_       =000100    -    Member      Long
    dsp_       =000108    -    Member      Long
    esp_       =000110    -    Member      Long
    ipc_       =000118    -    Member      Long
    dpc_       =000120    -    Member      Long
    epc_       =000128    -    Member      Long
    cr0_       =000130    -    Member      Long
    iregs_     =000138    -    Member      Array of Long
    iisp_      =000238    -    Member      Long
    idsp_      =000240    -    Member      Long
    iesp_      =000248    -    Member      Long
    iipc_      =000250    -    Member      Long
    idpc_      =000258    -    Member      Long
    iepc_      =000260    -    Member      Long
    icr0_      =000268    -    Member      Long
    next_      =000270    -    Member      Char
    prev_      =000272    -    Member      Char
    mbq_next_  =000274    -    Member      Char
    mbq_prev_  =000276    -    Member      Char
    sys_stack_ =000278    -    Member      Pointer to Long
    bios_stack_ =000280    -    Member      Pointer to Long
    stack_     =000288    -    Member      Pointer to Long
    timeout_   =000290    -    Member      Long
    msg_       =0002a0    -    Member      struct tagMSG_ 
    hMailboxes_ =0002c0    -    Member      Array of Char
    hWaitMbx_  =0002c8    -    Member      Char
    number_    =0002ca    -    Member      Char
    priority_  =0002cc    -    Member      Byte
    status_    =0002cd    -    Member      Byte
    affinity_  =0002ce    -    Member      Byte
    hJob_      =0002cf    -    Member      Byte
    startTick_ =0002d0    -    Member      Long
    endTick_   =0002d8    -    Member      Long
    ticks_     =0002e0    -    Member      Long
    exception_ =0002e8    -    Member      Long
tagALARM_  =000000    -    Type        struct tagALARM_ 
    next_      =000000    -    Member      Pointer to struct tagALARM_ 
    prev_      =000008    -    Member      Pointer to struct tagALARM_ 
    mbx_       =000010    -    Member      Pointer to struct tagMBX_ 
    msg_       =000018    -    Member      Pointer to struct tagMSG_ 
    BaseTimeout_ =000020    -    Member      
    timeout_   =000028    -    Member      
    repeat_    =000030    -    Member      
    resv_      =000038    -    Member      Array of Byte
