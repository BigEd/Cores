     1	
     2	typedef unsigned int uint;
     3	
     4	typedef struct tagMSG align(32) {
     5		struct tagMSG *link;
     6		uint d1;
     7		uint d2;
     8		uint type;
     9	} MSG;
    10	
    11	typedef struct _tagJCB align(2048)
    12	{
    13	    struct _tagJCB *iof_next;
    14	    struct _tagJCB *iof_prev;
    15	    char UserName[32];
    16	    char path[256];
    17	    char exitRunFile[256];
    18	    char commandLine[256];
    19	    unsigned __int32 *pVidMem;
    20	    unsigned __int32 *pVirtVidMem;
    21	    unsigned __int16 VideoRows;
    22	    unsigned __int16 VideoCols;
    23	    unsigned __int16 CursorRow;
    24	    unsigned __int16 CursorCol;
    25	    unsigned __int32 NormAttr;
    26	    __int8 KeybdHead;
    27	    __int8 KeybdTail;
    28	    unsigned __int16 KeybdBuffer[16];
    29	    __int16 number;
    30	} JCB;
    31	
    32	struct tagMBX;
    33	
    34	typedef struct _tagTCB align(512) {
    35		int regs[32];
    36		int isp;
    37		int dsp;
    38		int esp;
    39		int ipc;
    40		int dpc;
    41		int epc;
    42		int cr0;
    43		struct _tagTCB *next;
    44		struct _tagTCB *prev;
    45		struct _tagTCB *mbq_next;
    46		struct _tagTCB *mbq_prev;
    47		int *sys_stack;
    48		int *bios_stack;
    49		int *stack;
    50		__int64 timeout;
    51		JCB *hJob;
    52		int msgD1;
    53		int msgD2;
    54		MSG *MsgPtr;
    55		uint hWaitMbx;
    56		struct tagMBX *mailboxes;
    57		__int8 priority;
    58		__int8 status;
    59		__int8 affinity;
    60		__int16 number;
    61	} TCB;
    62	
    63	typedef struct tagMBX align(128) {
    64	    struct tagMBX *link;
    65		TCB *tq_head;
    66		TCB *tq_tail;
    67		MSG *mq_head;
    68		MSG *mq_tail;
    69		uint tq_count;
    70		uint mq_size;
    71		uint mq_count;
    72		uint mq_missed;
    73		uint owner;		// hJcb of owner
    74		char mq_strategy;
    75		byte resv[7];
    76	} MBX;
    77	
    78	typedef struct tagALARM {
    79		struct tagALARM *next;
    80		struct tagALARM *prev;
    81		MBX *mbx;
    82		MSG *msg;
    83		uint BaseTimeout;
    84		uint timeout;
    85		uint repeat;
    86		byte resv[8];		// padding to 64 bytes
    87	} ALARM;
    88	
    89	
    90	
    91	
    92	
    93	
    94	enum {
    95	     E_Ok = 0,
    96	     E_BadTCBHandle,
    97	     E_BadPriority,
    98	     E_BadCallno,
    99	     E_Arg,
   100	     E_BadMbx,
   101	     E_QueFull,
   102	     E_NoThread,
   103	     E_NotAlloc,
   104	     E_NoMsg,
   105	     E_Timeout,
   106	     E_BadAlarm,
   107	     E_NotOwner,
   108	     E_QueStrategy,
   109	     E_DCBInUse,
   110	     //; Device driver errors
   111	     E_BadDevNum =	0x20,
   112	     E_NoDev,
   113	     E_BadDevOp,
   114	     E_ReadError,
   115	     E_WriteError,
   116	     E_BadBlockNum,
   117	     E_TooManyBlocks,
   118	
   119	     // resource errors
   120	     E_NoMoreMbx =	0x40,
   121	     E_NoMoreMsgBlks,
   122	     E_NoMoreAlarmBlks,
   123	     E_NoMoreTCBs,
   124	     E_NoMem
   125	};
   126	
   127	
   128	
   129	
   130	TCB *GetRunningTCB();
   131	JCB *GetJCBPtr();                   // get the JCB pointer of the running task
   132	void set_vector(unsigned int, unsigned int);
   133	int getCPU();
   134	void outb(unsigned int, int);
   135	void outc(unsigned int, int);
   136	void outh(unsigned int, int);
   137	void outw(unsigned int, int);
   138	
   139	
   140	extern int irq_stack[];
   141	extern int FMTK_Inited;
   142	extern JCB jcbs[];
   143	extern TCB tcbs[];
   144	extern TCB *readyQ[];
   145	extern TCB *runningTCB;
   146	extern TCB *freeTCB;
   147	extern int sysstack[];
   148	extern int stacks[][];
   149	extern int sys_stacks[][];
   150	extern int bios_stacks[][];
   151	extern int fmtk_irq_stack[];
   152	extern int fmtk_sys_stack[];
   153	extern MBX mailbox[];
   154	extern MSG message[];
   155	extern int nMsgBlk;
   156	extern int nMailbox;
   157	extern MSG *freeMSG;
   158	extern MBX *freeMBX;
   159	extern JCB *IOFocusNdx;
   160	extern int IOFocusTbl[];
   161	extern int iof_switch;
   162	extern int BIOS1_sema;
   163	extern int iof_sema;
   164	extern int sys_sema;
   165	extern int BIOS_RespMbx;
   166	extern char hasUltraHighPriorityTasks;
   167	extern int missed_ticks;
   168	extern short int video_bufs[][];
   169	extern TCB *TimeoutList;
   170	
   171	
   172	int chkMBX(int hMBX) {
   173	    asm {
   174	        lw    r1,24[bp]
   175	        chk   r1,r1,b50
   176	    }
   177	}
   178	


*** local symbol table ***

hMBX_      =000018    -    Auto        Long



   179	int chkMSG(int msg) {
   180	    asm {
   181	        lw    r1,24[bp]
   182	        chk   r1,r1,b51
   183	    }
   184	}
   185	
   186	/* ---------------------------------------------------------------
   187		Description:
   188			Queue a message at a mailbox.
   189	
   190		Assumptions:
   191			valid mailbox parameter.
   192	
   193		Called from:
   194			SendMsg
   195			PostMsg
   196	--------------------------------------------------------------- */


*** local symbol table ***

msg_       =000018    -    Auto        Long



   197	private int QueueMsg(MBX *mbx, MSG *msg)
   198	{
   199	    MSG *tmpmsg;
   200		int rr = E_Ok;
   201	
   202	    if (!chkMSG(msg))
   203	        return E_Ok;
   204	
   205		LockSYS();
   206			mbx->mq_count++;
   207		
   208			// handle potential queue overflows
   209		    switch (mbx->mq_strategy) {
   210		    
   211		    	// unlimited queing (do nothing)
   212				case 0:
   213					break;
   214					
   215				// buffer newest
   216				// if the queue is full then old messages are lost
   217				// Older messages are at the head of the queue.
   218				// loop incase message queing strategy was changed
   219			    case 2:
   220			        while (mbx->mq_count > mbx->mq_size) {
   221			            // return outdated message to message pool
   222			            tmpmsg = mbx->mq_head->link;
   223			            mbx->mq_head->link = freeMSG;
   224			            freeMSG = mbx->mq_head;
   225						nMsgBlk++;
   226						mbx->mq_count--;
   227			            mbx->mq_head = tmpmsg;
   228						if (mbx->mq_missed < 0xFFFFFFFFFFFFFFFFL)
   229							mbx->mq_missed++;
   230						rr = E_QueFull;
   231					}
   232			        break;
   233	   
   234				// buffer oldest
   235				// if the queue is full then new messages are lost
   236				// loop incase message queing strategy was changed
   237				case 1:
   238					// first return the passed message to free pool
   239					if (mbx->mq_count > mbx->mq_size) {
   240						// return new message to pool
   241						msg->link = freeMSG;
   242						freeMSG = msg;
   243						nMsgBlk++;
   244						if (mbx->mq_missed < 0xFFFFFFFFFFFFFFFFL)
   245							mbx->mq_missed++;
   246						rr = E_QueFull;
   247						mbx->mq_count--;
   248					}
   249					// next if still over the message limit (which
   250					// might happen if que strategy was changed), return
   251					// messages to free pool
   252					while (mbx->mq_count > mbx->mq_size) {
   253						// locate the second last message on the que
   254						tmpmsg = mbx->mq_head;
   255						while (tmpmsg <> mbx->mq_tail) {
   256							msg = tmpmsg;
   257							tmpmsg = tmpmsg->link;
   258						}
   259						mbx->mq_tail = msg;
   260						tmpmsg->link = freeMSG;
   261						freeMSG = tmpmsg;
   262						nMsgBlk++;
   263						if (mbx->mq_missed < 0xFFFFFFFFFFFFFFFFL)
   264							mbx->mq_missed++;
   265						mbx->mq_count--;
   266						rr = E_QueFull;
   267					}
   268					if (rr == E_QueFull) {
   269	                    UnlockSYS(); 
   270						return rr;
   271	                }
   272	                break;
   273			}
   274			// if there is a message in the queue
   275			if (mbx->mq_tail)
   276				mbx->mq_tail->link = msg;
   277			else
   278				mbx->mq_head = msg;
   279			mbx->mq_tail = msg;
   280			msg->link = (void *)0;
   281		UnlockSYS();
   282		return rr;
   283	}
   284	
   285	
   286	/* ---------------------------------------------------------------
   287		Description:
   288			Dequeues a message from a mailbox.
   289	
   290		Assumptions:
   291			Mailbox parameter is valid.
   292			System semaphore is locked already.
   293	
   294		Called from:
   295			FreeMbx - (locks mailbox)
   296			WaitMsg	-	"
   297			CheckMsg-	"
   298	--------------------------------------------------------------- */
   299	


*** local symbol table ***

mbx_       =000018    -    Auto        Pointer to struct tagMBX_ 
msg_       =000020    -    Auto        Pointer to struct tagMSG_ 
tmpmsg_    =fffffff8    -    Auto        Pointer to struct tagMSG_ 
rr_        =fffffff0    -    Auto        Long



   300	private MSG *DequeueMsg(MBX *mbx)
   301	{
   302		MSG *tmpmsg = (void *)0;
   303	
   304		if (mbx->mq_count) {
   305			mbx->mq_count--;
   306			tmpmsg = mbx->mq_head;
   307			if (tmpmsg) {	// should not be null
   308				mbx->mq_head = tmpmsg->link;
   309				if (mbx->mq_head == (void *)0)
   310					mbx->mq_tail = (void *)0;
   311				tmpmsg->link = tmpmsg;
   312			}
   313		}
   314		return tmpmsg;
   315	}
   316	
   317	
   318	/* ---------------------------------------------------------------
   319		Description:
   320			Allocate a mailbox. The default queue strategy is to
   321		queue the eight most recent messages.
   322	--------------------------------------------------------------- */


*** local symbol table ***

mbx_       =000018    -    Auto        Pointer to struct tagMBX_ 
tmpmsg_    =fffffff8    -    Auto        Pointer to struct tagMSG_ 



   323	public int FMTK_AllocMbx(uint *phMbx)
   324	{
   325		MBX *mbx;
   326	
   327		if (phMbx==(void *)0)
   328	    	return E_Arg;
   329		LockSYS();
   330			if (freeMBX == (void *)0) {
   331	            UnlockSYS();
   332				return E_NoMoreMbx;
   333	        }
   334			mbx = freeMBX;
   335			freeMBX = mbx->link;
   336			nMailbox--;
   337		UnlockSYS();
   338		*phMbx = mbx - mailbox;
   339		mbx->owner = GetJCBPtr();
   340		mbx->tq_head = (void *)0;
   341		mbx->tq_tail = (void *)0;
   342		mbx->mq_head = (void *)0;
   343		mbx->mq_tail = (void *)0;
   344		mbx->tq_count = 0;
   345		mbx->mq_count = 0;
   346		mbx->mq_missed = 0;
   347		mbx->mq_size = 8;
   348		mbx->mq_strategy = 2;
   349		return E_Ok;
   350	}
   351	
   352	
   353	/* ---------------------------------------------------------------
   354		Description:
   355			Free up a mailbox. When the mailbox is freed any queued
   356		messages must be freed. Any queued threads must also be
   357		dequeued. 
   358	--------------------------------------------------------------- */


*** local symbol table ***

phMbx_     =000018    -    Auto        Pointer to 
mbx_       =fffffff8    -    Auto        Pointer to struct tagMBX_ 



   359	public int FMTK_FreeMbx(uint hMbx) 
   360	{
   361		MBX *mbx;
   362		MSG *msg;
   363		TCB *thrd;
   364		
   365		if (hMbx >= 2048)
   366			return E_BadMbx;
   367		mbx = &mailbox[hMbx];
   368		LockSYS();
   369			if ((mbx->owner <> GetJCBPtr()) and (GetJCBPtr() <> &jcbs))
   370					return E_NotOwner;
   371			// Free up any queued messages
   372			while (msg = DequeueMsg(mbx)) {
   373				msg->link = freeMSG;
   374				freeMSG = msg;
   375				nMsgBlk++;
   376			}
   377			// Send an indicator to any queued threads that the mailbox
   378			// is now defunct Setting MsgPtr = null will cause any
   379			// outstanding WaitMsg() to return E_NoMsg.
   380			forever {
   381				DequeThreadFromMbx(mbx, &thrd);
   382				if (thrd == (void *)0)
   383					break;
   384				thrd->MsgPtr = (void *)0;
   385				if (thrd->status & 1)
   386					RemoveFromTimeoutList(thrd);
   387				InsertIntoReadyList(thrd);
   388			}
   389			mbx->link = freeMBX;
   390			freeMBX = mbx;
   391			nMailbox++;
   392		UnlockSYS();
   393		return E_Ok;
   394	}
   395	
   396	
   397	/* ---------------------------------------------------------------
   398		Description:
   399			Set the mailbox message queueing strategy.
   400	--------------------------------------------------------------- */


*** local symbol table ***

hMbx_      =000018    -    Auto        
mbx_       =fffffff8    -    Auto        Pointer to struct tagMBX_ 
msg_       =fffffff0    -    Auto        Pointer to struct tagMSG_ 
thrd_      =ffffffe8    -    Auto        Pointer to struct _tagTCB_ 



   401	public SetMbxMsgQueStrategy(uint hMbx, int qStrategy, int qSize)
   402	{
   403		MBX *mbx;
   404	
   405		if (hMbx >= 2048)
   406			return E_BadMbx;
   407		if (qStrategy > 2)
   408			return E_Arg;
   409		mbx = &mailbox[hMbx];
   410		LockSYS();
   411			if ((mbx->owner <> GetJCBPtr()) and GetJCBPtr() <> &jcbs[0])
   412					return E_NotOwner;
   413			mbx->mq_strategy = qStrategy;
   414			mbx->mq_size = qSize;
   415		UnlockSYS();
   416		return E_Ok;
   417	}
   418	
   419	
   420	/* ---------------------------------------------------------------
   421		Description:
   422			Send a message.
   423	--------------------------------------------------------------- */


*** local symbol table ***

hMbx_      =000018    -    Auto        
qStrategy_ =000020    -    Auto        Long
qSize_     =000028    -    Auto        Long
mbx_       =fffffff8    -    Auto        Pointer to struct tagMBX_ 



   424	public int FMTK_SendMsg(uint hMbx, int d1, int d2)
   425	{
   426		MBX *mbx;
   427		MSG *msg;
   428		TCB *thrd;
   429	
   430		if (hMbx >= 2048)
   431			return E_BadMbx;
   432	
   433		mbx = &mailbox[hMbx];
   434		LockSYS();
   435			// check for a mailbox owner which indicates the mailbox
   436			// is active.
   437			if (mbx->owner == (void *)0) {
   438	           UnlockSYS();
   439	           return E_NotAlloc;
   440	        }
   441			msg = freeMSG;
   442			if (msg == (void *)0) {
   443			    UnlockSYS();
   444				return E_NoMoreMsgBlks;
   445	        }
   446			freeMSG = msg->link;
   447			--nMsgBlk;
   448			msg->type = 0;
   449			msg->d1 = d1;
   450			msg->d2 = d2;
   451			DequeThreadFromMbx(mbx, &thrd);
   452		UnlockSYS();
   453		if (thrd == (void *)0)
   454			return QueueMsg(mbx, msg);
   455		LockSYS();
   456	    	thrd->MsgPtr = msg;
   457	    	if (thrd->status & 1)
   458	    		RemoveFromTimeoutList(thrd);
   459	    	InsertIntoReadyList(thrd);
   460		UnlockSYS();
   461		return E_Ok;
   462	}
   463	
   464	
   465	/* ---------------------------------------------------------------
   466		Description:
   467			PostMsg() is meant to be called in order to send a
   468		message without causing the thread to switch. This is
   469		useful in some cases. For example interrupts that don't
   470		require a low latency. Normally SendMsg() will be called,
   471		even from an ISR to allow the OS to prioritize events.
   472	--------------------------------------------------------------- */


*** local symbol table ***

hMbx_      =000018    -    Auto        
d1_        =000020    -    Auto        Long
d2_        =000028    -    Auto        Long
mbx_       =fffffff8    -    Auto        Pointer to struct tagMBX_ 
msg_       =fffffff0    -    Auto        Pointer to struct tagMSG_ 
thrd_      =ffffffe8    -    Auto        Pointer to struct _tagTCB_ 



   473	public int FMTK_PostMsg(int hMbx, int d1, int d2)
   474	{
   475		MBX *mbx;
   476		MSG *msg;
   477		TCB *thrd;
   478	    int ret;
   479	
   480		if (hMbx >= 2048)
   481			return E_BadMbx;
   482	
   483		mbx = &mailbox[hMbx];
   484		LockSYS();
   485			// check for a mailbox owner which indicates the mailbox
   486			// is active.
   487			if (mbx->owner == (void *)0) {
   488	            UnlockSYS();
   489				return E_NotAlloc;
   490	        }
   491			msg = freeMSG;
   492			if (msg == (void *)0) {
   493	            UnlockSYS();
   494				return E_NoMoreMsgBlks;
   495	        }
   496			freeMSG = msg->link;
   497			--nMsgBlk;
   498			msg->type = 0;
   499			msg->d1 = d1;
   500			msg->d2 = d2;
   501			DequeueThreadFromMbx(mbx, &thrd);
   502		UnlockSYS();
   503		if (thrd == (void *)0) {
   504	        ret = QueueMsg(mbx, msg);
   505			return ret;
   506	    }
   507	    LockSYS();
   508	    	thrd->MsgPtr = msg;
   509	    	if (thrd->status & 1)
   510	    		RemoveFromTimeoutList(thrd);
   511	    	AddToReadyList(thrd);
   512	   	UnlockSYS();
   513		return E_Ok;
   514	}
   515	
   516	
   517	/* ---------------------------------------------------------------
   518		Description:
   519			Wait for message. If timelimit is zero then the thread
   520		will wait indefinately for a message.
   521	--------------------------------------------------------------- */
   522	


*** local symbol table ***

hMbx_      =000018    -    Auto        Long
d1_        =000020    -    Auto        Long
d2_        =000028    -    Auto        Long
mbx_       =fffffff8    -    Auto        Pointer to struct tagMBX_ 
msg_       =fffffff0    -    Auto        Pointer to struct tagMSG_ 
thrd_      =ffffffe8    -    Auto        Pointer to struct _tagTCB_ 
ret_       =ffffffe0    -    Auto        Long



   523	public int FMTK_WaitMsg(uint hMbx, int *d1, int *d2, int timelimit)
   524	{
   525		MBX *mbx;
   526		MSG *msg;
   527		TCB *thrd;
   528	
   529		if (hMbx >= 2048)
   530			return E_BadMbx;
   531	
   532		mbx = &mailbox[hMbx];
   533		LockSYS();
   534	    	// check for a mailbox owner which indicates the mailbox
   535	    	// is active.
   536	    	if (mbx->owner == (void *)0) {
   537	            UnlockSYS();
   538	        	return E_NotAlloc;
   539	        }
   540	    	msg = DequeueMsg(mbx);
   541		UnlockSYS();
   542		if (msg == (void *)0) {
   543			LockSYS();
   544				thrd = GetRunningTCB();
   545				RemoveFromReadyList(thrd);
   546			UnlockSYS();
   547			//-----------------------
   548			// Queue task at mailbox
   549			//-----------------------
   550			thrd->status |= 2;
   551			thrd->hWaitMbx = hMbx;
   552			thrd->mbq_next = (void *)0;
   553			LockSYS();
   554				if (mbx->tq_head == (void *)0) {
   555					thrd->mbq_prev = (void *)0;
   556					mbx->tq_head = thrd;
   557					mbx->tq_tail = thrd;
   558					mbx->tq_count = 1;
   559				}
   560				else {
   561					thrd->mbq_prev = mbx->tq_tail;
   562					mbx->tq_tail->mbq_next = thrd;
   563					mbx->tq_tail = thrd;
   564					mbx->tq_count++;
   565				}
   566			UnlockSYS();
   567			//---------------------------
   568			// Is a timeout specified ?
   569			if (timelimit) {
   570	            LockSYS();
   571	        	    AddToTimeoutList(thrd, timelimit);
   572	       	    UnlockSYS();
   573	        }
   574			asm { int #2 }     // reschedule
   575			// Control will return here as a result of a SendMsg or a
   576			// timeout expiring
   577			msg = GetRunningTCB()->MsgPtr;
   578			if (msg == (void *)0)
   579				return E_NoMsg;
   580			GetRunningTCB()->MsgPtr = (void *)0;
   581		}
   582		//-----------------------------------------------------
   583		// We get here if there was initially a message
   584		// available in the mailbox, or a message was made
   585		// available after a task switch.
   586		//-----------------------------------------------------
   587		if (d1)
   588			*d1 = msg->d1;
   589		if (d2)
   590			*d2 = msg->d2;
   591		LockSYS();
   592			msg->link = freeMSG;
   593			freeMSG = msg;
   594			nMsgBlk++;
   595		UnlockSYS();
   596		return E_Ok;
   597	}
   598	
   599	// ----------------------------------------------------------------------------
   600	// PeekMsg()
   601	//     Look for a message in the queue but don't remove it from the queue.
   602	//     This is a convenince wrapper for CheckMsg().
   603	// ----------------------------------------------------------------------------
   604	


*** local symbol table ***

hMbx_      =000018    -    Auto        
d1_        =000020    -    Auto        Pointer to Long
d2_        =000028    -    Auto        Pointer to Long
timelimit_ =000030    -    Auto        Long
mbx_       =fffffff8    -    Auto        Pointer to struct tagMBX_ 
msg_       =fffffff0    -    Auto        Pointer to struct tagMSG_ 
thrd_      =ffffffe8    -    Auto        Pointer to struct _tagTCB_ 



   605	int FMTK_PeekMsg(uint hMbx, int *d1, int *d2)
   606	{
   607	    return CheckMsg(hMbx, d1, d2, 0);
   608	}
   609	
   610	/* ---------------------------------------------------------------
   611		Description:
   612			Check for message at mailbox. If no message is
   613		available return immediately to the caller (CheckMsg() is
   614		non blocking). Optionally removes the message from the
   615		mailbox.
   616	--------------------------------------------------------------- */
   617	


*** local symbol table ***

hMbx_      =000018    -    Auto        
d1_        =000020    -    Auto        Pointer to Long
d2_        =000028    -    Auto        Pointer to Long



   618	int FMTK_CheckMsg(uint hMbx, int *d1, int *d2, int qrmv)
   619	{
   620		MBX *mbx;
   621		MSG *msg;
   622	
   623		if (hMbx >= 2048)
   624			return E_BadMbx;
   625	
   626		mbx = &mailbox[hMbx];
   627		LockSYS();
   628		// check for a mailbox owner which indicates the mailbox
   629		// is active.
   630		if (mbx->owner == (void *)0) {
   631	        UnlockSYS();
   632			return E_NotAlloc;
   633	    }
   634		if (qrmv == true)
   635			msg = DequeueMsg(mbx);
   636		else
   637			msg = mbx->mq_head;
   638		UnlockSYS();
   639		if (msg == (void *)0)
   640			return E_NoMsg;
   641		if (d1)
   642			*d1 = msg->d1;
   643		if (d2)
   644			*d2 = msg->d2;
   645		if (qrmv == true) {
   646	        LockSYS();
   647	    		msg->link = freeMSG;
   648	    		freeMSG = msg;
   649	    		nMsgBlk++;
   650			UnlockSYS();
   651		}
   652		return E_Ok;
   653	}
   654	
   655	


*** local symbol table ***

hMbx_      =000018    -    Auto        
d1_        =000020    -    Auto        Pointer to Long
d2_        =000028    -    Auto        Pointer to Long
qrmv_      =000030    -    Auto        Long
mbx_       =fffffff8    -    Auto        Pointer to struct tagMBX_ 
msg_       =fffffff0    -    Auto        Pointer to struct tagMSG_ 




 *** global scope typedef symbol table ***

jcbs_      =000000    -    External    Array of struct _tagJCB_ 
FMTK_AllocMbx_ =0012c0    -    Global      Function returning Long
E_NoMoreMsgBlks_ =000041    -    Constant    Long
tcbs_      =000000    -    External    Array of struct _tagTCB_ 
nMsgBlk_   =000000    -    External    Long
E_NoThread_ =000007    -    Constant    Long
E_WriteError_ =000024    -    Constant    Long
outb_      =0012c0    -    Global      Function returning 
IOFocusTbl_ =000000    -    External    Array of Long
outc_      =0012c0    -    Global      Function returning 
E_Arg_     =000004    -    Constant    Long
uint_      =000000    1   
E_NotAlloc_ =000008    -    Constant    Long
outh_      =0012c0    -    Global      Function returning 
irq_stack_ =000000    -    External    Array of Long
IOFocusNdx_ =000000    -    External    Pointer to struct _tagJCB_ 
E_BadBlockNum_ =000025    -    Constant    Long
E_TooManyBlocks_ =000026    -    Constant    Long
JCB_       =000800    1   struct _tagJCB_ 
outw_      =0012c0    -    Global      Function returning 
E_BadTCBHandle_ =000001    -    Constant    Long
E_BadMbx_  =000005    -    Constant    Long
fmtk_irq_stack_ =000000    -    External    Array of Long
TCB_       =001000    1   struct _tagTCB_ 
GetRunningTCB_ =0012c0    -    External    Function returning Pointer to struct _tagTCB_ 
runningTCB_ =000000    -    External    Pointer to struct _tagTCB_ 
E_NotOwner_ =00000c    -    Constant    Long
DequeueThreadFromMbx_ =000000    -    External    Function returning Long
fmtk_sys_stack_ =000000    -    External    Array of Long
message_   =000000    -    External    Array of struct tagMSG_ 
MSG_       =000020    1   struct tagMSG_ 
MBX_       =001200    1   struct tagMBX_ 
mailbox_   =000000    -    External    Array of struct tagMBX_ 
FMTK_Inited_ =000000    -    External    Long
DequeueMsg_ =00001f    -    Static      Function returning Pointer to struct tagMSG_ 
SetMbxMsgQueStrategy_ =0012c0    -    Global      Function returning Long
E_BadDevNum_ =000020    -    Constant    Long
missed_ticks_ =000000    -    External    Long
E_BadCallno_ =000003    -    Constant    Long
CheckMsg_  =000000    -    External    Function returning Long
DequeThreadFromMbx_ =000000    -    External    Function returning Long
E_BadPriority_ =000002    -    Constant    Long
E_NoMoreMbx_ =000040    -    Constant    Long
chkMBX_    =0012c0    -    Global      Function returning Long
chkMSG_    =0012c0    -    Global      Function returning Long
E_QueStrategy_ =00000d    -    Constant    Long
GetJCBPtr_ =0012c0    -    External    Function returning Pointer to struct _tagJCB_ 
video_bufs_ =000000    -    External    Array of Array of Short
getCPU_    =0012c0    -    External    Function returning Long
E_ReadError_ =000023    -    Constant    Long
hasUltraHighPriorityTasks_ =000000    -    External    Char
QueueMsg_  =000004    -    Static      Function returning Long
iof_switch_ =000000    -    External    Long
nMailbox_  =000000    -    External    Long
FMTK_FreeMbx_ =0012c0    -    Global      Function returning Long
FMTK_PeekMsg_ =0012c0    -    Global      Function returning Long
set_vector_ =0012c0    -    Global      Function returning 
E_NoMoreTCBs_ =000043    -    Constant    Long
FMTK_SendMsg_ =0012c0    -    Global      Function returning Long
iof_sema_  =000000    -    External    Long
sys_stacks_ =000000    -    External    Array of Array of Long
BIOS_RespMbx_ =000000    -    External    Long
FMTK_WaitMsg_ =0012c0    -    Global      Function returning Long
AddToTimeoutList_ =000000    -    External    Function returning Long
E_DCBInUse_ =00000e    -    Constant    Long
AddToReadyList_ =000000    -    External    Function returning Long
E_Ok_      =000000    -    Constant    Long
FMTK_PostMsg_ =0012c0    -    Global      Function returning Long
E_QueFull_ =000006    -    Constant    Long
BIOS1_sema_ =000000    -    External    Long
sys_sema_  =000000    -    External    Long
readyQ_    =000000    -    External    Array of Pointer to struct _tagTCB_ 
UnlockSYS_ =000000    -    External    Function returning Long
ALARM_     =001280    1   struct tagALARM_ 
E_NoMoreAlarmBlks_ =000042    -    Constant    Long
sysstack_  =000000    -    External    Array of Long
freeTCB_   =000000    -    External    Pointer to struct _tagTCB_ 
E_NoDev_   =000021    -    Constant    Long
E_NoMem_   =000044    -    Constant    Long
TimeoutList_ =000000    -    External    Pointer to struct _tagTCB_ 
RemoveFromTimeoutList_ =000000    -    External    Function returning Long
E_NoMsg_   =000009    -    Constant    Long
LockSYS_   =000000    -    External    Function returning Long
E_BadDevOp_ =000022    -    Constant    Long
stacks_    =000000    -    External    Array of Array of Long
freeMSG_   =000000    -    External    Pointer to struct tagMSG_ 
freeMBX_   =000000    -    External    Pointer to struct tagMBX_ 
E_Timeout_ =00000a    -    Constant    Long
RemoveFromReadyList_ =000000    -    External    Function returning Long
bios_stacks_ =000000    -    External    Array of Array of Long
FMTK_CheckMsg_ =0012c0    -    Global      Function returning Long
E_BadAlarm_ =00000b    -    Constant    Long
InsertIntoReadyList_ =000000    -    External    Function returning Long

 *** structures and unions ***

tagMSG_    =000000    -    Type        struct tagMSG_ 
    link_      =000000    -    Member      Pointer to struct tagMSG_ 
    d1_        =000008    -    Member      
    d2_        =000010    -    Member      
    type_      =000018    -    Member      
_tagJCB_   =000000    -    Type        struct _tagJCB_ 
    iof_next_  =000000    -    Member      Pointer to struct _tagJCB_ 
    iof_prev_  =000008    -    Member      Pointer to struct _tagJCB_ 
    UserName_  =000010    -    Member      Array of Char
    path_      =000050    -    Member      Array of Char
    exitRunFile_ =000250    -    Member      Array of Char
    commandLine_ =000450    -    Member      Array of Char
    pVidMem_   =000650    -    Member      Pointer to 
    pVirtVidMem_ =000658    -    Member      Pointer to 
    VideoRows_ =000660    -    Member      
    VideoCols_ =000662    -    Member      
    CursorRow_ =000664    -    Member      
    CursorCol_ =000666    -    Member      
    NormAttr_  =000668    -    Member      
    KeybdHead_ =00066c    -    Member      Byte
    KeybdTail_ =00066d    -    Member      Byte
    KeybdBuffer_ =00066e    -    Member      Array of 
    number_    =00068e    -    Member      Char
tagMBX_    =000000    -    Type        struct tagMBX_ 
    link_      =000000    -    Member      Pointer to struct tagMBX_ 
    tq_head_   =000008    -    Member      Pointer to struct _tagTCB_ 
    tq_tail_   =000010    -    Member      Pointer to struct _tagTCB_ 
    mq_head_   =000018    -    Member      Pointer to struct tagMSG_ 
    mq_tail_   =000020    -    Member      Pointer to struct tagMSG_ 
    tq_count_  =000028    -    Member      
    mq_size_   =000030    -    Member      
    mq_count_  =000038    -    Member      
    mq_missed_ =000040    -    Member      
    owner_     =000048    -    Member      
    mq_strategy_ =000050    -    Member      Char
    resv_      =000052    -    Member      Array of Byte
_tagTCB_   =000000    -    Type        struct _tagTCB_ 
    regs_      =000000    -    Member      Array of Long
    isp_       =000100    -    Member      Long
    dsp_       =000108    -    Member      Long
    esp_       =000110    -    Member      Long
    ipc_       =000118    -    Member      Long
    dpc_       =000120    -    Member      Long
    epc_       =000128    -    Member      Long
    cr0_       =000130    -    Member      Long
    next_      =000138    -    Member      Pointer to struct _tagTCB_ 
    prev_      =000140    -    Member      Pointer to struct _tagTCB_ 
    mbq_next_  =000148    -    Member      Pointer to struct _tagTCB_ 
    mbq_prev_  =000150    -    Member      Pointer to struct _tagTCB_ 
    sys_stack_ =000158    -    Member      Pointer to Long
    bios_stack_ =000160    -    Member      Pointer to Long
    stack_     =000168    -    Member      Pointer to Long
    timeout_   =000170    -    Member      Long
    hJob_      =000178    -    Member      Pointer to struct _tagJCB_ 
    msgD1_     =000180    -    Member      Long
    msgD2_     =000188    -    Member      Long
    MsgPtr_    =000190    -    Member      Pointer to struct tagMSG_ 
    hWaitMbx_  =000198    -    Member      
    mailboxes_ =0001a0    -    Member      Pointer to struct tagMBX_ 
    priority_  =0001a8    -    Member      Byte
    status_    =0001a9    -    Member      Byte
    affinity_  =0001aa    -    Member      Byte
    number_    =0001ac    -    Member      Char
tagALARM_  =000000    -    Type        struct tagALARM_ 
    next_      =000000    -    Member      Pointer to struct tagALARM_ 
    prev_      =000008    -    Member      Pointer to struct tagALARM_ 
    mbx_       =000010    -    Member      Pointer to struct tagMBX_ 
    msg_       =000018    -    Member      Pointer to struct tagMSG_ 
    BaseTimeout_ =000020    -    Member      
    timeout_   =000028    -    Member      
    repeat_    =000030    -    Member      
    resv_      =000038    -    Member      Array of Byte
