     1	// ============================================================================
     2	//        __
     3	//   \\__/ o\    (C) 2012-2015  Robert Finch, Stratford
     4	//    \  __ /    All rights reserved.
     5	//     \/_//     robfinch<remove>@finitron.ca
     6	//       ||
     7	//
     8	// TCB.c
     9	// Task Control Block related functions.
    10	//
    11	// This source file is free software: you can redistribute it and/or modify 
    12	// it under the terms of the GNU Lesser General Public License as published 
    13	// by the Free Software Foundation, either version 3 of the License, or     
    14	// (at your option) any later version.                                      
    15	//                                                                          
    16	// This source file is distributed in the hope that it will be useful,      
    17	// but WITHOUT ANY WARRANTY; without even the implied warranty of           
    18	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
    19	// GNU General Public License for more details.                             
    20	//                                                                          
    21	// You should have received a copy of the GNU General Public License        
    22	// along with this program.  If not, see <http://www.gnu.org/licenses/>.    
    23	//                                                                          
    24	// ============================================================================
    25	//
    26	pascal void UnlockSemaphore(int *sema)
    27	{
    28	     asm {
    29	        lw      r1,24[bp]
    30	    .0001:
    31	        sw      r0,[r1]
    32	        lw      r2,[r1]
    33	        beq     r2,.0002  ; the semaphore is unlock, by this task or another
    34	        cmpu    r3,r2,tr
    35	        beq     r3,.0001  ; ??? this task still has it locked - store failed
    36	        ; Here the semaphore was locked, but not by this task anymore. Another task
    37	        ; must have interceded amd locked the semaphore right after it was unlocked
    38	        ; by this task. Make sure this is the case, and it's not just bad memory.
    39	        ; Make sure the semaphore was locked by a valid task
    40	        chk     r3,r2,b48
    41	        beq     r3,.0001
    42	        ; Here the semaphore probably was validly locked by a different task.
    43	        ; Assume the unlock must have been successful.
    44	    .0002:
    45	    }
    46	}


*** local symbol table ***

sema_      =000018    -    Auto        Pointer to Long




 *** global scope typedef symbol table ***

UnlockSemaphore_ =000000    -    Global      Function returning 

 *** structures and unions ***

