     1	// ============================================================================
     2	//        __
     3	//   \\__/ o\    (C) 2012-2015  Robert Finch, Stratford
     4	//    \  __ /    All rights reserved.
     5	//     \/_//     robfinch<remove>@finitron.ca
     6	//       ||
     7	//
     8	// TCB.c
     9	// Task Control Block related functions.
    10	//
    11	// This source file is free software: you can redistribute it and/or modify 
    12	// it under the terms of the GNU Lesser General Public License as published 
    13	// by the Free Software Foundation, either version 3 of the License, or     
    14	// (at your option) any later version.                                      
    15	//                                                                          
    16	// This source file is distributed in the hope that it will be useful,      
    17	// but WITHOUT ANY WARRANTY; without even the implied warranty of           
    18	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
    19	// GNU General Public License for more details.                             
    20	//                                                                          
    21	// You should have received a copy of the GNU General Public License        
    22	// along with this program.  If not, see <http://www.gnu.org/licenses/>.    
    23	//                                                                          
    24	// ============================================================================
    25	//
    26	
    27	
    28	
    29	
    30	
    31	
    32	// message types
    33	
    34	enum {
    35	     E_Ok = 0,
    36	     E_BadTCBHandle,
    37	     E_BadPriority,
    38	     E_BadCallno,
    39	     E_Arg,
    40	     E_BadMbx,
    41	     E_QueFull,
    42	     E_NoThread,
    43	     E_NotAlloc,
    44	     E_NoMsg,
    45	     E_Timeout,
    46	     E_BadAlarm,
    47	     E_NotOwner,
    48	     E_QueStrategy,
    49	     E_DCBInUse,
    50	     //; Device driver errors
    51	     E_BadDevNum =	0x20,
    52	     E_NoDev,
    53	     E_BadDevOp,
    54	     E_ReadError,
    55	     E_WriteError,
    56	     E_BadBlockNum,
    57	     E_TooManyBlocks,
    58	
    59	     // resource errors
    60	     E_NoMoreMbx =	0x40,
    61	     E_NoMoreMsgBlks,
    62	     E_NoMoreAlarmBlks,
    63	     E_NoMoreTCBs,
    64	     E_NoMem,
    65	     E_TooManyTasks
    66	};
    67	
    68	
    69	typedef unsigned int uint;
    70	typedef __int16 hTCB;
    71	typedef __int8 hJCB;
    72	typedef __int16 hMBX;
    73	typedef __int16 hMSG;
    74	
    75	typedef struct tagMSG align(32) {
    76		unsigned __int16 link;
    77		unsigned __int16 retadr;    // return address
    78		unsigned __int16 tgtadr;    // target address
    79		unsigned __int16 type;
    80		unsigned int d1;            // payload data 1
    81		unsigned int d2;            // payload data 2
    82		unsigned int d3;            // payload data 3
    83	} MSG;
    84	
    85	typedef struct _tagJCB align(2048)
    86	{
    87	    struct _tagJCB *iof_next;
    88	    struct _tagJCB *iof_prev;
    89	    char UserName[32];
    90	    char path[256];
    91	    char exitRunFile[256];
    92	    char commandLine[256];
    93	    unsigned __int32 *pVidMem;
    94	    unsigned __int32 *pVirtVidMem;
    95	    unsigned __int16 VideoRows;
    96	    unsigned __int16 VideoCols;
    97	    unsigned __int16 CursorRow;
    98	    unsigned __int16 CursorCol;
    99	    unsigned __int32 NormAttr;
   100	    __int8 KeyState1;
   101	    __int8 KeyState2;
   102	    __int8 KeybdWaitFlag;
   103	    __int8 KeybdHead;
   104	    __int8 KeybdTail;
   105	    unsigned __int8 KeybdBuffer[32];
   106	    hJCB number;
   107	    hTCB tasks[8];
   108	    hJCB next;
   109	} JCB;
   110	
   111	struct tagMBX;
   112	
   113	typedef struct _tagTCB align(1024) {
   114	    // exception storage area
   115		int regs[32];
   116		int isp;
   117		int dsp;
   118		int esp;
   119		int ipc;
   120		int dpc;
   121		int epc;
   122		int cr0;
   123		// interrupt storage
   124		int iregs[32];
   125		int iisp;
   126		int idsp;
   127		int iesp;
   128		int iipc;
   129		int idpc;
   130		int iepc;
   131		int icr0;
   132		hTCB next;
   133		hTCB prev;
   134		hTCB mbq_next;
   135		hTCB mbq_prev;
   136		int *sys_stack;
   137		int *bios_stack;
   138		int *stack;
   139		__int64 timeout;
   140		MSG msg;
   141		hMBX hMailboxes[4]; // handles of mailboxes owned by task
   142		hMBX hWaitMbx;      // handle of mailbox task is waiting at
   143		hTCB number;
   144		__int8 priority;
   145		__int8 status;
   146		__int8 affinity;
   147		hJCB hJob;
   148		__int64 startTick;
   149		__int64 endTick;
   150		__int64 ticks;
   151		int exception;
   152	} TCB;
   153	
   154	typedef struct tagMBX align(64) {
   155	    hMBX link;
   156		hJCB owner;		// hJcb of owner
   157		hTCB tq_head;
   158		hTCB tq_tail;
   159		hMSG mq_head;
   160		hMSG mq_tail;
   161		char mq_strategy;
   162		byte resv[2];
   163		uint tq_count;
   164		uint mq_size;
   165		uint mq_count;
   166		uint mq_missed;
   167	} MBX;
   168	
   169	typedef struct tagALARM {
   170		struct tagALARM *next;
   171		struct tagALARM *prev;
   172		MBX *mbx;
   173		MSG *msg;
   174		uint BaseTimeout;
   175		uint timeout;
   176		uint repeat;
   177		byte resv[8];		// padding to 64 bytes
   178	} ALARM;
   179	
   180	
   181	// ============================================================================
   182	//        __
   183	//   \\__/ o\    (C) 2012-2015  Robert Finch, Stratford
   184	//    \  __ /    All rights reserved.
   185	//     \/_//     robfinch<remove>@finitron.ca
   186	//       ||
   187	//
   188	// TCB.c
   189	// Task Control Block related functions.
   190	//
   191	// This source file is free software: you can redistribute it and/or modify 
   192	// it under the terms of the GNU Lesser General Public License as published 
   193	// by the Free Software Foundation, either version 3 of the License, or     
   194	// (at your option) any later version.                                      
   195	//                                                                          
   196	// This source file is distributed in the hope that it will be useful,      
   197	// but WITHOUT ANY WARRANTY; without even the implied warranty of           
   198	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
   199	// GNU General Public License for more details.                             
   200	//                                                                          
   201	// You should have received a copy of the GNU General Public License        
   202	// along with this program.  If not, see <http://www.gnu.org/licenses/>.    
   203	//                                                                          
   204	// ============================================================================
   205	//
   206	// JCB functions
   207	JCB *GetJCBPtr();                   // get the JCB pointer of the running task
   208	
   209	// TCB functions
   210	TCB *GetRunningTCBPtr();
   211	hTCB GetRunningTCB();
   212	pascal void SetRunningTCB(hTCB ht);
   213	pascal int chkTCB(TCB *p);
   214	pascal int InsertIntoReadyList(hTCB ht);
   215	pascal int RemoveFromReadyList(hTCB ht);
   216	pascal int InsertIntoTimeoutList(hTCB ht, int to);
   217	pascal int RemoveFromTimeoutList(hTCB ht);
   218	void DumpTaskList();
   219	
   220	pascal void SetBound48(TCB *ps, TCB *pe, int algn);
   221	pascal void SetBound49(JCB *ps, JCB *pe, int algn);
   222	pascal void SetBound50(MBX *ps, MBX *pe, int algn);
   223	pascal void SetBound51(MSG *ps, MSG *pe, int algn);
   224	
   225	pascal void set_vector(unsigned int, unsigned int);
   226	int getCPU();
   227	int GetVecno();          // get the last interrupt vector number
   228	void outb(unsigned int, int);
   229	void outc(unsigned int, int);
   230	void outh(unsigned int, int);
   231	void outw(unsigned int, int);
   232	pascal int LockSemaphore(int *sema, int retries);
   233	pascal void UnlockSemaphore(int *sema);
   234	
   235	// The following causes a privilege violation if called from user mode
   236	
   237	
   238	extern char hasUltraHighPriorityTasks;
   239	extern pascal prtdbl(double);
   240	
   241	TCB tcbs[256];
   242	hTCB freeTCB;
   243	hTCB TimeoutList;
   244	hTCB readyQ[8];
   245	
   246	pascal int chkTCB(TCB *p)
   247	{
   248	    asm {
   249	        lw    r1,24[bp]
   250	        chk   r1,r1,b48
   251	    }
   252	}
   253	


*** local symbol table ***

p_         =000018    -    Auto        Pointer to struct _tagTCB_ 



   254	naked TCB *GetRunningTCBPtr()
   255	{
   256	    asm {
   257	        mov   r1,tr
   258	        rtl
   259	    }
   260	}
   261	


*** local symbol table ***




   262	naked hTCB GetRunningTCB()
   263	{
   264	    asm {
   265	        subui  r1,tr,#tcbs_
   266	        lsri   r1,r1,#10
   267	        rtl
   268	    }
   269	}
   270	


*** local symbol table ***




   271	pascal void SetRunningTCB(hTCB ht)
   272	{
   273	     asm {
   274	         lw      tr,24[bp]
   275	         asli    tr,tr,#10
   276	         addui   tr,tr,#tcbs_
   277	     }
   278	}
   279	
   280	// ----------------------------------------------------------------------------
   281	// ----------------------------------------------------------------------------
   282	


*** local symbol table ***

ht_        =000018    -    Auto        Char



   283	pascal int InsertIntoReadyList(hTCB ht)
   284	{
   285	    hTCB hq;
   286	    TCB *p, *q;
   287	
   288	    __check(ht >=0 && ht < 256);
   289	    p = &tcbs[ht];
   290		if (p->priority > 077 || p->priority < 000)
   291			return E_BadPriority;
   292		if (p->priority < 003)
   293		   hasUltraHighPriorityTasks |= (1 << p->priority);
   294		p->status = 16;
   295		hq = readyQ[p->priority>>3];
   296		// Ready list empty ?
   297		if (hq<0) {
   298			p->next = ht;
   299			p->prev = ht;
   300			readyQ[p->priority>>3] = ht;
   301			return E_Ok;
   302		}
   303		// Insert at tail of list
   304		q = &tcbs[hq];
   305		p->next = hq;
   306		p->prev = q->prev;
   307		tcbs[q->prev].next = ht;
   308		q->prev = ht;
   309		return E_Ok;
   310	}
   311	
   312	// ----------------------------------------------------------------------------
   313	// ----------------------------------------------------------------------------
   314	


*** local symbol table ***

ht_        =000018    -    Auto        Char
hq_        =fffffffe    -    Auto        Char
p_         =fffffff0    -    Auto        Pointer to struct _tagTCB_ 
q_         =ffffffe8    -    Auto        Pointer to struct _tagTCB_ 



   315	pascal int RemoveFromReadyList(hTCB ht)
   316	{
   317	    TCB *t;
   318	
   319	    __check(ht >=0 && ht < 256);
   320	    t = &tcbs[ht];
   321		if (t->priority > 077 || t->priority < 000)
   322			return E_BadPriority;
   323	    if (ht==readyQ[t->priority>>3])
   324	       readyQ[t->priority>>3] = t->next;
   325	    if (ht==readyQ[t->priority>>3])
   326	       readyQ[t->priority>>3] = -1;
   327	    tcbs[t->next].prev = t->prev;
   328	    tcbs[t->prev].next = t->next;
   329	    t->next = -1;
   330	    t->prev = -1;
   331	    t->status = 0;
   332	    return E_Ok;
   333	}
   334	
   335	
   336	// ----------------------------------------------------------------------------
   337	// ----------------------------------------------------------------------------
   338	


*** local symbol table ***

ht_        =000018    -    Auto        Char
t_         =fffffff8    -    Auto        Pointer to struct _tagTCB_ 



   339	pascal int InsertIntoTimeoutList(hTCB ht, int to)
   340	{
   341	    TCB *p, *q, *t;
   342	
   343	    __check(ht >=0 && ht < 256);
   344	    t = &tcbs[ht];
   345	    if (TimeoutList<0) {
   346	        t->timeout = to;
   347	        TimeoutList = ht;
   348	        t->next = -1;
   349	        t->prev = -1;
   350	        return E_Ok;
   351	    }
   352	    q = (void *)0;
   353	    p = &tcbs[TimeoutList];
   354	    while (to > p->timeout) {
   355	        to -= p->timeout;
   356	        q = p;
   357	        p = &tcbs[p->next];
   358	    }
   359	    t->next = p - tcbs;
   360	    t->prev = q - tcbs;
   361	    if (p) {
   362	        p->timeout -= to;
   363	        p->prev = ht;
   364	    }
   365	    if (q)
   366	        q->next = ht;
   367	    else
   368	        TimeoutList = ht;
   369	    t->status |= 1;
   370	    return E_Ok;


*** local symbol table ***

ht_        =000018    -    Auto        Char
to_        =000020    -    Auto        Long
p_         =fffffff8    -    Auto        Pointer to struct _tagTCB_ 
q_         =fffffff0    -    Auto        Pointer to struct _tagTCB_ 
t_         =ffffffe8    -    Auto        Pointer to struct _tagTCB_ 



   371	};
   372	
   373	// ----------------------------------------------------------------------------
   374	// ----------------------------------------------------------------------------
   375	
   376	pascal int RemoveFromTimeoutList(hTCB ht)
   377	{
   378	    TCB *t;
   379	    
   380	    __check(ht >=0 && ht < 256);
   381	    t = &tcbs[ht];
   382	    if (t->next) {
   383	       tcbs[t->next].prev = t->prev;
   384	       tcbs[t->next].timeout += t->timeout;
   385	    }
   386	    if (t->prev >= 0)
   387	       tcbs[t->prev].next = t->next;
   388	    t->status = 0;
   389	    t->next = -1;
   390	    t->prev = -1;
   391	}
   392	
   393	// ----------------------------------------------------------------------------
   394	// Pop the top entry from the timeout list.
   395	// ----------------------------------------------------------------------------
   396	


*** local symbol table ***

ht_        =000018    -    Auto        Char
t_         =fffffff8    -    Auto        Pointer to struct _tagTCB_ 



   397	hTCB PopTimeoutList()
   398	{
   399	    TCB *p;
   400	    hTCB h;
   401	
   402	    h = TimeoutList;
   403	    if (TimeoutList >= 0 && TimeoutList < 256) {
   404	        TimeoutList = tcbs[TimeoutList].next;
   405	        if (TimeoutList >= 0 && TimeoutList < 256)
   406	            tcbs[TimeoutList].prev = -1;
   407	    }
   408	    return h;
   409	}
   410	
   411	// ----------------------------------------------------------------------------
   412	// ----------------------------------------------------------------------------
   413	


*** local symbol table ***

p_         =fffffff8    -    Auto        Pointer to struct _tagTCB_ 
h_         =fffffff6    -    Auto        Char



   414	void DumpTaskList()
   415	{
   416	     TCB *p, *q;
   417	     int n;
   418	     int kk;
   419	     hTCB h, j;
   420	   
   421	//     printf("pi is ");
   422	//     prtdbl(3.141592653589793238,10,6,'E');
   423	     printf("CPU Pri Stat Task Prev Next Timeout\r\n");
   424	     for (n = 0; n < 8; n++) {
   425	         h = readyQ[n];
   426	         if (h >= 0 && h < 256) {
   427	             q = &tcbs[h];
   428	             p = q;
   429	             kk = 0;
   430	             do {
   431	//                 if (!chkTCB(p)) {
   432	//                     printf("Bad TCB (%X)\r\n", p);
   433	//                     break;
   434	//                 }
   435	                   j = p - tcbs;
   436	                 printf("%3d %3d  %02X  %04X %04X %04X %08X %08X\r\n", p->affinity, p->priority, p->status, (int)j, p->prev, p->ne   437	xt, p->timeout, p->ticks);
   438	                 if (p->next < 0 || p->next >= 256)
   439	                     break;
   440	                 p = &tcbs[p->next];
   441	                 if (getcharNoWait()==3)
   442	                    goto j1;
   443	                 kk = kk + 1;
   444	             } while (p != q && kk < 10);
   445	         }
   446	     }
   447	     printf("Waiting tasks\r\n");
   448	     h = TimeoutList;
   449	     while (h >= 0 && h < 256) {
   450	         p = &tcbs[h];
   451	         printf("%3d %3d  %02X  %04X %04X %04X %08X %08X\r\n", p->affinity, p->priority, p->status, (int)j, p->prev, p->next, p->t   452	imeout, p->ticks);
   453	         h = p->next;
   454	         if (getcharNoWait()==3)
   455	            goto j1;
   456	     }
   457	j1:  ;
   458	}
   459	
   460	


*** local symbol table ***

j1_        =00003b    -    Label
p_         =fffffff8    -    Auto        Pointer to struct _tagTCB_ 
q_         =fffffff0    -    Auto        Pointer to struct _tagTCB_ 
n_         =ffffffe8    -    Auto        Long
kk_        =ffffffe0    -    Auto        Long
h_         =ffffffde    -    Auto        Char
j_         =ffffffdc    -    Auto        Char




 *** global scope typedef symbol table ***

E_NoMoreMsgBlks_ =000041    -    Constant    Long
tcbs_      =001800    -    Global      Array of struct _tagTCB_ 
PopTimeoutList_ =041814    -    Global      Function returning Char
E_NoThread_ =000007    -    Constant    Long
E_WriteError_ =000024    -    Constant    Long
outb_      =001480    -    Global      Function returning 
outc_      =001480    -    Global      Function returning 
E_Arg_     =000004    -    Constant    Long
E_NotAlloc_ =000008    -    Constant    Long
uint_      =000000    1   
outh_      =001480    -    Global      Function returning 
DumpTaskList_ =041814    -    Global      Function returning 
E_BadBlockNum_ =000025    -    Constant    Long
E_TooManyBlocks_ =000026    -    Constant    Long
JCB_       =000800    1   struct _tagJCB_ 
outw_      =001480    -    Global      Function returning 
E_BadTCBHandle_ =000001    -    Constant    Long
E_BadMbx_  =000005    -    Constant    Long
TCB_       =001000    1   struct _tagTCB_ 
GetRunningTCB_ =041814    -    Global      Function returning Char
E_NotOwner_ =00000c    -    Constant    Long
SetRunningTCB_ =001480    -    Global      Function returning 
MSG_       =000020    1   struct tagMSG_ 
MBX_       =001400    1   struct tagMBX_ 
E_BadDevNum_ =000020    -    Constant    Long
E_BadCallno_ =000003    -    Constant    Long
E_BadPriority_ =000002    -    Constant    Long
chkTCB_    =001480    -    Global      Function returning Long
GetRunningTCBPtr_ =041814    -    Global      Function returning Pointer to struct _tagTCB_ 
UnlockSemaphore_ =001480    -    Global      Function returning 
E_NoMoreMbx_ =000040    -    Constant    Long
GetVecno_  =001480    -    External    Function returning Long
E_QueStrategy_ =00000d    -    Constant    Long
GetJCBPtr_ =001480    -    External    Function returning Pointer to struct _tagJCB_ 
getCPU_    =001480    -    External    Function returning Long
E_ReadError_ =000023    -    Constant    Long
hasUltraHighPriorityTasks_ =000000    -    External    Char
LockSemaphore_ =001480    -    Global      Function returning Long
getcharNoWait_ =000000    -    External    Function returning Long
hJCB_      =00000a    1   Byte
set_vector_ =001480    -    Global      Function returning 
E_NoMoreTCBs_ =000043    -    Constant    Long
hTCB_      =000008    1   Char
hMBX_      =00000c    1   Char
hMSG_      =00000e    1   Char
E_DCBInUse_ =00000e    -    Constant    Long
E_Ok_      =000000    -    Constant    Long
E_QueFull_ =000006    -    Constant    Long
readyQ_    =041804    -    Global      Array of Char
E_NoMoreAlarmBlks_ =000042    -    Constant    Long
ALARM_     =001440    1   struct tagALARM_ 
E_TooManyTasks_ =000045    -    Constant    Long
freeTCB_   =041800    -    Global      Char
E_NoDev_   =000021    -    Constant    Long
E_NoMem_   =000044    -    Constant    Long
TimeoutList_ =041802    -    Global      Char
RemoveFromTimeoutList_ =001480    -    Global      Function returning Long
E_NoMsg_   =000009    -    Constant    Long
prtdbl_    =000000    -    External    Function returning Long
E_BadDevOp_ =000022    -    Constant    Long
SetBound50_ =001480    -    Global      Function returning 
SetBound51_ =001480    -    Global      Function returning 
E_Timeout_ =00000a    -    Constant    Long
SetBound48_ =001480    -    Global      Function returning 
SetBound49_ =001480    -    Global      Function returning 
InsertIntoTimeoutList_ =001480    -    Global      Function returning Long
RemoveFromReadyList_ =001480    -    Global      Function returning Long
printf_    =000000    -    External    Function returning Long
E_BadAlarm_ =00000b    -    Constant    Long
InsertIntoReadyList_ =001480    -    Global      Function returning Long

 *** structures and unions ***

tagMSG_    =000000    -    Type        struct tagMSG_ 
    link_      =000000    -    Member      
    retadr_    =000002    -    Member      
    tgtadr_    =000004    -    Member      
    type_      =000006    -    Member      
    d1_        =000008    -    Member      
    d2_        =000010    -    Member      
    d3_        =000018    -    Member      
_tagJCB_   =000000    -    Type        struct _tagJCB_ 
    iof_next_  =000000    -    Member      Pointer to struct _tagJCB_ 
    iof_prev_  =000008    -    Member      Pointer to struct _tagJCB_ 
    UserName_  =000010    -    Member      Array of Char
    path_      =000050    -    Member      Array of Char
    exitRunFile_ =000250    -    Member      Array of Char
    commandLine_ =000450    -    Member      Array of Char
    pVidMem_   =000650    -    Member      Pointer to 
    pVirtVidMem_ =000658    -    Member      Pointer to 
    VideoRows_ =000660    -    Member      
    VideoCols_ =000662    -    Member      
    CursorRow_ =000664    -    Member      
    CursorCol_ =000666    -    Member      
    NormAttr_  =000668    -    Member      
    KeyState1_ =00066c    -    Member      Byte
    KeyState2_ =00066d    -    Member      Byte
    KeybdWaitFlag_ =00066e    -    Member      Byte
    KeybdHead_ =00066f    -    Member      Byte
    KeybdTail_ =000670    -    Member      Byte
    KeybdBuffer_ =000671    -    Member      Array of Unsigned Byte
    number_    =000691    -    Member      Byte
    tasks_     =000692    -    Member      Array of Char
    next_      =0006a2    -    Member      Byte
tagMBX_    =000000    -    Type        struct tagMBX_ 
    link_      =000000    -    Member      Char
    owner_     =000002    -    Member      Byte
    tq_head_   =000004    -    Member      Char
    tq_tail_   =000006    -    Member      Char
    mq_head_   =000008    -    Member      Char
    mq_tail_   =00000a    -    Member      Char
    mq_strategy_ =00000c    -    Member      Char
    resv_      =00000e    -    Member      Array of Byte
    tq_count_  =000010    -    Member      
    mq_size_   =000018    -    Member      
    mq_count_  =000020    -    Member      
    mq_missed_ =000028    -    Member      
_tagTCB_   =000000    -    Type        struct _tagTCB_ 
    regs_      =000000    -    Member      Array of Long
    isp_       =000100    -    Member      Long
    dsp_       =000108    -    Member      Long
    esp_       =000110    -    Member      Long
    ipc_       =000118    -    Member      Long
    dpc_       =000120    -    Member      Long
    epc_       =000128    -    Member      Long
    cr0_       =000130    -    Member      Long
    iregs_     =000138    -    Member      Array of Long
    iisp_      =000238    -    Member      Long
    idsp_      =000240    -    Member      Long
    iesp_      =000248    -    Member      Long
    iipc_      =000250    -    Member      Long
    idpc_      =000258    -    Member      Long
    iepc_      =000260    -    Member      Long
    icr0_      =000268    -    Member      Long
    next_      =000270    -    Member      Char
    prev_      =000272    -    Member      Char
    mbq_next_  =000274    -    Member      Char
    mbq_prev_  =000276    -    Member      Char
    sys_stack_ =000278    -    Member      Pointer to Long
    bios_stack_ =000280    -    Member      Pointer to Long
    stack_     =000288    -    Member      Pointer to Long
    timeout_   =000290    -    Member      Long
    msg_       =0002a0    -    Member      struct tagMSG_ 
    hMailboxes_ =0002c0    -    Member      Array of Char
    hWaitMbx_  =0002c8    -    Member      Char
    number_    =0002ca    -    Member      Char
    priority_  =0002cc    -    Member      Byte
    status_    =0002cd    -    Member      Byte
    affinity_  =0002ce    -    Member      Byte
    hJob_      =0002cf    -    Member      Byte
    startTick_ =0002d0    -    Member      Long
    endTick_   =0002d8    -    Member      Long
    ticks_     =0002e0    -    Member      Long
    exception_ =0002e8    -    Member      Long
tagALARM_  =000000    -    Type        struct tagALARM_ 
    next_      =000000    -    Member      Pointer to struct tagALARM_ 
    prev_      =000008    -    Member      Pointer to struct tagALARM_ 
    mbx_       =000010    -    Member      Pointer to struct tagMBX_ 
    msg_       =000018    -    Member      Pointer to struct tagMSG_ 
    BaseTimeout_ =000020    -    Member      
    timeout_   =000028    -    Member      
    repeat_    =000030    -    Member      
    resv_      =000038    -    Member      Array of Byte
