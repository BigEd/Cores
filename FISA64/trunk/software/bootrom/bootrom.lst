                	; ============================================================================
                	; bootrom.s
                	;        __
                	;   \\__/ o\    (C) 2014  Robert Finch, Stratford
                	;    \  __ /    All rights reserved.
                	;     \/_//     robfinch<remove>@finitron.ca
                	;       ||
                	;  
                	;
                	; This source file is free software: you can redistribute it and/or modify 
                	; it under the terms of the GNU Lesser General Public License as published 
                	; by the Free Software Foundation, either version 3 of the License, or     
                	; (at your option) any later version.                                      
                	;                                                                          
                	; This source file is distributed in the hope that it will be useful,      
                	; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                	; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                	; GNU General Public License for more details.                             
                	;                                                                          
                	; You should have received a copy of the GNU General Public License        
                	; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                	;                                                                          
                	; ============================================================================
                	;
                	TXTCOLS		EQU		84
                	TXTROWS		EQU		31
                	
                	CR	EQU	0x0D		;ASCII equates
                	LF	EQU	0x0A
                	TAB	EQU	0x09
                	CTRLC	EQU	0x03
                	CTRLH	EQU	0x08
                	CTRLI	EQU	0x09
                	CTRLJ	EQU	0x0A
                	CTRLK	EQU	0x0B
                	CTRLM   EQU 0x0D
                	CTRLS	EQU	0x13
                	CTRLX	EQU	0x18
                	XON		EQU	0x11
                	XOFF	EQU	0x13
                	
                	SC_LSHIFT	EQU		$12
                	SC_RSHIFT	EQU		$59
                	SC_KEYUP	EQU		$F0
                	SC_EXTEND	EQU		$E0
                	SC_CTRL		EQU		$14
                	SC_ALT		EQU		$11
                	SC_DEL		EQU		$71		; extend
                	SC_LCTRL	EQU		$58
                	SC_NUMLOCK	EQU		$77
                	SC_SCROLLLOCK	EQU	$7E
                	SC_CAPSLOCK	EQU		$58
                	SC_TAB      EQU     $0D
                	
                	; Boot sector info (62 byte structure) */
                	BSI_JMP		= 0x00
                	BSI_OEMName	= 0x03
                	BSI_bps		= 0x0B
                	BSI_SecPerCluster	= 0x0D
                	BSI_ResSectors	= 0x0E
                	BSI_FATS	= 0x10
                	BSI_RootDirEnts	= 0x11
                	BSI_Sectors	= 0x13
                	BSI_Media	= 0x15
                	BSI_SecPerFAT	= 0x16
                	BSI_SecPerTrack	= 0x18
                	BSI_Heads	= 0x1A
                	BSI_HiddenSecs	= 0x1C
                	BSI_HugeSecs	= 0x1E
                	
                	BSI_DriveNum	= 0x24
                	BSI_Rsvd1		= 0x25
                	BSI_BootSig		= 0x26
                	BSI_VolID		= 0x27
                	BSI_VolLabel	= 0x2B
                	BSI_FileSysType = 0x36
                	
                	DBG_STACK   EQU     $7000
                	CPU0_BIOS_STACK  EQU     $6800
                	MON_STACK   EQU     $6000
                	; CPU1 Ram allocations must be to the dram area.
                	CPU0_IRQ_STACK   EQU    $8800
                	CPU1_IRQ_STACK  EQU     $20800
                	CPU1_SYS_STACK      EQU  $21000
                	CPU1_BIOS_STACK     EQU  $21800
                	CPU0_SYS_STACK      EQU  $5000
                	
                	LEDS	equ		$FFDC0600
                	
                	BIOS_FREE      EQU       0
                	BIOS_DONE      EQU       1
                	BIOS_INSERVICE EQU       2
                	
                	MAX_BIOS_CALL  EQU       100
                	E_BadFuncno    EQU       1
                	BIOS_E_Timeout EQU       2
                	E_Unsupported  EQU       3
                	
                	; The following offsets in the I/O segment
                	TEXTSCR	equ		$FFD00000
                	TEXTREG		EQU		$A0000
                	TEXT_COLS	EQU		0x00
                	TEXT_ROWS	EQU		0x04
                	TEXT_CURPOS	EQU		0x2C
                	TEXT_CURCTL	EQU		0x20
                	
                	BMP_CLUT	EQU		$C5800
                	
                	PIC			EQU		0xFFDC0FC0
                	PIC_IE		EQU		0xFFDC0FC4
                	PIC_ES		EQU		0xFFDC0FD0
                	PIC_RSTE	EQU		0xFFDC0FD4
                	
                	KEYBD		EQU		0xFFDC0000
                	KEYBDCLR	EQU		0xFFDC0004
                	
                	SPIMASTER	EQU		0xFFDC0500
                	SPI_MASTER_VERSION_REG	EQU	0x00
                	SPI_MASTER_CONTROL_REG	EQU	0x04
                	SPI_TRANS_TYPE_REG	EQU		0x08
                	SPI_TRANS_CTRL_REG	EQU		0x0C
                	SPI_TRANS_STATUS_REG	EQU	0x10
                	SPI_TRANS_ERROR_REG		EQU	0x14
                	SPI_DIRECT_ACCESS_DATA_REG		EQU	0x18
                	SPI_SD_SECT_7_0_REG		EQU	0x1C
                	SPI_SD_SECT_15_8_REG	EQU	0x20
                	SPI_SD_SECT_23_16_REG	EQU	0x24
                	SPI_SD_SECT_31_24_REG	EQU	0x28
                	SPI_RX_FIFO_DATA_REG	EQU	0x40
                	SPI_RX_FIFO_DATA_COUNT_MSB	EQU	0x48
                	SPI_RX_FIFO_DATA_COUNT_LSB  EQU 0x4C
                	SPI_RX_FIFO_CTRL_REG		EQU	0x50
                	SPI_TX_FIFO_DATA_REG	EQU	0x80
                	SPI_TX_FIFO_CTRL_REG	EQU	0x90
                	SPI_RESP_BYTE1			EQU	0xC0
                	SPI_RESP_BYTE2			EQU	0xC4
                	SPI_RESP_BYTE3			EQU	0xC8
                	SPI_RESP_BYTE4			EQU	0xCC
                	
                	SPI_INIT_SD			EQU		0x01
                	SPI_TRANS_START		EQU		0x01
                	SPI_TRANS_BUSY		EQU		0x01
                	SPI_INIT_NO_ERROR	EQU		0x00
                	SPI_READ_NO_ERROR	EQU		0x00
                	SPI_WRITE_NO_ERROR	EQU		0x00
                	RW_READ_SD_BLOCK	EQU		0x02
                	RW_WRITE_SD_BLOCK	EQU		0x03
                	
                	I2C_MASTER		EQU		0xFFDC0E00
                	I2C_PRESCALE_LO	EQU		0x00
                	I2C_PRESCALE_HI	EQU		0x01
                	I2C_CONTROL		EQU		0x02
                	I2C_TX			EQU		0x03
                	I2C_RX			EQU		0x03
                	I2C_CMD			EQU		0x04
                	I2C_STAT		EQU		0x04
                	
                	SD_MASTER		EQU		0xFFDC0B00
                	
                	RANDOM_NUM      EQU     0xFFDC0C00
                	
                	UART            EQU     0xFFDC0A00
                	UART_TX         EQU     0
                	UART_RX         EQU     0
                	UART_LS         EQU     1
                	UART_MS         EQU     2
                	UART_IS         EQU     3
                	UART_IE         EQU     4
                	UART_FF         EQU     5
                	UART_MC         EQU     6
                	UART_CTRL       EQU     7
                	UART_CM0        EQU     8
                	UART_CM1        EQU     9
                	UART_CM2        EQU     10
                	UART_CM3        EQU     11
                	UART_SPR        EQU     15
                	
                	TCB_BASE       EQU     $0C00000
                	TCB_TOP        EQU     $1C00000
                	
                	; BIOS request structure
                	BIOS_op        EQU     $00
                	BIOS_arg1      EQU     $08
                	BIOS_arg2      EQU     $10
                	BIOS_arg3      EQU     $18
                	BIOS_arg4      EQU     $20
                	BIOS_arg5      EQU     $28
                	BIOS_resp      EQU     $30
                	BIOS_stat      EQU     $38
                	
                	; ============================================================================
                	;        __
                	;   \\__/ o\    (C) 2014,2015  Robert Finch, Stratford
                	;    \  __ /    All rights reserved.
                	;     \/_//     robfinch<remove>@finitron.ca
                	;       ||
                	;  
                	;
                	; This source file is free software: you can redistribute it and/or modify 
                	; it under the terms of the GNU Lesser General Public License as published 
                	; by the Free Software Foundation, either version 3 of the License, or     
                	; (at your option) any later version.                                      
                	;                                                                          
                	; This source file is distributed in the hope that it will be useful,      
                	; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                	; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                	; GNU General Public License for more details.                             
                	;                                                                          
                	; You should have received a copy of the GNU General Public License        
                	; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                	;
                	; DeviceDriver.inc
                	; - Device driver structures and constants                                                                         
                	; ============================================================================
                	
                	;	.global			; global constants
                	
                	; Device Control Block
                	;
                	DCB_Name			EQU		0		; string: first byte is length, 11 chars max
                	DCB_Type			EQU		0x0C
                	DCB_nBPB			EQU		0x10
                	DCB_LastErc			EQU		0x18		; last error code
                	DCB_StartBlock		EQU		0x20		; starting block number (partitioned devices)
                	DCB_nBlocks			EQU		0x28		; number of blocks on device
                	DCB_pCmdProc		EQU		0x30		; pointer to command processor routine
                	DCB_ReentCount		EQU		0x38		; re-entrancy count (1 to 255)
                	DCB_fSingleUser		EQU		0x39
                	DCB_hJob			EQU		0x40		; handle to associated job
                	DCB_Mbx				EQU		0x48
                	DCB_pSema			EQU		0x50		; pointer to device semaphore
                	DCB_Resv1			EQU		0x58		; reserved
                	DCB_Resv2			EQU		0x60		; reserved
                	DCB_Size			EQU		0x68
                	
                	; Device command opcodes
                	;
                	DVC_Nop				EQU		0
                	DVC_Setup			EQU		1
                	DVC_Initialize		EQU		2
                	DVC_Status			EQU		3
                	DVC_MediaCheck		EQU		4
                	DVC_BuildBPB		EQU		5
                	DVC_Open			EQU		6
                	DVC_Close			EQU		7
                	DVC_GetChar			EQU		8
                	DVC_PeekChar		EQU		9
                	DVC_GetCharDirect	EQU		10
                	DVC_PeekCharDirect	EQU		11
                	DVC_InputStatus		EQU		12
                	DVC_PutChar			EQU		13
                	DVC_SetPosition		EQU		15
                	DVC_ReadBlock		EQU		16
                	DVC_WriteBlock		EQU		17
                	DVC_VerifyBlock		EQU		18
                	DVC_OutputStatus	EQU		19
                	DVC_FlushInput		EQU		20
                	DVC_FlushOutput		EQU		21
                	DVC_IRQ				EQU		22
                	DVC_IsRemoveable	EQU		23
                	DVC_IOCTRL_READ		EQU		24
                	DVC_IOCTRL_WRITE	EQU		25
                	DVC_OutputUntilBusy	EQU		26
                	
                	MAX_DEV_OP			EQU		31
                	
                	
                	DRSP_DONE			EQU		1
                	
                	;Standard Devices are:
                	
                	;#		Device					Standard name
                	
                	;0		NULL device 			NUL		(OS built-in)
                	;1		Keyboard (sequential)	KBD		(OS built-in)
                	;2		Video (sequential)		VID		(OS built-in)
                	;3		Printer (parallel 1)	LPT
                	;4		Printer (parallel 2)	LPT2
                	;5		RS-232 1				COM1	(OS built-in)
                	;6		RS-232 2				COM2
                	;7		RS-232 3				COM3
                	;8		RS-232 4				COM4
                	;9
                	;10		Floppy					FD0
                	;11		Floppy					FD1
                	;12		Hard disk				HD0
                	;13		Hard disk				HD1
                	;14
                	;15
                	;16		SDCard					CARD1 	(OS built-in)
                	;17
                	;18
                	;19
                	;20
                	;21
                	;22
                	;23
                	;24
                	;25
                	;26
                	;27
                	;28		Audio					PSG1	(OS built-in)
                	;29
                	;30
                	;31
                	
                	NR_DCB			EQU		32
                	NR_DCB			EQU		32
                	;include "FMTK_Equates.inc"
                	
                		code
                		org		$00010000
010000 3A 15 00 00 		bra     start
010004 00 00 00 00 		align   
                	
010008 68 09 01 00 		dw		ClearScreen		; $8000
01000C 00 00 00 00 
010010 2C 09 01 00 		dw		HomeCursor		; $8008
010014 00 00 00 00 
010018 54 0A 01 00 		dw		DisplayString	; $8010
01001C 00 00 00 00 
010020 64 1E 01 00 		dw		KeybdGetCharNoWait; $8018
010024 00 00 00 00 
010028 BE 00 00 00 		dw		ClearBmpScreen	; $8020
01002C 00 00 00 80 
010030 A4 0C 01 00 		dw		DisplayChar		; $8028
010034 00 00 00 00 
010038 C0 00 00 00 		dw		SDInit			; $8030
01003C 00 00 00 80 
010040 C1 00 00 00 		dw		SDReadMultiple	; $8038
010044 00 00 00 80 
010048 C2 00 00 00 		dw		SDWriteMultiple	; $8040
01004C 00 00 00 80 
010050 C3 00 00 00 		dw		SDReadPart		; $8048
010054 00 00 00 80 
010058 C4 00 00 00 		dw		SDDiskSize		; $8050
01005C 00 00 00 80 
010060 D4 09 01 00 		dw		DisplayWord		; $8058
010064 00 00 00 00 
010068 E8 09 01 00 		dw		DisplayHalf		; $8060
01006C 00 00 00 00 
010070 FC 09 01 00 		dw		DisplayCharHex	; $8068
010074 00 00 00 00 
010078 10 0A 01 00 		dw		DisplayByte		; $8070
01007C 00 00 00 00 
                	BIOS_FuncTable:
010080 68 09       	    dc      ClearScreen
010082 2C 09       	    dc      HomeCursor
010084 54 0A       	    dc      DisplayString
010086 64 1E       	    dc      KeybdGetCharNoWait
010088 00 00       	    dc      0
01008A 4C 16       	    dc      OutChar
01008C 00 00       	    dc      0
01008E 00 00       	    dc      0
010090 00 00       	    dc      0
010092 00 00       	    dc      0
010094 00 00       	    dc      0
010096 D4 09       	    dc      DisplayWord
010098 E8 09       	    dc      DisplayHalf
01009A FC 09       	    dc      DisplayCharHex
01009C 10 0A       	    dc      DisplayByte
01009E 84 0A       	    dc      DisplayString16
0100A0 00 00       	    dc      0
0100A2 00 00       	    dc      0
0100A4 00 00       	    dc      0
                	    
0100A6 00 00       	    align   
                	
                	message "start"
                	start:
0100A8 7C C0 00 00 	    sw      r0,FMTK_Inited
0100AC 63 00 60 03 
0100B0 02 10 00 6C 	    cpuid   r1,r0,#0
0100B4 BD 00 40 00 	    beq     r1,CPU0_Start
                	CPU1_Start:
0100B8 7C F0 07 00 	    ldi     sp,#STACKS_Array+4096+4088
0100BC 0A E0 F1 3F 
0100C0 7C C1 00 00 	    ldi     tr,#TCB_Array+TCB_Size
0100C4 0A 80 01 08 
0100C8 63 EC 31 03 		sw      sp,TCB_ISP[tr]
0100CC 63 EC E1 01 		sw      sp,TCB_r30[tr]
0100D0 7C E0 07 00 		ldi     r1,#BIOS_STACKS_Array+4096+4088  ; so we can call the BIOS during startup
0100D4 0A 10 F0 3F 
0100D8 63 1C 10 05 		sw      r1,TCB_BIOS_Stack[tr]
0100DC 7C D0 07 00 		ldi     r1,#SYS_STACKS_Array+4096+4088  ; so we can call the BIOS during startup
0100E0 0A 10 F0 3F 
0100E4 63 1C 20 05 		sw      r1,TCB_SYS_Stack[tr]
0100E8 60 0C 28 04 		sb      r0,TCB_hJCB[tr]             ; JCB#0 is the system JCB
0100EC B9 4F 00 00 	    bsr     SetupIntVectors1
0100F0 B9 6A 00 00 		bsr		InitPIC1
                		; Wait for CPU #0 to complete FMTK initialization before proceeding.
                	.0001:
0100F4 3F 00 00 00 	    nop
0100F8 3F 00 00 00 	    nop
0100FC 7C C0 00 00 		lw      r1,FMTK_Inited
010100 46 10 60 03 
010104 7C 34 12 00 		cmpu    r1,r1,#$12345678
010108 96 10 F0 AC 
01010C BD 10 F4 FF 		bne     r1,.0001
010110 B9 E1 07 00 		bsr     FMTKInitialize        ;  Initialize for CPU #1
                	.0003:
010114 02 00 00 6E 	    cli
010118 7C 02 00 00 	    inc     $20000
01011C 64 10 00 00 
010120 46 10 20 27 	    lw      r1,StartCPU1Flag
010124 7C 34 12 00 	    cmp     r1,r1,#$12345678
010128 86 10 F0 AC 
01012C BD 10 F4 FF 	    bne     r1,.0003
010130 3E 00 30 27 	    jmp     (StartCPU1Addr)
                	    ; This is a little bit kludgy, we setup just enough of the FMTK vars
                	    ; in order to be able to get display output.
                	CPU0_Start:
                	.0002:
010134 7C F0 07 00 		ldi     sp,#STACKS_Array+4088
010138 0A E0 F1 1F 
01013C 7C C1 00 00 		ldi     tr,#TCB_Array               ; load task register with BIOS task
010140 0A 80 01 00 
010144 63 EC 31 03 		sw      sp,TCB_ISP[tr]
010148 63 EC E1 01 		sw      sp,TCB_r30[tr]
01014C 7C E0 07 00 		ldi     r1,#BIOS_STACKS_Array+4088  ; so we can call the BIOS during startup
010150 0A 10 F0 1F 
010154 63 1C 10 05 		sw      r1,TCB_BIOS_Stack[tr]
010158 7C D0 07 00 		ldi     r1,#SYS_STACKS_Array+4088  ; so we can System Call during startup
01015C 0A 10 F0 1F 
010160 63 1C 20 05 		sw      r1,TCB_SYS_Stack[tr]
010164 60 0C 28 04 		sb      r0,TCB_hJCB[tr]             ; JCB#0 is the system JCB
010168 B9 FB 01 00 		bsr     GetJCBPtr
01016C 7C C0 00 00 		sw      r1,IOFocusNdx               ; The screen routines check this var
010170 63 10 50 00 
010174 7C D0 FF 00 		ldi     r2,#TEXTSCR
010178 0A 20 00 00 
01017C E3 20 D0 07 		sw      r2,JCB_pVidMem[r1]          ; point JCB#0 to real screen
010180 FC 26 00 00 		ldi		r4,#%000000100_110101110_0000000000	; grey on blue
010184 0A 40 00 70 
010188 E2 40 28 08 		sh		r4,JCB_NormAttr[r1]
01018C E2 40 30 08 		sh		r4,JCB_CurrAttr[r1]
010190 0A 50 00 00 	    ldi     r5,#$0000
010194 0A 10 28 00 	    ldi     r1,#20
                	.0001:
010198 7C DC FF 00 	    sc      r5,LEDS
01019C 61 50 00 0C 
0101A0 94 52 02 00 	    addui   r5,r5,#1
0101A4 63 00 00 22 		sw		r0,Milliseconds
0101A8 0A 10 FE FF 		ldi     r1,#-1
0101AC 63 10 00 27 		sw      r1,API_sema
0101B0 7C C0 00 00 		sw      r0,BIOS1_sema
0101B4 63 00 30 04 
0101B8 39 FB 01 00 		bsr     UnlockBIOS
0101BC 39 D5 00 00 		bsr     UnlockVideoBIOS
0101C0 FC 26 00 00 		ldi		r1,#%000000100_110101110_0000000000
0101C4 0A 10 00 70 
0101C8 60 10 68 22 		sb		r1,KeybdEcho
0101CC 60 00 6A 22 		sb		r0,KeybdBad
0101D0 62 10 50 22 		sh		r1,NormAttr
0101D4 7C 01 00 00 		ldi		r1,#DisplayChar
0101D8 0A 10 48 19 
0101DC 63 10 10 22 		sw		r1,OutputVec
0101E0 39 F1 00 00 		bsr		ClearScreen
0101E4 39 E9 00 00 		bsr		HomeCursor
0101E8 7C 01 00 00 		ldi     r1,#msgStart
0101EC 0A 10 CA 27 
0101F0 39 1C 01 00 		bsr     DisplayStringCRLF
0101F4 B9 10 00 00 		bsr		SetupIntVectors
0101F8 B9 DA 01 00 		bsr     ROMChecksum
0101FC B9 04 15 00 		bsr     dbg_init
                	;	bsr		KeybdInit
                	    ; set data breakpoint at FreeTCB address
                	;    ldi     r1,#$C00108
                	;    mtspr   dbad0,r1
                	;    ldi     r1,#$D0001
                	;    mtspr   dbctrl,r1
010200 B9 C3 07 00 	    bsr     FMTKInitialize
010204 7C 01 00 00 	    ldi     r1,#UserTickRout     ; set user tick vector
010208 0A 10 08 27 
01020C 7C C0 00 00 	    sw      r1,$C00000
010210 63 10 00 00 
010214 B9 42 00 00 		bsr		InitPIC
010218 39 49 00 00 		bsr     InitUart
01021C B9 90 04 00 		bsr     RTCCReadbuf          ; read the real-time clock
010220 39 85 05 00 		bsr     set_time_serial      ; set the system time serial
                	
                		; Startup BIOS call task so that CPU#1 may make BIOS calls
010224 0A 10 00 00 		ldi     r1,#0                ; task priority
010228 0A 20 00 00 		ldi     r2,#0                ; cpu affinity
01022C 7C 01 00 00 		ldi     r3,#BIOSCallTask|1   ; start address (start in kernel mode)
010230 0A 30 C2 25 
010234 0A 40 00 00 		ldi     r4,#0                ; start parameter
010238 0A 50 00 00 		ldi     r5,#0                ; owning job
01023C 38 0F 08 00 		sys     #FMTK_CALL
010240 01 00 00 00 		dh      1                    ; start task function
010244 B9 B9 08 00 	    bsr     DumpTaskList
010248 3A 37 02 00 		bra		Monitor
                	
                	SerialStartMsg:
01024C E7 EF 01 00 	    push    lr
010250 7C 01 00 00 		ldi     r1,#SerialPutChar
010254 0A 10 F0 09 
010258 63 10 10 22 		sw      r1,OutputVec
01025C 7C 01 00 00 		ldi     r1,#msgStart
010260 0A 10 CA 27 
010264 B9 0D 01 00 		bsr     DisplayStringCRLF
010268 7C 01 00 00 		ldi		r1,#DisplayChar
01026C 0A 10 48 19 
010270 63 10 10 22 		sw		r1,OutputVec
010274 3B FF 11 00 	    rts
 
                	SetupIntVectors:
010278 02 00 14 3C 		mtspr   vbr,r0               ; place vector table at $0000
01027C 3F 00 00 00 		nop
010280 3F 00 00 00 		nop
010284 02 20 14 3E 		mfspr   r2,vbr
010288 7C 01 00 00 		ldi     r1,#UninitIRQ
01028C 0A 10 F8 55 
010290 0A 30 FE 03 		ldi     r3,#511
                	.0001:
010294 6B 11 C6 00 		sw      r1,[r2+r3*8]
010298 95 31 02 00 		subui   r3,r3,#1
01029C BD 31 FC FF 		bge     r3,.0001
0102A0 7C 01 00 00 		ldi     r1,#BIOSCall
0102A4 0A 10 F8 24 
0102A8 63 11 A0 00 		sw      r1,10*8[r2]
0102AC 7C 01 00 00 		ldi     r1,#VideoBIOSCall
0102B0 0A 10 00 11 
0102B4 63 11 A0 19 		sw      r1,410*8[r2]
0102B8 7C 01 00 00 		ldi		r1,#Tick1024Rout
0102BC 0A 10 68 27 
0102C0 63 11 20 1C 		sw		r1,450*8[r2]
0102C4 7C 01 00 00 		ldi		r1,#TickRout         ; This vector will be taken over by FMTK
0102C8 0A 10 A0 26 
0102CC 63 11 30 1C 		sw		r1,451*8[r2]
0102D0 7C 01 00 00 		ldi     r1,#SerialIRQ
0102D4 0A 10 C0 0D 
0102D8 63 11 80 1C 		sw      r1,456*8[r2]
0102DC 7C 00 00 00 		ldi     r1,#ServiceRequestIRQ
0102E0 7C 00 00 00 
0102E4 0A 10 0E 02 
0102E8 63 11 90 1C 		sw      r1,457*8[r2]
0102EC 7C 01 00 00 		ldi		r1,#KeybdIRQ
0102F0 0A 10 C0 42 
0102F4 63 11 F0 1C 		sw		r1,463*8[r2]
0102F8 7C 01 00 00 	    ldi     r1,#SSM_ISR          ; set ISR vector for single step routine
0102FC 0A 10 D8 56 
010300 63 11 F0 1E 	    sw      r1,495*8[r2]
010304 7C 01 00 00 	    ldi     r1,#BPT_ISR          ; set ISR vector for breakpoint routine
010308 0A 10 E0 56 
01030C 63 11 00 1F 	    sw      r1,496*8[r2]
010310 7C 01 00 00 		ldi		r1,#exf_rout
010314 0A 10 18 54 
010318 63 11 10 1F 		sw		r1,497*8[r2]
01031C 7C 01 00 00 		ldi		r1,#dwf_rout
010320 0A 10 88 54 
010324 63 11 20 1F 		sw		r1,498*8[r2]
010328 7C 01 00 00 		ldi		r1,#drf_rout
01032C 0A 10 50 54 
010330 63 11 30 1F 		sw		r1,499*8[r2]
010334 7C 01 00 00 		ldi		r1,#priv_rout
010338 0A 10 C0 54 
01033C 63 11 50 1F 		sw		r1,501*8[r2]
010340 7C 01 00 00 		ldi		r1,#berr_rout
010344 0A 10 18 56 
010348 63 11 C0 1F 		sw		r1,508*8[r2]
01034C 7C 01 00 00 		ldi		r1,#berr_rout
010350 0A 10 18 56 
010354 63 11 D0 1F 		sw		r1,509*8[r2]
010358 7C 01 00 00 		ldi		r1,#nmi_rout
01035C 0A 10 A8 53 
010360 63 11 E0 1F 		sw		r1,510*8[r2]
010364 37 FF 01 00 	    rtl
 
                	; Setup interrupt vector table for processor #1
                	SetupIntVectors1:
010368 02 00 14 3C 		mtspr   vbr,r0               ; place vector table at $0000
01036C 3F 00 00 00 		nop
010370 3F 00 00 00 		nop
010374 02 20 14 3E 		mfspr   r2,vbr
010378 7C 01 00 00 		ldi     r1,#UninitIRQ
01037C 0A 10 F8 55 
010380 0A 30 FE 03 		ldi     r3,#511
                	.0001:
010384 6B 11 C6 00 		sw      r1,[r2+r3*8]
010388 95 31 02 00 		subui   r3,r3,#1
01038C BD 31 FC FF 		bge     r3,.0001
010390 7C 01 00 00 		ldi     r1,#BIOSCall1
010394 0A 10 88 23 
010398 63 11 A0 00 		sw      r1,10*8[r2]
01039C 7C 01 00 00 		ldi		r1,#TickRout         ; This vector will be taken over by FMTK
0103A0 0A 10 A0 26 
0103A4 63 11 30 1C 		sw		r1,451*8[r2]
0103A8 7C 00 00 00 		ldi     r1,#ServiceRequestIRQ
0103AC 7C 00 00 00 
0103B0 0A 10 0E 02 
0103B4 63 11 90 1C 		sw      r1,457*8[r2]
0103B8 7C 01 00 00 	    ldi     r1,#SSM_ISR          ; set ISR vector for single step routine
0103BC 0A 10 D8 56 
0103C0 63 11 F0 1E 	    sw      r1,495*8[r2]
0103C4 7C 01 00 00 	    ldi     r1,#BPT_ISR          ; set ISR vector for instruction breakpoint routine
0103C8 0A 10 E0 56 
0103CC 63 11 00 1F 	    sw      r1,496*8[r2]
0103D0 7C 01 00 00 		ldi		r1,#exf_rout
0103D4 0A 10 18 54 
0103D8 63 11 10 1F 		sw		r1,497*8[r2]
0103DC 7C 01 00 00 		ldi		r1,#dwf_rout
0103E0 0A 10 88 54 
0103E4 63 11 20 1F 		sw		r1,498*8[r2]
0103E8 7C 01 00 00 		ldi		r1,#drf_rout
0103EC 0A 10 50 54 
0103F0 63 11 30 1F 		sw		r1,499*8[r2]
0103F4 7C 01 00 00 		ldi		r1,#priv_rout
0103F8 0A 10 C0 54 
0103FC 63 11 50 1F 		sw		r1,501*8[r2]
010400 7C 01 00 00 		ldi		r1,#berr_rout
010404 0A 10 18 56 
010408 63 11 C0 1F 		sw		r1,508*8[r2]
01040C 7C 01 00 00 		ldi		r1,#berr_rout
010410 0A 10 18 56 
010414 63 11 D0 1F 		sw		r1,509*8[r2]
010418 7C 01 00 00 		ldi		r1,#nmi_rout1
01041C 0A 10 F0 53 
010420 63 11 E0 1F 		sw		r1,510*8[r2]
010424 37 FF 01 00 	    rtl
 
                	;------------------------------------------------------------------------------
                	; Initialize the interrupt controller.
                	;------------------------------------------------------------------------------
                	
                	InitPIC:
010428 0A 10 18 00 		ldi		r1,#$000C		; timer interrupt(s) are edge sensitive
01042C 7C DC FF 00 		sh		r1,PIC_ES
010430 62 10 A0 1F 
010434 0A 10 1E 00 		ldi		r1,#$000F		; enable keyboard reset, timer interrupts
010438 7C DC FF 00 		sh		r1,PIC_IE
01043C 62 10 88 1F 
010440 37 FF 01 00 		rtl

                	; For CPU #1 the only interrupt to be serviced is the 30Hz time slice.
                	
                	InitPIC1:
010444 0A 10 18 00 		ldi		r1,#$000C		; timer interrupt(s) are edge sensitive
010448 7C DC FF 00 		sh		r1,PIC_ES
01044C 62 10 A0 1F 
010450 0A 10 16 00 		ldi		r1,#$000B		; enable keyboard reset, timer interrupts
010454 7C DC FF 00 		sh		r1,PIC_IE
010458 62 10 88 1F 
01045C 37 FF 01 00 		rtl

                	
                	;==============================================================================
                	; Serial port
                	;==============================================================================
                		code
                	;------------------------------------------------------------------------------
                	; Initialize UART
                	;------------------------------------------------------------------------------
                	
                	InitUart:
010460 7C DC FF 00 	    ldi     r2,#UART
010464 0A 20 00 14 
                	;    ldi     r1,#$025BF7BA   ; constant for clock multiplier with 16.667MHz clock for 9600 baud
010468 FC 27 0E 00 	    ldi     r1,#$0E27CE61   ; constant for clock multiplier with 16.667MHz clock for 57600 baud
01046C 0A 10 C2 9C 
010470 82 10 10 72 	    lsr     r1,r1,#8          ; drop the LSB (not used)
010474 60 11 12 00 	    sb      r1,UART_CM1[r2]
010478 82 10 10 72 	    lsr     r1,r1,#8
01047C 60 11 14 00 	    sb      r1,UART_CM2[r2]
010480 82 10 10 72 	    lsr     r1,r1,#8
010484 60 11 16 00 	    sb      r1,UART_CM3[r2]
010488 60 01 0E 00 	    sb      r0,UART_CTRL[r2]           ; no hardware flow control
01048C 61 00 CC 22 		sc		r0,Uart_rxhead			; reset buffer indexes
010490 61 00 D0 22 		sc		r0,Uart_rxtail
010494 0A 10 E0 03 		ldi		r1,#0x1f0
010498 61 10 DC 22 		sc		r1,Uart_foff		; set threshold for XOFF
01049C 0A 10 20 00 		ldi		r1,#0x010
0104A0 61 10 E0 22 		sc		r1,Uart_fon			; set threshold for XON
0104A4 0A 10 02 00 		ldi		r1,#1
0104A8 60 11 08 00 		sb		r1,UART_IE[r2]		; enable receive interrupt only
0104AC 60 00 D6 22 		sb		r0,Uart_rxrts		; no RTS/CTS signals available
0104B0 60 00 E4 22 		sb		r0,Uart_txrts		; no RTS/CTS signals available
0104B4 60 00 E6 22 		sb		r0,Uart_txdtr		; no DTR signals available
0104B8 60 00 D8 22 		sb		r0,Uart_rxdtr		; no DTR signals available
0104BC 0A 10 02 00 		ldi		r1,#1
0104C0 60 10 E8 22 		sb		r1,Uart_txxon		; for now
0104C4 0A 10 02 00 		ldi		r1,#1
                	;	sb		r1,SERIAL_SEMA
0104C8 37 FF 01 00 	    rtl

                	;---------------------------------------------------------------------------------
                	; Get character directly from serial port. Blocks until a character is available.
                	;---------------------------------------------------------------------------------
                	;
                	SerialGetCharDirect:
                	sgc1:
0104CC 7C DC FF 00 		lb		r1,UART+UART_LS	; uart status
0104D0 40 10 02 14 
0104D4 8C 10 02 00 		and		r1,r1,#1		; is there a char available ?
0104D8 BD 00 FA FF 		beq		r1,sgc1
0104DC 7C DC FF 00 		lb		r1,UART+UART_RX
0104E0 40 10 00 14 
0104E4 37 FF 01 00 		rtl

                	;------------------------------------------------
                	; Check for a character at the serial port
                	; returns r1 = 1 if char available, 0 otherwise
                	;------------------------------------------------
                	;
                	SerialCheckForCharDirect:
0104E8 7C DC FF 00 		lb		r1,UART+UART_LS			; uart status
0104EC 40 10 02 14 
0104F0 8C 10 02 00 		and		r1,r1,#rxfull			; is there a char available ?
0104F4 37 FF 01 00 		rtl

                	;-----------------------------------------
                	; Put character to serial port
                	; r1 = char to put
                	;-----------------------------------------
                	;
                	SerialPutChar:
0104F8 67 E1 01 00 	    push    r2
0104FC E7 E1 01 00 	    push    r3
010500 67 E2 01 00 		push	r4
010504 E7 E2 01 00 		push	r5
010508 67 E3 01 00 	    push    r6
01050C 7C DC FF 00 	    ldi     r6,#UART
010510 0A 60 00 14 
010514 40 23 0C 00 		lb		r2,UART_MC[r6]
010518 0D 21 06 00 		or		r2,r2,#3		; assert DTR / RTS
01051C 60 23 0C 00 		sb		r2,UART_MC[r6]
010520 40 20 E4 22 		lb		r2,Uart_txrts
010524 3D 01 1A 00 		beq		r2,spcb1
010528 46 40 00 22 		lw		r4,Milliseconds
01052C 0A 30 00 08 		ldi		r3,#1024		; delay count (1 s)
                	spcb3:
010530 40 23 04 00 		lb		r2,UART_MS[r6]
010534 0C 21 20 00 		and		r2,r2,#$10		; is CTS asserted ?
010538 3D 11 10 00 		bne		r2,spcb1
01053C 46 50 00 22 		lw		r5,Milliseconds
010540 02 22 0A 0C 		cmp		r2,r4,r5
010544 3D 01 F6 FF 		beq		r2,spcb3
010548 82 42 00 1A 		mov		r4,r5
01054C 95 31 02 00 		subui   r3,r3,#1
010550 BD 11 F0 FF 		bne		r3,spcb3
010554 BA 11 00 00 		bra		spcabort
                	spcb1:
010558 40 20 E6 22 		lb		r2,Uart_txdtr
01055C 3D 01 1A 00 		beq		r2,spcb2
010560 46 40 00 22 		lw		r4,Milliseconds
010564 0A 30 00 08 		ldi		r3,#1024		; delay count
                	spcb4:
010568 40 23 04 00 		lb		r2,UART_MS[r6]
01056C 0C 21 40 00 		and		r2,r2,#$20		; is DSR asserted ?
010570 3D 11 10 00 		bne		r2,spcb2
010574 46 50 00 22 		lw		r5,Milliseconds
010578 02 22 0A 0C 		cmp		r2,r4,r5
01057C 3D 01 F6 FF 		beq		r2,spcb4
010580 82 42 00 1A 		mov		r4,r5
010584 95 31 02 00 		subui   r3,r3,#1
010588 BD 11 F0 FF 		bne		r3,spcb4
01058C BA 0A 00 00 		bra		spcabort
                	spcb2:	
010590 40 20 E8 22 		lb		r2,Uart_txxon
010594 3D 01 0C 00 		beq		r2,spcb5
                	spcb6:
010598 40 20 CA 22 		lb		r2,Uart_txxonoff
01059C 3D 01 08 00 		beq		r2,spcb5
0105A0 40 43 04 00 		lb		r4,UART_MS[r6]
0105A4 0C 42 00 01 		and		r4,r4,#0x80			; DCD ?
0105A8 3D 12 F8 FF 		bne		r4,spcb6
                	spcb5:
0105AC 46 40 00 22 		lw		r4,Milliseconds
0105B0 0A 30 00 08 		ldi		r3,#1024			; wait up to 1s
                	spcb8:
0105B4 40 23 02 00 		lb		r2,UART_LS[r6]
0105B8 0C 21 40 00 		and		r2,r2,#0x20			; tx not full ?
0105BC 3D 11 10 00 		bne		r2,spcb7
0105C0 46 50 00 22 		lw		r5,Milliseconds
0105C4 02 22 0A 0C 		cmp		r2,r4,r5
0105C8 3D 01 F6 FF 		beq		r2,spcb8
0105CC 82 42 00 1A 		mov		r4,r5
0105D0 95 31 02 00 		subui   r3,r3,#1
0105D4 BD 11 F0 FF 		bne		r3,spcb8
0105D8 3A 01 00 00 		bra		spcabort
                	spcb7:
0105DC 60 13 00 00 		sb		r1,UART_TX[r6]
                	spcabort:
0105E0 57 6F 10 00 	    pop     r6
0105E4 57 5F 10 00 		pop		r5
0105E8 57 4F 10 00 		pop		r4
0105EC 57 3F 10 00 		pop     r3
0105F0 57 2F 10 00 		pop     r2
0105F4 37 FF 01 00 		rtl

                	
                	;-------------------------------------------------
                	; Compute number of characters in recieve buffer.
                	; r4 = number of chars
                	;-------------------------------------------------
                	CharsInRxBuf:
0105F8 43 40 CC 22 		lcu		r4,Uart_rxhead
0105FC 43 30 D0 22 		lcu		r3,Uart_rxtail
010600 02 42 06 2A 		subu	r4,r4,r3
010604 3D 22 0A 00 		bgt		r4,cirxb1
010608 0A 40 00 04 		ldi		r4,#0x200
01060C 02 42 06 28 		addu	r4,r4,r3
010610 43 30 CC 22 		lcu		r3,Uart_rxhead
010614 02 42 06 2A 		subu	r4,r4,r3
                	cirxb1:
010618 37 FF 01 00 		rtl

                	;----------------------------------------------
                	; Get character from rx fifo
                	; If the fifo is empty enough then send an XON
                	;----------------------------------------------
                	;
                	SerialGetChar:
01061C 67 E1 01 00 	    push    r2
010620 E7 E1 01 00 	    push    r3
010624 67 E2 01 00 		push	r4
010628 E7 E2 01 00 	    push    r5
01062C 7C DC FF 00 	    ldi     r5,#UART
010630 0A 50 00 14 
010634 43 30 CC 22 		lcu		r3,Uart_rxhead
010638 43 20 D0 22 		lcu		r2,Uart_rxtail
01063C 02 31 06 0C 		cmp		r3,r2,r3
010640 BD 01 44 00 		beq		r3,sgcfifo1		    ; is there a char available ?
010644 41 11 EA 22 		lbu		r1,Uart_rxfifo[r2]	; get the char from the fifo into r1
010648 14 21 02 00 		addui   r2,r2,#1    		; increment the fifo pointer
01064C 0C 21 FE 03 		and		r2,r2,#$1ff
010650 61 20 D0 22 		sc		r2,Uart_rxtail
010654 40 20 D4 22 		lb		r2,Uart_rxflow		; using flow control ?
010658 3D 01 2E 00 		beq		r2,sgcfifo2
01065C 43 30 E0 22 		lcu		r3,Uart_fon		; enough space in Rx buffer ?
010660 E7 EF 01 00 		push    lr
010664 B9 F2 FF FF 		bsr		CharsInRxBuf
010668 57 FF 11 00 		pop     lr
01066C 02 42 06 0C 		cmp		r4,r4,r3
010670 3D 22 22 00 		bgt		r4,sgcfifo2
010674 60 00 D4 22 		sb		r0,Uart_rxflow		; flow off
010678 40 40 D6 22 		lb		r4,Uart_rxrts
01067C 3D 02 08 00 		beq		r4,sgcfifo3
010680 C0 42 0C 00 		lb		r4,UART_MC[r5]		; set rts bit in MC
010684 0D 42 04 00 		or		r4,r4,#2
010688 E0 42 0C 00 		sb		r4,UART_MC[r5]
                	sgcfifo3:
01068C 40 40 D8 22 		lb		r4,Uart_rxdtr
010690 3D 02 08 00 		beq		r4,sgcfifo4
010694 C0 42 0C 00 		lb		r4,UART_MC[r5]		; set DTR
010698 0D 42 02 00 		or		r4,r4,#1
01069C E0 42 0C 00 		sb		r4,UART_MC[r5]
                	sgcfifo4:
0106A0 40 40 DA 22 		lb		r4,Uart_rxxon
0106A4 3D 02 08 00 		beq		r4,sgcfifo5
0106A8 0A 40 22 00 		ldi		r4,#XON
0106AC 7C DC FF 00 		sb		r4,UART[r5]
0106B0 E0 42 00 14 
                	sgcfifo5:
                	sgcfifo2:					; return with char in r1
0106B4 57 5F 10 00 	    pop     r5
0106B8 57 4F 10 00 		pop		r4
0106BC 57 3F 10 00 		pop     r3
0106C0 57 2F 10 00 		pop     r2
0106C4 37 FF 01 00 		rtl
sgcfifo1:
0106C8 0A 10 FE FF 		ldi		r1,#-1				; no char available
0106CC 57 5F 10 00 		pop     r5
0106D0 57 4F 10 00 		pop		r4
0106D4 57 3F 10 00 		pop     r3
0106D8 57 2F 10 00 		pop     r2
0106DC 3B FF 11 00 		rts

                	
                	;-----------------------------------------
                	; Serial port IRQ
                	;-----------------------------------------
                	;
                	SerialIRQ:
0106E0 FC 00 00 00 	    ldi     sp,#CPU0_IRQ_STACK
0106E4 0A E0 01 10 
0106E8 E7 E0 01 00 		push    r1
0106EC 67 E1 01 00 		push    r2
0106F0 E7 E1 01 00 		push    r3
0106F4 67 E2 01 00 		push	r4
                	
0106F8 7C DC FF 00 	    ldi     r2,#UART
0106FC 0A 20 00 14 
010700 40 11 06 00 	    lb      r1,UART_IS[r2]  ; get interrupt status
010704 BD 20 10 00 		bgt		r1,sirq1		; no interrupt
010708 8C 10 FE 00 		and		r1,r1,#0x7f  	; switch on interrupt type
01070C 86 30 08 00 		cmp		r3,r1,#4
010710 BD 01 1C 00 		beq		r3,srxirq
010714 86 30 18 00 		cmp		r3,r1,#$0C
010718 BD 01 16 00 		beq		r3,stxirq
01071C 86 30 20 00 		cmp		r3,r1,#$10
010720 BD 01 0C 00 		beq		r3,smsirq
                		; unknown IRQ type
                	sirq1:
010724 57 4F 10 00 		pop		r4
010728 57 3F 10 00 		pop     r3
01072C 57 2F 10 00 		pop     r2
010730 57 1F 10 00 		pop     r1
010734 02 E0 3F 6E 		rti
                	
                	; Get the modem status and record it
                	smsirq:
010738 41 11 04 00 	    lbu     r1,UART_MS[r2]
01073C 60 10 C8 22 		sb      r1,Uart_ms
010740 BA FC FF FF 		bra		sirq1
                	
                	stxirq:
010744 3A FC FF FF 		bra		sirq1
                	
                	; Get a character from the uart and store it in the rx fifo
                	srxirq:
                	srxirq1:
010748 41 11 00 00 	    lbu     r1,UART_RX[r2]      ; get the char (clears interrupt)
01074C 41 30 E8 22 	    lbu     r3,Uart_txxon
010750 BD 01 14 00 		beq		r3,srxirq3
010754 86 40 26 00 		cmp		r4,r1,#XOFF
010758 3D 12 08 00 		bne		r4,srxirq2
01075C 0A 10 02 00 		ldi     r1,#1
010760 60 10 CA 22 		sb		r1,Uart_txxonoff
010764 BA 05 00 00 		bra		srxirq5
                	srxirq2:
010768 86 40 22 00 		cmp		r4,r1,#XON
01076C 3D 12 06 00 		bne		r4,srxirq3
010770 60 00 CA 22 		sb		r0,Uart_txxonoff
010774 BA 03 00 00 		bra		srxirq5
                	srxirq3:
010778 60 00 CA 22 		sb		r0,Uart_txxonoff
01077C 43 40 CC 22 		lcu		r4,Uart_rxhead
010780 60 12 EA 22 		sb		r1,Uart_rxfifo[r4]  ; store in buffer
010784 14 42 02 00 		addui   r4,r4,#1
010788 0C 42 FE 03 		and		r4,r4,#$1ff
01078C 61 40 CC 22 		sc		r4,Uart_rxhead
                	srxirq5:
010790 40 11 02 00 	    lb      r1,UART_LS[r2]      ; check for another ready character
010794 8C 10 02 00 		and		r1,r1,#1            ; check rxfull bit
010798 BD 10 D8 FF 		bne		r1,srxirq1          ; loop back for another character
01079C 40 10 D4 22 		lb		r1,Uart_rxflow		; are we using flow controls?
0107A0 BD 10 2E 00 		bne		r1,srxirq8
0107A4 E7 EF 01 00 		push    lr
0107A8 39 CA FF FF 		bsr		CharsInRxBuf
0107AC 57 FF 11 00 		pop     lr
0107B0 40 10 DC 22 		lb		r1,Uart_foff
0107B4 02 12 02 0C 		cmp		r1,r4,r1
0107B8 BD 40 22 00 		blt		r1,srxirq8
0107BC 0A 10 02 00 		ldi		r1,#1
0107C0 60 10 D4 22 		sb		r1,Uart_rxflow
0107C4 40 10 D6 22 		lb		r1,Uart_rxrts
0107C8 BD 00 08 00 		beq		r1,srxirq6
0107CC 40 11 0C 00 		lb		r1,UART_MC[r2]
0107D0 8C 10 FA 01 		and		r1,r1,#$FD		; turn off RTS
0107D4 60 11 0C 00 		sb		r1,UART_MC[r2]
                	srxirq6:
0107D8 40 10 D8 22 		lb		r1,Uart_rxdtr
0107DC BD 00 08 00 		beq		r1,srxirq7
0107E0 40 11 0C 00 		lb		r1,UART_MC[r2]
0107E4 8C 10 FC 01 		and		r1,r1,#$FE		; turn off DTR
0107E8 60 11 0C 00 		sb		r1,UART_MC[r2]
                	srxirq7:
0107EC 40 10 DA 22 		lb		r1,Uart_rxxon
0107F0 BD 00 06 00 		beq		r1,srxirq8
0107F4 0A 10 26 00 		ldi		r1,#XOFF
0107F8 60 11 00 00 		sb		r1,UART_TX[r2]
                	srxirq8:
0107FC 3A E5 FF FF 		bra		sirq1
                	
                	
                	;------------------------------------------------------------------------------
                	; Video BIOS
                	; Video Exception #410
                	;
                	; Function in R6
                	; 0x02 = Set Cursor Position	r1 = row, r2 = col 
                	; 0x03 = Get Cursor position	returns r1 = row, r2 = col
                	; 0x06 = Scroll screen up
                	; 0x09 = Display character+attribute, r1=char, r2=attrib, r3=#times
                	; 0x0A = Display character at cursor position, r1 = char, r2 = # times
                	; 0x0B = Set background color, r1 = color
                	; 0x0C = Display Pixel r1 = x, r2 = y, r3 = color
                	; 0x0D = Get pixel  r1 = x, r2 = y
                	; 0x0E = Teletype output, r1 = char
                	; 0x14 = Display String	r1 = pointer to string
                	; 0x15 = Display number r1 = number, r2 = # digits
                	; 0x16 = Display String + CRLF   r1 = pointer to string
                	; 0x17 = Display Word r1 as hex = word
                	; 0x18 = Display Half word as hex r1 = half word
                	; 0x19 = Display Charr char in hex r1 = char
                	; 0x1A = Display Byte in hex r1 = byte
                	; 0x1B = Display String -wide characters r1=pointer to string
                	; 0x1C = Display hexidecimal number, r1 = number, r2 = # of digits
                	; 0x20 = Convert ascii to screen
                	; 0x21 = Convert screen to ascii
                	; 0x22 = Set normal attribute
                	; 0x23 = Get normal attribute
                	;------------------------------------------------------------------------------
                	
                	MAX_VIDEO_BIOS_CALL = 0x23
                	
                	    code
                	    align   2                	
                	VideoBIOS_FuncTable:
010800 00 00       	    dc      0            ; 0x00
010802 00 00       	    dc      0
010804 74 10       	    dc      SetCursorPos ; 0x02
010806 9C 10       	    dc      GetCursorPos ; 0x03
010808 00 00       	    dc      0
01080A 00 00       	    dc      0
01080C 08 0F       	    dc      ScrollUp     ; 0x06
01080E 00 00       	    dc      0
010810 00 00       	    dc      0
010812 E4 08       	    dc      DispCharAttr ; 0x09
010814 00 00       	    dc      0
010816 48 01       	    dc      SetBkColor   ; 0x0B
010818 49 01       	    dc      SetPixel     ; 0x0C
01081A 4A 01       	    dc      GetPixel     ; 0x0D
01081C A4 0C       	    dc      DisplayChar  ; 0x0E
01081E 00 00       	    dc      0
010820 00 00       	    dc      0
010822 00 00       	    dc      0
010824 00 00       	    dc      0
010826 00 00       	    dc      0
010828 54 0A       	    dc      DisplayString  ; 0x14
01082A 10 0B       	    dc      PRTNUM         ; 0x15
01082C D0 0A       	    dc      DisplayStringCRLF    ; 0x16
01082E D4 09       	    dc      DisplayWord    ; 0x17
010830 E8 09       	    dc      DisplayHalf    ; 0x18
010832 FC 09       	    dc      DisplayCharHex ; 0x19
010834 10 0A       	    dc      DisplayByte    ; 0x1A
010836 84 0A       	    dc      DisplayString16  ; 0x1B
010838 00 00       	    dc      0
01083A 00 00       	    dc      0
01083C 00 00       	    dc      0
01083E 00 00       	    dc      0
010840 F4 0F       	    dc      AsciiToScreen    ; 0x20
010842 3C 10       	    dc      ScreenToAscii    ; 0x21
010844 BC 0B       	    dc      SetCurrAttr      ; 0x22
010846 AC 0B       	    dc      GetCurrAttr      ; 0x23
                	    
                	    
                	                    
                	    align   4                	
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	LockVideoBIOS:
010848 E7 EF 01 00 	    push    lr
01084C E7 E0 01 00 	    push    r1
010850 FC 00 00 00 	    ldi     r1,#VideoBIOS_sema
010854 0A 10 10 A8 
010858 39 9B 07 00 	    bsr     LockSema
01085C 57 1F 10 00 	    pop     r1
010860 3B FF 11 00 	    rts
UnlockVideoBIOS:
010864 E7 EF 01 00 	    push    lr
010868 E7 E0 01 00 	    push    r1
01086C FC 00 00 00 	    lea     r1,VideoBIOS_sema
010870 47 10 10 A8 
010874 B9 A0 07 00 	    bsr     UnlockSema
010878 57 1F 10 00 	    pop     r1
01087C 3B FF 11 00 	    rts

                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	VideoBIOSCall:
010880 46 EC 11 05 	    lw      sp,TCB_BIOS_Stack[tr]
010884 E7 EF 01 00 	    push    lr
010888 39 F8 FF FF 	    bsr     LockVideoBIOS
01088C 67 E5 01 00 	    push    r10
010890 02 A0 12 3E 	    mfspr   r10,epc             ; update the return address
010894 14 A5 08 00 	    addui   r10,r10,#4
010898 02 05 12 3C 	    mtspr   epc,r10
01089C 06 A3 46 00 	    cmp     r10,r6,#MAX_VIDEO_BIOS_CALL
0108A0 3D 25 1A 00 	    bgt     r10,.0003
0108A4 7C 01 00 00 	    lea     r10,VideoBIOS_FuncTable
0108A8 47 A0 00 10 
0108AC 4B A5 4C 00 	    lcu     r10,[r10+r6*2]
0108B0 3D 05 16 00 	    beq     r10,.0005
0108B4 7C 01 00 00 	    or      r10,r10,#VideoBIOSCall & 0xFFFFFFFFFFFF0000    ; recover high order bits
0108B8 0D A5 00 00 
0108BC 3C F5 01 00 	    jsr     [r10]
                	.0004:
0108C0 3F 00 00 00 	    nop
0108C4 39 F4 FF FF 	    bsr     UnlockVideoBIOS
0108C8 57 AF 10 00 	    pop     r10
0108CC 57 FF 11 00 	    pop     lr
0108D0 02 E0 3D 6E 	    rte
                	.0003:
0108D4 0A 20 02 00 	    ldi     r2,#E_BadFuncno
0108D8 3A FD FF FF 	    bra     .0004
                	.0005:
0108DC 0A 20 06 00 	    ldi     r2,#E_Unsupported
0108E0 3A FC FF FF 	    bra     .0004
                	
                	;------------------------------------------------------------------------------
                	; Display a character with a specific attribute.
                	;------------------------------------------------------------------------------
                	
                	DispCharAttr:
0108E4 E7 EF 01 00 	    push    lr
0108E8 E7 E1 01 00 	    push    r3
0108EC 67 E2 01 00 	    push    r4
0108F0 E7 E2 01 00 	    push    r5
0108F4 82 40 00 1A 	    mov     r4,r1
0108F8 B9 09 01 00 	    bsr     GetJCBPtr
0108FC 82 50 00 1A 	    mov     r5,r1
010900 C4 32 28 08 	    lh      r3,JCB_NormAttr[r5]
010904 E7 E1 01 00 	    push    r3
010908 E2 22 28 08 	    sh      r2,JCB_NormAttr[r5]
01090C 02 12 00 1A 	    mov     r1,r4
010910 B9 A7 01 00 	    bsr     OutChar
010914 57 3F 10 00 	    pop     r3
010918 E2 32 28 08 	    sh      r3,JCB_NormAttr[r5]    ; restore normal attribute
01091C 57 5F 10 00 	    pop     r5
010920 57 4F 10 00 	    pop     r4
010924 57 3F 10 00 	    pop     r3
010928 3B FF 11 00 	    rts

                	
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	                                                                               
                	HomeCursor:
01092C E7 EF 01 00 	    push    lr
010930 E7 E0 01 00 	    push    r1
010934 67 E1 01 00 	    push    r2
010938 B9 01 01 00 	    bsr     GetJCBPtr
01093C E0 00 18 08 	    sb      r0,JCB_CursorRow[r1]
010940 E0 00 1A 08 	    sb      r0,JCB_CursorCol[r1]
010944 7C C0 00 00 	    lw      r2,IOFocusNdx
010948 46 20 50 00 
01094C 82 10 04 0C 	    cmp     r1,r1,r2
010950 BD 10 06 00 	    bne     r1,.0001
010954 7C DA FF 00 		sc	    r0,TEXTREG+TEXT_CURPOS+$FFD00000
010958 61 00 58 00 
                	.0001:
01095C 57 2F 10 00 	    pop     r2
010960 57 1F 10 00 	    pop     r1
010964 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	                                                                               
                	ClearScreen:
010968 E7 EF 01 00 	    push    lr
01096C E7 E0 01 00 	    push	r1
010970 67 E1 01 00 	    push    r2
010974 E7 E1 01 00 	    push    r3
010978 67 E2 01 00 	    push    r4
01097C 7C DA FF 00 		lbu	    r1,TEXTREG+TEXT_COLS+$FFD00000
010980 41 10 00 00 
010984 7C DA FF 00 		lbu	    r2,TEXTREG+TEXT_ROWS+$FFD00000
010988 41 20 08 00 
01098C 02 41 02 2E 		mulu	r4,r2,r1
010990 B9 41 00 00 		bsr     GetScreenLocation
010994 82 30 00 1A 		mov     r3,r1
010998 0A 10 40 00 		ldi		r1,#' '
01099C 39 CB 00 00 		bsr		AsciiToScreen
0109A0 E7 E0 01 00 		push    r1
0109A4 39 41 00 00 		bsr     GetCurrAttr
0109A8 82 20 00 1A 		mov     r2,r1
0109AC 57 1F 10 00 		pop     r1
0109B0 82 10 04 1A 		or		r1,r1,r2
                	.cs1:
0109B4 EA 11 88 00 	    sh	    r1,[r3+r4*4]
0109B8 15 42 02 00 	    subui   r4,r4,#1
0109BC 3D 12 FC FF 		bne	    r4,.cs1
0109C0 57 4F 10 00 		pop     r4
0109C4 57 3F 10 00 		pop     r3
0109C8 57 2F 10 00 		pop     r2
0109CC 57 1F 10 00 		pop     r1
0109D0 3B FF 11 00 	    rts

                	;------------------------------------------------------------------------------
                	; Display the word in r1
                	;------------------------------------------------------------------------------
                	
                	DisplayWord:
0109D4 E7 EF 01 00 	    push    lr
0109D8 82 10 40 74 		rol	    r1,r1,#32
0109DC B9 01 00 00 		bsr		DisplayHalf
0109E0 82 10 40 74 		rol	    r1,r1,#32
0109E4 57 FF 11 00 	    pop     lr
                	
                	;------------------------------------------------------------------------------
                	; Display the half-word in r1
                	;------------------------------------------------------------------------------
                	
                	DisplayHalf:
0109E8 E7 EF 01 00 	    push    lr
0109EC 82 10 20 76 		ror		r1,r1,#16
0109F0 B9 01 00 00 		bsr		DisplayCharHex
0109F4 82 10 20 74 		rol		r1,r1,#16
0109F8 57 FF 11 00 	    pop     lr
                	
                	;------------------------------------------------------------------------------
                	; Display the char in r1
                	;------------------------------------------------------------------------------
                	
                	DisplayCharHex:
0109FC E7 EF 01 00 	    push    lr
010A00 82 10 10 76 		ror		r1,r1,#8
010A04 B9 01 00 00 		bsr		DisplayByte
010A08 82 10 10 74 		rol		r1,r1,#8
010A0C 57 FF 11 00 	    pop     lr
                	
                	;------------------------------------------------------------------------------
                	; Display the byte in r1
                	;------------------------------------------------------------------------------
                	
                	DisplayByte:
010A10 E7 EF 01 00 	    push    lr
010A14 82 10 08 76 		ror		r1,r1,#4
010A18 B9 01 00 00 		bsr		DisplayNybble
010A1C 82 10 08 74 		rol		r1,r1,#4
010A20 57 FF 11 00 		pop     lr
                	 
                	;------------------------------------------------------------------------------
                	; Display nybble in r1
                	;------------------------------------------------------------------------------
                	
                	DisplayNybble:
010A24 E7 EF 01 00 	    push    lr
010A28 E7 E0 01 00 		push	r1
010A2C 67 E1 01 00 		push    r2
010A30 8C 10 1E 00 		and		r1,r1,#$0F
010A34 94 10 60 00 		addui	r1,r1,#'0'
010A38 96 20 74 00 		cmpu	r2,r1,#'9'+1
010A3C 3D 41 04 00 		blt		r2,.0001
010A40 94 10 0E 00 		addui	r1,r1,#7
                	.0001:
010A44 39 81 01 00 		bsr		OutChar
010A48 57 2F 10 00 		pop     r2
010A4C 57 1F 10 00 		pop		r1
010A50 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Display a string pointer to string in r1.
                	;------------------------------------------------------------------------------
                	
                	DisplayString:
010A54 E7 EF 01 00 	    push    lr
010A58 E7 E0 01 00 		push	r1
010A5C 67 E1 01 00 		push    r2
010A60 82 20 00 1A 		mov		r2,r1
                	.dm2:
010A64 41 11 00 00 		lbu		r1,[r2]
010A68 14 21 02 00 		addui   r2,r2,#1	; increment text pointer
010A6C BD 00 06 00 		beq		r1,.dm1
010A70 B9 7B 01 00 		bsr		OutChar
010A74 3A FE FF FF 		bra		.dm2
                	.dm1:
010A78 57 2F 10 00 		pop		r2
010A7C 57 1F 10 00 	    pop     r1
010A80 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Display a string pointer to string in r1 using 16 bit characters.
                	;------------------------------------------------------------------------------
                	
                	DisplayString16:
010A84 E7 EF 01 00 	    push    lr
010A88 E7 E0 01 00 		push	r1
010A8C 67 E1 01 00 		push    r2
010A90 0A 20 6E 00 		ldi     r2,#55
010A94 7C DC FF 00 		sb      r2,LEDS
010A98 60 20 00 0C 
010A9C 82 20 00 1A 		mov		r2,r1
                	.dm2:
010AA0 43 11 00 00 		lcu		r1,[r2]
010AA4 14 21 04 00 		addui   r2,r2,#2	; increment text pointer
010AA8 BD 00 0E 00 		beq		r1,.dm1
010AAC 8C 10 FE 01 		and     r1,r1,#$FF
010AB0 B9 73 01 00 		bsr		OutChar
010AB4 0A 10 70 00 		ldi     r1,#56
010AB8 7C DC FF 00 		sb      r1,LEDS
010ABC 60 10 00 0C 
010AC0 3A FC FF FF 		bra		.dm2
                	.dm1:
010AC4 57 2F 10 00 		pop		r2
010AC8 57 1F 10 00 	    pop     r1
010ACC 3B FF 11 00 		rts

                	DisplayStringCRLF:
010AD0 E7 EF 01 00 	    push    lr
010AD4 39 F0 FF FF 		bsr		DisplayString
010AD8 3A 01 00 00 		bra     CRLF1
                	OutCRLF:
                	CRLF:
010ADC E7 EF 01 00 	    push    lr
                	CRLF1:
010AE0 E7 E0 01 00 		push	r1
010AE4 0A 10 1A 00 		ldi		r1,#CR
010AE8 B9 6C 01 00 		bsr		OutChar
010AEC 0A 10 14 00 		ldi		r1,#LF
010AF0 B9 6B 01 00 		bsr		OutChar
010AF4 57 1F 10 00 		pop		r1
010AF8 3B FF 11 00 		rts

                	
                	DispCharQ:
010AFC E7 EF 01 00 	    push    lr
010B00 B9 9E 00 00 		bsr		AsciiToScreen
010B04 E1 11 00 00 		sc		r1,[r3]
010B08 84 31 08 00 		add		r3,r3,#4
010B0C 3B FF 11 00 	    rts

                	;------------------------------------------------------------------------------
                	; 'PRTNUM' prints the 64 bit number in r1, leading blanks are added if
                	; needed to pad the number of spaces to the number in r2.
                	; However, if the number of digits is larger than the no. in
                	; r2, all digits are printed anyway. Negative sign is also
                	; printed and counted in, positive sign is not.
                	;
                	; r1 = number to print
                	; r2 = number of digits
                	; Register Usage
                	;	r5 = number of padding spaces
                	;------------------------------------------------------------------------------
                	PRTNUM:
010B10 E7 EF 01 00 	    push    lr
010B14 E7 E1 01 00 		push	r3
010B18 E7 E2 01 00 		push	r5
010B1C 67 E3 01 00 		push	r6
010B20 E7 E3 01 00 		push	r7
010B24 0A 70 78 22 		ldi		r7,#NUMWKA	; r7 = pointer to numeric work area
010B28 82 60 00 1A 		mov		r6,r1		; save number for later
010B2C 02 51 00 1A 		mov		r5,r2		; r5 = min number of chars
010B30 BD 30 06 00 		bge		r1,PN2			; is it negative? if not
010B34 02 10 02 2A 		subu	r1,r0,r1	; else make it positive
010B38 95 52 02 00 		subui   r5,r5,#1	; one less for width count
                	PN2:
                	;	ldi		r3,#10
                	PN1:
010B3C 89 20 14 00 		mod		r2,r1,#10	; r2 = r1 mod 10
010B40 88 10 14 00 		div		r1,r1,#10	; r1 /= 10 divide by 10
010B44 04 21 60 00 		add		r2,r2,#'0'	; convert remainder to ascii
010B48 E0 23 00 00 		sb		r2,[r7]		; and store in buffer
010B4C 94 73 02 00 		addui   r7,r7,#1
010B50 95 52 02 00 		subui   r5,r5,#1	; decrement width
010B54 BD 10 F4 FF 		bne		r1,PN1
                	PN6:
010B58 BD 52 08 00 		ble		r5,PN4		; test pad count, skip padding if not needed
                	PN3:
010B5C 39 BA 00 00 		bsr     DisplaySpace	; display the required leading spaces
010B60 95 52 02 00 		subui   r5,r5,#1
010B64 BD 12 FC FF 		bne		r5,PN3
                	PN4:
010B68 3D 33 06 00 		bge		r6,PN5		; is number negative?
010B6C 0A 10 5A 00 		ldi		r1,#'-'		; if so, display the sign
010B70 B9 5B 01 00 		bsr		OutChar
                	PN5:
010B74 95 73 02 00 	    subui   r7,r7,#1
010B78 C0 13 00 00 		lb		r1,[r7]		; now unstack the digits and display
010B7C 39 5A 01 00 		bsr		OutChar
010B80 86 13 78 22 		cmp		r1,r7,#NUMWKA
010B84 BD 20 F8 FF 		bgt		r1,PN5
                	PNRET:
010B88 57 7F 10 00 		pop		r7
010B8C 57 6F 10 00 		pop		r6
010B90 57 5F 10 00 		pop		r5
010B94 57 3F 10 00 		pop		r3
010B98 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Returns:
                	; r1 = pointer to screen from JCB. This may be either the real screen or
                	;      the virtual screen buffer.
                	;------------------------------------------------------------------------------
                	
                	GetScreenLocation:
010B9C E7 EF 01 00 	    push    lr
010BA0 B9 B4 00 00 	    bsr     GetJCBPtr
010BA4 C6 10 D0 07 	    lw      r1,JCB_pVidMem[r1]
010BA8 3B FF 11 00 		rts

                	GetCurrAttr:
010BAC E7 EF 01 00 	    push    lr
010BB0 B9 B2 00 00 	    bsr     GetJCBPtr
010BB4 C5 10 28 08 		lhu		r1,JCB_NormAttr[r1]
010BB8 3B FF 11 00 		rts
SetCurrAttr:
010BBC E7 EF 01 00 	    push    lr
010BC0 67 E1 01 00 	    push    r2
010BC4 82 20 00 1A 	    mov     r2,r1
010BC8 B9 AF 00 00 	    bsr     GetJCBPtr
010BCC E2 20 28 08 	    sh      r2,JCB_NormAttr[r1]
010BD0 57 2F 10 00 	    pop     r2
010BD4 3B FF 11 00 	    rts

                	;------------------------------------------------------------------------------
                	; Update the cursor position in the text controller.
                	;------------------------------------------------------------------------------
                	
                	UpdateCursorPos:
010BD8 E7 EF 01 00 	    push    lr
010BDC E7 E0 01 00 		push	r1
010BE0 67 E1 01 00 		push    r2
010BE4 E7 E1 01 00 		push    r3
010BE8 67 E2 01 00 		push    r4
010BEC 39 AB 00 00 		bsr     GetJCBPtr
010BF0 7C C0 00 00 		lw      r3,IOFocusNdx
010BF4 46 30 50 00 
010BF8 82 31 02 0C 		cmp     r3,r3,r1
010BFC BD 11 16 00 		bne     r3,.0001
010C00 C1 30 18 08 		lbu		r3,JCB_CursorRow[r1]
010C04 8C 31 7E 00 		and		r3,r3,#$3f
010C08 7C DA FF 00 		lbu	    r2,TEXTREG+TEXT_COLS+$FFD00000
010C0C 41 20 00 00 
010C10 02 21 06 2E 		mulu	r2,r2,r3
010C14 C1 30 1A 08 		lbu		r3,JCB_CursorCol[r1]
010C18 8C 31 FE 00 		and		r3,r3,#$7f
010C1C 02 21 06 28 		addu	r2,r2,r3
010C20 7C DA FF 00 		sc	    r2,TEXTREG+TEXT_CURPOS+$FFD00000
010C24 61 20 58 00 
                	.0001:
010C28 57 4F 10 00 		pop		r4
010C2C 57 3F 10 00 		pop     r3
010C30 57 2F 10 00 	    pop     r2
010C34 57 1F 10 00 	    pop     r1
010C38 3B FF 11 00 	    rts
	
                	;------------------------------------------------------------------------------
                	; Compute the screen address given the cursor row and column. While we're at
                	; it update the cursor position in the text controller.
                	;------------------------------------------------------------------------------
                	
                	CalcScreenLoc:
010C3C E7 EF 01 00 	    push    lr
010C40 67 E1 01 00 		push	r2
010C44 E7 E1 01 00 		push    r3
010C48 67 E2 01 00 		push    r4
010C4C 39 9F 00 00 		bsr     GetJCBPtr
010C50 C1 30 18 08 		lbu		r3,JCB_CursorRow[r1]
010C54 8C 31 7E 00 		and		r3,r3,#$3f
010C58 7C DA FF 00 		lbu	    r2,TEXTREG+TEXT_COLS+$FFD00000
010C5C 41 20 00 00 
010C60 02 21 06 2E 		mulu	r2,r2,r3
010C64 C1 30 1A 08 		lbu		r3,JCB_CursorCol[r1]
010C68 8C 31 FE 00 		and		r3,r3,#$7f
010C6C 02 21 06 28 		addu	r2,r2,r3
010C70 7C C0 00 00 	    lw      r3,IOFocusNdx
010C74 46 30 50 00 
010C78 82 30 06 0C 	    cmp     r3,r1,r3
010C7C BD 11 06 00 	    bne     r3,.0001
010C80 7C DA FF 00 		sc	    r2,TEXTREG+TEXT_CURPOS+$FFD00000
010C84 61 20 58 00 
                	.0001:
010C88 B9 E2 FF FF 		bsr		GetScreenLocation
010C8C 02 21 04 70 		asl		r2,r2,#2
010C90 82 10 04 28 		addu	r1,r1,r2
010C94 57 4F 10 00 		pop		r4
010C98 57 3F 10 00 		pop     r3
010C9C 57 2F 10 00 	    pop     r2
010CA0 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Display a character on-screen.
                	;------------------------------------------------------------------------------
                	
                	DisplayChar:
010CA4 E7 EF 01 00 	    push    lr
010CA8 E7 E0 01 00 		push	r1
010CAC 67 E1 01 00 	    push    r2
010CB0 E7 E1 01 00 	    push    r3
010CB4 67 E2 01 00 	    push    r4
010CB8 E7 E2 01 00 	    push    r5
010CBC 8C 10 FE 01 		and		r1,r1,#$FF
010CC0 86 20 1A 00 		cmp		r2,r1,#'\r'
010CC4 3D 01 54 00 		beq		r2,.docr
010CC8 86 20 22 01 		cmp		r2,r1,#$91		; cursor right ?
010CCC 3D 01 58 00 		beq		r2,.doCursorRight
010CD0 86 20 20 01 		cmp		r2,r1,#$90		; cursor up ?
010CD4 3D 01 64 00 		beq		r2,.doCursorUp
010CD8 86 20 26 01 		cmp		r2,r1,#$93		; cursor left ?
010CDC 3D 01 6C 00 		beq		r2,.doCursorLeft
010CE0 86 20 24 01 		cmp		r2,r1,#$92		; cursor down ?
010CE4 3D 01 74 00 		beq		r2,.doCursorDown
010CE8 86 20 28 01 		cmp		r2,r1,#$94		; cursor home ?
010CEC 3D 01 7E 00 		beq		r2,.doCursorHome
010CF0 86 20 32 01 		cmp		r2,r1,#$99		; delete ?
010CF4 3D 01 88 00 		beq		r2,.doDelete
010CF8 86 20 10 00 		cmp		r2,r1,#CTRLH	; backspace ?
010CFC 3D 01 8E 00 		beq		r2,.doBackspace
010D00 86 20 14 00 		cmp		r2,r1,#'\n'	; line feed ?
010D04 3D 01 B8 00 		beq		r2,.doLinefeed
010D08 86 20 12 00 		cmp     r2,r1,#'\t'
010D0C 3D 01 24 00 		beq     r2,.doTab
010D10 82 20 00 1A 		mov		r2,r1
010D14 39 E5 FF FF 		bsr		CalcScreenLoc
010D18 82 30 00 1A 		mov		r3,r1
010D1C 02 11 00 1A 		mov		r1,r2
010D20 B9 5A 00 00 		bsr		AsciiToScreen
010D24 82 20 00 1A 		mov		r2,r1
010D28 B9 D0 FF FF 		bsr		GetCurrAttr
010D2C 82 10 04 1A 		or		r1,r1,r2
010D30 E2 11 00 00 		sh	    r1,[r3]
010D34 39 29 00 00 		bsr		IncCursorPos
                	.dcx4:
010D38 57 5F 10 00 	    pop     r5
010D3C 57 4F 10 00 		pop		r4
010D40 57 3F 10 00 	    pop     r3
010D44 57 2F 10 00 	    pop     r2
010D48 57 1F 10 00 	    pop     r1
010D4C 57 FF 11 00 	    pop     lr
010D50 37 FF 01 00 		rtl
.doTab:
010D54 0A 10 40 00 	    ldi     r1,#' '
010D58 B9 E9 FF FF 	    bsr     DisplayChar
010D5C 39 E9 FF FF 	    bsr     DisplayChar
010D60 B9 E8 FF FF 	    bsr     DisplayChar
010D64 39 E8 FF FF 	    bsr     DisplayChar
010D68 3A FA FF FF 	    bra     .dcx4
                	.docr:
010D6C 39 7B 00 00 	    bsr     GetJCBPtr
010D70 E0 00 1A 08 		sb		r0,JCB_CursorCol[r1]
010D74 B9 CC FF FF 		bsr		UpdateCursorPos
010D78 3A F8 FF FF 		bra     .dcx4
                	.doCursorRight:
010D7C 39 79 00 00 	    bsr     GetJCBPtr
010D80 C1 30 1A 08 		lbu		r3,JCB_CursorCol[r1]
010D84 84 31 02 00 		add		r3,r3,#1
010D88 96 21 A8 00 		cmpu	r2,r3,#TXTCOLS
010D8C 3D 31 04 00 		bge		r2,.dcx7
010D90 E0 30 1A 08 		sb		r3,JCB_CursorCol[r1]
                	.dcx7:
010D94 B9 C8 FF FF 		bsr		UpdateCursorPos
010D98 3A F4 FF FF 		bra     .dcx4
                	.doCursorUp:
010D9C 39 75 00 00 	    bsr     GetJCBPtr
010DA0 C1 30 18 08 		lbu		r3,JCB_CursorRow[r1]
010DA4 BD 01 F8 FF 		beq		r3,.dcx7
010DA8 95 31 02 00 		subui	r3,r3,#1
010DAC E0 30 18 08 		sb		r3,JCB_CursorRow[r1]
010DB0 BA FC FF FF 		bra		.dcx7
                	.doCursorLeft:
010DB4 39 72 00 00 	    bsr     GetJCBPtr
010DB8 C1 30 1A 08 		lbu		r3,JCB_CursorCol[r1]
010DBC BD 01 EC FF 		beq		r3,.dcx7
010DC0 95 31 02 00 		subui	r3,r3,#1
010DC4 E0 30 1A 08 		sb		r3,JCB_CursorCol[r1]
010DC8 BA F9 FF FF 		bra		.dcx7
                	.doCursorDown:
010DCC 39 6F 00 00 	    bsr     GetJCBPtr
010DD0 C1 30 18 08 		lbu		r3,JCB_CursorRow[r1]
010DD4 94 31 02 00 		addui	r3,r3,#1
010DD8 96 21 3E 00 		cmpu	r2,r3,#TXTROWS
010DDC 3D 31 DC FF 		bge		r2,.dcx7
010DE0 E0 30 18 08 		sb		r3,JCB_CursorRow[r1]
010DE4 3A F6 FF FF 		bra		.dcx7
                	.doCursorHome:
010DE8 B9 6B 00 00 	    bsr     GetJCBPtr
010DEC C1 30 1A 08 		lbu		r3,JCB_CursorCol[r1]
010DF0 BD 01 06 00 		beq		r3,.dcx12
010DF4 E0 00 1A 08 		sb		r0,JCB_CursorCol[r1]
010DF8 BA F3 FF FF 		bra		.dcx7
                	.dcx12:
010DFC E0 00 18 08 		sb		r0,JCB_CursorRow[r1]
010E00 BA F2 FF FF 		bra		.dcx7
                	.doDelete:
010E04 39 C7 FF FF 		bsr		CalcScreenLoc
010E08 82 30 00 1A 		mov		r3,r1
010E0C 39 67 00 00 	    bsr     GetJCBPtr
010E10 C1 50 1A 08 		lbu		r5,JCB_CursorCol[r1]
010E14 BA 05 00 00 		bra		.dcx5
                	.doBackspace:
010E18 B9 65 00 00 	    bsr     GetJCBPtr
010E1C C1 30 1A 08 		lbu		r3,JCB_CursorCol[r1]
010E20 BD 01 8C FF 		beq		r3,.dcx4
010E24 95 31 02 00 		subui	r3,r3,#1
010E28 E0 30 1A 08 		sb		r3,JCB_CursorCol[r1]
010E2C E7 E0 01 00 		push    r1
010E30 B9 C1 FF FF 		bsr		CalcScreenLoc
010E34 82 30 00 1A 		mov		r3,r1
010E38 57 1F 10 00 		pop     r1
010E3C C1 50 1A 08 		lbu		r5,JCB_CursorCol[r1]
                	.dcx5:
010E40 C5 21 08 00 		lhu	    r2,4[r3]
010E44 E2 21 00 00 		sh	    r2,[r3]
010E48 94 31 08 00 		addui	r3,r3,#4
010E4C 94 52 02 00 		addui	r5,r5,#1
010E50 96 22 A8 00 		cmpu	r2,r5,#TXTCOLS
010E54 3D 41 F6 FF 		blt		r2,.dcx5
010E58 0A 10 40 00 		ldi		r1,#' '
010E5C 39 33 00 00 		bsr		AsciiToScreen
010E60 45 20 50 22 		lhu		r2,NormAttr
010E64 82 10 04 1A 		or		r1,r1,r2
010E68 95 31 08 00 		subui	r3,r3,#4
010E6C E2 11 00 00 		sh	    r1,[r3]
010E70 3A D9 FF FF 		bra		.dcx4
                	.doLinefeed:
010E74 B9 07 00 00 		bsr		IncCursorRow
010E78 3A D8 FF FF 		bra		.dcx4
                	
                	
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	IncCursorPos:
010E7C E7 EF 01 00 	    push    lr
010E80 E7 E0 01 00 		push	r1
010E84 67 E1 01 00 	    push    r2
010E88 E7 E1 01 00 	    push    r3
010E8C 67 E2 01 00 	    push    r4
010E90 B9 56 00 00 	    bsr     GetJCBPtr
010E94 C1 30 1A 08 		lbu		r3,JCB_CursorCol[r1]
010E98 94 31 02 00 		addui	r3,r3,#1
010E9C E0 30 1A 08 		sb		r3,JCB_CursorCol[r1]
010EA0 96 21 A8 00 		cmpu	r2,r3,#TXTCOLS
010EA4 3D 41 22 00 		blt		r2,icc1
010EA8 E0 00 1A 08 		sb		r0,JCB_CursorCol[r1]
010EAC BA 03 00 00 		bra		icr1
                	IncCursorRow:
010EB0 E7 EF 01 00 	    push    lr
010EB4 E7 E0 01 00 		push	r1
010EB8 67 E1 01 00 	    push    r2
010EBC E7 E1 01 00 	    push    r3
010EC0 67 E2 01 00 	    push    r4
010EC4 39 50 00 00 	    bsr     GetJCBPtr
                	icr1:
010EC8 C1 30 18 08 		lbu		r3,JCB_CursorRow[r1]
010ECC 94 31 02 00 		addui	r3,r3,#1
010ED0 E0 30 18 08 		sb		r3,JCB_CursorRow[r1]
010ED4 96 21 3E 00 		cmpu	r2,r3,#TXTROWS
010ED8 3D 41 08 00 		blt		r2,icc1
010EDC 0A 20 3C 00 		ldi		r2,#TXTROWS-1
010EE0 E0 20 18 08 		sb		r2,JCB_CursorRow[r1]
010EE4 B9 04 00 00 		bsr		ScrollUp
                	icc1:
010EE8 3F 00 00 00 	    nop
010EEC 3F 00 00 00 	    nop
010EF0 39 9D FF FF 		bsr		UpdateCursorPos
010EF4 57 4F 10 00 		pop		r4
010EF8 57 3F 10 00 		pop     r3
010EFC 57 2F 10 00 	    pop     r2
010F00 57 1F 10 00 	    pop     r1
010F04 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	ScrollUp:
010F08 E7 EF 01 00 	    push    lr
010F0C E7 E0 01 00 		push	r1
010F10 67 E1 01 00 	    push    r2
010F14 E7 E1 01 00 	    push    r3
010F18 E7 E2 01 00 	    push    r5
010F1C 67 E3 01 00 		push	r6
010F20 7C DA FF 00 		lbu	    r1,TEXTREG+TEXT_COLS+$FFD00000
010F24 41 10 00 00 
010F28 7C DA FF 00 		lbu	    r2,TEXTREG+TEXT_ROWS+$FFD00000
010F2C 41 20 08 00 
010F30 15 21 02 00 		subui	r2,r2,#1
010F34 82 60 04 2E 		mulu	r6,r1,r2
010F38 B9 8C FF FF 		bsr     GetScreenLocation
010F3C 82 20 00 1A 		mov     r2,r1
010F40 14 21 A0 02 		addui   r2,r2,#TXTCOLS*4
010F44 0A 30 00 00 		ldi		r3,#0
                	.0001:
010F48 4C 51 86 00 		lh	    r5,[r2+r3*4]
010F4C EA 50 86 00 		sh	    r5,[r1+r3*4]
010F50 94 31 02 00 		addui	r3,r3,#1
010F54 15 63 02 00 		subui   r6,r6,#1
010F58 3D 13 F8 FF 		bne	    r6,.0001
010F5C 7C DA FF 00 		lbu	    r1,TEXTREG+TEXT_ROWS+$FFD00000
010F60 41 10 08 00 
010F64 95 10 02 00 		subui	r1,r1,#1
010F68 39 04 00 00 		bsr		BlankLine
010F6C 57 6F 10 00 		pop		r6
010F70 57 5F 10 00 		pop		r5
010F74 57 3F 10 00 	    pop     r3
010F78 57 2F 10 00 	    pop     r2
010F7C 57 1F 10 00 	    pop     r1
010F80 57 FF 11 00 		pop     lr
010F84 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; Blank out a line on the screen.
                	;
                	; Parameters:
                	;	r1 = line number to blank out
                	;------------------------------------------------------------------------------
                	
                	BlankLine:
010F88 E7 EF 01 00 	    push    lr
010F8C E7 E0 01 00 		push	r1
010F90 67 E1 01 00 	    push    r2
010F94 E7 E1 01 00 	    push    r3
010F98 67 E2 01 00 	    push    r4
010F9C 7C DA FF 00 	    lbu     r2,TEXTREG+TEXT_COLS+$FFD00000
010FA0 41 20 00 00 
010FA4 02 31 02 2E 		mulu	r3,r2,r1
                	;	subui	r2,r2,#1		; r2 = #chars to blank - 1
010FA8 82 31 04 70 		asl		r3,r3,#2
010FAC 39 7E FF FF 		bsr     GetScreenLocation
010FB0 82 31 02 28 		addu	r3,r3,r1
010FB4 0A 10 40 00 		ldi		r1,#' '
010FB8 B9 07 00 00 		bsr		AsciiToScreen
010FBC E7 E0 01 00 		push    r1
010FC0 B9 7D FF FF 		bsr     GetCurrAttr
010FC4 82 40 00 1A 		mov     r4,r1
010FC8 57 1F 10 00 		pop     r1
010FCC 82 10 08 1A 		or		r1,r1,r4
                	.0001:
010FD0 EA 11 84 00 		sh	    r1,[r3+r2*4]
010FD4 15 21 02 00 		subui   r2,r2,#1
010FD8 3D 11 FC FF 		bne	    r2,.0001
010FDC 57 4F 10 00 		pop		r4
010FE0 57 3F 10 00 	    pop     r3
010FE4 57 2F 10 00 	    pop     r2
010FE8 57 1F 10 00 	    pop     r1
010FEC 57 FF 11 00 		pop     lr
010FF0 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; Convert ASCII character to screen display character.
                	;------------------------------------------------------------------------------
                	
                	AsciiToScreen:
010FF4 67 E1 01 00 	    push    r2
010FF8 86 20 B6 00 	    cmp     r2,r1,#$5B          ; [
010FFC 3D 01 18 00 	    beq     r2,.00003
011000 86 20 BA 00 	    cmp     r2,r1,#$5D          ; ]
011004 3D 01 18 00 	    beq     r2,.00004
011008 8C 10 FE 01 		and		r1,r1,#$FF
01100C 8D 10 00 02 		or		r1,r1,#$100
011010 8C 20 40 00 		and		r2,r1,#%00100000	; if bit 5 or 6 isn't set
011014 3D 01 08 00 		beq		r2,.00001
011018 8C 20 80 00 		and		r2,r1,#%01000000
01101C 3D 01 04 00 		beq		r2,.00001
011020 8C 10 3E 03 		and		r1,r1,#%110011111
                	.00001:
011024 57 2F 10 00 	    pop     r2
011028 37 FF 01 00 		rtl
.00003:
01102C 0A 10 36 02 	    ldi     r1,#$11B
011030 BA FE FF FF 	    bra     .00001
                	.00004:
011034 0A 10 3A 02 	    ldi     r1,#$11D
011038 BA FD FF FF 	    bra     .00001
                	
                	;------------------------------------------------------------------------------
                	; Convert screen display character to ascii.
                	;------------------------------------------------------------------------------
                	
                	ScreenToAscii:
01103C 67 E1 01 00 	    push    r2
011040 8C 10 FE 01 		and		r1,r1,#$FF
011044 86 20 36 00 	    cmp     r2,r1,#$1B          ; fix up brackets
011048 3D 41 08 00 	    blt     r2,.0001
01104C 86 20 3A 00 	    cmp     r2,r1,#$1D
011050 3D 21 04 00 	    bgt     r2,.0001
011054 94 10 80 00 	    addu    r1,r1,#$40
                	.0001:
011058 96 20 36 00 		cmpu	r2,r1,#26+1
01105C 3D 31 04 00 		bge		r2,.stasc1
011060 84 10 C0 00 		add		r1,r1,#$60
                	.stasc1:
011064 57 2F 10 00 	    pop     r2
011068 37 FF 01 00 		rtl

                	CursorOff:
01106C 37 FF 01 00 		rtl
CursorOn:
011070 37 FF 01 00 		rtl

                	SetCursorPos:
011074 E7 EF 01 00 	    push    lr
011078 E7 E1 01 00 	    push    r3
01107C 82 30 00 1A 	    mov     r3,r1
011080 B9 18 00 00 	    bsr     GetJCBPtr
011084 E0 30 18 08 	    sb      r3,JCB_CursorRow[r1]
011088 E0 20 1A 08 	    sb      r2,JCB_CursorCol[r1]
01108C B9 69 FF FF 	    bsr     UpdateCursorPos
011090 82 11 00 1A 	    mov     r1,r3
011094 57 3F 10 00 	    pop     r3
011098 3B FF 11 00 	    rts

                	GetCursorPos:
01109C E7 EF 01 00 	    push    lr
0110A0 B9 14 00 00 	    bsr     GetJCBPtr
0110A4 C1 20 1A 08 	    lbu     r2,JCB_CursorCol[r1]
0110A8 C1 10 18 08 	    lbu     r1,JCB_CursorRow[r1]
0110AC 3B FF 11 00 	    rts
    rts

0110B0 3B FF 11 00 
                	
                	DispStartMsg:
0110B4 E7 EF 01 00 	    push    lr
0110B8 7C 01 00 00 		ldi		r1,#msgStart
0110BC 0A 10 CA 27 
0110C0 B9 32 FF FF 		bsr		DisplayString
0110C4 3B FF 11 00 	    rts

                	   
                	BranchToSelf2:
0110C8 3A 00 00 00 	    bra      BranchToSelf2
                	
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	ROMChecksum:
0110CC E7 EF 01 00 	    push     lr
0110D0 7C 01 00 00 	    ldi      r2,#$10000
0110D4 0A 20 00 00 
0110D8 0A 40 00 00 	    ldi      r4,#0
0110DC 0A 30 00 00 	    ldi      r3,#0
0110E0 0A 50 00 00 	    ldi      r5,#0
                	.0001:
0110E4 4D 31 08 00 	    lhu      r3,[r2+r4]
0110E8 82 52 06 28 	    addu     r5,r5,r3
0110EC 14 42 08 00 	    addui    r4,r4,#4
0110F0 7C 01 00 00 	    cmp      r3,r4,#$10000
0110F4 06 32 00 00 
0110F8 BD 41 F6 FF 	    blt      r3,.0001
0110FC 7C 01 00 00 	    lea      r1,msgROMChecksum
011100 47 10 30 22 
011104 39 2A FF FF 	    bsr      DisplayString
011108 82 12 00 1A 	    mov      r1,r5
01110C B9 1B FF FF 	    bsr      DisplayHalf
011110 B9 39 FF FF 	    bsr      CRLF
011114 3B FF 11 00 	    rts

                	msgROMChecksum:
011118 0D 0A 52 4F 	    db    CR,LF,"ROM Checksum: ",0
01111C 4D 20 43 68 
011120 65 63 6B 73 
011124 75 6D 3A 20 
011128 00          
                	
011129 00 00 00    	    align 
                	 
                	;------------------------------------------------------------------------------
                	; Display a space on the output device.
                	;------------------------------------------------------------------------------
                	
                	DisplaySpace:
01112C E7 EF 01 00 	    push     lr
011130 E7 E0 01 00 	    push     r1
011134 0A 10 40 00 	    ldi      r1,#' '
011138 B9 A2 00 00 	    bsr      OutChar
01113C 57 1F 10 00 	    pop      r1
011140 3B FF 11 00 	    rts

                	GetJCBPtr:
011144 67 E1 01 00 	    push    r2
011148 41 1C 28 04 		lbu     r1,TCB_hJCB[tr]
01114C BD 00 10 00 	    beq     r1,.0001
011150 96 20 66 00 	    cmpu    r2,r1,#NR_JCB
011154 3D 31 0C 00 	    bge     r2,.0001
011158 97 10 00 0A 		mulu    r1,r1,#JCB_Size
01115C 7C C5 00 00 		addui   r1,r1,#JCB_Array
011160 94 10 00 00 
011164 57 2F 10 00 		pop     r2
011168 37 FF 01 00 	    rtl
.0001:
01116C 57 2F 10 00 	    pop     r2
011170 0A 10 80 27 	    ldi     r1,#JCB0
011174 37 FF 01 00 	    rtl 

                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	LockBIOS:
011178 E7 EF 01 00 	    push    lr
01117C E7 E0 01 00 	    push    r1
011180 0A 10 10 27 	    ldi     r1,#BIOS_sema
011184 B9 75 06 00 	    bsr     LockSema
011188 57 1F 10 00 	    pop     r1
01118C 3B FF 11 00 	    rts
UnlockBIOS:
011190 E7 EF 01 00 	    push    lr
011194 E7 E0 01 00 	    push    r1
011198 47 10 10 27 	    lea     r1,BIOS_sema
01119C B9 7B 06 00 	    bsr     UnlockSema
0111A0 57 1F 10 00 	    pop     r1
0111A4 3B FF 11 00 	    rts

                	LockBIOS1:
0111A8 E7 EF 01 00 	    push    lr
0111AC E7 E0 01 00 	    push    r1
0111B0 7C C0 00 00 	    ldi     r1,#BIOS1_sema
0111B4 0A 10 30 04 
0111B8 39 6F 06 00 	    bsr     LockSema
0111BC 57 1F 10 00 	    pop     r1
0111C0 3B FF 11 00 	    rts

                	;------------------------------------------------------------------------------
                	; Perform a BIOS call from CPU #1
                	; This routine sets up a structure variable in memory for the primary CPU
                	; to process.
                	;------------------------------------------------------------------------------
                	
                	BIOSCall1:
0111C4 46 EC 11 05 	    lw      sp,TCB_BIOS_Stack[tr]
0111C8 E7 EF 01 00 	    push    lr
0111CC 67 E5 01 00 	    push    r10
0111D0 E7 E5 01 00 	    push    r11
0111D4 02 A0 12 3E 	    mfspr   r10,epc             ;
0111D8 14 A5 08 00 	    addui   r10,r10,#4
0111DC 02 05 12 3C 	    mtspr   epc,r10
0111E0 06 A3 C8 00 	    cmp     r10,r6,#MAX_BIOS_CALL
0111E4 3D 25 42 00 	    bgt     r10,.0003
0111E8 39 F8 FF FF 	    bsr     LockBIOS1
0111EC 63 60 00 00 	    sw      r6,BIOS_op
0111F0 63 10 10 00 	    sw      r1,BIOS_arg1
0111F4 63 20 20 00 	    sw      r2,BIOS_arg2
0111F8 63 30 30 00 	    sw      r3,BIOS_arg3
0111FC 63 40 40 00 	    sw      r4,BIOS_arg4
011200 63 50 50 00 	    sw      r5,BIOS_arg5
011204 63 00 60 00 	    sw      r0,BIOS_resp
011208 63 00 70 00 	    sw      r0,BIOS_stat
01120C 7C C0 00 00 	    lw      r1,BIOS_MbxHandle
011210 46 10 10 00 
011214 0A 20 00 00 	    ldi     r2,#BIOS_op          ;
011218 7C C0 00 00 	    lw      r3,BIOS_RespMbx      ; response mailbox handle
01121C 46 30 20 00 
011220 38 0F 08 00 	    sys     #FMTK_CALL
011224 09 00 00 00 	    dh      9                    ; SendMsg
011228 7C C0 00 00 	    lw      r1,BIOS_RespMbx
01122C 46 10 20 00 
011230 0A 20 FE FF 	    ldi     r2,#-1
011234 38 0F 08 00 	    sys     #FMTK_CALL
011238 0A 00 00 00 	    dh      10                   ; WaitMsg
01123C 86 70 20 00 	    cmp     r7,r1,#E_Timeout
011240 BD 13 06 00 	    bne     r7,.0004
011244 0A 20 04 00 	    ldi     r2,#BIOS_E_Timeout
011248 3A 01 00 00 	    bra     .0002
                	.0004:
01124C 02 11 00 1A 	    mov     r1,r2
                	.0002:
011250 7C C0 00 00 	    sw      r0,BIOS1_sema
011254 63 00 30 04 
011258 57 BF 10 00 	    pop     r11
01125C 57 AF 10 00 	    pop     r10
011260 57 FF 11 00 	    pop     lr
011264 02 E0 3D 6E 	    rte
                	.0003:
011268 0A 20 02 00 	    ldi     r2,#E_BadFuncno
01126C 57 BF 10 00 	    pop     r11
011270 57 AF 10 00 	    pop     r10
011274 57 FF 11 00 	    pop     lr
011278 02 E0 3D 6E 	    rte
                	
                	;------------------------------------------------------------------------------
                	; BIOSCall
                	;
                	; Peform a BIOS function for CPU #0
                	;
                	; Parameters:
                	; r1 = first function argument
                	; r2 = second function argument
                	; r3 = third function argument
                	; r4 = fourth function argument
                	; r5 = fifth function argument
                	; r6 = function
                	;
                	; Returns:
                	; r1 = response from BIOS routine
                	;------------------------------------------------------------------------------
                	
                	BIOSCall:
01127C 46 EC 11 05 	    lw      sp,TCB_BIOS_Stack[tr]
011280 E7 EF 01 00 	    push    lr
011284 B9 DE FF FF 	    bsr     LockBIOS
011288 67 E5 01 00 	    push    r10
01128C 02 A0 12 3E 	    mfspr   r10,epc             ; update the return address
011290 14 A5 08 00 	    addui   r10,r10,#4
011294 02 05 12 3C 	    mtspr   epc,r10
011298 06 A3 C8 00 	    cmp     r10,r6,#MAX_BIOS_CALL
01129C 3D 25 1E 00 	    bgt     r10,.0003
0112A0 7C 01 00 00 	    ldi     r10,#BIOS_FuncTable
0112A4 0A A0 00 01 
0112A8 4B A5 4C 00 	    lcu     r10,[r10+r6*2]
0112AC 7C 01 00 00 	    or      r10,r10,#BIOSCall & 0xFFFFFFFFFFFF0000
0112B0 0D A5 00 00 
0112B4 3C F5 01 00 	    jsr     [r10]
0112B8 7C 00 00 00 	    ldi     r1,#$5678
0112BC 0A 10 F0 AC 
0112C0 7C DC FF 00 	    sc      r1,LEDS
0112C4 61 10 00 0C 
                	.0004:
0112C8 39 D9 FF FF 	    bsr     UnlockBIOS
0112CC 57 AF 10 00 	    pop     r10
0112D0 57 FF 11 00 	    pop     lr
0112D4 02 E0 3D 6E 	    rte
                	.0003:
0112D8 0A 20 02 00 	    ldi     r2,#E_BadFuncno
0112DC BA FD FF FF 	    bra     .0004
                	
                	;------------------------------------------------------------------------------
                	; This task is a BIOS service task.
                	;------------------------------------------------------------------------------
                	
                	BIOSCallTask:
                	    ; Get a mailbox for BIOS calls
0112E0 7C C0 00 00 	    ldi     r1,#BIOS_MbxHandle
0112E4 0A 10 10 00 
0112E8 38 0F 08 00 	    sys     #FMTK_CALL            ; call FMTK AllocMbx function
0112EC 06 00 00 00 	    dh      6
                	.0001:
0112F0 7C C0 00 00 	    lw      r1,BIOS_MbxHandle
0112F4 46 10 10 00 
0112F8 0A 20 FE FF 	    ldi     r2,#-1                ; infinite timeout
0112FC 38 0F 08 00 	    sys     #FMTK_CALL
011300 0A 00 00 00 	    dh      10                    ; call FMTK Waitmsg Function
011304 86 B0 00 00 	    cmp     r11,r1,#E_Ok          ; ignore bad reponses
011308 BD 15 F4 FF 	    bne     r11,.0001
01130C 02 B1 00 1A 	    mov     r11,r2
011310 82 C1 00 1A 	    mov     r12,r3
011314 02 B0 00 1A 	    mov     r11,r0   ; for now
011318 C6 65 00 00 	    lw      r6,BIOS_op[r11]
01131C C6 15 10 00 	    lw      r1,BIOS_arg1[r11]
011320 C6 25 20 00 	    lw      r2,BIOS_arg2[r11]
011324 C6 35 30 00 	    lw      r3,BIOS_arg3[r11]
011328 C6 45 40 00 	    lw      r4,BIOS_arg4[r11]
01132C C6 55 50 00 	    lw      r5,BIOS_arg5[r11]
                	;    sys     #BIOS_CALL
011330 3D 06 E0 FF 	    beq     r12,.0001
011334 E3 15 60 00 	    sw      r1,BIOS_resp[r11]
011338 82 20 00 1A 	    mov     r2,r1                ; r2 = return value from BIOS
01133C 02 16 00 1A 	    mov     r1,r12               ; r1 = mailbox to respond to
011340 0A 30 00 00 	    ldi     r3,#0                ; r3 = not used
011344 38 0F 08 00 	    sys     #FMTK_CALL
011348 08 00 00 00 	    dh      8                    ; PostMsg
01134C BA F4 FF FF 	    bra     .0001        
                	
                	;------------------------------------------------------------------------------
                	; 60 Hz interrupt routine.
                	; Both cpu's will execute this interrupt.
                	;------------------------------------------------------------------------------
                	
                	TickRout:
011350 FC 00 00 00 	    ldi     sp,#CPU0_IRQ_STACK       ; set stack pointer to interrupt processing stack
011354 0A E0 01 10 
011358 E7 EF 01 00 	    push    lr
01135C E7 E0 01 00 	    push    r1
011360 0A 10 06 00 		ldi		r1,#3				; reset the edge sense circuit
011364 7C DC FF 00 		sh		r1,PIC_RSTE
011368 62 10 A8 1F 
01136C 02 10 00 6C 		cpuid   r1,r0,#0
011370 BD 10 04 00 		bne     r1,.0001
011374 39 02 00 00 		bsr     UserTickRout
                	.0001:
011378 57 1F 10 00 		pop     r1
01137C 57 FF 11 00 		pop     lr
011380 02 E0 3F 6E 		rti
                	
                	UserTickRout:
011384 E7 E0 01 00 	    push    r1
011388 7C D0 FF 00 		lh	    r1,TEXTSCR+220
01138C 44 10 B8 01 
011390 94 10 02 00 		addui	r1,r1,#1
011394 7C D0 FF 00 		sh	    r1,TEXTSCR+220
011398 62 10 B8 01 
01139C 7C 02 00 00 		lw      r1,$20000
0113A0 46 10 00 00 
0113A4 7C D0 FF 00 		sh      r1,TEXTSCR+224
0113A8 62 10 C0 01 
0113AC 57 1F 10 00 		pop     r1
0113B0 37 FF 01 00 	    rtl

                	;------------------------------------------------------------------------------
                	; 1024Hz interupt routine. This must be fast. Allows the system time to be
                	; gotten by right shifting by 10 bits.
                	;------------------------------------------------------------------------------
                	
                	Tick1024Rout:
0113B4 FC 00 00 00 	    ldi     sp,#CPU0_IRQ_STACK  ; set stack pointer to interrupt processing stack
0113B8 0A E0 01 10 
0113BC E7 E0 01 00 		push	r1
0113C0 0A 10 04 00 		ldi		r1,#2				; reset the edge sense circuit
0113C4 7C DC FF 00 		sh		r1,PIC_RSTE
0113C8 62 10 A8 1F 
0113CC 64 10 00 22 		inc     Milliseconds
0113D0 57 1F 10 00 		pop		r1
0113D4 02 E0 3F 6E 		rti                         ; restore stack pointer and return
                	
                	;------------------------------------------------------------------------------
                	; GetSystemTime
                	;
                	; Returns 
                	;    r1 = the system time in seconds.
                	;------------------------------------------------------------------------------
                	
                	GetSystemTime:
0113D8 46 10 00 22 	    lw      r1,Milliseconds
0113DC 82 10 14 72 	    lsr     r1,r1,#10
0113E0 37 FF 01 00 	    rtl

                	
0113E4 00          		db	0
                	msgStart:
0113E5 46 49 53 41 		db	"FISA64 test system starting.",0
0113E9 36 34 20 74 
0113ED 65 73 74 20 
0113F1 73 79 73 74 
0113F5 65 6D 20 73 
0113F9 74 61 72 74 
0113FD 69 6E 67 2E 
011401 00          
                	
                	
                	; ============================================================================
                	; Monitor Task
                	; ============================================================================
                	
                	Monitor:
011402 00 00 0A 10 		ldi		r1,#49
011406 62 00       
011408 7C DC FF 00 		sc		r1,LEDS
01140C 61 10 00 0C 
                	;	bsr		ClearScreen
                	;	bsr		HomeCursor
011410 7C 01 00 00 		ldi		r1,#msgMonitorStarted
011414 0A 10 FE 35 
011418 39 D7 FE FF 		bsr		DisplayStringCRLF
01141C 0A 10 66 00 		ldi		r1,#51
011420 7C DC FF 00 		sc		r1,LEDS
011424 61 10 00 0C 
011428 60 00 68 22 		sb		r0,KeybdEcho
01142C 0A 10 80 27 		ldi     r1,#JCB0
011430 E0 00 90 08 		sb      r0,JCB_KeybdEcho[r1]
                		;ldi		r1,#7
                		;ldi		r2,#0
                		;ldi		r3,#IdleTask
                		;ldi		r4,#0
                		;ldi		r5,#0
                		;bsr		StartTask
                	mon1:
011434 0A 10 64 00 		ldi		r1,#50
011438 7C DC FF 00 		sc		r1,LEDS
01143C 61 10 00 0C 
                	;	ldi		sp,#TCBs+TCB_Size-8		; reload the stack pointer, it may have been trashed
011440 7C 00 00 00 		ldi		sp,#MON_STACK
011444 0A E0 01 C0 
011448 02 00 00 6E 		cli
                	.PromptLn:
01144C 39 D2 FE FF 		bsr		CRLF
011450 0A 10 48 00 		ldi		r1,#'$'
011454 39 3F 00 00 		bsr		OutChar
                	.Prompt3:
011458 B9 41 01 00 		bsr		KeybdGetCharNoWait		; KeybdGetCharDirectNB
01145C BD 40 FE FF 		blt	    r1,.Prompt3
011460 86 20 1A 00 		cmp		r2,r1,#CR
011464 3D 01 06 00 		beq		r2,.Prompt1
011468 B9 3C 00 00 		bsr		OutChar
01146C BA FD FF FF 		bra		.Prompt3
                	.Prompt1:
011470 B9 9A FF FF 	    bsr     GetJCBPtr
011474 E0 00 1A 08 		sb		r0,JCB_CursorCol[r1]
011478 B9 F8 FE FF 		bsr		CalcScreenLoc
01147C 82 30 00 1A 		mov		r3,r1
011480 B9 10 00 00 		bsr		MonGetch
011484 86 20 48 00 		cmp		r2,r1,#'$'
011488 3D 11 04 00 		bne		r2,.Prompt2
01148C 39 0F 00 00 		bsr		MonGetch
                	.Prompt2:
011490 86 20 7E 00 		cmp		r2,r1,#'?'
011494 3D 01 30 00 		beq		r2,.doHelp
011498 86 20 86 00 		cmp		r2,r1,#'C'
01149C 3D 01 3A 03 		beq		r2,doCLS
0114A0 86 20 C6 00 		cmp     r2,r1,#'c'
0114A4 3D 01 86 76 		beq     r2,doCS
0114A8 86 20 9A 00 		cmp		r2,r1,#'M'
0114AC 3D 01 68 00 		beq		r2,doDumpmem
0114B0 86 20 8C 00 		cmp		r2,r1,#'F'
0114B4 3D 01 78 00 		beq		r2,doFillmem
0114B8 86 20 DA 00 		cmp		r2,r1,#'m'
0114BC 3D 01 7C 76 		beq		r2,MRTest
0114C0 86 20 A6 00 		cmp		r2,r1,#'S'
0114C4 3D 01 B2 00 		beq		r2,doSDBoot
0114C8 86 20 CE 00 		cmp		r2,r1,#'g'
0114CC 3D 01 74 76 		beq		r2,doRand
0114D0 86 20 CA 00 		cmp		r2,r1,#'e'
0114D4 3D 01 70 76 		beq		r2,eval
0114D8 86 20 94 00 		cmp		r2,r1,#'J'
0114DC 3D 01 BA 00 		beq		r2,doJump
0114E0 86 20 88 00 		cmp		r2,r1,#'D'
0114E4 3D 01 3C 01 		beq		r2,doDate
0114E8 86 20 A8 00 		cmp     r2,r1,#'T'
0114EC 3D 01 58 00 		beq     r2,doDumpTL
0114F0 BA E8 FF FF 		bra     mon1
                	
                	.doHelp:
0114F4 7C 01 00 00 		ldi		r1,#msgHelp
0114F8 0A 10 78 34 
0114FC 39 AB FE FF 		bsr		DisplayString
011500 BA E6 FF FF 		bra     mon1
                	
                	MonGetch:
011504 E7 EF 01 00 	    push    lr
011508 C5 11 00 00 		lhu	    r1,[r3]
01150C 8C 10 FE 03 		andi	r1,r1,#$1FF
011510 84 31 08 00 		add		r3,r3,#4
011514 39 65 FF FF 		bsr		ScreenToAscii
011518 57 FF 11 00 		pop     lr
01151C 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; Ignore blanks in the input
                	; r3 = text pointer
                	; r1 destroyed
                	;------------------------------------------------------------------------------
                	
                	ignBlanks:
011520 E7 EF 01 00 	    push    lr
011524 67 E1 01 00 	    push    r2
                	ignBlanks1:
011528 B9 FB FF FF 		bsr		MonGetch
01152C 86 20 40 00 		cmp		r2,r1,#' '
011530 3D 01 FC FF 		beq		r2,ignBlanks1
011534 85 31 08 00 		sub		r3,r3,#4
011538 57 2F 10 00 		pop     r2
01153C 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	GetTwoParams:
011540 E7 EF 01 00 	    push    lr
011544 B9 FB FF FF 		bsr		ignBlanks
011548 39 86 00 00 		bsr		GetHexNumber	; get start address of dump
01154C 82 20 00 1A 		mov		r2,r1
011550 39 FA FF FF 		bsr		ignBlanks
011554 B9 84 00 00 		bsr		GetHexNumber	; get end address of dump
011558 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Get a range, the end must be greater or equal to the start.
                	;------------------------------------------------------------------------------
                	
                	GetRange:
01155C E7 EF 01 00 	    push    lr
011560 67 E2 01 00 	    push    r4
011564 B9 FB FF FF 		bsr		GetTwoParams
011568 02 41 02 2C 		cmpu	r4,r2,r1
01156C 3D 22 5C 02 		bgt		r4,DisplayErr
011570 57 4F 10 00 		pop     r4
011574 57 FF 11 00 		pop     lr
011578 37 FF 01 00 		rtl

                	doDumpmem:
01157C 39 5E FF FF 		bsr		CursorOff
011580 B9 FB FF FF 		bsr		GetRange
011584 39 AB FE FF 		bsr		CRLF
                	;	bra     mon1
                	.001:
011588 B9 6F 00 00 		bsr		CheckKeys
01158C 39 57 00 00 		bsr		DisplayMemBytes
011590 02 41 02 2C 		cmpu	r4,r2,r1
011594 3D 52 FA FF 		ble		r4,.001
011598 BA D3 FF FF 		bra     mon1
                	
                	doDumpTL:
01159C B9 4E 06 00 	    bsr     DumpTaskList
0115A0 BA D2 FF FF 	    bra     mon1
                	
                	;------------------------------------------------------------------------------
                	; Fill memory
                	;
                	; FB FFD80000 FFD8FFFF r	; fill sprite memory with random bytes
                	;------------------------------------------------------------------------------
                	
                	doFillmem:
0115A4 39 59 FF FF 		bsr		CursorOff
0115A8 B9 EB FF FF 		bsr		MonGetch		; skip over 'B' of "FB"
0115AC 86 20 84 00 		cmp		r2,r1,#'B'
0115B0 3D 01 04 00 		beq		r2,.0004
0115B4 95 31 08 00 		subui	r3,r3,#4		; backup text pointer
                	.0004:
0115B8 B9 F4 FF FF 		bsr		GetRange
0115BC E7 E0 01 00 		push	r1
0115C0 67 E1 01 00 	    push    r2
0115C4 B9 EB FF FF 		bsr		ignBlanks
0115C8 B9 E7 FF FF 		bsr		MonGetch		; check for random fill
0115CC 86 20 E4 00 		cmp		r2,r1,#'r'
0115D0 3D 01 18 00 		beq		r2,.0001
0115D4 95 31 08 00 		subui   r3,r3,#4
0115D8 39 74 00 00 		bsr		GetHexNumber
0115DC 82 30 00 1A 		mov		r3,r1
0115E0 57 2F 10 00 		pop		r2
0115E4 57 1F 10 00 	    pop     r1
                	.0002:
0115E8 B9 63 00 00 		bsr		CheckKeys
0115EC 60 31 00 00 		sb		r3,[r2]
0115F0 14 21 02 00 		addui	r2,r2,#1
0115F4 02 51 02 2C 		cmpu	r5,r2,r1
0115F8 BD 42 F8 FF 		blt		r5,.0002
0115FC 3A C7 FF FF 		bra		mon1
                	.0001:
011600 57 2F 10 00 		pop		r2
011604 57 1F 10 00 	    pop     r1
                	.0003:
011608 B9 5F 00 00 		bsr		CheckKeys
01160C 7C DC FF 00 		lw	    r3,RANDOM_NUM
011610 46 30 00 18 
011614 60 31 00 00 		sb		r3,[r2]
011618 14 21 02 00 		addui	r2,r2,#1
01161C 02 51 02 2C 		cmpu	r5,r2,r1
011620 BD 42 F4 FF 		blt		r5,.0003
011624 3A C2 FF FF 		bra		mon1
                	
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	doSDBoot:
                	;	sub		r3,r3,#4
011628 39 53 DD FF 		bsr		SDInit
01162C BD 10 04 FF 		bne	    r1,mon1
011630 39 52 DD FF 		bsr		SDReadPart
011634 BD 10 00 FF 		bne	    r1,mon1
011638 39 72 DD FF 		bsr		SDReadBoot
01163C BD 10 FC FE 		bne	    r1,mon1
011640 39 71 DD FF 		bsr		loadBootFile
011644 7C 00 00 00 		jmp		mon1
011648 3C 00 1A 8A 
                	
                	OutChar:
01164C 3E 00 10 22 	    jmp     (OutputVec)
                	
                	;------------------------------------------------------------------------------
                	; Jump to subroutine
                	;
                	; J 10000     ; restart system
                	;------------------------------------------------------------------------------
                	
                	doJump:
011650 B9 D6 FF FF 		bsr		MonGetch		; skip over 'S'
011654 B9 D9 FF FF 		bsr		ignBlanks
011658 39 64 00 00 		bsr		GetHexNumber
01165C 63 10 30 22 		sw      r1,jmp_vector
011660 46 F0 F1 21 	    lw      r31,MON_r31
011664 46 E0 E1 21 	    lw      r30,MON_r30
011668 46 D0 D1 21 	    lw      r29,MON_r29
01166C 46 C0 C1 21 	    lw      r28,MON_r28
011670 46 B0 B1 21 	    lw      r27,MON_r27
011674 46 A0 A1 21 	    lw      r26,MON_r26
011678 46 90 91 21 	    lw      r25,MON_r25
                	;   lw      r24,MON_r24    ; r24 is the task register - no need to load
01167C 46 70 71 21 	    lw      r23,MON_r23
011680 46 60 61 21 	    lw      r22,MON_r22
011684 46 50 51 21 	    lw      r21,MON_r21
011688 46 40 41 21 	    lw      r20,MON_r20
01168C 46 30 31 21 	    lw      r19,MON_r19
011690 46 20 21 21 	    lw      r18,MON_r18
011694 46 10 11 21 	    lw      r17,MON_r17
011698 46 00 01 21 	    lw      r16,MON_r16
01169C 46 F0 F0 20 	    lw      r15,MON_r15
0116A0 46 E0 E0 20 	    lw      r14,MON_r14
0116A4 46 D0 D0 20 	    lw      r13,MON_r13
0116A8 46 C0 C0 20 	    lw      r12,MON_r12
0116AC 46 B0 B0 20 	    lw      r11,MON_r11
0116B0 46 A0 A0 20 	    lw      r10,MON_r10
0116B4 46 90 90 20 	    lw      r9,MON_r9
0116B8 46 80 80 20 	    lw      r8,MON_r8
0116BC 46 70 70 20 	    lw      r7,MON_r7
0116C0 46 60 60 20 	    lw      r6,MON_r6
0116C4 46 50 50 20 	    lw      r5,MON_r5
0116C8 46 40 40 20 	    lw      r4,MON_r4
0116CC 46 30 30 20 	    lw      r3,MON_r3
0116D0 46 20 20 20 	    lw      r2,MON_r2
0116D4 46 10 10 20 	    lw      r1,MON_r1
0116D8 3E F0 31 22 	    jsr		(jmp_vector)
0116DC 63 10 10 20 	    sw      r1,MON_r1
0116E0 63 20 20 20 	    sw      r2,MON_r2
0116E4 63 30 30 20 	    sw      r3,MON_r3
0116E8 63 40 40 20 	    sw      r4,MON_r4
0116EC 63 50 50 20 	    sw      r5,MON_r5
0116F0 63 60 60 20 	    sw      r6,MON_r6
0116F4 63 70 70 20 	    sw      r7,MON_r7
0116F8 63 80 80 20 	    sw      r8,MON_r8
0116FC 63 90 90 20 	    sw      r9,MON_r9
011700 63 A0 A0 20 	    sw      r10,MON_r10
011704 63 B0 B0 20 	    sw      r11,MON_r11
011708 63 C0 C0 20 	    sw      r12,MON_r12
01170C 63 D0 D0 20 	    sw      r13,MON_r13
011710 63 E0 E0 20 	    sw      r14,MON_r14
011714 63 F0 F0 20 	    sw      r15,MON_r15
011718 63 00 01 21 	    sw      r16,MON_r16
01171C 63 10 11 21 	    sw      r17,MON_r17
011720 63 20 21 21 	    sw      r18,MON_r18
011724 63 30 31 21 	    sw      r19,MON_r19
011728 63 40 41 21 	    sw      r20,MON_r20
01172C 63 50 51 21 	    sw      r21,MON_r21
011730 63 60 61 21 	    sw      r22,MON_r22
011734 63 70 71 21 	    sw      r23,MON_r23
011738 63 80 81 21 	    sw      r24,MON_r24
01173C 63 90 91 21 	    sw      r25,MON_r25
011740 63 A0 A1 21 	    sw      r26,MON_r26
011744 63 B0 B1 21 	    sw      r27,MON_r27
011748 63 C0 C1 21 	    sw      r28,MON_r28
01174C 63 D0 D1 21 	    sw      r29,MON_r29
011750 63 E0 E1 21 	    sw      r30,MON_r30
011754 63 F0 F1 21 	    sw      r31,MON_r31
011758 BA 9B FF FF 		bra		mon1
                	
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	doDate:
01175C 39 B5 FF FF 		bsr		MonGetch		; skip over 'T'
011760 86 50 84 00 		cmp     r5,r1,#'B'
011764 BD 02 62 00 		beq     r5,doDebug
011768 86 50 82 00 		cmp		r5,r1,#'A'		; look for DAY
01176C BD 02 3C 00 		beq		r5,doDay
011770 86 50 A8 00 		cmp     r5,r1,#'T'
011774 BD 12 46 00 		bne     r5,doDisassem
011778 39 B5 FF FF 		bsr		ignBlanks
01177C 39 B1 FF FF 		bsr		MonGetch
011780 86 50 7E 00 		cmp		r5,r1,#'?'
011784 BD 02 14 00 		beq		r5,.0001
011788 95 31 08 00 		subui	r3,r3,#4
01178C B9 3D 00 00 		bsr		GetHexNumber
011790 60 10 8A 37 		sb		r1,RTCC_BUF+5	; update month
011794 B9 3C 00 00 		bsr		GetHexNumber
011798 60 10 88 37 		sb		r1,RTCC_BUF+4	; update day
01179C B9 3B 00 00 		bsr		GetHexNumber
0117A0 60 10 8C 37 		sb		r1,RTCC_BUF+6	; update year
0117A4 B9 E4 01 00 		bsr		RTCCWritebuf
0117A8 BA 91 FF FF 		bra		mon1
                	.0001:
0117AC B9 DE 01 00 		bsr		RTCCReadbuf
0117B0 B9 65 FE FF 		bsr		CRLF
0117B4 41 10 8A 37 		lbu		r1,RTCC_BUF+5
0117B8 39 4B FE FF 		bsr		DisplayByte
0117BC 0A 10 5E 00 		ldi		r1,#'/'
0117C0 B9 D1 FF FF 		bsr		OutChar
0117C4 41 10 88 37 		lbu		r1,RTCC_BUF+4
0117C8 39 49 FE FF 		bsr		DisplayByte
0117CC 0A 10 5E 00 		ldi		r1,#'/'
0117D0 B9 CF FF FF 		bsr		OutChar
0117D4 41 10 8C 37 		lbu		r1,RTCC_BUF+6
0117D8 39 47 FE FF 		bsr		DisplayByte
0117DC 39 60 FE FF 		bsr		CRLF
0117E0 BA 8A FF FF 		bra		mon1
                	
                	doDay:
0117E4 B9 A7 FF FF 		bsr		ignBlanks
0117E8 39 32 00 00 		bsr		GetHexNumber
0117EC 82 30 00 1A 		mov		r3,r1			; value to write
0117F0 0A 10 DE 00 		ldi		r1,#$6F			; device $6F
0117F4 0A 20 06 00 		ldi		r2,#$03			; register 3
0117F8 39 C3 01 00 		bsr		I2C_WRITE
0117FC 3A 87 FF FF 		bra		mon1
                	
                	doDisassem:
011800 95 31 08 00 	    subui   r3,r3,#4
011804 B9 A3 FF FF 	    bsr     ignBlanks
011808 39 2E 00 00 	    bsr     GetHexNumber
01180C 95 10 40 00 	    subu    r1,r1,#32
011810 E7 E0 01 00 	    push    r1
011814 94 10 40 00 	    addu    r1,r1,#32
011818 E7 E0 01 00 	    push    r1
01181C B9 20 0E 00 	    bsr     disassem20
011820 14 EF 21 00 	    addui   sp,sp,#16
011824 3A 82 FF FF 	    bra     mon1
                	
                	doDebug:
011828 39 9F FF FF 	   bsr   ignBlanks
01182C B9 29 00 00 	   bsr   GetHexNumber
011830 65 E0 01 00 	   push  #0
011834 E7 E0 01 00 	   push  r1
011838 B9 F3 11 00 	   bsr   debugger
01183C 14 EF 21 00 	   addui sp,sp,#16
011840 BA 7E FF FF 	   bra   mon1
                	
                	;------------------------------------------------------------------------------
                	; Display memory pointed to by r2.
                	; destroys r1,r3
                	;------------------------------------------------------------------------------
                	;
                	DisplayMemBytes:
011844 E7 EF 01 00 	    push    lr
011848 E7 E0 01 00 		push	r1
01184C E7 E1 01 00 	    push    r3
011850 67 E2 01 00 	    push    r4
011854 0A 10 7C 00 		ldi		r1,#'>'
011858 B9 BE FF FF 		bsr		OutChar
01185C 0A 10 84 00 		ldi		r1,#'B'
011860 B9 BD FF FF 		bsr		OutChar
011864 0A 10 40 00 		ldi		r1,#' '
011868 B9 BC FF FF 		bsr		OutChar
01186C 02 11 00 1A 		mov		r1,r2
011870 39 2F FE FF 		bsr		DisplayHalf
011874 0A 30 10 00 		ldi		r3,#8
                	.001:
011878 0A 10 40 00 		ldi		r1,#' '
01187C 39 BA FF FF 		bsr		OutChar
011880 41 11 00 00 		lbu		r1,[r2]
011884 B9 31 FE FF 		bsr		DisplayByte
011888 14 21 02 00 		addui	r2,r2,#1
01188C 95 31 02 00 		subui   r3,r3,#1
011890 BD 11 F4 FF 		bne	    r3,.001
011894 0A 10 74 00 		ldi		r1,#':'
011898 B9 B6 FF FF 		bsr		OutChar
01189C 7C 70 0D 00 		ldi		r1,#%110101110_000000100_0000000000	; reverse video
0118A0 0A 10 00 20 
0118A4 62 10 50 22 		sh		r1,NormAttr
0118A8 0A 30 10 00 		ldi		r3,#8
0118AC 15 21 10 00 		subui	r2,r2,#8
                	.002
0118B0 41 11 00 00 		lbu		r1,[r2]
0118B4 96 40 34 00 		cmpu	r4,r1,#26				; convert control characters to '.'
0118B8 3D 32 06 00 		bge		r4,.004
0118BC 0A 10 5C 00 		ldi		r1,#'.'
0118C0 3A 02 00 00 		bra     .003
                	.004:
0118C4 96 40 00 01 		cmpu	r4,r1,#$80				; convert other non-ascii to '.'
0118C8 3D 42 04 00 		blt		r4,.003
0118CC 0A 10 5C 00 		ldi		r1,#'.'
                	.003:
0118D0 B9 AF FF FF 		bsr		OutChar
0118D4 14 21 02 00 		addui	r2,r2,#1
0118D8 95 31 02 00 		subui   r3,r3,#1
0118DC BD 11 EA FF 		bne	    r3,.002
0118E0 FC 26 00 00 		ldi		r1,#%000000100_110101110_0000000000	; normal video
0118E4 0A 10 00 70 
0118E8 62 10 50 22 		sh		r1,NormAttr
0118EC 39 3E FE FF 		bsr		CRLF
0118F0 57 4F 10 00 		pop     r4
0118F4 57 3F 10 00 		pop		r3
0118F8 57 1F 10 00 	    pop     r1
0118FC 57 FF 11 00 	    pop     lr
011900 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; CheckKeys:
                	;	Checks for a CTRLC or a scroll lock during long running dumps.
                	;------------------------------------------------------------------------------
                	
                	CheckKeys:
011904 E7 EF 01 00 	    push    lr
011908 39 02 00 00 		bsr	    CTRLCCheck
01190C B9 07 00 00 		bsr     CheckScrollLock
011910 57 FF 11 00 		pop     lr
011914 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; CTRLCCheck
                	;	Checks to see if CTRL-C is pressed. If so then the current routine is
                	; aborted and control is returned to the monitor.
                	;------------------------------------------------------------------------------
                	
                	CTRLCCheck:
011918 E7 EF 01 00 	    push    lr
01191C E7 E0 01 00 		push	r1
011920 67 E1 01 00 		push    r2
011924 39 A8 00 00 		bsr		KeybdGetCharNoWait
011928 86 20 06 00 		cmp		r2,r1,#CTRLC
01192C 3D 01 0A 00 		beq		r2,.0001
011930 57 2F 10 00 		pop     r2
011934 57 1F 10 00 		pop		r1
011938 57 FF 11 00 		pop     lr
01193C 37 FF 01 00 		rtl
.0001:
011940 14 EF 31 00 		addui	sp,sp,#24
011944 3A 5E FF FF 		bra     mon1
                	
                	;------------------------------------------------------------------------------
                	; CheckScrollLock:
                	;	Check for a scroll lock by the user. If scroll lock is active then tasks
                	; are rescheduled while the scroll lock state is tested in a loop.
                	;------------------------------------------------------------------------------
                	
                	CheckScrollLock:
011948 E7 EF 01 00 	    push    lr
01194C E7 E0 01 00 		push	r1
011950 67 E1 01 00 		push    r2
                	.0002:
011954 43 10 6C 22 		lcu		r1,KeybdLocks
011958 7C 00 00 00 		and		r2,r1,#$4000		; is scroll lock active ?
01195C 8C 20 00 80 
011960 3D 01 04 00 		beq		r2,.0001
                	;	brk		#2*16				; reschedule tasks
011964 3A FE FF FF 		bra     .0002
                	.0001:
011968 57 2F 10 00 	    pop     r2
01196C 57 1F 10 00 		pop		r1
011970 57 FF 11 00 		pop     lr
011974 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; Get a hexidecimal number. Maximum of eight digits.
                	; R3 = text pointer (updated)
                	; R1 = hex number
                	;------------------------------------------------------------------------------
                	;
                	GetHexNumber:
011978 E7 EF 01 00 	    push    lr
01197C 67 E1 01 00 		push	r2
011980 67 E2 01 00 	    push    r4
011984 0A 20 00 00 		ldi		r2,#0
011988 0A 40 20 00 		ldi		r4,#16
                	.gthxn2:
01198C 39 6F FF FF 		bsr		MonGetch
011990 39 05 00 00 		bsr		AsciiToHexNybble
011994 BD 40 0A 00 		bmi		r1,.gthxn1
011998 02 21 08 70 		asl		r2,r2,#4
01199C 02 21 02 1A 		or		r2,r2,r1
0119A0 15 42 02 00 		subui   r4,r4,#1
0119A4 3D 12 F4 FF 	    bne	    r4,.gthxn2
                	.gthxn1:
0119A8 02 11 00 1A 		mov		r1,r2
0119AC 57 4F 10 00 		pop		r4
0119B0 57 2F 10 00 	    pop     r2
0119B4 3B FF 11 00 	    rts

                	;------------------------------------------------------------------------------
                	; Convert ASCII character in the range '0' to '9', 'a' to 'f' or 'A' to 'F'
                	; to a hex nybble.
                	;------------------------------------------------------------------------------
                	;
                	AsciiToHexNybble:
0119B8 67 E1 01 00 	    push    r2
0119BC 96 20 60 00 		cmpu	r2,r1,#'0'
0119C0 3D 41 2C 00 		blt		r2,.gthx3
0119C4 96 20 74 00 		cmpu	r2,r1,#'9'+1
0119C8 3D 31 08 00 		bge		r2,.gthx5
0119CC 95 10 60 00 		subui	r1,r1,#'0'
0119D0 57 2F 10 00 		pop     r2
0119D4 37 FF 01 00 		rtl
.gthx5:
0119D8 96 20 82 00 		cmpu	r2,r1,#'A'
0119DC 3D 41 1E 00 		blt		r2,.gthx3
0119E0 96 20 8E 00 		cmpu	r2,r1,#'F'+1
0119E4 3D 31 0A 00 		bge		r2,.gthx6
0119E8 95 10 82 00 		subui	r1,r1,#'A'
0119EC 94 10 14 00 		addui	r1,r1,#10
0119F0 57 2F 10 00 		pop     r2
0119F4 37 FF 01 00 		rtl
.gthx6:
0119F8 96 20 C2 00 		cmpu	r2,r1,#'a'
0119FC 3D 41 0E 00 		blt		r2,.gthx3
011A00 96 20 F6 00 		cmpu	r2,r1,#'z'+1
011A04 3D 31 0A 00 		bge		r2,.gthx3
011A08 95 10 C2 00 		subui	r1,r1,#'a'
011A0C 94 10 14 00 		addui	r1,r1,#10
011A10 57 2F 10 00 		pop     r2
011A14 37 FF 01 00 		rtl
.gthx3:
011A18 57 2F 10 00 	    pop     r2
011A1C 0A 10 FE FF 		ldi		r1,#-1		; not a hex number
011A20 37 FF 01 00 		rtl

                	DisplayErr:
011A24 7C 01 00 00 		ldi		r1,#msgErr
011A28 0A 10 68 34 
011A2C 39 05 FE FF 		bsr		DisplayString
011A30 BA 40 FF FF 		bra mon1
                	
                	msgErr:
011A34 2A 2A 45 72 		db	"**Err",CR,LF,0
011A38 72 0D 0A 00 
                	
                	msgHelp:
011A3C 3F 20 3D 20 		db		"? = Display Help",CR,LF
011A40 44 69 73 70 
011A44 6C 61 79 20 
011A48 48 65 6C 70 
011A4C 0D 0A       
011A4E 43 4C 53 20 		db		"CLS = clear screen",CR,LF
011A52 3D 20 63 6C 
011A56 65 61 72 20 
011A5A 73 63 72 65 
011A5E 65 6E 0D 0A 
011A62 44 20 3D 20 		db      "D = disassemble",CR,LF
011A66 64 69 73 61 
011A6A 73 73 65 6D 
011A6E 62 6C 65 0D 
011A72 0A          
011A73 44 42 20 3D 		db      "DB = start debugger",CR,LF
011A77 20 73 74 61 
011A7B 72 74 20 64 
011A7F 65 62 75 67 
011A83 67 65 72 0D 
011A87 0A          
011A88 44 54 20 3D 		db		"DT = set/read date",CR,LF
011A8C 20 73 65 74 
011A90 2F 72 65 61 
011A94 64 20 64 61 
011A98 74 65 0D 0A 
011A9C 46 42 20 3D 		db		"FB = fill memory",CR,LF
011AA0 20 66 69 6C 
011AA4 6C 20 6D 65 
011AA8 6D 6F 72 79 
011AAC 0D 0A       
011AAE 4D 42 20 3D 		db		"MB = dump memory",CR,LF
011AB2 20 64 75 6D 
011AB6 70 20 6D 65 
011ABA 6D 6F 72 79 
011ABE 0D 0A       
011AC0 4A 53 20 3D 		db		"JS = jump to code",CR,LF
011AC4 20 6A 75 6D 
011AC8 70 20 74 6F 
011ACC 20 63 6F 64 
011AD0 65 0D 0A    
011AD3 54 20 3D 20 		db	    "T = Dump task list",CR,LF
011AD7 44 75 6D 70 
011ADB 20 74 61 73 
011ADF 6B 20 6C 69 
011AE3 73 74 0D 0A 
011AE7 53 20 3D 20 		db		"S = boot from SD card",CR,LF
011AEB 62 6F 6F 74 
011AEF 20 66 72 6F 
011AF3 6D 20 53 44 
011AF7 20 63 61 72 
011AFB 64 0D 0A    
011AFE 00          		db		0
                	
                	msgMonitorStarted
011AFF 4D 6F 6E 69 		db		"Monitor started.",0
011B03 74 6F 72 20 
011B07 73 74 61 72 
011B0B 74 65 64 2E 
011B0F 00          
                	
                	doCLS:
011B10 39 CB FD FF 		bsr		ClearScreen
011B14 39 C3 FD FF 		bsr		HomeCursor
011B18 BA 23 FF FF 		bra     mon1
                	
                	;------------------------------------------------------------------------------
                	; Get a random number from peripheral device.
                	;------------------------------------------------------------------------------
                	
                	GetRandomNumber:
011B1C 7C DC FF 00 	    lw      r1,$FFDC0C00
011B20 46 10 00 18 
011B24 37 FF 01 00 	    rtl
                
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	; Keyboard processing routines follow.
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	KEYBD_DELAY		EQU		1000
                	
                	KeybdGetCharDirectNB:
011B28 E7 EF 01 00 	    push    lr
011B2C 67 E1 01 00 		push	r2
011B30 02 00 02 6E 		sei
011B34 7C DC FF 00 		lcu		r1,KEYBD
011B38 43 10 00 00 
011B3C FC 00 00 00 		and		r2,r1,#$8000
011B40 8C 20 00 00 
011B44 3D 01 22 00 		beq		r2,.0001
011B48 7C DC FF 00 		lbu		r0,KEYBD+4		; clear keyboard strobe
011B4C 41 00 08 00 
011B50 02 00 00 6E 		cli
011B54 8C 20 00 10 		and		r2,r1,#$800	; is it keydown ?
011B58 3D 11 18 00 		bne	    r2,.0001
011B5C 8C 10 FE 01 		and		r1,r1,#$FF
011B60 41 20 68 22 		lbu		r2,KeybdEcho
011B64 3D 01 0C 00 		beq		r2,.0002
011B68 86 20 1A 00 		cmp		r2,r1,#CR
011B6C 3D 11 06 00 		bne		r2,.0003
011B70 B9 ED FD FF 		bsr		CRLF
011B74 3A 01 00 00 		bra     .0002
                	.0003:
011B78 3E F0 11 22 		jsr		(OutputVec)
                	.0002:
011B7C 57 2F 10 00 		pop		r2
011B80 57 FF 11 00 		pop     lr
011B84 37 FF 01 00 		rtl
.0001:
011B88 02 00 00 6E 		cli
011B8C 0A 10 FE FF 		ldi		r1,#-1
011B90 57 2F 10 00 		pop		r2
011B94 57 FF 11 00 		pop     lr
011B98 37 FF 01 00 		rtl

                	KeybdGetCharDirect:
011B9C E7 EF 01 00 	    push    lr
011BA0 67 E1 01 00 		push	r2
                	.0001:
011BA4 7C DC FF 00 		lc		r1,KEYBD
011BA8 42 10 00 00 
011BAC FC 00 00 00 		and		r2,r1,#$8000
011BB0 8C 20 00 00 
011BB4 3D 01 F8 FF 		beq		r2,.0001
011BB8 7C DC FF 00 		lbu		r0,KEYBD+4		; clear keyboard strobe
011BBC 41 00 08 00 
011BC0 8C 20 00 10 		and		r2,r1,#$800	; is it keydown ?
011BC4 3D 11 F0 FF 		bne	    r2,.0001
011BC8 8C 10 FE 01 		and		r1,r1,#$FF
011BCC 41 20 68 22 		lbu		r2,KeybdEcho
011BD0 3D 01 0C 00 		beq		r2,.gk1
011BD4 86 20 1A 00 		cmp		r2,r1,#CR
011BD8 3D 11 06 00 		bne		r2,.gk2
011BDC 39 E0 FD FF 		bsr		CRLF
011BE0 3A 01 00 00 		bra     .gk1
                	.gk2:
011BE4 3E F0 11 22 		jsr		(OutputVec)
                	.gk1:
011BE8 57 2F 10 00 		pop		r2
011BEC 57 FF 11 00 		pop     lr
011BF0 37 FF 01 00 		rtl

                	;KeybdInit:
                	;	mfspr	r1,cr0		; turn off tmr mode
                	;	push	r1
                	;	mtspr	cr0,r0
                	;	ldi		r1,#33
                	;	sb		r1,LEDS
                	;	bsr		WaitForKeybdAck	; grab a byte from the keyboard
                	;	cmp		flg0,r1,#$AA	; did it send a ack ?
                	;	
                	;	ldi		r1,#$ff			; issue keyboard reset
                	;	bsr		SendByteToKeybd
                	;	ldi		r1,#38
                	;	sb		r1,LEDS
                	;	ldi		r1,#4
                	;	jsr		Sleep
                	;	ldi		r1,#KEYBD_DELAY	; delay a bit
                	kbdi5:
                	;	sub		r1,r1,#1
                	;	brnz	r1,kbdi5
                	;	ldi		r1,#34
                	;	sb		r1,LEDS
                	;	ldi		r1,#0xf0		; send scan code select
                	;	bsr		SendByteToKeybd
                	;	ldi		r1,#35
                	;	sb		r1,LEDS
                	;	ldi		r2,#0xFA
                	;	bsr		WaitForKeybdAck
                	;	cmp		fl0,r1,#$FA
                	;	bne		fl0,kbdi2
                	;	ldi		r1,#36
                	;	sb		r1,LEDS
                	;	ldi		r1,#2			; select scan code set#2
                	;	bsr		SendByteToKeybd
                	;	ldi		r1,#39
                	;	sb		r1,LEDS
                	;kbdi2:
                	;	ldi		r1,#45
                	;	sb		r1,LEDS
                	;	pop		r1				; turn back on tmr mode
                	;	mtspr	cr0,r1
                	;	rtl
                	
                	msgBadKeybd:
011BF4 4B 65 79 62 		db		"Keyboard not responding.",0
011BF8 6F 61 72 64 
011BFC 20 6E 6F 74 
011C00 20 72 65 73 
011C04 70 6F 6E 64 
011C08 69 6E 67 2E 
011C0C 00          
                	
                	;SendByteToKeybd:
                	;	push	r2
                	;	sb		r1,KEYBD
                	;	ldi		r1,#40
                	;	sb		r1,LEDS
                	;	mfspr	r3,tick
                	;kbdi4:						; wait for transmit complete
                	;	mfspr	r4,tick
                	;	sub		r4,r4,r3
                	;	cmp		fl0,r4,#KEYBD_DELAY
                	;	bhi		fl0,kbdbad
                	;	ldi		r1,#41
                	;	sb		r1,LEDS
                	;	lbu		r1,KEYBD+1
                	;	and		fl0,r1,#64
                	;	brz		fl0,kbdi4
                	;	bra 	sbtk1
                	;kbdbad:
                	;	ldi		r1,#42
                	;	sb		r1,LEDS
                	;	lbu		r1,KeybdBad
                	;	brnz	r1,sbtk2
                	;	ldi		r1,#1
                	;	sb		r1,KeybdBad
                	;	ldi		r1,#43
                	;	sb		r1,LEDS
                	;	ldi		r1,#msgBadKeybd
                	;	bsr		DisplayStringCRLF
                	;sbtk1:
                	;	ldi		r1,#44
                	;	sb		r1,LEDS
                	;	pop		r2
                	;	rtl
                	;sbtk2:
                	;	bra sbtk1
                	
                	; Wait for keyboard to respond with an ACK (FA)
                	;
                	;WaitForKeybdAck:
                	;	ldi		r1,#64
                	;	sb		r1,LEDS
                	;	mfspr	r3,tick
                	;wkbdack1:
                	;	mfspr	r4,tick
                	;	sub		r4,r4,r3
                	;	cmp		fl0,r4,#KEYBD_DELAY
                	;	bhi		fl0,wkbdbad
                	;	ldi		r1,#65
                	;	sb		r1,LEDS
                	;	lb		r1,KEYBD+1				; check keyboard status for key
                	;	brpl	r1,wkbdack1				; no key available, go back
                	;	lbu		r1,KEYBD				; get the scan code
                	;	sb		r0,KEYBD+1				; clear recieve register
                	;wkbdbad:
                	;	rtl
                	
                	KeybdInit:
011C0D 00 00 00 E7 	    push    lr
011C11 EF 01 00    
011C14 0A 30 0A 00 		ldi		r3,#5
                	.0001:
011C18 B9 37 00 00 		bsr		KeybdRecvByte	; Look for $AA
011C1C BD 40 06 00 		bmi		r1,.0002
011C20 86 20 54 01 		cmp		r2,r1,#$AA		;
011C24 3D 01 20 00 		beq		r2,.config
                	.0002:
011C28 39 A1 00 00 		bsr		Wait10ms
011C2C 0A 10 FE FF 		ldi		r1,#-1			; send reset code to keyboard
011C30 7C DC FF 00 		sb		r1,KEYBD+1		; write to status reg to clear TX state
011C34 60 10 02 00 
011C38 39 9F 00 00 		bsr		Wait10ms
011C3C 0A 10 FE 01 		ldi		r1,#$FF
011C40 B9 9C 00 00 		bsr		KeybdSendByte	; now write to transmit register
011C44 39 3A 00 00 		bsr		KeybdWaitTx		; wait until no longer busy
011C48 B9 31 00 00 		bsr		KeybdRecvByte	; look for an ACK ($FA)
011C4C 86 20 F4 01 		cmp		r2,r1,#$FA
011C50 B9 30 00 00 		bsr		KeybdRecvByte
011C54 86 20 F8 01 		cmp		r2,r1,#$FC		; reset error ?
011C58 3D 01 1A 00 		beq		r2,.tryAgain
011C5C 86 20 54 01 		cmp		r2,r1,#$AA		; reset complete okay ?
011C60 3D 11 16 00 		bne		r2,.tryAgain
                	.config:
011C64 0A 10 E0 01 		ldi		r1,#$F0			; send scan code select
011C68 7C DC FF 00 		sc		r1,LEDS
011C6C 61 10 00 0C 
011C70 B9 96 00 00 		bsr		KeybdSendByte
011C74 39 34 00 00 		bsr		KeybdWaitTx
011C78 BD 40 0A 00 		bmi		r1,.tryAgain
011C7C 39 2B 00 00 		bsr		KeybdRecvByte	; wait for response from keyboard
011C80 BD 40 06 00 		bmi		r1,.tryAgain
011C84 86 20 F4 01 		cmp		r2,r1,#$FA
011C88 3D 01 10 00 		beq		r2,.0004
                	.tryAgain:
011C8C 95 31 02 00 	    subui   r3,r3,#1
011C90 BD 11 C4 FF 		bne	    r3,.0001
                	.keybdErr:
011C94 7C 01 00 00 		ldi		r1,#msgBadKeybd
011C98 0A 10 E8 37 
011C9C 39 B7 FD FF 		bsr		DisplayString
011CA0 57 FF 11 00 		pop     lr
011CA4 37 FF 01 00 		rtl
.0004:
011CA8 0A 10 04 00 		ldi		r1,#2			; select scan code set #2
011CAC 39 8F 00 00 		bsr		KeybdSendByte
011CB0 B9 2C 00 00 		bsr		KeybdWaitTx
011CB4 BD 40 EC FF 		bmi		r1,.tryAgain
011CB8 57 FF 11 00 		pop     lr
011CBC 37 FF 01 00 		rtl

                	; Get the keyboard status
                	;
                	KeybdGetStatus:
011CC0 7C DC FF 00 		lb		r1,KEYBD+1
011CC4 40 10 02 00 
011CC8 37 FF 01 00 		rtl
    push    r2
011CCC 67 E1 01 00 
011CD0 41 2C 28 04 	    lbu     r2,TCB_hJCB[tr]
011CD4 06 11 66 00 	    cmp     r1,r2,#NR_JCB
011CD8 BD 30 2C 00 	    bge     r1,.0001
011CDC 97 FF FF FF 	    mulu    r2,#JCB_Size
011CE0 7C C5 00 00 	    addui   r2,r2,#JCB_Array
011CE4 14 21 00 00 
011CE8 E7 E1 01 00 	    push    r3
011CEC 67 E2 01 00 	    push    r4
011CF0 E7 EF 01 00 	    push    lr
011CF4 B9 00 05 00 	    bsr     LockSYS
011CF8 41 11 70 08 	    lbu     r1,JCB_KeybdHead[r2]
011CFC 41 31 80 08 	    lbu     r3,JCB_KeybdTail[r2]
011D00 B9 02 05 00 	    bsr     UnlockSYS
011D04 82 40 06 2C 	    cmpu    r4,r1,r3
011D08 3D 02 0E 00 	    beq     r4,.0002
011D0C 0A 10 FE FF 	    ldi     r1,#-1
011D10 57 FF 11 00 	    pop     lr
011D14 57 4F 10 00 	    pop     r4
011D18 57 3F 10 00 	    pop     r3
011D1C 57 2F 10 00 	    pop     r2
011D20 37 FF 01 00 	    rtl
.0002:
011D24 57 FF 11 00 	    pop     lr
011D28 57 4F 10 00 	    pop     r4
011D2C 57 3F 10 00 	    pop     r3
                	.0001:
011D30 0A 10 00 00 	    ldi     r1,#0   ; no scancode available
011D34 57 2F 10 00 	    pop     r2
011D38 37 FF 01 00 	    rtl

                	; Get the scancode from the keyboard port
                	;
                	KeybdGetScancode:
011D3C 7C DC FF 00 		lbu		r1,KEYBD				; get the scan code
011D40 41 10 00 00 
011D44 7C DC FF 00 		sb		r0,KEYBD+1				; clear receive register
011D48 60 00 02 00 
011D4C 37 FF 01 00 		rtl
    push    r2
011D50 67 E1 01 00 
011D54 41 2C 28 04 	    lbu     r2,TCB_hJCB[tr]
011D58 06 11 66 00 	    cmp     r1,r2,#NR_JCB
011D5C BD 30 36 00 	    bge     r1,.0001
011D60 97 FF FF FF 	    mulu    r2,#JCB_Size
011D64 7C C5 00 00 	    addui   r2,r2,#JCB_Array
011D68 14 21 00 00 
011D6C E7 E1 01 00 	    push    r3
011D70 67 E2 01 00 	    push    r4
011D74 E7 EF 01 00 	    push    lr
011D78 39 F0 04 00 	    bsr     LockSYS
011D7C 41 11 70 08 	    lbu     r1,JCB_KeybdHead[r2]
011D80 41 31 80 08 	    lbu     r3,JCB_KeybdTail[r2]
011D84 82 40 06 2C 	    cmpu    r4,r1,r3
011D88 3D 02 18 00 	    beq     r4,.0002
011D8C 47 41 A0 08 	    lea     r4,JCB_KeybdBuffer[r2]
011D90 49 12 06 00 	    lbu     r1,[r4+r3]
011D94 94 31 02 00 	    addui   r3,r3,#1
011D98 8C 31 3E 00 	    and     r3,r3,#31 ; mod 32
011D9C 60 31 80 08 	    sb      r3,JCB_KeybdTail[r2]
011DA0 B9 EE 04 00 	    bsr     UnlockSYS
011DA4 57 FF 11 00 	    pop     lr
011DA8 57 4F 10 00 	    pop     r4
011DAC 57 3F 10 00 	    pop     r3
011DB0 57 2F 10 00 	    pop     r2
011DB4 37 FF 01 00 	    rtl
.0002:
011DB8 B9 EB 04 00 	    bsr     UnlockSYS
011DBC 57 FF 11 00 	    pop     lr
011DC0 57 4F 10 00 	    pop     r4
011DC4 57 3F 10 00 	    pop     r3
                	.0001:
011DC8 0A 10 00 00 	    ldi     r1,#0   ; no scancode available
011DCC 57 2F 10 00 	    pop     r2
011DD0 37 FF 01 00 	    rtl

                	
                	; Recieve a byte from the keyboard, used after a command is sent to the
                	; keyboard in order to wait for a response.
                	;
                	KeybdRecvByte:
011DD4 E7 EF 01 00 	    push    lr
011DD8 E7 E1 01 00 		push	r3
011DDC 0A 30 C8 00 		ldi		r3,#100			; wait up to 1s
                	.0003:
011DE0 39 DC FF FF 		bsr		KeybdGetStatus	; wait for response from keyboard
011DE4 BD 40 10 00 		bmi		r1,.0004		; is input buffer full ? yes, branch
011DE8 39 69 00 00 		bsr		Wait10ms		; wait a bit
011DEC 95 31 02 00 		subui   r3,r3,#1
011DF0 BD 11 F8 FF 		bne     r3,.0003		; go back and try again
011DF4 57 3F 10 00 		pop		r3				; timeout
011DF8 0A 10 FE FF 		ldi		r1,#-1			; return -1
011DFC 57 FF 11 00 		pop     lr
011E00 37 FF 01 00 		rtl
.0004:
011E04 39 E7 FF FF 		bsr		KeybdGetScancode
011E08 57 3F 10 00 		pop		r3
011E0C 57 FF 11 00 		pop     lr
011E10 37 FF 01 00 		rtl

                	
                	; Wait until the keyboard transmit is complete
                	; Returns .CF = 1 if successful, .CF=0 timeout
                	;
                	KeybdWaitTx:
011E14 E7 EF 01 00 	    push    lr
011E18 67 E1 01 00 		push	r2
011E1C E7 E1 01 00 	    push    r3
011E20 0A 30 C8 00 		ldi		r3,#100			; wait a max of 1s
                	.0001:
011E24 B9 D3 FF FF 		bsr		KeybdGetStatus
011E28 8C 10 80 00 		and		r1,r1,#$40		; check for transmit complete bit
011E2C BD 10 12 00 		bne	    r1,.0002		; branch if bit set
011E30 39 60 00 00 		bsr		Wait10ms		; delay a little bit
011E34 95 31 02 00 		subui   r3,r3,#1
011E38 BD 11 F6 FF 		bne	    r3,.0001		; go back and try again
011E3C 57 3F 10 00 		pop		r3
011E40 57 2F 10 00 	    pop     r2			    ; timed out
011E44 0A 10 FE FF 		ldi		r1,#-1			; return -1
011E48 57 FF 11 00 		pop     lr
011E4C 37 FF 01 00 		rtl
.0002:
011E50 57 3F 10 00 		pop		r3
011E54 57 2F 10 00 	    pop     r2			    ; wait complete, return 
011E58 0A 10 00 00 		ldi		r1,#0			; return 0
011E5C 57 FF 11 00 		pop     lr
011E60 37 FF 01 00 		rtl

                	KeybdGetCharNoWait:
011E64 60 00 74 22 		sb		r0,KeybdWaitFlag
011E68 BA 01 00 00 		bra		KeybdGetChar
                	
                	KeybdGetCharWait:
011E6C 0A 10 FE FF 		ldi		r1,#-1
011E70 60 10 74 22 		sb		r1,KeybdWaitFlag
                	
                	;
                	; KeyState2
                	; 876543210
                	; ||||||||+ = alt
                	; |||||||+- =
                	; ||||||+-- = control
                	; |||||+--- = numlock
                	; ||||+---- = capslock
                	; |||+----- = scrolllock
                	; ||+------ =
                	; |+------- = 
                	; +-------- = extended
                	;
                	KeybdGetChar:
011E74 E7 EF 01 00 	    push    lr
011E78 67 E1 01 00 		push	r2
011E7C E7 E1 01 00 	    push    r3
                	.0003:
011E80 39 C8 FF FF 		bsr		KeybdGetStatus			; check keyboard status for key available
011E84 BD 40 10 00 		bmi		r1,.0006				; yes, go process
011E88 40 10 74 22 		lb		r1,KeybdWaitFlag		; are we willing to wait for a key ?
011E8C BD 40 FA FF 		bmi		r1,.0003				; yes, branch back
011E90 0A 10 FE FF 		ldi		r1,#-1					; flag no char available
011E94 57 3F 10 00 		pop		r3
011E98 57 2F 10 00 	    pop     r2
011E9C 57 FF 11 00 	    pop     lr
011EA0 37 FF 01 00 		rtl
.0006:
011EA4 39 D3 FF FF 		bsr		KeybdGetScancode
                	.0001:
011EA8 0A 20 02 00 		ldi		r2,#1
011EAC 7C DC FF 00 		sb		r2,LEDS
011EB0 60 20 00 0C 
011EB4 86 20 E0 01 		cmp		r2,r1,#SC_KEYUP
011EB8 3D 01 70 00 		beq		r2,.doKeyup
011EBC 86 20 C0 01 		cmp		r2,r1,#SC_EXTEND
011EC0 3D 01 72 00 		beq		r2,.doExtend
011EC4 86 20 28 00 		cmp		r2,r1,#$14				; code for CTRL
011EC8 3D 01 76 00 		beq		r2,.doCtrl
011ECC 86 20 24 00 		cmp		r2,r1,#$12				; code for left shift
011ED0 3D 01 B4 00 		beq		r2,.doShift
011ED4 86 20 B2 00 		cmp		r2,r1,#$59				; code for right-shift
011ED8 3D 01 B0 00 		beq		r2,.doShift
011EDC 86 20 EE 00 		cmp		r2,r1,#SC_NUMLOCK
011EE0 3D 01 C2 00 		beq		r2,.doNumLock
011EE4 86 20 B0 00 		cmp		r2,r1,#SC_CAPSLOCK
011EE8 3D 01 C8 00 		beq		r2,.doCapsLock
011EEC 86 20 FC 00 		cmp		r2,r1,#SC_SCROLLLOCK
011EF0 3D 01 CE 00 		beq		r2,.doScrollLock
011EF4 86 20 22 00 		cmp     r2,r1,#SC_ALT
011EF8 3D 01 74 00 		beq     r2,.doAlt
011EFC 40 20 70 22 		lb		r2,KeyState1			; check key up/down
011F00 60 00 70 22 		sb		r0,KeyState1			; clear keyup status
011F04 3D 11 BE FF 		bne	    r2,.0003				; ignore key up
011F08 86 20 1A 00 		cmp     r2,r1,#SC_TAB
011F0C 3D 01 82 00 		beq     r2,.doTab
                	.0013:
011F10 40 20 72 22 		lb		r2,KeyState2
011F14 0C 31 00 01 		and		r3,r2,#$80				; is it extended code ?
011F18 BD 01 0E 00 		beq		r3,.0010
011F1C 0C 31 FE 00 		and		r3,r2,#$7f				; clear extended bit
011F20 60 30 72 22 		sb		r3,KeyState2
011F24 60 00 70 22 		sb		r0,KeyState1			; clear keyup
011F28 7C 01 00 00 		lbu		r1,keybdExtendedCodes[r1]
011F2C C1 10 60 49 
011F30 BA 09 00 00 		bra		.0008
                	.0010:
011F34 40 20 72 22 		lb		r2,KeyState2
011F38 0C 31 08 00 		and		r3,r2,#$04				; is it CTRL code ?
011F3C BD 01 0A 00 		beq		r3,.0009
011F40 8C 10 FE 00 		and		r1,r1,#$7F
011F44 7C 01 00 00 		lbu		r1,keybdControlCodes[r1]
011F48 C1 10 60 48 
011F4C 3A 06 00 00 		bra		.0008
                	.0009:
011F50 40 20 72 22 		lb		r2,KeyState2
011F54 0C 31 02 00 		and		r3,r2,#$01				; is it shift down ?
011F58 BD 01 08 00 		beq  	r3,.0007
011F5C 7C 01 00 00 		lbu		r1,shiftedScanCodes[r1]
011F60 C1 10 60 46 
011F64 3A 03 00 00 		bra		.0008
                	.0007:
011F68 7C 01 00 00 		lbu		r1,unshiftedScanCodes[r1]
011F6C C1 10 60 44 
011F70 0A 20 04 00 		ldi		r2,#2
011F74 7C DC FF 00 		sb		r2,LEDS
011F78 60 20 00 0C 
                	.0008:
011F7C 0A 20 06 00 		ldi		r2,#3
011F80 7C DC FF 00 		sb		r2,LEDS
011F84 60 20 00 0C 
011F88 57 3F 10 00 		pop		r3
011F8C 57 2F 10 00 	    pop     r2
011F90 57 FF 11 00 	    pop     lr
011F94 37 FF 01 00 		rtl
.doKeyup:
011F98 0A 10 FE FF 		ldi		r1,#-1
011F9C 60 10 70 22 		sb		r1,KeyState1
011FA0 3A DC FF FF 		bra		.0003
                	.doExtend:
011FA4 41 10 72 22 		lbu		r1,KeyState2
011FA8 8D 10 00 01 		or		r1,r1,#$80
011FAC 60 10 72 22 		sb		r1,KeyState2
011FB0 3A DA FF FF 		bra		.0003
                	.doCtrl:
011FB4 40 10 70 22 		lb		r1,KeyState1
011FB8 60 00 70 22 		sb		r0,KeyState1
011FBC BD 30 0A 00 		bpl		r1,.0004
011FC0 40 10 72 22 		lb		r1,KeyState2
011FC4 8C 10 F6 FF 		and		r1,r1,#-5
011FC8 60 10 72 22 		sb		r1,KeyState2
011FCC BA D6 FF FF 		bra		.0003
                	.0004:
011FD0 40 10 72 22 		lb		r1,KeyState2
011FD4 8D 10 08 00 		or		r1,r1,#4
011FD8 60 10 72 22 		sb		r1,KeyState2
011FDC BA D4 FF FF 		bra		.0003
                	.doAlt:
011FE0 40 10 70 22 		lb		r1,KeyState1
011FE4 60 00 70 22 		sb		r0,KeyState1
011FE8 BD 30 0C 00 		bpl		r1,.0011
011FEC 40 10 72 22 	    lb      r1,KeyState2
011FF0 40 10 72 22 		lb		r1,KeyState2
011FF4 8C 10 FC FF 		and		r1,r1,#-2
011FF8 60 10 72 22 		sb		r1,KeyState2
011FFC BA D0 FF FF 		bra		.0003
                	.0011:
012000 40 10 72 22 		lb		r1,KeyState2
012004 8D 10 02 00 		or		r1,r1,#1
012008 60 10 72 22 		sb		r1,KeyState2
01200C BA CE FF FF 		bra		.0003
                	.doTab:
012010 E7 E0 01 00 	    push    r1
012014 40 10 72 22 	    lb      r1,KeyState2
012018 8C 10 02 00 	    and     r1,r1,#1                 ; is ALT down ?
01201C BD 00 0A 00 	    beq     r1,.0012
012020 7C C0 00 00 	    inc     iof_switch
012024 64 10 00 03 
012028 57 1F 10 00 	    pop     r1
01202C BA CA FF FF 	    bra     .0003
                	.0012:
012030 57 1F 10 00 	    pop     r1
012034 BA DB FF FF 	    bra     .0013
                	.doShift:
012038 40 10 70 22 		lb		r1,KeyState1
01203C 60 00 70 22 		sb		r0,KeyState1
012040 BD 30 0A 00 		bpl		r1,.0005
012044 40 10 72 22 		lb		r1,KeyState2
012048 8C 10 FC FF 		and		r1,r1,#-2
01204C 60 10 72 22 		sb		r1,KeyState2
012050 3A C6 FF FF 		bra		.0003
                	.0005:
012054 40 10 72 22 		lb		r1,KeyState2
012058 8D 10 02 00 		or		r1,r1,#1
01205C 60 10 72 22 		sb		r1,KeyState2
012060 3A C4 FF FF 		bra		.0003
                	.doNumLock:
012064 40 10 72 22 		lb		r1,KeyState2
012068 8E 10 20 00 		eor		r1,r1,#16
01206C 60 10 72 22 		sb		r1,KeyState2
012070 39 06 00 00 		bsr		KeybdSetLEDStatus
012074 BA C1 FF FF 		bra		.0003
                	.doCapsLock:
012078 40 10 72 22 		lb		r1,KeyState2
01207C 8E 10 40 00 		eor		r1,r1,#32
012080 60 10 72 22 		sb		r1,KeyState2
012084 B9 03 00 00 		bsr		KeybdSetLEDStatus
012088 3A BF FF FF 		bra		.0003
                	.doScrollLock:
01208C 40 10 72 22 		lb		r1,KeyState2
012090 8E 10 80 00 		eor		r1,r1,#64
012094 60 10 72 22 		sb		r1,KeyState2
012098 39 01 00 00 		bsr		KeybdSetLEDStatus
01209C BA BC FF FF 		bra		.0003
                	
                	KeybdSetLEDStatus:
0120A0 E7 EF 01 00 	    push    lr
0120A4 67 E1 01 00 		push	r2
0120A8 E7 E1 01 00 	    push    r3
0120AC 60 00 76 22 		sb		r0,KeybdLEDs
0120B0 40 10 72 22 		lb		r1,KeyState2
0120B4 8C 20 20 00 		and		r2,r1,#16
0120B8 3D 01 06 00 		beq		r2,.0002
0120BC 0A 30 04 00 		ldi		r3,#2
0120C0 60 30 76 22 		sb		r3,KeybdLEDs
                	.0002:
0120C4 8C 20 40 00 		and		r2,r1,#32
0120C8 3D 01 08 00 		beq		r2,.0003
0120CC 40 30 76 22 		lb		r3,KeybdLEDs
0120D0 8D 31 08 00 		or		r3,r3,#4
0120D4 60 30 76 22 		sb		r3,KeybdLEDs
                	.0003:
0120D8 8C 20 80 00 		and		r2,r1,#64
0120DC 3D 01 08 00 		beq		r2,.0004
0120E0 40 30 76 22 		lb		r3,KeybdLEDs
0120E4 8D 31 02 00 		or		r3,r3,#1
0120E8 60 30 76 22 		sb		r3,KeybdLEDs
                	.0004:
0120EC 0A 10 DA 01 		ldi		r1,#$ED
0120F0 B9 06 00 00 		bsr		KeybdSendByte
0120F4 39 A4 FF FF 		bsr		KeybdWaitTx
0120F8 B9 9B FF FF 		bsr		KeybdRecvByte
0120FC BD 40 0C 00 		bmi		r1,.0001
012100 86 20 F4 01 		cmp		r2,r1,#$FA
012104 40 10 76 22 		lb		r1,KeybdLEDs
012108 B9 03 00 00 		bsr		KeybdSendByte
01210C 39 A1 FF FF 		bsr		KeybdWaitTx
012110 B9 98 FF FF 		bsr		KeybdRecvByte
                	.0001:
012114 57 3F 10 00 		pop		r3
012118 57 2F 10 00 	    pop     r2
01211C 57 FF 11 00 	    pop     lr
012120 37 FF 01 00 		rtl

                	KeybdSendByte:
012124 7C DC FF 00 		sb		r1,KEYBD
012128 60 10 00 00 
01212C 37 FF 01 00 		rtl
	
                	Wait10ms:
012130 E7 E1 01 00 		push	r3
012134 67 E2 01 00 	    push    r4
012138 02 30 08 3E 		mfspr	r3,tick					; get orginal count
                	.0001:
01213C 02 40 08 3E 		mfspr	r4,tick
012140 02 42 06 0A 		sub		r4,r4,r3
012144 3D 42 08 00 		blt  	r4,.0002				; shouldn't be -ve unless counter overflowed
012148 FC 03 00 00 		cmpu	r4,r4,#250000			; about 10ms at 25 MHz
01214C 16 42 20 A1 
012150 3D 42 F6 FF 		blt		r4,.0001
                	.0002:
012154 57 4F 10 00 		pop		r4
012158 57 3F 10 00 	    pop     r3
01215C 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; KeybdIRQ
                	;     Keyboard interrupt processing routine. Must be short.
                	; Grab a scancode from the keyboard and place it into the keyboard buffer
                	; for the job with the I/O focus.
                	;------------------------------------------------------------------------------
                	
                	KeybdIRQ:
012160 FC 00 00 00 	    ldi     sp,#CPU0_IRQ_STACK
012164 0A E0 01 10 
012168 E7 EF 01 00 	    push    lr
01216C E7 E0 01 00 	    push    r1
012170 67 E1 01 00 	    push    r2
012174 E7 E1 01 00 	    push    r3
012178 67 E2 01 00 	    push    r4
01217C 7C DC FF 00 	    lb      r1,KEYBD+1      ; get the keyboard status
012180 40 10 02 00 
012184 BD 20 40 00 	    bgt     r1,.0001        ; is there a scancode present ?
012188 7C DC FF 00 		lbu		r1,KEYBD		; get the scan code
01218C 41 10 00 00 
012190 7C DC FF 00 		sb		r0,KEYBD+1		; clear receive register (acknowledges interrupt)
012194 60 00 02 00 
012198 7C C0 00 00 		lw      r2,IOFocusNdx   ; get task with I/O focus
01219C 46 20 50 00 
0121A0 3D 01 32 00 		beq     r2,.0001
0121A4 40 21 28 04 	    lb      r2,TCB_hJCB[r2] ; get JCB handle
0121A8 96 31 66 00 	    cmpu    r3,r3,#NR_JCB   ; make sure valid handle
0121AC BD 31 2C 00 	    bge     r3,.0001
0121B0 17 21 00 0A 	    mulu    r2,r2,#JCB_Size ; and convert it to a pointer
0121B4 7C C5 00 00 	    addui   r2,r2,#JCB_Array
0121B8 14 21 00 00 
0121BC B9 67 04 00 	    bsr     LockSYS
0121C0 41 31 70 08 	    lbu     r3,JCB_KeybdHead[r2]  ; get head index of keyboard buffer
0121C4 41 41 80 08 	    lbu     r4,JCB_KeybdTail[r2]  ; get tail index of keyboard buffer
0121C8 94 31 02 00 	    addui   r3,r3,#1        ; advance head      
0121CC 8C 31 3E 00 	    and     r3,r3,#31       ; mod 32
0121D0 82 51 08 0C 	    cmp     r5,r3,r4        ; is there room in the buffer ?
0121D4 BD 02 24 00 	    beq     r5,.0002        ; if not, newest chars will be lost
0121D8 60 31 70 08 	    sb      r3,JCB_KeybdHead[r2]
0121DC 47 21 A0 08 	    lea     r2,JCB_KeybdBuffer[r2]
0121E0 68 11 06 00 	    sb      r1,[r2+r3]      ; save off the scan code
0121E4 39 66 04 00 	    bsr     UnlockSYS
0121E8 40 20 72 22 	    lb      r2,KeyState2    ; check for ALT-tab
0121EC 0C 21 02 00 	    and     r2,r2,#1        ; is ALT down ?
0121F0 3D 01 0A 00 	    beq     r2,.0001        
0121F4 86 20 1A 00 	    cmp     r2,r1,#SC_TAB
0121F8 3D 11 06 00 	    bne     r2,.0001
0121FC 7C C0 00 00 	    inc     iof_switch      ; flag an I/O focus switch
012200 64 10 00 03 
                	.0001:
012204 57 4F 10 00 	    pop     r4
012208 57 3F 10 00 	    pop     r3
01220C 57 2F 10 00 	    pop     r2
012210 57 1F 10 00 		pop     r1
012214 57 FF 11 00 		pop     lr
012218 02 E0 3F 6E 	    rti
                	.0002:
01221C 39 5F 04 00 	    bsr     UnlockSYS
012220 BA FC FF FF 	    bra     .0001
                	KeybdIRQ1:
012224 02 E0 3F 6E 	    rti
                	
                	
                		;--------------------------------------------------------------------------
                		; PS2 scan codes to ascii conversion tables.
                		;--------------------------------------------------------------------------
                		;
012228 00 00 00 00 		align	1
01222C 00 00 00 00 
                	
                	unshiftedScanCodes:
012230 2E A9 2E A5 		.byte	$2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
012234 A3 A1 A2 AC 
012238 2E AA A8 A6 		.byte	$2e,$aa,$a8,$a6,$a4,$09,$60,$2e
01223C A4 09 60 2E 
012240 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$71,$31,$2e
012244 2E 71 31 2E 
012248 2E 2E 7A 73 		.byte	$2e,$2e,$7a,$73,$61,$77,$32,$2e
01224C 61 77 32 2E 
012250 2E 63 78 64 		.byte	$2e,$63,$78,$64,$65,$34,$33,$2e
012254 65 34 33 2E 
012258 2E 20 76 66 		.byte	$2e,$20,$76,$66,$74,$72,$35,$2e
01225C 74 72 35 2E 
012260 2E 6E 62 68 		.byte	$2e,$6e,$62,$68,$67,$79,$36,$2e
012264 67 79 36 2E 
012268 2E 2E 6D 6A 		.byte	$2e,$2e,$6d,$6a,$75,$37,$38,$2e
01226C 75 37 38 2E 
012270 2E 2C 6B 69 		.byte	$2e,$2c,$6b,$69,$6f,$30,$39,$2e
012274 6F 30 39 2E 
012278 2E 2E 2F 6C 		.byte	$2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
01227C 3B 70 2D 2E 
012280 2E 2E 27 2E 		.byte	$2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
012284 5B 3D 2E 2E 
012288 AD 2E 0D 5D 		.byte	$ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
01228C 2E 5C 2E 2E 
012290 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
012294 2E 2E 08 2E 
012298 2E 95 2E 93 		.byte	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
01229C 94 2E 2E 2E 
0122A0 98 7F 92 2E 		.byte	$98,$7f,$92,$2e,$91,$90,$1b,$af
0122A4 91 90 1B AF 
0122A8 AB 2E 97 2E 		.byte	$ab,$2e,$97,$2e,$2e,$96,$ae,$2e
0122AC 2E 96 AE 2E 
                	
0122B0 2E 2E 2E A7 		.byte	$2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
0122B4 2E 2E 2E 2E 
0122B8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0122BC 2E 2E 2E 2E 
0122C0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0122C4 2E 2E 2E 2E 
0122C8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0122CC 2E 2E 2E 2E 
0122D0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0122D4 2E 2E 2E 2E 
0122D8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0122DC 2E 2E 2E 2E 
0122E0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0122E4 2E 2E 2E 2E 
0122E8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0122EC 2E 2E 2E 2E 
0122F0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0122F4 2E 2E 2E 2E 
0122F8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0122FC 2E 2E 2E 2E 
012300 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012304 2E 2E 2E 2E 
012308 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01230C 2E 2E 2E 2E 
012310 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012314 2E 2E 2E 2E 
012318 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01231C 2E 2E 2E 2E 
012320 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012324 2E 2E 2E 2E 
012328 2E 2E FA 2E 		.byte	$2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
01232C 2E 2E 2E 2E 
                	
                	shiftedScanCodes:
012330 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012334 2E 2E 2E 2E 
012338 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
01233C 2E 09 7E 2E 
012340 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$51,$21,$2e
012344 2E 51 21 2E 
012348 2E 2E 5A 53 		.byte	$2e,$2e,$5a,$53,$41,$57,$40,$2e
01234C 41 57 40 2E 
012350 2E 43 58 44 		.byte	$2e,$43,$58,$44,$45,$24,$23,$2e
012354 45 24 23 2E 
012358 2E 20 56 46 		.byte	$2e,$20,$56,$46,$54,$52,$25,$2e
01235C 54 52 25 2E 
012360 2E 4E 42 48 		.byte	$2e,$4e,$42,$48,$47,$59,$5e,$2e
012364 47 59 5E 2E 
012368 2E 2E 4D 4A 		.byte	$2e,$2e,$4d,$4a,$55,$26,$2a,$2e
01236C 55 26 2A 2E 
012370 2E 3C 4B 49 		.byte	$2e,$3c,$4b,$49,$4f,$29,$28,$2e
012374 4F 29 28 2E 
012378 2E 3E 3F 4C 		.byte	$2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
01237C 3A 50 5F 2E 
012380 2E 2E 22 2E 		.byte	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
012384 7B 2B 2E 2E 
012388 2E 2E 0D 7D 		.byte	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
01238C 2E 7C 2E 2E 
012390 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
012394 2E 2E 08 2E 
012398 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01239C 2E 2E 2E 2E 
0123A0 2E 7F 2E 2E 		.byte	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
0123A4 2E 2E 1B 2E 
0123A8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123AC 2E 2E 2E 2E 
                	
0123B0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123B4 2E 2E 2E 2E 
0123B8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123BC 2E 2E 2E 2E 
0123C0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123C4 2E 2E 2E 2E 
0123C8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123CC 2E 2E 2E 2E 
0123D0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123D4 2E 2E 2E 2E 
0123D8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123DC 2E 2E 2E 2E 
0123E0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123E4 2E 2E 2E 2E 
0123E8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123EC 2E 2E 2E 2E 
0123F0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123F4 2E 2E 2E 2E 
0123F8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123FC 2E 2E 2E 2E 
012400 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012404 2E 2E 2E 2E 
012408 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01240C 2E 2E 2E 2E 
012410 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012414 2E 2E 2E 2E 
012418 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01241C 2E 2E 2E 2E 
012420 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012424 2E 2E 2E 2E 
012428 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01242C 2E 2E 2E 2E 
                	
                	; control
                	keybdControlCodes:
012430 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012434 2E 2E 2E 2E 
012438 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
01243C 2E 09 7E 2E 
012440 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$11,$21,$2e
012444 2E 11 21 2E 
012448 2E 2E 1A 13 		.byte	$2e,$2e,$1a,$13,$01,$17,$40,$2e
01244C 01 17 40 2E 
012450 2E 03 18 04 		.byte	$2e,$03,$18,$04,$05,$24,$23,$2e
012454 05 24 23 2E 
012458 2E 20 16 06 		.byte	$2e,$20,$16,$06,$14,$12,$25,$2e
01245C 14 12 25 2E 
012460 2E 0E 02 08 		.byte	$2e,$0e,$02,$08,$07,$19,$5e,$2e
012464 07 19 5E 2E 
012468 2E 2E 0D 0A 		.byte	$2e,$2e,$0d,$0a,$15,$26,$2a,$2e
01246C 15 26 2A 2E 
012470 2E 3C 0B 09 		.byte	$2e,$3c,$0b,$09,$0f,$29,$28,$2e
012474 0F 29 28 2E 
012478 2E 3E 3F 0C 		.byte	$2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
01247C 3A 10 5F 2E 
012480 2E 2E 22 2E 		.byte	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
012484 7B 2B 2E 2E 
012488 2E 2E 0D 7D 		.byte	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
01248C 2E 7C 2E 2E 
012490 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
012494 2E 2E 08 2E 
012498 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01249C 2E 2E 2E 2E 
0124A0 2E 7F 2E 2E 		.byte	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
0124A4 2E 2E 1B 2E 
0124A8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0124AC 2E 2E 2E 2E 
                	
                	keybdExtendedCodes:
0124B0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
0124B4 A3 A1 A2 2E 
0124B8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0124BC 2E 2E 2E 2E 
0124C0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0124C4 2E 2E 2E 2E 
0124C8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0124CC 2E 2E 2E 2E 
0124D0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0124D4 2E 2E 2E 2E 
0124D8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0124DC 2E 2E 2E 2E 
0124E0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0124E4 2E 2E 2E 2E 
0124E8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0124EC 2E 2E 2E 2E 
0124F0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0124F4 2E 2E 2E 2E 
0124F8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0124FC 2E 2E 2E 2E 
012500 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012504 2E 2E 2E 2E 
012508 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01250C 2E 2E 2E 2E 
012510 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012514 2E 2E 2E 2E 
012518 2E 95 2E 93 		.byte	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
01251C 94 2E 2E 2E 
012520 98 99 92 2E 		.byte	$98,$99,$92,$2e,$91,$90,$2e,$2e
012524 91 90 2E 2E 
012528 2E 2E 97 2E 		.byte	$2e,$2e,$97,$2e,$2e,$96,$2e,$2e
01252C 2E 96 2E 2E 
                	
                	
                	; ============================================================================
                	; I2C interface to RTCC
                	; ============================================================================
                	
                	I2C_INIT:
012530 E7 E0 01 00 	    push    r1
012534 67 E1 01 00 	    push    r2
012538 7C DC FF 00 		ldi		r2,#I2C_MASTER
01253C 0A 20 00 1C 
012540 60 01 04 00 		sb		r0,I2C_CONTROL[r2]		; disable the contoller
012544 60 01 02 00 		sb		r0,I2C_PRESCALE_HI[r2]	; set clock divisor for 100kHz
012548 0A 10 C6 00 		ldi		r1,#99					; 24=400kHz, 99=100KHz
01254C 60 11 00 00 		sb		r1,I2C_PRESCALE_LO[r2]
012550 0A 10 00 01 		ldi		r1,#$80					; controller enable bit
012554 60 11 04 00 		sb		r1,I2C_CONTROL[r2]
012558 57 2F 10 00 		pop		r2
01255C 57 1F 10 00 	    pop     r1
012560 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; I2C Read
                	;
                	; Parameters:
                	; 	r1 = device ($6F for RTCC)
                	; 	r2 = register to read
                	; Returns
                	; 	r1 = register value $00 to $FF if successful, else r1 = -1 on error
                	;------------------------------------------------------------------------------
                	;
                	I2C_READ:
012564 E7 EF 01 00 	    push    lr
012568 67 E1 01 00 		push	r2
01256C E7 E1 01 00 	    push    r3
012570 67 E2 01 00 	    push    r4
012574 82 10 02 70 		asl		r1,r1,#1				; clear rw bit for write
                	;	or		r1,r1,#1				; set rw bit for a read
012578 82 40 00 1A 		mov		r4,r1					; save device address in r4
01257C 02 31 00 1A 		mov		r3,r2
                		; transmit device #
012580 7C DC FF 00 		ldi		r2,#I2C_MASTER
012584 0A 20 00 1C 
012588 60 11 06 00 		sb		r1,I2C_TX[r2]
01258C 0A 10 20 01 		ldi		r1,#$90					; STA($80) and WR($10) bits set
012590 60 11 08 00 		sb		r1,I2C_CMD[r2]
012594 B9 1F 00 00 		bsr		I2C_WAIT_TC				; wait for transmit to complete
                		; transmit register #
012598 40 11 08 00 		lb		r1,I2C_STAT[r2]
01259C 8C 10 00 01 		and		r1,r1,#$80				; test RxACK bit
0125A0 BD 10 30 00 		bne	    r1,I2C_ERR
0125A4 60 31 06 00 		sb		r3,I2C_TX[r2]			; select register r3
0125A8 0A 10 20 00 		ldi		r1,#$10					; set WR bit
0125AC 60 11 08 00 		sb		r1,I2C_CMD[r2]
0125B0 39 1C 00 00 		bsr		I2C_WAIT_TC
                	
                		; transmit device #
0125B4 40 11 08 00 		lb		r1,I2C_STAT[r2]
0125B8 8C 10 00 01 		and		r1,r1,#$80				; test RxACK bit
0125BC BD 10 22 00 		bne	    r1,I2C_ERR
0125C0 0D 42 02 00 		or		r4,r4,#1				; set read flag
0125C4 60 41 06 00 		sb		r4,I2C_TX[r2]
0125C8 0A 10 20 01 		ldi		r1,#$90					; STA($80) and WR($10) bits set
0125CC 60 11 08 00 		sb		r1,I2C_CMD[r2]
0125D0 39 18 00 00 		bsr		I2C_WAIT_TC				; wait for transmit to complete
                	
                		; receive data byte
0125D4 40 11 08 00 		lb		r1,I2C_STAT[r2]
0125D8 8C 10 00 01 		and		r1,r1,#$80				; test RxACK bit
0125DC BD 10 12 00 		bne	    r1,I2C_ERR
0125E0 0A 10 D0 00 		ldi		r1,#$68					; STO($40), RD($20), and NACK($08)
0125E4 60 11 08 00 		sb		r1,I2C_CMD[r2]
0125E8 39 15 00 00 		bsr		I2C_WAIT_TC
0125EC 41 11 06 00 		lbu		r1,I2C_RX[r2]			; $00 to $FF = byte read, -1=err
0125F0 57 4F 10 00 		pop		r4
0125F4 57 3F 10 00 	    pop     r3
0125F8 57 2F 10 00 	    pop     r2
0125FC 3B FF 11 00 		rts

                	I2C_ERR:
012600 0A 10 FE FF 		ldi		r1,#-1
012604 82 02 00 3C 		mtspr	cr0,r5					; restore TMR
012608 57 4F 10 00 		pop		r4/r3/r2/r5
01260C 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; I2C Write
                	;
                	; Parameters:
                	; 	r1 = device ($6F)
                	; 	r2 = register to write
                	; 	r3 = value for register
                	; Returns
                	; 	r1 = 0 if successful, else r1 = -1 on error
                	;------------------------------------------------------------------------------
                	;
                	I2C_WRITE:
012610 E7 EF 01 00 		push	lr
012614 67 E1 01 00 	    push    r2
012618 E7 E1 01 00 	    push    r3
01261C 67 E2 01 00 	    push    r4
012620 82 10 02 70 		asl		r1,r1,#1				; clear rw bit for write
012624 82 41 00 1A 		mov		r4,r3					; save value r4
012628 02 31 00 1A 		mov		r3,r2
                		; transmit device #
01262C 7C DC FF 00 		ldi		r2,#I2C_MASTER			; r2 = I/O base address of controller
012630 0A 20 00 1C 
012634 60 11 06 00 		sb		r1,I2C_TX[r2]
012638 0A 10 20 01 		ldi		r1,#$90					; STA($80) and WR($10) bits set
01263C 60 11 08 00 		sb		r1,I2C_CMD[r2]
012640 39 0A 00 00 		bsr		I2C_WAIT_TC				; wait for transmit to complete
                		; transmit register #
012644 40 11 08 00 		lb		r1,I2C_STAT[r2]
012648 8C 10 00 01 		and		r1,r1,#$80				; test RxACK bit
01264C BD 10 DA FF 		bne  	r1,I2C_ERR
012650 60 31 06 00 		sb		r3,I2C_TX[r2]			; select register r3
012654 0A 10 20 00 		ldi		r1,#$10					; set WR bit
012658 60 11 08 00 		sb		r1,I2C_CMD[r2]
01265C B9 06 00 00 		bsr		I2C_WAIT_TC
                		; transmit value
012660 40 11 08 00 		lb		r1,I2C_STAT[r2]
012664 8C 10 00 01 		and		r1,r1,#$80				; test RxACK bit
012668 BD 10 CC FF 		bne  	r1,I2C_ERR
01266C 60 41 06 00 		sb		r4,I2C_TX[r2]			; select value in r4
012670 0A 10 A0 00 		ldi		r1,#$50					; set STO, WR bit
012674 60 11 08 00 		sb		r1,I2C_CMD[r2]
012678 39 03 00 00 		bsr		I2C_WAIT_TC
01267C 0A 10 00 00 		ldi		r1,#0					; everything okay
012680 57 4F 10 00 		pop		r4
012684 57 3F 10 00 	    pop     r3
012688 57 2F 10 00 	    pop     r2
01268C 3B FF 11 00 		rts

                	; Wait for I2C controller transmit complete
                	
                	I2C_WAIT_TC:
                	.0001:
012690 40 11 08 00 		lb		r1,I2C_STAT[r2]
012694 8C 10 04 00 		and		r1,r1,#2
012698 BD 10 FC FF 		bne 	r1,.0001
01269C 37 FF 01 00 		rtl

                	; Read the entire contents of the RTCC including 64 SRAM bytes
                	
                	RTCCReadbuf:
0126A0 E7 EF 01 00 	    push    lr
0126A4 B9 D1 FF FF 		bsr		I2C_INIT
0126A8 0A 20 00 00 		ldi		r2,#$00
                	.0001:
0126AC 0A 10 DE 00 		ldi		r1,#$6F
0126B0 B9 D6 FF FF 		bsr		I2C_READ
0126B4 60 11 80 37 		sb		r1,RTCC_BUF[r2]
0126B8 04 21 02 00 		add		r2,r2,#1
0126BC 16 11 C0 00 		cmpu	r1,r2,#$60
0126C0 BD 40 F6 FF 		blt		r1,.0001
0126C4 3B FF 11 00 		rts

                	; Write the entire contents of the RTCC including 64 SRAM bytes
                	
                	RTCCWritebuf:
0126C8 E7 EF 01 00 	    push    lr
0126CC B9 CC FF FF 		bsr		I2C_INIT
0126D0 0A 20 00 00 		ldi		r2,#$00
                	.0001:
0126D4 0A 10 DE 00 		ldi		r1,#$6F
0126D8 41 31 80 37 		lbu		r3,RTCC_BUF[r2]
0126DC B9 E6 FF FF 		bsr		I2C_WRITE
0126E0 04 21 02 00 		add		r2,r2,#1
0126E4 16 11 C0 00 		cmpu	r1,r2,#$60
0126E8 BD 40 F6 FF 		blt		r1,.0001
0126EC 3B FF 11 00 		rts

                	RTCCOscOn:
0126F0 E7 EF 01 00 	    push    lr
0126F4 B9 C7 FF FF 		bsr		I2C_INIT
0126F8 0A 10 DE 00 		ldi		r1,#$6F
0126FC 0A 20 00 00 		ldi		r2,#$00			; register zero
012700 B9 CC FF FF 		bsr		I2C_READ		; read register zero
012704 8D 30 00 01 		or		r3,r1,#$80		; set start osc bit
012708 0A 10 DE 00 		ldi		r1,#$6F
01270C B9 E0 FF FF 		bsr		I2C_WRITE
012710 3B FF 11 00 		rts

                	; ============================================================================
                	; SD/MMC Card interface
                	; ============================================================================
                	SD_INIT:
012714 E7 EF 01 00 	    push    lr
012718 7C DC FF 00 		ldi		r3,#SD_MASTER
01271C 0A 30 00 16 
012720 7C 00 00 00 		ldi		r2,#25000
012724 0A 20 50 C3 
012728 E1 21 58 00 		sc		r2,0x2c[r3]		; timeout register
                		; Software reset should be held active for several cycles to allow
                		; reset to be detected on the sd_clk domain.
01272C 0A 20 02 00 		ldi		r2,#1
012730 E0 21 50 00 		sb		r2,0x28[r3]		; software reset reg
012734 0A 20 04 00 		ldi		r2,#2
012738 E0 21 98 00 		sb		r2,0x4c[r3]		; prog /6 for clock divider
01273C 0A 10 C8 00 		ldi		r1,#100			; software reset delay
012740 39 47 00 00 		bsr     MicroDelay
012744 E0 01 50 00 		sb		r0,0x28[r3]		; clear software reset
012748 E1 01 08 00 		sc		r0,0x04[r3]		; command 0
01274C E2 01 00 00 		sh		r0,0x00[r3]		; arg 0
012750 39 28 00 00 		bsr		SD_WAIT_RESP
012754 C4 11 18 00 		lh		r1,0x0C[r3]		; read response register
012758 39 52 FC FF 		bsr		DisplayHalf
01275C 3B FF 11 00 		rts

                	SD_CMD8:
012760 E7 EF 01 00 	    push    lr
012764 7C DC FF 00 		ldi		r3,#SD_MASTER
012768 0A 30 00 16 
01276C 0A 20 34 10 		ldi		r2,#$81A
012770 E1 21 08 00 		sc		r2,0x04[r3]		; set command register
012774 0A 20 54 03 		ldi		r2,#$1AA
012778 E2 21 00 00 		sh		r2,0x00[r3]		; set command argument x1AA
01277C B9 22 00 00 		bsr		SD_WAIT_RESP
012780 7C 00 00 00 		sb		r1,SD_2_0
012784 7C 00 00 00 
012788 60 10 C8 04 
01278C C4 11 18 00 		lh		r1,0x0C[r3]		; read response register
012790 39 4B FC FF 		bsr		DisplayHalf
                		; send command zero
012794 E1 01 08 00 		sc		r0,0x04[r3]
012798 E2 01 00 00 		sh		r0,0x00[r3]
01279C B9 1E 00 00 		bsr		SD_WAIT_RESP
0127A0 7C 00 00 00 		lbu		r1,SD_2_0
0127A4 7C 00 00 00 
0127A8 41 10 C8 04 
0127AC BD 00 12 00 		beq		r1,.0001
0127B0 0A 10 64 00 		ldi		r1,#'2'
0127B4 39 D3 FD FF 		bsr		OutChar
0127B8 0A 10 5C 00 		ldi		r1,#'.'
0127BC 39 D2 FD FF 		bsr		OutChar
0127C0 0A 10 60 00 		ldi		r1,#'0'
0127C4 39 D1 FD FF 		bsr		OutChar
0127C8 B9 62 FC FF 		bsr		CRLF
0127CC 3B FF 11 00 		rts
.0001:
0127D0 E1 01 08 00 		sc		r0,0x04[r3]		; send CMD0
0127D4 E2 01 00 00 		sh		r0,0x00[r3]
                	.0002:
0127D8 C3 11 10 00 		lcu		r1,0x08[r3]
0127DC 8C 10 02 00 		and		r1,r1,#1
0127E0 BD 10 FC FF 		bne  	r1,.0002
0127E4 02 40 00 1A 		mov		r4,r0			; ret_reg = r4 = 0
                	.0004:
0127E8 02 52 00 1A 		mov		r5,r4
0127EC 7C 00 80 00 		and		r4,r4,#$80000000
0127F0 0C 42 00 00 
0127F4 3D 12 20 00 		bne  	r4,.0003
0127F8 0A 10 04 6E 		ldi		r1,#$3702		; CMD55|RSP48
0127FC E1 11 08 00 		sc		r1,0x04[r3]
012800 E2 01 00 00 		sh		r0,0x00[r3]
012804 B9 11 00 00 		bsr		SD_WAIT_RESP
012808 BD 10 38 00 		bne  	r1,.respOk
01280C 0A 10 04 52 		ldi		r1,#$2902		; ACMD41|RSP48
012810 E1 11 08 00 		sc		r1,0x04[r3]
012814 E2 01 00 00 		sh		r0,0x00[r3]
012818 39 0F 00 00 		bsr		SD_WAIT_RESP
01281C BD 10 2E 00 		bne  	r1,.respOk
012820 C4 41 18 00 		lh		r4,0x0c[r3]		; ret_reg = RESP1
012824 02 12 00 1A 		mov		r1,r4
012828 39 38 FC FF 		bsr		DisplayHalf
01282C 39 56 FC FF 		bsr		CRLF
012830 3A F7 FF FF 		bra		.0004
                	.0003:
012834 FC FF 00 00 		and		r1,r5,#$FFFFFF	; voltage mask
012838 8C 12 FE FF 
01283C B9 35 FC FF 		bsr		DisplayHalf
012840 B9 53 FC FF 		bsr		CRLF
                		; GetCID
012844 0A 10 02 04 		ldi		r1,#$201		; CMD2 + RSP146
012848 E1 11 08 00 		sc		r1,0x04[r3]
01284C E2 01 00 00 		sh		r0,0x00[r3]
012850 39 08 00 00 		bsr		SD_WAIT_RESP
                		; GetRCA
012854 0A 10 34 06 		ldi		r1,#$31A		; CMD3 + CICE + CRCE + RSP48
012858 E1 11 08 00 		sc		r1,0x04[r3]
01285C E2 01 00 00 		sh		r0,0x00[r3]
012860 39 06 00 00 		bsr		SD_WAIT_RESP
012864 C4 41 18 00 		lh		r4,0x0c[r3]			; r4 = RESP1
012868 7C FF FF 00 		and		r1,r4,#$FFFF0000	; r4 & RCA_MASK
01286C 0C 12 00 00 
012870 39 2F FC FF 		bsr		DisplayHalf
012874 39 4D FC FF 		bsr		CRLF
                	.respOk:
012878 0A 10 9E 00 		ldi		r1,#'O'
01287C 39 BA FD FF 		bsr		OutChar
012880 0A 10 D6 00 		ldi		r1,#'k'
012884 39 B9 FD FF 		bsr		OutChar
012888 B9 4A FC FF 		bsr		CRLF
01288C 3B FF 11 00 		rts

                	SD_WAIT_RESP:
012890 E7 EF 01 00 	    push    lr
012894 67 E1 01 00 		push	r2
012898 E7 E1 01 00 	    push    r3
01289C 7C DC FF 00 		ldi		r2,#SD_MASTER
0128A0 0A 20 00 16 
                	.0001:
0128A4 42 31 68 00 		lc		r3,0x34[r2]		; read error interrupt status reg
0128A8 42 11 60 00 		lc		r1,0x30[r2]		; read normal interrupt status reg
0128AC 8C 31 02 00 		and		r3,r3,#1		; get command timeout indicator
0128B0 BD 11 10 00 		bne  	r3,.0002
0128B4 8C 10 02 00 		and		r1,r1,#1		; wait for command complete bit to set
0128B8 BD 00 F6 FF 		beq		r1,.0001
0128BC 0A 10 02 00 		ldi		r1,#1
0128C0 57 3F 10 00 		pop		r3
0128C4 57 2F 10 00 	    pop     r2
0128C8 57 FF 11 00 	    pop     lr
0128CC 37 FF 01 00 		rtl
.0002:
0128D0 0A 10 A8 00 		ldi		r1,#'T'
0128D4 39 AF FD FF 		bsr		OutChar
0128D8 0A 10 9E 00 		ldi		r1,#'O'
0128DC 39 AE FD FF 		bsr		OutChar
0128E0 B9 3F FC FF 		bsr		CRLF
0128E4 0A 10 00 00 		ldi		r1,#0
0128E8 57 3F 10 00 		pop		r3
0128EC 57 2F 10 00 	    pop     r2
0128F0 57 FF 11 00 	    pop     lr
0128F4 37 FF 01 00 		rtl

                	; ============================================================================
                	; ============================================================================
                	
0128F8 7C 01 00 00 	    ldi     r1,#brkpt1           ; set breakpoint address
0128FC 0A 10 78 52 
012900 82 00 64 3C 	    mtspr   dbad0,r1
012904 0A 10 00 00 	    ldi     r1,#$0000000000000000   ; enable instruction breakpoint, turn on single step mode
012908 82 00 6C 3C 	    mtspr   dbctrl,r1
01290C 02 00 54 3C 	    mtspr   lotgrp,r0            ; operating system is group #0
012910 B9 04 00 00 	    bsr     SetupMemtags
012914 0A 10 C8 00 	    ldi     r1,#100
012918 39 0C 00 00 	    bsr     MicroDelay
01291C 3F 00 00 00 	    nop
012920 3F 00 00 00 	    nop
                	hangprg:
012924 3F 00 00 00 	    nop
012928 3F 00 00 00 	    nop
01292C 3F 00 00 00 	    nop
012930 BA FE FF FF 	    bra     hangprg
                	
                	SetupMemtags:
012934 02 00 50 3C 	    mtspr   ea,r0                ; select tag for first 64kB
012938 0A 10 0C 00 	    ldi     r1,#$0006            ; system only: readable, writeable, not executable
                	brkpt1:
01293C 82 00 52 3C 	    mtspr   tag,r1
012940 7C 01 00 00 	    ldi     r1,#$10000           ; select tag for second 64kB
012944 0A 10 00 00 
012948 82 00 50 3C 	    mtspr   ea,r1
01294C 0A 20 0A 00 	    ldi     r2,#$0005            ; system only: readable, executable, not writeable
012950 02 01 52 3C 	    mtspr   tag,r2
012954 0A 30 24 00 	    ldi     r3,#20-2             ; number of tags to setup
                	.0001:
012958 7C 01 00 00 	    addui   r1,r1,#$10000
01295C 94 10 00 00 
012960 82 00 50 3C 	    mtspr   ea,r1
012964 0A 20 0C 00 	    ldi     r2,#$0006            ; set them up as data
012968 02 01 52 3C 	    mtspr   tag,r2
01296C 95 31 02 00 	    subui   r3,r3,#1
012970 BD 11 F4 FF 	    bne     r3,.0001
012974 37 FF 01 00 	    rtl

                	;------------------------------------------------------------------------------
                	; MicroDelay
                	;     Delay for a short time for at least the specified number of clock cycles
                	;
                	; Parameters:
                	;     r1 = required delay in clock ticks
                	;------------------------------------------------------------------------------
                	;
                	MicroDelay:
012978 67 E1 01 00 	    push    r2
01297C E7 E1 01 00 	    push    r3
012980 02 30 08 3E 	    mfspr   r3,tick             ; get starting tick
                	.0001:
012984 02 20 08 3E 	    mfspr   r2,tick
012988 02 21 06 2A 	    subu    r2,r2,r3
01298C 02 21 02 0C 	    cmp     r2,r2,r1
012990 3D 41 FA FF 	    blt     r2,.0001
012994 57 3F 10 00 	    pop     r3
012998 57 2F 10 00 	    pop     r2
01299C 37 FF 01 00 	    rtl
;
0129A0 3F 00 00 00 	    nop
0129A4 3F 00 00 00 	    nop
                	
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	LoadFromSerial:
0129A8 E7 EF 01 00 	    push    lr
0129AC 7C 00 00 00 	    ldi     r3,#16384
0129B0 0A 30 00 80 
0129B4 7C 02 00 00 	    ldi     r2,#$24000          ; target store address
0129B8 0A 20 00 80 
                	.0001:
0129BC 39 62 FB FF 	    bsr     SerialGetCharDirect
0129C0 60 11 00 00 	    sb      r1,[r2]
0129C4 14 21 02 00 	    addui   r2,r2,#1
0129C8 95 31 02 00 	    subui   r3,r3,#1
0129CC BD 11 F8 FF 	    bne     r3,.0001
0129D0 3B FF 11 00 	    rts

                	nmi_rout:
0129D4 FC 00 00 00 	    ldi    sp,#CPU0_IRQ_STACK
0129D8 0A E0 01 10 
0129DC E7 E0 01 00 	    push   r1
0129E0 7C 01 00 00 	    lea    r1,msgParErr
0129E4 47 10 F8 53 
0129E8 39 1D FC FF 	    bsr    DisplayStringCRLF
0129EC 39 90 FE FF 	    bsr    KeybdGetCharWait
0129F0 57 1F 10 00 	    pop    r1
0129F4 02 E0 3F 6E 	    rti
                	
                	nmi_rout1:
0129F8 02 E0 3F 6E 	    rti
                	
                	msgParErr:
0129FC 50 61 72 69 	    db "Parity error",0
012A00 74 79 20 65 
012A04 72 72 6F 72 
012A08 00          
                	    
012A09 00 00 00    	    align  
                	
                	;------------------------------------------------------------------------------
                	; Execution fault. Occurs when an attempt is made to execute code from a
                	; page marked as non-executable.
                	;------------------------------------------------------------------------------
                	
                	exf_rout:
012A0C 0A 10 76 01 		ldi		r1,#$bb
012A10 7C DC FF 00 		sc		r1,LEDS
012A14 61 10 00 0C 
012A18 7C 01 00 00 		ldi		r1,#msgexf
012A1C 0A 10 50 55 
012A20 39 16 FC FF 		bsr		DisplayStringCRLF
                	.0001:
012A24 3A 00 00 00 		bra .0001
                	
                	;------------------------------------------------------------------------------
                	; Data read fault. Occurs when an attempt is made to read from a page marked
                	; as non-readble.
                	;------------------------------------------------------------------------------
                	
                	drf_rout:
012A28 0A 10 76 01 		ldi		r1,#$bb
012A2C 7C DC FF 00 		sc		r1,LEDS
012A30 61 10 00 0C 
012A34 7C 01 00 00 		ldi		r1,#msgdrf
012A38 0A 10 5A 55 
012A3C B9 12 FC FF 		bsr		DisplayStringCRLF
                	.0001:
012A40 3A 00 00 00 		bra .0001
                	
                	;------------------------------------------------------------------------------
                	; Data write fault. Occurs when an attempt is made to write to a page marked
                	; as non-writeable.
                	;------------------------------------------------------------------------------
                	
                	dwf_rout:
012A44 0A 10 76 01 		ldi		r1,#$bb
012A48 7C DC FF 00 		sc		r1,LEDS
012A4C 61 10 00 0C 
012A50 7C 01 00 00 		ldi		r1,#msgdwf
012A54 0A 10 64 55 
012A58 39 0F FC FF 		bsr		DisplayStringCRLF
                	.0001:
012A5C 3A 00 00 00 		bra .0001
                	
                	;------------------------------------------------------------------------------
                	; Privilege violation fault. Occurs when the current privilege level isn't
                	; sufficient to allow access.
                	;------------------------------------------------------------------------------
                	
                	priv_rout:
012A60 46 EC 21 05 	    lw      sp,TCB_SYS_Stack[tr]
012A64 0A 10 78 01 		ldi		r1,#$bc
012A68 7C DC FF 00 		sc		r1,LEDS
012A6C 61 10 00 0C 
012A70 7C 01 00 00 		ldi		r1,#msgPriv
012A74 0A 10 6E 55 
012A78 B9 FB FB FF 		bsr		DisplayString
012A7C 02 10 12 3E 		mfspr   r1,epc
012A80 39 ED FB FF 		bsr     DisplayHalf
012A84 39 0B FC FF 		bsr     CRLF
012A88 B9 7C FE FF 		bsr		KeybdGetCharWait
012A8C 7C 01 00 00 		ldi     r1,#Monitor|1
012A90 0A 10 06 28 
012A94 82 00 12 3C 		mtspr   epc,r1
012A98 3F 00 00 00 		nop
012A9C 3F 00 00 00 		nop
012AA0 02 E0 3D 6E 		rte
                	.0001:
012AA4 3A 00 00 00 		bra .0001
                	
                	;------------------------------------------------------------------------------
                	; Message strings for the faults.
                	;------------------------------------------------------------------------------
                	
                	msgexf:
012AA8 65 78 66 20 		db	"exf ",0
012AAC 00          
                	msgdrf:
012AAD 64 72 66 20 		db	"drf ",0
012AB1 00          
                	msgdwf:
012AB2 64 77 66 20 		db	"dwf ",0
012AB6 00          
                	msgPriv:
012AB7 70 72 69 76 		db	"priv fault: PC=",0
012ABB 20 66 61 75 
012ABF 6C 74 3A 20 
012AC3 50 43 3D 00 
                	msgUninit:
012AC7 75 6E 69 6E 		db	"uninit int.",0
012ACB 69 74 20 69 
012ACF 6E 74 2E 00 
                	msgBusErr:
012AD3 0D 0A 42 75 	    db  CR,LF,"Bus error PC=",0
012AD7 73 20 65 72 
012ADB 72 6F 72 20 
012ADF 50 43 3D 00 
                	msgEA:
012AE3 20 45 41 3D 	    db  " EA=",0
012AE7 00          
                	msgUninitIRQ:
012AE8 55 6E 69 6E 	    db  "Uninitialized IRQ",0
012AEC 69 74 69 61 
012AF0 6C 69 7A 65 
012AF4 64 20 49 52 
012AF8 51 00       
                	
012AFA 00 00       	    align 
                	
                	UninitIRQ:
012AFC 7C 01 00 00 	    ldi   r1,msgUninitIRQ
012B00 0A 10 D0 55 
012B04 39 EA FB FF 	    bsr   DisplayString
                	.0001:
012B08 3A 00 00 00 	    bra   .0001
                	
                	;------------------------------------------------------------------------------
                	; Bus error routine.
                	;------------------------------------------------------------------------------
                	
                	berr_rout:
012B0C 7C 00 00 00 	    ldi     sp,#$7800
012B10 0A E0 01 F0 
012B14 FC 00 00 00 		ldi		r1,#$bebe
012B18 0A 10 7C 7D 
012B1C 7C DC FF 00 		sc		r1,LEDS
012B20 61 10 00 0C 
012B24 7C 01 00 00 		ldi     r1,#msgBusErr
012B28 0A 10 A6 55 
012B2C 39 E5 FB FF 		bsr     DisplayString
012B30 02 10 10 3E 		mfspr   r1,ipc
012B34 39 D4 FB FF 		bsr		DisplayWord
012B38 7C 01 00 00 		ldi     r1,#msgEA
012B3C 0A 10 C6 55 
012B40 B9 E2 FB FF 		bsr     DisplayString
012B44 02 10 16 3E 	    mfspr   r1,bear
012B48 B9 D1 FB FF 		bsr     DisplayWord
012B4C 39 F2 FB FF 		bsr     CRLF
012B50 B9 63 FE FF 		bsr		KeybdGetCharWait
                	
                		; In order to return an RTI must be used to exit the routine (or interrupts
                		; will permanently disabled). The RTI instruction clears an internal
                		; processor flag used to prevent nested interrupts.
                		; Since this is a serious error the system is just restarted. So the IPC
                		; is set to point to the restart address.
                	
012B54 7C 01 00 00 		ldi     r1,#start|1
012B58 0A 10 52 01 
012B5C 82 00 10 3C 		mtspr   ipc,r1
                		
                		; Allow pipeline time for IPC to update before RTI (there's no results
                		; forwarding on SPR's).
012B60 3F 00 00 00 		nop     
012B64 3F 00 00 00 		nop
012B68 02 E0 3F 6E 		rti
                	
                	
                	SSM_ISR:
012B6C 02 E0 3B 6E 	    rtd
                	
                	; -----------------------------------------------------------------------------
                	; Breakpoint routine.
                	; -----------------------------------------------------------------------------
                	
                	BPT_ISR:
012B70 FC 7C 00 00 	    ldi      sp,#CPU0_DBG_STACK
012B74 0A E0 01 E0 
012B78 02 00 6C 3C 	    mtspr    dbctrl,r0
012B7C 02 10 0E 3E 	    mfspr    r1,dpc
012B80 8C 10 FC FF 	    and      r1,r1,#-2        ; clear LSB
012B84 E7 E0 01 00 	    push     r1
012B88 95 10 40 00 	    subui    r1,r1,#32
012B8C E7 E0 01 00 	    push     r1
012B90 39 B2 0B 00 	    bsr      disassem20
012B94 39 5B FE FF 		bsr		 KeybdGetCharWait
012B98 02 E0 3B 6E 	    rtd
                	.0001:
012B9C 3A 00 00 00 	    bra     .0001
                	
                		code
                		align	16                	
                	get_datetime:
012BA0 15 EF 21 00 		      	subui	sp,sp,#16
012BA4 E7 ED 01 00 		      	push 	bp
012BA8 02 BF 01 1A 		      	mov  	bp,sp
012BAC 15 EF 11 00 		      	subui	sp,sp,#8
012BB0 E7 E5 01 00 		      	push 	r11
012BB4 67 E6 01 00 		      	push 	r12
012BB8 E7 E6 01 00 		      	push 	r13
012BBC 67 E7 01 00 		      	push 	r14
012BC0 E7 E7 01 00 		      	push 	r15
012BC4 67 E8 01 00 		      	push 	r16
012BC8 E7 E8 01 00 		      	push 	r17
012BCC 0A B0 80 37 		      	ldi  	r11,#RTCC_BUF
012BD0 C6 CD A0 00 		      	lw   	r12,80[bp]
012BD4 C6 DD 90 00 		      	lw   	r13,72[bp]
012BD8 C6 ED 80 00 		      	lw   	r14,64[bp]
012BDC C6 FD 70 00 		      	lw   	r15,56[bp]
012BE0 C6 0D 61 00 		      	lw   	r16,48[bp]
012BE4 C6 1D 51 00 		      	lw   	r17,40[bp]
012BE8 BD 08 20 00 		      	beq  	r17,set_time_serial_2
012BEC C1 35 0C 00 		      	lbu  	r3,6[r11]
012BF0 82 31 00 20 		      	sxb  	r3,r3
012BF4 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012BF8 0A 30 A0 0F 		      	ldi  	r3,#2000
012BFC C6 4D F0 FF 		      	lw   	r4,-8[bp]
012C00 0C 42 1E 00 		      	and  	r4,r4,#15
012C04 C6 5D F0 FF 		      	lw   	r5,-8[bp]
012C08 8C 52 E0 01 		      	and  	r5,r5,#240
012C0C 82 52 08 78 		      	asri 	r5,r5,#4
012C10 87 52 14 00 		      	mul  	r5,r5,#10
012C14 02 42 0A 28 		      	addu 	r4,r4,r5
012C18 82 31 08 28 		      	addu 	r3,r3,r4
012C1C E3 3D F0 FF 		      	sw   	r3,-8[bp]
012C20 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012C24 E3 38 00 00 		      	sw   	r3,[r17]
                	set_time_serial_2:
012C28 3D 08 1C 00 		      	beq  	r16,set_time_serial_4
012C2C C1 35 08 00 		      	lbu  	r3,4[r11]
012C30 82 31 00 20 		      	sxb  	r3,r3
012C34 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012C38 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012C3C 8C 31 1E 00 		      	and  	r3,r3,#15
012C40 C6 4D F0 FF 		      	lw   	r4,-8[bp]
012C44 0C 42 20 00 		      	and  	r4,r4,#16
012C48 02 42 08 78 		      	asri 	r4,r4,#4
012C4C 07 42 14 00 		      	mul  	r4,r4,#10
012C50 82 31 08 28 		      	addu 	r3,r3,r4
012C54 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012C58 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012C5C 63 38 00 00 		      	sw   	r3,[r16]
                	set_time_serial_4:
012C60 BD 07 1C 00 		      	beq  	r15,set_time_serial_6
012C64 C1 35 0A 00 		      	lbu  	r3,5[r11]
012C68 82 31 00 20 		      	sxb  	r3,r3
012C6C E3 3D F0 FF 		      	sw   	r3,-8[bp]
012C70 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012C74 8C 31 1E 00 		      	and  	r3,r3,#15
012C78 C6 4D F0 FF 		      	lw   	r4,-8[bp]
012C7C 0C 42 60 00 		      	and  	r4,r4,#48
012C80 02 42 08 78 		      	asri 	r4,r4,#4
012C84 07 42 14 00 		      	mul  	r4,r4,#10
012C88 82 31 08 28 		      	addu 	r3,r3,r4
012C8C E3 3D F0 FF 		      	sw   	r3,-8[bp]
012C90 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012C94 E3 37 00 00 		      	sw   	r3,[r15]
                	set_time_serial_6:
012C98 3D 07 22 00 		      	beq  	r14,set_time_serial_8
012C9C C1 35 04 00 		      	lbu  	r3,2[r11]
012CA0 82 31 00 20 		      	sxb  	r3,r3
012CA4 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012CA8 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012CAC 8C 31 1E 00 		      	and  	r3,r3,#15
012CB0 C6 4D F0 FF 		      	lw   	r4,-8[bp]
012CB4 0C 42 60 00 		      	and  	r4,r4,#48
012CB8 02 42 08 78 		      	asri 	r4,r4,#4
012CBC 07 42 14 00 		      	mul  	r4,r4,#10
012CC0 82 31 08 28 		      	addu 	r3,r3,r4
012CC4 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012CC8 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012CCC 8C 31 7E 00 		      	and  	r3,r3,#63
012CD0 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012CD4 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012CD8 63 37 00 00 		      	sw   	r3,[r14]
                	set_time_serial_8:
012CDC BD 06 1C 00 		      	beq  	r13,set_time_serial_10
012CE0 C1 35 02 00 		      	lbu  	r3,1[r11]
012CE4 82 31 00 20 		      	sxb  	r3,r3
012CE8 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012CEC C6 3D F0 FF 		      	lw   	r3,-8[bp]
012CF0 8C 31 1E 00 		      	and  	r3,r3,#15
012CF4 C6 4D F0 FF 		      	lw   	r4,-8[bp]
012CF8 0C 42 E0 00 		      	and  	r4,r4,#112
012CFC 02 42 08 78 		      	asri 	r4,r4,#4
012D00 07 42 14 00 		      	mul  	r4,r4,#10
012D04 82 31 08 28 		      	addu 	r3,r3,r4
012D08 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012D0C C6 3D F0 FF 		      	lw   	r3,-8[bp]
012D10 E3 36 00 00 		      	sw   	r3,[r13]
                	set_time_serial_10:
012D14 3D 06 1C 00 		      	beq  	r12,set_time_serial_12
012D18 C1 35 00 00 		      	lbu  	r3,[r11]
012D1C 82 31 00 20 		      	sxb  	r3,r3
012D20 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012D24 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012D28 8C 31 1E 00 		      	and  	r3,r3,#15
012D2C C6 4D F0 FF 		      	lw   	r4,-8[bp]
012D30 0C 42 E0 00 		      	and  	r4,r4,#112
012D34 02 42 08 78 		      	asri 	r4,r4,#4
012D38 07 42 14 00 		      	mul  	r4,r4,#10
012D3C 82 31 08 28 		      	addu 	r3,r3,r4
012D40 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012D44 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012D48 63 36 00 00 		      	sw   	r3,[r12]
                	set_time_serial_12:
                	set_time_serial_14:
012D4C 57 1F 11 00 		      	pop  	r17
012D50 57 0F 11 00 		      	pop  	r16
012D54 57 FF 10 00 		      	pop  	r15
012D58 57 EF 10 00 		      	pop  	r14
012D5C 57 DF 10 00 		      	pop  	r13
012D60 57 CF 10 00 		      	pop  	r12
012D64 57 BF 10 00 		      	pop  	r11
012D68 82 ED 01 1A 		      	mov  	sp,bp
012D6C 57 BF 11 00 		      	pop  	bp
012D70 37 FF 21 00 		      	rtl  	#16
                	ToJul:
012D74 15 EF 21 00 		      	subui	sp,sp,#16
012D78 E7 ED 01 00 		      	push 	bp
012D7C 02 BF 01 1A 		      	mov  	bp,sp
012D80 15 EF 41 00 		      	subui	sp,sp,#32
012D84 C6 3D 50 00 		      	lw   	r3,40[bp]
012D88 E3 3D E0 FF 		      	sw   	r3,-16[bp]
012D8C C6 3D 60 00 		      	lw   	r3,48[bp]
012D90 E3 3D D0 FF 		      	sw   	r3,-24[bp]
012D94 C6 3D 70 00 		      	lw   	r3,56[bp]
012D98 E3 3D C0 FF 		      	sw   	r3,-32[bp]
012D9C FC FF FF FF 		      	ldi  	r3,#-32075
012DA0 0A 30 6A 05 
012DA4 C6 4D C0 FF 		      	lw   	r4,-32[bp]
012DA8 7C 6B 00 00 		      	ldi  	r5,#7012800
012DAC 0A 50 80 03 
012DB0 C6 6D E0 FF 		      	lw   	r6,-16[bp]
012DB4 C6 7D D0 FF 		      	lw   	r7,-24[bp]
012DB8 95 73 1C 00 		      	subu 	r7,r7,#14
012DBC 88 73 18 00 		      	divs 	r7,r7,#12
012DC0 02 63 0E 28 		      	addu 	r6,r6,r7
012DC4 07 63 6A 0B 		      	mul  	r6,r6,#1461
012DC8 82 52 0C 28 		      	addu 	r5,r5,r6
012DCC 82 52 04 78 		      	asri 	r5,r5,#2
012DD0 02 42 0A 28 		      	addu 	r4,r4,r5
012DD4 0A 50 44 FA 		      	ldi  	r5,#-734
012DD8 C6 6D D0 FF 		      	lw   	r6,-24[bp]
012DDC C6 7D D0 FF 		      	lw   	r7,-24[bp]
012DE0 95 73 1C 00 		      	subu 	r7,r7,#14
012DE4 88 73 18 00 		      	divs 	r7,r7,#12
012DE8 87 73 18 00 		      	mul  	r7,r7,#12
012DEC 02 63 0E 2A 		      	subu 	r6,r6,r7
012DF0 07 63 DE 02 		      	mul  	r6,r6,#367
012DF4 82 52 0C 28 		      	addu 	r5,r5,r6
012DF8 88 52 18 00 		      	divs 	r5,r5,#12
012DFC 02 42 0A 28 		      	addu 	r4,r4,r5
012E00 0A 50 48 26 		      	ldi  	r5,#4900
012E04 C6 6D E0 FF 		      	lw   	r6,-16[bp]
012E08 C6 7D D0 FF 		      	lw   	r7,-24[bp]
012E0C 95 73 1C 00 		      	subu 	r7,r7,#14
012E10 88 73 18 00 		      	divs 	r7,r7,#12
012E14 02 63 0E 28 		      	addu 	r6,r6,r7
012E18 82 52 0C 28 		      	addu 	r5,r5,r6
012E1C 88 52 C8 00 		      	divs 	r5,r5,#100
012E20 87 52 06 00 		      	mul  	r5,r5,#3
012E24 82 52 04 78 		      	asri 	r5,r5,#2
012E28 02 42 0A 2A 		      	subu 	r4,r4,r5
012E2C 82 31 08 28 		      	addu 	r3,r3,r4
012E30 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012E34 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012E38 82 11 00 1A 		      	mov  	r1,r3
                	set_time_serial_17:
012E3C 82 ED 01 1A 		      	mov  	sp,bp
012E40 57 BF 11 00 		      	pop  	bp
012E44 37 FF 21 00 		      	rtl  	#16
                	set_time_serial:
012E48 E7 EF 01 00 		      	push 	lr
012E4C 67 EE 01 00 		      	push 	xlr
012E50 E7 ED 01 00 		      	push 	bp
012E54 7C 01 00 00 		      	ldi  	xlr,#set_time_serial_19
012E58 0A C0 F1 5D 
012E5C 02 BF 01 1A 		      	mov  	bp,sp
012E60 15 EF 91 00 		      	subui	sp,sp,#72
012E64 E5 ED 81 FF 		      	pea  	-64[bp]
012E68 E5 ED 91 FF 		      	pea  	-56[bp]
012E6C E5 ED A1 FF 		      	pea  	-48[bp]
012E70 E5 ED B1 FF 		      	pea  	-40[bp]
012E74 E5 ED C1 FF 		      	pea  	-32[bp]
012E78 E5 ED D1 FF 		      	pea  	-24[bp]
012E7C B9 A4 FF FF 		      	bsr  	get_datetime
012E80 14 EF 61 00 		      	addui	sp,sp,#48
012E84 C6 3D 80 FF 		      	lw   	r3,-64[bp]
012E88 82 31 14 70 		      	asli 	r3,r3,#10
012E8C C6 4D 90 FF 		      	lw   	r4,-56[bp]
012E90 FC 00 00 00 		      	mul  	r4,r4,#61440
012E94 07 42 00 E0 
012E98 82 31 08 28 		      	addu 	r3,r3,r4
012E9C C6 4D A0 FF 		      	lw   	r4,-48[bp]
012EA0 7C 38 00 00 		      	mul  	r4,r4,#3686400
012EA4 07 42 00 80 
012EA8 82 31 08 28 		      	addu 	r3,r3,r4
012EAC E7 E1 01 00 		      	push 	r3
012EB0 E6 ED B1 FF 		      	push 	-40[bp]
012EB4 E6 ED C1 FF 		      	push 	-32[bp]
012EB8 E6 ED D1 FF 		      	push 	-24[bp]
012EBC 39 D7 FF FF 		      	bsr  	ToJul
012EC0 14 EF 31 00 		      	addui	sp,sp,#24
012EC4 57 3F 10 00 		      	pop  	r3
012EC8 82 40 00 1A 		      	mov  	r4,r1
012ECC 7C 46 05 00 		      	mul  	r4,r4,#88473600
012ED0 07 42 00 00 
012ED4 82 31 08 28 		      	addu 	r3,r3,r4
012ED8 63 30 00 22 		      	sw   	r3,Milliseconds
012EDC C6 3D E0 FF 		      	lw   	r3,-16[bp]
012EE0 82 11 00 1A 		      	mov  	r1,r3
                	set_time_serial_20:
012EE4 82 ED 01 1A 		      	mov  	sp,bp
012EE8 57 BF 11 00 		      	pop  	bp
012EEC 57 CF 11 00 		      	pop  	xlr
012EF0 57 FF 11 00 		      	pop  	lr
012EF4 37 FF 01 00 		      	rtl  	#0
                	set_time_serial_19:
012EF8 C6 FD 11 00 		      	lw   	lr,8[bp]
012EFC E3 FD 21 00 		      	sw   	lr,16[bp]
012F00 BA FC FF FF 		      	bra  	set_time_serial_20
                	        code
                	
                	pSpriteController:
012F04 00 D0 DA FF 		dw	-2437120
012F08 FF FF FF FF 
                	
                	sprite_demo:
012F0C 15 EF 21 00 		      	subui	sp,sp,#16
012F10 E7 ED 01 00 		      	push 	bp
012F14 02 BF 01 1A 		      	mov  	bp,sp
012F18 15 EF 31 00 		      	subui	sp,sp,#24
012F1C E7 E5 01 00 		      	push 	r11
012F20 67 E6 01 00 		      	push 	r12
012F24 E7 E6 01 00 		      	push 	r13
012F28 FC 00 00 00 		      	ldi  	r11,#sprites
012F2C 0A B0 00 A0 
012F30 7C DC FF FF 		      	ldi  	r12,#-2356224
012F34 0A C0 00 18 
012F38 7C D8 FF FF 		      	ldi  	r13,#-2621440
012F3C 0A D0 00 00 
012F40 E3 0D F0 FF 		      	sw   	r0,-8[bp]
                	sprite_demo_4:
012F44 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012F48 86 31 40 00 		      	cmp  	r3,r3,#32
012F4C BD 31 18 00 		      	bge  	r3,sprite_demo_5
012F50 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012F54 82 31 04 70 		      	asli 	r3,r3,#2
012F58 82 31 04 70 		      	asli 	r3,r3,#2
012F5C 7C 01 00 00 		      	lw   	r4,pSpriteController
012F60 46 40 08 5E 
012F64 82 31 08 28 		      	addu 	r3,r3,r4
012F68 C5 41 08 00 		      	lhu  	r4,4[r3]
012F6C 0D 42 98 01 		      	ori  	r4,r4,#204
012F70 E2 41 08 00 		      	sh   	r4,4[r3]
                	sprite_demo_6:
012F74 E4 1D F0 FF 		      	inc  	-8[bp],#1
012F78 BA F9 FF FF 		      	bra  	sprite_demo_4
                	sprite_demo_5:
012F7C E3 0D F0 FF 		      	sw   	r0,-8[bp]
                	sprite_demo_7:
012F80 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012F84 7C 00 00 00 		      	cmp  	r3,r3,#16384
012F88 86 31 00 80 
012F8C BD 31 0E 00 		      	bge  	r3,sprite_demo_8
012F90 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012F94 82 31 04 70 		      	asli 	r3,r3,#2
012F98 45 46 00 00 		      	lhu  	r4,[r12]
012F9C EA 46 06 00 		      	sh   	r4,0[r13+r3]
                	sprite_demo_9:
012FA0 E4 1D F0 FF 		      	inc  	-8[bp],#1
012FA4 BA FB FF FF 		      	bra  	sprite_demo_7
                	sprite_demo_8:
012FA8 E3 0D F0 FF 		      	sw   	r0,-8[bp]
                	sprite_demo_10:
012FAC C6 3D F0 FF 		      	lw   	r3,-8[bp]
012FB0 86 31 40 00 		      	cmp  	r3,r3,#32
012FB4 BD 31 38 00 		      	bge  	r3,sprite_demo_11
012FB8 46 36 00 00 		      	lw   	r3,[r12]
012FBC 89 31 A8 0A 		      	mod  	r3,r3,#1364
012FC0 C6 4D F0 FF 		      	lw   	r4,-8[bp]
012FC4 02 42 0A 70 		      	asli 	r4,r4,#5
012FC8 EB 35 08 00 		      	sw   	r3,0[r11+r4]
012FCC 46 36 00 00 		      	lw   	r3,[r12]
012FD0 89 31 00 06 		      	mod  	r3,r3,#768
012FD4 C6 4D F0 FF 		      	lw   	r4,-8[bp]
012FD8 02 42 0A 70 		      	asli 	r4,r4,#5
012FDC 02 42 16 28 		      	addu 	r4,r4,r11
012FE0 63 32 10 00 		      	sw   	r3,8[r4]
012FE4 46 36 00 00 		      	lw   	r3,[r12]
012FE8 8C 31 0E 00 		      	and  	r3,r3,#7
012FEC 95 31 08 00 		      	subu 	r3,r3,#4
012FF0 C6 4D F0 FF 		      	lw   	r4,-8[bp]
012FF4 02 42 0A 70 		      	asli 	r4,r4,#5
012FF8 02 42 16 28 		      	addu 	r4,r4,r11
012FFC 63 32 20 00 		      	sw   	r3,16[r4]
013000 46 36 00 00 		      	lw   	r3,[r12]
013004 8C 31 0E 00 		      	and  	r3,r3,#7
013008 95 31 08 00 		      	subu 	r3,r3,#4
01300C C6 4D F0 FF 		      	lw   	r4,-8[bp]
013010 02 42 0A 70 		      	asli 	r4,r4,#5
013014 02 42 16 28 		      	addu 	r4,r4,r11
013018 63 32 30 00 		      	sw   	r3,24[r4]
                	sprite_demo_12:
01301C E4 1D F0 FF 		      	inc  	-8[bp],#1
013020 BA F1 FF FF 		      	bra  	sprite_demo_10
                	sprite_demo_11:
                	sprite_demo_13:
013024 0A 30 02 00 		      	ldi  	r3,#1
013028 BD 01 68 00 		      	beq  	r3,sprite_demo_14
01302C E3 0D F0 FF 		      	sw   	r0,-8[bp]
                	sprite_demo_15:
013030 C6 3D F0 FF 		      	lw   	r3,-8[bp]
013034 86 31 40 00 		      	cmp  	r3,r3,#32
013038 BD 31 58 00 		      	bge  	r3,sprite_demo_16
01303C C6 3D F0 FF 		      	lw   	r3,-8[bp]
013040 82 31 0A 70 		      	asli 	r3,r3,#5
013044 CE 35 06 00 		      	lw   	r3,0[r11+r3]
013048 C6 4D F0 FF 		      	lw   	r4,-8[bp]
01304C 02 42 0A 70 		      	asli 	r4,r4,#5
013050 02 42 16 28 		      	addu 	r4,r4,r11
013054 46 42 20 00 		      	lw   	r4,16[r4]
013058 82 31 08 28 		      	addu 	r3,r3,r4
01305C 8C 31 FE 07 		      	and  	r3,r3,#1023
013060 C6 4D F0 FF 		      	lw   	r4,-8[bp]
013064 02 42 0A 70 		      	asli 	r4,r4,#5
013068 EB 35 08 00 		      	sw   	r3,0[r11+r4]
01306C C6 3D F0 FF 		      	lw   	r3,-8[bp]
013070 82 31 0A 70 		      	asli 	r3,r3,#5
013074 82 31 16 28 		      	addu 	r3,r3,r11
013078 C6 31 10 00 		      	lw   	r3,8[r3]
01307C C6 4D F0 FF 		      	lw   	r4,-8[bp]
013080 02 42 0A 70 		      	asli 	r4,r4,#5
013084 02 42 16 28 		      	addu 	r4,r4,r11
013088 46 42 30 00 		      	lw   	r4,24[r4]
01308C 82 31 08 28 		      	addu 	r3,r3,r4
013090 8C 31 FE 03 		      	and  	r3,r3,#511
013094 C6 4D F0 FF 		      	lw   	r4,-8[bp]
013098 02 42 0A 70 		      	asli 	r4,r4,#5
01309C 02 42 16 28 		      	addu 	r4,r4,r11
0130A0 63 32 10 00 		      	sw   	r3,8[r4]
0130A4 C6 3D F0 FF 		      	lw   	r3,-8[bp]
0130A8 82 31 0A 70 		      	asli 	r3,r3,#5
0130AC CE 35 06 00 		      	lw   	r3,0[r11+r3]
0130B0 C6 4D F0 FF 		      	lw   	r4,-8[bp]
0130B4 02 42 0A 70 		      	asli 	r4,r4,#5
0130B8 02 42 16 28 		      	addu 	r4,r4,r11
0130BC 46 42 10 00 		      	lw   	r4,8[r4]
0130C0 02 42 20 70 		      	asli 	r4,r4,#16
0130C4 82 31 08 28 		      	addu 	r3,r3,r4
0130C8 C6 4D F0 FF 		      	lw   	r4,-8[bp]
0130CC 02 42 04 70 		      	asli 	r4,r4,#2
0130D0 02 42 04 70 		      	asli 	r4,r4,#2
0130D4 7C 01 00 00 		      	lw   	r5,pSpriteController
0130D8 46 50 08 5E 
0130DC EA 32 08 00 		      	sh   	r3,0[r5+r4]
                	sprite_demo_17:
0130E0 E4 1D F0 FF 		      	inc  	-8[bp],#1
0130E4 BA E9 FF FF 		      	bra  	sprite_demo_15
                	sprite_demo_16:
0130E8 7C 0F 00 00 		      	     	            ldi  r1,#1000000
0130EC 0A 10 80 84 
0130F0 39 11 FF FF 	            bsr  MicroDelay
                	        
0130F4 3A E6 FF FF 		      	bra  	sprite_demo_13
                	sprite_demo_14:
                	sprite_demo_18:
0130F8 57 DF 10 00 		      	pop  	r13
0130FC 57 CF 10 00 		      	pop  	r12
013100 57 BF 10 00 		      	pop  	r11
013104 82 ED 01 1A 		      	mov  	sp,bp
013108 57 BF 11 00 		      	pop  	bp
01310C 37 FF 21 00 		      	rtl  	#16
                	
                	; error codes
                	E_Ok		=		0x00
                	E_Arg		=		0x01
                	E_BadMbx	=		0x04
                	E_QueFull	=		0x05
                	E_NoThread	=		0x06
                	E_NotAlloc	=		0x09
                	E_NoMsg		=		0x0b
                	E_Timeout	=		0x10
                	E_BadAlarm	=		0x11
                	E_NotOwner	=		0x12
                	E_QueStrategy =		0x13
                	E_BadDevNum	=		0x18
                	E_DCBInUse	=		0x19
                	; Device driver errors
                	E_BadDevNum	=		0x20
                	E_NoDev		=		0x21
                	E_BadDevOp	=		0x22
                	E_ReadError	=		0x23
                	E_WriteError =		0x24
                	E_BadBlockNum	=	0x25
                	E_TooManyBlocks	=	0x26
                	
                	; resource errors
                	E_NoMoreMbx	=		0x40
                	E_NoMoreMsgBlks	=	0x41
                	E_NoMoreAlarmBlks	=0x44
                	E_NoMoreTCBs	=	0x45
                	E_NoMem		= 12
                	
                	; task status
                	TS_NONE     =0
                	TS_TIMEOUT	=1
                	TS_WAITMSG	=2
                	TS_PREEMPT	=4
                	TS_RUNNING	=8
                	TS_READY	=16
                	TS_SLEEP	=32
                	
                	TS_TIMEOUT_BIT	=0
                	TS_WAITMSG_BIT	=1
                	TS_RUNNING_BIT	=3
                	TS_READY_BIT	=4
                	
                	PRI_HIGHEST	=0
                	PRI_HIGH	=1
                	PRI_NORMAL	=3
                	PRI_LOW		=5
                	PRI_LOWEST	=7
                	
                	
                	NR_TCB		EQU		256
                	TCB_BackLink    EQU     0
                	TCB_r1          EQU     8
                	TCB_r2          EQU     $10
                	TCB_r3          EQU     $18
                	TCB_r4          EQU     $20
                	TCB_r5          EQU     $28
                	TCB_r6          EQU     $30
                	TCB_r7          EQU     $38
                	TCB_r8          EQU     $40
                	TCB_r9          EQU     $48
                	TCB_r10         EQU     $50
                	TCB_r11         EQU     $58
                	TCB_r12         EQU     $60
                	TCB_r13         EQU     $68
                	TCB_r14         EQU     $70
                	TCB_r15         EQU     $78
                	TCB_r16         EQU     $80
                	TCB_r17         EQU     $88
                	TCB_r18         EQU     $90
                	TCB_r19         EQU     $98
                	TCB_r20         EQU     $A0
                	TCB_r21         EQU     $A8
                	TCB_r22         EQU     $B0
                	TCB_r23         EQU     $B8
                	TCB_r24         EQU     $C0
                	TCB_r25         EQU     $C8
                	TCB_r26         EQU     $D0
                	TCB_r27         EQU     $D8
                	TCB_r28         EQU     $E0
                	TCB_r29         EQU     $E8
                	TCB_r30         EQU     $F0
                	TCB_r31         EQU     $F8
                	
                	TCB_SP0Save		EQU		0x100
                	TCB_SP1Save		EQU		0x108
                	TCB_SP2Save		EQU		0x110
                	TCB_SP3Save		EQU		0x118
                	TCB_SP4Save		EQU		0x120
                	TCB_SP5Save		EQU		0x128
                	TCB_SP6Save		EQU		0x130
                	TCB_SP7Save		EQU		0x138
                	TCB_SP8Save		EQU		0x140
                	TCB_SP9Save		EQU		0x148
                	TCB_SP10Save	EQU		0x150
                	TCB_SP11Save	EQU		0x158
                	TCB_SP12Save	EQU		0x160
                	TCB_SP13Save	EQU		0x168
                	TCB_SP14Save	EQU		0x170
                	TCB_SP15Save	EQU		0x178
                	
                	TCB_IPC         EQU     0x180
                	TCB_DPC         EQU     0x188
                	TCB_EPC         EQU     0x190
                	TCB_ISP         EQU     0x198
                	TCB_DSP         EQU     0x1A0
                	TCB_ESP         EQU     0x1A8
                	TCB_CR0         EQU     0x1B0
                	
                	TCB_NextRdy     EQU     $200
                	TCB_PrevRdy     EQU     $208
                	TCB_Status      EQU     $210
                	TCB_Priority    EQU     $212
                	TCB_hJCB        EQU     $214
                	TCB_NextFree    EQU     $218
                	TCB_NextTo      EQU     $228
                	TCB_PrevTo      EQU     $230
                	TCB_mbq_next    EQU     $238
                	TCB_mbq_prev    EQU     $240
                	TCB_MSG_D1      EQU     $248
                	TCB_MSG_D2      EQU     $250
                	TCB_hWaitMbx    EQU     $258
                	TCB_MbxList     EQU     $260
                	TCB_StackTop    EQU     $268
                	TCB_errno       EQU     $270
                	TCB_Timeout     EQU     $278
                	TCB_Affinity    EQU     $280
                	TCB_BIOS_Stack  EQU     $288
                	TCB_SYS_Stack   EQU     $290
                	TCB_Size	    EQU	    $400
                	TCB_LogSize     EQU     10
                	
                	; Mailboxes, room for 2048
                	;			.bss
                	;			.org		0x07E40000
                	NR_MBX		EQU		2048
                	MBX_LINK		EQU     $00       ; link to next mailbox in list (free list)
                	MBX_TQ_HEAD		EQU     $08       ; head of task queue
                	MBX_TQ_TAIL		EQU     $18
                	MBX_MQ_HEAD		EQU     $20	      ; head of message queue
                	MBX_MQ_TAIL		EQU     $28
                	MBX_TQ_COUNT	EQU     $30	      ; count of queued threads
                	MBX_MQ_SIZE		EQU     $32       ; number of messages that may be queued
                	MBX_MQ_COUNT	EQU     $34       ; count of messages that are queued
                	MBX_OWNER		EQU     $36	      ; job handle of mailbox owner
                	MBX_MQ_STRATEGY	EQU     $37	      ; message queueing strategy
                	MBX_MQ_MISSED	EQU     $38	      ; number of messages dropped from queue
                	MBX_Size        EQU     $40
                	
                	MQS_UNLIMITED    EQU     0
                	MQS_OLDEST       EQU     1
                	MQS_NEWEST       EQU     2
                	
                	; Messages, room for 64kW (16,384) messages
                	;			.bss
                	;			.org		0x07E80000
                	NR_MSG		EQU		32768
                	MSG_LINK	EQU     $00	        ; link to next message in queue or free list
                	MSG_D1		EQU     $08         ; message data 1
                	MSG_D2		EQU     $10	        ; message data 2
                	MSG_TYPE	EQU     $18	        ; message type
                	MSG_Size    EQU     $20
                	
                	MT_SEMA		EQU		-1
                	MT_IRQ		EQU		-16
                	MT_GETCHAR	EQU		-17
                	
                	
                	NR_JCB			EQU		51
                	JCB_Number		EQU		0
                	JCB_Name		EQU		4		; 32 bytes (1 len + 31)
                	JCB_MemGroup0	EQU		0x24	; memory map number associated with job
                	JCB_MemGroup1   EQU     0x26
                	JCB_MemGroup2   EQU     0x28
                	JCB_MemGroup3   EQU     0x2A
                	JCB_MemGroup4   EQU     0x2C
                	JCB_MemGroup5   EQU     0x2E
                	JCB_pCode		EQU		0x30
                	JCB_nCode		EQU		0x38	; size of code
                	JCB_pData		EQU		0x40
                	JCB_nData		EQU		0x48	; size of data
                	JCB_pStack		EQU		0x50
                	JCB_nStack		EQU		0x58
                	JCB_UserName	EQU		0x60	; 32 bytes
                	JCB_Path		EQU		0x80	; 256 bytes
                	JCB_ExitRF		EQU		0x180	; 256 bytes
                	JCB_CmdLine		EQU		0x280	; 256 bytes		
                	JCB_SysIn		EQU		0x380	; 48 chars
                	JCB_SysOut		EQU		0x3B0	; 48 chars
                	JCB_ExitError	EQU		0x3E0
                	JCB_pVidMem		EQU		0x3E8		; pointer to video memory
                	JCB_pVirtVid	EQU		0x3F8		; pointer to virtual video buffer
                	JCB_VideoMode	EQU		0x408
                	JCB_VideoRows	EQU		0x40A
                	JCB_VideoCols	EQU		0x40B
                	JCB_CursorRow	EQU		0x40C
                	JCB_CursorCol	EQU		0x40D
                	JCB_CursorOn	EQU		0x40E
                	JCB_CursorFlash	EQU		0x40F
                	JCB_CursorType	EQU		0x410
                	JCB_NormAttr	EQU		0x414
                	JCB_CurrAttr	EQU		0x418
                	JCB_ScrlCnt		EQU		0x41C
                	JCB_fVidPause	EQU		0x41E
                	JCB_Next		EQU		0x420
                	JCB_iof_next	EQU		0x428		; I/O focus list
                	JCB_iof_prev	EQU		0x430
                	JCB_KeybdHead	EQU		0x438
                	JCB_KeybdTail	EQU		0x440
                	JCB_KeybdEcho	EQU		0x448
                	JCB_KeybdBad	EQU		0x449
                	JCB_KeybdAck	EQU		0x44A
                	JCB_KeybdLocks	EQU		0x44C
                	JCB_KeybdBuffer	EQU		0x450		; buffer is 16 words (chars = words)
                	JCB_esc			EQU		0x470		; escape flag for DisplayChar processing
                	JCB_Size		EQU		0x500
                	JCB_LogSize		EQU		11
                	
                	BITMAP_SCREEN1  EQU     $400000     ; bitmap graphics screen area (4MB)
                	BITMAP_SCREEN2  EQU     $800000     ; bitmap graphics screen area (4MB)
                	VAR_Area        EQU     $C00000     ; 64k block for OS vars
                	    code
013110 00 00 00 00 		org		$14000
013114 00 00 00 00 
013118 00 00 00 00 
01311C 00 00 00 00 
013120 00 00 00 00 
013124 00 00 00 00 
013128 00 00 00 00 
01312C 00 00 00 00 
013130 00 00 00 00 
013134 00 00 00 00 
013138 00 00 00 00 
01313C 00 00 00 00 
013140 00 00 00 00 
013144 00 00 00 00 
013148 00 00 00 00 
01314C 00 00 00 00 
013150 00 00 00 00 
013154 00 00 00 00 
013158 00 00 00 00 
01315C 00 00 00 00 
013160 00 00 00 00 
013164 00 00 00 00 
013168 00 00 00 00 
01316C 00 00 00 00 
013170 00 00 00 00 
013174 00 00 00 00 
013178 00 00 00 00 
01317C 00 00 00 00 
013180 00 00 00 00 
013184 00 00 00 00 
013188 00 00 00 00 
01318C 00 00 00 00 
013190 00 00 00 00 
013194 00 00 00 00 
013198 00 00 00 00 
01319C 00 00 00 00 
0131A0 00 00 00 00 
0131A4 00 00 00 00 
0131A8 00 00 00 00 
0131AC 00 00 00 00 
0131B0 00 00 00 00 
0131B4 00 00 00 00 
0131B8 00 00 00 00 
0131BC 00 00 00 00 
0131C0 00 00 00 00 
0131C4 00 00 00 00 
0131C8 00 00 00 00 
0131CC 00 00 00 00 
0131D0 00 00 00 00 
0131D4 00 00 00 00 
0131D8 00 00 00 00 
0131DC 00 00 00 00 
0131E0 00 00 00 00 
0131E4 00 00 00 00 
0131E8 00 00 00 00 
0131EC 00 00 00 00 
0131F0 00 00 00 00 
0131F4 00 00 00 00 
0131F8 00 00 00 00 
0131FC 00 00 00 00 
013200 00 00 00 00 
013204 00 00 00 00 
013208 00 00 00 00 
01320C 00 00 00 00 
013210 00 00 00 00 
013214 00 00 00 00 
013218 00 00 00 00 
01321C 00 00 00 00 
013220 00 00 00 00 
013224 00 00 00 00 
013228 00 00 00 00 
01322C 00 00 00 00 
013230 00 00 00 00 
013234 00 00 00 00 
013238 00 00 00 00 
01323C 00 00 00 00 
013240 00 00 00 00 
013244 00 00 00 00 
013248 00 00 00 00 
01324C 00 00 00 00 
013250 00 00 00 00 
013254 00 00 00 00 
013258 00 00 00 00 
01325C 00 00 00 00 
013260 00 00 00 00 
013264 00 00 00 00 
013268 00 00 00 00 
01326C 00 00 00 00 
013270 00 00 00 00 
013274 00 00 00 00 
013278 00 00 00 00 
01327C 00 00 00 00 
013280 00 00 00 00 
013284 00 00 00 00 
013288 00 00 00 00 
01328C 00 00 00 00 
013290 00 00 00 00 
013294 00 00 00 00 
013298 00 00 00 00 
01329C 00 00 00 00 
0132A0 00 00 00 00 
0132A4 00 00 00 00 
0132A8 00 00 00 00 
0132AC 00 00 00 00 
0132B0 00 00 00 00 
0132B4 00 00 00 00 
0132B8 00 00 00 00 
0132BC 00 00 00 00 
0132C0 00 00 00 00 
0132C4 00 00 00 00 
0132C8 00 00 00 00 
0132CC 00 00 00 00 
0132D0 00 00 00 00 
0132D4 00 00 00 00 
0132D8 00 00 00 00 
0132DC 00 00 00 00 
0132E0 00 00 00 00 
0132E4 00 00 00 00 
0132E8 00 00 00 00 
0132EC 00 00 00 00 
0132F0 00 00 00 00 
0132F4 00 00 00 00 
0132F8 00 00 00 00 
0132FC 00 00 00 00 
013300 00 00 00 00 
013304 00 00 00 00 
013308 00 00 00 00 
01330C 00 00 00 00 
013310 00 00 00 00 
013314 00 00 00 00 
013318 00 00 00 00 
01331C 00 00 00 00 
013320 00 00 00 00 
013324 00 00 00 00 
013328 00 00 00 00 
01332C 00 00 00 00 
013330 00 00 00 00 
013334 00 00 00 00 
013338 00 00 00 00 
01333C 00 00 00 00 
013340 00 00 00 00 
013344 00 00 00 00 
013348 00 00 00 00 
01334C 00 00 00 00 
013350 00 00 00 00 
013354 00 00 00 00 
013358 00 00 00 00 
01335C 00 00 00 00 
013360 00 00 00 00 
013364 00 00 00 00 
013368 00 00 00 00 
01336C 00 00 00 00 
013370 00 00 00 00 
013374 00 00 00 00 
013378 00 00 00 00 
01337C 00 00 00 00 
013380 00 00 00 00 
013384 00 00 00 00 
013388 00 00 00 00 
01338C 00 00 00 00 
013390 00 00 00 00 
013394 00 00 00 00 
013398 00 00 00 00 
01339C 00 00 00 00 
0133A0 00 00 00 00 
0133A4 00 00 00 00 
0133A8 00 00 00 00 
0133AC 00 00 00 00 
0133B0 00 00 00 00 
0133B4 00 00 00 00 
0133B8 00 00 00 00 
0133BC 00 00 00 00 
0133C0 00 00 00 00 
0133C4 00 00 00 00 
0133C8 00 00 00 00 
0133CC 00 00 00 00 
0133D0 00 00 00 00 
0133D4 00 00 00 00 
0133D8 00 00 00 00 
0133DC 00 00 00 00 
0133E0 00 00 00 00 
0133E4 00 00 00 00 
0133E8 00 00 00 00 
0133EC 00 00 00 00 
0133F0 00 00 00 00 
0133F4 00 00 00 00 
0133F8 00 00 00 00 
0133FC 00 00 00 00 
013400 00 00 00 00 
013404 00 00 00 00 
013408 00 00 00 00 
01340C 00 00 00 00 
013410 00 00 00 00 
013414 00 00 00 00 
013418 00 00 00 00 
01341C 00 00 00 00 
013420 00 00 00 00 
013424 00 00 00 00 
013428 00 00 00 00 
01342C 00 00 00 00 
013430 00 00 00 00 
013434 00 00 00 00 
013438 00 00 00 00 
01343C 00 00 00 00 
013440 00 00 00 00 
013444 00 00 00 00 
013448 00 00 00 00 
01344C 00 00 00 00 
013450 00 00 00 00 
013454 00 00 00 00 
013458 00 00 00 00 
01345C 00 00 00 00 
013460 00 00 00 00 
013464 00 00 00 00 
013468 00 00 00 00 
01346C 00 00 00 00 
013470 00 00 00 00 
013474 00 00 00 00 
013478 00 00 00 00 
01347C 00 00 00 00 
013480 00 00 00 00 
013484 00 00 00 00 
013488 00 00 00 00 
01348C 00 00 00 00 
013490 00 00 00 00 
013494 00 00 00 00 
013498 00 00 00 00 
01349C 00 00 00 00 
0134A0 00 00 00 00 
0134A4 00 00 00 00 
0134A8 00 00 00 00 
0134AC 00 00 00 00 
0134B0 00 00 00 00 
0134B4 00 00 00 00 
0134B8 00 00 00 00 
0134BC 00 00 00 00 
0134C0 00 00 00 00 
0134C4 00 00 00 00 
0134C8 00 00 00 00 
0134CC 00 00 00 00 
0134D0 00 00 00 00 
0134D4 00 00 00 00 
0134D8 00 00 00 00 
0134DC 00 00 00 00 
0134E0 00 00 00 00 
0134E4 00 00 00 00 
0134E8 00 00 00 00 
0134EC 00 00 00 00 
0134F0 00 00 00 00 
0134F4 00 00 00 00 
0134F8 00 00 00 00 
0134FC 00 00 00 00 
013500 00 00 00 00 
013504 00 00 00 00 
013508 00 00 00 00 
01350C 00 00 00 00 
013510 00 00 00 00 
013514 00 00 00 00 
013518 00 00 00 00 
01351C 00 00 00 00 
013520 00 00 00 00 
013524 00 00 00 00 
013528 00 00 00 00 
01352C 00 00 00 00 
013530 00 00 00 00 
013534 00 00 00 00 
013538 00 00 00 00 
01353C 00 00 00 00 
013540 00 00 00 00 
013544 00 00 00 00 
013548 00 00 00 00 
01354C 00 00 00 00 
013550 00 00 00 00 
013554 00 00 00 00 
013558 00 00 00 00 
01355C 00 00 00 00 
013560 00 00 00 00 
013564 00 00 00 00 
013568 00 00 00 00 
01356C 00 00 00 00 
013570 00 00 00 00 
013574 00 00 00 00 
013578 00 00 00 00 
01357C 00 00 00 00 
013580 00 00 00 00 
013584 00 00 00 00 
013588 00 00 00 00 
01358C 00 00 00 00 
013590 00 00 00 00 
013594 00 00 00 00 
013598 00 00 00 00 
01359C 00 00 00 00 
0135A0 00 00 00 00 
0135A4 00 00 00 00 
0135A8 00 00 00 00 
0135AC 00 00 00 00 
0135B0 00 00 00 00 
0135B4 00 00 00 00 
0135B8 00 00 00 00 
0135BC 00 00 00 00 
0135C0 00 00 00 00 
0135C4 00 00 00 00 
0135C8 00 00 00 00 
0135CC 00 00 00 00 
0135D0 00 00 00 00 
0135D4 00 00 00 00 
0135D8 00 00 00 00 
0135DC 00 00 00 00 
0135E0 00 00 00 00 
0135E4 00 00 00 00 
0135E8 00 00 00 00 
0135EC 00 00 00 00 
0135F0 00 00 00 00 
0135F4 00 00 00 00 
0135F8 00 00 00 00 
0135FC 00 00 00 00 
013600 00 00 00 00 
013604 00 00 00 00 
013608 00 00 00 00 
01360C 00 00 00 00 
013610 00 00 00 00 
013614 00 00 00 00 
013618 00 00 00 00 
01361C 00 00 00 00 
013620 00 00 00 00 
013624 00 00 00 00 
013628 00 00 00 00 
01362C 00 00 00 00 
013630 00 00 00 00 
013634 00 00 00 00 
013638 00 00 00 00 
01363C 00 00 00 00 
013640 00 00 00 00 
013644 00 00 00 00 
013648 00 00 00 00 
01364C 00 00 00 00 
013650 00 00 00 00 
013654 00 00 00 00 
013658 00 00 00 00 
01365C 00 00 00 00 
013660 00 00 00 00 
013664 00 00 00 00 
013668 00 00 00 00 
01366C 00 00 00 00 
013670 00 00 00 00 
013674 00 00 00 00 
013678 00 00 00 00 
01367C 00 00 00 00 
013680 00 00 00 00 
013684 00 00 00 00 
013688 00 00 00 00 
01368C 00 00 00 00 
013690 00 00 00 00 
013694 00 00 00 00 
013698 00 00 00 00 
01369C 00 00 00 00 
0136A0 00 00 00 00 
0136A4 00 00 00 00 
0136A8 00 00 00 00 
0136AC 00 00 00 00 
0136B0 00 00 00 00 
0136B4 00 00 00 00 
0136B8 00 00 00 00 
0136BC 00 00 00 00 
0136C0 00 00 00 00 
0136C4 00 00 00 00 
0136C8 00 00 00 00 
0136CC 00 00 00 00 
0136D0 00 00 00 00 
0136D4 00 00 00 00 
0136D8 00 00 00 00 
0136DC 00 00 00 00 
0136E0 00 00 00 00 
0136E4 00 00 00 00 
0136E8 00 00 00 00 
0136EC 00 00 00 00 
0136F0 00 00 00 00 
0136F4 00 00 00 00 
0136F8 00 00 00 00 
0136FC 00 00 00 00 
013700 00 00 00 00 
013704 00 00 00 00 
013708 00 00 00 00 
01370C 00 00 00 00 
013710 00 00 00 00 
013714 00 00 00 00 
013718 00 00 00 00 
01371C 00 00 00 00 
013720 00 00 00 00 
013724 00 00 00 00 
013728 00 00 00 00 
01372C 00 00 00 00 
013730 00 00 00 00 
013734 00 00 00 00 
013738 00 00 00 00 
01373C 00 00 00 00 
013740 00 00 00 00 
013744 00 00 00 00 
013748 00 00 00 00 
01374C 00 00 00 00 
013750 00 00 00 00 
013754 00 00 00 00 
013758 00 00 00 00 
01375C 00 00 00 00 
013760 00 00 00 00 
013764 00 00 00 00 
013768 00 00 00 00 
01376C 00 00 00 00 
013770 00 00 00 00 
013774 00 00 00 00 
013778 00 00 00 00 
01377C 00 00 00 00 
013780 00 00 00 00 
013784 00 00 00 00 
013788 00 00 00 00 
01378C 00 00 00 00 
013790 00 00 00 00 
013794 00 00 00 00 
013798 00 00 00 00 
01379C 00 00 00 00 
0137A0 00 00 00 00 
0137A4 00 00 00 00 
0137A8 00 00 00 00 
0137AC 00 00 00 00 
0137B0 00 00 00 00 
0137B4 00 00 00 00 
0137B8 00 00 00 00 
0137BC 00 00 00 00 
0137C0 00 00 00 00 
0137C4 00 00 00 00 
0137C8 00 00 00 00 
0137CC 00 00 00 00 
0137D0 00 00 00 00 
0137D4 00 00 00 00 
0137D8 00 00 00 00 
0137DC 00 00 00 00 
0137E0 00 00 00 00 
0137E4 00 00 00 00 
0137E8 00 00 00 00 
0137EC 00 00 00 00 
0137F0 00 00 00 00 
0137F4 00 00 00 00 
0137F8 00 00 00 00 
0137FC 00 00 00 00 
013800 00 00 00 00 
013804 00 00 00 00 
013808 00 00 00 00 
01380C 00 00 00 00 
013810 00 00 00 00 
013814 00 00 00 00 
013818 00 00 00 00 
01381C 00 00 00 00 
013820 00 00 00 00 
013824 00 00 00 00 
013828 00 00 00 00 
01382C 00 00 00 00 
013830 00 00 00 00 
013834 00 00 00 00 
013838 00 00 00 00 
01383C 00 00 00 00 
013840 00 00 00 00 
013844 00 00 00 00 
013848 00 00 00 00 
01384C 00 00 00 00 
013850 00 00 00 00 
013854 00 00 00 00 
013858 00 00 00 00 
01385C 00 00 00 00 
013860 00 00 00 00 
013864 00 00 00 00 
013868 00 00 00 00 
01386C 00 00 00 00 
013870 00 00 00 00 
013874 00 00 00 00 
013878 00 00 00 00 
01387C 00 00 00 00 
013880 00 00 00 00 
013884 00 00 00 00 
013888 00 00 00 00 
01388C 00 00 00 00 
013890 00 00 00 00 
013894 00 00 00 00 
013898 00 00 00 00 
01389C 00 00 00 00 
0138A0 00 00 00 00 
0138A4 00 00 00 00 
0138A8 00 00 00 00 
0138AC 00 00 00 00 
0138B0 00 00 00 00 
0138B4 00 00 00 00 
0138B8 00 00 00 00 
0138BC 00 00 00 00 
0138C0 00 00 00 00 
0138C4 00 00 00 00 
0138C8 00 00 00 00 
0138CC 00 00 00 00 
0138D0 00 00 00 00 
0138D4 00 00 00 00 
0138D8 00 00 00 00 
0138DC 00 00 00 00 
0138E0 00 00 00 00 
0138E4 00 00 00 00 
0138E8 00 00 00 00 
0138EC 00 00 00 00 
0138F0 00 00 00 00 
0138F4 00 00 00 00 
0138F8 00 00 00 00 
0138FC 00 00 00 00 
013900 00 00 00 00 
013904 00 00 00 00 
013908 00 00 00 00 
01390C 00 00 00 00 
013910 00 00 00 00 
013914 00 00 00 00 
013918 00 00 00 00 
01391C 00 00 00 00 
013920 00 00 00 00 
013924 00 00 00 00 
013928 00 00 00 00 
01392C 00 00 00 00 
013930 00 00 00 00 
013934 00 00 00 00 
013938 00 00 00 00 
01393C 00 00 00 00 
013940 00 00 00 00 
013944 00 00 00 00 
013948 00 00 00 00 
01394C 00 00 00 00 
013950 00 00 00 00 
013954 00 00 00 00 
013958 00 00 00 00 
01395C 00 00 00 00 
013960 00 00 00 00 
013964 00 00 00 00 
013968 00 00 00 00 
01396C 00 00 00 00 
013970 00 00 00 00 
013974 00 00 00 00 
013978 00 00 00 00 
01397C 00 00 00 00 
013980 00 00 00 00 
013984 00 00 00 00 
013988 00 00 00 00 
01398C 00 00 00 00 
013990 00 00 00 00 
013994 00 00 00 00 
013998 00 00 00 00 
01399C 00 00 00 00 
0139A0 00 00 00 00 
0139A4 00 00 00 00 
0139A8 00 00 00 00 
0139AC 00 00 00 00 
0139B0 00 00 00 00 
0139B4 00 00 00 00 
0139B8 00 00 00 00 
0139BC 00 00 00 00 
0139C0 00 00 00 00 
0139C4 00 00 00 00 
0139C8 00 00 00 00 
0139CC 00 00 00 00 
0139D0 00 00 00 00 
0139D4 00 00 00 00 
0139D8 00 00 00 00 
0139DC 00 00 00 00 
0139E0 00 00 00 00 
0139E4 00 00 00 00 
0139E8 00 00 00 00 
0139EC 00 00 00 00 
0139F0 00 00 00 00 
0139F4 00 00 00 00 
0139F8 00 00 00 00 
0139FC 00 00 00 00 
013A00 00 00 00 00 
013A04 00 00 00 00 
013A08 00 00 00 00 
013A0C 00 00 00 00 
013A10 00 00 00 00 
013A14 00 00 00 00 
013A18 00 00 00 00 
013A1C 00 00 00 00 
013A20 00 00 00 00 
013A24 00 00 00 00 
013A28 00 00 00 00 
013A2C 00 00 00 00 
013A30 00 00 00 00 
013A34 00 00 00 00 
013A38 00 00 00 00 
013A3C 00 00 00 00 
013A40 00 00 00 00 
013A44 00 00 00 00 
013A48 00 00 00 00 
013A4C 00 00 00 00 
013A50 00 00 00 00 
013A54 00 00 00 00 
013A58 00 00 00 00 
013A5C 00 00 00 00 
013A60 00 00 00 00 
013A64 00 00 00 00 
013A68 00 00 00 00 
013A6C 00 00 00 00 
013A70 00 00 00 00 
013A74 00 00 00 00 
013A78 00 00 00 00 
013A7C 00 00 00 00 
013A80 00 00 00 00 
013A84 00 00 00 00 
013A88 00 00 00 00 
013A8C 00 00 00 00 
013A90 00 00 00 00 
013A94 00 00 00 00 
013A98 00 00 00 00 
013A9C 00 00 00 00 
013AA0 00 00 00 00 
013AA4 00 00 00 00 
013AA8 00 00 00 00 
013AAC 00 00 00 00 
013AB0 00 00 00 00 
013AB4 00 00 00 00 
013AB8 00 00 00 00 
013ABC 00 00 00 00 
013AC0 00 00 00 00 
013AC4 00 00 00 00 
013AC8 00 00 00 00 
013ACC 00 00 00 00 
013AD0 00 00 00 00 
013AD4 00 00 00 00 
013AD8 00 00 00 00 
013ADC 00 00 00 00 
013AE0 00 00 00 00 
013AE4 00 00 00 00 
013AE8 00 00 00 00 
013AEC 00 00 00 00 
013AF0 00 00 00 00 
013AF4 00 00 00 00 
013AF8 00 00 00 00 
013AFC 00 00 00 00 
013B00 00 00 00 00 
013B04 00 00 00 00 
013B08 00 00 00 00 
013B0C 00 00 00 00 
013B10 00 00 00 00 
013B14 00 00 00 00 
013B18 00 00 00 00 
013B1C 00 00 00 00 
013B20 00 00 00 00 
013B24 00 00 00 00 
013B28 00 00 00 00 
013B2C 00 00 00 00 
013B30 00 00 00 00 
013B34 00 00 00 00 
013B38 00 00 00 00 
013B3C 00 00 00 00 
013B40 00 00 00 00 
013B44 00 00 00 00 
013B48 00 00 00 00 
013B4C 00 00 00 00 
013B50 00 00 00 00 
013B54 00 00 00 00 
013B58 00 00 00 00 
013B5C 00 00 00 00 
013B60 00 00 00 00 
013B64 00 00 00 00 
013B68 00 00 00 00 
013B6C 00 00 00 00 
013B70 00 00 00 00 
013B74 00 00 00 00 
013B78 00 00 00 00 
013B7C 00 00 00 00 
013B80 00 00 00 00 
013B84 00 00 00 00 
013B88 00 00 00 00 
013B8C 00 00 00 00 
013B90 00 00 00 00 
013B94 00 00 00 00 
013B98 00 00 00 00 
013B9C 00 00 00 00 
013BA0 00 00 00 00 
013BA4 00 00 00 00 
013BA8 00 00 00 00 
013BAC 00 00 00 00 
013BB0 00 00 00 00 
013BB4 00 00 00 00 
013BB8 00 00 00 00 
013BBC 00 00 00 00 
013BC0 00 00 00 00 
013BC4 00 00 00 00 
013BC8 00 00 00 00 
013BCC 00 00 00 00 
013BD0 00 00 00 00 
013BD4 00 00 00 00 
013BD8 00 00 00 00 
013BDC 00 00 00 00 
013BE0 00 00 00 00 
013BE4 00 00 00 00 
013BE8 00 00 00 00 
013BEC 00 00 00 00 
013BF0 00 00 00 00 
013BF4 00 00 00 00 
013BF8 00 00 00 00 
013BFC 00 00 00 00 
013C00 00 00 00 00 
013C04 00 00 00 00 
013C08 00 00 00 00 
013C0C 00 00 00 00 
013C10 00 00 00 00 
013C14 00 00 00 00 
013C18 00 00 00 00 
013C1C 00 00 00 00 
013C20 00 00 00 00 
013C24 00 00 00 00 
013C28 00 00 00 00 
013C2C 00 00 00 00 
013C30 00 00 00 00 
013C34 00 00 00 00 
013C38 00 00 00 00 
013C3C 00 00 00 00 
013C40 00 00 00 00 
013C44 00 00 00 00 
013C48 00 00 00 00 
013C4C 00 00 00 00 
013C50 00 00 00 00 
013C54 00 00 00 00 
013C58 00 00 00 00 
013C5C 00 00 00 00 
013C60 00 00 00 00 
013C64 00 00 00 00 
013C68 00 00 00 00 
013C6C 00 00 00 00 
013C70 00 00 00 00 
013C74 00 00 00 00 
013C78 00 00 00 00 
013C7C 00 00 00 00 
013C80 00 00 00 00 
013C84 00 00 00 00 
013C88 00 00 00 00 
013C8C 00 00 00 00 
013C90 00 00 00 00 
013C94 00 00 00 00 
013C98 00 00 00 00 
013C9C 00 00 00 00 
013CA0 00 00 00 00 
013CA4 00 00 00 00 
013CA8 00 00 00 00 
013CAC 00 00 00 00 
013CB0 00 00 00 00 
013CB4 00 00 00 00 
013CB8 00 00 00 00 
013CBC 00 00 00 00 
013CC0 00 00 00 00 
013CC4 00 00 00 00 
013CC8 00 00 00 00 
013CCC 00 00 00 00 
013CD0 00 00 00 00 
013CD4 00 00 00 00 
013CD8 00 00 00 00 
013CDC 00 00 00 00 
013CE0 00 00 00 00 
013CE4 00 00 00 00 
013CE8 00 00 00 00 
013CEC 00 00 00 00 
013CF0 00 00 00 00 
013CF4 00 00 00 00 
013CF8 00 00 00 00 
013CFC 00 00 00 00 
013D00 00 00 00 00 
013D04 00 00 00 00 
013D08 00 00 00 00 
013D0C 00 00 00 00 
013D10 00 00 00 00 
013D14 00 00 00 00 
013D18 00 00 00 00 
013D1C 00 00 00 00 
013D20 00 00 00 00 
013D24 00 00 00 00 
013D28 00 00 00 00 
013D2C 00 00 00 00 
013D30 00 00 00 00 
013D34 00 00 00 00 
013D38 00 00 00 00 
013D3C 00 00 00 00 
013D40 00 00 00 00 
013D44 00 00 00 00 
013D48 00 00 00 00 
013D4C 00 00 00 00 
013D50 00 00 00 00 
013D54 00 00 00 00 
013D58 00 00 00 00 
013D5C 00 00 00 00 
013D60 00 00 00 00 
013D64 00 00 00 00 
013D68 00 00 00 00 
013D6C 00 00 00 00 
013D70 00 00 00 00 
013D74 00 00 00 00 
013D78 00 00 00 00 
013D7C 00 00 00 00 
013D80 00 00 00 00 
013D84 00 00 00 00 
013D88 00 00 00 00 
013D8C 00 00 00 00 
013D90 00 00 00 00 
013D94 00 00 00 00 
013D98 00 00 00 00 
013D9C 00 00 00 00 
013DA0 00 00 00 00 
013DA4 00 00 00 00 
013DA8 00 00 00 00 
013DAC 00 00 00 00 
013DB0 00 00 00 00 
013DB4 00 00 00 00 
013DB8 00 00 00 00 
013DBC 00 00 00 00 
013DC0 00 00 00 00 
013DC4 00 00 00 00 
013DC8 00 00 00 00 
013DCC 00 00 00 00 
013DD0 00 00 00 00 
013DD4 00 00 00 00 
013DD8 00 00 00 00 
013DDC 00 00 00 00 
013DE0 00 00 00 00 
013DE4 00 00 00 00 
013DE8 00 00 00 00 
013DEC 00 00 00 00 
013DF0 00 00 00 00 
013DF4 00 00 00 00 
013DF8 00 00 00 00 
013DFC 00 00 00 00 
013E00 00 00 00 00 
013E04 00 00 00 00 
013E08 00 00 00 00 
013E0C 00 00 00 00 
013E10 00 00 00 00 
013E14 00 00 00 00 
013E18 00 00 00 00 
013E1C 00 00 00 00 
013E20 00 00 00 00 
013E24 00 00 00 00 
013E28 00 00 00 00 
013E2C 00 00 00 00 
013E30 00 00 00 00 
013E34 00 00 00 00 
013E38 00 00 00 00 
013E3C 00 00 00 00 
013E40 00 00 00 00 
013E44 00 00 00 00 
013E48 00 00 00 00 
013E4C 00 00 00 00 
013E50 00 00 00 00 
013E54 00 00 00 00 
013E58 00 00 00 00 
013E5C 00 00 00 00 
013E60 00 00 00 00 
013E64 00 00 00 00 
013E68 00 00 00 00 
013E6C 00 00 00 00 
013E70 00 00 00 00 
013E74 00 00 00 00 
013E78 00 00 00 00 
013E7C 00 00 00 00 
013E80 00 00 00 00 
013E84 00 00 00 00 
013E88 00 00 00 00 
013E8C 00 00 00 00 
013E90 00 00 00 00 
013E94 00 00 00 00 
013E98 00 00 00 00 
013E9C 00 00 00 00 
013EA0 00 00 00 00 
013EA4 00 00 00 00 
013EA8 00 00 00 00 
013EAC 00 00 00 00 
013EB0 00 00 00 00 
013EB4 00 00 00 00 
013EB8 00 00 00 00 
013EBC 00 00 00 00 
013EC0 00 00 00 00 
013EC4 00 00 00 00 
013EC8 00 00 00 00 
013ECC 00 00 00 00 
013ED0 00 00 00 00 
013ED4 00 00 00 00 
013ED8 00 00 00 00 
013EDC 00 00 00 00 
013EE0 00 00 00 00 
013EE4 00 00 00 00 
013EE8 00 00 00 00 
013EEC 00 00 00 00 
013EF0 00 00 00 00 
013EF4 00 00 00 00 
013EF8 00 00 00 00 
013EFC 00 00 00 00 
013F00 00 00 00 00 
013F04 00 00 00 00 
013F08 00 00 00 00 
013F0C 00 00 00 00 
013F10 00 00 00 00 
013F14 00 00 00 00 
013F18 00 00 00 00 
013F1C 00 00 00 00 
013F20 00 00 00 00 
013F24 00 00 00 00 
013F28 00 00 00 00 
013F2C 00 00 00 00 
013F30 00 00 00 00 
013F34 00 00 00 00 
013F38 00 00 00 00 
013F3C 00 00 00 00 
013F40 00 00 00 00 
013F44 00 00 00 00 
013F48 00 00 00 00 
013F4C 00 00 00 00 
013F50 00 00 00 00 
013F54 00 00 00 00 
013F58 00 00 00 00 
013F5C 00 00 00 00 
013F60 00 00 00 00 
013F64 00 00 00 00 
013F68 00 00 00 00 
013F6C 00 00 00 00 
013F70 00 00 00 00 
013F74 00 00 00 00 
013F78 00 00 00 00 
013F7C 00 00 00 00 
013F80 00 00 00 00 
013F84 00 00 00 00 
013F88 00 00 00 00 
013F8C 00 00 00 00 
013F90 00 00 00 00 
013F94 00 00 00 00 
013F98 00 00 00 00 
013F9C 00 00 00 00 
013FA0 00 00 00 00 
013FA4 00 00 00 00 
013FA8 00 00 00 00 
013FAC 00 00 00 00 
013FB0 00 00 00 00 
013FB4 00 00 00 00 
013FB8 00 00 00 00 
013FBC 00 00 00 00 
013FC0 00 00 00 00 
013FC4 00 00 00 00 
013FC8 00 00 00 00 
013FCC 00 00 00 00 
013FD0 00 00 00 00 
013FD4 00 00 00 00 
013FD8 00 00 00 00 
013FDC 00 00 00 00 
013FE0 00 00 00 00 
013FE4 00 00 00 00 
013FE8 00 00 00 00 
013FEC 00 00 00 00 
013FF0 00 00 00 00 
013FF4 00 00 00 00 
013FF8 00 00 00 00 
013FFC 00 00 00 00 
                		; Compress vector table by storing only the low order 16 bits of the
                		; vector. The high order bits are always the same.
                	syscall_vectors:
014000 1C 40       		dc		FMTKInitialize
014002 A8 45       		dc		StartTask
014004 1C 47       		dc		ExitTask
014006 7B 47       		dc   	KillTask
014008 25 49       		dc		SetTaskPriority
01400A 68 4C       		dc		Sleep
01400C 9C 4C       		dc		AllocMbx
01400E 5C 4D       		dc		FreeMbx
014010 F8 50       		dc		PostMsg
014012 10 51       		dc		SendMsg
014014 64 52       		dc		WaitMsg
014016 C0 53       		dc		CheckMsg
                	
                	message "InitFMTK"
                	BranchToSelf:
014018 3A 00 00 00 	    bra     BranchToSelf
                	
                	FMTKInitialize:
                	InitFMTK:
                	    ; The first part initialization is common setup for all processors.
                	    ; The second part is 'do once' by whatever processor gets to initizlization
                	    ; first.
                	    
01401C E7 EF 01 00 	    push    lr
014020 02 40 09 3E 	    mfspr   r20,tick
                	
014024 7C C0 00 00 	    lw      r1,FMTK_Inited
014028 46 10 60 03 
01402C 7C 34 12 00 	    cmp     r1,r1,#$12345678
014030 86 10 F0 AC 
014034 BD 00 04 00 	    beq     r1,.0002
014038 B9 9B 00 00 	    bsr     UnlockSYS
                	.0002:
                	    ; Setup bounds checking register #48 to check the TCB pointer
01403C 7C C1 00 00 	    lea     r1,TCB_Array
014040 47 10 00 00 
014044 82 00 E0 3C 	    mtspr   112,r1                   ; set lower bounds
014048 7C C5 00 00 	    lea     r1,TCB_ArrayEnd
01404C 47 10 00 00 
014050 82 00 60 3D 	    mtspr   176,r1                   ; set upper bounds
014054 0A 10 FE 07 	    ldi     r1,#$3FF                 
014058 82 00 E0 3D 	    mtspr   240,r1                   ; set modulo mask
                	
                	    ; Setup bounds checking register #49 to check the MBX pointer
01405C FC C5 00 00 	    lea     r1,MBX_Array
014060 47 10 00 FE 
014064 82 00 E2 3C 	    mtspr   113,r1                   ; set lower bounds
014068 FC C7 00 00 	    lea     r1,MBX_ArrayEnd
01406C 47 10 00 FE 
014070 82 00 62 3D 	    mtspr   177,r1                   ; set upper bounds
014074 0A 10 7E 00 	    ldi     r1,#$3F                 
014078 82 00 E2 3D 	    mtspr   241,r1                   ; set modulo mask
                	
                	    ; Set interrupt vectors
01407C 02 20 14 3E 		mfspr	r2,vbr
014080 7C 01 00 00 		ldi		r1,#reschedule
014084 0A 10 98 A9 
014088 63 11 20 00 		sw		r1,16[r2]
01408C 7C 01 00 00 		ldi		r1,#syscall_exception
014090 0A 10 F0 A8 
014094 63 11 40 00 		sw		r1,32[r2]
014098 7C 01 00 00 		ldi		r1,#FMTKTick
01409C 0A 10 18 AC 
0140A0 63 11 30 1C 		sw		r1,(448+3)<<3[r2]
                	
0140A4 B9 8A 00 00 	    bsr     LockSYS
                	    
                		; Manually setup the BIOS task
                		; FMTK can't be called to setup the first task because it uses the
                		; SYS_STACK associated with the running task which hasn't been set yet.
0140A8 02 20 00 6C 		cpuid   r2,r0,#0
0140AC 02 81 15 70 		asli    tr,r2,#TCB_LogSize
0140B0 7C C1 00 00 		addui   tr,tr,#TCB_Array
0140B4 14 8C 01 00 
0140B8 63 0C 50 04 		sw		r0,TCB_NextTo[tr]
0140BC 63 0C 60 04 		sw		r0,TCB_PrevTo[tr]
0140C0 60 0C 28 04 		sb      r0,TCB_hJCB[tr]         ; system JOB owns this TCB
0140C4 02 21 18 70 		asl     r2,r2,#12               ; size of stack
0140C8 7C D0 07 00 		ldi     r1,#SYS_STACKS_Array + 4088
0140CC 0A 10 F0 1F 
0140D0 82 10 04 28 		addu    r1,r1,r2
0140D4 63 1C 20 05 		sw      r1,TCB_SYS_Stack[tr]
0140D8 7C E0 07 00 		ldi     r1,#BIOS_STACKS_Array + 4088
0140DC 0A 10 F0 1F 
0140E0 82 10 04 28 		addu    r1,r1,r2
0140E4 63 1C 10 05 		sw      r1,TCB_BIOS_Stack[tr]
0140E8 0A 10 06 00 		ldi		r1,#3
0140EC 61 1C 24 04 		sc		r1,TCB_Priority[tr]
0140F0 02 10 00 6C 		cpuid   r1,r0,#0
0140F4 60 1C 00 05 		sb      r1,TCB_Affinity[tr]
0140F8 63 0C F0 04 		sw		r0,TCB_Timeout[tr]
0140FC 7C F0 07 00 		ldi     r1,#STACKS_Array+$FF8   ; setup stack pointer top of memory
014100 0A 10 F0 1F 
014104 82 10 04 28 		addu    r1,r1,r2
014108 63 1C E0 01 		sw		r1,TCB_r30[tr]
                	
01410C 7C C0 00 00 	    lw      r1,FMTK_Inited
014110 46 10 60 03 
014114 7C 34 12 00 	    cmp     r1,r1,#$12345678
014118 86 10 F0 AC 
01411C BD 10 0E 00 	    bne     r1,.0001
014120 02 1C 00 1A 	    mov     r1,tr
014124 B9 0E 01 00 	    bsr     AddTaskToReadyList
014128 0A 10 30 00 		ldi		r1,#TS_RUNNING|TS_READY
01412C 60 1C 20 04 		sb		r1,TCB_Status[tr]
014130 B9 7C 00 00 	    bsr     UnlockSYS
014134 3B FF 11 00 	    rts
.0001:
014138 7C C0 00 00 		sw		r0,UserTick
01413C 63 00 00 00 
                	    
                		; Initialize semaphores
014140 39 27 03 00 	    bsr     UnlockIOF
                	     
014144 7C C0 00 00 		sw		r0,TimeoutList		; no entries in timeout list
014148 63 00 20 02 
01414C 7C C0 00 00 		sw		r0,QNdx0
014150 63 00 A0 00 
014154 7C C0 00 00 		sw		r0,QNdx1
014158 63 00 B0 00 
01415C 7C C0 00 00 		sw		r0,QNdx2
014160 63 00 C0 00 
014164 7C C0 00 00 		sw		r0,QNdx3
014168 63 00 D0 00 
01416C 7C C0 00 00 		sw		r0,QNdx4
014170 63 00 E0 00 
014174 7C C0 00 00 		sw		r0,QNdx5
014178 63 00 F0 00 
01417C 7C C0 00 00 		sw		r0,QNdx6
014180 63 00 00 01 
014184 7C C0 00 00 		sw		r0,QNdx7
014188 63 00 10 01 
01418C 02 1C 00 1A 	    mov     r1,tr
014190 39 01 01 00 	    bsr     AddTaskToReadyList
014194 0A 10 30 00 		ldi		r1,#TS_RUNNING|TS_READY
014198 60 1C 20 04 		sb		r1,TCB_Status[tr]
                	
01419C 7C C0 00 00 		sw		r0,missed_ticks
0141A0 63 00 80 02 
                	
                		; Initialize IO Focus List
                		; There is a bit for each job that could have the I/O focus. This really
                		; requires only a single word of storage as there are only 51 jobs
                		; allowed for.
                		;
0141A4 7C C0 00 00 		sw      r0,IOFocusTbl
0141A8 63 00 60 00 
0141AC 7C C0 00 00 		sw      r0,IOFocusTbl+8
0141B0 63 00 70 00 
0141B4 7C C0 00 00 		sw      r0,IOFocusTbl+16
0141B8 63 00 80 00 
0141BC 7C C0 00 00 		sw      r0,IOFocusTbl+32
0141C0 63 00 A0 00 
                	
                		; Initialize the FreeJCB list
0141C4 7C C5 00 00 		ldi		r1,#JCB_Array+JCB_Size		; the next available JCB
0141C8 0A 10 00 0A 
0141CC 7C C0 00 00 		sw		r1,FreeJCB
0141D0 63 10 00 02 
0141D4 82 20 00 1A 		mov     r2,r1
0141D8 94 10 00 0A 		addui	r1,r1,#JCB_Size
0141DC 0A 30 64 00 		ldi		r3,#NR_JCB-1
                	st5:
0141E0 63 11 40 08 		sw		r1,JCB_Next[r2]
0141E4 94 10 00 0A 		addui	r1,r1,#JCB_Size
0141E8 14 21 00 0A 		addui	r2,r2,#JCB_Size
0141EC 95 31 02 00 		subui   r3,r3,#1
0141F0 BD 11 F8 FF 		bne		r3,st5
0141F4 63 01 40 08 		sw      r0,JCB_Next[r2]
                	
                		; Setup default values in the JCB's
0141F8 0A 30 00 00 		ldi		r3,#0
0141FC 0A 20 66 00 		ldi		r2,#NR_JCB
014200 0A 40 80 27 		ldi     r4,#JCB0
                	ijcb1:
014204 61 32 00 00 		sc		r3,JCB_Number[r4]
014208 60 02 E0 08 		sb		r0,JCB_esc[r4]
01420C 0A 10 3E 00 		ldi     r1,#31
014210 60 12 14 08 		sb		r1,JCB_VideoRows[r4]
014214 0A 10 A8 00 		ldi		r1,#84
014218 60 12 16 08 		sb		r1,JCB_VideoCols[r4]
01421C 0A 10 02 00 		ldi		r1,#1				; turn on keyboard echo
014220 60 12 90 08 		sb		r1,JCB_KeybdEcho[r4]
014224 60 12 1C 08 		sb		r1,JCB_CursorOn[r4]
014228 60 12 1E 08 		sb		r1,JCB_CursorFlash[r4]
01422C 60 02 18 08 		sb		r0,JCB_CursorRow[r4]
014230 60 02 1A 08 		sb		r0,JCB_CursorCol[r4]
014234 60 02 20 08 		sb		r0,JCB_CursorType[r4]
014238 FC 97 04 00 		ldi		r1,#%010010010_111111111_0000000000	; white on grey
01423C 0A 10 00 F8 
014240 62 12 28 08 		sh		r1,JCB_NormAttr[r4]
014244 62 12 30 08 		sh		r1,JCB_CurrAttr[r4]
014248 7C 00 00 00 		mulu	r5,r3,#16384		; 8192 words per screen
01424C 97 51 00 80 
014250 7C D8 00 00 		addui   r5,r5,#SCREEN_Array
014254 94 52 00 00 
014258 62 52 F0 07 		sh		r5,JCB_pVirtVid[r4]
01425C 62 52 D0 07 		sh		r5,JCB_pVidMem[r4]
014260 BD 11 14 00 		bne		r3,ijcb2
014264 FC 26 00 00 		ldi		r1,#%000000100_110101110_0000000000	; grey on blue
014268 0A 10 00 70 
01426C 62 12 28 08 		sh		r1,JCB_NormAttr[r4]
014270 62 12 30 08 		sh		r1,JCB_CurrAttr[r4]
014274 7C D0 FF 00 		ldi		r5,#TEXTSCR
014278 0A 50 00 00 
01427C 62 52 D0 07 		sh		r5,JCB_pVidMem[r4]
014280 7C C5 00 00 		ldi     r4,#JCB_Array
014284 0A 40 00 00 
                	ijcb2:
014288 94 31 02 00 	    addui   r3,r3,#1
01428C 14 42 00 0A 		addui	r4,r4,#JCB_Size
014290 86 21 66 00 		cmp     r2,r3,#NR_JCB
014294 3D 41 B8 FF 		blt		r2,ijcb1
                	
                		; Initialize free message list
014298 FC 00 00 00 		ldi		r1,#NR_MSG
01429C 0A 10 00 00 
0142A0 7C C0 00 00 		sw		r1,nMsgBlk
0142A4 63 10 70 02 
0142A8 7C C8 00 00 		ldi     r1,#MSG_Array
0142AC 0A 10 00 00 
0142B0 7C C0 00 00 		sw		r1,FreeMsg
0142B4 63 10 60 02 
0142B8 94 20 40 00 		addui   r2,r1,MSG_Size
                	st4:
0142BC E3 20 00 00 		sw		r2,MSG_LINK[r1]
0142C0 E3 00 10 00 		sw      r0,MSG_D1[r1]
0142C4 E3 00 20 00 		sw      r0,MSG_D2[r1]
0142C8 E3 00 30 00 		sw      r0,MSG_TYPE[r1]
0142CC 94 10 40 00 		addui	r1,r1,#MSG_Size
0142D0 14 21 40 00 		addui   r2,r2,#MSG_Size
0142D4 FC D7 00 00 		cmp     r3,r2,#MSG_ArrayEnd-MSG_Size
0142D8 06 31 C0 FF 
0142DC BD 41 F0 FF 		blt     r3,st4
0142E0 E3 00 00 00 		sw      r0,MSG_LINK[r1]
                	
                		; Initialize free mailbox list
                		; Note the first NR_TCB mailboxes are statically allocated to the tasks.
                		; They are effectively pre-allocated.
0142E4 0A 50 00 0E 		ldi		r5,#NR_MBX-NR_TCB
0142E8 7C C0 00 00 		sw		r5,nMailbox
0142EC 63 50 50 02 
                	
0142F0 0A 10 00 02 	    ldi     r1,#NR_TCB
0142F4 97 20 80 00 	    mulu    r2,r1,#MBX_Size
0142F8 FC C5 00 00 	    addui   r2,r2,#MBX_Array
0142FC 14 21 00 FE 
014300 7C C0 00 00 	    sw      r2,FreeMbxHandle
014304 63 20 40 02 
014308 02 31 00 1A 	    mov     r3,r2
01430C 94 31 80 00 	    addui   r3,r3,#MBX_Size
                	.imbxl1:
014310 63 31 00 00 	    sw      r3,MBX_LINK[r2]
014314 14 21 80 00 	    addui   r2,r2,#MBX_Size
014318 94 31 80 00 	    addui   r3,r3,#MBX_Size
01431C 95 52 02 00 	    subui   r5,r5,#1
014320 BD 22 F8 FF 	    bgt     r5,.imbxl1
014324 63 01 00 00 	    sw      r0,MBX_LINK[r2]               ; last one
                	
                	    ; Initialize mailboxes with default values.
014328 0A 50 00 10 	    ldi     r5,#NR_MBX
01432C FC C5 00 00 	    lea     r2,MBX_Array
014330 47 20 00 FE 
                	.imbxl2:    
014334 63 01 10 00 	    sw      r0,MBX_TQ_HEAD[r2]
014338 63 01 30 00 	    sw      r0,MBX_TQ_TAIL[r2]
01433C 63 01 40 00 	    sw      r0,MBX_MQ_HEAD[r2]
014340 63 01 50 00 	    sw      r0,MBX_MQ_TAIL[r2]
014344 61 01 60 00 	    sc      r0,MBX_TQ_COUNT[r2]
014348 61 01 68 00 	    sc      r0,MBX_MQ_COUNT[r2]
01434C 60 01 6E 00 	    sb      r0,MBX_MQ_STRATEGY[r2]       ; unlimited
014350 60 01 6C 00 	    sb      r0,MBX_OWNER[r2]             ; JOB #0
014354 0A 10 10 00 	    ldi     r1,#8                        ; default to queue eight messages
014358 61 11 64 00 	    sc      r1,MBX_MQ_SIZE[r2]
01435C 61 01 70 00 	    sc      r0,MBX_MQ_MISSED[r2]
014360 14 21 80 00 	    addui   r2,r2,#MBX_Size
014364 95 52 02 00 	    subui   r5,r5,#1
014368 BD 22 E6 FF 	    bgt     r5,.imbxl2
                	    
                	    ; Initialize the free TCB list
                	    ; The first two TCB's are pre-allocated and so aren't part of the list
01436C 7C C1 00 00 	    ldi     r2,#TCB_Array+TCB_Size*2
014370 0A 20 00 10 
014374 7C C0 00 00 	    sw      r2,FreeTCB
014378 63 20 10 02 
                	.0001:
01437C 14 31 00 08 	    addui   r3,r2,#TCB_Size
014380 63 31 30 04 	    sw      r3,TCB_NextFree[r2]
014384 14 21 00 08 	    addui   r2,r2,#TCB_Size
014388 FC C4 00 00 	    cmpu    r4,r2,#TCB_ArrayEnd-TCB_Size
01438C 16 41 00 F8 
014390 3D 42 F6 FF 	    blt     r4,.0001
014394 3F 00 00 00 	    nop
014398 63 01 30 04 	    sw      r0,TCB_NextFree[r2]
                	
01439C 7C C1 00 00 	    ldi     r2,#TCB_Array+TCB_Size*2
0143A0 0A 20 00 10 
0143A4 0A 40 04 00 	    ldi     r4,#2
                	.nextTCB:
0143A8 0A 50 00 00 	    ldi     r5,#0
0143AC 63 51 28 04 	    sw      r5,TCB_hJCB[r2]   ; owning JOB = monitor
0143B0 7C 01 00 00 	    ldi     r3,#BranchToSelf
0143B4 0A 30 30 80 
0143B8 63 31 00 03 	    sw      r3,TCB_IPC[r2]    ; set startup address
0143BC 63 31 20 03 	    sw      r3,TCB_EPC[r2]
0143C0 63 31 10 03 	    sw      r3,TCB_DPC[r2]
0143C4 17 32 00 20 	    mulu    r3,r4,#4096       ; initial stack size=4096
0143C8 7C F0 07 00 	    addui   r3,r3,#STACKS_Array+4088
0143CC 94 31 F0 1F 
0143D0 63 31 E0 01 	    sw      r3,TCB_r30[r2]    ; set the stack pointer to the default stack
0143D4 14 21 00 08 	    addui   r2,r2,#TCB_Size   ; move to next TCB 768B TCB size
0143D8 14 42 02 00 	    addui   r4,r4,#1
0143DC 16 12 00 02 	    cmpu    r1,r4,#NR_TCB
0143E0 BD 40 E4 FF 	    blt     r1,.nextTCB
                	
                		; manually build the IO focus list
0143E4 47 10 80 27 		lea		r1,JCB0
0143E8 7C C0 00 00 		sw	    r1,IOFocusNdx		; Job #0 (Monitor) has the focus
0143EC 63 10 50 00 
0143F0 E3 10 50 08 		sw		r1,JCB_iof_next[r1]
0143F4 E3 10 60 08 		sw		r1,JCB_iof_prev[r1]
0143F8 0A 10 02 00 		ldi		r1,#1
0143FC 7C C0 00 00 		sw		r1,IOFocusTbl		; set the job #0 request bit
014400 63 10 60 00 
014404 7C 34 12 00 	    ldi     r1,#$12345678  ; set system initialized flag
014408 0A 10 F0 AC 
01440C 7C C0 00 00 	    sw      r1,FMTK_Inited
014410 63 10 60 03 
                	
014414 39 20 00 00 	    bsr     UnlockSYS
                	 
014418 0A 10 0E 00 		ldi		r1,#7          ; priority
01441C 0A 20 00 00 		ldi		r2,#0          ; processor #0
014420 7C 01 00 00 		ldi		r3,#IdleTask|1 ; start address (start in kernel mode)
014424 0A 30 9A 88 
014428 0A 40 00 00 		ldi     r4,#0          ; start parameter (NULL)
01442C 0A 50 00 00 		ldi     r5,#0          ; r5 = job handle of owning job
014430 38 0F 08 00 		sys     #FMTK_CALL
014434 01 00 00 00 		dh      1              ; start task
                	
014438 02 50 09 3E 	    mfspr   r21,tick
01443C 82 5A 29 2A 	    subu    r21,r21,r20
014440 7C C0 00 00 	    sw      r21,sys_ticks
014444 63 50 41 00 
                	
014448 3B FF 11 00 	    rts

                	;------------------------------------------------------------------------------
                	; IdleTask
                	;
                	; IdleTask is a low priority task that is always running. It runs when there
                	; is nothing else to run.
                	; This task check for tasks that are stuck in infinite loops and kills them.
                	;------------------------------------------------------------------------------
                	IdleTask:
                	it3:
01444C 7C C1 00 00 	    ldi     r2,#TCB_Array
014450 0A 20 00 00 
                	it2:
014454 7C D0 FF 00 		inc		TEXTSCR+228,#1	; increment IDLE active flag
014458 64 10 C8 01 
01445C 7C C1 00 00 		cmpu    r1,r2,#TCB_Array
014460 16 11 00 00 
014464 BD 00 0A 00 		beq		r1,it1
014468 40 11 20 04 		lb		r1,TCB_Status[r2]
01446C 86 10 40 00 		cmp		r1,r1,#TS_SLEEP
014470 BD 10 04 00 		bne		r1,it1
014474 02 11 00 1A 		mov     r1,r2
                	;	sys		#4				; KillTask function
                	;	dh		3
                	it1:
014478 02 00 06 6E 		wai						; wait for interrupt to happen
01447C 14 21 00 08 	    addui   r2,r2,#TCB_Size
014480 FC C4 00 00 	    cmpu    r1,r2,#TCB_ArrayEnd-TCB_Size
014484 16 11 00 F8 
014488 BD 40 E6 FF 	    blt     r1,it2
01448C 3A F8 FF FF 	    bra     it3
014490 02 00 00 6E 		cli						; enable interrupts
014494 3A F8 FF FF 		bra		it2
                	
                	;------------------------------------------------------------------------------
                	; Parameters:
                	;	r1 = job name
                	;	r2 = start address
                	;------------------------------------------------------------------------------
                	
                	StartJob:
014498 E7 EF 01 00 	    push    lr
01449C E7 E0 01 00 		push    r1
                		
                		; Get a free JCB
0144A0 39 0B 00 00 	    bsr     LockSYS
                	
0144A4 7C C0 00 00 		lw		r6,FreeJCB
0144A8 46 60 00 02 
0144AC 3D 03 20 00 		beq		r6,sjob1
0144B0 46 73 40 08 		lw		r7,JCB_Next[r6]
0144B4 7C C0 00 00 		sw		r7,FreeJCB
0144B8 63 70 00 02 
                	
0144BC 47 73 08 00 		lea		r7,JCB_Name[r6]		; r7 = address of name field
0144C0 82 93 00 1A 		mov		r9,r7				; save off buffer address
0144C4 0A 80 00 00 		ldi		r8,#0				; r8 = count of characters (0 to 31)
                	sjob3:
0144C8 C0 50 00 00 		lb	    r5,[r1]				; get a character
0144CC BD 02 0E 00 		beq		r5,sjob2			; end of string ?
0144D0 E0 53 02 00 		sb		r5,1[r7]
0144D4 94 10 02 00 		addui   r1,r1,#1
0144D8 94 73 02 00 		addui   r7,r7,#1
0144DC 14 84 02 00 		addui   r8,r8,#1
0144E0 16 54 3E 00 		cmpu	r5,r8,#31   		; max number of chars ?
0144E4 BD 42 F2 FF 		blt		r5,sjob3
                	sjob2:
0144E8 E0 84 00 00 		sb		r8,[r9]				; save name length
                	
                	sjob1:
0144EC 39 05 00 00 		bsr     UnlockSYS
0144F0 57 1F 10 00 		pop     r1
0144F4 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Lock/unlock routines.
                	;------------------------------------------------------------------------------
                	
                	LockSYS:
0144F8 E7 EF 01 00 	    push    lr
0144FC E7 E0 01 00 	    push    r1
014500 7C C0 00 00 	    lea     r1,sys_sema
014504 47 10 B0 03 
014508 39 05 00 00 	    bsr     LockSema
01450C 57 1F 10 00 	    pop     r1
014510 3B FF 11 00 	    rts
UnlockSYS:
014514 E7 EF 01 00 	    push    lr
014518 E7 E0 01 00 	    push    r1
01451C 7C C0 00 00 	    lea     r1,sys_sema
014520 47 10 B0 03 
014524 B9 0A 00 00 	    bsr     UnlockSema
014528 57 1F 10 00 	    pop     r1
01452C 3B FF 11 00 	    rts

                	;------------------------------------------------------------------------------
                	; Lock the semaphore.
                	;
                	; Occasionally the semaphore fails to lock correctly and the system hangs up
                	; waiting for the semaphore lock. This could be because the SWCR works but
                	; cr0 doesn't get updated, or the bfextu instruction fails?? So the lock is
                	; tested to see if the current task is the one holding the lock. If same task
                	; that holds the lock is attempting a new lock, then we just return and assume
                	; a successful lock. The problem with this approach is if the task attempts a
                	; lock both while running and during an interrupt routine. The resource wouldn't
                	; be corectly protected in that case. So no BIOS calls during interrupt
                	; routines! The BIOS isn't re-entrant.
                	;
                	; Parameters:
                	; r1 = address of semaphore to lock
                	;------------------------------------------------------------------------------
                	
                	LockSema:
014530 67 E1 01 00 	    push    r2
014534 E7 E1 01 00 	    push    r3
                	
                	    ; Interrupts should be already enabled or there would be no way for a locked
                	    ; semaphore to clear. Let's enable interrupts just in case.
014538 02 00 00 6E 	    cli
                	.0001:
01453C DC 30 00 00 	    lwar    r3,[r1]
014540 BD 01 0A 00 	    beq     r3,.0003            ; branch if free
014544 82 21 30 2C 	    cmpu    r2,r3,tr            ; test if already locked by this task
014548 3D 01 12 00 	    beq     r2,.0002
01454C 82 21 60 34 	    chk     r2,r3,b48           ; check if locked by a valid task
014550 3D 11 F6 FF 	    bne     r2,.0001
                	.0003:
014554 EE 80 01 00 	    swcr    tr,[r1]             ; try and lock it
014558 3F 00 00 00 	    nop                         ; cr0 needs time to update???
01455C 3F 00 00 00 	    nop
014560 02 30 00 3E 	    mfspr   r3,cr0
014564 83 31 48 D2 	    bfextu  r3,r3,#36,#36       ; status is bit 36 of cr0
014568 BD 01 EA FF 	    beq     r3,.0001            ; lock failed, go try again
                	.0002:
01456C 57 3F 10 00 	    pop     r3
014570 57 2F 10 00 	    pop     r2
014574 37 FF 01 00 	    rtl

                	;------------------------------------------------------------------------------
                	; Unlock a semaphore
                	;
                	; When unlocking the semaphore a test is made to see if the semaphore is still
                	; locked by same task attempting an unlock. If that is the case then the 
                	; SW instruction must have failed to clear the semaphore. So that the system
                	; isn't hung, we go back and redo the unlock.
                	;------------------------------------------------------------------------------
                	
                	UnlockSema:
014578 67 E1 01 00 	    push    r2
01457C E7 E1 01 00 	    push    r3
                	.0001:
014580 E3 00 00 00 	    sw      r0,[r1]
014584 C6 20 00 00 	    lw      r2,[r1]
014588 3D 01 0A 00 	    beq     r2,.0002  ; the semaphore is unlock, by this task or another
01458C 02 31 30 2C 	    cmpu    r3,r2,tr
014590 BD 01 F8 FF 	    beq     r3,.0001  ; ??? this task still has it locked - store failed
                	    ; Here the semaphore was locked, but not by this task anymore. Another task
                	    ; must have interceded amd locked the semaphore right after it was unlocked
                	    ; by this task. Make sure this is the case, and it's not just bad memory.
                	    ; Make sure the semaphore was locked by a valid task
014594 02 31 60 34 	    chk     r3,r2,b48
014598 BD 01 F4 FF 	    beq     r3,.0001
                	    ; Here the semaphore probably was validly locked by a different task.
                	    ; Assume the unlock must have been successful.
                	.0002:
01459C 57 3F 10 00 	    pop     r3
0145A0 57 2F 10 00 	    pop     r2
0145A4 37 FF 01 00 	    rtl
    
                	;------------------------------------------------------------------------------
                	; StartTask
                	;
                	; Startup a task. The task is automatically allocated a 1kW stack from the BIOS
                	; stacks area. 
                	;
                	; Parameters:
                	;	r1 = task priority
                	;	r2 = start flags
                	;	r3 = start address
                	;	r4 = start parameter
                	;	r5 = job handle
                	;------------------------------------------------------------------------------
                	
                	StartTask:
0145A8 E7 EF 01 00 	    push    lr
0145AC E7 E0 01 00 	    push    r1
0145B0 67 E1 01 00 	    push    r2
0145B4 E7 E1 01 00 	    push    r3
0145B8 67 E2 01 00 	    push    r4
0145BC E7 E2 01 00 	    push    r5
0145C0 67 E3 01 00 		push    r6
0145C4 E7 E3 01 00 		push    r7
0145C8 67 E4 01 00 		push    r8
0145CC E7 E4 01 00 		push    r9
0145D0 67 E5 01 00 		push    r10
0145D4 E7 E5 01 00 		push    r11
0145D8 82 60 00 1A 		mov		r6,r1				; r6 = task priority
0145DC 02 91 00 1A 		mov		r9,r2				; r9 = flag register value on startup
                		
                		; get a free TCB
                		;
0145E0 39 E3 FF FF 	    bsr     LockSYS
0145E4 7C C0 00 00 		lw		r1,FreeTCB			; get free tcb list pointer
0145E8 46 10 10 02 
0145EC 82 20 60 34 		chk     r2,r1,b48           ; check and make sure it's a valid pointer
0145F0 3D 01 7C 00 		beq		r2,stask1           ; branch if NULL or some other garbage
0145F4 82 20 00 1A 		mov     r2,r1
0145F8 46 11 30 04 		lw		r1,TCB_NextFree[r2]
0145FC 7C C0 00 00 		sw		r1,FreeTCB			; update the FreeTCB list pointer
014600 63 10 10 02 
                	
                	    ; set data breakpoint at FreeTCB address
014604 7C C0 00 00 	    ldi     r1,#$C00108
014608 0A 10 10 02 
01460C 82 00 64 3C 	    mtspr   dbad0,r1
014610 7C 0D 00 00 	    ldi     r1,#$D0001
014614 0A 10 02 00 
014618 82 00 6C 3C 	    mtspr   dbctrl,r1
                	
01461C 39 DF FF FF 		bsr     UnlockSYS
014620 02 11 00 1A 		mov     r1,r2				; r1 = TCB pointer
                	
                		; setup the stack for the task
                		; Zap the stack memory.
014624 02 71 00 1A 		mov		r7,r2
014628 7C C1 00 00 		subui   r2,r2,#TCB_Array
01462C 15 21 00 00 
014630 02 21 14 72 		lsr     r2,r2,#TCB_LogSize  ; r2 = index number of TCB
014634 02 21 18 70 		asl		r2,r2,#12			; 4kB stack per task
014638 7C F0 07 00 		addui	r8,r2,#STACKS_Array	; add in stack base
01463C 14 81 00 00 
014640 7C E0 07 00 		addui   r10,r2,#BIOS_STACKS_Array
014644 14 A1 00 00 
014648 7C D0 07 00 		addui   r11,r2,#SYS_STACKS_Array
01464C 14 B1 00 00 
                	
                		; It's safe to update the TCB here without checking the semaphore because
                		; the TCB isn't on any list. It's in no-man's land at this point.
014650 14 24 F0 1F 		addui   r2,r8,#4088
014654 E3 23 D0 04 		sw      r2,TCB_StackTop[r7]
014658 E3 23 E0 01 		sw      r2,TCB_r30[r7]     ; stack pointer is r30!
01465C E3 23 30 03 		sw      r2,TCB_ISP[r7]
014660 7C 01 00 00 		ldi     r1,#ExitTask
014664 0A 10 38 8E 
014668 E3 13 F0 01 		sw      r1,TCB_r31[r7]
01466C 14 85 F0 1F 		addui   r8,r10,#4088
014670 E3 83 10 05 		sw      r8,TCB_BIOS_Stack[r7]
014674 94 85 F0 1F 		addui   r8,r11,#4088
014678 E3 83 20 05 		sw      r8,TCB_SYS_Stack[r7]
01467C E3 43 10 00 		sw      r4,TCB_r1[r7]
014680 E0 93 00 05 		sb      r9,TCB_Affinity[r7]
014684 E0 63 24 04 		sb		r6,TCB_Priority[r7]
014688 E0 03 20 04 		sb		r0,TCB_Status[r7]
01468C E3 03 F0 04 		sw		r0,TCB_Timeout[r7]
014690 E0 53 28 04 		sb		r5,TCB_hJCB[r7]		; save job handle
014694 E3 03 C0 04 		sw		r0,TCB_MbxList[r7]
014698 8D 31 02 00 		or      r3,r3,#1            ; kernel mode flag for now
01469C E3 33 00 03 		sw      r3,TCB_IPC[r7];     ; set starting address
0146A0 E3 33 10 03 		sw      r3,TCB_DPC[r7];
0146A4 E3 33 20 03 		sw      r3,TCB_EPC[r7];
                	
                		; Insert the task into the ready list
0146A8 82 13 00 1A 		mov     r1,r7
0146AC B9 C9 FF FF 	    bsr     LockSYS
0146B0 39 5D 00 00 		bsr		AddTaskToReadyList
0146B4 39 CC FF FF 		bsr     UnlockSYS
                	stask2:
0146B8 57 BF 10 00 	    pop     r11
0146BC 57 AF 10 00 	    pop     r10
0146C0 57 9F 10 00 	    pop     r9
0146C4 57 8F 10 00 		pop     r8
0146C8 57 7F 10 00 		pop     r7
0146CC 57 6F 10 00 		pop     r6
0146D0 57 5F 10 00 		pop     r5
0146D4 57 4F 10 00 		pop     r4
0146D8 57 3F 10 00 		pop     r3
0146DC 57 2F 10 00 		pop     r2
0146E0 57 1F 10 00 		pop     r1
0146E4 3B FF 11 00 		rts
stask1:
0146E8 B9 C5 FF FF 		bsr     UnlockSYS
0146EC B9 66 02 00 		bsr		kernel_panic
0146F0 4E 6F 20 6D 		db		"No more task control blocks available.",0
0146F4 6F 72 65 20 
0146F8 74 61 73 6B 
0146FC 20 63 6F 6E 
014700 74 72 6F 6C 
014704 20 62 6C 6F 
014708 63 6B 73 20 
01470C 61 76 61 69 
014710 6C 61 62 6C 
014714 65 2E 00    
014717 00 3A F4 FF 		bra		stask2
01471B FF          
                	
                	;------------------------------------------------------------------------------
                	; ExitTask
                	;
                	; This routine is called when the task exits with an rts instruction. OR
                	; it may be invoked with a JMP ExitTask. In either case the task must be
                	; running so it can't be on the timeout list.
                	;------------------------------------------------------------------------------
                	message "ExitTask"
                	ExitTask:
                		; release any aquired resources
                		; - mailboxes
                		; - messages
                	;	hoff
01471C 7C 01 00 00 	    lea     r1,msgExitingTask
014720 47 10 D8 8E 
014724 39 66 F8 FF 	    bsr     DisplayString
014728 02 1C 00 1A 	    mov     r1,tr
01472C B9 B9 FF FF 	    bsr     LockSYS
014730 39 5D 00 00 		bsr		RemoveTaskFromReadyList
014734 60 0C 20 04 		sb		r0,TCB_Status[tr]				; set task status to TS_NONE
                	;	bsr		ReleaseIOFocus
                		; Free up all the mailboxes associated with the task.
                	xtsk7:
014738 46 1C C0 04 		lw		r1,TCB_MbxList[tr]
01473C 82 20 62 34 		chk     r2,r1,b49
014740 3D 01 06 00 		beq		r2,xtsk6
014744 39 C3 00 00 		bsr		FreeMbx
014748 3A FE FF FF 		bra		xtsk7
                	xtsk6:
01474C 7C C0 00 00 		lw		r1,FreeTCB						; add the task control block to the free list
014750 46 10 10 02 
014754 63 1C 30 04 		sw		r1,TCB_NextFree[tr]
014758 7C C0 00 00 		sw		tr,FreeTCB
01475C 63 80 11 02 
014760 B9 B6 FF FF 		bsr     UnlockSYS
                		; This loop will eventually be interrupted, the interrupt return will not
                		; return to here.
014764 02 00 06 6E 		wai
                	xtsk1:
014768 3A 00 00 00 		bra     xtsk1
                	
                	msgExitingTask:
01476C 45 78 69 74 	    db    "Exiting task", CR,LF,0
014770 69 6E 67 20 
014774 74 61 73 6B 
014778 0D 0A 00    
                	
                	;------------------------------------------------------------------------------
                	; KillTask
                	;
                	; "Kills" a task, removing it from all system lists. If the task has the 
                	; IO focus, the IO focus is switched. Task #0 is immortal and cannot be
                	; killed. Task #1 is immortal and cannot be killed.
                	;
                	; Registers Affected: none
                	; Parameters:
                	;	r1 = task number
                	;------------------------------------------------------------------------------
                	;
                	KillTask:
01477B 00 E7 EF 01 	    push    lr
01477F 00          
014780 67 E1 01 00 		push    r2
014784 E7 E1 01 00 		push    r3
                	;	bsr     ValidateTCBPtr
014788 82 20 40 34 		chk     r2,r1,b32
01478C 3D 01 3C 00 		beq		r2,kt1
014790 82 20 00 1A 		mov     r2,r1
014794 B9 AC FF FF 		bsr     LockSYS
014798 C6 10 28 04 		lw		r1,TCB_hJCB[r1]
01479C 39 94 02 00 		bsr		ForceReleaseIOFocus
0147A0 02 11 00 1A 		mov     r1,r2
0147A4 7C 00 00 00 		jsr		RemoveTaskFromReadyList
0147A8 3C F0 0D A5 
0147AC 7C 00 00 00 		jsr		RemoveFromTimeoutList
0147B0 3C F0 C1 A5 
0147B4 E0 00 20 04 		sb		r0,TCB_Status[r1]    		; set task status to TS_NONE
                	
                		; Free up all the mailboxes associated with the task.
0147B8 E7 E0 01 00 		push    r1
0147BC 82 20 00 1A 		mov     r2,r1
0147C0 82 30 00 1A 		mov     r3,r1
0147C4 C6 11 C0 04 		lw		r1,TCB_MbxList[r3]
                	kt7:
0147C8 BD 00 0A 00 		beq		r1,kt6
0147CC C6 30 00 00 		lw      r3,MBX_LINK[r1]
0147D0 B9 B4 00 00 		bsr		FreeMbx2
0147D4 82 11 00 1A 		mov     r1,r3
0147D8 3A FE FF FF 		bra		kt7
                	kt6:
0147DC 57 1F 10 00 	    pop     r1
0147E0 7C C0 00 00 		lw		r2,FreeTCB					; add the task control block to the free list
0147E4 46 20 10 02 
0147E8 E3 20 30 04 		sw		r2,TCB_NextFree[r1]
0147EC 7C C0 00 00 		sw		r1,FreeTCB
0147F0 63 10 10 02 
0147F4 39 A4 FF FF 		bsr     UnlockSYS
0147F8 82 20 30 0C 		cmp     r2,r1,tr                    ; keep running the current task as long as
0147FC 3D 11 04 00 		bne		r2,kt1						; the task didn't kill itself.
                	.self:
014800 3A 00 00 00 		bra     .self
                	kt1:
014804 57 3F 10 00 	    pop     r3
014808 57 2F 10 00 		pop     r2
01480C 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Dump the task list. The task list isn't locked while it is being dumped
                	; because that would prevent task switches from occuring and we probably
                	; don't want to interfere with the system. However because it's not locked,
                	; there's no guarentee that everything will display correctly. It's safe to
                	; not lock the task list because we are simply reading the fields from it and
                	; not updating information.
                	;------------------------------------------------------------------------------
                	
                	message "DumpTaskList"
                	DumpTaskList:
014810 E7 EF 01 00 	    push    lr
014814 E7 E0 01 00 		push    r1
014818 67 E1 01 00 		push    r2
01481C E7 E1 01 00 		push    r3
014820 67 E2 01 00 		push	r4
014824 7C 01 00 00 		ldi		r1,#msgTaskList
014828 0A 10 E0 91 
01482C 39 45 F8 FF 		bsr		DisplayString
014830 0A 30 00 00 		ldi		r3,#0
                	.0001:
                	;    lwar    r4,tcb_sema
                	;    bne     r4,.0001
                	;    swcr    tr,tcb_sema
                	;    mfspr   r4,cr0
                	;    and     r4,r4,#$1000000000
                	;    beq     r4,.0001
                	dtl2:
014834 7C C0 00 00 		lw		r1,QNdx0[r3]
014838 C6 11 A0 00 
01483C 82 40 00 1A 		mov		r4,r1
014840 3D 02 48 00 		beq		r4,dtl_nextList
                	dtl_nextTask:
014844 0A 20 06 00 	    ldi     r2,#3
014848 82 40 00 1A 	    mov     r4,r1
01484C C0 10 00 05 	    lb      r1,TCB_Affinity[r1]
014850 39 58 F8 FF 	    bsr     PRTNUM
014854 02 12 00 1A 	    mov     r1,r4
014858 0A 20 08 00 		ldi	    r2,#4
01485C 82 11 06 72 		lsr     r1,r3,#3
014860 39 56 F8 FF 		bsr		PRTNUM
014864 39 19 F9 FF 		bsr		DisplaySpace
014868 02 12 00 1A 		mov		r1,r4
01486C B9 2F F8 FF 		bsr		DisplayHalf
014870 B9 17 F9 FF 		bsr		DisplaySpace
014874 39 17 F9 FF 		bsr		DisplaySpace
014878 02 12 00 1A 		mov		r1,r4
01487C C0 10 20 04 		lb		r1,TCB_Status[r1]
014880 39 32 F8 FF 		bsr		DisplayByte
014884 39 15 F9 FF 		bsr		DisplaySpace
014888 0A 20 06 00 		ldi		r2,#3
01488C 46 12 10 04 		lw		r1,TCB_PrevRdy[r4]
014890 39 2B F8 FF 		bsr		DisplayHalf
014894 39 13 F9 FF 		bsr		DisplaySpace
014898 0A 20 06 00 		ldi		r2,#3
01489C 46 12 00 04 		lw		r1,TCB_NextRdy[r4]
0148A0 39 29 F8 FF 		bsr		DisplayHalf
0148A4 39 11 F9 FF 		bsr		DisplaySpace
0148A8 46 12 F0 04 		lw		r1,TCB_Timeout[r4]
0148AC 39 25 F8 FF 		bsr		DisplayWord
0148B0 B9 45 F8 FF 		bsr		CRLF
0148B4 46 42 00 04 		lw		r4,TCB_NextRdy[r4]
0148B8 02 12 60 34 		chk     r1,r4,b48
0148BC BD 00 0A 00 		beq     r1,dtl_nextList
0148C0 7C C0 00 00 		lw      r1,QNdx0[r3]
0148C4 C6 11 A0 00 
0148C8 02 12 02 0C 		cmp		r1,r4,r1
0148CC BD 10 BC FF 		bne		r1,dtl_nextTask
                	dtl_nextList:
0148D0 94 31 10 00 		addui   r3,r3,#8
0148D4 86 41 80 00 		cmp     r4,r3,#64
0148D8 3D 42 AE FF 		blt		r4,dtl2
                	;	sw		r0,tcb_sema       ; release semaphore
0148DC 57 4F 10 00 		pop		r4
0148E0 57 3F 10 00 		pop     r3
0148E4 57 2F 10 00 		pop     r2
0148E8 57 1F 10 00 		pop     r1
0148EC 3B FF 11 00 		rts

                	msgTaskList:
0148F0 0D 0A 43 50 		db	CR,LF,"CPU Pri   Task   Stat   Prv      Nxt     Timeout",CR,LF,0
0148F4 55 20 50 72 
0148F8 69 20 20 20 
0148FC 54 61 73 6B 
014900 20 20 20 53 
014904 74 61 74 20 
014908 20 20 50 72 
01490C 76 20 20 20 
014910 20 20 20 4E 
014914 78 74 20 20 
014918 20 20 20 54 
01491C 69 6D 65 6F 
014920 75 74 0D 0A 
014924 00          
                	
                	
                	;------------------------------------------------------------------------------
                	; r1 = task number
                	; r2 = new priority
                	;------------------------------------------------------------------------------
                	
                	SetTaskPriority:
014925 00 00 00 E7 	    push    lr
014929 EF 01 00    
01492C E7 E1 01 00 		push    r3
014930 39 79 FF FF 		bsr     LockSYS
014934 C0 30 20 04 		lb		r3,TCB_Status[r1]			    ; if the task is on the ready list
014938 8C 31 30 00 		and		r3,r3,#TS_READY|TS_RUNNING		; then remove it and re-add it.
01493C BD 01 0A 00 		beq		r3,.stp2						; Otherwise just go set the priority field
014940 39 1B 00 00 		bsr		RemoveTaskFromReadyList
014944 E0 30 24 04 		sb		r3,TCB_Priority[r1]
014948 39 0A 00 00 		bsr		AddTaskToReadyList
01494C 3A 01 00 00 		bra		.stp3
                	.stp2:
014950 E0 30 24 04 		sb		r3,TCB_Priority[r1]
                	.stp3:
014954 39 78 FF FF 		bsr     UnlockSYS
014958 57 3F 10 00 		pop     r3
01495C 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Make sure we have a real TCB pointer.
                	;------------------------------------------------------------------------------
                	
                	ValidateTCBPtr:
014960 67 E1 01 00 	    push    r2
014964 8C 20 FE 07 	    and     r2,r1,#$3FF
014968 3D 01 08 00 	    beq     r2,.0001
                	.badPtr:
01496C 0A 10 00 00 	    ldi     r1,#0
014970 57 2F 10 00 	    pop     r2
014974 37 FF 01 00 	    rtl
.0001:
014978 7C C1 00 00 	    cmp     r2,r1,#TCB_Array
01497C 86 20 00 00 
014980 3D 41 F6 FF 	    blt     r2,.badPtr
014984 7C C5 00 00 	    cmp     r2,r1,#TCB_ArrayEnd
014988 86 20 00 00 
01498C 3D 31 F0 FF 	    bge     r2,.badPtr
014990 57 2F 10 00 	    pop     r2
014994 37 FF 01 00 	    rtl

                	;------------------------------------------------------------------------------
                	; AddTaskToReadyList
                	;
                	; The ready list is a group of eight ready lists, one for each priority
                	; level. Each ready list is organized as a doubly linked list to allow fast
                	; insertions and removals. The list is organized as a ring (or bubble) with
                	; the last entry pointing back to the first. This allows a fast task switch
                	; to the next task. Which task is at the head of the list is maintained
                	; in the variable QNdx for the priority level.
                	;
                	; On Entry: Task list must be locked
                	; Registers Affected: none
                	; Parameters:
                	;	r1 = pointer to task control block
                	; Returns:
                	;	none
                	;------------------------------------------------------------------------------
                	message "AddToReadyList"
                	AddTaskToReadyList:
014998 E7 EF 01 00 	    push    lr
01499C 67 E1 01 00 	    push    r2
0149A0 E7 E1 01 00 	    push    r3
0149A4 67 E2 01 00 	    push    r4
0149A8 82 20 60 34 	    chk     r2,r1,b48             ; validate TCB pointer
0149AC 3D 01 2E 00 	    beq     r2,.0001
0149B0 0A 20 20 00 		ldi     r2,#TS_READY
0149B4 E0 20 20 04 		sb		r2,TCB_Status[r1]
0149B8 C0 30 24 04 		lb		r3,TCB_Priority[r1]
0149BC 96 41 10 00 		cmpu	r4,r3,#8
0149C0 3D 42 04 00 		blt		r4,.0002
0149C4 0A 30 0E 00 		ldi		r3,#PRI_LOWEST
                	.0002:
0149C8 82 40 00 1A 	    mov     r4,r1
0149CC 82 31 06 70 	    asl     r3,r3,#3
0149D0 7C C0 00 00 		lw		r1,QNdx0[r3]
0149D4 C6 11 A0 00 
0149D8 82 30 60 34 		chk     r3,r1,b48
0149DC BD 01 0E 00 		beq		r3,.0003
0149E0 C6 30 10 04 		lw		r3,TCB_PrevRdy[r1]
0149E4 E3 11 00 04 		sw		r1,TCB_NextRdy[r3]
0149E8 63 32 10 04 		sw		r3,TCB_PrevRdy[r4]
0149EC E3 40 10 04 		sw		r4,TCB_PrevRdy[r1]
0149F0 63 12 00 04 		sw		r1,TCB_NextRdy[r4]
0149F4 BA 02 00 00 		bra     .0001
                	
                		; Here the ready list was empty, so add at head
                	.0003:
0149F8 7C C0 00 00 		sw		r4,QNdx0[r3]
0149FC E3 41 A0 00 
014A00 63 42 00 04 		sw		r4,TCB_NextRdy[r4]
014A04 63 42 10 04 		sw		r4,TCB_PrevRdy[r4]
                	.0001:
014A08 57 4F 10 00 		pop     r4
014A0C 57 3F 10 00 		pop     r3
014A10 57 2F 10 00 		pop     r2
014A14 3B FF 11 00 		rts
	
                	
                	;------------------------------------------------------------------------------
                	; RemoveTaskFromReadyList
                	;
                	; This subroutine removes a task from the ready list.
                	;
                	; Registers Affected: none
                	; Parameters:
                	;	r1 = pointer to task control block
                	; Returns:
                	;   r1 = pointer to task control block
                	;------------------------------------------------------------------------------
                	message "RemoveFromReadyList"
                	RemoveTaskFromReadyList:
014A18 E7 EF 01 00 	    push    lr
014A1C 67 E1 01 00 	    push    r2
014A20 E7 E1 01 00 	    push    r3
014A24 67 E2 01 00 		push	r4
014A28 E7 E2 01 00 		push	r5
014A2C 82 20 60 34 	    chk     r2,r1,b48           ; validate TCB pointer
014A30 3D 01 32 00 	    beq     r2,rfr2
014A34 C0 30 20 04 		lb		r3,TCB_Status[r1]	; is the task on the ready list ?
014A38 8C 41 30 00 		and		r4,r3,#TS_READY|TS_RUNNING
014A3C 3D 02 2C 00 		beq		r4,rfr2
014A40 8C 31 CE FF 		and		r3,r3,#~(TS_READY|TS_RUNNING)
	sb		r3,TCB_Status[r1]	; task status no longer running or ready
014A44 E0 30 20 04 
014A48 C6 40 00 04 		lw		r4,TCB_NextRdy[r1]	; Get previous and next fields.
014A4C C6 50 10 04 		lw		r5,TCB_PrevRdy[r1]
014A50 E3 42 00 04 		sw		r4,TCB_NextRdy[r5]
014A54 63 52 10 04 		sw		r5,TCB_PrevRdy[r4]
014A58 C0 30 24 04 		lb		r3,TCB_Priority[r1]
014A5C 8C 31 0E 00 		and     r3,r3,#7            ; 0-7
014A60 82 31 06 70 		asl     r3,r3,#3
014A64 7C C0 00 00 		lw      r5,QNdx0[r3]
014A68 C6 51 A0 00 
014A6C 82 50 0A 0C 		cmp		r5,r1,r5			; Are we removing the QNdx task ?
014A70 BD 12 12 00 		bne		r5,rfr2
014A74 7C C0 00 00 		sw		r4,QNdx0[r3]
014A78 E3 41 A0 00 
                		; Now we test for the case where the task being removed was the only one
                		; on the ready list of that priority level. We can tell because the
                		; NextRdy would point to the task itself.
014A7C 02 52 02 0C 		cmp		r5,r4,r1				
014A80 BD 12 06 00 		bne		r5,rfr1
014A84 7C C0 00 00 		sw		r0,QNdx0[r3]        ; Make QNdx NULL
014A88 E3 01 A0 00 
                	rfr1:
014A8C E3 00 00 04 		sw		r0,TCB_NextRdy[r1]
014A90 E3 00 10 04 		sw		r0,TCB_PrevRdy[r1]
                	rfr2:
014A94 57 5F 10 00 		pop		r5
014A98 57 4F 10 00 		pop		r4
014A9C 57 3F 10 00 		pop     r3
014AA0 57 2F 10 00 		pop     r2
014AA4 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; AddToTimeoutList
                	; AddToTimeoutList adds a task to the timeout list. The task is placed in the
                	; list depending on it's timeout value.
                	;
                	; Registers Affected: none
                	; Parameters:
                	;	r1 = task
                	;	r2 = timeout value
                	;------------------------------------------------------------------------------
                	message "AddToTimeoutList"
                	AddToTimeoutList:
014AA8 E7 EF 01 00 	    push    lr
014AAC 67 E1 01 00 		push    r2
014AB0 E7 E1 01 00 		push    r3
014AB4 67 E2 01 00 		push	r4
014AB8 E7 E2 01 00 		push	r5
                	
                	;    bsr     ValidateTCBPtr
014ABC 82 20 60 34 	    chk     r2,r1,b48
014AC0 3D 01 56 00 	    beq     r2,attl1
014AC4 0A 50 00 00 	    ldi     r5,#0
014AC8 E3 00 50 04 		sw		r0,TCB_NextTo[r1]   ; these fields should already be NULL
014ACC E3 00 60 04 		sw		r0,TCB_PrevTo[r1]
014AD0 7C C0 00 00 		lw		r4,TimeoutList		; are there any tasks on the timeout list ?
014AD4 46 40 20 02 
014AD8 3D 02 3A 00 		beq		r4,attl_add_at_head	; If not, update head of list
                	attl_check_next:
014ADC 46 32 F0 04 	    lw      r3,TCB_Timeout[r4]            
014AE0 02 21 06 2A 		subu	r2,r2,r3	        ; is this timeout > next
014AE4 3D 41 12 00 		blt		r2,attl_insert_before
014AE8 02 52 00 1A 		mov		r5,r4
014AEC 46 42 50 04 		lw		r4,TCB_NextTo[r4]
014AF0 3D 12 F6 FF 		bne		r4,attl_check_next
                	
                		; timeout of a greater value. So we add the task to the end of the list.
                	attl_add_at_end:
                		; Here we scanned until the end of the timeout list and didn't find a 
014AF4 E3 00 50 04 		sw		r0,TCB_NextTo[r1]		; 
014AF8 E3 12 50 04 		sw		r1,TCB_NextTo[r5]
014AFC E3 50 60 04 		sw		r5,TCB_PrevTo[r1]
014B00 E3 20 F0 04 		sw		r2,TCB_Timeout[r1]
014B04 BA 0B 00 00 		bra		attl_exit
                	
                	attl_insert_before:
014B08 BD 02 0C 00 		beq		r5,attl_insert_before_head
014B0C E3 40 50 04 		sw		r4,TCB_NextTo[r1]	; next on list goes after this task
014B10 E3 50 60 04 		sw		r5,TCB_PrevTo[r1]	; set previous link
014B14 E3 12 50 04 		sw		r1,TCB_NextTo[r5]
014B18 63 12 60 04 		sw		r1,TCB_PrevTo[r4]
014B1C 3A 03 00 00 		bra		attl_adjust_timeout
                	
                		; Here there is no previous entry in the timeout list
                		; Add at start
                	attl_insert_before_head:
014B20 63 12 60 04 		sw		r1,TCB_PrevTo[r4]
014B24 E3 00 60 04 		sw		r0,TCB_PrevTo[r1]	;
014B28 E3 40 50 04 		sw		r4,TCB_NextTo[r1]
014B2C 7C C0 00 00 		sw		r1,TimeoutList			; update the head pointer
014B30 63 10 20 02 
                	attl_adjust_timeout:
014B34 02 21 06 28 		addu	r2,r2,r3	       ; get back timeout
014B38 E3 20 F0 04 		sw		r2,TCB_Timeout[r1]
014B3C 46 52 F0 04 		lw		r5,TCB_Timeout[r4]	; adjust the timeout of the next task
014B40 82 52 04 2A 		subu	r5,r5,r2
014B44 63 52 F0 04 		sw		r5,TCB_Timeout[r4]
014B48 3A 03 00 00 		bra		attl_exit
                	
                		; Here there were no tasks on the timeout list, so we add at the
                		; head of the list.
                	attl_add_at_head:
014B4C 7C C0 00 00 		sw		r1,TimeoutList		; set the head of the timeout list
014B50 63 10 20 02 
014B54 E3 20 F0 04 		sw		r2,TCB_Timeout[r1]
                		; flag no more entries in timeout list
014B58 E3 00 50 04 		sw		r0,TCB_NextTo[r1]	; no next entries
014B5C E3 00 60 04 		sw		r0,TCB_PrevTo[r1]	; and no prev entries
                	attl_exit:
014B60 C0 20 20 04 		lb		r2,TCB_Status[r1]	; set the task's status as timing out
014B64 0D 21 02 00 		or		r2,r2,#TS_TIMEOUT
014B68 E0 20 20 04 		sb		r2,TCB_Status[r1]
                	attl1:
014B6C 57 5F 10 00 		pop		r5
014B70 57 4F 10 00 		pop		r4
014B74 57 3F 10 00 		pop     r3
014B78 57 2F 10 00 		pop     r2
014B7C 3B FF 11 00 		rts
	
                	;------------------------------------------------------------------------------
                	; RemoveFromTimeoutList
                	;
                	; This routine is called when a task is killed. The task may need to be
                	; removed from the middle of the timeout list.
                	;
                	; On entry: the timeout list semaphore must be already set.
                	; Registers Affected: none
                	; Parameters:
                	;	 r1 = pointer to task control block
                	;------------------------------------------------------------------------------
                	
                	RemoveFromTimeoutList:
014B80 E7 EF 01 00 	    push    lr
014B84 67 E1 01 00 		push    r2
014B88 E7 E1 01 00 		push    r3
014B8C 67 E2 01 00 		push	r4
014B90 E7 E2 01 00 		push	r5
                	
                	;    bsr     ValidateTCBPtr
014B94 82 20 60 34 	    chk     r2,r1,b48
014B98 3D 01 46 00 	    beq     r2,rftBadPtr
014B9C C0 40 20 04 		lb		r4,TCB_Status[r1]		; Is the task even on the timeout list ?
014BA0 0C 42 02 00 		and		r4,r4,#TS_TIMEOUT
014BA4 3D 02 40 00 		beq		r4,rftl_not_on_list
014BA8 7C C0 00 00 		lw      r5,TimeoutList
014BAC 46 50 20 02 
014BB0 82 40 0A 0C 		cmp		r4,r1,r5         		; Are we removing the head of the list ?
014BB4 3D 02 18 00 		beq		r4,rftl_remove_from_head
014BB8 C6 40 60 04 		lw		r4,TCB_PrevTo[r1]		; adjust the links of the next and previous
014BBC 3D 02 26 00 		beq		r4,rftl_empty_list		; no previous link - list corrupt?
014BC0 C6 50 50 04 		lw		r5,TCB_NextTo[r1]		; tasks on the list to point around the task
014BC4 63 52 50 04 		sw		r5,TCB_NextTo[r4]
014BC8 BD 02 20 00 		beq		r5,rftl_empty_list
014BCC E3 42 60 04 		sw		r4,TCB_PrevTo[r5]
014BD0 C6 20 F0 04 		lw		r2,TCB_Timeout[r1]		; update the timeout of the next on list
014BD4 C6 32 F0 04 		lw      r3,TCB_Timeout[r5]
014BD8 02 21 06 08 		add		r2,r2,r3            	; with any remaining timeout in the task
014BDC E3 22 F0 04 		sw		r2,TCB_Timeout[r5]		; removed from the list
014BE0 3A 05 00 00 		bra		rftl_empty_list
                	
                		; Update the head of the list.
                	rftl_remove_from_head:
014BE4 C6 50 50 04 		lw		r5,TCB_NextTo[r1]
014BE8 7C C0 00 00 		sw		r5,TimeoutList			; store next field into list head
014BEC 63 50 20 02 
014BF0 BD 02 0C 00 		beq		r5,rftl_empty_list
014BF4 C6 40 F0 04 		lw		r4,TCB_Timeout[r1]		; add any remaining timeout to the timeout
014BF8 C6 32 F0 04 		lw      r3,TCB_Timeout[r5]
014BFC 02 42 06 08 		add		r4,r4,r3            	; of the next task on the list.
014C00 E3 42 F0 04 		sw		r4,TCB_Timeout[r5]
014C04 E3 02 60 04 		sw		r0,TCB_PrevTo[r5]       ; there is no previous item to the head
                		
                		; Here there is no previous or next items in the list, so the list
                		; will be empty once this task is removed from it.
                	rftl_empty_list:
014C08 82 20 00 1A 		mov     r2,r1
014C0C 40 31 20 04 		lb		r3,TCB_Status[r2]	; clear timeout status (bit #0)
014C10 8C 31 FC 01 		and     r3,r3,#$FE
014C14 60 31 20 04 		sb      r3,TCB_Status[r2]
014C18 63 01 50 04 		sw		r0,TCB_NextTo[r2]	; make sure the next and prev fields indicate	
014C1C 63 01 60 04 		sw	    r0,TCB_PrevTo[r2]   ; the task is not on a list.
014C20 02 11 00 1A 		mov     r1,r2
                	rftBadPtr:
                	rftl_not_on_list:
014C24 57 5F 10 00 		pop		r5
014C28 57 4F 10 00 		pop		r4
014C2C 57 3F 10 00 		pop     r3
014C30 57 2F 10 00 		pop     r2
                	rftl_not_on_list2:
014C34 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; PopTimeoutList
                	;
                	; This subroutine is called from within the timer ISR when the task's 
                	; timeout expires. It's always the head of the list that's being removed in
                	; the timer ISR so the removal from the timeout list is optimized. We know
                	; the timeout expired, so the amount of time to add to the next task is zero.
                	;
                	; Registers Affected: 
                	; Parameters:
                	;	r2: head of timeout list
                	; Returns:
                	;	r1 = task id of task popped from timeout list
                	;------------------------------------------------------------------------------
                	
                	PopTimeoutList:
014C38 46 11 50 04 		lw		r1,TCB_NextTo[r2]
014C3C 7C C0 00 00 		sw		r1,TimeoutList  ; store next field into list head
014C40 63 10 20 02 
014C44 BD 00 04 00 		beq		r1,ptl1
014C48 E3 00 60 04 		sw		r0,TCB_PrevTo[r1]; previous link = NULL
                	ptl1:
014C4C 40 11 20 04 	    lb      r1,TCB_Status[r2]
014C50 8C 10 FC 01 	    and     r1,r1,#$FE       ; clear timeout status
014C54 60 11 20 04 	    sb      r1,TCB_Status[r2]
014C58 63 01 50 04 		sw		r0,TCB_NextTo[r2]	; make sure the next and prev fields indicate
014C5C 63 01 60 04 		sw		r0,TCB_PrevTo[r2]		; the task is not on a list.
014C60 02 11 00 1A 		mov     r1,r2
014C64 37 FF 01 00 	    rtl

                	;------------------------------------------------------------------------------
                	; Sleep
                	;
                	; Put the currently running task to sleep for a specified time.
                	;
                	; Registers Affected: none
                	; Parameters:
                	;	r1 = time duration in jiffies (1/60 second).
                	; Returns: none
                	;------------------------------------------------------------------------------
                	message "sleep"
                	
                	Sleep:
014C68 E7 EF 01 00 	    push    lr
014C6C E7 E0 01 00 	    push    r1
014C70 67 E1 01 00 	    push    r2
014C74 82 20 00 1A 		mov     r2,r1
014C78 39 10 FF FF 		bsr     LockSYS
014C7C 02 1C 00 1A 		mov		r1,tr
014C80 39 B3 FF FF 		bsr		RemoveTaskFromReadyList
014C84 B9 C4 FF FF 		bsr		AddToTimeoutList	; The scheduler will be returning to this
014C88 B9 11 FF FF 		bsr     UnlockSYS
014C8C 38 0F 04 80 		int		#2				; task eventually, once the timeout expires,
014C90 57 2F 10 00 		pop     r2
014C94 57 1F 10 00 		pop     r1
014C98 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Allocate a mailbox
                	; Parameters:
                	;	r1 = pointer to place to store handle
                	; Returns:
                	;	r1 = E_Ok	means mailbox allocated properly
                	;	r1 = E_Arg	means a NULL pointer was passed in r1
                	;	r1 = E_NoMoreMbx	means no more mailboxes were available
                	;	zf is set if everything is ok, otherwise zf is clear
                	;------------------------------------------------------------------------------
                	;
                	AllocMbx:
014C9C BD 00 50 00 		beq		r1,ambx_bad_ptr
014CA0 E7 EF 01 00 		push    lr
014CA4 67 E1 01 00 		push    r2
014CA8 E7 E1 01 00 		push    r3
014CAC 67 E2 01 00 		push	r4
014CB0 82 40 00 1A 		mov		r4,r1			; r4 = pointer to returned handle
014CB4 B9 08 FF FF 		bsr     LockSYS
014CB8 7C C0 00 00 		lw		r1,FreeMbxHandle			; Get mailbox off of free mailbox list
014CBC 46 10 40 02 
014CC0 63 12 00 00 		sw		r1,[r4]			; store off the mailbox number
014CC4 BD 00 40 00 		beq		r1,ambx_no_mbxs
014CC8 C6 20 00 00 		lw		r2,MBX_LINK[r1]		; and update the head of the list
014CCC 7C C0 00 00 		sw		r2,FreeMbxHandle
014CD0 63 20 40 02 
014CD4 7C C0 00 00 		dec		nMailbox,#1		; decrement number of available mailboxes
014CD8 64 F0 51 02 
014CDC 02 3C 00 1A 		mov		r3,tr           ; Add the mailbox to the list of mailboxes
014CE0 46 2C C0 04 		lw		r2,TCB_MbxList[tr]	; managed by the task.
014CE4 E3 20 00 00 		sw		r2,MBX_LINK[r1]
014CE8 63 1C C0 04 		sw		r1,TCB_MbxList[tr]
014CEC 82 20 00 1A 		mov     r2,r1
014CF0 40 1C 28 04 		lb		r1,TCB_hJCB[tr]
014CF4 60 11 6C 00 		sb		r1,MBX_OWNER[r2]
014CF8 63 01 10 00 		sw		r0,MBX_TQ_HEAD[r2] ; initialize the head and tail of the queues
014CFC 63 01 30 00 		sw		r0,MBX_TQ_TAIL[r2]
014D00 63 01 40 00 		sw		r0,MBX_MQ_HEAD[r2]
014D04 63 01 50 00 		sw		r0,MBX_MQ_TAIL[r2]
014D08 61 01 60 00 		sc		r0,MBX_TQ_COUNT[r2]	; initialize counts to zero
014D0C 61 01 68 00 		sc		r0,MBX_MQ_COUNT[r2]
014D10 61 01 70 00 		sc		r0,MBX_MQ_MISSED[r2]
014D14 0A 10 10 00 		ldi		r1,#8				; set the max queue size
014D18 61 11 64 00 		sc		r1,MBX_MQ_SIZE[r2]	; and
014D1C 0A 10 04 00 		ldi		r1,#MQS_NEWEST		; queueing strategy
014D20 60 11 6E 00 		sb		r1,MBX_MQ_STRATEGY[r2]
014D24 39 FE FE FF 		bsr     UnlockSYS
014D28 57 4F 10 00 		pop		r4
014D2C 57 3F 10 00 		pop     r3
014D30 57 2F 10 00 		pop     r2
014D34 0A 10 00 00 		ldi		r1,#E_Ok
014D38 3B FF 11 00 		rts
ambx_bad_ptr:
014D3C 0A 10 02 00 		ldi		r1,#E_Arg
014D40 37 FF 01 00 		rtl
ambx_no_mbxs:
014D44 39 FA FE FF 		bsr     UnlockSYS
014D48 57 4F 10 00 		pop		r4
014D4C 57 3F 10 00 		pop     r3
014D50 57 2F 10 00 		pop     r2
014D54 0A 10 80 00 		ldi		r1,#E_NoMoreMbx
014D58 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Free up a mailbox.
                	;	This function frees a mailbox from the currently running task. It may be
                	; called by ExitTask().
                	;
                	; Parameters:
                	;	r1 = mailbox handle
                	;------------------------------------------------------------------------------
                	
                	FreeMbx:
014D5C E7 EF 01 00 	    push    lr
014D60 67 E1 01 00 		push    r2
014D64 02 2C 00 1A 		mov     r2,tr
014D68 B9 01 00 00 		bsr		FreeMbx2
014D6C 57 2F 10 00 		pop     r2
014D70 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Free up a mailbox.
                	;	This function dequeues any messages from the mailbox and adds the messages
                	; back to the free message pool. The function also dequeues any threads from
                	; the mailbox.
                	;	Called from KillTask() and FreeMbx().
                	;
                	; Parameters:
                	;	r1 = mailbox handle
                	;	r2 = task handle
                	; Returns:
                	;	r1 = E_Ok	if everything ok
                	;	r1 = E_Arg	if a bad handle is passed
                	;------------------------------------------------------------------------------
                	
                	FreeMbx2:
014D74 E7 EF 01 00 	    push    lr
014D78 67 E1 01 00 		push    r2
014D7C E7 E1 01 00 		push    r3
014D80 67 E2 01 00 		push    r4
014D84 82 30 62 34 		chk     r3,r1,b49
014D88 BD 01 6E 00 		beq     r3,fmbx0
014D8C 82 40 00 1A 		mov     r4,r1
014D90 02 11 60 34 		chk     r1,r2,b48
014D94 BD 00 68 00 		beq     r1,fmbx0
014D98 02 12 00 1A 		mov     r1,r4
014D9C B9 EB FE FF 		bsr     LockSYS
                	
                		; Dequeue messages from mailbox and add them back to the free message list.
                	fmbx5:
014DA0 E7 E0 01 00 		push    r1
014DA4 B9 40 00 00 		bsr		DequeueMsgFromMbx
014DA8 BD 00 14 00 		beq		r1,fmbx3
014DAC 67 E1 01 00 		push    r2
014DB0 7C C0 00 00 		lw		r2,FreeMsg
014DB4 46 20 60 02 
014DB8 E3 20 00 00 		sw		r2,MSG_LINK[r1]
014DBC 7C C0 00 00 		sw		r1,FreeMsg
014DC0 63 10 60 02 
014DC4 57 2F 10 00 		pop     r2
014DC8 57 1F 10 00 		pop     r1
014DCC BA FA FF FF 		bra		fmbx5
                	fmbx3:
014DD0 57 1F 10 00 		pop     r1
                	
                		; Dequeue threads from mailbox.
                	fmbx6:
014DD4 E7 E0 01 00 		push    r1
014DD8 39 56 00 00 		bsr		DequeueThreadFromMbx2
014DDC BD 00 06 00 		beq		r1,fmbx7
014DE0 57 1F 10 00 		pop     r1
014DE4 3A FE FF FF 		bra		fmbx6
                	fmbx7:
014DE8 57 1F 10 00 		pop     r1
                	
                		; Remove mailbox from TCB list
014DEC 46 31 C0 04 		lw		r3,TCB_MbxList[r2]
014DF0 67 E1 01 00 		push    r2
014DF4 0A 20 FE FF 		ldi		r2,#-1
                	fmbx10:
014DF8 82 40 06 0C 		cmp		r4,r1,r3
014DFC 3D 02 0C 00 		beq		r4,fmbx9
014E00 82 21 00 1A 		mov     r2,r3
014E04 C6 31 00 00 		lw		r3,MBX_LINK[r3]
014E08 BD 11 F8 FF 		bne		r3,fmbx10
                		; ?The mailbox was not in the list managed by the task.
014E0C 57 2F 10 00 		pop     r2
014E10 3A 07 00 00 		bra		fmbx2
                	fmbx9:
014E14 3D 01 0A 00 		beq		r2,fmbx11
014E18 C6 31 00 00 		lw		r3,MBX_LINK[r3]
014E1C 63 31 00 00 		sw		r3,MBX_LINK[r2]
014E20 57 2F 10 00 		pop     r2
014E24 3A 02 00 00 		bra		fmbx12
                	fmbx11:
                		; No prior mailbox in list, update head
014E28 C6 30 00 00 		lw		r3,MBX_LINK[r1]
014E2C 57 2F 10 00 		pop     r2
014E30 63 31 C0 04 		sw		r3,TCB_MbxList[r2]
                	
                	fmbx12:
                		; Add mailbox back to mailbox pool
014E34 7C C0 00 00 		lw		r2,FreeMbxHandle
014E38 46 20 40 02 
014E3C E3 20 00 00 		sw		r2,MBX_LINK[r1]
014E40 7C C0 00 00 		sw		r1,FreeMbxHandle
014E44 63 10 40 02 
                	fmbx2:
014E48 B9 D9 FE FF 		bsr     UnlockSYS
014E4C 57 4F 10 00 		pop     r4
014E50 57 3F 10 00 		pop     r3
014E54 57 2F 10 00 		pop     r2
014E58 0A 10 00 00 		ldi		r1,#E_Ok
014E5C 3B FF 11 00 		rts
fmbx1:
014E60 B9 D6 FE FF 		bsr     UnlockSYS
                	fmbx0:
014E64 57 4F 10 00 		pop     r4
014E68 57 3F 10 00 		pop     r3
014E6C 57 2F 10 00 		pop     r2
014E70 0A 10 02 00 		ldi		r1,#E_Arg
014E74 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Queue a message at a mailbox.
                	; On entry the mailbox semaphore is already activated.
                	;
                	; Parameters:
                	;	r1 = message
                	;	r2 = mailbox
                	;------------------------------------------------------------------------------
                	
                	QueueMsgAtMbx:
014E78 BD 00 4E 00 		beq		r1,qmam_bad_msg
014E7C E7 EF 01 00 		push    lr
014E80 E7 E0 01 00 		push    r1
014E84 67 E1 01 00 		push    r2
014E88 E7 E1 01 00 		push    r3
014E8C 67 E2 01 00 		push	r4
014E90 40 41 6E 00 		lb		r4,MBX_MQ_STRATEGY[r2]
014E94 06 32 00 00 		cmp		r3,r4,#MQS_UNLIMITED
014E98 BD 01 1E 00 		beq		r3,qmam_unlimited
014E9C 06 32 04 00 		cmp		r3,r4,#MQS_NEWEST
014EA0 BD 01 3C 00 		beq		r3,qmam_newest
014EA4 06 32 02 00 		cmp		r3,r4,#MQS_OLDEST
014EA8 BD 01 76 00 		beq		r3,qmam_oldest
014EAC B9 6E 01 00 		bsr		kernel_panic
014EB0 49 6C 6C 65 		db		"Illegal message queue strategy",0
014EB4 67 61 6C 20 
014EB8 6D 65 73 73 
014EBC 61 67 65 20 
014EC0 71 75 65 75 
014EC4 65 20 73 74 
014EC8 72 61 74 65 
014ECC 67 79 00    
014ECF 00 3A 11 00 		bra		qmam8
014ED3 00          
                		; Here we assumed "unlimited" message storage. Just add the new message at
                		; the tail of the queue.
                	qmam_unlimited:
014ED4 46 31 50 00 		lw		r3,MBX_MQ_TAIL[r2]
014ED8 82 41 62 34 		chk     r4,r3,b49
014EDC 3D 02 06 00 		beq		r4,qmam_add_at_head
014EE0 E3 11 00 00 		sw		r1,MSG_LINK[r3]
014EE4 3A 01 00 00 		bra		qmam2
                	qmam_add_at_head:
014EE8 63 11 40 00 		sw		r1,MBX_MQ_HEAD[r2]
                	qmam2:
014EEC 63 11 50 00 		sw		r1,MBX_MQ_TAIL[r2]
                	qmam6:
014EF0 43 31 68 00 	    lcu     r3,MBX_MQ_COUNT[r2]
014EF4 94 31 02 00 	    addui   r3,r3,#1
014EF8 61 31 68 00 		sc		r3,MBX_MQ_COUNT[r2]		; increase the queued message count
014EFC E3 00 00 00 		sw		r0,MSG_LINK[r1]
014F00 57 4F 10 00 		pop		r4
014F04 57 3F 10 00 		pop     r3
014F08 57 2F 10 00 		pop     r2
014F0C 57 1F 10 00 		pop     r1
014F10 3B FF 11 00 		rts
qmam_bad_msg:
014F14 37 FF 01 00 		rtl
	; Here we are queueing a limited number of messages. As new messages are
                		; added at the tail of the queue, messages drop off the head of the queue.
                	qmam_newest:
014F18 46 31 50 00 		lw		r3,MBX_MQ_TAIL[r2]
014F1C 82 41 62 34 		chk     r4,r3,b49
014F20 3D 02 06 00 		beq		r4,qmam3
014F24 E3 11 00 00 		sw		r1,MSG_LINK[r3]
014F28 3A 01 00 00 		bra		qmam4
                	qmam3:
014F2C 63 11 40 00 		sw		r1,MBX_MQ_HEAD[r2]
                	qmam4:
014F30 63 11 50 00 		sw		r1,MBX_MQ_TAIL[r2]
014F34 43 31 68 00 		lcu		r3,MBX_MQ_COUNT[r2]
014F38 94 31 02 00 		addui   r3,r3,#1
014F3C 43 41 64 00 		lcu     r4,MBX_MQ_SIZE[r2]
014F40 82 31 08 2C 		cmpu    r3,r3,r4
014F44 BD 51 D6 FF 		ble		r3,qmam6
014F48 E3 00 00 00 		sw		r0,MSG_LINK[r1]
                		; Remove the oldest message which is the one at the head of the mailbox queue.
                		; Add the message back to the pool of free messages.
014F4C 46 11 40 00 		lw		r1,MBX_MQ_HEAD[r2]
014F50 C6 30 00 00 		lw		r3,MSG_LINK[r1]		; move next in queue
014F54 63 31 40 00 		sw		r3,MBX_MQ_HEAD[r2]	; to head of list
                	qmam8:
014F58 43 31 70 00 	    lcu     r3,MBX_MQ_MISSED[r2]
014F5C 94 31 02 00 	    addui   r3,r3,#1
014F60 61 31 70 00 	    sc      r3,MBX_MQ_MISSED[r2]  
                	qmam1:
014F64 7C C0 00 00 		lw		r3,FreeMsg				; put old message back into free message list
014F68 46 30 60 02 
014F6C E3 30 00 00 		sw		r3,MSG_LINK[r1]
014F70 7C C0 00 00 		sw		r1,FreeMsg
014F74 63 10 60 02 
014F78 7C C0 00 00 		inc		nMsgBlk,#1
014F7C 64 10 70 02 
                		;GoReschedule
014F80 57 4F 10 00 		pop		r4
014F84 57 3F 10 00 		pop     r3
014F88 57 2F 10 00 		pop     r2
014F8C 57 1F 10 00 		pop     r1
014F90 3B FF 11 00 		rts
	; Here we are buffering the oldest messages. So if there are too many messages
                		; in the queue already, then the queue doesn't change and the new message is
                		; lost.
                	qmam_oldest:
014F94 43 31 68 00 		lcu		r3,MBX_MQ_COUNT[r2]		; Check if the queue is full
014F98 43 41 64 00 		lcu     r4,MBX_MQ_SIZE[r2]
014F9C 82 31 08 2C 		cmpu	r3,r3,r4
014FA0 BD 31 DC FF 		bge		r3,qmam8			; If the queue is full, then lose the current message
014FA4 3A E6 FF FF 		bra		qmam_unlimited		; Otherwise add message to queue
                	
                	;------------------------------------------------------------------------------
                	; Dequeue a message from a mailbox.
                	;
                	; Returns
                	;	r1 = message pointer (NULL if there are no messages)
                	;------------------------------------------------------------------------------
                	
                	DequeueMsgFromMbx:
014FA8 67 E1 01 00 	    push    r2
014FAC E7 E1 01 00 	    push    r3
014FB0 82 20 00 1A 		mov     r2,r1				; x = mailbox index
014FB4 43 11 68 00 		lcu		r1,MBX_MQ_COUNT[r2]		; are there any messages available ?
014FB8 BD 00 1A 00 		beq		r1,dmfm3
014FBC 95 10 02 00 		subui   r1,r1,#1
014FC0 61 11 68 00 		sc		r1,MBX_MQ_COUNT[r2]		; update the message count
014FC4 46 11 40 00 		lw		r1,MBX_MQ_HEAD[r2]		; Get the head of the list, this should not be NULL
014FC8 BD 00 12 00 		beq		r1,dmfm3			; since the message count > 0
014FCC C6 30 00 00 		lw		r3,MSG_LINK[r1]		; get the link to the next message
014FD0 63 31 40 00 		sw		r3,MBX_MQ_HEAD[r2]		; update the head of the list
014FD4 BD 11 04 00 		bne		r3,dmfm2			; if there was no more messages then update the
014FD8 63 31 50 00 		sw		r3,MBX_MQ_TAIL[r2]	; tail of the list as well.
                	dmfm2:
014FDC E3 10 00 00 		sw		r1,MSG_LINK[r1]		; point the link to the message itself to indicate it's dequeued
                	dmfm1:
014FE0 57 3F 10 00 	    pop     r3
014FE4 57 2F 10 00 	    pop     r2
014FE8 3B FF 11 00 		rts
dmfm3:
014FEC 57 3F 10 00 	    pop     r3
014FF0 57 2F 10 00 	    pop     r2
014FF4 0A 10 00 00 		ldi		r1,#0
014FF8 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; Parameters:
                	;	r1 = mailbox handle
                	; Returns:
                	;	r1 = E_arg		means pointer is invalid
                	;	r1 = E_NoThread	means no thread was queued at the mailbox
                	;	r2 = thead handle
                	;------------------------------------------------------------------------------
                	
                	DequeueThreadFromMbx:
014FFC 67 E2 01 00 		push	r4
015000 C6 40 10 00 		lw		r4,MBX_TQ_HEAD[r1]
015004 3D 12 0A 00 		bne		r4,dtfm2
015008 57 4F 10 00 		pop		r4
01500C 0A 20 00 00 		ldi		r2,#0
015010 0A 10 0C 00 		ldi		r1,#E_NoThread
015014 37 FF 01 00 		rtl
dtfm2:
015018 E7 E2 01 00 		push	r5
01501C C3 50 60 00 		lcu     r5,MBX_TQ_COUNT[r1]
015020 95 52 02 00 		subui   r5,r5,#1
015024 E1 50 60 00 		sc      r5,MBX_TQ_COUNT[r1]
015028 02 22 00 1A 		mov		r2,r4
01502C 46 42 70 04 		lw		r4,TCB_mbq_next[r4]
015030 E3 40 10 00 		sw		r4,MBX_TQ_HEAD[r1]
015034 3D 02 06 00 		beq		r4,dtfm3
015038 63 02 80 04 			sw		r0,TCB_mbq_prev[r4]
01503C 3A 01 00 00 			bra		dtfm4
                	dtfm3:
015040 E3 00 30 00 			sw		r0,MBX_TQ_TAIL[r1]
                	dtfm4:
015044 02 51 00 1A 		mov		r5,r2
015048 C0 12 20 04 		lb		r1,TCB_Status[r5]
01504C 8C 10 02 00 		and		r1,r1,#TS_TIMEOUT
015050 BD 00 0C 00 		beq		r1,dtfm5
015054 82 12 00 1A 		mov		r1,r5
015058 E7 EF 01 00 		push    lr
01505C 7C 00 00 00 		jsr		RemoveFromTimeoutList
015060 3C F0 C1 A5 
015064 57 FF 11 00 		pop     lr
                	dtfm5:
015068 E3 02 70 04 		sw		r0,TCB_mbq_next[r5]
01506C E3 02 80 04 		sw		r0,TCB_mbq_prev[r5]
015070 E3 02 B0 04 		sw		r0,TCB_hWaitMbx[r5]
015074 E0 02 20 04 		sb		r0,TCB_Status[r5]		; set task status = TS_NONE
015078 57 5F 10 00 		pop		r5
01507C 57 4F 10 00 		pop		r4
015080 0A 10 00 00 		ldi		r1,#E_Ok
015084 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	;	This function is called from FreeMbx(). It dequeues threads from the
                	; mailbox without removing the thread from the timeout list. The thread will
                	; then timeout waiting for a message that can never be delivered.
                	;
                	; Parameters:
                	;	r1 = mailbox handle
                	; Returns:
                	;	r1 = E_arg		means pointer is invalid
                	;	r1 = E_NoThread	means no thread was queued at the mailbox
                	;	r2 = thead handle
                	;------------------------------------------------------------------------------
                	
                	DequeueThreadFromMbx2:
015088 67 E2 01 00 		push	r4
01508C C6 40 10 00 		lw		r4,MBX_TQ_HEAD[r1]
015090 3D 12 0A 00 		bne		r4,dtfm2a
015094 57 4F 10 00 		pop		r4
015098 0A 20 00 00 		ldi		r2,#0
01509C 0A 10 0C 00 		ldi		r1,#E_NoThread
0150A0 37 FF 01 00 		rtl
dtfm2a:
0150A4 E7 E2 01 00 		push	r5
0150A8 C3 50 60 00 		lcu     r5,MBX_TQ_COUNT[r1]
0150AC 95 52 02 00 		subui   r5,r5,#1
0150B0 E1 50 60 00 		sc      r5,MBX_TQ_COUNT[r1]
0150B4 02 22 00 1A 		mov		r2,r4
0150B8 46 42 70 04 		lw		r4,TCB_mbq_next[r4]
0150BC E3 40 10 00 		sw		r4,MBX_TQ_HEAD[r1]
0150C0 3D 02 06 00 		beq		r4,dtfm3a
0150C4 63 02 80 04 			sw		r0,TCB_mbq_prev[r4]
0150C8 3A 01 00 00 			bra		dtfm4a
                	dtfm3a:
0150CC E3 00 30 00 			sw		r0,MBX_TQ_TAIL[r1]
                	dtfm4a:
0150D0 63 01 70 04 		sw	    r0,TCB_mbq_next[r2]
0150D4 63 01 80 04 		sw		r0,TCB_mbq_prev[r2]
0150D8 63 01 B0 04 		sw		r0,TCB_hWaitMbx[r2]
                	;	sei
0150DC 40 11 20 04 	    lb      r1,TCB_Status[r2]
0150E0 8C 10 FA FF 	    and     r1,r1,#~TS_WAITMSG
0150E4 60 11 20 04 	    sb      r1,TCB_Status[r2]
                	;	cli
0150E8 57 5F 10 00 		pop		r5
0150EC 57 4F 10 00 		pop		r4
0150F0 0A 10 00 00 		ldi		r1,#E_Ok
0150F4 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; PostMsg and SendMsg are the same operation except that PostMsg doesn't
                	; invoke rescheduling while SendMsg does. So they both call the same
                	; SendMsgPrim primitive routine. This two wrapper functions for convenience.
                	;------------------------------------------------------------------------------
                	
                	PostMsg:
0150F8 E7 EF 01 00 	    push    lr
0150FC 67 E2 01 00 		push	r4
015100 0A 40 00 00 		ldi		r4,#0			; Don't invoke scheduler
015104 39 05 00 00 		bsr		SendMsgPrim
015108 57 4F 10 00 		pop		r4
01510C 3B FF 11 00 		rts

                	SendMsg:
015110 E7 EF 01 00 	    push    lr
015114 67 E2 01 00 		push	r4
015118 0A 40 02 00 		ldi		r4,#1			; Do invoke scheduler
01511C 7C 00 00 00 		jsr		SendMsgPrim
015120 3C F0 97 A8 
015124 57 4F 10 00 		pop		r4
015128 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; SendMsgPrim
                	; Send a message to a mailbox
                	;
                	; Parameters
                	;	r1 = handle to mailbox
                	;	r2 = message D1
                	;	r3 = message D2
                	;	r4 = scheduler flag		1=invoke,0=don't invoke
                	;
                	; Returns
                	;	r1=E_Ok			everything is ok
                	;	r1=E_BadMbx		for a bad mailbox number
                	;	r1=E_NotAlloc	for a mailbox that isn't allocated
                	;	r1=E_NoMsg		if there are no more message blocks available
                	;------------------------------------------------------------------------------
                	message "SendMsgPrim"
                	SendMsgPrim:
01512C E7 EF 01 00 	    push    lr
015130 E7 E2 01 00 		push	r5
015134 67 E3 01 00 		push	r6
015138 E7 E3 01 00 		push	r7
                	
01513C 82 50 62 34 	    chk     r5,r1,b49
015140 BD 02 70 00 	    beq     r5,smsg1
015144 B9 76 FE FF 	    bsr     LockSYS
015148 C1 70 6C 00 		lbu		r7,MBX_OWNER[r1]
01514C 96 53 66 00 		cmpu    r5,r7,#NR_JCB
015150 BD 32 72 00 		bge		r5,smsg2				; error: no owner
015154 E7 E0 01 00 		push    r1
015158 67 E1 01 00 		push    r2
01515C 39 D4 FF FF 		bsr		DequeueThreadFromMbx	; r1=mbx
015160 02 61 00 1A 		mov		r6,r2					; r6 = thread
015164 57 2F 10 00 		pop     r2
015168 57 1F 10 00 		pop     r1
01516C 3D 13 2A 00 		bne		r6,smsg3
                			; Here there was no thread waiting at the mailbox, so a message needs to
                			; be allocated
                	smp2:
015170 7C C0 00 00 			lw		r7,FreeMsg
015174 46 70 60 02 
015178 BD 03 6A 00 			beq		r7,smsg4		; no more messages available
01517C C6 53 00 00 			lw		r5,MSG_LINK[r7]
015180 7C C0 00 00 			sw		r5,FreeMsg
015184 63 50 60 02 
015188 7C C0 00 00 			dec		nMsgBlk		; decrement the number of available messages
01518C 64 F0 71 02 
015190 7C C0 00 00 			sw		r0,freemsg_sema
015194 63 00 A0 03 
015198 E3 23 10 00 			sw		r2,MSG_D1[r7]
01519C E3 33 20 00 			sw		r3,MSG_D2[r7]
0151A0 E7 E0 01 00 			push    r1
0151A4 67 E1 01 00 			push    r2
0151A8 82 20 00 1A 			mov     r2,r1			; r2 = mailbox
0151AC 82 13 00 1A 			mov		r1,r7			; r1 = message
0151B0 39 99 FF FF 			bsr		QueueMsgAtMbx
0151B4 57 2F 10 00 			pop     r2
0151B8 57 1F 10 00 			pop     r1
0151BC 3D 03 26 00 			beq		r6,smsg5    ; check if there is a thread waiting for a message
                	smsg3:
0151C0 63 23 90 04 		sw		r2,TCB_MSG_D1[r6]
0151C4 63 33 A0 04 		sw		r3,TCB_MSG_D2[r6]
                	smsg7:
0151C8 40 53 20 04 		lb		r5,TCB_Status[r6]
0151CC 8C 52 02 00 		and		r5,r5,#TS_TIMEOUT
0151D0 BD 02 06 00 		beq		r5,smsg8
0151D4 02 13 00 1A 		mov		r1,r6
0151D8 39 35 FF FF 		bsr		RemoveFromTimeoutList
                	smsg8:
0151DC 40 13 20 04 	    lb      r1,TCB_Status[r6]
0151E0 8C 10 FA FF 	    and     r1,r1,#~TS_WAITMSG
0151E4 60 13 20 04 	    sb      r1,TCB_Status[r6]
0151E8 02 13 00 1A 		mov		r1,r6
0151EC B9 F5 FE FF 		bsr		AddTaskToReadyList
0151F0 7C C0 00 00 		sw		r0,sys_sema
0151F4 63 00 B0 03 
0151F8 3D 02 08 00 		beq		r4,smsg5
0151FC 39 63 FE FF 		bsr     UnlockSYS
015200 38 0F 04 80 		int		#2
                		;GoReschedule
015204 3A 01 00 00 		bra		smsg9
                	smsg5:
015208 B9 61 FE FF 		bsr     UnlockSYS
                	smsg9:
01520C 57 7F 10 00 		pop		r7
015210 57 6F 10 00 		pop		r6
015214 57 5F 10 00 		pop		r5
015218 0A 10 00 00 		ldi		r1,#E_Ok
01521C 3B FF 11 00 		rts
smsg1:
015220 57 7F 10 00 		pop		r7
015224 57 6F 10 00 		pop		r6
015228 57 5F 10 00 		pop		r5
01522C 0A 10 08 00 		ldi		r1,#E_BadMbx
015230 37 FF 01 00 		rtl
smsg2:
015234 39 5C FE FF 		bsr     UnlockSYS
015238 57 7F 10 00 		pop		r7
01523C 57 6F 10 00 		pop		r6
015240 57 5F 10 00 		pop		r5
015244 0A 10 12 00 		ldi		r1,#E_NotAlloc
015248 3B FF 11 00 		rts
smsg4:
01524C 39 59 FE FF 		bsr     UnlockSYS
015250 57 7F 10 00 		pop		r7
015254 57 6F 10 00 		pop		r6
015258 57 5F 10 00 		pop		r5
01525C 0A 10 16 00 		ldi		r1,#E_NoMsg
015260 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; WaitMsg
                	; Wait at a mailbox for a message to arrive. This subroutine will block the
                	; task until a message is available or the task times out on the timeout
                	; list.
                	;
                	; Parameters
                	;	r1=mailbox
                	;	r2=timeout
                	; Returns:
                	;	r1=E_Ok			if everything is ok
                	;	r1=E_BadMbx		for a bad mailbox number
                	;	r1=E_NotAlloc	for a mailbox that isn't allocated
                	;	r2=message D1
                	;	r3=message D2
                	;------------------------------------------------------------------------------
                	message "WaitMsg"
                	WaitMsg:
015264 E7 EF 01 00 		push    lr
015268 67 E2 01 00 		push	r4
01526C E7 E2 01 00 		push	r5
015270 67 E3 01 00 		push	r6
015274 E7 E3 01 00 		push	r7
015278 82 50 62 34 		chk     r5,r1,b49
01527C BD 02 80 00 	    beq     r5,wmsg1
015280 82 60 00 1A 		mov		r6,r1
                	wmsg11:
015284 B9 4E FE FF 	    bsr     LockSYS
015288 C0 50 6C 00 		lb		r5,MBX_OWNER[r1]
01528C 86 32 66 00 		cmp		r3,r5,#NR_JCB
015290 BD 21 82 00 		bgt		r3,wmsg2				; error: no owner
015294 B9 A2 FF FF 		bsr		DequeueMsgFromMbx
015298 BD 10 52 00 		bne		r1,wmsg3
                	
                		; Here there was no message available, remove the task from
                		; the ready list, and optionally add it to the timeout list.
                		; Queue the task at the mailbox.
                	wmsg12:
01529C 02 1C 00 1A 		mov		r1,tr				; remove the task from the ready list
0152A0 39 EF FE FF 		bsr		RemoveTaskFromReadyList
                	wmsg13:
0152A4 C0 70 20 04 		lb		r7,TCB_Status[r1]
0152A8 8D 73 04 00 		or		r7,r7,#TS_WAITMSG			; set task status to waiting
0152AC E0 70 20 04 		sb		r7,TCB_Status[r1]
0152B0 E3 60 B0 04 		sw		r6,TCB_hWaitMbx[r1]			; set which mailbox is waited for
0152B4 E3 00 70 04 		sw		r0,TCB_mbq_next[r1]			; adding at tail, so there is no next
0152B8 46 73 10 00 		lw		r7,MBX_TQ_HEAD[r6]			; is there a task que setup at the mailbox ?
0152BC BD 03 32 00 		beq		r7,wmsg6
0152C0 46 73 30 00 		lw		r7,MBX_TQ_TAIL[r6]
0152C4 E3 70 80 04 		sw		r7,TCB_mbq_prev[r1]
0152C8 E3 13 70 04 		sw		r1,TCB_mbq_next[r7]
0152CC 63 13 30 00 		sw		r1,MBX_TQ_TAIL[r6]
0152D0 43 73 60 00 		lcu     r7,MBX_TQ_COUNT[r6]         ; increment number of tasks queued
0152D4 94 73 02 00 		addui   r7,r7,#1
0152D8 61 73 60 00 		sc      r7,MBX_TQ_COUNT[r6]
                	wmsg7:
0152DC 3D 01 0A 00 		beq		r2,wmsg10                   ; check for a timeout
                	wmsg14:
0152E0 39 F9 FE FF 		bsr		AddToTimeoutList
0152E4 39 46 FE FF 		bsr     UnlockSYS
0152E8 38 0F 04 80 		int		#2	;	GoReschedule			; invoke the scheduler
0152EC B9 41 FE FF 		bsr     LockSYS
                	wmsg10:
                		; At this point either a message was sent to the task, or the task
                		; timed out. If a message is still not available then the task must
                		; have timed out. Return a timeout error.
                		; Note that SendMsg will directly set the message D1, D2 data
                		; without queing a message at the mailbox (if there is a task
                		; waiting already). So we cannot just try dequeing a message again.
0152F0 C6 20 90 04 		lw		r2,TCB_MSG_D1[r1]
0152F4 C6 30 A0 04 		lw		r3,TCB_MSG_D2[r1]
0152F8 C0 40 20 04 		lb		r4,TCB_Status[r1]
0152FC 39 43 FE FF 		bsr     UnlockSYS
015300 0C 42 04 00 		and		r4,r4,#TS_WAITMSG	; Is the task still waiting for a message ?
015304 3D 02 30 00 		beq		r4,wmsg8			; If not, go return OK status
015308 57 7F 10 00 		pop		r7				; Otherwise return timeout error
01530C 57 6F 10 00 		pop		r6
015310 57 5F 10 00 		pop		r5
015314 57 4F 10 00 		pop		r4
015318 0A 10 20 00 		ldi		r1,#E_Timeout
01531C 3B FF 11 00 		rts
	
                		; Here there were no prior tasks queued at the mailbox
                	wmsg6:
015320 E3 00 80 04 		sw		r0,TCB_mbq_prev[r1]		; no previous tasks
015324 E3 00 70 04 		sw		r0,TCB_mbq_next[r1]
015328 63 13 10 00 		sw		r1,MBX_TQ_HEAD[r6]		; set both head and tail indexes
01532C 63 13 30 00 		sw		r1,MBX_TQ_TAIL[r6]
015330 0A 70 02 00 		ldi		r7,#1
015334 61 73 60 00 		sc		r7,MBX_TQ_COUNT[r6]		; one task queued
015338 BA F4 FF FF 		bra		wmsg7					; check for a timeout value
                		
                	wmsg3:
01533C C6 20 10 00 		lw		r2,MSG_D1[r1]
015340 C6 30 20 00 		lw		r3,MSG_D2[r1]
                		; Add the newly dequeued message to the free messsage list
015344 7C C0 00 00 		lw		r7,FreeMsg
015348 46 70 60 02 
01534C E3 70 00 00 		sw		r7,MSG_LINK[r1]
015350 7C C0 00 00 		sw		r1,FreeMsg
015354 63 10 60 02 
015358 7C C0 00 00 		inc		nMsgBlk,#1
01535C 64 10 70 02 
015360 B9 36 FE FF 		bsr     UnlockSYS
                	wmsg8:
015364 57 7F 10 00 		pop		r7
015368 57 6F 10 00 		pop		r6
01536C 57 5F 10 00 		pop		r5
015370 57 4F 10 00 		pop		r4
015374 0A 10 00 00 		ldi		r1,#E_Ok
015378 3B FF 11 00 		rts
wmsg1:
01537C 57 7F 10 00 		pop		r7
015380 57 6F 10 00 		pop		r6
015384 57 5F 10 00 		pop		r5
015388 57 4F 10 00 		pop		r4
01538C 0A 10 08 00 		ldi		r1,#E_BadMbx
015390 3B FF 11 00 		rts
wmsg2:
015394 39 30 FE FF 		bsr     UnlockSYS
015398 57 7F 10 00 		pop		r7
01539C 57 6F 10 00 		pop		r6
0153A0 57 5F 10 00 		pop		r5
0153A4 57 4F 10 00 		pop		r4
0153A8 0A 10 12 00 		ldi		r1,#E_NotAlloc
0153AC 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Check for a message at a mailbox. Does not block. This function is a
                	; convenience wrapper for CheckMsg().
                	;
                	; Parameters
                	;	r1=mailbox handle
                	; Returns:
                	;	r1=E_Ok			if everything is ok
                	;	r1=E_NoMsg		if no message is available
                	;	r1=E_BadMbx		for a bad mailbox number
                	;	r1=E_NotAlloc	for a mailbox that isn't allocated
                	;	r2=message D1
                	;	r3=message D2
                	;------------------------------------------------------------------------------
                	
                	PeekMsg:
0153B0 E7 EF 01 00 	    push    lr
0153B4 0A 20 00 00 		ldi		r2,#0		; don't remove from queue
0153B8 39 01 00 00 		bsr		CheckMsg
0153BC 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; CheckMsg
                	; Check for a message at a mailbox. Does not block.
                	;
                	; Parameters
                	;	r1=mailbox handle
                	;	r2=remove from queue if present
                	; Returns:
                	;	r1=E_Ok			if everything is ok
                	;	r1=E_NoMsg		if no message is available
                	;	r1=E_BadMbx		for a bad mailbox number
                	;	r1=E_NotAlloc	for a mailbox that isn't allocated
                	;	r2=message D1
                	;	r3=message D2
                	;------------------------------------------------------------------------------
                	message "CheckMsg"
                	CheckMsg:
0153C0 E7 EF 01 00 	    push    lr
0153C4 67 E3 01 00 	    push    r6
                	;	cmp		r3,r1,#NR_MBX			; check the mailbox number to make sure
                	;	bge		r3,cmsg1				; that it's sensible
0153C8 82 60 62 34 	    chk     r6,r1,b49
0153CC 3D 03 38 00 	    beq     r6,cmsg1
0153D0 67 E2 01 00 		push	r4
0153D4 E7 E2 01 00 		push	r5
                	
0153D8 39 24 FE FF 	    bsr     LockSYS
                	
0153DC C6 50 6C 00 		lw		r5,MBX_OWNER[r1]
0153E0 BD 02 34 00 		beq		r5,cmsg2				; error: no owner
0153E4 3D 01 06 00 		beq		r2,cmsg3                ; are we to dequeue the message ?
0153E8 39 78 FF FF 		bsr		DequeueMsgFromMbx
0153EC 3A 01 00 00 		bra		cmsg4
                	cmsg3:
0153F0 C6 10 40 00 		lw		r1,MBX_MQ_HEAD[r1]		; peek the message at the head of the messages queue
                	cmsg4:
0153F4 BD 00 36 00 		beq		r1,cmsg5
0153F8 02 41 00 1A 		mov     r4,r2
0153FC C6 20 10 00 		lw		r2,MSG_D1[r1]
015400 C6 30 20 00 		lw		r3,MSG_D2[r1]
015404 3D 02 10 00 		beq		r4,cmsg8
                	cmsg10:
015408 7C C0 00 00 		lw		r5,FreeMsg
01540C 46 50 60 02 
015410 E3 50 00 00 		sw		r5,MSG_LINK[r1]
015414 7C C0 00 00 		sw		r1,FreeMsg
015418 63 10 60 02 
01541C 7C C0 00 00 		inc		nMsgBlk,#1
015420 64 10 70 02 
                	cmsg8:
015424 39 1E FE FF 		bsr     UnlockSYS
015428 57 5F 10 00 		pop		r5
01542C 57 4F 10 00 		pop		r4
015430 57 6F 10 00 		pop     r6
015434 0A 10 00 00 		ldi		r1,#E_Ok
015438 3B FF 11 00 		rts
cmsg1:
01543C 0A 10 08 00 		ldi		r1,#E_BadMbx
015440 57 6F 10 00 		pop     r6
015444 3B FF 11 00 		rts
cmsg2:
015448 B9 19 FE FF 		bsr     UnlockSYS
01544C 57 5F 10 00 		pop		r5
015450 57 4F 10 00 		pop		r4
015454 57 6F 10 00 		pop     r6
015458 0A 10 12 00 		ldi		r1,#E_NotAlloc
01545C 3B FF 11 00 		rts
cmsg5:
015460 B9 16 FE FF 		bsr     UnlockSYS
015464 57 5F 10 00 		pop		r5
015468 57 4F 10 00 		pop		r4
01546C 57 6F 10 00 		pop     r6
015470 0A 10 16 00 		ldi		r1,#E_NoMsg
015474 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; System Call Exception
                	;
                	;------------------------------------------------------------------------------
                	;
                	syscall_exception:
015478 0A E0 21 05 	    ldi     sp,TCB_SYS_Stack[tr]
01547C 67 E3 01 00 		push	r6					; save off some working registers
015480 E7 E3 01 00 		push	r7
015484 02 60 12 3E 		mfspr   r6,epc              ; get return address into r6
015488 0C 73 FC FF 		and     r7,r6,#-2           ; clear LSB
01548C C4 73 08 00 		lh	    r7,4[r7]			; get static call number parameter into r7
015490 14 63 10 00 		addui   r6,r6,#8			; update return address
015494 02 03 12 3C 		mtspr   epc,r6
015498 96 63 28 00 		cmpu    r6,r7,#20
01549C 3D 23 12 00 		bgt     r6,.bad_callno
0154A0 82 73 02 70 		asl     r7,r7,#1
0154A4 7C 01 00 00 		lcu     r6,syscall_vectors[r7]       ; load the vector into r6
0154A8 C3 63 00 80 
0154AC 7C 01 00 00 		or      r6,r6,#syscall_exception & 0xFFFFFFFFFFFF0000
0154B0 0D 63 00 00 
0154B4 E7 EF 01 00 		push    lr
0154B8 3C F3 01 00 		jsr		[r6]				; do the system function
0154BC 57 FF 11 00 		pop     lr
                	.bad_callno:
0154C0 57 7F 10 00 		pop		r7
0154C4 57 6F 10 00 		pop		r6
0154C8 02 E0 3D 6E 		rte
                	
                	;------------------------------------------------------------------------------
                	; Reschedule tasks to run without affecting the timeout list timing.
                	;------------------------------------------------------------------------------
                	
                	reschedule:
0154CC 02 E0 01 6C 	    cpuid   sp,r0,#0
0154D0 3D 0F 08 00 	    beq     sp,.0001
0154D4 7C 02 00 00 	    ldi     sp,#CPU1_IRQ_STACK
0154D8 0A E0 01 10 
0154DC BA 01 00 00 	    bra     .0002
                	.0001:
0154E0 FC 00 00 00 	    ldi     sp,#CPU0_IRQ_STACK
0154E4 0A E0 01 10 
                	.0002:
0154E8 E7 E0 01 00 	    push    r1
0154EC 67 E1 01 00 		push    r2
0154F0 7C C0 00 00 		lwar    r1,sys_sema
0154F4 5C 10 B0 03 
0154F8 BD 10 0E 00 		bne     r1,.0004   
0154FC 7C C0 00 00 		swcr    tr,sys_sema       ; In this case interrupts are off already
015500 6E 80 B1 03 
015504 02 10 00 3E 		mfspr   r1,cr0            ; because we are in an interrupt routine.
015508 7C 00 00 10 		and     r1,r1,#$1000000000
01550C 8C 10 00 00 
015510 BD 10 08 00 		bne     r1,.0005
                	.0004:
015514 57 2F 10 00 		pop     r2
015518 57 1F 10 00 		pop     r1
01551C 02 E0 3F 6E 		rti
                	.0005:
015520 57 2F 10 00 	    pop     r2
015524 57 1F 10 00 	    pop     r1
015528 63 1C 10 00 	    sw      r1,TCB_r1[tr]
01552C 63 2C 20 00 	    sw      r2,TCB_r2[tr]
015530 63 3C 30 00 	    sw      r3,TCB_r3[tr]
015534 63 4C 40 00 	    sw      r4,TCB_r4[tr]
015538 63 5C 50 00 	    sw      r5,TCB_r5[tr]
01553C 63 6C 60 00 	    sw      r6,TCB_r6[tr]
015540 63 7C 70 00 	    sw      r7,TCB_r7[tr]
015544 63 8C 80 00 	    sw      r8,TCB_r8[tr]
015548 63 9C 90 00 	    sw      r9,TCB_r9[tr]
01554C 63 AC A0 00 	    sw      r10,TCB_r10[tr]
015550 63 BC B0 00 	    sw      r11,TCB_r11[tr]
015554 63 CC C0 00 	    sw      r12,TCB_r12[tr]
015558 63 DC D0 00 	    sw      r13,TCB_r13[tr]
01555C 63 EC E0 00 	    sw      r14,TCB_r14[tr]
015560 63 FC F0 00 	    sw      r15,TCB_r15[tr]
015564 63 0C 01 01 	    sw      r16,TCB_r16[tr]
015568 63 1C 11 01 	    sw      r17,TCB_r17[tr]
01556C 63 2C 21 01 	    sw      r18,TCB_r18[tr]
015570 63 3C 31 01 	    sw      r19,TCB_r19[tr]
015574 63 4C 41 01 	    sw      r20,TCB_r20[tr]
015578 63 5C 51 01 	    sw      r21,TCB_r21[tr]
01557C 63 6C 61 01 	    sw      r22,TCB_r22[tr]
015580 63 7C 71 01 	    sw      r23,TCB_r23[tr]
015584 63 8C 81 01 	    sw      r24,TCB_r24[tr]
015588 63 9C 91 01 	    sw      r25,TCB_r25[tr]
01558C 63 AC A1 01 	    sw      r26,TCB_r26[tr]
015590 63 BC B1 01 	    sw      r27,TCB_r27[tr]
015594 63 CC C1 01 	    sw      r28,TCB_r28[tr]
015598 63 DC D1 01 	    sw      r29,TCB_r29[tr]
01559C 02 10 1E 3E 	    mfspr   r1,isp
0155A0 63 1C E0 01 	    sw      r1,TCB_r30[tr]
0155A4 63 1C 30 03 	    sw      r1,TCB_ISP[tr]
0155A8 02 10 20 3E 	    mfspr   r1,dsp
0155AC 63 1C 40 03 	    sw      r1,TCB_DSP[tr]
0155B0 02 10 22 3E 	    mfspr   r1,esp
0155B4 63 1C 50 03 	    sw      r1,TCB_ESP[tr]
0155B8 63 FC F1 01 	    sw      r31,TCB_r31[tr]
0155BC 02 10 10 3E 	    mfspr   r1,ipc
0155C0 63 1C 00 03 	    sw      r1,TCB_IPC[tr]
0155C4 02 10 0E 3E 	    mfspr   r1,dpc
0155C8 63 1C 10 03 	    sw      r1,TCB_DPC[tr]
0155CC 02 10 12 3E 	    mfspr   r1,epc
0155D0 63 1C 20 03 	    sw      r1,TCB_EPC[tr]
0155D4 02 10 00 3E 	    mfspr   r1,cr0
0155D8 63 1C 60 03 	    sw      r1,TCB_CR0[tr]
                	resched1:
0155DC 40 1C 20 04 	    lb      r1,TCB_Status[tr]  ; clear RUNNING status (bit #3)
0155E0 8C 10 EE FF 	    and     r1,r1,#~TS_RUNNING
0155E4 60 1C 20 04 	    sb      r1,TCB_Status[tr]
0155E8 7C 00 00 00 		jmp		SelectTaskToRun
0155EC 3C 00 FC AB 
                	
                	strStartQue:
0155F0 00 00 00 01 		db		0,0,0,1,0,0,0,2,0,1,0,3,0,0,0,4,0,1,0,5,0,0,0,6,0,1,0,7
0155F4 00 00 00 02 
0155F8 00 01 00 03 
0155FC 00 00 00 04 
015600 00 01 00 05 
015604 00 00 00 06 
015608 00 01 00 07 
                	;	db		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                	
                	;------------------------------------------------------------------------------
                	; 60 Hz interrupt
                	; - takes care of "flashing" the cursor
                	; - decrements timeouts for tasks on timeout list
                	; - switching tasks
                	;------------------------------------------------------------------------------
                	
                	FMTKTick:
01560C 02 E0 01 6C 	    cpuid   sp,r0,#0
015610 3D 0F 08 00 	    beq     sp,.0001
015614 7C 02 00 00 	    ldi     sp,#CPU1_IRQ_STACK
015618 0A E0 01 10 
01561C BA 01 00 00 	    bra     .0002
                	.0001:
015620 FC 00 00 00 	    ldi     sp,#CPU0_IRQ_STACK
015624 0A E0 01 10 
                	.0002:
015628 E7 E0 01 00 	    push    r1
01562C 67 E1 01 00 	    push    r2
015630 E7 E1 01 00 	    push    r3
                	
                	    ; The interrupt has to be acknowledged regardless of whether or not
                	    ; the semaphore can be locked, and task switching occur.
                	    ; Each CPU has it's own PIC mapped at the same address.
015634 0A 10 06 00 		ldi		r1,#3				; reset the edge sense circuit
015638 7C DC FF 00 		sh		r1,PIC_RSTE
01563C 62 10 A8 1F 
015640 7C C0 00 00 		inc		IRQFlag,#1
015644 64 10 30 00 
                	
                	    ; Lock up the resources needed by the tick routine
                	    ; Retry up to 10 times to lock the semaphore.
015648 0A 30 14 00 	    ldi     r3,#10
                	.0003:
01564C 7C C0 00 00 	    lwar    r1,sys_sema
015650 5C 10 B0 03 
015654 82 20 60 34 	    chk     r2,r1,b48
015658 3D 11 10 00 	    bne     r2,.cantLockSYS
01565C 7C C0 00 00 	    swcr    tr,sys_sema
015660 6E 80 B1 03 
015664 3F 00 00 00 	    nop
015668 3F 00 00 00 	    nop
01566C 02 10 00 3E 	    mfspr   r1,cr0
015670 83 10 48 D2 	    bfextu  r1,r1,#36,#36
015674 BD 10 22 00 	    bne     r1,.SYSLocked
                	.cantLockSYS:
015678 95 31 02 00 	    subui   r3,r3,#1
01567C BD 11 E8 FF 	    bne     r3,.0003
015680 7C C0 00 00 	    inc     missed_ticks,#1
015684 64 10 80 02 
015688 02 10 00 6C 		cpuid   r1,r0,#0
01568C BD 10 0E 00 		bne     r1,.0004
015690 7C C0 00 00 		lw		r1,UserTick
015694 46 10 00 00 
015698 BD 00 08 00 		beq		r1,.0004
01569C E7 EF 01 00 		push    lr
0156A0 BC F0 01 00 		jsr		[r1]
0156A4 57 FF 11 00 		pop     lr
                	.0004:
0156A8 57 3F 10 00 	    pop     r3
0156AC 57 2F 10 00 	    pop     r2
0156B0 57 1F 10 00 	    pop     r1
0156B4 02 E0 3F 6E 	    rti
                	
                	.SYSLocked:
0156B8 57 3F 10 00 	    pop     r3
0156BC 57 2F 10 00 	    pop     r2
0156C0 57 1F 10 00 	    pop     r1
0156C4 63 1C 10 00 	    sw      r1,TCB_r1[tr]
0156C8 63 2C 20 00 	    sw      r2,TCB_r2[tr]
0156CC 63 3C 30 00 	    sw      r3,TCB_r3[tr]
0156D0 63 4C 40 00 	    sw      r4,TCB_r4[tr]
0156D4 63 5C 50 00 	    sw      r5,TCB_r5[tr]
0156D8 63 6C 60 00 	    sw      r6,TCB_r6[tr]
0156DC 63 7C 70 00 	    sw      r7,TCB_r7[tr]
0156E0 63 8C 80 00 	    sw      r8,TCB_r8[tr]
0156E4 63 9C 90 00 	    sw      r9,TCB_r9[tr]
0156E8 63 AC A0 00 	    sw      r10,TCB_r10[tr]
0156EC 63 BC B0 00 	    sw      r11,TCB_r11[tr]
0156F0 63 CC C0 00 	    sw      r12,TCB_r12[tr]
0156F4 63 DC D0 00 	    sw      r13,TCB_r13[tr]
0156F8 63 EC E0 00 	    sw      r14,TCB_r14[tr]
0156FC 63 FC F0 00 	    sw      r15,TCB_r15[tr]
015700 63 0C 01 01 	    sw      r16,TCB_r16[tr]
015704 63 1C 11 01 	    sw      r17,TCB_r17[tr]
015708 63 2C 21 01 	    sw      r18,TCB_r18[tr]
01570C 63 3C 31 01 	    sw      r19,TCB_r19[tr]
015710 63 4C 41 01 	    sw      r20,TCB_r20[tr]
015714 63 5C 51 01 	    sw      r21,TCB_r21[tr]
015718 63 6C 61 01 	    sw      r22,TCB_r22[tr]
01571C 63 7C 71 01 	    sw      r23,TCB_r23[tr]
015720 63 8C 81 01 	    sw      r24,TCB_r24[tr]  ; not really necessary since we are going to reload it later
015724 63 9C 91 01 	    sw      r25,TCB_r25[tr]
015728 63 AC A1 01 	    sw      r26,TCB_r26[tr]
01572C 63 BC B1 01 	    sw      r27,TCB_r27[tr]
015730 63 CC C1 01 	    sw      r28,TCB_r28[tr]
015734 63 DC D1 01 	    sw      r29,TCB_r29[tr]
015738 02 10 1E 3E 	    mfspr   r1,isp           ; the interrupt placed the SP into this register
01573C 63 1C 30 03 	    sw      r1,TCB_ISP[tr]
015740 02 10 20 3E 	    mfspr   r1,dsp
015744 63 1C 40 03 	    sw      r1,TCB_DSP[tr]
015748 02 10 22 3E 	    mfspr   r1,esp
01574C 63 1C 50 03 	    sw      r1,TCB_ESP[tr]
015750 63 FC F1 01 	    sw      r31,TCB_r31[tr]
015754 02 10 10 3E 	    mfspr   r1,ipc
015758 63 1C 00 03 	    sw      r1,TCB_IPC[tr]
01575C 02 10 0E 3E 	    mfspr   r1,dpc
015760 63 1C 10 03 	    sw      r1,TCB_DPC[tr]
015764 02 10 12 3E 	    mfspr   r1,epc
015768 63 1C 20 03 	    sw      r1,TCB_EPC[tr]
01576C 02 10 00 3E 	    mfspr   r1,cr0
015770 63 1C 60 03 	    sw      r1,TCB_CR0[tr]
                	
015774 02 10 00 6C 		cpuid   r1,r0,#0
015778 BD 10 0E 00 		bne     r1,p100Hz4
01577C 7C C0 00 00 		lw		r1,UserTick
015780 46 10 00 00 
015784 BD 00 08 00 		beq		r1,p100Hz4
015788 E7 EF 01 00 		push    lr
01578C BC F0 01 00 		jsr		[r1]
015790 57 FF 11 00 		pop     lr
                	p100Hz4:
015794 40 1C 20 04 	    lb      r1,TCB_Status[tr]
015798 8C 10 EE FF 	    and     r1,r1,#~TS_RUNNING
01579C 60 1C 20 04 	    sb      r1,TCB_Status[tr]
                	
                		; Check the timeout list to see if there are items ready to be removed from
                		; the list. Also decrement the timeout of the item at the head of the list.
                		; Note the timeout list is checked by each CPU which decrements timeouts,
                		; the resulting decrement rate is 60Hz as each CPU services the interrupt
                		; at a 30Hz rate.
                	p100Hz15:
0157A0 7C C0 00 00 		lw		r2,TimeoutList
0157A4 46 20 20 02 
0157A8 02 11 60 34 		chk     r1,r2,b48
0157AC BD 00 26 00 		beq		r1,p100Hz12				; are there any entries in the timeout list ?
0157B0 46 11 F0 04 		lw		r1,TCB_Timeout[r2]
0157B4 BD 10 12 00 		bne		r1,p100Hz14				; has this entry timed out ?
                	p100Hz1:
0157B8 E7 EF 01 00 		push    lr
0157BC B9 8F FE FF 		bsr     PopTimeoutList
0157C0 39 3B FE FF 		bsr		AddTaskToReadyList
0157C4 57 FF 11 00 		pop     lr
0157C8 3A FB FF FF 		bra		p100Hz15				; go back and see if there's another task to be removed
                										; there could be a string of tasks to make ready.
                	p100Hz_missed_tick:
0157CC 7C C0 00 00 	    inc     missed_ticks,#1
0157D0 64 10 80 02 
0157D4 BA 04 00 00 	    bra     p100Hz12
                	
                	p100Hz14:
0157D8 95 10 02 00 		subui   r1,r1,#1				; decrement the entry's timeout
0157DC 7C C0 00 00 		lw      r3,missed_ticks
0157E0 46 30 80 02 
0157E4 82 10 06 2A 		subu	r1,r1,r3        		; account for any missed ticks
0157E8 7C C0 00 00 		sw		r0,missed_ticks
0157EC 63 00 80 02 
0157F0 63 11 F0 04 		sw		r1,TCB_Timeout[r2]
0157F4 BD 50 E2 FF 		ble     r1,p100Hz1
                		
                	p100Hz12:
                		; Falls through into selecting a task to run
                	tck3:
                	
                	;------------------------------------------------------------------------------
                	; Search the ready queues for a ready task.
                	; The search is occasionally started at a lower priority queue in order
                	; to prevent starvation of lower priority tasks. This is managed by 
                	; using a tick count as an index to a string containing the start que.
                	;------------------------------------------------------------------------------
                	;
                	SelectTaskToRun:
0157F8 0A 60 10 00 		ldi		r6,#8			; number of queues to search
0157FC 7C C0 00 00 		lw		r3,IRQFlag		; use the IRQFlag as a buffer index
015800 46 30 30 00 
015804 8C 31 7E 00 		and		r3,r3,#$3F		; counts from 0 to 31
015808 82 31 02 72 		lsr     r3,r3,#1
01580C 7C 01 00 00 		lb	    r3,strStartQue[r3]	; get the queue to start search at
015810 C0 31 E0 AB 
015814 8C 31 0E 00 		and     r3,r3,#7
                	sttr2:
015818 82 41 06 70 	    asl     r4,r3,#3
01581C 7C C0 00 00 		lw		r1,QNdx0[r4]
015820 46 12 A0 00 
015824 82 50 60 34 		chk     r5,r1,b48
015828 BD 02 BE 00 		beq		r5,sttr_nextList
01582C 82 80 00 1A 		mov     r8,r1              ; remember original list head
015830 C6 10 00 04 		lw      r1,TCB_NextRdy[r1] ; advance list head
015834 7C C0 00 00 		sw      r1,QNdx0[r4]
015838 63 12 A0 00 
01583C 82 50 30 0C 		cmp     r5,r1,tr           ; skip over running task
015840 BD 02 A8 00 		beq     r5,sttr_nextInList
                	sttr11:
                		; The task could already be running on the other CPU, don't run a running
                		; task.
015844 C0 50 20 04 		lb      r5,TCB_Status[r1]
015848 8C 72 10 00 		and     r7,r5,#TS_RUNNING
01584C BD 13 A2 00 		bne     r7,sttr_nextInList
                	sttr10:
                		; Task control blocks are aligned on 1kB boundaries. Address ends in "$00"
                	    ; Check and make sure this is the case. This should catch most bad pointers.
015850 82 70 60 34 	    chk     r7,r1,b48
015854 BD 03 D2 00 	    beq     r7,sttr_badtask
                		; Probably got a valid pointer...
                		; CPU #0 can run any task, CPU #1 can only run tasks associated with it as
                		; it has no I/O. -- for the moment
015858 02 70 00 6C 		cpuid   r7,r0,#0
                	;	beq     r7,sttr5
01585C C1 80 00 05 		lbu     r8,TCB_Affinity[r1]
015860 82 73 10 0C 		cmp     r7,r7,r8
015864 BD 13 96 00 		bne     r7,sttr_nextInList
                	sttr5:
                		; This is the only place the RunningTCB is set (except for initialization).
015868 82 80 01 1A 		mov     tr,r1
01586C 40 1C 20 04 		lb      r1,TCB_Status[tr]
015870 8D 10 10 00 		or      r1,r1,#TS_RUNNING    ; flag the task as the running task
015874 60 1C 20 04 		sb      r1,TCB_Status[tr]
                		; Only CPU #0 has access to I/O, so check for an I/O focus switch only
                		; on CPU #0.
015878 02 10 00 6C 		cpuid   r1,r0,#0
01587C BD 10 2A 00 		bne     r1,sttr6
015880 7C C0 00 00 		lw		r1,iof_switch		
015884 46 10 00 03 
015888 BD 00 24 00 		beq		r1,sttr6				
01588C 7C C0 00 00 		lwar	r1,iof_sema		; just ignore the request to switch
015890 5C 10 F0 03 
015894 BD 10 78 00 		bne		r1,sttr7		; I/O focus if the semaphore can't be aquired
015898 7C C0 00 00 		swcr    tr,iof_sema
01589C 6E 80 F1 03 
0158A0 3F 00 00 00 		nop
0158A4 3F 00 00 00 		nop
0158A8 02 10 00 3E 		mfspr   r1,cr0
0158AC 83 10 48 D2 		bfextu  r1,r1,#36,#36
0158B0 BD 00 10 00 		beq     r1,sttr6
0158B4 7C C0 00 00 		sw		r0,iof_switch
0158B8 63 00 00 03 
0158BC E7 EF 01 00 		push    lr
0158C0 B9 46 00 00 		bsr		SwitchIOFocus
0158C4 57 FF 11 00 		pop     lr
0158C8 7C C0 00 00 		sw		r0,iof_sema
0158CC 63 00 F0 03 
                		; Restore the task context
                	sttr6:
0158D0 46 1C 60 03 	    lw      r1,TCB_CR0[tr]
0158D4 82 00 00 3C 	    mtspr   cr0,r1
0158D8 46 1C 20 03 	    lw      r1,TCB_EPC[tr]
0158DC 82 00 12 3C 	    mtspr   epc,r1
0158E0 46 1C 10 03 	    lw      r1,TCB_DPC[tr]
0158E4 82 00 0E 3C 	    mtspr   dpc,r1
0158E8 46 1C 00 03 	    lw      r1,TCB_IPC[tr]
0158EC 82 00 10 3C 	    mtspr   ipc,r1
0158F0 46 FC F1 01 	    lw      r31,TCB_r31[tr]
0158F4 46 1C 50 03 	    lw      r1,TCB_ESP[tr]
0158F8 82 00 22 3C 	    mtspr   esp,r1
0158FC 46 1C 40 03 	    lw      r1,TCB_DSP[tr]
015900 82 00 20 3C 	    mtspr   dsp,r1
015904 46 1C 30 03 	    lw      r1,TCB_ISP[tr]
015908 82 00 1E 3C 	    mtspr   isp,r1
01590C 46 DC D1 01 	    lw      r29,TCB_r29[tr]
015910 46 CC C1 01 	    lw      r28,TCB_r28[tr]
015914 46 BC B1 01 	    lw      r27,TCB_r27[tr]
015918 46 AC A1 01 	    lw      r26,TCB_r26[tr]
01591C 46 9C 91 01 	    lw      r25,TCB_r25[tr]
                	;   lw      r24,TCB_r24[tr]    ; r24 is the task register - no need to load
015920 46 7C 71 01 	    lw      r23,TCB_r23[tr]
015924 46 6C 61 01 	    lw      r22,TCB_r22[tr]
015928 46 5C 51 01 	    lw      r21,TCB_r21[tr]
01592C 46 4C 41 01 	    lw      r20,TCB_r20[tr]
015930 46 3C 31 01 	    lw      r19,TCB_r19[tr]
015934 46 2C 21 01 	    lw      r18,TCB_r18[tr]
015938 46 1C 11 01 	    lw      r17,TCB_r17[tr]
01593C 46 0C 01 01 	    lw      r16,TCB_r16[tr]
015940 46 FC F0 00 	    lw      r15,TCB_r15[tr]
015944 46 EC E0 00 	    lw      r14,TCB_r14[tr]
015948 46 DC D0 00 	    lw      r13,TCB_r13[tr]
01594C 46 CC C0 00 	    lw      r12,TCB_r12[tr]
015950 46 BC B0 00 	    lw      r11,TCB_r11[tr]
015954 46 AC A0 00 	    lw      r10,TCB_r10[tr]
015958 46 9C 90 00 	    lw      r9,TCB_r9[tr]
01595C 46 8C 80 00 	    lw      r8,TCB_r8[tr]
015960 46 7C 70 00 	    lw      r7,TCB_r7[tr]
015964 46 6C 60 00 	    lw      r6,TCB_r6[tr]
015968 46 5C 50 00 	    lw      r5,TCB_r5[tr]
01596C 46 4C 40 00 	    lw      r4,TCB_r4[tr]
015970 46 3C 30 00 	    lw      r3,TCB_r3[tr]
015974 46 2C 20 00 	    lw      r2,TCB_r2[tr]
015978 46 1C 10 00 	    lw      r1,TCB_r1[tr]
01597C 39 73 FD FF 	    bsr     UnlockSYS
015980 02 E0 3F 6E 		rti
                	sttr7:
015984 7C C0 00 00 	    swcr    r1,iof_sema
015988 6E 10 F0 03 
01598C BA E8 FF FF 	    bra     sttr6
                	
                	sttr_nextInList:
015990 C6 70 00 04 	    lw      r7,TCB_NextRdy[r1]
015994 02 54 0E 0C 	    cmp     r5,r8,r7           ; are we back to the start of the list ?
015998 BD 02 06 00 	    beq     r5,sttr_nextList   ; if so, go to the next list
01599C 82 13 00 1A 	    mov     r1,r7
0159A0 BA D4 FF FF 	    bra     sttr11
                	
                		; Set index to check the next ready list for a task to run
                	sttr_nextList:
0159A4 94 31 02 00 		addui   r3,r3,#1
0159A8 8C 31 0E 00 		and     r3,r3,#7     ; count moduluo 8
0159AC 15 63 02 00 		subui   r6,r6,#1
0159B0 3D 33 34 FF 		bge		r6,sttr2
                	 
                		; Here there were no tasks ready
                		; This should not be able to happen, so hang the machine (in a lower
                		; power mode).
                		; For now just go back to running whatever was running in the first place.
                		; Something had to be running sucessfully before the interrupt; return to
                	    ; it.
0159B4 BA E3 FF FF 	    bra     sttr6
                	sttr3:
0159B8 02 10 00 6C 		cpuid   r1,r0,#0
                	sttr8:
0159BC BD 10 00 00 		bne     r1,sttr8
0159C0 E7 EF 01 00 		push    lr
0159C4 B9 0B 00 00 		bsr		kernel_panic
0159C8 4E 6F 20 74 		db		"No tasks in ready queue.",0
0159CC 61 73 6B 73 
0159D0 20 69 6E 20 
0159D4 72 65 61 64 
0159D8 79 20 71 75 
0159DC 65 75 65 2E 
0159E0 00          
0159E1 00 00 00 B9 		bsr     DumpTaskList
0159E5 C5 FD FF    
0159E8 57 FF 11 00 		pop     lr
                		; Might as well power down the clock and wait for a reset or
                		; NMI. In the case of an NMI the kernel is reinitialized without
                		; doing the boot reset.
0159EC 02 00 04 6E 		stp								
0159F0 7C 00 00 00 		jmp		FMTKInitialize
0159F4 3C 00 0E A0 
                	
                	sttr_badtask:
0159F8 02 10 00 6C 		cpuid   r1,r0,#0
0159FC BD 10 D4 FF 		bne     r1,sttr_nextList
015A00 39 04 00 00 	    bsr     kernel_panic
015A04 42 61 64 20 	    db      "Bad task on ready list.",0
015A08 74 61 73 6B 
015A0C 20 6F 6E 20 
015A10 72 65 61 64 
015A14 79 20 6C 69 
015A18 73 74 2E 00 
015A1C 3A F1 FF FF 	    bra     sttr_nextList
                	
                	;------------------------------------------------------------------------------
                	; kernal_panic:
                	;	All this does right now is display the panic message on the screen.
                	; Parameters:
                	;	inline: string
                	;------------------------------------------------------------------------------
                	;
                	kernel_panic:
015A20 E7 E0 01 00 	    push    r1
                	kpan2:
015A24 C1 1F 00 00 		lbu	    r1,[lr]		; get a byte from the code space
015A28 BD 00 0C 00 		beq		r1,kpan1		; is it end of string ?
015A2C 94 FF 03 00 		addui	lr,lr,#1	; increment pointer
015A30 E7 EF 01 00 		push    lr
015A34 39 83 F7 FF 		bsr		OutChar
015A38 57 FF 11 00 		pop     lr
015A3C 3A FD FF FF 		bra		kpan2
                	kpan1:
015A40 E7 EF 01 00 	    push    lr   		; must update the return address !
015A44 39 13 F6 FF 		bsr		CRLF
015A48 57 FF 11 00 		pop     lr
015A4C 57 1F 10 00 		pop     r1
015A50 94 FF 07 00 		addui   lr,lr,#3    ; round the link register to the next instruction address
015A54 8C FF F9 FF 		and     lr,lr,#-4
015A58 37 FF 01 00 		rtl

                	
                	; ============================================================================
                	; iofocus.s
                	;        __
                	;   \\__/ o\    (C) 2014, 2015  Robert Finch, Stratford
                	;    \  __ /    All rights reserved.
                	;     \/_//     robfinch<remove>@finitron.ca
                	;       ||
                	;  
                	;
                	; This source file is free software: you can redistribute it and/or modify 
                	; it under the terms of the GNU Lesser General Public License as published 
                	; by the Free Software Foundation, either version 3 of the License, or     
                	; (at your option) any later version.                                      
                	;                                                                          
                	; This source file is distributed in the hope that it will be useful,      
                	; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                	; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                	; GNU General Public License for more details.                             
                	;                                                                          
                	; You should have received a copy of the GNU General Public License        
                	; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                	;
                	; iofocus.s
                	; ============================================================================
                	
                	LockIOF:
015A5C E7 EF 01 00 	    push    lr
015A60 E7 E0 01 00 	    push    r1
015A64 7C C0 00 00 	    ldi     r1,#iof_sema
015A68 0A 10 F0 03 
015A6C B9 58 FD FF 	    bsr     LockSema
015A70 57 1F 10 00 	    pop     r1
015A74 3B FF 11 00 	    rts
UnlockIOF:
015A78 E7 EF 01 00 	     push   lr
015A7C E7 E0 01 00 	     push   r1
015A80 7C C0 00 00 	     lea    r1,iof_sema
015A84 47 10 F0 03 
015A88 39 5E FD FF 	     bsr    UnlockSema
015A8C 57 1F 10 00 	     pop    r1
015A90 3B FF 11 00 	     rts

                	;------------------------------------------------------------------------------
                	; ForceIOFocus
                	;
                	; Force the IO focus to a specific job.
                	;------------------------------------------------------------------------------
                	;
                	ForceIOFocus:
015A94 E7 EF 01 00 	    push    lr
015A98 E7 E0 01 00 		push    r1
015A9C 67 E1 01 00 	    push    r2
015AA0 E7 E1 01 00 	    push    r3 
015AA4 39 F7 FF FF 	    bsr     LockIOF
015AA8 7C C0 00 00 		lw		r3,IOFocusNdx
015AAC 46 30 50 00 
015AB0 82 20 06 0C 		cmp		r2,r1,r3
015AB4 3D 01 16 00 		beq		r2,fif1
015AB8 82 20 00 1A 		mov     r2,r1
015ABC 39 5B 00 00 		bsr		CopyScreenToVirtualScreen
015AC0 C6 11 F0 07 		lw		r1,JCB_pVirtVid[r3]
015AC4 E3 11 D0 07 		sw		r1,JCB_pVidMem[r3]
015AC8 7C C0 00 00 		sw		r2,IOFocusNdx
015ACC 63 20 50 00 
015AD0 7C D0 FF 00 		ldi		r1,#TEXTSCR
015AD4 0A 10 00 00 
015AD8 63 11 D0 07 		sw		r1,JCB_pVidMem[r2]
015ADC 39 48 00 00 		bsr		CopyVirtualScreenToScreen
                	fif1:
015AE0 39 F3 FF FF 		bsr     UnlockIOF
015AE4 57 3F 10 00 		pop     r3
015AE8 57 2F 10 00 		pop     r2
015AEC 57 1F 10 00 		pop     r1
015AF0 3B FF 11 00 		rts
	
                	;------------------------------------------------------------------------------
                	; SwitchIOFocus
                	;
                	; Switches the IO focus to the next task requesting the I/O focus. This
                	; routine may be called when a task releases the I/O focus as well as when
                	; the user presses ALT-TAB on the keyboard.
                	; On Entry: the io focus semaphore is set already.
                	;------------------------------------------------------------------------------
                	;
                	SwitchIOFocus:
015AF4 E7 EF 01 00 	    push    lr
015AF8 E7 E0 01 00 	    push    r1
015AFC 67 E1 01 00 	    push    r2
015B00 E7 E1 01 00 	    push    r3
                	
                		; First check if it's even possible to switch the focus to another
                		; task. The I/O focus list could be empty or there may be only a
                		; single task in the list. In either case it's not possible to
                		; switch.
015B04 39 EB FF FF 		bsr     LockIOF
015B08 7C C0 00 00 		lw		r3,IOFocusNdx		; Get the job at the head of the list.
015B0C 46 30 50 00 
015B10 BD 01 18 00 		beq	    r3,siof3			; Is the list empty ?
015B14 C6 21 50 08 		lw		r2,JCB_iof_next[r3]	; Get the next job on the list.
015B18 3D 01 14 00 		beq		r2,siof3			; Nothing to switch to
                	
                		; Copy the current task's screen to it's virtual screen buffer.
015B1C 39 4F 00 00 		bsr		CopyScreenToVirtualScreen
015B20 C6 11 F0 07 		lw		r1,JCB_pVirtVid[r3]
015B24 E3 11 D0 07 		sw		r1,JCB_pVidMem[r3]
                	
015B28 7C C0 00 00 		sw		r2,IOFocusNdx		; Make task the new head of list.
015B2C 63 20 50 00 
015B30 7C D0 FF 00 		ldi		r1,#TEXTSCR
015B34 0A 10 00 00 
015B38 63 11 D0 07 		sw		r1,JCB_pVidMem[r2]
                	
                		; Copy the virtual screen of the task recieving the I/O focus to the
                		; text screen.
015B3C 39 3C 00 00 		bsr		CopyVirtualScreenToScreen
                	siof3:
015B40 39 E7 FF FF 	    bsr     UnlockIOF
015B44 57 3F 10 00 		pop     r3
015B48 57 2F 10 00 		pop     r2
015B4C 57 1F 10 00 		pop     r1
015B50 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; The I/O focus list is an array indicating which jobs are requesting the
                	; I/O focus. The I/O focus is user controlled by pressing ALT-TAB on the
                	; keyboard.
                	;------------------------------------------------------------------------------
                	
                	RequestIOFocus:
015B54 E7 EF 01 00 	    push    lr
015B58 E7 E0 01 00 	    push    r1
015B5C 67 E1 01 00 	    push    r2
015B60 E7 E1 01 00 	    push    r3
015B64 67 E2 01 00 		push	r4
015B68 E7 E2 01 00 		push    r5
                	;	DisTmrKbd
015B6C 40 2C 28 04 		lb	    r2,TCB_hJCB[tr]
015B70 02 11 00 1A 		mov     r1,r2
015B74 17 21 00 0A 		mulu    r2,r2,#JCB_Size
015B78 7C C5 00 00 	    addui   r1,r1,#JCB_Array
015B7C 94 10 00 00 
015B80 82 30 0C 72 		lsr     r3,r1,#6           ; r3 = word index into IO focus table
015B84 39 DB FF FF 		bsr     LockIOF
015B88 7C C0 00 00 		lw      r4,IOFocusTbl[r3]  ; r4 = word from IO focus table
015B8C C6 41 60 00 
015B90 8C 30 7E 00 		and     r3,r1,#$3F         ; r3 = bit number in word
015B94 82 50 06 62 		lsr     r5,r1,r3           ; extract bit into r5
015B98 8C 52 02 00 		and     r5,r5,#1           ; mask off extra bits
015B9C BD 12 2E 00 		bne     r5,riof1           ; is the job already in the IO focus list ?
015BA0 7C C0 00 00 		lw		r1,IOFocusNdx	   ; Is the focus list empty ?
015BA4 46 10 50 00 
015BA8 BD 00 36 00 		beq		r1,riof2
015BAC C6 30 60 08 		lw		r3,JCB_iof_prev[r1]
015BB0 BD 01 3C 00 		beq		r3,riof4
015BB4 E3 20 60 08 		sw		r2,JCB_iof_prev[r1]
015BB8 63 11 50 08 		sw		r1,JCB_iof_next[r2]
015BBC 63 31 60 08 		sw		r3,JCB_iof_prev[r2]
015BC0 E3 21 50 08 		sw		r2,JCB_iof_next[r3]
                	riof3:
015BC4 02 11 00 1A 	    mov     r1,r2
015BC8 7C C5 00 00 		subui   r1,r1,#JCB_Array
015BCC 95 10 00 00 
015BD0 98 10 00 0A 		divu    r1,r1,#JCB_Size    ; r1 = index into JCB array
015BD4 82 30 0C 72 		lsr     r3,r1,#6           ; r3 = word index into IO focus table
015BD8 7C C0 00 00 		lw      r4,IOFocusTbl[r3]  ; r4 = word from IO focus table
015BDC C6 41 60 00 
015BE0 8C 20 7E 00 		and     r2,r1,#$3F         ; r2 = bit number in word
015BE4 0A 50 02 00 		ldi     r5,#1              ; r5 = 1 bit to insert
015BE8 82 52 04 60 		asl     r5,r5,r2           ; r5 shifted into place
015BEC 82 52 08 1A 		or      r5,r5,r4           ; insert bit
015BF0 7C C0 00 00 		sw      r5,IOFocusTbl[r3]  ; store word back to IO focus table
015BF4 E3 51 60 00 
                	riof1:
                	;	EnTmrKbd4
015BF8 39 D0 FF FF 	    bsr     UnlockIOF
015BFC 57 5F 10 00 	    pop     r5
015C00 57 4F 10 00 		pop		r4
015C04 57 3F 10 00 		pop     r3
015C08 57 2F 10 00 		pop     r2
015C0C 57 1F 10 00 		pop     r1
015C10 37 FF 01 00 		rtl

                		; Here, the IO focus list was empty. So expand it.
                		; Make sure pointers are NULL
                	riof2:
015C14 7C C0 00 00 		sw		r2,IOFocusNdx
015C18 63 20 50 00 
015C1C 63 01 50 08 		sw		r0,JCB_iof_next[r2]
015C20 63 01 60 08 		sw		r0,JCB_iof_prev[r2]
015C24 3A F4 FF FF 		bra		riof3
                	
                		; Here there was only a single entry in the list.
                		; Setup pointers appropriately.
                	riof4:
015C28 63 11 50 08 		sw		r1,JCB_iof_next[r2]
015C2C 63 11 60 08 		sw		r1,JCB_iof_prev[r2]
015C30 E3 20 50 08 		sw		r2,JCB_iof_next[r1]
015C34 E3 20 60 08 		st		r2,JCB_iof_prev[r1]
015C38 BA F1 FF FF 		bra		riof3
                	
                	;------------------------------------------------------------------------------
                	; Releasing the I/O focus causes the focus to switch if the running job
                	; had the I/O focus.
                	; ForceReleaseIOFocus forces the release of the IO focus for a job
                	; different than the one currently running.
                	;------------------------------------------------------------------------------
                	
                	ForceReleaseIOFocus:
015C3C E7 EF 01 00 	    push    lr
015C40 E7 E0 01 00 		push    r1
015C44 67 E1 01 00 		push    r2
015C48 E7 E1 01 00 		push    r3
015C4C 67 E2 01 00 		push	r4
015C50 E7 E2 01 00 		push    r5
015C54 02 11 00 1A 		mov     r1,r2
                	;	DisTmrKbd
015C58 3A 05 00 00 		bra		rliof4  ; wedge into ReleaseIOFocus
                	
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	message "ReleaseIOFocus"	
                	ReleaseIOFocus:
015C5C E7 EF 01 00 	    push    lr
015C60 E7 E0 01 00 		push    r1
015C64 67 E1 01 00 		push    r2
015C68 E7 E1 01 00 		push    r3
015C6C 67 E2 01 00 		push	r4
015C70 E7 E2 01 00 		push    r5
                	;	DisTmrKbd
015C74 41 2C 28 04 		lbu	    r2,TCB_hJCB[tr]
015C78 16 11 66 00 		cmpu    r1,r2,#NR_JCB
015C7C BD 30 44 00 		bge     r1,rliof6
                	rliof4:
015C80 02 11 00 1A 		mov     r1,r2
015C84 17 21 00 0A 		mulu    r2,r2,#JCB_Size
015C88 7C C5 00 00 		addui   r1,r1,#JCB_Array   ; r2 = pointer to JCB
015C8C 94 10 00 00 
015C90 82 30 0C 72 		lsr     r3,r1,#6           ; r3 = word index into IO focus table
015C94 39 B9 FF FF 		bsr     LockIOF
015C98 7C C0 00 00 		lw      r4,IOFocusTbl[r3]  ; r4 = word from IO focus table
015C9C C6 41 60 00 
015CA0 8C 30 7E 00 		and     r3,r1,#$3F         ; r3 = bit number in word
015CA4 02 52 06 62 		lsr     r5,r4,r3           ; extract bit into r5
015CA8 8C 52 02 00 		and     r5,r5,#1           ; mask off extra bits
015CAC BD 02 2A 00 		beq		r5,rliof3          ; nothing to do (not in table)
015CB0 02 42 06 66 		ror     r4,r4,r3
015CB4 0C 42 FC FF 		and     r4,r4,#-2          ; mask off LSB
015CB8 02 42 06 64 		rol     r4,r4,r3           ; back in position
015CBC 7C C0 00 00 		sw		r4,IOFocusTbl
015CC0 63 40 60 00 
015CC4 7C C0 00 00 		lw      r5,IOFocusNdx	; Does the running job have the I/O focus ?
015CC8 46 50 50 00 
015CCC 02 51 0A 0C 		cmp		r5,r2,r5
015CD0 BD 12 04 00 		bne		r5,rliof1
015CD4 39 C4 FF FF 		bsr		SwitchIOFocus	; If so, then switch the focus.
                	rliof1:
015CD8 46 11 50 08 		lw		r1,JCB_iof_next[r2]	; get next and previous fields.
015CDC BD 00 0A 00 		beq		r1,rliof5			; Is list emptying ?
015CE0 46 31 60 08 		lw		r3,JCB_iof_prev[r2]
015CE4 E3 11 50 08 		sw		r1,JCB_iof_next[r3]	; prev->next = current->next
015CE8 E3 30 60 08 		sw	    r3,JCB_iof_prev[r1]	; next->prev = current->prev
015CEC BA 01 00 00 		bra		rliof2
                	rliof5:
015CF0 7C C0 00 00 		sw		r0,IOFocusNdx		; emptied.
015CF4 63 00 50 00 
                	rliof2:
015CF8 63 01 50 08 		sw		r0,JCB_iof_next[r2]	; Update the next and prev fields to indicate
015CFC 63 01 60 08 		sw		r0,JCB_iof_prev[r2]	; the job is no longer on the list.
                	rliof3:
                	;	EnTmrKbd
015D00 39 AF FF FF 	    bsr     UnlockIOF
                	rliof6:
015D04 57 5F 10 00 	    pop     r5
015D08 57 4F 10 00 		pop		r4
015D0C 57 3F 10 00 		pop     r3
015D10 57 2F 10 00 		pop     r2
015D14 57 1F 10 00 		pop     r1
015D18 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	message "CopyVirtualScreenToScreen"
                	CopyVirtualScreenToScreen
015D1C E7 E0 01 00 	    push    r1
015D20 67 E1 01 00 	    push    r2
015D24 E7 E1 01 00 	    push    r3
015D28 67 E2 01 00 		push	r4
015D2C 7C C0 00 00 		lw		r2,IOFocusNdx		; compute virtual screen location
015D30 46 20 50 00 
015D34 3D 01 12 00 		beq		r2,cvss3
                		; copy screen chars
015D38 0A 10 FE 1F 		ldi		r1,#4095			; number of words to copy-1
015D3C 46 21 F0 07 		lw		r2,JCB_pVirtVid[r2]
015D40 7C D0 FF 00 		ldi		r3,#TEXTSCR
015D44 0A 30 00 00 
                	.0001:
015D48 4C 41 82 00 		lh      r4,[r2+r1*4]       ; from virtual
015D4C EA 41 82 00 		sh      r4,[r3+r1*4]       ; to screen
015D50 95 10 02 00 		subui   r1,r1,#1
015D54 BD 30 FA FF 		bge     r1,.0001
                	cvss3:
                		; reset the cursor position in the text controller
015D58 7C C0 00 00 		lw		r3,IOFocusNdx
015D5C 46 30 50 00 
015D60 C0 21 18 08 		lb		r2,JCB_CursorRow[r3]
015D64 7C DA FF 00 		ldi		r1,(TEXTREG+TEXT_COLS)|$FFD00000
015D68 0A 10 00 00 
015D6C 02 21 02 2E 		mulu	r2,r2,r1
015D70 C0 41 1A 08 		lb      r4,JCB_CursorCol[r3]
015D74 02 21 08 08 		add		r2,r2,r4
015D78 7C DA FF 00 		sc		r2,(TEXTREG+TEXT_CURPOS)|$FFD00000
015D7C 61 20 58 00 
015D80 57 4F 10 00 		pop		r4
015D84 57 3F 10 00 		pop     r3
015D88 57 2F 10 00 		pop     r2
015D8C 57 1F 10 00 		pop     r1
015D90 37 FF 01 00 		rtl
message "CopyScreenToVirtualScreen"
                	CopyScreenToVirtualScreen
015D94 E7 E0 01 00 	    push    r1
015D98 67 E1 01 00 	    push    r2
015D9C E7 E1 01 00 	    push    r3
015DA0 67 E2 01 00 		push	r4
015DA4 0A 10 FE 1F 		ldi		r1,#4095
015DA8 7C D0 FF 00 		ldi		r2,#TEXTSCR
015DAC 0A 20 00 00 
015DB0 7C C0 00 00 		lw		r3,IOFocusNdx
015DB4 46 30 50 00 
015DB8 BD 01 0C 00 		beq		r3,csvs3
015DBC C6 31 F0 07 		lw		r3,JCB_pVirtVid[r3]
                	.0001:
015DC0 4C 41 82 00 		lh      r4,[r2+r1*4]
015DC4 EA 41 82 00 		sh      r4,[r3+r1*4]
015DC8 95 10 02 00 		subui   r1,r1,#1
015DCC BD 30 FA FF 		bge     r1,.0001
                	csvs3:
015DD0 57 4F 10 00 		pop		r4
015DD4 57 3F 10 00 		pop     r3
015DD8 57 2F 10 00 		pop     r2
015DDC 57 1F 10 00 		pop     r1
015DE0 37 FF 01 00 		rtl

                	
                		code
015DE4 00 00 00 00 		align	1
015DE8 00 00 00 00 
015DEC 00 00 00 00 
                	
                	public code putch:
015DF0 15 EF 21 00 		      	subui	sp,sp,#16
015DF4 E7 ED 01 00 		      	push 	bp
015DF8 02 BF 01 1A 		      	mov  	bp,sp
015DFC 67 E3 01 00 		      	     	        push    r6
015E00 C6 1D 30 00 			lw		r1,24[bp]
015E04 0A 60 1C 00 			ldi     r6,#14    ; Teletype output function
015E08 38 0F 34 03 	        sys     #410      ; Video BIOS call
015E0C 57 6F 10 00 	        pop     r6
                		
                	stdio_1:
015E10 82 ED 01 1A 		      	mov  	sp,bp
015E14 57 BF 11 00 		      	pop  	bp
015E18 37 FF 31 00 		      	rtl  	#24
                	endpublic
                	
                	public code putnum:
015E1C E7 EF 01 00 		      	push 	lr
015E20 67 EE 01 00 		      	push 	xlr
015E24 E7 ED 01 00 		      	push 	bp
015E28 7C 01 00 00 		      	ldi  	xlr,#stdio_3
015E2C 0A C0 51 BF 
015E30 02 BF 01 1A 		      	mov  	bp,sp
015E34 15 EF 81 00 		      	subui	sp,sp,#64
015E38 E7 E5 01 00 		      	push 	r11
015E3C C7 3D 8C FF 		      	lea  	r3,-58[bp]
015E40 82 B1 00 1A 		      	mov  	r11,r3
015E44 C6 3D 40 00 		      	lw   	r3,32[bp]
015E48 BD 41 08 00 		      	blt  	r3,stdio_6
015E4C C6 3D 40 00 		      	lw   	r3,32[bp]
015E50 86 31 90 01 		      	cmp  	r3,r3,#200
015E54 BD 51 04 00 		      	ble  	r3,stdio_4
                	stdio_6:
015E58 E3 0D 40 00 		      	sw   	r0,32[bp]
                	stdio_4:
015E5C C6 3D 30 00 		      	lw   	r3,24[bp]
015E60 BD 31 06 00 		      	bge  	r3,stdio_7
015E64 0A 30 5A 00 		      	ldi  	r3,#45
015E68 BA 01 00 00 		      	bra  	stdio_8
                	stdio_7:
015E6C 0A 40 56 00 		      	ldi  	r4,#43
015E70 02 32 00 1A 		      	mov  	r3,r4
                	stdio_8:
015E74 E1 3D DC FF 		      	sc   	r3,-18[bp]
015E78 C6 3D 30 00 		      	lw   	r3,24[bp]
015E7C BD 31 08 00 		      	bge  	r3,stdio_9
015E80 C6 3D 30 00 		      	lw   	r3,24[bp]
015E84 02 30 06 2A 		      	neg  	r3,r3
015E88 E3 3D 30 00 		      	sw   	r3,24[bp]
                	stdio_9:
015E8C E3 0D F0 FF 		      	sw   	r0,-8[bp]
                	stdio_11:
015E90 C6 3D F0 FF 		      	lw   	r3,-8[bp]
015E94 8C 31 06 00 		      	and  	r3,r3,#3
015E98 86 31 06 00 		      	cmp  	r3,r3,#3
015E9C BD 11 12 00 		      	bne  	r3,stdio_13
015EA0 C3 3D 50 00 		      	lcu  	r3,40[bp]
015EA4 82 31 00 22 		      	sxc  	r3,r3
015EA8 BD 01 0C 00 		      	beq  	r3,stdio_13
015EAC C6 3D F0 FF 		      	lw   	r3,-8[bp]
015EB0 82 31 02 70 		      	asli 	r3,r3,#1
015EB4 C3 4D 50 00 		      	lcu  	r4,40[bp]
015EB8 E9 45 06 00 		      	sc   	r4,0[r11+r3]
015EBC E4 1D F0 FF 		      	inc  	-8[bp],#1
                	stdio_13:
015EC0 C6 3D 30 00 		      	lw   	r3,24[bp]
015EC4 89 31 14 00 		      	mod  	r3,r3,#10
015EC8 E3 3D E0 FF 		      	sw   	r3,-16[bp]
015ECC C6 3D E0 FF 		      	lw   	r3,-16[bp]
015ED0 86 31 12 00 		      	cmp  	r3,r3,#9
015ED4 BD 21 06 00 		      	bgt  	r3,stdio_17
015ED8 C6 3D E0 FF 		      	lw   	r3,-16[bp]
015EDC BD 31 0A 00 		      	bge  	r3,stdio_15
                	stdio_17:
015EE0 FC 01 00 00 		      	push 	#stdio_2
015EE4 65 E0 01 60 
015EE8 B9 6F 00 00 		      	bsr  	printf
015EEC 14 EF 11 00 		      	addui	sp,sp,#8
                	stdio_15:
015EF0 C6 3D E0 FF 		      	lw   	r3,-16[bp]
015EF4 94 31 60 00 		      	addu 	r3,r3,#48
015EF8 C6 4D F0 FF 		      	lw   	r4,-8[bp]
015EFC 02 42 02 70 		      	asli 	r4,r4,#1
015F00 E9 35 08 00 		      	sc   	r3,0[r11+r4]
015F04 C6 3D 30 00 		      	lw   	r3,24[bp]
015F08 88 31 14 00 		      	divs 	r3,r3,#10
015F0C E3 3D 30 00 		      	sw   	r3,24[bp]
015F10 E4 1D F0 FF 		      	inc  	-8[bp],#1
015F14 C6 3D 30 00 		      	lw   	r3,24[bp]
015F18 BD 01 08 00 		      	beq  	r3,stdio_18
015F1C C6 3D F0 FF 		      	lw   	r3,-8[bp]
015F20 86 31 24 00 		      	cmp  	r3,r3,#18
015F24 BD 51 B6 FF 		      	ble  	r3,stdio_11
                	stdio_18:
                	stdio_12:
015F28 C3 3D DC FF 		      	lcu  	r3,-18[bp]
015F2C 86 31 5A 00 		      	cmp  	r3,r3,#45
015F30 BD 11 0C 00 		      	bne  	r3,stdio_19
015F34 C6 3D F0 FF 		      	lw   	r3,-8[bp]
015F38 82 31 02 70 		      	asli 	r3,r3,#1
015F3C C3 4D DC FF 		      	lcu  	r4,-18[bp]
015F40 E9 45 06 00 		      	sc   	r4,0[r11+r3]
015F44 E4 1D F0 FF 		      	inc  	-8[bp],#1
                	stdio_19:
                	stdio_21:
015F48 C6 3D F0 FF 		      	lw   	r3,-8[bp]
015F4C C6 4D 40 00 		      	lw   	r4,32[bp]
015F50 82 31 08 0C 		      	cmp  	r3,r3,r4
015F54 BD 31 0C 00 		      	bge  	r3,stdio_22
015F58 C3 3D 60 00 		      	lcu  	r3,48[bp]
015F5C E7 E1 01 00 		      	push 	r3
015F60 39 D2 FF FF 		      	bsr  	putch
                	stdio_23:
015F64 E4 FD 41 00 		      	dec  	32[bp],#1
015F68 3A FC FF FF 		      	bra  	stdio_21
                	stdio_22:
                	stdio_24:
015F6C C6 3D F0 FF 		      	lw   	r3,-8[bp]
015F70 BD 51 10 00 		      	ble  	r3,stdio_25
015F74 E4 FD F1 FF 		      	dec  	-8[bp],#1
015F78 C6 3D F0 FF 		      	lw   	r3,-8[bp]
015F7C 82 31 02 70 		      	asli 	r3,r3,#1
015F80 CB 35 06 00 		      	lcu  	r3,0[r11+r3]
015F84 E7 E1 01 00 		      	push 	r3
015F88 39 CD FF FF 		      	bsr  	putch
015F8C 3A FC FF FF 		      	bra  	stdio_24
                	stdio_25:
                	stdio_26:
015F90 57 BF 10 00 		      	pop  	r11
015F94 82 ED 01 1A 		      	mov  	sp,bp
015F98 57 BF 11 00 		      	pop  	bp
015F9C 57 CF 11 00 		      	pop  	xlr
015FA0 57 FF 11 00 		      	pop  	lr
015FA4 37 FF 41 00 		      	rtl  	#32
                	stdio_3:
015FA8 C6 FD 11 00 		      	lw   	lr,8[bp]
015FAC E3 FD 21 00 		      	sw   	lr,16[bp]
015FB0 3A FC FF FF 		      	bra  	stdio_26
                	endpublic
                	
                	public code puthexnum:
015FB4 E7 EF 01 00 		      	push 	lr
015FB8 67 EE 01 00 		      	push 	xlr
015FBC E7 ED 01 00 		      	push 	bp
015FC0 7C 01 00 00 		      	ldi  	xlr,#stdio_27
015FC4 0A C0 49 C2 
015FC8 02 BF 01 1A 		      	mov  	bp,sp
015FCC 15 EF 81 00 		      	subui	sp,sp,#64
015FD0 E7 E5 01 00 		      	push 	r11
015FD4 C7 3D 8C FF 		      	lea  	r3,-58[bp]
015FD8 82 B1 00 1A 		      	mov  	r11,r3
015FDC C6 3D 40 00 		      	lw   	r3,32[bp]
015FE0 BD 41 08 00 		      	blt  	r3,stdio_30
015FE4 C6 3D 40 00 		      	lw   	r3,32[bp]
015FE8 86 31 90 01 		      	cmp  	r3,r3,#200
015FEC BD 51 04 00 		      	ble  	r3,stdio_28
                	stdio_30:
015FF0 E3 0D 40 00 		      	sw   	r0,32[bp]
                	stdio_28:
015FF4 E3 0D F0 FF 		      	sw   	r0,-8[bp]
015FF8 C6 3D 30 00 		      	lw   	r3,24[bp]
015FFC BD 31 06 00 		      	bge  	r3,stdio_31
016000 0A 30 5A 00 		      	ldi  	r3,#45
016004 BA 01 00 00 		      	bra  	stdio_32
                	stdio_31:
016008 0A 40 56 00 		      	ldi  	r4,#43
01600C 02 32 00 1A 		      	mov  	r3,r4
                	stdio_32:
016010 E1 3D DC FF 		      	sc   	r3,-18[bp]
016014 C6 3D 30 00 		      	lw   	r3,24[bp]
016018 BD 31 08 00 		      	bge  	r3,stdio_33
01601C C6 3D 30 00 		      	lw   	r3,24[bp]
016020 02 30 06 2A 		      	neg  	r3,r3
016024 E3 3D 30 00 		      	sw   	r3,24[bp]
                	stdio_33:
                	stdio_35:
016028 C6 3D 30 00 		      	lw   	r3,24[bp]
01602C 8C 31 1E 00 		      	and  	r3,r3,#15
016030 E3 3D E0 FF 		      	sw   	r3,-16[bp]
016034 C6 3D E0 FF 		      	lw   	r3,-16[bp]
016038 86 31 14 00 		      	cmp  	r3,r3,#10
01603C BD 31 0E 00 		      	bge  	r3,stdio_37
016040 C6 3D E0 FF 		      	lw   	r3,-16[bp]
016044 94 31 60 00 		      	addu 	r3,r3,#48
016048 C6 4D F0 FF 		      	lw   	r4,-8[bp]
01604C 02 42 02 70 		      	asli 	r4,r4,#1
016050 E9 35 08 00 		      	sc   	r3,0[r11+r4]
016054 3A 07 00 00 		      	bra  	stdio_38
                	stdio_37:
016058 C6 3D 50 00 		      	lw   	r3,40[bp]
01605C BD 01 0E 00 		      	beq  	r3,stdio_39
016060 C6 3D E0 FF 		      	lw   	r3,-16[bp]
016064 95 31 92 FF 		      	subu 	r3,r3,#-55
016068 C6 4D F0 FF 		      	lw   	r4,-8[bp]
01606C 02 42 02 70 		      	asli 	r4,r4,#1
016070 E9 35 08 00 		      	sc   	r3,0[r11+r4]
016074 3A 03 00 00 		      	bra  	stdio_40
                	stdio_39:
016078 C6 3D E0 FF 		      	lw   	r3,-16[bp]
01607C 95 31 52 FF 		      	subu 	r3,r3,#-87
016080 C6 4D F0 FF 		      	lw   	r4,-8[bp]
016084 02 42 02 70 		      	asli 	r4,r4,#1
016088 E9 35 08 00 		      	sc   	r3,0[r11+r4]
                	stdio_40:
                	stdio_38:
01608C C6 3D 30 00 		      	lw   	r3,24[bp]
016090 82 31 08 78 		      	asri 	r3,r3,#4
016094 E3 3D 30 00 		      	sw   	r3,24[bp]
016098 E4 1D F0 FF 		      	inc  	-8[bp],#1
01609C C6 3D 30 00 		      	lw   	r3,24[bp]
0160A0 BD 11 C4 FF 		      	bne  	r3,stdio_35
                	stdio_36:
0160A4 C3 3D DC FF 		      	lcu  	r3,-18[bp]
0160A8 86 31 5A 00 		      	cmp  	r3,r3,#45
0160AC BD 11 0C 00 		      	bne  	r3,stdio_41
0160B0 C6 3D F0 FF 		      	lw   	r3,-8[bp]
0160B4 82 31 02 70 		      	asli 	r3,r3,#1
0160B8 C3 4D DC FF 		      	lcu  	r4,-18[bp]
0160BC E9 45 06 00 		      	sc   	r4,0[r11+r3]
0160C0 E4 1D F0 FF 		      	inc  	-8[bp],#1
                	stdio_41:
                	stdio_43:
0160C4 C6 3D F0 FF 		      	lw   	r3,-8[bp]
0160C8 C6 4D 40 00 		      	lw   	r4,32[bp]
0160CC 82 31 08 0C 		      	cmp  	r3,r3,r4
0160D0 BD 31 0C 00 		      	bge  	r3,stdio_44
0160D4 C3 3D 60 00 		      	lcu  	r3,48[bp]
0160D8 E7 E1 01 00 		      	push 	r3
0160DC B9 A2 FF FF 		      	bsr  	putch
0160E0 E4 FD 41 00 		      	dec  	32[bp],#1
0160E4 3A FC FF FF 		      	bra  	stdio_43
                	stdio_44:
                	stdio_45:
0160E8 C6 3D F0 FF 		      	lw   	r3,-8[bp]
0160EC BD 51 10 00 		      	ble  	r3,stdio_46
0160F0 E4 FD F1 FF 		      	dec  	-8[bp],#1
0160F4 C6 3D F0 FF 		      	lw   	r3,-8[bp]
0160F8 82 31 02 70 		      	asli 	r3,r3,#1
0160FC CB 35 06 00 		      	lcu  	r3,0[r11+r3]
016100 E7 E1 01 00 		      	push 	r3
016104 B9 9D FF FF 		      	bsr  	putch
016108 3A FC FF FF 		      	bra  	stdio_45
                	stdio_46:
                	stdio_47:
01610C 57 BF 10 00 		      	pop  	r11
016110 82 ED 01 1A 		      	mov  	sp,bp
016114 57 BF 11 00 		      	pop  	bp
016118 57 CF 11 00 		      	pop  	xlr
01611C 57 FF 11 00 		      	pop  	lr
016120 37 FF 41 00 		      	rtl  	#32
                	stdio_27:
016124 C6 FD 11 00 		      	lw   	lr,8[bp]
016128 E3 FD 21 00 		      	sw   	lr,16[bp]
01612C 3A FC FF FF 		      	bra  	stdio_47
                	endpublic
                	
                	public code putstr:
016130 E7 EF 01 00 		      	push 	lr
016134 67 EE 01 00 		      	push 	xlr
016138 E7 ED 01 00 		      	push 	bp
01613C 7C 01 00 00 		      	ldi  	xlr,#stdio_48
016140 0A C0 59 C3 
016144 02 BF 01 1A 		      	mov  	bp,sp
016148 15 EF 11 00 		      	subui	sp,sp,#8
01614C E7 E5 01 00 		      	push 	r11
016150 C6 BD 30 00 		      	lw   	r11,24[bp]
016154 E3 BD F0 FF 		      	sw   	r11,-8[bp]
                	stdio_49:
016158 C3 35 00 00 		      	lcu  	r3,[r11]
01615C BD 01 12 00 		      	beq  	r3,stdio_50
016160 C6 3D 40 00 		      	lw   	r3,32[bp]
016164 BD 51 0E 00 		      	ble  	r3,stdio_50
016168 C3 35 00 00 		      	lcu  	r3,[r11]
01616C E7 E1 01 00 		      	push 	r3
016170 39 90 FF FF 		      	bsr  	putch
                	stdio_51:
016174 94 B5 04 00 		      	addui	r11,r11,#2
016178 E4 FD 41 00 		      	dec  	32[bp],#1
01617C BA FB FF FF 		      	bra  	stdio_49
                	stdio_50:
016180 C6 3D F0 FF 		      	lw   	r3,-8[bp]
016184 82 31 02 70 		      	asli 	r3,r3,#1
016188 82 B5 06 2A 		      	subu 	r11,r11,r3
01618C 82 B5 02 72 		      	lsri 	r11,r11,#1
016190 82 15 00 1A 		      	mov  	r1,r11
                	stdio_52:
016194 57 BF 10 00 		      	pop  	r11
016198 82 ED 01 1A 		      	mov  	sp,bp
01619C 57 BF 11 00 		      	pop  	bp
0161A0 57 CF 11 00 		      	pop  	xlr
0161A4 57 FF 11 00 		      	pop  	lr
0161A8 37 FF 21 00 		      	rtl  	#16
                	stdio_48:
0161AC C6 FD 11 00 		      	lw   	lr,8[bp]
0161B0 E3 FD 21 00 		      	sw   	lr,16[bp]
0161B4 3A FC FF FF 		      	bra  	stdio_52
                	endpublic
                	
                	public code putstr2:
0161B8 15 EF 21 00 		      	subui	sp,sp,#16
0161BC E7 ED 01 00 		      	push 	bp
0161C0 02 BF 01 1A 		      	mov  	bp,sp
0161C4 67 E3 01 00 		      	     	        push    r6
0161C8 C6 1D 30 00 	        lw      r1,24[bp]
0161CC 0A 60 36 00 	        ldi     r6,#$1B   ; Video BIOS DisplayString16 function
0161D0 38 0F 34 03 	        sys     #410
0161D4 57 6F 10 00 	        pop     r6
                	    
                	stdio_54:
0161D8 82 ED 01 1A 		      	mov  	sp,bp
0161DC 57 BF 11 00 		      	pop  	bp
0161E0 37 FF 31 00 		      	rtl  	#24
                	endpublic
                	
                	public code getcharNoWait:
0161E4 E7 EF 01 00 		      	     	        push    lr
0161E8 B9 8F F7 FF 	        bsr     KeybdGetCharNoWait
0161EC 57 FF 11 00 	        pop     lr
0161F0 37 FF 01 00 	        rtl
        push    r6
0161F4 67 E3 01 00 
                	        ld      r6,#3    ; KeybdGetCharNoWait
0161F8 38 0F 14 00 	        sys     #10
0161FC 57 6F 10 00 	        pop     r6
016200 37 FF 01 00 	        rtl
	
                	endpublic
                	
                	public code getchar:
016204 E7 EF 01 00 		      	push 	lr
016208 67 EE 01 00 		      	push 	xlr
01620C E7 ED 01 00 		      	push 	bp
016210 7C 01 00 00 		      	ldi  	xlr,#stdio_57
016214 0A C0 B1 C4 
016218 02 BF 01 1A 		      	mov  	bp,sp
01621C 15 EF 11 00 		      	subui	sp,sp,#8
                	stdio_58:
016220 B9 F8 FF FF 		      	bsr  	getcharNoWait
016224 82 30 00 1A 		      	mov  	r3,r1
016228 E3 3D F0 FF 		      	sw   	r3,-8[bp]
01622C C6 3D F0 FF 		      	lw   	r3,-8[bp]
016230 86 31 FE FF 		      	cmp  	r3,r3,#-1
016234 BD 01 F6 FF 		      	beq  	r3,stdio_58
                	stdio_59:
016238 C6 3D F0 FF 		      	lw   	r3,-8[bp]
01623C 8C 31 FE 01 		      	and  	r3,r3,#255
016240 82 11 00 1A 		      	mov  	r1,r3
                	stdio_60:
016244 82 ED 01 1A 		      	mov  	sp,bp
016248 57 BF 11 00 		      	pop  	bp
01624C 57 CF 11 00 		      	pop  	xlr
016250 57 FF 11 00 		      	pop  	lr
016254 37 FF 01 00 		      	rtl  	#0
                	stdio_57:
016258 C6 FD 11 00 		      	lw   	lr,8[bp]
01625C E3 FD 21 00 		      	sw   	lr,16[bp]
016260 BA FC FF FF 		      	bra  	stdio_60
                	endpublic
                	
                	public code printf:
016264 E7 EF 01 00 		      	push 	lr
016268 67 EE 01 00 		      	push 	xlr
01626C E7 ED 01 00 		      	push 	bp
016270 7C 01 00 00 		      	ldi  	xlr,#stdio_62
016274 0A C0 59 CA 
016278 02 BF 01 1A 		      	mov  	bp,sp
01627C 15 EF 51 00 		      	subui	sp,sp,#40
016280 E7 E5 01 00 		      	push 	r11
016284 67 E6 01 00 		      	push 	r12
016288 C7 3D 30 00 		      	lea  	r3,24[bp]
01628C 82 B1 00 1A 		      	mov  	r11,r3
016290 82 C5 00 1A 		      	mov  	r12,r11
                	stdio_63:
016294 C6 35 00 00 		      	lw   	r3,[r11]
016298 C3 31 00 00 		      	lcu  	r3,[r3]
01629C BD 01 3A 01 		      	beq  	r3,stdio_64
0162A0 0A 30 40 00 		      	ldi  	r3,#32
0162A4 E1 3D BC FF 		      	sc   	r3,-34[bp]
0162A8 C6 35 00 00 		      	lw   	r3,[r11]
0162AC C3 31 00 00 		      	lcu  	r3,[r3]
0162B0 86 31 4A 00 		      	cmp  	r3,r3,#37
0162B4 BD 11 22 01 		      	bne  	r3,stdio_66
0162B8 E3 0D E0 FF 		      	sw   	r0,-16[bp]
0162BC FC 00 00 00 		      	ldi  	r3,#65535
0162C0 0A 30 FE FF 
0162C4 E3 3D D0 FF 		      	sw   	r3,-24[bp]
0162C8 E4 25 00 00 		      	inc  	[r11],#2
                	stdio_61:
0162CC C6 35 00 00 		      	lw   	r3,[r11]
0162D0 C3 31 00 00 		      	lcu  	r3,[r3]
0162D4 86 41 4A 00 		      	cmp  	r4,r3,#37
0162D8 3D 02 44 00 		      	beq  	r4,stdio_69
0162DC 86 41 C6 00 		      	cmp  	r4,r3,#99
0162E0 3D 02 46 00 		      	beq  	r4,stdio_70
0162E4 86 41 C8 00 		      	cmp  	r4,r3,#100
0162E8 3D 02 4A 00 		      	beq  	r4,stdio_71
0162EC 86 41 F0 00 		      	cmp  	r4,r3,#120
0162F0 3D 02 56 00 		      	beq  	r4,stdio_72
0162F4 86 41 B0 00 		      	cmp  	r4,r3,#88
0162F8 3D 02 62 00 		      	beq  	r4,stdio_73
0162FC 86 41 E6 00 		      	cmp  	r4,r3,#115
016300 3D 02 6E 00 		      	beq  	r4,stdio_74
016304 86 41 60 00 		      	cmp  	r4,r3,#48
016308 3D 02 78 00 		      	beq  	r4,stdio_75
01630C 86 41 72 00 		      	cmp  	r4,r3,#57
016310 3D 02 78 00 		      	beq  	r4,stdio_76
016314 86 41 70 00 		      	cmp  	r4,r3,#56
016318 3D 02 74 00 		      	beq  	r4,stdio_76
01631C 86 41 6E 00 		      	cmp  	r4,r3,#55
016320 3D 02 70 00 		      	beq  	r4,stdio_76
016324 86 41 6C 00 		      	cmp  	r4,r3,#54
016328 3D 02 6C 00 		      	beq  	r4,stdio_76
01632C 86 41 6A 00 		      	cmp  	r4,r3,#53
016330 3D 02 68 00 		      	beq  	r4,stdio_76
016334 86 41 68 00 		      	cmp  	r4,r3,#52
016338 3D 02 64 00 		      	beq  	r4,stdio_76
01633C 86 41 66 00 		      	cmp  	r4,r3,#51
016340 3D 02 60 00 		      	beq  	r4,stdio_76
016344 86 41 64 00 		      	cmp  	r4,r3,#50
016348 3D 02 5C 00 		      	beq  	r4,stdio_76
01634C 86 41 62 00 		      	cmp  	r4,r3,#49
016350 3D 02 58 00 		      	beq  	r4,stdio_76
016354 86 41 5C 00 		      	cmp  	r4,r3,#46
016358 3D 02 8C 00 		      	beq  	r4,stdio_77
01635C 3A 33 00 00 		      	bra  	stdio_68
                	stdio_69:
016360 65 E0 4B 00 		      	push 	#37
016364 B9 51 FF FF 		      	bsr  	putch
016368 BA 31 00 00 		      	bra  	stdio_68
                	stdio_70:
01636C 14 C6 10 00 		      	addui	r12,r12,#8
016370 66 E6 01 00 		      	push 	[r12]
016374 B9 4F FF FF 		      	bsr  	putch
016378 BA 2F 00 00 		      	bra  	stdio_68
                	stdio_71:
01637C 14 C6 10 00 		      	addui	r12,r12,#8
016380 C3 3D BC FF 		      	lcu  	r3,-34[bp]
016384 E7 E1 01 00 		      	push 	r3
016388 65 E0 01 00 		      	push 	#0
01638C E6 ED E1 FF 		      	push 	-16[bp]
016390 66 E6 01 00 		      	push 	[r12]
016394 39 51 FF FF 		      	bsr  	putnum
016398 BA 2B 00 00 		      	bra  	stdio_68
                	stdio_72:
01639C 14 C6 10 00 		      	addui	r12,r12,#8
0163A0 C3 3D BC FF 		      	lcu  	r3,-34[bp]
0163A4 E7 E1 01 00 		      	push 	r3
0163A8 65 E0 01 00 		      	push 	#0
0163AC E6 ED E1 FF 		      	push 	-16[bp]
0163B0 66 E6 01 00 		      	push 	[r12]
0163B4 39 80 FF FF 		      	bsr  	puthexnum
0163B8 BA 27 00 00 		      	bra  	stdio_68
                	stdio_73:
0163BC 14 C6 10 00 		      	addui	r12,r12,#8
0163C0 C3 3D BC FF 		      	lcu  	r3,-34[bp]
0163C4 E7 E1 01 00 		      	push 	r3
0163C8 65 E0 03 00 		      	push 	#1
0163CC E6 ED E1 FF 		      	push 	-16[bp]
0163D0 66 E6 01 00 		      	push 	[r12]
0163D4 39 7C FF FF 		      	bsr  	puthexnum
0163D8 BA 23 00 00 		      	bra  	stdio_68
                	stdio_74:
0163DC 14 C6 10 00 		      	addui	r12,r12,#8
0163E0 E6 ED D1 FF 		      	push 	-24[bp]
0163E4 66 E6 01 00 		      	push 	[r12]
0163E8 39 A9 FF FF 		      	bsr  	putstr
0163EC 82 30 00 1A 		      	mov  	r3,r1
0163F0 E3 3D C0 FF 		      	sw   	r3,-32[bp]
0163F4 3A 20 00 00 		      	bra  	stdio_68
                	stdio_75:
0163F8 0A 30 60 00 		      	ldi  	r3,#48
0163FC E1 3D BC FF 		      	sc   	r3,-34[bp]
                	stdio_76:
016400 C6 35 00 00 		      	lw   	r3,[r11]
016404 C3 31 00 00 		      	lcu  	r3,[r3]
016408 95 31 60 00 		      	subu 	r3,r3,#48
01640C E3 3D E0 FF 		      	sw   	r3,-16[bp]
016410 E4 25 00 00 		      	inc  	[r11],#2
                	stdio_78:
016414 C6 35 00 00 		      	lw   	r3,[r11]
016418 C3 31 00 00 		      	lcu  	r3,[r3]
01641C E7 E1 01 00 		      	push 	r3
016420 B9 33 00 00 		      	bsr  	isdigit
016424 14 EF 11 00 		      	addui	sp,sp,#8
016428 82 30 00 1A 		      	mov  	r3,r1
01642C BD 01 18 00 		      	beq  	r3,stdio_79
016430 C6 3D E0 FF 		      	lw   	r3,-16[bp]
016434 87 31 14 00 		      	muli 	r3,r3,#10
016438 E3 3D E0 FF 		      	sw   	r3,-16[bp]
01643C C6 35 00 00 		      	lw   	r3,[r11]
016440 C3 31 00 00 		      	lcu  	r3,[r3]
016444 95 31 60 00 		      	subu 	r3,r3,#48
016448 C6 4D E0 FF 		      	lw   	r4,-16[bp]
01644C 02 42 06 28 		      	addu 	r4,r4,r3
016450 E3 4D E0 FF 		      	sw   	r4,-16[bp]
016454 E4 25 00 00 		      	inc  	[r11],#2
016458 BA F7 FF FF 		      	bra  	stdio_78
                	stdio_79:
01645C C6 35 00 00 		      	lw   	r3,[r11]
016460 C3 31 00 00 		      	lcu  	r3,[r3]
016464 86 31 5C 00 		      	cmp  	r3,r3,#46
016468 BD 01 04 00 		      	beq  	r3,stdio_80
01646C 3A CC FF FF 		      	bra  	stdio_61
                	stdio_80:
                	stdio_77:
016470 E4 25 00 00 		      	inc  	[r11],#2
016474 C6 35 00 00 		      	lw   	r3,[r11]
016478 C3 31 00 00 		      	lcu  	r3,[r3]
01647C E7 E1 01 00 		      	push 	r3
016480 B9 27 00 00 		      	bsr  	isdigit
016484 14 EF 11 00 		      	addui	sp,sp,#8
016488 82 30 00 1A 		      	mov  	r3,r1
01648C BD 11 04 00 		      	bne  	r3,stdio_82
016490 BA C7 FF FF 		      	bra  	stdio_61
                	stdio_82:
016494 C6 35 00 00 		      	lw   	r3,[r11]
016498 C3 31 00 00 		      	lcu  	r3,[r3]
01649C 95 31 60 00 		      	subu 	r3,r3,#48
0164A0 E3 3D D0 FF 		      	sw   	r3,-24[bp]
0164A4 E4 25 00 00 		      	inc  	[r11],#2
                	stdio_84:
0164A8 C6 35 00 00 		      	lw   	r3,[r11]
0164AC C3 31 00 00 		      	lcu  	r3,[r3]
0164B0 E7 E1 01 00 		      	push 	r3
0164B4 39 21 00 00 		      	bsr  	isdigit
0164B8 14 EF 11 00 		      	addui	sp,sp,#8
0164BC 82 30 00 1A 		      	mov  	r3,r1
0164C0 BD 01 18 00 		      	beq  	r3,stdio_85
0164C4 C6 3D D0 FF 		      	lw   	r3,-24[bp]
0164C8 87 31 14 00 		      	muli 	r3,r3,#10
0164CC E3 3D D0 FF 		      	sw   	r3,-24[bp]
0164D0 C6 35 00 00 		      	lw   	r3,[r11]
0164D4 C3 31 00 00 		      	lcu  	r3,[r3]
0164D8 95 31 60 00 		      	subu 	r3,r3,#48
0164DC C6 4D D0 FF 		      	lw   	r4,-24[bp]
0164E0 02 42 06 28 		      	addu 	r4,r4,r3
0164E4 E3 4D D0 FF 		      	sw   	r4,-24[bp]
0164E8 E4 25 00 00 		      	inc  	[r11],#2
0164EC BA F7 FF FF 		      	bra  	stdio_84
                	stdio_85:
0164F0 BA BB FF FF 		      	bra  	stdio_61
                	stdio_68:
0164F4 BA 02 00 00 		      	bra  	stdio_67
                	stdio_66:
0164F8 C6 35 00 00 		      	lw   	r3,[r11]
0164FC C3 31 00 00 		      	lcu  	r3,[r3]
016500 E7 E1 01 00 		      	push 	r3
016504 B9 1D FF FF 		      	bsr  	putch
                	stdio_67:
                	stdio_65:
016508 E4 25 00 00 		      	inc  	[r11],#2
01650C 3A B1 FF FF 		      	bra  	stdio_63
                	stdio_64:
                	stdio_86:
016510 57 CF 10 00 		      	pop  	r12
016514 57 BF 10 00 		      	pop  	r11
016518 82 ED 01 1A 		      	mov  	sp,bp
01651C 57 BF 11 00 		      	pop  	bp
016520 57 CF 11 00 		      	pop  	xlr
016524 57 FF 11 00 		      	pop  	lr
016528 37 FF 01 00 		      	rtl  	#0
                	stdio_62:
01652C C6 FD 11 00 		      	lw   	lr,8[bp]
016530 E3 FD 21 00 		      	sw   	lr,16[bp]
016534 BA FB FF FF 		      	bra  	stdio_86
                	endpublic
                	
                		code
016538 00 00 00 00 		align	1
01653C 00 00 00 00 
                	
                	public code isxdigit:
016540 15 EF 21 00 		      	subui	sp,sp,#16
016544 E7 ED 01 00 		      	push 	bp
016548 02 BF 01 1A 		      	mov  	bp,sp
01654C C3 3D 30 00 		      	lcu  	r3,24[bp]
016550 96 31 82 00 		      	cmpu 	r3,r3,#65
016554 BD 41 10 00 		      	blt  	r3,ctype_1
016558 C3 3D 30 00 		      	lcu  	r3,24[bp]
01655C 96 31 8C 00 		      	cmpu 	r3,r3,#70
016560 BD 21 0A 00 		      	bgt  	r3,ctype_1
016564 0A 10 02 00 		      	ldi  	r1,#1
                	ctype_3:
016568 82 ED 01 1A 		      	mov  	sp,bp
01656C 57 BF 11 00 		      	pop  	bp
016570 37 FF 21 00 		      	rtl  	#16
                	ctype_1:
016574 C3 3D 30 00 		      	lcu  	r3,24[bp]
016578 96 31 C2 00 		      	cmpu 	r3,r3,#97
01657C BD 41 0C 00 		      	blt  	r3,ctype_4
016580 C3 3D 30 00 		      	lcu  	r3,24[bp]
016584 96 31 CC 00 		      	cmpu 	r3,r3,#102
016588 BD 21 06 00 		      	bgt  	r3,ctype_4
01658C 0A 10 02 00 		      	ldi  	r1,#1
016590 3A FB FF FF 		      	bra  	ctype_3
                	ctype_4:
016594 C3 3D 30 00 		      	lcu  	r3,24[bp]
016598 96 31 60 00 		      	cmpu 	r3,r3,#48
01659C BD 41 0C 00 		      	blt  	r3,ctype_6
0165A0 C3 3D 30 00 		      	lcu  	r3,24[bp]
0165A4 96 31 72 00 		      	cmpu 	r3,r3,#57
0165A8 BD 21 06 00 		      	bgt  	r3,ctype_6
0165AC 0A 10 02 00 		      	ldi  	r1,#1
0165B0 3A F7 FF FF 		      	bra  	ctype_3
                	ctype_6:
0165B4 0A 10 00 00 		      	ldi  	r1,#0
0165B8 3A F6 FF FF 		      	bra  	ctype_3
                	endpublic
                	
                	public code isdigit:
0165BC 15 EF 21 00 		      	subui	sp,sp,#16
0165C0 E7 ED 01 00 		      	push 	bp
0165C4 02 BF 01 1A 		      	mov  	bp,sp
0165C8 C3 3D 30 00 		      	lcu  	r3,24[bp]
0165CC 96 31 60 00 		      	cmpu 	r3,r3,#48
0165D0 BD 41 10 00 		      	blt  	r3,ctype_9
0165D4 C3 3D 30 00 		      	lcu  	r3,24[bp]
0165D8 96 31 72 00 		      	cmpu 	r3,r3,#57
0165DC BD 21 0A 00 		      	bgt  	r3,ctype_9
0165E0 0A 10 02 00 		      	ldi  	r1,#1
                	ctype_11:
0165E4 82 ED 01 1A 		      	mov  	sp,bp
0165E8 57 BF 11 00 		      	pop  	bp
0165EC 37 FF 21 00 		      	rtl  	#16
                	ctype_9:
0165F0 0A 10 00 00 		      	ldi  	r1,#0
0165F4 3A FE FF FF 		      	bra  	ctype_11
                	endpublic
                	
                	public code isalpha:
0165F8 15 EF 21 00 		      	subui	sp,sp,#16
0165FC E7 ED 01 00 		      	push 	bp
016600 02 BF 01 1A 		      	mov  	bp,sp
016604 C3 3D 30 00 		      	lcu  	r3,24[bp]
016608 96 31 C2 00 		      	cmpu 	r3,r3,#97
01660C BD 41 10 00 		      	blt  	r3,ctype_13
016610 C3 3D 30 00 		      	lcu  	r3,24[bp]
016614 96 31 F4 00 		      	cmpu 	r3,r3,#122
016618 BD 21 0A 00 		      	bgt  	r3,ctype_13
01661C 0A 10 02 00 		      	ldi  	r1,#1
                	ctype_15:
016620 82 ED 01 1A 		      	mov  	sp,bp
016624 57 BF 11 00 		      	pop  	bp
016628 37 FF 21 00 		      	rtl  	#16
                	ctype_13:
01662C C3 3D 30 00 		      	lcu  	r3,24[bp]
016630 96 31 82 00 		      	cmpu 	r3,r3,#65
016634 BD 41 0C 00 		      	blt  	r3,ctype_16
016638 C3 3D 30 00 		      	lcu  	r3,24[bp]
01663C 96 31 B4 00 		      	cmpu 	r3,r3,#90
016640 BD 21 06 00 		      	bgt  	r3,ctype_16
016644 0A 10 02 00 		      	ldi  	r1,#1
016648 3A FB FF FF 		      	bra  	ctype_15
                	ctype_16:
01664C 0A 10 00 00 		      	ldi  	r1,#0
016650 3A FA FF FF 		      	bra  	ctype_15
                	endpublic
                	
                	public code isalnum:
016654 15 EF 21 00 		      	subui	sp,sp,#16
016658 E7 ED 01 00 		      	push 	bp
01665C 02 BF 01 1A 		      	mov  	bp,sp
016660 C3 3D 30 00 		      	lcu  	r3,24[bp]
016664 96 31 60 00 		      	cmpu 	r3,r3,#48
016668 BD 41 10 00 		      	blt  	r3,ctype_19
01666C C3 3D 30 00 		      	lcu  	r3,24[bp]
016670 96 31 72 00 		      	cmpu 	r3,r3,#57
016674 BD 21 0A 00 		      	bgt  	r3,ctype_19
016678 0A 10 02 00 		      	ldi  	r1,#1
                	ctype_21:
01667C 82 ED 01 1A 		      	mov  	sp,bp
016680 57 BF 11 00 		      	pop  	bp
016684 37 FF 21 00 		      	rtl  	#16
                	ctype_19:
016688 C3 3D 30 00 		      	lcu  	r3,24[bp]
01668C 96 31 C2 00 		      	cmpu 	r3,r3,#97
016690 BD 41 0C 00 		      	blt  	r3,ctype_22
016694 C3 3D 30 00 		      	lcu  	r3,24[bp]
016698 96 31 F4 00 		      	cmpu 	r3,r3,#122
01669C BD 21 06 00 		      	bgt  	r3,ctype_22
0166A0 0A 10 02 00 		      	ldi  	r1,#1
0166A4 3A FB FF FF 		      	bra  	ctype_21
                	ctype_22:
0166A8 C3 3D 30 00 		      	lcu  	r3,24[bp]
0166AC 96 31 82 00 		      	cmpu 	r3,r3,#65
0166B0 BD 41 0C 00 		      	blt  	r3,ctype_24
0166B4 C3 3D 30 00 		      	lcu  	r3,24[bp]
0166B8 96 31 B4 00 		      	cmpu 	r3,r3,#90
0166BC BD 21 06 00 		      	bgt  	r3,ctype_24
0166C0 0A 10 02 00 		      	ldi  	r1,#1
0166C4 3A F7 FF FF 		      	bra  	ctype_21
                	ctype_24:
0166C8 0A 10 00 00 		      	ldi  	r1,#0
0166CC 3A F6 FF FF 		      	bra  	ctype_21
                	endpublic
                	
                	public code isspace:
0166D0 15 EF 21 00 		      	subui	sp,sp,#16
0166D4 E7 ED 01 00 		      	push 	bp
0166D8 02 BF 01 1A 		      	mov  	bp,sp
0166DC C3 3D 30 00 		      	lcu  	r3,24[bp]
0166E0 86 31 40 00 		      	cmp  	r3,r3,#32
0166E4 BD 11 0A 00 		      	bne  	r3,ctype_27
0166E8 0A 10 02 00 		      	ldi  	r1,#1
                	ctype_29:
0166EC 82 ED 01 1A 		      	mov  	sp,bp
0166F0 57 BF 11 00 		      	pop  	bp
0166F4 37 FF 21 00 		      	rtl  	#16
                	ctype_27:
0166F8 C3 3D 30 00 		      	lcu  	r3,24[bp]
0166FC 86 31 12 00 		      	cmp  	r3,r3,#9
016700 BD 11 06 00 		      	bne  	r3,ctype_30
016704 0A 10 02 00 		      	ldi  	r1,#1
016708 BA FC FF FF 		      	bra  	ctype_29
                	ctype_30:
01670C C3 3D 30 00 		      	lcu  	r3,24[bp]
016710 86 31 14 00 		      	cmp  	r3,r3,#10
016714 BD 11 06 00 		      	bne  	r3,ctype_32
016718 0A 10 02 00 		      	ldi  	r1,#1
01671C 3A FA FF FF 		      	bra  	ctype_29
                	ctype_32:
016720 C3 3D 30 00 		      	lcu  	r3,24[bp]
016724 86 31 1A 00 		      	cmp  	r3,r3,#13
016728 BD 11 06 00 		      	bne  	r3,ctype_34
01672C 0A 10 02 00 		      	ldi  	r1,#1
016730 BA F7 FF FF 		      	bra  	ctype_29
                	ctype_34:
016734 C3 3D 30 00 		      	lcu  	r3,24[bp]
016738 86 31 18 00 		      	cmp  	r3,r3,#12
01673C BD 11 06 00 		      	bne  	r3,ctype_36
016740 0A 10 02 00 		      	ldi  	r1,#1
016744 3A F5 FF FF 		      	bra  	ctype_29
                	ctype_36:
016748 0A 10 00 00 		      	ldi  	r1,#0
01674C 3A F4 FF FF 		      	bra  	ctype_29
                	endpublic
                	
                	public code tolower:
016750 15 EF 21 00 		      	subui	sp,sp,#16
016754 E7 ED 01 00 		      	push 	bp
016758 02 BF 01 1A 		      	mov  	bp,sp
01675C C3 3D 30 00 		      	lcu  	r3,24[bp]
016760 96 31 82 00 		      	cmpu 	r3,r3,#65
016764 BD 41 0E 00 		      	blt  	r3,ctype_39
016768 C3 3D 30 00 		      	lcu  	r3,24[bp]
01676C 96 31 B4 00 		      	cmpu 	r3,r3,#90
016770 BD 21 08 00 		      	bgt  	r3,ctype_39
016774 C3 3D 30 00 		      	lcu  	r3,24[bp]
016778 94 31 40 00 		      	addu 	r3,r3,#32
01677C E1 3D 30 00 		      	sc   	r3,24[bp]
                	ctype_39:
016780 C3 3D 30 00 		      	lcu  	r3,24[bp]
016784 82 11 00 1A 		      	mov  	r1,r3
                	ctype_41:
016788 82 ED 01 1A 		      	mov  	sp,bp
01678C 57 BF 11 00 		      	pop  	bp
016790 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code toupper:
016794 15 EF 21 00 		      	subui	sp,sp,#16
016798 E7 ED 01 00 		      	push 	bp
01679C 02 BF 01 1A 		      	mov  	bp,sp
0167A0 C3 3D 30 00 		      	lcu  	r3,24[bp]
0167A4 96 31 C2 00 		      	cmpu 	r3,r3,#97
0167A8 BD 41 0E 00 		      	blt  	r3,ctype_43
0167AC C3 3D 30 00 		      	lcu  	r3,24[bp]
0167B0 96 31 C2 00 		      	cmpu 	r3,r3,#97
0167B4 BD 21 08 00 		      	bgt  	r3,ctype_43
0167B8 C3 3D 30 00 		      	lcu  	r3,24[bp]
0167BC 94 31 C0 FF 		      	addu 	r3,r3,#-32
0167C0 E1 3D 30 00 		      	sc   	r3,24[bp]
                	ctype_43:
0167C4 C3 3D 30 00 		      	lcu  	r3,24[bp]
0167C8 82 11 00 1A 		      	mov  	r1,r3
                	ctype_45:
0167CC 82 ED 01 1A 		      	mov  	sp,bp
0167D0 57 BF 11 00 		      	pop  	bp
0167D4 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code isupper:
0167D8 15 EF 21 00 		      	subui	sp,sp,#16
0167DC E7 ED 01 00 		      	push 	bp
0167E0 02 BF 01 1A 		      	mov  	bp,sp
0167E4 C3 3D 30 00 		      	lcu  	r3,24[bp]
0167E8 96 31 82 00 		      	cmpu 	r3,r3,#65
0167EC BD 41 0C 00 		      	blt  	r3,ctype_47
0167F0 C3 3D 30 00 		      	lcu  	r3,24[bp]
0167F4 96 31 B4 00 		      	cmpu 	r3,r3,#90
0167F8 BD 21 06 00 		      	bgt  	r3,ctype_47
0167FC 0A 30 02 00 		      	ldi  	r3,#1
016800 3A 01 00 00 		      	bra  	ctype_48
                	ctype_47:
016804 0A 30 00 00 		      	ldi  	r3,#0
                	ctype_48:
016808 82 11 00 1A 		      	mov  	r1,r3
                	ctype_49:
01680C 82 ED 01 1A 		      	mov  	sp,bp
016810 57 BF 11 00 		      	pop  	bp
016814 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code islower:
016818 15 EF 21 00 		      	subui	sp,sp,#16
01681C E7 ED 01 00 		      	push 	bp
016820 02 BF 01 1A 		      	mov  	bp,sp
016824 C3 3D 30 00 		      	lcu  	r3,24[bp]
016828 96 31 C2 00 		      	cmpu 	r3,r3,#97
01682C BD 41 0C 00 		      	blt  	r3,ctype_51
016830 C3 3D 30 00 		      	lcu  	r3,24[bp]
016834 96 31 F4 00 		      	cmpu 	r3,r3,#122
016838 BD 21 06 00 		      	bgt  	r3,ctype_51
01683C 0A 30 02 00 		      	ldi  	r3,#1
016840 3A 01 00 00 		      	bra  	ctype_52
                	ctype_51:
016844 0A 30 00 00 		      	ldi  	r3,#0
                	ctype_52:
016848 82 11 00 1A 		      	mov  	r1,r3
                	ctype_53:
01684C 82 ED 01 1A 		      	mov  	sp,bp
016850 57 BF 11 00 		      	pop  	bp
016854 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code ispunct:
016858 15 EF 21 00 		      	subui	sp,sp,#16
01685C E7 ED 01 00 		      	push 	bp
016860 02 BF 01 1A 		      	mov  	bp,sp
016864 C3 3D 30 00 		      	lcu  	r3,24[bp]
016868 86 41 BC 00 		      	cmp  	r4,r3,#94
01686C 3D 02 60 00 		      	beq  	r4,ctype_56
016870 86 41 74 00 		      	cmp  	r4,r3,#58
016874 3D 02 5C 00 		      	beq  	r4,ctype_56
016878 86 41 5E 00 		      	cmp  	r4,r3,#47
01687C 3D 02 58 00 		      	beq  	r4,ctype_56
016880 86 41 5C 00 		      	cmp  	r4,r3,#46
016884 3D 02 54 00 		      	beq  	r4,ctype_56
016888 86 41 5A 00 		      	cmp  	r4,r3,#45
01688C 3D 02 50 00 		      	beq  	r4,ctype_56
016890 86 41 58 00 		      	cmp  	r4,r3,#44
016894 3D 02 4C 00 		      	beq  	r4,ctype_56
016898 86 41 56 00 		      	cmp  	r4,r3,#43
01689C 3D 02 48 00 		      	beq  	r4,ctype_56
0168A0 86 41 54 00 		      	cmp  	r4,r3,#42
0168A4 3D 02 44 00 		      	beq  	r4,ctype_56
0168A8 86 41 BA 00 		      	cmp  	r4,r3,#93
0168AC 3D 02 40 00 		      	beq  	r4,ctype_56
0168B0 86 41 B8 00 		      	cmp  	r4,r3,#92
0168B4 3D 02 3C 00 		      	beq  	r4,ctype_56
0168B8 86 41 B6 00 		      	cmp  	r4,r3,#91
0168BC 3D 02 38 00 		      	beq  	r4,ctype_56
0168C0 86 41 7E 00 		      	cmp  	r4,r3,#63
0168C4 3D 02 34 00 		      	beq  	r4,ctype_56
0168C8 86 41 7C 00 		      	cmp  	r4,r3,#62
0168CC 3D 02 30 00 		      	beq  	r4,ctype_56
0168D0 86 41 7A 00 		      	cmp  	r4,r3,#61
0168D4 3D 02 2C 00 		      	beq  	r4,ctype_56
0168D8 86 41 78 00 		      	cmp  	r4,r3,#60
0168DC 3D 02 28 00 		      	beq  	r4,ctype_56
0168E0 86 41 76 00 		      	cmp  	r4,r3,#59
0168E4 3D 02 24 00 		      	beq  	r4,ctype_56
0168E8 86 41 52 00 		      	cmp  	r4,r3,#41
0168EC 3D 02 20 00 		      	beq  	r4,ctype_56
0168F0 86 41 50 00 		      	cmp  	r4,r3,#40
0168F4 3D 02 1C 00 		      	beq  	r4,ctype_56
0168F8 86 41 4E 00 		      	cmp  	r4,r3,#39
0168FC 3D 02 18 00 		      	beq  	r4,ctype_56
016900 86 41 4C 00 		      	cmp  	r4,r3,#38
016904 3D 02 14 00 		      	beq  	r4,ctype_56
016908 86 41 4A 00 		      	cmp  	r4,r3,#37
01690C 3D 02 10 00 		      	beq  	r4,ctype_56
016910 86 41 46 00 		      	cmp  	r4,r3,#35
016914 3D 02 0C 00 		      	beq  	r4,ctype_56
016918 86 41 44 00 		      	cmp  	r4,r3,#34
01691C 3D 02 08 00 		      	beq  	r4,ctype_56
016920 86 41 42 00 		      	cmp  	r4,r3,#33
016924 3D 02 04 00 		      	beq  	r4,ctype_56
016928 BA 02 00 00 		      	bra  	ctype_57
                	ctype_56:
01692C 0A 10 02 00 		      	ldi  	r1,#1
                	ctype_58:
016930 82 ED 01 1A 		      	mov  	sp,bp
016934 57 BF 11 00 		      	pop  	bp
016938 37 FF 21 00 		      	rtl  	#16
                	ctype_57:
01693C 0A 10 00 00 		      	ldi  	r1,#0
016940 3A FE FF FF 		      	bra  	ctype_58
                	ctype_55:
016944 BA FD FF FF 		      	bra  	ctype_58
                	endpublic
                	
                	public code isgraph:
016948 E7 EF 01 00 		      	push 	lr
01694C 67 EE 01 00 		      	push 	xlr
016950 E7 ED 01 00 		      	push 	bp
016954 7C 01 00 00 		      	ldi  	xlr,#ctype_59
016958 0A C0 69 D3 
01695C 02 BF 01 1A 		      	mov  	bp,sp
016960 C3 3D 30 00 		      	lcu  	r3,24[bp]
016964 E7 E1 01 00 		      	push 	r3
016968 39 DE FF FF 		      	bsr  	ispunct
01696C 14 EF 11 00 		      	addui	sp,sp,#8
016970 82 30 00 1A 		      	mov  	r3,r1
016974 BD 11 0E 00 		      	bne  	r3,ctype_62
016978 C3 3D 30 00 		      	lcu  	r3,24[bp]
01697C E7 E1 01 00 		      	push 	r3
016980 B9 9A FF FF 		      	bsr  	isalnum
016984 14 EF 11 00 		      	addui	sp,sp,#8
016988 82 30 00 1A 		      	mov  	r3,r1
01698C BD 01 06 00 		      	beq  	r3,ctype_60
                	ctype_62:
016990 0A 30 02 00 		      	ldi  	r3,#1
016994 3A 01 00 00 		      	bra  	ctype_61
                	ctype_60:
016998 0A 30 00 00 		      	ldi  	r3,#0
                	ctype_61:
01699C 82 11 00 1A 		      	mov  	r1,r3
                	ctype_63:
0169A0 82 ED 01 1A 		      	mov  	sp,bp
0169A4 57 BF 11 00 		      	pop  	bp
0169A8 57 CF 11 00 		      	pop  	xlr
0169AC 57 FF 11 00 		      	pop  	lr
0169B0 37 FF 01 00 		      	rtl  	#0
                	ctype_59:
0169B4 C6 FD 11 00 		      	lw   	lr,8[bp]
0169B8 E3 FD 21 00 		      	sw   	lr,16[bp]
0169BC BA FC FF FF 		      	bra  	ctype_63
                	endpublic
                	
                	public code isprint:
0169C0 E7 EF 01 00 		      	push 	lr
0169C4 67 EE 01 00 		      	push 	xlr
0169C8 E7 ED 01 00 		      	push 	bp
0169CC 7C 01 00 00 		      	ldi  	xlr,#ctype_64
0169D0 0A C0 41 D4 
0169D4 02 BF 01 1A 		      	mov  	bp,sp
0169D8 C3 3D 30 00 		      	lcu  	r3,24[bp]
0169DC E7 E1 01 00 		      	push 	r3
0169E0 39 ED FF FF 		      	bsr  	isgraph
0169E4 14 EF 11 00 		      	addui	sp,sp,#8
0169E8 82 30 00 1A 		      	mov  	r3,r1
0169EC BD 11 08 00 		      	bne  	r3,ctype_67
0169F0 C3 3D 30 00 		      	lcu  	r3,24[bp]
0169F4 86 31 40 00 		      	cmp  	r3,r3,#32
0169F8 BD 11 06 00 		      	bne  	r3,ctype_65
                	ctype_67:
0169FC 0A 30 02 00 		      	ldi  	r3,#1
016A00 3A 01 00 00 		      	bra  	ctype_66
                	ctype_65:
016A04 0A 30 00 00 		      	ldi  	r3,#0
                	ctype_66:
016A08 82 11 00 1A 		      	mov  	r1,r3
                	ctype_68:
016A0C 82 ED 01 1A 		      	mov  	sp,bp
016A10 57 BF 11 00 		      	pop  	bp
016A14 57 CF 11 00 		      	pop  	xlr
016A18 57 FF 11 00 		      	pop  	lr
016A1C 37 FF 01 00 		      	rtl  	#0
                	ctype_64:
016A20 C6 FD 11 00 		      	lw   	lr,8[bp]
016A24 E3 FD 21 00 		      	sw   	lr,16[bp]
016A28 BA FC FF FF 		      	bra  	ctype_68
                	endpublic
                	
                	public code iscntrl:
016A2C 15 EF 21 00 		      	subui	sp,sp,#16
016A30 E7 ED 01 00 		      	push 	bp
016A34 02 BF 01 1A 		      	mov  	bp,sp
016A38 C3 3D 30 00 		      	lcu  	r3,24[bp]
016A3C 86 41 0E 00 		      	cmp  	r4,r3,#7
016A40 3D 02 18 00 		      	beq  	r4,ctype_71
016A44 86 41 10 00 		      	cmp  	r4,r3,#8
016A48 3D 02 14 00 		      	beq  	r4,ctype_71
016A4C 86 41 14 00 		      	cmp  	r4,r3,#10
016A50 3D 02 10 00 		      	beq  	r4,ctype_71
016A54 86 41 1A 00 		      	cmp  	r4,r3,#13
016A58 3D 02 0C 00 		      	beq  	r4,ctype_71
016A5C 86 41 18 00 		      	cmp  	r4,r3,#12
016A60 3D 02 08 00 		      	beq  	r4,ctype_71
016A64 86 41 12 00 		      	cmp  	r4,r3,#9
016A68 3D 02 04 00 		      	beq  	r4,ctype_71
016A6C BA 02 00 00 		      	bra  	ctype_72
                	ctype_71:
016A70 0A 10 02 00 		      	ldi  	r1,#1
                	ctype_73:
016A74 82 ED 01 1A 		      	mov  	sp,bp
016A78 57 BF 11 00 		      	pop  	bp
016A7C 37 FF 21 00 		      	rtl  	#16
                	ctype_72:
016A80 0A 10 00 00 		      	ldi  	r1,#0
016A84 3A FE FF FF 		      	bra  	ctype_73
                	ctype_70:
016A88 BA FD FF FF 		      	bra  	ctype_73
                	endpublic
                	
                		code
016A8C 00 00 00 00 		align	1
                	
                	public code SetNormAttr:
016A90 15 EF 21 00 		      	subui	sp,sp,#16
016A94 E7 ED 01 00 		      	push 	bp
016A98 02 BF 01 1A 		      	mov  	bp,sp
016A9C 67 E3 01 00 		      	     	         push  r6
016AA0 C6 1D 30 00 	         lw    r1,24[bp]
016AA4 0A 60 44 00 	         ldi   r6,#$22
016AA8 38 0F 34 03 	         sys   #410
016AAC 57 6F 10 00 	         pop   r6
                	     
                	disassem_1:
016AB0 82 ED 01 1A 		      	mov  	sp,bp
016AB4 57 BF 11 00 		      	pop  	bp
016AB8 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code GetNormAttr:
016ABC 15 EF 21 00 		      	subui	sp,sp,#16
016AC0 E7 ED 01 00 		      	push 	bp
016AC4 02 BF 01 1A 		      	mov  	bp,sp
016AC8 67 E3 01 00 		      	     	         push  r6
016ACC 0A 60 46 00 	         ldi   r6,#$23
016AD0 38 0F 34 03 	         sys   #410
016AD4 57 6F 10 00 	         pop   r6
                	     
                	disassem_3:
016AD8 82 ED 01 1A 		      	mov  	sp,bp
016ADC 57 BF 11 00 		      	pop  	bp
016AE0 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code reverse_video:
016AE4 E7 EF 01 00 		      	push 	lr
016AE8 67 EE 01 00 		      	push 	xlr
016AEC E7 ED 01 00 		      	push 	bp
016AF0 7C 01 00 00 		      	ldi  	xlr,#disassem_4
016AF4 0A C0 B9 D6 
016AF8 02 BF 01 1A 		      	mov  	bp,sp
016AFC 15 EF 11 00 		      	subui	sp,sp,#8
016B00 B9 F7 FF FF 		      	bsr  	GetNormAttr
016B04 82 30 00 1A 		      	mov  	r3,r1
016B08 8C 31 FE FF 		      	andi 	r3,r3,#-1
016B0C E2 3D F8 FF 		      	sh   	r3,-4[bp]
016B10 C5 3D F8 FF 		      	lhu  	r3,-4[bp]
016B14 8C 31 FE FF 		      	andi 	r3,r3,#-1
016B18 82 31 14 78 		      	asri 	r3,r3,#10
016B1C 82 31 26 70 		      	asli 	r3,r3,#19
016B20 C5 4D F8 FF 		      	lhu  	r4,-4[bp]
016B24 0C 42 FE FF 		      	andi 	r4,r4,#-1
016B28 02 42 26 78 		      	asri 	r4,r4,#19
016B2C 02 42 14 70 		      	asli 	r4,r4,#10
016B30 82 31 08 1A 		      	or   	r3,r3,r4
016B34 E2 3D F8 FF 		      	sh   	r3,-4[bp]
016B38 C5 3D F8 FF 		      	lhu  	r3,-4[bp]
016B3C E7 E1 01 00 		      	push 	r3
016B40 39 EA FF FF 		      	bsr  	SetNormAttr
016B44 14 EF 11 00 		      	addui	sp,sp,#8
                	disassem_5:
016B48 82 ED 01 1A 		      	mov  	sp,bp
016B4C 57 BF 11 00 		      	pop  	bp
016B50 57 CF 11 00 		      	pop  	xlr
016B54 57 FF 11 00 		      	pop  	lr
016B58 37 FF 01 00 		      	rtl  	#0
                	disassem_4:
016B5C C6 FD 11 00 		      	lw   	lr,8[bp]
016B60 E3 FD 21 00 		      	sw   	lr,16[bp]
016B64 BA FC FF FF 		      	bra  	disassem_5
                	endpublic
                	
                	public code DumpInsnBytes:
016B68 E7 EF 01 00 		      	push 	lr
016B6C 67 EE 01 00 		      	push 	xlr
016B70 E7 ED 01 00 		      	push 	bp
016B74 7C 01 00 00 		      	ldi  	xlr,#disassem_7
016B78 0A C0 C9 D7 
016B7C 02 BF 01 1A 		      	mov  	bp,sp
016B80 C6 3D 40 00 		      	lw   	r3,32[bp]
016B84 82 31 30 78 		      	asri 	r3,r3,#24
016B88 8C 31 FE 01 		      	and  	r3,r3,#255
016B8C E7 E1 01 00 		      	push 	r3
016B90 C6 3D 40 00 		      	lw   	r3,32[bp]
016B94 82 31 20 78 		      	asri 	r3,r3,#16
016B98 8C 31 FE 01 		      	and  	r3,r3,#255
016B9C E7 E1 01 00 		      	push 	r3
016BA0 C6 3D 40 00 		      	lw   	r3,32[bp]
016BA4 82 31 10 78 		      	asri 	r3,r3,#8
016BA8 8C 31 FE 01 		      	and  	r3,r3,#255
016BAC E7 E1 01 00 		      	push 	r3
016BB0 C6 3D 40 00 		      	lw   	r3,32[bp]
016BB4 8C 31 FE 01 		      	and  	r3,r3,#255
016BB8 E7 E1 01 00 		      	push 	r3
016BBC E6 ED 31 00 		      	push 	24[bp]
016BC0 FC 01 00 00 		      	push 	#disassem_6
016BC4 65 E0 35 6D 
016BC8 B9 D3 FE FF 		      	bsr  	printf
016BCC 14 EF 61 00 		      	addui	sp,sp,#48
                	disassem_8:
016BD0 82 ED 01 1A 		      	mov  	sp,bp
016BD4 57 BF 11 00 		      	pop  	bp
016BD8 57 CF 11 00 		      	pop  	xlr
016BDC 57 FF 11 00 		      	pop  	lr
016BE0 37 FF 01 00 		      	rtl  	#0
                	disassem_7:
016BE4 C6 FD 11 00 		      	lw   	lr,8[bp]
016BE8 E3 FD 21 00 		      	sw   	lr,16[bp]
016BEC BA FC FF FF 		      	bra  	disassem_8
                	endpublic
                	
                	DispRst:
016BF0 E7 EF 01 00 		      	push 	lr
016BF4 67 EE 01 00 		      	push 	xlr
016BF8 E7 ED 01 00 		      	push 	bp
016BFC 7C 01 00 00 		      	ldi  	xlr,#disassem_11
016C00 0A C0 79 D8 
016C04 02 BF 01 1A 		      	mov  	bp,sp
016C08 C6 3D 30 00 		      	lw   	r3,24[bp]
016C0C 82 31 18 78 		      	asri 	r3,r3,#12
016C10 8C 31 3E 00 		      	and  	r3,r3,#31
016C14 E7 E1 01 00 		      	push 	r3
016C18 FC 01 00 00 		      	push 	#disassem_10
016C1C 65 E0 25 6D 
016C20 B9 C8 FE FF 		      	bsr  	printf
016C24 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_12:
016C28 82 ED 01 1A 		      	mov  	sp,bp
016C2C 57 BF 11 00 		      	pop  	bp
016C30 57 CF 11 00 		      	pop  	xlr
016C34 57 FF 11 00 		      	pop  	lr
016C38 37 FF 01 00 		      	rtl  	#0
                	disassem_11:
016C3C C6 FD 11 00 		      	lw   	lr,8[bp]
016C40 E3 FD 21 00 		      	sw   	lr,16[bp]
016C44 BA FC FF FF 		      	bra  	disassem_12
                	DispRstc:
016C48 E7 EF 01 00 		      	push 	lr
016C4C 67 EE 01 00 		      	push 	xlr
016C50 E7 ED 01 00 		      	push 	bp
016C54 7C 01 00 00 		      	ldi  	xlr,#disassem_15
016C58 0A C0 29 D9 
016C5C 02 BF 01 1A 		      	mov  	bp,sp
016C60 C6 3D 30 00 		      	lw   	r3,24[bp]
016C64 82 31 18 78 		      	asri 	r3,r3,#12
016C68 8C 31 3E 00 		      	and  	r3,r3,#31
016C6C E7 E1 01 00 		      	push 	r3
016C70 FC 01 00 00 		      	push 	#disassem_14
016C74 65 E0 11 6D 
016C78 B9 BD FE FF 		      	bsr  	printf
016C7C 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_16:
016C80 82 ED 01 1A 		      	mov  	sp,bp
016C84 57 BF 11 00 		      	pop  	bp
016C88 57 CF 11 00 		      	pop  	xlr
016C8C 57 FF 11 00 		      	pop  	lr
016C90 37 FF 01 00 		      	rtl  	#0
                	disassem_15:
016C94 C6 FD 11 00 		      	lw   	lr,8[bp]
016C98 E3 FD 21 00 		      	sw   	lr,16[bp]
016C9C BA FC FF FF 		      	bra  	disassem_16
                	DispRac:
016CA0 E7 EF 01 00 		      	push 	lr
016CA4 67 EE 01 00 		      	push 	xlr
016CA8 E7 ED 01 00 		      	push 	bp
016CAC 7C 01 00 00 		      	ldi  	xlr,#disassem_19
016CB0 0A C0 D9 D9 
016CB4 02 BF 01 1A 		      	mov  	bp,sp
016CB8 C6 3D 30 00 		      	lw   	r3,24[bp]
016CBC 82 31 0E 78 		      	asri 	r3,r3,#7
016CC0 8C 31 3E 00 		      	and  	r3,r3,#31
016CC4 E7 E1 01 00 		      	push 	r3
016CC8 FC 01 00 00 		      	push 	#disassem_18
016CCC 65 E0 FD 6C 
016CD0 B9 B2 FE FF 		      	bsr  	printf
016CD4 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_20:
016CD8 82 ED 01 1A 		      	mov  	sp,bp
016CDC 57 BF 11 00 		      	pop  	bp
016CE0 57 CF 11 00 		      	pop  	xlr
016CE4 57 FF 11 00 		      	pop  	lr
016CE8 37 FF 01 00 		      	rtl  	#0
                	disassem_19:
016CEC C6 FD 11 00 		      	lw   	lr,8[bp]
016CF0 E3 FD 21 00 		      	sw   	lr,16[bp]
016CF4 BA FC FF FF 		      	bra  	disassem_20
                	DispRa:
016CF8 E7 EF 01 00 		      	push 	lr
016CFC 67 EE 01 00 		      	push 	xlr
016D00 E7 ED 01 00 		      	push 	bp
016D04 7C 01 00 00 		      	ldi  	xlr,#disassem_23
016D08 0A C0 89 DA 
016D0C 02 BF 01 1A 		      	mov  	bp,sp
016D10 C6 3D 30 00 		      	lw   	r3,24[bp]
016D14 82 31 0E 78 		      	asri 	r3,r3,#7
016D18 8C 31 3E 00 		      	and  	r3,r3,#31
016D1C E7 E1 01 00 		      	push 	r3
016D20 FC 01 00 00 		      	push 	#disassem_22
016D24 65 E0 ED 6C 
016D28 B9 A7 FE FF 		      	bsr  	printf
016D2C 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_24:
016D30 82 ED 01 1A 		      	mov  	sp,bp
016D34 57 BF 11 00 		      	pop  	bp
016D38 57 CF 11 00 		      	pop  	xlr
016D3C 57 FF 11 00 		      	pop  	lr
016D40 37 FF 01 00 		      	rtl  	#0
                	disassem_23:
016D44 C6 FD 11 00 		      	lw   	lr,8[bp]
016D48 E3 FD 21 00 		      	sw   	lr,16[bp]
016D4C BA FC FF FF 		      	bra  	disassem_24
                	DispRb:
016D50 E7 EF 01 00 		      	push 	lr
016D54 67 EE 01 00 		      	push 	xlr
016D58 E7 ED 01 00 		      	push 	bp
016D5C 7C 01 00 00 		      	ldi  	xlr,#disassem_27
016D60 0A C0 39 DB 
016D64 02 BF 01 1A 		      	mov  	bp,sp
016D68 C6 3D 30 00 		      	lw   	r3,24[bp]
016D6C 82 31 22 78 		      	asri 	r3,r3,#17
016D70 8C 31 3E 00 		      	and  	r3,r3,#31
016D74 E7 E1 01 00 		      	push 	r3
016D78 FC 01 00 00 		      	push 	#disassem_26
016D7C 65 E0 DD 6C 
016D80 B9 9C FE FF 		      	bsr  	printf
016D84 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_28:
016D88 82 ED 01 1A 		      	mov  	sp,bp
016D8C 57 BF 11 00 		      	pop  	bp
016D90 57 CF 11 00 		      	pop  	xlr
016D94 57 FF 11 00 		      	pop  	lr
016D98 37 FF 01 00 		      	rtl  	#0
                	disassem_27:
016D9C C6 FD 11 00 		      	lw   	lr,8[bp]
016DA0 E3 FD 21 00 		      	sw   	lr,16[bp]
016DA4 BA FC FF FF 		      	bra  	disassem_28
                	DispSpr:
016DA8 E7 EF 01 00 		      	push 	lr
016DAC 67 EE 01 00 		      	push 	xlr
016DB0 E7 ED 01 00 		      	push 	bp
016DB4 7C 01 00 00 		      	ldi  	xlr,#disassem_45
016DB8 0A C0 19 DF 
016DBC 02 BF 01 1A 		      	mov  	bp,sp
016DC0 15 EF 11 00 		      	subui	sp,sp,#8
016DC4 C6 3D 30 00 		      	lw   	r3,24[bp]
016DC8 82 31 22 78 		      	asri 	r3,r3,#17
016DCC 8C 31 FE 01 		      	and  	r3,r3,#255
016DD0 E3 3D F0 FF 		      	sw   	r3,-8[bp]
016DD4 C6 3D F0 FF 		      	lw   	r3,-8[bp]
016DD8 86 41 00 00 		      	cmp  	r4,r3,#0
016DDC 3D 02 38 00 		      	beq  	r4,disassem_47
016DE0 86 41 06 00 		      	cmp  	r4,r3,#3
016DE4 3D 02 3E 00 		      	beq  	r4,disassem_48
016DE8 86 41 08 00 		      	cmp  	r4,r3,#4
016DEC 3D 02 44 00 		      	beq  	r4,disassem_49
016DF0 86 41 0C 00 		      	cmp  	r4,r3,#6
016DF4 3D 02 4A 00 		      	beq  	r4,disassem_50
016DF8 86 41 0E 00 		      	cmp  	r4,r3,#7
016DFC 3D 02 50 00 		      	beq  	r4,disassem_51
016E00 86 41 10 00 		      	cmp  	r4,r3,#8
016E04 3D 02 56 00 		      	beq  	r4,disassem_52
016E08 86 41 12 00 		      	cmp  	r4,r3,#9
016E0C 3D 02 5C 00 		      	beq  	r4,disassem_53
016E10 86 41 14 00 		      	cmp  	r4,r3,#10
016E14 3D 02 62 00 		      	beq  	r4,disassem_54
016E18 86 41 64 00 		      	cmp  	r4,r3,#50
016E1C 3D 02 68 00 		      	beq  	r4,disassem_55
016E20 86 41 66 00 		      	cmp  	r4,r3,#51
016E24 3D 02 6E 00 		      	beq  	r4,disassem_56
016E28 86 41 68 00 		      	cmp  	r4,r3,#52
016E2C 3D 02 74 00 		      	beq  	r4,disassem_57
016E30 86 41 6A 00 		      	cmp  	r4,r3,#53
016E34 3D 02 7A 00 		      	beq  	r4,disassem_58
016E38 86 41 6C 00 		      	cmp  	r4,r3,#54
016E3C 3D 02 80 00 		      	beq  	r4,disassem_59
016E40 86 41 6E 00 		      	cmp  	r4,r3,#55
016E44 3D 02 86 00 		      	beq  	r4,disassem_60
016E48 BA 23 00 00 		      	bra  	disassem_61
                	disassem_47:
016E4C FC 01 00 00 		      	push 	#disassem_30
016E50 65 E0 CD 6C 
016E54 39 82 FE FF 		      	bsr  	printf
016E58 14 EF 11 00 		      	addui	sp,sp,#8
016E5C BA 23 00 00 		      	bra  	disassem_46
                	disassem_48:
016E60 FC 01 00 00 		      	push 	#disassem_31
016E64 65 E0 BD 6C 
016E68 B9 7F FE FF 		      	bsr  	printf
016E6C 14 EF 11 00 		      	addui	sp,sp,#8
016E70 3A 21 00 00 		      	bra  	disassem_46
                	disassem_49:
016E74 FC 01 00 00 		      	push 	#disassem_32
016E78 65 E0 A9 6C 
016E7C 39 7D FE FF 		      	bsr  	printf
016E80 14 EF 11 00 		      	addui	sp,sp,#8
016E84 BA 1E 00 00 		      	bra  	disassem_46
                	disassem_50:
016E88 FC 01 00 00 		      	push 	#disassem_33
016E8C 65 E0 99 6C 
016E90 B9 7A FE FF 		      	bsr  	printf
016E94 14 EF 11 00 		      	addui	sp,sp,#8
016E98 3A 1C 00 00 		      	bra  	disassem_46
                	disassem_51:
016E9C FC 01 00 00 		      	push 	#disassem_34
016EA0 65 E0 89 6C 
016EA4 39 78 FE FF 		      	bsr  	printf
016EA8 14 EF 11 00 		      	addui	sp,sp,#8
016EAC BA 19 00 00 		      	bra  	disassem_46
                	disassem_52:
016EB0 FC 01 00 00 		      	push 	#disassem_35
016EB4 65 E0 79 6C 
016EB8 B9 75 FE FF 		      	bsr  	printf
016EBC 14 EF 11 00 		      	addui	sp,sp,#8
016EC0 3A 17 00 00 		      	bra  	disassem_46
                	disassem_53:
016EC4 FC 01 00 00 		      	push 	#disassem_36
016EC8 65 E0 69 6C 
016ECC 39 73 FE FF 		      	bsr  	printf
016ED0 14 EF 11 00 		      	addui	sp,sp,#8
016ED4 BA 14 00 00 		      	bra  	disassem_46
                	disassem_54:
016ED8 FC 01 00 00 		      	push 	#disassem_37
016EDC 65 E0 59 6C 
016EE0 B9 70 FE FF 		      	bsr  	printf
016EE4 14 EF 11 00 		      	addui	sp,sp,#8
016EE8 3A 12 00 00 		      	bra  	disassem_46
                	disassem_55:
016EEC FC 01 00 00 		      	push 	#disassem_38
016EF0 65 E0 41 6C 
016EF4 39 6E FE FF 		      	bsr  	printf
016EF8 14 EF 11 00 		      	addui	sp,sp,#8
016EFC BA 0F 00 00 		      	bra  	disassem_46
                	disassem_56:
016F00 FC 01 00 00 		      	push 	#disassem_39
016F04 65 E0 29 6C 
016F08 B9 6B FE FF 		      	bsr  	printf
016F0C 14 EF 11 00 		      	addui	sp,sp,#8
016F10 3A 0D 00 00 		      	bra  	disassem_46
                	disassem_57:
016F14 FC 01 00 00 		      	push 	#disassem_40
016F18 65 E0 11 6C 
016F1C 39 69 FE FF 		      	bsr  	printf
016F20 14 EF 11 00 		      	addui	sp,sp,#8
016F24 BA 0A 00 00 		      	bra  	disassem_46
                	disassem_58:
016F28 FC 01 00 00 		      	push 	#disassem_41
016F2C 65 E0 F9 6B 
016F30 B9 66 FE FF 		      	bsr  	printf
016F34 14 EF 11 00 		      	addui	sp,sp,#8
016F38 3A 08 00 00 		      	bra  	disassem_46
                	disassem_59:
016F3C FC 01 00 00 		      	push 	#disassem_42
016F40 65 E0 DD 6B 
016F44 39 64 FE FF 		      	bsr  	printf
016F48 14 EF 11 00 		      	addui	sp,sp,#8
016F4C BA 05 00 00 		      	bra  	disassem_46
                	disassem_60:
016F50 FC 01 00 00 		      	push 	#disassem_43
016F54 65 E0 C1 6B 
016F58 B9 61 FE FF 		      	bsr  	printf
016F5C 14 EF 11 00 		      	addui	sp,sp,#8
016F60 3A 03 00 00 		      	bra  	disassem_46
                	disassem_61:
016F64 E6 ED F1 FF 		      	push 	-8[bp]
016F68 FC 01 00 00 		      	push 	#disassem_44
016F6C 65 E0 A9 6B 
016F70 B9 5E FE FF 		      	bsr  	printf
016F74 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_46:
                	disassem_62:
016F78 82 ED 01 1A 		      	mov  	sp,bp
016F7C 57 BF 11 00 		      	pop  	bp
016F80 57 CF 11 00 		      	pop  	xlr
016F84 57 FF 11 00 		      	pop  	lr
016F88 37 FF 01 00 		      	rtl  	#0
                	disassem_45:
016F8C C6 FD 11 00 		      	lw   	lr,8[bp]
016F90 E3 FD 21 00 		      	sw   	lr,16[bp]
016F94 BA FC FF FF 		      	bra  	disassem_62
                	DispMemAddress:
016F98 E7 EF 01 00 		      	push 	lr
016F9C 67 EE 01 00 		      	push 	xlr
016FA0 E7 ED 01 00 		      	push 	bp
016FA4 7C 01 00 00 		      	ldi  	xlr,#disassem_68
016FA8 0A C0 D9 E0 
016FAC 02 BF 01 1A 		      	mov  	bp,sp
016FB0 15 EF 11 00 		      	subui	sp,sp,#8
016FB4 C6 3D 50 00 		      	lw   	r3,40[bp]
016FB8 E2 3D F8 FF 		      	sh   	r3,-4[bp]
016FBC C6 3D 30 00 		      	lw   	r3,24[bp]
016FC0 BD 01 18 00 		      	beq  	r3,disassem_69
016FC4 C6 3D 40 00 		      	lw   	r3,32[bp]
016FC8 82 31 1E 70 		      	asli 	r3,r3,#15
016FCC C6 4D 50 00 		      	lw   	r4,40[bp]
016FD0 02 42 22 78 		      	asri 	r4,r4,#17
016FD4 82 31 08 1A 		      	or   	r3,r3,r4
016FD8 E7 E1 01 00 		      	push 	r3
016FDC FC 01 00 00 		      	push 	#disassem_64
016FE0 65 E0 99 6B 
016FE4 39 50 FE FF 		      	bsr  	printf
016FE8 14 EF 21 00 		      	addui	sp,sp,#16
016FEC 3A 05 00 00 		      	bra  	disassem_70
                	disassem_69:
016FF0 C4 3D F8 FF 		      	lh   	r3,-4[bp]
016FF4 82 31 00 24 		      	sxh  	r3,r3
016FF8 82 31 00 24 		      	sxh  	r3,r3
016FFC 82 31 22 78 		      	asri 	r3,r3,#17
017000 E7 E1 01 00 		      	push 	r3
017004 FC 01 00 00 		      	push 	#disassem_65
017008 65 E0 89 6B 
01700C 39 4B FE FF 		      	bsr  	printf
017010 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_70:
017014 C6 3D 50 00 		      	lw   	r3,40[bp]
017018 82 31 0E 78 		      	asri 	r3,r3,#7
01701C 8C 31 3E 00 		      	and  	r3,r3,#31
017020 BD 01 14 00 		      	beq  	r3,disassem_71
017024 C6 3D 50 00 		      	lw   	r3,40[bp]
017028 82 31 0E 78 		      	asri 	r3,r3,#7
01702C 8C 31 3E 00 		      	and  	r3,r3,#31
017030 E7 E1 01 00 		      	push 	r3
017034 FC 01 00 00 		      	push 	#disassem_66
017038 65 E0 69 6B 
01703C 39 45 FE FF 		      	bsr  	printf
017040 14 EF 21 00 		      	addui	sp,sp,#16
017044 BA 02 00 00 		      	bra  	disassem_72
                	disassem_71:
017048 FC 01 00 00 		      	push 	#disassem_67
01704C 65 E0 5D 6B 
017050 B9 42 FE FF 		      	bsr  	printf
017054 14 EF 11 00 		      	addui	sp,sp,#8
                	disassem_72:
                	disassem_73:
017058 82 ED 01 1A 		      	mov  	sp,bp
01705C 57 BF 11 00 		      	pop  	bp
017060 57 CF 11 00 		      	pop  	xlr
017064 57 FF 11 00 		      	pop  	lr
017068 37 FF 01 00 		      	rtl  	#0
                	disassem_68:
01706C C6 FD 11 00 		      	lw   	lr,8[bp]
017070 E3 FD 21 00 		      	sw   	lr,16[bp]
017074 BA FC FF FF 		      	bra  	disassem_73
                	DispInc:
017078 E7 EF 01 00 		      	push 	lr
01707C 67 EE 01 00 		      	push 	xlr
017080 E7 ED 01 00 		      	push 	bp
017084 7C 01 00 00 		      	ldi  	xlr,#disassem_82
017088 0A C0 71 E3 
01708C 02 BF 01 1A 		      	mov  	bp,sp
017090 15 EF 31 00 		      	subui	sp,sp,#24
017094 C6 3D 50 00 		      	lw   	r3,40[bp]
017098 E2 3D F8 FF 		      	sh   	r3,-4[bp]
01709C C6 3D 50 00 		      	lw   	r3,40[bp]
0170A0 82 31 0E 78 		      	asri 	r3,r3,#7
0170A4 8C 31 3E 00 		      	and  	r3,r3,#31
0170A8 E3 3D E0 FF 		      	sw   	r3,-16[bp]
0170AC C6 3D 50 00 		      	lw   	r3,40[bp]
0170B0 82 31 18 78 		      	asri 	r3,r3,#12
0170B4 8C 31 3E 00 		      	and  	r3,r3,#31
0170B8 E3 3D D0 FF 		      	sw   	r3,-24[bp]
0170BC C6 3D D0 FF 		      	lw   	r3,-24[bp]
0170C0 8C 31 20 00 		      	and  	r3,r3,#16
0170C4 86 31 20 00 		      	cmp  	r3,r3,#16
0170C8 BD 11 18 00 		      	bne  	r3,disassem_83
0170CC C6 3D D0 FF 		      	lw   	r3,-24[bp]
0170D0 8D 31 E0 FF 		      	ori  	r3,r3,#-16
0170D4 E3 3D D0 FF 		      	sw   	r3,-24[bp]
0170D8 C6 3D D0 FF 		      	lw   	r3,-24[bp]
0170DC 02 30 06 2A 		      	neg  	r3,r3
0170E0 E3 3D D0 FF 		      	sw   	r3,-24[bp]
0170E4 FC 01 00 00 		      	push 	#disassem_75
0170E8 65 E0 41 6B 
0170EC 39 2F FE FF 		      	bsr  	printf
0170F0 14 EF 11 00 		      	addui	sp,sp,#8
0170F4 BA 02 00 00 		      	bra  	disassem_84
                	disassem_83:
0170F8 FC 01 00 00 		      	push 	#disassem_76
0170FC 65 E0 25 6B 
017100 B9 2C FE FF 		      	bsr  	printf
017104 14 EF 11 00 		      	addui	sp,sp,#8
                	disassem_84:
017108 C6 3D 30 00 		      	lw   	r3,24[bp]
01710C BD 01 18 00 		      	beq  	r3,disassem_85
017110 C6 3D 40 00 		      	lw   	r3,32[bp]
017114 82 31 1E 70 		      	asli 	r3,r3,#15
017118 C6 4D 50 00 		      	lw   	r4,40[bp]
01711C 02 42 22 78 		      	asri 	r4,r4,#17
017120 82 31 08 1A 		      	or   	r3,r3,r4
017124 E7 E1 01 00 		      	push 	r3
017128 FC 01 00 00 		      	push 	#disassem_77
01712C 65 E0 15 6B 
017130 B9 26 FE FF 		      	bsr  	printf
017134 14 EF 21 00 		      	addui	sp,sp,#16
017138 3A 05 00 00 		      	bra  	disassem_86
                	disassem_85:
01713C C4 3D F8 FF 		      	lh   	r3,-4[bp]
017140 82 31 00 24 		      	sxh  	r3,r3
017144 82 31 00 24 		      	sxh  	r3,r3
017148 82 31 22 78 		      	asri 	r3,r3,#17
01714C E7 E1 01 00 		      	push 	r3
017150 FC 01 00 00 		      	push 	#disassem_78
017154 65 E0 05 6B 
017158 B9 21 FE FF 		      	bsr  	printf
01715C 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_86:
017160 C6 3D E0 FF 		      	lw   	r3,-16[bp]
017164 BD 11 0C 00 		      	bne  	r3,disassem_87
017168 FC 01 00 00 		      	push 	#disassem_79
01716C 65 E0 FD 6A 
017170 B9 1E FE FF 		      	bsr  	printf
017174 14 EF 11 00 		      	addui	sp,sp,#8
017178 3A 03 00 00 		      	bra  	disassem_88
                	disassem_87:
01717C E6 ED E1 FF 		      	push 	-16[bp]
017180 FC 01 00 00 		      	push 	#disassem_80
017184 65 E0 E1 6A 
017188 B9 1B FE FF 		      	bsr  	printf
01718C 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_88:
017190 E6 ED D1 FF 		      	push 	-24[bp]
017194 FC 01 00 00 		      	push 	#disassem_81
017198 65 E0 C9 6A 
01719C 39 19 FE FF 		      	bsr  	printf
0171A0 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_89:
0171A4 82 ED 01 1A 		      	mov  	sp,bp
0171A8 57 BF 11 00 		      	pop  	bp
0171AC 57 CF 11 00 		      	pop  	xlr
0171B0 57 FF 11 00 		      	pop  	lr
0171B4 37 FF 01 00 		      	rtl  	#0
                	disassem_82:
0171B8 C6 FD 11 00 		      	lw   	lr,8[bp]
0171BC E3 FD 21 00 		      	sw   	lr,16[bp]
0171C0 BA FC FF FF 		      	bra  	disassem_89
                	PrintSc:
0171C4 E7 EF 01 00 		      	push 	lr
0171C8 67 EE 01 00 		      	push 	xlr
0171CC E7 ED 01 00 		      	push 	bp
0171D0 7C 01 00 00 		      	ldi  	xlr,#disassem_93
0171D4 0A C0 49 E4 
0171D8 02 BF 01 1A 		      	mov  	bp,sp
0171DC C6 3D 30 00 		      	lw   	r3,24[bp]
0171E0 86 31 02 00 		      	cmp  	r3,r3,#1
0171E4 BD 51 0E 00 		      	ble  	r3,disassem_94
0171E8 E6 ED 31 00 		      	push 	24[bp]
0171EC FC 01 00 00 		      	push 	#disassem_91
0171F0 65 E0 AD 6A 
0171F4 39 0E FE FF 		      	bsr  	printf
0171F8 14 EF 21 00 		      	addui	sp,sp,#16
0171FC BA 02 00 00 		      	bra  	disassem_95
                	disassem_94:
017200 FC 01 00 00 		      	push 	#disassem_92
017204 65 E0 9D 6A 
017208 B9 0B FE FF 		      	bsr  	printf
01720C 14 EF 11 00 		      	addui	sp,sp,#8
                	disassem_95:
                	disassem_96:
017210 82 ED 01 1A 		      	mov  	sp,bp
017214 57 BF 11 00 		      	pop  	bp
017218 57 CF 11 00 		      	pop  	xlr
01721C 57 FF 11 00 		      	pop  	lr
017220 37 FF 01 00 		      	rtl  	#0
                	disassem_93:
017224 C6 FD 11 00 		      	lw   	lr,8[bp]
017228 E3 FD 21 00 		      	sw   	lr,16[bp]
01722C BA FC FF FF 		      	bra  	disassem_96
                	DispBrk:
017230 E7 EF 01 00 		      	push 	lr
017234 67 EE 01 00 		      	push 	xlr
017238 E7 ED 01 00 		      	push 	bp
01723C 7C 01 00 00 		      	ldi  	xlr,#disassem_102
017240 0A C0 01 E6 
017244 02 BF 01 1A 		      	mov  	bp,sp
017248 15 EF 21 00 		      	subui	sp,sp,#16
01724C C5 3D 30 00 		      	lhu  	r3,24[bp]
017250 8C 31 FE FF 		      	andi 	r3,r3,#-1
017254 82 31 3C 78 		      	asri 	r3,r3,#30
017258 8C 31 06 00 		      	and  	r3,r3,#3
01725C E3 3D F0 FF 		      	sw   	r3,-8[bp]
017260 C5 3D 30 00 		      	lhu  	r3,24[bp]
017264 8C 31 FE FF 		      	andi 	r3,r3,#-1
017268 82 31 22 78 		      	asri 	r3,r3,#17
01726C 8C 31 FE 03 		      	and  	r3,r3,#511
017270 E3 3D E0 FF 		      	sw   	r3,-16[bp]
017274 C6 3D F0 FF 		      	lw   	r3,-8[bp]
017278 86 41 00 00 		      	cmp  	r4,r3,#0
01727C 3D 02 10 00 		      	beq  	r4,disassem_104
017280 86 41 02 00 		      	cmp  	r4,r3,#1
017284 3D 02 16 00 		      	beq  	r4,disassem_105
017288 86 41 04 00 		      	cmp  	r4,r3,#2
01728C 3D 02 1C 00 		      	beq  	r4,disassem_106
017290 86 41 06 00 		      	cmp  	r4,r3,#3
017294 3D 02 22 00 		      	beq  	r4,disassem_107
017298 BA 0A 00 00 		      	bra  	disassem_103
                	disassem_104:
01729C E6 ED E1 FF 		      	push 	-16[bp]
0172A0 FC 01 00 00 		      	push 	#disassem_98
0172A4 65 E0 6D 6A 
0172A8 B9 F7 FD FF 		      	bsr  	printf
0172AC 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_105:
0172B0 E6 ED E1 FF 		      	push 	-16[bp]
0172B4 FC 01 00 00 		      	push 	#disassem_99
0172B8 65 E0 3D 6A 
0172BC 39 F5 FD FF 		      	bsr  	printf
0172C0 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_106:
0172C4 E6 ED E1 FF 		      	push 	-16[bp]
0172C8 FC 01 00 00 		      	push 	#disassem_100
0172CC 65 E0 0D 6A 
0172D0 B9 F2 FD FF 		      	bsr  	printf
0172D4 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_107:
0172D8 E6 ED E1 FF 		      	push 	-16[bp]
0172DC FC 01 00 00 		      	push 	#disassem_101
0172E0 65 E0 DD 69 
0172E4 39 F0 FD FF 		      	bsr  	printf
0172E8 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_103:
                	disassem_108:
0172EC 82 ED 01 1A 		      	mov  	sp,bp
0172F0 57 BF 11 00 		      	pop  	bp
0172F4 57 CF 11 00 		      	pop  	xlr
0172F8 57 FF 11 00 		      	pop  	lr
0172FC 37 FF 01 00 		      	rtl  	#0
                	disassem_102:
017300 C6 FD 11 00 		      	lw   	lr,8[bp]
017304 E3 FD 21 00 		      	sw   	lr,16[bp]
017308 BA FC FF FF 		      	bra  	disassem_108
                	DispIndexedAddr:
01730C E7 EF 01 00 		      	push 	lr
017310 67 EE 01 00 		      	push 	xlr
017314 E7 ED 01 00 		      	push 	bp
017318 7C 01 00 00 		      	ldi  	xlr,#disassem_115
01731C 0A C0 D1 E8 
017320 02 BF 01 1A 		      	mov  	bp,sp
017324 15 EF 51 00 		      	subui	sp,sp,#40
017328 C5 3D 50 00 		      	lhu  	r3,40[bp]
01732C 8C 31 FE FF 		      	andi 	r3,r3,#-1
017330 82 31 30 78 		      	asri 	r3,r3,#24
017334 E3 3D F0 FF 		      	sw   	r3,-8[bp]
017338 C5 3D 50 00 		      	lhu  	r3,40[bp]
01733C 8C 31 FE FF 		      	andi 	r3,r3,#-1
017340 82 31 0E 78 		      	asri 	r3,r3,#7
017344 8C 31 3E 00 		      	and  	r3,r3,#31
017348 E3 3D E0 FF 		      	sw   	r3,-16[bp]
01734C C5 3D 50 00 		      	lhu  	r3,40[bp]
017350 8C 31 FE FF 		      	andi 	r3,r3,#-1
017354 82 31 18 78 		      	asri 	r3,r3,#12
017358 8C 31 3E 00 		      	and  	r3,r3,#31
01735C E3 3D C0 FF 		      	sw   	r3,-32[bp]
017360 C5 3D 50 00 		      	lhu  	r3,40[bp]
017364 8C 31 FE FF 		      	andi 	r3,r3,#-1
017368 82 31 22 78 		      	asri 	r3,r3,#17
01736C 8C 31 3E 00 		      	and  	r3,r3,#31
017370 E3 3D D0 FF 		      	sw   	r3,-24[bp]
017374 C5 3D 50 00 		      	lhu  	r3,40[bp]
017378 8C 31 FE FF 		      	andi 	r3,r3,#-1
01737C 82 31 2C 78 		      	asri 	r3,r3,#22
017380 8C 31 06 00 		      	and  	r3,r3,#3
017384 E3 3D B0 FF 		      	sw   	r3,-40[bp]
017388 0A 30 02 00 		      	ldi  	r3,#1
01738C C6 4D B0 FF 		      	lw   	r4,-40[bp]
017390 82 31 08 60 		      	asl  	r3,r3,r4
017394 E3 3D B0 FF 		      	sw   	r3,-40[bp]
017398 C5 3D 50 00 		      	lhu  	r3,40[bp]
01739C E7 E1 01 00 		      	push 	r3
0173A0 E6 ED 31 00 		      	push 	24[bp]
0173A4 B9 F8 FE FF 		      	bsr  	DumpInsnBytes
0173A8 14 EF 21 00 		      	addui	sp,sp,#16
0173AC E6 ED C1 FF 		      	push 	-32[bp]
0173B0 E6 ED 41 00 		      	push 	32[bp]
0173B4 FC 01 00 00 		      	push 	#disassem_110
0173B8 65 E0 BD 69 
0173BC 39 D5 FD FF 		      	bsr  	printf
0173C0 14 EF 31 00 		      	addui	sp,sp,#24
0173C4 C6 3D F0 FF 		      	lw   	r3,-8[bp]
0173C8 BD 01 0C 00 		      	beq  	r3,disassem_116
0173CC E6 ED F1 FF 		      	push 	-8[bp]
0173D0 FC 01 00 00 		      	push 	#disassem_111
0173D4 65 E0 AD 69 
0173D8 B9 D1 FD FF 		      	bsr  	printf
0173DC 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_116:
0173E0 C6 3D E0 FF 		      	lw   	r3,-16[bp]
0173E4 BD 01 16 00 		      	beq  	r3,disassem_118
0173E8 C6 3D D0 FF 		      	lw   	r3,-24[bp]
0173EC BD 01 12 00 		      	beq  	r3,disassem_118
0173F0 FC 01 00 00 		      	push 	#disassem_112
0173F4 65 E0 89 69 
0173F8 B9 CD FD FF 		      	bsr  	printf
0173FC 14 EF 11 00 		      	addui	sp,sp,#8
017400 E6 ED B1 FF 		      	push 	-40[bp]
017404 39 B8 FF FF 		      	bsr  	PrintSc
017408 14 EF 11 00 		      	addui	sp,sp,#8
01740C 3A 09 00 00 		      	bra  	disassem_119
                	disassem_118:
017410 C6 3D E0 FF 		      	lw   	r3,-16[bp]
017414 BD 11 14 00 		      	bne  	r3,disassem_120
017418 E6 ED D1 FF 		      	push 	-24[bp]
01741C FC 01 00 00 		      	push 	#disassem_113
017420 65 E0 75 69 
017424 39 C8 FD FF 		      	bsr  	printf
017428 14 EF 21 00 		      	addui	sp,sp,#16
01742C E6 ED B1 FF 		      	push 	-40[bp]
017430 B9 B2 FF FF 		      	bsr  	PrintSc
017434 14 EF 11 00 		      	addui	sp,sp,#8
017438 BA 03 00 00 		      	bra  	disassem_121
                	disassem_120:
01743C C6 3D D0 FF 		      	lw   	r3,-24[bp]
017440 BD 11 0A 00 		      	bne  	r3,disassem_122
017444 FC 01 00 00 		      	push 	#disassem_114
017448 65 E0 55 69 
01744C 39 C3 FD FF 		      	bsr  	printf
017450 14 EF 11 00 		      	addui	sp,sp,#8
                	disassem_122:
                	disassem_121:
                	disassem_119:
                	disassem_124:
017454 82 ED 01 1A 		      	mov  	sp,bp
017458 57 BF 11 00 		      	pop  	bp
01745C 57 CF 11 00 		      	pop  	xlr
017460 57 FF 11 00 		      	pop  	lr
017464 37 FF 01 00 		      	rtl  	#0
                	disassem_115:
017468 C6 FD 11 00 		      	lw   	lr,8[bp]
01746C E3 FD 21 00 		      	sw   	lr,16[bp]
017470 BA FC FF FF 		      	bra  	disassem_124
                	DispLS:
017474 E7 EF 01 00 		      	push 	lr
017478 67 EE 01 00 		      	push 	xlr
01747C E7 ED 01 00 		      	push 	bp
017480 7C 01 00 00 		      	ldi  	xlr,#disassem_127
017484 0A C0 C9 E9 
017488 02 BF 01 1A 		      	mov  	bp,sp
01748C E6 ED 71 00 		      	push 	56[bp]
017490 E6 ED 31 00 		      	push 	24[bp]
017494 B9 DA FE FF 		      	bsr  	DumpInsnBytes
017498 14 EF 21 00 		      	addui	sp,sp,#16
01749C E6 ED 41 00 		      	push 	32[bp]
0174A0 FC 01 00 00 		      	push 	#disassem_126
0174A4 65 E0 45 69 
0174A8 B9 B7 FD FF 		      	bsr  	printf
0174AC 14 EF 21 00 		      	addui	sp,sp,#16
0174B0 E6 ED 71 00 		      	push 	56[bp]
0174B4 B9 F2 FE FF 		      	bsr  	DispRstc
0174B8 14 EF 11 00 		      	addui	sp,sp,#8
0174BC E6 ED 71 00 		      	push 	56[bp]
0174C0 E6 ED 61 00 		      	push 	48[bp]
0174C4 E6 ED 51 00 		      	push 	40[bp]
0174C8 39 5A FF FF 		      	bsr  	DispMemAddress
0174CC 14 EF 31 00 		      	addui	sp,sp,#24
                	disassem_128:
0174D0 82 ED 01 1A 		      	mov  	sp,bp
0174D4 57 BF 11 00 		      	pop  	bp
0174D8 57 CF 11 00 		      	pop  	xlr
0174DC 57 FF 11 00 		      	pop  	lr
0174E0 37 FF 01 00 		      	rtl  	#0
                	disassem_127:
0174E4 C6 FD 11 00 		      	lw   	lr,8[bp]
0174E8 E3 FD 21 00 		      	sw   	lr,16[bp]
0174EC BA FC FF FF 		      	bra  	disassem_128
                	DispRI:
0174F0 E7 EF 01 00 		      	push 	lr
0174F4 67 EE 01 00 		      	push 	xlr
0174F8 E7 ED 01 00 		      	push 	bp
0174FC 7C 01 00 00 		      	ldi  	xlr,#disassem_133
017500 0A C0 79 EB 
017504 02 BF 01 1A 		      	mov  	bp,sp
017508 15 EF 11 00 		      	subui	sp,sp,#8
01750C C6 3D 70 00 		      	lw   	r3,56[bp]
017510 E2 3D F8 FF 		      	sh   	r3,-4[bp]
017514 E6 ED 71 00 		      	push 	56[bp]
017518 E6 ED 31 00 		      	push 	24[bp]
01751C B9 C9 FE FF 		      	bsr  	DumpInsnBytes
017520 14 EF 21 00 		      	addui	sp,sp,#16
017524 E6 ED 41 00 		      	push 	32[bp]
017528 FC 01 00 00 		      	push 	#disassem_130
01752C 65 E0 35 69 
017530 B9 A6 FD FF 		      	bsr  	printf
017534 14 EF 21 00 		      	addui	sp,sp,#16
017538 E6 ED 71 00 		      	push 	56[bp]
01753C B9 E1 FE FF 		      	bsr  	DispRstc
017540 14 EF 11 00 		      	addui	sp,sp,#8
017544 E6 ED 71 00 		      	push 	56[bp]
017548 39 EB FE FF 		      	bsr  	DispRac
01754C 14 EF 11 00 		      	addui	sp,sp,#8
017550 C6 3D 50 00 		      	lw   	r3,40[bp]
017554 BD 01 18 00 		      	beq  	r3,disassem_134
017558 C6 3D 60 00 		      	lw   	r3,48[bp]
01755C 82 31 1E 70 		      	asli 	r3,r3,#15
017560 C6 4D 70 00 		      	lw   	r4,56[bp]
017564 02 42 22 78 		      	asri 	r4,r4,#17
017568 82 31 08 1A 		      	or   	r3,r3,r4
01756C E7 E1 01 00 		      	push 	r3
017570 FC 01 00 00 		      	push 	#disassem_131
017574 65 E0 19 69 
017578 B9 9D FD FF 		      	bsr  	printf
01757C 14 EF 21 00 		      	addui	sp,sp,#16
017580 3A 05 00 00 		      	bra  	disassem_135
                	disassem_134:
017584 C4 3D F8 FF 		      	lh   	r3,-4[bp]
017588 82 31 00 24 		      	sxh  	r3,r3
01758C 82 31 00 24 		      	sxh  	r3,r3
017590 82 31 22 78 		      	asri 	r3,r3,#17
017594 E7 E1 01 00 		      	push 	r3
017598 FC 01 00 00 		      	push 	#disassem_132
01759C 65 E0 FD 68 
0175A0 B9 98 FD FF 		      	bsr  	printf
0175A4 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_135:
                	disassem_136:
0175A8 82 ED 01 1A 		      	mov  	sp,bp
0175AC 57 BF 11 00 		      	pop  	bp
0175B0 57 CF 11 00 		      	pop  	xlr
0175B4 57 FF 11 00 		      	pop  	lr
0175B8 37 FF 01 00 		      	rtl  	#0
                	disassem_133:
0175BC C6 FD 11 00 		      	lw   	lr,8[bp]
0175C0 E3 FD 21 00 		      	sw   	lr,16[bp]
0175C4 BA FC FF FF 		      	bra  	disassem_136
                	public code DispBcc:
0175C8 E7 EF 01 00 		      	push 	lr
0175CC 67 EE 01 00 		      	push 	xlr
0175D0 E7 ED 01 00 		      	push 	bp
0175D4 7C 01 00 00 		      	ldi  	xlr,#disassem_139
0175D8 0A C0 01 ED 
0175DC 02 BF 01 1A 		      	mov  	bp,sp
0175E0 15 EF 21 00 		      	subui	sp,sp,#16
0175E4 C6 3D 50 00 		      	lw   	r3,40[bp]
0175E8 82 31 22 78 		      	asri 	r3,r3,#17
0175EC 7C 00 00 00 		      	and  	r3,r3,#32767
0175F0 8C 31 FE FF 
0175F4 82 31 04 70 		      	asli 	r3,r3,#2
0175F8 E3 3D E0 FF 		      	sw   	r3,-16[bp]
0175FC C6 3D 50 00 		      	lw   	r3,40[bp]
017600 7C 00 80 FF 		      	and  	r3,r3,#-2147483648
017604 8C 31 00 00 
017608 BD 01 0A 00 		      	beq  	r3,disassem_140
01760C C6 3D E0 FF 		      	lw   	r3,-16[bp]
017610 7C FF FF FF 		      	ori  	r3,r3,#-65536
017614 8D 31 00 00 
017618 E3 3D E0 FF 		      	sw   	r3,-16[bp]
                	disassem_140:
01761C E6 ED 51 00 		      	push 	40[bp]
017620 E6 ED 31 00 		      	push 	24[bp]
017624 B9 A8 FE FF 		      	bsr  	DumpInsnBytes
017628 14 EF 21 00 		      	addui	sp,sp,#16
01762C E6 ED 41 00 		      	push 	32[bp]
017630 FC 01 00 00 		      	push 	#disassem_137
017634 65 E0 ED 68 
017638 B9 85 FD FF 		      	bsr  	printf
01763C 14 EF 21 00 		      	addui	sp,sp,#16
017640 E6 ED 51 00 		      	push 	40[bp]
017644 B9 CB FE FF 		      	bsr  	DispRac
017648 14 EF 11 00 		      	addui	sp,sp,#8
01764C C6 3D 30 00 		      	lw   	r3,24[bp]
017650 C6 4D E0 FF 		      	lw   	r4,-16[bp]
017654 82 31 08 28 		      	addu 	r3,r3,r4
017658 E7 E1 01 00 		      	push 	r3
01765C FC 01 00 00 		      	push 	#disassem_138
017660 65 E0 D1 68 
017664 39 80 FD FF 		      	bsr  	printf
017668 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_142:
01766C 82 ED 01 1A 		      	mov  	sp,bp
017670 57 BF 11 00 		      	pop  	bp
017674 57 CF 11 00 		      	pop  	xlr
017678 57 FF 11 00 		      	pop  	lr
01767C 37 FF 01 00 		      	rtl  	#0
                	disassem_139:
017680 C6 FD 11 00 		      	lw   	lr,8[bp]
017684 E3 FD 21 00 		      	sw   	lr,16[bp]
017688 BA FC FF FF 		      	bra  	disassem_142
                	endpublic
                	
                	public code DispRR:
01768C E7 EF 01 00 		      	push 	lr
017690 67 EE 01 00 		      	push 	xlr
017694 E7 ED 01 00 		      	push 	bp
017698 7C 01 00 00 		      	ldi  	xlr,#disassem_147
01769C 0A C0 41 EF 
0176A0 02 BF 01 1A 		      	mov  	bp,sp
0176A4 15 EF 21 00 		      	subui	sp,sp,#16
0176A8 C5 3D 50 00 		      	lhu  	r3,40[bp]
0176AC 8C 31 FE FF 		      	andi 	r3,r3,#-1
0176B0 82 31 32 78 		      	asri 	r3,r3,#25
0176B4 E3 3D F0 FF 		      	sw   	r3,-8[bp]
0176B8 C5 3D 50 00 		      	lhu  	r3,40[bp]
0176BC 8C 31 FE FF 		      	andi 	r3,r3,#-1
0176C0 82 31 22 78 		      	asri 	r3,r3,#17
0176C4 8C 31 3E 00 		      	and  	r3,r3,#31
0176C8 E3 3D E0 FF 		      	sw   	r3,-16[bp]
0176CC C5 3D 50 00 		      	lhu  	r3,40[bp]
0176D0 E7 E1 01 00 		      	push 	r3
0176D4 E6 ED 31 00 		      	push 	24[bp]
0176D8 39 92 FE FF 		      	bsr  	DumpInsnBytes
0176DC 14 EF 21 00 		      	addui	sp,sp,#16
0176E0 C6 3D F0 FF 		      	lw   	r3,-8[bp]
0176E4 86 31 1A 00 		      	cmp  	r3,r3,#13
0176E8 BD 11 30 00 		      	bne  	r3,disassem_148
0176EC C6 3D E0 FF 		      	lw   	r3,-16[bp]
0176F0 BD 11 2C 00 		      	bne  	r3,disassem_148
0176F4 FC 01 00 00 		      	push 	#disassem_143
0176F8 65 E0 B5 68 
0176FC 39 6D FD FF 		      	bsr  	printf
017700 14 EF 11 00 		      	addui	sp,sp,#8
017704 C5 3D 50 00 		      	lhu  	r3,40[bp]
017708 E7 E1 01 00 		      	push 	r3
01770C B9 A7 FE FF 		      	bsr  	DispRstc
017710 14 EF 11 00 		      	addui	sp,sp,#8
017714 C5 3D 50 00 		      	lhu  	r3,40[bp]
017718 E7 E1 01 00 		      	push 	r3
01771C B9 BB FE FF 		      	bsr  	DispRa
017720 14 EF 11 00 		      	addui	sp,sp,#8
017724 FC 01 00 00 		      	push 	#disassem_144
017728 65 E0 A9 68 
01772C 39 67 FD FF 		      	bsr  	printf
017730 14 EF 11 00 		      	addui	sp,sp,#8
                	disassem_150:
017734 82 ED 01 1A 		      	mov  	sp,bp
017738 57 BF 11 00 		      	pop  	bp
01773C 57 CF 11 00 		      	pop  	xlr
017740 57 FF 11 00 		      	pop  	lr
017744 37 FF 01 00 		      	rtl  	#0
                	disassem_148:
017748 E6 ED 41 00 		      	push 	32[bp]
01774C FC 01 00 00 		      	push 	#disassem_145
017750 65 E0 99 68 
017754 39 62 FD FF 		      	bsr  	printf
017758 14 EF 21 00 		      	addui	sp,sp,#16
01775C C5 3D 50 00 		      	lhu  	r3,40[bp]
017760 E7 E1 01 00 		      	push 	r3
017764 B9 9C FE FF 		      	bsr  	DispRstc
017768 14 EF 11 00 		      	addui	sp,sp,#8
01776C C5 3D 50 00 		      	lhu  	r3,40[bp]
017770 E7 E1 01 00 		      	push 	r3
017774 B9 A5 FE FF 		      	bsr  	DispRac
017778 14 EF 11 00 		      	addui	sp,sp,#8
01777C C5 3D 50 00 		      	lhu  	r3,40[bp]
017780 E7 E1 01 00 		      	push 	r3
017784 B9 B9 FE FF 		      	bsr  	DispRb
017788 14 EF 11 00 		      	addui	sp,sp,#8
01778C FC 01 00 00 		      	push 	#disassem_146
017790 65 E0 8D 68 
017794 39 5A FD FF 		      	bsr  	printf
017798 14 EF 11 00 		      	addui	sp,sp,#8
01779C 3A F3 FF FF 		      	bra  	disassem_150
                	disassem_147:
0177A0 C6 FD 11 00 		      	lw   	lr,8[bp]
0177A4 E3 FD 21 00 		      	sw   	lr,16[bp]
0177A8 BA F1 FF FF 		      	bra  	disassem_150
                	endpublic
                	
                	public code disassem:
0177AC E7 EF 01 00 		      	push 	lr
0177B0 67 EE 01 00 		      	push 	xlr
0177B4 E7 ED 01 00 		      	push 	bp
0177B8 FC 01 00 00 		      	ldi  	xlr,#disassem_236
0177BC 0A C0 29 12 
0177C0 02 BF 01 1A 		      	mov  	bp,sp
0177C4 15 EF C1 00 		      	subui	sp,sp,#96
0177C8 E7 E5 01 00 		      	push 	r11
0177CC 67 E6 01 00 		      	push 	r12
0177D0 C6 BD 30 00 		      	lw   	r11,24[bp]
0177D4 0A C0 00 00 		      	ldi  	r12,#0
0177D8 E3 0D B0 FF 		      	sw   	r0,-40[bp]
0177DC E3 0D A0 FF 		      	sw   	r0,-48[bp]
0177E0 0A 30 02 00 		      	ldi  	r3,#1
0177E4 E3 3D 50 FF 		      	sw   	r3,-88[bp]
0177E8 E3 0D 40 FF 		      	sw   	r0,-96[bp]
                	disassem_237:
0177EC C6 35 00 00 		      	lw   	r3,[r11]
0177F0 C6 4D 40 00 		      	lw   	r4,32[bp]
0177F4 82 31 08 0C 		      	cmp  	r3,r3,r4
0177F8 BD 11 08 00 		      	bne  	r3,disassem_239
0177FC 39 5D FE FF 		      	bsr  	reverse_video
017800 0A 30 02 00 		      	ldi  	r3,#1
017804 E3 3D 40 FF 		      	sw   	r3,-96[bp]
                	disassem_239:
017808 C6 35 00 00 		      	lw   	r3,[r11]
01780C 82 31 04 78 		      	asri 	r3,r3,#2
017810 E3 3D 70 FF 		      	sw   	r3,-72[bp]
017814 C6 3D 70 FF 		      	lw   	r3,-72[bp]
017818 82 31 04 70 		      	asli 	r3,r3,#2
01781C 4D 46 06 00 		      	lhu  	r4,0[r12+r3]
017820 E2 4D E8 FF 		      	sh   	r4,-12[bp]
017824 C4 3D E8 FF 		      	lh   	r3,-12[bp]
017828 E2 3D 68 FF 		      	sh   	r3,-76[bp]
01782C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017830 8C 31 FE 00 		      	and  	r3,r3,#127
017834 E3 3D D0 FF 		      	sw   	r3,-24[bp]
017838 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
01783C 8C 31 FE FF 		      	andi 	r3,r3,#-1
017840 82 31 32 78 		      	asri 	r3,r3,#25
017844 8C 31 FE 00 		      	and  	r3,r3,#127
017848 E3 3D C0 FF 		      	sw   	r3,-32[bp]
01784C C6 3D D0 FF 		      	lw   	r3,-24[bp]
017850 86 41 F8 00 		      	cmp  	r4,r3,#124
017854 3D 02 D0 00 		      	beq  	r4,disassem_242
017858 86 41 04 00 		      	cmp  	r4,r3,#2
01785C 3D 02 14 01 		      	beq  	r4,disassem_243
017860 86 41 08 00 		      	cmp  	r4,r3,#4
017864 3D 02 36 03 		      	beq  	r4,disassem_244
017868 86 41 28 00 		      	cmp  	r4,r3,#20
01786C 3D 02 46 03 		      	beq  	r4,disassem_245
017870 86 41 0A 00 		      	cmp  	r4,r3,#5
017874 3D 02 56 03 		      	beq  	r4,disassem_246
017878 86 41 2A 00 		      	cmp  	r4,r3,#21
01787C 3D 02 66 03 		      	beq  	r4,disassem_247
017880 86 41 0C 00 		      	cmp  	r4,r3,#6
017884 3D 02 76 03 		      	beq  	r4,disassem_248
017888 86 41 2C 00 		      	cmp  	r4,r3,#22
01788C 3D 02 86 03 		      	beq  	r4,disassem_249
017890 86 41 0E 00 		      	cmp  	r4,r3,#7
017894 3D 02 96 03 		      	beq  	r4,disassem_250
017898 86 41 2E 00 		      	cmp  	r4,r3,#23
01789C 3D 02 A6 03 		      	beq  	r4,disassem_251
0178A0 86 41 10 00 		      	cmp  	r4,r3,#8
0178A4 3D 02 B6 03 		      	beq  	r4,disassem_252
0178A8 86 41 30 00 		      	cmp  	r4,r3,#24
0178AC 3D 02 C6 03 		      	beq  	r4,disassem_253
0178B0 86 41 18 00 		      	cmp  	r4,r3,#12
0178B4 3D 02 D6 03 		      	beq  	r4,disassem_254
0178B8 86 41 1A 00 		      	cmp  	r4,r3,#13
0178BC 3D 02 E6 03 		      	beq  	r4,disassem_255
0178C0 86 41 1C 00 		      	cmp  	r4,r3,#14
0178C4 3D 02 F6 03 		      	beq  	r4,disassem_256
0178C8 86 41 7A 00 		      	cmp  	r4,r3,#61
0178CC 3D 02 06 04 		      	beq  	r4,disassem_257
0178D0 86 41 70 00 		      	cmp  	r4,r3,#56
0178D4 3D 02 9E 04 		      	beq  	r4,disassem_258
0178D8 86 41 72 00 		      	cmp  	r4,r3,#57
0178DC 3D 02 A4 04 		      	beq  	r4,disassem_259
0178E0 86 41 74 00 		      	cmp  	r4,r3,#58
0178E4 3D 02 D8 04 		      	beq  	r4,disassem_260
0178E8 86 41 6E 00 		      	cmp  	r4,r3,#55
0178EC 3D 02 0C 05 		      	beq  	r4,disassem_261
0178F0 86 41 76 00 		      	cmp  	r4,r3,#59
0178F4 3D 02 26 05 		      	beq  	r4,disassem_262
0178F8 86 41 80 00 		      	cmp  	r4,r3,#64
0178FC 3D 02 40 05 		      	beq  	r4,disassem_263
017900 86 41 82 00 		      	cmp  	r4,r3,#65
017904 3D 02 50 05 		      	beq  	r4,disassem_264
017908 86 41 84 00 		      	cmp  	r4,r3,#66
01790C 3D 02 60 05 		      	beq  	r4,disassem_265
017910 86 41 86 00 		      	cmp  	r4,r3,#67
017914 3D 02 70 05 		      	beq  	r4,disassem_266
017918 86 41 88 00 		      	cmp  	r4,r3,#68
01791C 3D 02 80 05 		      	beq  	r4,disassem_267
017920 86 41 8A 00 		      	cmp  	r4,r3,#69
017924 3D 02 90 05 		      	beq  	r4,disassem_268
017928 86 41 8C 00 		      	cmp  	r4,r3,#70
01792C 3D 02 A0 05 		      	beq  	r4,disassem_269
017930 86 41 8E 00 		      	cmp  	r4,r3,#71
017934 3D 02 B0 05 		      	beq  	r4,disassem_270
017938 86 41 90 00 		      	cmp  	r4,r3,#72
01793C 3D 02 C0 05 		      	beq  	r4,disassem_271
017940 86 41 92 00 		      	cmp  	r4,r3,#73
017944 3D 02 CC 05 		      	beq  	r4,disassem_272
017948 86 41 94 00 		      	cmp  	r4,r3,#74
01794C 3D 02 D8 05 		      	beq  	r4,disassem_273
017950 86 41 96 00 		      	cmp  	r4,r3,#75
017954 3D 02 E4 05 		      	beq  	r4,disassem_274
017958 86 41 98 00 		      	cmp  	r4,r3,#76
01795C 3D 02 F0 05 		      	beq  	r4,disassem_275
017960 86 41 9A 00 		      	cmp  	r4,r3,#77
017964 3D 02 FC 05 		      	beq  	r4,disassem_276
017968 86 41 9C 00 		      	cmp  	r4,r3,#78
01796C 3D 02 08 06 		      	beq  	r4,disassem_277
017970 86 41 9E 00 		      	cmp  	r4,r3,#79
017974 3D 02 14 06 		      	beq  	r4,disassem_278
017978 86 41 C8 00 		      	cmp  	r4,r3,#100
01797C 3D 02 20 06 		      	beq  	r4,disassem_279
017980 86 41 C0 00 		      	cmp  	r4,r3,#96
017984 3D 02 34 06 		      	beq  	r4,disassem_280
017988 86 41 C2 00 		      	cmp  	r4,r3,#97
01798C 3D 02 44 06 		      	beq  	r4,disassem_281
017990 86 41 C4 00 		      	cmp  	r4,r3,#98
017994 3D 02 54 06 		      	beq  	r4,disassem_282
017998 86 41 C6 00 		      	cmp  	r4,r3,#99
01799C 3D 02 64 06 		      	beq  	r4,disassem_283
0179A0 86 41 D0 00 		      	cmp  	r4,r3,#104
0179A4 3D 02 74 06 		      	beq  	r4,disassem_284
0179A8 86 41 D2 00 		      	cmp  	r4,r3,#105
0179AC 3D 02 80 06 		      	beq  	r4,disassem_285
0179B0 86 41 D4 00 		      	cmp  	r4,r3,#106
0179B4 3D 02 8C 06 		      	beq  	r4,disassem_286
0179B8 86 41 D6 00 		      	cmp  	r4,r3,#107
0179BC 3D 02 98 06 		      	beq  	r4,disassem_287
0179C0 86 41 B8 00 		      	cmp  	r4,r3,#92
0179C4 3D 02 A4 06 		      	beq  	r4,disassem_288
0179C8 86 41 DC 00 		      	cmp  	r4,r3,#110
0179CC 3D 02 B4 06 		      	beq  	r4,disassem_289
0179D0 86 41 CE 00 		      	cmp  	r4,r3,#103
0179D4 3D 02 C4 06 		      	beq  	r4,disassem_290
0179D8 86 41 AE 00 		      	cmp  	r4,r3,#87
0179DC 3D 02 E4 06 		      	beq  	r4,disassem_291
0179E0 86 41 7E 00 		      	cmp  	r4,r3,#63
0179E4 3D 02 04 07 		      	beq  	r4,disassem_292
0179E8 86 41 14 00 		      	cmp  	r4,r3,#10
0179EC 3D 02 14 07 		      	beq  	r4,disassem_293
0179F0 3A D7 01 00 		      	bra  	disassem_294
                	disassem_242:
0179F4 0A 30 02 00 		      	ldi  	r3,#1
0179F8 E3 3D B0 FF 		      	sw   	r3,-40[bp]
0179FC C6 3D 50 FF 		      	lw   	r3,-88[bp]
017A00 BD 01 1E 00 		      	beq  	r3,disassem_295
017A04 C4 3D 68 FF 		      	lh   	r3,-76[bp]
017A08 82 31 00 24 		      	sxh  	r3,r3
017A0C 82 31 00 24 		      	sxh  	r3,r3
017A10 82 31 0E 78 		      	asri 	r3,r3,#7
017A14 E3 3D A0 FF 		      	sw   	r3,-48[bp]
017A18 C6 3D A0 FF 		      	lw   	r3,-48[bp]
017A1C 7C 00 01 00 		      	and  	r3,r3,#16777216
017A20 8C 31 00 00 
017A24 BD 01 0A 00 		      	beq  	r3,disassem_297
017A28 C6 3D A0 FF 		      	lw   	r3,-48[bp]
017A2C 7C 00 FF FF 		      	ori  	r3,r3,#-16777216
017A30 8D 31 00 00 
017A34 E3 3D A0 FF 		      	sw   	r3,-48[bp]
                	disassem_297:
017A38 3A 04 00 00 		      	bra  	disassem_296
                	disassem_295:
017A3C C6 3D A0 FF 		      	lw   	r3,-48[bp]
017A40 82 31 32 70 		      	asli 	r3,r3,#25
017A44 C5 4D E8 FF 		      	lhu  	r4,-12[bp]
017A48 0C 42 FE FF 		      	andi 	r4,r4,#-1
017A4C 02 42 0E 78 		      	asri 	r4,r4,#7
017A50 82 31 08 1A 		      	or   	r3,r3,r4
017A54 E3 3D A0 FF 		      	sw   	r3,-48[bp]
                	disassem_296:
017A58 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017A5C E7 E1 01 00 		      	push 	r3
017A60 E6 E5 01 00 		      	push 	[r11]
017A64 B9 20 FE FF 		      	bsr  	DumpInsnBytes
017A68 14 EF 21 00 		      	addui	sp,sp,#16
017A6C FC 01 00 00 		      	push 	#disassem_151
017A70 65 E0 75 68 
017A74 39 FE FC FF 		      	bsr  	printf
017A78 14 EF 11 00 		      	addui	sp,sp,#8
017A7C E3 0D 50 FF 		      	sw   	r0,-88[bp]
017A80 3A CA 01 00 		      	bra  	disassem_241
                	disassem_243:
017A84 C6 3D C0 FF 		      	lw   	r3,-32[bp]
017A88 86 41 6E 00 		      	cmp  	r4,r3,#55
017A8C 3D 02 40 00 		      	beq  	r4,disassem_300
017A90 86 41 08 00 		      	cmp  	r4,r3,#4
017A94 3D 02 EC 00 		      	beq  	r4,disassem_301
017A98 86 41 28 00 		      	cmp  	r4,r3,#20
017A9C 3D 02 F8 00 		      	beq  	r4,disassem_302
017AA0 86 41 0A 00 		      	cmp  	r4,r3,#5
017AA4 3D 02 04 01 		      	beq  	r4,disassem_303
017AA8 86 41 2A 00 		      	cmp  	r4,r3,#21
017AAC 3D 02 10 01 		      	beq  	r4,disassem_304
017AB0 86 41 0C 00 		      	cmp  	r4,r3,#6
017AB4 3D 02 1C 01 		      	beq  	r4,disassem_305
017AB8 86 41 2C 00 		      	cmp  	r4,r3,#22
017ABC 3D 02 28 01 		      	beq  	r4,disassem_306
017AC0 86 41 0E 00 		      	cmp  	r4,r3,#7
017AC4 3D 02 34 01 		      	beq  	r4,disassem_307
017AC8 86 41 2E 00 		      	cmp  	r4,r3,#23
017ACC 3D 02 40 01 		      	beq  	r4,disassem_308
017AD0 86 41 10 00 		      	cmp  	r4,r3,#8
017AD4 3D 02 4C 01 		      	beq  	r4,disassem_309
017AD8 86 41 30 00 		      	cmp  	r4,r3,#24
017ADC 3D 02 58 01 		      	beq  	r4,disassem_310
017AE0 86 41 18 00 		      	cmp  	r4,r3,#12
017AE4 3D 02 64 01 		      	beq  	r4,disassem_311
017AE8 86 41 1A 00 		      	cmp  	r4,r3,#13
017AEC 3D 02 70 01 		      	beq  	r4,disassem_312
017AF0 86 41 1C 00 		      	cmp  	r4,r3,#14
017AF4 3D 02 7C 01 		      	beq  	r4,disassem_313
017AF8 86 41 3E 00 		      	cmp  	r4,r3,#31
017AFC 3D 02 88 01 		      	beq  	r4,disassem_314
017B00 86 41 3C 00 		      	cmp  	r4,r3,#30
017B04 3D 02 B0 01 		      	beq  	r4,disassem_315
017B08 BA 78 00 00 		      	bra  	disassem_299
                	disassem_300:
017B0C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017B10 8C 31 FE FF 		      	andi 	r3,r3,#-1
017B14 82 31 22 78 		      	asri 	r3,r3,#17
017B18 8C 31 3E 00 		      	and  	r3,r3,#31
017B1C 86 41 00 00 		      	cmp  	r4,r3,#0
017B20 3D 02 18 00 		      	beq  	r4,disassem_317
017B24 86 41 02 00 		      	cmp  	r4,r3,#1
017B28 3D 02 28 00 		      	beq  	r4,disassem_318
017B2C 86 41 06 00 		      	cmp  	r4,r3,#3
017B30 3D 02 38 00 		      	beq  	r4,disassem_319
017B34 86 41 3A 00 		      	cmp  	r4,r3,#29
017B38 3D 02 48 00 		      	beq  	r4,disassem_320
017B3C 86 41 3C 00 		      	cmp  	r4,r3,#30
017B40 3D 02 58 00 		      	beq  	r4,disassem_321
017B44 86 41 3E 00 		      	cmp  	r4,r3,#31
017B48 3D 02 68 00 		      	beq  	r4,disassem_322
017B4C BA 1E 00 00 		      	bra  	disassem_323
                	disassem_317:
017B50 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017B54 E7 E1 01 00 		      	push 	r3
017B58 E6 E5 01 00 		      	push 	[r11]
017B5C B9 01 FE FF 		      	bsr  	DumpInsnBytes
017B60 14 EF 21 00 		      	addui	sp,sp,#16
017B64 FC 01 00 00 		      	push 	#disassem_152
017B68 65 E0 5D 68 
017B6C 39 DF FC FF 		      	bsr  	printf
017B70 14 EF 11 00 		      	addui	sp,sp,#8
017B74 BA 1E 00 00 		      	bra  	disassem_316
                	disassem_318:
017B78 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017B7C E7 E1 01 00 		      	push 	r3
017B80 E6 E5 01 00 		      	push 	[r11]
017B84 B9 FC FD FF 		      	bsr  	DumpInsnBytes
017B88 14 EF 21 00 		      	addui	sp,sp,#16
017B8C FC 01 00 00 		      	push 	#disassem_153
017B90 65 E0 45 68 
017B94 39 DA FC FF 		      	bsr  	printf
017B98 14 EF 11 00 		      	addui	sp,sp,#8
017B9C BA 19 00 00 		      	bra  	disassem_316
                	disassem_319:
017BA0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017BA4 E7 E1 01 00 		      	push 	r3
017BA8 E6 E5 01 00 		      	push 	[r11]
017BAC B9 F7 FD FF 		      	bsr  	DumpInsnBytes
017BB0 14 EF 21 00 		      	addui	sp,sp,#16
017BB4 FC 01 00 00 		      	push 	#disassem_154
017BB8 65 E0 2D 68 
017BBC 39 D5 FC FF 		      	bsr  	printf
017BC0 14 EF 11 00 		      	addui	sp,sp,#8
017BC4 BA 14 00 00 		      	bra  	disassem_316
                	disassem_320:
017BC8 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017BCC E7 E1 01 00 		      	push 	r3
017BD0 E6 E5 01 00 		      	push 	[r11]
017BD4 B9 F2 FD FF 		      	bsr  	DumpInsnBytes
017BD8 14 EF 21 00 		      	addui	sp,sp,#16
017BDC FC 01 00 00 		      	push 	#disassem_155
017BE0 65 E0 15 68 
017BE4 39 D0 FC FF 		      	bsr  	printf
017BE8 14 EF 11 00 		      	addui	sp,sp,#8
017BEC BA 0F 00 00 		      	bra  	disassem_316
                	disassem_321:
017BF0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017BF4 E7 E1 01 00 		      	push 	r3
017BF8 E6 E5 01 00 		      	push 	[r11]
017BFC B9 ED FD FF 		      	bsr  	DumpInsnBytes
017C00 14 EF 21 00 		      	addui	sp,sp,#16
017C04 FC 01 00 00 		      	push 	#disassem_156
017C08 65 E0 FD 67 
017C0C 39 CB FC FF 		      	bsr  	printf
017C10 14 EF 11 00 		      	addui	sp,sp,#8
017C14 BA 0A 00 00 		      	bra  	disassem_316
                	disassem_322:
017C18 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017C1C E7 E1 01 00 		      	push 	r3
017C20 E6 E5 01 00 		      	push 	[r11]
017C24 B9 E8 FD FF 		      	bsr  	DumpInsnBytes
017C28 14 EF 21 00 		      	addui	sp,sp,#16
017C2C FC 01 00 00 		      	push 	#disassem_157
017C30 65 E0 E5 67 
017C34 39 C6 FC FF 		      	bsr  	printf
017C38 14 EF 11 00 		      	addui	sp,sp,#8
017C3C BA 05 00 00 		      	bra  	disassem_316
                	disassem_323:
017C40 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017C44 E7 E1 01 00 		      	push 	r3
017C48 E6 E5 01 00 		      	push 	[r11]
017C4C B9 E3 FD FF 		      	bsr  	DumpInsnBytes
017C50 14 EF 21 00 		      	addui	sp,sp,#16
017C54 FC 01 00 00 		      	push 	#disassem_158
017C58 65 E0 CD 67 
017C5C 39 C1 FC FF 		      	bsr  	printf
017C60 14 EF 11 00 		      	addui	sp,sp,#8
017C64 BA 00 00 00 		      	bra  	disassem_316
                	disassem_316:
017C68 BA 4C 00 00 		      	bra  	disassem_299
                	disassem_301:
017C6C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017C70 E7 E1 01 00 		      	push 	r3
017C74 FC 01 00 00 		      	push 	#disassem_159
017C78 65 E0 B5 67 
017C7C E6 E5 01 00 		      	push 	[r11]
017C80 B9 41 FF FF 		      	bsr  	DispRR
017C84 14 EF 31 00 		      	addui	sp,sp,#24
017C88 BA 48 00 00 		      	bra  	disassem_299
                	disassem_302:
017C8C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017C90 E7 E1 01 00 		      	push 	r3
017C94 FC 01 00 00 		      	push 	#disassem_160
017C98 65 E0 9D 67 
017C9C E6 E5 01 00 		      	push 	[r11]
017CA0 B9 3D FF FF 		      	bsr  	DispRR
017CA4 14 EF 31 00 		      	addui	sp,sp,#24
017CA8 BA 44 00 00 		      	bra  	disassem_299
                	disassem_303:
017CAC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017CB0 E7 E1 01 00 		      	push 	r3
017CB4 FC 01 00 00 		      	push 	#disassem_161
017CB8 65 E0 85 67 
017CBC E6 E5 01 00 		      	push 	[r11]
017CC0 B9 39 FF FF 		      	bsr  	DispRR
017CC4 14 EF 31 00 		      	addui	sp,sp,#24
017CC8 BA 40 00 00 		      	bra  	disassem_299
                	disassem_304:
017CCC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017CD0 E7 E1 01 00 		      	push 	r3
017CD4 FC 01 00 00 		      	push 	#disassem_162
017CD8 65 E0 6D 67 
017CDC E6 E5 01 00 		      	push 	[r11]
017CE0 B9 35 FF FF 		      	bsr  	DispRR
017CE4 14 EF 31 00 		      	addui	sp,sp,#24
017CE8 BA 3C 00 00 		      	bra  	disassem_299
                	disassem_305:
017CEC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017CF0 E7 E1 01 00 		      	push 	r3
017CF4 FC 01 00 00 		      	push 	#disassem_163
017CF8 65 E0 55 67 
017CFC E6 E5 01 00 		      	push 	[r11]
017D00 B9 31 FF FF 		      	bsr  	DispRR
017D04 14 EF 31 00 		      	addui	sp,sp,#24
017D08 BA 38 00 00 		      	bra  	disassem_299
                	disassem_306:
017D0C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017D10 E7 E1 01 00 		      	push 	r3
017D14 FC 01 00 00 		      	push 	#disassem_164
017D18 65 E0 3D 67 
017D1C E6 E5 01 00 		      	push 	[r11]
017D20 B9 2D FF FF 		      	bsr  	DispRR
017D24 14 EF 31 00 		      	addui	sp,sp,#24
017D28 BA 34 00 00 		      	bra  	disassem_299
                	disassem_307:
017D2C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017D30 E7 E1 01 00 		      	push 	r3
017D34 FC 01 00 00 		      	push 	#disassem_165
017D38 65 E0 25 67 
017D3C E6 E5 01 00 		      	push 	[r11]
017D40 B9 29 FF FF 		      	bsr  	DispRR
017D44 14 EF 31 00 		      	addui	sp,sp,#24
017D48 BA 30 00 00 		      	bra  	disassem_299
                	disassem_308:
017D4C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017D50 E7 E1 01 00 		      	push 	r3
017D54 FC 01 00 00 		      	push 	#disassem_166
017D58 65 E0 0D 67 
017D5C E6 E5 01 00 		      	push 	[r11]
017D60 B9 25 FF FF 		      	bsr  	DispRR
017D64 14 EF 31 00 		      	addui	sp,sp,#24
017D68 BA 2C 00 00 		      	bra  	disassem_299
                	disassem_309:
017D6C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017D70 E7 E1 01 00 		      	push 	r3
017D74 FC 01 00 00 		      	push 	#disassem_167
017D78 65 E0 F5 66 
017D7C E6 E5 01 00 		      	push 	[r11]
017D80 B9 21 FF FF 		      	bsr  	DispRR
017D84 14 EF 31 00 		      	addui	sp,sp,#24
017D88 BA 28 00 00 		      	bra  	disassem_299
                	disassem_310:
017D8C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017D90 E7 E1 01 00 		      	push 	r3
017D94 FC 01 00 00 		      	push 	#disassem_168
017D98 65 E0 DD 66 
017D9C E6 E5 01 00 		      	push 	[r11]
017DA0 B9 1D FF FF 		      	bsr  	DispRR
017DA4 14 EF 31 00 		      	addui	sp,sp,#24
017DA8 BA 24 00 00 		      	bra  	disassem_299
                	disassem_311:
017DAC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017DB0 E7 E1 01 00 		      	push 	r3
017DB4 FC 01 00 00 		      	push 	#disassem_169
017DB8 65 E0 C5 66 
017DBC E6 E5 01 00 		      	push 	[r11]
017DC0 B9 19 FF FF 		      	bsr  	DispRR
017DC4 14 EF 31 00 		      	addui	sp,sp,#24
017DC8 BA 20 00 00 		      	bra  	disassem_299
                	disassem_312:
017DCC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017DD0 E7 E1 01 00 		      	push 	r3
017DD4 FC 01 00 00 		      	push 	#disassem_170
017DD8 65 E0 AD 66 
017DDC E6 E5 01 00 		      	push 	[r11]
017DE0 B9 15 FF FF 		      	bsr  	DispRR
017DE4 14 EF 31 00 		      	addui	sp,sp,#24
017DE8 BA 1C 00 00 		      	bra  	disassem_299
                	disassem_313:
017DEC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017DF0 E7 E1 01 00 		      	push 	r3
017DF4 FC 01 00 00 		      	push 	#disassem_171
017DF8 65 E0 95 66 
017DFC E6 E5 01 00 		      	push 	[r11]
017E00 B9 11 FF FF 		      	bsr  	DispRR
017E04 14 EF 31 00 		      	addui	sp,sp,#24
017E08 BA 18 00 00 		      	bra  	disassem_299
                	disassem_314:
017E0C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017E10 E7 E1 01 00 		      	push 	r3
017E14 E6 E5 01 00 		      	push 	[r11]
017E18 39 AA FD FF 		      	bsr  	DumpInsnBytes
017E1C 14 EF 21 00 		      	addui	sp,sp,#16
017E20 FC 01 00 00 		      	push 	#disassem_172
017E24 65 E0 79 66 
017E28 B9 87 FC FF 		      	bsr  	printf
017E2C 14 EF 11 00 		      	addui	sp,sp,#8
017E30 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017E34 E7 E1 01 00 		      	push 	r3
017E38 39 C2 FD FF 		      	bsr  	DispRstc
017E3C 14 EF 11 00 		      	addui	sp,sp,#8
017E40 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017E44 E7 E1 01 00 		      	push 	r3
017E48 39 EC FD FF 		      	bsr  	DispSpr
017E4C 14 EF 11 00 		      	addui	sp,sp,#8
017E50 FC 01 00 00 		      	push 	#disassem_173
017E54 65 E0 6D 66 
017E58 B9 81 FC FF 		      	bsr  	printf
017E5C 14 EF 11 00 		      	addui	sp,sp,#8
017E60 BA 0D 00 00 		      	bra  	disassem_299
                	disassem_315:
017E64 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017E68 E7 E1 01 00 		      	push 	r3
017E6C E6 E5 01 00 		      	push 	[r11]
017E70 39 9F FD FF 		      	bsr  	DumpInsnBytes
017E74 14 EF 21 00 		      	addui	sp,sp,#16
017E78 FC 01 00 00 		      	push 	#disassem_174
017E7C 65 E0 51 66 
017E80 B9 7C FC FF 		      	bsr  	printf
017E84 14 EF 11 00 		      	addui	sp,sp,#8
017E88 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017E8C E7 E1 01 00 		      	push 	r3
017E90 39 E3 FD FF 		      	bsr  	DispSpr
017E94 14 EF 11 00 		      	addui	sp,sp,#8
017E98 FC 01 00 00 		      	push 	#disassem_175
017E9C 65 E0 49 66 
017EA0 B9 78 FC FF 		      	bsr  	printf
017EA4 14 EF 11 00 		      	addui	sp,sp,#8
017EA8 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017EAC E7 E1 01 00 		      	push 	r3
017EB0 39 C9 FD FF 		      	bsr  	DispRa
017EB4 14 EF 11 00 		      	addui	sp,sp,#8
017EB8 FC 01 00 00 		      	push 	#disassem_176
017EBC 65 E0 3D 66 
017EC0 B9 74 FC FF 		      	bsr  	printf
017EC4 14 EF 11 00 		      	addui	sp,sp,#8
017EC8 BA 00 00 00 		      	bra  	disassem_299
                	disassem_299:
017ECC BA 40 01 00 		      	bra  	disassem_241
                	disassem_244:
017ED0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017ED4 E7 E1 01 00 		      	push 	r3
017ED8 E6 ED A1 FF 		      	push 	-48[bp]
017EDC E6 ED B1 FF 		      	push 	-40[bp]
017EE0 FC 01 00 00 		      	push 	#disassem_177
017EE4 65 E0 25 66 
017EE8 E6 E5 01 00 		      	push 	[r11]
017EEC B9 C0 FE FF 		      	bsr  	DispRI
017EF0 14 EF 51 00 		      	addui	sp,sp,#40
017EF4 BA 3B 01 00 		      	bra  	disassem_241
                	disassem_245:
017EF8 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017EFC E7 E1 01 00 		      	push 	r3
017F00 E6 ED A1 FF 		      	push 	-48[bp]
017F04 E6 ED B1 FF 		      	push 	-40[bp]
017F08 FC 01 00 00 		      	push 	#disassem_178
017F0C 65 E0 0D 66 
017F10 E6 E5 01 00 		      	push 	[r11]
017F14 B9 BB FE FF 		      	bsr  	DispRI
017F18 14 EF 51 00 		      	addui	sp,sp,#40
017F1C BA 36 01 00 		      	bra  	disassem_241
                	disassem_246:
017F20 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017F24 E7 E1 01 00 		      	push 	r3
017F28 E6 ED A1 FF 		      	push 	-48[bp]
017F2C E6 ED B1 FF 		      	push 	-40[bp]
017F30 FC 01 00 00 		      	push 	#disassem_179
017F34 65 E0 F5 65 
017F38 E6 E5 01 00 		      	push 	[r11]
017F3C B9 B6 FE FF 		      	bsr  	DispRI
017F40 14 EF 51 00 		      	addui	sp,sp,#40
017F44 BA 31 01 00 		      	bra  	disassem_241
                	disassem_247:
017F48 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017F4C E7 E1 01 00 		      	push 	r3
017F50 E6 ED A1 FF 		      	push 	-48[bp]
017F54 E6 ED B1 FF 		      	push 	-40[bp]
017F58 FC 01 00 00 		      	push 	#disassem_180
017F5C 65 E0 DD 65 
017F60 E6 E5 01 00 		      	push 	[r11]
017F64 B9 B1 FE FF 		      	bsr  	DispRI
017F68 14 EF 51 00 		      	addui	sp,sp,#40
017F6C BA 2C 01 00 		      	bra  	disassem_241
                	disassem_248:
017F70 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017F74 E7 E1 01 00 		      	push 	r3
017F78 E6 ED A1 FF 		      	push 	-48[bp]
017F7C E6 ED B1 FF 		      	push 	-40[bp]
017F80 FC 01 00 00 		      	push 	#disassem_181
017F84 65 E0 C5 65 
017F88 E6 E5 01 00 		      	push 	[r11]
017F8C B9 AC FE FF 		      	bsr  	DispRI
017F90 14 EF 51 00 		      	addui	sp,sp,#40
017F94 BA 27 01 00 		      	bra  	disassem_241
                	disassem_249:
017F98 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017F9C E7 E1 01 00 		      	push 	r3
017FA0 E6 ED A1 FF 		      	push 	-48[bp]
017FA4 E6 ED B1 FF 		      	push 	-40[bp]
017FA8 FC 01 00 00 		      	push 	#disassem_182
017FAC 65 E0 AD 65 
017FB0 E6 E5 01 00 		      	push 	[r11]
017FB4 B9 A7 FE FF 		      	bsr  	DispRI
017FB8 14 EF 51 00 		      	addui	sp,sp,#40
017FBC BA 22 01 00 		      	bra  	disassem_241
                	disassem_250:
017FC0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017FC4 E7 E1 01 00 		      	push 	r3
017FC8 E6 ED A1 FF 		      	push 	-48[bp]
017FCC E6 ED B1 FF 		      	push 	-40[bp]
017FD0 FC 01 00 00 		      	push 	#disassem_183
017FD4 65 E0 95 65 
017FD8 E6 E5 01 00 		      	push 	[r11]
017FDC B9 A2 FE FF 		      	bsr  	DispRI
017FE0 14 EF 51 00 		      	addui	sp,sp,#40
017FE4 BA 1D 01 00 		      	bra  	disassem_241
                	disassem_251:
017FE8 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017FEC E7 E1 01 00 		      	push 	r3
017FF0 E6 ED A1 FF 		      	push 	-48[bp]
017FF4 E6 ED B1 FF 		      	push 	-40[bp]
017FF8 FC 01 00 00 		      	push 	#disassem_184
017FFC 65 E0 7D 65 
018000 E6 E5 01 00 		      	push 	[r11]
018004 B9 9D FE FF 		      	bsr  	DispRI
018008 14 EF 51 00 		      	addui	sp,sp,#40
01800C BA 18 01 00 		      	bra  	disassem_241
                	disassem_252:
018010 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018014 E7 E1 01 00 		      	push 	r3
018018 E6 ED A1 FF 		      	push 	-48[bp]
01801C E6 ED B1 FF 		      	push 	-40[bp]
018020 FC 01 00 00 		      	push 	#disassem_185
018024 65 E0 65 65 
018028 E6 E5 01 00 		      	push 	[r11]
01802C B9 98 FE FF 		      	bsr  	DispRI
018030 14 EF 51 00 		      	addui	sp,sp,#40
018034 BA 13 01 00 		      	bra  	disassem_241
                	disassem_253:
018038 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
01803C E7 E1 01 00 		      	push 	r3
018040 E6 ED A1 FF 		      	push 	-48[bp]
018044 E6 ED B1 FF 		      	push 	-40[bp]
018048 FC 01 00 00 		      	push 	#disassem_186
01804C 65 E0 4D 65 
018050 E6 E5 01 00 		      	push 	[r11]
018054 B9 93 FE FF 		      	bsr  	DispRI
018058 14 EF 51 00 		      	addui	sp,sp,#40
01805C BA 0E 01 00 		      	bra  	disassem_241
                	disassem_254:
018060 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018064 E7 E1 01 00 		      	push 	r3
018068 E6 ED A1 FF 		      	push 	-48[bp]
01806C E6 ED B1 FF 		      	push 	-40[bp]
018070 FC 01 00 00 		      	push 	#disassem_187
018074 65 E0 35 65 
018078 E6 E5 01 00 		      	push 	[r11]
01807C B9 8E FE FF 		      	bsr  	DispRI
018080 14 EF 51 00 		      	addui	sp,sp,#40
018084 BA 09 01 00 		      	bra  	disassem_241
                	disassem_255:
018088 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
01808C E7 E1 01 00 		      	push 	r3
018090 E6 ED A1 FF 		      	push 	-48[bp]
018094 E6 ED B1 FF 		      	push 	-40[bp]
018098 FC 01 00 00 		      	push 	#disassem_188
01809C 65 E0 1D 65 
0180A0 E6 E5 01 00 		      	push 	[r11]
0180A4 B9 89 FE FF 		      	bsr  	DispRI
0180A8 14 EF 51 00 		      	addui	sp,sp,#40
0180AC BA 04 01 00 		      	bra  	disassem_241
                	disassem_256:
0180B0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0180B4 E7 E1 01 00 		      	push 	r3
0180B8 E6 ED A1 FF 		      	push 	-48[bp]
0180BC E6 ED B1 FF 		      	push 	-40[bp]
0180C0 FC 01 00 00 		      	push 	#disassem_189
0180C4 65 E0 05 65 
0180C8 E6 E5 01 00 		      	push 	[r11]
0180CC B9 84 FE FF 		      	bsr  	DispRI
0180D0 14 EF 51 00 		      	addui	sp,sp,#40
0180D4 BA FF 00 00 		      	bra  	disassem_241
                	disassem_257:
0180D8 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0180DC 8C 31 FE FF 		      	andi 	r3,r3,#-1
0180E0 82 31 18 78 		      	asri 	r3,r3,#12
0180E4 8C 31 0E 00 		      	and  	r3,r3,#7
0180E8 86 41 00 00 		      	cmp  	r4,r3,#0
0180EC 3D 02 20 00 		      	beq  	r4,disassem_325
0180F0 86 41 02 00 		      	cmp  	r4,r3,#1
0180F4 3D 02 2C 00 		      	beq  	r4,disassem_326
0180F8 86 41 08 00 		      	cmp  	r4,r3,#4
0180FC 3D 02 38 00 		      	beq  	r4,disassem_327
018100 86 41 0A 00 		      	cmp  	r4,r3,#5
018104 3D 02 44 00 		      	beq  	r4,disassem_328
018108 86 41 04 00 		      	cmp  	r4,r3,#2
01810C 3D 02 50 00 		      	beq  	r4,disassem_329
018110 86 41 06 00 		      	cmp  	r4,r3,#3
018114 3D 02 5C 00 		      	beq  	r4,disassem_330
018118 86 41 0C 00 		      	cmp  	r4,r3,#6
01811C 3D 02 68 00 		      	beq  	r4,disassem_331
018120 86 41 0E 00 		      	cmp  	r4,r3,#7
018124 3D 02 64 00 		      	beq  	r4,disassem_331
018128 BA 1C 00 00 		      	bra  	disassem_324
                	disassem_325:
01812C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018130 E7 E1 01 00 		      	push 	r3
018134 FC 01 00 00 		      	push 	#disassem_190
018138 65 E0 ED 64 
01813C E6 E5 01 00 		      	push 	[r11]
018140 39 91 FE FF 		      	bsr  	DispBcc
018144 14 EF 31 00 		      	addui	sp,sp,#24
018148 BA 18 00 00 		      	bra  	disassem_324
                	disassem_326:
01814C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018150 E7 E1 01 00 		      	push 	r3
018154 FC 01 00 00 		      	push 	#disassem_191
018158 65 E0 D5 64 
01815C E6 E5 01 00 		      	push 	[r11]
018160 39 8D FE FF 		      	bsr  	DispBcc
018164 14 EF 31 00 		      	addui	sp,sp,#24
018168 BA 14 00 00 		      	bra  	disassem_324
                	disassem_327:
01816C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018170 E7 E1 01 00 		      	push 	r3
018174 FC 01 00 00 		      	push 	#disassem_192
018178 65 E0 BD 64 
01817C E6 E5 01 00 		      	push 	[r11]
018180 39 89 FE FF 		      	bsr  	DispBcc
018184 14 EF 31 00 		      	addui	sp,sp,#24
018188 BA 10 00 00 		      	bra  	disassem_324
                	disassem_328:
01818C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018190 E7 E1 01 00 		      	push 	r3
018194 FC 01 00 00 		      	push 	#disassem_193
018198 65 E0 A5 64 
01819C E6 E5 01 00 		      	push 	[r11]
0181A0 39 85 FE FF 		      	bsr  	DispBcc
0181A4 14 EF 31 00 		      	addui	sp,sp,#24
0181A8 BA 0C 00 00 		      	bra  	disassem_324
                	disassem_329:
0181AC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0181B0 E7 E1 01 00 		      	push 	r3
0181B4 FC 01 00 00 		      	push 	#disassem_194
0181B8 65 E0 8D 64 
0181BC E6 E5 01 00 		      	push 	[r11]
0181C0 39 81 FE FF 		      	bsr  	DispBcc
0181C4 14 EF 31 00 		      	addui	sp,sp,#24
0181C8 BA 08 00 00 		      	bra  	disassem_324
                	disassem_330:
0181CC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0181D0 E7 E1 01 00 		      	push 	r3
0181D4 FC 01 00 00 		      	push 	#disassem_195
0181D8 65 E0 75 64 
0181DC E6 E5 01 00 		      	push 	[r11]
0181E0 39 7D FE FF 		      	bsr  	DispBcc
0181E4 14 EF 31 00 		      	addui	sp,sp,#24
0181E8 BA 04 00 00 		      	bra  	disassem_324
                	disassem_331:
0181EC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0181F0 E7 E1 01 00 		      	push 	r3
0181F4 FC 01 00 00 		      	push 	#disassem_196
0181F8 65 E0 5D 64 
0181FC E6 E5 01 00 		      	push 	[r11]
018200 39 79 FE FF 		      	bsr  	DispBcc
018204 14 EF 31 00 		      	addui	sp,sp,#24
018208 BA 00 00 00 		      	bra  	disassem_324
                	disassem_324:
01820C BA D8 00 00 		      	bra  	disassem_241
                	disassem_258:
018210 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018214 E7 E1 01 00 		      	push 	r3
018218 39 03 FE FF 		      	bsr  	DispBrk
01821C 14 EF 11 00 		      	addui	sp,sp,#8
018220 3A D6 00 00 		      	bra  	disassem_241
                	disassem_259:
018224 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018228 E7 E1 01 00 		      	push 	r3
01822C E6 E5 01 00 		      	push 	[r11]
018230 39 27 FD FF 		      	bsr  	DumpInsnBytes
018234 14 EF 21 00 		      	addui	sp,sp,#16
018238 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
01823C 8C 31 FE FF 		      	andi 	r3,r3,#-1
018240 82 31 0E 78 		      	asri 	r3,r3,#7
018244 E3 3D 80 FF 		      	sw   	r3,-64[bp]
018248 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
01824C 7C 00 80 FF 		      	and  	r3,r3,#-2147483648
018250 8C 31 00 00 
018254 BD 01 0A 00 		      	beq  	r3,disassem_332
018258 C6 3D 80 FF 		      	lw   	r3,-64[bp]
01825C 7C 00 FF FF 		      	ori  	r3,r3,#-16777216
018260 8D 31 00 00 
018264 E3 3D 80 FF 		      	sw   	r3,-64[bp]
                	disassem_332:
018268 C6 35 00 00 		      	lw   	r3,[r11]
01826C C6 4D 80 FF 		      	lw   	r4,-64[bp]
018270 02 42 04 70 		      	asli 	r4,r4,#2
018274 82 31 08 28 		      	addu 	r3,r3,r4
018278 E3 3D 90 FF 		      	sw   	r3,-56[bp]
01827C E6 ED 91 FF 		      	push 	-56[bp]
018280 FC 01 00 00 		      	push 	#disassem_197
018284 65 E0 2D 64 
018288 B9 FB FB FF 		      	bsr  	printf
01828C 14 EF 21 00 		      	addui	sp,sp,#16
018290 3A C8 00 00 		      	bra  	disassem_241
                	disassem_260:
018294 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018298 E7 E1 01 00 		      	push 	r3
01829C E6 E5 01 00 		      	push 	[r11]
0182A0 39 19 FD FF 		      	bsr  	DumpInsnBytes
0182A4 14 EF 21 00 		      	addui	sp,sp,#16
0182A8 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0182AC 8C 31 FE FF 		      	andi 	r3,r3,#-1
0182B0 82 31 0E 78 		      	asri 	r3,r3,#7
0182B4 E3 3D 80 FF 		      	sw   	r3,-64[bp]
0182B8 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0182BC 7C 00 80 FF 		      	and  	r3,r3,#-2147483648
0182C0 8C 31 00 00 
0182C4 BD 01 0A 00 		      	beq  	r3,disassem_334
0182C8 C6 3D 80 FF 		      	lw   	r3,-64[bp]
0182CC 7C 00 FF FF 		      	ori  	r3,r3,#-16777216
0182D0 8D 31 00 00 
0182D4 E3 3D 80 FF 		      	sw   	r3,-64[bp]
                	disassem_334:
0182D8 C6 35 00 00 		      	lw   	r3,[r11]
0182DC C6 4D 80 FF 		      	lw   	r4,-64[bp]
0182E0 02 42 04 70 		      	asli 	r4,r4,#2
0182E4 82 31 08 28 		      	addu 	r3,r3,r4
0182E8 E3 3D 90 FF 		      	sw   	r3,-56[bp]
0182EC E6 ED 91 FF 		      	push 	-56[bp]
0182F0 FC 01 00 00 		      	push 	#disassem_198
0182F4 65 E0 FD 63 
0182F8 B9 ED FB FF 		      	bsr  	printf
0182FC 14 EF 21 00 		      	addui	sp,sp,#16
018300 3A BA 00 00 		      	bra  	disassem_241
                	disassem_261:
018304 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018308 E7 E1 01 00 		      	push 	r3
01830C E6 E5 01 00 		      	push 	[r11]
018310 39 0B FD FF 		      	bsr  	DumpInsnBytes
018314 14 EF 21 00 		      	addui	sp,sp,#16
018318 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
01831C 8C 31 FE FF 		      	andi 	r3,r3,#-1
018320 82 31 22 78 		      	asri 	r3,r3,#17
018324 E3 3D 90 FF 		      	sw   	r3,-56[bp]
018328 E6 ED 91 FF 		      	push 	-56[bp]
01832C FC 01 00 00 		      	push 	#disassem_199
018330 65 E0 CD 63 
018334 39 E6 FB FF 		      	bsr  	printf
018338 14 EF 21 00 		      	addui	sp,sp,#16
01833C BA B2 00 00 		      	bra  	disassem_241
                	disassem_262:
018340 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018344 E7 E1 01 00 		      	push 	r3
018348 E6 E5 01 00 		      	push 	[r11]
01834C B9 03 FD FF 		      	bsr  	DumpInsnBytes
018350 14 EF 21 00 		      	addui	sp,sp,#16
018354 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018358 8C 31 FE FF 		      	andi 	r3,r3,#-1
01835C 82 31 22 78 		      	asri 	r3,r3,#17
018360 E3 3D 90 FF 		      	sw   	r3,-56[bp]
018364 E6 ED 91 FF 		      	push 	-56[bp]
018368 FC 01 00 00 		      	push 	#disassem_200
01836C 65 E0 9D 63 
018370 B9 DE FB FF 		      	bsr  	printf
018374 14 EF 21 00 		      	addui	sp,sp,#16
018378 3A AB 00 00 		      	bra  	disassem_241
                	disassem_263:
01837C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018380 E7 E1 01 00 		      	push 	r3
018384 E6 ED A1 FF 		      	push 	-48[bp]
018388 E6 ED B1 FF 		      	push 	-40[bp]
01838C FC 01 00 00 		      	push 	#disassem_201
018390 65 E0 85 63 
018394 E6 E5 01 00 		      	push 	[r11]
018398 B9 1B FE FF 		      	bsr  	DispLS
01839C 14 EF 51 00 		      	addui	sp,sp,#40
0183A0 3A A6 00 00 		      	bra  	disassem_241
                	disassem_264:
0183A4 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0183A8 E7 E1 01 00 		      	push 	r3
0183AC E6 ED A1 FF 		      	push 	-48[bp]
0183B0 E6 ED B1 FF 		      	push 	-40[bp]
0183B4 FC 01 00 00 		      	push 	#disassem_202
0183B8 65 E0 6D 63 
0183BC E6 E5 01 00 		      	push 	[r11]
0183C0 B9 16 FE FF 		      	bsr  	DispLS
0183C4 14 EF 51 00 		      	addui	sp,sp,#40
0183C8 3A A1 00 00 		      	bra  	disassem_241
                	disassem_265:
0183CC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0183D0 E7 E1 01 00 		      	push 	r3
0183D4 E6 ED A1 FF 		      	push 	-48[bp]
0183D8 E6 ED B1 FF 		      	push 	-40[bp]
0183DC FC 01 00 00 		      	push 	#disassem_203
0183E0 65 E0 55 63 
0183E4 E6 E5 01 00 		      	push 	[r11]
0183E8 B9 11 FE FF 		      	bsr  	DispLS
0183EC 14 EF 51 00 		      	addui	sp,sp,#40
0183F0 3A 9C 00 00 		      	bra  	disassem_241
                	disassem_266:
0183F4 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0183F8 E7 E1 01 00 		      	push 	r3
0183FC E6 ED A1 FF 		      	push 	-48[bp]
018400 E6 ED B1 FF 		      	push 	-40[bp]
018404 FC 01 00 00 		      	push 	#disassem_204
018408 65 E0 3D 63 
01840C E6 E5 01 00 		      	push 	[r11]
018410 B9 0C FE FF 		      	bsr  	DispLS
018414 14 EF 51 00 		      	addui	sp,sp,#40
018418 3A 97 00 00 		      	bra  	disassem_241
                	disassem_267:
01841C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018420 E7 E1 01 00 		      	push 	r3
018424 E6 ED A1 FF 		      	push 	-48[bp]
018428 E6 ED B1 FF 		      	push 	-40[bp]
01842C FC 01 00 00 		      	push 	#disassem_205
018430 65 E0 25 63 
018434 E6 E5 01 00 		      	push 	[r11]
018438 B9 07 FE FF 		      	bsr  	DispLS
01843C 14 EF 51 00 		      	addui	sp,sp,#40
018440 3A 92 00 00 		      	bra  	disassem_241
                	disassem_268:
018444 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018448 E7 E1 01 00 		      	push 	r3
01844C E6 ED A1 FF 		      	push 	-48[bp]
018450 E6 ED B1 FF 		      	push 	-40[bp]
018454 FC 01 00 00 		      	push 	#disassem_206
018458 65 E0 0D 63 
01845C E6 E5 01 00 		      	push 	[r11]
018460 B9 02 FE FF 		      	bsr  	DispLS
018464 14 EF 51 00 		      	addui	sp,sp,#40
018468 3A 8D 00 00 		      	bra  	disassem_241
                	disassem_269:
01846C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018470 E7 E1 01 00 		      	push 	r3
018474 E6 ED A1 FF 		      	push 	-48[bp]
018478 E6 ED B1 FF 		      	push 	-40[bp]
01847C FC 01 00 00 		      	push 	#disassem_207
018480 65 E0 F5 62 
018484 E6 E5 01 00 		      	push 	[r11]
018488 B9 FD FD FF 		      	bsr  	DispLS
01848C 14 EF 51 00 		      	addui	sp,sp,#40
018490 3A 88 00 00 		      	bra  	disassem_241
                	disassem_270:
018494 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018498 E7 E1 01 00 		      	push 	r3
01849C E6 ED A1 FF 		      	push 	-48[bp]
0184A0 E6 ED B1 FF 		      	push 	-40[bp]
0184A4 FC 01 00 00 		      	push 	#disassem_208
0184A8 65 E0 DD 62 
0184AC E6 E5 01 00 		      	push 	[r11]
0184B0 B9 F8 FD FF 		      	bsr  	DispLS
0184B4 14 EF 51 00 		      	addui	sp,sp,#40
0184B8 3A 83 00 00 		      	bra  	disassem_241
                	disassem_271:
0184BC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0184C0 E7 E1 01 00 		      	push 	r3
0184C4 FC 01 00 00 		      	push 	#disassem_209
0184C8 65 E0 C5 62 
0184CC E6 E5 01 00 		      	push 	[r11]
0184D0 B9 C7 FD FF 		      	bsr  	DispIndexedAddr
0184D4 14 EF 31 00 		      	addui	sp,sp,#24
0184D8 3A 7F 00 00 		      	bra  	disassem_241
                	disassem_272:
0184DC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0184E0 E7 E1 01 00 		      	push 	r3
0184E4 FC 01 00 00 		      	push 	#disassem_210
0184E8 65 E0 AD 62 
0184EC E6 E5 01 00 		      	push 	[r11]
0184F0 B9 C3 FD FF 		      	bsr  	DispIndexedAddr
0184F4 14 EF 31 00 		      	addui	sp,sp,#24
0184F8 3A 7B 00 00 		      	bra  	disassem_241
                	disassem_273:
0184FC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018500 E7 E1 01 00 		      	push 	r3
018504 FC 01 00 00 		      	push 	#disassem_211
018508 65 E0 95 62 
01850C E6 E5 01 00 		      	push 	[r11]
018510 B9 BF FD FF 		      	bsr  	DispIndexedAddr
018514 14 EF 31 00 		      	addui	sp,sp,#24
018518 3A 77 00 00 		      	bra  	disassem_241
                	disassem_274:
01851C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018520 E7 E1 01 00 		      	push 	r3
018524 FC 01 00 00 		      	push 	#disassem_212
018528 65 E0 7D 62 
01852C E6 E5 01 00 		      	push 	[r11]
018530 B9 BB FD FF 		      	bsr  	DispIndexedAddr
018534 14 EF 31 00 		      	addui	sp,sp,#24
018538 3A 73 00 00 		      	bra  	disassem_241
                	disassem_275:
01853C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018540 E7 E1 01 00 		      	push 	r3
018544 FC 01 00 00 		      	push 	#disassem_213
018548 65 E0 65 62 
01854C E6 E5 01 00 		      	push 	[r11]
018550 B9 B7 FD FF 		      	bsr  	DispIndexedAddr
018554 14 EF 31 00 		      	addui	sp,sp,#24
018558 3A 6F 00 00 		      	bra  	disassem_241
                	disassem_276:
01855C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018560 E7 E1 01 00 		      	push 	r3
018564 FC 01 00 00 		      	push 	#disassem_214
018568 65 E0 4D 62 
01856C E6 E5 01 00 		      	push 	[r11]
018570 B9 B3 FD FF 		      	bsr  	DispIndexedAddr
018574 14 EF 31 00 		      	addui	sp,sp,#24
018578 3A 6B 00 00 		      	bra  	disassem_241
                	disassem_277:
01857C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018580 E7 E1 01 00 		      	push 	r3
018584 FC 01 00 00 		      	push 	#disassem_215
018588 65 E0 35 62 
01858C E6 E5 01 00 		      	push 	[r11]
018590 B9 AF FD FF 		      	bsr  	DispIndexedAddr
018594 14 EF 31 00 		      	addui	sp,sp,#24
018598 3A 67 00 00 		      	bra  	disassem_241
                	disassem_278:
01859C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0185A0 E7 E1 01 00 		      	push 	r3
0185A4 FC 01 00 00 		      	push 	#disassem_216
0185A8 65 E0 1D 62 
0185AC E6 E5 01 00 		      	push 	[r11]
0185B0 B9 AB FD FF 		      	bsr  	DispIndexedAddr
0185B4 14 EF 31 00 		      	addui	sp,sp,#24
0185B8 3A 63 00 00 		      	bra  	disassem_241
                	disassem_279:
0185BC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0185C0 E7 E1 01 00 		      	push 	r3
0185C4 E6 E5 01 00 		      	push 	[r11]
0185C8 39 B4 FC FF 		      	bsr  	DumpInsnBytes
0185CC 14 EF 21 00 		      	addui	sp,sp,#16
0185D0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0185D4 E7 E1 01 00 		      	push 	r3
0185D8 E6 ED A1 FF 		      	push 	-48[bp]
0185DC E6 ED B1 FF 		      	push 	-40[bp]
0185E0 39 53 FD FF 		      	bsr  	DispInc
0185E4 14 EF 31 00 		      	addui	sp,sp,#24
0185E8 3A 5D 00 00 		      	bra  	disassem_241
                	disassem_280:
0185EC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0185F0 E7 E1 01 00 		      	push 	r3
0185F4 E6 ED A1 FF 		      	push 	-48[bp]
0185F8 E6 ED B1 FF 		      	push 	-40[bp]
0185FC FC 01 00 00 		      	push 	#disassem_217
018600 65 E0 05 62 
018604 E6 E5 01 00 		      	push 	[r11]
018608 B9 CD FD FF 		      	bsr  	DispLS
01860C 14 EF 51 00 		      	addui	sp,sp,#40
018610 3A 58 00 00 		      	bra  	disassem_241
                	disassem_281:
018614 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018618 E7 E1 01 00 		      	push 	r3
01861C E6 ED A1 FF 		      	push 	-48[bp]
018620 E6 ED B1 FF 		      	push 	-40[bp]
018624 FC 01 00 00 		      	push 	#disassem_218
018628 65 E0 ED 61 
01862C E6 E5 01 00 		      	push 	[r11]
018630 B9 C8 FD FF 		      	bsr  	DispLS
018634 14 EF 51 00 		      	addui	sp,sp,#40
018638 3A 53 00 00 		      	bra  	disassem_241
                	disassem_282:
01863C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018640 E7 E1 01 00 		      	push 	r3
018644 E6 ED A1 FF 		      	push 	-48[bp]
018648 E6 ED B1 FF 		      	push 	-40[bp]
01864C FC 01 00 00 		      	push 	#disassem_219
018650 65 E0 D5 61 
018654 E6 E5 01 00 		      	push 	[r11]
018658 B9 C3 FD FF 		      	bsr  	DispLS
01865C 14 EF 51 00 		      	addui	sp,sp,#40
018660 3A 4E 00 00 		      	bra  	disassem_241
                	disassem_283:
018664 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018668 E7 E1 01 00 		      	push 	r3
01866C E6 ED A1 FF 		      	push 	-48[bp]
018670 E6 ED B1 FF 		      	push 	-40[bp]
018674 FC 01 00 00 		      	push 	#disassem_220
018678 65 E0 BD 61 
01867C E6 E5 01 00 		      	push 	[r11]
018680 B9 BE FD FF 		      	bsr  	DispLS
018684 14 EF 51 00 		      	addui	sp,sp,#40
018688 3A 49 00 00 		      	bra  	disassem_241
                	disassem_284:
01868C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018690 E7 E1 01 00 		      	push 	r3
018694 FC 01 00 00 		      	push 	#disassem_221
018698 65 E0 A5 61 
01869C E6 E5 01 00 		      	push 	[r11]
0186A0 B9 8D FD FF 		      	bsr  	DispIndexedAddr
0186A4 14 EF 31 00 		      	addui	sp,sp,#24
0186A8 3A 45 00 00 		      	bra  	disassem_241
                	disassem_285:
0186AC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0186B0 E7 E1 01 00 		      	push 	r3
0186B4 FC 01 00 00 		      	push 	#disassem_222
0186B8 65 E0 8D 61 
0186BC E6 E5 01 00 		      	push 	[r11]
0186C0 B9 89 FD FF 		      	bsr  	DispIndexedAddr
0186C4 14 EF 31 00 		      	addui	sp,sp,#24
0186C8 3A 41 00 00 		      	bra  	disassem_241
                	disassem_286:
0186CC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0186D0 E7 E1 01 00 		      	push 	r3
0186D4 FC 01 00 00 		      	push 	#disassem_223
0186D8 65 E0 75 61 
0186DC E6 E5 01 00 		      	push 	[r11]
0186E0 B9 85 FD FF 		      	bsr  	DispIndexedAddr
0186E4 14 EF 31 00 		      	addui	sp,sp,#24
0186E8 3A 3D 00 00 		      	bra  	disassem_241
                	disassem_287:
0186EC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0186F0 E7 E1 01 00 		      	push 	r3
0186F4 FC 01 00 00 		      	push 	#disassem_224
0186F8 65 E0 5D 61 
0186FC E6 E5 01 00 		      	push 	[r11]
018700 B9 81 FD FF 		      	bsr  	DispIndexedAddr
018704 14 EF 31 00 		      	addui	sp,sp,#24
018708 3A 39 00 00 		      	bra  	disassem_241
                	disassem_288:
01870C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018710 E7 E1 01 00 		      	push 	r3
018714 E6 ED A1 FF 		      	push 	-48[bp]
018718 E6 ED B1 FF 		      	push 	-40[bp]
01871C FC 01 00 00 		      	push 	#disassem_225
018720 65 E0 45 61 
018724 E6 E5 01 00 		      	push 	[r11]
018728 B9 A9 FD FF 		      	bsr  	DispLS
01872C 14 EF 51 00 		      	addui	sp,sp,#40
018730 3A 34 00 00 		      	bra  	disassem_241
                	disassem_289:
018734 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018738 E7 E1 01 00 		      	push 	r3
01873C E6 ED A1 FF 		      	push 	-48[bp]
018740 E6 ED B1 FF 		      	push 	-40[bp]
018744 FC 01 00 00 		      	push 	#disassem_226
018748 65 E0 2D 61 
01874C E6 E5 01 00 		      	push 	[r11]
018750 B9 A4 FD FF 		      	bsr  	DispLS
018754 14 EF 51 00 		      	addui	sp,sp,#40
018758 3A 2F 00 00 		      	bra  	disassem_241
                	disassem_290:
01875C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018760 E7 E1 01 00 		      	push 	r3
018764 E6 E5 01 00 		      	push 	[r11]
018768 39 80 FC FF 		      	bsr  	DumpInsnBytes
01876C 14 EF 21 00 		      	addui	sp,sp,#16
018770 FC 01 00 00 		      	push 	#disassem_227
018774 65 E0 11 61 
018778 B9 5D FB FF 		      	bsr  	printf
01877C 14 EF 11 00 		      	addui	sp,sp,#8
018780 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018784 E7 E1 01 00 		      	push 	r3
018788 39 AE FC FF 		      	bsr  	DispRa
01878C 14 EF 11 00 		      	addui	sp,sp,#8
018790 FC 01 00 00 		      	push 	#disassem_228
018794 65 E0 05 61 
018798 B9 59 FB FF 		      	bsr  	printf
01879C 14 EF 11 00 		      	addui	sp,sp,#8
0187A0 3A 26 00 00 		      	bra  	disassem_241
                	disassem_291:
0187A4 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0187A8 E7 E1 01 00 		      	push 	r3
0187AC E6 E5 01 00 		      	push 	[r11]
0187B0 39 77 FC FF 		      	bsr  	DumpInsnBytes
0187B4 14 EF 21 00 		      	addui	sp,sp,#16
0187B8 FC 01 00 00 		      	push 	#disassem_229
0187BC 65 E0 E9 60 
0187C0 B9 54 FB FF 		      	bsr  	printf
0187C4 14 EF 11 00 		      	addui	sp,sp,#8
0187C8 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0187CC E7 E1 01 00 		      	push 	r3
0187D0 39 84 FC FF 		      	bsr  	DispRst
0187D4 14 EF 11 00 		      	addui	sp,sp,#8
0187D8 FC 01 00 00 		      	push 	#disassem_230
0187DC 65 E0 DD 60 
0187E0 B9 50 FB FF 		      	bsr  	printf
0187E4 14 EF 11 00 		      	addui	sp,sp,#8
0187E8 3A 1D 00 00 		      	bra  	disassem_241
                	disassem_292:
0187EC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0187F0 E7 E1 01 00 		      	push 	r3
0187F4 E6 E5 01 00 		      	push 	[r11]
0187F8 39 6E FC FF 		      	bsr  	DumpInsnBytes
0187FC 14 EF 21 00 		      	addui	sp,sp,#16
018800 FC 01 00 00 		      	push 	#disassem_231
018804 65 E0 C5 60 
018808 B9 4B FB FF 		      	bsr  	printf
01880C 14 EF 11 00 		      	addui	sp,sp,#8
018810 3A 18 00 00 		      	bra  	disassem_241
                	disassem_293:
018814 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018818 E7 E1 01 00 		      	push 	r3
01881C E6 E5 01 00 		      	push 	[r11]
018820 39 69 FC FF 		      	bsr  	DumpInsnBytes
018824 14 EF 21 00 		      	addui	sp,sp,#16
018828 FC 01 00 00 		      	push 	#disassem_232
01882C 65 E0 A9 60 
018830 B9 46 FB FF 		      	bsr  	printf
018834 14 EF 11 00 		      	addui	sp,sp,#8
018838 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
01883C E7 E1 01 00 		      	push 	r3
018840 39 81 FC FF 		      	bsr  	DispRstc
018844 14 EF 11 00 		      	addui	sp,sp,#8
018848 C6 3D B0 FF 		      	lw   	r3,-40[bp]
01884C BD 01 1A 00 		      	beq  	r3,disassem_336
018850 C6 3D A0 FF 		      	lw   	r3,-48[bp]
018854 82 31 1E 70 		      	asli 	r3,r3,#15
018858 C5 4D E8 FF 		      	lhu  	r4,-12[bp]
01885C 0C 42 FE FF 		      	andi 	r4,r4,#-1
018860 02 42 22 78 		      	asri 	r4,r4,#17
018864 82 31 08 1A 		      	or   	r3,r3,r4
018868 E7 E1 01 00 		      	push 	r3
01886C FC 01 00 00 		      	push 	#disassem_233
018870 65 E0 8D 60 
018874 39 3E FB FF 		      	bsr  	printf
018878 14 EF 21 00 		      	addui	sp,sp,#16
01887C 3A 05 00 00 		      	bra  	disassem_337
                	disassem_336:
018880 C4 3D 68 FF 		      	lh   	r3,-76[bp]
018884 82 31 00 24 		      	sxh  	r3,r3
018888 82 31 00 24 		      	sxh  	r3,r3
01888C 82 31 22 78 		      	asri 	r3,r3,#17
018890 E7 E1 01 00 		      	push 	r3
018894 FC 01 00 00 		      	push 	#disassem_234
018898 65 E0 71 60 
01889C 39 39 FB FF 		      	bsr  	printf
0188A0 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_337:
0188A4 BA 05 00 00 		      	bra  	disassem_241
                	disassem_294:
0188A8 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0188AC E7 E1 01 00 		      	push 	r3
0188B0 E6 E5 01 00 		      	push 	[r11]
0188B4 B9 56 FC FF 		      	bsr  	DumpInsnBytes
0188B8 14 EF 21 00 		      	addui	sp,sp,#16
0188BC FC 01 00 00 		      	push 	#disassem_235
0188C0 65 E0 51 60 
0188C4 39 34 FB FF 		      	bsr  	printf
0188C8 14 EF 11 00 		      	addui	sp,sp,#8
0188CC BA 00 00 00 		      	bra  	disassem_241
                	disassem_241:
0188D0 C6 35 00 00 		      	lw   	r3,[r11]
0188D4 94 31 08 00 		      	addu 	r3,r3,#4
0188D8 E3 35 00 00 		      	sw   	r3,[r11]
0188DC C6 3D 40 FF 		      	lw   	r3,-96[bp]
0188E0 BD 01 06 00 		      	beq  	r3,disassem_338
0188E4 39 40 FC FF 		      	bsr  	reverse_video
0188E8 E3 0D 40 FF 		      	sw   	r0,-96[bp]
                	disassem_338:
0188EC C6 3D D0 FF 		      	lw   	r3,-24[bp]
0188F0 86 31 F8 00 		      	cmp  	r3,r3,#124
0188F4 BD 01 7C F7 		      	beq  	r3,disassem_237
                	disassem_238:
                	disassem_340:
0188F8 57 CF 10 00 		      	pop  	r12
0188FC 57 BF 10 00 		      	pop  	r11
018900 82 ED 01 1A 		      	mov  	sp,bp
018904 57 BF 11 00 		      	pop  	bp
018908 57 CF 11 00 		      	pop  	xlr
01890C 57 FF 11 00 		      	pop  	lr
018910 37 FF 01 00 		      	rtl  	#0
                	disassem_236:
018914 C6 FD 11 00 		      	lw   	lr,8[bp]
018918 E3 FD 21 00 		      	sw   	lr,16[bp]
01891C BA FB FF FF 		      	bra  	disassem_340
                	endpublic
                	
                	public code disassem20:
018920 E7 EF 01 00 		      	push 	lr
018924 67 EE 01 00 		      	push 	xlr
018928 E7 ED 01 00 		      	push 	bp
01892C FC 01 00 00 		      	ldi  	xlr,#disassem_342
018930 0A C0 11 13 
018934 02 BF 01 1A 		      	mov  	bp,sp
018938 15 EF 21 00 		      	subui	sp,sp,#16
01893C FC 01 00 00 		      	push 	#disassem_341
018940 65 E0 21 60 
018944 39 24 FB FF 		      	bsr  	printf
018948 14 EF 11 00 		      	addui	sp,sp,#8
01894C E3 0D F0 FF 		      	sw   	r0,-8[bp]
                	disassem_343:
018950 C6 3D F0 FF 		      	lw   	r3,-8[bp]
018954 86 31 20 00 		      	cmp  	r3,r3,#16
018958 BD 31 0E 00 		      	bge  	r3,disassem_344
01895C E6 ED 41 00 		      	push 	32[bp]
018960 E5 ED 31 00 		      	pea  	24[bp]
018964 39 C9 FD FF 		      	bsr  	disassem
018968 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_345:
01896C E4 1D F0 FF 		      	inc  	-8[bp],#1
018970 3A FC FF FF 		      	bra  	disassem_343
                	disassem_344:
                	disassem_346:
018974 82 ED 01 1A 		      	mov  	sp,bp
018978 57 BF 11 00 		      	pop  	bp
01897C 57 CF 11 00 		      	pop  	xlr
018980 57 FF 11 00 		      	pop  	lr
018984 37 FF 01 00 		      	rtl  	#0
                	disassem_342:
018988 C6 FD 11 00 		      	lw   	lr,8[bp]
01898C E3 FD 21 00 		      	sw   	lr,16[bp]
018990 BA FC FF FF 		      	bra  	disassem_346
                	endpublic
                	
                		code
018994 00 00 00 00 		align	1
018998 00 00 00 00 
01899C 00 00 00 00 
                	
                	dbg_DisplayHelp:
0189A0 E7 EF 01 00 		      	push 	lr
0189A4 67 EE 01 00 		      	push 	xlr
0189A8 E7 ED 01 00 		      	push 	bp
0189AC FC 01 00 00 		      	ldi  	xlr,#debugger_16
0189B0 0A C0 79 15 
0189B4 02 BF 01 1A 		      	mov  	bp,sp
0189B8 FC 01 00 00 		      	push 	#debugger_1
0189BC 65 E0 DD 7E 
0189C0 B9 14 FB FF 		      	bsr  	printf
0189C4 14 EF 11 00 		      	addui	sp,sp,#8
0189C8 FC 01 00 00 		      	push 	#debugger_2
0189CC 65 E0 B5 7E 
0189D0 B9 12 FB FF 		      	bsr  	printf
0189D4 14 EF 11 00 		      	addui	sp,sp,#8
0189D8 FC 01 00 00 		      	push 	#debugger_3
0189DC 65 E0 D9 7D 
0189E0 B9 10 FB FF 		      	bsr  	printf
0189E4 14 EF 11 00 		      	addui	sp,sp,#8
0189E8 FC 01 00 00 		      	push 	#debugger_4
0189EC 65 E0 89 7D 
0189F0 B9 0E FB FF 		      	bsr  	printf
0189F4 14 EF 11 00 		      	addui	sp,sp,#8
0189F8 FC 01 00 00 		      	push 	#debugger_5
0189FC 65 E0 C5 7C 
018A00 B9 0C FB FF 		      	bsr  	printf
018A04 14 EF 11 00 		      	addui	sp,sp,#8
018A08 FC 01 00 00 		      	push 	#debugger_6
018A0C 65 E0 E5 7B 
018A10 B9 0A FB FF 		      	bsr  	printf
018A14 14 EF 11 00 		      	addui	sp,sp,#8
018A18 FC 01 00 00 		      	push 	#debugger_7
018A1C 65 E0 05 7B 
018A20 B9 08 FB FF 		      	bsr  	printf
018A24 14 EF 11 00 		      	addui	sp,sp,#8
018A28 FC 01 00 00 		      	push 	#debugger_8
018A2C 65 E0 31 7A 
018A30 B9 06 FB FF 		      	bsr  	printf
018A34 14 EF 11 00 		      	addui	sp,sp,#8
018A38 FC 01 00 00 		      	push 	#debugger_9
018A3C 65 E0 59 79 
018A40 B9 04 FB FF 		      	bsr  	printf
018A44 14 EF 11 00 		      	addui	sp,sp,#8
018A48 FC 01 00 00 		      	push 	#debugger_10
018A4C 65 E0 B5 78 
018A50 B9 02 FB FF 		      	bsr  	printf
018A54 14 EF 11 00 		      	addui	sp,sp,#8
018A58 FC 01 00 00 		      	push 	#debugger_11
018A5C 65 E0 D5 77 
018A60 B9 00 FB FF 		      	bsr  	printf
018A64 14 EF 11 00 		      	addui	sp,sp,#8
018A68 FC 01 00 00 		      	push 	#debugger_12
018A6C 65 E0 F9 76 
018A70 B9 FE FA FF 		      	bsr  	printf
018A74 14 EF 11 00 		      	addui	sp,sp,#8
018A78 FC 01 00 00 		      	push 	#debugger_13
018A7C 65 E0 49 76 
018A80 B9 FC FA FF 		      	bsr  	printf
018A84 14 EF 11 00 		      	addui	sp,sp,#8
018A88 FC 01 00 00 		      	push 	#debugger_14
018A8C 65 E0 F9 75 
018A90 B9 FA FA FF 		      	bsr  	printf
018A94 14 EF 11 00 		      	addui	sp,sp,#8
018A98 FC 01 00 00 		      	push 	#debugger_15
018A9C 65 E0 DD 75 
018AA0 B9 F8 FA FF 		      	bsr  	printf
018AA4 14 EF 11 00 		      	addui	sp,sp,#8
                	debugger_17:
018AA8 82 ED 01 1A 		      	mov  	sp,bp
018AAC 57 BF 11 00 		      	pop  	bp
018AB0 57 CF 11 00 		      	pop  	xlr
018AB4 57 FF 11 00 		      	pop  	lr
018AB8 37 FF 01 00 		      	rtl  	#0
                	debugger_16:
018ABC C6 FD 11 00 		      	lw   	lr,8[bp]
018AC0 E3 FD 21 00 		      	sw   	lr,16[bp]
018AC4 BA FC FF FF 		      	bra  	debugger_17
                	public code GetVBR:
018AC8 15 EF 21 00 		      	subui	sp,sp,#16
018ACC E7 ED 01 00 		      	push 	bp
018AD0 02 BF 01 1A 		      	mov  	bp,sp
018AD4 02 10 14 3E 		      	     	        mfspr r1,vbr
                	    
                	debugger_19:
018AD8 82 ED 01 1A 		      	mov  	sp,bp
018ADC 57 BF 11 00 		      	pop  	bp
018AE0 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code set_vector:
018AE4 E7 EF 01 00 		      	push 	lr
018AE8 67 EE 01 00 		      	push 	xlr
018AEC E7 ED 01 00 		      	push 	bp
018AF0 FC 01 00 00 		      	ldi  	xlr,#debugger_20
018AF4 0A C0 B1 16 
018AF8 02 BF 01 1A 		      	mov  	bp,sp
018AFC C6 3D 30 00 		      	lw   	r3,24[bp]
018B00 96 31 FE 03 		      	cmpu 	r3,r3,#511
018B04 BD 51 0C 00 		      	ble  	r3,debugger_21
                	debugger_23:
018B08 82 ED 01 1A 		      	mov  	sp,bp
018B0C 57 BF 11 00 		      	pop  	bp
018B10 57 CF 11 00 		      	pop  	xlr
018B14 57 FF 11 00 		      	pop  	lr
018B18 37 FF 01 00 		      	rtl  	#0
                	debugger_21:
018B1C C6 3D 40 00 		      	lw   	r3,32[bp]
018B20 BD 01 08 00 		      	beq  	r3,debugger_26
018B24 C6 3D 40 00 		      	lw   	r3,32[bp]
018B28 8C 31 06 00 		      	and  	r3,r3,#3
018B2C BD 01 04 00 		      	beq  	r3,debugger_24
                	debugger_26:
018B30 3A FB FF FF 		      	bra  	debugger_23
                	debugger_24:
018B34 C6 3D 30 00 		      	lw   	r3,24[bp]
018B38 82 31 06 70 		      	asli 	r3,r3,#3
018B3C E7 E1 01 00 		      	push 	r3
018B40 39 F1 FF FF 		      	bsr  	GetVBR
018B44 57 3F 10 00 		      	pop  	r3
018B48 82 40 00 1A 		      	mov  	r4,r1
018B4C C6 5D 40 00 		      	lw   	r5,32[bp]
018B50 6B 52 06 00 		      	sw   	r5,0[r4+r3]
018B54 BA F6 FF FF 		      	bra  	debugger_23
                	debugger_20:
018B58 C6 FD 11 00 		      	lw   	lr,8[bp]
018B5C E3 FD 21 00 		      	sw   	lr,16[bp]
018B60 3A F5 FF FF 		      	bra  	debugger_23
                	endpublic
                	
                	public code dbg_GetCursorRow:
018B64 15 EF 21 00 		      	subui	sp,sp,#16
018B68 E7 ED 01 00 		      	push 	bp
018B6C 02 BF 01 1A 		      	mov  	bp,sp
018B70 0A 60 06 00 		      	     	        ldi    r6,#3   ; Get cursor position
018B74 38 0F 34 03 	        sys    #410
                	    
                	debugger_28:
018B78 82 ED 01 1A 		      	mov  	sp,bp
018B7C 57 BF 11 00 		      	pop  	bp
018B80 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code dbg_GetCursorCol:
018B84 15 EF 21 00 		      	subui	sp,sp,#16
018B88 E7 ED 01 00 		      	push 	bp
018B8C 02 BF 01 1A 		      	mov  	bp,sp
018B90 0A 60 06 00 		      	     	        ldi    r6,#3
018B94 38 0F 34 03 	        sys    #410
018B98 02 11 00 1A 	        mov    r1,r2
                	    
                	debugger_30:
018B9C 82 ED 01 1A 		      	mov  	sp,bp
018BA0 57 BF 11 00 		      	pop  	bp
018BA4 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code dbg_HomeCursor:
018BA8 15 EF 21 00 		      	subui	sp,sp,#16
018BAC E7 ED 01 00 		      	push 	bp
018BB0 02 BF 01 1A 		      	mov  	bp,sp
018BB4 0A 60 04 00 		      	     	         ldi   r6,#2
018BB8 0A 10 00 00 	         ldi   r1,#0
018BBC 0A 20 00 00 	         ldi   r2,#0
018BC0 38 0F 34 03 	         sys   #410
                	     
                	debugger_32:
018BC4 82 ED 01 1A 		      	mov  	sp,bp
018BC8 57 BF 11 00 		      	pop  	bp
018BCC 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code dbg_GetDBAD:
018BD0 15 EF 21 00 		      	subui	sp,sp,#16
018BD4 E7 ED 01 00 		      	push 	bp
018BD8 02 BF 01 1A 		      	mov  	bp,sp
018BDC C6 3D 30 00 		      	lw   	r3,24[bp]
018BE0 86 41 00 00 		      	cmp  	r4,r3,#0
018BE4 3D 02 10 00 		      	beq  	r4,debugger_35
018BE8 86 41 02 00 		      	cmp  	r4,r3,#1
018BEC 3D 02 10 00 		      	beq  	r4,debugger_36
018BF0 86 41 04 00 		      	cmp  	r4,r3,#2
018BF4 3D 02 10 00 		      	beq  	r4,debugger_37
018BF8 86 41 06 00 		      	cmp  	r4,r3,#3
018BFC 3D 02 10 00 		      	beq  	r4,debugger_38
018C00 3A 06 00 00 		      	bra  	debugger_34
                	debugger_35:
018C04 02 10 64 3E 		      	     	mfspr  r1,dbad0  
018C08 3A 05 00 00 		      	bra  	debugger_34
                	debugger_36:
018C0C 02 10 66 3E 		      	     	mfspr  r1,dbad1  
018C10 3A 04 00 00 		      	bra  	debugger_34
                	debugger_37:
018C14 02 10 68 3E 		      	     	mfspr  r1,dbad2  
018C18 3A 03 00 00 		      	bra  	debugger_34
                	debugger_38:
018C1C 02 10 6A 3E 		      	     	mfspr  r1,dbad3  
018C20 3A 02 00 00 		      	bra  	debugger_34
                	debugger_39:
018C24 82 ED 01 1A 		      	mov  	sp,bp
018C28 57 BF 11 00 		      	pop  	bp
018C2C 37 FF 21 00 		      	rtl  	#16
                	debugger_34:
018C30 BA FE FF FF 		      	bra  	debugger_39
                	endpublic
                	
                	public code dbg_SetDBAD:
018C34 15 EF 21 00 		      	subui	sp,sp,#16
018C38 E7 ED 01 00 		      	push 	bp
018C3C 02 BF 01 1A 		      	mov  	bp,sp
018C40 C6 3D 30 00 		      	lw   	r3,24[bp]
018C44 86 41 00 00 		      	cmp  	r4,r3,#0
018C48 3D 02 10 00 		      	beq  	r4,debugger_42
018C4C 86 41 02 00 		      	cmp  	r4,r3,#1
018C50 3D 02 12 00 		      	beq  	r4,debugger_43
018C54 86 41 04 00 		      	cmp  	r4,r3,#2
018C58 3D 02 14 00 		      	beq  	r4,debugger_44
018C5C 86 41 06 00 		      	cmp  	r4,r3,#3
018C60 3D 02 16 00 		      	beq  	r4,debugger_45
018C64 BA 06 00 00 		      	bra  	debugger_41
                	debugger_42:
018C68 C6 1D 40 00 		      	     	          lw    r1,32[bp]
018C6C 82 00 64 3C 	          mtspr dbad0,r1
                	          
018C70 3A 05 00 00 		      	bra  	debugger_41
                	debugger_43:
018C74 C6 1D 40 00 		      	     	          lw    r1,32[bp]
018C78 82 00 66 3C 	          mtspr dbad1,r1
                	          
018C7C BA 03 00 00 		      	bra  	debugger_41
                	debugger_44:
018C80 C6 1D 40 00 		      	     	          lw    r1,32[bp]
018C84 82 00 68 3C 	          mtspr dbad2,r1
                	          
018C88 3A 02 00 00 		      	bra  	debugger_41
                	debugger_45:
018C8C C6 1D 40 00 		      	     	          lw    r1,32[bp]
018C90 82 00 6A 3C 	          mtspr dbad3,r1
                	          
018C94 BA 00 00 00 		      	bra  	debugger_41
                	debugger_41:
                	debugger_46:
018C98 82 ED 01 1A 		      	mov  	sp,bp
018C9C 57 BF 11 00 		      	pop  	bp
018CA0 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code dbg_arm:
018CA4 15 EF 21 00 		      	subui	sp,sp,#16
018CA8 E7 ED 01 00 		      	push 	bp
018CAC 02 BF 01 1A 		      	mov  	bp,sp
018CB0 C6 1D 30 00 		      	     	         lw    r1,24[bp]
018CB4 82 00 6C 3C 	         mtspr dbctrl,r1
                	     
                	debugger_48:
018CB8 82 ED 01 1A 		      	mov  	sp,bp
018CBC 57 BF 11 00 		      	pop  	bp
018CC0 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code CvtScreenToAscii:
018CC4 15 EF 21 00 		      	subui	sp,sp,#16
018CC8 E7 ED 01 00 		      	push 	bp
018CCC 02 BF 01 1A 		      	mov  	bp,sp
018CD0 C6 1D 30 00 		      	     	         lw    r1,24[bp]
018CD4 0A 60 42 00 	         ldi   r6,#$21         ; screen to ascii
018CD8 38 0F 34 03 	         sys   #410
                	     
                	debugger_50:
018CDC 82 ED 01 1A 		      	mov  	sp,bp
018CE0 57 BF 11 00 		      	pop  	bp
018CE4 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code dbg_getchar:
018CE8 15 EF 21 00 		      	subui	sp,sp,#16
018CEC E7 ED 01 00 		      	push 	bp
018CF0 02 BF 01 1A 		      	mov  	bp,sp
018CF4 15 EF 11 00 		      	subui	sp,sp,#8
018CF8 E7 E5 01 00 		      	push 	r11
018CFC 7C C0 00 00 		      	ldi  	r11,#linendx
018D00 0A B0 40 04 
018D04 0A 30 FE FF 		      	ldi  	r3,#-1
018D08 E1 3D FC FF 		      	sc   	r3,-2[bp]
018D0C C6 35 00 00 		      	lw   	r3,[r11]
018D10 86 31 A8 00 		      	cmp  	r3,r3,#84
018D14 BD 31 0E 00 		      	bge  	r3,debugger_52
018D18 C6 35 00 00 		      	lw   	r3,[r11]
018D1C 82 31 02 70 		      	asli 	r3,r3,#1
018D20 7C C0 00 00 		      	lcu  	r4,linebuf[r3]
018D24 C3 41 50 04 
018D28 E1 4D FC FF 		      	sc   	r4,-2[bp]
018D2C E4 15 00 00 		      	inc  	[r11],#1
                	debugger_52:
018D30 C3 3D FC FF 		      	lcu  	r3,-2[bp]
018D34 82 11 00 1A 		      	mov  	r1,r3
                	debugger_54:
018D38 57 BF 10 00 		      	pop  	r11
018D3C 82 ED 01 1A 		      	mov  	sp,bp
018D40 57 BF 11 00 		      	pop  	bp
018D44 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code ignore_blanks:
018D48 15 EF 21 00 		      	subui	sp,sp,#16
018D4C E7 ED 01 00 		      	push 	bp
018D50 02 BF 01 1A 		      	mov  	bp,sp
018D54 15 EF 11 00 		      	subui	sp,sp,#8
                	debugger_56:
018D58 7C C0 00 00 		      	lw   	r3,linendx
018D5C 46 30 40 04 
018D60 82 31 02 70 		      	asli 	r3,r3,#1
018D64 7C C0 00 00 		      	lcu  	r4,linebuf[r3]
018D68 C3 41 50 04 
018D6C E1 4D FC FF 		      	sc   	r4,-2[bp]
018D70 7C C0 00 00 		      	inc  	linendx,#1
018D74 64 10 40 04 
018D78 C3 3D FC FF 		      	lcu  	r3,-2[bp]
018D7C 86 31 40 00 		      	cmp  	r3,r3,#32
018D80 BD 01 EC FF 		      	beq  	r3,debugger_56
                	debugger_57:
                	debugger_58:
018D84 82 ED 01 1A 		      	mov  	sp,bp
018D88 57 BF 11 00 		      	pop  	bp
018D8C 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code dbg_ungetch:
018D90 15 EF 21 00 		      	subui	sp,sp,#16
018D94 E7 ED 01 00 		      	push 	bp
018D98 02 BF 01 1A 		      	mov  	bp,sp
018D9C 7C C0 00 00 		      	lw   	r3,linendx
018DA0 46 30 40 04 
018DA4 BD 51 06 00 		      	ble  	r3,debugger_60
018DA8 7C C0 00 00 		      	dec  	linendx,#1
018DAC 64 F0 41 04 
                	debugger_60:
                	debugger_62:
018DB0 82 ED 01 1A 		      	mov  	sp,bp
018DB4 57 BF 11 00 		      	pop  	bp
018DB8 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code dbg_nextNonSpace:
018DBC E7 EF 01 00 		      	push 	lr
018DC0 67 EE 01 00 		      	push 	xlr
018DC4 E7 ED 01 00 		      	push 	bp
018DC8 FC 01 00 00 		      	ldi  	xlr,#debugger_63
018DCC 0A C0 71 1C 
018DD0 02 BF 01 1A 		      	mov  	bp,sp
018DD4 15 EF 11 00 		      	subui	sp,sp,#8
                	debugger_64:
018DD8 7C C0 00 00 		      	lw   	r3,linendx
018DDC 46 30 40 04 
018DE0 86 31 A8 00 		      	cmp  	r3,r3,#84
018DE4 BD 31 26 00 		      	bge  	r3,debugger_65
018DE8 39 E0 FF FF 		      	bsr  	dbg_getchar
018DEC 82 30 00 1A 		      	mov  	r3,r1
018DF0 82 31 00 22 		      	sxc  	r3,r3
018DF4 E1 3D FC FF 		      	sc   	r3,-2[bp]
018DF8 C3 3D FC FF 		      	lcu  	r3,-2[bp]
018DFC 86 31 40 00 		      	cmp  	r3,r3,#32
018E00 BD 11 08 00 		      	bne  	r3,debugger_68
018E04 C3 3D FC FF 		      	lcu  	r3,-2[bp]
018E08 86 31 FE FF 		      	cmp  	r3,r3,#-1
018E0C BD 11 10 00 		      	bne  	r3,debugger_66
                	debugger_68:
018E10 C3 3D FC FF 		      	lcu  	r3,-2[bp]
018E14 82 11 00 1A 		      	mov  	r1,r3
                	debugger_69:
018E18 82 ED 01 1A 		      	mov  	sp,bp
018E1C 57 BF 11 00 		      	pop  	bp
018E20 57 CF 11 00 		      	pop  	xlr
018E24 57 FF 11 00 		      	pop  	lr
018E28 37 FF 01 00 		      	rtl  	#0
                	debugger_66:
018E2C BA F5 FF FF 		      	bra  	debugger_64
                	debugger_65:
018E30 0A 10 FE FF 		      	ldi  	r1,#-1
018E34 BA FC FF FF 		      	bra  	debugger_69
                	debugger_63:
018E38 C6 FD 11 00 		      	lw   	lr,8[bp]
018E3C E3 FD 21 00 		      	sw   	lr,16[bp]
018E40 3A FB FF FF 		      	bra  	debugger_69
                	endpublic
                	
                	public code dbg_getHexNumber:
018E44 E7 EF 01 00 		      	push 	lr
018E48 67 EE 01 00 		      	push 	xlr
018E4C E7 ED 01 00 		      	push 	bp
018E50 FC 01 00 00 		      	ldi  	xlr,#debugger_70
018E54 0A C0 C9 1E 
018E58 02 BF 01 1A 		      	mov  	bp,sp
018E5C 15 EF 31 00 		      	subui	sp,sp,#24
018E60 E3 0D E0 FF 		      	sw   	r0,-16[bp]
018E64 E3 0D D0 FF 		      	sw   	r0,-24[bp]
018E68 B9 EA FF FF 		      	bsr  	dbg_nextNonSpace
018E6C 7C C0 00 00 		      	dec  	linendx,#1
018E70 64 F0 41 04 
                	debugger_71:
018E74 0A 30 02 00 		      	ldi  	r3,#1
018E78 BD 01 74 00 		      	beq  	r3,debugger_72
018E7C B9 CD FF FF 		      	bsr  	dbg_getchar
018E80 82 30 00 1A 		      	mov  	r3,r1
018E84 82 31 00 22 		      	sxc  	r3,r3
018E88 E1 3D FC FF 		      	sc   	r3,-2[bp]
018E8C C3 3D FC FF 		      	lcu  	r3,-2[bp]
018E90 96 31 60 00 		      	cmpu 	r3,r3,#48
018E94 BD 41 16 00 		      	blt  	r3,debugger_73
018E98 C3 3D FC FF 		      	lcu  	r3,-2[bp]
018E9C 96 31 72 00 		      	cmpu 	r3,r3,#57
018EA0 BD 21 10 00 		      	bgt  	r3,debugger_73
018EA4 C6 3D E0 FF 		      	lw   	r3,-16[bp]
018EA8 82 31 08 70 		      	asli 	r3,r3,#4
018EAC C3 4D FC FF 		      	lcu  	r4,-2[bp]
018EB0 15 42 60 00 		      	subu 	r4,r4,#48
018EB4 82 31 08 1A 		      	or   	r3,r3,r4
018EB8 E3 3D E0 FF 		      	sw   	r3,-16[bp]
018EBC BA 12 00 00 		      	bra  	debugger_74
                	debugger_73:
018EC0 C3 3D FC FF 		      	lcu  	r3,-2[bp]
018EC4 96 31 82 00 		      	cmpu 	r3,r3,#65
018EC8 BD 41 16 00 		      	blt  	r3,debugger_75
018ECC C3 3D FC FF 		      	lcu  	r3,-2[bp]
018ED0 96 31 8C 00 		      	cmpu 	r3,r3,#70
018ED4 BD 21 10 00 		      	bgt  	r3,debugger_75
018ED8 C6 3D E0 FF 		      	lw   	r3,-16[bp]
018EDC 82 31 08 70 		      	asli 	r3,r3,#4
018EE0 C3 4D FC FF 		      	lcu  	r4,-2[bp]
018EE4 14 42 92 FF 		      	addu 	r4,r4,#-55
018EE8 82 31 08 1A 		      	or   	r3,r3,r4
018EEC E3 3D E0 FF 		      	sw   	r3,-16[bp]
018EF0 3A 0C 00 00 		      	bra  	debugger_76
                	debugger_75:
018EF4 C3 3D FC FF 		      	lcu  	r3,-2[bp]
018EF8 96 31 C2 00 		      	cmpu 	r3,r3,#97
018EFC BD 41 16 00 		      	blt  	r3,debugger_77
018F00 C3 3D FC FF 		      	lcu  	r3,-2[bp]
018F04 96 31 CC 00 		      	cmpu 	r3,r3,#102
018F08 BD 21 10 00 		      	bgt  	r3,debugger_77
018F0C C6 3D E0 FF 		      	lw   	r3,-16[bp]
018F10 82 31 08 70 		      	asli 	r3,r3,#4
018F14 C3 4D FC FF 		      	lcu  	r4,-2[bp]
018F18 14 42 52 FF 		      	addu 	r4,r4,#-87
018F1C 82 31 08 1A 		      	or   	r3,r3,r4
018F20 E3 3D E0 FF 		      	sw   	r3,-16[bp]
018F24 BA 05 00 00 		      	bra  	debugger_78
                	debugger_77:
018F28 C6 3D 30 00 		      	lw   	r3,24[bp]
018F2C C6 4D E0 FF 		      	lw   	r4,-16[bp]
018F30 E3 41 00 00 		      	sw   	r4,[r3]
018F34 C6 3D D0 FF 		      	lw   	r3,-24[bp]
018F38 82 11 00 1A 		      	mov  	r1,r3
                	debugger_79:
018F3C 82 ED 01 1A 		      	mov  	sp,bp
018F40 57 BF 11 00 		      	pop  	bp
018F44 57 CF 11 00 		      	pop  	xlr
018F48 57 FF 11 00 		      	pop  	lr
018F4C 37 FF 01 00 		      	rtl  	#0
                	debugger_78:
                	debugger_76:
                	debugger_74:
018F50 C6 3D D0 FF 		      	lw   	r3,-24[bp]
018F54 94 31 02 00 		      	addu 	r3,r3,#1
018F58 E3 3D D0 FF 		      	sw   	r3,-24[bp]
018F5C 3A E3 FF FF 		      	bra  	debugger_71
                	debugger_72:
018F60 BA FB FF FF 		      	bra  	debugger_79
                	debugger_70:
018F64 C6 FD 11 00 		      	lw   	lr,8[bp]
018F68 E3 FD 21 00 		      	sw   	lr,16[bp]
018F6C 3A FA FF FF 		      	bra  	debugger_79
                	endpublic
                	
                	public code dbg_ReadSetIB:
018F70 E7 EF 01 00 		      	push 	lr
018F74 67 EE 01 00 		      	push 	xlr
018F78 E7 ED 01 00 		      	push 	bp
018F7C FC 01 00 00 		      	ldi  	xlr,#debugger_82
018F80 0A C0 A9 21 
018F84 02 BF 01 1A 		      	mov  	bp,sp
018F88 15 EF 21 00 		      	subui	sp,sp,#16
018F8C E7 E5 01 00 		      	push 	r11
018F90 FC C0 00 00 		      	ldi  	r11,#dbg_dbctrl
018F94 0A B0 E0 05 
018F98 C6 3D 30 00 		      	lw   	r3,24[bp]
018F9C 96 31 06 00 		      	cmpu 	r3,r3,#3
018FA0 BD 51 0E 00 		      	ble  	r3,debugger_83
                	debugger_85:
018FA4 57 BF 10 00 		      	pop  	r11
018FA8 82 ED 01 1A 		      	mov  	sp,bp
018FAC 57 BF 11 00 		      	pop  	bp
018FB0 57 CF 11 00 		      	pop  	xlr
018FB4 57 FF 11 00 		      	pop  	lr
018FB8 37 FF 01 00 		      	rtl  	#0
                	debugger_83:
018FBC 39 C0 FF FF 		      	bsr  	dbg_nextNonSpace
018FC0 82 30 00 1A 		      	mov  	r3,r1
018FC4 82 31 00 22 		      	sxc  	r3,r3
018FC8 E1 3D FC FF 		      	sc   	r3,-2[bp]
018FCC C3 3D FC FF 		      	lcu  	r3,-2[bp]
018FD0 86 31 7A 00 		      	cmp  	r3,r3,#61
018FD4 BD 11 34 00 		      	bne  	r3,debugger_86
018FD8 E5 ED E1 FF 		      	pea  	-16[bp]
018FDC B9 04 CE FF 		      	bsr  	dbg_GetHexNumber
018FE0 14 EF 11 00 		      	addui	sp,sp,#8
018FE4 82 30 00 1A 		      	mov  	r3,r1
018FE8 BD 51 28 00 		      	ble  	r3,debugger_88
018FEC E6 ED E1 FF 		      	push 	-16[bp]
018FF0 E6 ED 31 00 		      	push 	24[bp]
018FF4 39 88 FF FF 		      	bsr  	dbg_SetDBAD
018FF8 14 EF 21 00 		      	addui	sp,sp,#16
018FFC 0A 30 02 00 		      	ldi  	r3,#1
019000 C6 4D 30 00 		      	lw   	r4,24[bp]
019004 82 31 08 60 		      	asl  	r3,r3,r4
019008 C6 45 00 00 		      	lw   	r4,[r11]
01900C 02 42 06 1A 		      	or   	r4,r4,r3
019010 E3 45 00 00 		      	sw   	r4,[r11]
019014 7C 03 00 00 		      	ldi  	r3,#196608
019018 0A 30 00 00 
01901C C6 4D 30 00 		      	lw   	r4,24[bp]
019020 02 42 02 70 		      	asli 	r4,r4,#1
019024 82 31 08 60 		      	asl  	r3,r3,r4
019028 8E 31 FE FF 		      	com  	r3,r3
01902C C6 45 00 00 		      	lw   	r4,[r11]
019030 02 42 06 18 		      	and  	r4,r4,r3
019034 E3 45 00 00 		      	sw   	r4,[r11]
                	debugger_88:
019038 3A 13 00 00 		      	bra  	debugger_87
                	debugger_86:
01903C C3 3D FC FF 		      	lcu  	r3,-2[bp]
019040 86 31 7E 00 		      	cmp  	r3,r3,#63
019044 BD 11 46 00 		      	bne  	r3,debugger_90
019048 C6 35 00 00 		      	lw   	r3,[r11]
01904C 7C 03 00 00 		      	ldi  	r4,#196608
019050 0A 40 00 00 
019054 C6 5D 30 00 		      	lw   	r5,24[bp]
019058 82 52 02 70 		      	asli 	r5,r5,#1
01905C 02 42 0A 60 		      	asl  	r4,r4,r5
019060 82 31 08 18 		      	and  	r3,r3,r4
019064 BD 11 2C 00 		      	bne  	r3,debugger_92
019068 C6 35 00 00 		      	lw   	r3,[r11]
01906C 0A 40 02 00 		      	ldi  	r4,#1
019070 C6 5D 30 00 		      	lw   	r5,24[bp]
019074 02 42 0A 60 		      	asl  	r4,r4,r5
019078 0A 50 02 00 		      	ldi  	r5,#1
01907C C6 6D 30 00 		      	lw   	r6,24[bp]
019080 82 52 0C 60 		      	asl  	r5,r5,r6
019084 02 42 0A 40 		      	seq  	r4,r4,r5
019088 82 31 08 18 		      	and  	r3,r3,r4
01908C BD 01 18 00 		      	beq  	r3,debugger_92
019090 E6 ED 31 00 		      	push 	24[bp]
019094 B9 67 FF FF 		      	bsr  	dbg_GetDBAD
019098 14 EF 11 00 		      	addui	sp,sp,#8
01909C 82 30 00 1A 		      	mov  	r3,r1
0190A0 E7 E1 01 00 		      	push 	r3
0190A4 E6 ED 31 00 		      	push 	24[bp]
0190A8 FC 01 00 00 		      	push 	#debugger_80
0190AC 65 E0 95 75 
0190B0 B9 36 FA FF 		      	bsr  	printf
0190B4 14 EF 31 00 		      	addui	sp,sp,#24
0190B8 3A 03 00 00 		      	bra  	debugger_93
                	debugger_92:
0190BC E6 ED 31 00 		      	push 	24[bp]
0190C0 FC 01 00 00 		      	push 	#debugger_81
0190C4 65 E0 41 75 
0190C8 B9 33 FA FF 		      	bsr  	printf
0190CC 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_93:
                	debugger_90:
                	debugger_87:
0190D0 BA DA FF FF 		      	bra  	debugger_85
                	debugger_82:
0190D4 C6 FD 11 00 		      	lw   	lr,8[bp]
0190D8 E3 FD 21 00 		      	sw   	lr,16[bp]
0190DC 3A D9 FF FF 		      	bra  	debugger_85
                	endpublic
                	
                	public code dbg_ReadSetDB:
0190E0 E7 EF 01 00 		      	push 	lr
0190E4 67 EE 01 00 		      	push 	xlr
0190E8 E7 ED 01 00 		      	push 	bp
0190EC FC 01 00 00 		      	ldi  	xlr,#debugger_98
0190F0 0A C0 F9 24 
0190F4 02 BF 01 1A 		      	mov  	bp,sp
0190F8 15 EF 21 00 		      	subui	sp,sp,#16
0190FC E7 E5 01 00 		      	push 	r11
019100 FC C0 00 00 		      	ldi  	r11,#dbg_dbctrl
019104 0A B0 E0 05 
019108 C6 3D 30 00 		      	lw   	r3,24[bp]
01910C 96 31 06 00 		      	cmpu 	r3,r3,#3
019110 BD 51 0E 00 		      	ble  	r3,debugger_99
                	debugger_101:
019114 57 BF 10 00 		      	pop  	r11
019118 82 ED 01 1A 		      	mov  	sp,bp
01911C 57 BF 11 00 		      	pop  	bp
019120 57 CF 11 00 		      	pop  	xlr
019124 57 FF 11 00 		      	pop  	lr
019128 37 FF 01 00 		      	rtl  	#0
                	debugger_99:
01912C 39 92 FF FF 		      	bsr  	dbg_nextNonSpace
019130 82 30 00 1A 		      	mov  	r3,r1
019134 82 31 00 22 		      	sxc  	r3,r3
019138 E1 3D FC FF 		      	sc   	r3,-2[bp]
01913C C3 3D FC FF 		      	lcu  	r3,-2[bp]
019140 86 31 7A 00 		      	cmp  	r3,r3,#61
019144 BD 11 44 00 		      	bne  	r3,debugger_102
019148 E5 ED E1 FF 		      	pea  	-16[bp]
01914C B9 D6 CD FF 		      	bsr  	dbg_GetHexNumber
019150 14 EF 11 00 		      	addui	sp,sp,#8
019154 82 30 00 1A 		      	mov  	r3,r1
019158 BD 51 38 00 		      	ble  	r3,debugger_104
01915C E6 ED E1 FF 		      	push 	-16[bp]
019160 E6 ED 31 00 		      	push 	24[bp]
019164 39 5A FF FF 		      	bsr  	dbg_SetDBAD
019168 14 EF 21 00 		      	addui	sp,sp,#16
01916C 0A 30 02 00 		      	ldi  	r3,#1
019170 C6 4D 30 00 		      	lw   	r4,24[bp]
019174 82 31 08 60 		      	asl  	r3,r3,r4
019178 C6 45 00 00 		      	lw   	r4,[r11]
01917C 02 42 06 1A 		      	or   	r4,r4,r3
019180 E3 45 00 00 		      	sw   	r4,[r11]
019184 7C 03 00 00 		      	ldi  	r3,#196608
019188 0A 30 00 00 
01918C C6 4D 30 00 		      	lw   	r4,24[bp]
019190 02 42 02 70 		      	asli 	r4,r4,#1
019194 82 31 08 60 		      	asl  	r3,r3,r4
019198 8E 31 FE FF 		      	com  	r3,r3
01919C C6 45 00 00 		      	lw   	r4,[r11]
0191A0 02 42 06 18 		      	and  	r4,r4,r3
0191A4 E3 45 00 00 		      	sw   	r4,[r11]
0191A8 7C 03 00 00 		      	ldi  	r3,#196608
0191AC 0A 30 00 00 
0191B0 C6 4D 30 00 		      	lw   	r4,24[bp]
0191B4 02 42 02 70 		      	asli 	r4,r4,#1
0191B8 82 31 08 60 		      	asl  	r3,r3,r4
0191BC C6 45 00 00 		      	lw   	r4,[r11]
0191C0 02 42 06 1A 		      	or   	r4,r4,r3
0191C4 E3 45 00 00 		      	sw   	r4,[r11]
                	debugger_104:
0191C8 3A 16 00 00 		      	bra  	debugger_103
                	debugger_102:
0191CC C3 3D FC FF 		      	lcu  	r3,-2[bp]
0191D0 86 31 7E 00 		      	cmp  	r3,r3,#63
0191D4 BD 11 52 00 		      	bne  	r3,debugger_106
0191D8 C6 35 00 00 		      	lw   	r3,[r11]
0191DC 7C 03 00 00 		      	ldi  	r4,#196608
0191E0 0A 40 00 00 
0191E4 C6 5D 30 00 		      	lw   	r5,24[bp]
0191E8 82 52 02 70 		      	asli 	r5,r5,#1
0191EC 02 42 0A 60 		      	asl  	r4,r4,r5
0191F0 82 31 08 18 		      	and  	r3,r3,r4
0191F4 7C 03 00 00 		      	ldi  	r4,#196608
0191F8 0A 40 00 00 
0191FC C6 5D 30 00 		      	lw   	r5,24[bp]
019200 82 52 02 70 		      	asli 	r5,r5,#1
019204 02 42 0A 60 		      	asl  	r4,r4,r5
019208 82 31 08 0C 		      	cmp  	r3,r3,r4
01920C BD 11 2C 00 		      	bne  	r3,debugger_108
019210 C6 35 00 00 		      	lw   	r3,[r11]
019214 0A 40 02 00 		      	ldi  	r4,#1
019218 C6 5D 30 00 		      	lw   	r5,24[bp]
01921C 02 42 0A 60 		      	asl  	r4,r4,r5
019220 0A 50 02 00 		      	ldi  	r5,#1
019224 C6 6D 30 00 		      	lw   	r6,24[bp]
019228 82 52 0C 60 		      	asl  	r5,r5,r6
01922C 02 42 0A 40 		      	seq  	r4,r4,r5
019230 82 31 08 18 		      	and  	r3,r3,r4
019234 BD 01 18 00 		      	beq  	r3,debugger_108
019238 E6 ED 31 00 		      	push 	24[bp]
01923C B9 32 FF FF 		      	bsr  	dbg_GetDBAD
019240 14 EF 11 00 		      	addui	sp,sp,#8
019244 82 30 00 1A 		      	mov  	r3,r1
019248 E7 E1 01 00 		      	push 	r3
01924C E6 ED 31 00 		      	push 	24[bp]
019250 FC 01 00 00 		      	push 	#debugger_96
019254 65 E0 FD 74 
019258 B9 01 FA FF 		      	bsr  	printf
01925C 14 EF 31 00 		      	addui	sp,sp,#24
019260 3A 03 00 00 		      	bra  	debugger_109
                	debugger_108:
019264 E6 ED 31 00 		      	push 	24[bp]
019268 FC 01 00 00 		      	push 	#debugger_97
01926C 65 E0 AD 74 
019270 B9 FE F9 FF 		      	bsr  	printf
019274 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_109:
                	debugger_106:
                	debugger_103:
019278 BA D3 FF FF 		      	bra  	debugger_101
                	debugger_98:
01927C C6 FD 11 00 		      	lw   	lr,8[bp]
019280 E3 FD 21 00 		      	sw   	lr,16[bp]
019284 3A D2 FF FF 		      	bra  	debugger_101
                	endpublic
                	
                	public code dbg_ReadSetDSB:
019288 E7 EF 01 00 		      	push 	lr
01928C 67 EE 01 00 		      	push 	xlr
019290 E7 ED 01 00 		      	push 	bp
019294 FC 01 00 00 		      	ldi  	xlr,#debugger_114
019298 0A C0 49 28 
01929C 02 BF 01 1A 		      	mov  	bp,sp
0192A0 15 EF 21 00 		      	subui	sp,sp,#16
0192A4 E7 E5 01 00 		      	push 	r11
0192A8 FC C0 00 00 		      	ldi  	r11,#dbg_dbctrl
0192AC 0A B0 E0 05 
0192B0 C6 3D 30 00 		      	lw   	r3,24[bp]
0192B4 96 31 06 00 		      	cmpu 	r3,r3,#3
0192B8 BD 51 0E 00 		      	ble  	r3,debugger_115
                	debugger_117:
0192BC 57 BF 10 00 		      	pop  	r11
0192C0 82 ED 01 1A 		      	mov  	sp,bp
0192C4 57 BF 11 00 		      	pop  	bp
0192C8 57 CF 11 00 		      	pop  	xlr
0192CC 57 FF 11 00 		      	pop  	lr
0192D0 37 FF 01 00 		      	rtl  	#0
                	debugger_115:
0192D4 39 5D FF FF 		      	bsr  	dbg_nextNonSpace
0192D8 82 30 00 1A 		      	mov  	r3,r1
0192DC 82 31 00 22 		      	sxc  	r3,r3
0192E0 E1 3D FC FF 		      	sc   	r3,-2[bp]
0192E4 C3 3D FC FF 		      	lcu  	r3,-2[bp]
0192E8 86 31 7A 00 		      	cmp  	r3,r3,#61
0192EC BD 11 44 00 		      	bne  	r3,debugger_118
0192F0 E5 ED E1 FF 		      	pea  	-16[bp]
0192F4 B9 A1 CD FF 		      	bsr  	dbg_GetHexNumber
0192F8 14 EF 11 00 		      	addui	sp,sp,#8
0192FC 82 30 00 1A 		      	mov  	r3,r1
019300 BD 51 38 00 		      	ble  	r3,debugger_120
019304 E6 ED E1 FF 		      	push 	-16[bp]
019308 E6 ED 31 00 		      	push 	24[bp]
01930C 39 25 FF FF 		      	bsr  	dbg_SetDBAD
019310 14 EF 21 00 		      	addui	sp,sp,#16
019314 0A 30 02 00 		      	ldi  	r3,#1
019318 C6 4D 30 00 		      	lw   	r4,24[bp]
01931C 82 31 08 60 		      	asl  	r3,r3,r4
019320 C6 45 00 00 		      	lw   	r4,[r11]
019324 02 42 06 1A 		      	or   	r4,r4,r3
019328 E3 45 00 00 		      	sw   	r4,[r11]
01932C 7C 03 00 00 		      	ldi  	r3,#196608
019330 0A 30 00 00 
019334 C6 4D 30 00 		      	lw   	r4,24[bp]
019338 02 42 02 70 		      	asli 	r4,r4,#1
01933C 82 31 08 60 		      	asl  	r3,r3,r4
019340 8E 31 FE FF 		      	com  	r3,r3
019344 C6 45 00 00 		      	lw   	r4,[r11]
019348 02 42 06 18 		      	and  	r4,r4,r3
01934C E3 45 00 00 		      	sw   	r4,[r11]
019350 7C 01 00 00 		      	ldi  	r3,#65536
019354 0A 30 00 00 
019358 C6 4D 30 00 		      	lw   	r4,24[bp]
01935C 02 42 02 70 		      	asli 	r4,r4,#1
019360 82 31 08 60 		      	asl  	r3,r3,r4
019364 C6 45 00 00 		      	lw   	r4,[r11]
019368 02 42 06 1A 		      	or   	r4,r4,r3
01936C E3 45 00 00 		      	sw   	r4,[r11]
                	debugger_120:
019370 3A 16 00 00 		      	bra  	debugger_119
                	debugger_118:
019374 C3 3D FC FF 		      	lcu  	r3,-2[bp]
019378 86 31 7E 00 		      	cmp  	r3,r3,#63
01937C BD 11 52 00 		      	bne  	r3,debugger_122
019380 C6 35 00 00 		      	lw   	r3,[r11]
019384 7C 03 00 00 		      	ldi  	r4,#196608
019388 0A 40 00 00 
01938C C6 5D 30 00 		      	lw   	r5,24[bp]
019390 82 52 02 70 		      	asli 	r5,r5,#1
019394 02 42 0A 60 		      	asl  	r4,r4,r5
019398 82 31 08 18 		      	and  	r3,r3,r4
01939C 7C 01 00 00 		      	ldi  	r4,#65536
0193A0 0A 40 00 00 
0193A4 C6 5D 30 00 		      	lw   	r5,24[bp]
0193A8 82 52 02 70 		      	asli 	r5,r5,#1
0193AC 02 42 0A 60 		      	asl  	r4,r4,r5
0193B0 82 31 08 0C 		      	cmp  	r3,r3,r4
0193B4 BD 11 2C 00 		      	bne  	r3,debugger_124
0193B8 C6 35 00 00 		      	lw   	r3,[r11]
0193BC 0A 40 02 00 		      	ldi  	r4,#1
0193C0 C6 5D 30 00 		      	lw   	r5,24[bp]
0193C4 02 42 0A 60 		      	asl  	r4,r4,r5
0193C8 0A 50 02 00 		      	ldi  	r5,#1
0193CC C6 6D 30 00 		      	lw   	r6,24[bp]
0193D0 82 52 0C 60 		      	asl  	r5,r5,r6
0193D4 02 42 0A 40 		      	seq  	r4,r4,r5
0193D8 82 31 08 18 		      	and  	r3,r3,r4
0193DC BD 01 18 00 		      	beq  	r3,debugger_124
0193E0 E6 ED 31 00 		      	push 	24[bp]
0193E4 B9 FD FE FF 		      	bsr  	dbg_GetDBAD
0193E8 14 EF 11 00 		      	addui	sp,sp,#8
0193EC 82 30 00 1A 		      	mov  	r3,r1
0193F0 E7 E1 01 00 		      	push 	r3
0193F4 E6 ED 31 00 		      	push 	24[bp]
0193F8 FC 01 00 00 		      	push 	#debugger_112
0193FC 65 E0 65 74 
019400 B9 CC F9 FF 		      	bsr  	printf
019404 14 EF 31 00 		      	addui	sp,sp,#24
019408 3A 03 00 00 		      	bra  	debugger_125
                	debugger_124:
01940C E6 ED 31 00 		      	push 	24[bp]
019410 FC 01 00 00 		      	push 	#debugger_113
019414 65 E0 11 74 
019418 B9 C9 F9 FF 		      	bsr  	printf
01941C 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_125:
                	debugger_122:
                	debugger_119:
019420 BA D3 FF FF 		      	bra  	debugger_117
                	debugger_114:
019424 C6 FD 11 00 		      	lw   	lr,8[bp]
019428 E3 FD 21 00 		      	sw   	lr,16[bp]
01942C 3A D2 FF FF 		      	bra  	debugger_117
                	endpublic
                	
                	DispRegs:
019430 E7 EF 01 00 		      	push 	lr
019434 67 EE 01 00 		      	push 	xlr
019438 E7 ED 01 00 		      	push 	bp
01943C FC 01 00 00 		      	ldi  	xlr,#debugger_137
019440 0A C0 D1 2A 
019444 02 BF 01 1A 		      	mov  	bp,sp
019448 E7 E5 01 00 		      	push 	r11
01944C FC C0 00 00 		      	ldi  	r11,#regs
019450 0A B0 F0 05 
019454 E6 E5 41 00 		      	push 	32[r11]
019458 E6 E5 31 00 		      	push 	24[r11]
01945C E6 E5 21 00 		      	push 	16[r11]
019460 E6 E5 11 00 		      	push 	8[r11]
019464 FC 01 00 00 		      	push 	#debugger_129
019468 65 E0 A1 73 
01946C 39 BF F9 FF 		      	bsr  	printf
019470 14 EF 51 00 		      	addui	sp,sp,#40
019474 E6 E5 81 00 		      	push 	64[r11]
019478 E6 E5 71 00 		      	push 	56[r11]
01947C E6 E5 61 00 		      	push 	48[r11]
019480 E6 E5 51 00 		      	push 	40[r11]
019484 FC 01 00 00 		      	push 	#debugger_130
019488 65 E0 39 73 
01948C 39 BB F9 FF 		      	bsr  	printf
019490 14 EF 51 00 		      	addui	sp,sp,#40
019494 E6 E5 C1 00 		      	push 	96[r11]
019498 E6 E5 B1 00 		      	push 	88[r11]
01949C E6 E5 A1 00 		      	push 	80[r11]
0194A0 E6 E5 91 00 		      	push 	72[r11]
0194A4 FC 01 00 00 		      	push 	#debugger_131
0194A8 65 E0 C5 72 
0194AC 39 B7 F9 FF 		      	bsr  	printf
0194B0 14 EF 51 00 		      	addui	sp,sp,#40
0194B4 E6 E5 01 01 		      	push 	128[r11]
0194B8 E6 E5 F1 00 		      	push 	120[r11]
0194BC E6 E5 E1 00 		      	push 	112[r11]
0194C0 E6 E5 D1 00 		      	push 	104[r11]
0194C4 FC 01 00 00 		      	push 	#debugger_132
0194C8 65 E0 4D 72 
0194CC 39 B3 F9 FF 		      	bsr  	printf
0194D0 14 EF 51 00 		      	addui	sp,sp,#40
0194D4 E6 E5 41 01 		      	push 	160[r11]
0194D8 E6 E5 31 01 		      	push 	152[r11]
0194DC E6 E5 21 01 		      	push 	144[r11]
0194E0 E6 E5 11 01 		      	push 	136[r11]
0194E4 FC 01 00 00 		      	push 	#debugger_133
0194E8 65 E0 D5 71 
0194EC 39 AF F9 FF 		      	bsr  	printf
0194F0 14 EF 51 00 		      	addui	sp,sp,#40
0194F4 E6 E5 81 01 		      	push 	192[r11]
0194F8 E6 E5 71 01 		      	push 	184[r11]
0194FC E6 E5 61 01 		      	push 	176[r11]
019500 E6 E5 51 01 		      	push 	168[r11]
019504 FC 01 00 00 		      	push 	#debugger_134
019508 65 E0 61 71 
01950C 39 AB F9 FF 		      	bsr  	printf
019510 14 EF 51 00 		      	addui	sp,sp,#40
019514 E6 E5 C1 01 		      	push 	224[r11]
019518 E6 E5 B1 01 		      	push 	216[r11]
01951C E6 E5 A1 01 		      	push 	208[r11]
019520 E6 E5 91 01 		      	push 	200[r11]
019524 FC 01 00 00 		      	push 	#debugger_135
019528 65 E0 E9 70 
01952C 39 A7 F9 FF 		      	bsr  	printf
019530 14 EF 51 00 		      	addui	sp,sp,#40
019534 E6 E5 F1 01 		      	push 	248[r11]
019538 E6 E5 E1 01 		      	push 	240[r11]
01953C E6 E5 D1 01 		      	push 	232[r11]
019540 FC 01 00 00 		      	push 	#debugger_136
019544 65 E0 95 70 
019548 B9 A3 F9 FF 		      	bsr  	printf
01954C 14 EF 41 00 		      	addui	sp,sp,#32
                	debugger_138:
019550 57 BF 10 00 		      	pop  	r11
019554 82 ED 01 1A 		      	mov  	sp,bp
019558 57 BF 11 00 		      	pop  	bp
01955C 57 CF 11 00 		      	pop  	xlr
019560 57 FF 11 00 		      	pop  	lr
019564 37 FF 01 00 		      	rtl  	#0
                	debugger_137:
019568 C6 FD 11 00 		      	lw   	lr,8[bp]
01956C E3 FD 21 00 		      	sw   	lr,16[bp]
019570 3A FC FF FF 		      	bra  	debugger_138
                	DispReg:
019574 E7 EF 01 00 		      	push 	lr
019578 67 EE 01 00 		      	push 	xlr
01957C E7 ED 01 00 		      	push 	bp
019580 FC 01 00 00 		      	ldi  	xlr,#debugger_141
019584 0A C0 89 2B 
019588 02 BF 01 1A 		      	mov  	bp,sp
01958C C6 3D 30 00 		      	lw   	r3,24[bp]
019590 82 31 06 70 		      	asli 	r3,r3,#3
019594 FC C0 00 00 		      	push 	regs[r3]
019598 E6 E1 F1 05 
01959C E6 ED 31 00 		      	push 	24[bp]
0195A0 FC 01 00 00 		      	push 	#debugger_140
0195A4 65 E0 71 70 
0195A8 B9 97 F9 FF 		      	bsr  	printf
0195AC 14 EF 31 00 		      	addui	sp,sp,#24
                	debugger_142:
0195B0 82 ED 01 1A 		      	mov  	sp,bp
0195B4 57 BF 11 00 		      	pop  	bp
0195B8 57 CF 11 00 		      	pop  	xlr
0195BC 57 FF 11 00 		      	pop  	lr
0195C0 37 FF 01 00 		      	rtl  	#0
                	debugger_141:
0195C4 C6 FD 11 00 		      	lw   	lr,8[bp]
0195C8 E3 FD 21 00 		      	sw   	lr,16[bp]
0195CC BA FC FF FF 		      	bra  	debugger_142
                	public code dbg_prompt:
0195D0 E7 EF 01 00 		      	push 	lr
0195D4 67 EE 01 00 		      	push 	xlr
0195D8 E7 ED 01 00 		      	push 	bp
0195DC FC 01 00 00 		      	ldi  	xlr,#debugger_144
0195E0 0A C0 19 2C 
0195E4 02 BF 01 1A 		      	mov  	bp,sp
0195E8 FC 01 00 00 		      	push 	#debugger_143
0195EC 65 E0 55 70 
0195F0 B9 8E F9 FF 		      	bsr  	printf
0195F4 14 EF 11 00 		      	addui	sp,sp,#8
                	debugger_145:
0195F8 82 ED 01 1A 		      	mov  	sp,bp
0195FC 57 BF 11 00 		      	pop  	bp
019600 57 CF 11 00 		      	pop  	xlr
019604 57 FF 11 00 		      	pop  	lr
019608 37 FF 01 00 		      	rtl  	#0
                	debugger_144:
01960C C6 FD 11 00 		      	lw   	lr,8[bp]
019610 E3 FD 21 00 		      	sw   	lr,16[bp]
019614 BA FC FF FF 		      	bra  	debugger_145
                	endpublic
                	
                	public code dbg_getDecNumber:
019618 E7 EF 01 00 		      	push 	lr
01961C 67 EE 01 00 		      	push 	xlr
019620 E7 ED 01 00 		      	push 	bp
019624 FC 01 00 00 		      	ldi  	xlr,#debugger_146
019628 0A C0 91 2D 
01962C 02 BF 01 1A 		      	mov  	bp,sp
019630 15 EF 31 00 		      	subui	sp,sp,#24
019634 E7 E5 01 00 		      	push 	r11
019638 C6 BD 30 00 		      	lw   	r11,24[bp]
01963C BD 15 10 00 		      	bne  	r11,debugger_147
019640 0A 10 00 00 		      	ldi  	r1,#0
                	debugger_149:
019644 57 BF 10 00 		      	pop  	r11
019648 82 ED 01 1A 		      	mov  	sp,bp
01964C 57 BF 11 00 		      	pop  	bp
019650 57 CF 11 00 		      	pop  	xlr
019654 57 FF 11 00 		      	pop  	lr
019658 37 FF 01 00 		      	rtl  	#0
                	debugger_147:
01965C E3 0D F0 FF 		      	sw   	r0,-8[bp]
019660 E3 0D D0 FF 		      	sw   	r0,-24[bp]
                	debugger_150:
019664 B9 D0 FE FF 		      	bsr  	dbg_getchar
019668 82 30 00 1A 		      	mov  	r3,r1
01966C 82 31 00 22 		      	sxc  	r3,r3
019670 E1 3D EC FF 		      	sc   	r3,-10[bp]
019674 E7 E1 01 00 		      	push 	r3
019678 B9 E8 F9 FF 		      	bsr  	isdigit
01967C 14 EF 11 00 		      	addui	sp,sp,#8
019680 82 30 00 1A 		      	mov  	r3,r1
019684 BD 01 14 00 		      	beq  	r3,debugger_151
019688 0A 30 A0 FF 		      	ldi  	r3,#-48
01968C C6 4D F0 FF 		      	lw   	r4,-8[bp]
019690 07 42 14 00 		      	mul  	r4,r4,#10
019694 C3 5D EC FF 		      	lcu  	r5,-10[bp]
019698 02 42 0A 28 		      	addu 	r4,r4,r5
01969C 82 31 08 28 		      	addu 	r3,r3,r4
0196A0 E3 3D F0 FF 		      	sw   	r3,-8[bp]
0196A4 E4 1D D0 FF 		      	inc  	-24[bp],#1
0196A8 BA F7 FF FF 		      	bra  	debugger_150
                	debugger_151:
0196AC 7C C0 00 00 		      	dec  	linendx,#1
0196B0 64 F0 41 04 
0196B4 C6 3D F0 FF 		      	lw   	r3,-8[bp]
0196B8 E3 35 00 00 		      	sw   	r3,[r11]
0196BC C6 3D D0 FF 		      	lw   	r3,-24[bp]
0196C0 82 11 00 1A 		      	mov  	r1,r3
0196C4 3A F0 FF FF 		      	bra  	debugger_149
                	debugger_146:
0196C8 C6 FD 11 00 		      	lw   	lr,8[bp]
0196CC E3 FD 21 00 		      	sw   	lr,16[bp]
0196D0 BA EE FF FF 		      	bra  	debugger_149
                	endpublic
                	
                	public code dbg_processReg:
0196D4 E7 EF 01 00 		      	push 	lr
0196D8 67 EE 01 00 		      	push 	xlr
0196DC E7 ED 01 00 		      	push 	bp
0196E0 FC 01 00 00 		      	ldi  	xlr,#debugger_152
0196E4 0A C0 99 2F 
0196E8 02 BF 01 1A 		      	mov  	bp,sp
0196EC 15 EF 41 00 		      	subui	sp,sp,#32
0196F0 39 BF FE FF 		      	bsr  	dbg_getchar
0196F4 82 30 00 1A 		      	mov  	r3,r1
0196F8 82 31 00 22 		      	sxc  	r3,r3
0196FC E1 3D FC FF 		      	sc   	r3,-2[bp]
019700 C3 3D FC FF 		      	lcu  	r3,-2[bp]
019704 86 41 7E 00 		      	cmp  	r4,r3,#63
019708 3D 02 04 00 		      	beq  	r4,debugger_154
01970C BA 01 00 00 		      	bra  	debugger_155
                	debugger_154:
019710 39 A4 FF FF 		      	bsr  	DispRegs
019714 BA 16 00 00 		      	bra  	debugger_153
                	debugger_155:
019718 C3 3D FC FF 		      	lcu  	r3,-2[bp]
01971C E7 E1 01 00 		      	push 	r3
019720 B9 D3 F9 FF 		      	bsr  	isdigit
019724 14 EF 11 00 		      	addui	sp,sp,#8
019728 82 30 00 1A 		      	mov  	r3,r1
01972C BD 01 4C 00 		      	beq  	r3,debugger_156
019730 7C C0 00 00 		      	dec  	linendx,#1
019734 64 F0 41 04 
019738 39 DC FF FF 		      	bsr  	dbg_getDecNumber
01973C 82 30 00 1A 		      	mov  	r3,r1
019740 E3 3D E0 FF 		      	sw   	r3,-16[bp]
019744 39 CF FE FF 		      	bsr  	dbg_nextNonSpace
019748 82 30 00 1A 		      	mov  	r3,r1
01974C 82 31 00 22 		      	sxc  	r3,r3
019750 E1 3D FC FF 		      	sc   	r3,-2[bp]
019754 C3 3D FC FF 		      	lcu  	r3,-2[bp]
019758 86 41 7E 00 		      	cmp  	r4,r3,#63
01975C 3D 02 08 00 		      	beq  	r4,debugger_159
019760 86 41 7A 00 		      	cmp  	r4,r3,#61
019764 3D 02 14 00 		      	beq  	r4,debugger_160
019768 3A 0B 00 00 		      	bra  	debugger_161
                	debugger_159:
01976C E6 ED E1 FF 		      	push 	-16[bp]
019770 B9 C0 FF FF 		      	bsr  	DispReg
019774 14 EF 11 00 		      	addui	sp,sp,#8
                	debugger_162:
019778 82 ED 01 1A 		      	mov  	sp,bp
01977C 57 BF 11 00 		      	pop  	bp
019780 57 CF 11 00 		      	pop  	xlr
019784 57 FF 11 00 		      	pop  	lr
019788 37 FF 01 00 		      	rtl  	#0
                	debugger_160:
01978C E5 ED D1 FF 		      	pea  	-24[bp]
019790 B9 D6 FE FF 		      	bsr  	dbg_getHexNumber
019794 14 EF 11 00 		      	addui	sp,sp,#8
019798 82 30 00 1A 		      	mov  	r3,r1
01979C E3 3D C0 FF 		      	sw   	r3,-32[bp]
0197A0 C6 3D C0 FF 		      	lw   	r3,-32[bp]
0197A4 BD 51 0C 00 		      	ble  	r3,debugger_163
0197A8 C6 3D E0 FF 		      	lw   	r3,-16[bp]
0197AC 82 31 06 70 		      	asli 	r3,r3,#3
0197B0 C6 4D D0 FF 		      	lw   	r4,-24[bp]
0197B4 FC C0 00 00 		      	sw   	r4,regs[r3]
0197B8 E3 41 F0 05 
                	debugger_163:
0197BC BA F7 FF FF 		      	bra  	debugger_162
                	debugger_161:
0197C0 3A F7 FF FF 		      	bra  	debugger_162
                	debugger_158:
                	debugger_156:
0197C4 BA F6 FF FF 		      	bra  	debugger_162
                	debugger_153:
0197C8 3A F6 FF FF 		      	bra  	debugger_162
                	debugger_152:
0197CC C6 FD 11 00 		      	lw   	lr,8[bp]
0197D0 E3 FD 21 00 		      	sw   	lr,16[bp]
0197D4 BA F4 FF FF 		      	bra  	debugger_162
                	endpublic
                	
                	public code dbg_parse_begin:
0197D8 E7 EF 01 00 		      	push 	lr
0197DC 67 EE 01 00 		      	push 	xlr
0197E0 E7 ED 01 00 		      	push 	bp
0197E4 FC 01 00 00 		      	ldi  	xlr,#debugger_165
0197E8 0A C0 C9 30 
0197EC 02 BF 01 1A 		      	mov  	bp,sp
0197F0 E7 E5 01 00 		      	push 	r11
0197F4 7C C0 00 00 		      	ldi  	r11,#linebuf
0197F8 0A B0 50 04 
0197FC 7C C0 00 00 		      	sw   	r0,linendx
019800 63 00 40 04 
019804 C3 35 00 00 		      	lcu  	r3,[r11]
019808 86 31 88 00 		      	cmp  	r3,r3,#68
01980C BD 11 1A 00 		      	bne  	r3,debugger_166
019810 C3 35 04 00 		      	lcu  	r3,2[r11]
019814 86 31 84 00 		      	cmp  	r3,r3,#66
019818 BD 11 14 00 		      	bne  	r3,debugger_166
01981C C3 35 08 00 		      	lcu  	r3,4[r11]
019820 86 31 8E 00 		      	cmp  	r3,r3,#71
019824 BD 11 0E 00 		      	bne  	r3,debugger_166
019828 C3 35 0C 00 		      	lcu  	r3,6[r11]
01982C 86 31 7C 00 		      	cmp  	r3,r3,#62
019830 BD 11 08 00 		      	bne  	r3,debugger_166
019834 0A 30 08 00 		      	ldi  	r3,#4
019838 7C C0 00 00 		      	sw   	r3,linendx
01983C 63 30 40 04 
                	debugger_166:
019840 39 06 00 00 		      	bsr  	dbg_parse_line
019844 82 30 00 1A 		      	mov  	r3,r1
019848 82 11 00 1A 		      	mov  	r1,r3
                	debugger_168:
01984C 57 BF 10 00 		      	pop  	r11
019850 82 ED 01 1A 		      	mov  	sp,bp
019854 57 BF 11 00 		      	pop  	bp
019858 57 CF 11 00 		      	pop  	xlr
01985C 57 FF 11 00 		      	pop  	lr
019860 37 FF 01 00 		      	rtl  	#0
                	debugger_165:
019864 C6 FD 11 00 		      	lw   	lr,8[bp]
019868 E3 FD 21 00 		      	sw   	lr,16[bp]
01986C 3A FC FF FF 		      	bra  	debugger_168
                	endpublic
                	
                	public code dbg_parse_line:
019870 E7 EF 01 00 		      	push 	lr
019874 67 EE 01 00 		      	push 	xlr
019878 E7 ED 01 00 		      	push 	bp
01987C FC 01 00 00 		      	ldi  	xlr,#debugger_189
019880 0A C0 F1 46 
019884 02 BF 01 1A 		      	mov  	bp,sp
019888 15 EF 71 00 		      	subui	sp,sp,#56
01988C E7 E5 01 00 		      	push 	r11
019890 67 E6 01 00 		      	push 	r12
019894 E7 E6 01 00 		      	push 	r13
019898 67 E7 01 00 		      	push 	r14
01989C E7 E7 01 00 		      	push 	r15
0198A0 67 E8 01 00 		      	push 	r16
0198A4 E7 E8 01 00 		      	push 	r17
0198A8 FC C0 00 00 		      	ldi  	r11,#muol
0198AC 0A B0 60 08 
0198B0 FC C0 00 00 		      	ldi  	r12,#cursz
0198B4 0A C0 30 08 
0198B8 FC C0 00 00 		      	ldi  	r13,#curaddr
0198BC 0A D0 20 08 
0198C0 FC C0 00 00 		      	ldi  	r14,#curfmt
0198C4 0A E0 40 08 
0198C8 FC C0 00 00 		      	ldi  	r15,#currep
0198CC 0A F0 50 08 
0198D0 C7 3D E0 FF 		      	lea  	r3,-16[bp]
0198D4 82 01 01 1A 		      	mov  	r16,r3
0198D8 FC C0 00 00 		      	ldi  	r17,#dbg_dbctrl
0198DC 0A 10 E1 05 
                	debugger_190:
0198E0 7C C0 00 00 		      	lw   	r3,linendx
0198E4 46 30 40 04 
0198E8 86 31 A8 00 		      	cmp  	r3,r3,#84
0198EC BD 31 42 05 		      	bge  	r3,debugger_191
0198F0 39 7F FE FF 		      	bsr  	dbg_getchar
0198F4 82 30 00 1A 		      	mov  	r3,r1
0198F8 82 31 00 22 		      	sxc  	r3,r3
0198FC E1 3D FC FF 		      	sc   	r3,-2[bp]
019900 C3 3D FC FF 		      	lcu  	r3,-2[bp]
019904 86 41 FE FF 		      	cmp  	r4,r3,#-1
019908 3D 02 28 00 		      	beq  	r4,debugger_193
01990C 86 41 40 00 		      	cmp  	r4,r3,#32
019910 3D 02 3C 00 		      	beq  	r4,debugger_194
019914 86 41 7E 00 		      	cmp  	r4,r3,#63
019918 3D 02 3A 00 		      	beq  	r4,debugger_195
01991C 86 41 E2 00 		      	cmp  	r4,r3,#113
019920 3D 02 3A 00 		      	beq  	r4,debugger_196
019924 86 41 C2 00 		      	cmp  	r4,r3,#97
019928 3D 02 3A 00 		      	beq  	r4,debugger_197
01992C 86 41 D2 00 		      	cmp  	r4,r3,#105
019930 3D 02 3E 00 		      	beq  	r4,debugger_198
019934 86 41 C8 00 		      	cmp  	r4,r3,#100
019938 3D 02 06 01 		      	beq  	r4,debugger_199
01993C 86 41 E4 00 		      	cmp  	r4,r3,#114
019940 3D 02 18 03 		      	beq  	r4,debugger_200
019944 86 41 E6 00 		      	cmp  	r4,r3,#115
019948 3D 02 18 03 		      	beq  	r4,debugger_201
01994C 86 41 F0 00 		      	cmp  	r4,r3,#120
019950 3D 02 52 03 		      	beq  	r4,debugger_202
019954 3A 43 01 00 		      	bra  	debugger_192
                	debugger_193:
                	debugger_203:
019958 57 1F 11 00 		      	pop  	r17
01995C 57 0F 11 00 		      	pop  	r16
019960 57 FF 10 00 		      	pop  	r15
019964 57 EF 10 00 		      	pop  	r14
019968 57 DF 10 00 		      	pop  	r13
01996C 57 CF 10 00 		      	pop  	r12
019970 57 BF 10 00 		      	pop  	r11
019974 82 ED 01 1A 		      	mov  	sp,bp
019978 57 BF 11 00 		      	pop  	bp
01997C 57 CF 11 00 		      	pop  	xlr
019980 57 FF 11 00 		      	pop  	lr
019984 37 FF 01 00 		      	rtl  	#0
                	debugger_194:
019988 BA 3C 01 00 		      	bra  	debugger_192
                	debugger_195:
01998C B9 02 FE FF 		      	bsr  	dbg_DisplayHelp
019990 BA 3B 01 00 		      	bra  	debugger_192
                	debugger_196:
019994 0A 10 02 00 		      	ldi  	r1,#1
019998 3A F8 FF FF 		      	bra  	debugger_203
                	debugger_197:
01999C E6 E8 01 00 		      	push 	[r17]
0199A0 B9 60 FE FF 		      	bsr  	dbg_arm
0199A4 14 EF 11 00 		      	addui	sp,sp,#8
0199A8 BA 38 01 00 		      	bra  	debugger_192
                	debugger_198:
0199AC B9 67 FE FF 		      	bsr  	dbg_getchar
0199B0 82 30 00 1A 		      	mov  	r3,r1
0199B4 82 31 00 22 		      	sxc  	r3,r3
0199B8 E1 3D FC FF 		      	sc   	r3,-2[bp]
0199BC C3 3D FC FF 		      	lcu  	r3,-2[bp]
0199C0 86 41 7E 00 		      	cmp  	r4,r3,#63
0199C4 3D 02 14 00 		      	beq  	r4,debugger_205
0199C8 86 41 60 00 		      	cmp  	r4,r3,#48
0199CC 3D 02 9A 00 		      	beq  	r4,debugger_206
0199D0 86 41 62 00 		      	cmp  	r4,r3,#49
0199D4 3D 02 9E 00 		      	beq  	r4,debugger_207
0199D8 86 41 64 00 		      	cmp  	r4,r3,#50
0199DC 3D 02 A2 00 		      	beq  	r4,debugger_208
0199E0 86 41 66 00 		      	cmp  	r4,r3,#51
0199E4 3D 02 A6 00 		      	beq  	r4,debugger_209
0199E8 3A 2B 00 00 		      	bra  	debugger_204
                	debugger_205:
0199EC C6 38 00 00 		      	lw   	r3,[r17]
0199F0 7C 03 00 00 		      	and  	r3,r3,#196608
0199F4 8C 31 00 00 
0199F8 BD 11 1C 00 		      	bne  	r3,debugger_210
0199FC C6 38 00 00 		      	lw   	r3,[r17]
019A00 8C 31 02 00 		      	and  	r3,r3,#1
019A04 86 31 02 00 		      	cmp  	r3,r3,#1
019A08 BD 11 14 00 		      	bne  	r3,debugger_210
019A0C 65 E0 01 00 		      	push 	#0
019A10 39 38 FE FF 		      	bsr  	dbg_GetDBAD
019A14 14 EF 11 00 		      	addui	sp,sp,#8
019A18 82 30 00 1A 		      	mov  	r3,r1
019A1C E7 E1 01 00 		      	push 	r3
019A20 FC 01 00 00 		      	push 	#debugger_169
019A24 65 E0 2D 70 
019A28 B9 07 F9 FF 		      	bsr  	printf
019A2C 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_210:
019A30 C6 38 00 00 		      	lw   	r3,[r17]
019A34 7C 30 00 00 		      	and  	r3,r3,#3145728
019A38 8C 31 00 00 
019A3C BD 11 1C 00 		      	bne  	r3,debugger_212
019A40 C6 38 00 00 		      	lw   	r3,[r17]
019A44 8C 31 04 00 		      	and  	r3,r3,#2
019A48 86 31 04 00 		      	cmp  	r3,r3,#2
019A4C BD 11 14 00 		      	bne  	r3,debugger_212
019A50 65 E0 03 00 		      	push 	#1
019A54 B9 2F FE FF 		      	bsr  	dbg_GetDBAD
019A58 14 EF 11 00 		      	addui	sp,sp,#8
019A5C 82 30 00 1A 		      	mov  	r3,r1
019A60 E7 E1 01 00 		      	push 	r3
019A64 FC 01 00 00 		      	push 	#debugger_170
019A68 65 E0 05 70 
019A6C 39 FF F8 FF 		      	bsr  	printf
019A70 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_212:
019A74 C6 38 00 00 		      	lw   	r3,[r17]
019A78 7C 00 03 00 		      	and  	r3,r3,#50331648
019A7C 8C 31 00 00 
019A80 BD 11 1C 00 		      	bne  	r3,debugger_214
019A84 C6 38 00 00 		      	lw   	r3,[r17]
019A88 8C 31 08 00 		      	and  	r3,r3,#4
019A8C 86 31 08 00 		      	cmp  	r3,r3,#4
019A90 BD 11 14 00 		      	bne  	r3,debugger_214
019A94 65 E0 05 00 		      	push 	#2
019A98 39 27 FE FF 		      	bsr  	dbg_GetDBAD
019A9C 14 EF 11 00 		      	addui	sp,sp,#8
019AA0 82 30 00 1A 		      	mov  	r3,r1
019AA4 E7 E1 01 00 		      	push 	r3
019AA8 FC 01 00 00 		      	push 	#debugger_171
019AAC 65 E0 DD 6F 
019AB0 B9 F6 F8 FF 		      	bsr  	printf
019AB4 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_214:
019AB8 C6 38 00 00 		      	lw   	r3,[r17]
019ABC 7C 00 30 00 		      	and  	r3,r3,#805306368
019AC0 8C 31 00 00 
019AC4 BD 11 1C 00 		      	bne  	r3,debugger_216
019AC8 C6 38 00 00 		      	lw   	r3,[r17]
019ACC 8C 31 10 00 		      	and  	r3,r3,#8
019AD0 86 31 10 00 		      	cmp  	r3,r3,#8
019AD4 BD 11 14 00 		      	bne  	r3,debugger_216
019AD8 65 E0 07 00 		      	push 	#3
019ADC B9 1E FE FF 		      	bsr  	dbg_GetDBAD
019AE0 14 EF 11 00 		      	addui	sp,sp,#8
019AE4 82 30 00 1A 		      	mov  	r3,r1
019AE8 E7 E1 01 00 		      	push 	r3
019AEC FC 01 00 00 		      	push 	#debugger_172
019AF0 65 E0 B5 6F 
019AF4 39 EE F8 FF 		      	bsr  	printf
019AF8 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_216:
019AFC BA 08 00 00 		      	bra  	debugger_204
                	debugger_206:
019B00 65 E0 01 00 		      	push 	#0
019B04 B9 8D FE FF 		      	bsr  	dbg_ReadSetIB
019B08 14 EF 11 00 		      	addui	sp,sp,#8
019B0C BA 06 00 00 		      	bra  	debugger_204
                	debugger_207:
019B10 65 E0 03 00 		      	push 	#1
019B14 B9 8B FE FF 		      	bsr  	dbg_ReadSetIB
019B18 14 EF 11 00 		      	addui	sp,sp,#8
019B1C BA 04 00 00 		      	bra  	debugger_204
                	debugger_208:
019B20 65 E0 05 00 		      	push 	#2
019B24 B9 89 FE FF 		      	bsr  	dbg_ReadSetIB
019B28 14 EF 11 00 		      	addui	sp,sp,#8
019B2C BA 02 00 00 		      	bra  	debugger_204
                	debugger_209:
019B30 65 E0 07 00 		      	push 	#3
019B34 B9 87 FE FF 		      	bsr  	dbg_ReadSetIB
019B38 14 EF 11 00 		      	addui	sp,sp,#8
019B3C BA 00 00 00 		      	bra  	debugger_204
                	debugger_204:
019B40 BA 05 01 00 		      	bra  	debugger_192
                	debugger_199:
019B44 B9 34 FE FF 		      	bsr  	dbg_getchar
019B48 82 30 00 1A 		      	mov  	r3,r1
019B4C 82 31 00 22 		      	sxc  	r3,r3
019B50 E1 3D FC FF 		      	sc   	r3,-2[bp]
019B54 C3 3D FC FF 		      	lcu  	r3,-2[bp]
019B58 86 41 D2 00 		      	cmp  	r4,r3,#105
019B5C 3D 02 1C 00 		      	beq  	r4,debugger_219
019B60 86 41 7E 00 		      	cmp  	r4,r3,#63
019B64 3D 02 66 00 		      	beq  	r4,debugger_220
019B68 86 41 60 00 		      	cmp  	r4,r3,#48
019B6C 3D 02 04 01 		      	beq  	r4,debugger_221
019B70 86 41 62 00 		      	cmp  	r4,r3,#49
019B74 3D 02 08 01 		      	beq  	r4,debugger_222
019B78 86 41 64 00 		      	cmp  	r4,r3,#50
019B7C 3D 02 0C 01 		      	beq  	r4,debugger_223
019B80 86 41 66 00 		      	cmp  	r4,r3,#51
019B84 3D 02 10 01 		      	beq  	r4,debugger_224
019B88 86 41 E6 00 		      	cmp  	r4,r3,#115
019B8C 3D 02 14 01 		      	beq  	r4,debugger_225
019B90 BA 7B 00 00 		      	bra  	debugger_218
                	debugger_219:
                	debugger_226:
019B94 B9 2A FE FF 		      	bsr  	dbg_getchar
019B98 82 30 00 1A 		      	mov  	r3,r1
019B9C 82 31 00 22 		      	sxc  	r3,r3
019BA0 E1 3D FC FF 		      	sc   	r3,-2[bp]
019BA4 C3 3D FC FF 		      	lcu  	r3,-2[bp]
019BA8 86 31 FE FF 		      	cmp  	r3,r3,#-1
019BAC BD 11 04 00 		      	bne  	r3,debugger_228
019BB0 3A 02 00 00 		      	bra  	debugger_227
                	debugger_228:
019BB4 C3 3D FC FF 		      	lcu  	r3,-2[bp]
019BB8 86 31 40 00 		      	cmp  	r3,r3,#32
019BBC BD 11 EC FF 		      	bne  	r3,debugger_226
                	debugger_227:
019BC0 67 E8 01 00 		      	push 	r16
019BC4 39 50 FE FF 		      	bsr  	dbg_getHexNumber
019BC8 14 EF 11 00 		      	addui	sp,sp,#8
019BCC 82 30 00 1A 		      	mov  	r3,r1
019BD0 E3 3D A0 FF 		      	sw   	r3,-48[bp]
019BD4 C6 3D A0 FF 		      	lw   	r3,-48[bp]
019BD8 BD 51 2A 00 		      	ble  	r3,debugger_230
019BDC E5 ED D1 FF 		      	pea  	-24[bp]
019BE0 39 47 FF FF 		      	bsr  	dbg_getDecNumber
019BE4 14 EF 11 00 		      	addui	sp,sp,#8
019BE8 82 30 00 1A 		      	mov  	r3,r1
019BEC E3 3D 90 FF 		      	sw   	r3,-56[bp]
019BF0 C6 3D 90 FF 		      	lw   	r3,-56[bp]
019BF4 BD 51 14 00 		      	ble  	r3,debugger_232
                	debugger_234:
019BF8 C6 3D 90 FF 		      	lw   	r3,-56[bp]
019BFC BD 51 0E 00 		      	ble  	r3,debugger_235
019C00 65 E0 01 00 		      	push 	#0
019C04 67 E8 01 00 		      	push 	r16
019C08 B9 74 FB FF 		      	bsr  	disassem
019C0C 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_236:
019C10 E4 FD 91 FF 		      	dec  	-56[bp],#1
019C14 BA FC FF FF 		      	bra  	debugger_234
                	debugger_235:
019C18 BA 02 00 00 		      	bra  	debugger_233
                	debugger_232:
019C1C 65 E0 01 00 		      	push 	#0
019C20 66 E8 01 00 		      	push 	[r16]
019C24 B9 9F FD FF 		      	bsr  	disassem20
019C28 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_233:
                	debugger_230:
019C2C 3A 68 00 00 		      	bra  	debugger_218
                	debugger_220:
019C30 FC 01 00 00 		      	push 	#debugger_173
019C34 65 E0 A9 6F 
019C38 B9 C5 F8 FF 		      	bsr  	printf
019C3C 14 EF 11 00 		      	addui	sp,sp,#8
019C40 C6 38 00 00 		      	lw   	r3,[r17]
019C44 7C 03 00 00 		      	and  	r3,r3,#196608
019C48 8C 31 00 00 
019C4C 7C 03 00 00 		      	cmp  	r3,r3,#196608
019C50 86 31 00 00 
019C54 BD 11 1C 00 		      	bne  	r3,debugger_237
019C58 C6 38 00 00 		      	lw   	r3,[r17]
019C5C 8C 31 02 00 		      	and  	r3,r3,#1
019C60 86 31 02 00 		      	cmp  	r3,r3,#1
019C64 BD 11 14 00 		      	bne  	r3,debugger_237
019C68 65 E0 01 00 		      	push 	#0
019C6C B9 EC FD FF 		      	bsr  	dbg_GetDBAD
019C70 14 EF 11 00 		      	addui	sp,sp,#8
019C74 82 30 00 1A 		      	mov  	r3,r1
019C78 E7 E1 01 00 		      	push 	r3
019C7C FC 01 00 00 		      	push 	#debugger_174
019C80 65 E0 81 6F 
019C84 39 BC F8 FF 		      	bsr  	printf
019C88 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_237:
019C8C C6 38 00 00 		      	lw   	r3,[r17]
019C90 7C 30 00 00 		      	and  	r3,r3,#3145728
019C94 8C 31 00 00 
019C98 7C 30 00 00 		      	cmp  	r3,r3,#3145728
019C9C 86 31 00 00 
019CA0 BD 11 1C 00 		      	bne  	r3,debugger_239
019CA4 C6 38 00 00 		      	lw   	r3,[r17]
019CA8 8C 31 04 00 		      	and  	r3,r3,#2
019CAC 86 31 04 00 		      	cmp  	r3,r3,#2
019CB0 BD 11 14 00 		      	bne  	r3,debugger_239
019CB4 65 E0 03 00 		      	push 	#1
019CB8 39 E3 FD FF 		      	bsr  	dbg_GetDBAD
019CBC 14 EF 11 00 		      	addui	sp,sp,#8
019CC0 82 30 00 1A 		      	mov  	r3,r1
019CC4 E7 E1 01 00 		      	push 	r3
019CC8 FC 01 00 00 		      	push 	#debugger_175
019CCC 65 E0 59 6F 
019CD0 B9 B2 F8 FF 		      	bsr  	printf
019CD4 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_239:
019CD8 C6 38 00 00 		      	lw   	r3,[r17]
019CDC 7C 00 03 00 		      	and  	r3,r3,#50331648
019CE0 8C 31 00 00 
019CE4 7C 00 03 00 		      	cmp  	r3,r3,#50331648
019CE8 86 31 00 00 
019CEC BD 11 1C 00 		      	bne  	r3,debugger_241
019CF0 C6 38 00 00 		      	lw   	r3,[r17]
019CF4 8C 31 08 00 		      	and  	r3,r3,#4
019CF8 86 31 08 00 		      	cmp  	r3,r3,#4
019CFC BD 11 14 00 		      	bne  	r3,debugger_241
019D00 65 E0 05 00 		      	push 	#2
019D04 B9 D9 FD FF 		      	bsr  	dbg_GetDBAD
019D08 14 EF 11 00 		      	addui	sp,sp,#8
019D0C 82 30 00 1A 		      	mov  	r3,r1
019D10 E7 E1 01 00 		      	push 	r3
019D14 FC 01 00 00 		      	push 	#debugger_176
019D18 65 E0 31 6F 
019D1C 39 A9 F8 FF 		      	bsr  	printf
019D20 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_241:
019D24 C6 38 00 00 		      	lw   	r3,[r17]
019D28 7C 00 30 00 		      	and  	r3,r3,#805306368
019D2C 8C 31 00 00 
019D30 7C 00 30 00 		      	cmp  	r3,r3,#805306368
019D34 86 31 00 00 
019D38 BD 11 1C 00 		      	bne  	r3,debugger_243
019D3C C6 38 00 00 		      	lw   	r3,[r17]
019D40 8C 31 10 00 		      	and  	r3,r3,#8
019D44 86 31 10 00 		      	cmp  	r3,r3,#8
019D48 BD 11 14 00 		      	bne  	r3,debugger_243
019D4C 65 E0 07 00 		      	push 	#3
019D50 39 D0 FD FF 		      	bsr  	dbg_GetDBAD
019D54 14 EF 11 00 		      	addui	sp,sp,#8
019D58 82 30 00 1A 		      	mov  	r3,r1
019D5C E7 E1 01 00 		      	push 	r3
019D60 FC 01 00 00 		      	push 	#debugger_177
019D64 65 E0 09 6F 
019D68 B9 9F F8 FF 		      	bsr  	printf
019D6C 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_243:
019D70 BA 3F 00 00 		      	bra  	debugger_218
                	debugger_221:
019D74 65 E0 01 00 		      	push 	#0
019D78 39 6D FE FF 		      	bsr  	dbg_ReadSetDB
019D7C 14 EF 11 00 		      	addui	sp,sp,#8
019D80 BA 3D 00 00 		      	bra  	debugger_218
                	debugger_222:
019D84 65 E0 03 00 		      	push 	#1
019D88 39 6B FE FF 		      	bsr  	dbg_ReadSetDB
019D8C 14 EF 11 00 		      	addui	sp,sp,#8
019D90 BA 3B 00 00 		      	bra  	debugger_218
                	debugger_223:
019D94 65 E0 05 00 		      	push 	#2
019D98 39 69 FE FF 		      	bsr  	dbg_ReadSetDB
019D9C 14 EF 11 00 		      	addui	sp,sp,#8
019DA0 BA 39 00 00 		      	bra  	debugger_218
                	debugger_224:
019DA4 65 E0 07 00 		      	push 	#3
019DA8 39 67 FE FF 		      	bsr  	dbg_ReadSetDB
019DAC 14 EF 11 00 		      	addui	sp,sp,#8
019DB0 BA 37 00 00 		      	bra  	debugger_218
                	debugger_225:
019DB4 B9 E6 FD FF 		      	bsr  	dbg_getchar
019DB8 82 30 00 1A 		      	mov  	r3,r1
019DBC 82 31 00 22 		      	sxc  	r3,r3
019DC0 E1 3D FC FF 		      	sc   	r3,-2[bp]
019DC4 C3 3D FC FF 		      	lcu  	r3,-2[bp]
019DC8 86 41 7E 00 		      	cmp  	r4,r3,#63
019DCC 3D 02 14 00 		      	beq  	r4,debugger_246
019DD0 86 41 60 00 		      	cmp  	r4,r3,#48
019DD4 3D 02 AA 00 		      	beq  	r4,debugger_247
019DD8 86 41 62 00 		      	cmp  	r4,r3,#49
019DDC 3D 02 AE 00 		      	beq  	r4,debugger_248
019DE0 86 41 64 00 		      	cmp  	r4,r3,#50
019DE4 3D 02 B2 00 		      	beq  	r4,debugger_249
019DE8 86 41 66 00 		      	cmp  	r4,r3,#51
019DEC 3D 02 B6 00 		      	beq  	r4,debugger_250
019DF0 3A 2F 00 00 		      	bra  	debugger_245
                	debugger_246:
019DF4 C6 38 00 00 		      	lw   	r3,[r17]
019DF8 7C 03 00 00 		      	and  	r3,r3,#196608
019DFC 8C 31 00 00 
019E00 7C 01 00 00 		      	cmp  	r3,r3,#65536
019E04 86 31 00 00 
019E08 BD 11 1C 00 		      	bne  	r3,debugger_251
019E0C C6 38 00 00 		      	lw   	r3,[r17]
019E10 8C 31 02 00 		      	and  	r3,r3,#1
019E14 86 31 02 00 		      	cmp  	r3,r3,#1
019E18 BD 11 14 00 		      	bne  	r3,debugger_251
019E1C 65 E0 01 00 		      	push 	#0
019E20 39 B6 FD FF 		      	bsr  	dbg_GetDBAD
019E24 14 EF 11 00 		      	addui	sp,sp,#8
019E28 82 30 00 1A 		      	mov  	r3,r1
019E2C E7 E1 01 00 		      	push 	r3
019E30 FC 01 00 00 		      	push 	#debugger_178
019E34 65 E0 DD 6E 
019E38 B9 85 F8 FF 		      	bsr  	printf
019E3C 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_251:
019E40 C6 38 00 00 		      	lw   	r3,[r17]
019E44 7C 30 00 00 		      	and  	r3,r3,#3145728
019E48 8C 31 00 00 
019E4C 7C 10 00 00 		      	cmp  	r3,r3,#1048576
019E50 86 31 00 00 
019E54 BD 11 1C 00 		      	bne  	r3,debugger_253
019E58 C6 38 00 00 		      	lw   	r3,[r17]
019E5C 8C 31 04 00 		      	and  	r3,r3,#2
019E60 86 31 04 00 		      	cmp  	r3,r3,#2
019E64 BD 11 14 00 		      	bne  	r3,debugger_253
019E68 65 E0 03 00 		      	push 	#1
019E6C B9 AC FD FF 		      	bsr  	dbg_GetDBAD
019E70 14 EF 11 00 		      	addui	sp,sp,#8
019E74 82 30 00 1A 		      	mov  	r3,r1
019E78 E7 E1 01 00 		      	push 	r3
019E7C FC 01 00 00 		      	push 	#debugger_179
019E80 65 E0 B1 6E 
019E84 39 7C F8 FF 		      	bsr  	printf
019E88 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_253:
019E8C C6 38 00 00 		      	lw   	r3,[r17]
019E90 7C 00 03 00 		      	and  	r3,r3,#50331648
019E94 8C 31 00 00 
019E98 7C 00 01 00 		      	cmp  	r3,r3,#16777216
019E9C 86 31 00 00 
019EA0 BD 11 1C 00 		      	bne  	r3,debugger_255
019EA4 C6 38 00 00 		      	lw   	r3,[r17]
019EA8 8C 31 08 00 		      	and  	r3,r3,#4
019EAC 86 31 08 00 		      	cmp  	r3,r3,#4
019EB0 BD 11 14 00 		      	bne  	r3,debugger_255
019EB4 65 E0 05 00 		      	push 	#2
019EB8 39 A3 FD FF 		      	bsr  	dbg_GetDBAD
019EBC 14 EF 11 00 		      	addui	sp,sp,#8
019EC0 82 30 00 1A 		      	mov  	r3,r1
019EC4 E7 E1 01 00 		      	push 	r3
019EC8 FC 01 00 00 		      	push 	#debugger_180
019ECC 65 E0 85 6E 
019ED0 B9 72 F8 FF 		      	bsr  	printf
019ED4 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_255:
019ED8 C6 38 00 00 		      	lw   	r3,[r17]
019EDC 7C 00 30 00 		      	and  	r3,r3,#805306368
019EE0 8C 31 00 00 
019EE4 7C 00 10 00 		      	cmp  	r3,r3,#268435456
019EE8 86 31 00 00 
019EEC BD 11 1C 00 		      	bne  	r3,debugger_257
019EF0 C6 38 00 00 		      	lw   	r3,[r17]
019EF4 8C 31 10 00 		      	and  	r3,r3,#8
019EF8 86 31 10 00 		      	cmp  	r3,r3,#8
019EFC BD 11 14 00 		      	bne  	r3,debugger_257
019F00 65 E0 07 00 		      	push 	#3
019F04 B9 99 FD FF 		      	bsr  	dbg_GetDBAD
019F08 14 EF 11 00 		      	addui	sp,sp,#8
019F0C 82 30 00 1A 		      	mov  	r3,r1
019F10 E7 E1 01 00 		      	push 	r3
019F14 FC 01 00 00 		      	push 	#debugger_181
019F18 65 E0 59 6E 
019F1C 39 69 F8 FF 		      	bsr  	printf
019F20 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_257:
019F24 BA 08 00 00 		      	bra  	debugger_245
                	debugger_247:
019F28 65 E0 01 00 		      	push 	#0
019F2C B9 6B FE FF 		      	bsr  	dbg_ReadSetDSB
019F30 14 EF 11 00 		      	addui	sp,sp,#8
019F34 BA 06 00 00 		      	bra  	debugger_245
                	debugger_248:
019F38 65 E0 03 00 		      	push 	#1
019F3C B9 69 FE FF 		      	bsr  	dbg_ReadSetDSB
019F40 14 EF 11 00 		      	addui	sp,sp,#8
019F44 BA 04 00 00 		      	bra  	debugger_245
                	debugger_249:
019F48 65 E0 05 00 		      	push 	#2
019F4C B9 67 FE FF 		      	bsr  	dbg_ReadSetDSB
019F50 14 EF 11 00 		      	addui	sp,sp,#8
019F54 BA 02 00 00 		      	bra  	debugger_245
                	debugger_250:
019F58 65 E0 07 00 		      	push 	#3
019F5C B9 65 FE FF 		      	bsr  	dbg_ReadSetDSB
019F60 14 EF 11 00 		      	addui	sp,sp,#8
019F64 BA 00 00 00 		      	bra  	debugger_245
                	debugger_245:
019F68 BA 00 00 00 		      	bra  	debugger_218
                	debugger_218:
019F6C 3A 80 00 00 		      	bra  	debugger_192
                	debugger_200:
019F70 B9 EC FE FF 		      	bsr  	dbg_processReg
019F74 3A 7F 00 00 		      	bra  	debugger_192
                	debugger_201:
019F78 39 AE FD FF 		      	bsr  	dbg_getchar
019F7C 82 30 00 1A 		      	mov  	r3,r1
019F80 82 31 00 22 		      	sxc  	r3,r3
019F84 E1 3D FC FF 		      	sc   	r3,-2[bp]
019F88 C3 3D FC FF 		      	lcu  	r3,-2[bp]
019F8C 86 31 E6 00 		      	cmp  	r3,r3,#115
019F90 BD 11 30 00 		      	bne  	r3,debugger_259
019F94 B9 AA FD FF 		      	bsr  	dbg_getchar
019F98 82 30 00 1A 		      	mov  	r3,r1
019F9C 82 31 00 22 		      	sxc  	r3,r3
019FA0 E1 3D FC FF 		      	sc   	r3,-2[bp]
019FA4 C3 3D FC FF 		      	lcu  	r3,-2[bp]
019FA8 86 31 5A 00 		      	cmp  	r3,r3,#45
019FAC BD 11 0A 00 		      	bne  	r3,debugger_261
019FB0 C6 38 00 00 		      	lw   	r3,[r17]
019FB4 8C 31 FE FF 		      	andi 	r3,r3,#-1
019FB8 E3 38 00 00 		      	sw   	r3,[r17]
019FBC BA 06 00 00 		      	bra  	debugger_262
                	debugger_261:
019FC0 C3 3D FC FF 		      	lcu  	r3,-2[bp]
019FC4 86 31 56 00 		      	cmp  	r3,r3,#43
019FC8 BD 01 08 00 		      	beq  	r3,debugger_265
019FCC C3 3D FC FF 		      	lcu  	r3,-2[bp]
019FD0 86 31 DA 00 		      	cmp  	r3,r3,#109
019FD4 BD 11 0E 00 		      	bne  	r3,debugger_263
                	debugger_265:
019FD8 C6 38 00 00 		      	lw   	r3,[r17]
019FDC 8D 31 00 00 		      	ori  	r3,r3,#0
019FE0 E3 38 00 00 		      	sw   	r3,[r17]
019FE4 0A 30 02 00 		      	ldi  	r3,#1
019FE8 FC C0 00 00 		      	sw   	r3,ssm
019FEC 63 30 00 08 
                	debugger_263:
                	debugger_262:
                	debugger_259:
019FF0 BA 6F 00 00 		      	bra  	debugger_192
                	debugger_202:
019FF4 B9 9E FD FF 		      	bsr  	dbg_getchar
019FF8 82 30 00 1A 		      	mov  	r3,r1
019FFC 82 31 00 22 		      	sxc  	r3,r3
01A000 E1 3D FC FF 		      	sc   	r3,-2[bp]
01A004 C3 3D FC FF 		      	lcu  	r3,-2[bp]
01A008 86 31 5E 00 		      	cmp  	r3,r3,#47
01A00C BD 11 BC 00 		      	bne  	r3,debugger_266
01A010 E5 ED B1 FF 		      	pea  	-40[bp]
01A014 B9 C0 FE FF 		      	bsr  	dbg_getDecNumber
01A018 14 EF 11 00 		      	addui	sp,sp,#8
01A01C 82 30 00 1A 		      	mov  	r3,r1
01A020 E3 3D A0 FF 		      	sw   	r3,-48[bp]
01A024 C6 3D A0 FF 		      	lw   	r3,-48[bp]
01A028 BD 51 06 00 		      	ble  	r3,debugger_268
01A02C C6 3D B0 FF 		      	lw   	r3,-40[bp]
01A030 E3 37 00 00 		      	sw   	r3,[r15]
                	debugger_268:
01A034 B9 96 FD FF 		      	bsr  	dbg_getchar
01A038 82 30 00 1A 		      	mov  	r3,r1
01A03C 82 31 00 22 		      	sxc  	r3,r3
01A040 E1 3D FC FF 		      	sc   	r3,-2[bp]
01A044 C3 3D FC FF 		      	lcu  	r3,-2[bp]
01A048 86 41 D2 00 		      	cmp  	r4,r3,#105
01A04C 3D 02 0C 00 		      	beq  	r4,debugger_271
01A050 86 41 E6 00 		      	cmp  	r4,r3,#115
01A054 3D 02 20 00 		      	beq  	r4,debugger_272
01A058 86 41 F0 00 		      	cmp  	r4,r3,#120
01A05C 3D 02 34 00 		      	beq  	r4,debugger_273
01A060 BA 24 00 00 		      	bra  	debugger_270
                	debugger_271:
01A064 0A 30 D2 00 		      	ldi  	r3,#105
01A068 61 37 00 00 		      	sc   	r3,[r14]
01A06C 67 E8 01 00 		      	push 	r16
01A070 B9 BA FD FF 		      	bsr  	dbg_getHexNumber
01A074 14 EF 11 00 		      	addui	sp,sp,#8
01A078 82 30 00 1A 		      	mov  	r3,r1
01A07C E3 3D A0 FF 		      	sw   	r3,-48[bp]
01A080 C6 3D A0 FF 		      	lw   	r3,-48[bp]
01A084 BD 51 06 00 		      	ble  	r3,debugger_274
01A088 46 38 00 00 		      	lw   	r3,[r16]
01A08C E3 36 00 00 		      	sw   	r3,[r13]
                	debugger_274:
01A090 BA 1E 00 00 		      	bra  	debugger_270
                	debugger_272:
01A094 0A 30 E6 00 		      	ldi  	r3,#115
01A098 61 37 00 00 		      	sc   	r3,[r14]
01A09C 67 E8 01 00 		      	push 	r16
01A0A0 B9 B4 FD FF 		      	bsr  	dbg_getHexNumber
01A0A4 14 EF 11 00 		      	addui	sp,sp,#8
01A0A8 82 30 00 1A 		      	mov  	r3,r1
01A0AC E3 3D A0 FF 		      	sw   	r3,-48[bp]
01A0B0 C6 3D A0 FF 		      	lw   	r3,-48[bp]
01A0B4 BD 51 06 00 		      	ble  	r3,debugger_276
01A0B8 46 38 00 00 		      	lw   	r3,[r16]
01A0BC E3 36 00 00 		      	sw   	r3,[r13]
                	debugger_276:
01A0C0 BA 18 00 00 		      	bra  	debugger_270
                	debugger_273:
01A0C4 0A 30 F0 00 		      	ldi  	r3,#120
01A0C8 61 37 00 00 		      	sc   	r3,[r14]
01A0CC B9 83 FD FF 		      	bsr  	dbg_getchar
01A0D0 82 30 00 1A 		      	mov  	r3,r1
01A0D4 82 31 00 22 		      	sxc  	r3,r3
01A0D8 E1 3D FC FF 		      	sc   	r3,-2[bp]
01A0DC C3 3D FC FF 		      	lcu  	r3,-2[bp]
01A0E0 86 41 C4 00 		      	cmp  	r4,r3,#98
01A0E4 3D 02 10 00 		      	beq  	r4,debugger_279
01A0E8 86 41 C6 00 		      	cmp  	r4,r3,#99
01A0EC 3D 02 16 00 		      	beq  	r4,debugger_280
01A0F0 86 41 D0 00 		      	cmp  	r4,r3,#104
01A0F4 3D 02 1C 00 		      	beq  	r4,debugger_281
01A0F8 86 41 EE 00 		      	cmp  	r4,r3,#119
01A0FC 3D 02 22 00 		      	beq  	r4,debugger_282
01A100 BA 0A 00 00 		      	bra  	debugger_283
                	debugger_279:
01A104 0A 30 C4 00 		      	ldi  	r3,#98
01A108 63 36 00 00 		      	sw   	r3,[r12]
01A10C 0A 30 20 00 		      	ldi  	r3,#16
01A110 E3 35 00 00 		      	sw   	r3,[r11]
01A114 3A 09 00 00 		      	bra  	debugger_278
                	debugger_280:
01A118 0A 30 C6 00 		      	ldi  	r3,#99
01A11C 63 36 00 00 		      	sw   	r3,[r12]
01A120 0A 30 10 00 		      	ldi  	r3,#8
01A124 E3 35 00 00 		      	sw   	r3,[r11]
01A128 BA 06 00 00 		      	bra  	debugger_278
                	debugger_281:
01A12C 0A 30 D0 00 		      	ldi  	r3,#104
01A130 63 36 00 00 		      	sw   	r3,[r12]
01A134 0A 30 08 00 		      	ldi  	r3,#4
01A138 E3 35 00 00 		      	sw   	r3,[r11]
01A13C 3A 04 00 00 		      	bra  	debugger_278
                	debugger_282:
01A140 0A 30 EE 00 		      	ldi  	r3,#119
01A144 63 36 00 00 		      	sw   	r3,[r12]
01A148 0A 30 04 00 		      	ldi  	r3,#2
01A14C E3 35 00 00 		      	sw   	r3,[r11]
01A150 BA 01 00 00 		      	bra  	debugger_278
                	debugger_283:
01A154 7C C0 00 00 		      	dec  	linendx,#1
01A158 64 F0 41 04 
                	debugger_278:
01A15C 67 E8 01 00 		      	push 	r16
01A160 B9 9C FD FF 		      	bsr  	dbg_getHexNumber
01A164 14 EF 11 00 		      	addui	sp,sp,#8
01A168 82 30 00 1A 		      	mov  	r3,r1
01A16C E3 3D A0 FF 		      	sw   	r3,-48[bp]
01A170 C6 3D A0 FF 		      	lw   	r3,-48[bp]
01A174 BD 51 06 00 		      	ble  	r3,debugger_284
01A178 46 38 00 00 		      	lw   	r3,[r16]
01A17C E3 36 00 00 		      	sw   	r3,[r13]
                	debugger_284:
01A180 BA 00 00 00 		      	bra  	debugger_270
                	debugger_270:
                	debugger_266:
01A184 43 37 00 00 		      	lcu  	r3,[r14]
01A188 86 41 D2 00 		      	cmp  	r4,r3,#105
01A18C 3D 02 0C 00 		      	beq  	r4,debugger_287
01A190 86 41 E6 00 		      	cmp  	r4,r3,#115
01A194 3D 02 32 00 		      	beq  	r4,debugger_288
01A198 86 41 F0 00 		      	cmp  	r4,r3,#120
01A19C 3D 02 30 00 		      	beq  	r4,debugger_289
01A1A0 BA 39 00 00 		      	bra  	debugger_286
                	debugger_287:
01A1A4 FC 01 00 00 		      	push 	#debugger_182
01A1A8 65 E0 4D 6E 
01A1AC 39 17 F8 FF 		      	bsr  	printf
01A1B0 14 EF 11 00 		      	addui	sp,sp,#8
01A1B4 E3 0D A0 FF 		      	sw   	r0,-48[bp]
                	debugger_290:
01A1B8 C6 3D A0 FF 		      	lw   	r3,-48[bp]
01A1BC C6 47 00 00 		      	lw   	r4,[r15]
01A1C0 82 31 08 0C 		      	cmp  	r3,r3,r4
01A1C4 BD 31 18 00 		      	bge  	r3,debugger_291
01A1C8 B9 03 F8 FF 		      	bsr  	getcharNoWait
01A1CC 82 30 00 1A 		      	mov  	r3,r1
01A1D0 86 31 06 00 		      	cmp  	r3,r3,#3
01A1D4 BD 11 04 00 		      	bne  	r3,debugger_293
01A1D8 BA 03 00 00 		      	bra  	debugger_291
                	debugger_293:
01A1DC 65 E0 01 00 		      	push 	#0
01A1E0 E7 E6 01 00 		      	push 	r13
01A1E4 39 B9 FA FF 		      	bsr  	disassem
01A1E8 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_292:
01A1EC E4 1D A0 FF 		      	inc  	-48[bp],#1
01A1F0 3A F9 FF FF 		      	bra  	debugger_290
                	debugger_291:
01A1F4 3A 2F 00 00 		      	bra  	debugger_286
                	debugger_288:
01A1F8 BA 2E 00 00 		      	bra  	debugger_286
                	debugger_289:
01A1FC E3 0D A0 FF 		      	sw   	r0,-48[bp]
                	debugger_295:
01A200 C6 3D A0 FF 		      	lw   	r3,-48[bp]
01A204 C6 47 00 00 		      	lw   	r4,[r15]
01A208 82 31 08 0C 		      	cmp  	r3,r3,r4
01A20C BD 31 A6 00 		      	bge  	r3,debugger_296
01A210 B9 FA F7 FF 		      	bsr  	getcharNoWait
01A214 82 30 00 1A 		      	mov  	r3,r1
01A218 86 31 06 00 		      	cmp  	r3,r3,#3
01A21C BD 11 04 00 		      	bne  	r3,debugger_298
01A220 3A 27 00 00 		      	bra  	debugger_296
                	debugger_298:
01A224 C6 3D A0 FF 		      	lw   	r3,-48[bp]
01A228 FC C0 00 00 		      	lw   	r4,muol
01A22C 46 40 60 08 
01A230 82 31 08 32 		      	modu 	r3,r3,r4
01A234 BD 11 12 00 		      	bne  	r3,debugger_300
01A238 C6 36 00 00 		      	lw   	r3,[r13]
01A23C C6 4D A0 FF 		      	lw   	r4,-48[bp]
01A240 82 31 08 28 		      	addu 	r3,r3,r4
01A244 E7 E1 01 00 		      	push 	r3
01A248 FC 01 00 00 		      	push 	#debugger_183
01A24C 65 E0 2D 6E 
01A250 B9 02 F8 FF 		      	bsr  	printf
01A254 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_300:
01A258 46 36 00 00 		      	lw   	r3,[r12]
01A25C 86 41 C4 00 		      	cmp  	r4,r3,#98
01A260 3D 02 10 00 		      	beq  	r4,debugger_303
01A264 86 41 C6 00 		      	cmp  	r4,r3,#99
01A268 3D 02 24 00 		      	beq  	r4,debugger_304
01A26C 86 41 D0 00 		      	cmp  	r4,r3,#104
01A270 3D 02 3C 00 		      	beq  	r4,debugger_305
01A274 86 41 EE 00 		      	cmp  	r4,r3,#119
01A278 3D 02 54 00 		      	beq  	r4,debugger_306
01A27C BA 1A 00 00 		      	bra  	debugger_302
                	debugger_303:
01A280 C6 36 00 00 		      	lw   	r3,[r13]
01A284 C6 4D A0 FF 		      	lw   	r4,-48[bp]
01A288 82 31 08 28 		      	addu 	r3,r3,r4
01A28C FC C0 00 00 		      	lw   	r4,bmem
01A290 46 40 70 08 
01A294 49 32 06 00 		      	lbu  	r3,0[r4+r3]
01A298 E7 E1 01 00 		      	push 	r3
01A29C FC 01 00 00 		      	push 	#debugger_184
01A2A0 65 E0 15 6E 
01A2A4 39 F8 F7 FF 		      	bsr  	printf
01A2A8 14 EF 21 00 		      	addui	sp,sp,#16
01A2AC BA 14 00 00 		      	bra  	debugger_302
                	debugger_304:
01A2B0 C6 36 00 00 		      	lw   	r3,[r13]
01A2B4 82 31 02 78 		      	asri 	r3,r3,#1
01A2B8 C6 4D A0 FF 		      	lw   	r4,-48[bp]
01A2BC 82 31 08 28 		      	addu 	r3,r3,r4
01A2C0 82 31 02 70 		      	asli 	r3,r3,#1
01A2C4 FC C0 00 00 		      	lw   	r4,cmem
01A2C8 46 40 80 08 
01A2CC 4B 32 06 00 		      	lcu  	r3,0[r4+r3]
01A2D0 E7 E1 01 00 		      	push 	r3
01A2D4 FC 01 00 00 		      	push 	#debugger_185
01A2D8 65 E0 FD 6D 
01A2DC 39 F1 F7 FF 		      	bsr  	printf
01A2E0 14 EF 21 00 		      	addui	sp,sp,#16
01A2E4 BA 0D 00 00 		      	bra  	debugger_302
                	debugger_305:
01A2E8 C6 36 00 00 		      	lw   	r3,[r13]
01A2EC 82 31 04 78 		      	asri 	r3,r3,#2
01A2F0 C6 4D A0 FF 		      	lw   	r4,-48[bp]
01A2F4 82 31 08 28 		      	addu 	r3,r3,r4
01A2F8 82 31 04 70 		      	asli 	r3,r3,#2
01A2FC FC C0 00 00 		      	lw   	r4,hmem
01A300 46 40 90 08 
01A304 4D 32 06 00 		      	lhu  	r3,0[r4+r3]
01A308 E7 E1 01 00 		      	push 	r3
01A30C FC 01 00 00 		      	push 	#debugger_186
01A310 65 E0 E5 6D 
01A314 39 EA F7 FF 		      	bsr  	printf
01A318 14 EF 21 00 		      	addui	sp,sp,#16
01A31C BA 06 00 00 		      	bra  	debugger_302
                	debugger_306:
01A320 C6 36 00 00 		      	lw   	r3,[r13]
01A324 82 31 06 78 		      	asri 	r3,r3,#3
01A328 C6 4D A0 FF 		      	lw   	r4,-48[bp]
01A32C 82 31 08 28 		      	addu 	r3,r3,r4
01A330 82 31 06 70 		      	asli 	r3,r3,#3
01A334 FC C0 00 00 		      	push 	wmem
01A338 66 E0 A1 08 
01A33C FC 01 00 00 		      	push 	#debugger_187
01A340 65 E0 C9 6D 
01A344 39 E4 F7 FF 		      	bsr  	printf
01A348 14 EF 21 00 		      	addui	sp,sp,#16
01A34C BA 00 00 00 		      	bra  	debugger_302
                	debugger_302:
                	debugger_297:
01A350 E4 1D A0 FF 		      	inc  	-48[bp],#1
01A354 BA D5 FF FF 		      	bra  	debugger_295
                	debugger_296:
01A358 FC 01 00 00 		      	push 	#debugger_188
01A35C 65 E0 BD 6D 
01A360 B9 E0 F7 FF 		      	bsr  	printf
01A364 14 EF 11 00 		      	addui	sp,sp,#8
01A368 BA 00 00 00 		      	bra  	debugger_286
                	debugger_286:
                	debugger_192:
01A36C BA AE FE FF 		      	bra  	debugger_190
                	debugger_191:
01A370 0A 10 00 00 		      	ldi  	r1,#0
01A374 BA BC FE FF 		      	bra  	debugger_203
                	debugger_189:
01A378 C6 FD 11 00 		      	lw   	lr,8[bp]
01A37C E3 FD 21 00 		      	sw   	lr,16[bp]
01A380 3A BB FE FF 		      	bra  	debugger_203
                	endpublic
                	
                	public code dbg_irq:
01A384 7C C0 00 00 		      	     	         lea   sp,dbg_stack+4088
01A388 47 E0 D1 25 
01A38C FC C0 00 00 	         sw    r1,regs+8
01A390 63 10 00 06 
01A394 FC C0 00 00 	         sw    r2,regs+16
01A398 63 20 10 06 
01A39C FC C0 00 00 	         sw    r3,regs+24
01A3A0 63 30 20 06 
01A3A4 FC C0 00 00 	         sw    r4,regs+32
01A3A8 63 40 30 06 
01A3AC FC C0 00 00 	         sw    r5,regs+40
01A3B0 63 50 40 06 
01A3B4 FC C0 00 00 	         sw    r6,regs+48
01A3B8 63 60 50 06 
01A3BC FC C0 00 00 	         sw    r7,regs+56
01A3C0 63 70 60 06 
01A3C4 FC C0 00 00 	         sw    r8,regs+64
01A3C8 63 80 70 06 
01A3CC FC C0 00 00 	         sw    r9,regs+72
01A3D0 63 90 80 06 
01A3D4 FC C0 00 00 	         sw    r10,regs+80
01A3D8 63 A0 90 06 
01A3DC FC C0 00 00 	         sw    r11,regs+88
01A3E0 63 B0 A0 06 
01A3E4 FC C0 00 00 	         sw    r12,regs+96
01A3E8 63 C0 B0 06 
01A3EC FC C0 00 00 	         sw    r13,regs+104
01A3F0 63 D0 C0 06 
01A3F4 FC C0 00 00 	         sw    r14,regs+112
01A3F8 63 E0 D0 06 
01A3FC FC C0 00 00 	         sw    r15,regs+120
01A400 63 F0 E0 06 
01A404 FC C0 00 00 	         sw    r16,regs+128
01A408 63 00 F1 06 
01A40C FC C0 00 00 	         sw    r17,regs+136
01A410 63 10 01 07 
01A414 FC C0 00 00 	         sw    r18,regs+144
01A418 63 20 11 07 
01A41C FC C0 00 00 	         sw    r19,regs+152
01A420 63 30 21 07 
01A424 FC C0 00 00 	         sw    r20,regs+160
01A428 63 40 31 07 
01A42C FC C0 00 00 	         sw    r21,regs+168
01A430 63 50 41 07 
01A434 FC C0 00 00 	         sw    r22,regs+176
01A438 63 60 51 07 
01A43C FC C0 00 00 	         sw    r23,regs+184
01A440 63 70 61 07 
01A444 FC C0 00 00 	         sw    r24,regs+192
01A448 63 80 71 07 
01A44C FC C0 00 00 	         sw    r25,regs+200
01A450 63 90 81 07 
01A454 FC C0 00 00 	         sw    r26,regs+208
01A458 63 A0 91 07 
01A45C FC C0 00 00 	         sw    r27,regs+216
01A460 63 B0 A1 07 
01A464 FC C0 00 00 	         sw    r28,regs+224
01A468 63 C0 B1 07 
01A46C FC C0 00 00 	         sw    r29,regs+232
01A470 63 D0 C1 07 
01A474 FC C0 00 00 	         sw    r30,regs+240
01A478 63 E0 D1 07 
01A47C FC C0 00 00 	         sw    r31,regs+248
01A480 63 F0 E1 07 
01A484 02 10 00 3E 	         mfspr r1,cr0
01A488 FC C0 00 00 	         sw    r1,cr0save
01A48C 63 10 F0 07 
                	
01A490 02 10 6C 3E 	         mfspr r1,dbctrl
01A494 E7 E0 01 00 	         push  r1
01A498 02 00 6C 3C 	         mtspr dbctrl,r0
01A49C 02 10 0E 3E 	         mfspr r1,dpc
01A4A0 E7 E0 01 00 	         push  r1
01A4A4 39 66 00 00 	         bsr   debugger
01A4A8 14 EF 21 00 	         addui sp,sp,#16
                	         
01A4AC FC C0 00 00 	         lw    r1,cr0save
01A4B0 46 10 F0 07 
01A4B4 82 00 00 3C 	         mtspr cr0,r1
01A4B8 FC C0 00 00 	         lw    r1,regs+8
01A4BC 46 10 00 06 
01A4C0 FC C0 00 00 	         lw    r2,regs+16
01A4C4 46 20 10 06 
01A4C8 FC C0 00 00 	         lw    r3,regs+24
01A4CC 46 30 20 06 
01A4D0 FC C0 00 00 	         lw    r4,regs+32
01A4D4 46 40 30 06 
01A4D8 FC C0 00 00 	         lw    r5,regs+40
01A4DC 46 50 40 06 
01A4E0 FC C0 00 00 	         lw    r6,regs+48
01A4E4 46 60 50 06 
01A4E8 FC C0 00 00 	         lw    r7,regs+56
01A4EC 46 70 60 06 
01A4F0 FC C0 00 00 	         lw    r8,regs+64
01A4F4 46 80 70 06 
01A4F8 FC C0 00 00 	         lw    r9,regs+72
01A4FC 46 90 80 06 
01A500 FC C0 00 00 	         lw    r10,regs+80
01A504 46 A0 90 06 
01A508 FC C0 00 00 	         lw    r11,regs+88
01A50C 46 B0 A0 06 
01A510 FC C0 00 00 	         lw    r12,regs+96
01A514 46 C0 B0 06 
01A518 FC C0 00 00 	         lw    r13,regs+104
01A51C 46 D0 C0 06 
01A520 FC C0 00 00 	         lw    r14,regs+112
01A524 46 E0 D0 06 
01A528 FC C0 00 00 	         lw    r15,regs+120
01A52C 46 F0 E0 06 
01A530 FC C0 00 00 	         lw    r16,regs+128
01A534 46 00 F1 06 
01A538 FC C0 00 00 	         lw    r17,regs+136
01A53C 46 10 01 07 
01A540 FC C0 00 00 	         lw    r18,regs+144
01A544 46 20 11 07 
01A548 FC C0 00 00 	         lw    r19,regs+152
01A54C 46 30 21 07 
01A550 FC C0 00 00 	         lw    r20,regs+160
01A554 46 40 31 07 
01A558 FC C0 00 00 	         lw    r21,regs+168
01A55C 46 50 41 07 
01A560 FC C0 00 00 	         lw    r22,regs+176
01A564 46 60 51 07 
01A568 FC C0 00 00 	         lw    r23,regs+184
01A56C 46 70 61 07 
                	;         lw    r24,regs+192
01A570 FC C0 00 00 	         lw    r25,regs+200
01A574 46 90 81 07 
01A578 FC C0 00 00 	         lw    r26,regs+208
01A57C 46 A0 91 07 
01A580 FC C0 00 00 	         lw    r27,regs+216
01A584 46 B0 A1 07 
01A588 FC C0 00 00 	         lw    r28,regs+224
01A58C 46 C0 B1 07 
01A590 FC C0 00 00 	         lw    r29,regs+232
01A594 46 D0 C1 07 
01A598 FC C0 00 00 	         lw    r30,regs+240
01A59C 46 E0 D1 07 
01A5A0 FC C0 00 00 	         lw    r31,regs+248
01A5A4 46 F0 E1 07 
01A5A8 02 E0 3B 6E 	         rtd
                	     
                	endpublic
                	
                	public code dbg_ssm:
01A5AC 7C C0 00 00 		      	     	         lea   sp,dbg_stack+4088
01A5B0 47 E0 D1 25 
01A5B4 FC C0 00 00 	         sw    r1,regs+8
01A5B8 63 10 00 06 
01A5BC FC C0 00 00 	         sw    r2,regs+16
01A5C0 63 20 10 06 
01A5C4 FC C0 00 00 	         sw    r3,regs+24
01A5C8 63 30 20 06 
01A5CC FC C0 00 00 	         sw    r4,regs+32
01A5D0 63 40 30 06 
01A5D4 FC C0 00 00 	         sw    r5,regs+40
01A5D8 63 50 40 06 
01A5DC FC C0 00 00 	         sw    r6,regs+48
01A5E0 63 60 50 06 
01A5E4 FC C0 00 00 	         sw    r7,regs+56
01A5E8 63 70 60 06 
01A5EC FC C0 00 00 	         sw    r8,regs+64
01A5F0 63 80 70 06 
01A5F4 FC C0 00 00 	         sw    r9,regs+72
01A5F8 63 90 80 06 
01A5FC FC C0 00 00 	         sw    r10,regs+80
01A600 63 A0 90 06 
01A604 FC C0 00 00 	         sw    r11,regs+88
01A608 63 B0 A0 06 
01A60C FC C0 00 00 	         sw    r12,regs+96
01A610 63 C0 B0 06 
01A614 FC C0 00 00 	         sw    r13,regs+104
01A618 63 D0 C0 06 
01A61C FC C0 00 00 	         sw    r14,regs+112
01A620 63 E0 D0 06 
01A624 FC C0 00 00 	         sw    r15,regs+120
01A628 63 F0 E0 06 
01A62C FC C0 00 00 	         sw    r16,regs+128
01A630 63 00 F1 06 
01A634 FC C0 00 00 	         sw    r17,regs+136
01A638 63 10 01 07 
01A63C FC C0 00 00 	         sw    r18,regs+144
01A640 63 20 11 07 
01A644 FC C0 00 00 	         sw    r19,regs+152
01A648 63 30 21 07 
01A64C FC C0 00 00 	         sw    r20,regs+160
01A650 63 40 31 07 
01A654 FC C0 00 00 	         sw    r21,regs+168
01A658 63 50 41 07 
01A65C FC C0 00 00 	         sw    r22,regs+176
01A660 63 60 51 07 
01A664 FC C0 00 00 	         sw    r23,regs+184
01A668 63 70 61 07 
01A66C FC C0 00 00 	         sw    r24,regs+192
01A670 63 80 71 07 
01A674 FC C0 00 00 	         sw    r25,regs+200
01A678 63 90 81 07 
01A67C FC C0 00 00 	         sw    r26,regs+208
01A680 63 A0 91 07 
01A684 FC C0 00 00 	         sw    r27,regs+216
01A688 63 B0 A1 07 
01A68C FC C0 00 00 	         sw    r28,regs+224
01A690 63 C0 B1 07 
01A694 FC C0 00 00 	         sw    r29,regs+232
01A698 63 D0 C1 07 
01A69C FC C0 00 00 	         sw    r30,regs+240
01A6A0 63 E0 D1 07 
01A6A4 FC C0 00 00 	         sw    r31,regs+248
01A6A8 63 F0 E1 07 
01A6AC 02 10 00 3E 	         mfspr r1,cr0
01A6B0 FC C0 00 00 	         sw    r1,cr0save
01A6B4 63 10 F0 07 
                	
01A6B8 02 10 6C 3E 	         mfspr r1,dbctrl
01A6BC E7 E0 01 00 	         push  r1
01A6C0 02 00 6C 3C 	         mtspr dbctrl,r0
01A6C4 02 10 0E 3E 	         mfspr r1,dpc
01A6C8 E7 E0 01 00 	         push  r1
01A6CC 39 21 00 00 	         bsr   debugger
01A6D0 14 EF 21 00 	         addui sp,sp,#16
                	         
01A6D4 FC C0 00 00 	         lw    r1,cr0save
01A6D8 46 10 F0 07 
01A6DC 82 00 00 3C 	         mtspr cr0,r1
01A6E0 FC C0 00 00 	         lw    r1,regs+8
01A6E4 46 10 00 06 
01A6E8 FC C0 00 00 	         lw    r2,regs+16
01A6EC 46 20 10 06 
01A6F0 FC C0 00 00 	         lw    r3,regs+24
01A6F4 46 30 20 06 
01A6F8 FC C0 00 00 	         lw    r4,regs+32
01A6FC 46 40 30 06 
01A700 FC C0 00 00 	         lw    r5,regs+40
01A704 46 50 40 06 
01A708 FC C0 00 00 	         lw    r6,regs+48
01A70C 46 60 50 06 
01A710 FC C0 00 00 	         lw    r7,regs+56
01A714 46 70 60 06 
01A718 FC C0 00 00 	         lw    r8,regs+64
01A71C 46 80 70 06 
01A720 FC C0 00 00 	         lw    r9,regs+72
01A724 46 90 80 06 
01A728 FC C0 00 00 	         lw    r10,regs+80
01A72C 46 A0 90 06 
01A730 FC C0 00 00 	         lw    r11,regs+88
01A734 46 B0 A0 06 
01A738 FC C0 00 00 	         lw    r12,regs+96
01A73C 46 C0 B0 06 
01A740 FC C0 00 00 	         lw    r13,regs+104
01A744 46 D0 C0 06 
01A748 FC C0 00 00 	         lw    r14,regs+112
01A74C 46 E0 D0 06 
01A750 FC C0 00 00 	         lw    r15,regs+120
01A754 46 F0 E0 06 
01A758 FC C0 00 00 	         lw    r16,regs+128
01A75C 46 00 F1 06 
01A760 FC C0 00 00 	         lw    r17,regs+136
01A764 46 10 01 07 
01A768 FC C0 00 00 	         lw    r18,regs+144
01A76C 46 20 11 07 
01A770 FC C0 00 00 	         lw    r19,regs+152
01A774 46 30 21 07 
01A778 FC C0 00 00 	         lw    r20,regs+160
01A77C 46 40 31 07 
01A780 FC C0 00 00 	         lw    r21,regs+168
01A784 46 50 41 07 
01A788 FC C0 00 00 	         lw    r22,regs+176
01A78C 46 60 51 07 
01A790 FC C0 00 00 	         lw    r23,regs+184
01A794 46 70 61 07 
                	;         lw    r24,regs+192
01A798 FC C0 00 00 	         lw    r25,regs+200
01A79C 46 90 81 07 
01A7A0 FC C0 00 00 	         lw    r26,regs+208
01A7A4 46 A0 91 07 
01A7A8 FC C0 00 00 	         lw    r27,regs+216
01A7AC 46 B0 A1 07 
01A7B0 FC C0 00 00 	         lw    r28,regs+224
01A7B4 46 C0 B1 07 
01A7B8 FC C0 00 00 	         lw    r29,regs+232
01A7BC 46 D0 C1 07 
01A7C0 FC C0 00 00 	         lw    r30,regs+240
01A7C4 46 E0 D1 07 
01A7C8 FC C0 00 00 	         lw    r31,regs+248
01A7CC 46 F0 E1 07 
01A7D0 02 E0 3B 6E 	         rtd
                	     
                	endpublic
                	
                	public code debugger:
01A7D4 E7 EF 01 00 		      	push 	lr
01A7D8 67 EE 01 00 		      	push 	xlr
01A7DC E7 ED 01 00 		      	push 	bp
01A7E0 FC 01 00 00 		      	ldi  	xlr,#debugger_312
01A7E4 0A C0 29 54 
01A7E8 02 BF 01 1A 		      	mov  	bp,sp
01A7EC 15 EF 51 00 		      	subui	sp,sp,#40
01A7F0 E7 E5 01 00 		      	push 	r11
01A7F4 67 E6 01 00 		      	push 	r12
01A7F8 E7 E6 01 00 		      	push 	r13
01A7FC FC C0 00 00 		      	ldi  	r11,#ssm
01A800 0A B0 00 08 
01A804 FC C0 00 00 		      	ldi  	r12,#dbg_dbctrl
01A808 0A C0 E0 05 
01A80C C6 3D 40 00 		      	lw   	r3,32[bp]
01A810 63 36 00 00 		      	sw   	r3,[r12]
01A814 7C D0 FF FF 		      	ldi  	r13,#-3145728
01A818 0A D0 00 00 
01A81C C6 3D 30 00 		      	lw   	r3,24[bp]
01A820 8C 31 F8 FF 		      	and  	r3,r3,#-4
01A824 E3 3D 30 00 		      	sw   	r3,24[bp]
01A828 C6 3D 30 00 		      	lw   	r3,24[bp]
01A82C BD 01 0A 00 		      	beq  	r3,debugger_313
01A830 E6 ED 31 00 		      	push 	24[bp]
01A834 E6 ED 31 00 		      	push 	24[bp]
01A838 39 1D FC FF 		      	bsr  	disassem20
01A83C 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_313:
                	debugger_315:
01A840 FC 01 00 00 		      	push 	#debugger_311
01A844 65 E0 A1 6D 
01A848 B9 43 F7 FF 		      	bsr  	printf
01A84C 14 EF 11 00 		      	addui	sp,sp,#8
                	debugger_317:
01A850 B9 36 F7 FF 		      	bsr  	getchar
01A854 82 30 00 1A 		      	mov  	r3,r1
01A858 E1 3D FC FF 		      	sc   	r3,-2[bp]
01A85C C6 35 00 00 		      	lw   	r3,[r11]
01A860 BD 01 70 00 		      	beq  	r3,debugger_319
01A864 C3 3D FC FF 		      	lcu  	r3,-2[bp]
01A868 86 31 E6 00 		      	cmp  	r3,r3,#115
01A86C BD 11 1E 00 		      	bne  	r3,debugger_321
01A870 46 36 00 00 		      	lw   	r3,[r12]
01A874 8D 31 00 00 		      	ori  	r3,r3,#0
01A878 63 36 00 00 		      	sw   	r3,[r12]
01A87C 66 E6 01 00 		      	push 	[r12]
01A880 B9 84 FC FF 		      	bsr  	dbg_arm
01A884 14 EF 11 00 		      	addui	sp,sp,#8
                	debugger_323:
01A888 57 DF 10 00 		      	pop  	r13
01A88C 57 CF 10 00 		      	pop  	r12
01A890 57 BF 10 00 		      	pop  	r11
01A894 82 ED 01 1A 		      	mov  	sp,bp
01A898 57 BF 11 00 		      	pop  	bp
01A89C 57 CF 11 00 		      	pop  	xlr
01A8A0 57 FF 11 00 		      	pop  	lr
01A8A4 37 FF 01 00 		      	rtl  	#0
                	debugger_321:
01A8A8 C3 3D FC FF 		      	lcu  	r3,-2[bp]
01A8AC 86 31 5A 00 		      	cmp  	r3,r3,#45
01A8B0 BD 01 08 00 		      	beq  	r3,debugger_326
01A8B4 C3 3D FC FF 		      	lcu  	r3,-2[bp]
01A8B8 86 31 06 00 		      	cmp  	r3,r3,#3
01A8BC BD 11 12 00 		      	bne  	r3,debugger_324
                	debugger_326:
01A8C0 E3 05 00 00 		      	sw   	r0,[r11]
01A8C4 46 36 00 00 		      	lw   	r3,[r12]
01A8C8 8C 31 FE FF 		      	andi 	r3,r3,#-1
01A8CC 63 36 00 00 		      	sw   	r3,[r12]
01A8D0 66 E6 01 00 		      	push 	[r12]
01A8D4 39 7A FC FF 		      	bsr  	dbg_arm
01A8D8 14 EF 11 00 		      	addui	sp,sp,#8
01A8DC BA F5 FF FF 		      	bra  	debugger_323
                	debugger_324:
01A8E0 C3 3D FC FF 		      	lcu  	r3,-2[bp]
01A8E4 86 31 DC 00 		      	cmp  	r3,r3,#110
01A8E8 BD 11 2A 00 		      	bne  	r3,debugger_327
01A8EC 0A 30 04 00 		      	ldi  	r3,#2
01A8F0 E3 35 00 00 		      	sw   	r3,[r11]
01A8F4 46 36 00 00 		      	lw   	r3,[r12]
01A8F8 FC F0 FF FF 		      	andi 	r3,r3,#-983041
01A8FC 8C 31 FE FF 
01A900 63 36 00 00 		      	sw   	r3,[r12]
01A904 46 36 00 00 		      	lw   	r3,[r12]
01A908 7C 08 00 00 		      	ori  	r3,r3,#524289
01A90C 8D 31 02 00 
01A910 63 36 00 00 		      	sw   	r3,[r12]
01A914 C6 3D 30 00 		      	lw   	r3,24[bp]
01A918 94 31 08 00 		      	addu 	r3,r3,#4
01A91C E7 E1 01 00 		      	push 	r3
01A920 65 E0 01 00 		      	push 	#0
01A924 39 62 FC FF 		      	bsr  	dbg_SetDBAD
01A928 14 EF 21 00 		      	addui	sp,sp,#16
01A92C 66 E6 01 00 		      	push 	[r12]
01A930 B9 6E FC FF 		      	bsr  	dbg_arm
01A934 14 EF 11 00 		      	addui	sp,sp,#8
01A938 3A EA FF FF 		      	bra  	debugger_323
                	debugger_327:
01A93C BA 07 00 00 		      	bra  	debugger_320
                	debugger_319:
01A940 C3 3D FC FF 		      	lcu  	r3,-2[bp]
01A944 86 31 1A 00 		      	cmp  	r3,r3,#13
01A948 BD 11 04 00 		      	bne  	r3,debugger_329
01A94C BA 06 00 00 		      	bra  	debugger_318
                	debugger_329:
01A950 C3 3D FC FF 		      	lcu  	r3,-2[bp]
01A954 86 31 18 00 		      	cmp  	r3,r3,#12
01A958 BD 11 08 00 		      	bne  	r3,debugger_331
01A95C B9 01 EC FF 		      	     	                           bsr ClearScreen
                	                       
01A960 39 49 FC FF 		      	bsr  	dbg_HomeCursor
01A964 BA 03 00 00 		      	bra  	debugger_318
                	debugger_331:
01A968 C3 3D FC FF 		      	lcu  	r3,-2[bp]
01A96C E7 E1 01 00 		      	push 	r3
01A970 39 90 F6 FF 		      	bsr  	putch
01A974 14 EF 11 00 		      	addui	sp,sp,#8
                	debugger_320:
01A978 0A 30 02 00 		      	ldi  	r3,#1
01A97C BD 11 6A FF 		      	bne  	r3,debugger_317
                	debugger_318:
01A980 B9 3C FC FF 		      	bsr  	dbg_GetCursorRow
01A984 82 30 00 1A 		      	mov  	r3,r1
01A988 82 31 00 20 		      	sxb  	r3,r3
01A98C E3 3D E0 FF 		      	sw   	r3,-16[bp]
01A990 B9 3E FC FF 		      	bsr  	dbg_GetCursorCol
01A994 82 30 00 1A 		      	mov  	r3,r1
01A998 82 31 00 20 		      	sxb  	r3,r3
01A99C E3 3D D0 FF 		      	sw   	r3,-24[bp]
01A9A0 E3 0D B0 FF 		      	sw   	r0,-40[bp]
                	debugger_333:
01A9A4 C6 3D B0 FF 		      	lw   	r3,-40[bp]
01A9A8 86 31 A8 00 		      	cmp  	r3,r3,#84
01A9AC BD 31 26 00 		      	bge  	r3,debugger_334
01A9B0 C6 3D E0 FF 		      	lw   	r3,-16[bp]
01A9B4 87 31 A8 00 		      	mul  	r3,r3,#84
01A9B8 C6 4D B0 FF 		      	lw   	r4,-40[bp]
01A9BC 82 31 08 28 		      	addu 	r3,r3,r4
01A9C0 82 31 04 70 		      	asli 	r3,r3,#2
01A9C4 CD 36 06 00 		      	lhu  	r3,0[r13+r3]
01A9C8 8C 31 FE 07 		      	and  	r3,r3,#1023
01A9CC E7 E1 01 00 		      	push 	r3
01A9D0 B9 5E FC FF 		      	bsr  	CvtScreenToAscii
01A9D4 14 EF 11 00 		      	addui	sp,sp,#8
01A9D8 82 30 00 1A 		      	mov  	r3,r1
01A9DC 82 31 00 22 		      	sxc  	r3,r3
01A9E0 C6 4D B0 FF 		      	lw   	r4,-40[bp]
01A9E4 02 42 02 70 		      	asli 	r4,r4,#1
01A9E8 7C C0 00 00 		      	sc   	r3,linebuf[r4]
01A9EC 61 32 50 04 
                	debugger_335:
01A9F0 E4 1D B0 FF 		      	inc  	-40[bp],#1
01A9F4 3A F6 FF FF 		      	bra  	debugger_333
                	debugger_334:
01A9F8 39 BC FD FF 		      	bsr  	dbg_parse_begin
01A9FC 82 30 00 1A 		      	mov  	r3,r1
01AA00 86 31 02 00 		      	cmp  	r3,r3,#1
01AA04 BD 11 04 00 		      	bne  	r3,debugger_336
01AA08 3A 01 00 00 		      	bra  	debugger_316
                	debugger_336:
01AA0C BA C6 FF FF 		      	bra  	debugger_315
                	debugger_316:
01AA10 3A CF FF FF 		      	bra  	debugger_323
                	debugger_312:
01AA14 C6 FD 11 00 		      	lw   	lr,8[bp]
01AA18 E3 FD 21 00 		      	sw   	lr,16[bp]
01AA1C BA CD FF FF 		      	bra  	debugger_323
                	endpublic
                	
                	public code dbg_init:
01AA20 E7 EF 01 00 		      	push 	lr
01AA24 67 EE 01 00 		      	push 	xlr
01AA28 E7 ED 01 00 		      	push 	bp
01AA2C FC 01 00 00 		      	ldi  	xlr,#debugger_338
01AA30 0A C0 C9 55 
01AA34 02 BF 01 1A 		      	mov  	bp,sp
01AA38 FC 01 00 00 		      	push 	#dbg_irq
01AA3C 65 E0 09 47 
01AA40 65 E0 E1 03 		      	push 	#496
01AA44 39 14 FC FF 		      	bsr  	set_vector
01AA48 14 EF 21 00 		      	addui	sp,sp,#16
01AA4C FC 01 00 00 		      	push 	#dbg_ssm
01AA50 65 E0 59 4B 
01AA54 65 E0 DF 03 		      	push 	#495
01AA58 B9 11 FC FF 		      	bsr  	set_vector
01AA5C 14 EF 21 00 		      	addui	sp,sp,#16
01AA60 FC C0 00 00 		      	sw   	r0,ssm
01AA64 63 00 00 08 
01AA68 FC C0 00 00 		      	sw   	r0,bmem
01AA6C 63 00 70 08 
01AA70 FC C0 00 00 		      	sw   	r0,cmem
01AA74 63 00 80 08 
01AA78 FC C0 00 00 		      	sw   	r0,hmem
01AA7C 63 00 90 08 
01AA80 FC C0 00 00 		      	sw   	r0,wmem
01AA84 63 00 A0 08 
01AA88 7C 01 00 00 		      	ldi  	r3,#65536
01AA8C 0A 30 00 00 
01AA90 FC C0 00 00 		      	sw   	r3,curaddr
01AA94 63 30 20 08 
01AA98 0A 30 20 00 		      	ldi  	r3,#16
01AA9C FC C0 00 00 		      	sw   	r3,muol
01AAA0 63 30 60 08 
01AAA4 0A 30 C4 00 		      	ldi  	r3,#98
01AAA8 FC C0 00 00 		      	sw   	r3,cursz
01AAAC 63 30 30 08 
01AAB0 0A 30 F0 00 		      	ldi  	r3,#120
01AAB4 FC C0 00 00 		      	sc   	r3,curfmt
01AAB8 61 30 40 08 
01AABC 0A 30 02 00 		      	ldi  	r3,#1
01AAC0 FC C0 00 00 		      	sw   	r3,currep
01AAC4 63 30 50 08 
01AAC8 FC C0 00 00 		      	sw   	r0,dbg_dbctrl
01AACC 63 00 E0 05 
                	debugger_339:
01AAD0 82 ED 01 1A 		      	mov  	sp,bp
01AAD4 57 BF 11 00 		      	pop  	bp
01AAD8 57 CF 11 00 		      	pop  	xlr
01AADC 57 FF 11 00 		      	pop  	lr
01AAE0 37 FF 01 00 		      	rtl  	#0
                	debugger_338:
01AAE4 C6 FD 11 00 		      	lw   	lr,8[bp]
01AAE8 E3 FD 21 00 		      	sw   	lr,16[bp]
01AAEC BA FC FF FF 		      	bra  	debugger_339
                	endpublic
                	
                		rodata
                		align	16                	
                		align	8                	
                		extern	RTCC_BUF
                		extern	Milliseconds
                		extern	Milliseconds
                		rodata
                		align	16                	
                		align	8                	
                	stdio_2:	; moderr 
01B000 6D 00 6F 00 64 00 65 00 		dc	109,111,100,101,114,114,32,0
01B008 72 00 72 00 20 00 00 00 
                	;	global	putch
                	;	global	getcharNoWait
                	;	global	printf
                	;	global	putnum
                	;	global	putstr
                	;	global	getchar
                	;	global	putstr2
                		extern	isdigit
                	;	global	puthexnum
                	;	global	puthexnum
                		rodata
                		align	16                	
                		align	8                	
                	;	global	islower
                	;	global	ispunct
                	;	global	isupper
                	;	global	isprint
                	;	global	tolower
                	;	global	toupper
                	;	global	isxdigit
                	;	global	isalpha
                	;	global	isspace
                	;	global	isdigit
                	;	global	isgraph
                	;	global	isalnum
                	;	global	iscntrl
                	;	global	iscntrl
                		rodata
                		align	16                	
                		align	8                	
                	disassem_341:	; Disassem:
01B010 44 00 69 00 73 00 61 00 		dc	68,105,115,97,115,115,101,109
01B018 73 00 73 00 65 00 6D 00 
01B020 3A 00 0D 00 0A 00 00 00 		dc	58,13,10,0
                	disassem_235:	; ?????
01B028 3F 00 3F 00 3F 00 3F 00 		dc	63,63,63,63,63,13,10,0
01B030 3F 00 0D 00 0A 00 00 00 
                	disassem_234:	; #$%X
01B038 23 00 24 00 25 00 58 00 		dc	35,36,37,88,13,10,0
01B040 0D 00 0A 00 00 00       
                	disassem_233:	; #$%X
01B046 23 00 24 00 25 00 58 00 		dc	35,36,37,88,13,10,0
01B04E 0D 00 0A 00 00 00       
                	disassem_232:	; LDI   
01B054 4C 00 44 00 49 00 20 00 		dc	76,68,73,32,32,32,0
01B05C 20 00 20 00 00 00       
                	disassem_231:	; NOP
01B062 4E 00 4F 00 50 00 0D 00 		dc	78,79,80,13,10,0
01B06A 0A 00 00 00             
                	disassem_230:
01B06E 0D 00 0A 00 00 00       		dc	13,10,0
                	disassem_229:	; POP   
01B074 50 00 4F 00 50 00 20 00 		dc	80,79,80,32,32,32,0
01B07C 20 00 20 00 00 00       
                	disassem_228:
01B082 0D 00 0A 00 00 00       		dc	13,10,0
                	disassem_227:	; PUSH  
01B088 50 00 55 00 53 00 48 00 		dc	80,85,83,72,32,32,0
01B090 20 00 20 00 00 00       
                	disassem_226:	; SWCR 
01B096 53 00 57 00 43 00 52 00 		dc	83,87,67,82,32,0
01B09E 20 00 00 00             
                	disassem_225:	; LWAR 
01B0A2 4C 00 57 00 41 00 52 00 		dc	76,87,65,82,32,0
01B0AA 20 00 00 00             
                	disassem_224:	; SW   
01B0AE 53 00 57 00 20 00 20 00 		dc	83,87,32,32,32,0
01B0B6 20 00 00 00             
                	disassem_223:	; SH   
01B0BA 53 00 48 00 20 00 20 00 		dc	83,72,32,32,32,0
01B0C2 20 00 00 00             
                	disassem_222:	; SC   
01B0C6 53 00 43 00 20 00 20 00 		dc	83,67,32,32,32,0
01B0CE 20 00 00 00             
                	disassem_221:	; SB   
01B0D2 53 00 42 00 20 00 20 00 		dc	83,66,32,32,32,0
01B0DA 20 00 00 00             
                	disassem_220:	; SW   
01B0DE 53 00 57 00 20 00 20 00 		dc	83,87,32,32,32,0
01B0E6 20 00 00 00             
                	disassem_219:	; SH   
01B0EA 53 00 48 00 20 00 20 00 		dc	83,72,32,32,32,0
01B0F2 20 00 00 00             
                	disassem_218:	; SC   
01B0F6 53 00 43 00 20 00 20 00 		dc	83,67,32,32,32,0
01B0FE 20 00 00 00             
                	disassem_217:	; SB   
01B102 53 00 42 00 20 00 20 00 		dc	83,66,32,32,32,0
01B10A 20 00 00 00             
                	disassem_216:	; LEA  
01B10E 4C 00 45 00 41 00 20 00 		dc	76,69,65,32,32,0
01B116 20 00 00 00             
                	disassem_215:	; LW   
01B11A 4C 00 57 00 20 00 20 00 		dc	76,87,32,32,32,0
01B122 20 00 00 00             
                	disassem_214:	; LHU  
01B126 4C 00 48 00 55 00 20 00 		dc	76,72,85,32,32,0
01B12E 20 00 00 00             
                	disassem_213:	; LH   
01B132 4C 00 48 00 20 00 20 00 		dc	76,72,32,32,32,0
01B13A 20 00 00 00             
                	disassem_212:	; LCU  
01B13E 4C 00 43 00 55 00 20 00 		dc	76,67,85,32,32,0
01B146 20 00 00 00             
                	disassem_211:	; LC   
01B14A 4C 00 43 00 20 00 20 00 		dc	76,67,32,32,32,0
01B152 20 00 00 00             
                	disassem_210:	; LBU  
01B156 4C 00 42 00 55 00 20 00 		dc	76,66,85,32,32,0
01B15E 20 00 00 00             
                	disassem_209:	; LB   
01B162 4C 00 42 00 20 00 20 00 		dc	76,66,32,32,32,0
01B16A 20 00 00 00             
                	disassem_208:	; LEA  
01B16E 4C 00 45 00 41 00 20 00 		dc	76,69,65,32,32,0
01B176 20 00 00 00             
                	disassem_207:	; LW   
01B17A 4C 00 57 00 20 00 20 00 		dc	76,87,32,32,32,0
01B182 20 00 00 00             
                	disassem_206:	; LHU  
01B186 4C 00 48 00 55 00 20 00 		dc	76,72,85,32,32,0
01B18E 20 00 00 00             
                	disassem_205:	; LH   
01B192 4C 00 48 00 20 00 20 00 		dc	76,72,32,32,32,0
01B19A 20 00 00 00             
                	disassem_204:	; LCU  
01B19E 4C 00 43 00 55 00 20 00 		dc	76,67,85,32,32,0
01B1A6 20 00 00 00             
                	disassem_203:	; LC   
01B1AA 4C 00 43 00 20 00 20 00 		dc	76,67,32,32,32,0
01B1B2 20 00 00 00             
                	disassem_202:	; LBU  
01B1B6 4C 00 42 00 55 00 20 00 		dc	76,66,85,32,32,0
01B1BE 20 00 00 00             
                	disassem_201:	; LB   
01B1C2 4C 00 42 00 20 00 20 00 		dc	76,66,32,32,32,0
01B1CA 20 00 00 00             
                	disassem_200:	; RTS   #%X
01B1CE 52 00 54 00 53 00 20 00 		dc	82,84,83,32,32,32,35,37
01B1D6 20 00 20 00 23 00 25 00 
01B1DE 58 00 0D 00 0A 00 00 00 		dc	88,13,10,0
                	disassem_199:	; RTL   #%X
01B1E6 52 00 54 00 4C 00 20 00 		dc	82,84,76,32,32,32,35,37
01B1EE 20 00 20 00 23 00 25 00 
01B1F6 58 00 0D 00 0A 00 00 00 		dc	88,13,10,0
                	disassem_198:	; BRA   $%X
01B1FE 42 00 52 00 41 00 20 00 		dc	66,82,65,32,32,32,36,37
01B206 20 00 20 00 24 00 25 00 
01B20E 58 00 0D 00 0A 00 00 00 		dc	88,13,10,0
                	disassem_197:	; BSR   $%X
01B216 42 00 53 00 52 00 20 00 		dc	66,83,82,32,32,32,36,37
01B21E 20 00 20 00 24 00 25 00 
01B226 58 00 0D 00 0A 00 00 00 		dc	88,13,10,0
                	disassem_196:	; ???  
01B22E 3F 00 3F 00 3F 00 20 00 		dc	63,63,63,32,32,0
01B236 20 00 00 00             
                	disassem_195:	; BGE  
01B23A 42 00 47 00 45 00 20 00 		dc	66,71,69,32,32,0
01B242 20 00 00 00             
                	disassem_194:	; BGT  
01B246 42 00 47 00 54 00 20 00 		dc	66,71,84,32,32,0
01B24E 20 00 00 00             
                	disassem_193:	; BLE  
01B252 42 00 4C 00 45 00 20 00 		dc	66,76,69,32,32,0
01B25A 20 00 00 00             
                	disassem_192:	; BLT  
01B25E 42 00 4C 00 54 00 20 00 		dc	66,76,84,32,32,0
01B266 20 00 00 00             
                	disassem_191:	; BNE  
01B26A 42 00 4E 00 45 00 20 00 		dc	66,78,69,32,32,0
01B272 20 00 00 00             
                	disassem_190:	; BEQ  
01B276 42 00 45 00 51 00 20 00 		dc	66,69,81,32,32,0
01B27E 20 00 00 00             
                	disassem_189:	; EOR  
01B282 45 00 4F 00 52 00 20 00 		dc	69,79,82,32,32,0
01B28A 20 00 00 00             
                	disassem_188:	; OR   
01B28E 4F 00 52 00 20 00 20 00 		dc	79,82,32,32,32,0
01B296 20 00 00 00             
                	disassem_187:	; AND  
01B29A 41 00 4E 00 44 00 20 00 		dc	65,78,68,32,32,0
01B2A2 20 00 00 00             
                	disassem_186:	; DIVU 
01B2A6 44 00 49 00 56 00 55 00 		dc	68,73,86,85,32,0
01B2AE 20 00 00 00             
                	disassem_185:	; DIV  
01B2B2 44 00 49 00 56 00 20 00 		dc	68,73,86,32,32,0
01B2BA 20 00 00 00             
                	disassem_184:	; MULU 
01B2BE 4D 00 55 00 4C 00 55 00 		dc	77,85,76,85,32,0
01B2C6 20 00 00 00             
                	disassem_183:	; MUL  
01B2CA 4D 00 55 00 4C 00 20 00 		dc	77,85,76,32,32,0
01B2D2 20 00 00 00             
                	disassem_182:	; CMPU 
01B2D6 43 00 4D 00 50 00 55 00 		dc	67,77,80,85,32,0
01B2DE 20 00 00 00             
                	disassem_181:	; CMP  
01B2E2 43 00 4D 00 50 00 20 00 		dc	67,77,80,32,32,0
01B2EA 20 00 00 00             
                	disassem_180:	; SUBU 
01B2EE 53 00 55 00 42 00 55 00 		dc	83,85,66,85,32,0
01B2F6 20 00 00 00             
                	disassem_179:	; SUB  
01B2FA 53 00 55 00 42 00 20 00 		dc	83,85,66,32,32,0
01B302 20 00 00 00             
                	disassem_178:	; ADDU 
01B306 41 00 44 00 44 00 55 00 		dc	65,68,68,85,32,0
01B30E 20 00 00 00             
                	disassem_177:	; ADD  
01B312 41 00 44 00 44 00 20 00 		dc	65,68,68,32,32,0
01B31A 20 00 00 00             
                	disassem_176:
01B31E 0D 00 0A 00 00 00       		dc	13,10,0
                	disassem_175:	; ,
01B324 2C 00 00 00             		dc	44,0
                	disassem_174:	; MTSPR 
01B328 4D 00 54 00 53 00 50 00 		dc	77,84,83,80,82,32,0
01B330 52 00 20 00 00 00       
                	disassem_173:
01B336 0D 00 0A 00 00 00       		dc	13,10,0
                	disassem_172:	; MFSPR 
01B33C 4D 00 46 00 53 00 50 00 		dc	77,70,83,80,82,32,0
01B344 52 00 20 00 00 00       
                	disassem_171:	; EOR  
01B34A 45 00 4F 00 52 00 20 00 		dc	69,79,82,32,32,0
01B352 20 00 00 00             
                	disassem_170:	; OR   
01B356 4F 00 52 00 20 00 20 00 		dc	79,82,32,32,32,0
01B35E 20 00 00 00             
                	disassem_169:	; AND  
01B362 41 00 4E 00 44 00 20 00 		dc	65,78,68,32,32,0
01B36A 20 00 00 00             
                	disassem_168:	; DIVU 
01B36E 44 00 49 00 56 00 55 00 		dc	68,73,86,85,32,0
01B376 20 00 00 00             
                	disassem_167:	; DIV  
01B37A 44 00 49 00 56 00 20 00 		dc	68,73,86,32,32,0
01B382 20 00 00 00             
                	disassem_166:	; MULU 
01B386 4D 00 55 00 4C 00 55 00 		dc	77,85,76,85,32,0
01B38E 20 00 00 00             
                	disassem_165:	; MUL  
01B392 4D 00 55 00 4C 00 20 00 		dc	77,85,76,32,32,0
01B39A 20 00 00 00             
                	disassem_164:	; CMPU 
01B39E 43 00 4D 00 50 00 55 00 		dc	67,77,80,85,32,0
01B3A6 20 00 00 00             
                	disassem_163:	; CMP  
01B3AA 43 00 4D 00 50 00 20 00 		dc	67,77,80,32,32,0
01B3B2 20 00 00 00             
                	disassem_162:	; SUBU 
01B3B6 53 00 55 00 42 00 55 00 		dc	83,85,66,85,32,0
01B3BE 20 00 00 00             
                	disassem_161:	; SUB  
01B3C2 53 00 55 00 42 00 20 00 		dc	83,85,66,32,32,0
01B3CA 20 00 00 00             
                	disassem_160:	; ADDU 
01B3CE 41 00 44 00 44 00 55 00 		dc	65,68,68,85,32,0
01B3D6 20 00 00 00             
                	disassem_159:	; ADD  
01B3DA 41 00 44 00 44 00 20 00 		dc	65,68,68,32,32,0
01B3E2 20 00 00 00             
                	disassem_158:	; ???
01B3E6 3F 00 3F 00 3F 00 0D 00 		dc	63,63,63,13,10,0
01B3EE 0A 00 00 00             
                	disassem_157:	; RTI
01B3F2 52 00 54 00 49 00 0D 00 		dc	82,84,73,13,10,0
01B3FA 0A 00 00 00             
                	disassem_156:	; RTE
01B3FE 52 00 54 00 45 00 0D 00 		dc	82,84,69,13,10,0
01B406 0A 00 00 00             
                	disassem_155:	; RTD
01B40A 52 00 54 00 44 00 0D 00 		dc	82,84,68,13,10,0
01B412 0A 00 00 00             
                	disassem_154:	; WAI
01B416 57 00 41 00 49 00 0D 00 		dc	87,65,73,13,10,0
01B41E 0A 00 00 00             
                	disassem_153:	; SEI
01B422 53 00 45 00 49 00 0D 00 		dc	83,69,73,13,10,0
01B42A 0A 00 00 00             
                	disassem_152:	; CLI
01B42E 43 00 4C 00 49 00 0D 00 		dc	67,76,73,13,10,0
01B436 0A 00 00 00             
                	disassem_151:	; IMM
01B43A 49 00 4D 00 4D 00 0D 00 		dc	73,77,77,13,10,0
01B442 0A 00 00 00             
                	disassem_146:
01B446 0D 00 0A 00 00 00       		dc	13,10,0
                	disassem_145:	; %s 
01B44C 25 00 73 00 20 00 00 00 		dc	37,115,32,0
                	disassem_144:
01B454 0D 00 0A 00 00 00       		dc	13,10,0
                	disassem_143:	; MOV   
01B45A 4D 00 4F 00 56 00 20 00 		dc	77,79,86,32,32,32,0
01B462 20 00 20 00 00 00       
                	disassem_138:	; %06X
01B468 25 00 30 00 36 00 58 00 		dc	37,48,54,88,13,10,0
01B470 0D 00 0A 00 00 00       
                	disassem_137:	; %s 
01B476 25 00 73 00 20 00 00 00 		dc	37,115,32,0
                	disassem_132:	; #$%X
01B47E 23 00 24 00 25 00 58 00 		dc	35,36,37,88,13,10,0
01B486 0D 00 0A 00 00 00       
                	disassem_131:	; #$%X
01B48C 23 00 24 00 25 00 58 00 		dc	35,36,37,88,13,10,0
01B494 0D 00 0A 00 00 00       
                	disassem_130:	; %s 
01B49A 25 00 73 00 20 00 00 00 		dc	37,115,32,0
                	disassem_126:	; %s 
01B4A2 25 00 73 00 20 00 00 00 		dc	37,115,32,0
                	disassem_114:	; [R%d]
01B4AA 5B 00 52 00 25 00 64 00 		dc	91,82,37,100,93,13,10,0
01B4B2 5D 00 0D 00 0A 00 00 00 
                	disassem_113:	; [R%d
01B4BA 5B 00 52 00 25 00 64 00 		dc	91,82,37,100,0
01B4C2 00 00                   
                	disassem_112:	; [R%d+R%d
01B4C4 5B 00 52 00 25 00 64 00 		dc	91,82,37,100,43,82,37,100
01B4CC 2B 00 52 00 25 00 64 00 
01B4D4 00 00                   		dc	0
                	disassem_111:	; $%X
01B4D6 24 00 25 00 58 00 00 00 		dc	36,37,88,0
                	disassem_110:	; %s R%d,
01B4DE 25 00 73 00 20 00 52 00 		dc	37,115,32,82,37,100,44,0
01B4E6 25 00 64 00 2C 00 00 00 
                	disassem_101:	; BRK?  #%X
01B4EE 42 00 52 00 4B 00 3F 00 		dc	66,82,75,63,32,32,35,37
01B4F6 20 00 20 00 23 00 25 00 
01B4FE 58 00 0D 00 0A 00 00 00 		dc	88,13,10,0
                	disassem_100:	; INT   #%X
01B506 49 00 4E 00 54 00 20 00 		dc	73,78,84,32,32,32,35,37
01B50E 20 00 20 00 23 00 25 00 
01B516 58 00 0D 00 0A 00 00 00 		dc	88,13,10,0
                	disassem_99:	; DBG   #%X
01B51E 44 00 42 00 47 00 20 00 		dc	68,66,71,32,32,32,35,37
01B526 20 00 20 00 23 00 25 00 
01B52E 58 00 0D 00 0A 00 00 00 		dc	88,13,10,0
                	disassem_98:	; SYS   #%X
01B536 53 00 59 00 53 00 20 00 		dc	83,89,83,32,32,32,35,37
01B53E 20 00 20 00 23 00 25 00 
01B546 58 00 0D 00 0A 00 00 00 		dc	88,13,10,0
                	disassem_92:	; ]
01B54E 5D 00 0D 00 0A 00 00 00 		dc	93,13,10,0
                	disassem_91:	; *%d]
01B556 2A 00 25 00 64 00 5D 00 		dc	42,37,100,93,13,10,0
01B55E 0D 00 0A 00 00 00       
                	disassem_81:	; #%d
01B564 23 00 25 00 64 00 0D 00 		dc	35,37,100,13,10,0
01B56C 0A 00 00 00             
                	disassem_80:	; [R%d],
01B570 5B 00 52 00 25 00 64 00 		dc	91,82,37,100,93,44,0
01B578 5D 00 2C 00 00 00       
                	disassem_79:	; ,
01B57E 2C 00 00 00             		dc	44,0
                	disassem_78:	; $%X
01B582 24 00 25 00 58 00 00 00 		dc	36,37,88,0
                	disassem_77:	; $%X
01B58A 24 00 25 00 58 00 00 00 		dc	36,37,88,0
                	disassem_76:	; INC   
01B592 49 00 4E 00 43 00 20 00 		dc	73,78,67,32,32,32,0
01B59A 20 00 20 00 00 00       
                	disassem_75:	; DEC   
01B5A0 44 00 45 00 43 00 20 00 		dc	68,69,67,32,32,32,0
01B5A8 20 00 20 00 00 00       
                	disassem_67:
01B5AE 0D 00 0A 00 00 00       		dc	13,10,0
                	disassem_66:	; [R%d]
01B5B4 5B 00 52 00 25 00 64 00 		dc	91,82,37,100,93,13,10,0
01B5BC 5D 00 0D 00 0A 00 00 00 
                	disassem_65:	; $%X
01B5C4 24 00 25 00 58 00 00 00 		dc	36,37,88,0
                	disassem_64:	; $%X
01B5CC 24 00 25 00 58 00 00 00 		dc	36,37,88,0
                	disassem_44:	; SPR%d
01B5D4 53 00 50 00 52 00 25 00 		dc	83,80,82,37,100,0
01B5DC 64 00 00 00             
                	disassem_43:	; DBSTAT
01B5E0 44 00 42 00 53 00 54 00 		dc	68,66,83,84,65,84,0
01B5E8 41 00 54 00 00 00       
                	disassem_42:	; DBCTRL
01B5EE 44 00 42 00 43 00 54 00 		dc	68,66,67,84,82,76,0
01B5F6 52 00 4C 00 00 00       
                	disassem_41:	; DBAD3
01B5FC 44 00 42 00 41 00 44 00 		dc	68,66,65,68,51,0
01B604 33 00 00 00             
                	disassem_40:	; DBAD2
01B608 44 00 42 00 41 00 44 00 		dc	68,66,65,68,50,0
01B610 32 00 00 00             
                	disassem_39:	; DBAD1
01B614 44 00 42 00 41 00 44 00 		dc	68,66,65,68,49,0
01B61C 31 00 00 00             
                	disassem_38:	; DBAD0
01B620 44 00 42 00 41 00 44 00 		dc	68,66,65,68,48,0
01B628 30 00 00 00             
                	disassem_37:	; VBR
01B62C 56 00 42 00 52 00 00 00 		dc	86,66,82,0
                	disassem_36:	; EPC
01B634 45 00 50 00 43 00 00 00 		dc	69,80,67,0
                	disassem_35:	; IPC
01B63C 49 00 50 00 43 00 00 00 		dc	73,80,67,0
                	disassem_34:	; DPC
01B644 44 00 50 00 43 00 00 00 		dc	68,80,67,0
                	disassem_33:	; CLK
01B64C 43 00 4C 00 4B 00 00 00 		dc	67,76,75,0
                	disassem_32:	; TICK
01B654 54 00 49 00 43 00 4B 00 		dc	84,73,67,75,0
01B65C 00 00                   
                	disassem_31:	; CR3
01B65E 43 00 52 00 33 00 00 00 		dc	67,82,51,0
                	disassem_30:	; CR0
01B666 43 00 52 00 30 00 00 00 		dc	67,82,48,0
                	disassem_26:	; R%d
01B66E 52 00 25 00 64 00 00 00 		dc	82,37,100,0
                	disassem_22:	; R%d
01B676 52 00 25 00 64 00 00 00 		dc	82,37,100,0
                	disassem_18:	; R%d,
01B67E 52 00 25 00 64 00 2C 00 		dc	82,37,100,44,0
01B686 00 00                   
                	disassem_14:	; R%d,
01B688 52 00 25 00 64 00 2C 00 		dc	82,37,100,44,0
01B690 00 00                   
                	disassem_10:	; r%d
01B692 72 00 25 00 64 00 00 00 		dc	114,37,100,0
                	disassem_6:	; %06X %02X %02X %02X %02X	
01B69A 25 00 30 00 36 00 58 00 		dc	37,48,54,88,32,37,48,50
01B6A2 20 00 25 00 30 00 32 00 
01B6AA 58 00 20 00 25 00 30 00 		dc	88,32,37,48,50,88,32,37
01B6B2 32 00 58 00 20 00 25 00 
01B6BA 30 00 32 00 58 00 20 00 		dc	48,50,88,32,37,48,50,88
01B6C2 25 00 30 00 32 00 58 00 
01B6CA 09 00 00 00             		dc	9,0
                	;	global	DispRR
                	;	global	DumpInsnBytes
                	;	global	GetNormAttr
                	;	global	disassem
                	;	global	SetNormAttr
                	;	global	reverse_video
                		extern	printf
                	;	global	DispBcc
                	;	global	disassem20
                		extern	putstr2
                		extern	putstr2
                		rodata
01B6CE 00 00                   		align	1
                	
                		align	8                	
                	debugger_311:	; DBG>
01B6D0 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,0
01B6D8 47 00 3E 00 00 00       
                	debugger_188:
01B6DE 0D 00 0A 00 00 00       		dc	13,10,0
                	debugger_187:	; %016X 
01B6E4 25 00 30 00 31 00 36 00 		dc	37,48,49,54,88,32,0
01B6EC 58 00 20 00 00 00       
                	debugger_186:	; %08X 
01B6F2 25 00 30 00 38 00 58 00 		dc	37,48,56,88,32,0
01B6FA 20 00 00 00             
                	debugger_185:	; %04X 
01B6FE 25 00 30 00 34 00 58 00 		dc	37,48,52,88,32,0
01B706 20 00 00 00             
                	debugger_184:	; %02X 
01B70A 25 00 30 00 32 00 58 00 		dc	37,48,50,88,32,0
01B712 20 00 00 00             
                	debugger_183:	; %06X 
01B716 0D 00 0A 00 25 00 30 00 		dc	13,10,37,48,54,88,32,0
01B71E 36 00 58 00 20 00 00 00 
                	debugger_182:
01B726 0D 00 0A 00 00 00       		dc	13,10,0
                	debugger_181:	; ds2=%08X
01B72C 64 00 73 00 32 00 3D 00 		dc	100,115,50,61,37,48,56,88
01B734 25 00 30 00 38 00 58 00 
01B73C 0D 00 0A 00 00 00       		dc	13,10,0
                	debugger_180:	; ds2=%08X
01B742 64 00 73 00 32 00 3D 00 		dc	100,115,50,61,37,48,56,88
01B74A 25 00 30 00 38 00 58 00 
01B752 0D 00 0A 00 00 00       		dc	13,10,0
                	debugger_179:	; ds1=%08X
01B758 64 00 73 00 31 00 3D 00 		dc	100,115,49,61,37,48,56,88
01B760 25 00 30 00 38 00 58 00 
01B768 0D 00 0A 00 00 00       		dc	13,10,0
                	debugger_178:	; ds0=%08X
01B76E 64 00 73 00 30 00 3D 00 		dc	100,115,48,61,37,48,56,88
01B776 25 00 30 00 38 00 58 00 
01B77E 0D 00 0A 00 00 00       		dc	13,10,0
                	debugger_177:	; d2=%08X
01B784 64 00 32 00 3D 00 25 00 		dc	100,50,61,37,48,56,88,13
01B78C 30 00 38 00 58 00 0D 00 
01B794 0A 00 00 00             		dc	10,0
                	debugger_176:	; d2=%08X
01B798 64 00 32 00 3D 00 25 00 		dc	100,50,61,37,48,56,88,13
01B7A0 30 00 38 00 58 00 0D 00 
01B7A8 0A 00 00 00             		dc	10,0
                	debugger_175:	; d1=%08X
01B7AC 64 00 31 00 3D 00 25 00 		dc	100,49,61,37,48,56,88,13
01B7B4 30 00 38 00 58 00 0D 00 
01B7BC 0A 00 00 00             		dc	10,0
                	debugger_174:	; d0=%08X
01B7C0 64 00 30 00 3D 00 25 00 		dc	100,48,61,37,48,56,88,13
01B7C8 30 00 38 00 58 00 0D 00 
01B7D0 0A 00 00 00             		dc	10,0
                	debugger_173:
01B7D4 0D 00 0A 00 00 00       		dc	13,10,0
                	debugger_172:	; i2=%08X
01B7DA 69 00 32 00 3D 00 25 00 		dc	105,50,61,37,48,56,88,13
01B7E2 30 00 38 00 58 00 0D 00 
01B7EA 0A 00 00 00             		dc	10,0
                	debugger_171:	; i2=%08X
01B7EE 69 00 32 00 3D 00 25 00 		dc	105,50,61,37,48,56,88,13
01B7F6 30 00 38 00 58 00 0D 00 
01B7FE 0A 00 00 00             		dc	10,0
                	debugger_170:	; i1=%08X
01B802 69 00 31 00 3D 00 25 00 		dc	105,49,61,37,48,56,88,13
01B80A 30 00 38 00 58 00 0D 00 
01B812 0A 00 00 00             		dc	10,0
                	debugger_169:	; i0=%08X
01B816 69 00 30 00 3D 00 25 00 		dc	105,48,61,37,48,56,88,13
01B81E 30 00 38 00 58 00 0D 00 
01B826 0A 00 00 00             		dc	10,0
                	debugger_143:	; DBG>
01B82A 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,0
01B832 47 00 3E 00 00 00       
                	debugger_140:	; r%d=%X
01B838 72 00 25 00 64 00 3D 00 		dc	114,37,100,61,37,88,13,10
01B840 25 00 58 00 0D 00 0A 00 
01B848 00 00                   		dc	0
                	debugger_136:	; r29=%X sp=%X lr=%X
01B84A 72 00 32 00 39 00 3D 00 		dc	114,50,57,61,37,88,32,115
01B852 25 00 58 00 20 00 73 00 
01B85A 70 00 3D 00 25 00 58 00 		dc	112,61,37,88,32,108,114,61
01B862 20 00 6C 00 72 00 3D 00 
01B86A 25 00 58 00 0D 00 0A 00 		dc	37,88,13,10,0
01B872 00 00                   
                	debugger_135:	; r25=%X r26=%X r27=%X r28=%X
01B874 72 00 32 00 35 00 3D 00 		dc	114,50,53,61,37,88,32,114
01B87C 25 00 58 00 20 00 72 00 
01B884 32 00 36 00 3D 00 25 00 		dc	50,54,61,37,88,32,114,50
01B88C 58 00 20 00 72 00 32 00 
01B894 37 00 3D 00 25 00 58 00 		dc	55,61,37,88,32,114,50,56
01B89C 20 00 72 00 32 00 38 00 
01B8A4 3D 00 25 00 58 00 0D 00 		dc	61,37,88,13,10,0
01B8AC 0A 00 00 00             
                	debugger_134:	; r21=%X r22=%X r23=%X tr=%X
01B8B0 72 00 32 00 31 00 3D 00 		dc	114,50,49,61,37,88,32,114
01B8B8 25 00 58 00 20 00 72 00 
01B8C0 32 00 32 00 3D 00 25 00 		dc	50,50,61,37,88,32,114,50
01B8C8 58 00 20 00 72 00 32 00 
01B8D0 33 00 3D 00 25 00 58 00 		dc	51,61,37,88,32,116,114,61
01B8D8 20 00 74 00 72 00 3D 00 
01B8E0 25 00 58 00 0D 00 0A 00 		dc	37,88,13,10,0
01B8E8 00 00                   
                	debugger_133:	; r17=%X r18=%X r19=%X r20=%X
01B8EA 72 00 31 00 37 00 3D 00 		dc	114,49,55,61,37,88,32,114
01B8F2 25 00 58 00 20 00 72 00 
01B8FA 31 00 38 00 3D 00 25 00 		dc	49,56,61,37,88,32,114,49
01B902 58 00 20 00 72 00 31 00 
01B90A 39 00 3D 00 25 00 58 00 		dc	57,61,37,88,32,114,50,48
01B912 20 00 72 00 32 00 30 00 
01B91A 3D 00 25 00 58 00 0D 00 		dc	61,37,88,13,10,0
01B922 0A 00 00 00             
                	debugger_132:	; r13=%X r14=%X r15=%X r16=%X
01B926 72 00 31 00 33 00 3D 00 		dc	114,49,51,61,37,88,32,114
01B92E 25 00 58 00 20 00 72 00 
01B936 31 00 34 00 3D 00 25 00 		dc	49,52,61,37,88,32,114,49
01B93E 58 00 20 00 72 00 31 00 
01B946 35 00 3D 00 25 00 58 00 		dc	53,61,37,88,32,114,49,54
01B94E 20 00 72 00 31 00 36 00 
01B956 3D 00 25 00 58 00 0D 00 		dc	61,37,88,13,10,0
01B95E 0A 00 00 00             
                	debugger_131:	; r9=%X r10=%X r11=%X r12=%X
01B962 72 00 39 00 3D 00 25 00 		dc	114,57,61,37,88,32,114,49
01B96A 58 00 20 00 72 00 31 00 
01B972 30 00 3D 00 25 00 58 00 		dc	48,61,37,88,32,114,49,49
01B97A 20 00 72 00 31 00 31 00 
01B982 3D 00 25 00 58 00 20 00 		dc	61,37,88,32,114,49,50,61
01B98A 72 00 31 00 32 00 3D 00 
01B992 25 00 58 00 0D 00 0A 00 		dc	37,88,13,10,0
01B99A 00 00                   
                	debugger_130:	; r5=%X r6=%X r7=%X r8=%X
01B99C 72 00 35 00 3D 00 25 00 		dc	114,53,61,37,88,32,114,54
01B9A4 58 00 20 00 72 00 36 00 
01B9AC 3D 00 25 00 58 00 20 00 		dc	61,37,88,32,114,55,61,37
01B9B4 72 00 37 00 3D 00 25 00 
01B9BC 58 00 20 00 72 00 38 00 		dc	88,32,114,56,61,37,88,13
01B9C4 3D 00 25 00 58 00 0D 00 
01B9CC 0A 00 00 00             		dc	10,0
                	debugger_129:	; r1=%X r2=%X r3=%X r4=%X
01B9D0 0D 00 0A 00 72 00 31 00 		dc	13,10,114,49,61,37,88,32
01B9D8 3D 00 25 00 58 00 20 00 
01B9E0 72 00 32 00 3D 00 25 00 		dc	114,50,61,37,88,32,114,51
01B9E8 58 00 20 00 72 00 33 00 
01B9F0 3D 00 25 00 58 00 20 00 		dc	61,37,88,32,114,52,61,37
01B9F8 72 00 34 00 3D 00 25 00 
01BA00 58 00 0D 00 0A 00 00 00 		dc	88,13,10,0
                	debugger_113:	; DBG>ds%d <not set>
01BA08 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,100,115
01BA10 47 00 3E 00 64 00 73 00 
01BA18 25 00 64 00 20 00 3C 00 		dc	37,100,32,60,110,111,116,32
01BA20 6E 00 6F 00 74 00 20 00 
01BA28 73 00 65 00 74 00 3E 00 		dc	115,101,116,62,0
01BA30 00 00                   
                	debugger_112:	; DBG>ds%d=%08X
01BA32 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,100,115
01BA3A 47 00 3E 00 64 00 73 00 
01BA42 25 00 64 00 3D 00 25 00 		dc	37,100,61,37,48,56,88,13
01BA4A 30 00 38 00 58 00 0D 00 
01BA52 0A 00 00 00             		dc	10,0
                	debugger_97:	; DBG>d%d <not set>
01BA56 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,100,37
01BA5E 47 00 3E 00 64 00 25 00 
01BA66 64 00 20 00 3C 00 6E 00 		dc	100,32,60,110,111,116,32,115
01BA6E 6F 00 74 00 20 00 73 00 
01BA76 65 00 74 00 3E 00 00 00 		dc	101,116,62,0
                	debugger_96:	; DBG>d%d=%08X
01BA7E 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,100,37
01BA86 47 00 3E 00 64 00 25 00 
01BA8E 64 00 3D 00 25 00 30 00 		dc	100,61,37,48,56,88,13,10
01BA96 38 00 58 00 0D 00 0A 00 
01BA9E 00 00                   		dc	0
                	debugger_81:	; DBG>ib%d <not set>
01BAA0 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,105,98
01BAA8 47 00 3E 00 69 00 62 00 
01BAB0 25 00 64 00 20 00 3C 00 		dc	37,100,32,60,110,111,116,32
01BAB8 6E 00 6F 00 74 00 20 00 
01BAC0 73 00 65 00 74 00 3E 00 		dc	115,101,116,62,0
01BAC8 00 00                   
                	debugger_80:	; DBG>ib%d=%08X
01BACA 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,105,98
01BAD2 47 00 3E 00 69 00 62 00 
01BADA 25 00 64 00 3D 00 25 00 		dc	37,100,61,37,48,56,88,13
01BAE2 30 00 38 00 58 00 0D 00 
01BAEA 0A 00 00 00             		dc	10,0
                	debugger_15:	; DBG>
01BAEE 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,0
01BAF6 47 00 3E 00 00 00       
                	debugger_14:	; Type 'q' to quit.
01BAFC 0D 00 0A 00 54 00 79 00 		dc	13,10,84,121,112,101,32,39
01BB04 70 00 65 00 20 00 27 00 
01BB0C 71 00 27 00 20 00 74 00 		dc	113,39,32,116,111,32,113,117
01BB14 6F 00 20 00 71 00 75 00 
01BB1C 69 00 74 00 2E 00 00 00 		dc	105,116,46,0
                	debugger_13:	; arm debugging mode using the 'a' command.
01BB24 0D 00 0A 00 61 00 72 00 		dc	13,10,97,114,109,32,100,101
01BB2C 6D 00 20 00 64 00 65 00 
01BB34 62 00 75 00 67 00 67 00 		dc	98,117,103,103,105,110,103,32
01BB3C 69 00 6E 00 67 00 20 00 
01BB44 6D 00 6F 00 64 00 65 00 		dc	109,111,100,101,32,117,115,105
01BB4C 20 00 75 00 73 00 69 00 
01BB54 6E 00 67 00 20 00 74 00 		dc	110,103,32,116,104,101,32,39
01BB5C 68 00 65 00 20 00 27 00 
01BB64 61 00 27 00 20 00 63 00 		dc	97,39,32,99,111,109,109,97
01BB6C 6F 00 6D 00 6D 00 61 00 
01BB74 6E 00 64 00 2E 00 00 00 		dc	110,100,46,0
                	debugger_12:	; Once the debug registers are set it is necessary to 
01BB7C 0D 00 0A 00 4F 00 6E 00 		dc	13,10,79,110,99,101,32,116
01BB84 63 00 65 00 20 00 74 00 
01BB8C 68 00 65 00 20 00 64 00 		dc	104,101,32,100,101,98,117,103
01BB94 65 00 62 00 75 00 67 00 
01BB9C 20 00 72 00 65 00 67 00 		dc	32,114,101,103,105,115,116,101
01BBA4 69 00 73 00 74 00 65 00 
01BBAC 72 00 73 00 20 00 61 00 		dc	114,115,32,97,114,101,32,115
01BBB4 72 00 65 00 20 00 73 00 
01BBBC 65 00 74 00 20 00 69 00 		dc	101,116,32,105,116,32,105,115
01BBC4 74 00 20 00 69 00 73 00 
01BBCC 20 00 6E 00 65 00 63 00 		dc	32,110,101,99,101,115,115,97
01BBD4 65 00 73 00 73 00 61 00 
01BBDC 72 00 79 00 20 00 74 00 		dc	114,121,32,116,111,32,0
01BBE4 6F 00 20 00 00 00       
                	debugger_11:	; Setting a register to zero will clear the breakpoint.
01BBEA 0D 00 0A 00 53 00 65 00 		dc	13,10,83,101,116,116,105,110
01BBF2 74 00 74 00 69 00 6E 00 
01BBFA 67 00 20 00 61 00 20 00 		dc	103,32,97,32,114,101,103,105
01BC02 72 00 65 00 67 00 69 00 
01BC0A 73 00 74 00 65 00 72 00 		dc	115,116,101,114,32,116,111,32
01BC12 20 00 74 00 6F 00 20 00 
01BC1A 7A 00 65 00 72 00 6F 00 		dc	122,101,114,111,32,119,105,108
01BC22 20 00 77 00 69 00 6C 00 
01BC2A 6C 00 20 00 63 00 6C 00 		dc	108,32,99,108,101,97,114,32
01BC32 65 00 61 00 72 00 20 00 
01BC3A 74 00 68 00 65 00 20 00 		dc	116,104,101,32,98,114,101,97
01BC42 62 00 72 00 65 00 61 00 
01BC4A 6B 00 70 00 6F 00 69 00 		dc	107,112,111,105,110,116,46,0
01BC52 6E 00 74 00 2E 00 00 00 
                	debugger_10:	; indicate a data store only breakpoint.
01BC5A 0D 00 0A 00 69 00 6E 00 		dc	13,10,105,110,100,105,99,97
01BC62 64 00 69 00 63 00 61 00 
01BC6A 74 00 65 00 20 00 61 00 		dc	116,101,32,97,32,100,97,116
01BC72 20 00 64 00 61 00 74 00 
01BC7A 61 00 20 00 73 00 74 00 		dc	97,32,115,116,111,114,101,32
01BC82 6F 00 72 00 65 00 20 00 
01BC8A 6F 00 6E 00 6C 00 79 00 		dc	111,110,108,121,32,98,114,101
01BC92 20 00 62 00 72 00 65 00 
01BC9A 61 00 6B 00 70 00 6F 00 		dc	97,107,112,111,105,110,116,46
01BCA2 69 00 6E 00 74 00 2E 00 
01BCAA 00 00                   		dc	0
                	debugger_9:	; breakpoint. Prefix the register number with 'ds' to
01BCAC 0D 00 0A 00 62 00 72 00 		dc	13,10,98,114,101,97,107,112
01BCB4 65 00 61 00 6B 00 70 00 
01BCBC 6F 00 69 00 6E 00 74 00 		dc	111,105,110,116,46,32,80,114
01BCC4 2E 00 20 00 50 00 72 00 
01BCCC 65 00 66 00 69 00 78 00 		dc	101,102,105,120,32,116,104,101
01BCD4 20 00 74 00 68 00 65 00 
01BCDC 20 00 72 00 65 00 67 00 		dc	32,114,101,103,105,115,116,101
01BCE4 69 00 73 00 74 00 65 00 
01BCEC 72 00 20 00 6E 00 75 00 		dc	114,32,110,117,109,98,101,114
01BCF4 6D 00 62 00 65 00 72 00 
01BCFC 20 00 77 00 69 00 74 00 		dc	32,119,105,116,104,32,39,100
01BD04 68 00 20 00 27 00 64 00 
01BD0C 73 00 27 00 20 00 74 00 		dc	115,39,32,116,111,0
01BD14 6F 00 00 00             
                	debugger_8:	; instruction breakpoint or a 'd' to indicate a data
01BD18 0D 00 0A 00 69 00 6E 00 		dc	13,10,105,110,115,116,114,117
01BD20 73 00 74 00 72 00 75 00 
01BD28 63 00 74 00 69 00 6F 00 		dc	99,116,105,111,110,32,98,114
01BD30 6E 00 20 00 62 00 72 00 
01BD38 65 00 61 00 6B 00 70 00 		dc	101,97,107,112,111,105,110,116
01BD40 6F 00 69 00 6E 00 74 00 
01BD48 20 00 6F 00 72 00 20 00 		dc	32,111,114,32,97,32,39,100
01BD50 61 00 20 00 27 00 64 00 
01BD58 27 00 20 00 74 00 6F 00 		dc	39,32,116,111,32,105,110,100
01BD60 20 00 69 00 6E 00 64 00 
01BD68 69 00 63 00 61 00 74 00 		dc	105,99,97,116,101,32,97,32
01BD70 65 00 20 00 61 00 20 00 
01BD78 64 00 61 00 74 00 61 00 		dc	100,97,116,97,0
01BD80 00 00                   
                	debugger_7:	; Prefix the register number with an 'i' to indicate an
01BD82 0D 00 0A 00 50 00 72 00 		dc	13,10,80,114,101,102,105,120
01BD8A 65 00 66 00 69 00 78 00 
01BD92 20 00 74 00 68 00 65 00 		dc	32,116,104,101,32,114,101,103
01BD9A 20 00 72 00 65 00 67 00 
01BDA2 69 00 73 00 74 00 65 00 		dc	105,115,116,101,114,32,110,117
01BDAA 72 00 20 00 6E 00 75 00 
01BDB2 6D 00 62 00 65 00 72 00 		dc	109,98,101,114,32,119,105,116
01BDBA 20 00 77 00 69 00 74 00 
01BDC2 68 00 20 00 61 00 6E 00 		dc	104,32,97,110,32,39,105,39
01BDCA 20 00 27 00 69 00 27 00 
01BDD2 20 00 74 00 6F 00 20 00 		dc	32,116,111,32,105,110,100,105
01BDDA 69 00 6E 00 64 00 69 00 
01BDE2 63 00 61 00 74 00 65 00 		dc	99,97,116,101,32,97,110,0
01BDEA 20 00 61 00 6E 00 00 00 
                	debugger_6:	; There are a total of four breakpoint registers (0-3).
01BDF2 0D 00 0A 00 54 00 68 00 		dc	13,10,84,104,101,114,101,32
01BDFA 65 00 72 00 65 00 20 00 
01BE02 61 00 72 00 65 00 20 00 		dc	97,114,101,32,97,32,116,111
01BE0A 61 00 20 00 74 00 6F 00 
01BE12 74 00 61 00 6C 00 20 00 		dc	116,97,108,32,111,102,32,102
01BE1A 6F 00 66 00 20 00 66 00 
01BE22 6F 00 75 00 72 00 20 00 		dc	111,117,114,32,98,114,101,97
01BE2A 62 00 72 00 65 00 61 00 
01BE32 6B 00 70 00 6F 00 69 00 		dc	107,112,111,105,110,116,32,114
01BE3A 6E 00 74 00 20 00 72 00 
01BE42 65 00 67 00 69 00 73 00 		dc	101,103,105,115,116,101,114,115
01BE4A 74 00 65 00 72 00 73 00 
01BE52 20 00 28 00 30 00 2D 00 		dc	32,40,48,45,51,41,46,0
01BE5A 33 00 29 00 2E 00 00 00 
                	debugger_5:	; DBG>i1=12345678     will assign 12345678 to i1
01BE62 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,105,49
01BE6A 47 00 3E 00 69 00 31 00 
01BE72 3D 00 31 00 32 00 33 00 		dc	61,49,50,51,52,53,54,55
01BE7A 34 00 35 00 36 00 37 00 
01BE82 38 00 20 00 20 00 20 00 		dc	56,32,32,32,32,32,119,105
01BE8A 20 00 20 00 77 00 69 00 
01BE92 6C 00 6C 00 20 00 61 00 		dc	108,108,32,97,115,115,105,103
01BE9A 73 00 73 00 69 00 67 00 
01BEA2 6E 00 20 00 31 00 32 00 		dc	110,32,49,50,51,52,53,54
01BEAA 33 00 34 00 35 00 36 00 
01BEB2 37 00 38 00 20 00 74 00 		dc	55,56,32,116,111,32,105,49
01BEBA 6F 00 20 00 69 00 31 00 
01BEC2 00 00                   		dc	0
                	debugger_4:	; an address to it.
01BEC4 0D 00 0A 00 61 00 6E 00 		dc	13,10,97,110,32,97,100,100
01BECC 20 00 61 00 64 00 64 00 
01BED4 72 00 65 00 73 00 73 00 		dc	114,101,115,115,32,116,111,32
01BEDC 20 00 74 00 6F 00 20 00 
01BEE4 69 00 74 00 2E 00 00 00 		dc	105,116,46,0
                	debugger_3:	; Following a breakpoint register with an '=' assigns 
01BEEC 0D 00 0A 00 46 00 6F 00 		dc	13,10,70,111,108,108,111,119
01BEF4 6C 00 6C 00 6F 00 77 00 
01BEFC 69 00 6E 00 67 00 20 00 		dc	105,110,103,32,97,32,98,114
01BF04 61 00 20 00 62 00 72 00 
01BF0C 65 00 61 00 6B 00 70 00 		dc	101,97,107,112,111,105,110,116
01BF14 6F 00 69 00 6E 00 74 00 
01BF1C 20 00 72 00 65 00 67 00 		dc	32,114,101,103,105,115,116,101
01BF24 69 00 73 00 74 00 65 00 
01BF2C 72 00 20 00 77 00 69 00 		dc	114,32,119,105,116,104,32,97
01BF34 74 00 68 00 20 00 61 00 
01BF3C 6E 00 20 00 27 00 3D 00 		dc	110,32,39,61,39,32,97,115
01BF44 27 00 20 00 61 00 73 00 
01BF4C 73 00 69 00 67 00 6E 00 		dc	115,105,103,110,115,32,0
01BF54 73 00 20 00 00 00       
                	debugger_2:	; DBG>i2?
01BF5A 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,105,50
01BF62 47 00 3E 00 69 00 32 00 
01BF6A 3F 00 00 00             		dc	63,0
                	debugger_1:	; '?' queries the status of a breakpoint register as in:
01BF6E 0D 00 0A 00 27 00 3F 00 		dc	13,10,39,63,39,32,113,117
01BF76 27 00 20 00 71 00 75 00 
01BF7E 65 00 72 00 69 00 65 00 		dc	101,114,105,101,115,32,116,104
01BF86 73 00 20 00 74 00 68 00 
01BF8E 65 00 20 00 73 00 74 00 		dc	101,32,115,116,97,116,117,115
01BF96 61 00 74 00 75 00 73 00 
01BF9E 20 00 6F 00 66 00 20 00 		dc	32,111,102,32,97,32,98,114
01BFA6 61 00 20 00 62 00 72 00 
01BFAE 65 00 61 00 6B 00 70 00 		dc	101,97,107,112,111,105,110,116
01BFB6 6F 00 69 00 6E 00 74 00 
01BFBE 20 00 72 00 65 00 67 00 		dc	32,114,101,103,105,115,116,101
01BFC6 69 00 73 00 74 00 65 00 
01BFCE 72 00 20 00 61 00 73 00 		dc	114,32,97,115,32,105,110,58
01BFD6 20 00 69 00 6E 00 3A 00 
01BFDE 00 00                   		dc	0
                	;	global	dbg_dbctrl
                	;	global	GetVBR
                	;	global	dbg_parse_begin
                	;	global	dbg_ReadSetDSB
                		extern	putch
                	;	global	dbg_prompt
                		extern	getcharNoWait
                	;	global	cursz
                	;	global	CvtScreenToAscii
                		extern	dbg_GetHexNumber
                	;	global	set_vector
                	;	global	dbg_init
                	;	global	dbg_getDecNumber
                	;	global	debugger
                	;	global	dbg_GetCursorCol
                	;	global	ssm
                		extern	disassem
                	;	global	dbg_getHexNumber
                	;	global	ignore_blanks
                	;	global	dbg_GetCursorRow
                	;	global	dbg_nextNonSpace
                	;	global	dbg_getchar
                	;	global	repcount
                	;	global	dbg_ungetch
                	;	global	curfmt
                	;	global	currep
                		extern	printf
                	;	global	dbg_HomeCursor
                	;	global	bmem
                	;	global	dbg_stack
                	;	global	cmem
                	;	global	hmem
                	;	global	dbg_processReg
                	;	global	dbg_parse_line
                	;	global	regs
                	;	global	cr0save
                	;	global	wmem
                	;	global	dbg_GetDBAD
                	;	global	dbg_ReadSetDB
                		extern	disassem20
                	;	global	muol
                	;	global	dbg_ReadSetIB
                	;	global	dbg_SetDBAD
                	;	global	dbg_arm
                	;	global	dbg_irq
                		extern	getchar
                	;	global	dbg_ssm
                	;	global	linebuf
                	;	global	curaddr
                		extern	isdigit
                	;	global	linendx
                	;	global	linendx
                	
01BFE0 3F 00 00 00             	    nop
01BFE4 3F 00 00 00             	    nop
                	
                	
                		data
                		align	8                	
01C000 00                      		db	0
01C001 00 00 00 00 00 00 00    		align	
                	
01C008 00                      		db	0
01C009 00 00 00 00 00 00 00    		align	
                	
01C010 00                      		db	0
01C011 00 00 00 00 00 00 00    		align	
                	
01C018 00                      		db	0
01C019 00 00 00 00 00 00 00    		align	
                	
01C020 00                      		db	0
01C021 00 00 00 00 00 00 00    		align	
                	
01C028 00                      		db	0
1937 symbols
  Symbol Name                              seg     address
  API_AREA                                    bss  001c20
  API_head                                    bss  001376
  API_sema                                    bss  001380
  API_tail                                    bss  001378
  AddTaskToReadyList                         code  014998
  AddTaskToReadyList.0001                    code  014a08
  AddTaskToReadyList.0002                    code  0149c8
  AddTaskToReadyList.0003                    code  0149f8
  AddToTimeoutList                           code  014aa8
  AllocMbx                                   code  014c9c
  AsciiToHexNybble                           code  0119b8
  AsciiToHexNybble.gthx3                     code  011a18
  AsciiToHexNybble.gthx5                     code  0119d8
  AsciiToHexNybble.gthx6                     code  0119f8
  AsciiToScreen                              code  010ff4
  AsciiToScreen.00001                        code  011024
  AsciiToScreen.00003                        code  01102c
  AsciiToScreen.00004                        code  011034
  BIOS1_sema                                  bss  c00218
  BIOSCall                                   code  01127c
  BIOSCall.0003                              code  0112d8
  BIOSCall.0004                              code  0112c8
  BIOSCall1                                  code  0111c4
  BIOSCall1.0002                             code  011250
  BIOSCall1.0003                             code  011268
  BIOSCall1.0004                             code  01124c
  BIOSCallTask                               code  0112e0
  BIOSCallTask.0001                          code  0112f0
  BIOS_CALL                                 const  00000a
  BIOS_DONE                                 const  000001
  BIOS_E_Timeout                            const  000002
  BIOS_FREE                                 const  000000
  BIOS_FuncTable                             code  010080
  BIOS_INSERVICE                            const  000002
  BIOS_MbxHandle                            const  c00008
  BIOS_RespMbx                                bss  c00010
  BIOS_STACKS_Array                         const  7e00000
  BIOS_arg1                                 const  000008
  BIOS_arg2                                 const  000010
  BIOS_arg3                                 const  000018
  BIOS_arg4                                 const  000020
  BIOS_arg5                                 const  000028
  BIOS_op                                   const  000000
  BIOS_resp                                 const  000030
  BIOS_sema                                   bss  001388
  BIOS_stat                                 const  000038
  BITMAP_SCREEN1                            const  400000
  BITMAP_SCREEN2                            const  800000
  BMP_CLUT                                  const  0c5800
  BPT_ISR                                    code  012b70
  BPT_ISR.0001                               code  012b9c
  BSI_BootSig                               const  000026
  BSI_DriveNum                              const  000024
  BSI_FATS                                  const  000010
  BSI_FileSysType                           const  000036
  BSI_Heads                                 const  00001a
  BSI_HiddenSecs                            const  00001c
  BSI_HugeSecs                              const  00001e
  BSI_JMP                                   const  000000
  BSI_Media                                 const  000015
  BSI_OEMName                               const  000003
  BSI_ResSectors                            const  00000e
  BSI_RootDirEnts                           const  000011
  BSI_Rsvd1                                 const  000025
  BSI_SecPerCluster                         const  00000d
  BSI_SecPerFAT                             const  000016
  BSI_SecPerTrack                           const  000018
  BSI_Sectors                               const  000013
  BSI_VolID                                 const  000027
  BSI_VolLabel                              const  00002b
  BSI_bps                                   const  00000b
  BYTE_SECTOR_BUF                           const  008000
  BlankLine                                  code  010f88
  BlankLine.0001                             code  010fd0
  BranchToSelf                               code  014018
  BranchToSelf2                              code  0110c8
  CPU0_BIOS_STACK                           const  006800
  CPU0_DBG_STACK                            const  7cf000
  CPU0_IRQ_STACK                            const  008800
  CPU0_SYS_STACK                            const  005000
  CPU0_Start                                 code  010134
  CPU0_Start.0001                            code  010198
  CPU0_Start.0002                            code  010134
  CPU1_BIOS_STACK                           const  021800
  CPU1_IRQ_STACK                            const  020800
  CPU1_STACK                                const  7cf800
  CPU1_SYS_STACK                            const  021000
  CPU1_Start                                 code  0100b8
  CPU1_Start.0001                            code  0100f4
  CPU1_Start.0003                            code  010114
  CPUIdleTick                                 bss  0013a0
  CR                                        const  00000d
  CRLF                                       code  010adc
  CRLF1                                      code  010ae0
  CTRLC                                     const  000003
  CTRLCCheck                                 code  011918
  CTRLCCheck.0001                            code  011940
  CTRLH                                     const  000008
  CTRLI                                     const  000009
  CTRLJ                                     const  00000a
  CTRLK                                     const  00000b
  CTRLM                                     const  00000d
  CTRLS                                     const  000013
  CTRLX                                     const  000018
  CalcScreenLoc                              code  010c3c
  CalcScreenLoc.0001                         code  010c88
  CharsInRxBuf                               code  0105f8
  CheckKeys                                  code  011904
  CheckMsg                                   code  0153c0
  CheckScrollLock                            code  011948
  CheckScrollLock.0001                       code  011968
  CheckScrollLock.0002                       code  011954
  ClearBmpScreen                             code  80000000000000be
  ClearScreen                                code  010968
  ClearScreen.cs1                            code  0109b4
  CopyScreenToVirtualScreen                  code  015d94
  CopyScreenToVirtualScreen.0001             code  015dc0
  CopyVirtualScreenToScreen                  code  015d1c
  CopyVirtualScreenToScreen.0001             code  015d48
  CursorCol                                   bss  001131
  CursorOff                                  code  01106c
  CursorOn                                   code  011070
  CursorRow                                   bss  001130
  CvtScreenToAscii                           code  018cc4
  DBG_STACK                                 const  007000
  DCB_Array                                   bss  e50000
  DCB_ArrayEnd                                bss  e50d00
  DCB_LastErc                               const  000018
  DCB_Mbx                                   const  000048
  DCB_Name                                  const  000000
  DCB_ReentCount                            const  000038
  DCB_Resv1                                 const  000058
  DCB_Resv2                                 const  000060
  DCB_Size                                  const  000068
  DCB_StartBlock                            const  000020
  DCB_Type                                  const  00000c
  DCB_fSingleUser                           const  000039
  DCB_hJob                                  const  000040
  DCB_nBPB                                  const  000010
  DCB_nBlocks                               const  000028
  DCB_pCmdProc                              const  000030
  DCB_pSema                                 const  000050
  DRSP_DONE                                 const  000001
  DVC_BuildBPB                              const  000005
  DVC_Close                                 const  000007
  DVC_FlushInput                            const  000014
  DVC_FlushOutput                           const  000015
  DVC_GetChar                               const  000008
  DVC_GetCharDirect                         const  00000a
  DVC_IOCTRL_READ                           const  000018
  DVC_IOCTRL_WRITE                          const  000019
  DVC_IRQ                                   const  000016
  DVC_Initialize                            const  000002
  DVC_InputStatus                           const  00000c
  DVC_IsRemoveable                          const  000017
  DVC_MediaCheck                            const  000004
  DVC_Nop                                   const  000000
  DVC_Open                                  const  000006
  DVC_OutputStatus                          const  000013
  DVC_OutputUntilBusy                       const  00001a
  DVC_PeekChar                              const  000009
  DVC_PeekCharDirect                        const  00000b
  DVC_PutChar                               const  00000d
  DVC_ReadBlock                             const  000010
  DVC_SetPosition                           const  00000f
  DVC_Setup                                 const  000001
  DVC_Status                                const  000003
  DVC_VerifyBlock                           const  000012
  DVC_WriteBlock                            const  000011
  DequeueMsgFromMbx                          code  014fa8
  DequeueThreadFromMbx                       code  014ffc
  DequeueThreadFromMbx2                      code  015088
  DispBcc                                    code  0175c8
  DispBrk                                    code  017230
  DispCharAttr                               code  0108e4
  DispCharQ                                  code  010afc
  DispInc                                    code  017078
  DispIndexedAddr                            code  01730c
  DispLS                                     code  017474
  DispMemAddress                             code  016f98
  DispRI                                     code  0174f0
  DispRR                                     code  01768c
  DispRa                                     code  016cf8
  DispRac                                    code  016ca0
  DispRb                                     code  016d50
  DispReg                                    code  019574
  DispRegs                                   code  019430
  DispRst                                    code  016bf0
  DispRstc                                   code  016c48
  DispSpr                                    code  016da8
  DispStartMsg                               code  0110b4
  DisplayByte                                code  010a10
  DisplayChar                                code  010ca4
  DisplayChar.dcx12                          code  010dfc
  DisplayChar.dcx4                           code  010d38
  DisplayChar.dcx5                           code  010e40
  DisplayChar.dcx7                           code  010d94
  DisplayChar.doBackspace                    code  010e18
  DisplayChar.doCursorDown                   code  010dcc
  DisplayChar.doCursorHome                   code  010de8
  DisplayChar.doCursorLeft                   code  010db4
  DisplayChar.doCursorRight                  code  010d7c
  DisplayChar.doCursorUp                     code  010d9c
  DisplayChar.doDelete                       code  010e04
  DisplayChar.doLinefeed                     code  010e74
  DisplayChar.doTab                          code  010d54
  DisplayChar.docr                           code  010d6c
  DisplayCharHex                             code  0109fc
  DisplayErr                                 code  011a24
  DisplayHalf                                code  0109e8
  DisplayMemBytes                            code  011844
  DisplayMemBytes.001                        code  011878
  DisplayMemBytes.002                        code  0118b0
  DisplayMemBytes.003                        code  0118d0
  DisplayMemBytes.004                        code  0118c4
  DisplayNybble                              code  010a24
  DisplayNybble.0001                         code  010a44
  DisplaySpace                               code  01112c
  DisplayString                              code  010a54
  DisplayString.dm1                          code  010a78
  DisplayString.dm2                          code  010a64
  DisplayString16                            code  010a84
  DisplayString16.dm1                        code  010ac4
  DisplayString16.dm2                        code  010aa0
  DisplayStringCRLF                          code  010ad0
  DisplayWord                                code  0109d4
  Dummy1                                      bss  001132
  DumpInsnBytes                              code  016b68
  DumpTaskList                               code  014810
  DumpTaskList.0001                          code  014834
  E_Arg                                     const  000001
  E_BadAlarm                                const  000011
  E_BadBlockNum                             const  000025
  E_BadDevNum                               const  000020
  E_BadDevOp                                const  000022
  E_BadFuncno                               const  000001
  E_BadMbx                                  const  000004
  E_DCBInUse                                const  000019
  E_NoDev                                   const  000021
  E_NoMem                                   const  00000c
  E_NoMoreAlarmBlks                         const  000044
  E_NoMoreMbx                               const  000040
  E_NoMoreMsgBlks                           const  000041
  E_NoMoreTCBs                              const  000045
  E_NoMsg                                   const  00000b
  E_NoThread                                const  000006
  E_NotAlloc                                const  000009
  E_NotOwner                                const  000012
  E_Ok                                      const  000000
  E_QueFull                                 const  000005
  E_QueStrategy                             const  000013
  E_ReadError                               const  000023
  E_Timeout                                 const  000010
  E_TooManyBlocks                           const  000026
  E_Unsupported                             const  000003
  E_WriteError                              const  000024
  EndStaticAllocations                        bss  00d400
  ExitTask                                   code  01471c
  FMTKInitialize                             code  01401c
  FMTKTick                                   code  01560c
  FMTKTick.0001                              code  015620
  FMTKTick.0002                              code  015628
  FMTKTick.0003                              code  01564c
  FMTKTick.0004                              code  0156a8
  FMTKTick.SYSLocked                         code  0156b8
  FMTKTick.cantLockSYS                       code  015678
  FMTK_CALL                                 const  000004
  FMTK_Inited                                 bss  c001b0
  ForceIOFocus                               code  015a94
  ForceReleaseIOFocus                        code  015c3c
  FreeJCB                                     bss  c00100
  FreeMbx                                    code  014d5c
  FreeMbx2                                   code  014d74
  FreeMbxHandle                               bss  c00120
  FreeMsg                                     bss  c00130
  FreeTCB                                     bss  c00108
  GetCurrAttr                                code  010bac
  GetCursorPos                               code  01109c
  GetHexNumber                               code  011978
  GetHexNumber.gthxn1                        code  0119a8
  GetHexNumber.gthxn2                        code  01198c
  GetJCBPtr                                  code  011144
  GetJCBPtr.0001                             code  01116c
  GetNormAttr                                code  016abc
  GetPixel                                   code  800000000000014a
  GetRandomNumber                            code  011b1c
  GetRange                                   code  01155c
  GetScreenLocation                          code  010b9c
  GetSystemTime                              code  0113d8
  GetTwoParams                               code  011540
  GetVBR                                     code  018ac8
  HomeCursor                                 code  01092c
  HomeCursor.0001                            code  01095c
  I2C_CMD                                   const  000004
  I2C_CONTROL                               const  000002
  I2C_ERR                                    code  012600
  I2C_INIT                                   code  012530
  I2C_MASTER                                const  ffdc0e00
  I2C_PRESCALE_HI                           const  000001
  I2C_PRESCALE_LO                           const  000000
  I2C_READ                                   code  012564
  I2C_RX                                    const  000003
  I2C_STAT                                  const  000004
  I2C_TX                                    const  000003
  I2C_WAIT_TC                                code  012690
  I2C_WAIT_TC.0001                           code  012690
  I2C_WRITE                                  code  012610
  IOFocusNdx                                  bss  c00028
  IOFocusTbl                                  bss  c00030
  IRQFlag                                     bss  c00018
  IdleTask                                   code  01444c
  IncCursorPos                               code  010e7c
  IncCursorRow                               code  010eb0
  InitFMTK                                   code  01401c
  InitFMTK.0001                              code  014138
  InitFMTK.0002                              code  01403c
  InitPIC                                    code  010428
  InitPIC1                                   code  010444
  InitUart                                   code  010460
  InputVec                                    bss  001110
  JCB0                                        bss  0013c0
  JCB_Array                                   bss  c50000
  JCB_ArrayEnd                                bss  c5ff00
  JCB_CmdLine                               const  000280
  JCB_CurrAttr                              const  000418
  JCB_CursorCol                             const  00040d
  JCB_CursorFlash                           const  00040f
  JCB_CursorOn                              const  00040e
  JCB_CursorRow                             const  00040c
  JCB_CursorType                            const  000410
  JCB_ExitError                             const  0003e0
  JCB_ExitRF                                const  000180
  JCB_KeybdAck                              const  00044a
  JCB_KeybdBad                              const  000449
  JCB_KeybdBuffer                           const  000450
  JCB_KeybdEcho                             const  000448
  JCB_KeybdHead                             const  000438
  JCB_KeybdLocks                            const  00044c
  JCB_KeybdTail                             const  000440
  JCB_LogSize                               const  00000b
  JCB_MemGroup0                             const  000024
  JCB_MemGroup1                             const  000026
  JCB_MemGroup2                             const  000028
  JCB_MemGroup3                             const  00002a
  JCB_MemGroup4                             const  00002c
  JCB_MemGroup5                             const  00002e
  JCB_Name                                  const  000004
  JCB_Next                                  const  000420
  JCB_NormAttr                              const  000414
  JCB_Number                                const  000000
  JCB_Path                                  const  000080
  JCB_ScrlCnt                               const  00041c
  JCB_Size                                  const  000500
  JCB_SysIn                                 const  000380
  JCB_SysOut                                const  0003b0
  JCB_UserName                              const  000060
  JCB_VideoCols                             const  00040b
  JCB_VideoMode                             const  000408
  JCB_VideoRows                             const  00040a
  JCB_esc                                   const  000470
  JCB_fVidPause                             const  00041e
  JCB_iof_next                              const  000428
  JCB_iof_prev                              const  000430
  JCB_nCode                                 const  000038
  JCB_nData                                 const  000048
  JCB_nStack                                const  000058
  JCB_pCode                                 const  000030
  JCB_pData                                 const  000040
  JCB_pStack                                const  000050
  JCB_pVidMem                               const  0003e8
  JCB_pVirtVid                              const  0003f8
  KEYBD                                     const  ffdc0000
  KEYBDCLR                                  const  ffdc0004
  KEYBD_DELAY                               const  0003e8
  KeyState1                                   bss  001138
  KeyState2                                   bss  001139
  KeybdBad                                    bss  001135
  KeybdEcho                                   bss  001134
  KeybdGetChar                               code  011e74
  KeybdGetChar.0001                          code  011ea8
  KeybdGetChar.0003                          code  011e80
  KeybdGetChar.0004                          code  011fd0
  KeybdGetChar.0005                          code  012054
  KeybdGetChar.0006                          code  011ea4
  KeybdGetChar.0007                          code  011f68
  KeybdGetChar.0008                          code  011f7c
  KeybdGetChar.0009                          code  011f50
  KeybdGetChar.0010                          code  011f34
  KeybdGetChar.0011                          code  012000
  KeybdGetChar.0012                          code  012030
  KeybdGetChar.0013                          code  011f10
  KeybdGetChar.doAlt                         code  011fe0
  KeybdGetChar.doCapsLock                    code  012078
  KeybdGetChar.doCtrl                        code  011fb4
  KeybdGetChar.doExtend                      code  011fa4
  KeybdGetChar.doKeyup                       code  011f98
  KeybdGetChar.doNumLock                     code  012064
  KeybdGetChar.doScrollLock                  code  01208c
  KeybdGetChar.doShift                       code  012038
  KeybdGetChar.doTab                         code  012010
  KeybdGetCharDirect                         code  011b9c
  KeybdGetCharDirect.0001                    code  011ba4
  KeybdGetCharDirect.gk1                     code  011be8
  KeybdGetCharDirect.gk2                     code  011be4
  KeybdGetCharDirectNB                       code  011b28
  KeybdGetCharDirectNB.0001                  code  011b88
  KeybdGetCharDirectNB.0002                  code  011b7c
  KeybdGetCharDirectNB.0003                  code  011b78
  KeybdGetCharNoWait                         code  011e64
  KeybdGetCharWait                           code  011e6c
  KeybdGetScancode                           code  011d3c
  KeybdGetScancode.0001                      code  011dc8
  KeybdGetScancode.0002                      code  011db8
  KeybdGetStatus                             code  011cc0
  KeybdGetStatus.0001                        code  011d30
  KeybdGetStatus.0002                        code  011d24
  KeybdIRQ                                   code  012160
  KeybdIRQ.0001                              code  012204
  KeybdIRQ.0002                              code  01221c
  KeybdIRQ1                                  code  012224
  KeybdInit                                  code  011c0d
  KeybdInit.0001                             code  011c18
  KeybdInit.0002                             code  011c28
  KeybdInit.0004                             code  011ca8
  KeybdInit.config                           code  011c64
  KeybdInit.keybdErr                         code  011c94
  KeybdInit.tryAgain                         code  011c8c
  KeybdLEDs                                   bss  00113b
  KeybdLocks                                  bss  001136
  KeybdRecvByte                              code  011dd4
  KeybdRecvByte.0003                         code  011de0
  KeybdRecvByte.0004                         code  011e04
  KeybdSendByte                              code  012124
  KeybdSetLEDStatus                          code  0120a0
  KeybdSetLEDStatus.0001                     code  012114
  KeybdSetLEDStatus.0002                     code  0120c4
  KeybdSetLEDStatus.0003                     code  0120d8
  KeybdSetLEDStatus.0004                     code  0120ec
  KeybdWaitFlag                               bss  00113a
  KeybdWaitTx                                code  011e14
  KeybdWaitTx.0001                           code  011e24
  KeybdWaitTx.0002                           code  011e50
  KillTask                                   code  01477b
  LEDS                                      const  ffdc0600
  LF                                        const  00000a
  LoadFromSerial                             code  0129a8
  LoadFromSerial.0001                        code  0129bc
  LockBIOS                                   code  011178
  LockBIOS1                                  code  0111a8
  LockIOF                                    code  015a5c
  LockSYS                                    code  0144f8
  LockSema                                   code  014530
  LockSema.0001                              code  01453c
  LockSema.0002                              code  01456c
  LockSema.0003                              code  014554
  LockVideoBIOS                              code  010848
  MAX_BIOS_CALL                             const  000064
  MAX_DEV_OP                                const  00001f
  MAX_VIDEO_BIOS_CALL                       const  000023
  MBX_Array                                   bss  c5ff00
  MBX_ArrayEnd                                bss  c7ff00
  MBX_LINK                                  const  000000
  MBX_MQ_COUNT                              const  000034
  MBX_MQ_HEAD                               const  000020
  MBX_MQ_MISSED                             const  000038
  MBX_MQ_SIZE                               const  000032
  MBX_MQ_STRATEGY                           const  000037
  MBX_MQ_TAIL                               const  000028
  MBX_OWNER                                 const  000036
  MBX_Size                                  const  000040
  MBX_TQ_COUNT                              const  000030
  MBX_TQ_HEAD                               const  000008
  MBX_TQ_TAIL                               const  000018
  MEM_END                                   const  8000000
  MEM_END.bss                                 bss  e50d00
  MON_STACK                                 const  006000
  MON_r1                                      bss  001008
  MON_r10                                     bss  001050
  MON_r11                                     bss  001058
  MON_r12                                     bss  001060
  MON_r13                                     bss  001068
  MON_r14                                     bss  001070
  MON_r15                                     bss  001078
  MON_r16                                     bss  001080
  MON_r17                                     bss  001088
  MON_r18                                     bss  001090
  MON_r19                                     bss  001098
  MON_r2                                      bss  001010
  MON_r20                                     bss  0010a0
  MON_r21                                     bss  0010a8
  MON_r22                                     bss  0010b0
  MON_r23                                     bss  0010b8
  MON_r24                                     bss  0010c0
  MON_r25                                     bss  0010c8
  MON_r26                                     bss  0010d0
  MON_r27                                     bss  0010d8
  MON_r28                                     bss  0010e0
  MON_r29                                     bss  0010e8
  MON_r3                                      bss  001018
  MON_r30                                     bss  0010f0
  MON_r31                                     bss  0010f8
  MON_r4                                      bss  001020
  MON_r5                                      bss  001028
  MON_r6                                      bss  001030
  MON_r7                                      bss  001038
  MON_r8                                      bss  001040
  MON_r9                                      bss  001048
  MQS_NEWEST                                const  000002
  MQS_OLDEST                                const  000001
  MQS_UNLIMITED                             const  000000
  MRTest                                     code  80000000000001b4
  MSG_Array                                   bss  c80000
  MSG_ArrayEnd                                bss  d80000
  MSG_D1                                    const  000008
  MSG_D2                                    const  000010
  MSG_LINK                                  const  000000
  MSG_Size                                  const  000020
  MSG_TYPE                                  const  000018
  MT_GETCHAR                                const  ffffffffffffffef
  MT_IRQ                                    const  fffffffffffffff0
  MT_SEMA                                   const  ffffffffffffffff
  MicroDelay                                 code  012978
  MicroDelay.0001                            code  012984
  Milliseconds                                bss  001100
  MonGetch                                   code  011504
  Monitor                                    code  011402
  NR_DCB                                    const  000020
  NR_JCB                                    const  000033
  NR_MBX                                    const  000800
  NR_MSG                                    const  008000
  NR_TCB                                    const  000100
  NUMWKA                                      bss  00113c
  NormAttr                                    bss  001128
  OutCRLF                                    code  010adc
  OutChar                                    code  01164c
  OutputVec                                   bss  001108
  PIC                                       const  ffdc0fc0
  PIC_ES                                    const  ffdc0fd0
  PIC_IE                                    const  ffdc0fc4
  PIC_RSTE                                  const  ffdc0fd4
  PN1                                        code  010b3c
  PN2                                        code  010b3c
  PN3                                        code  010b5c
  PN4                                        code  010b68
  PN5                                        code  010b74
  PN6                                        code  010b58
  PNRET                                      code  010b88
  PRI_HIGH                                  const  000001
  PRI_HIGHEST                               const  000000
  PRI_LOW                                   const  000005
  PRI_LOWEST                                const  000007
  PRI_NORMAL                                const  000003
  PROG_LOAD_AREA                            const  009000
  PRTNUM                                     code  010b10
  PeekMsg                                    code  0153b0
  PopTimeoutList                             code  014c38
  PostMsg                                    code  0150f8
  PrintSc                                    code  0171c4
  QNdx0                                       bss  c00050
  QNdx1                                       bss  c00058
  QNdx2                                       bss  c00060
  QNdx3                                       bss  c00068
  QNdx4                                       bss  c00070
  QNdx5                                       bss  c00078
  QNdx6                                       bss  c00080
  QNdx7                                       bss  c00088
  QueueMsgAtMbx                              code  014e78
  RANDOM_NUM                                const  ffdc0c00
  ROMChecksum                                code  0110cc
  ROMChecksum.0001                           code  0110e4
  ROOTDIR_BUF                                 bss  009000
  RTCCOscOn                                  code  0126f0
  RTCCReadbuf                                code  0126a0
  RTCCReadbuf.0001                           code  0126ac
  RTCCWritebuf                               code  0126c8
  RTCCWritebuf.0001                          code  0126d4
  RTCC_BUF                                    bss  001bc0
  RW_READ_SD_BLOCK                          const  000002
  RW_WRITE_SD_BLOCK                         const  000003
  ReleaseIOFocus                             code  015c5c
  RemoveFromTimeoutList                      code  014b80
  RemoveTaskFromReadyList                    code  014a18
  RequestIOFocus                             code  015b54
  RunningTCB                                  bss  c00118
  SCREEN_Array                                bss  d80000
  SCREEN_ArrayEnd                             bss  e4c000
  SC_ALT                                    const  000011
  SC_CAPSLOCK                               const  000058
  SC_CTRL                                   const  000014
  SC_DEL                                    const  000071
  SC_EXTEND                                 const  0000e0
  SC_KEYUP                                  const  0000f0
  SC_LCTRL                                  const  000058
  SC_LSHIFT                                 const  000012
  SC_NUMLOCK                                const  000077
  SC_RSHIFT                                 const  000059
  SC_SCROLLLOCK                             const  00007e
  SC_TAB                                    const  00000d
  SDDiskSize                                 code  80000000000000c4
  SDInit                                     code  80000000000000c0
  SDReadBoot                                 code  80000000000001c9
  SDReadMultiple                             code  80000000000000c1
  SDReadPart                                 code  80000000000000c3
  SDWriteMultiple                            code  80000000000000c2
  SD_2_0                                     code  8000000000000264
  SD_CMD8                                    code  012760
  SD_CMD8.0001                               code  0127d0
  SD_CMD8.0002                               code  0127d8
  SD_CMD8.0003                               code  012834
  SD_CMD8.0004                               code  0127e8
  SD_CMD8.respOk                             code  012878
  SD_INIT                                    code  012714
  SD_MASTER                                 const  ffdc0b00
  SD_WAIT_RESP                               code  012890
  SD_WAIT_RESP.0001                          code  0128a4
  SD_WAIT_RESP.0002                          code  0128d0
  SECTOR_BUF                                  bss  008000
  SPIMASTER                                 const  ffdc0500
  SPI_DIRECT_ACCESS_DATA_REG                const  000018
  SPI_INIT_NO_ERROR                         const  000000
  SPI_INIT_SD                               const  000001
  SPI_MASTER_CONTROL_REG                    const  000004
  SPI_MASTER_VERSION_REG                    const  000000
  SPI_READ_NO_ERROR                         const  000000
  SPI_RESP_BYTE1                            const  0000c0
  SPI_RESP_BYTE2                            const  0000c4
  SPI_RESP_BYTE3                            const  0000c8
  SPI_RESP_BYTE4                            const  0000cc
  SPI_RX_FIFO_CTRL_REG                      const  000050
  SPI_RX_FIFO_DATA_COUNT_LSB                const  00004c
  SPI_RX_FIFO_DATA_COUNT_MSB                const  000048
  SPI_RX_FIFO_DATA_REG                      const  000040
  SPI_SD_SECT_15_8_REG                      const  000020
  SPI_SD_SECT_23_16_REG                     const  000024
  SPI_SD_SECT_31_24_REG                     const  000028
  SPI_SD_SECT_7_0_REG                       const  00001c
  SPI_TRANS_BUSY                            const  000001
  SPI_TRANS_CTRL_REG                        const  00000c
  SPI_TRANS_ERROR_REG                       const  000014
  SPI_TRANS_START                           const  000001
  SPI_TRANS_STATUS_REG                      const  000010
  SPI_TRANS_TYPE_REG                        const  000008
  SPI_TX_FIFO_CTRL_REG                      const  000090
  SPI_TX_FIFO_DATA_REG                      const  000080
  SPI_WRITE_NO_ERROR                        const  000000
  SSM_ISR                                    code  012b6c
  STACKS_Array                              const  7f00000
  STACKS_ArrayEnd                           const  8000000
  SYS_STACKS_Array                          const  7d00000
  ScreenToAscii                              code  01103c
  ScreenToAscii.0001                         code  011058
  ScreenToAscii.stasc1                       code  011064
  ScrollUp                                   code  010f08
  ScrollUp.0001                              code  010f48
  SelectTaskToRun                            code  0157f8
  SendMsg                                    code  015110
  SendMsgPrim                                code  01512c
  SerialCheckForCharDirect                   code  0104e8
  SerialGetChar                              code  01061c
  SerialGetCharDirect                        code  0104cc
  SerialIRQ                                  code  0106e0
  SerialPutChar                              code  0104f8
  SerialStartMsg                             code  01024c
  ServiceRequestIRQ                          code  8000000000000107
  SetBkColor                                 code  8000000000000148
  SetCurrAttr                                code  010bbc
  SetCursorPos                               code  011074
  SetNormAttr                                code  016a90
  SetPixel                                   code  8000000000000149
  SetTaskPriority                            code  014925
  SetTaskPriority.stp2                       code  014950
  SetTaskPriority.stp3                       code  014954
  SetupIntVectors                            code  010278
  SetupIntVectors.0001                       code  010294
  SetupIntVectors1                           code  010368
  SetupIntVectors1.0001                      code  010384
  SetupMemtags                               code  012934
  Sleep                                      code  014c68
  StartCPU1Addr                               bss  001398
  StartCPU1Flag                               bss  001390
  StartJob                                   code  014498
  StartTask                                  code  0145a8
  SwitchIOFocus                              code  015af4
  TAB                                       const  000009
  TCB_Affinity                              const  000280
  TCB_Array                                   bss  c10000
  TCB_ArrayEnd                                bss  c50000
  TCB_BASE                                  const  c00000
  TCB_BIOS_Stack                            const  000288
  TCB_BackLink                              const  000000
  TCB_CR0                                   const  0001b0
  TCB_DPC                                   const  000188
  TCB_DSP                                   const  0001a0
  TCB_EPC                                   const  000190
  TCB_ESP                                   const  0001a8
  TCB_IPC                                   const  000180
  TCB_ISP                                   const  000198
  TCB_LogSize                               const  00000a
  TCB_MSG_D1                                const  000248
  TCB_MSG_D2                                const  000250
  TCB_MbxList                               const  000260
  TCB_NextFree                              const  000218
  TCB_NextRdy                               const  000200
  TCB_NextTo                                const  000228
  TCB_PrevRdy                               const  000208
  TCB_PrevTo                                const  000230
  TCB_Priority                              const  000212
  TCB_SP0Save                               const  000100
  TCB_SP10Save                              const  000150
  TCB_SP11Save                              const  000158
  TCB_SP12Save                              const  000160
  TCB_SP13Save                              const  000168
  TCB_SP14Save                              const  000170
  TCB_SP15Save                              const  000178
  TCB_SP1Save                               const  000108
  TCB_SP2Save                               const  000110
  TCB_SP3Save                               const  000118
  TCB_SP4Save                               const  000120
  TCB_SP5Save                               const  000128
  TCB_SP6Save                               const  000130
  TCB_SP7Save                               const  000138
  TCB_SP8Save                               const  000140
  TCB_SP9Save                               const  000148
  TCB_SYS_Stack                             const  000290
  TCB_Size                                  const  000400
  TCB_StackTop                              const  000268
  TCB_Status                                const  000210
  TCB_TOP                                   const  1c00000
  TCB_Timeout                               const  000278
  TCB_errno                                 const  000270
  TCB_hJCB                                  const  000214
  TCB_hWaitMbx                              const  000258
  TCB_mbq_next                              const  000238
  TCB_mbq_prev                              const  000240
  TCB_r1                                    const  000008
  TCB_r10                                   const  000050
  TCB_r11                                   const  000058
  TCB_r12                                   const  000060
  TCB_r13                                   const  000068
  TCB_r14                                   const  000070
  TCB_r15                                   const  000078
  TCB_r16                                   const  000080
  TCB_r17                                   const  000088
  TCB_r18                                   const  000090
  TCB_r19                                   const  000098
  TCB_r2                                    const  000010
  TCB_r20                                   const  0000a0
  TCB_r21                                   const  0000a8
  TCB_r22                                   const  0000b0
  TCB_r23                                   const  0000b8
  TCB_r24                                   const  0000c0
  TCB_r25                                   const  0000c8
  TCB_r26                                   const  0000d0
  TCB_r27                                   const  0000d8
  TCB_r28                                   const  0000e0
  TCB_r29                                   const  0000e8
  TCB_r3                                    const  000018
  TCB_r30                                   const  0000f0
  TCB_r31                                   const  0000f8
  TCB_r4                                    const  000020
  TCB_r5                                    const  000028
  TCB_r6                                    const  000030
  TCB_r7                                    const  000038
  TCB_r8                                    const  000040
  TCB_r9                                    const  000048
  TEXTREG                                   const  0a0000
  TEXTSCR                                   const  ffd00000
  TEXT_COLS                                 const  000000
  TEXT_CURCTL                               const  000020
  TEXT_CURPOS                               const  00002c
  TEXT_ROWS                                 const  000004
  TS_NONE                                   const  000000
  TS_PREEMPT                                const  000004
  TS_READY                                  const  000010
  TS_READY_BIT                              const  000004
  TS_RUNNING                                const  000008
  TS_RUNNING_BIT                            const  000003
  TS_SLEEP                                  const  000020
  TS_TIMEOUT                                const  000001
  TS_TIMEOUT_BIT                            const  000000
  TS_WAITMSG                                const  000002
  TS_WAITMSG_BIT                            const  000001
  TXTCOLS                                   const  000054
  TXTROWS                                   const  00001f
  Tick1024Rout                               code  0113b4
  TickRout                                   code  011350
  TickRout.0001                              code  011378
  TickVec                                     bss  001120
  Ticks                                       bss  001000
  TimeoutList                                 bss  c00110
  ToJul                                      code  012d74
  UART                                      const  ffdc0a00
  UART_CM0                                  const  000008
  UART_CM1                                  const  000009
  UART_CM2                                  const  00000a
  UART_CM3                                  const  00000b
  UART_CTRL                                 const  000007
  UART_FF                                   const  000005
  UART_IE                                   const  000004
  UART_IS                                   const  000003
  UART_LS                                   const  000001
  UART_MC                                   const  000006
  UART_MS                                   const  000002
  UART_RX                                   const  000000
  UART_SPR                                  const  00000f
  UART_TX                                   const  000000
  Uart_foff                                   bss  00116e
  Uart_fon                                    bss  001170
  Uart_ms                                     bss  001164
  Uart_rxdtr                                  bss  00116c
  Uart_rxfifo                                 bss  001175
  Uart_rxflow                                 bss  00116a
  Uart_rxhead                                 bss  001166
  Uart_rxrts                                  bss  00116b
  Uart_rxtail                                 bss  001168
  Uart_rxxon                                  bss  00116d
  Uart_txdtr                                  bss  001173
  Uart_txrts                                  bss  001172
  Uart_txxon                                  bss  001174
  Uart_txxonoff                               bss  001165
  UninitIRQ                                  code  012afc
  UninitIRQ.0001                             code  012b08
  UnlockBIOS                                 code  011190
  UnlockIOF                                  code  015a78
  UnlockSYS                                  code  014514
  UnlockSema                                 code  014578
  UnlockSema.0001                            code  014580
  UnlockSema.0002                            code  01459c
  UnlockVideoBIOS                            code  010864
  UpdateCursorPos                            code  010bd8
  UpdateCursorPos.0001                       code  010c28
  UserTick                                    bss  c00000
  UserTickRout                               code  011384
  VAR_Area                                  const  c00000
  ValidateTCBPtr                             code  014960
  ValidateTCBPtr.0001                        code  014978
  ValidateTCBPtr.badPtr                      code  01496c
  VideoBIOSCall                              code  010880
  VideoBIOSCall.0003                         code  0108d4
  VideoBIOSCall.0004                         code  0108c0
  VideoBIOSCall.0005                         code  0108dc
  VideoBIOS_FuncTable                        code  010800
  VideoBIOS_sema                              bss  00d408
  Wait10ms                                   code  012130
  Wait10ms.0001                              code  01213c
  Wait10ms.0002                              code  012154
  WaitMsg                                    code  015264
  XOFF                                      const  000013
  XON                                       const  000011
  ambx_bad_ptr                               code  014d3c
  ambx_no_mbxs                               code  014d44
  attl1                                      code  014b6c
  attl_add_at_end                            code  014af4
  attl_add_at_head                           code  014b4c
  attl_adjust_timeout                        code  014b34
  attl_check_next                            code  014adc
  attl_exit                                  code  014b60
  attl_insert_before                         code  014b08
  attl_insert_before_head                    code  014b20
  berr_rout                                  code  012b0c
  bmem                                        bss  c08438
  brkpt1                                     code  01293c
  brkpt1.0001                                code  012958
  cirxb1                                     code  010618
  clockmsg_d1                                 bss  c00188
  clockmsg_d2                                 bss  c00190
  cmem                                        bss  c08440
  cmsg1                                      code  01543c
  cmsg10                                     code  015408
  cmsg2                                      code  015448
  cmsg3                                      code  0153f0
  cmsg4                                      code  0153f4
  cmsg5                                      code  015460
  cmsg8                                      code  015424
  cr0save                                     bss  c083f8
  csvs3                                      code  015dd0
  ctype_1                                    code  016574
  ctype_11                                   code  0165e4
  ctype_13                                   code  01662c
  ctype_15                                   code  016620
  ctype_16                                   code  01664c
  ctype_19                                   code  016688
  ctype_21                                   code  01667c
  ctype_22                                   code  0166a8
  ctype_24                                   code  0166c8
  ctype_27                                   code  0166f8
  ctype_29                                   code  0166ec
  ctype_3                                    code  016568
  ctype_30                                   code  01670c
  ctype_32                                   code  016720
  ctype_34                                   code  016734
  ctype_36                                   code  016748
  ctype_39                                   code  016780
  ctype_4                                    code  016594
  ctype_41                                   code  016788
  ctype_43                                   code  0167c4
  ctype_45                                   code  0167cc
  ctype_47                                   code  016804
  ctype_48                                   code  016808
  ctype_49                                   code  01680c
  ctype_51                                   code  016844
  ctype_52                                   code  016848
  ctype_53                                   code  01684c
  ctype_55                                   code  016944
  ctype_56                                   code  01692c
  ctype_57                                   code  01693c
  ctype_58                                   code  016930
  ctype_59                                   code  0169b4
  ctype_6                                    code  0165b4
  ctype_60                                   code  016998
  ctype_61                                   code  01699c
  ctype_62                                   code  016990
  ctype_63                                   code  0169a0
  ctype_64                                   code  016a20
  ctype_65                                   code  016a04
  ctype_66                                   code  016a08
  ctype_67                                   code  0169fc
  ctype_68                                   code  016a0c
  ctype_70                                   code  016a88
  ctype_71                                   code  016a70
  ctype_72                                   code  016a80
  ctype_73                                   code  016a74
  ctype_9                                    code  0165f0
  curaddr                                     bss  c08410
  curfmt                                      bss  c08420
  currep                                      bss  c08428
  cursz                                       bss  c08418
  cvss3                                      code  015d58
  dbg_DisplayHelp                            code  0189a0
  dbg_GetCursorCol                           code  018b84
  dbg_GetCursorRow                           code  018b64
  dbg_GetDBAD                                code  018bd0
  dbg_GetHexNumber                         rodata  000000
  dbg_HomeCursor                             code  018ba8
  dbg_ReadSetDB                              code  0190e0
  dbg_ReadSetDSB                             code  019288
  dbg_ReadSetIB                              code  018f70
  dbg_SetDBAD                                code  018c34
  dbg_arm                                    code  018ca4
  dbg_dbctrl                                  bss  c082f0
  dbg_getDecNumber                           code  019618
  dbg_getHexNumber                           code  018e44
  dbg_getchar                                code  018ce8
  dbg_init                                   code  01aa20
  dbg_irq                                    code  01a384
  dbg_nextNonSpace                           code  018dbc
  dbg_parse_begin                            code  0197d8
  dbg_parse_line                             code  019870
  dbg_processReg                             code  0196d4
  dbg_prompt                                 code  0195d0
  dbg_ssm                                    code  01a5ac
  dbg_stack                                   bss  c002f0
  dbg_ungetch                                code  018d90
  debugger                                   code  01a7d4
  debugger_1                               rodata  01bf6e
  debugger_10                              rodata  01bc5a
  debugger_101                               code  019114
  debugger_102                               code  0191cc
  debugger_103                               code  019278
  debugger_104                               code  0191c8
  debugger_106                               code  019278
  debugger_108                               code  019264
  debugger_109                               code  019278
  debugger_11                              rodata  01bbea
  debugger_112                             rodata  01ba32
  debugger_113                             rodata  01ba08
  debugger_114                               code  019424
  debugger_115                               code  0192d4
  debugger_117                               code  0192bc
  debugger_118                               code  019374
  debugger_119                               code  019420
  debugger_12                              rodata  01bb7c
  debugger_120                               code  019370
  debugger_122                               code  019420
  debugger_124                               code  01940c
  debugger_125                               code  019420
  debugger_129                             rodata  01b9d0
  debugger_13                              rodata  01bb24
  debugger_130                             rodata  01b99c
  debugger_131                             rodata  01b962
  debugger_132                             rodata  01b926
  debugger_133                             rodata  01b8ea
  debugger_134                             rodata  01b8b0
  debugger_135                             rodata  01b874
  debugger_136                             rodata  01b84a
  debugger_137                               code  019568
  debugger_138                               code  019550
  debugger_14                              rodata  01bafc
  debugger_140                             rodata  01b838
  debugger_141                               code  0195c4
  debugger_142                               code  0195b0
  debugger_143                             rodata  01b82a
  debugger_144                               code  01960c
  debugger_145                               code  0195f8
  debugger_146                               code  0196c8
  debugger_147                               code  01965c
  debugger_149                               code  019644
  debugger_15                              rodata  01baee
  debugger_150                               code  019664
  debugger_151                               code  0196ac
  debugger_152                               code  0197cc
  debugger_153                               code  0197c8
  debugger_154                               code  019710
  debugger_155                               code  019718
  debugger_156                               code  0197c4
  debugger_158                               code  0197c4
  debugger_159                               code  01976c
  debugger_16                                code  018abc
  debugger_160                               code  01978c
  debugger_161                               code  0197c0
  debugger_162                               code  019778
  debugger_163                               code  0197bc
  debugger_165                               code  019864
  debugger_166                               code  019840
  debugger_168                               code  01984c
  debugger_169                             rodata  01b816
  debugger_17                                code  018aa8
  debugger_170                             rodata  01b802
  debugger_171                             rodata  01b7ee
  debugger_172                             rodata  01b7da
  debugger_173                             rodata  01b7d4
  debugger_174                             rodata  01b7c0
  debugger_175                             rodata  01b7ac
  debugger_176                             rodata  01b798
  debugger_177                             rodata  01b784
  debugger_178                             rodata  01b76e
  debugger_179                             rodata  01b758
  debugger_180                             rodata  01b742
  debugger_181                             rodata  01b72c
  debugger_182                             rodata  01b726
  debugger_183                             rodata  01b716
  debugger_184                             rodata  01b70a
  debugger_185                             rodata  01b6fe
  debugger_186                             rodata  01b6f2
  debugger_187                             rodata  01b6e4
  debugger_188                             rodata  01b6de
  debugger_189                               code  01a378
  debugger_19                                code  018ad8
  debugger_190                               code  0198e0
  debugger_191                               code  01a370
  debugger_192                               code  01a36c
  debugger_193                               code  019958
  debugger_194                               code  019988
  debugger_195                               code  01998c
  debugger_196                               code  019994
  debugger_197                               code  01999c
  debugger_198                               code  0199ac
  debugger_199                               code  019b44
  debugger_2                               rodata  01bf5a
  debugger_20                                code  018b58
  debugger_200                               code  019f70
  debugger_201                               code  019f78
  debugger_202                               code  019ff4
  debugger_203                               code  019958
  debugger_204                               code  019b40
  debugger_205                               code  0199ec
  debugger_206                               code  019b00
  debugger_207                               code  019b10
  debugger_208                               code  019b20
  debugger_209                               code  019b30
  debugger_21                                code  018b1c
  debugger_210                               code  019a30
  debugger_212                               code  019a74
  debugger_214                               code  019ab8
  debugger_216                               code  019afc
  debugger_218                               code  019f6c
  debugger_219                               code  019b94
  debugger_220                               code  019c30
  debugger_221                               code  019d74
  debugger_222                               code  019d84
  debugger_223                               code  019d94
  debugger_224                               code  019da4
  debugger_225                               code  019db4
  debugger_226                               code  019b94
  debugger_227                               code  019bc0
  debugger_228                               code  019bb4
  debugger_23                                code  018b08
  debugger_230                               code  019c2c
  debugger_232                               code  019c1c
  debugger_233                               code  019c2c
  debugger_234                               code  019bf8
  debugger_235                               code  019c18
  debugger_236                               code  019c10
  debugger_237                               code  019c8c
  debugger_239                               code  019cd8
  debugger_24                                code  018b34
  debugger_241                               code  019d24
  debugger_243                               code  019d70
  debugger_245                               code  019f68
  debugger_246                               code  019df4
  debugger_247                               code  019f28
  debugger_248                               code  019f38
  debugger_249                               code  019f48
  debugger_250                               code  019f58
  debugger_251                               code  019e40
  debugger_253                               code  019e8c
  debugger_255                               code  019ed8
  debugger_257                               code  019f24
  debugger_259                               code  019ff0
  debugger_26                                code  018b30
  debugger_261                               code  019fc0
  debugger_262                               code  019ff0
  debugger_263                               code  019ff0
  debugger_265                               code  019fd8
  debugger_266                               code  01a184
  debugger_268                               code  01a034
  debugger_270                               code  01a184
  debugger_271                               code  01a064
  debugger_272                               code  01a094
  debugger_273                               code  01a0c4
  debugger_274                               code  01a090
  debugger_276                               code  01a0c0
  debugger_278                               code  01a15c
  debugger_279                               code  01a104
  debugger_28                                code  018b78
  debugger_280                               code  01a118
  debugger_281                               code  01a12c
  debugger_282                               code  01a140
  debugger_283                               code  01a154
  debugger_284                               code  01a180
  debugger_286                               code  01a36c
  debugger_287                               code  01a1a4
  debugger_288                               code  01a1f8
  debugger_289                               code  01a1fc
  debugger_290                               code  01a1b8
  debugger_291                               code  01a1f4
  debugger_292                               code  01a1ec
  debugger_293                               code  01a1dc
  debugger_295                               code  01a200
  debugger_296                               code  01a358
  debugger_297                               code  01a350
  debugger_298                               code  01a224
  debugger_3                               rodata  01beec
  debugger_30                                code  018b9c
  debugger_300                               code  01a258
  debugger_302                               code  01a350
  debugger_303                               code  01a280
  debugger_304                               code  01a2b0
  debugger_305                               code  01a2e8
  debugger_306                               code  01a320
  debugger_311                             rodata  01b6d0
  debugger_312                               code  01aa14
  debugger_313                               code  01a840
  debugger_315                               code  01a840
  debugger_316                               code  01aa10
  debugger_317                               code  01a850
  debugger_318                               code  01a980
  debugger_319                               code  01a940
  debugger_32                                code  018bc4
  debugger_320                               code  01a978
  debugger_321                               code  01a8a8
  debugger_323                               code  01a888
  debugger_324                               code  01a8e0
  debugger_326                               code  01a8c0
  debugger_327                               code  01a93c
  debugger_329                               code  01a950
  debugger_331                               code  01a968
  debugger_333                               code  01a9a4
  debugger_334                               code  01a9f8
  debugger_335                               code  01a9f0
  debugger_336                               code  01aa0c
  debugger_338                               code  01aae4
  debugger_339                               code  01aad0
  debugger_34                                code  018c30
  debugger_35                                code  018c04
  debugger_36                                code  018c0c
  debugger_37                                code  018c14
  debugger_38                                code  018c1c
  debugger_39                                code  018c24
  debugger_4                               rodata  01bec4
  debugger_41                                code  018c98
  debugger_42                                code  018c68
  debugger_43                                code  018c74
  debugger_44                                code  018c80
  debugger_45                                code  018c8c
  debugger_46                                code  018c98
  debugger_48                                code  018cb8
  debugger_5                               rodata  01be62
  debugger_50                                code  018cdc
  debugger_52                                code  018d30
  debugger_54                                code  018d38
  debugger_56                                code  018d58
  debugger_57                                code  018d84
  debugger_58                                code  018d84
  debugger_6                               rodata  01bdf2
  debugger_60                                code  018db0
  debugger_62                                code  018db0
  debugger_63                                code  018e38
  debugger_64                                code  018dd8
  debugger_65                                code  018e30
  debugger_66                                code  018e2c
  debugger_68                                code  018e10
  debugger_69                                code  018e18
  debugger_7                               rodata  01bd82
  debugger_70                                code  018f64
  debugger_71                                code  018e74
  debugger_72                                code  018f60
  debugger_73                                code  018ec0
  debugger_74                                code  018f50
  debugger_75                                code  018ef4
  debugger_76                                code  018f50
  debugger_77                                code  018f28
  debugger_78                                code  018f50
  debugger_79                                code  018f3c
  debugger_8                               rodata  01bd18
  debugger_80                              rodata  01baca
  debugger_81                              rodata  01baa0
  debugger_82                                code  0190d4
  debugger_83                                code  018fbc
  debugger_85                                code  018fa4
  debugger_86                                code  01903c
  debugger_87                                code  0190d0
  debugger_88                                code  019038
  debugger_9                               rodata  01bcac
  debugger_90                                code  0190d0
  debugger_92                                code  0190bc
  debugger_93                                code  0190d0
  debugger_96                              rodata  01ba7e
  debugger_97                              rodata  01ba56
  debugger_98                                code  01927c
  debugger_99                                code  01912c
  disassem                                 rodata  0177ac
  disassem20                               rodata  018920
  disassem_1                                 code  016ab0
  disassem_10                              rodata  01b692
  disassem_100                             rodata  01b506
  disassem_101                             rodata  01b4ee
  disassem_102                               code  017300
  disassem_103                               code  0172ec
  disassem_104                               code  01729c
  disassem_105                               code  0172b0
  disassem_106                               code  0172c4
  disassem_107                               code  0172d8
  disassem_108                               code  0172ec
  disassem_11                                code  016c3c
  disassem_110                             rodata  01b4de
  disassem_111                             rodata  01b4d6
  disassem_112                             rodata  01b4c4
  disassem_113                             rodata  01b4ba
  disassem_114                             rodata  01b4aa
  disassem_115                               code  017468
  disassem_116                               code  0173e0
  disassem_118                               code  017410
  disassem_119                               code  017454
  disassem_12                                code  016c28
  disassem_120                               code  01743c
  disassem_121                               code  017454
  disassem_122                               code  017454
  disassem_124                               code  017454
  disassem_126                             rodata  01b4a2
  disassem_127                               code  0174e4
  disassem_128                               code  0174d0
  disassem_130                             rodata  01b49a
  disassem_131                             rodata  01b48c
  disassem_132                             rodata  01b47e
  disassem_133                               code  0175bc
  disassem_134                               code  017584
  disassem_135                               code  0175a8
  disassem_136                               code  0175a8
  disassem_137                             rodata  01b476
  disassem_138                             rodata  01b468
  disassem_139                               code  017680
  disassem_14                              rodata  01b688
  disassem_140                               code  01761c
  disassem_142                               code  01766c
  disassem_143                             rodata  01b45a
  disassem_144                             rodata  01b454
  disassem_145                             rodata  01b44c
  disassem_146                             rodata  01b446
  disassem_147                               code  0177a0
  disassem_148                               code  017748
  disassem_15                                code  016c94
  disassem_150                               code  017734
  disassem_151                             rodata  01b43a
  disassem_152                             rodata  01b42e
  disassem_153                             rodata  01b422
  disassem_154                             rodata  01b416
  disassem_155                             rodata  01b40a
  disassem_156                             rodata  01b3fe
  disassem_157                             rodata  01b3f2
  disassem_158                             rodata  01b3e6
  disassem_159                             rodata  01b3da
  disassem_16                                code  016c80
  disassem_160                             rodata  01b3ce
  disassem_161                             rodata  01b3c2
  disassem_162                             rodata  01b3b6
  disassem_163                             rodata  01b3aa
  disassem_164                             rodata  01b39e
  disassem_165                             rodata  01b392
  disassem_166                             rodata  01b386
  disassem_167                             rodata  01b37a
  disassem_168                             rodata  01b36e
  disassem_169                             rodata  01b362
  disassem_170                             rodata  01b356
  disassem_171                             rodata  01b34a
  disassem_172                             rodata  01b33c
  disassem_173                             rodata  01b336
  disassem_174                             rodata  01b328
  disassem_175                             rodata  01b324
  disassem_176                             rodata  01b31e
  disassem_177                             rodata  01b312
  disassem_178                             rodata  01b306
  disassem_179                             rodata  01b2fa
  disassem_18                              rodata  01b67e
  disassem_180                             rodata  01b2ee
  disassem_181                             rodata  01b2e2
  disassem_182                             rodata  01b2d6
  disassem_183                             rodata  01b2ca
  disassem_184                             rodata  01b2be
  disassem_185                             rodata  01b2b2
  disassem_186                             rodata  01b2a6
  disassem_187                             rodata  01b29a
  disassem_188                             rodata  01b28e
  disassem_189                             rodata  01b282
  disassem_19                                code  016cec
  disassem_190                             rodata  01b276
  disassem_191                             rodata  01b26a
  disassem_192                             rodata  01b25e
  disassem_193                             rodata  01b252
  disassem_194                             rodata  01b246
  disassem_195                             rodata  01b23a
  disassem_196                             rodata  01b22e
  disassem_197                             rodata  01b216
  disassem_198                             rodata  01b1fe
  disassem_199                             rodata  01b1e6
  disassem_20                                code  016cd8
  disassem_200                             rodata  01b1ce
  disassem_201                             rodata  01b1c2
  disassem_202                             rodata  01b1b6
  disassem_203                             rodata  01b1aa
  disassem_204                             rodata  01b19e
  disassem_205                             rodata  01b192
  disassem_206                             rodata  01b186
  disassem_207                             rodata  01b17a
  disassem_208                             rodata  01b16e
  disassem_209                             rodata  01b162
  disassem_210                             rodata  01b156
  disassem_211                             rodata  01b14a
  disassem_212                             rodata  01b13e
  disassem_213                             rodata  01b132
  disassem_214                             rodata  01b126
  disassem_215                             rodata  01b11a
  disassem_216                             rodata  01b10e
  disassem_217                             rodata  01b102
  disassem_218                             rodata  01b0f6
  disassem_219                             rodata  01b0ea
  disassem_22                              rodata  01b676
  disassem_220                             rodata  01b0de
  disassem_221                             rodata  01b0d2
  disassem_222                             rodata  01b0c6
  disassem_223                             rodata  01b0ba
  disassem_224                             rodata  01b0ae
  disassem_225                             rodata  01b0a2
  disassem_226                             rodata  01b096
  disassem_227                             rodata  01b088
  disassem_228                             rodata  01b082
  disassem_229                             rodata  01b074
  disassem_23                                code  016d44
  disassem_230                             rodata  01b06e
  disassem_231                             rodata  01b062
  disassem_232                             rodata  01b054
  disassem_233                             rodata  01b046
  disassem_234                             rodata  01b038
  disassem_235                             rodata  01b028
  disassem_236                               code  018914
  disassem_237                               code  0177ec
  disassem_238                               code  0188f8
  disassem_239                               code  017808
  disassem_24                                code  016d30
  disassem_241                               code  0188d0
  disassem_242                               code  0179f4
  disassem_243                               code  017a84
  disassem_244                               code  017ed0
  disassem_245                               code  017ef8
  disassem_246                               code  017f20
  disassem_247                               code  017f48
  disassem_248                               code  017f70
  disassem_249                               code  017f98
  disassem_250                               code  017fc0
  disassem_251                               code  017fe8
  disassem_252                               code  018010
  disassem_253                               code  018038
  disassem_254                               code  018060
  disassem_255                               code  018088
  disassem_256                               code  0180b0
  disassem_257                               code  0180d8
  disassem_258                               code  018210
  disassem_259                               code  018224
  disassem_26                              rodata  01b66e
  disassem_260                               code  018294
  disassem_261                               code  018304
  disassem_262                               code  018340
  disassem_263                               code  01837c
  disassem_264                               code  0183a4
  disassem_265                               code  0183cc
  disassem_266                               code  0183f4
  disassem_267                               code  01841c
  disassem_268                               code  018444
  disassem_269                               code  01846c
  disassem_27                                code  016d9c
  disassem_270                               code  018494
  disassem_271                               code  0184bc
  disassem_272                               code  0184dc
  disassem_273                               code  0184fc
  disassem_274                               code  01851c
  disassem_275                               code  01853c
  disassem_276                               code  01855c
  disassem_277                               code  01857c
  disassem_278                               code  01859c
  disassem_279                               code  0185bc
  disassem_28                                code  016d88
  disassem_280                               code  0185ec
  disassem_281                               code  018614
  disassem_282                               code  01863c
  disassem_283                               code  018664
  disassem_284                               code  01868c
  disassem_285                               code  0186ac
  disassem_286                               code  0186cc
  disassem_287                               code  0186ec
  disassem_288                               code  01870c
  disassem_289                               code  018734
  disassem_290                               code  01875c
  disassem_291                               code  0187a4
  disassem_292                               code  0187ec
  disassem_293                               code  018814
  disassem_294                               code  0188a8
  disassem_295                               code  017a3c
  disassem_296                               code  017a58
  disassem_297                               code  017a38
  disassem_299                               code  017ecc
  disassem_3                                 code  016ad8
  disassem_30                              rodata  01b666
  disassem_300                               code  017b0c
  disassem_301                               code  017c6c
  disassem_302                               code  017c8c
  disassem_303                               code  017cac
  disassem_304                               code  017ccc
  disassem_305                               code  017cec
  disassem_306                               code  017d0c
  disassem_307                               code  017d2c
  disassem_308                               code  017d4c
  disassem_309                               code  017d6c
  disassem_31                              rodata  01b65e
  disassem_310                               code  017d8c
  disassem_311                               code  017dac
  disassem_312                               code  017dcc
  disassem_313                               code  017dec
  disassem_314                               code  017e0c
  disassem_315                               code  017e64
  disassem_316                               code  017c68
  disassem_317                               code  017b50
  disassem_318                               code  017b78
  disassem_319                               code  017ba0
  disassem_32                              rodata  01b654
  disassem_320                               code  017bc8
  disassem_321                               code  017bf0
  disassem_322                               code  017c18
  disassem_323                               code  017c40
  disassem_324                               code  01820c
  disassem_325                               code  01812c
  disassem_326                               code  01814c
  disassem_327                               code  01816c
  disassem_328                               code  01818c
  disassem_329                               code  0181ac
  disassem_33                              rodata  01b64c
  disassem_330                               code  0181cc
  disassem_331                               code  0181ec
  disassem_332                               code  018268
  disassem_334                               code  0182d8
  disassem_336                               code  018880
  disassem_337                               code  0188a4
  disassem_338                               code  0188ec
  disassem_34                              rodata  01b644
  disassem_340                               code  0188f8
  disassem_341                             rodata  01b010
  disassem_342                               code  018988
  disassem_343                               code  018950
  disassem_344                               code  018974
  disassem_345                               code  01896c
  disassem_346                               code  018974
  disassem_35                              rodata  01b63c
  disassem_36                              rodata  01b634
  disassem_37                              rodata  01b62c
  disassem_38                              rodata  01b620
  disassem_39                              rodata  01b614
  disassem_4                                 code  016b5c
  disassem_40                              rodata  01b608
  disassem_41                              rodata  01b5fc
  disassem_42                              rodata  01b5ee
  disassem_43                              rodata  01b5e0
  disassem_44                              rodata  01b5d4
  disassem_45                                code  016f8c
  disassem_46                                code  016f78
  disassem_47                                code  016e4c
  disassem_48                                code  016e60
  disassem_49                                code  016e74
  disassem_5                                 code  016b48
  disassem_50                                code  016e88
  disassem_51                                code  016e9c
  disassem_52                                code  016eb0
  disassem_53                                code  016ec4
  disassem_54                                code  016ed8
  disassem_55                                code  016eec
  disassem_56                                code  016f00
  disassem_57                                code  016f14
  disassem_58                                code  016f28
  disassem_59                                code  016f3c
  disassem_6                               rodata  01b69a
  disassem_60                                code  016f50
  disassem_61                                code  016f64
  disassem_62                                code  016f78
  disassem_64                              rodata  01b5cc
  disassem_65                              rodata  01b5c4
  disassem_66                              rodata  01b5b4
  disassem_67                              rodata  01b5ae
  disassem_68                                code  01706c
  disassem_69                                code  016ff0
  disassem_7                                 code  016be4
  disassem_70                                code  017014
  disassem_71                                code  017048
  disassem_72                                code  017058
  disassem_73                                code  017058
  disassem_75                              rodata  01b5a0
  disassem_76                              rodata  01b592
  disassem_77                              rodata  01b58a
  disassem_78                              rodata  01b582
  disassem_79                              rodata  01b57e
  disassem_8                                 code  016bd0
  disassem_80                              rodata  01b570
  disassem_81                              rodata  01b564
  disassem_82                                code  0171b8
  disassem_83                                code  0170f8
  disassem_84                                code  017108
  disassem_85                                code  01713c
  disassem_86                                code  017160
  disassem_87                                code  01717c
  disassem_88                                code  017190
  disassem_89                                code  0171a4
  disassem_91                              rodata  01b556
  disassem_92                              rodata  01b54e
  disassem_93                                code  017224
  disassem_94                                code  017200
  disassem_95                                code  017210
  disassem_96                                code  017210
  disassem_98                              rodata  01b536
  disassem_99                              rodata  01b51e
  disk_size                                   bss  001160
  dmfm1                                      code  014fe0
  dmfm2                                      code  014fdc
  dmfm3                                      code  014fec
  doCLS                                      code  011b10
  doCS                                       code  80000000000001b1
  doDate                                     code  01175c
  doDate.0001                                code  0117ac
  doDay                                      code  0117e4
  doDebug                                    code  011828
  doDisassem                                 code  011800
  doDumpTL                                   code  01159c
  doDumpmem                                  code  01157c
  doDumpmem.001                              code  011588
  doFillmem                                  code  0115a4
  doFillmem.0001                             code  011600
  doFillmem.0002                             code  0115e8
  doFillmem.0003                             code  011608
  doFillmem.0004                             code  0115b8
  doJump                                     code  011650
  doRand                                     code  80000000000001b6
  doSDBoot                                   code  011628
  drf_rout                                   code  012a28
  drf_rout.0001                              code  012a40
  dtfm2                                      code  015018
  dtfm2a                                     code  0150a4
  dtfm3                                      code  015040
  dtfm3a                                     code  0150cc
  dtfm4                                      code  015044
  dtfm4a                                     code  0150d0
  dtfm5                                      code  015068
  dtl2                                       code  014834
  dtl_nextList                               code  0148d0
  dtl_nextTask                               code  014844
  dwf_rout                                   code  012a44
  dwf_rout.0001                              code  012a5c
  eval                                       code  80000000000001b7
  exf_rout                                   code  012a0c
  exf_rout.0001                              code  012a24
  fif1                                       code  015ae0
  fmbx0                                      code  014e64
  fmbx1                                      code  014e60
  fmbx10                                     code  014df8
  fmbx11                                     code  014e28
  fmbx12                                     code  014e34
  fmbx2                                      code  014e48
  fmbx3                                      code  014dd0
  fmbx5                                      code  014da0
  fmbx6                                      code  014dd4
  fmbx7                                      code  014de8
  fmbx9                                      code  014e14
  freejcb_sema                                bss  c001b8
  freembx_sema                                bss  c001c8
  freemsg_sema                                bss  c001d0
  freetcb_sema                                bss  c001c0
  get_datetime                               code  012ba0
  getchar                                  rodata  016204
  getcharNoWait                            rodata  0161e4
  hangprg                                    code  012924
  hmem                                        bss  c08448
  icc1                                       code  010ee8
  icr1                                       code  010ec8
  ignBlanks                                  code  011520
  ignBlanks1                                 code  011528
  ignore_blanks                              code  018d48
  ijcb1                                      code  014204
  ijcb2                                      code  014288
  iof_sema                                    bss  c001f8
  iof_switch                                  bss  c00180
  isalnum                                    code  016654
  isalpha                                    code  0165f8
  iscntrl                                    code  016a2c
  isdigit                                  rodata  0165bc
  isgraph                                    code  016948
  islower                                    code  016818
  isprint                                    code  0169c0
  ispunct                                    code  016858
  isspace                                    code  0166d0
  isupper                                    code  0167d8
  isxdigit                                   code  016540
  it1                                        code  014478
  it2                                        code  014454
  it3                                        code  01444c
  jcb_sema                                    bss  c00210
  jmp_vector                                  bss  001118
  kbdi5                                      code  011bf4
  kernel_panic                               code  015a20
  keybdControlCodes                          code  012430
  keybdExtendedCodes                         code  0124b0
  keybdInIRQ                                  bss  c00178
  keybdIsSetup                                bss  c00168
  keybdLock                                   bss  c00170
  keybd_char                                  bss  c00160
  keybd_mbx                                   bss  c00158
  keybdmsg_d1                                 bss  c00148
  keybdmsg_d2                                 bss  c00150
  kpan1                                      code  015a40
  kpan2                                      code  015a24
  kt1                                        code  014804
  kt6                                        code  0147dc
  kt6.self                                   code  014800
  kt7                                        code  0147c8
  ld                                         code  0161f8
  linebuf                                     bss  c00228
  linendx                                     bss  c00220
  loadBootFile                               code  80000000000001ca
  mbx_sema                                    bss  c00200
  missed_ticks                                bss  c00140
  mmu_acc_save                                bss  c001a8
  mon1                                       code  011434
  mon1.Prompt1                               code  011470
  mon1.Prompt2                               code  011490
  mon1.Prompt3                               code  011458
  mon1.PromptLn                              code  01144c
  mon1.doHelp                                code  0114f4
  msgBadKeybd                                code  011bf4
  msgBusErr                                  code  012ad3
  msgEA                                      code  012ae3
  msgErr                                     code  011a34
  msgExitingTask                             code  01476c
  msgHelp                                    code  011a3c
  msgMonitorStarted                          code  011aff
  msgParErr                                  code  0129fc
  msgPriv                                    code  012ab7
  msgROMChecksum                             code  011118
  msgStart                                   code  0113e5
  msgTaskList                                code  0148f0
  msgUninit                                  code  012ac7
  msgUninitIRQ                               code  012ae8
  msg_sema                                    bss  c00208
  msgdrf                                     code  012aad
  msgdwf                                     code  012ab2
  msgexf                                     code  012aa8
  muol                                        bss  c08430
  nMailbox                                    bss  c00128
  nMsgBlk                                     bss  c00138
  nmi_rout                                   code  0129d4
  nmi_rout1                                  code  0129f8
  p100Hz1                                    code  0157b8
  p100Hz12                                   code  0157f8
  p100Hz14                                   code  0157d8
  p100Hz15                                   code  0157a0
  p100Hz4                                    code  015794
  p100Hz_missed_tick                         code  0157cc
  pSpriteController                          code  012f04
  printf                                   rodata  016264
  priv_rout                                  code  012a60
  priv_rout.0001                             code  012aa4
  ptl1                                       code  014c4c
  putch                                    rodata  015df0
  puthexnum                                  code  015fb4
  putnum                                     code  015e1c
  putstr                                     code  016130
  putstr2                                  rodata  0161b8
  qmam1                                      code  014f64
  qmam2                                      code  014eec
  qmam3                                      code  014f2c
  qmam4                                      code  014f30
  qmam6                                      code  014ef0
  qmam8                                      code  014f58
  qmam_add_at_head                           code  014ee8
  qmam_bad_msg                               code  014f14
  qmam_newest                                code  014f18
  qmam_oldest                                code  014f94
  qmam_unlimited                             code  014ed4
  r2                                         code  01260c
  r3                                         code  01260c
  r5                                         code  01260c
  r6                                         code  0161f8
  rdy_sema                                    bss  c001e8
  regs                                        bss  c082f8
  repcount                                    bss  c08408
  resched1                                   code  0155dc
  reschedule                                 code  0154cc
  reschedule.0001                            code  0154e0
  reschedule.0002                            code  0154e8
  reschedule.0004                            code  015514
  reschedule.0005                            code  015520
  reverse_video                              code  016ae4
  rfr1                                       code  014a8c
  rfr2                                       code  014a94
  rftBadPtr                                  code  014c24
  rftl_empty_list                            code  014c08
  rftl_not_on_list                           code  014c24
  rftl_not_on_list2                          code  014c34
  rftl_remove_from_head                      code  014be4
  riof1                                      code  015bf8
  riof2                                      code  015c14
  riof3                                      code  015bc4
  riof4                                      code  015c28
  rliof1                                     code  015cd8
  rliof2                                     code  015cf8
  rliof3                                     code  015d00
  rliof4                                     code  015c80
  rliof5                                     code  015cf0
  rliof6                                     code  015d04
  rxfull                                    const  000001
  set_time_serial                            code  012e48
  set_time_serial_10                         code  012d14
  set_time_serial_12                         code  012d4c
  set_time_serial_14                         code  012d4c
  set_time_serial_17                         code  012e3c
  set_time_serial_19                         code  012ef8
  set_time_serial_2                          code  012c28
  set_time_serial_20                         code  012ee4
  set_time_serial_4                          code  012c60
  set_time_serial_6                          code  012c98
  set_time_serial_8                          code  012cdc
  set_vector                                 code  018ae4
  sgc1                                       code  0104cc
  sgcfifo1                                   code  0106c8
  sgcfifo2                                   code  0106b4
  sgcfifo3                                   code  01068c
  sgcfifo4                                   code  0106a0
  sgcfifo5                                   code  0106b4
  shiftedScanCodes                           code  012330
  siof3                                      code  015b40
  sirq1                                      code  010724
  sjob1                                      code  0144ec
  sjob2                                      code  0144e8
  sjob3                                      code  0144c8
  smp2                                       code  015170
  smsg1                                      code  015220
  smsg2                                      code  015234
  smsg3                                      code  0151c0
  smsg4                                      code  01524c
  smsg5                                      code  015208
  smsg7                                      code  0151c8
  smsg8                                      code  0151dc
  smsg9                                      code  01520c
  smsirq                                     code  010738
  spcabort                                   code  0105e0
  spcb1                                      code  010558
  spcb2                                      code  010590
  spcb3                                      code  010530
  spcb4                                      code  010568
  spcb5                                      code  0105ac
  spcb6                                      code  010598
  spcb7                                      code  0105dc
  spcb8                                      code  0105b4
  sprite_demo                                code  012f0c
  sprite_demo_10                             code  012fac
  sprite_demo_11                             code  013024
  sprite_demo_12                             code  01301c
  sprite_demo_13                             code  013024
  sprite_demo_14                             code  0130f8
  sprite_demo_15                             code  013030
  sprite_demo_16                             code  0130e8
  sprite_demo_17                             code  0130e0
  sprite_demo_18                             code  0130f8
  sprite_demo_4                              code  012f44
  sprite_demo_5                              code  012f7c
  sprite_demo_6                              code  012f74
  sprite_demo_7                              code  012f80
  sprite_demo_8                              code  012fa8
  sprite_demo_9                              code  012fa0
  sprites                                     bss  00d000
  srxirq                                     code  010748
  srxirq1                                    code  010748
  srxirq2                                    code  010768
  srxirq3                                    code  010778
  srxirq5                                    code  010790
  srxirq6                                    code  0107d8
  srxirq7                                    code  0107ec
  srxirq8                                    code  0107fc
  ssm                                         bss  c08400
  st4                                        code  0142bc
  st4.0001                                   code  01437c
  st4.imbxl1                                 code  014310
  st4.imbxl2                                 code  014334
  st4.nextTCB                                code  0143a8
  st5                                        code  0141e0
  start                                      code  0100a8
  startSector                                 bss  00115c
  stask1                                     code  0146e8
  stask2                                     code  0146b8
  stdio_1                                    code  015e10
  stdio_11                                   code  015e90
  stdio_12                                   code  015f28
  stdio_13                                   code  015ec0
  stdio_15                                   code  015ef0
  stdio_17                                   code  015ee0
  stdio_18                                   code  015f28
  stdio_19                                   code  015f48
  stdio_2                                  rodata  01b000
  stdio_21                                   code  015f48
  stdio_22                                   code  015f6c
  stdio_23                                   code  015f64
  stdio_24                                   code  015f6c
  stdio_25                                   code  015f90
  stdio_26                                   code  015f90
  stdio_27                                   code  016124
  stdio_28                                   code  015ff4
  stdio_3                                    code  015fa8
  stdio_30                                   code  015ff0
  stdio_31                                   code  016008
  stdio_32                                   code  016010
  stdio_33                                   code  016028
  stdio_35                                   code  016028
  stdio_36                                   code  0160a4
  stdio_37                                   code  016058
  stdio_38                                   code  01608c
  stdio_39                                   code  016078
  stdio_4                                    code  015e5c
  stdio_40                                   code  01608c
  stdio_41                                   code  0160c4
  stdio_43                                   code  0160c4
  stdio_44                                   code  0160e8
  stdio_45                                   code  0160e8
  stdio_46                                   code  01610c
  stdio_47                                   code  01610c
  stdio_48                                   code  0161ac
  stdio_49                                   code  016158
  stdio_50                                   code  016180
  stdio_51                                   code  016174
  stdio_52                                   code  016194
  stdio_54                                   code  0161d8
  stdio_57                                   code  016258
  stdio_58                                   code  016220
  stdio_59                                   code  016238
  stdio_6                                    code  015e58
  stdio_60                                   code  016244
  stdio_61                                   code  0162cc
  stdio_62                                   code  01652c
  stdio_63                                   code  016294
  stdio_64                                   code  016510
  stdio_65                                   code  016508
  stdio_66                                   code  0164f8
  stdio_67                                   code  016508
  stdio_68                                   code  0164f4
  stdio_69                                   code  016360
  stdio_7                                    code  015e6c
  stdio_70                                   code  01636c
  stdio_71                                   code  01637c
  stdio_72                                   code  01639c
  stdio_73                                   code  0163bc
  stdio_74                                   code  0163dc
  stdio_75                                   code  0163f8
  stdio_76                                   code  016400
  stdio_77                                   code  016470
  stdio_78                                   code  016414
  stdio_79                                   code  01645c
  stdio_8                                    code  015e74
  stdio_80                                   code  016470
  stdio_82                                   code  016494
  stdio_84                                   code  0164a8
  stdio_85                                   code  0164f0
  stdio_86                                   code  016510
  stdio_9                                    code  015e8c
  strStartQue                                code  0155f0
  sttr10                                     code  015850
  sttr11                                     code  015844
  sttr2                                      code  015818
  sttr3                                      code  0159b8
  sttr5                                      code  015868
  sttr6                                      code  0158d0
  sttr7                                      code  015984
  sttr8                                      code  0159bc
  sttr_badtask                               code  0159f8
  sttr_nextInList                            code  015990
  sttr_nextList                              code  0159a4
  stxirq                                     code  010744
  sys_sema                                    bss  c001d8
  sys_ticks                                   bss  c00020
  syscall_exception                          code  015478
  syscall_vectors                            code  014000
  tcb_sema                                    bss  c001e0
  tcbsema_d1                                  bss  c00198
  tcbsema_d2                                  bss  c001a0
  tck3                                       code  0157f8
  tol_sema                                    bss  c001f0
  tolower                                    code  016750
  toupper                                    code  016794
  tr                                         code  01547c
  tr.bad_callno                              code  0154c0
  unshiftedScanCodes                         code  012230
  wmem                                        bss  c08450
  wmsg1                                      code  01537c
  wmsg10                                     code  0152f0
  wmsg11                                     code  015284
  wmsg12                                     code  01529c
  wmsg13                                     code  0152a4
  wmsg14                                     code  0152e0
  wmsg2                                      code  015394
  wmsg3                                      code  01533c
  wmsg6                                      code  015320
  wmsg7                                      code  0152dc
  wmsg8                                      code  015364
  xtsk1                                      code  014768
  xtsk6                                      code  01474c
  xtsk7                                      code  014738
