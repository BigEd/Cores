                	; ============================================================================
                	; bootrom.s
                	;        __
                	;   \\__/ o\    (C) 2014  Robert Finch, Stratford
                	;    \  __ /    All rights reserved.
                	;     \/_//     robfinch<remove>@finitron.ca
                	;       ||
                	;  
                	;
                	; This source file is free software: you can redistribute it and/or modify 
                	; it under the terms of the GNU Lesser General Public License as published 
                	; by the Free Software Foundation, either version 3 of the License, or     
                	; (at your option) any later version.                                      
                	;                                                                          
                	; This source file is distributed in the hope that it will be useful,      
                	; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                	; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                	; GNU General Public License for more details.                             
                	;                                                                          
                	; You should have received a copy of the GNU General Public License        
                	; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                	;                                                                          
                	; ============================================================================
                	;
                	TXTCOLS		EQU		84
                	TXTROWS		EQU		31
                	
                	CR	EQU	0x0D		;ASCII equates
                	LF	EQU	0x0A
                	TAB	EQU	0x09
                	CTRLC	EQU	0x03
                	CTRLH	EQU	0x08
                	CTRLI	EQU	0x09
                	CTRLJ	EQU	0x0A
                	CTRLK	EQU	0x0B
                	CTRLM   EQU 0x0D
                	CTRLS	EQU	0x13
                	CTRLX	EQU	0x18
                	XON		EQU	0x11
                	XOFF	EQU	0x13
                	
                	SC_LSHIFT	EQU		$12
                	SC_RSHIFT	EQU		$59
                	SC_KEYUP	EQU		$F0
                	SC_EXTEND	EQU		$E0
                	SC_CTRL		EQU		$14
                	SC_ALT		EQU		$11
                	SC_DEL		EQU		$71		; extend
                	SC_LCTRL	EQU		$58
                	SC_NUMLOCK	EQU		$77
                	SC_SCROLLLOCK	EQU	$7E
                	SC_CAPSLOCK	EQU		$58
                	SC_TAB      EQU     $0D
                	
                	; Boot sector info (62 byte structure) */
                	BSI_JMP		= 0x00
                	BSI_OEMName	= 0x03
                	BSI_bps		= 0x0B
                	BSI_SecPerCluster	= 0x0D
                	BSI_ResSectors	= 0x0E
                	BSI_FATS	= 0x10
                	BSI_RootDirEnts	= 0x11
                	BSI_Sectors	= 0x13
                	BSI_Media	= 0x15
                	BSI_SecPerFAT	= 0x16
                	BSI_SecPerTrack	= 0x18
                	BSI_Heads	= 0x1A
                	BSI_HiddenSecs	= 0x1C
                	BSI_HugeSecs	= 0x1E
                	
                	BSI_DriveNum	= 0x24
                	BSI_Rsvd1		= 0x25
                	BSI_BootSig		= 0x26
                	BSI_VolID		= 0x27
                	BSI_VolLabel	= 0x2B
                	BSI_FileSysType = 0x36
                	
                	DBG_STACK   EQU     $7000
                	CPU0_BIOS_STACK  EQU     $6800
                	MON_STACK   EQU     $6000
                	; CPU1 Ram allocations must be to the dram area.
                	CPU0_IRQ_STACK   EQU    $8800
                	CPU1_IRQ_STACK  EQU     $20800
                	CPU1_SYS_STACK      EQU  $21000
                	CPU1_BIOS_STACK     EQU  $21800
                	CPU0_SYS_STACK      EQU  $5000
                	
                	LEDS	equ		$FFDC0600
                	
                	BIOS_FREE      EQU       0
                	BIOS_DONE      EQU       1
                	BIOS_INSERVICE EQU       2
                	
                	MAX_BIOS_CALL  EQU       100
                	E_BadFuncno    EQU       1
                	BIOS_E_Timeout EQU       2
                	E_Unsupported  EQU       3
                	
                	; The following offsets in the I/O segment
                	TEXTSCR	equ		$FFD00000
                	TEXTREG		EQU		$A0000
                	TEXT_COLS	EQU		0x00
                	TEXT_ROWS	EQU		0x04
                	TEXT_CURPOS	EQU		0x2C
                	TEXT_CURCTL	EQU		0x20
                	
                	BMP_CLUT	EQU		$C5800
                	
                	PIC			EQU		0xFFDC0FC0
                	PIC_IE		EQU		0xFFDC0FC4
                	PIC_ES		EQU		0xFFDC0FD0
                	PIC_RSTE	EQU		0xFFDC0FD4
                	
                	KEYBD		EQU		0xFFDC0000
                	KEYBDCLR	EQU		0xFFDC0004
                	
                	SPIMASTER	EQU		0xFFDC0500
                	SPI_MASTER_VERSION_REG	EQU	0x00
                	SPI_MASTER_CONTROL_REG	EQU	0x04
                	SPI_TRANS_TYPE_REG	EQU		0x08
                	SPI_TRANS_CTRL_REG	EQU		0x0C
                	SPI_TRANS_STATUS_REG	EQU	0x10
                	SPI_TRANS_ERROR_REG		EQU	0x14
                	SPI_DIRECT_ACCESS_DATA_REG		EQU	0x18
                	SPI_SD_SECT_7_0_REG		EQU	0x1C
                	SPI_SD_SECT_15_8_REG	EQU	0x20
                	SPI_SD_SECT_23_16_REG	EQU	0x24
                	SPI_SD_SECT_31_24_REG	EQU	0x28
                	SPI_RX_FIFO_DATA_REG	EQU	0x40
                	SPI_RX_FIFO_DATA_COUNT_MSB	EQU	0x48
                	SPI_RX_FIFO_DATA_COUNT_LSB  EQU 0x4C
                	SPI_RX_FIFO_CTRL_REG		EQU	0x50
                	SPI_TX_FIFO_DATA_REG	EQU	0x80
                	SPI_TX_FIFO_CTRL_REG	EQU	0x90
                	SPI_RESP_BYTE1			EQU	0xC0
                	SPI_RESP_BYTE2			EQU	0xC4
                	SPI_RESP_BYTE3			EQU	0xC8
                	SPI_RESP_BYTE4			EQU	0xCC
                	
                	SPI_INIT_SD			EQU		0x01
                	SPI_TRANS_START		EQU		0x01
                	SPI_TRANS_BUSY		EQU		0x01
                	SPI_INIT_NO_ERROR	EQU		0x00
                	SPI_READ_NO_ERROR	EQU		0x00
                	SPI_WRITE_NO_ERROR	EQU		0x00
                	RW_READ_SD_BLOCK	EQU		0x02
                	RW_WRITE_SD_BLOCK	EQU		0x03
                	
                	I2C_MASTER		EQU		0xFFDC0E00
                	I2C_PRESCALE_LO	EQU		0x00
                	I2C_PRESCALE_HI	EQU		0x01
                	I2C_CONTROL		EQU		0x02
                	I2C_TX			EQU		0x03
                	I2C_RX			EQU		0x03
                	I2C_CMD			EQU		0x04
                	I2C_STAT		EQU		0x04
                	
                	SD_MASTER		EQU		0xFFDC0B00
                	
                	RANDOM_NUM      EQU     0xFFDC0C00
                	
                	UART            EQU     0xFFDC0A00
                	UART_TX         EQU     0
                	UART_RX         EQU     0
                	UART_LS         EQU     1
                	UART_MS         EQU     2
                	UART_IS         EQU     3
                	UART_IE         EQU     4
                	UART_FF         EQU     5
                	UART_MC         EQU     6
                	UART_CTRL       EQU     7
                	UART_CM0        EQU     8
                	UART_CM1        EQU     9
                	UART_CM2        EQU     10
                	UART_CM3        EQU     11
                	UART_SPR        EQU     15
                	
                	TCB_BASE       EQU     $0C00000
                	TCB_TOP        EQU     $1C00000
                	
                	; BIOS request structure
                	BIOS_op        EQU     $00
                	BIOS_arg1      EQU     $08
                	BIOS_arg2      EQU     $10
                	BIOS_arg3      EQU     $18
                	BIOS_arg4      EQU     $20
                	BIOS_arg5      EQU     $28
                	BIOS_resp      EQU     $30
                	BIOS_stat      EQU     $38
                	
                	; ============================================================================
                	;        __
                	;   \\__/ o\    (C) 2014,2015  Robert Finch, Stratford
                	;    \  __ /    All rights reserved.
                	;     \/_//     robfinch<remove>@finitron.ca
                	;       ||
                	;  
                	;
                	; This source file is free software: you can redistribute it and/or modify 
                	; it under the terms of the GNU Lesser General Public License as published 
                	; by the Free Software Foundation, either version 3 of the License, or     
                	; (at your option) any later version.                                      
                	;                                                                          
                	; This source file is distributed in the hope that it will be useful,      
                	; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                	; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                	; GNU General Public License for more details.                             
                	;                                                                          
                	; You should have received a copy of the GNU General Public License        
                	; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                	;
                	; DeviceDriver.inc
                	; - Device driver structures and constants                                                                         
                	; ============================================================================
                	
                	;	.global			; global constants
                	
                	; Device Control Block
                	;
                	DCB_Name			EQU		0		; string: first byte is length, 11 chars max
                	DCB_Type			EQU		0x0C
                	DCB_nBPB			EQU		0x10
                	DCB_LastErc			EQU		0x18		; last error code
                	DCB_StartBlock		EQU		0x20		; starting block number (partitioned devices)
                	DCB_nBlocks			EQU		0x28		; number of blocks on device
                	DCB_pCmdProc		EQU		0x30		; pointer to command processor routine
                	DCB_ReentCount		EQU		0x38		; re-entrancy count (1 to 255)
                	DCB_fSingleUser		EQU		0x39
                	DCB_hJob			EQU		0x40		; handle to associated job
                	DCB_Mbx				EQU		0x48
                	DCB_pSema			EQU		0x50		; pointer to device semaphore
                	DCB_Resv1			EQU		0x58		; reserved
                	DCB_Resv2			EQU		0x60		; reserved
                	DCB_Size			EQU		0x68
                	
                	; Device command opcodes
                	;
                	DVC_Nop				EQU		0
                	DVC_Setup			EQU		1
                	DVC_Initialize		EQU		2
                	DVC_Status			EQU		3
                	DVC_MediaCheck		EQU		4
                	DVC_BuildBPB		EQU		5
                	DVC_Open			EQU		6
                	DVC_Close			EQU		7
                	DVC_GetChar			EQU		8
                	DVC_PeekChar		EQU		9
                	DVC_GetCharDirect	EQU		10
                	DVC_PeekCharDirect	EQU		11
                	DVC_InputStatus		EQU		12
                	DVC_PutChar			EQU		13
                	DVC_SetPosition		EQU		15
                	DVC_ReadBlock		EQU		16
                	DVC_WriteBlock		EQU		17
                	DVC_VerifyBlock		EQU		18
                	DVC_OutputStatus	EQU		19
                	DVC_FlushInput		EQU		20
                	DVC_FlushOutput		EQU		21
                	DVC_IRQ				EQU		22
                	DVC_IsRemoveable	EQU		23
                	DVC_IOCTRL_READ		EQU		24
                	DVC_IOCTRL_WRITE	EQU		25
                	DVC_OutputUntilBusy	EQU		26
                	
                	MAX_DEV_OP			EQU		31
                	
                	
                	DRSP_DONE			EQU		1
                	
                	;Standard Devices are:
                	
                	;#		Device					Standard name
                	
                	;0		NULL device 			NUL		(OS built-in)
                	;1		Keyboard (sequential)	KBD		(OS built-in)
                	;2		Video (sequential)		VID		(OS built-in)
                	;3		Printer (parallel 1)	LPT
                	;4		Printer (parallel 2)	LPT2
                	;5		RS-232 1				COM1	(OS built-in)
                	;6		RS-232 2				COM2
                	;7		RS-232 3				COM3
                	;8		RS-232 4				COM4
                	;9
                	;10		Floppy					FD0
                	;11		Floppy					FD1
                	;12		Hard disk				HD0
                	;13		Hard disk				HD1
                	;14
                	;15
                	;16		SDCard					CARD1 	(OS built-in)
                	;17
                	;18
                	;19
                	;20
                	;21
                	;22
                	;23
                	;24
                	;25
                	;26
                	;27
                	;28		Audio					PSG1	(OS built-in)
                	;29
                	;30
                	;31
                	
                	NR_DCB			EQU		32
                	NR_DCB			EQU		32
                	;include "FMTK_Equates.inc"
                	
                		code
                		org		$00010000
010000 3A 15 00 00 		bra     start
010004 00 00 00 00 		align   
                	
010008 64 09 01 00 		dw		ClearScreen		; $8000
01000C 00 00 00 00 
010010 28 09 01 00 		dw		HomeCursor		; $8008
010014 00 00 00 00 
010018 50 0A 01 00 		dw		DisplayString	; $8010
01001C 00 00 00 00 
010020 60 1E 01 00 		dw		KeybdGetCharNoWait; $8018
010024 00 00 00 00 
010028 BE 00 00 00 		dw		ClearBmpScreen	; $8020
01002C 00 00 00 80 
010030 A0 0C 01 00 		dw		DisplayChar		; $8028
010034 00 00 00 00 
010038 C0 00 00 00 		dw		SDInit			; $8030
01003C 00 00 00 80 
010040 C1 00 00 00 		dw		SDReadMultiple	; $8038
010044 00 00 00 80 
010048 C2 00 00 00 		dw		SDWriteMultiple	; $8040
01004C 00 00 00 80 
010050 C3 00 00 00 		dw		SDReadPart		; $8048
010054 00 00 00 80 
010058 C4 00 00 00 		dw		SDDiskSize		; $8050
01005C 00 00 00 80 
010060 D0 09 01 00 		dw		DisplayWord		; $8058
010064 00 00 00 00 
010068 E4 09 01 00 		dw		DisplayHalf		; $8060
01006C 00 00 00 00 
010070 F8 09 01 00 		dw		DisplayCharHex	; $8068
010074 00 00 00 00 
010078 0C 0A 01 00 		dw		DisplayByte		; $8070
01007C 00 00 00 00 
                	BIOS_FuncTable:
010080 64 09       	    dc      ClearScreen
010082 28 09       	    dc      HomeCursor
010084 50 0A       	    dc      DisplayString
010086 60 1E       	    dc      KeybdGetCharNoWait
010088 00 00       	    dc      0
01008A 48 16       	    dc      OutChar
01008C 00 00       	    dc      0
01008E 00 00       	    dc      0
010090 00 00       	    dc      0
010092 00 00       	    dc      0
010094 00 00       	    dc      0
010096 D0 09       	    dc      DisplayWord
010098 E4 09       	    dc      DisplayHalf
01009A F8 09       	    dc      DisplayCharHex
01009C 0C 0A       	    dc      DisplayByte
01009E 80 0A       	    dc      DisplayString16
0100A0 00 00       	    dc      0
0100A2 00 00       	    dc      0
0100A4 00 00       	    dc      0
                	    
0100A6 00 00       	    align   
                	
                	message "start"
                	start:
0100A8 7C C0 00 00 	    sw      r0,FMTK_Inited
0100AC 63 00 60 03 
0100B0 02 10 00 6C 	    cpuid   r1,r0,#0
0100B4 BD 00 40 00 	    beq     r1,CPU0_Start
                	CPU1_Start:
0100B8 7C F0 07 00 	    ldi     sp,#STACKS_Array+4096+4088
0100BC 0A E0 F1 3F 
0100C0 7C C1 00 00 	    ldi     tr,#TCB_Array+TCB_Size
0100C4 0A 80 01 08 
0100C8 63 EC 31 03 		sw      sp,TCB_ISP[tr]
0100CC 63 EC E1 01 		sw      sp,TCB_r30[tr]
0100D0 7C E0 07 00 		ldi     r1,#BIOS_STACKS_Array+4096+4088  ; so we can call the BIOS during startup
0100D4 0A 10 F0 3F 
0100D8 63 1C 10 05 		sw      r1,TCB_BIOS_Stack[tr]
0100DC 7C D0 07 00 		ldi     r1,#SYS_STACKS_Array+4096+4088  ; so we can call the BIOS during startup
0100E0 0A 10 F0 3F 
0100E4 63 1C 20 05 		sw      r1,TCB_SYS_Stack[tr]
0100E8 60 0C 28 04 		sb      r0,TCB_hJCB[tr]             ; JCB#0 is the system JCB
0100EC B9 4F 00 00 	    bsr     SetupIntVectors1
0100F0 B9 6A 00 00 		bsr		InitPIC1
                		; Wait for CPU #0 to complete FMTK initialization before proceeding.
                	.0001:
0100F4 3F 00 00 00 	    nop
0100F8 3F 00 00 00 	    nop
0100FC 7C C0 00 00 		lw      r1,FMTK_Inited
010100 46 10 60 03 
010104 7C 34 12 00 		cmpu    r1,r1,#$12345678
010108 96 10 F0 AC 
01010C BD 10 F4 FF 		bne     r1,.0001
010110 B9 E1 07 00 		bsr     FMTKInitialize        ;  Initialize for CPU #1
                	.0003:
010114 02 00 00 6E 	    cli
010118 7C 02 00 00 	    inc     $20000
01011C 64 10 00 00 
010120 46 10 20 27 	    lw      r1,StartCPU1Flag
010124 7C 34 12 00 	    cmp     r1,r1,#$12345678
010128 86 10 F0 AC 
01012C BD 10 F4 FF 	    bne     r1,.0003
010130 3E 00 30 27 	    jmp     (StartCPU1Addr)
                	    ; This is a little bit kludgy, we setup just enough of the FMTK vars
                	    ; in order to be able to get display output.
                	CPU0_Start:
                	.0002:
010134 7C F0 07 00 		ldi     sp,#STACKS_Array+4088
010138 0A E0 F1 1F 
01013C 7C C1 00 00 		ldi     tr,#TCB_Array               ; load task register with BIOS task
010140 0A 80 01 00 
010144 63 EC 31 03 		sw      sp,TCB_ISP[tr]
010148 63 EC E1 01 		sw      sp,TCB_r30[tr]
01014C 7C E0 07 00 		ldi     r1,#BIOS_STACKS_Array+4088  ; so we can call the BIOS during startup
010150 0A 10 F0 1F 
010154 63 1C 10 05 		sw      r1,TCB_BIOS_Stack[tr]
010158 7C D0 07 00 		ldi     r1,#SYS_STACKS_Array+4088  ; so we can System Call during startup
01015C 0A 10 F0 1F 
010160 63 1C 20 05 		sw      r1,TCB_SYS_Stack[tr]
010164 60 0C 28 04 		sb      r0,TCB_hJCB[tr]             ; JCB#0 is the system JCB
010168 39 FB 01 00 		bsr     GetJCBPtr
01016C 7C C0 00 00 		sw      r1,IOFocusNdx               ; The screen routines check this var
010170 63 10 50 00 
010174 7C D0 FF 00 		ldi     r2,#TEXTSCR
010178 0A 20 00 00 
01017C E3 20 D0 07 		sw      r2,JCB_pVidMem[r1]          ; point JCB#0 to real screen
010180 FC 26 00 00 		ldi		r4,#%000000100_110101110_0000000000	; grey on blue
010184 0A 40 00 70 
010188 E2 40 28 08 		sh		r4,JCB_NormAttr[r1]
01018C E2 40 30 08 		sh		r4,JCB_CurrAttr[r1]
010190 0A 50 00 00 	    ldi     r5,#$0000
010194 0A 10 28 00 	    ldi     r1,#20
                	.0001:
010198 7C DC FF 00 	    sc      r5,LEDS
01019C 61 50 00 0C 
0101A0 94 52 02 00 	    addui   r5,r5,#1
0101A4 63 00 00 22 		sw		r0,Milliseconds
0101A8 0A 10 FE FF 		ldi     r1,#-1
0101AC 63 10 00 27 		sw      r1,API_sema
0101B0 7C C0 00 00 		sw      r0,BIOS1_sema
0101B4 63 00 30 04 
0101B8 B9 FA 01 00 		bsr     UnlockBIOS
0101BC B9 D4 00 00 		bsr     UnlockVideoBIOS
0101C0 FC 26 00 00 		ldi		r1,#%000000100_110101110_0000000000
0101C4 0A 10 00 70 
0101C8 60 10 68 22 		sb		r1,KeybdEcho
0101CC 60 00 6A 22 		sb		r0,KeybdBad
0101D0 62 10 50 22 		sh		r1,NormAttr
0101D4 7C 01 00 00 		ldi		r1,#DisplayChar
0101D8 0A 10 40 19 
0101DC 63 10 10 22 		sw		r1,OutputVec
0101E0 B9 F0 00 00 		bsr		ClearScreen
0101E4 B9 E8 00 00 		bsr		HomeCursor
0101E8 7C 01 00 00 		ldi     r1,#msgStart
0101EC 0A 10 C2 27 
0101F0 B9 1B 01 00 		bsr     DisplayStringCRLF
0101F4 B9 10 00 00 		bsr		SetupIntVectors
0101F8 39 DA 01 00 		bsr     ROMChecksum
0101FC 39 41 13 00 		bsr     dbg_init
                	;	bsr		KeybdInit
                	    ; set data breakpoint at FreeTCB address
                	;    ldi     r1,#$C00098
                	;    mtspr   dbad0,r1
                	;    ldi     r1,#$D0001
                	;    mtspr   dbctrl,r1
010200 B9 C3 07 00 	    bsr     FMTKInitialize
010204 7C 01 00 00 	    ldi     r1,#UserTickRout     ; set user tick vector
010208 0A 10 00 27 
01020C 7C C0 00 00 	    sw      r1,$C00000
010210 63 10 00 00 
010214 B9 42 00 00 		bsr		InitPIC
010218 39 49 00 00 		bsr     InitUart
01021C B9 90 04 00 		bsr     RTCCReadbuf          ; read the real-time clock
010220 39 85 05 00 		bsr     set_time_serial      ; set the system time serial
                	
                		; Startup BIOS call task so that CPU#1 may make BIOS calls
010224 0A 10 00 00 		ldi     r1,#0                ; task priority
010228 0A 20 00 00 		ldi     r2,#0                ; cpu affinity
01022C 7C 01 00 00 		ldi     r3,#BIOSCallTask|1   ; start address (start in kernel mode)
010230 0A 30 BA 25 
010234 0A 40 00 00 		ldi     r4,#0                ; start parameter
010238 0A 50 00 00 		ldi     r5,#0                ; owning job
01023C 38 0F 08 00 		sys     #FMTK_CALL
010240 01 00 00 00 		dh      1                    ; start task function
010244 B9 B6 08 00 	    bsr     DumpTaskList
010248 BA 36 02 00 		bra		Monitor
                	
                	SerialStartMsg:
01024C E7 EF 01 00 	    push    lr
010250 7C 01 00 00 		ldi     r1,#SerialPutChar
010254 0A 10 F0 09 
010258 63 10 10 22 		sw      r1,OutputVec
01025C 7C 01 00 00 		ldi     r1,#msgStart
010260 0A 10 C2 27 
010264 39 0D 01 00 		bsr     DisplayStringCRLF
010268 7C 01 00 00 		ldi		r1,#DisplayChar
01026C 0A 10 40 19 
010270 63 10 10 22 		sw		r1,OutputVec
010274 3B FF 11 00 	    rts
 
                	SetupIntVectors:
010278 02 00 14 3C 		mtspr   vbr,r0               ; place vector table at $0000
01027C 3F 00 00 00 		nop
010280 3F 00 00 00 		nop
010284 02 20 14 3E 		mfspr   r2,vbr
010288 7C 01 00 00 		ldi     r1,#UninitIRQ
01028C 0A 10 F8 55 
010290 0A 30 FE 03 		ldi     r3,#511
                	.0001:
010294 6B 11 C6 00 		sw      r1,[r2+r3*8]
010298 95 31 02 00 		subui   r3,r3,#1
01029C BD 31 FC FF 		bge     r3,.0001
0102A0 7C 01 00 00 		ldi     r1,#BIOSCall
0102A4 0A 10 F0 24 
0102A8 63 11 A0 00 		sw      r1,10*8[r2]
0102AC 7C 01 00 00 		ldi     r1,#VideoBIOSCall
0102B0 0A 10 F8 10 
0102B4 63 11 A0 19 		sw      r1,410*8[r2]
0102B8 7C 01 00 00 		ldi		r1,#Tick1024Rout
0102BC 0A 10 60 27 
0102C0 63 11 20 1C 		sw		r1,450*8[r2]
0102C4 7C 01 00 00 		ldi		r1,#TickRout         ; This vector will be taken over by FMTK
0102C8 0A 10 98 26 
0102CC 63 11 30 1C 		sw		r1,451*8[r2]
0102D0 7C 01 00 00 		ldi     r1,#SerialIRQ
0102D4 0A 10 C0 0D 
0102D8 63 11 80 1C 		sw      r1,456*8[r2]
0102DC 7C 00 00 00 		ldi     r1,#ServiceRequestIRQ
0102E0 7C 00 00 00 
0102E4 0A 10 0E 02 
0102E8 63 11 90 1C 		sw      r1,457*8[r2]
0102EC 7C 01 00 00 		ldi		r1,#KeybdIRQ
0102F0 0A 10 B8 42 
0102F4 63 11 F0 1C 		sw		r1,463*8[r2]
0102F8 7C 01 00 00 	    ldi     r1,#SSM_ISR          ; set ISR vector for single step routine
0102FC 0A 10 D8 56 
010300 63 11 F0 1E 	    sw      r1,495*8[r2]
010304 7C 01 00 00 	    ldi     r1,#BPT_ISR          ; set ISR vector for breakpoint routine
010308 0A 10 E0 56 
01030C 63 11 00 1F 	    sw      r1,496*8[r2]
010310 7C 01 00 00 		ldi		r1,#exf_rout
010314 0A 10 18 54 
010318 63 11 10 1F 		sw		r1,497*8[r2]
01031C 7C 01 00 00 		ldi		r1,#dwf_rout
010320 0A 10 88 54 
010324 63 11 20 1F 		sw		r1,498*8[r2]
010328 7C 01 00 00 		ldi		r1,#drf_rout
01032C 0A 10 50 54 
010330 63 11 30 1F 		sw		r1,499*8[r2]
010334 7C 01 00 00 		ldi		r1,#priv_rout
010338 0A 10 C0 54 
01033C 63 11 50 1F 		sw		r1,501*8[r2]
010340 7C 01 00 00 		ldi		r1,#berr_rout
010344 0A 10 18 56 
010348 63 11 C0 1F 		sw		r1,508*8[r2]
01034C 7C 01 00 00 		ldi		r1,#berr_rout
010350 0A 10 18 56 
010354 63 11 D0 1F 		sw		r1,509*8[r2]
010358 7C 01 00 00 		ldi		r1,#nmi_rout
01035C 0A 10 A8 53 
010360 63 11 E0 1F 		sw		r1,510*8[r2]
010364 37 FF 01 00 	    rtl
 
                	; Setup interrupt vector table for processor #1
                	SetupIntVectors1:
010368 02 00 14 3C 		mtspr   vbr,r0               ; place vector table at $0000
01036C 3F 00 00 00 		nop
010370 3F 00 00 00 		nop
010374 02 20 14 3E 		mfspr   r2,vbr
010378 7C 01 00 00 		ldi     r1,#UninitIRQ
01037C 0A 10 F8 55 
010380 0A 30 FE 03 		ldi     r3,#511
                	.0001:
010384 6B 11 C6 00 		sw      r1,[r2+r3*8]
010388 95 31 02 00 		subui   r3,r3,#1
01038C BD 31 FC FF 		bge     r3,.0001
010390 7C 01 00 00 		ldi     r1,#BIOSCall1
010394 0A 10 80 23 
010398 63 11 A0 00 		sw      r1,10*8[r2]
01039C 7C 01 00 00 		ldi		r1,#TickRout         ; This vector will be taken over by FMTK
0103A0 0A 10 98 26 
0103A4 63 11 30 1C 		sw		r1,451*8[r2]
0103A8 7C 00 00 00 		ldi     r1,#ServiceRequestIRQ
0103AC 7C 00 00 00 
0103B0 0A 10 0E 02 
0103B4 63 11 90 1C 		sw      r1,457*8[r2]
0103B8 7C 01 00 00 	    ldi     r1,#SSM_ISR          ; set ISR vector for single step routine
0103BC 0A 10 D8 56 
0103C0 63 11 F0 1E 	    sw      r1,495*8[r2]
0103C4 7C 01 00 00 	    ldi     r1,#BPT_ISR          ; set ISR vector for instruction breakpoint routine
0103C8 0A 10 E0 56 
0103CC 63 11 00 1F 	    sw      r1,496*8[r2]
0103D0 7C 01 00 00 		ldi		r1,#exf_rout
0103D4 0A 10 18 54 
0103D8 63 11 10 1F 		sw		r1,497*8[r2]
0103DC 7C 01 00 00 		ldi		r1,#dwf_rout
0103E0 0A 10 88 54 
0103E4 63 11 20 1F 		sw		r1,498*8[r2]
0103E8 7C 01 00 00 		ldi		r1,#drf_rout
0103EC 0A 10 50 54 
0103F0 63 11 30 1F 		sw		r1,499*8[r2]
0103F4 7C 01 00 00 		ldi		r1,#priv_rout
0103F8 0A 10 C0 54 
0103FC 63 11 50 1F 		sw		r1,501*8[r2]
010400 7C 01 00 00 		ldi		r1,#berr_rout
010404 0A 10 18 56 
010408 63 11 C0 1F 		sw		r1,508*8[r2]
01040C 7C 01 00 00 		ldi		r1,#berr_rout
010410 0A 10 18 56 
010414 63 11 D0 1F 		sw		r1,509*8[r2]
010418 7C 01 00 00 		ldi		r1,#nmi_rout1
01041C 0A 10 F0 53 
010420 63 11 E0 1F 		sw		r1,510*8[r2]
010424 37 FF 01 00 	    rtl
 
                	;------------------------------------------------------------------------------
                	; Initialize the interrupt controller.
                	;------------------------------------------------------------------------------
                	
                	InitPIC:
010428 0A 10 18 00 		ldi		r1,#$000C		; timer interrupt(s) are edge sensitive
01042C 7C DC FF 00 		sh		r1,PIC_ES
010430 62 10 A0 1F 
010434 0A 10 1E 00 		ldi		r1,#$000F		; enable keyboard reset, timer interrupts
010438 7C DC FF 00 		sh		r1,PIC_IE
01043C 62 10 88 1F 
010440 37 FF 01 00 		rtl

                	; For CPU #1 the only interrupt to be serviced is the 30Hz time slice.
                	
                	InitPIC1:
010444 0A 10 18 00 		ldi		r1,#$000C		; timer interrupt(s) are edge sensitive
010448 7C DC FF 00 		sh		r1,PIC_ES
01044C 62 10 A0 1F 
010450 0A 10 16 00 		ldi		r1,#$000B		; enable keyboard reset, timer interrupts
010454 7C DC FF 00 		sh		r1,PIC_IE
010458 62 10 88 1F 
01045C 37 FF 01 00 		rtl

                	
                	;==============================================================================
                	; Serial port
                	;==============================================================================
                		code
                	;------------------------------------------------------------------------------
                	; Initialize UART
                	;------------------------------------------------------------------------------
                	
                	InitUart:
010460 7C DC FF 00 	    ldi     r2,#UART
010464 0A 20 00 14 
                	;    ldi     r1,#$025BF7BA   ; constant for clock multiplier with 16.667MHz clock for 9600 baud
010468 FC 27 0E 00 	    ldi     r1,#$0E27CE61   ; constant for clock multiplier with 16.667MHz clock for 57600 baud
01046C 0A 10 C2 9C 
010470 82 10 10 72 	    lsr     r1,r1,#8          ; drop the LSB (not used)
010474 60 11 12 00 	    sb      r1,UART_CM1[r2]
010478 82 10 10 72 	    lsr     r1,r1,#8
01047C 60 11 14 00 	    sb      r1,UART_CM2[r2]
010480 82 10 10 72 	    lsr     r1,r1,#8
010484 60 11 16 00 	    sb      r1,UART_CM3[r2]
010488 60 01 0E 00 	    sb      r0,UART_CTRL[r2]           ; no hardware flow control
01048C 61 00 CC 22 		sc		r0,Uart_rxhead			; reset buffer indexes
010490 61 00 D0 22 		sc		r0,Uart_rxtail
010494 0A 10 E0 03 		ldi		r1,#0x1f0
010498 61 10 DC 22 		sc		r1,Uart_foff		; set threshold for XOFF
01049C 0A 10 20 00 		ldi		r1,#0x010
0104A0 61 10 E0 22 		sc		r1,Uart_fon			; set threshold for XON
0104A4 0A 10 02 00 		ldi		r1,#1
0104A8 60 11 08 00 		sb		r1,UART_IE[r2]		; enable receive interrupt only
0104AC 60 00 D6 22 		sb		r0,Uart_rxrts		; no RTS/CTS signals available
0104B0 60 00 E4 22 		sb		r0,Uart_txrts		; no RTS/CTS signals available
0104B4 60 00 E6 22 		sb		r0,Uart_txdtr		; no DTR signals available
0104B8 60 00 D8 22 		sb		r0,Uart_rxdtr		; no DTR signals available
0104BC 0A 10 02 00 		ldi		r1,#1
0104C0 60 10 E8 22 		sb		r1,Uart_txxon		; for now
0104C4 0A 10 02 00 		ldi		r1,#1
                	;	sb		r1,SERIAL_SEMA
0104C8 37 FF 01 00 	    rtl

                	;---------------------------------------------------------------------------------
                	; Get character directly from serial port. Blocks until a character is available.
                	;---------------------------------------------------------------------------------
                	;
                	SerialGetCharDirect:
                	sgc1:
0104CC 7C DC FF 00 		lb		r1,UART+UART_LS	; uart status
0104D0 40 10 02 14 
0104D4 8C 10 02 00 		and		r1,r1,#1		; is there a char available ?
0104D8 BD 00 FA FF 		beq		r1,sgc1
0104DC 7C DC FF 00 		lb		r1,UART+UART_RX
0104E0 40 10 00 14 
0104E4 37 FF 01 00 		rtl

                	;------------------------------------------------
                	; Check for a character at the serial port
                	; returns r1 = 1 if char available, 0 otherwise
                	;------------------------------------------------
                	;
                	SerialCheckForCharDirect:
0104E8 7C DC FF 00 		lb		r1,UART+UART_LS			; uart status
0104EC 40 10 02 14 
0104F0 8C 10 02 00 		and		r1,r1,#rxfull			; is there a char available ?
0104F4 37 FF 01 00 		rtl

                	;-----------------------------------------
                	; Put character to serial port
                	; r1 = char to put
                	;-----------------------------------------
                	;
                	SerialPutChar:
0104F8 67 E1 01 00 	    push    r2
0104FC E7 E1 01 00 	    push    r3
010500 67 E2 01 00 		push	r4
010504 E7 E2 01 00 		push	r5
010508 67 E3 01 00 	    push    r6
01050C 7C DC FF 00 	    ldi     r6,#UART
010510 0A 60 00 14 
010514 40 23 0C 00 		lb		r2,UART_MC[r6]
010518 0D 21 06 00 		or		r2,r2,#3		; assert DTR / RTS
01051C 60 23 0C 00 		sb		r2,UART_MC[r6]
010520 40 20 E4 22 		lb		r2,Uart_txrts
010524 3D 01 1A 00 		beq		r2,spcb1
010528 46 40 00 22 		lw		r4,Milliseconds
01052C 0A 30 00 08 		ldi		r3,#1024		; delay count (1 s)
                	spcb3:
010530 40 23 04 00 		lb		r2,UART_MS[r6]
010534 0C 21 20 00 		and		r2,r2,#$10		; is CTS asserted ?
010538 3D 11 10 00 		bne		r2,spcb1
01053C 46 50 00 22 		lw		r5,Milliseconds
010540 02 22 0A 0C 		cmp		r2,r4,r5
010544 3D 01 F6 FF 		beq		r2,spcb3
010548 82 42 00 1A 		mov		r4,r5
01054C 95 31 02 00 		subui   r3,r3,#1
010550 BD 11 F0 FF 		bne		r3,spcb3
010554 BA 11 00 00 		bra		spcabort
                	spcb1:
010558 40 20 E6 22 		lb		r2,Uart_txdtr
01055C 3D 01 1A 00 		beq		r2,spcb2
010560 46 40 00 22 		lw		r4,Milliseconds
010564 0A 30 00 08 		ldi		r3,#1024		; delay count
                	spcb4:
010568 40 23 04 00 		lb		r2,UART_MS[r6]
01056C 0C 21 40 00 		and		r2,r2,#$20		; is DSR asserted ?
010570 3D 11 10 00 		bne		r2,spcb2
010574 46 50 00 22 		lw		r5,Milliseconds
010578 02 22 0A 0C 		cmp		r2,r4,r5
01057C 3D 01 F6 FF 		beq		r2,spcb4
010580 82 42 00 1A 		mov		r4,r5
010584 95 31 02 00 		subui   r3,r3,#1
010588 BD 11 F0 FF 		bne		r3,spcb4
01058C BA 0A 00 00 		bra		spcabort
                	spcb2:	
010590 40 20 E8 22 		lb		r2,Uart_txxon
010594 3D 01 0C 00 		beq		r2,spcb5
                	spcb6:
010598 40 20 CA 22 		lb		r2,Uart_txxonoff
01059C 3D 01 08 00 		beq		r2,spcb5
0105A0 40 43 04 00 		lb		r4,UART_MS[r6]
0105A4 0C 42 00 01 		and		r4,r4,#0x80			; DCD ?
0105A8 3D 12 F8 FF 		bne		r4,spcb6
                	spcb5:
0105AC 46 40 00 22 		lw		r4,Milliseconds
0105B0 0A 30 00 08 		ldi		r3,#1024			; wait up to 1s
                	spcb8:
0105B4 40 23 02 00 		lb		r2,UART_LS[r6]
0105B8 0C 21 40 00 		and		r2,r2,#0x20			; tx not full ?
0105BC 3D 11 10 00 		bne		r2,spcb7
0105C0 46 50 00 22 		lw		r5,Milliseconds
0105C4 02 22 0A 0C 		cmp		r2,r4,r5
0105C8 3D 01 F6 FF 		beq		r2,spcb8
0105CC 82 42 00 1A 		mov		r4,r5
0105D0 95 31 02 00 		subui   r3,r3,#1
0105D4 BD 11 F0 FF 		bne		r3,spcb8
0105D8 3A 01 00 00 		bra		spcabort
                	spcb7:
0105DC 60 13 00 00 		sb		r1,UART_TX[r6]
                	spcabort:
0105E0 57 6F 10 00 	    pop     r6
0105E4 57 5F 10 00 		pop		r5
0105E8 57 4F 10 00 		pop		r4
0105EC 57 3F 10 00 		pop     r3
0105F0 57 2F 10 00 		pop     r2
0105F4 37 FF 01 00 		rtl

                	
                	;-------------------------------------------------
                	; Compute number of characters in recieve buffer.
                	; r4 = number of chars
                	;-------------------------------------------------
                	CharsInRxBuf:
0105F8 43 40 CC 22 		lcu		r4,Uart_rxhead
0105FC 43 30 D0 22 		lcu		r3,Uart_rxtail
010600 02 42 06 2A 		subu	r4,r4,r3
010604 3D 22 0A 00 		bgt		r4,cirxb1
010608 0A 40 00 04 		ldi		r4,#0x200
01060C 02 42 06 28 		addu	r4,r4,r3
010610 43 30 CC 22 		lcu		r3,Uart_rxhead
010614 02 42 06 2A 		subu	r4,r4,r3
                	cirxb1:
010618 37 FF 01 00 		rtl

                	;----------------------------------------------
                	; Get character from rx fifo
                	; If the fifo is empty enough then send an XON
                	;----------------------------------------------
                	;
                	SerialGetChar:
01061C 67 E1 01 00 	    push    r2
010620 E7 E1 01 00 	    push    r3
010624 67 E2 01 00 		push	r4
010628 E7 E2 01 00 	    push    r5
01062C 7C DC FF 00 	    ldi     r5,#UART
010630 0A 50 00 14 
010634 43 30 CC 22 		lcu		r3,Uart_rxhead
010638 43 20 D0 22 		lcu		r2,Uart_rxtail
01063C 02 31 06 0C 		cmp		r3,r2,r3
010640 BD 01 44 00 		beq		r3,sgcfifo1		    ; is there a char available ?
010644 41 11 EA 22 		lbu		r1,Uart_rxfifo[r2]	; get the char from the fifo into r1
010648 14 21 02 00 		addui   r2,r2,#1    		; increment the fifo pointer
01064C 0C 21 FE 03 		and		r2,r2,#$1ff
010650 61 20 D0 22 		sc		r2,Uart_rxtail
010654 40 20 D4 22 		lb		r2,Uart_rxflow		; using flow control ?
010658 3D 01 2E 00 		beq		r2,sgcfifo2
01065C 43 30 E0 22 		lcu		r3,Uart_fon		; enough space in Rx buffer ?
010660 E7 EF 01 00 		push    lr
010664 B9 F2 FF FF 		bsr		CharsInRxBuf
010668 57 FF 11 00 		pop     lr
01066C 02 42 06 0C 		cmp		r4,r4,r3
010670 3D 22 22 00 		bgt		r4,sgcfifo2
010674 60 00 D4 22 		sb		r0,Uart_rxflow		; flow off
010678 40 40 D6 22 		lb		r4,Uart_rxrts
01067C 3D 02 08 00 		beq		r4,sgcfifo3
010680 C0 42 0C 00 		lb		r4,UART_MC[r5]		; set rts bit in MC
010684 0D 42 04 00 		or		r4,r4,#2
010688 E0 42 0C 00 		sb		r4,UART_MC[r5]
                	sgcfifo3:
01068C 40 40 D8 22 		lb		r4,Uart_rxdtr
010690 3D 02 08 00 		beq		r4,sgcfifo4
010694 C0 42 0C 00 		lb		r4,UART_MC[r5]		; set DTR
010698 0D 42 02 00 		or		r4,r4,#1
01069C E0 42 0C 00 		sb		r4,UART_MC[r5]
                	sgcfifo4:
0106A0 40 40 DA 22 		lb		r4,Uart_rxxon
0106A4 3D 02 08 00 		beq		r4,sgcfifo5
0106A8 0A 40 22 00 		ldi		r4,#XON
0106AC 7C DC FF 00 		sb		r4,UART[r5]
0106B0 E0 42 00 14 
                	sgcfifo5:
                	sgcfifo2:					; return with char in r1
0106B4 57 5F 10 00 	    pop     r5
0106B8 57 4F 10 00 		pop		r4
0106BC 57 3F 10 00 		pop     r3
0106C0 57 2F 10 00 		pop     r2
0106C4 37 FF 01 00 		rtl
sgcfifo1:
0106C8 0A 10 FE FF 		ldi		r1,#-1				; no char available
0106CC 57 5F 10 00 		pop     r5
0106D0 57 4F 10 00 		pop		r4
0106D4 57 3F 10 00 		pop     r3
0106D8 57 2F 10 00 		pop     r2
0106DC 3B FF 11 00 		rts

                	
                	;-----------------------------------------
                	; Serial port IRQ
                	;-----------------------------------------
                	;
                	SerialIRQ:
0106E0 FC 00 00 00 	    ldi     sp,#CPU0_IRQ_STACK
0106E4 0A E0 01 10 
0106E8 E7 E0 01 00 		push    r1
0106EC 67 E1 01 00 		push    r2
0106F0 E7 E1 01 00 		push    r3
0106F4 67 E2 01 00 		push	r4
                	
0106F8 7C DC FF 00 	    ldi     r2,#UART
0106FC 0A 20 00 14 
010700 40 11 06 00 	    lb      r1,UART_IS[r2]  ; get interrupt status
010704 BD 20 10 00 		bgt		r1,sirq1		; no interrupt
010708 8C 10 FE 00 		and		r1,r1,#0x7f  	; switch on interrupt type
01070C 86 30 08 00 		cmp		r3,r1,#4
010710 BD 01 1C 00 		beq		r3,srxirq
010714 86 30 18 00 		cmp		r3,r1,#$0C
010718 BD 01 16 00 		beq		r3,stxirq
01071C 86 30 20 00 		cmp		r3,r1,#$10
010720 BD 01 0C 00 		beq		r3,smsirq
                		; unknown IRQ type
                	sirq1:
010724 57 4F 10 00 		pop		r4
010728 57 3F 10 00 		pop     r3
01072C 57 2F 10 00 		pop     r2
010730 57 1F 10 00 		pop     r1
010734 02 E0 3F 6E 		rti
                	
                	; Get the modem status and record it
                	smsirq:
010738 41 11 04 00 	    lbu     r1,UART_MS[r2]
01073C 60 10 C8 22 		sb      r1,Uart_ms
010740 BA FC FF FF 		bra		sirq1
                	
                	stxirq:
010744 3A FC FF FF 		bra		sirq1
                	
                	; Get a character from the uart and store it in the rx fifo
                	srxirq:
                	srxirq1:
010748 41 11 00 00 	    lbu     r1,UART_RX[r2]      ; get the char (clears interrupt)
01074C 41 30 E8 22 	    lbu     r3,Uart_txxon
010750 BD 01 14 00 		beq		r3,srxirq3
010754 86 40 26 00 		cmp		r4,r1,#XOFF
010758 3D 12 08 00 		bne		r4,srxirq2
01075C 0A 10 02 00 		ldi     r1,#1
010760 60 10 CA 22 		sb		r1,Uart_txxonoff
010764 BA 05 00 00 		bra		srxirq5
                	srxirq2:
010768 86 40 22 00 		cmp		r4,r1,#XON
01076C 3D 12 06 00 		bne		r4,srxirq3
010770 60 00 CA 22 		sb		r0,Uart_txxonoff
010774 BA 03 00 00 		bra		srxirq5
                	srxirq3:
010778 60 00 CA 22 		sb		r0,Uart_txxonoff
01077C 43 40 CC 22 		lcu		r4,Uart_rxhead
010780 60 12 EA 22 		sb		r1,Uart_rxfifo[r4]  ; store in buffer
010784 14 42 02 00 		addui   r4,r4,#1
010788 0C 42 FE 03 		and		r4,r4,#$1ff
01078C 61 40 CC 22 		sc		r4,Uart_rxhead
                	srxirq5:
010790 40 11 02 00 	    lb      r1,UART_LS[r2]      ; check for another ready character
010794 8C 10 02 00 		and		r1,r1,#1            ; check rxfull bit
010798 BD 10 D8 FF 		bne		r1,srxirq1          ; loop back for another character
01079C 40 10 D4 22 		lb		r1,Uart_rxflow		; are we using flow controls?
0107A0 BD 10 2E 00 		bne		r1,srxirq8
0107A4 E7 EF 01 00 		push    lr
0107A8 39 CA FF FF 		bsr		CharsInRxBuf
0107AC 57 FF 11 00 		pop     lr
0107B0 40 10 DC 22 		lb		r1,Uart_foff
0107B4 02 12 02 0C 		cmp		r1,r4,r1
0107B8 BD 40 22 00 		blt		r1,srxirq8
0107BC 0A 10 02 00 		ldi		r1,#1
0107C0 60 10 D4 22 		sb		r1,Uart_rxflow
0107C4 40 10 D6 22 		lb		r1,Uart_rxrts
0107C8 BD 00 08 00 		beq		r1,srxirq6
0107CC 40 11 0C 00 		lb		r1,UART_MC[r2]
0107D0 8C 10 FA 01 		and		r1,r1,#$FD		; turn off RTS
0107D4 60 11 0C 00 		sb		r1,UART_MC[r2]
                	srxirq6:
0107D8 40 10 D8 22 		lb		r1,Uart_rxdtr
0107DC BD 00 08 00 		beq		r1,srxirq7
0107E0 40 11 0C 00 		lb		r1,UART_MC[r2]
0107E4 8C 10 FC 01 		and		r1,r1,#$FE		; turn off DTR
0107E8 60 11 0C 00 		sb		r1,UART_MC[r2]
                	srxirq7:
0107EC 40 10 DA 22 		lb		r1,Uart_rxxon
0107F0 BD 00 06 00 		beq		r1,srxirq8
0107F4 0A 10 26 00 		ldi		r1,#XOFF
0107F8 60 11 00 00 		sb		r1,UART_TX[r2]
                	srxirq8:
0107FC 3A E5 FF FF 		bra		sirq1
                	
                	
                	;------------------------------------------------------------------------------
                	; Video BIOS
                	; Video Exception #410
                	;
                	; Function in R6
                	; 0x02 = Set Cursor Position	r1 = row, r2 = col 
                	; 0x03 = Get Cursor position	returns r1 = row, r2 = col
                	; 0x06 = Scroll screen up
                	; 0x09 = Display character+attribute, r1=char, r2=attrib, r3=#times
                	; 0x0A = Display character at cursor position, r1 = char, r2 = # times
                	; 0x0B = Set background color, r1 = color
                	; 0x0C = Display Pixel r1 = x, r2 = y, r3 = color
                	; 0x0D = Get pixel  r1 = x, r2 = y
                	; 0x0E = Teletype output, r1 = char
                	; 0x14 = Display String	r1 = pointer to string
                	; 0x15 = Display number r1 = number, r2 = # digits
                	; 0x16 = Display String + CRLF   r1 = pointer to string
                	; 0x17 = Display Word r1 as hex = word
                	; 0x18 = Display Half word as hex r1 = half word
                	; 0x19 = Display Charr char in hex r1 = char
                	; 0x1A = Display Byte in hex r1 = byte
                	; 0x1B = Display String -wide characters r1=pointer to string
                	; 0x1C = Display hexidecimal number, r1 = number, r2 = # of digits
                	; 0x20 = Convert ascii to screen
                	; 0x21 = Convert screen to ascii
                	;------------------------------------------------------------------------------
                	
                	MAX_VIDEO_BIOS_CALL = 0x21
                	
                	    code
                	    align   2                	
                	VideoBIOS_FuncTable:
010800 00 00       	    dc      0            ; 0x00
010802 00 00       	    dc      0
010804 70 10       	    dc      SetCursorPos ; 0x02
010806 98 10       	    dc      GetCursorPos ; 0x03
010808 00 00       	    dc      0
01080A 00 00       	    dc      0
01080C 04 0F       	    dc      ScrollUp     ; 0x06
01080E 00 00       	    dc      0
010810 00 00       	    dc      0
010812 E0 08       	    dc      DispCharAttr ; 0x09
010814 00 00       	    dc      0
010816 48 01       	    dc      SetBkColor   ; 0x0B
010818 49 01       	    dc      SetPixel     ; 0x0C
01081A 4A 01       	    dc      GetPixel     ; 0x0D
01081C A0 0C       	    dc      DisplayChar  ; 0x0E
01081E 00 00       	    dc      0
010820 00 00       	    dc      0
010822 00 00       	    dc      0
010824 00 00       	    dc      0
010826 00 00       	    dc      0
010828 50 0A       	    dc      DisplayString  ; 0x14
01082A 0C 0B       	    dc      PRTNUM         ; 0x15
01082C CC 0A       	    dc      DisplayStringCRLF    ; 0x16
01082E D0 09       	    dc      DisplayWord    ; 0x17
010830 E4 09       	    dc      DisplayHalf    ; 0x18
010832 F8 09       	    dc      DisplayCharHex ; 0x19
010834 0C 0A       	    dc      DisplayByte    ; 0x1A
010836 80 0A       	    dc      DisplayString16  ; 0x1B
010838 00 00       	    dc      0
01083A 00 00       	    dc      0
01083C 00 00       	    dc      0
01083E 00 00       	    dc      0
010840 F0 0F       	    dc      AsciiToScreen    ; 0x20
010842 38 10       	    dc      ScreenToAscii    ; 0x21
                	    
                	    
                	    
                	                    
                	    align   4                	
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	LockVideoBIOS:
010844 E7 EF 01 00 	    push    lr
010848 E7 E0 01 00 	    push    r1
01084C FC 00 00 00 	    ldi     r1,#VideoBIOS_sema
010850 0A 10 10 A8 
010854 B9 9B 07 00 	    bsr     LockSema
010858 57 1F 10 00 	    pop     r1
01085C 3B FF 11 00 	    rts
UnlockVideoBIOS:
010860 E7 EF 01 00 	    push    lr
010864 E7 E0 01 00 	    push    r1
010868 FC 00 00 00 	    lea     r1,VideoBIOS_sema
01086C 47 10 10 A8 
010870 39 A1 07 00 	    bsr     UnlockSema
010874 57 1F 10 00 	    pop     r1
010878 3B FF 11 00 	    rts

                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	VideoBIOSCall:
01087C 46 EC 11 05 	    lw      sp,TCB_BIOS_Stack[tr]
010880 E7 EF 01 00 	    push    lr
010884 39 F8 FF FF 	    bsr     LockVideoBIOS
010888 67 E5 01 00 	    push    r10
01088C 02 A0 12 3E 	    mfspr   r10,epc             ; update the return address
010890 14 A5 08 00 	    addui   r10,r10,#4
010894 02 05 12 3C 	    mtspr   epc,r10
010898 06 A3 42 00 	    cmp     r10,r6,#MAX_VIDEO_BIOS_CALL
01089C 3D 25 1A 00 	    bgt     r10,.0003
0108A0 7C 01 00 00 	    lea     r10,VideoBIOS_FuncTable
0108A4 47 A0 00 10 
0108A8 4B A5 4C 00 	    lcu     r10,[r10+r6*2]
0108AC 3D 05 16 00 	    beq     r10,.0005
0108B0 7C 01 00 00 	    or      r10,r10,#VideoBIOSCall & 0xFFFFFFFFFFFF0000    ; recover high order bits
0108B4 0D A5 00 00 
0108B8 3C F5 01 00 	    jsr     [r10]
                	.0004:
0108BC 3F 00 00 00 	    nop
0108C0 39 F4 FF FF 	    bsr     UnlockVideoBIOS
0108C4 57 AF 10 00 	    pop     r10
0108C8 57 FF 11 00 	    pop     lr
0108CC 02 E0 3D 6E 	    rte
                	.0003:
0108D0 0A 20 02 00 	    ldi     r2,#E_BadFuncno
0108D4 3A FD FF FF 	    bra     .0004
                	.0005:
0108D8 0A 20 06 00 	    ldi     r2,#E_Unsupported
0108DC 3A FC FF FF 	    bra     .0004
                	
                	;------------------------------------------------------------------------------
                	; Display a character with a specific attribute.
                	;------------------------------------------------------------------------------
                	
                	DispCharAttr:
0108E0 E7 EF 01 00 	    push    lr
0108E4 E7 E1 01 00 	    push    r3
0108E8 67 E2 01 00 	    push    r4
0108EC E7 E2 01 00 	    push    r5
0108F0 82 40 00 1A 	    mov     r4,r1
0108F4 B9 09 01 00 	    bsr     GetJCBPtr
0108F8 82 50 00 1A 	    mov     r5,r1
0108FC C4 32 28 08 	    lh      r3,JCB_NormAttr[r5]
010900 E7 E1 01 00 	    push    r3
010904 E2 22 28 08 	    sh      r2,JCB_NormAttr[r5]
010908 02 12 00 1A 	    mov     r1,r4
01090C B9 A7 01 00 	    bsr     OutChar
010910 57 3F 10 00 	    pop     r3
010914 E2 32 28 08 	    sh      r3,JCB_NormAttr[r5]    ; restore normal attribute
010918 57 5F 10 00 	    pop     r5
01091C 57 4F 10 00 	    pop     r4
010920 57 3F 10 00 	    pop     r3
010924 3B FF 11 00 	    rts

                	
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	                                                                               
                	HomeCursor:
010928 E7 EF 01 00 	    push    lr
01092C E7 E0 01 00 	    push    r1
010930 67 E1 01 00 	    push    r2
010934 B9 01 01 00 	    bsr     GetJCBPtr
010938 E0 00 18 08 	    sb      r0,JCB_CursorRow[r1]
01093C E0 00 1A 08 	    sb      r0,JCB_CursorCol[r1]
010940 7C C0 00 00 	    lw      r2,IOFocusNdx
010944 46 20 50 00 
010948 82 10 04 0C 	    cmp     r1,r1,r2
01094C BD 10 06 00 	    bne     r1,.0001
010950 7C DA FF 00 		sc	    r0,TEXTREG+TEXT_CURPOS+$FFD00000
010954 61 00 58 00 
                	.0001:
010958 57 2F 10 00 	    pop     r2
01095C 57 1F 10 00 	    pop     r1
010960 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	                                                                               
                	ClearScreen:
010964 E7 EF 01 00 	    push    lr
010968 E7 E0 01 00 	    push	r1
01096C 67 E1 01 00 	    push    r2
010970 E7 E1 01 00 	    push    r3
010974 67 E2 01 00 	    push    r4
010978 7C DA FF 00 		lbu	    r1,TEXTREG+TEXT_COLS+$FFD00000
01097C 41 10 00 00 
010980 7C DA FF 00 		lbu	    r2,TEXTREG+TEXT_ROWS+$FFD00000
010984 41 20 08 00 
010988 02 41 02 2E 		mulu	r4,r2,r1
01098C B9 41 00 00 		bsr     GetScreenLocation
010990 82 30 00 1A 		mov     r3,r1
010994 0A 10 40 00 		ldi		r1,#' '
010998 39 CB 00 00 		bsr		AsciiToScreen
01099C E7 E0 01 00 		push    r1
0109A0 39 41 00 00 		bsr     GetCurrAttr
0109A4 82 20 00 1A 		mov     r2,r1
0109A8 57 1F 10 00 		pop     r1
0109AC 82 10 04 1A 		or		r1,r1,r2
                	.cs1:
0109B0 EA 11 88 00 	    sh	    r1,[r3+r4*4]
0109B4 15 42 02 00 	    subui   r4,r4,#1
0109B8 3D 12 FC FF 		bne	    r4,.cs1
0109BC 57 4F 10 00 		pop     r4
0109C0 57 3F 10 00 		pop     r3
0109C4 57 2F 10 00 		pop     r2
0109C8 57 1F 10 00 		pop     r1
0109CC 3B FF 11 00 	    rts

                	;------------------------------------------------------------------------------
                	; Display the word in r1
                	;------------------------------------------------------------------------------
                	
                	DisplayWord:
0109D0 E7 EF 01 00 	    push    lr
0109D4 82 10 40 74 		rol	    r1,r1,#32
0109D8 B9 01 00 00 		bsr		DisplayHalf
0109DC 82 10 40 74 		rol	    r1,r1,#32
0109E0 57 FF 11 00 	    pop     lr
                	
                	;------------------------------------------------------------------------------
                	; Display the half-word in r1
                	;------------------------------------------------------------------------------
                	
                	DisplayHalf:
0109E4 E7 EF 01 00 	    push    lr
0109E8 82 10 20 76 		ror		r1,r1,#16
0109EC B9 01 00 00 		bsr		DisplayCharHex
0109F0 82 10 20 74 		rol		r1,r1,#16
0109F4 57 FF 11 00 	    pop     lr
                	
                	;------------------------------------------------------------------------------
                	; Display the char in r1
                	;------------------------------------------------------------------------------
                	
                	DisplayCharHex:
0109F8 E7 EF 01 00 	    push    lr
0109FC 82 10 10 76 		ror		r1,r1,#8
010A00 B9 01 00 00 		bsr		DisplayByte
010A04 82 10 10 74 		rol		r1,r1,#8
010A08 57 FF 11 00 	    pop     lr
                	
                	;------------------------------------------------------------------------------
                	; Display the byte in r1
                	;------------------------------------------------------------------------------
                	
                	DisplayByte:
010A0C E7 EF 01 00 	    push    lr
010A10 82 10 08 76 		ror		r1,r1,#4
010A14 B9 01 00 00 		bsr		DisplayNybble
010A18 82 10 08 74 		rol		r1,r1,#4
010A1C 57 FF 11 00 		pop     lr
                	 
                	;------------------------------------------------------------------------------
                	; Display nybble in r1
                	;------------------------------------------------------------------------------
                	
                	DisplayNybble:
010A20 E7 EF 01 00 	    push    lr
010A24 E7 E0 01 00 		push	r1
010A28 67 E1 01 00 		push    r2
010A2C 8C 10 1E 00 		and		r1,r1,#$0F
010A30 94 10 60 00 		addui	r1,r1,#'0'
010A34 96 20 74 00 		cmpu	r2,r1,#'9'+1
010A38 3D 41 04 00 		blt		r2,.0001
010A3C 94 10 0E 00 		addui	r1,r1,#7
                	.0001:
010A40 39 81 01 00 		bsr		OutChar
010A44 57 2F 10 00 		pop     r2
010A48 57 1F 10 00 		pop		r1
010A4C 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Display a string pointer to string in r1.
                	;------------------------------------------------------------------------------
                	
                	DisplayString:
010A50 E7 EF 01 00 	    push    lr
010A54 E7 E0 01 00 		push	r1
010A58 67 E1 01 00 		push    r2
010A5C 82 20 00 1A 		mov		r2,r1
                	.dm2:
010A60 41 11 00 00 		lbu		r1,[r2]
010A64 14 21 02 00 		addui   r2,r2,#1	; increment text pointer
010A68 BD 00 06 00 		beq		r1,.dm1
010A6C B9 7B 01 00 		bsr		OutChar
010A70 3A FE FF FF 		bra		.dm2
                	.dm1:
010A74 57 2F 10 00 		pop		r2
010A78 57 1F 10 00 	    pop     r1
010A7C 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Display a string pointer to string in r1 using 16 bit characters.
                	;------------------------------------------------------------------------------
                	
                	DisplayString16:
010A80 E7 EF 01 00 	    push    lr
010A84 E7 E0 01 00 		push	r1
010A88 67 E1 01 00 		push    r2
010A8C 0A 20 6E 00 		ldi     r2,#55
010A90 7C DC FF 00 		sb      r2,LEDS
010A94 60 20 00 0C 
010A98 82 20 00 1A 		mov		r2,r1
                	.dm2:
010A9C 43 11 00 00 		lcu		r1,[r2]
010AA0 14 21 04 00 		addui   r2,r2,#2	; increment text pointer
010AA4 BD 00 0E 00 		beq		r1,.dm1
010AA8 8C 10 FE 01 		and     r1,r1,#$FF
010AAC B9 73 01 00 		bsr		OutChar
010AB0 0A 10 70 00 		ldi     r1,#56
010AB4 7C DC FF 00 		sb      r1,LEDS
010AB8 60 10 00 0C 
010ABC 3A FC FF FF 		bra		.dm2
                	.dm1:
010AC0 57 2F 10 00 		pop		r2
010AC4 57 1F 10 00 	    pop     r1
010AC8 3B FF 11 00 		rts

                	DisplayStringCRLF:
010ACC E7 EF 01 00 	    push    lr
010AD0 39 F0 FF FF 		bsr		DisplayString
010AD4 3A 01 00 00 		bra     CRLF1
                	OutCRLF:
                	CRLF:
010AD8 E7 EF 01 00 	    push    lr
                	CRLF1:
010ADC E7 E0 01 00 		push	r1
010AE0 0A 10 1A 00 		ldi		r1,#CR
010AE4 B9 6C 01 00 		bsr		OutChar
010AE8 0A 10 14 00 		ldi		r1,#LF
010AEC B9 6B 01 00 		bsr		OutChar
010AF0 57 1F 10 00 		pop		r1
010AF4 3B FF 11 00 		rts

                	
                	DispCharQ:
010AF8 E7 EF 01 00 	    push    lr
010AFC B9 9E 00 00 		bsr		AsciiToScreen
010B00 E1 11 00 00 		sc		r1,[r3]
010B04 84 31 08 00 		add		r3,r3,#4
010B08 3B FF 11 00 	    rts

                	;------------------------------------------------------------------------------
                	; 'PRTNUM' prints the 64 bit number in r1, leading blanks are added if
                	; needed to pad the number of spaces to the number in r2.
                	; However, if the number of digits is larger than the no. in
                	; r2, all digits are printed anyway. Negative sign is also
                	; printed and counted in, positive sign is not.
                	;
                	; r1 = number to print
                	; r2 = number of digits
                	; Register Usage
                	;	r5 = number of padding spaces
                	;------------------------------------------------------------------------------
                	PRTNUM:
010B0C E7 EF 01 00 	    push    lr
010B10 E7 E1 01 00 		push	r3
010B14 E7 E2 01 00 		push	r5
010B18 67 E3 01 00 		push	r6
010B1C E7 E3 01 00 		push	r7
010B20 0A 70 78 22 		ldi		r7,#NUMWKA	; r7 = pointer to numeric work area
010B24 82 60 00 1A 		mov		r6,r1		; save number for later
010B28 02 51 00 1A 		mov		r5,r2		; r5 = min number of chars
010B2C BD 30 06 00 		bge		r1,PN2			; is it negative? if not
010B30 02 10 02 2A 		subu	r1,r0,r1	; else make it positive
010B34 95 52 02 00 		subui   r5,r5,#1	; one less for width count
                	PN2:
                	;	ldi		r3,#10
                	PN1:
010B38 89 20 14 00 		mod		r2,r1,#10	; r2 = r1 mod 10
010B3C 88 10 14 00 		div		r1,r1,#10	; r1 /= 10 divide by 10
010B40 04 21 60 00 		add		r2,r2,#'0'	; convert remainder to ascii
010B44 E0 23 00 00 		sb		r2,[r7]		; and store in buffer
010B48 94 73 02 00 		addui   r7,r7,#1
010B4C 95 52 02 00 		subui   r5,r5,#1	; decrement width
010B50 BD 10 F4 FF 		bne		r1,PN1
                	PN6:
010B54 BD 52 08 00 		ble		r5,PN4		; test pad count, skip padding if not needed
                	PN3:
010B58 39 BA 00 00 		bsr     DisplaySpace	; display the required leading spaces
010B5C 95 52 02 00 		subui   r5,r5,#1
010B60 BD 12 FC FF 		bne		r5,PN3
                	PN4:
010B64 3D 33 06 00 		bge		r6,PN5		; is number negative?
010B68 0A 10 5A 00 		ldi		r1,#'-'		; if so, display the sign
010B6C B9 5B 01 00 		bsr		OutChar
                	PN5:
010B70 95 73 02 00 	    subui   r7,r7,#1
010B74 C0 13 00 00 		lb		r1,[r7]		; now unstack the digits and display
010B78 39 5A 01 00 		bsr		OutChar
010B7C 86 13 78 22 		cmp		r1,r7,#NUMWKA
010B80 BD 20 F8 FF 		bgt		r1,PN5
                	PNRET:
010B84 57 7F 10 00 		pop		r7
010B88 57 6F 10 00 		pop		r6
010B8C 57 5F 10 00 		pop		r5
010B90 57 3F 10 00 		pop		r3
010B94 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Returns:
                	; r1 = pointer to screen from JCB. This may be either the real screen or
                	;      the virtual screen buffer.
                	;------------------------------------------------------------------------------
                	
                	GetScreenLocation:
010B98 E7 EF 01 00 	    push    lr
010B9C B9 B4 00 00 	    bsr     GetJCBPtr
010BA0 C6 10 D0 07 	    lw      r1,JCB_pVidMem[r1]
010BA4 3B FF 11 00 		rts

                	GetCurrAttr:
010BA8 E7 EF 01 00 	    push    lr
010BAC B9 B2 00 00 	    bsr     GetJCBPtr
010BB0 C5 10 28 08 		lhu		r1,JCB_NormAttr[r1]
010BB4 3B FF 11 00 		rts
SetCurrAttr:
010BB8 E7 EF 01 00 	    push    lr
010BBC 67 E1 01 00 	    push    r2
010BC0 82 20 00 1A 	    mov     r2,r1
010BC4 B9 AF 00 00 	    bsr     GetJCBPtr
010BC8 E2 20 28 08 	    sh      r2,JCB_NormAttr[r1]
010BCC 57 2F 10 00 	    pop     r2
010BD0 3B FF 11 00 	    rts

                	;------------------------------------------------------------------------------
                	; Update the cursor position in the text controller.
                	;------------------------------------------------------------------------------
                	
                	UpdateCursorPos:
010BD4 E7 EF 01 00 	    push    lr
010BD8 E7 E0 01 00 		push	r1
010BDC 67 E1 01 00 		push    r2
010BE0 E7 E1 01 00 		push    r3
010BE4 67 E2 01 00 		push    r4
010BE8 39 AB 00 00 		bsr     GetJCBPtr
010BEC 7C C0 00 00 		lw      r3,IOFocusNdx
010BF0 46 30 50 00 
010BF4 82 31 02 0C 		cmp     r3,r3,r1
010BF8 BD 11 16 00 		bne     r3,.0001
010BFC C1 30 18 08 		lbu		r3,JCB_CursorRow[r1]
010C00 8C 31 7E 00 		and		r3,r3,#$3f
010C04 7C DA FF 00 		lbu	    r2,TEXTREG+TEXT_COLS+$FFD00000
010C08 41 20 00 00 
010C0C 02 21 06 2E 		mulu	r2,r2,r3
010C10 C1 30 1A 08 		lbu		r3,JCB_CursorCol[r1]
010C14 8C 31 FE 00 		and		r3,r3,#$7f
010C18 02 21 06 28 		addu	r2,r2,r3
010C1C 7C DA FF 00 		sc	    r2,TEXTREG+TEXT_CURPOS+$FFD00000
010C20 61 20 58 00 
                	.0001:
010C24 57 4F 10 00 		pop		r4
010C28 57 3F 10 00 		pop     r3
010C2C 57 2F 10 00 	    pop     r2
010C30 57 1F 10 00 	    pop     r1
010C34 3B FF 11 00 	    rts
	
                	;------------------------------------------------------------------------------
                	; Compute the screen address given the cursor row and column. While we're at
                	; it update the cursor position in the text controller.
                	;------------------------------------------------------------------------------
                	
                	CalcScreenLoc:
010C38 E7 EF 01 00 	    push    lr
010C3C 67 E1 01 00 		push	r2
010C40 E7 E1 01 00 		push    r3
010C44 67 E2 01 00 		push    r4
010C48 39 9F 00 00 		bsr     GetJCBPtr
010C4C C1 30 18 08 		lbu		r3,JCB_CursorRow[r1]
010C50 8C 31 7E 00 		and		r3,r3,#$3f
010C54 7C DA FF 00 		lbu	    r2,TEXTREG+TEXT_COLS+$FFD00000
010C58 41 20 00 00 
010C5C 02 21 06 2E 		mulu	r2,r2,r3
010C60 C1 30 1A 08 		lbu		r3,JCB_CursorCol[r1]
010C64 8C 31 FE 00 		and		r3,r3,#$7f
010C68 02 21 06 28 		addu	r2,r2,r3
010C6C 7C C0 00 00 	    lw      r3,IOFocusNdx
010C70 46 30 50 00 
010C74 82 30 06 0C 	    cmp     r3,r1,r3
010C78 BD 11 06 00 	    bne     r3,.0001
010C7C 7C DA FF 00 		sc	    r2,TEXTREG+TEXT_CURPOS+$FFD00000
010C80 61 20 58 00 
                	.0001:
010C84 B9 E2 FF FF 		bsr		GetScreenLocation
010C88 02 21 04 70 		asl		r2,r2,#2
010C8C 82 10 04 28 		addu	r1,r1,r2
010C90 57 4F 10 00 		pop		r4
010C94 57 3F 10 00 		pop     r3
010C98 57 2F 10 00 	    pop     r2
010C9C 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Display a character on-screen.
                	;------------------------------------------------------------------------------
                	
                	DisplayChar:
010CA0 E7 EF 01 00 	    push    lr
010CA4 E7 E0 01 00 		push	r1
010CA8 67 E1 01 00 	    push    r2
010CAC E7 E1 01 00 	    push    r3
010CB0 67 E2 01 00 	    push    r4
010CB4 E7 E2 01 00 	    push    r5
010CB8 8C 10 FE 01 		and		r1,r1,#$FF
010CBC 86 20 1A 00 		cmp		r2,r1,#'\r'
010CC0 3D 01 54 00 		beq		r2,.docr
010CC4 86 20 22 01 		cmp		r2,r1,#$91		; cursor right ?
010CC8 3D 01 58 00 		beq		r2,.doCursorRight
010CCC 86 20 20 01 		cmp		r2,r1,#$90		; cursor up ?
010CD0 3D 01 64 00 		beq		r2,.doCursorUp
010CD4 86 20 26 01 		cmp		r2,r1,#$93		; cursor left ?
010CD8 3D 01 6C 00 		beq		r2,.doCursorLeft
010CDC 86 20 24 01 		cmp		r2,r1,#$92		; cursor down ?
010CE0 3D 01 74 00 		beq		r2,.doCursorDown
010CE4 86 20 28 01 		cmp		r2,r1,#$94		; cursor home ?
010CE8 3D 01 7E 00 		beq		r2,.doCursorHome
010CEC 86 20 32 01 		cmp		r2,r1,#$99		; delete ?
010CF0 3D 01 88 00 		beq		r2,.doDelete
010CF4 86 20 10 00 		cmp		r2,r1,#CTRLH	; backspace ?
010CF8 3D 01 8E 00 		beq		r2,.doBackspace
010CFC 86 20 14 00 		cmp		r2,r1,#'\n'	; line feed ?
010D00 3D 01 B8 00 		beq		r2,.doLinefeed
010D04 86 20 12 00 		cmp     r2,r1,#'\t'
010D08 3D 01 24 00 		beq     r2,.doTab
010D0C 82 20 00 1A 		mov		r2,r1
010D10 39 E5 FF FF 		bsr		CalcScreenLoc
010D14 82 30 00 1A 		mov		r3,r1
010D18 02 11 00 1A 		mov		r1,r2
010D1C B9 5A 00 00 		bsr		AsciiToScreen
010D20 82 20 00 1A 		mov		r2,r1
010D24 B9 D0 FF FF 		bsr		GetCurrAttr
010D28 82 10 04 1A 		or		r1,r1,r2
010D2C E2 11 00 00 		sh	    r1,[r3]
010D30 39 29 00 00 		bsr		IncCursorPos
                	.dcx4:
010D34 57 5F 10 00 	    pop     r5
010D38 57 4F 10 00 		pop		r4
010D3C 57 3F 10 00 	    pop     r3
010D40 57 2F 10 00 	    pop     r2
010D44 57 1F 10 00 	    pop     r1
010D48 57 FF 11 00 	    pop     lr
010D4C 37 FF 01 00 		rtl
.doTab:
010D50 0A 10 40 00 	    ldi     r1,#' '
010D54 B9 E9 FF FF 	    bsr     DisplayChar
010D58 39 E9 FF FF 	    bsr     DisplayChar
010D5C B9 E8 FF FF 	    bsr     DisplayChar
010D60 39 E8 FF FF 	    bsr     DisplayChar
010D64 3A FA FF FF 	    bra     .dcx4
                	.docr:
010D68 39 7B 00 00 	    bsr     GetJCBPtr
010D6C E0 00 1A 08 		sb		r0,JCB_CursorCol[r1]
010D70 B9 CC FF FF 		bsr		UpdateCursorPos
010D74 3A F8 FF FF 		bra     .dcx4
                	.doCursorRight:
010D78 39 79 00 00 	    bsr     GetJCBPtr
010D7C C1 30 1A 08 		lbu		r3,JCB_CursorCol[r1]
010D80 84 31 02 00 		add		r3,r3,#1
010D84 96 21 A8 00 		cmpu	r2,r3,#TXTCOLS
010D88 3D 31 04 00 		bge		r2,.dcx7
010D8C E0 30 1A 08 		sb		r3,JCB_CursorCol[r1]
                	.dcx7:
010D90 B9 C8 FF FF 		bsr		UpdateCursorPos
010D94 3A F4 FF FF 		bra     .dcx4
                	.doCursorUp:
010D98 39 75 00 00 	    bsr     GetJCBPtr
010D9C C1 30 18 08 		lbu		r3,JCB_CursorRow[r1]
010DA0 BD 01 F8 FF 		beq		r3,.dcx7
010DA4 95 31 02 00 		subui	r3,r3,#1
010DA8 E0 30 18 08 		sb		r3,JCB_CursorRow[r1]
010DAC BA FC FF FF 		bra		.dcx7
                	.doCursorLeft:
010DB0 39 72 00 00 	    bsr     GetJCBPtr
010DB4 C1 30 1A 08 		lbu		r3,JCB_CursorCol[r1]
010DB8 BD 01 EC FF 		beq		r3,.dcx7
010DBC 95 31 02 00 		subui	r3,r3,#1
010DC0 E0 30 1A 08 		sb		r3,JCB_CursorCol[r1]
010DC4 BA F9 FF FF 		bra		.dcx7
                	.doCursorDown:
010DC8 39 6F 00 00 	    bsr     GetJCBPtr
010DCC C1 30 18 08 		lbu		r3,JCB_CursorRow[r1]
010DD0 94 31 02 00 		addui	r3,r3,#1
010DD4 96 21 3E 00 		cmpu	r2,r3,#TXTROWS
010DD8 3D 31 DC FF 		bge		r2,.dcx7
010DDC E0 30 18 08 		sb		r3,JCB_CursorRow[r1]
010DE0 3A F6 FF FF 		bra		.dcx7
                	.doCursorHome:
010DE4 B9 6B 00 00 	    bsr     GetJCBPtr
010DE8 C1 30 1A 08 		lbu		r3,JCB_CursorCol[r1]
010DEC BD 01 06 00 		beq		r3,.dcx12
010DF0 E0 00 1A 08 		sb		r0,JCB_CursorCol[r1]
010DF4 BA F3 FF FF 		bra		.dcx7
                	.dcx12:
010DF8 E0 00 18 08 		sb		r0,JCB_CursorRow[r1]
010DFC BA F2 FF FF 		bra		.dcx7
                	.doDelete:
010E00 39 C7 FF FF 		bsr		CalcScreenLoc
010E04 82 30 00 1A 		mov		r3,r1
010E08 39 67 00 00 	    bsr     GetJCBPtr
010E0C C1 50 1A 08 		lbu		r5,JCB_CursorCol[r1]
010E10 BA 05 00 00 		bra		.dcx5
                	.doBackspace:
010E14 B9 65 00 00 	    bsr     GetJCBPtr
010E18 C1 30 1A 08 		lbu		r3,JCB_CursorCol[r1]
010E1C BD 01 8C FF 		beq		r3,.dcx4
010E20 95 31 02 00 		subui	r3,r3,#1
010E24 E0 30 1A 08 		sb		r3,JCB_CursorCol[r1]
010E28 E7 E0 01 00 		push    r1
010E2C B9 C1 FF FF 		bsr		CalcScreenLoc
010E30 82 30 00 1A 		mov		r3,r1
010E34 57 1F 10 00 		pop     r1
010E38 C1 50 1A 08 		lbu		r5,JCB_CursorCol[r1]
                	.dcx5:
010E3C C5 21 08 00 		lhu	    r2,4[r3]
010E40 E2 21 00 00 		sh	    r2,[r3]
010E44 94 31 08 00 		addui	r3,r3,#4
010E48 94 52 02 00 		addui	r5,r5,#1
010E4C 96 22 A8 00 		cmpu	r2,r5,#TXTCOLS
010E50 3D 41 F6 FF 		blt		r2,.dcx5
010E54 0A 10 40 00 		ldi		r1,#' '
010E58 39 33 00 00 		bsr		AsciiToScreen
010E5C 45 20 50 22 		lhu		r2,NormAttr
010E60 82 10 04 1A 		or		r1,r1,r2
010E64 95 31 08 00 		subui	r3,r3,#4
010E68 E2 11 00 00 		sh	    r1,[r3]
010E6C 3A D9 FF FF 		bra		.dcx4
                	.doLinefeed:
010E70 B9 07 00 00 		bsr		IncCursorRow
010E74 3A D8 FF FF 		bra		.dcx4
                	
                	
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	IncCursorPos:
010E78 E7 EF 01 00 	    push    lr
010E7C E7 E0 01 00 		push	r1
010E80 67 E1 01 00 	    push    r2
010E84 E7 E1 01 00 	    push    r3
010E88 67 E2 01 00 	    push    r4
010E8C B9 56 00 00 	    bsr     GetJCBPtr
010E90 C1 30 1A 08 		lbu		r3,JCB_CursorCol[r1]
010E94 94 31 02 00 		addui	r3,r3,#1
010E98 E0 30 1A 08 		sb		r3,JCB_CursorCol[r1]
010E9C 96 21 A8 00 		cmpu	r2,r3,#TXTCOLS
010EA0 3D 41 22 00 		blt		r2,icc1
010EA4 E0 00 1A 08 		sb		r0,JCB_CursorCol[r1]
010EA8 BA 03 00 00 		bra		icr1
                	IncCursorRow:
010EAC E7 EF 01 00 	    push    lr
010EB0 E7 E0 01 00 		push	r1
010EB4 67 E1 01 00 	    push    r2
010EB8 E7 E1 01 00 	    push    r3
010EBC 67 E2 01 00 	    push    r4
010EC0 39 50 00 00 	    bsr     GetJCBPtr
                	icr1:
010EC4 C1 30 18 08 		lbu		r3,JCB_CursorRow[r1]
010EC8 94 31 02 00 		addui	r3,r3,#1
010ECC E0 30 18 08 		sb		r3,JCB_CursorRow[r1]
010ED0 96 21 3E 00 		cmpu	r2,r3,#TXTROWS
010ED4 3D 41 08 00 		blt		r2,icc1
010ED8 0A 20 3C 00 		ldi		r2,#TXTROWS-1
010EDC E0 20 18 08 		sb		r2,JCB_CursorRow[r1]
010EE0 B9 04 00 00 		bsr		ScrollUp
                	icc1:
010EE4 3F 00 00 00 	    nop
010EE8 3F 00 00 00 	    nop
010EEC 39 9D FF FF 		bsr		UpdateCursorPos
010EF0 57 4F 10 00 		pop		r4
010EF4 57 3F 10 00 		pop     r3
010EF8 57 2F 10 00 	    pop     r2
010EFC 57 1F 10 00 	    pop     r1
010F00 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	ScrollUp:
010F04 E7 EF 01 00 	    push    lr
010F08 E7 E0 01 00 		push	r1
010F0C 67 E1 01 00 	    push    r2
010F10 E7 E1 01 00 	    push    r3
010F14 E7 E2 01 00 	    push    r5
010F18 67 E3 01 00 		push	r6
010F1C 7C DA FF 00 		lbu	    r1,TEXTREG+TEXT_COLS+$FFD00000
010F20 41 10 00 00 
010F24 7C DA FF 00 		lbu	    r2,TEXTREG+TEXT_ROWS+$FFD00000
010F28 41 20 08 00 
010F2C 15 21 02 00 		subui	r2,r2,#1
010F30 82 60 04 2E 		mulu	r6,r1,r2
010F34 B9 8C FF FF 		bsr     GetScreenLocation
010F38 82 20 00 1A 		mov     r2,r1
010F3C 14 21 A0 02 		addui   r2,r2,#TXTCOLS*4
010F40 0A 30 00 00 		ldi		r3,#0
                	.0001:
010F44 4C 51 86 00 		lh	    r5,[r2+r3*4]
010F48 EA 50 86 00 		sh	    r5,[r1+r3*4]
010F4C 94 31 02 00 		addui	r3,r3,#1
010F50 15 63 02 00 		subui   r6,r6,#1
010F54 3D 13 F8 FF 		bne	    r6,.0001
010F58 7C DA FF 00 		lbu	    r1,TEXTREG+TEXT_ROWS+$FFD00000
010F5C 41 10 08 00 
010F60 95 10 02 00 		subui	r1,r1,#1
010F64 39 04 00 00 		bsr		BlankLine
010F68 57 6F 10 00 		pop		r6
010F6C 57 5F 10 00 		pop		r5
010F70 57 3F 10 00 	    pop     r3
010F74 57 2F 10 00 	    pop     r2
010F78 57 1F 10 00 	    pop     r1
010F7C 57 FF 11 00 		pop     lr
010F80 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; Blank out a line on the screen.
                	;
                	; Parameters:
                	;	r1 = line number to blank out
                	;------------------------------------------------------------------------------
                	
                	BlankLine:
010F84 E7 EF 01 00 	    push    lr
010F88 E7 E0 01 00 		push	r1
010F8C 67 E1 01 00 	    push    r2
010F90 E7 E1 01 00 	    push    r3
010F94 67 E2 01 00 	    push    r4
010F98 7C DA FF 00 	    lbu     r2,TEXTREG+TEXT_COLS+$FFD00000
010F9C 41 20 00 00 
010FA0 02 31 02 2E 		mulu	r3,r2,r1
                	;	subui	r2,r2,#1		; r2 = #chars to blank - 1
010FA4 82 31 04 70 		asl		r3,r3,#2
010FA8 39 7E FF FF 		bsr     GetScreenLocation
010FAC 82 31 02 28 		addu	r3,r3,r1
010FB0 0A 10 40 00 		ldi		r1,#' '
010FB4 B9 07 00 00 		bsr		AsciiToScreen
010FB8 E7 E0 01 00 		push    r1
010FBC B9 7D FF FF 		bsr     GetCurrAttr
010FC0 82 40 00 1A 		mov     r4,r1
010FC4 57 1F 10 00 		pop     r1
010FC8 82 10 08 1A 		or		r1,r1,r4
                	.0001:
010FCC EA 11 84 00 		sh	    r1,[r3+r2*4]
010FD0 15 21 02 00 		subui   r2,r2,#1
010FD4 3D 11 FC FF 		bne	    r2,.0001
010FD8 57 4F 10 00 		pop		r4
010FDC 57 3F 10 00 	    pop     r3
010FE0 57 2F 10 00 	    pop     r2
010FE4 57 1F 10 00 	    pop     r1
010FE8 57 FF 11 00 		pop     lr
010FEC 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; Convert ASCII character to screen display character.
                	;------------------------------------------------------------------------------
                	
                	AsciiToScreen:
010FF0 67 E1 01 00 	    push    r2
010FF4 86 20 B6 00 	    cmp     r2,r1,#$5B          ; [
010FF8 3D 01 18 00 	    beq     r2,.00003
010FFC 86 20 BA 00 	    cmp     r2,r1,#$5D          ; ]
011000 3D 01 18 00 	    beq     r2,.00004
011004 8C 10 FE 01 		and		r1,r1,#$FF
011008 8D 10 00 02 		or		r1,r1,#$100
01100C 8C 20 40 00 		and		r2,r1,#%00100000	; if bit 5 or 6 isn't set
011010 3D 01 08 00 		beq		r2,.00001
011014 8C 20 80 00 		and		r2,r1,#%01000000
011018 3D 01 04 00 		beq		r2,.00001
01101C 8C 10 3E 03 		and		r1,r1,#%110011111
                	.00001:
011020 57 2F 10 00 	    pop     r2
011024 37 FF 01 00 		rtl
.00003:
011028 0A 10 36 02 	    ldi     r1,#$11B
01102C BA FE FF FF 	    bra     .00001
                	.00004:
011030 0A 10 3A 02 	    ldi     r1,#$11D
011034 BA FD FF FF 	    bra     .00001
                	
                	;------------------------------------------------------------------------------
                	; Convert screen display character to ascii.
                	;------------------------------------------------------------------------------
                	
                	ScreenToAscii:
011038 67 E1 01 00 	    push    r2
01103C 8C 10 FE 01 		and		r1,r1,#$FF
011040 86 20 36 00 	    cmp     r2,r1,#$1B          ; fix up brackets
011044 3D 41 08 00 	    blt     r2,.0001
011048 86 20 3A 00 	    cmp     r2,r1,#$1D
01104C 3D 21 04 00 	    bgt     r2,.0001
011050 94 10 80 00 	    addu    r1,r1,#$40
                	.0001:
011054 96 20 36 00 		cmpu	r2,r1,#26+1
011058 3D 31 04 00 		bge		r2,.stasc1
01105C 84 10 C0 00 		add		r1,r1,#$60
                	.stasc1:
011060 57 2F 10 00 	    pop     r2
011064 37 FF 01 00 		rtl

                	CursorOff:
011068 37 FF 01 00 		rtl
CursorOn:
01106C 37 FF 01 00 		rtl

                	SetCursorPos:
011070 E7 EF 01 00 	    push    lr
011074 E7 E1 01 00 	    push    r3
011078 82 30 00 1A 	    mov     r3,r1
01107C B9 18 00 00 	    bsr     GetJCBPtr
011080 E0 30 18 08 	    sb      r3,JCB_CursorRow[r1]
011084 E0 20 1A 08 	    sb      r2,JCB_CursorCol[r1]
011088 B9 69 FF FF 	    bsr     UpdateCursorPos
01108C 82 11 00 1A 	    mov     r1,r3
011090 57 3F 10 00 	    pop     r3
011094 3B FF 11 00 	    rts

                	GetCursorPos:
011098 E7 EF 01 00 	    push    lr
01109C B9 14 00 00 	    bsr     GetJCBPtr
0110A0 C1 20 1A 08 	    lbu     r2,JCB_CursorCol[r1]
0110A4 C1 10 18 08 	    lbu     r1,JCB_CursorRow[r1]
0110A8 3B FF 11 00 	    rts
    rts

0110AC 3B FF 11 00 
                	
                	DispStartMsg:
0110B0 E7 EF 01 00 	    push    lr
0110B4 7C 01 00 00 		ldi		r1,#msgStart
0110B8 0A 10 C2 27 
0110BC B9 32 FF FF 		bsr		DisplayString
0110C0 3B FF 11 00 	    rts

                	   
                	BranchToSelf2:
0110C4 3A 00 00 00 	    bra      BranchToSelf2
                	
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	ROMChecksum:
0110C8 E7 EF 01 00 	    push     lr
0110CC 7C 01 00 00 	    ldi      r2,#$10000
0110D0 0A 20 00 00 
0110D4 0A 40 00 00 	    ldi      r4,#0
0110D8 0A 30 00 00 	    ldi      r3,#0
0110DC 0A 50 00 00 	    ldi      r5,#0
                	.0001:
0110E0 4D 31 08 00 	    lhu      r3,[r2+r4]
0110E4 82 52 06 28 	    addu     r5,r5,r3
0110E8 14 42 08 00 	    addui    r4,r4,#4
0110EC 7C 01 00 00 	    cmp      r3,r4,#$10000
0110F0 06 32 00 00 
0110F4 BD 41 F6 FF 	    blt      r3,.0001
0110F8 7C 01 00 00 	    lea      r1,msgROMChecksum
0110FC 47 10 28 22 
011100 39 2A FF FF 	    bsr      DisplayString
011104 82 12 00 1A 	    mov      r1,r5
011108 B9 1B FF FF 	    bsr      DisplayHalf
01110C B9 39 FF FF 	    bsr      CRLF
011110 3B FF 11 00 	    rts

                	msgROMChecksum:
011114 0D 0A 52 4F 	    db    CR,LF,"ROM Checksum: ",0
011118 4D 20 43 68 
01111C 65 63 6B 73 
011120 75 6D 3A 20 
011124 00          
                	
011125 00 00 00    	    align 
                	 
                	;------------------------------------------------------------------------------
                	; Display a space on the output device.
                	;------------------------------------------------------------------------------
                	
                	DisplaySpace:
011128 E7 EF 01 00 	    push     lr
01112C E7 E0 01 00 	    push     r1
011130 0A 10 40 00 	    ldi      r1,#' '
011134 B9 A2 00 00 	    bsr      OutChar
011138 57 1F 10 00 	    pop      r1
01113C 3B FF 11 00 	    rts

                	GetJCBPtr:
011140 67 E1 01 00 	    push    r2
011144 41 1C 28 04 		lbu     r1,TCB_hJCB[tr]
011148 BD 00 10 00 	    beq     r1,.0001
01114C 96 20 66 00 	    cmpu    r2,r1,#NR_JCB
011150 3D 31 0C 00 	    bge     r2,.0001
011154 97 10 00 0A 		mulu    r1,r1,#JCB_Size
011158 7C C5 00 00 		addui   r1,r1,#JCB_Array
01115C 94 10 00 00 
011160 57 2F 10 00 		pop     r2
011164 37 FF 01 00 	    rtl
.0001:
011168 57 2F 10 00 	    pop     r2
01116C 0A 10 80 27 	    ldi     r1,#JCB0
011170 37 FF 01 00 	    rtl 

                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	LockBIOS:
011174 E7 EF 01 00 	    push    lr
011178 E7 E0 01 00 	    push    r1
01117C 0A 10 10 27 	    ldi     r1,#BIOS_sema
011180 39 76 06 00 	    bsr     LockSema
011184 57 1F 10 00 	    pop     r1
011188 3B FF 11 00 	    rts
UnlockBIOS:
01118C E7 EF 01 00 	    push    lr
011190 E7 E0 01 00 	    push    r1
011194 47 10 10 27 	    lea     r1,BIOS_sema
011198 39 7C 06 00 	    bsr     UnlockSema
01119C 57 1F 10 00 	    pop     r1
0111A0 3B FF 11 00 	    rts

                	LockBIOS1:
0111A4 E7 EF 01 00 	    push    lr
0111A8 E7 E0 01 00 	    push    r1
0111AC 7C C0 00 00 	    ldi     r1,#BIOS1_sema
0111B0 0A 10 30 04 
0111B4 B9 6F 06 00 	    bsr     LockSema
0111B8 57 1F 10 00 	    pop     r1
0111BC 3B FF 11 00 	    rts

                	;------------------------------------------------------------------------------
                	; Perform a BIOS call from CPU #1
                	; This routine sets up a structure variable in memory for the primary CPU
                	; to process.
                	;------------------------------------------------------------------------------
                	
                	BIOSCall1:
0111C0 46 EC 11 05 	    lw      sp,TCB_BIOS_Stack[tr]
0111C4 E7 EF 01 00 	    push    lr
0111C8 67 E5 01 00 	    push    r10
0111CC E7 E5 01 00 	    push    r11
0111D0 02 A0 12 3E 	    mfspr   r10,epc             ;
0111D4 14 A5 08 00 	    addui   r10,r10,#4
0111D8 02 05 12 3C 	    mtspr   epc,r10
0111DC 06 A3 C8 00 	    cmp     r10,r6,#MAX_BIOS_CALL
0111E0 3D 25 42 00 	    bgt     r10,.0003
0111E4 39 F8 FF FF 	    bsr     LockBIOS1
0111E8 63 60 00 00 	    sw      r6,BIOS_op
0111EC 63 10 10 00 	    sw      r1,BIOS_arg1
0111F0 63 20 20 00 	    sw      r2,BIOS_arg2
0111F4 63 30 30 00 	    sw      r3,BIOS_arg3
0111F8 63 40 40 00 	    sw      r4,BIOS_arg4
0111FC 63 50 50 00 	    sw      r5,BIOS_arg5
011200 63 00 60 00 	    sw      r0,BIOS_resp
011204 63 00 70 00 	    sw      r0,BIOS_stat
011208 7C C0 00 00 	    lw      r1,BIOS_MbxHandle
01120C 46 10 10 00 
011210 0A 20 00 00 	    ldi     r2,#BIOS_op          ;
011214 7C C0 00 00 	    lw      r3,BIOS_RespMbx      ; response mailbox handle
011218 46 30 20 00 
01121C 38 0F 08 00 	    sys     #FMTK_CALL
011220 09 00 00 00 	    dh      9                    ; SendMsg
011224 7C C0 00 00 	    lw      r1,BIOS_RespMbx
011228 46 10 20 00 
01122C 0A 20 FE FF 	    ldi     r2,#-1
011230 38 0F 08 00 	    sys     #FMTK_CALL
011234 0A 00 00 00 	    dh      10                   ; WaitMsg
011238 86 70 20 00 	    cmp     r7,r1,#E_Timeout
01123C BD 13 06 00 	    bne     r7,.0004
011240 0A 20 04 00 	    ldi     r2,#BIOS_E_Timeout
011244 3A 01 00 00 	    bra     .0002
                	.0004:
011248 02 11 00 1A 	    mov     r1,r2
                	.0002:
01124C 7C C0 00 00 	    sw      r0,BIOS1_sema
011250 63 00 30 04 
011254 57 BF 10 00 	    pop     r11
011258 57 AF 10 00 	    pop     r10
01125C 57 FF 11 00 	    pop     lr
011260 02 E0 3D 6E 	    rte
                	.0003:
011264 0A 20 02 00 	    ldi     r2,#E_BadFuncno
011268 57 BF 10 00 	    pop     r11
01126C 57 AF 10 00 	    pop     r10
011270 57 FF 11 00 	    pop     lr
011274 02 E0 3D 6E 	    rte
                	
                	;------------------------------------------------------------------------------
                	; BIOSCall
                	;
                	; Peform a BIOS function for CPU #0
                	;
                	; Parameters:
                	; r1 = first function argument
                	; r2 = second function argument
                	; r3 = third function argument
                	; r4 = fourth function argument
                	; r5 = fifth function argument
                	; r6 = function
                	;
                	; Returns:
                	; r1 = response from BIOS routine
                	;------------------------------------------------------------------------------
                	
                	BIOSCall:
011278 46 EC 11 05 	    lw      sp,TCB_BIOS_Stack[tr]
01127C E7 EF 01 00 	    push    lr
011280 B9 DE FF FF 	    bsr     LockBIOS
011284 67 E5 01 00 	    push    r10
011288 02 A0 12 3E 	    mfspr   r10,epc             ; update the return address
01128C 14 A5 08 00 	    addui   r10,r10,#4
011290 02 05 12 3C 	    mtspr   epc,r10
011294 06 A3 C8 00 	    cmp     r10,r6,#MAX_BIOS_CALL
011298 3D 25 1E 00 	    bgt     r10,.0003
01129C 7C 01 00 00 	    ldi     r10,#BIOS_FuncTable
0112A0 0A A0 00 01 
0112A4 4B A5 4C 00 	    lcu     r10,[r10+r6*2]
0112A8 7C 01 00 00 	    or      r10,r10,#BIOSCall & 0xFFFFFFFFFFFF0000
0112AC 0D A5 00 00 
0112B0 3C F5 01 00 	    jsr     [r10]
0112B4 7C 00 00 00 	    ldi     r1,#$5678
0112B8 0A 10 F0 AC 
0112BC 7C DC FF 00 	    sc      r1,LEDS
0112C0 61 10 00 0C 
                	.0004:
0112C4 39 D9 FF FF 	    bsr     UnlockBIOS
0112C8 57 AF 10 00 	    pop     r10
0112CC 57 FF 11 00 	    pop     lr
0112D0 02 E0 3D 6E 	    rte
                	.0003:
0112D4 0A 20 02 00 	    ldi     r2,#E_BadFuncno
0112D8 BA FD FF FF 	    bra     .0004
                	
                	;------------------------------------------------------------------------------
                	; This task is a BIOS service task.
                	;------------------------------------------------------------------------------
                	
                	BIOSCallTask:
                	    ; Get a mailbox for BIOS calls
0112DC 7C C0 00 00 	    ldi     r1,#BIOS_MbxHandle
0112E0 0A 10 10 00 
0112E4 38 0F 08 00 	    sys     #FMTK_CALL            ; call FMTK AllocMbx function
0112E8 06 00 00 00 	    dh      6
                	.0001:
0112EC 7C C0 00 00 	    lw      r1,BIOS_MbxHandle
0112F0 46 10 10 00 
0112F4 0A 20 FE FF 	    ldi     r2,#-1                ; infinite timeout
0112F8 38 0F 08 00 	    sys     #FMTK_CALL
0112FC 0A 00 00 00 	    dh      10                    ; call FMTK Waitmsg Function
011300 86 B0 00 00 	    cmp     r11,r1,#E_Ok          ; ignore bad reponses
011304 BD 15 F4 FF 	    bne     r11,.0001
011308 02 B1 00 1A 	    mov     r11,r2
01130C 82 C1 00 1A 	    mov     r12,r3
011310 02 B0 00 1A 	    mov     r11,r0   ; for now
011314 C6 65 00 00 	    lw      r6,BIOS_op[r11]
011318 C6 15 10 00 	    lw      r1,BIOS_arg1[r11]
01131C C6 25 20 00 	    lw      r2,BIOS_arg2[r11]
011320 C6 35 30 00 	    lw      r3,BIOS_arg3[r11]
011324 C6 45 40 00 	    lw      r4,BIOS_arg4[r11]
011328 C6 55 50 00 	    lw      r5,BIOS_arg5[r11]
                	;    sys     #BIOS_CALL
01132C 3D 06 E0 FF 	    beq     r12,.0001
011330 E3 15 60 00 	    sw      r1,BIOS_resp[r11]
011334 82 20 00 1A 	    mov     r2,r1                ; r2 = return value from BIOS
011338 02 16 00 1A 	    mov     r1,r12               ; r1 = mailbox to respond to
01133C 0A 30 00 00 	    ldi     r3,#0                ; r3 = not used
011340 38 0F 08 00 	    sys     #FMTK_CALL
011344 08 00 00 00 	    dh      8                    ; PostMsg
011348 BA F4 FF FF 	    bra     .0001        
                	
                	;------------------------------------------------------------------------------
                	; 60 Hz interrupt routine.
                	; Both cpu's will execute this interrupt.
                	;------------------------------------------------------------------------------
                	
                	TickRout:
01134C FC 00 00 00 	    ldi     sp,#CPU0_IRQ_STACK       ; set stack pointer to interrupt processing stack
011350 0A E0 01 10 
011354 E7 EF 01 00 	    push    lr
011358 E7 E0 01 00 	    push    r1
01135C 0A 10 06 00 		ldi		r1,#3				; reset the edge sense circuit
011360 7C DC FF 00 		sh		r1,PIC_RSTE
011364 62 10 A8 1F 
011368 02 10 00 6C 		cpuid   r1,r0,#0
01136C BD 10 04 00 		bne     r1,.0001
011370 39 02 00 00 		bsr     UserTickRout
                	.0001:
011374 57 1F 10 00 		pop     r1
011378 57 FF 11 00 		pop     lr
01137C 02 E0 3F 6E 		rti
                	
                	UserTickRout:
011380 E7 E0 01 00 	    push    r1
011384 7C D0 FF 00 		lh	    r1,TEXTSCR+220
011388 44 10 B8 01 
01138C 94 10 02 00 		addui	r1,r1,#1
011390 7C D0 FF 00 		sh	    r1,TEXTSCR+220
011394 62 10 B8 01 
011398 7C 02 00 00 		lw      r1,$20000
01139C 46 10 00 00 
0113A0 7C D0 FF 00 		sh      r1,TEXTSCR+224
0113A4 62 10 C0 01 
0113A8 57 1F 10 00 		pop     r1
0113AC 37 FF 01 00 	    rtl

                	;------------------------------------------------------------------------------
                	; 1024Hz interupt routine. This must be fast. Allows the system time to be
                	; gotten by right shifting by 10 bits.
                	;------------------------------------------------------------------------------
                	
                	Tick1024Rout:
0113B0 FC 00 00 00 	    ldi     sp,#CPU0_IRQ_STACK  ; set stack pointer to interrupt processing stack
0113B4 0A E0 01 10 
0113B8 E7 E0 01 00 		push	r1
0113BC 0A 10 04 00 		ldi		r1,#2				; reset the edge sense circuit
0113C0 7C DC FF 00 		sh		r1,PIC_RSTE
0113C4 62 10 A8 1F 
0113C8 64 10 00 22 		inc     Milliseconds
0113CC 57 1F 10 00 		pop		r1
0113D0 02 E0 3F 6E 		rti                         ; restore stack pointer and return
                	
                	;------------------------------------------------------------------------------
                	; GetSystemTime
                	;
                	; Returns 
                	;    r1 = the system time in seconds.
                	;------------------------------------------------------------------------------
                	
                	GetSystemTime:
0113D4 46 10 00 22 	    lw      r1,Milliseconds
0113D8 82 10 14 72 	    lsr     r1,r1,#10
0113DC 37 FF 01 00 	    rtl

                	
0113E0 00          		db	0
                	msgStart:
0113E1 46 49 53 41 		db	"FISA64 test system starting.",0
0113E5 36 34 20 74 
0113E9 65 73 74 20 
0113ED 73 79 73 74 
0113F1 65 6D 20 73 
0113F5 74 61 72 74 
0113F9 69 6E 67 2E 
0113FD 00          
                	
                	
                	; ============================================================================
                	; Monitor Task
                	; ============================================================================
                	
                	Monitor:
0113FE 00 00 0A 10 		ldi		r1,#49
011402 62 00       
011404 7C DC FF 00 		sc		r1,LEDS
011408 61 10 00 0C 
                	;	bsr		ClearScreen
                	;	bsr		HomeCursor
01140C 7C 01 00 00 		ldi		r1,#msgMonitorStarted
011410 0A 10 F6 35 
011414 39 D7 FE FF 		bsr		DisplayStringCRLF
011418 0A 10 66 00 		ldi		r1,#51
01141C 7C DC FF 00 		sc		r1,LEDS
011420 61 10 00 0C 
011424 60 00 68 22 		sb		r0,KeybdEcho
011428 0A 10 80 27 		ldi     r1,#JCB0
01142C E0 00 90 08 		sb      r0,JCB_KeybdEcho[r1]
                		;ldi		r1,#7
                		;ldi		r2,#0
                		;ldi		r3,#IdleTask
                		;ldi		r4,#0
                		;ldi		r5,#0
                		;bsr		StartTask
                	mon1:
011430 0A 10 64 00 		ldi		r1,#50
011434 7C DC FF 00 		sc		r1,LEDS
011438 61 10 00 0C 
                	;	ldi		sp,#TCBs+TCB_Size-8		; reload the stack pointer, it may have been trashed
01143C 7C 00 00 00 		ldi		sp,#MON_STACK
011440 0A E0 01 C0 
011444 02 00 00 6E 		cli
                	.PromptLn:
011448 39 D2 FE FF 		bsr		CRLF
01144C 0A 10 48 00 		ldi		r1,#'$'
011450 39 3F 00 00 		bsr		OutChar
                	.Prompt3:
011454 B9 41 01 00 		bsr		KeybdGetCharNoWait		; KeybdGetCharDirectNB
011458 BD 40 FE FF 		blt	    r1,.Prompt3
01145C 86 20 1A 00 		cmp		r2,r1,#CR
011460 3D 01 06 00 		beq		r2,.Prompt1
011464 B9 3C 00 00 		bsr		OutChar
011468 BA FD FF FF 		bra		.Prompt3
                	.Prompt1:
01146C B9 9A FF FF 	    bsr     GetJCBPtr
011470 E0 00 1A 08 		sb		r0,JCB_CursorCol[r1]
011474 B9 F8 FE FF 		bsr		CalcScreenLoc
011478 82 30 00 1A 		mov		r3,r1
01147C B9 10 00 00 		bsr		MonGetch
011480 86 20 48 00 		cmp		r2,r1,#'$'
011484 3D 11 04 00 		bne		r2,.Prompt2
011488 39 0F 00 00 		bsr		MonGetch
                	.Prompt2:
01148C 86 20 7E 00 		cmp		r2,r1,#'?'
011490 3D 01 30 00 		beq		r2,.doHelp
011494 86 20 86 00 		cmp		r2,r1,#'C'
011498 3D 01 3A 03 		beq		r2,doCLS
01149C 86 20 C6 00 		cmp     r2,r1,#'c'
0114A0 3D 01 88 76 		beq     r2,doCS
0114A4 86 20 9A 00 		cmp		r2,r1,#'M'
0114A8 3D 01 68 00 		beq		r2,doDumpmem
0114AC 86 20 8C 00 		cmp		r2,r1,#'F'
0114B0 3D 01 78 00 		beq		r2,doFillmem
0114B4 86 20 DA 00 		cmp		r2,r1,#'m'
0114B8 3D 01 7E 76 		beq		r2,MRTest
0114BC 86 20 A6 00 		cmp		r2,r1,#'S'
0114C0 3D 01 B2 00 		beq		r2,doSDBoot
0114C4 86 20 CE 00 		cmp		r2,r1,#'g'
0114C8 3D 01 76 76 		beq		r2,doRand
0114CC 86 20 CA 00 		cmp		r2,r1,#'e'
0114D0 3D 01 72 76 		beq		r2,eval
0114D4 86 20 94 00 		cmp		r2,r1,#'J'
0114D8 3D 01 BA 00 		beq		r2,doJump
0114DC 86 20 88 00 		cmp		r2,r1,#'D'
0114E0 3D 01 3C 01 		beq		r2,doDate
0114E4 86 20 A8 00 		cmp     r2,r1,#'T'
0114E8 3D 01 58 00 		beq     r2,doDumpTL
0114EC BA E8 FF FF 		bra     mon1
                	
                	.doHelp:
0114F0 7C 01 00 00 		ldi		r1,#msgHelp
0114F4 0A 10 70 34 
0114F8 39 AB FE FF 		bsr		DisplayString
0114FC BA E6 FF FF 		bra     mon1
                	
                	MonGetch:
011500 E7 EF 01 00 	    push    lr
011504 C5 11 00 00 		lhu	    r1,[r3]
011508 8C 10 FE 03 		andi	r1,r1,#$1FF
01150C 84 31 08 00 		add		r3,r3,#4
011510 39 65 FF FF 		bsr		ScreenToAscii
011514 57 FF 11 00 		pop     lr
011518 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; Ignore blanks in the input
                	; r3 = text pointer
                	; r1 destroyed
                	;------------------------------------------------------------------------------
                	
                	ignBlanks:
01151C E7 EF 01 00 	    push    lr
011520 67 E1 01 00 	    push    r2
                	ignBlanks1:
011524 B9 FB FF FF 		bsr		MonGetch
011528 86 20 40 00 		cmp		r2,r1,#' '
01152C 3D 01 FC FF 		beq		r2,ignBlanks1
011530 85 31 08 00 		sub		r3,r3,#4
011534 57 2F 10 00 		pop     r2
011538 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	GetTwoParams:
01153C E7 EF 01 00 	    push    lr
011540 B9 FB FF FF 		bsr		ignBlanks
011544 39 86 00 00 		bsr		GetHexNumber	; get start address of dump
011548 82 20 00 1A 		mov		r2,r1
01154C 39 FA FF FF 		bsr		ignBlanks
011550 B9 84 00 00 		bsr		GetHexNumber	; get end address of dump
011554 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Get a range, the end must be greater or equal to the start.
                	;------------------------------------------------------------------------------
                	
                	GetRange:
011558 E7 EF 01 00 	    push    lr
01155C 67 E2 01 00 	    push    r4
011560 B9 FB FF FF 		bsr		GetTwoParams
011564 02 41 02 2C 		cmpu	r4,r2,r1
011568 3D 22 5C 02 		bgt		r4,DisplayErr
01156C 57 4F 10 00 		pop     r4
011570 57 FF 11 00 		pop     lr
011574 37 FF 01 00 		rtl

                	doDumpmem:
011578 39 5E FF FF 		bsr		CursorOff
01157C B9 FB FF FF 		bsr		GetRange
011580 39 AB FE FF 		bsr		CRLF
                	;	bra     mon1
                	.001:
011584 B9 6F 00 00 		bsr		CheckKeys
011588 39 57 00 00 		bsr		DisplayMemBytes
01158C 02 41 02 2C 		cmpu	r4,r2,r1
011590 3D 52 FA FF 		ble		r4,.001
011594 BA D3 FF FF 		bra     mon1
                	
                	doDumpTL:
011598 39 4C 06 00 	    bsr     DumpTaskList
01159C BA D2 FF FF 	    bra     mon1
                	
                	;------------------------------------------------------------------------------
                	; Fill memory
                	;
                	; FB FFD80000 FFD8FFFF r	; fill sprite memory with random bytes
                	;------------------------------------------------------------------------------
                	
                	doFillmem:
0115A0 39 59 FF FF 		bsr		CursorOff
0115A4 B9 EB FF FF 		bsr		MonGetch		; skip over 'B' of "FB"
0115A8 86 20 84 00 		cmp		r2,r1,#'B'
0115AC 3D 01 04 00 		beq		r2,.0004
0115B0 95 31 08 00 		subui	r3,r3,#4		; backup text pointer
                	.0004:
0115B4 B9 F4 FF FF 		bsr		GetRange
0115B8 E7 E0 01 00 		push	r1
0115BC 67 E1 01 00 	    push    r2
0115C0 B9 EB FF FF 		bsr		ignBlanks
0115C4 B9 E7 FF FF 		bsr		MonGetch		; check for random fill
0115C8 86 20 E4 00 		cmp		r2,r1,#'r'
0115CC 3D 01 18 00 		beq		r2,.0001
0115D0 95 31 08 00 		subui   r3,r3,#4
0115D4 39 74 00 00 		bsr		GetHexNumber
0115D8 82 30 00 1A 		mov		r3,r1
0115DC 57 2F 10 00 		pop		r2
0115E0 57 1F 10 00 	    pop     r1
                	.0002:
0115E4 B9 63 00 00 		bsr		CheckKeys
0115E8 60 31 00 00 		sb		r3,[r2]
0115EC 14 21 02 00 		addui	r2,r2,#1
0115F0 02 51 02 2C 		cmpu	r5,r2,r1
0115F4 BD 42 F8 FF 		blt		r5,.0002
0115F8 3A C7 FF FF 		bra		mon1
                	.0001:
0115FC 57 2F 10 00 		pop		r2
011600 57 1F 10 00 	    pop     r1
                	.0003:
011604 B9 5F 00 00 		bsr		CheckKeys
011608 7C DC FF 00 		lw	    r3,RANDOM_NUM
01160C 46 30 00 18 
011610 60 31 00 00 		sb		r3,[r2]
011614 14 21 02 00 		addui	r2,r2,#1
011618 02 51 02 2C 		cmpu	r5,r2,r1
01161C BD 42 F4 FF 		blt		r5,.0003
011620 3A C2 FF FF 		bra		mon1
                	
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	doSDBoot:
                	;	sub		r3,r3,#4
011624 B9 53 DD FF 		bsr		SDInit
011628 BD 10 04 FF 		bne	    r1,mon1
01162C B9 52 DD FF 		bsr		SDReadPart
011630 BD 10 00 FF 		bne	    r1,mon1
011634 B9 72 DD FF 		bsr		SDReadBoot
011638 BD 10 FC FE 		bne	    r1,mon1
01163C B9 71 DD FF 		bsr		loadBootFile
011640 7C 00 00 00 		jmp		mon1
011644 3C 00 18 8A 
                	
                	OutChar:
011648 3E 00 10 22 	    jmp     (OutputVec)
                	
                	;------------------------------------------------------------------------------
                	; Jump to subroutine
                	;
                	; J 10000     ; restart system
                	;------------------------------------------------------------------------------
                	
                	doJump:
01164C B9 D6 FF FF 		bsr		MonGetch		; skip over 'S'
011650 B9 D9 FF FF 		bsr		ignBlanks
011654 39 64 00 00 		bsr		GetHexNumber
011658 63 10 30 22 		sw      r1,jmp_vector
01165C 46 F0 F1 21 	    lw      r31,MON_r31
011660 46 E0 E1 21 	    lw      r30,MON_r30
011664 46 D0 D1 21 	    lw      r29,MON_r29
011668 46 C0 C1 21 	    lw      r28,MON_r28
01166C 46 B0 B1 21 	    lw      r27,MON_r27
011670 46 A0 A1 21 	    lw      r26,MON_r26
011674 46 90 91 21 	    lw      r25,MON_r25
                	;   lw      r24,MON_r24    ; r24 is the task register - no need to load
011678 46 70 71 21 	    lw      r23,MON_r23
01167C 46 60 61 21 	    lw      r22,MON_r22
011680 46 50 51 21 	    lw      r21,MON_r21
011684 46 40 41 21 	    lw      r20,MON_r20
011688 46 30 31 21 	    lw      r19,MON_r19
01168C 46 20 21 21 	    lw      r18,MON_r18
011690 46 10 11 21 	    lw      r17,MON_r17
011694 46 00 01 21 	    lw      r16,MON_r16
011698 46 F0 F0 20 	    lw      r15,MON_r15
01169C 46 E0 E0 20 	    lw      r14,MON_r14
0116A0 46 D0 D0 20 	    lw      r13,MON_r13
0116A4 46 C0 C0 20 	    lw      r12,MON_r12
0116A8 46 B0 B0 20 	    lw      r11,MON_r11
0116AC 46 A0 A0 20 	    lw      r10,MON_r10
0116B0 46 90 90 20 	    lw      r9,MON_r9
0116B4 46 80 80 20 	    lw      r8,MON_r8
0116B8 46 70 70 20 	    lw      r7,MON_r7
0116BC 46 60 60 20 	    lw      r6,MON_r6
0116C0 46 50 50 20 	    lw      r5,MON_r5
0116C4 46 40 40 20 	    lw      r4,MON_r4
0116C8 46 30 30 20 	    lw      r3,MON_r3
0116CC 46 20 20 20 	    lw      r2,MON_r2
0116D0 46 10 10 20 	    lw      r1,MON_r1
0116D4 3E F0 31 22 	    jsr		(jmp_vector)
0116D8 63 10 10 20 	    sw      r1,MON_r1
0116DC 63 20 20 20 	    sw      r2,MON_r2
0116E0 63 30 30 20 	    sw      r3,MON_r3
0116E4 63 40 40 20 	    sw      r4,MON_r4
0116E8 63 50 50 20 	    sw      r5,MON_r5
0116EC 63 60 60 20 	    sw      r6,MON_r6
0116F0 63 70 70 20 	    sw      r7,MON_r7
0116F4 63 80 80 20 	    sw      r8,MON_r8
0116F8 63 90 90 20 	    sw      r9,MON_r9
0116FC 63 A0 A0 20 	    sw      r10,MON_r10
011700 63 B0 B0 20 	    sw      r11,MON_r11
011704 63 C0 C0 20 	    sw      r12,MON_r12
011708 63 D0 D0 20 	    sw      r13,MON_r13
01170C 63 E0 E0 20 	    sw      r14,MON_r14
011710 63 F0 F0 20 	    sw      r15,MON_r15
011714 63 00 01 21 	    sw      r16,MON_r16
011718 63 10 11 21 	    sw      r17,MON_r17
01171C 63 20 21 21 	    sw      r18,MON_r18
011720 63 30 31 21 	    sw      r19,MON_r19
011724 63 40 41 21 	    sw      r20,MON_r20
011728 63 50 51 21 	    sw      r21,MON_r21
01172C 63 60 61 21 	    sw      r22,MON_r22
011730 63 70 71 21 	    sw      r23,MON_r23
011734 63 80 81 21 	    sw      r24,MON_r24
011738 63 90 91 21 	    sw      r25,MON_r25
01173C 63 A0 A1 21 	    sw      r26,MON_r26
011740 63 B0 B1 21 	    sw      r27,MON_r27
011744 63 C0 C1 21 	    sw      r28,MON_r28
011748 63 D0 D1 21 	    sw      r29,MON_r29
01174C 63 E0 E1 21 	    sw      r30,MON_r30
011750 63 F0 F1 21 	    sw      r31,MON_r31
011754 BA 9B FF FF 		bra		mon1
                	
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	doDate:
011758 39 B5 FF FF 		bsr		MonGetch		; skip over 'T'
01175C 86 50 84 00 		cmp     r5,r1,#'B'
011760 BD 02 62 00 		beq     r5,doDebug
011764 86 50 82 00 		cmp		r5,r1,#'A'		; look for DAY
011768 BD 02 3C 00 		beq		r5,doDay
01176C 86 50 A8 00 		cmp     r5,r1,#'T'
011770 BD 12 46 00 		bne     r5,doDisassem
011774 39 B5 FF FF 		bsr		ignBlanks
011778 39 B1 FF FF 		bsr		MonGetch
01177C 86 50 7E 00 		cmp		r5,r1,#'?'
011780 BD 02 14 00 		beq		r5,.0001
011784 95 31 08 00 		subui	r3,r3,#4
011788 B9 3D 00 00 		bsr		GetHexNumber
01178C 60 10 8A 37 		sb		r1,RTCC_BUF+5	; update month
011790 B9 3C 00 00 		bsr		GetHexNumber
011794 60 10 88 37 		sb		r1,RTCC_BUF+4	; update day
011798 B9 3B 00 00 		bsr		GetHexNumber
01179C 60 10 8C 37 		sb		r1,RTCC_BUF+6	; update year
0117A0 39 E5 01 00 		bsr		RTCCWritebuf
0117A4 BA 91 FF FF 		bra		mon1
                	.0001:
0117A8 39 DF 01 00 		bsr		RTCCReadbuf
0117AC B9 65 FE FF 		bsr		CRLF
0117B0 41 10 8A 37 		lbu		r1,RTCC_BUF+5
0117B4 39 4B FE FF 		bsr		DisplayByte
0117B8 0A 10 5E 00 		ldi		r1,#'/'
0117BC B9 D1 FF FF 		bsr		OutChar
0117C0 41 10 88 37 		lbu		r1,RTCC_BUF+4
0117C4 39 49 FE FF 		bsr		DisplayByte
0117C8 0A 10 5E 00 		ldi		r1,#'/'
0117CC B9 CF FF FF 		bsr		OutChar
0117D0 41 10 8C 37 		lbu		r1,RTCC_BUF+6
0117D4 39 47 FE FF 		bsr		DisplayByte
0117D8 39 60 FE FF 		bsr		CRLF
0117DC BA 8A FF FF 		bra		mon1
                	
                	doDay:
0117E0 B9 A7 FF FF 		bsr		ignBlanks
0117E4 39 32 00 00 		bsr		GetHexNumber
0117E8 82 30 00 1A 		mov		r3,r1			; value to write
0117EC 0A 10 DE 00 		ldi		r1,#$6F			; device $6F
0117F0 0A 20 06 00 		ldi		r2,#$03			; register 3
0117F4 B9 C3 01 00 		bsr		I2C_WRITE
0117F8 3A 87 FF FF 		bra		mon1
                	
                	doDisassem:
0117FC 95 31 08 00 	    subui   r3,r3,#4
011800 B9 A3 FF FF 	    bsr     ignBlanks
011804 39 2E 00 00 	    bsr     GetHexNumber
011808 95 10 40 00 	    subu    r1,r1,#32
01180C E7 E0 01 00 	    push    r1
011810 94 10 40 00 	    addu    r1,r1,#32
011814 E7 E0 01 00 	    push    r1
011818 B9 E3 0D 00 	    bsr     disassem20
01181C 14 EF 21 00 	    addui   sp,sp,#16
011820 3A 82 FF FF 	    bra     mon1
                	
                	doDebug:
011824 39 9F FF FF 	   bsr   ignBlanks
011828 B9 29 00 00 	   bsr   GetHexNumber
01182C 65 E0 01 00 	   push  #0
011830 E7 E0 01 00 	   push  r1
011834 39 52 10 00 	   bsr   debugger
011838 14 EF 21 00 	   addui sp,sp,#16
01183C BA 7E FF FF 	   bra   mon1
                	
                	;------------------------------------------------------------------------------
                	; Display memory pointed to by r2.
                	; destroys r1,r3
                	;------------------------------------------------------------------------------
                	;
                	DisplayMemBytes:
011840 E7 EF 01 00 	    push    lr
011844 E7 E0 01 00 		push	r1
011848 E7 E1 01 00 	    push    r3
01184C 67 E2 01 00 	    push    r4
011850 0A 10 7C 00 		ldi		r1,#'>'
011854 B9 BE FF FF 		bsr		OutChar
011858 0A 10 84 00 		ldi		r1,#'B'
01185C B9 BD FF FF 		bsr		OutChar
011860 0A 10 40 00 		ldi		r1,#' '
011864 B9 BC FF FF 		bsr		OutChar
011868 02 11 00 1A 		mov		r1,r2
01186C 39 2F FE FF 		bsr		DisplayHalf
011870 0A 30 10 00 		ldi		r3,#8
                	.001:
011874 0A 10 40 00 		ldi		r1,#' '
011878 39 BA FF FF 		bsr		OutChar
01187C 41 11 00 00 		lbu		r1,[r2]
011880 B9 31 FE FF 		bsr		DisplayByte
011884 14 21 02 00 		addui	r2,r2,#1
011888 95 31 02 00 		subui   r3,r3,#1
01188C BD 11 F4 FF 		bne	    r3,.001
011890 0A 10 74 00 		ldi		r1,#':'
011894 B9 B6 FF FF 		bsr		OutChar
011898 7C 70 0D 00 		ldi		r1,#%110101110_000000100_0000000000	; reverse video
01189C 0A 10 00 20 
0118A0 62 10 50 22 		sh		r1,NormAttr
0118A4 0A 30 10 00 		ldi		r3,#8
0118A8 15 21 10 00 		subui	r2,r2,#8
                	.002
0118AC 41 11 00 00 		lbu		r1,[r2]
0118B0 96 40 34 00 		cmpu	r4,r1,#26				; convert control characters to '.'
0118B4 3D 32 06 00 		bge		r4,.004
0118B8 0A 10 5C 00 		ldi		r1,#'.'
0118BC 3A 02 00 00 		bra     .003
                	.004:
0118C0 96 40 00 01 		cmpu	r4,r1,#$80				; convert other non-ascii to '.'
0118C4 3D 42 04 00 		blt		r4,.003
0118C8 0A 10 5C 00 		ldi		r1,#'.'
                	.003:
0118CC B9 AF FF FF 		bsr		OutChar
0118D0 14 21 02 00 		addui	r2,r2,#1
0118D4 95 31 02 00 		subui   r3,r3,#1
0118D8 BD 11 EA FF 		bne	    r3,.002
0118DC FC 26 00 00 		ldi		r1,#%000000100_110101110_0000000000	; normal video
0118E0 0A 10 00 70 
0118E4 62 10 50 22 		sh		r1,NormAttr
0118E8 39 3E FE FF 		bsr		CRLF
0118EC 57 4F 10 00 		pop     r4
0118F0 57 3F 10 00 		pop		r3
0118F4 57 1F 10 00 	    pop     r1
0118F8 57 FF 11 00 	    pop     lr
0118FC 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; CheckKeys:
                	;	Checks for a CTRLC or a scroll lock during long running dumps.
                	;------------------------------------------------------------------------------
                	
                	CheckKeys:
011900 E7 EF 01 00 	    push    lr
011904 39 02 00 00 		bsr	    CTRLCCheck
011908 B9 07 00 00 		bsr     CheckScrollLock
01190C 57 FF 11 00 		pop     lr
011910 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; CTRLCCheck
                	;	Checks to see if CTRL-C is pressed. If so then the current routine is
                	; aborted and control is returned to the monitor.
                	;------------------------------------------------------------------------------
                	
                	CTRLCCheck:
011914 E7 EF 01 00 	    push    lr
011918 E7 E0 01 00 		push	r1
01191C 67 E1 01 00 		push    r2
011920 39 A8 00 00 		bsr		KeybdGetCharNoWait
011924 86 20 06 00 		cmp		r2,r1,#CTRLC
011928 3D 01 0A 00 		beq		r2,.0001
01192C 57 2F 10 00 		pop     r2
011930 57 1F 10 00 		pop		r1
011934 57 FF 11 00 		pop     lr
011938 37 FF 01 00 		rtl
.0001:
01193C 14 EF 31 00 		addui	sp,sp,#24
011940 3A 5E FF FF 		bra     mon1
                	
                	;------------------------------------------------------------------------------
                	; CheckScrollLock:
                	;	Check for a scroll lock by the user. If scroll lock is active then tasks
                	; are rescheduled while the scroll lock state is tested in a loop.
                	;------------------------------------------------------------------------------
                	
                	CheckScrollLock:
011944 E7 EF 01 00 	    push    lr
011948 E7 E0 01 00 		push	r1
01194C 67 E1 01 00 		push    r2
                	.0002:
011950 43 10 6C 22 		lcu		r1,KeybdLocks
011954 7C 00 00 00 		and		r2,r1,#$4000		; is scroll lock active ?
011958 8C 20 00 80 
01195C 3D 01 04 00 		beq		r2,.0001
                	;	brk		#2*16				; reschedule tasks
011960 3A FE FF FF 		bra     .0002
                	.0001:
011964 57 2F 10 00 	    pop     r2
011968 57 1F 10 00 		pop		r1
01196C 57 FF 11 00 		pop     lr
011970 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; Get a hexidecimal number. Maximum of eight digits.
                	; R3 = text pointer (updated)
                	; R1 = hex number
                	;------------------------------------------------------------------------------
                	;
                	GetHexNumber:
011974 E7 EF 01 00 	    push    lr
011978 67 E1 01 00 		push	r2
01197C 67 E2 01 00 	    push    r4
011980 0A 20 00 00 		ldi		r2,#0
011984 0A 40 20 00 		ldi		r4,#16
                	.gthxn2:
011988 39 6F FF FF 		bsr		MonGetch
01198C 39 05 00 00 		bsr		AsciiToHexNybble
011990 BD 40 0A 00 		bmi		r1,.gthxn1
011994 02 21 08 70 		asl		r2,r2,#4
011998 02 21 02 1A 		or		r2,r2,r1
01199C 15 42 02 00 		subui   r4,r4,#1
0119A0 3D 12 F4 FF 	    bne	    r4,.gthxn2
                	.gthxn1:
0119A4 02 11 00 1A 		mov		r1,r2
0119A8 57 4F 10 00 		pop		r4
0119AC 57 2F 10 00 	    pop     r2
0119B0 3B FF 11 00 	    rts

                	;------------------------------------------------------------------------------
                	; Convert ASCII character in the range '0' to '9', 'a' to 'f' or 'A' to 'F'
                	; to a hex nybble.
                	;------------------------------------------------------------------------------
                	;
                	AsciiToHexNybble:
0119B4 67 E1 01 00 	    push    r2
0119B8 96 20 60 00 		cmpu	r2,r1,#'0'
0119BC 3D 41 2C 00 		blt		r2,.gthx3
0119C0 96 20 74 00 		cmpu	r2,r1,#'9'+1
0119C4 3D 31 08 00 		bge		r2,.gthx5
0119C8 95 10 60 00 		subui	r1,r1,#'0'
0119CC 57 2F 10 00 		pop     r2
0119D0 37 FF 01 00 		rtl
.gthx5:
0119D4 96 20 82 00 		cmpu	r2,r1,#'A'
0119D8 3D 41 1E 00 		blt		r2,.gthx3
0119DC 96 20 8E 00 		cmpu	r2,r1,#'F'+1
0119E0 3D 31 0A 00 		bge		r2,.gthx6
0119E4 95 10 82 00 		subui	r1,r1,#'A'
0119E8 94 10 14 00 		addui	r1,r1,#10
0119EC 57 2F 10 00 		pop     r2
0119F0 37 FF 01 00 		rtl
.gthx6:
0119F4 96 20 C2 00 		cmpu	r2,r1,#'a'
0119F8 3D 41 0E 00 		blt		r2,.gthx3
0119FC 96 20 F6 00 		cmpu	r2,r1,#'z'+1
011A00 3D 31 0A 00 		bge		r2,.gthx3
011A04 95 10 C2 00 		subui	r1,r1,#'a'
011A08 94 10 14 00 		addui	r1,r1,#10
011A0C 57 2F 10 00 		pop     r2
011A10 37 FF 01 00 		rtl
.gthx3:
011A14 57 2F 10 00 	    pop     r2
011A18 0A 10 FE FF 		ldi		r1,#-1		; not a hex number
011A1C 37 FF 01 00 		rtl

                	DisplayErr:
011A20 7C 01 00 00 		ldi		r1,#msgErr
011A24 0A 10 60 34 
011A28 39 05 FE FF 		bsr		DisplayString
011A2C BA 40 FF FF 		bra mon1
                	
                	msgErr:
011A30 2A 2A 45 72 		db	"**Err",CR,LF,0
011A34 72 0D 0A 00 
                	
                	msgHelp:
011A38 3F 20 3D 20 		db		"? = Display Help",CR,LF
011A3C 44 69 73 70 
011A40 6C 61 79 20 
011A44 48 65 6C 70 
011A48 0D 0A       
011A4A 43 4C 53 20 		db		"CLS = clear screen",CR,LF
011A4E 3D 20 63 6C 
011A52 65 61 72 20 
011A56 73 63 72 65 
011A5A 65 6E 0D 0A 
011A5E 44 20 3D 20 		db      "D = disassemble",CR,LF
011A62 64 69 73 61 
011A66 73 73 65 6D 
011A6A 62 6C 65 0D 
011A6E 0A          
011A6F 44 42 20 3D 		db      "DB = start debugger",CR,LF
011A73 20 73 74 61 
011A77 72 74 20 64 
011A7B 65 62 75 67 
011A7F 67 65 72 0D 
011A83 0A          
011A84 44 54 20 3D 		db		"DT = set/read date",CR,LF
011A88 20 73 65 74 
011A8C 2F 72 65 61 
011A90 64 20 64 61 
011A94 74 65 0D 0A 
011A98 46 42 20 3D 		db		"FB = fill memory",CR,LF
011A9C 20 66 69 6C 
011AA0 6C 20 6D 65 
011AA4 6D 6F 72 79 
011AA8 0D 0A       
011AAA 4D 42 20 3D 		db		"MB = dump memory",CR,LF
011AAE 20 64 75 6D 
011AB2 70 20 6D 65 
011AB6 6D 6F 72 79 
011ABA 0D 0A       
011ABC 4A 53 20 3D 		db		"JS = jump to code",CR,LF
011AC0 20 6A 75 6D 
011AC4 70 20 74 6F 
011AC8 20 63 6F 64 
011ACC 65 0D 0A    
011ACF 54 20 3D 20 		db	    "T = Dump task list",CR,LF
011AD3 44 75 6D 70 
011AD7 20 74 61 73 
011ADB 6B 20 6C 69 
011ADF 73 74 0D 0A 
011AE3 53 20 3D 20 		db		"S = boot from SD card",CR,LF
011AE7 62 6F 6F 74 
011AEB 20 66 72 6F 
011AEF 6D 20 53 44 
011AF3 20 63 61 72 
011AF7 64 0D 0A    
011AFA 00          		db		0
                	
                	msgMonitorStarted
011AFB 4D 6F 6E 69 		db		"Monitor started.",0
011AFF 74 6F 72 20 
011B03 73 74 61 72 
011B07 74 65 64 2E 
011B0B 00          
                	
                	doCLS:
011B0C 39 CB FD FF 		bsr		ClearScreen
011B10 39 C3 FD FF 		bsr		HomeCursor
011B14 BA 23 FF FF 		bra     mon1
                	
                	;------------------------------------------------------------------------------
                	; Get a random number from peripheral device.
                	;------------------------------------------------------------------------------
                	
                	GetRandomNumber:
011B18 7C DC FF 00 	    lw      r1,$FFDC0C00
011B1C 46 10 00 18 
011B20 37 FF 01 00 	    rtl
                
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	; Keyboard processing routines follow.
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	KEYBD_DELAY		EQU		1000
                	
                	KeybdGetCharDirectNB:
011B24 E7 EF 01 00 	    push    lr
011B28 67 E1 01 00 		push	r2
011B2C 02 00 02 6E 		sei
011B30 7C DC FF 00 		lcu		r1,KEYBD
011B34 43 10 00 00 
011B38 FC 00 00 00 		and		r2,r1,#$8000
011B3C 8C 20 00 00 
011B40 3D 01 22 00 		beq		r2,.0001
011B44 7C DC FF 00 		lbu		r0,KEYBD+4		; clear keyboard strobe
011B48 41 00 08 00 
011B4C 02 00 00 6E 		cli
011B50 8C 20 00 10 		and		r2,r1,#$800	; is it keydown ?
011B54 3D 11 18 00 		bne	    r2,.0001
011B58 8C 10 FE 01 		and		r1,r1,#$FF
011B5C 41 20 68 22 		lbu		r2,KeybdEcho
011B60 3D 01 0C 00 		beq		r2,.0002
011B64 86 20 1A 00 		cmp		r2,r1,#CR
011B68 3D 11 06 00 		bne		r2,.0003
011B6C B9 ED FD FF 		bsr		CRLF
011B70 3A 01 00 00 		bra     .0002
                	.0003:
011B74 3E F0 11 22 		jsr		(OutputVec)
                	.0002:
011B78 57 2F 10 00 		pop		r2
011B7C 57 FF 11 00 		pop     lr
011B80 37 FF 01 00 		rtl
.0001:
011B84 02 00 00 6E 		cli
011B88 0A 10 FE FF 		ldi		r1,#-1
011B8C 57 2F 10 00 		pop		r2
011B90 57 FF 11 00 		pop     lr
011B94 37 FF 01 00 		rtl

                	KeybdGetCharDirect:
011B98 E7 EF 01 00 	    push    lr
011B9C 67 E1 01 00 		push	r2
                	.0001:
011BA0 7C DC FF 00 		lc		r1,KEYBD
011BA4 42 10 00 00 
011BA8 FC 00 00 00 		and		r2,r1,#$8000
011BAC 8C 20 00 00 
011BB0 3D 01 F8 FF 		beq		r2,.0001
011BB4 7C DC FF 00 		lbu		r0,KEYBD+4		; clear keyboard strobe
011BB8 41 00 08 00 
011BBC 8C 20 00 10 		and		r2,r1,#$800	; is it keydown ?
011BC0 3D 11 F0 FF 		bne	    r2,.0001
011BC4 8C 10 FE 01 		and		r1,r1,#$FF
011BC8 41 20 68 22 		lbu		r2,KeybdEcho
011BCC 3D 01 0C 00 		beq		r2,.gk1
011BD0 86 20 1A 00 		cmp		r2,r1,#CR
011BD4 3D 11 06 00 		bne		r2,.gk2
011BD8 39 E0 FD FF 		bsr		CRLF
011BDC 3A 01 00 00 		bra     .gk1
                	.gk2:
011BE0 3E F0 11 22 		jsr		(OutputVec)
                	.gk1:
011BE4 57 2F 10 00 		pop		r2
011BE8 57 FF 11 00 		pop     lr
011BEC 37 FF 01 00 		rtl

                	;KeybdInit:
                	;	mfspr	r1,cr0		; turn off tmr mode
                	;	push	r1
                	;	mtspr	cr0,r0
                	;	ldi		r1,#33
                	;	sb		r1,LEDS
                	;	bsr		WaitForKeybdAck	; grab a byte from the keyboard
                	;	cmp		flg0,r1,#$AA	; did it send a ack ?
                	;	
                	;	ldi		r1,#$ff			; issue keyboard reset
                	;	bsr		SendByteToKeybd
                	;	ldi		r1,#38
                	;	sb		r1,LEDS
                	;	ldi		r1,#4
                	;	jsr		Sleep
                	;	ldi		r1,#KEYBD_DELAY	; delay a bit
                	kbdi5:
                	;	sub		r1,r1,#1
                	;	brnz	r1,kbdi5
                	;	ldi		r1,#34
                	;	sb		r1,LEDS
                	;	ldi		r1,#0xf0		; send scan code select
                	;	bsr		SendByteToKeybd
                	;	ldi		r1,#35
                	;	sb		r1,LEDS
                	;	ldi		r2,#0xFA
                	;	bsr		WaitForKeybdAck
                	;	cmp		fl0,r1,#$FA
                	;	bne		fl0,kbdi2
                	;	ldi		r1,#36
                	;	sb		r1,LEDS
                	;	ldi		r1,#2			; select scan code set#2
                	;	bsr		SendByteToKeybd
                	;	ldi		r1,#39
                	;	sb		r1,LEDS
                	;kbdi2:
                	;	ldi		r1,#45
                	;	sb		r1,LEDS
                	;	pop		r1				; turn back on tmr mode
                	;	mtspr	cr0,r1
                	;	rtl
                	
                	msgBadKeybd:
011BF0 4B 65 79 62 		db		"Keyboard not responding.",0
011BF4 6F 61 72 64 
011BF8 20 6E 6F 74 
011BFC 20 72 65 73 
011C00 70 6F 6E 64 
011C04 69 6E 67 2E 
011C08 00          
                	
                	;SendByteToKeybd:
                	;	push	r2
                	;	sb		r1,KEYBD
                	;	ldi		r1,#40
                	;	sb		r1,LEDS
                	;	mfspr	r3,tick
                	;kbdi4:						; wait for transmit complete
                	;	mfspr	r4,tick
                	;	sub		r4,r4,r3
                	;	cmp		fl0,r4,#KEYBD_DELAY
                	;	bhi		fl0,kbdbad
                	;	ldi		r1,#41
                	;	sb		r1,LEDS
                	;	lbu		r1,KEYBD+1
                	;	and		fl0,r1,#64
                	;	brz		fl0,kbdi4
                	;	bra 	sbtk1
                	;kbdbad:
                	;	ldi		r1,#42
                	;	sb		r1,LEDS
                	;	lbu		r1,KeybdBad
                	;	brnz	r1,sbtk2
                	;	ldi		r1,#1
                	;	sb		r1,KeybdBad
                	;	ldi		r1,#43
                	;	sb		r1,LEDS
                	;	ldi		r1,#msgBadKeybd
                	;	bsr		DisplayStringCRLF
                	;sbtk1:
                	;	ldi		r1,#44
                	;	sb		r1,LEDS
                	;	pop		r2
                	;	rtl
                	;sbtk2:
                	;	bra sbtk1
                	
                	; Wait for keyboard to respond with an ACK (FA)
                	;
                	;WaitForKeybdAck:
                	;	ldi		r1,#64
                	;	sb		r1,LEDS
                	;	mfspr	r3,tick
                	;wkbdack1:
                	;	mfspr	r4,tick
                	;	sub		r4,r4,r3
                	;	cmp		fl0,r4,#KEYBD_DELAY
                	;	bhi		fl0,wkbdbad
                	;	ldi		r1,#65
                	;	sb		r1,LEDS
                	;	lb		r1,KEYBD+1				; check keyboard status for key
                	;	brpl	r1,wkbdack1				; no key available, go back
                	;	lbu		r1,KEYBD				; get the scan code
                	;	sb		r0,KEYBD+1				; clear recieve register
                	;wkbdbad:
                	;	rtl
                	
                	KeybdInit:
011C09 00 00 00 E7 	    push    lr
011C0D EF 01 00    
011C10 0A 30 0A 00 		ldi		r3,#5
                	.0001:
011C14 B9 37 00 00 		bsr		KeybdRecvByte	; Look for $AA
011C18 BD 40 06 00 		bmi		r1,.0002
011C1C 86 20 54 01 		cmp		r2,r1,#$AA		;
011C20 3D 01 20 00 		beq		r2,.config
                	.0002:
011C24 39 A1 00 00 		bsr		Wait10ms
011C28 0A 10 FE FF 		ldi		r1,#-1			; send reset code to keyboard
011C2C 7C DC FF 00 		sb		r1,KEYBD+1		; write to status reg to clear TX state
011C30 60 10 02 00 
011C34 39 9F 00 00 		bsr		Wait10ms
011C38 0A 10 FE 01 		ldi		r1,#$FF
011C3C B9 9C 00 00 		bsr		KeybdSendByte	; now write to transmit register
011C40 39 3A 00 00 		bsr		KeybdWaitTx		; wait until no longer busy
011C44 B9 31 00 00 		bsr		KeybdRecvByte	; look for an ACK ($FA)
011C48 86 20 F4 01 		cmp		r2,r1,#$FA
011C4C B9 30 00 00 		bsr		KeybdRecvByte
011C50 86 20 F8 01 		cmp		r2,r1,#$FC		; reset error ?
011C54 3D 01 1A 00 		beq		r2,.tryAgain
011C58 86 20 54 01 		cmp		r2,r1,#$AA		; reset complete okay ?
011C5C 3D 11 16 00 		bne		r2,.tryAgain
                	.config:
011C60 0A 10 E0 01 		ldi		r1,#$F0			; send scan code select
011C64 7C DC FF 00 		sc		r1,LEDS
011C68 61 10 00 0C 
011C6C B9 96 00 00 		bsr		KeybdSendByte
011C70 39 34 00 00 		bsr		KeybdWaitTx
011C74 BD 40 0A 00 		bmi		r1,.tryAgain
011C78 39 2B 00 00 		bsr		KeybdRecvByte	; wait for response from keyboard
011C7C BD 40 06 00 		bmi		r1,.tryAgain
011C80 86 20 F4 01 		cmp		r2,r1,#$FA
011C84 3D 01 10 00 		beq		r2,.0004
                	.tryAgain:
011C88 95 31 02 00 	    subui   r3,r3,#1
011C8C BD 11 C4 FF 		bne	    r3,.0001
                	.keybdErr:
011C90 7C 01 00 00 		ldi		r1,#msgBadKeybd
011C94 0A 10 E0 37 
011C98 39 B7 FD FF 		bsr		DisplayString
011C9C 57 FF 11 00 		pop     lr
011CA0 37 FF 01 00 		rtl
.0004:
011CA4 0A 10 04 00 		ldi		r1,#2			; select scan code set #2
011CA8 39 8F 00 00 		bsr		KeybdSendByte
011CAC B9 2C 00 00 		bsr		KeybdWaitTx
011CB0 BD 40 EC FF 		bmi		r1,.tryAgain
011CB4 57 FF 11 00 		pop     lr
011CB8 37 FF 01 00 		rtl

                	; Get the keyboard status
                	;
                	KeybdGetStatus:
011CBC 7C DC FF 00 		lb		r1,KEYBD+1
011CC0 40 10 02 00 
011CC4 37 FF 01 00 		rtl
    push    r2
011CC8 67 E1 01 00 
011CCC 41 2C 28 04 	    lbu     r2,TCB_hJCB[tr]
011CD0 06 11 66 00 	    cmp     r1,r2,#NR_JCB
011CD4 BD 30 2C 00 	    bge     r1,.0001
011CD8 97 FF FF FF 	    mulu    r2,#JCB_Size
011CDC 7C C5 00 00 	    addui   r2,r2,#JCB_Array
011CE0 14 21 00 00 
011CE4 E7 E1 01 00 	    push    r3
011CE8 67 E2 01 00 	    push    r4
011CEC E7 EF 01 00 	    push    lr
011CF0 39 01 05 00 	    bsr     LockSYS
011CF4 41 11 70 08 	    lbu     r1,JCB_KeybdHead[r2]
011CF8 41 31 80 08 	    lbu     r3,JCB_KeybdTail[r2]
011CFC 39 03 05 00 	    bsr     UnlockSYS
011D00 82 40 06 2C 	    cmpu    r4,r1,r3
011D04 3D 02 0E 00 	    beq     r4,.0002
011D08 0A 10 FE FF 	    ldi     r1,#-1
011D0C 57 FF 11 00 	    pop     lr
011D10 57 4F 10 00 	    pop     r4
011D14 57 3F 10 00 	    pop     r3
011D18 57 2F 10 00 	    pop     r2
011D1C 37 FF 01 00 	    rtl
.0002:
011D20 57 FF 11 00 	    pop     lr
011D24 57 4F 10 00 	    pop     r4
011D28 57 3F 10 00 	    pop     r3
                	.0001:
011D2C 0A 10 00 00 	    ldi     r1,#0   ; no scancode available
011D30 57 2F 10 00 	    pop     r2
011D34 37 FF 01 00 	    rtl

                	; Get the scancode from the keyboard port
                	;
                	KeybdGetScancode:
011D38 7C DC FF 00 		lbu		r1,KEYBD				; get the scan code
011D3C 41 10 00 00 
011D40 7C DC FF 00 		sb		r0,KEYBD+1				; clear receive register
011D44 60 00 02 00 
011D48 37 FF 01 00 		rtl
    push    r2
011D4C 67 E1 01 00 
011D50 41 2C 28 04 	    lbu     r2,TCB_hJCB[tr]
011D54 06 11 66 00 	    cmp     r1,r2,#NR_JCB
011D58 BD 30 36 00 	    bge     r1,.0001
011D5C 97 FF FF FF 	    mulu    r2,#JCB_Size
011D60 7C C5 00 00 	    addui   r2,r2,#JCB_Array
011D64 14 21 00 00 
011D68 E7 E1 01 00 	    push    r3
011D6C 67 E2 01 00 	    push    r4
011D70 E7 EF 01 00 	    push    lr
011D74 B9 F0 04 00 	    bsr     LockSYS
011D78 41 11 70 08 	    lbu     r1,JCB_KeybdHead[r2]
011D7C 41 31 80 08 	    lbu     r3,JCB_KeybdTail[r2]
011D80 82 40 06 2C 	    cmpu    r4,r1,r3
011D84 3D 02 18 00 	    beq     r4,.0002
011D88 47 41 A0 08 	    lea     r4,JCB_KeybdBuffer[r2]
011D8C 49 12 06 00 	    lbu     r1,[r4+r3]
011D90 94 31 02 00 	    addui   r3,r3,#1
011D94 8C 31 3E 00 	    and     r3,r3,#31 ; mod 32
011D98 60 31 80 08 	    sb      r3,JCB_KeybdTail[r2]
011D9C 39 EF 04 00 	    bsr     UnlockSYS
011DA0 57 FF 11 00 	    pop     lr
011DA4 57 4F 10 00 	    pop     r4
011DA8 57 3F 10 00 	    pop     r3
011DAC 57 2F 10 00 	    pop     r2
011DB0 37 FF 01 00 	    rtl
.0002:
011DB4 39 EC 04 00 	    bsr     UnlockSYS
011DB8 57 FF 11 00 	    pop     lr
011DBC 57 4F 10 00 	    pop     r4
011DC0 57 3F 10 00 	    pop     r3
                	.0001:
011DC4 0A 10 00 00 	    ldi     r1,#0   ; no scancode available
011DC8 57 2F 10 00 	    pop     r2
011DCC 37 FF 01 00 	    rtl

                	
                	; Recieve a byte from the keyboard, used after a command is sent to the
                	; keyboard in order to wait for a response.
                	;
                	KeybdRecvByte:
011DD0 E7 EF 01 00 	    push    lr
011DD4 E7 E1 01 00 		push	r3
011DD8 0A 30 C8 00 		ldi		r3,#100			; wait up to 1s
                	.0003:
011DDC 39 DC FF FF 		bsr		KeybdGetStatus	; wait for response from keyboard
011DE0 BD 40 10 00 		bmi		r1,.0004		; is input buffer full ? yes, branch
011DE4 39 69 00 00 		bsr		Wait10ms		; wait a bit
011DE8 95 31 02 00 		subui   r3,r3,#1
011DEC BD 11 F8 FF 		bne     r3,.0003		; go back and try again
011DF0 57 3F 10 00 		pop		r3				; timeout
011DF4 0A 10 FE FF 		ldi		r1,#-1			; return -1
011DF8 57 FF 11 00 		pop     lr
011DFC 37 FF 01 00 		rtl
.0004:
011E00 39 E7 FF FF 		bsr		KeybdGetScancode
011E04 57 3F 10 00 		pop		r3
011E08 57 FF 11 00 		pop     lr
011E0C 37 FF 01 00 		rtl

                	
                	; Wait until the keyboard transmit is complete
                	; Returns .CF = 1 if successful, .CF=0 timeout
                	;
                	KeybdWaitTx:
011E10 E7 EF 01 00 	    push    lr
011E14 67 E1 01 00 		push	r2
011E18 E7 E1 01 00 	    push    r3
011E1C 0A 30 C8 00 		ldi		r3,#100			; wait a max of 1s
                	.0001:
011E20 B9 D3 FF FF 		bsr		KeybdGetStatus
011E24 8C 10 80 00 		and		r1,r1,#$40		; check for transmit complete bit
011E28 BD 10 12 00 		bne	    r1,.0002		; branch if bit set
011E2C 39 60 00 00 		bsr		Wait10ms		; delay a little bit
011E30 95 31 02 00 		subui   r3,r3,#1
011E34 BD 11 F6 FF 		bne	    r3,.0001		; go back and try again
011E38 57 3F 10 00 		pop		r3
011E3C 57 2F 10 00 	    pop     r2			    ; timed out
011E40 0A 10 FE FF 		ldi		r1,#-1			; return -1
011E44 57 FF 11 00 		pop     lr
011E48 37 FF 01 00 		rtl
.0002:
011E4C 57 3F 10 00 		pop		r3
011E50 57 2F 10 00 	    pop     r2			    ; wait complete, return 
011E54 0A 10 00 00 		ldi		r1,#0			; return 0
011E58 57 FF 11 00 		pop     lr
011E5C 37 FF 01 00 		rtl

                	KeybdGetCharNoWait:
011E60 60 00 74 22 		sb		r0,KeybdWaitFlag
011E64 BA 01 00 00 		bra		KeybdGetChar
                	
                	KeybdGetCharWait:
011E68 0A 10 FE FF 		ldi		r1,#-1
011E6C 60 10 74 22 		sb		r1,KeybdWaitFlag
                	
                	;
                	; KeyState2
                	; 876543210
                	; ||||||||+ = alt
                	; |||||||+- =
                	; ||||||+-- = control
                	; |||||+--- = numlock
                	; ||||+---- = capslock
                	; |||+----- = scrolllock
                	; ||+------ =
                	; |+------- = 
                	; +-------- = extended
                	;
                	KeybdGetChar:
011E70 E7 EF 01 00 	    push    lr
011E74 67 E1 01 00 		push	r2
011E78 E7 E1 01 00 	    push    r3
                	.0003:
011E7C 39 C8 FF FF 		bsr		KeybdGetStatus			; check keyboard status for key available
011E80 BD 40 10 00 		bmi		r1,.0006				; yes, go process
011E84 40 10 74 22 		lb		r1,KeybdWaitFlag		; are we willing to wait for a key ?
011E88 BD 40 FA FF 		bmi		r1,.0003				; yes, branch back
011E8C 0A 10 FE FF 		ldi		r1,#-1					; flag no char available
011E90 57 3F 10 00 		pop		r3
011E94 57 2F 10 00 	    pop     r2
011E98 57 FF 11 00 	    pop     lr
011E9C 37 FF 01 00 		rtl
.0006:
011EA0 39 D3 FF FF 		bsr		KeybdGetScancode
                	.0001:
011EA4 0A 20 02 00 		ldi		r2,#1
011EA8 7C DC FF 00 		sb		r2,LEDS
011EAC 60 20 00 0C 
011EB0 86 20 E0 01 		cmp		r2,r1,#SC_KEYUP
011EB4 3D 01 70 00 		beq		r2,.doKeyup
011EB8 86 20 C0 01 		cmp		r2,r1,#SC_EXTEND
011EBC 3D 01 72 00 		beq		r2,.doExtend
011EC0 86 20 28 00 		cmp		r2,r1,#$14				; code for CTRL
011EC4 3D 01 76 00 		beq		r2,.doCtrl
011EC8 86 20 24 00 		cmp		r2,r1,#$12				; code for left shift
011ECC 3D 01 B4 00 		beq		r2,.doShift
011ED0 86 20 B2 00 		cmp		r2,r1,#$59				; code for right-shift
011ED4 3D 01 B0 00 		beq		r2,.doShift
011ED8 86 20 EE 00 		cmp		r2,r1,#SC_NUMLOCK
011EDC 3D 01 C2 00 		beq		r2,.doNumLock
011EE0 86 20 B0 00 		cmp		r2,r1,#SC_CAPSLOCK
011EE4 3D 01 C8 00 		beq		r2,.doCapsLock
011EE8 86 20 FC 00 		cmp		r2,r1,#SC_SCROLLLOCK
011EEC 3D 01 CE 00 		beq		r2,.doScrollLock
011EF0 86 20 22 00 		cmp     r2,r1,#SC_ALT
011EF4 3D 01 74 00 		beq     r2,.doAlt
011EF8 40 20 70 22 		lb		r2,KeyState1			; check key up/down
011EFC 60 00 70 22 		sb		r0,KeyState1			; clear keyup status
011F00 3D 11 BE FF 		bne	    r2,.0003				; ignore key up
011F04 86 20 1A 00 		cmp     r2,r1,#SC_TAB
011F08 3D 01 82 00 		beq     r2,.doTab
                	.0013:
011F0C 40 20 72 22 		lb		r2,KeyState2
011F10 0C 31 00 01 		and		r3,r2,#$80				; is it extended code ?
011F14 BD 01 0E 00 		beq		r3,.0010
011F18 0C 31 FE 00 		and		r3,r2,#$7f				; clear extended bit
011F1C 60 30 72 22 		sb		r3,KeyState2
011F20 60 00 70 22 		sb		r0,KeyState1			; clear keyup
011F24 7C 01 00 00 		lbu		r1,keybdExtendedCodes[r1]
011F28 C1 10 60 49 
011F2C BA 09 00 00 		bra		.0008
                	.0010:
011F30 40 20 72 22 		lb		r2,KeyState2
011F34 0C 31 08 00 		and		r3,r2,#$04				; is it CTRL code ?
011F38 BD 01 0A 00 		beq		r3,.0009
011F3C 8C 10 FE 00 		and		r1,r1,#$7F
011F40 7C 01 00 00 		lbu		r1,keybdControlCodes[r1]
011F44 C1 10 60 48 
011F48 3A 06 00 00 		bra		.0008
                	.0009:
011F4C 40 20 72 22 		lb		r2,KeyState2
011F50 0C 31 02 00 		and		r3,r2,#$01				; is it shift down ?
011F54 BD 01 08 00 		beq  	r3,.0007
011F58 7C 01 00 00 		lbu		r1,shiftedScanCodes[r1]
011F5C C1 10 60 46 
011F60 3A 03 00 00 		bra		.0008
                	.0007:
011F64 7C 01 00 00 		lbu		r1,unshiftedScanCodes[r1]
011F68 C1 10 60 44 
011F6C 0A 20 04 00 		ldi		r2,#2
011F70 7C DC FF 00 		sb		r2,LEDS
011F74 60 20 00 0C 
                	.0008:
011F78 0A 20 06 00 		ldi		r2,#3
011F7C 7C DC FF 00 		sb		r2,LEDS
011F80 60 20 00 0C 
011F84 57 3F 10 00 		pop		r3
011F88 57 2F 10 00 	    pop     r2
011F8C 57 FF 11 00 	    pop     lr
011F90 37 FF 01 00 		rtl
.doKeyup:
011F94 0A 10 FE FF 		ldi		r1,#-1
011F98 60 10 70 22 		sb		r1,KeyState1
011F9C 3A DC FF FF 		bra		.0003
                	.doExtend:
011FA0 41 10 72 22 		lbu		r1,KeyState2
011FA4 8D 10 00 01 		or		r1,r1,#$80
011FA8 60 10 72 22 		sb		r1,KeyState2
011FAC 3A DA FF FF 		bra		.0003
                	.doCtrl:
011FB0 40 10 70 22 		lb		r1,KeyState1
011FB4 60 00 70 22 		sb		r0,KeyState1
011FB8 BD 30 0A 00 		bpl		r1,.0004
011FBC 40 10 72 22 		lb		r1,KeyState2
011FC0 8C 10 F6 FF 		and		r1,r1,#-5
011FC4 60 10 72 22 		sb		r1,KeyState2
011FC8 BA D6 FF FF 		bra		.0003
                	.0004:
011FCC 40 10 72 22 		lb		r1,KeyState2
011FD0 8D 10 08 00 		or		r1,r1,#4
011FD4 60 10 72 22 		sb		r1,KeyState2
011FD8 BA D4 FF FF 		bra		.0003
                	.doAlt:
011FDC 40 10 70 22 		lb		r1,KeyState1
011FE0 60 00 70 22 		sb		r0,KeyState1
011FE4 BD 30 0C 00 		bpl		r1,.0011
011FE8 40 10 72 22 	    lb      r1,KeyState2
011FEC 40 10 72 22 		lb		r1,KeyState2
011FF0 8C 10 FC FF 		and		r1,r1,#-2
011FF4 60 10 72 22 		sb		r1,KeyState2
011FF8 BA D0 FF FF 		bra		.0003
                	.0011:
011FFC 40 10 72 22 		lb		r1,KeyState2
012000 8D 10 02 00 		or		r1,r1,#1
012004 60 10 72 22 		sb		r1,KeyState2
012008 BA CE FF FF 		bra		.0003
                	.doTab:
01200C E7 E0 01 00 	    push    r1
012010 40 10 72 22 	    lb      r1,KeyState2
012014 8C 10 02 00 	    and     r1,r1,#1                 ; is ALT down ?
012018 BD 00 0A 00 	    beq     r1,.0012
01201C 7C C0 00 00 	    inc     iof_switch
012020 64 10 00 03 
012024 57 1F 10 00 	    pop     r1
012028 BA CA FF FF 	    bra     .0003
                	.0012:
01202C 57 1F 10 00 	    pop     r1
012030 BA DB FF FF 	    bra     .0013
                	.doShift:
012034 40 10 70 22 		lb		r1,KeyState1
012038 60 00 70 22 		sb		r0,KeyState1
01203C BD 30 0A 00 		bpl		r1,.0005
012040 40 10 72 22 		lb		r1,KeyState2
012044 8C 10 FC FF 		and		r1,r1,#-2
012048 60 10 72 22 		sb		r1,KeyState2
01204C 3A C6 FF FF 		bra		.0003
                	.0005:
012050 40 10 72 22 		lb		r1,KeyState2
012054 8D 10 02 00 		or		r1,r1,#1
012058 60 10 72 22 		sb		r1,KeyState2
01205C 3A C4 FF FF 		bra		.0003
                	.doNumLock:
012060 40 10 72 22 		lb		r1,KeyState2
012064 8E 10 20 00 		eor		r1,r1,#16
012068 60 10 72 22 		sb		r1,KeyState2
01206C 39 06 00 00 		bsr		KeybdSetLEDStatus
012070 BA C1 FF FF 		bra		.0003
                	.doCapsLock:
012074 40 10 72 22 		lb		r1,KeyState2
012078 8E 10 40 00 		eor		r1,r1,#32
01207C 60 10 72 22 		sb		r1,KeyState2
012080 B9 03 00 00 		bsr		KeybdSetLEDStatus
012084 3A BF FF FF 		bra		.0003
                	.doScrollLock:
012088 40 10 72 22 		lb		r1,KeyState2
01208C 8E 10 80 00 		eor		r1,r1,#64
012090 60 10 72 22 		sb		r1,KeyState2
012094 39 01 00 00 		bsr		KeybdSetLEDStatus
012098 BA BC FF FF 		bra		.0003
                	
                	KeybdSetLEDStatus:
01209C E7 EF 01 00 	    push    lr
0120A0 67 E1 01 00 		push	r2
0120A4 E7 E1 01 00 	    push    r3
0120A8 60 00 76 22 		sb		r0,KeybdLEDs
0120AC 40 10 72 22 		lb		r1,KeyState2
0120B0 8C 20 20 00 		and		r2,r1,#16
0120B4 3D 01 06 00 		beq		r2,.0002
0120B8 0A 30 04 00 		ldi		r3,#2
0120BC 60 30 76 22 		sb		r3,KeybdLEDs
                	.0002:
0120C0 8C 20 40 00 		and		r2,r1,#32
0120C4 3D 01 08 00 		beq		r2,.0003
0120C8 40 30 76 22 		lb		r3,KeybdLEDs
0120CC 8D 31 08 00 		or		r3,r3,#4
0120D0 60 30 76 22 		sb		r3,KeybdLEDs
                	.0003:
0120D4 8C 20 80 00 		and		r2,r1,#64
0120D8 3D 01 08 00 		beq		r2,.0004
0120DC 40 30 76 22 		lb		r3,KeybdLEDs
0120E0 8D 31 02 00 		or		r3,r3,#1
0120E4 60 30 76 22 		sb		r3,KeybdLEDs
                	.0004:
0120E8 0A 10 DA 01 		ldi		r1,#$ED
0120EC B9 06 00 00 		bsr		KeybdSendByte
0120F0 39 A4 FF FF 		bsr		KeybdWaitTx
0120F4 B9 9B FF FF 		bsr		KeybdRecvByte
0120F8 BD 40 0C 00 		bmi		r1,.0001
0120FC 86 20 F4 01 		cmp		r2,r1,#$FA
012100 40 10 76 22 		lb		r1,KeybdLEDs
012104 B9 03 00 00 		bsr		KeybdSendByte
012108 39 A1 FF FF 		bsr		KeybdWaitTx
01210C B9 98 FF FF 		bsr		KeybdRecvByte
                	.0001:
012110 57 3F 10 00 		pop		r3
012114 57 2F 10 00 	    pop     r2
012118 57 FF 11 00 	    pop     lr
01211C 37 FF 01 00 		rtl

                	KeybdSendByte:
012120 7C DC FF 00 		sb		r1,KEYBD
012124 60 10 00 00 
012128 37 FF 01 00 		rtl
	
                	Wait10ms:
01212C E7 E1 01 00 		push	r3
012130 67 E2 01 00 	    push    r4
012134 02 30 08 3E 		mfspr	r3,tick					; get orginal count
                	.0001:
012138 02 40 08 3E 		mfspr	r4,tick
01213C 02 42 06 0A 		sub		r4,r4,r3
012140 3D 42 08 00 		blt  	r4,.0002				; shouldn't be -ve unless counter overflowed
012144 FC 03 00 00 		cmpu	r4,r4,#250000			; about 10ms at 25 MHz
012148 16 42 20 A1 
01214C 3D 42 F6 FF 		blt		r4,.0001
                	.0002:
012150 57 4F 10 00 		pop		r4
012154 57 3F 10 00 	    pop     r3
012158 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; KeybdIRQ
                	;     Keyboard interrupt processing routine. Must be short.
                	; Grab a scancode from the keyboard and place it into the keyboard buffer
                	; for the job with the I/O focus.
                	;------------------------------------------------------------------------------
                	
                	KeybdIRQ:
01215C FC 00 00 00 	    ldi     sp,#CPU0_IRQ_STACK
012160 0A E0 01 10 
012164 E7 EF 01 00 	    push    lr
012168 E7 E0 01 00 	    push    r1
01216C 67 E1 01 00 	    push    r2
012170 E7 E1 01 00 	    push    r3
012174 67 E2 01 00 	    push    r4
012178 7C DC FF 00 	    lb      r1,KEYBD+1      ; get the keyboard status
01217C 40 10 02 00 
012180 BD 20 40 00 	    bgt     r1,.0001        ; is there a scancode present ?
012184 7C DC FF 00 		lbu		r1,KEYBD		; get the scan code
012188 41 10 00 00 
01218C 7C DC FF 00 		sb		r0,KEYBD+1		; clear receive register (acknowledges interrupt)
012190 60 00 02 00 
012194 7C C0 00 00 		lw      r2,IOFocusNdx   ; get task with I/O focus
012198 46 20 50 00 
01219C 3D 01 32 00 		beq     r2,.0001
0121A0 40 21 28 04 	    lb      r2,TCB_hJCB[r2] ; get JCB handle
0121A4 96 31 66 00 	    cmpu    r3,r3,#NR_JCB   ; make sure valid handle
0121A8 BD 31 2C 00 	    bge     r3,.0001
0121AC 17 21 00 0A 	    mulu    r2,r2,#JCB_Size ; and convert it to a pointer
0121B0 7C C5 00 00 	    addui   r2,r2,#JCB_Array
0121B4 14 21 00 00 
0121B8 39 68 04 00 	    bsr     LockSYS
0121BC 41 31 70 08 	    lbu     r3,JCB_KeybdHead[r2]  ; get head index of keyboard buffer
0121C0 41 41 80 08 	    lbu     r4,JCB_KeybdTail[r2]  ; get tail index of keyboard buffer
0121C4 94 31 02 00 	    addui   r3,r3,#1        ; advance head      
0121C8 8C 31 3E 00 	    and     r3,r3,#31       ; mod 32
0121CC 82 51 08 0C 	    cmp     r5,r3,r4        ; is there room in the buffer ?
0121D0 BD 02 24 00 	    beq     r5,.0002        ; if not, newest chars will be lost
0121D4 60 31 70 08 	    sb      r3,JCB_KeybdHead[r2]
0121D8 47 21 A0 08 	    lea     r2,JCB_KeybdBuffer[r2]
0121DC 68 11 06 00 	    sb      r1,[r2+r3]      ; save off the scan code
0121E0 B9 66 04 00 	    bsr     UnlockSYS
0121E4 40 20 72 22 	    lb      r2,KeyState2    ; check for ALT-tab
0121E8 0C 21 02 00 	    and     r2,r2,#1        ; is ALT down ?
0121EC 3D 01 0A 00 	    beq     r2,.0001        
0121F0 86 20 1A 00 	    cmp     r2,r1,#SC_TAB
0121F4 3D 11 06 00 	    bne     r2,.0001
0121F8 7C C0 00 00 	    inc     iof_switch      ; flag an I/O focus switch
0121FC 64 10 00 03 
                	.0001:
012200 57 4F 10 00 	    pop     r4
012204 57 3F 10 00 	    pop     r3
012208 57 2F 10 00 	    pop     r2
01220C 57 1F 10 00 		pop     r1
012210 57 FF 11 00 		pop     lr
012214 02 E0 3F 6E 	    rti
                	.0002:
012218 B9 5F 04 00 	    bsr     UnlockSYS
01221C BA FC FF FF 	    bra     .0001
                	KeybdIRQ1:
012220 02 E0 3F 6E 	    rti
                	
                	
                		;--------------------------------------------------------------------------
                		; PS2 scan codes to ascii conversion tables.
                		;--------------------------------------------------------------------------
                		;
012224 00 00 00 00 		align	1
012228 00 00 00 00 
01222C 00 00 00 00 
                	
                	unshiftedScanCodes:
012230 2E A9 2E A5 		.byte	$2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
012234 A3 A1 A2 AC 
012238 2E AA A8 A6 		.byte	$2e,$aa,$a8,$a6,$a4,$09,$60,$2e
01223C A4 09 60 2E 
012240 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$71,$31,$2e
012244 2E 71 31 2E 
012248 2E 2E 7A 73 		.byte	$2e,$2e,$7a,$73,$61,$77,$32,$2e
01224C 61 77 32 2E 
012250 2E 63 78 64 		.byte	$2e,$63,$78,$64,$65,$34,$33,$2e
012254 65 34 33 2E 
012258 2E 20 76 66 		.byte	$2e,$20,$76,$66,$74,$72,$35,$2e
01225C 74 72 35 2E 
012260 2E 6E 62 68 		.byte	$2e,$6e,$62,$68,$67,$79,$36,$2e
012264 67 79 36 2E 
012268 2E 2E 6D 6A 		.byte	$2e,$2e,$6d,$6a,$75,$37,$38,$2e
01226C 75 37 38 2E 
012270 2E 2C 6B 69 		.byte	$2e,$2c,$6b,$69,$6f,$30,$39,$2e
012274 6F 30 39 2E 
012278 2E 2E 2F 6C 		.byte	$2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
01227C 3B 70 2D 2E 
012280 2E 2E 27 2E 		.byte	$2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
012284 5B 3D 2E 2E 
012288 AD 2E 0D 5D 		.byte	$ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
01228C 2E 5C 2E 2E 
012290 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
012294 2E 2E 08 2E 
012298 2E 95 2E 93 		.byte	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
01229C 94 2E 2E 2E 
0122A0 98 7F 92 2E 		.byte	$98,$7f,$92,$2e,$91,$90,$1b,$af
0122A4 91 90 1B AF 
0122A8 AB 2E 97 2E 		.byte	$ab,$2e,$97,$2e,$2e,$96,$ae,$2e
0122AC 2E 96 AE 2E 
                	
0122B0 2E 2E 2E A7 		.byte	$2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
0122B4 2E 2E 2E 2E 
0122B8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0122BC 2E 2E 2E 2E 
0122C0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0122C4 2E 2E 2E 2E 
0122C8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0122CC 2E 2E 2E 2E 
0122D0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0122D4 2E 2E 2E 2E 
0122D8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0122DC 2E 2E 2E 2E 
0122E0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0122E4 2E 2E 2E 2E 
0122E8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0122EC 2E 2E 2E 2E 
0122F0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0122F4 2E 2E 2E 2E 
0122F8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0122FC 2E 2E 2E 2E 
012300 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012304 2E 2E 2E 2E 
012308 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01230C 2E 2E 2E 2E 
012310 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012314 2E 2E 2E 2E 
012318 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01231C 2E 2E 2E 2E 
012320 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012324 2E 2E 2E 2E 
012328 2E 2E FA 2E 		.byte	$2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
01232C 2E 2E 2E 2E 
                	
                	shiftedScanCodes:
012330 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012334 2E 2E 2E 2E 
012338 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
01233C 2E 09 7E 2E 
012340 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$51,$21,$2e
012344 2E 51 21 2E 
012348 2E 2E 5A 53 		.byte	$2e,$2e,$5a,$53,$41,$57,$40,$2e
01234C 41 57 40 2E 
012350 2E 43 58 44 		.byte	$2e,$43,$58,$44,$45,$24,$23,$2e
012354 45 24 23 2E 
012358 2E 20 56 46 		.byte	$2e,$20,$56,$46,$54,$52,$25,$2e
01235C 54 52 25 2E 
012360 2E 4E 42 48 		.byte	$2e,$4e,$42,$48,$47,$59,$5e,$2e
012364 47 59 5E 2E 
012368 2E 2E 4D 4A 		.byte	$2e,$2e,$4d,$4a,$55,$26,$2a,$2e
01236C 55 26 2A 2E 
012370 2E 3C 4B 49 		.byte	$2e,$3c,$4b,$49,$4f,$29,$28,$2e
012374 4F 29 28 2E 
012378 2E 3E 3F 4C 		.byte	$2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
01237C 3A 50 5F 2E 
012380 2E 2E 22 2E 		.byte	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
012384 7B 2B 2E 2E 
012388 2E 2E 0D 7D 		.byte	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
01238C 2E 7C 2E 2E 
012390 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
012394 2E 2E 08 2E 
012398 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01239C 2E 2E 2E 2E 
0123A0 2E 7F 2E 2E 		.byte	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
0123A4 2E 2E 1B 2E 
0123A8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123AC 2E 2E 2E 2E 
                	
0123B0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123B4 2E 2E 2E 2E 
0123B8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123BC 2E 2E 2E 2E 
0123C0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123C4 2E 2E 2E 2E 
0123C8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123CC 2E 2E 2E 2E 
0123D0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123D4 2E 2E 2E 2E 
0123D8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123DC 2E 2E 2E 2E 
0123E0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123E4 2E 2E 2E 2E 
0123E8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123EC 2E 2E 2E 2E 
0123F0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123F4 2E 2E 2E 2E 
0123F8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123FC 2E 2E 2E 2E 
012400 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012404 2E 2E 2E 2E 
012408 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01240C 2E 2E 2E 2E 
012410 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012414 2E 2E 2E 2E 
012418 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01241C 2E 2E 2E 2E 
012420 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012424 2E 2E 2E 2E 
012428 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01242C 2E 2E 2E 2E 
                	
                	; control
                	keybdControlCodes:
012430 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012434 2E 2E 2E 2E 
012438 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
01243C 2E 09 7E 2E 
012440 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$11,$21,$2e
012444 2E 11 21 2E 
012448 2E 2E 1A 13 		.byte	$2e,$2e,$1a,$13,$01,$17,$40,$2e
01244C 01 17 40 2E 
012450 2E 03 18 04 		.byte	$2e,$03,$18,$04,$05,$24,$23,$2e
012454 05 24 23 2E 
012458 2E 20 16 06 		.byte	$2e,$20,$16,$06,$14,$12,$25,$2e
01245C 14 12 25 2E 
012460 2E 0E 02 08 		.byte	$2e,$0e,$02,$08,$07,$19,$5e,$2e
012464 07 19 5E 2E 
012468 2E 2E 0D 0A 		.byte	$2e,$2e,$0d,$0a,$15,$26,$2a,$2e
01246C 15 26 2A 2E 
012470 2E 3C 0B 09 		.byte	$2e,$3c,$0b,$09,$0f,$29,$28,$2e
012474 0F 29 28 2E 
012478 2E 3E 3F 0C 		.byte	$2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
01247C 3A 10 5F 2E 
012480 2E 2E 22 2E 		.byte	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
012484 7B 2B 2E 2E 
012488 2E 2E 0D 7D 		.byte	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
01248C 2E 7C 2E 2E 
012490 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
012494 2E 2E 08 2E 
012498 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01249C 2E 2E 2E 2E 
0124A0 2E 7F 2E 2E 		.byte	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
0124A4 2E 2E 1B 2E 
0124A8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0124AC 2E 2E 2E 2E 
                	
                	keybdExtendedCodes:
0124B0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
0124B4 A3 A1 A2 2E 
0124B8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0124BC 2E 2E 2E 2E 
0124C0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0124C4 2E 2E 2E 2E 
0124C8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0124CC 2E 2E 2E 2E 
0124D0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0124D4 2E 2E 2E 2E 
0124D8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0124DC 2E 2E 2E 2E 
0124E0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0124E4 2E 2E 2E 2E 
0124E8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0124EC 2E 2E 2E 2E 
0124F0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0124F4 2E 2E 2E 2E 
0124F8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0124FC 2E 2E 2E 2E 
012500 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012504 2E 2E 2E 2E 
012508 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01250C 2E 2E 2E 2E 
012510 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012514 2E 2E 2E 2E 
012518 2E 95 2E 93 		.byte	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
01251C 94 2E 2E 2E 
012520 98 99 92 2E 		.byte	$98,$99,$92,$2e,$91,$90,$2e,$2e
012524 91 90 2E 2E 
012528 2E 2E 97 2E 		.byte	$2e,$2e,$97,$2e,$2e,$96,$2e,$2e
01252C 2E 96 2E 2E 
                	
                	
                	; ============================================================================
                	; I2C interface to RTCC
                	; ============================================================================
                	
                	I2C_INIT:
012530 E7 E0 01 00 	    push    r1
012534 67 E1 01 00 	    push    r2
012538 7C DC FF 00 		ldi		r2,#I2C_MASTER
01253C 0A 20 00 1C 
012540 60 01 04 00 		sb		r0,I2C_CONTROL[r2]		; disable the contoller
012544 60 01 02 00 		sb		r0,I2C_PRESCALE_HI[r2]	; set clock divisor for 100kHz
012548 0A 10 C6 00 		ldi		r1,#99					; 24=400kHz, 99=100KHz
01254C 60 11 00 00 		sb		r1,I2C_PRESCALE_LO[r2]
012550 0A 10 00 01 		ldi		r1,#$80					; controller enable bit
012554 60 11 04 00 		sb		r1,I2C_CONTROL[r2]
012558 57 2F 10 00 		pop		r2
01255C 57 1F 10 00 	    pop     r1
012560 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; I2C Read
                	;
                	; Parameters:
                	; 	r1 = device ($6F for RTCC)
                	; 	r2 = register to read
                	; Returns
                	; 	r1 = register value $00 to $FF if successful, else r1 = -1 on error
                	;------------------------------------------------------------------------------
                	;
                	I2C_READ:
012564 E7 EF 01 00 	    push    lr
012568 67 E1 01 00 		push	r2
01256C E7 E1 01 00 	    push    r3
012570 67 E2 01 00 	    push    r4
012574 82 10 02 70 		asl		r1,r1,#1				; clear rw bit for write
                	;	or		r1,r1,#1				; set rw bit for a read
012578 82 40 00 1A 		mov		r4,r1					; save device address in r4
01257C 02 31 00 1A 		mov		r3,r2
                		; transmit device #
012580 7C DC FF 00 		ldi		r2,#I2C_MASTER
012584 0A 20 00 1C 
012588 60 11 06 00 		sb		r1,I2C_TX[r2]
01258C 0A 10 20 01 		ldi		r1,#$90					; STA($80) and WR($10) bits set
012590 60 11 08 00 		sb		r1,I2C_CMD[r2]
012594 B9 1F 00 00 		bsr		I2C_WAIT_TC				; wait for transmit to complete
                		; transmit register #
012598 40 11 08 00 		lb		r1,I2C_STAT[r2]
01259C 8C 10 00 01 		and		r1,r1,#$80				; test RxACK bit
0125A0 BD 10 30 00 		bne	    r1,I2C_ERR
0125A4 60 31 06 00 		sb		r3,I2C_TX[r2]			; select register r3
0125A8 0A 10 20 00 		ldi		r1,#$10					; set WR bit
0125AC 60 11 08 00 		sb		r1,I2C_CMD[r2]
0125B0 39 1C 00 00 		bsr		I2C_WAIT_TC
                	
                		; transmit device #
0125B4 40 11 08 00 		lb		r1,I2C_STAT[r2]
0125B8 8C 10 00 01 		and		r1,r1,#$80				; test RxACK bit
0125BC BD 10 22 00 		bne	    r1,I2C_ERR
0125C0 0D 42 02 00 		or		r4,r4,#1				; set read flag
0125C4 60 41 06 00 		sb		r4,I2C_TX[r2]
0125C8 0A 10 20 01 		ldi		r1,#$90					; STA($80) and WR($10) bits set
0125CC 60 11 08 00 		sb		r1,I2C_CMD[r2]
0125D0 39 18 00 00 		bsr		I2C_WAIT_TC				; wait for transmit to complete
                	
                		; receive data byte
0125D4 40 11 08 00 		lb		r1,I2C_STAT[r2]
0125D8 8C 10 00 01 		and		r1,r1,#$80				; test RxACK bit
0125DC BD 10 12 00 		bne	    r1,I2C_ERR
0125E0 0A 10 D0 00 		ldi		r1,#$68					; STO($40), RD($20), and NACK($08)
0125E4 60 11 08 00 		sb		r1,I2C_CMD[r2]
0125E8 39 15 00 00 		bsr		I2C_WAIT_TC
0125EC 41 11 06 00 		lbu		r1,I2C_RX[r2]			; $00 to $FF = byte read, -1=err
0125F0 57 4F 10 00 		pop		r4
0125F4 57 3F 10 00 	    pop     r3
0125F8 57 2F 10 00 	    pop     r2
0125FC 3B FF 11 00 		rts

                	I2C_ERR:
012600 0A 10 FE FF 		ldi		r1,#-1
012604 82 02 00 3C 		mtspr	cr0,r5					; restore TMR
012608 57 4F 10 00 		pop		r4/r3/r2/r5
01260C 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; I2C Write
                	;
                	; Parameters:
                	; 	r1 = device ($6F)
                	; 	r2 = register to write
                	; 	r3 = value for register
                	; Returns
                	; 	r1 = 0 if successful, else r1 = -1 on error
                	;------------------------------------------------------------------------------
                	;
                	I2C_WRITE:
012610 E7 EF 01 00 		push	lr
012614 67 E1 01 00 	    push    r2
012618 E7 E1 01 00 	    push    r3
01261C 67 E2 01 00 	    push    r4
012620 82 10 02 70 		asl		r1,r1,#1				; clear rw bit for write
012624 82 41 00 1A 		mov		r4,r3					; save value r4
012628 02 31 00 1A 		mov		r3,r2
                		; transmit device #
01262C 7C DC FF 00 		ldi		r2,#I2C_MASTER			; r2 = I/O base address of controller
012630 0A 20 00 1C 
012634 60 11 06 00 		sb		r1,I2C_TX[r2]
012638 0A 10 20 01 		ldi		r1,#$90					; STA($80) and WR($10) bits set
01263C 60 11 08 00 		sb		r1,I2C_CMD[r2]
012640 39 0A 00 00 		bsr		I2C_WAIT_TC				; wait for transmit to complete
                		; transmit register #
012644 40 11 08 00 		lb		r1,I2C_STAT[r2]
012648 8C 10 00 01 		and		r1,r1,#$80				; test RxACK bit
01264C BD 10 DA FF 		bne  	r1,I2C_ERR
012650 60 31 06 00 		sb		r3,I2C_TX[r2]			; select register r3
012654 0A 10 20 00 		ldi		r1,#$10					; set WR bit
012658 60 11 08 00 		sb		r1,I2C_CMD[r2]
01265C B9 06 00 00 		bsr		I2C_WAIT_TC
                		; transmit value
012660 40 11 08 00 		lb		r1,I2C_STAT[r2]
012664 8C 10 00 01 		and		r1,r1,#$80				; test RxACK bit
012668 BD 10 CC FF 		bne  	r1,I2C_ERR
01266C 60 41 06 00 		sb		r4,I2C_TX[r2]			; select value in r4
012670 0A 10 A0 00 		ldi		r1,#$50					; set STO, WR bit
012674 60 11 08 00 		sb		r1,I2C_CMD[r2]
012678 39 03 00 00 		bsr		I2C_WAIT_TC
01267C 0A 10 00 00 		ldi		r1,#0					; everything okay
012680 57 4F 10 00 		pop		r4
012684 57 3F 10 00 	    pop     r3
012688 57 2F 10 00 	    pop     r2
01268C 3B FF 11 00 		rts

                	; Wait for I2C controller transmit complete
                	
                	I2C_WAIT_TC:
                	.0001:
012690 40 11 08 00 		lb		r1,I2C_STAT[r2]
012694 8C 10 04 00 		and		r1,r1,#2
012698 BD 10 FC FF 		bne 	r1,.0001
01269C 37 FF 01 00 		rtl

                	; Read the entire contents of the RTCC including 64 SRAM bytes
                	
                	RTCCReadbuf:
0126A0 E7 EF 01 00 	    push    lr
0126A4 B9 D1 FF FF 		bsr		I2C_INIT
0126A8 0A 20 00 00 		ldi		r2,#$00
                	.0001:
0126AC 0A 10 DE 00 		ldi		r1,#$6F
0126B0 B9 D6 FF FF 		bsr		I2C_READ
0126B4 60 11 80 37 		sb		r1,RTCC_BUF[r2]
0126B8 04 21 02 00 		add		r2,r2,#1
0126BC 16 11 C0 00 		cmpu	r1,r2,#$60
0126C0 BD 40 F6 FF 		blt		r1,.0001
0126C4 3B FF 11 00 		rts

                	; Write the entire contents of the RTCC including 64 SRAM bytes
                	
                	RTCCWritebuf:
0126C8 E7 EF 01 00 	    push    lr
0126CC B9 CC FF FF 		bsr		I2C_INIT
0126D0 0A 20 00 00 		ldi		r2,#$00
                	.0001:
0126D4 0A 10 DE 00 		ldi		r1,#$6F
0126D8 41 31 80 37 		lbu		r3,RTCC_BUF[r2]
0126DC B9 E6 FF FF 		bsr		I2C_WRITE
0126E0 04 21 02 00 		add		r2,r2,#1
0126E4 16 11 C0 00 		cmpu	r1,r2,#$60
0126E8 BD 40 F6 FF 		blt		r1,.0001
0126EC 3B FF 11 00 		rts

                	RTCCOscOn:
0126F0 E7 EF 01 00 	    push    lr
0126F4 B9 C7 FF FF 		bsr		I2C_INIT
0126F8 0A 10 DE 00 		ldi		r1,#$6F
0126FC 0A 20 00 00 		ldi		r2,#$00			; register zero
012700 B9 CC FF FF 		bsr		I2C_READ		; read register zero
012704 8D 30 00 01 		or		r3,r1,#$80		; set start osc bit
012708 0A 10 DE 00 		ldi		r1,#$6F
01270C B9 E0 FF FF 		bsr		I2C_WRITE
012710 3B FF 11 00 		rts

                	; ============================================================================
                	; SD/MMC Card interface
                	; ============================================================================
                	SD_INIT:
012714 E7 EF 01 00 	    push    lr
012718 7C DC FF 00 		ldi		r3,#SD_MASTER
01271C 0A 30 00 16 
012720 7C 00 00 00 		ldi		r2,#25000
012724 0A 20 50 C3 
012728 E1 21 58 00 		sc		r2,0x2c[r3]		; timeout register
                		; Software reset should be held active for several cycles to allow
                		; reset to be detected on the sd_clk domain.
01272C 0A 20 02 00 		ldi		r2,#1
012730 E0 21 50 00 		sb		r2,0x28[r3]		; software reset reg
012734 0A 20 04 00 		ldi		r2,#2
012738 E0 21 98 00 		sb		r2,0x4c[r3]		; prog /6 for clock divider
01273C 0A 10 C8 00 		ldi		r1,#100			; software reset delay
012740 39 47 00 00 		bsr     MicroDelay
012744 E0 01 50 00 		sb		r0,0x28[r3]		; clear software reset
012748 E1 01 08 00 		sc		r0,0x04[r3]		; command 0
01274C E2 01 00 00 		sh		r0,0x00[r3]		; arg 0
012750 39 28 00 00 		bsr		SD_WAIT_RESP
012754 C4 11 18 00 		lh		r1,0x0C[r3]		; read response register
012758 B9 51 FC FF 		bsr		DisplayHalf
01275C 3B FF 11 00 		rts

                	SD_CMD8:
012760 E7 EF 01 00 	    push    lr
012764 7C DC FF 00 		ldi		r3,#SD_MASTER
012768 0A 30 00 16 
01276C 0A 20 34 10 		ldi		r2,#$81A
012770 E1 21 08 00 		sc		r2,0x04[r3]		; set command register
012774 0A 20 54 03 		ldi		r2,#$1AA
012778 E2 21 00 00 		sh		r2,0x00[r3]		; set command argument x1AA
01277C B9 22 00 00 		bsr		SD_WAIT_RESP
012780 7C 00 00 00 		sb		r1,SD_2_0
012784 7C 00 00 00 
012788 60 10 C8 04 
01278C C4 11 18 00 		lh		r1,0x0C[r3]		; read response register
012790 B9 4A FC FF 		bsr		DisplayHalf
                		; send command zero
012794 E1 01 08 00 		sc		r0,0x04[r3]
012798 E2 01 00 00 		sh		r0,0x00[r3]
01279C B9 1E 00 00 		bsr		SD_WAIT_RESP
0127A0 7C 00 00 00 		lbu		r1,SD_2_0
0127A4 7C 00 00 00 
0127A8 41 10 C8 04 
0127AC BD 00 12 00 		beq		r1,.0001
0127B0 0A 10 64 00 		ldi		r1,#'2'
0127B4 B9 D2 FD FF 		bsr		OutChar
0127B8 0A 10 5C 00 		ldi		r1,#'.'
0127BC B9 D1 FD FF 		bsr		OutChar
0127C0 0A 10 60 00 		ldi		r1,#'0'
0127C4 B9 D0 FD FF 		bsr		OutChar
0127C8 39 62 FC FF 		bsr		CRLF
0127CC 3B FF 11 00 		rts
.0001:
0127D0 E1 01 08 00 		sc		r0,0x04[r3]		; send CMD0
0127D4 E2 01 00 00 		sh		r0,0x00[r3]
                	.0002:
0127D8 C3 11 10 00 		lcu		r1,0x08[r3]
0127DC 8C 10 02 00 		and		r1,r1,#1
0127E0 BD 10 FC FF 		bne  	r1,.0002
0127E4 02 40 00 1A 		mov		r4,r0			; ret_reg = r4 = 0
                	.0004:
0127E8 02 52 00 1A 		mov		r5,r4
0127EC 7C 00 80 00 		and		r4,r4,#$80000000
0127F0 0C 42 00 00 
0127F4 3D 12 20 00 		bne  	r4,.0003
0127F8 0A 10 04 6E 		ldi		r1,#$3702		; CMD55|RSP48
0127FC E1 11 08 00 		sc		r1,0x04[r3]
012800 E2 01 00 00 		sh		r0,0x00[r3]
012804 B9 11 00 00 		bsr		SD_WAIT_RESP
012808 BD 10 38 00 		bne  	r1,.respOk
01280C 0A 10 04 52 		ldi		r1,#$2902		; ACMD41|RSP48
012810 E1 11 08 00 		sc		r1,0x04[r3]
012814 E2 01 00 00 		sh		r0,0x00[r3]
012818 39 0F 00 00 		bsr		SD_WAIT_RESP
01281C BD 10 2E 00 		bne  	r1,.respOk
012820 C4 41 18 00 		lh		r4,0x0c[r3]		; ret_reg = RESP1
012824 02 12 00 1A 		mov		r1,r4
012828 B9 37 FC FF 		bsr		DisplayHalf
01282C B9 55 FC FF 		bsr		CRLF
012830 3A F7 FF FF 		bra		.0004
                	.0003:
012834 FC FF 00 00 		and		r1,r5,#$FFFFFF	; voltage mask
012838 8C 12 FE FF 
01283C 39 35 FC FF 		bsr		DisplayHalf
012840 39 53 FC FF 		bsr		CRLF
                		; GetCID
012844 0A 10 02 04 		ldi		r1,#$201		; CMD2 + RSP146
012848 E1 11 08 00 		sc		r1,0x04[r3]
01284C E2 01 00 00 		sh		r0,0x00[r3]
012850 39 08 00 00 		bsr		SD_WAIT_RESP
                		; GetRCA
012854 0A 10 34 06 		ldi		r1,#$31A		; CMD3 + CICE + CRCE + RSP48
012858 E1 11 08 00 		sc		r1,0x04[r3]
01285C E2 01 00 00 		sh		r0,0x00[r3]
012860 39 06 00 00 		bsr		SD_WAIT_RESP
012864 C4 41 18 00 		lh		r4,0x0c[r3]			; r4 = RESP1
012868 7C FF FF 00 		and		r1,r4,#$FFFF0000	; r4 & RCA_MASK
01286C 0C 12 00 00 
012870 B9 2E FC FF 		bsr		DisplayHalf
012874 B9 4C FC FF 		bsr		CRLF
                	.respOk:
012878 0A 10 9E 00 		ldi		r1,#'O'
01287C B9 B9 FD FF 		bsr		OutChar
012880 0A 10 D6 00 		ldi		r1,#'k'
012884 B9 B8 FD FF 		bsr		OutChar
012888 39 4A FC FF 		bsr		CRLF
01288C 3B FF 11 00 		rts

                	SD_WAIT_RESP:
012890 E7 EF 01 00 	    push    lr
012894 67 E1 01 00 		push	r2
012898 E7 E1 01 00 	    push    r3
01289C 7C DC FF 00 		ldi		r2,#SD_MASTER
0128A0 0A 20 00 16 
                	.0001:
0128A4 42 31 68 00 		lc		r3,0x34[r2]		; read error interrupt status reg
0128A8 42 11 60 00 		lc		r1,0x30[r2]		; read normal interrupt status reg
0128AC 8C 31 02 00 		and		r3,r3,#1		; get command timeout indicator
0128B0 BD 11 10 00 		bne  	r3,.0002
0128B4 8C 10 02 00 		and		r1,r1,#1		; wait for command complete bit to set
0128B8 BD 00 F6 FF 		beq		r1,.0001
0128BC 0A 10 02 00 		ldi		r1,#1
0128C0 57 3F 10 00 		pop		r3
0128C4 57 2F 10 00 	    pop     r2
0128C8 57 FF 11 00 	    pop     lr
0128CC 37 FF 01 00 		rtl
.0002:
0128D0 0A 10 A8 00 		ldi		r1,#'T'
0128D4 B9 AE FD FF 		bsr		OutChar
0128D8 0A 10 9E 00 		ldi		r1,#'O'
0128DC B9 AD FD FF 		bsr		OutChar
0128E0 39 3F FC FF 		bsr		CRLF
0128E4 0A 10 00 00 		ldi		r1,#0
0128E8 57 3F 10 00 		pop		r3
0128EC 57 2F 10 00 	    pop     r2
0128F0 57 FF 11 00 	    pop     lr
0128F4 37 FF 01 00 		rtl

                	; ============================================================================
                	; ============================================================================
                	
0128F8 7C 01 00 00 	    ldi     r1,#brkpt1           ; set breakpoint address
0128FC 0A 10 78 52 
012900 82 00 64 3C 	    mtspr   dbad0,r1
012904 0A 10 00 00 	    ldi     r1,#$0000000000000000   ; enable instruction breakpoint, turn on single step mode
012908 82 00 6C 3C 	    mtspr   dbctrl,r1
01290C 02 00 54 3C 	    mtspr   lotgrp,r0            ; operating system is group #0
012910 B9 04 00 00 	    bsr     SetupMemtags
012914 0A 10 C8 00 	    ldi     r1,#100
012918 39 0C 00 00 	    bsr     MicroDelay
01291C 3F 00 00 00 	    nop
012920 3F 00 00 00 	    nop
                	hangprg:
012924 3F 00 00 00 	    nop
012928 3F 00 00 00 	    nop
01292C 3F 00 00 00 	    nop
012930 BA FE FF FF 	    bra     hangprg
                	
                	SetupMemtags:
012934 02 00 50 3C 	    mtspr   ea,r0                ; select tag for first 64kB
012938 0A 10 0C 00 	    ldi     r1,#$0006            ; system only: readable, writeable, not executable
                	brkpt1:
01293C 82 00 52 3C 	    mtspr   tag,r1
012940 7C 01 00 00 	    ldi     r1,#$10000           ; select tag for second 64kB
012944 0A 10 00 00 
012948 82 00 50 3C 	    mtspr   ea,r1
01294C 0A 20 0A 00 	    ldi     r2,#$0005            ; system only: readable, executable, not writeable
012950 02 01 52 3C 	    mtspr   tag,r2
012954 0A 30 24 00 	    ldi     r3,#20-2             ; number of tags to setup
                	.0001:
012958 7C 01 00 00 	    addui   r1,r1,#$10000
01295C 94 10 00 00 
012960 82 00 50 3C 	    mtspr   ea,r1
012964 0A 20 0C 00 	    ldi     r2,#$0006            ; set them up as data
012968 02 01 52 3C 	    mtspr   tag,r2
01296C 95 31 02 00 	    subui   r3,r3,#1
012970 BD 11 F4 FF 	    bne     r3,.0001
012974 37 FF 01 00 	    rtl

                	;------------------------------------------------------------------------------
                	; MicroDelay
                	;     Delay for a short time for at least the specified number of clock cycles
                	;
                	; Parameters:
                	;     r1 = required delay in clock ticks
                	;------------------------------------------------------------------------------
                	;
                	MicroDelay:
012978 67 E1 01 00 	    push    r2
01297C E7 E1 01 00 	    push    r3
012980 02 30 08 3E 	    mfspr   r3,tick             ; get starting tick
                	.0001:
012984 02 20 08 3E 	    mfspr   r2,tick
012988 02 21 06 2A 	    subu    r2,r2,r3
01298C 02 21 02 0C 	    cmp     r2,r2,r1
012990 3D 41 FA FF 	    blt     r2,.0001
012994 57 3F 10 00 	    pop     r3
012998 57 2F 10 00 	    pop     r2
01299C 37 FF 01 00 	    rtl
;
0129A0 3F 00 00 00 	    nop
0129A4 3F 00 00 00 	    nop
                	
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	LoadFromSerial:
0129A8 E7 EF 01 00 	    push    lr
0129AC 7C 00 00 00 	    ldi     r3,#16384
0129B0 0A 30 00 80 
0129B4 7C 02 00 00 	    ldi     r2,#$24000          ; target store address
0129B8 0A 20 00 80 
                	.0001:
0129BC 39 62 FB FF 	    bsr     SerialGetCharDirect
0129C0 60 11 00 00 	    sb      r1,[r2]
0129C4 14 21 02 00 	    addui   r2,r2,#1
0129C8 95 31 02 00 	    subui   r3,r3,#1
0129CC BD 11 F8 FF 	    bne     r3,.0001
0129D0 3B FF 11 00 	    rts

                	nmi_rout:
0129D4 FC 00 00 00 	    ldi    sp,#CPU0_IRQ_STACK
0129D8 0A E0 01 10 
0129DC E7 E0 01 00 	    push   r1
0129E0 7C 01 00 00 	    lea    r1,msgParErr
0129E4 47 10 F8 53 
0129E8 B9 1C FC FF 	    bsr    DisplayStringCRLF
0129EC B9 8F FE FF 	    bsr    KeybdGetCharWait
0129F0 57 1F 10 00 	    pop    r1
0129F4 02 E0 3F 6E 	    rti
                	
                	nmi_rout1:
0129F8 02 E0 3F 6E 	    rti
                	
                	msgParErr:
0129FC 50 61 72 69 	    db "Parity error",0
012A00 74 79 20 65 
012A04 72 72 6F 72 
012A08 00          
                	    
012A09 00 00 00    	    align  
                	
                	;------------------------------------------------------------------------------
                	; Execution fault. Occurs when an attempt is made to execute code from a
                	; page marked as non-executable.
                	;------------------------------------------------------------------------------
                	
                	exf_rout:
012A0C 0A 10 76 01 		ldi		r1,#$bb
012A10 7C DC FF 00 		sc		r1,LEDS
012A14 61 10 00 0C 
012A18 7C 01 00 00 		ldi		r1,#msgexf
012A1C 0A 10 50 55 
012A20 B9 15 FC FF 		bsr		DisplayStringCRLF
                	.0001:
012A24 3A 00 00 00 		bra .0001
                	
                	;------------------------------------------------------------------------------
                	; Data read fault. Occurs when an attempt is made to read from a page marked
                	; as non-readble.
                	;------------------------------------------------------------------------------
                	
                	drf_rout:
012A28 0A 10 76 01 		ldi		r1,#$bb
012A2C 7C DC FF 00 		sc		r1,LEDS
012A30 61 10 00 0C 
012A34 7C 01 00 00 		ldi		r1,#msgdrf
012A38 0A 10 5A 55 
012A3C 39 12 FC FF 		bsr		DisplayStringCRLF
                	.0001:
012A40 3A 00 00 00 		bra .0001
                	
                	;------------------------------------------------------------------------------
                	; Data write fault. Occurs when an attempt is made to write to a page marked
                	; as non-writeable.
                	;------------------------------------------------------------------------------
                	
                	dwf_rout:
012A44 0A 10 76 01 		ldi		r1,#$bb
012A48 7C DC FF 00 		sc		r1,LEDS
012A4C 61 10 00 0C 
012A50 7C 01 00 00 		ldi		r1,#msgdwf
012A54 0A 10 64 55 
012A58 B9 0E FC FF 		bsr		DisplayStringCRLF
                	.0001:
012A5C 3A 00 00 00 		bra .0001
                	
                	;------------------------------------------------------------------------------
                	; Privilege violation fault. Occurs when the current privilege level isn't
                	; sufficient to allow access.
                	;------------------------------------------------------------------------------
                	
                	priv_rout:
012A60 46 EC 21 05 	    lw      sp,TCB_SYS_Stack[tr]
012A64 0A 10 78 01 		ldi		r1,#$bc
012A68 7C DC FF 00 		sc		r1,LEDS
012A6C 61 10 00 0C 
012A70 7C 01 00 00 		ldi		r1,#msgPriv
012A74 0A 10 6E 55 
012A78 39 FB FB FF 		bsr		DisplayString
012A7C 02 10 12 3E 		mfspr   r1,epc
012A80 B9 EC FB FF 		bsr     DisplayHalf
012A84 B9 0A FC FF 		bsr     CRLF
012A88 39 7C FE FF 		bsr		KeybdGetCharWait
012A8C 7C 01 00 00 		ldi     r1,#Monitor|1
012A90 0A 10 FE 27 
012A94 82 00 12 3C 		mtspr   epc,r1
012A98 3F 00 00 00 		nop
012A9C 3F 00 00 00 		nop
012AA0 02 E0 3D 6E 		rte
                	.0001:
012AA4 3A 00 00 00 		bra .0001
                	
                	;------------------------------------------------------------------------------
                	; Message strings for the faults.
                	;------------------------------------------------------------------------------
                	
                	msgexf:
012AA8 65 78 66 20 		db	"exf ",0
012AAC 00          
                	msgdrf:
012AAD 64 72 66 20 		db	"drf ",0
012AB1 00          
                	msgdwf:
012AB2 64 77 66 20 		db	"dwf ",0
012AB6 00          
                	msgPriv:
012AB7 70 72 69 76 		db	"priv fault: PC=",0
012ABB 20 66 61 75 
012ABF 6C 74 3A 20 
012AC3 50 43 3D 00 
                	msgUninit:
012AC7 75 6E 69 6E 		db	"uninit int.",0
012ACB 69 74 20 69 
012ACF 6E 74 2E 00 
                	msgBusErr:
012AD3 0D 0A 42 75 	    db  CR,LF,"Bus error PC=",0
012AD7 73 20 65 72 
012ADB 72 6F 72 20 
012ADF 50 43 3D 00 
                	msgEA:
012AE3 20 45 41 3D 	    db  " EA=",0
012AE7 00          
                	msgUninitIRQ:
012AE8 55 6E 69 6E 	    db  "Uninitialized IRQ",0
012AEC 69 74 69 61 
012AF0 6C 69 7A 65 
012AF4 64 20 49 52 
012AF8 51 00       
                	
012AFA 00 00       	    align 
                	
                	UninitIRQ:
012AFC 7C 01 00 00 	    ldi   r1,msgUninitIRQ
012B00 0A 10 D0 55 
012B04 B9 E9 FB FF 	    bsr   DisplayString
                	.0001:
012B08 3A 00 00 00 	    bra   .0001
                	
                	;------------------------------------------------------------------------------
                	; Bus error routine.
                	;------------------------------------------------------------------------------
                	
                	berr_rout:
012B0C 7C 00 00 00 	    ldi     sp,#$7800
012B10 0A E0 01 F0 
012B14 FC 00 00 00 		ldi		r1,#$bebe
012B18 0A 10 7C 7D 
012B1C 7C DC FF 00 		sc		r1,LEDS
012B20 61 10 00 0C 
012B24 7C 01 00 00 		ldi     r1,#msgBusErr
012B28 0A 10 A6 55 
012B2C B9 E4 FB FF 		bsr     DisplayString
012B30 02 10 10 3E 		mfspr   r1,ipc
012B34 B9 D3 FB FF 		bsr		DisplayWord
012B38 7C 01 00 00 		ldi     r1,#msgEA
012B3C 0A 10 C6 55 
012B40 39 E2 FB FF 		bsr     DisplayString
012B44 02 10 16 3E 	    mfspr   r1,bear
012B48 39 D1 FB FF 		bsr     DisplayWord
012B4C B9 F1 FB FF 		bsr     CRLF
012B50 39 63 FE FF 		bsr		KeybdGetCharWait
                	
                		; In order to return an RTI must be used to exit the routine (or interrupts
                		; will permanently disabled). The RTI instruction clears an internal
                		; processor flag used to prevent nested interrupts.
                		; Since this is a serious error the system is just restarted. So the IPC
                		; is set to point to the restart address.
                	
012B54 7C 01 00 00 		ldi     r1,#start|1
012B58 0A 10 52 01 
012B5C 82 00 10 3C 		mtspr   ipc,r1
                		
                		; Allow pipeline time for IPC to update before RTI (there's no results
                		; forwarding on SPR's).
012B60 3F 00 00 00 		nop     
012B64 3F 00 00 00 		nop
012B68 02 E0 3F 6E 		rti
                	
                	
                	SSM_ISR:
012B6C 02 E0 3B 6E 	    rtd
                	
                	; -----------------------------------------------------------------------------
                	; Breakpoint routine.
                	; -----------------------------------------------------------------------------
                	
                	BPT_ISR:
012B70 FC 7C 00 00 	    ldi      sp,#CPU0_DBG_STACK
012B74 0A E0 01 E0 
012B78 02 00 6C 3C 	    mtspr    dbctrl,r0
012B7C 02 10 0E 3E 	    mfspr    r1,dpc
012B80 8C 10 FC FF 	    and      r1,r1,#-2        ; clear LSB
012B84 E7 E0 01 00 	    push     r1
012B88 95 10 40 00 	    subui    r1,r1,#32
012B8C E7 E0 01 00 	    push     r1
012B90 B9 74 0B 00 	    bsr      disassem20
012B94 B9 5A FE FF 		bsr		 KeybdGetCharWait
012B98 02 E0 3B 6E 	    rtd
                	.0001:
012B9C 3A 00 00 00 	    bra     .0001
                	
                		code
                		align	16                	
                	get_datetime:
012BA0 15 EF 21 00 		      	subui	sp,sp,#16
012BA4 E7 ED 01 00 		      	push 	bp
012BA8 02 BF 01 1A 		      	mov  	bp,sp
012BAC 15 EF 11 00 		      	subui	sp,sp,#8
012BB0 E7 E5 01 00 		      	push 	r11
012BB4 67 E6 01 00 		      	push 	r12
012BB8 E7 E6 01 00 		      	push 	r13
012BBC 67 E7 01 00 		      	push 	r14
012BC0 E7 E7 01 00 		      	push 	r15
012BC4 67 E8 01 00 		      	push 	r16
012BC8 E7 E8 01 00 		      	push 	r17
012BCC 0A B0 80 37 		      	ldi  	r11,#RTCC_BUF
012BD0 C6 CD A0 00 		      	lw   	r12,80[bp]
012BD4 C6 DD 90 00 		      	lw   	r13,72[bp]
012BD8 C6 ED 80 00 		      	lw   	r14,64[bp]
012BDC C6 FD 70 00 		      	lw   	r15,56[bp]
012BE0 C6 0D 61 00 		      	lw   	r16,48[bp]
012BE4 C6 1D 51 00 		      	lw   	r17,40[bp]
012BE8 BD 08 20 00 		      	beq  	r17,set_time_serial_2
012BEC C1 35 0C 00 		      	lbu  	r3,6[r11]
012BF0 82 31 00 20 		      	sxb  	r3,r3
012BF4 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012BF8 0A 30 A0 0F 		      	ldi  	r3,#2000
012BFC C6 4D F0 FF 		      	lw   	r4,-8[bp]
012C00 0C 42 1E 00 		      	and  	r4,r4,#15
012C04 C6 5D F0 FF 		      	lw   	r5,-8[bp]
012C08 8C 52 E0 01 		      	and  	r5,r5,#240
012C0C 82 52 08 78 		      	asri 	r5,r5,#4
012C10 87 52 14 00 		      	mul  	r5,r5,#10
012C14 02 42 0A 28 		      	addu 	r4,r4,r5
012C18 82 31 08 28 		      	addu 	r3,r3,r4
012C1C E3 3D F0 FF 		      	sw   	r3,-8[bp]
012C20 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012C24 E3 38 00 00 		      	sw   	r3,[r17]
                	set_time_serial_2:
012C28 3D 08 1C 00 		      	beq  	r16,set_time_serial_4
012C2C C1 35 08 00 		      	lbu  	r3,4[r11]
012C30 82 31 00 20 		      	sxb  	r3,r3
012C34 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012C38 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012C3C 8C 31 1E 00 		      	and  	r3,r3,#15
012C40 C6 4D F0 FF 		      	lw   	r4,-8[bp]
012C44 0C 42 20 00 		      	and  	r4,r4,#16
012C48 02 42 08 78 		      	asri 	r4,r4,#4
012C4C 07 42 14 00 		      	mul  	r4,r4,#10
012C50 82 31 08 28 		      	addu 	r3,r3,r4
012C54 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012C58 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012C5C 63 38 00 00 		      	sw   	r3,[r16]
                	set_time_serial_4:
012C60 BD 07 1C 00 		      	beq  	r15,set_time_serial_6
012C64 C1 35 0A 00 		      	lbu  	r3,5[r11]
012C68 82 31 00 20 		      	sxb  	r3,r3
012C6C E3 3D F0 FF 		      	sw   	r3,-8[bp]
012C70 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012C74 8C 31 1E 00 		      	and  	r3,r3,#15
012C78 C6 4D F0 FF 		      	lw   	r4,-8[bp]
012C7C 0C 42 60 00 		      	and  	r4,r4,#48
012C80 02 42 08 78 		      	asri 	r4,r4,#4
012C84 07 42 14 00 		      	mul  	r4,r4,#10
012C88 82 31 08 28 		      	addu 	r3,r3,r4
012C8C E3 3D F0 FF 		      	sw   	r3,-8[bp]
012C90 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012C94 E3 37 00 00 		      	sw   	r3,[r15]
                	set_time_serial_6:
012C98 3D 07 22 00 		      	beq  	r14,set_time_serial_8
012C9C C1 35 04 00 		      	lbu  	r3,2[r11]
012CA0 82 31 00 20 		      	sxb  	r3,r3
012CA4 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012CA8 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012CAC 8C 31 1E 00 		      	and  	r3,r3,#15
012CB0 C6 4D F0 FF 		      	lw   	r4,-8[bp]
012CB4 0C 42 60 00 		      	and  	r4,r4,#48
012CB8 02 42 08 78 		      	asri 	r4,r4,#4
012CBC 07 42 14 00 		      	mul  	r4,r4,#10
012CC0 82 31 08 28 		      	addu 	r3,r3,r4
012CC4 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012CC8 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012CCC 8C 31 7E 00 		      	and  	r3,r3,#63
012CD0 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012CD4 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012CD8 63 37 00 00 		      	sw   	r3,[r14]
                	set_time_serial_8:
012CDC BD 06 1C 00 		      	beq  	r13,set_time_serial_10
012CE0 C1 35 02 00 		      	lbu  	r3,1[r11]
012CE4 82 31 00 20 		      	sxb  	r3,r3
012CE8 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012CEC C6 3D F0 FF 		      	lw   	r3,-8[bp]
012CF0 8C 31 1E 00 		      	and  	r3,r3,#15
012CF4 C6 4D F0 FF 		      	lw   	r4,-8[bp]
012CF8 0C 42 E0 00 		      	and  	r4,r4,#112
012CFC 02 42 08 78 		      	asri 	r4,r4,#4
012D00 07 42 14 00 		      	mul  	r4,r4,#10
012D04 82 31 08 28 		      	addu 	r3,r3,r4
012D08 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012D0C C6 3D F0 FF 		      	lw   	r3,-8[bp]
012D10 E3 36 00 00 		      	sw   	r3,[r13]
                	set_time_serial_10:
012D14 3D 06 1C 00 		      	beq  	r12,set_time_serial_12
012D18 C1 35 00 00 		      	lbu  	r3,[r11]
012D1C 82 31 00 20 		      	sxb  	r3,r3
012D20 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012D24 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012D28 8C 31 1E 00 		      	and  	r3,r3,#15
012D2C C6 4D F0 FF 		      	lw   	r4,-8[bp]
012D30 0C 42 E0 00 		      	and  	r4,r4,#112
012D34 02 42 08 78 		      	asri 	r4,r4,#4
012D38 07 42 14 00 		      	mul  	r4,r4,#10
012D3C 82 31 08 28 		      	addu 	r3,r3,r4
012D40 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012D44 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012D48 63 36 00 00 		      	sw   	r3,[r12]
                	set_time_serial_12:
                	set_time_serial_14:
012D4C 57 1F 11 00 		      	pop  	r17
012D50 57 0F 11 00 		      	pop  	r16
012D54 57 FF 10 00 		      	pop  	r15
012D58 57 EF 10 00 		      	pop  	r14
012D5C 57 DF 10 00 		      	pop  	r13
012D60 57 CF 10 00 		      	pop  	r12
012D64 57 BF 10 00 		      	pop  	r11
012D68 82 ED 01 1A 		      	mov  	sp,bp
012D6C 57 BF 11 00 		      	pop  	bp
012D70 37 FF 21 00 		      	rtl  	#16
                	ToJul:
012D74 15 EF 21 00 		      	subui	sp,sp,#16
012D78 E7 ED 01 00 		      	push 	bp
012D7C 02 BF 01 1A 		      	mov  	bp,sp
012D80 15 EF 41 00 		      	subui	sp,sp,#32
012D84 C6 3D 50 00 		      	lw   	r3,40[bp]
012D88 E3 3D E0 FF 		      	sw   	r3,-16[bp]
012D8C C6 3D 60 00 		      	lw   	r3,48[bp]
012D90 E3 3D D0 FF 		      	sw   	r3,-24[bp]
012D94 C6 3D 70 00 		      	lw   	r3,56[bp]
012D98 E3 3D C0 FF 		      	sw   	r3,-32[bp]
012D9C FC FF FF FF 		      	ldi  	r3,#-32075
012DA0 0A 30 6A 05 
012DA4 C6 4D C0 FF 		      	lw   	r4,-32[bp]
012DA8 7C 6B 00 00 		      	ldi  	r5,#7012800
012DAC 0A 50 80 03 
012DB0 C6 6D E0 FF 		      	lw   	r6,-16[bp]
012DB4 C6 7D D0 FF 		      	lw   	r7,-24[bp]
012DB8 95 73 1C 00 		      	subu 	r7,r7,#14
012DBC 88 73 18 00 		      	divs 	r7,r7,#12
012DC0 02 63 0E 28 		      	addu 	r6,r6,r7
012DC4 07 63 6A 0B 		      	mul  	r6,r6,#1461
012DC8 82 52 0C 28 		      	addu 	r5,r5,r6
012DCC 82 52 04 78 		      	asri 	r5,r5,#2
012DD0 02 42 0A 28 		      	addu 	r4,r4,r5
012DD4 0A 50 44 FA 		      	ldi  	r5,#-734
012DD8 C6 6D D0 FF 		      	lw   	r6,-24[bp]
012DDC C6 7D D0 FF 		      	lw   	r7,-24[bp]
012DE0 95 73 1C 00 		      	subu 	r7,r7,#14
012DE4 88 73 18 00 		      	divs 	r7,r7,#12
012DE8 87 73 18 00 		      	mul  	r7,r7,#12
012DEC 02 63 0E 2A 		      	subu 	r6,r6,r7
012DF0 07 63 DE 02 		      	mul  	r6,r6,#367
012DF4 82 52 0C 28 		      	addu 	r5,r5,r6
012DF8 88 52 18 00 		      	divs 	r5,r5,#12
012DFC 02 42 0A 28 		      	addu 	r4,r4,r5
012E00 0A 50 48 26 		      	ldi  	r5,#4900
012E04 C6 6D E0 FF 		      	lw   	r6,-16[bp]
012E08 C6 7D D0 FF 		      	lw   	r7,-24[bp]
012E0C 95 73 1C 00 		      	subu 	r7,r7,#14
012E10 88 73 18 00 		      	divs 	r7,r7,#12
012E14 02 63 0E 28 		      	addu 	r6,r6,r7
012E18 82 52 0C 28 		      	addu 	r5,r5,r6
012E1C 88 52 C8 00 		      	divs 	r5,r5,#100
012E20 87 52 06 00 		      	mul  	r5,r5,#3
012E24 82 52 04 78 		      	asri 	r5,r5,#2
012E28 02 42 0A 2A 		      	subu 	r4,r4,r5
012E2C 82 31 08 28 		      	addu 	r3,r3,r4
012E30 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012E34 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012E38 82 11 00 1A 		      	mov  	r1,r3
                	set_time_serial_17:
012E3C 82 ED 01 1A 		      	mov  	sp,bp
012E40 57 BF 11 00 		      	pop  	bp
012E44 37 FF 21 00 		      	rtl  	#16
                	set_time_serial:
012E48 E7 EF 01 00 		      	push 	lr
012E4C 67 EE 01 00 		      	push 	xlr
012E50 E7 ED 01 00 		      	push 	bp
012E54 7C 01 00 00 		      	ldi  	xlr,#set_time_serial_19
012E58 0A C0 F1 5D 
012E5C 02 BF 01 1A 		      	mov  	bp,sp
012E60 15 EF 91 00 		      	subui	sp,sp,#72
012E64 E5 ED 81 FF 		      	pea  	-64[bp]
012E68 E5 ED 91 FF 		      	pea  	-56[bp]
012E6C E5 ED A1 FF 		      	pea  	-48[bp]
012E70 E5 ED B1 FF 		      	pea  	-40[bp]
012E74 E5 ED C1 FF 		      	pea  	-32[bp]
012E78 E5 ED D1 FF 		      	pea  	-24[bp]
012E7C B9 A4 FF FF 		      	bsr  	get_datetime
012E80 14 EF 61 00 		      	addui	sp,sp,#48
012E84 C6 3D 80 FF 		      	lw   	r3,-64[bp]
012E88 82 31 14 70 		      	asli 	r3,r3,#10
012E8C C6 4D 90 FF 		      	lw   	r4,-56[bp]
012E90 FC 00 00 00 		      	mul  	r4,r4,#61440
012E94 07 42 00 E0 
012E98 82 31 08 28 		      	addu 	r3,r3,r4
012E9C C6 4D A0 FF 		      	lw   	r4,-48[bp]
012EA0 7C 38 00 00 		      	mul  	r4,r4,#3686400
012EA4 07 42 00 80 
012EA8 82 31 08 28 		      	addu 	r3,r3,r4
012EAC E7 E1 01 00 		      	push 	r3
012EB0 E6 ED B1 FF 		      	push 	-40[bp]
012EB4 E6 ED C1 FF 		      	push 	-32[bp]
012EB8 E6 ED D1 FF 		      	push 	-24[bp]
012EBC 39 D7 FF FF 		      	bsr  	ToJul
012EC0 14 EF 31 00 		      	addui	sp,sp,#24
012EC4 57 3F 10 00 		      	pop  	r3
012EC8 82 40 00 1A 		      	mov  	r4,r1
012ECC 7C 46 05 00 		      	mul  	r4,r4,#88473600
012ED0 07 42 00 00 
012ED4 82 31 08 28 		      	addu 	r3,r3,r4
012ED8 63 30 00 22 		      	sw   	r3,Milliseconds
012EDC C6 3D E0 FF 		      	lw   	r3,-16[bp]
012EE0 82 11 00 1A 		      	mov  	r1,r3
                	set_time_serial_20:
012EE4 82 ED 01 1A 		      	mov  	sp,bp
012EE8 57 BF 11 00 		      	pop  	bp
012EEC 57 CF 11 00 		      	pop  	xlr
012EF0 57 FF 11 00 		      	pop  	lr
012EF4 37 FF 01 00 		      	rtl  	#0
                	set_time_serial_19:
012EF8 C6 FD 11 00 		      	lw   	lr,8[bp]
012EFC E3 FD 21 00 		      	sw   	lr,16[bp]
012F00 BA FC FF FF 		      	bra  	set_time_serial_20
                	        code
                	
                	pSpriteController:
012F04 00 D0 DA FF 		dw	-2437120
012F08 FF FF FF FF 
                	
                	sprite_demo:
012F0C 15 EF 21 00 		      	subui	sp,sp,#16
012F10 E7 ED 01 00 		      	push 	bp
012F14 02 BF 01 1A 		      	mov  	bp,sp
012F18 15 EF 31 00 		      	subui	sp,sp,#24
012F1C E7 E5 01 00 		      	push 	r11
012F20 67 E6 01 00 		      	push 	r12
012F24 E7 E6 01 00 		      	push 	r13
012F28 FC 00 00 00 		      	ldi  	r11,#sprites
012F2C 0A B0 00 A0 
012F30 7C DC FF FF 		      	ldi  	r12,#-2356224
012F34 0A C0 00 18 
012F38 7C D8 FF FF 		      	ldi  	r13,#-2621440
012F3C 0A D0 00 00 
012F40 E3 0D F0 FF 		      	sw   	r0,-8[bp]
                	sprite_demo_4:
012F44 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012F48 86 31 40 00 		      	cmp  	r3,r3,#32
012F4C BD 31 18 00 		      	bge  	r3,sprite_demo_5
012F50 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012F54 82 31 04 70 		      	asli 	r3,r3,#2
012F58 82 31 04 70 		      	asli 	r3,r3,#2
012F5C 7C 01 00 00 		      	lw   	r4,pSpriteController
012F60 46 40 08 5E 
012F64 82 31 08 28 		      	addu 	r3,r3,r4
012F68 C5 41 08 00 		      	lhu  	r4,4[r3]
012F6C 0D 42 98 01 		      	ori  	r4,r4,#204
012F70 E2 41 08 00 		      	sh   	r4,4[r3]
                	sprite_demo_6:
012F74 E4 1D F0 FF 		      	inc  	-8[bp],#1
012F78 BA F9 FF FF 		      	bra  	sprite_demo_4
                	sprite_demo_5:
012F7C E3 0D F0 FF 		      	sw   	r0,-8[bp]
                	sprite_demo_7:
012F80 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012F84 7C 00 00 00 		      	cmp  	r3,r3,#16384
012F88 86 31 00 80 
012F8C BD 31 0E 00 		      	bge  	r3,sprite_demo_8
012F90 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012F94 82 31 04 70 		      	asli 	r3,r3,#2
012F98 45 46 00 00 		      	lhu  	r4,[r12]
012F9C EA 46 06 00 		      	sh   	r4,0[r13+r3]
                	sprite_demo_9:
012FA0 E4 1D F0 FF 		      	inc  	-8[bp],#1
012FA4 BA FB FF FF 		      	bra  	sprite_demo_7
                	sprite_demo_8:
012FA8 E3 0D F0 FF 		      	sw   	r0,-8[bp]
                	sprite_demo_10:
012FAC C6 3D F0 FF 		      	lw   	r3,-8[bp]
012FB0 86 31 40 00 		      	cmp  	r3,r3,#32
012FB4 BD 31 38 00 		      	bge  	r3,sprite_demo_11
012FB8 46 36 00 00 		      	lw   	r3,[r12]
012FBC 89 31 A8 0A 		      	mod  	r3,r3,#1364
012FC0 C6 4D F0 FF 		      	lw   	r4,-8[bp]
012FC4 02 42 0A 70 		      	asli 	r4,r4,#5
012FC8 EB 35 08 00 		      	sw   	r3,0[r11+r4]
012FCC 46 36 00 00 		      	lw   	r3,[r12]
012FD0 89 31 00 06 		      	mod  	r3,r3,#768
012FD4 C6 4D F0 FF 		      	lw   	r4,-8[bp]
012FD8 02 42 0A 70 		      	asli 	r4,r4,#5
012FDC 02 42 16 28 		      	addu 	r4,r4,r11
012FE0 63 32 10 00 		      	sw   	r3,8[r4]
012FE4 46 36 00 00 		      	lw   	r3,[r12]
012FE8 8C 31 0E 00 		      	and  	r3,r3,#7
012FEC 95 31 08 00 		      	subu 	r3,r3,#4
012FF0 C6 4D F0 FF 		      	lw   	r4,-8[bp]
012FF4 02 42 0A 70 		      	asli 	r4,r4,#5
012FF8 02 42 16 28 		      	addu 	r4,r4,r11
012FFC 63 32 20 00 		      	sw   	r3,16[r4]
013000 46 36 00 00 		      	lw   	r3,[r12]
013004 8C 31 0E 00 		      	and  	r3,r3,#7
013008 95 31 08 00 		      	subu 	r3,r3,#4
01300C C6 4D F0 FF 		      	lw   	r4,-8[bp]
013010 02 42 0A 70 		      	asli 	r4,r4,#5
013014 02 42 16 28 		      	addu 	r4,r4,r11
013018 63 32 30 00 		      	sw   	r3,24[r4]
                	sprite_demo_12:
01301C E4 1D F0 FF 		      	inc  	-8[bp],#1
013020 BA F1 FF FF 		      	bra  	sprite_demo_10
                	sprite_demo_11:
                	sprite_demo_13:
013024 0A 30 02 00 		      	ldi  	r3,#1
013028 BD 01 68 00 		      	beq  	r3,sprite_demo_14
01302C E3 0D F0 FF 		      	sw   	r0,-8[bp]
                	sprite_demo_15:
013030 C6 3D F0 FF 		      	lw   	r3,-8[bp]
013034 86 31 40 00 		      	cmp  	r3,r3,#32
013038 BD 31 58 00 		      	bge  	r3,sprite_demo_16
01303C C6 3D F0 FF 		      	lw   	r3,-8[bp]
013040 82 31 0A 70 		      	asli 	r3,r3,#5
013044 CE 35 06 00 		      	lw   	r3,0[r11+r3]
013048 C6 4D F0 FF 		      	lw   	r4,-8[bp]
01304C 02 42 0A 70 		      	asli 	r4,r4,#5
013050 02 42 16 28 		      	addu 	r4,r4,r11
013054 46 42 20 00 		      	lw   	r4,16[r4]
013058 82 31 08 28 		      	addu 	r3,r3,r4
01305C 8C 31 FE 07 		      	and  	r3,r3,#1023
013060 C6 4D F0 FF 		      	lw   	r4,-8[bp]
013064 02 42 0A 70 		      	asli 	r4,r4,#5
013068 EB 35 08 00 		      	sw   	r3,0[r11+r4]
01306C C6 3D F0 FF 		      	lw   	r3,-8[bp]
013070 82 31 0A 70 		      	asli 	r3,r3,#5
013074 82 31 16 28 		      	addu 	r3,r3,r11
013078 C6 31 10 00 		      	lw   	r3,8[r3]
01307C C6 4D F0 FF 		      	lw   	r4,-8[bp]
013080 02 42 0A 70 		      	asli 	r4,r4,#5
013084 02 42 16 28 		      	addu 	r4,r4,r11
013088 46 42 30 00 		      	lw   	r4,24[r4]
01308C 82 31 08 28 		      	addu 	r3,r3,r4
013090 8C 31 FE 03 		      	and  	r3,r3,#511
013094 C6 4D F0 FF 		      	lw   	r4,-8[bp]
013098 02 42 0A 70 		      	asli 	r4,r4,#5
01309C 02 42 16 28 		      	addu 	r4,r4,r11
0130A0 63 32 10 00 		      	sw   	r3,8[r4]
0130A4 C6 3D F0 FF 		      	lw   	r3,-8[bp]
0130A8 82 31 0A 70 		      	asli 	r3,r3,#5
0130AC CE 35 06 00 		      	lw   	r3,0[r11+r3]
0130B0 C6 4D F0 FF 		      	lw   	r4,-8[bp]
0130B4 02 42 0A 70 		      	asli 	r4,r4,#5
0130B8 02 42 16 28 		      	addu 	r4,r4,r11
0130BC 46 42 10 00 		      	lw   	r4,8[r4]
0130C0 02 42 20 70 		      	asli 	r4,r4,#16
0130C4 82 31 08 28 		      	addu 	r3,r3,r4
0130C8 C6 4D F0 FF 		      	lw   	r4,-8[bp]
0130CC 02 42 04 70 		      	asli 	r4,r4,#2
0130D0 02 42 04 70 		      	asli 	r4,r4,#2
0130D4 7C 01 00 00 		      	lw   	r5,pSpriteController
0130D8 46 50 08 5E 
0130DC EA 32 08 00 		      	sh   	r3,0[r5+r4]
                	sprite_demo_17:
0130E0 E4 1D F0 FF 		      	inc  	-8[bp],#1
0130E4 BA E9 FF FF 		      	bra  	sprite_demo_15
                	sprite_demo_16:
0130E8 7C 0F 00 00 		      	     	            ldi  r1,#1000000
0130EC 0A 10 80 84 
0130F0 39 11 FF FF 	            bsr  MicroDelay
                	        
0130F4 3A E6 FF FF 		      	bra  	sprite_demo_13
                	sprite_demo_14:
                	sprite_demo_18:
0130F8 57 DF 10 00 		      	pop  	r13
0130FC 57 CF 10 00 		      	pop  	r12
013100 57 BF 10 00 		      	pop  	r11
013104 82 ED 01 1A 		      	mov  	sp,bp
013108 57 BF 11 00 		      	pop  	bp
01310C 37 FF 21 00 		      	rtl  	#16
                	
                	; error codes
                	E_Ok		=		0x00
                	E_Arg		=		0x01
                	E_BadMbx	=		0x04
                	E_QueFull	=		0x05
                	E_NoThread	=		0x06
                	E_NotAlloc	=		0x09
                	E_NoMsg		=		0x0b
                	E_Timeout	=		0x10
                	E_BadAlarm	=		0x11
                	E_NotOwner	=		0x12
                	E_QueStrategy =		0x13
                	E_BadDevNum	=		0x18
                	E_DCBInUse	=		0x19
                	; Device driver errors
                	E_BadDevNum	=		0x20
                	E_NoDev		=		0x21
                	E_BadDevOp	=		0x22
                	E_ReadError	=		0x23
                	E_WriteError =		0x24
                	E_BadBlockNum	=	0x25
                	E_TooManyBlocks	=	0x26
                	
                	; resource errors
                	E_NoMoreMbx	=		0x40
                	E_NoMoreMsgBlks	=	0x41
                	E_NoMoreAlarmBlks	=0x44
                	E_NoMoreTCBs	=	0x45
                	E_NoMem		= 12
                	
                	; task status
                	TS_NONE     =0
                	TS_TIMEOUT	=1
                	TS_WAITMSG	=2
                	TS_PREEMPT	=4
                	TS_RUNNING	=8
                	TS_READY	=16
                	TS_SLEEP	=32
                	
                	TS_TIMEOUT_BIT	=0
                	TS_WAITMSG_BIT	=1
                	TS_RUNNING_BIT	=3
                	TS_READY_BIT	=4
                	
                	PRI_HIGHEST	=0
                	PRI_HIGH	=1
                	PRI_NORMAL	=3
                	PRI_LOW		=5
                	PRI_LOWEST	=7
                	
                	
                	NR_TCB		EQU		256
                	TCB_BackLink    EQU     0
                	TCB_r1          EQU     8
                	TCB_r2          EQU     $10
                	TCB_r3          EQU     $18
                	TCB_r4          EQU     $20
                	TCB_r5          EQU     $28
                	TCB_r6          EQU     $30
                	TCB_r7          EQU     $38
                	TCB_r8          EQU     $40
                	TCB_r9          EQU     $48
                	TCB_r10         EQU     $50
                	TCB_r11         EQU     $58
                	TCB_r12         EQU     $60
                	TCB_r13         EQU     $68
                	TCB_r14         EQU     $70
                	TCB_r15         EQU     $78
                	TCB_r16         EQU     $80
                	TCB_r17         EQU     $88
                	TCB_r18         EQU     $90
                	TCB_r19         EQU     $98
                	TCB_r20         EQU     $A0
                	TCB_r21         EQU     $A8
                	TCB_r22         EQU     $B0
                	TCB_r23         EQU     $B8
                	TCB_r24         EQU     $C0
                	TCB_r25         EQU     $C8
                	TCB_r26         EQU     $D0
                	TCB_r27         EQU     $D8
                	TCB_r28         EQU     $E0
                	TCB_r29         EQU     $E8
                	TCB_r30         EQU     $F0
                	TCB_r31         EQU     $F8
                	
                	TCB_SP0Save		EQU		0x100
                	TCB_SP1Save		EQU		0x108
                	TCB_SP2Save		EQU		0x110
                	TCB_SP3Save		EQU		0x118
                	TCB_SP4Save		EQU		0x120
                	TCB_SP5Save		EQU		0x128
                	TCB_SP6Save		EQU		0x130
                	TCB_SP7Save		EQU		0x138
                	TCB_SP8Save		EQU		0x140
                	TCB_SP9Save		EQU		0x148
                	TCB_SP10Save	EQU		0x150
                	TCB_SP11Save	EQU		0x158
                	TCB_SP12Save	EQU		0x160
                	TCB_SP13Save	EQU		0x168
                	TCB_SP14Save	EQU		0x170
                	TCB_SP15Save	EQU		0x178
                	
                	TCB_IPC         EQU     0x180
                	TCB_DPC         EQU     0x188
                	TCB_EPC         EQU     0x190
                	TCB_ISP         EQU     0x198
                	TCB_DSP         EQU     0x1A0
                	TCB_ESP         EQU     0x1A8
                	TCB_CR0         EQU     0x1B0
                	
                	TCB_NextRdy     EQU     $200
                	TCB_PrevRdy     EQU     $208
                	TCB_Status      EQU     $210
                	TCB_Priority    EQU     $212
                	TCB_hJCB        EQU     $214
                	TCB_NextFree    EQU     $218
                	TCB_NextTo      EQU     $228
                	TCB_PrevTo      EQU     $230
                	TCB_mbq_next    EQU     $238
                	TCB_mbq_prev    EQU     $240
                	TCB_MSG_D1      EQU     $248
                	TCB_MSG_D2      EQU     $250
                	TCB_hWaitMbx    EQU     $258
                	TCB_MbxList     EQU     $260
                	TCB_StackTop    EQU     $268
                	TCB_errno       EQU     $270
                	TCB_Timeout     EQU     $278
                	TCB_Affinity    EQU     $280
                	TCB_BIOS_Stack  EQU     $288
                	TCB_SYS_Stack   EQU     $290
                	TCB_Size	    EQU	    $400
                	TCB_LogSize     EQU     10
                	
                	; Mailboxes, room for 2048
                	;			.bss
                	;			.org		0x07E40000
                	NR_MBX		EQU		2048
                	MBX_LINK		EQU     $00       ; link to next mailbox in list (free list)
                	MBX_TQ_HEAD		EQU     $08       ; head of task queue
                	MBX_TQ_TAIL		EQU     $18
                	MBX_MQ_HEAD		EQU     $20	      ; head of message queue
                	MBX_MQ_TAIL		EQU     $28
                	MBX_TQ_COUNT	EQU     $30	      ; count of queued threads
                	MBX_MQ_SIZE		EQU     $32       ; number of messages that may be queued
                	MBX_MQ_COUNT	EQU     $34       ; count of messages that are queued
                	MBX_OWNER		EQU     $36	      ; job handle of mailbox owner
                	MBX_MQ_STRATEGY	EQU     $37	      ; message queueing strategy
                	MBX_MQ_MISSED	EQU     $38	      ; number of messages dropped from queue
                	MBX_Size        EQU     $40
                	
                	MQS_UNLIMITED    EQU     0
                	MQS_OLDEST       EQU     1
                	MQS_NEWEST       EQU     2
                	
                	; Messages, room for 64kW (16,384) messages
                	;			.bss
                	;			.org		0x07E80000
                	NR_MSG		EQU		32768
                	MSG_LINK	EQU     $00	        ; link to next message in queue or free list
                	MSG_D1		EQU     $08         ; message data 1
                	MSG_D2		EQU     $10	        ; message data 2
                	MSG_TYPE	EQU     $18	        ; message type
                	MSG_Size    EQU     $20
                	
                	MT_SEMA		EQU		-1
                	MT_IRQ		EQU		-16
                	MT_GETCHAR	EQU		-17
                	
                	
                	NR_JCB			EQU		51
                	JCB_Number		EQU		0
                	JCB_Name		EQU		4		; 32 bytes (1 len + 31)
                	JCB_MemGroup0	EQU		0x24	; memory map number associated with job
                	JCB_MemGroup1   EQU     0x26
                	JCB_MemGroup2   EQU     0x28
                	JCB_MemGroup3   EQU     0x2A
                	JCB_MemGroup4   EQU     0x2C
                	JCB_MemGroup5   EQU     0x2E
                	JCB_pCode		EQU		0x30
                	JCB_nCode		EQU		0x38	; size of code
                	JCB_pData		EQU		0x40
                	JCB_nData		EQU		0x48	; size of data
                	JCB_pStack		EQU		0x50
                	JCB_nStack		EQU		0x58
                	JCB_UserName	EQU		0x60	; 32 bytes
                	JCB_Path		EQU		0x80	; 256 bytes
                	JCB_ExitRF		EQU		0x180	; 256 bytes
                	JCB_CmdLine		EQU		0x280	; 256 bytes		
                	JCB_SysIn		EQU		0x380	; 48 chars
                	JCB_SysOut		EQU		0x3B0	; 48 chars
                	JCB_ExitError	EQU		0x3E0
                	JCB_pVidMem		EQU		0x3E8		; pointer to video memory
                	JCB_pVirtVid	EQU		0x3F8		; pointer to virtual video buffer
                	JCB_VideoMode	EQU		0x408
                	JCB_VideoRows	EQU		0x40A
                	JCB_VideoCols	EQU		0x40B
                	JCB_CursorRow	EQU		0x40C
                	JCB_CursorCol	EQU		0x40D
                	JCB_CursorOn	EQU		0x40E
                	JCB_CursorFlash	EQU		0x40F
                	JCB_CursorType	EQU		0x410
                	JCB_NormAttr	EQU		0x414
                	JCB_CurrAttr	EQU		0x418
                	JCB_ScrlCnt		EQU		0x41C
                	JCB_fVidPause	EQU		0x41E
                	JCB_Next		EQU		0x420
                	JCB_iof_next	EQU		0x428		; I/O focus list
                	JCB_iof_prev	EQU		0x430
                	JCB_KeybdHead	EQU		0x438
                	JCB_KeybdTail	EQU		0x440
                	JCB_KeybdEcho	EQU		0x448
                	JCB_KeybdBad	EQU		0x449
                	JCB_KeybdAck	EQU		0x44A
                	JCB_KeybdLocks	EQU		0x44C
                	JCB_KeybdBuffer	EQU		0x450		; buffer is 16 words (chars = words)
                	JCB_esc			EQU		0x470		; escape flag for DisplayChar processing
                	JCB_Size		EQU		0x500
                	JCB_LogSize		EQU		11
                	
                	BITMAP_SCREEN1  EQU     $400000     ; bitmap graphics screen area (4MB)
                	BITMAP_SCREEN2  EQU     $800000     ; bitmap graphics screen area (4MB)
                	VAR_Area        EQU     $C00000     ; 64k block for OS vars
                	    code
013110 00 00 00 00 		org		$14000
013114 00 00 00 00 
013118 00 00 00 00 
01311C 00 00 00 00 
013120 00 00 00 00 
013124 00 00 00 00 
013128 00 00 00 00 
01312C 00 00 00 00 
013130 00 00 00 00 
013134 00 00 00 00 
013138 00 00 00 00 
01313C 00 00 00 00 
013140 00 00 00 00 
013144 00 00 00 00 
013148 00 00 00 00 
01314C 00 00 00 00 
013150 00 00 00 00 
013154 00 00 00 00 
013158 00 00 00 00 
01315C 00 00 00 00 
013160 00 00 00 00 
013164 00 00 00 00 
013168 00 00 00 00 
01316C 00 00 00 00 
013170 00 00 00 00 
013174 00 00 00 00 
013178 00 00 00 00 
01317C 00 00 00 00 
013180 00 00 00 00 
013184 00 00 00 00 
013188 00 00 00 00 
01318C 00 00 00 00 
013190 00 00 00 00 
013194 00 00 00 00 
013198 00 00 00 00 
01319C 00 00 00 00 
0131A0 00 00 00 00 
0131A4 00 00 00 00 
0131A8 00 00 00 00 
0131AC 00 00 00 00 
0131B0 00 00 00 00 
0131B4 00 00 00 00 
0131B8 00 00 00 00 
0131BC 00 00 00 00 
0131C0 00 00 00 00 
0131C4 00 00 00 00 
0131C8 00 00 00 00 
0131CC 00 00 00 00 
0131D0 00 00 00 00 
0131D4 00 00 00 00 
0131D8 00 00 00 00 
0131DC 00 00 00 00 
0131E0 00 00 00 00 
0131E4 00 00 00 00 
0131E8 00 00 00 00 
0131EC 00 00 00 00 
0131F0 00 00 00 00 
0131F4 00 00 00 00 
0131F8 00 00 00 00 
0131FC 00 00 00 00 
013200 00 00 00 00 
013204 00 00 00 00 
013208 00 00 00 00 
01320C 00 00 00 00 
013210 00 00 00 00 
013214 00 00 00 00 
013218 00 00 00 00 
01321C 00 00 00 00 
013220 00 00 00 00 
013224 00 00 00 00 
013228 00 00 00 00 
01322C 00 00 00 00 
013230 00 00 00 00 
013234 00 00 00 00 
013238 00 00 00 00 
01323C 00 00 00 00 
013240 00 00 00 00 
013244 00 00 00 00 
013248 00 00 00 00 
01324C 00 00 00 00 
013250 00 00 00 00 
013254 00 00 00 00 
013258 00 00 00 00 
01325C 00 00 00 00 
013260 00 00 00 00 
013264 00 00 00 00 
013268 00 00 00 00 
01326C 00 00 00 00 
013270 00 00 00 00 
013274 00 00 00 00 
013278 00 00 00 00 
01327C 00 00 00 00 
013280 00 00 00 00 
013284 00 00 00 00 
013288 00 00 00 00 
01328C 00 00 00 00 
013290 00 00 00 00 
013294 00 00 00 00 
013298 00 00 00 00 
01329C 00 00 00 00 
0132A0 00 00 00 00 
0132A4 00 00 00 00 
0132A8 00 00 00 00 
0132AC 00 00 00 00 
0132B0 00 00 00 00 
0132B4 00 00 00 00 
0132B8 00 00 00 00 
0132BC 00 00 00 00 
0132C0 00 00 00 00 
0132C4 00 00 00 00 
0132C8 00 00 00 00 
0132CC 00 00 00 00 
0132D0 00 00 00 00 
0132D4 00 00 00 00 
0132D8 00 00 00 00 
0132DC 00 00 00 00 
0132E0 00 00 00 00 
0132E4 00 00 00 00 
0132E8 00 00 00 00 
0132EC 00 00 00 00 
0132F0 00 00 00 00 
0132F4 00 00 00 00 
0132F8 00 00 00 00 
0132FC 00 00 00 00 
013300 00 00 00 00 
013304 00 00 00 00 
013308 00 00 00 00 
01330C 00 00 00 00 
013310 00 00 00 00 
013314 00 00 00 00 
013318 00 00 00 00 
01331C 00 00 00 00 
013320 00 00 00 00 
013324 00 00 00 00 
013328 00 00 00 00 
01332C 00 00 00 00 
013330 00 00 00 00 
013334 00 00 00 00 
013338 00 00 00 00 
01333C 00 00 00 00 
013340 00 00 00 00 
013344 00 00 00 00 
013348 00 00 00 00 
01334C 00 00 00 00 
013350 00 00 00 00 
013354 00 00 00 00 
013358 00 00 00 00 
01335C 00 00 00 00 
013360 00 00 00 00 
013364 00 00 00 00 
013368 00 00 00 00 
01336C 00 00 00 00 
013370 00 00 00 00 
013374 00 00 00 00 
013378 00 00 00 00 
01337C 00 00 00 00 
013380 00 00 00 00 
013384 00 00 00 00 
013388 00 00 00 00 
01338C 00 00 00 00 
013390 00 00 00 00 
013394 00 00 00 00 
013398 00 00 00 00 
01339C 00 00 00 00 
0133A0 00 00 00 00 
0133A4 00 00 00 00 
0133A8 00 00 00 00 
0133AC 00 00 00 00 
0133B0 00 00 00 00 
0133B4 00 00 00 00 
0133B8 00 00 00 00 
0133BC 00 00 00 00 
0133C0 00 00 00 00 
0133C4 00 00 00 00 
0133C8 00 00 00 00 
0133CC 00 00 00 00 
0133D0 00 00 00 00 
0133D4 00 00 00 00 
0133D8 00 00 00 00 
0133DC 00 00 00 00 
0133E0 00 00 00 00 
0133E4 00 00 00 00 
0133E8 00 00 00 00 
0133EC 00 00 00 00 
0133F0 00 00 00 00 
0133F4 00 00 00 00 
0133F8 00 00 00 00 
0133FC 00 00 00 00 
013400 00 00 00 00 
013404 00 00 00 00 
013408 00 00 00 00 
01340C 00 00 00 00 
013410 00 00 00 00 
013414 00 00 00 00 
013418 00 00 00 00 
01341C 00 00 00 00 
013420 00 00 00 00 
013424 00 00 00 00 
013428 00 00 00 00 
01342C 00 00 00 00 
013430 00 00 00 00 
013434 00 00 00 00 
013438 00 00 00 00 
01343C 00 00 00 00 
013440 00 00 00 00 
013444 00 00 00 00 
013448 00 00 00 00 
01344C 00 00 00 00 
013450 00 00 00 00 
013454 00 00 00 00 
013458 00 00 00 00 
01345C 00 00 00 00 
013460 00 00 00 00 
013464 00 00 00 00 
013468 00 00 00 00 
01346C 00 00 00 00 
013470 00 00 00 00 
013474 00 00 00 00 
013478 00 00 00 00 
01347C 00 00 00 00 
013480 00 00 00 00 
013484 00 00 00 00 
013488 00 00 00 00 
01348C 00 00 00 00 
013490 00 00 00 00 
013494 00 00 00 00 
013498 00 00 00 00 
01349C 00 00 00 00 
0134A0 00 00 00 00 
0134A4 00 00 00 00 
0134A8 00 00 00 00 
0134AC 00 00 00 00 
0134B0 00 00 00 00 
0134B4 00 00 00 00 
0134B8 00 00 00 00 
0134BC 00 00 00 00 
0134C0 00 00 00 00 
0134C4 00 00 00 00 
0134C8 00 00 00 00 
0134CC 00 00 00 00 
0134D0 00 00 00 00 
0134D4 00 00 00 00 
0134D8 00 00 00 00 
0134DC 00 00 00 00 
0134E0 00 00 00 00 
0134E4 00 00 00 00 
0134E8 00 00 00 00 
0134EC 00 00 00 00 
0134F0 00 00 00 00 
0134F4 00 00 00 00 
0134F8 00 00 00 00 
0134FC 00 00 00 00 
013500 00 00 00 00 
013504 00 00 00 00 
013508 00 00 00 00 
01350C 00 00 00 00 
013510 00 00 00 00 
013514 00 00 00 00 
013518 00 00 00 00 
01351C 00 00 00 00 
013520 00 00 00 00 
013524 00 00 00 00 
013528 00 00 00 00 
01352C 00 00 00 00 
013530 00 00 00 00 
013534 00 00 00 00 
013538 00 00 00 00 
01353C 00 00 00 00 
013540 00 00 00 00 
013544 00 00 00 00 
013548 00 00 00 00 
01354C 00 00 00 00 
013550 00 00 00 00 
013554 00 00 00 00 
013558 00 00 00 00 
01355C 00 00 00 00 
013560 00 00 00 00 
013564 00 00 00 00 
013568 00 00 00 00 
01356C 00 00 00 00 
013570 00 00 00 00 
013574 00 00 00 00 
013578 00 00 00 00 
01357C 00 00 00 00 
013580 00 00 00 00 
013584 00 00 00 00 
013588 00 00 00 00 
01358C 00 00 00 00 
013590 00 00 00 00 
013594 00 00 00 00 
013598 00 00 00 00 
01359C 00 00 00 00 
0135A0 00 00 00 00 
0135A4 00 00 00 00 
0135A8 00 00 00 00 
0135AC 00 00 00 00 
0135B0 00 00 00 00 
0135B4 00 00 00 00 
0135B8 00 00 00 00 
0135BC 00 00 00 00 
0135C0 00 00 00 00 
0135C4 00 00 00 00 
0135C8 00 00 00 00 
0135CC 00 00 00 00 
0135D0 00 00 00 00 
0135D4 00 00 00 00 
0135D8 00 00 00 00 
0135DC 00 00 00 00 
0135E0 00 00 00 00 
0135E4 00 00 00 00 
0135E8 00 00 00 00 
0135EC 00 00 00 00 
0135F0 00 00 00 00 
0135F4 00 00 00 00 
0135F8 00 00 00 00 
0135FC 00 00 00 00 
013600 00 00 00 00 
013604 00 00 00 00 
013608 00 00 00 00 
01360C 00 00 00 00 
013610 00 00 00 00 
013614 00 00 00 00 
013618 00 00 00 00 
01361C 00 00 00 00 
013620 00 00 00 00 
013624 00 00 00 00 
013628 00 00 00 00 
01362C 00 00 00 00 
013630 00 00 00 00 
013634 00 00 00 00 
013638 00 00 00 00 
01363C 00 00 00 00 
013640 00 00 00 00 
013644 00 00 00 00 
013648 00 00 00 00 
01364C 00 00 00 00 
013650 00 00 00 00 
013654 00 00 00 00 
013658 00 00 00 00 
01365C 00 00 00 00 
013660 00 00 00 00 
013664 00 00 00 00 
013668 00 00 00 00 
01366C 00 00 00 00 
013670 00 00 00 00 
013674 00 00 00 00 
013678 00 00 00 00 
01367C 00 00 00 00 
013680 00 00 00 00 
013684 00 00 00 00 
013688 00 00 00 00 
01368C 00 00 00 00 
013690 00 00 00 00 
013694 00 00 00 00 
013698 00 00 00 00 
01369C 00 00 00 00 
0136A0 00 00 00 00 
0136A4 00 00 00 00 
0136A8 00 00 00 00 
0136AC 00 00 00 00 
0136B0 00 00 00 00 
0136B4 00 00 00 00 
0136B8 00 00 00 00 
0136BC 00 00 00 00 
0136C0 00 00 00 00 
0136C4 00 00 00 00 
0136C8 00 00 00 00 
0136CC 00 00 00 00 
0136D0 00 00 00 00 
0136D4 00 00 00 00 
0136D8 00 00 00 00 
0136DC 00 00 00 00 
0136E0 00 00 00 00 
0136E4 00 00 00 00 
0136E8 00 00 00 00 
0136EC 00 00 00 00 
0136F0 00 00 00 00 
0136F4 00 00 00 00 
0136F8 00 00 00 00 
0136FC 00 00 00 00 
013700 00 00 00 00 
013704 00 00 00 00 
013708 00 00 00 00 
01370C 00 00 00 00 
013710 00 00 00 00 
013714 00 00 00 00 
013718 00 00 00 00 
01371C 00 00 00 00 
013720 00 00 00 00 
013724 00 00 00 00 
013728 00 00 00 00 
01372C 00 00 00 00 
013730 00 00 00 00 
013734 00 00 00 00 
013738 00 00 00 00 
01373C 00 00 00 00 
013740 00 00 00 00 
013744 00 00 00 00 
013748 00 00 00 00 
01374C 00 00 00 00 
013750 00 00 00 00 
013754 00 00 00 00 
013758 00 00 00 00 
01375C 00 00 00 00 
013760 00 00 00 00 
013764 00 00 00 00 
013768 00 00 00 00 
01376C 00 00 00 00 
013770 00 00 00 00 
013774 00 00 00 00 
013778 00 00 00 00 
01377C 00 00 00 00 
013780 00 00 00 00 
013784 00 00 00 00 
013788 00 00 00 00 
01378C 00 00 00 00 
013790 00 00 00 00 
013794 00 00 00 00 
013798 00 00 00 00 
01379C 00 00 00 00 
0137A0 00 00 00 00 
0137A4 00 00 00 00 
0137A8 00 00 00 00 
0137AC 00 00 00 00 
0137B0 00 00 00 00 
0137B4 00 00 00 00 
0137B8 00 00 00 00 
0137BC 00 00 00 00 
0137C0 00 00 00 00 
0137C4 00 00 00 00 
0137C8 00 00 00 00 
0137CC 00 00 00 00 
0137D0 00 00 00 00 
0137D4 00 00 00 00 
0137D8 00 00 00 00 
0137DC 00 00 00 00 
0137E0 00 00 00 00 
0137E4 00 00 00 00 
0137E8 00 00 00 00 
0137EC 00 00 00 00 
0137F0 00 00 00 00 
0137F4 00 00 00 00 
0137F8 00 00 00 00 
0137FC 00 00 00 00 
013800 00 00 00 00 
013804 00 00 00 00 
013808 00 00 00 00 
01380C 00 00 00 00 
013810 00 00 00 00 
013814 00 00 00 00 
013818 00 00 00 00 
01381C 00 00 00 00 
013820 00 00 00 00 
013824 00 00 00 00 
013828 00 00 00 00 
01382C 00 00 00 00 
013830 00 00 00 00 
013834 00 00 00 00 
013838 00 00 00 00 
01383C 00 00 00 00 
013840 00 00 00 00 
013844 00 00 00 00 
013848 00 00 00 00 
01384C 00 00 00 00 
013850 00 00 00 00 
013854 00 00 00 00 
013858 00 00 00 00 
01385C 00 00 00 00 
013860 00 00 00 00 
013864 00 00 00 00 
013868 00 00 00 00 
01386C 00 00 00 00 
013870 00 00 00 00 
013874 00 00 00 00 
013878 00 00 00 00 
01387C 00 00 00 00 
013880 00 00 00 00 
013884 00 00 00 00 
013888 00 00 00 00 
01388C 00 00 00 00 
013890 00 00 00 00 
013894 00 00 00 00 
013898 00 00 00 00 
01389C 00 00 00 00 
0138A0 00 00 00 00 
0138A4 00 00 00 00 
0138A8 00 00 00 00 
0138AC 00 00 00 00 
0138B0 00 00 00 00 
0138B4 00 00 00 00 
0138B8 00 00 00 00 
0138BC 00 00 00 00 
0138C0 00 00 00 00 
0138C4 00 00 00 00 
0138C8 00 00 00 00 
0138CC 00 00 00 00 
0138D0 00 00 00 00 
0138D4 00 00 00 00 
0138D8 00 00 00 00 
0138DC 00 00 00 00 
0138E0 00 00 00 00 
0138E4 00 00 00 00 
0138E8 00 00 00 00 
0138EC 00 00 00 00 
0138F0 00 00 00 00 
0138F4 00 00 00 00 
0138F8 00 00 00 00 
0138FC 00 00 00 00 
013900 00 00 00 00 
013904 00 00 00 00 
013908 00 00 00 00 
01390C 00 00 00 00 
013910 00 00 00 00 
013914 00 00 00 00 
013918 00 00 00 00 
01391C 00 00 00 00 
013920 00 00 00 00 
013924 00 00 00 00 
013928 00 00 00 00 
01392C 00 00 00 00 
013930 00 00 00 00 
013934 00 00 00 00 
013938 00 00 00 00 
01393C 00 00 00 00 
013940 00 00 00 00 
013944 00 00 00 00 
013948 00 00 00 00 
01394C 00 00 00 00 
013950 00 00 00 00 
013954 00 00 00 00 
013958 00 00 00 00 
01395C 00 00 00 00 
013960 00 00 00 00 
013964 00 00 00 00 
013968 00 00 00 00 
01396C 00 00 00 00 
013970 00 00 00 00 
013974 00 00 00 00 
013978 00 00 00 00 
01397C 00 00 00 00 
013980 00 00 00 00 
013984 00 00 00 00 
013988 00 00 00 00 
01398C 00 00 00 00 
013990 00 00 00 00 
013994 00 00 00 00 
013998 00 00 00 00 
01399C 00 00 00 00 
0139A0 00 00 00 00 
0139A4 00 00 00 00 
0139A8 00 00 00 00 
0139AC 00 00 00 00 
0139B0 00 00 00 00 
0139B4 00 00 00 00 
0139B8 00 00 00 00 
0139BC 00 00 00 00 
0139C0 00 00 00 00 
0139C4 00 00 00 00 
0139C8 00 00 00 00 
0139CC 00 00 00 00 
0139D0 00 00 00 00 
0139D4 00 00 00 00 
0139D8 00 00 00 00 
0139DC 00 00 00 00 
0139E0 00 00 00 00 
0139E4 00 00 00 00 
0139E8 00 00 00 00 
0139EC 00 00 00 00 
0139F0 00 00 00 00 
0139F4 00 00 00 00 
0139F8 00 00 00 00 
0139FC 00 00 00 00 
013A00 00 00 00 00 
013A04 00 00 00 00 
013A08 00 00 00 00 
013A0C 00 00 00 00 
013A10 00 00 00 00 
013A14 00 00 00 00 
013A18 00 00 00 00 
013A1C 00 00 00 00 
013A20 00 00 00 00 
013A24 00 00 00 00 
013A28 00 00 00 00 
013A2C 00 00 00 00 
013A30 00 00 00 00 
013A34 00 00 00 00 
013A38 00 00 00 00 
013A3C 00 00 00 00 
013A40 00 00 00 00 
013A44 00 00 00 00 
013A48 00 00 00 00 
013A4C 00 00 00 00 
013A50 00 00 00 00 
013A54 00 00 00 00 
013A58 00 00 00 00 
013A5C 00 00 00 00 
013A60 00 00 00 00 
013A64 00 00 00 00 
013A68 00 00 00 00 
013A6C 00 00 00 00 
013A70 00 00 00 00 
013A74 00 00 00 00 
013A78 00 00 00 00 
013A7C 00 00 00 00 
013A80 00 00 00 00 
013A84 00 00 00 00 
013A88 00 00 00 00 
013A8C 00 00 00 00 
013A90 00 00 00 00 
013A94 00 00 00 00 
013A98 00 00 00 00 
013A9C 00 00 00 00 
013AA0 00 00 00 00 
013AA4 00 00 00 00 
013AA8 00 00 00 00 
013AAC 00 00 00 00 
013AB0 00 00 00 00 
013AB4 00 00 00 00 
013AB8 00 00 00 00 
013ABC 00 00 00 00 
013AC0 00 00 00 00 
013AC4 00 00 00 00 
013AC8 00 00 00 00 
013ACC 00 00 00 00 
013AD0 00 00 00 00 
013AD4 00 00 00 00 
013AD8 00 00 00 00 
013ADC 00 00 00 00 
013AE0 00 00 00 00 
013AE4 00 00 00 00 
013AE8 00 00 00 00 
013AEC 00 00 00 00 
013AF0 00 00 00 00 
013AF4 00 00 00 00 
013AF8 00 00 00 00 
013AFC 00 00 00 00 
013B00 00 00 00 00 
013B04 00 00 00 00 
013B08 00 00 00 00 
013B0C 00 00 00 00 
013B10 00 00 00 00 
013B14 00 00 00 00 
013B18 00 00 00 00 
013B1C 00 00 00 00 
013B20 00 00 00 00 
013B24 00 00 00 00 
013B28 00 00 00 00 
013B2C 00 00 00 00 
013B30 00 00 00 00 
013B34 00 00 00 00 
013B38 00 00 00 00 
013B3C 00 00 00 00 
013B40 00 00 00 00 
013B44 00 00 00 00 
013B48 00 00 00 00 
013B4C 00 00 00 00 
013B50 00 00 00 00 
013B54 00 00 00 00 
013B58 00 00 00 00 
013B5C 00 00 00 00 
013B60 00 00 00 00 
013B64 00 00 00 00 
013B68 00 00 00 00 
013B6C 00 00 00 00 
013B70 00 00 00 00 
013B74 00 00 00 00 
013B78 00 00 00 00 
013B7C 00 00 00 00 
013B80 00 00 00 00 
013B84 00 00 00 00 
013B88 00 00 00 00 
013B8C 00 00 00 00 
013B90 00 00 00 00 
013B94 00 00 00 00 
013B98 00 00 00 00 
013B9C 00 00 00 00 
013BA0 00 00 00 00 
013BA4 00 00 00 00 
013BA8 00 00 00 00 
013BAC 00 00 00 00 
013BB0 00 00 00 00 
013BB4 00 00 00 00 
013BB8 00 00 00 00 
013BBC 00 00 00 00 
013BC0 00 00 00 00 
013BC4 00 00 00 00 
013BC8 00 00 00 00 
013BCC 00 00 00 00 
013BD0 00 00 00 00 
013BD4 00 00 00 00 
013BD8 00 00 00 00 
013BDC 00 00 00 00 
013BE0 00 00 00 00 
013BE4 00 00 00 00 
013BE8 00 00 00 00 
013BEC 00 00 00 00 
013BF0 00 00 00 00 
013BF4 00 00 00 00 
013BF8 00 00 00 00 
013BFC 00 00 00 00 
013C00 00 00 00 00 
013C04 00 00 00 00 
013C08 00 00 00 00 
013C0C 00 00 00 00 
013C10 00 00 00 00 
013C14 00 00 00 00 
013C18 00 00 00 00 
013C1C 00 00 00 00 
013C20 00 00 00 00 
013C24 00 00 00 00 
013C28 00 00 00 00 
013C2C 00 00 00 00 
013C30 00 00 00 00 
013C34 00 00 00 00 
013C38 00 00 00 00 
013C3C 00 00 00 00 
013C40 00 00 00 00 
013C44 00 00 00 00 
013C48 00 00 00 00 
013C4C 00 00 00 00 
013C50 00 00 00 00 
013C54 00 00 00 00 
013C58 00 00 00 00 
013C5C 00 00 00 00 
013C60 00 00 00 00 
013C64 00 00 00 00 
013C68 00 00 00 00 
013C6C 00 00 00 00 
013C70 00 00 00 00 
013C74 00 00 00 00 
013C78 00 00 00 00 
013C7C 00 00 00 00 
013C80 00 00 00 00 
013C84 00 00 00 00 
013C88 00 00 00 00 
013C8C 00 00 00 00 
013C90 00 00 00 00 
013C94 00 00 00 00 
013C98 00 00 00 00 
013C9C 00 00 00 00 
013CA0 00 00 00 00 
013CA4 00 00 00 00 
013CA8 00 00 00 00 
013CAC 00 00 00 00 
013CB0 00 00 00 00 
013CB4 00 00 00 00 
013CB8 00 00 00 00 
013CBC 00 00 00 00 
013CC0 00 00 00 00 
013CC4 00 00 00 00 
013CC8 00 00 00 00 
013CCC 00 00 00 00 
013CD0 00 00 00 00 
013CD4 00 00 00 00 
013CD8 00 00 00 00 
013CDC 00 00 00 00 
013CE0 00 00 00 00 
013CE4 00 00 00 00 
013CE8 00 00 00 00 
013CEC 00 00 00 00 
013CF0 00 00 00 00 
013CF4 00 00 00 00 
013CF8 00 00 00 00 
013CFC 00 00 00 00 
013D00 00 00 00 00 
013D04 00 00 00 00 
013D08 00 00 00 00 
013D0C 00 00 00 00 
013D10 00 00 00 00 
013D14 00 00 00 00 
013D18 00 00 00 00 
013D1C 00 00 00 00 
013D20 00 00 00 00 
013D24 00 00 00 00 
013D28 00 00 00 00 
013D2C 00 00 00 00 
013D30 00 00 00 00 
013D34 00 00 00 00 
013D38 00 00 00 00 
013D3C 00 00 00 00 
013D40 00 00 00 00 
013D44 00 00 00 00 
013D48 00 00 00 00 
013D4C 00 00 00 00 
013D50 00 00 00 00 
013D54 00 00 00 00 
013D58 00 00 00 00 
013D5C 00 00 00 00 
013D60 00 00 00 00 
013D64 00 00 00 00 
013D68 00 00 00 00 
013D6C 00 00 00 00 
013D70 00 00 00 00 
013D74 00 00 00 00 
013D78 00 00 00 00 
013D7C 00 00 00 00 
013D80 00 00 00 00 
013D84 00 00 00 00 
013D88 00 00 00 00 
013D8C 00 00 00 00 
013D90 00 00 00 00 
013D94 00 00 00 00 
013D98 00 00 00 00 
013D9C 00 00 00 00 
013DA0 00 00 00 00 
013DA4 00 00 00 00 
013DA8 00 00 00 00 
013DAC 00 00 00 00 
013DB0 00 00 00 00 
013DB4 00 00 00 00 
013DB8 00 00 00 00 
013DBC 00 00 00 00 
013DC0 00 00 00 00 
013DC4 00 00 00 00 
013DC8 00 00 00 00 
013DCC 00 00 00 00 
013DD0 00 00 00 00 
013DD4 00 00 00 00 
013DD8 00 00 00 00 
013DDC 00 00 00 00 
013DE0 00 00 00 00 
013DE4 00 00 00 00 
013DE8 00 00 00 00 
013DEC 00 00 00 00 
013DF0 00 00 00 00 
013DF4 00 00 00 00 
013DF8 00 00 00 00 
013DFC 00 00 00 00 
013E00 00 00 00 00 
013E04 00 00 00 00 
013E08 00 00 00 00 
013E0C 00 00 00 00 
013E10 00 00 00 00 
013E14 00 00 00 00 
013E18 00 00 00 00 
013E1C 00 00 00 00 
013E20 00 00 00 00 
013E24 00 00 00 00 
013E28 00 00 00 00 
013E2C 00 00 00 00 
013E30 00 00 00 00 
013E34 00 00 00 00 
013E38 00 00 00 00 
013E3C 00 00 00 00 
013E40 00 00 00 00 
013E44 00 00 00 00 
013E48 00 00 00 00 
013E4C 00 00 00 00 
013E50 00 00 00 00 
013E54 00 00 00 00 
013E58 00 00 00 00 
013E5C 00 00 00 00 
013E60 00 00 00 00 
013E64 00 00 00 00 
013E68 00 00 00 00 
013E6C 00 00 00 00 
013E70 00 00 00 00 
013E74 00 00 00 00 
013E78 00 00 00 00 
013E7C 00 00 00 00 
013E80 00 00 00 00 
013E84 00 00 00 00 
013E88 00 00 00 00 
013E8C 00 00 00 00 
013E90 00 00 00 00 
013E94 00 00 00 00 
013E98 00 00 00 00 
013E9C 00 00 00 00 
013EA0 00 00 00 00 
013EA4 00 00 00 00 
013EA8 00 00 00 00 
013EAC 00 00 00 00 
013EB0 00 00 00 00 
013EB4 00 00 00 00 
013EB8 00 00 00 00 
013EBC 00 00 00 00 
013EC0 00 00 00 00 
013EC4 00 00 00 00 
013EC8 00 00 00 00 
013ECC 00 00 00 00 
013ED0 00 00 00 00 
013ED4 00 00 00 00 
013ED8 00 00 00 00 
013EDC 00 00 00 00 
013EE0 00 00 00 00 
013EE4 00 00 00 00 
013EE8 00 00 00 00 
013EEC 00 00 00 00 
013EF0 00 00 00 00 
013EF4 00 00 00 00 
013EF8 00 00 00 00 
013EFC 00 00 00 00 
013F00 00 00 00 00 
013F04 00 00 00 00 
013F08 00 00 00 00 
013F0C 00 00 00 00 
013F10 00 00 00 00 
013F14 00 00 00 00 
013F18 00 00 00 00 
013F1C 00 00 00 00 
013F20 00 00 00 00 
013F24 00 00 00 00 
013F28 00 00 00 00 
013F2C 00 00 00 00 
013F30 00 00 00 00 
013F34 00 00 00 00 
013F38 00 00 00 00 
013F3C 00 00 00 00 
013F40 00 00 00 00 
013F44 00 00 00 00 
013F48 00 00 00 00 
013F4C 00 00 00 00 
013F50 00 00 00 00 
013F54 00 00 00 00 
013F58 00 00 00 00 
013F5C 00 00 00 00 
013F60 00 00 00 00 
013F64 00 00 00 00 
013F68 00 00 00 00 
013F6C 00 00 00 00 
013F70 00 00 00 00 
013F74 00 00 00 00 
013F78 00 00 00 00 
013F7C 00 00 00 00 
013F80 00 00 00 00 
013F84 00 00 00 00 
013F88 00 00 00 00 
013F8C 00 00 00 00 
013F90 00 00 00 00 
013F94 00 00 00 00 
013F98 00 00 00 00 
013F9C 00 00 00 00 
013FA0 00 00 00 00 
013FA4 00 00 00 00 
013FA8 00 00 00 00 
013FAC 00 00 00 00 
013FB0 00 00 00 00 
013FB4 00 00 00 00 
013FB8 00 00 00 00 
013FBC 00 00 00 00 
013FC0 00 00 00 00 
013FC4 00 00 00 00 
013FC8 00 00 00 00 
013FCC 00 00 00 00 
013FD0 00 00 00 00 
013FD4 00 00 00 00 
013FD8 00 00 00 00 
013FDC 00 00 00 00 
013FE0 00 00 00 00 
013FE4 00 00 00 00 
013FE8 00 00 00 00 
013FEC 00 00 00 00 
013FF0 00 00 00 00 
013FF4 00 00 00 00 
013FF8 00 00 00 00 
013FFC 00 00 00 00 
                		; Compress vector table by storing only the low order 16 bits of the
                		; vector. The high order bits are always the same.
                	syscall_vectors:
014000 1C 40       		dc		FMTKInitialize
014002 A8 45       		dc		StartTask
014004 04 47       		dc		ExitTask
014006 63 47       		dc   	KillTask
014008 05 49       		dc		SetTaskPriority
01400A 48 4C       		dc		Sleep
01400C 7C 4C       		dc		AllocMbx
01400E 3C 4D       		dc		FreeMbx
014010 D8 50       		dc		PostMsg
014012 F0 50       		dc		SendMsg
014014 44 52       		dc		WaitMsg
014016 A0 53       		dc		CheckMsg
                	
                	message "InitFMTK"
                	BranchToSelf:
014018 3A 00 00 00 	    bra     BranchToSelf
                	
                	FMTKInitialize:
                	InitFMTK:
                	    ; The first part initialization is common setup for all processors.
                	    ; The second part is 'do once' by whatever processor gets to initizlization
                	    ; first.
                	    
01401C E7 EF 01 00 	    push    lr
014020 02 40 09 3E 	    mfspr   r20,tick
                	
014024 7C C0 00 00 	    lw      r1,FMTK_Inited
014028 46 10 60 03 
01402C 7C 34 12 00 	    cmp     r1,r1,#$12345678
014030 86 10 F0 AC 
014034 BD 00 04 00 	    beq     r1,.0002
014038 B9 9B 00 00 	    bsr     UnlockSYS
                	.0002:
                	    ; Setup bounds checking register #48 to check the TCB pointer
01403C 7C C1 00 00 	    lea     r1,TCB_Array
014040 47 10 00 00 
014044 82 00 E0 3C 	    mtspr   112,r1                   ; set lower bounds
014048 7C C5 00 00 	    lea     r1,TCB_ArrayEnd
01404C 47 10 00 00 
014050 82 00 60 3D 	    mtspr   176,r1                   ; set upper bounds
014054 0A 10 FE 07 	    ldi     r1,#$3FF                 
014058 82 00 E0 3D 	    mtspr   240,r1                   ; set modulo mask
                	
                	    ; Setup bounds checking register #49 to check the MBX pointer
01405C FC C5 00 00 	    lea     r1,MBX_Array
014060 47 10 00 FE 
014064 82 00 E2 3C 	    mtspr   113,r1                   ; set lower bounds
014068 FC C7 00 00 	    lea     r1,MBX_ArrayEnd
01406C 47 10 00 FE 
014070 82 00 62 3D 	    mtspr   177,r1                   ; set upper bounds
014074 0A 10 7E 00 	    ldi     r1,#$3F                 
014078 82 00 E2 3D 	    mtspr   241,r1                   ; set modulo mask
                	
                	    ; Set interrupt vectors
01407C 02 20 14 3E 		mfspr	r2,vbr
014080 7C 01 00 00 		ldi		r1,#reschedule
014084 0A 10 58 A9 
014088 63 11 20 00 		sw		r1,16[r2]
01408C 7C 01 00 00 		ldi		r1,#syscall_exception
014090 0A 10 B0 A8 
014094 63 11 40 00 		sw		r1,32[r2]
014098 7C 01 00 00 		ldi		r1,#FMTKTick
01409C 0A 10 D8 AB 
0140A0 63 11 30 1C 		sw		r1,(448+3)<<3[r2]
                	
0140A4 B9 8A 00 00 	    bsr     LockSYS
                	    
                		; Manually setup the BIOS task
                		; FMTK can't be called to setup the first task because it uses the
                		; SYS_STACK associated with the running task which hasn't been set yet.
0140A8 02 20 00 6C 		cpuid   r2,r0,#0
0140AC 02 81 15 70 		asli    tr,r2,#TCB_LogSize
0140B0 7C C1 00 00 		addui   tr,tr,#TCB_Array
0140B4 14 8C 01 00 
0140B8 63 0C 50 04 		sw		r0,TCB_NextTo[tr]
0140BC 63 0C 60 04 		sw		r0,TCB_PrevTo[tr]
0140C0 60 0C 28 04 		sb      r0,TCB_hJCB[tr]         ; system JOB owns this TCB
0140C4 02 21 18 70 		asl     r2,r2,#12               ; size of stack
0140C8 7C D0 07 00 		ldi     r1,#SYS_STACKS_Array + 4088
0140CC 0A 10 F0 1F 
0140D0 82 10 04 28 		addu    r1,r1,r2
0140D4 63 1C 20 05 		sw      r1,TCB_SYS_Stack[tr]
0140D8 7C E0 07 00 		ldi     r1,#BIOS_STACKS_Array + 4088
0140DC 0A 10 F0 1F 
0140E0 82 10 04 28 		addu    r1,r1,r2
0140E4 63 1C 10 05 		sw      r1,TCB_BIOS_Stack[tr]
0140E8 0A 10 06 00 		ldi		r1,#3
0140EC 61 1C 24 04 		sc		r1,TCB_Priority[tr]
0140F0 02 10 00 6C 		cpuid   r1,r0,#0
0140F4 60 1C 00 05 		sb      r1,TCB_Affinity[tr]
0140F8 63 0C F0 04 		sw		r0,TCB_Timeout[tr]
0140FC 7C F0 07 00 		ldi     r1,#STACKS_Array+$FF8   ; setup stack pointer top of memory
014100 0A 10 F0 1F 
014104 82 10 04 28 		addu    r1,r1,r2
014108 63 1C E0 01 		sw		r1,TCB_r30[tr]
                	
01410C 7C C0 00 00 	    lw      r1,FMTK_Inited
014110 46 10 60 03 
014114 7C 34 12 00 	    cmp     r1,r1,#$12345678
014118 86 10 F0 AC 
01411C BD 10 0E 00 	    bne     r1,.0001
014120 02 1C 00 1A 	    mov     r1,tr
014124 B9 0A 01 00 	    bsr     AddTaskToReadyList
014128 0A 10 30 00 		ldi		r1,#TS_RUNNING|TS_READY
01412C 60 1C 20 04 		sb		r1,TCB_Status[tr]
014130 B9 7C 00 00 	    bsr     UnlockSYS
014134 3B FF 11 00 	    rts
.0001:
014138 7C C0 00 00 		sw		r0,UserTick
01413C 63 00 00 00 
                	    
                		; Initialize semaphores
014140 39 23 03 00 	    bsr     UnlockIOF
                	     
014144 7C C0 00 00 		sw		r0,TimeoutList		; no entries in timeout list
014148 63 00 20 02 
01414C 7C C0 00 00 		sw		r0,QNdx0
014150 63 00 A0 00 
014154 7C C0 00 00 		sw		r0,QNdx1
014158 63 00 B0 00 
01415C 7C C0 00 00 		sw		r0,QNdx2
014160 63 00 C0 00 
014164 7C C0 00 00 		sw		r0,QNdx3
014168 63 00 D0 00 
01416C 7C C0 00 00 		sw		r0,QNdx4
014170 63 00 E0 00 
014174 7C C0 00 00 		sw		r0,QNdx5
014178 63 00 F0 00 
01417C 7C C0 00 00 		sw		r0,QNdx6
014180 63 00 00 01 
014184 7C C0 00 00 		sw		r0,QNdx7
014188 63 00 10 01 
01418C 02 1C 00 1A 	    mov     r1,tr
014190 39 FD 00 00 	    bsr     AddTaskToReadyList
014194 0A 10 30 00 		ldi		r1,#TS_RUNNING|TS_READY
014198 60 1C 20 04 		sb		r1,TCB_Status[tr]
                	
01419C 7C C0 00 00 		sw		r0,missed_ticks
0141A0 63 00 80 02 
                	
                		; Initialize IO Focus List
                		; There is a bit for each job that could have the I/O focus. This really
                		; requires only a single word of storage as there are only 51 jobs
                		; allowed for.
                		;
0141A4 7C C0 00 00 		sw      r0,IOFocusTbl
0141A8 63 00 60 00 
0141AC 7C C0 00 00 		sw      r0,IOFocusTbl+8
0141B0 63 00 70 00 
0141B4 7C C0 00 00 		sw      r0,IOFocusTbl+16
0141B8 63 00 80 00 
0141BC 7C C0 00 00 		sw      r0,IOFocusTbl+32
0141C0 63 00 A0 00 
                	
                		; Initialize the FreeJCB list
0141C4 7C C5 00 00 		ldi		r1,#JCB_Array+JCB_Size		; the next available JCB
0141C8 0A 10 00 0A 
0141CC 7C C0 00 00 		sw		r1,FreeJCB
0141D0 63 10 00 02 
0141D4 82 20 00 1A 		mov     r2,r1
0141D8 94 10 00 0A 		addui	r1,r1,#JCB_Size
0141DC 0A 30 64 00 		ldi		r3,#NR_JCB-1
                	st5:
0141E0 63 11 40 08 		sw		r1,JCB_Next[r2]
0141E4 94 10 00 0A 		addui	r1,r1,#JCB_Size
0141E8 14 21 00 0A 		addui	r2,r2,#JCB_Size
0141EC 95 31 02 00 		subui   r3,r3,#1
0141F0 BD 11 F8 FF 		bne		r3,st5
0141F4 63 01 40 08 		sw      r0,JCB_Next[r2]
                	
                		; Setup default values in the JCB's
0141F8 0A 30 00 00 		ldi		r3,#0
0141FC 0A 20 66 00 		ldi		r2,#NR_JCB
014200 0A 40 80 27 		ldi     r4,#JCB0
                	ijcb1:
014204 61 32 00 00 		sc		r3,JCB_Number[r4]
014208 60 02 E0 08 		sb		r0,JCB_esc[r4]
01420C 0A 10 3E 00 		ldi     r1,#31
014210 60 12 14 08 		sb		r1,JCB_VideoRows[r4]
014214 0A 10 A8 00 		ldi		r1,#84
014218 60 12 16 08 		sb		r1,JCB_VideoCols[r4]
01421C 0A 10 02 00 		ldi		r1,#1				; turn on keyboard echo
014220 60 12 90 08 		sb		r1,JCB_KeybdEcho[r4]
014224 60 12 1C 08 		sb		r1,JCB_CursorOn[r4]
014228 60 12 1E 08 		sb		r1,JCB_CursorFlash[r4]
01422C 60 02 18 08 		sb		r0,JCB_CursorRow[r4]
014230 60 02 1A 08 		sb		r0,JCB_CursorCol[r4]
014234 60 02 20 08 		sb		r0,JCB_CursorType[r4]
014238 FC 97 04 00 		ldi		r1,#%010010010_111111111_0000000000	; white on grey
01423C 0A 10 00 F8 
014240 62 12 28 08 		sh		r1,JCB_NormAttr[r4]
014244 62 12 30 08 		sh		r1,JCB_CurrAttr[r4]
014248 7C 00 00 00 		mulu	r5,r3,#16384		; 8192 words per screen
01424C 97 51 00 80 
014250 7C D8 00 00 		addui   r5,r5,#SCREEN_Array
014254 94 52 00 00 
014258 62 52 F0 07 		sh		r5,JCB_pVirtVid[r4]
01425C 62 52 D0 07 		sh		r5,JCB_pVidMem[r4]
014260 BD 11 14 00 		bne		r3,ijcb2
014264 FC 26 00 00 		ldi		r1,#%000000100_110101110_0000000000	; grey on blue
014268 0A 10 00 70 
01426C 62 12 28 08 		sh		r1,JCB_NormAttr[r4]
014270 62 12 30 08 		sh		r1,JCB_CurrAttr[r4]
014274 7C D0 FF 00 		ldi		r5,#TEXTSCR
014278 0A 50 00 00 
01427C 62 52 D0 07 		sh		r5,JCB_pVidMem[r4]
014280 7C C5 00 00 		ldi     r4,#JCB_Array
014284 0A 40 00 00 
                	ijcb2:
014288 94 31 02 00 	    addui   r3,r3,#1
01428C 14 42 00 0A 		addui	r4,r4,#JCB_Size
014290 86 21 66 00 		cmp     r2,r3,#NR_JCB
014294 3D 41 B8 FF 		blt		r2,ijcb1
                	
                		; Initialize free message list
014298 FC 00 00 00 		ldi		r1,#NR_MSG
01429C 0A 10 00 00 
0142A0 7C C0 00 00 		sw		r1,nMsgBlk
0142A4 63 10 70 02 
0142A8 7C C8 00 00 		ldi     r1,#MSG_Array
0142AC 0A 10 00 00 
0142B0 7C C0 00 00 		sw		r1,FreeMsg
0142B4 63 10 60 02 
0142B8 94 20 40 00 		addui   r2,r1,MSG_Size
                	st4:
0142BC E3 20 00 00 		sw		r2,MSG_LINK[r1]
0142C0 E3 00 10 00 		sw      r0,MSG_D1[r1]
0142C4 E3 00 20 00 		sw      r0,MSG_D2[r1]
0142C8 E3 00 30 00 		sw      r0,MSG_TYPE[r1]
0142CC 94 10 40 00 		addui	r1,r1,#MSG_Size
0142D0 14 21 40 00 		addui   r2,r2,#MSG_Size
0142D4 FC D7 00 00 		cmp     r3,r2,#MSG_ArrayEnd-MSG_Size
0142D8 06 31 C0 FF 
0142DC BD 41 F0 FF 		blt     r3,st4
0142E0 E3 00 00 00 		sw      r0,MSG_LINK[r1]
                	
                		; Initialize free mailbox list
                		; Note the first NR_TCB mailboxes are statically allocated to the tasks.
                		; They are effectively pre-allocated.
0142E4 0A 50 00 0E 		ldi		r5,#NR_MBX-NR_TCB
0142E8 7C C0 00 00 		sw		r5,nMailbox
0142EC 63 50 50 02 
                	
0142F0 0A 10 00 02 	    ldi     r1,#NR_TCB
0142F4 97 20 80 00 	    mulu    r2,r1,#MBX_Size
0142F8 FC C5 00 00 	    addui   r2,r2,#MBX_Array
0142FC 14 21 00 FE 
014300 7C C0 00 00 	    sw      r2,FreeMbxHandle
014304 63 20 40 02 
014308 02 31 00 1A 	    mov     r3,r2
01430C 94 31 80 00 	    addui   r3,r3,#MBX_Size
                	.imbxl1:
014310 63 31 00 00 	    sw      r3,MBX_LINK[r2]
014314 14 21 80 00 	    addui   r2,r2,#MBX_Size
014318 94 31 80 00 	    addui   r3,r3,#MBX_Size
01431C 95 52 02 00 	    subui   r5,r5,#1
014320 BD 22 F8 FF 	    bgt     r5,.imbxl1
014324 63 01 00 00 	    sw      r0,MBX_LINK[r2]               ; last one
                	
                	    ; Initialize mailboxes with default values.
014328 0A 50 00 10 	    ldi     r5,#NR_MBX
01432C FC C5 00 00 	    lea     r2,MBX_Array
014330 47 20 00 FE 
                	.imbxl2:    
014334 63 01 10 00 	    sw      r0,MBX_TQ_HEAD[r2]
014338 63 01 30 00 	    sw      r0,MBX_TQ_TAIL[r2]
01433C 63 01 40 00 	    sw      r0,MBX_MQ_HEAD[r2]
014340 63 01 50 00 	    sw      r0,MBX_MQ_TAIL[r2]
014344 61 01 60 00 	    sc      r0,MBX_TQ_COUNT[r2]
014348 61 01 68 00 	    sc      r0,MBX_MQ_COUNT[r2]
01434C 60 01 6E 00 	    sb      r0,MBX_MQ_STRATEGY[r2]       ; unlimited
014350 60 01 6C 00 	    sb      r0,MBX_OWNER[r2]             ; JOB #0
014354 0A 10 10 00 	    ldi     r1,#8                        ; default to queue eight messages
014358 61 11 64 00 	    sc      r1,MBX_MQ_SIZE[r2]
01435C 61 01 70 00 	    sc      r0,MBX_MQ_MISSED[r2]
014360 14 21 80 00 	    addui   r2,r2,#MBX_Size
014364 95 52 02 00 	    subui   r5,r5,#1
014368 BD 22 E6 FF 	    bgt     r5,.imbxl2
                	    
                	    ; Initialize the free TCB list
                	    ; The first two TCB's are pre-allocated and so aren't part of the list
01436C 7C C1 00 00 	    ldi     r2,#TCB_Array+TCB_Size*2
014370 0A 20 00 10 
014374 7C C0 00 00 	    sw      r2,FreeTCB
014378 63 20 10 02 
                	.0001:
01437C 14 31 00 08 	    addui   r3,r2,#TCB_Size
014380 63 31 30 04 	    sw      r3,TCB_NextFree[r2]
014384 14 21 00 08 	    addui   r2,r2,#TCB_Size
014388 FC C4 00 00 	    cmpu    r4,r2,#TCB_ArrayEnd-TCB_Size
01438C 16 41 00 F8 
014390 3D 42 F6 FF 	    blt     r4,.0001
014394 3F 00 00 00 	    nop
014398 63 01 30 04 	    sw      r0,TCB_NextFree[r2]
                	
01439C 7C C1 00 00 	    ldi     r2,#TCB_Array+TCB_Size*2
0143A0 0A 20 00 10 
0143A4 0A 40 04 00 	    ldi     r4,#2
                	.nextTCB:
0143A8 0A 50 00 00 	    ldi     r5,#0
0143AC 63 51 28 04 	    sw      r5,TCB_hJCB[r2]   ; owning JOB = monitor
0143B0 7C 01 00 00 	    ldi     r3,#BranchToSelf
0143B4 0A 30 30 80 
0143B8 63 31 00 03 	    sw      r3,TCB_IPC[r2]    ; set startup address
0143BC 63 31 20 03 	    sw      r3,TCB_EPC[r2]
0143C0 63 31 10 03 	    sw      r3,TCB_DPC[r2]
0143C4 17 32 00 20 	    mulu    r3,r4,#4096       ; initial stack size=4096
0143C8 7C F0 07 00 	    addui   r3,r3,#STACKS_Array+4088
0143CC 94 31 F0 1F 
0143D0 63 31 E0 01 	    sw      r3,TCB_r30[r2]    ; set the stack pointer to the default stack
0143D4 14 21 00 08 	    addui   r2,r2,#TCB_Size   ; move to next TCB 768B TCB size
0143D8 14 42 02 00 	    addui   r4,r4,#1
0143DC 16 12 00 02 	    cmpu    r1,r4,#NR_TCB
0143E0 BD 40 E4 FF 	    blt     r1,.nextTCB
                	
                		; manually build the IO focus list
0143E4 47 10 80 27 		lea		r1,JCB0
0143E8 7C C0 00 00 		sw	    r1,IOFocusNdx		; Job #0 (Monitor) has the focus
0143EC 63 10 50 00 
0143F0 E3 10 50 08 		sw		r1,JCB_iof_next[r1]
0143F4 E3 10 60 08 		sw		r1,JCB_iof_prev[r1]
0143F8 0A 10 02 00 		ldi		r1,#1
0143FC 7C C0 00 00 		sw		r1,IOFocusTbl		; set the job #0 request bit
014400 63 10 60 00 
014404 7C 34 12 00 	    ldi     r1,#$12345678  ; set system initialized flag
014408 0A 10 F0 AC 
01440C 7C C0 00 00 	    sw      r1,FMTK_Inited
014410 63 10 60 03 
                	
014414 39 20 00 00 	    bsr     UnlockSYS
                	 
014418 0A 10 0E 00 		ldi		r1,#7          ; priority
01441C 0A 20 00 00 		ldi		r2,#0          ; processor #0
014420 7C 01 00 00 		ldi		r3,#IdleTask|1 ; start address (start in kernel mode)
014424 0A 30 9A 88 
014428 0A 40 00 00 		ldi     r4,#0          ; start parameter (NULL)
01442C 0A 50 00 00 		ldi     r5,#0          ; r5 = job handle of owning job
014430 38 0F 08 00 		sys     #FMTK_CALL
014434 01 00 00 00 		dh      1              ; start task
                	
014438 02 50 09 3E 	    mfspr   r21,tick
01443C 82 5A 29 2A 	    subu    r21,r21,r20
014440 7C C0 00 00 	    sw      r21,sys_ticks
014444 63 50 41 00 
                	
014448 3B FF 11 00 	    rts

                	;------------------------------------------------------------------------------
                	; IdleTask
                	;
                	; IdleTask is a low priority task that is always running. It runs when there
                	; is nothing else to run.
                	; This task check for tasks that are stuck in infinite loops and kills them.
                	;------------------------------------------------------------------------------
                	IdleTask:
                	it3:
01444C 7C C1 00 00 	    ldi     r2,#TCB_Array
014450 0A 20 00 00 
                	it2:
014454 7C D0 FF 00 		inc		TEXTSCR+228,#1	; increment IDLE active flag
014458 64 10 C8 01 
01445C 7C C1 00 00 		cmpu    r1,r2,#TCB_Array
014460 16 11 00 00 
014464 BD 00 0A 00 		beq		r1,it1
014468 40 11 20 04 		lb		r1,TCB_Status[r2]
01446C 86 10 40 00 		cmp		r1,r1,#TS_SLEEP
014470 BD 10 04 00 		bne		r1,it1
014474 02 11 00 1A 		mov     r1,r2
                	;	sys		#4				; KillTask function
                	;	dh		3
                	it1:
014478 02 00 06 6E 		wai						; wait for interrupt to happen
01447C 14 21 00 08 	    addui   r2,r2,#TCB_Size
014480 FC C4 00 00 	    cmpu    r1,r2,#TCB_ArrayEnd-TCB_Size
014484 16 11 00 F8 
014488 BD 40 E6 FF 	    blt     r1,it2
01448C 3A F8 FF FF 	    bra     it3
014490 02 00 00 6E 		cli						; enable interrupts
014494 3A F8 FF FF 		bra		it2
                	
                	;------------------------------------------------------------------------------
                	; Parameters:
                	;	r1 = job name
                	;	r2 = start address
                	;------------------------------------------------------------------------------
                	
                	StartJob:
014498 E7 EF 01 00 	    push    lr
01449C E7 E0 01 00 		push    r1
                		
                		; Get a free JCB
0144A0 39 0B 00 00 	    bsr     LockSYS
                	
0144A4 7C C0 00 00 		lw		r6,FreeJCB
0144A8 46 60 00 02 
0144AC 3D 03 20 00 		beq		r6,sjob1
0144B0 46 73 40 08 		lw		r7,JCB_Next[r6]
0144B4 7C C0 00 00 		sw		r7,FreeJCB
0144B8 63 70 00 02 
                	
0144BC 47 73 08 00 		lea		r7,JCB_Name[r6]		; r7 = address of name field
0144C0 82 93 00 1A 		mov		r9,r7				; save off buffer address
0144C4 0A 80 00 00 		ldi		r8,#0				; r8 = count of characters (0 to 31)
                	sjob3:
0144C8 C0 50 00 00 		lb	    r5,[r1]				; get a character
0144CC BD 02 0E 00 		beq		r5,sjob2			; end of string ?
0144D0 E0 53 02 00 		sb		r5,1[r7]
0144D4 94 10 02 00 		addui   r1,r1,#1
0144D8 94 73 02 00 		addui   r7,r7,#1
0144DC 14 84 02 00 		addui   r8,r8,#1
0144E0 16 54 3E 00 		cmpu	r5,r8,#31   		; max number of chars ?
0144E4 BD 42 F2 FF 		blt		r5,sjob3
                	sjob2:
0144E8 E0 84 00 00 		sb		r8,[r9]				; save name length
                	
                	sjob1:
0144EC 39 05 00 00 		bsr     UnlockSYS
0144F0 57 1F 10 00 		pop     r1
0144F4 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Lock/unlock routines.
                	;------------------------------------------------------------------------------
                	
                	LockSYS:
0144F8 E7 EF 01 00 	    push    lr
0144FC E7 E0 01 00 	    push    r1
014500 7C C0 00 00 	    lea     r1,sys_sema
014504 47 10 B0 03 
014508 39 05 00 00 	    bsr     LockSema
01450C 57 1F 10 00 	    pop     r1
014510 3B FF 11 00 	    rts
UnlockSYS:
014514 E7 EF 01 00 	    push    lr
014518 E7 E0 01 00 	    push    r1
01451C 7C C0 00 00 	    lea     r1,sys_sema
014520 47 10 B0 03 
014524 B9 0A 00 00 	    bsr     UnlockSema
014528 57 1F 10 00 	    pop     r1
01452C 3B FF 11 00 	    rts

                	;------------------------------------------------------------------------------
                	; Lock the semaphore.
                	;
                	; Occasionally the semaphore fails to lock correctly and the system hangs up
                	; waiting for the semaphore lock. This could be because the SWCR works but
                	; cr0 doesn't get updated, or the bfextu instruction fails?? So the lock is
                	; tested to see if the current task is the one holding the lock. If same task
                	; that holds the lock is attempting a new lock, then we just return and assume
                	; a successful lock. The problem with this approach is if the task attempts a
                	; lock both while running and during an interrupt routine. The resource wouldn't
                	; be corectly protected in that case. So no BIOS calls during interrupt
                	; routines! The BIOS isn't re-entrant.
                	;
                	; Parameters:
                	; r1 = address of semaphore to lock
                	;------------------------------------------------------------------------------
                	
                	LockSema:
014530 67 E1 01 00 	    push    r2
014534 E7 E1 01 00 	    push    r3
                	
                	    ; Interrupts should be already enabled or there would be no way for a locked
                	    ; semaphore to clear. Let's enable interrupts just in case.
014538 02 00 00 6E 	    cli
                	.0001:
01453C DC 30 00 00 	    lwar    r3,[r1]
014540 BD 01 0A 00 	    beq     r3,.0003            ; branch if free
014544 82 21 30 2C 	    cmpu    r2,r3,tr            ; test if already locked by this task
014548 3D 01 12 00 	    beq     r2,.0002
01454C 82 21 60 34 	    chk     r2,r3,b48           ; check if locked by a valid task
014550 3D 11 F6 FF 	    bne     r2,.0001
                	.0003:
014554 EE 80 01 00 	    swcr    tr,[r1]             ; try and lock it
014558 3F 00 00 00 	    nop                         ; cr0 needs time to update???
01455C 3F 00 00 00 	    nop
014560 02 30 00 3E 	    mfspr   r3,cr0
014564 83 31 48 D2 	    bfextu  r3,r3,#36,#36       ; status is bit 36 of cr0
014568 BD 01 EA FF 	    beq     r3,.0001            ; lock failed, go try again
                	.0002:
01456C 57 3F 10 00 	    pop     r3
014570 57 2F 10 00 	    pop     r2
014574 37 FF 01 00 	    rtl

                	;------------------------------------------------------------------------------
                	; Unlock a semaphore
                	;
                	; When unlocking the semaphore a test is made to see if the semaphore is still
                	; locked by same task attempting an unlock. If that is the case then the 
                	; SW instruction must have failed to clear the semaphore. So that the system
                	; isn't hung, we go back and redo the unlock.
                	;------------------------------------------------------------------------------
                	
                	UnlockSema:
014578 67 E1 01 00 	    push    r2
01457C E7 E1 01 00 	    push    r3
                	.0001:
014580 E3 00 00 00 	    sw      r0,[r1]
014584 C6 20 00 00 	    lw      r2,[r1]
014588 3D 01 0A 00 	    beq     r2,.0002  ; the semaphore is unlock, by this task or another
01458C 02 31 30 2C 	    cmpu    r3,r2,tr
014590 BD 01 F8 FF 	    beq     r3,.0001  ; ??? this task still has it locked - store failed
                	    ; Here the semaphore was locked, but not by this task anymore. Another task
                	    ; must have interceded amd locked the semaphore right after it was unlocked
                	    ; by this task. Make sure this is the case, and it's not just bad memory.
                	    ; Make sure the semaphore was locked by a valid task
014594 02 31 60 34 	    chk     r3,r2,b48
014598 BD 01 F4 FF 	    beq     r3,.0001
                	    ; Here the semaphore probably was validly locked by a different task.
                	    ; Assume the unlock must have been successful.
                	.0002:
01459C 57 3F 10 00 	    pop     r3
0145A0 57 2F 10 00 	    pop     r2
0145A4 37 FF 01 00 	    rtl
    
                	;------------------------------------------------------------------------------
                	; StartTask
                	;
                	; Startup a task. The task is automatically allocated a 1kW stack from the BIOS
                	; stacks area. 
                	;
                	; Parameters:
                	;	r1 = task priority
                	;	r2 = start flags
                	;	r3 = start address
                	;	r4 = start parameter
                	;	r5 = job handle
                	;------------------------------------------------------------------------------
                	
                	StartTask:
0145A8 E7 EF 01 00 	    push    lr
0145AC E7 E0 01 00 	    push    r1
0145B0 67 E1 01 00 	    push    r2
0145B4 E7 E1 01 00 	    push    r3
0145B8 67 E2 01 00 	    push    r4
0145BC E7 E2 01 00 	    push    r5
0145C0 67 E3 01 00 		push    r6
0145C4 E7 E3 01 00 		push    r7
0145C8 67 E4 01 00 		push    r8
0145CC E7 E4 01 00 		push    r9
0145D0 67 E5 01 00 		push    r10
0145D4 E7 E5 01 00 		push    r11
0145D8 82 60 00 1A 		mov		r6,r1				; r6 = task priority
0145DC 02 91 00 1A 		mov		r9,r2				; r9 = flag register value on startup
                		
                		; get a free TCB
                		;
0145E0 39 E3 FF FF 	    bsr     LockSYS
0145E4 7C C0 00 00 		lw		r1,FreeTCB			; get free tcb list pointer
0145E8 46 10 10 02 
0145EC 82 20 60 34 		chk     r2,r1,b48           ; check and make sure it's a valid pointer
0145F0 3D 01 70 00 		beq		r2,stask1           ; branch if NULL or some other garbage
0145F4 82 20 00 1A 		mov     r2,r1
0145F8 46 11 30 04 		lw		r1,TCB_NextFree[r2]
0145FC 7C C0 00 00 		sw		r1,FreeTCB			; update the FreeTCB list pointer
014600 63 10 10 02 
                	
014604 39 E2 FF FF 		bsr     UnlockSYS
014608 02 11 00 1A 		mov     r1,r2				; r1 = TCB pointer
                	
                		; setup the stack for the task
                		; Zap the stack memory.
01460C 02 71 00 1A 		mov		r7,r2
014610 7C C1 00 00 		subui   r2,r2,#TCB_Array
014614 15 21 00 00 
014618 02 21 14 72 		lsr     r2,r2,#TCB_LogSize  ; r2 = index number of TCB
01461C 02 21 18 70 		asl		r2,r2,#12			; 4kB stack per task
014620 7C F0 07 00 		addui	r8,r2,#STACKS_Array	; add in stack base
014624 14 81 00 00 
014628 7C E0 07 00 		addui   r10,r2,#BIOS_STACKS_Array
01462C 14 A1 00 00 
014630 7C D0 07 00 		addui   r11,r2,#SYS_STACKS_Array
014634 14 B1 00 00 
                	
                		; It's safe to update the TCB here without checking the semaphore because
                		; the TCB isn't on any list. It's in no-man's land at this point.
014638 14 24 F0 1F 		addui   r2,r8,#4088
01463C E3 23 D0 04 		sw      r2,TCB_StackTop[r7]
014640 E3 23 E0 01 		sw      r2,TCB_r30[r7]     ; stack pointer is r30!
014644 E3 23 30 03 		sw      r2,TCB_ISP[r7]
014648 7C 01 00 00 		ldi     r1,#ExitTask
01464C 0A 10 08 8E 
014650 E3 13 F0 01 		sw      r1,TCB_r31[r7]
014654 14 85 F0 1F 		addui   r8,r10,#4088
014658 E3 83 10 05 		sw      r8,TCB_BIOS_Stack[r7]
01465C 94 85 F0 1F 		addui   r8,r11,#4088
014660 E3 83 20 05 		sw      r8,TCB_SYS_Stack[r7]
014664 E3 43 10 00 		sw      r4,TCB_r1[r7]
014668 E0 93 00 05 		sb      r9,TCB_Affinity[r7]
01466C E0 63 24 04 		sb		r6,TCB_Priority[r7]
014670 E0 03 20 04 		sb		r0,TCB_Status[r7]
014674 E3 03 F0 04 		sw		r0,TCB_Timeout[r7]
014678 E0 53 28 04 		sb		r5,TCB_hJCB[r7]		; save job handle
01467C E3 03 C0 04 		sw		r0,TCB_MbxList[r7]
014680 8D 31 02 00 		or      r3,r3,#1            ; kernel mode flag for now
014684 E3 33 00 03 		sw      r3,TCB_IPC[r7];     ; set starting address
014688 E3 33 10 03 		sw      r3,TCB_DPC[r7];
01468C E3 33 20 03 		sw      r3,TCB_EPC[r7];
                	
                		; Insert the task into the ready list
014690 82 13 00 1A 		mov     r1,r7
014694 B9 CC FF FF 	    bsr     LockSYS
014698 39 5C 00 00 		bsr		AddTaskToReadyList
01469C 39 CF FF FF 		bsr     UnlockSYS
                	stask2:
0146A0 57 BF 10 00 	    pop     r11
0146A4 57 AF 10 00 	    pop     r10
0146A8 57 9F 10 00 	    pop     r9
0146AC 57 8F 10 00 		pop     r8
0146B0 57 7F 10 00 		pop     r7
0146B4 57 6F 10 00 		pop     r6
0146B8 57 5F 10 00 		pop     r5
0146BC 57 4F 10 00 		pop     r4
0146C0 57 3F 10 00 		pop     r3
0146C4 57 2F 10 00 		pop     r2
0146C8 57 1F 10 00 		pop     r1
0146CC 3B FF 11 00 		rts
stask1:
0146D0 B9 C8 FF FF 		bsr     UnlockSYS
0146D4 B9 65 02 00 		bsr		kernel_panic
0146D8 4E 6F 20 6D 		db		"No more task control blocks available.",0
0146DC 6F 72 65 20 
0146E0 74 61 73 6B 
0146E4 20 63 6F 6E 
0146E8 74 72 6F 6C 
0146EC 20 62 6C 6F 
0146F0 63 6B 73 20 
0146F4 61 76 61 69 
0146F8 6C 61 62 6C 
0146FC 65 2E 00    
0146FF 00 3A F4 FF 		bra		stask2
014703 FF          
                	
                	;------------------------------------------------------------------------------
                	; ExitTask
                	;
                	; This routine is called when the task exits with an rts instruction. OR
                	; it may be invoked with a JMP ExitTask. In either case the task must be
                	; running so it can't be on the timeout list.
                	;------------------------------------------------------------------------------
                	message "ExitTask"
                	ExitTask:
                		; release any aquired resources
                		; - mailboxes
                		; - messages
                	;	hoff
014704 7C 01 00 00 	    lea     r1,msgExitingTask
014708 47 10 A8 8E 
01470C B9 68 F8 FF 	    bsr     DisplayString
014710 02 1C 00 1A 	    mov     r1,tr
014714 B9 BC FF FF 	    bsr     LockSYS
014718 39 5C 00 00 		bsr		RemoveTaskFromReadyList
01471C 60 0C 20 04 		sb		r0,TCB_Status[tr]				; set task status to TS_NONE
                	;	bsr		ReleaseIOFocus
                		; Free up all the mailboxes associated with the task.
                	xtsk7:
014720 46 1C C0 04 		lw		r1,TCB_MbxList[tr]
014724 82 20 62 34 		chk     r2,r1,b49
014728 3D 01 06 00 		beq		r2,xtsk6
01472C 39 C2 00 00 		bsr		FreeMbx
014730 3A FE FF FF 		bra		xtsk7
                	xtsk6:
014734 7C C0 00 00 		lw		r1,FreeTCB						; add the task control block to the free list
014738 46 10 10 02 
01473C 63 1C 30 04 		sw		r1,TCB_NextFree[tr]
014740 7C C0 00 00 		sw		tr,FreeTCB
014744 63 80 11 02 
014748 B9 B9 FF FF 		bsr     UnlockSYS
                		; This loop will eventually be interrupted, the interrupt return will not
                		; return to here.
01474C 02 00 06 6E 		wai
                	xtsk1:
014750 3A 00 00 00 		bra     xtsk1
                	
                	msgExitingTask:
014754 45 78 69 74 	    db    "Exiting task", CR,LF,0
014758 69 6E 67 20 
01475C 74 61 73 6B 
014760 0D 0A 00    
                	
                	;------------------------------------------------------------------------------
                	; KillTask
                	;
                	; "Kills" a task, removing it from all system lists. If the task has the 
                	; IO focus, the IO focus is switched. Task #0 is immortal and cannot be
                	; killed. Task #1 is immortal and cannot be killed.
                	;
                	; Registers Affected: none
                	; Parameters:
                	;	r1 = task number
                	;------------------------------------------------------------------------------
                	;
                	KillTask:
014763 00 E7 EF 01 	    push    lr
014767 00          
014768 67 E1 01 00 		push    r2
01476C E7 E1 01 00 		push    r3
                	;	bsr     ValidateTCBPtr
014770 82 20 40 34 		chk     r2,r1,b32
014774 3D 01 3C 00 		beq		r2,kt1
014778 82 20 00 1A 		mov     r2,r1
01477C B9 AF FF FF 		bsr     LockSYS
014780 C6 10 28 04 		lw		r1,TCB_hJCB[r1]
014784 39 93 02 00 		bsr		ForceReleaseIOFocus
014788 02 11 00 1A 		mov     r1,r2
01478C 7C 00 00 00 		jsr		RemoveTaskFromReadyList
014790 3C F0 FD A4 
014794 7C 00 00 00 		jsr		RemoveFromTimeoutList
014798 3C F0 B1 A5 
01479C E0 00 20 04 		sb		r0,TCB_Status[r1]    		; set task status to TS_NONE
                	
                		; Free up all the mailboxes associated with the task.
0147A0 E7 E0 01 00 		push    r1
0147A4 82 20 00 1A 		mov     r2,r1
0147A8 82 30 00 1A 		mov     r3,r1
0147AC C6 11 C0 04 		lw		r1,TCB_MbxList[r3]
                	kt7:
0147B0 BD 00 0A 00 		beq		r1,kt6
0147B4 C6 30 00 00 		lw      r3,MBX_LINK[r1]
0147B8 B9 B3 00 00 		bsr		FreeMbx2
0147BC 82 11 00 1A 		mov     r1,r3
0147C0 3A FE FF FF 		bra		kt7
                	kt6:
0147C4 57 1F 10 00 	    pop     r1
0147C8 7C C0 00 00 		lw		r2,FreeTCB					; add the task control block to the free list
0147CC 46 20 10 02 
0147D0 E3 20 30 04 		sw		r2,TCB_NextFree[r1]
0147D4 7C C0 00 00 		sw		r1,FreeTCB
0147D8 63 10 10 02 
0147DC 39 A7 FF FF 		bsr     UnlockSYS
0147E0 82 20 30 0C 		cmp     r2,r1,tr                    ; keep running the current task as long as
0147E4 3D 11 04 00 		bne		r2,kt1						; the task didn't kill itself.
                	.self:
0147E8 3A 00 00 00 		bra     .self
                	kt1:
0147EC 57 3F 10 00 	    pop     r3
0147F0 57 2F 10 00 		pop     r2
0147F4 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Dump the task list. The task list isn't locked while it is being dumped
                	; because that would prevent task switches from occuring and we probably
                	; don't want to interfere with the system. However because it's not locked,
                	; there's no guarentee that everything will display correctly. It's safe to
                	; not lock the task list because we are simply reading the fields from it and
                	; not updating information.
                	;------------------------------------------------------------------------------
                	
                	message "DumpTaskList"
                	DumpTaskList:
0147F8 E7 EF 01 00 	    push    lr
0147FC E7 E0 01 00 		push    r1
014800 67 E1 01 00 		push    r2
014804 E7 E1 01 00 		push    r3
014808 67 E2 01 00 		push	r4
01480C 7C 01 00 00 		ldi		r1,#msgTaskList
014810 0A 10 A0 91 
014814 B9 47 F8 FF 		bsr		DisplayString
014818 0A 30 00 00 		ldi		r3,#0
                	.0001:
                	;    lwar    r4,tcb_sema
                	;    bne     r4,.0001
                	;    swcr    tr,tcb_sema
                	;    mfspr   r4,cr0
                	;    and     r4,r4,#$1000000000
                	;    beq     r4,.0001
                	dtl2:
01481C 7C C0 00 00 		lw		r1,QNdx0[r3]
014820 C6 11 A0 00 
014824 82 40 00 1A 		mov		r4,r1
014828 3D 02 44 00 		beq		r4,dtl1
                	dtl3:
01482C 0A 20 06 00 	    ldi     r2,#3
014830 82 40 00 1A 	    mov     r4,r1
014834 C0 10 00 05 	    lb      r1,TCB_Affinity[r1]
014838 B9 5A F8 FF 	    bsr     PRTNUM
01483C 02 12 00 1A 	    mov     r1,r4
014840 0A 20 08 00 		ldi	    r2,#4
014844 82 11 06 72 		lsr     r1,r3,#3
014848 B9 58 F8 FF 		bsr		PRTNUM
01484C B9 1B F9 FF 		bsr		DisplaySpace
014850 02 12 00 1A 		mov		r1,r4
014854 39 32 F8 FF 		bsr		DisplayHalf
014858 39 1A F9 FF 		bsr		DisplaySpace
01485C B9 19 F9 FF 		bsr		DisplaySpace
014860 02 12 00 1A 		mov		r1,r4
014864 C0 10 20 04 		lb		r1,TCB_Status[r1]
014868 B9 34 F8 FF 		bsr		DisplayByte
01486C B9 17 F9 FF 		bsr		DisplaySpace
014870 0A 20 06 00 		ldi		r2,#3
014874 46 12 10 04 		lw		r1,TCB_PrevRdy[r4]
014878 B9 2D F8 FF 		bsr		DisplayHalf
01487C B9 15 F9 FF 		bsr		DisplaySpace
014880 0A 20 06 00 		ldi		r2,#3
014884 46 12 00 04 		lw		r1,TCB_NextRdy[r4]
014888 B9 2B F8 FF 		bsr		DisplayHalf
01488C B9 13 F9 FF 		bsr		DisplaySpace
014890 46 12 F0 04 		lw		r1,TCB_Timeout[r4]
014894 B9 27 F8 FF 		bsr		DisplayWord
014898 39 48 F8 FF 		bsr		CRLF
01489C 46 42 00 04 		lw		r4,TCB_NextRdy[r4]
0148A0 7C C0 00 00 		lw      r1,QNdx0[r3]
0148A4 C6 11 A0 00 
0148A8 02 12 02 0C 		cmp		r1,r4,r1
0148AC BD 10 C0 FF 		bne		r1,dtl3
                	dtl1:
0148B0 94 31 10 00 		addui   r3,r3,#8
0148B4 86 41 80 00 		cmp     r4,r3,#64
0148B8 3D 42 B2 FF 		blt		r4,dtl2
                	;	sw		r0,tcb_sema       ; release semaphore
0148BC 57 4F 10 00 		pop		r4
0148C0 57 3F 10 00 		pop     r3
0148C4 57 2F 10 00 		pop     r2
0148C8 57 1F 10 00 		pop     r1
0148CC 3B FF 11 00 		rts

                	msgTaskList:
0148D0 0D 0A 43 50 		db	CR,LF,"CPU Pri   Task   Stat   Prv      Nxt     Timeout",CR,LF,0
0148D4 55 20 50 72 
0148D8 69 20 20 20 
0148DC 54 61 73 6B 
0148E0 20 20 20 53 
0148E4 74 61 74 20 
0148E8 20 20 50 72 
0148EC 76 20 20 20 
0148F0 20 20 20 4E 
0148F4 78 74 20 20 
0148F8 20 20 20 54 
0148FC 69 6D 65 6F 
014900 75 74 0D 0A 
014904 00          
                	
                	
                	;------------------------------------------------------------------------------
                	; r1 = task number
                	; r2 = new priority
                	;------------------------------------------------------------------------------
                	
                	SetTaskPriority:
014905 00 00 00 E7 	    push    lr
014909 EF 01 00    
01490C E7 E1 01 00 		push    r3
014910 39 7D FF FF 		bsr     LockSYS
014914 C0 30 20 04 		lb		r3,TCB_Status[r1]			    ; if the task is on the ready list
014918 8C 31 30 00 		and		r3,r3,#TS_READY|TS_RUNNING		; then remove it and re-add it.
01491C BD 01 0A 00 		beq		r3,.stp2						; Otherwise just go set the priority field
014920 39 1B 00 00 		bsr		RemoveTaskFromReadyList
014924 E0 30 24 04 		sb		r3,TCB_Priority[r1]
014928 39 0A 00 00 		bsr		AddTaskToReadyList
01492C 3A 01 00 00 		bra		.stp3
                	.stp2:
014930 E0 30 24 04 		sb		r3,TCB_Priority[r1]
                	.stp3:
014934 39 7C FF FF 		bsr     UnlockSYS
014938 57 3F 10 00 		pop     r3
01493C 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Make sure we have a real TCB pointer.
                	;------------------------------------------------------------------------------
                	
                	ValidateTCBPtr:
014940 67 E1 01 00 	    push    r2
014944 8C 20 FE 07 	    and     r2,r1,#$3FF
014948 3D 01 08 00 	    beq     r2,.0001
                	.badPtr:
01494C 0A 10 00 00 	    ldi     r1,#0
014950 57 2F 10 00 	    pop     r2
014954 37 FF 01 00 	    rtl
.0001:
014958 7C C1 00 00 	    cmp     r2,r1,#TCB_Array
01495C 86 20 00 00 
014960 3D 41 F6 FF 	    blt     r2,.badPtr
014964 7C C5 00 00 	    cmp     r2,r1,#TCB_ArrayEnd
014968 86 20 00 00 
01496C 3D 31 F0 FF 	    bge     r2,.badPtr
014970 57 2F 10 00 	    pop     r2
014974 37 FF 01 00 	    rtl

                	;------------------------------------------------------------------------------
                	; AddTaskToReadyList
                	;
                	; The ready list is a group of eight ready lists, one for each priority
                	; level. Each ready list is organized as a doubly linked list to allow fast
                	; insertions and removals. The list is organized as a ring (or bubble) with
                	; the last entry pointing back to the first. This allows a fast task switch
                	; to the next task. Which task is at the head of the list is maintained
                	; in the variable QNdx for the priority level.
                	;
                	; On Entry: Task list must be locked
                	; Registers Affected: none
                	; Parameters:
                	;	r1 = pointer to task control block
                	; Returns:
                	;	none
                	;------------------------------------------------------------------------------
                	message "AddToReadyList"
                	AddTaskToReadyList:
014978 E7 EF 01 00 	    push    lr
01497C 67 E1 01 00 	    push    r2
014980 E7 E1 01 00 	    push    r3
014984 67 E2 01 00 	    push    r4
014988 82 20 60 34 	    chk     r2,r1,b48             ; validate TCB pointer
01498C 3D 01 2E 00 	    beq     r2,.0001
014990 0A 20 20 00 		ldi     r2,#TS_READY
014994 E0 20 20 04 		sb		r2,TCB_Status[r1]
014998 C0 30 24 04 		lb		r3,TCB_Priority[r1]
01499C 96 41 10 00 		cmpu	r4,r3,#8
0149A0 3D 42 04 00 		blt		r4,.0002
0149A4 0A 30 0E 00 		ldi		r3,#PRI_LOWEST
                	.0002:
0149A8 82 40 00 1A 	    mov     r4,r1
0149AC 82 31 06 70 	    asl     r3,r3,#3
0149B0 7C C0 00 00 		lw		r1,QNdx0[r3]
0149B4 C6 11 A0 00 
0149B8 82 30 60 34 		chk     r3,r1,b48
0149BC BD 01 0E 00 		beq		r3,.0003
0149C0 C6 30 10 04 		lw		r3,TCB_PrevRdy[r1]
0149C4 E3 11 00 04 		sw		r1,TCB_NextRdy[r3]
0149C8 63 32 10 04 		sw		r3,TCB_PrevRdy[r4]
0149CC E3 40 10 04 		sw		r4,TCB_PrevRdy[r1]
0149D0 63 12 00 04 		sw		r1,TCB_NextRdy[r4]
0149D4 BA 02 00 00 		bra     .0001
                	
                		; Here the ready list was empty, so add at head
                	.0003:
0149D8 7C C0 00 00 		sw		r4,QNdx0[r3]
0149DC E3 41 A0 00 
0149E0 63 42 00 04 		sw		r4,TCB_NextRdy[r4]
0149E4 63 42 10 04 		sw		r4,TCB_PrevRdy[r4]
                	.0001:
0149E8 57 4F 10 00 		pop     r4
0149EC 57 3F 10 00 		pop     r3
0149F0 57 2F 10 00 		pop     r2
0149F4 3B FF 11 00 		rts
	
                	
                	;------------------------------------------------------------------------------
                	; RemoveTaskFromReadyList
                	;
                	; This subroutine removes a task from the ready list.
                	;
                	; Registers Affected: none
                	; Parameters:
                	;	r1 = pointer to task control block
                	; Returns:
                	;   r1 = pointer to task control block
                	;------------------------------------------------------------------------------
                	message "RemoveFromReadyList"
                	RemoveTaskFromReadyList:
0149F8 E7 EF 01 00 	    push    lr
0149FC 67 E1 01 00 	    push    r2
014A00 E7 E1 01 00 	    push    r3
014A04 67 E2 01 00 		push	r4
014A08 E7 E2 01 00 		push	r5
014A0C 82 20 60 34 	    chk     r2,r1,b48           ; validate TCB pointer
014A10 3D 01 32 00 	    beq     r2,rfr2
014A14 C0 30 20 04 		lb		r3,TCB_Status[r1]	; is the task on the ready list ?
014A18 8C 41 30 00 		and		r4,r3,#TS_READY|TS_RUNNING
014A1C 3D 02 2C 00 		beq		r4,rfr2
014A20 8C 31 CE FF 		and		r3,r3,#~(TS_READY|TS_RUNNING)
	sb		r3,TCB_Status[r1]	; task status no longer running or ready
014A24 E0 30 20 04 
014A28 C6 40 00 04 		lw		r4,TCB_NextRdy[r1]	; Get previous and next fields.
014A2C C6 50 10 04 		lw		r5,TCB_PrevRdy[r1]
014A30 E3 42 00 04 		sw		r4,TCB_NextRdy[r5]
014A34 63 52 10 04 		sw		r5,TCB_PrevRdy[r4]
014A38 C0 30 24 04 		lb		r3,TCB_Priority[r1]
014A3C 8C 31 0E 00 		and     r3,r3,#7            ; 0-7
014A40 82 31 06 70 		asl     r3,r3,#3
014A44 7C C0 00 00 		lw      r5,QNdx0[r3]
014A48 C6 51 A0 00 
014A4C 82 50 0A 0C 		cmp		r5,r1,r5			; Are we removing the QNdx task ?
014A50 BD 12 12 00 		bne		r5,rfr2
014A54 7C C0 00 00 		sw		r4,QNdx0[r3]
014A58 E3 41 A0 00 
                		; Now we test for the case where the task being removed was the only one
                		; on the ready list of that priority level. We can tell because the
                		; NextRdy would point to the task itself.
014A5C 02 52 02 0C 		cmp		r5,r4,r1				
014A60 BD 12 06 00 		bne		r5,rfr1
014A64 7C C0 00 00 		sw		r0,QNdx0[r3]        ; Make QNdx NULL
014A68 E3 01 A0 00 
                	rfr1:
014A6C E3 00 00 04 		sw		r0,TCB_NextRdy[r1]
014A70 E3 00 10 04 		sw		r0,TCB_PrevRdy[r1]
                	rfr2:
014A74 57 5F 10 00 		pop		r5
014A78 57 4F 10 00 		pop		r4
014A7C 57 3F 10 00 		pop     r3
014A80 57 2F 10 00 		pop     r2
014A84 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; AddToTimeoutList
                	; AddToTimeoutList adds a task to the timeout list. The task is placed in the
                	; list depending on it's timeout value.
                	;
                	; Registers Affected: none
                	; Parameters:
                	;	r1 = task
                	;	r2 = timeout value
                	;------------------------------------------------------------------------------
                	message "AddToTimeoutList"
                	AddToTimeoutList:
014A88 E7 EF 01 00 	    push    lr
014A8C 67 E1 01 00 		push    r2
014A90 E7 E1 01 00 		push    r3
014A94 67 E2 01 00 		push	r4
014A98 E7 E2 01 00 		push	r5
                	
                	;    bsr     ValidateTCBPtr
014A9C 82 20 60 34 	    chk     r2,r1,b48
014AA0 3D 01 56 00 	    beq     r2,attl1
014AA4 0A 50 00 00 	    ldi     r5,#0
014AA8 E3 00 50 04 		sw		r0,TCB_NextTo[r1]   ; these fields should already be NULL
014AAC E3 00 60 04 		sw		r0,TCB_PrevTo[r1]
014AB0 7C C0 00 00 		lw		r4,TimeoutList		; are there any tasks on the timeout list ?
014AB4 46 40 20 02 
014AB8 3D 02 3A 00 		beq		r4,attl_add_at_head	; If not, update head of list
                	attl_check_next:
014ABC 46 32 F0 04 	    lw      r3,TCB_Timeout[r4]            
014AC0 02 21 06 2A 		subu	r2,r2,r3	        ; is this timeout > next
014AC4 3D 41 12 00 		blt		r2,attl_insert_before
014AC8 02 52 00 1A 		mov		r5,r4
014ACC 46 42 50 04 		lw		r4,TCB_NextTo[r4]
014AD0 3D 12 F6 FF 		bne		r4,attl_check_next
                	
                		; timeout of a greater value. So we add the task to the end of the list.
                	attl_add_at_end:
                		; Here we scanned until the end of the timeout list and didn't find a 
014AD4 E3 00 50 04 		sw		r0,TCB_NextTo[r1]		; 
014AD8 E3 12 50 04 		sw		r1,TCB_NextTo[r5]
014ADC E3 50 60 04 		sw		r5,TCB_PrevTo[r1]
014AE0 E3 20 F0 04 		sw		r2,TCB_Timeout[r1]
014AE4 BA 0B 00 00 		bra		attl_exit
                	
                	attl_insert_before:
014AE8 BD 02 0C 00 		beq		r5,attl_insert_before_head
014AEC E3 40 50 04 		sw		r4,TCB_NextTo[r1]	; next on list goes after this task
014AF0 E3 50 60 04 		sw		r5,TCB_PrevTo[r1]	; set previous link
014AF4 E3 12 50 04 		sw		r1,TCB_NextTo[r5]
014AF8 63 12 60 04 		sw		r1,TCB_PrevTo[r4]
014AFC 3A 03 00 00 		bra		attl_adjust_timeout
                	
                		; Here there is no previous entry in the timeout list
                		; Add at start
                	attl_insert_before_head:
014B00 63 12 60 04 		sw		r1,TCB_PrevTo[r4]
014B04 E3 00 60 04 		sw		r0,TCB_PrevTo[r1]	;
014B08 E3 40 50 04 		sw		r4,TCB_NextTo[r1]
014B0C 7C C0 00 00 		sw		r1,TimeoutList			; update the head pointer
014B10 63 10 20 02 
                	attl_adjust_timeout:
014B14 02 21 06 28 		addu	r2,r2,r3	       ; get back timeout
014B18 E3 20 F0 04 		sw		r2,TCB_Timeout[r1]
014B1C 46 52 F0 04 		lw		r5,TCB_Timeout[r4]	; adjust the timeout of the next task
014B20 82 52 04 2A 		subu	r5,r5,r2
014B24 63 52 F0 04 		sw		r5,TCB_Timeout[r4]
014B28 3A 03 00 00 		bra		attl_exit
                	
                		; Here there were no tasks on the timeout list, so we add at the
                		; head of the list.
                	attl_add_at_head:
014B2C 7C C0 00 00 		sw		r1,TimeoutList		; set the head of the timeout list
014B30 63 10 20 02 
014B34 E3 20 F0 04 		sw		r2,TCB_Timeout[r1]
                		; flag no more entries in timeout list
014B38 E3 00 50 04 		sw		r0,TCB_NextTo[r1]	; no next entries
014B3C E3 00 60 04 		sw		r0,TCB_PrevTo[r1]	; and no prev entries
                	attl_exit:
014B40 C0 20 20 04 		lb		r2,TCB_Status[r1]	; set the task's status as timing out
014B44 0D 21 02 00 		or		r2,r2,#TS_TIMEOUT
014B48 E0 20 20 04 		sb		r2,TCB_Status[r1]
                	attl1:
014B4C 57 5F 10 00 		pop		r5
014B50 57 4F 10 00 		pop		r4
014B54 57 3F 10 00 		pop     r3
014B58 57 2F 10 00 		pop     r2
014B5C 3B FF 11 00 		rts
	
                	;------------------------------------------------------------------------------
                	; RemoveFromTimeoutList
                	;
                	; This routine is called when a task is killed. The task may need to be
                	; removed from the middle of the timeout list.
                	;
                	; On entry: the timeout list semaphore must be already set.
                	; Registers Affected: none
                	; Parameters:
                	;	 r1 = pointer to task control block
                	;------------------------------------------------------------------------------
                	
                	RemoveFromTimeoutList:
014B60 E7 EF 01 00 	    push    lr
014B64 67 E1 01 00 		push    r2
014B68 E7 E1 01 00 		push    r3
014B6C 67 E2 01 00 		push	r4
014B70 E7 E2 01 00 		push	r5
                	
                	;    bsr     ValidateTCBPtr
014B74 82 20 60 34 	    chk     r2,r1,b48
014B78 3D 01 46 00 	    beq     r2,rftBadPtr
014B7C C0 40 20 04 		lb		r4,TCB_Status[r1]		; Is the task even on the timeout list ?
014B80 0C 42 02 00 		and		r4,r4,#TS_TIMEOUT
014B84 3D 02 40 00 		beq		r4,rftl_not_on_list
014B88 7C C0 00 00 		lw      r5,TimeoutList
014B8C 46 50 20 02 
014B90 82 40 0A 0C 		cmp		r4,r1,r5         		; Are we removing the head of the list ?
014B94 3D 02 18 00 		beq		r4,rftl_remove_from_head
014B98 C6 40 60 04 		lw		r4,TCB_PrevTo[r1]		; adjust the links of the next and previous
014B9C 3D 02 26 00 		beq		r4,rftl_empty_list		; no previous link - list corrupt?
014BA0 C6 50 50 04 		lw		r5,TCB_NextTo[r1]		; tasks on the list to point around the task
014BA4 63 52 50 04 		sw		r5,TCB_NextTo[r4]
014BA8 BD 02 20 00 		beq		r5,rftl_empty_list
014BAC E3 42 60 04 		sw		r4,TCB_PrevTo[r5]
014BB0 C6 20 F0 04 		lw		r2,TCB_Timeout[r1]		; update the timeout of the next on list
014BB4 C6 32 F0 04 		lw      r3,TCB_Timeout[r5]
014BB8 02 21 06 08 		add		r2,r2,r3            	; with any remaining timeout in the task
014BBC E3 22 F0 04 		sw		r2,TCB_Timeout[r5]		; removed from the list
014BC0 3A 05 00 00 		bra		rftl_empty_list
                	
                		; Update the head of the list.
                	rftl_remove_from_head:
014BC4 C6 50 50 04 		lw		r5,TCB_NextTo[r1]
014BC8 7C C0 00 00 		sw		r5,TimeoutList			; store next field into list head
014BCC 63 50 20 02 
014BD0 BD 02 0C 00 		beq		r5,rftl_empty_list
014BD4 C6 40 F0 04 		lw		r4,TCB_Timeout[r1]		; add any remaining timeout to the timeout
014BD8 C6 32 F0 04 		lw      r3,TCB_Timeout[r5]
014BDC 02 42 06 08 		add		r4,r4,r3            	; of the next task on the list.
014BE0 E3 42 F0 04 		sw		r4,TCB_Timeout[r5]
014BE4 E3 02 60 04 		sw		r0,TCB_PrevTo[r5]       ; there is no previous item to the head
                		
                		; Here there is no previous or next items in the list, so the list
                		; will be empty once this task is removed from it.
                	rftl_empty_list:
014BE8 82 20 00 1A 		mov     r2,r1
014BEC 40 31 20 04 		lb		r3,TCB_Status[r2]	; clear timeout status (bit #0)
014BF0 8C 31 FC 01 		and     r3,r3,#$FE
014BF4 60 31 20 04 		sb      r3,TCB_Status[r2]
014BF8 63 01 50 04 		sw		r0,TCB_NextTo[r2]	; make sure the next and prev fields indicate	
014BFC 63 01 60 04 		sw	    r0,TCB_PrevTo[r2]   ; the task is not on a list.
014C00 02 11 00 1A 		mov     r1,r2
                	rftBadPtr:
                	rftl_not_on_list:
014C04 57 5F 10 00 		pop		r5
014C08 57 4F 10 00 		pop		r4
014C0C 57 3F 10 00 		pop     r3
014C10 57 2F 10 00 		pop     r2
                	rftl_not_on_list2:
014C14 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; PopTimeoutList
                	;
                	; This subroutine is called from within the timer ISR when the task's 
                	; timeout expires. It's always the head of the list that's being removed in
                	; the timer ISR so the removal from the timeout list is optimized. We know
                	; the timeout expired, so the amount of time to add to the next task is zero.
                	;
                	; Registers Affected: 
                	; Parameters:
                	;	r2: head of timeout list
                	; Returns:
                	;	r1 = task id of task popped from timeout list
                	;------------------------------------------------------------------------------
                	
                	PopTimeoutList:
014C18 46 11 50 04 		lw		r1,TCB_NextTo[r2]
014C1C 7C C0 00 00 		sw		r1,TimeoutList  ; store next field into list head
014C20 63 10 20 02 
014C24 BD 00 04 00 		beq		r1,ptl1
014C28 E3 00 60 04 		sw		r0,TCB_PrevTo[r1]; previous link = NULL
                	ptl1:
014C2C 40 11 20 04 	    lb      r1,TCB_Status[r2]
014C30 8C 10 FC 01 	    and     r1,r1,#$FE       ; clear timeout status
014C34 60 11 20 04 	    sb      r1,TCB_Status[r2]
014C38 63 01 50 04 		sw		r0,TCB_NextTo[r2]	; make sure the next and prev fields indicate
014C3C 63 01 60 04 		sw		r0,TCB_PrevTo[r2]		; the task is not on a list.
014C40 02 11 00 1A 		mov     r1,r2
014C44 37 FF 01 00 	    rtl

                	;------------------------------------------------------------------------------
                	; Sleep
                	;
                	; Put the currently running task to sleep for a specified time.
                	;
                	; Registers Affected: none
                	; Parameters:
                	;	r1 = time duration in jiffies (1/60 second).
                	; Returns: none
                	;------------------------------------------------------------------------------
                	message "sleep"
                	
                	Sleep:
014C48 E7 EF 01 00 	    push    lr
014C4C E7 E0 01 00 	    push    r1
014C50 67 E1 01 00 	    push    r2
014C54 82 20 00 1A 		mov     r2,r1
014C58 39 14 FF FF 		bsr     LockSYS
014C5C 02 1C 00 1A 		mov		r1,tr
014C60 39 B3 FF FF 		bsr		RemoveTaskFromReadyList
014C64 B9 C4 FF FF 		bsr		AddToTimeoutList	; The scheduler will be returning to this
014C68 B9 15 FF FF 		bsr     UnlockSYS
014C6C 38 0F 04 80 		int		#2				; task eventually, once the timeout expires,
014C70 57 2F 10 00 		pop     r2
014C74 57 1F 10 00 		pop     r1
014C78 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Allocate a mailbox
                	; Parameters:
                	;	r1 = pointer to place to store handle
                	; Returns:
                	;	r1 = E_Ok	means mailbox allocated properly
                	;	r1 = E_Arg	means a NULL pointer was passed in r1
                	;	r1 = E_NoMoreMbx	means no more mailboxes were available
                	;	zf is set if everything is ok, otherwise zf is clear
                	;------------------------------------------------------------------------------
                	;
                	AllocMbx:
014C7C BD 00 50 00 		beq		r1,ambx_bad_ptr
014C80 E7 EF 01 00 		push    lr
014C84 67 E1 01 00 		push    r2
014C88 E7 E1 01 00 		push    r3
014C8C 67 E2 01 00 		push	r4
014C90 82 40 00 1A 		mov		r4,r1			; r4 = pointer to returned handle
014C94 B9 0C FF FF 		bsr     LockSYS
014C98 7C C0 00 00 		lw		r1,FreeMbxHandle			; Get mailbox off of free mailbox list
014C9C 46 10 40 02 
014CA0 63 12 00 00 		sw		r1,[r4]			; store off the mailbox number
014CA4 BD 00 40 00 		beq		r1,ambx_no_mbxs
014CA8 C6 20 00 00 		lw		r2,MBX_LINK[r1]		; and update the head of the list
014CAC 7C C0 00 00 		sw		r2,FreeMbxHandle
014CB0 63 20 40 02 
014CB4 7C C0 00 00 		dec		nMailbox,#1		; decrement number of available mailboxes
014CB8 64 F0 51 02 
014CBC 02 3C 00 1A 		mov		r3,tr           ; Add the mailbox to the list of mailboxes
014CC0 46 2C C0 04 		lw		r2,TCB_MbxList[tr]	; managed by the task.
014CC4 E3 20 00 00 		sw		r2,MBX_LINK[r1]
014CC8 63 1C C0 04 		sw		r1,TCB_MbxList[tr]
014CCC 82 20 00 1A 		mov     r2,r1
014CD0 40 1C 28 04 		lb		r1,TCB_hJCB[tr]
014CD4 60 11 6C 00 		sb		r1,MBX_OWNER[r2]
014CD8 63 01 10 00 		sw		r0,MBX_TQ_HEAD[r2] ; initialize the head and tail of the queues
014CDC 63 01 30 00 		sw		r0,MBX_TQ_TAIL[r2]
014CE0 63 01 40 00 		sw		r0,MBX_MQ_HEAD[r2]
014CE4 63 01 50 00 		sw		r0,MBX_MQ_TAIL[r2]
014CE8 61 01 60 00 		sc		r0,MBX_TQ_COUNT[r2]	; initialize counts to zero
014CEC 61 01 68 00 		sc		r0,MBX_MQ_COUNT[r2]
014CF0 61 01 70 00 		sc		r0,MBX_MQ_MISSED[r2]
014CF4 0A 10 10 00 		ldi		r1,#8				; set the max queue size
014CF8 61 11 64 00 		sc		r1,MBX_MQ_SIZE[r2]	; and
014CFC 0A 10 04 00 		ldi		r1,#MQS_NEWEST		; queueing strategy
014D00 60 11 6E 00 		sb		r1,MBX_MQ_STRATEGY[r2]
014D04 39 02 FF FF 		bsr     UnlockSYS
014D08 57 4F 10 00 		pop		r4
014D0C 57 3F 10 00 		pop     r3
014D10 57 2F 10 00 		pop     r2
014D14 0A 10 00 00 		ldi		r1,#E_Ok
014D18 3B FF 11 00 		rts
ambx_bad_ptr:
014D1C 0A 10 02 00 		ldi		r1,#E_Arg
014D20 37 FF 01 00 		rtl
ambx_no_mbxs:
014D24 39 FE FE FF 		bsr     UnlockSYS
014D28 57 4F 10 00 		pop		r4
014D2C 57 3F 10 00 		pop     r3
014D30 57 2F 10 00 		pop     r2
014D34 0A 10 80 00 		ldi		r1,#E_NoMoreMbx
014D38 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Free up a mailbox.
                	;	This function frees a mailbox from the currently running task. It may be
                	; called by ExitTask().
                	;
                	; Parameters:
                	;	r1 = mailbox handle
                	;------------------------------------------------------------------------------
                	
                	FreeMbx:
014D3C E7 EF 01 00 	    push    lr
014D40 67 E1 01 00 		push    r2
014D44 02 2C 00 1A 		mov     r2,tr
014D48 B9 01 00 00 		bsr		FreeMbx2
014D4C 57 2F 10 00 		pop     r2
014D50 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Free up a mailbox.
                	;	This function dequeues any messages from the mailbox and adds the messages
                	; back to the free message pool. The function also dequeues any threads from
                	; the mailbox.
                	;	Called from KillTask() and FreeMbx().
                	;
                	; Parameters:
                	;	r1 = mailbox handle
                	;	r2 = task handle
                	; Returns:
                	;	r1 = E_Ok	if everything ok
                	;	r1 = E_Arg	if a bad handle is passed
                	;------------------------------------------------------------------------------
                	
                	FreeMbx2:
014D54 E7 EF 01 00 	    push    lr
014D58 67 E1 01 00 		push    r2
014D5C E7 E1 01 00 		push    r3
014D60 67 E2 01 00 		push    r4
014D64 82 30 62 34 		chk     r3,r1,b49
014D68 BD 01 6E 00 		beq     r3,fmbx0
014D6C 82 40 00 1A 		mov     r4,r1
014D70 02 11 60 34 		chk     r1,r2,b48
014D74 BD 00 68 00 		beq     r1,fmbx0
014D78 02 12 00 1A 		mov     r1,r4
014D7C B9 EF FE FF 		bsr     LockSYS
                	
                		; Dequeue messages from mailbox and add them back to the free message list.
                	fmbx5:
014D80 E7 E0 01 00 		push    r1
014D84 B9 40 00 00 		bsr		DequeueMsgFromMbx
014D88 BD 00 14 00 		beq		r1,fmbx3
014D8C 67 E1 01 00 		push    r2
014D90 7C C0 00 00 		lw		r2,FreeMsg
014D94 46 20 60 02 
014D98 E3 20 00 00 		sw		r2,MSG_LINK[r1]
014D9C 7C C0 00 00 		sw		r1,FreeMsg
014DA0 63 10 60 02 
014DA4 57 2F 10 00 		pop     r2
014DA8 57 1F 10 00 		pop     r1
014DAC BA FA FF FF 		bra		fmbx5
                	fmbx3:
014DB0 57 1F 10 00 		pop     r1
                	
                		; Dequeue threads from mailbox.
                	fmbx6:
014DB4 E7 E0 01 00 		push    r1
014DB8 39 56 00 00 		bsr		DequeueThreadFromMbx2
014DBC BD 00 06 00 		beq		r1,fmbx7
014DC0 57 1F 10 00 		pop     r1
014DC4 3A FE FF FF 		bra		fmbx6
                	fmbx7:
014DC8 57 1F 10 00 		pop     r1
                	
                		; Remove mailbox from TCB list
014DCC 46 31 C0 04 		lw		r3,TCB_MbxList[r2]
014DD0 67 E1 01 00 		push    r2
014DD4 0A 20 FE FF 		ldi		r2,#-1
                	fmbx10:
014DD8 82 40 06 0C 		cmp		r4,r1,r3
014DDC 3D 02 0C 00 		beq		r4,fmbx9
014DE0 82 21 00 1A 		mov     r2,r3
014DE4 C6 31 00 00 		lw		r3,MBX_LINK[r3]
014DE8 BD 11 F8 FF 		bne		r3,fmbx10
                		; ?The mailbox was not in the list managed by the task.
014DEC 57 2F 10 00 		pop     r2
014DF0 3A 07 00 00 		bra		fmbx2
                	fmbx9:
014DF4 3D 01 0A 00 		beq		r2,fmbx11
014DF8 C6 31 00 00 		lw		r3,MBX_LINK[r3]
014DFC 63 31 00 00 		sw		r3,MBX_LINK[r2]
014E00 57 2F 10 00 		pop     r2
014E04 3A 02 00 00 		bra		fmbx12
                	fmbx11:
                		; No prior mailbox in list, update head
014E08 C6 30 00 00 		lw		r3,MBX_LINK[r1]
014E0C 57 2F 10 00 		pop     r2
014E10 63 31 C0 04 		sw		r3,TCB_MbxList[r2]
                	
                	fmbx12:
                		; Add mailbox back to mailbox pool
014E14 7C C0 00 00 		lw		r2,FreeMbxHandle
014E18 46 20 40 02 
014E1C E3 20 00 00 		sw		r2,MBX_LINK[r1]
014E20 7C C0 00 00 		sw		r1,FreeMbxHandle
014E24 63 10 40 02 
                	fmbx2:
014E28 B9 DD FE FF 		bsr     UnlockSYS
014E2C 57 4F 10 00 		pop     r4
014E30 57 3F 10 00 		pop     r3
014E34 57 2F 10 00 		pop     r2
014E38 0A 10 00 00 		ldi		r1,#E_Ok
014E3C 3B FF 11 00 		rts
fmbx1:
014E40 B9 DA FE FF 		bsr     UnlockSYS
                	fmbx0:
014E44 57 4F 10 00 		pop     r4
014E48 57 3F 10 00 		pop     r3
014E4C 57 2F 10 00 		pop     r2
014E50 0A 10 02 00 		ldi		r1,#E_Arg
014E54 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Queue a message at a mailbox.
                	; On entry the mailbox semaphore is already activated.
                	;
                	; Parameters:
                	;	r1 = message
                	;	r2 = mailbox
                	;------------------------------------------------------------------------------
                	
                	QueueMsgAtMbx:
014E58 BD 00 4E 00 		beq		r1,qmam_bad_msg
014E5C E7 EF 01 00 		push    lr
014E60 E7 E0 01 00 		push    r1
014E64 67 E1 01 00 		push    r2
014E68 E7 E1 01 00 		push    r3
014E6C 67 E2 01 00 		push	r4
014E70 40 41 6E 00 		lb		r4,MBX_MQ_STRATEGY[r2]
014E74 06 32 00 00 		cmp		r3,r4,#MQS_UNLIMITED
014E78 BD 01 1E 00 		beq		r3,qmam_unlimited
014E7C 06 32 04 00 		cmp		r3,r4,#MQS_NEWEST
014E80 BD 01 3C 00 		beq		r3,qmam_newest
014E84 06 32 02 00 		cmp		r3,r4,#MQS_OLDEST
014E88 BD 01 76 00 		beq		r3,qmam_oldest
014E8C B9 6E 01 00 		bsr		kernel_panic
014E90 49 6C 6C 65 		db		"Illegal message queue strategy",0
014E94 67 61 6C 20 
014E98 6D 65 73 73 
014E9C 61 67 65 20 
014EA0 71 75 65 75 
014EA4 65 20 73 74 
014EA8 72 61 74 65 
014EAC 67 79 00    
014EAF 00 3A 11 00 		bra		qmam8
014EB3 00          
                		; Here we assumed "unlimited" message storage. Just add the new message at
                		; the tail of the queue.
                	qmam_unlimited:
014EB4 46 31 50 00 		lw		r3,MBX_MQ_TAIL[r2]
014EB8 82 41 62 34 		chk     r4,r3,b49
014EBC 3D 02 06 00 		beq		r4,qmam_add_at_head
014EC0 E3 11 00 00 		sw		r1,MSG_LINK[r3]
014EC4 3A 01 00 00 		bra		qmam2
                	qmam_add_at_head:
014EC8 63 11 40 00 		sw		r1,MBX_MQ_HEAD[r2]
                	qmam2:
014ECC 63 11 50 00 		sw		r1,MBX_MQ_TAIL[r2]
                	qmam6:
014ED0 43 31 68 00 	    lcu     r3,MBX_MQ_COUNT[r2]
014ED4 94 31 02 00 	    addui   r3,r3,#1
014ED8 61 31 68 00 		sc		r3,MBX_MQ_COUNT[r2]		; increase the queued message count
014EDC E3 00 00 00 		sw		r0,MSG_LINK[r1]
014EE0 57 4F 10 00 		pop		r4
014EE4 57 3F 10 00 		pop     r3
014EE8 57 2F 10 00 		pop     r2
014EEC 57 1F 10 00 		pop     r1
014EF0 3B FF 11 00 		rts
qmam_bad_msg:
014EF4 37 FF 01 00 		rtl
	; Here we are queueing a limited number of messages. As new messages are
                		; added at the tail of the queue, messages drop off the head of the queue.
                	qmam_newest:
014EF8 46 31 50 00 		lw		r3,MBX_MQ_TAIL[r2]
014EFC 82 41 62 34 		chk     r4,r3,b49
014F00 3D 02 06 00 		beq		r4,qmam3
014F04 E3 11 00 00 		sw		r1,MSG_LINK[r3]
014F08 3A 01 00 00 		bra		qmam4
                	qmam3:
014F0C 63 11 40 00 		sw		r1,MBX_MQ_HEAD[r2]
                	qmam4:
014F10 63 11 50 00 		sw		r1,MBX_MQ_TAIL[r2]
014F14 43 31 68 00 		lcu		r3,MBX_MQ_COUNT[r2]
014F18 94 31 02 00 		addui   r3,r3,#1
014F1C 43 41 64 00 		lcu     r4,MBX_MQ_SIZE[r2]
014F20 82 31 08 2C 		cmpu    r3,r3,r4
014F24 BD 51 D6 FF 		ble		r3,qmam6
014F28 E3 00 00 00 		sw		r0,MSG_LINK[r1]
                		; Remove the oldest message which is the one at the head of the mailbox queue.
                		; Add the message back to the pool of free messages.
014F2C 46 11 40 00 		lw		r1,MBX_MQ_HEAD[r2]
014F30 C6 30 00 00 		lw		r3,MSG_LINK[r1]		; move next in queue
014F34 63 31 40 00 		sw		r3,MBX_MQ_HEAD[r2]	; to head of list
                	qmam8:
014F38 43 31 70 00 	    lcu     r3,MBX_MQ_MISSED[r2]
014F3C 94 31 02 00 	    addui   r3,r3,#1
014F40 61 31 70 00 	    sc      r3,MBX_MQ_MISSED[r2]  
                	qmam1:
014F44 7C C0 00 00 		lw		r3,FreeMsg				; put old message back into free message list
014F48 46 30 60 02 
014F4C E3 30 00 00 		sw		r3,MSG_LINK[r1]
014F50 7C C0 00 00 		sw		r1,FreeMsg
014F54 63 10 60 02 
014F58 7C C0 00 00 		inc		nMsgBlk,#1
014F5C 64 10 70 02 
                		;GoReschedule
014F60 57 4F 10 00 		pop		r4
014F64 57 3F 10 00 		pop     r3
014F68 57 2F 10 00 		pop     r2
014F6C 57 1F 10 00 		pop     r1
014F70 3B FF 11 00 		rts
	; Here we are buffering the oldest messages. So if there are too many messages
                		; in the queue already, then the queue doesn't change and the new message is
                		; lost.
                	qmam_oldest:
014F74 43 31 68 00 		lcu		r3,MBX_MQ_COUNT[r2]		; Check if the queue is full
014F78 43 41 64 00 		lcu     r4,MBX_MQ_SIZE[r2]
014F7C 82 31 08 2C 		cmpu	r3,r3,r4
014F80 BD 31 DC FF 		bge		r3,qmam8			; If the queue is full, then lose the current message
014F84 3A E6 FF FF 		bra		qmam_unlimited		; Otherwise add message to queue
                	
                	;------------------------------------------------------------------------------
                	; Dequeue a message from a mailbox.
                	;
                	; Returns
                	;	r1 = message pointer (NULL if there are no messages)
                	;------------------------------------------------------------------------------
                	
                	DequeueMsgFromMbx:
014F88 67 E1 01 00 	    push    r2
014F8C E7 E1 01 00 	    push    r3
014F90 82 20 00 1A 		mov     r2,r1				; x = mailbox index
014F94 43 11 68 00 		lcu		r1,MBX_MQ_COUNT[r2]		; are there any messages available ?
014F98 BD 00 1A 00 		beq		r1,dmfm3
014F9C 95 10 02 00 		subui   r1,r1,#1
014FA0 61 11 68 00 		sc		r1,MBX_MQ_COUNT[r2]		; update the message count
014FA4 46 11 40 00 		lw		r1,MBX_MQ_HEAD[r2]		; Get the head of the list, this should not be NULL
014FA8 BD 00 12 00 		beq		r1,dmfm3			; since the message count > 0
014FAC C6 30 00 00 		lw		r3,MSG_LINK[r1]		; get the link to the next message
014FB0 63 31 40 00 		sw		r3,MBX_MQ_HEAD[r2]		; update the head of the list
014FB4 BD 11 04 00 		bne		r3,dmfm2			; if there was no more messages then update the
014FB8 63 31 50 00 		sw		r3,MBX_MQ_TAIL[r2]	; tail of the list as well.
                	dmfm2:
014FBC E3 10 00 00 		sw		r1,MSG_LINK[r1]		; point the link to the message itself to indicate it's dequeued
                	dmfm1:
014FC0 57 3F 10 00 	    pop     r3
014FC4 57 2F 10 00 	    pop     r2
014FC8 3B FF 11 00 		rts
dmfm3:
014FCC 57 3F 10 00 	    pop     r3
014FD0 57 2F 10 00 	    pop     r2
014FD4 0A 10 00 00 		ldi		r1,#0
014FD8 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; Parameters:
                	;	r1 = mailbox handle
                	; Returns:
                	;	r1 = E_arg		means pointer is invalid
                	;	r1 = E_NoThread	means no thread was queued at the mailbox
                	;	r2 = thead handle
                	;------------------------------------------------------------------------------
                	
                	DequeueThreadFromMbx:
014FDC 67 E2 01 00 		push	r4
014FE0 C6 40 10 00 		lw		r4,MBX_TQ_HEAD[r1]
014FE4 3D 12 0A 00 		bne		r4,dtfm2
014FE8 57 4F 10 00 		pop		r4
014FEC 0A 20 00 00 		ldi		r2,#0
014FF0 0A 10 0C 00 		ldi		r1,#E_NoThread
014FF4 37 FF 01 00 		rtl
dtfm2:
014FF8 E7 E2 01 00 		push	r5
014FFC C3 50 60 00 		lcu     r5,MBX_TQ_COUNT[r1]
015000 95 52 02 00 		subui   r5,r5,#1
015004 E1 50 60 00 		sc      r5,MBX_TQ_COUNT[r1]
015008 02 22 00 1A 		mov		r2,r4
01500C 46 42 70 04 		lw		r4,TCB_mbq_next[r4]
015010 E3 40 10 00 		sw		r4,MBX_TQ_HEAD[r1]
015014 3D 02 06 00 		beq		r4,dtfm3
015018 63 02 80 04 			sw		r0,TCB_mbq_prev[r4]
01501C 3A 01 00 00 			bra		dtfm4
                	dtfm3:
015020 E3 00 30 00 			sw		r0,MBX_TQ_TAIL[r1]
                	dtfm4:
015024 02 51 00 1A 		mov		r5,r2
015028 C0 12 20 04 		lb		r1,TCB_Status[r5]
01502C 8C 10 02 00 		and		r1,r1,#TS_TIMEOUT
015030 BD 00 0C 00 		beq		r1,dtfm5
015034 82 12 00 1A 		mov		r1,r5
015038 E7 EF 01 00 		push    lr
01503C 7C 00 00 00 		jsr		RemoveFromTimeoutList
015040 3C F0 B1 A5 
015044 57 FF 11 00 		pop     lr
                	dtfm5:
015048 E3 02 70 04 		sw		r0,TCB_mbq_next[r5]
01504C E3 02 80 04 		sw		r0,TCB_mbq_prev[r5]
015050 E3 02 B0 04 		sw		r0,TCB_hWaitMbx[r5]
015054 E0 02 20 04 		sb		r0,TCB_Status[r5]		; set task status = TS_NONE
015058 57 5F 10 00 		pop		r5
01505C 57 4F 10 00 		pop		r4
015060 0A 10 00 00 		ldi		r1,#E_Ok
015064 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	;	This function is called from FreeMbx(). It dequeues threads from the
                	; mailbox without removing the thread from the timeout list. The thread will
                	; then timeout waiting for a message that can never be delivered.
                	;
                	; Parameters:
                	;	r1 = mailbox handle
                	; Returns:
                	;	r1 = E_arg		means pointer is invalid
                	;	r1 = E_NoThread	means no thread was queued at the mailbox
                	;	r2 = thead handle
                	;------------------------------------------------------------------------------
                	
                	DequeueThreadFromMbx2:
015068 67 E2 01 00 		push	r4
01506C C6 40 10 00 		lw		r4,MBX_TQ_HEAD[r1]
015070 3D 12 0A 00 		bne		r4,dtfm2a
015074 57 4F 10 00 		pop		r4
015078 0A 20 00 00 		ldi		r2,#0
01507C 0A 10 0C 00 		ldi		r1,#E_NoThread
015080 37 FF 01 00 		rtl
dtfm2a:
015084 E7 E2 01 00 		push	r5
015088 C3 50 60 00 		lcu     r5,MBX_TQ_COUNT[r1]
01508C 95 52 02 00 		subui   r5,r5,#1
015090 E1 50 60 00 		sc      r5,MBX_TQ_COUNT[r1]
015094 02 22 00 1A 		mov		r2,r4
015098 46 42 70 04 		lw		r4,TCB_mbq_next[r4]
01509C E3 40 10 00 		sw		r4,MBX_TQ_HEAD[r1]
0150A0 3D 02 06 00 		beq		r4,dtfm3a
0150A4 63 02 80 04 			sw		r0,TCB_mbq_prev[r4]
0150A8 3A 01 00 00 			bra		dtfm4a
                	dtfm3a:
0150AC E3 00 30 00 			sw		r0,MBX_TQ_TAIL[r1]
                	dtfm4a:
0150B0 63 01 70 04 		sw	    r0,TCB_mbq_next[r2]
0150B4 63 01 80 04 		sw		r0,TCB_mbq_prev[r2]
0150B8 63 01 B0 04 		sw		r0,TCB_hWaitMbx[r2]
                	;	sei
0150BC 40 11 20 04 	    lb      r1,TCB_Status[r2]
0150C0 8C 10 FA FF 	    and     r1,r1,#~TS_WAITMSG
0150C4 60 11 20 04 	    sb      r1,TCB_Status[r2]
                	;	cli
0150C8 57 5F 10 00 		pop		r5
0150CC 57 4F 10 00 		pop		r4
0150D0 0A 10 00 00 		ldi		r1,#E_Ok
0150D4 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; PostMsg and SendMsg are the same operation except that PostMsg doesn't
                	; invoke rescheduling while SendMsg does. So they both call the same
                	; SendMsgPrim primitive routine. This two wrapper functions for convenience.
                	;------------------------------------------------------------------------------
                	
                	PostMsg:
0150D8 E7 EF 01 00 	    push    lr
0150DC 67 E2 01 00 		push	r4
0150E0 0A 40 00 00 		ldi		r4,#0			; Don't invoke scheduler
0150E4 39 05 00 00 		bsr		SendMsgPrim
0150E8 57 4F 10 00 		pop		r4
0150EC 3B FF 11 00 		rts

                	SendMsg:
0150F0 E7 EF 01 00 	    push    lr
0150F4 67 E2 01 00 		push	r4
0150F8 0A 40 02 00 		ldi		r4,#1			; Do invoke scheduler
0150FC 7C 00 00 00 		jsr		SendMsgPrim
015100 3C F0 87 A8 
015104 57 4F 10 00 		pop		r4
015108 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; SendMsgPrim
                	; Send a message to a mailbox
                	;
                	; Parameters
                	;	r1 = handle to mailbox
                	;	r2 = message D1
                	;	r3 = message D2
                	;	r4 = scheduler flag		1=invoke,0=don't invoke
                	;
                	; Returns
                	;	r1=E_Ok			everything is ok
                	;	r1=E_BadMbx		for a bad mailbox number
                	;	r1=E_NotAlloc	for a mailbox that isn't allocated
                	;	r1=E_NoMsg		if there are no more message blocks available
                	;------------------------------------------------------------------------------
                	message "SendMsgPrim"
                	SendMsgPrim:
01510C E7 EF 01 00 	    push    lr
015110 E7 E2 01 00 		push	r5
015114 67 E3 01 00 		push	r6
015118 E7 E3 01 00 		push	r7
                	
01511C 82 50 62 34 	    chk     r5,r1,b49
015120 BD 02 70 00 	    beq     r5,smsg1
015124 B9 7A FE FF 	    bsr     LockSYS
015128 C1 70 6C 00 		lbu		r7,MBX_OWNER[r1]
01512C 96 53 66 00 		cmpu    r5,r7,#NR_JCB
015130 BD 32 72 00 		bge		r5,smsg2				; error: no owner
015134 E7 E0 01 00 		push    r1
015138 67 E1 01 00 		push    r2
01513C 39 D4 FF FF 		bsr		DequeueThreadFromMbx	; r1=mbx
015140 02 61 00 1A 		mov		r6,r2					; r6 = thread
015144 57 2F 10 00 		pop     r2
015148 57 1F 10 00 		pop     r1
01514C 3D 13 2A 00 		bne		r6,smsg3
                			; Here there was no thread waiting at the mailbox, so a message needs to
                			; be allocated
                	smp2:
015150 7C C0 00 00 			lw		r7,FreeMsg
015154 46 70 60 02 
015158 BD 03 6A 00 			beq		r7,smsg4		; no more messages available
01515C C6 53 00 00 			lw		r5,MSG_LINK[r7]
015160 7C C0 00 00 			sw		r5,FreeMsg
015164 63 50 60 02 
015168 7C C0 00 00 			dec		nMsgBlk		; decrement the number of available messages
01516C 64 F0 71 02 
015170 7C C0 00 00 			sw		r0,freemsg_sema
015174 63 00 A0 03 
015178 E3 23 10 00 			sw		r2,MSG_D1[r7]
01517C E3 33 20 00 			sw		r3,MSG_D2[r7]
015180 E7 E0 01 00 			push    r1
015184 67 E1 01 00 			push    r2
015188 82 20 00 1A 			mov     r2,r1			; r2 = mailbox
01518C 82 13 00 1A 			mov		r1,r7			; r1 = message
015190 39 99 FF FF 			bsr		QueueMsgAtMbx
015194 57 2F 10 00 			pop     r2
015198 57 1F 10 00 			pop     r1
01519C 3D 03 26 00 			beq		r6,smsg5    ; check if there is a thread waiting for a message
                	smsg3:
0151A0 63 23 90 04 		sw		r2,TCB_MSG_D1[r6]
0151A4 63 33 A0 04 		sw		r3,TCB_MSG_D2[r6]
                	smsg7:
0151A8 40 53 20 04 		lb		r5,TCB_Status[r6]
0151AC 8C 52 02 00 		and		r5,r5,#TS_TIMEOUT
0151B0 BD 02 06 00 		beq		r5,smsg8
0151B4 02 13 00 1A 		mov		r1,r6
0151B8 39 35 FF FF 		bsr		RemoveFromTimeoutList
                	smsg8:
0151BC 40 13 20 04 	    lb      r1,TCB_Status[r6]
0151C0 8C 10 FA FF 	    and     r1,r1,#~TS_WAITMSG
0151C4 60 13 20 04 	    sb      r1,TCB_Status[r6]
0151C8 02 13 00 1A 		mov		r1,r6
0151CC B9 F5 FE FF 		bsr		AddTaskToReadyList
0151D0 7C C0 00 00 		sw		r0,sys_sema
0151D4 63 00 B0 03 
0151D8 3D 02 08 00 		beq		r4,smsg5
0151DC 39 67 FE FF 		bsr     UnlockSYS
0151E0 38 0F 04 80 		int		#2
                		;GoReschedule
0151E4 3A 01 00 00 		bra		smsg9
                	smsg5:
0151E8 B9 65 FE FF 		bsr     UnlockSYS
                	smsg9:
0151EC 57 7F 10 00 		pop		r7
0151F0 57 6F 10 00 		pop		r6
0151F4 57 5F 10 00 		pop		r5
0151F8 0A 10 00 00 		ldi		r1,#E_Ok
0151FC 3B FF 11 00 		rts
smsg1:
015200 57 7F 10 00 		pop		r7
015204 57 6F 10 00 		pop		r6
015208 57 5F 10 00 		pop		r5
01520C 0A 10 08 00 		ldi		r1,#E_BadMbx
015210 37 FF 01 00 		rtl
smsg2:
015214 39 60 FE FF 		bsr     UnlockSYS
015218 57 7F 10 00 		pop		r7
01521C 57 6F 10 00 		pop		r6
015220 57 5F 10 00 		pop		r5
015224 0A 10 12 00 		ldi		r1,#E_NotAlloc
015228 3B FF 11 00 		rts
smsg4:
01522C 39 5D FE FF 		bsr     UnlockSYS
015230 57 7F 10 00 		pop		r7
015234 57 6F 10 00 		pop		r6
015238 57 5F 10 00 		pop		r5
01523C 0A 10 16 00 		ldi		r1,#E_NoMsg
015240 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; WaitMsg
                	; Wait at a mailbox for a message to arrive. This subroutine will block the
                	; task until a message is available or the task times out on the timeout
                	; list.
                	;
                	; Parameters
                	;	r1=mailbox
                	;	r2=timeout
                	; Returns:
                	;	r1=E_Ok			if everything is ok
                	;	r1=E_BadMbx		for a bad mailbox number
                	;	r1=E_NotAlloc	for a mailbox that isn't allocated
                	;	r2=message D1
                	;	r3=message D2
                	;------------------------------------------------------------------------------
                	message "WaitMsg"
                	WaitMsg:
015244 E7 EF 01 00 		push    lr
015248 67 E2 01 00 		push	r4
01524C E7 E2 01 00 		push	r5
015250 67 E3 01 00 		push	r6
015254 E7 E3 01 00 		push	r7
015258 82 50 62 34 		chk     r5,r1,b49
01525C BD 02 80 00 	    beq     r5,wmsg1
015260 82 60 00 1A 		mov		r6,r1
                	wmsg11:
015264 B9 52 FE FF 	    bsr     LockSYS
015268 C0 50 6C 00 		lb		r5,MBX_OWNER[r1]
01526C 86 32 66 00 		cmp		r3,r5,#NR_JCB
015270 BD 21 82 00 		bgt		r3,wmsg2				; error: no owner
015274 B9 A2 FF FF 		bsr		DequeueMsgFromMbx
015278 BD 10 52 00 		bne		r1,wmsg3
                	
                		; Here there was no message available, remove the task from
                		; the ready list, and optionally add it to the timeout list.
                		; Queue the task at the mailbox.
                	wmsg12:
01527C 02 1C 00 1A 		mov		r1,tr				; remove the task from the ready list
015280 39 EF FE FF 		bsr		RemoveTaskFromReadyList
                	wmsg13:
015284 C0 70 20 04 		lb		r7,TCB_Status[r1]
015288 8D 73 04 00 		or		r7,r7,#TS_WAITMSG			; set task status to waiting
01528C E0 70 20 04 		sb		r7,TCB_Status[r1]
015290 E3 60 B0 04 		sw		r6,TCB_hWaitMbx[r1]			; set which mailbox is waited for
015294 E3 00 70 04 		sw		r0,TCB_mbq_next[r1]			; adding at tail, so there is no next
015298 46 73 10 00 		lw		r7,MBX_TQ_HEAD[r6]			; is there a task que setup at the mailbox ?
01529C BD 03 32 00 		beq		r7,wmsg6
0152A0 46 73 30 00 		lw		r7,MBX_TQ_TAIL[r6]
0152A4 E3 70 80 04 		sw		r7,TCB_mbq_prev[r1]
0152A8 E3 13 70 04 		sw		r1,TCB_mbq_next[r7]
0152AC 63 13 30 00 		sw		r1,MBX_TQ_TAIL[r6]
0152B0 43 73 60 00 		lcu     r7,MBX_TQ_COUNT[r6]         ; increment number of tasks queued
0152B4 94 73 02 00 		addui   r7,r7,#1
0152B8 61 73 60 00 		sc      r7,MBX_TQ_COUNT[r6]
                	wmsg7:
0152BC 3D 01 0A 00 		beq		r2,wmsg10                   ; check for a timeout
                	wmsg14:
0152C0 39 F9 FE FF 		bsr		AddToTimeoutList
0152C4 39 4A FE FF 		bsr     UnlockSYS
0152C8 38 0F 04 80 		int		#2	;	GoReschedule			; invoke the scheduler
0152CC B9 45 FE FF 		bsr     LockSYS
                	wmsg10:
                		; At this point either a message was sent to the task, or the task
                		; timed out. If a message is still not available then the task must
                		; have timed out. Return a timeout error.
                		; Note that SendMsg will directly set the message D1, D2 data
                		; without queing a message at the mailbox (if there is a task
                		; waiting already). So we cannot just try dequeing a message again.
0152D0 C6 20 90 04 		lw		r2,TCB_MSG_D1[r1]
0152D4 C6 30 A0 04 		lw		r3,TCB_MSG_D2[r1]
0152D8 C0 40 20 04 		lb		r4,TCB_Status[r1]
0152DC 39 47 FE FF 		bsr     UnlockSYS
0152E0 0C 42 04 00 		and		r4,r4,#TS_WAITMSG	; Is the task still waiting for a message ?
0152E4 3D 02 30 00 		beq		r4,wmsg8			; If not, go return OK status
0152E8 57 7F 10 00 		pop		r7				; Otherwise return timeout error
0152EC 57 6F 10 00 		pop		r6
0152F0 57 5F 10 00 		pop		r5
0152F4 57 4F 10 00 		pop		r4
0152F8 0A 10 20 00 		ldi		r1,#E_Timeout
0152FC 3B FF 11 00 		rts
	
                		; Here there were no prior tasks queued at the mailbox
                	wmsg6:
015300 E3 00 80 04 		sw		r0,TCB_mbq_prev[r1]		; no previous tasks
015304 E3 00 70 04 		sw		r0,TCB_mbq_next[r1]
015308 63 13 10 00 		sw		r1,MBX_TQ_HEAD[r6]		; set both head and tail indexes
01530C 63 13 30 00 		sw		r1,MBX_TQ_TAIL[r6]
015310 0A 70 02 00 		ldi		r7,#1
015314 61 73 60 00 		sc		r7,MBX_TQ_COUNT[r6]		; one task queued
015318 BA F4 FF FF 		bra		wmsg7					; check for a timeout value
                		
                	wmsg3:
01531C C6 20 10 00 		lw		r2,MSG_D1[r1]
015320 C6 30 20 00 		lw		r3,MSG_D2[r1]
                		; Add the newly dequeued message to the free messsage list
015324 7C C0 00 00 		lw		r7,FreeMsg
015328 46 70 60 02 
01532C E3 70 00 00 		sw		r7,MSG_LINK[r1]
015330 7C C0 00 00 		sw		r1,FreeMsg
015334 63 10 60 02 
015338 7C C0 00 00 		inc		nMsgBlk,#1
01533C 64 10 70 02 
015340 B9 3A FE FF 		bsr     UnlockSYS
                	wmsg8:
015344 57 7F 10 00 		pop		r7
015348 57 6F 10 00 		pop		r6
01534C 57 5F 10 00 		pop		r5
015350 57 4F 10 00 		pop		r4
015354 0A 10 00 00 		ldi		r1,#E_Ok
015358 3B FF 11 00 		rts
wmsg1:
01535C 57 7F 10 00 		pop		r7
015360 57 6F 10 00 		pop		r6
015364 57 5F 10 00 		pop		r5
015368 57 4F 10 00 		pop		r4
01536C 0A 10 08 00 		ldi		r1,#E_BadMbx
015370 3B FF 11 00 		rts
wmsg2:
015374 39 34 FE FF 		bsr     UnlockSYS
015378 57 7F 10 00 		pop		r7
01537C 57 6F 10 00 		pop		r6
015380 57 5F 10 00 		pop		r5
015384 57 4F 10 00 		pop		r4
015388 0A 10 12 00 		ldi		r1,#E_NotAlloc
01538C 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Check for a message at a mailbox. Does not block. This function is a
                	; convenience wrapper for CheckMsg().
                	;
                	; Parameters
                	;	r1=mailbox handle
                	; Returns:
                	;	r1=E_Ok			if everything is ok
                	;	r1=E_NoMsg		if no message is available
                	;	r1=E_BadMbx		for a bad mailbox number
                	;	r1=E_NotAlloc	for a mailbox that isn't allocated
                	;	r2=message D1
                	;	r3=message D2
                	;------------------------------------------------------------------------------
                	
                	PeekMsg:
015390 E7 EF 01 00 	    push    lr
015394 0A 20 00 00 		ldi		r2,#0		; don't remove from queue
015398 39 01 00 00 		bsr		CheckMsg
01539C 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; CheckMsg
                	; Check for a message at a mailbox. Does not block.
                	;
                	; Parameters
                	;	r1=mailbox handle
                	;	r2=remove from queue if present
                	; Returns:
                	;	r1=E_Ok			if everything is ok
                	;	r1=E_NoMsg		if no message is available
                	;	r1=E_BadMbx		for a bad mailbox number
                	;	r1=E_NotAlloc	for a mailbox that isn't allocated
                	;	r2=message D1
                	;	r3=message D2
                	;------------------------------------------------------------------------------
                	message "CheckMsg"
                	CheckMsg:
0153A0 E7 EF 01 00 	    push    lr
0153A4 67 E3 01 00 	    push    r6
                	;	cmp		r3,r1,#NR_MBX			; check the mailbox number to make sure
                	;	bge		r3,cmsg1				; that it's sensible
0153A8 82 60 62 34 	    chk     r6,r1,b49
0153AC 3D 03 38 00 	    beq     r6,cmsg1
0153B0 67 E2 01 00 		push	r4
0153B4 E7 E2 01 00 		push	r5
                	
0153B8 39 28 FE FF 	    bsr     LockSYS
                	
0153BC C6 50 6C 00 		lw		r5,MBX_OWNER[r1]
0153C0 BD 02 34 00 		beq		r5,cmsg2				; error: no owner
0153C4 3D 01 06 00 		beq		r2,cmsg3                ; are we to dequeue the message ?
0153C8 39 78 FF FF 		bsr		DequeueMsgFromMbx
0153CC 3A 01 00 00 		bra		cmsg4
                	cmsg3:
0153D0 C6 10 40 00 		lw		r1,MBX_MQ_HEAD[r1]		; peek the message at the head of the messages queue
                	cmsg4:
0153D4 BD 00 36 00 		beq		r1,cmsg5
0153D8 02 41 00 1A 		mov     r4,r2
0153DC C6 20 10 00 		lw		r2,MSG_D1[r1]
0153E0 C6 30 20 00 		lw		r3,MSG_D2[r1]
0153E4 3D 02 10 00 		beq		r4,cmsg8
                	cmsg10:
0153E8 7C C0 00 00 		lw		r5,FreeMsg
0153EC 46 50 60 02 
0153F0 E3 50 00 00 		sw		r5,MSG_LINK[r1]
0153F4 7C C0 00 00 		sw		r1,FreeMsg
0153F8 63 10 60 02 
0153FC 7C C0 00 00 		inc		nMsgBlk,#1
015400 64 10 70 02 
                	cmsg8:
015404 39 22 FE FF 		bsr     UnlockSYS
015408 57 5F 10 00 		pop		r5
01540C 57 4F 10 00 		pop		r4
015410 57 6F 10 00 		pop     r6
015414 0A 10 00 00 		ldi		r1,#E_Ok
015418 3B FF 11 00 		rts
cmsg1:
01541C 0A 10 08 00 		ldi		r1,#E_BadMbx
015420 57 6F 10 00 		pop     r6
015424 3B FF 11 00 		rts
cmsg2:
015428 B9 1D FE FF 		bsr     UnlockSYS
01542C 57 5F 10 00 		pop		r5
015430 57 4F 10 00 		pop		r4
015434 57 6F 10 00 		pop     r6
015438 0A 10 12 00 		ldi		r1,#E_NotAlloc
01543C 3B FF 11 00 		rts
cmsg5:
015440 B9 1A FE FF 		bsr     UnlockSYS
015444 57 5F 10 00 		pop		r5
015448 57 4F 10 00 		pop		r4
01544C 57 6F 10 00 		pop     r6
015450 0A 10 16 00 		ldi		r1,#E_NoMsg
015454 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; System Call Exception
                	;
                	;------------------------------------------------------------------------------
                	;
                	syscall_exception:
015458 0A E0 21 05 	    ldi     sp,TCB_SYS_Stack[tr]
01545C 67 E3 01 00 		push	r6					; save off some working registers
015460 E7 E3 01 00 		push	r7
015464 02 60 12 3E 		mfspr   r6,epc              ; get return address into r6
015468 0C 73 FC FF 		and     r7,r6,#-2           ; clear LSB
01546C C4 73 08 00 		lh	    r7,4[r7]			; get static call number parameter into r7
015470 14 63 10 00 		addui   r6,r6,#8			; update return address
015474 02 03 12 3C 		mtspr   epc,r6
015478 96 63 28 00 		cmpu    r6,r7,#20
01547C 3D 23 12 00 		bgt     r6,.bad_callno
015480 82 73 02 70 		asl     r7,r7,#1
015484 7C 01 00 00 		lcu     r6,syscall_vectors[r7]       ; load the vector into r6
015488 C3 63 00 80 
01548C 7C 01 00 00 		or      r6,r6,#syscall_exception & 0xFFFFFFFFFFFF0000
015490 0D 63 00 00 
015494 E7 EF 01 00 		push    lr
015498 3C F3 01 00 		jsr		[r6]				; do the system function
01549C 57 FF 11 00 		pop     lr
                	.bad_callno:
0154A0 57 7F 10 00 		pop		r7
0154A4 57 6F 10 00 		pop		r6
0154A8 02 E0 3D 6E 		rte
                	
                	;------------------------------------------------------------------------------
                	; Reschedule tasks to run without affecting the timeout list timing.
                	;------------------------------------------------------------------------------
                	
                	reschedule:
0154AC 02 E0 01 6C 	    cpuid   sp,r0,#0
0154B0 3D 0F 08 00 	    beq     sp,.0001
0154B4 7C 02 00 00 	    ldi     sp,#CPU1_IRQ_STACK
0154B8 0A E0 01 10 
0154BC BA 01 00 00 	    bra     .0002
                	.0001:
0154C0 FC 00 00 00 	    ldi     sp,#CPU0_IRQ_STACK
0154C4 0A E0 01 10 
                	.0002:
0154C8 E7 E0 01 00 	    push    r1
0154CC 67 E1 01 00 		push    r2
0154D0 7C C0 00 00 		lwar    r1,sys_sema
0154D4 5C 10 B0 03 
0154D8 BD 10 0E 00 		bne     r1,.0004   
0154DC 7C C0 00 00 		swcr    tr,sys_sema       ; In this case interrupts are off already
0154E0 6E 80 B1 03 
0154E4 02 10 00 3E 		mfspr   r1,cr0            ; because we are in an interrupt routine.
0154E8 7C 00 00 10 		and     r1,r1,#$1000000000
0154EC 8C 10 00 00 
0154F0 BD 10 08 00 		bne     r1,.0005
                	.0004:
0154F4 57 2F 10 00 		pop     r2
0154F8 57 1F 10 00 		pop     r1
0154FC 02 E0 3F 6E 		rti
                	.0005:
015500 57 2F 10 00 	    pop     r2
015504 57 1F 10 00 	    pop     r1
015508 63 1C 10 00 	    sw      r1,TCB_r1[tr]
01550C 63 2C 20 00 	    sw      r2,TCB_r2[tr]
015510 63 3C 30 00 	    sw      r3,TCB_r3[tr]
015514 63 4C 40 00 	    sw      r4,TCB_r4[tr]
015518 63 5C 50 00 	    sw      r5,TCB_r5[tr]
01551C 63 6C 60 00 	    sw      r6,TCB_r6[tr]
015520 63 7C 70 00 	    sw      r7,TCB_r7[tr]
015524 63 8C 80 00 	    sw      r8,TCB_r8[tr]
015528 63 9C 90 00 	    sw      r9,TCB_r9[tr]
01552C 63 AC A0 00 	    sw      r10,TCB_r10[tr]
015530 63 BC B0 00 	    sw      r11,TCB_r11[tr]
015534 63 CC C0 00 	    sw      r12,TCB_r12[tr]
015538 63 DC D0 00 	    sw      r13,TCB_r13[tr]
01553C 63 EC E0 00 	    sw      r14,TCB_r14[tr]
015540 63 FC F0 00 	    sw      r15,TCB_r15[tr]
015544 63 0C 01 01 	    sw      r16,TCB_r16[tr]
015548 63 1C 11 01 	    sw      r17,TCB_r17[tr]
01554C 63 2C 21 01 	    sw      r18,TCB_r18[tr]
015550 63 3C 31 01 	    sw      r19,TCB_r19[tr]
015554 63 4C 41 01 	    sw      r20,TCB_r20[tr]
015558 63 5C 51 01 	    sw      r21,TCB_r21[tr]
01555C 63 6C 61 01 	    sw      r22,TCB_r22[tr]
015560 63 7C 71 01 	    sw      r23,TCB_r23[tr]
015564 63 8C 81 01 	    sw      r24,TCB_r24[tr]
015568 63 9C 91 01 	    sw      r25,TCB_r25[tr]
01556C 63 AC A1 01 	    sw      r26,TCB_r26[tr]
015570 63 BC B1 01 	    sw      r27,TCB_r27[tr]
015574 63 CC C1 01 	    sw      r28,TCB_r28[tr]
015578 63 DC D1 01 	    sw      r29,TCB_r29[tr]
01557C 02 10 1E 3E 	    mfspr   r1,isp
015580 63 1C E0 01 	    sw      r1,TCB_r30[tr]
015584 63 1C 30 03 	    sw      r1,TCB_ISP[tr]
015588 02 10 20 3E 	    mfspr   r1,dsp
01558C 63 1C 40 03 	    sw      r1,TCB_DSP[tr]
015590 02 10 22 3E 	    mfspr   r1,esp
015594 63 1C 50 03 	    sw      r1,TCB_ESP[tr]
015598 63 FC F1 01 	    sw      r31,TCB_r31[tr]
01559C 02 10 10 3E 	    mfspr   r1,ipc
0155A0 63 1C 00 03 	    sw      r1,TCB_IPC[tr]
0155A4 02 10 0E 3E 	    mfspr   r1,dpc
0155A8 63 1C 10 03 	    sw      r1,TCB_DPC[tr]
0155AC 02 10 12 3E 	    mfspr   r1,epc
0155B0 63 1C 20 03 	    sw      r1,TCB_EPC[tr]
0155B4 02 10 00 3E 	    mfspr   r1,cr0
0155B8 63 1C 60 03 	    sw      r1,TCB_CR0[tr]
                	resched1:
0155BC 40 1C 20 04 	    lb      r1,TCB_Status[tr]  ; clear RUNNING status (bit #3)
0155C0 8C 10 EE FF 	    and     r1,r1,#~TS_RUNNING
0155C4 60 1C 20 04 	    sb      r1,TCB_Status[tr]
0155C8 7C 00 00 00 		jmp		SelectTaskToRun
0155CC 3C 00 EC AB 
                	
                	strStartQue:
0155D0 00 00 00 01 		db		0,0,0,1,0,0,0,2,0,1,0,3,0,0,0,4,0,1,0,5,0,0,0,6,0,1,0,7
0155D4 00 00 00 02 
0155D8 00 01 00 03 
0155DC 00 00 00 04 
0155E0 00 01 00 05 
0155E4 00 00 00 06 
0155E8 00 01 00 07 
                	;	db		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                	
                	;------------------------------------------------------------------------------
                	; 60 Hz interrupt
                	; - takes care of "flashing" the cursor
                	; - decrements timeouts for tasks on timeout list
                	; - switching tasks
                	;------------------------------------------------------------------------------
                	
                	FMTKTick:
0155EC 02 E0 01 6C 	    cpuid   sp,r0,#0
0155F0 3D 0F 08 00 	    beq     sp,.0001
0155F4 7C 02 00 00 	    ldi     sp,#CPU1_IRQ_STACK
0155F8 0A E0 01 10 
0155FC BA 01 00 00 	    bra     .0002
                	.0001:
015600 FC 00 00 00 	    ldi     sp,#CPU0_IRQ_STACK
015604 0A E0 01 10 
                	.0002:
015608 E7 E0 01 00 	    push    r1
01560C 67 E1 01 00 	    push    r2
015610 E7 E1 01 00 	    push    r3
                	
                	    ; The interrupt has to be acknowledged regardless of whether or not
                	    ; the semaphore can be locked, and task switching occur.
                	    ; Each CPU has it's own PIC mapped at the same address.
015614 0A 10 06 00 		ldi		r1,#3				; reset the edge sense circuit
015618 7C DC FF 00 		sh		r1,PIC_RSTE
01561C 62 10 A8 1F 
015620 7C C0 00 00 		inc		IRQFlag,#1
015624 64 10 30 00 
                	
                	    ; Lock up the resources needed by the tick routine
                	    ; Retry up to 10 times to lock the semaphore.
015628 0A 30 14 00 	    ldi     r3,#10
                	.0003:
01562C 7C C0 00 00 	    lwar    r1,sys_sema
015630 5C 10 B0 03 
015634 82 20 60 34 	    chk     r2,r1,b48
015638 3D 11 10 00 	    bne     r2,.cantLockSYS
01563C 7C C0 00 00 	    swcr    tr,sys_sema
015640 6E 80 B1 03 
015644 3F 00 00 00 	    nop
015648 3F 00 00 00 	    nop
01564C 02 10 00 3E 	    mfspr   r1,cr0
015650 83 10 48 D2 	    bfextu  r1,r1,#36,#36
015654 BD 10 22 00 	    bne     r1,.SYSLocked
                	.cantLockSYS:
015658 95 31 02 00 	    subui   r3,r3,#1
01565C BD 11 E8 FF 	    bne     r3,.0003
015660 7C C0 00 00 	    inc     missed_ticks,#1
015664 64 10 80 02 
015668 02 10 00 6C 		cpuid   r1,r0,#0
01566C BD 10 0E 00 		bne     r1,.0004
015670 7C C0 00 00 		lw		r1,UserTick
015674 46 10 00 00 
015678 BD 00 08 00 		beq		r1,.0004
01567C E7 EF 01 00 		push    lr
015680 BC F0 01 00 		jsr		[r1]
015684 57 FF 11 00 		pop     lr
                	.0004:
015688 57 3F 10 00 	    pop     r3
01568C 57 2F 10 00 	    pop     r2
015690 57 1F 10 00 	    pop     r1
015694 02 E0 3F 6E 	    rti
                	
                	.SYSLocked:
015698 57 3F 10 00 	    pop     r3
01569C 57 2F 10 00 	    pop     r2
0156A0 57 1F 10 00 	    pop     r1
0156A4 63 1C 10 00 	    sw      r1,TCB_r1[tr]
0156A8 63 2C 20 00 	    sw      r2,TCB_r2[tr]
0156AC 63 3C 30 00 	    sw      r3,TCB_r3[tr]
0156B0 63 4C 40 00 	    sw      r4,TCB_r4[tr]
0156B4 63 5C 50 00 	    sw      r5,TCB_r5[tr]
0156B8 63 6C 60 00 	    sw      r6,TCB_r6[tr]
0156BC 63 7C 70 00 	    sw      r7,TCB_r7[tr]
0156C0 63 8C 80 00 	    sw      r8,TCB_r8[tr]
0156C4 63 9C 90 00 	    sw      r9,TCB_r9[tr]
0156C8 63 AC A0 00 	    sw      r10,TCB_r10[tr]
0156CC 63 BC B0 00 	    sw      r11,TCB_r11[tr]
0156D0 63 CC C0 00 	    sw      r12,TCB_r12[tr]
0156D4 63 DC D0 00 	    sw      r13,TCB_r13[tr]
0156D8 63 EC E0 00 	    sw      r14,TCB_r14[tr]
0156DC 63 FC F0 00 	    sw      r15,TCB_r15[tr]
0156E0 63 0C 01 01 	    sw      r16,TCB_r16[tr]
0156E4 63 1C 11 01 	    sw      r17,TCB_r17[tr]
0156E8 63 2C 21 01 	    sw      r18,TCB_r18[tr]
0156EC 63 3C 31 01 	    sw      r19,TCB_r19[tr]
0156F0 63 4C 41 01 	    sw      r20,TCB_r20[tr]
0156F4 63 5C 51 01 	    sw      r21,TCB_r21[tr]
0156F8 63 6C 61 01 	    sw      r22,TCB_r22[tr]
0156FC 63 7C 71 01 	    sw      r23,TCB_r23[tr]
015700 63 8C 81 01 	    sw      r24,TCB_r24[tr]  ; not really necessary since we are going to reload it later
015704 63 9C 91 01 	    sw      r25,TCB_r25[tr]
015708 63 AC A1 01 	    sw      r26,TCB_r26[tr]
01570C 63 BC B1 01 	    sw      r27,TCB_r27[tr]
015710 63 CC C1 01 	    sw      r28,TCB_r28[tr]
015714 63 DC D1 01 	    sw      r29,TCB_r29[tr]
015718 02 10 1E 3E 	    mfspr   r1,isp           ; the interrupt placed the SP into this register
01571C 63 1C 30 03 	    sw      r1,TCB_ISP[tr]
015720 02 10 20 3E 	    mfspr   r1,dsp
015724 63 1C 40 03 	    sw      r1,TCB_DSP[tr]
015728 02 10 22 3E 	    mfspr   r1,esp
01572C 63 1C 50 03 	    sw      r1,TCB_ESP[tr]
015730 63 FC F1 01 	    sw      r31,TCB_r31[tr]
015734 02 10 10 3E 	    mfspr   r1,ipc
015738 63 1C 00 03 	    sw      r1,TCB_IPC[tr]
01573C 02 10 0E 3E 	    mfspr   r1,dpc
015740 63 1C 10 03 	    sw      r1,TCB_DPC[tr]
015744 02 10 12 3E 	    mfspr   r1,epc
015748 63 1C 20 03 	    sw      r1,TCB_EPC[tr]
01574C 02 10 00 3E 	    mfspr   r1,cr0
015750 63 1C 60 03 	    sw      r1,TCB_CR0[tr]
                	
015754 02 10 00 6C 		cpuid   r1,r0,#0
015758 BD 10 0E 00 		bne     r1,p100Hz4
01575C 7C C0 00 00 		lw		r1,UserTick
015760 46 10 00 00 
015764 BD 00 08 00 		beq		r1,p100Hz4
015768 E7 EF 01 00 		push    lr
01576C BC F0 01 00 		jsr		[r1]
015770 57 FF 11 00 		pop     lr
                	p100Hz4:
015774 40 1C 20 04 	    lb      r1,TCB_Status[tr]
015778 8C 10 EE FF 	    and     r1,r1,#~TS_RUNNING
01577C 60 1C 20 04 	    sb      r1,TCB_Status[tr]
                	
                		; Check the timeout list to see if there are items ready to be removed from
                		; the list. Also decrement the timeout of the item at the head of the list.
                		; Note the timeout list is checked by each CPU which decrements timeouts,
                		; the resulting decrement rate is 60Hz as each CPU services the interrupt
                		; at a 30Hz rate.
                	p100Hz15:
015780 7C C0 00 00 		lw		r2,TimeoutList
015784 46 20 20 02 
015788 02 11 60 34 		chk     r1,r2,b48
01578C BD 00 26 00 		beq		r1,p100Hz12				; are there any entries in the timeout list ?
015790 46 11 F0 04 		lw		r1,TCB_Timeout[r2]
015794 BD 10 12 00 		bne		r1,p100Hz14				; has this entry timed out ?
                	p100Hz1:
015798 E7 EF 01 00 		push    lr
01579C B9 8F FE FF 		bsr     PopTimeoutList
0157A0 39 3B FE FF 		bsr		AddTaskToReadyList
0157A4 57 FF 11 00 		pop     lr
0157A8 3A FB FF FF 		bra		p100Hz15				; go back and see if there's another task to be removed
                										; there could be a string of tasks to make ready.
                	p100Hz_missed_tick:
0157AC 7C C0 00 00 	    inc     missed_ticks,#1
0157B0 64 10 80 02 
0157B4 BA 04 00 00 	    bra     p100Hz12
                	
                	p100Hz14:
0157B8 95 10 02 00 		subui   r1,r1,#1				; decrement the entry's timeout
0157BC 7C C0 00 00 		lw      r3,missed_ticks
0157C0 46 30 80 02 
0157C4 82 10 06 2A 		subu	r1,r1,r3        		; account for any missed ticks
0157C8 7C C0 00 00 		sw		r0,missed_ticks
0157CC 63 00 80 02 
0157D0 63 11 F0 04 		sw		r1,TCB_Timeout[r2]
0157D4 BD 50 E2 FF 		ble     r1,p100Hz1
                		
                	p100Hz12:
                		; Falls through into selecting a task to run
                	tck3:
                	
                	;------------------------------------------------------------------------------
                	; Search the ready queues for a ready task.
                	; The search is occasionally started at a lower priority queue in order
                	; to prevent starvation of lower priority tasks. This is managed by 
                	; using a tick count as an index to a string containing the start que.
                	;------------------------------------------------------------------------------
                	;
                	SelectTaskToRun:
0157D8 0A 60 10 00 		ldi		r6,#8			; number of queues to search
0157DC 7C C0 00 00 		lw		r3,IRQFlag		; use the IRQFlag as a buffer index
0157E0 46 30 30 00 
0157E4 8C 31 7E 00 		and		r3,r3,#$3F		; counts from 0 to 31
0157E8 82 31 02 72 		lsr     r3,r3,#1
0157EC 7C 01 00 00 		lb	    r3,strStartQue[r3]	; get the queue to start search at
0157F0 C0 31 A0 AB 
0157F4 8C 31 0E 00 		and     r3,r3,#7
                	sttr2:
0157F8 82 41 06 70 	    asl     r4,r3,#3
0157FC 7C C0 00 00 		lw		r1,QNdx0[r4]
015800 46 12 A0 00 
015804 82 50 60 34 		chk     r5,r1,b48
015808 BD 02 BE 00 		beq		r5,sttr_nextList
01580C 82 80 00 1A 		mov     r8,r1              ; remember original list head
015810 C6 10 00 04 		lw      r1,TCB_NextRdy[r1] ; advance list head
015814 7C C0 00 00 		sw      r1,QNdx0[r4]
015818 63 12 A0 00 
01581C 82 50 30 0C 		cmp     r5,r1,tr           ; skip over running task
015820 BD 02 A8 00 		beq     r5,sttr_nextInList
                	sttr11:
                		; The task could already be running on the other CPU, don't run a running
                		; task.
015824 C0 50 20 04 		lb      r5,TCB_Status[r1]
015828 8C 72 10 00 		and     r7,r5,#TS_RUNNING
01582C BD 13 A2 00 		bne     r7,sttr_nextInList
                	sttr10:
                		; Task control blocks are aligned on 1kB boundaries. Address ends in "$00"
                	    ; Check and make sure this is the case. This should catch most bad pointers.
015830 82 70 60 34 	    chk     r7,r1,b48
015834 BD 03 D2 00 	    beq     r7,sttr_badtask
                		; Probably got a valid pointer...
                		; CPU #0 can run any task, CPU #1 can only run tasks associated with it as
                		; it has no I/O. -- for the moment
015838 02 70 00 6C 		cpuid   r7,r0,#0
                	;	beq     r7,sttr5
01583C C1 80 00 05 		lbu     r8,TCB_Affinity[r1]
015840 82 73 10 0C 		cmp     r7,r7,r8
015844 BD 13 96 00 		bne     r7,sttr_nextInList
                	sttr5:
                		; This is the only place the RunningTCB is set (except for initialization).
015848 82 80 01 1A 		mov     tr,r1
01584C 40 1C 20 04 		lb      r1,TCB_Status[tr]
015850 8D 10 10 00 		or      r1,r1,#TS_RUNNING    ; flag the task as the running task
015854 60 1C 20 04 		sb      r1,TCB_Status[tr]
                		; Only CPU #0 has access to I/O, so check for an I/O focus switch only
                		; on CPU #0.
015858 02 10 00 6C 		cpuid   r1,r0,#0
01585C BD 10 2A 00 		bne     r1,sttr6
015860 7C C0 00 00 		lw		r1,iof_switch		
015864 46 10 00 03 
015868 BD 00 24 00 		beq		r1,sttr6				
01586C 7C C0 00 00 		lwar	r1,iof_sema		; just ignore the request to switch
015870 5C 10 F0 03 
015874 BD 10 78 00 		bne		r1,sttr7		; I/O focus if the semaphore can't be aquired
015878 7C C0 00 00 		swcr    tr,iof_sema
01587C 6E 80 F1 03 
015880 3F 00 00 00 		nop
015884 3F 00 00 00 		nop
015888 02 10 00 3E 		mfspr   r1,cr0
01588C 83 10 48 D2 		bfextu  r1,r1,#36,#36
015890 BD 00 10 00 		beq     r1,sttr6
015894 7C C0 00 00 		sw		r0,iof_switch
015898 63 00 00 03 
01589C E7 EF 01 00 		push    lr
0158A0 B9 46 00 00 		bsr		SwitchIOFocus
0158A4 57 FF 11 00 		pop     lr
0158A8 7C C0 00 00 		sw		r0,iof_sema
0158AC 63 00 F0 03 
                		; Restore the task context
                	sttr6:
0158B0 46 1C 60 03 	    lw      r1,TCB_CR0[tr]
0158B4 82 00 00 3C 	    mtspr   cr0,r1
0158B8 46 1C 20 03 	    lw      r1,TCB_EPC[tr]
0158BC 82 00 12 3C 	    mtspr   epc,r1
0158C0 46 1C 10 03 	    lw      r1,TCB_DPC[tr]
0158C4 82 00 0E 3C 	    mtspr   dpc,r1
0158C8 46 1C 00 03 	    lw      r1,TCB_IPC[tr]
0158CC 82 00 10 3C 	    mtspr   ipc,r1
0158D0 46 FC F1 01 	    lw      r31,TCB_r31[tr]
0158D4 46 1C 50 03 	    lw      r1,TCB_ESP[tr]
0158D8 82 00 22 3C 	    mtspr   esp,r1
0158DC 46 1C 40 03 	    lw      r1,TCB_DSP[tr]
0158E0 82 00 20 3C 	    mtspr   dsp,r1
0158E4 46 1C 30 03 	    lw      r1,TCB_ISP[tr]
0158E8 82 00 1E 3C 	    mtspr   isp,r1
0158EC 46 DC D1 01 	    lw      r29,TCB_r29[tr]
0158F0 46 CC C1 01 	    lw      r28,TCB_r28[tr]
0158F4 46 BC B1 01 	    lw      r27,TCB_r27[tr]
0158F8 46 AC A1 01 	    lw      r26,TCB_r26[tr]
0158FC 46 9C 91 01 	    lw      r25,TCB_r25[tr]
                	;   lw      r24,TCB_r24[tr]    ; r24 is the task register - no need to load
015900 46 7C 71 01 	    lw      r23,TCB_r23[tr]
015904 46 6C 61 01 	    lw      r22,TCB_r22[tr]
015908 46 5C 51 01 	    lw      r21,TCB_r21[tr]
01590C 46 4C 41 01 	    lw      r20,TCB_r20[tr]
015910 46 3C 31 01 	    lw      r19,TCB_r19[tr]
015914 46 2C 21 01 	    lw      r18,TCB_r18[tr]
015918 46 1C 11 01 	    lw      r17,TCB_r17[tr]
01591C 46 0C 01 01 	    lw      r16,TCB_r16[tr]
015920 46 FC F0 00 	    lw      r15,TCB_r15[tr]
015924 46 EC E0 00 	    lw      r14,TCB_r14[tr]
015928 46 DC D0 00 	    lw      r13,TCB_r13[tr]
01592C 46 CC C0 00 	    lw      r12,TCB_r12[tr]
015930 46 BC B0 00 	    lw      r11,TCB_r11[tr]
015934 46 AC A0 00 	    lw      r10,TCB_r10[tr]
015938 46 9C 90 00 	    lw      r9,TCB_r9[tr]
01593C 46 8C 80 00 	    lw      r8,TCB_r8[tr]
015940 46 7C 70 00 	    lw      r7,TCB_r7[tr]
015944 46 6C 60 00 	    lw      r6,TCB_r6[tr]
015948 46 5C 50 00 	    lw      r5,TCB_r5[tr]
01594C 46 4C 40 00 	    lw      r4,TCB_r4[tr]
015950 46 3C 30 00 	    lw      r3,TCB_r3[tr]
015954 46 2C 20 00 	    lw      r2,TCB_r2[tr]
015958 46 1C 10 00 	    lw      r1,TCB_r1[tr]
01595C 39 77 FD FF 	    bsr     UnlockSYS
015960 02 E0 3F 6E 		rti
                	sttr7:
015964 7C C0 00 00 	    swcr    r1,iof_sema
015968 6E 10 F0 03 
01596C BA E8 FF FF 	    bra     sttr6
                	
                	sttr_nextInList:
015970 C6 70 00 04 	    lw      r7,TCB_NextRdy[r1]
015974 02 54 0E 0C 	    cmp     r5,r8,r7           ; are we back to the start of the list ?
015978 BD 02 06 00 	    beq     r5,sttr_nextList   ; if so, go to the next list
01597C 82 13 00 1A 	    mov     r1,r7
015980 BA D4 FF FF 	    bra     sttr11
                	
                		; Set index to check the next ready list for a task to run
                	sttr_nextList:
015984 94 31 02 00 		addui   r3,r3,#1
015988 8C 31 0E 00 		and     r3,r3,#7     ; count moduluo 8
01598C 15 63 02 00 		subui   r6,r6,#1
015990 3D 33 34 FF 		bge		r6,sttr2
                	 
                		; Here there were no tasks ready
                		; This should not be able to happen, so hang the machine (in a lower
                		; power mode).
                		; For now just go back to running whatever was running in the first place.
                		; Something had to be running sucessfully before the interrupt; return to
                	    ; it.
015994 BA E3 FF FF 	    bra     sttr6
                	sttr3:
015998 02 10 00 6C 		cpuid   r1,r0,#0
                	sttr8:
01599C BD 10 00 00 		bne     r1,sttr8
0159A0 E7 EF 01 00 		push    lr
0159A4 B9 0B 00 00 		bsr		kernel_panic
0159A8 4E 6F 20 74 		db		"No tasks in ready queue.",0
0159AC 61 73 6B 73 
0159B0 20 69 6E 20 
0159B4 72 65 61 64 
0159B8 79 20 71 75 
0159BC 65 75 65 2E 
0159C0 00          
0159C1 00 00 00 B9 		bsr     DumpTaskList
0159C5 C6 FD FF    
0159C8 57 FF 11 00 		pop     lr
                		; Might as well power down the clock and wait for a reset or
                		; NMI. In the case of an NMI the kernel is reinitialized without
                		; doing the boot reset.
0159CC 02 00 04 6E 		stp								
0159D0 7C 00 00 00 		jmp		FMTKInitialize
0159D4 3C 00 0E A0 
                	
                	sttr_badtask:
0159D8 02 10 00 6C 		cpuid   r1,r0,#0
0159DC BD 10 D4 FF 		bne     r1,sttr_nextList
0159E0 39 04 00 00 	    bsr     kernel_panic
0159E4 42 61 64 20 	    db      "Bad task on ready list.",0
0159E8 74 61 73 6B 
0159EC 20 6F 6E 20 
0159F0 72 65 61 64 
0159F4 79 20 6C 69 
0159F8 73 74 2E 00 
0159FC 3A F1 FF FF 	    bra     sttr_nextList
                	
                	;------------------------------------------------------------------------------
                	; kernal_panic:
                	;	All this does right now is display the panic message on the screen.
                	; Parameters:
                	;	inline: string
                	;------------------------------------------------------------------------------
                	;
                	kernel_panic:
015A00 E7 E0 01 00 	    push    r1
                	kpan2:
015A04 C1 1F 00 00 		lbu	    r1,[lr]		; get a byte from the code space
015A08 BD 00 0C 00 		beq		r1,kpan1		; is it end of string ?
015A0C 94 FF 03 00 		addui	lr,lr,#1	; increment pointer
015A10 E7 EF 01 00 		push    lr
015A14 B9 86 F7 FF 		bsr		OutChar
015A18 57 FF 11 00 		pop     lr
015A1C 3A FD FF FF 		bra		kpan2
                	kpan1:
015A20 E7 EF 01 00 	    push    lr   		; must update the return address !
015A24 B9 16 F6 FF 		bsr		CRLF
015A28 57 FF 11 00 		pop     lr
015A2C 57 1F 10 00 		pop     r1
015A30 94 FF 07 00 		addui   lr,lr,#3    ; round the link register to the next instruction address
015A34 8C FF F9 FF 		and     lr,lr,#-4
015A38 37 FF 01 00 		rtl

                	
                	; ============================================================================
                	; iofocus.s
                	;        __
                	;   \\__/ o\    (C) 2014, 2015  Robert Finch, Stratford
                	;    \  __ /    All rights reserved.
                	;     \/_//     robfinch<remove>@finitron.ca
                	;       ||
                	;  
                	;
                	; This source file is free software: you can redistribute it and/or modify 
                	; it under the terms of the GNU Lesser General Public License as published 
                	; by the Free Software Foundation, either version 3 of the License, or     
                	; (at your option) any later version.                                      
                	;                                                                          
                	; This source file is distributed in the hope that it will be useful,      
                	; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                	; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                	; GNU General Public License for more details.                             
                	;                                                                          
                	; You should have received a copy of the GNU General Public License        
                	; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                	;
                	; iofocus.s
                	; ============================================================================
                	
                	LockIOF:
015A3C E7 EF 01 00 	    push    lr
015A40 E7 E0 01 00 	    push    r1
015A44 7C C0 00 00 	    ldi     r1,#iof_sema
015A48 0A 10 F0 03 
015A4C B9 5C FD FF 	    bsr     LockSema
015A50 57 1F 10 00 	    pop     r1
015A54 3B FF 11 00 	    rts
UnlockIOF:
015A58 E7 EF 01 00 	     push   lr
015A5C E7 E0 01 00 	     push   r1
015A60 7C C0 00 00 	     lea    r1,iof_sema
015A64 47 10 F0 03 
015A68 39 62 FD FF 	     bsr    UnlockSema
015A6C 57 1F 10 00 	     pop    r1
015A70 3B FF 11 00 	     rts

                	;------------------------------------------------------------------------------
                	; ForceIOFocus
                	;
                	; Force the IO focus to a specific job.
                	;------------------------------------------------------------------------------
                	;
                	ForceIOFocus:
015A74 E7 EF 01 00 	    push    lr
015A78 E7 E0 01 00 		push    r1
015A7C 67 E1 01 00 	    push    r2
015A80 E7 E1 01 00 	    push    r3 
015A84 39 F7 FF FF 	    bsr     LockIOF
015A88 7C C0 00 00 		lw		r3,IOFocusNdx
015A8C 46 30 50 00 
015A90 82 20 06 0C 		cmp		r2,r1,r3
015A94 3D 01 16 00 		beq		r2,fif1
015A98 82 20 00 1A 		mov     r2,r1
015A9C 39 5B 00 00 		bsr		CopyScreenToVirtualScreen
015AA0 C6 11 F0 07 		lw		r1,JCB_pVirtVid[r3]
015AA4 E3 11 D0 07 		sw		r1,JCB_pVidMem[r3]
015AA8 7C C0 00 00 		sw		r2,IOFocusNdx
015AAC 63 20 50 00 
015AB0 7C D0 FF 00 		ldi		r1,#TEXTSCR
015AB4 0A 10 00 00 
015AB8 63 11 D0 07 		sw		r1,JCB_pVidMem[r2]
015ABC 39 48 00 00 		bsr		CopyVirtualScreenToScreen
                	fif1:
015AC0 39 F3 FF FF 		bsr     UnlockIOF
015AC4 57 3F 10 00 		pop     r3
015AC8 57 2F 10 00 		pop     r2
015ACC 57 1F 10 00 		pop     r1
015AD0 3B FF 11 00 		rts
	
                	;------------------------------------------------------------------------------
                	; SwitchIOFocus
                	;
                	; Switches the IO focus to the next task requesting the I/O focus. This
                	; routine may be called when a task releases the I/O focus as well as when
                	; the user presses ALT-TAB on the keyboard.
                	; On Entry: the io focus semaphore is set already.
                	;------------------------------------------------------------------------------
                	;
                	SwitchIOFocus:
015AD4 E7 EF 01 00 	    push    lr
015AD8 E7 E0 01 00 	    push    r1
015ADC 67 E1 01 00 	    push    r2
015AE0 E7 E1 01 00 	    push    r3
                	
                		; First check if it's even possible to switch the focus to another
                		; task. The I/O focus list could be empty or there may be only a
                		; single task in the list. In either case it's not possible to
                		; switch.
015AE4 39 EB FF FF 		bsr     LockIOF
015AE8 7C C0 00 00 		lw		r3,IOFocusNdx		; Get the job at the head of the list.
015AEC 46 30 50 00 
015AF0 BD 01 18 00 		beq	    r3,siof3			; Is the list empty ?
015AF4 C6 21 50 08 		lw		r2,JCB_iof_next[r3]	; Get the next job on the list.
015AF8 3D 01 14 00 		beq		r2,siof3			; Nothing to switch to
                	
                		; Copy the current task's screen to it's virtual screen buffer.
015AFC 39 4F 00 00 		bsr		CopyScreenToVirtualScreen
015B00 C6 11 F0 07 		lw		r1,JCB_pVirtVid[r3]
015B04 E3 11 D0 07 		sw		r1,JCB_pVidMem[r3]
                	
015B08 7C C0 00 00 		sw		r2,IOFocusNdx		; Make task the new head of list.
015B0C 63 20 50 00 
015B10 7C D0 FF 00 		ldi		r1,#TEXTSCR
015B14 0A 10 00 00 
015B18 63 11 D0 07 		sw		r1,JCB_pVidMem[r2]
                	
                		; Copy the virtual screen of the task recieving the I/O focus to the
                		; text screen.
015B1C 39 3C 00 00 		bsr		CopyVirtualScreenToScreen
                	siof3:
015B20 39 E7 FF FF 	    bsr     UnlockIOF
015B24 57 3F 10 00 		pop     r3
015B28 57 2F 10 00 		pop     r2
015B2C 57 1F 10 00 		pop     r1
015B30 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; The I/O focus list is an array indicating which jobs are requesting the
                	; I/O focus. The I/O focus is user controlled by pressing ALT-TAB on the
                	; keyboard.
                	;------------------------------------------------------------------------------
                	
                	RequestIOFocus:
015B34 E7 EF 01 00 	    push    lr
015B38 E7 E0 01 00 	    push    r1
015B3C 67 E1 01 00 	    push    r2
015B40 E7 E1 01 00 	    push    r3
015B44 67 E2 01 00 		push	r4
015B48 E7 E2 01 00 		push    r5
                	;	DisTmrKbd
015B4C 40 2C 28 04 		lb	    r2,TCB_hJCB[tr]
015B50 02 11 00 1A 		mov     r1,r2
015B54 17 21 00 0A 		mulu    r2,r2,#JCB_Size
015B58 7C C5 00 00 	    addui   r1,r1,#JCB_Array
015B5C 94 10 00 00 
015B60 82 30 0C 72 		lsr     r3,r1,#6           ; r3 = word index into IO focus table
015B64 39 DB FF FF 		bsr     LockIOF
015B68 7C C0 00 00 		lw      r4,IOFocusTbl[r3]  ; r4 = word from IO focus table
015B6C C6 41 60 00 
015B70 8C 30 7E 00 		and     r3,r1,#$3F         ; r3 = bit number in word
015B74 82 50 06 62 		lsr     r5,r1,r3           ; extract bit into r5
015B78 8C 52 02 00 		and     r5,r5,#1           ; mask off extra bits
015B7C BD 12 2E 00 		bne     r5,riof1           ; is the job already in the IO focus list ?
015B80 7C C0 00 00 		lw		r1,IOFocusNdx	   ; Is the focus list empty ?
015B84 46 10 50 00 
015B88 BD 00 36 00 		beq		r1,riof2
015B8C C6 30 60 08 		lw		r3,JCB_iof_prev[r1]
015B90 BD 01 3C 00 		beq		r3,riof4
015B94 E3 20 60 08 		sw		r2,JCB_iof_prev[r1]
015B98 63 11 50 08 		sw		r1,JCB_iof_next[r2]
015B9C 63 31 60 08 		sw		r3,JCB_iof_prev[r2]
015BA0 E3 21 50 08 		sw		r2,JCB_iof_next[r3]
                	riof3:
015BA4 02 11 00 1A 	    mov     r1,r2
015BA8 7C C5 00 00 		subui   r1,r1,#JCB_Array
015BAC 95 10 00 00 
015BB0 98 10 00 0A 		divu    r1,r1,#JCB_Size    ; r1 = index into JCB array
015BB4 82 30 0C 72 		lsr     r3,r1,#6           ; r3 = word index into IO focus table
015BB8 7C C0 00 00 		lw      r4,IOFocusTbl[r3]  ; r4 = word from IO focus table
015BBC C6 41 60 00 
015BC0 8C 20 7E 00 		and     r2,r1,#$3F         ; r2 = bit number in word
015BC4 0A 50 02 00 		ldi     r5,#1              ; r5 = 1 bit to insert
015BC8 82 52 04 60 		asl     r5,r5,r2           ; r5 shifted into place
015BCC 82 52 08 1A 		or      r5,r5,r4           ; insert bit
015BD0 7C C0 00 00 		sw      r5,IOFocusTbl[r3]  ; store word back to IO focus table
015BD4 E3 51 60 00 
                	riof1:
                	;	EnTmrKbd4
015BD8 39 D0 FF FF 	    bsr     UnlockIOF
015BDC 57 5F 10 00 	    pop     r5
015BE0 57 4F 10 00 		pop		r4
015BE4 57 3F 10 00 		pop     r3
015BE8 57 2F 10 00 		pop     r2
015BEC 57 1F 10 00 		pop     r1
015BF0 37 FF 01 00 		rtl

                		; Here, the IO focus list was empty. So expand it.
                		; Make sure pointers are NULL
                	riof2:
015BF4 7C C0 00 00 		sw		r2,IOFocusNdx
015BF8 63 20 50 00 
015BFC 63 01 50 08 		sw		r0,JCB_iof_next[r2]
015C00 63 01 60 08 		sw		r0,JCB_iof_prev[r2]
015C04 3A F4 FF FF 		bra		riof3
                	
                		; Here there was only a single entry in the list.
                		; Setup pointers appropriately.
                	riof4:
015C08 63 11 50 08 		sw		r1,JCB_iof_next[r2]
015C0C 63 11 60 08 		sw		r1,JCB_iof_prev[r2]
015C10 E3 20 50 08 		sw		r2,JCB_iof_next[r1]
015C14 E3 20 60 08 		st		r2,JCB_iof_prev[r1]
015C18 BA F1 FF FF 		bra		riof3
                	
                	;------------------------------------------------------------------------------
                	; Releasing the I/O focus causes the focus to switch if the running job
                	; had the I/O focus.
                	; ForceReleaseIOFocus forces the release of the IO focus for a job
                	; different than the one currently running.
                	;------------------------------------------------------------------------------
                	
                	ForceReleaseIOFocus:
015C1C E7 EF 01 00 	    push    lr
015C20 E7 E0 01 00 		push    r1
015C24 67 E1 01 00 		push    r2
015C28 E7 E1 01 00 		push    r3
015C2C 67 E2 01 00 		push	r4
015C30 E7 E2 01 00 		push    r5
015C34 02 11 00 1A 		mov     r1,r2
                	;	DisTmrKbd
015C38 3A 05 00 00 		bra		rliof4  ; wedge into ReleaseIOFocus
                	
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	message "ReleaseIOFocus"	
                	ReleaseIOFocus:
015C3C E7 EF 01 00 	    push    lr
015C40 E7 E0 01 00 		push    r1
015C44 67 E1 01 00 		push    r2
015C48 E7 E1 01 00 		push    r3
015C4C 67 E2 01 00 		push	r4
015C50 E7 E2 01 00 		push    r5
                	;	DisTmrKbd
015C54 41 2C 28 04 		lbu	    r2,TCB_hJCB[tr]
015C58 16 11 66 00 		cmpu    r1,r2,#NR_JCB
015C5C BD 30 44 00 		bge     r1,rliof6
                	rliof4:
015C60 02 11 00 1A 		mov     r1,r2
015C64 17 21 00 0A 		mulu    r2,r2,#JCB_Size
015C68 7C C5 00 00 		addui   r1,r1,#JCB_Array   ; r2 = pointer to JCB
015C6C 94 10 00 00 
015C70 82 30 0C 72 		lsr     r3,r1,#6           ; r3 = word index into IO focus table
015C74 39 B9 FF FF 		bsr     LockIOF
015C78 7C C0 00 00 		lw      r4,IOFocusTbl[r3]  ; r4 = word from IO focus table
015C7C C6 41 60 00 
015C80 8C 30 7E 00 		and     r3,r1,#$3F         ; r3 = bit number in word
015C84 02 52 06 62 		lsr     r5,r4,r3           ; extract bit into r5
015C88 8C 52 02 00 		and     r5,r5,#1           ; mask off extra bits
015C8C BD 02 2A 00 		beq		r5,rliof3          ; nothing to do (not in table)
015C90 02 42 06 66 		ror     r4,r4,r3
015C94 0C 42 FC FF 		and     r4,r4,#-2          ; mask off LSB
015C98 02 42 06 64 		rol     r4,r4,r3           ; back in position
015C9C 7C C0 00 00 		sw		r4,IOFocusTbl
015CA0 63 40 60 00 
015CA4 7C C0 00 00 		lw      r5,IOFocusNdx	; Does the running job have the I/O focus ?
015CA8 46 50 50 00 
015CAC 02 51 0A 0C 		cmp		r5,r2,r5
015CB0 BD 12 04 00 		bne		r5,rliof1
015CB4 39 C4 FF FF 		bsr		SwitchIOFocus	; If so, then switch the focus.
                	rliof1:
015CB8 46 11 50 08 		lw		r1,JCB_iof_next[r2]	; get next and previous fields.
015CBC BD 00 0A 00 		beq		r1,rliof5			; Is list emptying ?
015CC0 46 31 60 08 		lw		r3,JCB_iof_prev[r2]
015CC4 E3 11 50 08 		sw		r1,JCB_iof_next[r3]	; prev->next = current->next
015CC8 E3 30 60 08 		sw	    r3,JCB_iof_prev[r1]	; next->prev = current->prev
015CCC BA 01 00 00 		bra		rliof2
                	rliof5:
015CD0 7C C0 00 00 		sw		r0,IOFocusNdx		; emptied.
015CD4 63 00 50 00 
                	rliof2:
015CD8 63 01 50 08 		sw		r0,JCB_iof_next[r2]	; Update the next and prev fields to indicate
015CDC 63 01 60 08 		sw		r0,JCB_iof_prev[r2]	; the job is no longer on the list.
                	rliof3:
                	;	EnTmrKbd
015CE0 39 AF FF FF 	    bsr     UnlockIOF
                	rliof6:
015CE4 57 5F 10 00 	    pop     r5
015CE8 57 4F 10 00 		pop		r4
015CEC 57 3F 10 00 		pop     r3
015CF0 57 2F 10 00 		pop     r2
015CF4 57 1F 10 00 		pop     r1
015CF8 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	message "CopyVirtualScreenToScreen"
                	CopyVirtualScreenToScreen
015CFC E7 E0 01 00 	    push    r1
015D00 67 E1 01 00 	    push    r2
015D04 E7 E1 01 00 	    push    r3
015D08 67 E2 01 00 		push	r4
015D0C 7C C0 00 00 		lw		r2,IOFocusNdx		; compute virtual screen location
015D10 46 20 50 00 
015D14 3D 01 12 00 		beq		r2,cvss3
                		; copy screen chars
015D18 0A 10 FE 1F 		ldi		r1,#4095			; number of words to copy-1
015D1C 46 21 F0 07 		lw		r2,JCB_pVirtVid[r2]
015D20 7C D0 FF 00 		ldi		r3,#TEXTSCR
015D24 0A 30 00 00 
                	.0001:
015D28 4C 41 82 00 		lh      r4,[r2+r1*4]       ; from virtual
015D2C EA 41 82 00 		sh      r4,[r3+r1*4]       ; to screen
015D30 95 10 02 00 		subui   r1,r1,#1
015D34 BD 30 FA FF 		bge     r1,.0001
                	cvss3:
                		; reset the cursor position in the text controller
015D38 7C C0 00 00 		lw		r3,IOFocusNdx
015D3C 46 30 50 00 
015D40 C0 21 18 08 		lb		r2,JCB_CursorRow[r3]
015D44 7C DA FF 00 		ldi		r1,(TEXTREG+TEXT_COLS)|$FFD00000
015D48 0A 10 00 00 
015D4C 02 21 02 2E 		mulu	r2,r2,r1
015D50 C0 41 1A 08 		lb      r4,JCB_CursorCol[r3]
015D54 02 21 08 08 		add		r2,r2,r4
015D58 7C DA FF 00 		sc		r2,(TEXTREG+TEXT_CURPOS)|$FFD00000
015D5C 61 20 58 00 
015D60 57 4F 10 00 		pop		r4
015D64 57 3F 10 00 		pop     r3
015D68 57 2F 10 00 		pop     r2
015D6C 57 1F 10 00 		pop     r1
015D70 37 FF 01 00 		rtl
message "CopyScreenToVirtualScreen"
                	CopyScreenToVirtualScreen
015D74 E7 E0 01 00 	    push    r1
015D78 67 E1 01 00 	    push    r2
015D7C E7 E1 01 00 	    push    r3
015D80 67 E2 01 00 		push	r4
015D84 0A 10 FE 1F 		ldi		r1,#4095
015D88 7C D0 FF 00 		ldi		r2,#TEXTSCR
015D8C 0A 20 00 00 
015D90 7C C0 00 00 		lw		r3,IOFocusNdx
015D94 46 30 50 00 
015D98 BD 01 0C 00 		beq		r3,csvs3
015D9C C6 31 F0 07 		lw		r3,JCB_pVirtVid[r3]
                	.0001:
015DA0 4C 41 82 00 		lh      r4,[r2+r1*4]
015DA4 EA 41 82 00 		sh      r4,[r3+r1*4]
015DA8 95 10 02 00 		subui   r1,r1,#1
015DAC BD 30 FA FF 		bge     r1,.0001
                	csvs3:
015DB0 57 4F 10 00 		pop		r4
015DB4 57 3F 10 00 		pop     r3
015DB8 57 2F 10 00 		pop     r2
015DBC 57 1F 10 00 		pop     r1
015DC0 37 FF 01 00 		rtl

                	
                		code
015DC4 00 00 00 00 		align	1
015DC8 00 00 00 00 
015DCC 00 00 00 00 
                	
                	public code putch:
015DD0 15 EF 21 00 		      	subui	sp,sp,#16
015DD4 E7 ED 01 00 		      	push 	bp
015DD8 02 BF 01 1A 		      	mov  	bp,sp
015DDC 67 E3 01 00 		      	     	        push    r6
015DE0 C6 1D 30 00 			lw		r1,24[bp]
015DE4 0A 60 1C 00 			ldi     r6,#14    ; Teletype output function
015DE8 38 0F 34 03 	        sys     #410      ; Video BIOS call
015DEC 57 6F 10 00 	        pop     r6
                		
                	stdio_1:
015DF0 82 ED 01 1A 		      	mov  	sp,bp
015DF4 57 BF 11 00 		      	pop  	bp
015DF8 37 FF 31 00 		      	rtl  	#24
                	endpublic
                	
                	public code putnum:
015DFC E7 EF 01 00 		      	push 	lr
015E00 67 EE 01 00 		      	push 	xlr
015E04 E7 ED 01 00 		      	push 	bp
015E08 7C 01 00 00 		      	ldi  	xlr,#stdio_3
015E0C 0A C0 11 BF 
015E10 02 BF 01 1A 		      	mov  	bp,sp
015E14 15 EF 81 00 		      	subui	sp,sp,#64
015E18 E7 E5 01 00 		      	push 	r11
015E1C C7 3D 8C FF 		      	lea  	r3,-58[bp]
015E20 82 B1 00 1A 		      	mov  	r11,r3
015E24 C6 3D 40 00 		      	lw   	r3,32[bp]
015E28 BD 41 08 00 		      	blt  	r3,stdio_6
015E2C C6 3D 40 00 		      	lw   	r3,32[bp]
015E30 86 31 90 01 		      	cmp  	r3,r3,#200
015E34 BD 51 04 00 		      	ble  	r3,stdio_4
                	stdio_6:
015E38 E3 0D 40 00 		      	sw   	r0,32[bp]
                	stdio_4:
015E3C C6 3D 30 00 		      	lw   	r3,24[bp]
015E40 BD 31 06 00 		      	bge  	r3,stdio_7
015E44 0A 30 5A 00 		      	ldi  	r3,#45
015E48 BA 01 00 00 		      	bra  	stdio_8
                	stdio_7:
015E4C 0A 40 56 00 		      	ldi  	r4,#43
015E50 02 32 00 1A 		      	mov  	r3,r4
                	stdio_8:
015E54 E1 3D DC FF 		      	sc   	r3,-18[bp]
015E58 C6 3D 30 00 		      	lw   	r3,24[bp]
015E5C BD 31 08 00 		      	bge  	r3,stdio_9
015E60 C6 3D 30 00 		      	lw   	r3,24[bp]
015E64 02 30 06 2A 		      	neg  	r3,r3
015E68 E3 3D 30 00 		      	sw   	r3,24[bp]
                	stdio_9:
015E6C E3 0D F0 FF 		      	sw   	r0,-8[bp]
                	stdio_11:
015E70 C6 3D F0 FF 		      	lw   	r3,-8[bp]
015E74 8C 31 06 00 		      	and  	r3,r3,#3
015E78 86 31 06 00 		      	cmp  	r3,r3,#3
015E7C BD 11 12 00 		      	bne  	r3,stdio_13
015E80 C3 3D 50 00 		      	lcu  	r3,40[bp]
015E84 82 31 00 22 		      	sxc  	r3,r3
015E88 BD 01 0C 00 		      	beq  	r3,stdio_13
015E8C C6 3D F0 FF 		      	lw   	r3,-8[bp]
015E90 82 31 02 70 		      	asli 	r3,r3,#1
015E94 C3 4D 50 00 		      	lcu  	r4,40[bp]
015E98 E9 45 06 00 		      	sc   	r4,0[r11+r3]
015E9C E4 1D F0 FF 		      	inc  	-8[bp],#1
                	stdio_13:
015EA0 C6 3D 30 00 		      	lw   	r3,24[bp]
015EA4 89 31 14 00 		      	mod  	r3,r3,#10
015EA8 E3 3D E0 FF 		      	sw   	r3,-16[bp]
015EAC C6 3D E0 FF 		      	lw   	r3,-16[bp]
015EB0 86 31 12 00 		      	cmp  	r3,r3,#9
015EB4 BD 21 06 00 		      	bgt  	r3,stdio_17
015EB8 C6 3D E0 FF 		      	lw   	r3,-16[bp]
015EBC BD 31 0A 00 		      	bge  	r3,stdio_15
                	stdio_17:
015EC0 FC 01 00 00 		      	push 	#stdio_2
015EC4 65 E0 01 40 
015EC8 B9 6D 00 00 		      	bsr  	printf
015ECC 14 EF 11 00 		      	addui	sp,sp,#8
                	stdio_15:
015ED0 C6 3D E0 FF 		      	lw   	r3,-16[bp]
015ED4 94 31 60 00 		      	addu 	r3,r3,#48
015ED8 C6 4D F0 FF 		      	lw   	r4,-8[bp]
015EDC 02 42 02 70 		      	asli 	r4,r4,#1
015EE0 E9 35 08 00 		      	sc   	r3,0[r11+r4]
015EE4 C6 3D 30 00 		      	lw   	r3,24[bp]
015EE8 88 31 14 00 		      	divs 	r3,r3,#10
015EEC E3 3D 30 00 		      	sw   	r3,24[bp]
015EF0 E4 1D F0 FF 		      	inc  	-8[bp],#1
015EF4 C6 3D 30 00 		      	lw   	r3,24[bp]
015EF8 BD 01 08 00 		      	beq  	r3,stdio_18
015EFC C6 3D F0 FF 		      	lw   	r3,-8[bp]
015F00 86 31 24 00 		      	cmp  	r3,r3,#18
015F04 BD 51 B6 FF 		      	ble  	r3,stdio_11
                	stdio_18:
                	stdio_12:
015F08 C3 3D DC FF 		      	lcu  	r3,-18[bp]
015F0C 86 31 5A 00 		      	cmp  	r3,r3,#45
015F10 BD 11 0C 00 		      	bne  	r3,stdio_19
015F14 C6 3D F0 FF 		      	lw   	r3,-8[bp]
015F18 82 31 02 70 		      	asli 	r3,r3,#1
015F1C C3 4D DC FF 		      	lcu  	r4,-18[bp]
015F20 E9 45 06 00 		      	sc   	r4,0[r11+r3]
015F24 E4 1D F0 FF 		      	inc  	-8[bp],#1
                	stdio_19:
                	stdio_21:
015F28 C6 3D F0 FF 		      	lw   	r3,-8[bp]
015F2C C6 4D 40 00 		      	lw   	r4,32[bp]
015F30 82 31 08 0C 		      	cmp  	r3,r3,r4
015F34 BD 31 0C 00 		      	bge  	r3,stdio_22
015F38 C3 3D 60 00 		      	lcu  	r3,48[bp]
015F3C E7 E1 01 00 		      	push 	r3
015F40 39 D2 FF FF 		      	bsr  	putch
                	stdio_23:
015F44 E4 FD 41 00 		      	dec  	32[bp],#1
015F48 3A FC FF FF 		      	bra  	stdio_21
                	stdio_22:
                	stdio_24:
015F4C C6 3D F0 FF 		      	lw   	r3,-8[bp]
015F50 BD 51 10 00 		      	ble  	r3,stdio_25
015F54 E4 FD F1 FF 		      	dec  	-8[bp],#1
015F58 C6 3D F0 FF 		      	lw   	r3,-8[bp]
015F5C 82 31 02 70 		      	asli 	r3,r3,#1
015F60 CB 35 06 00 		      	lcu  	r3,0[r11+r3]
015F64 E7 E1 01 00 		      	push 	r3
015F68 39 CD FF FF 		      	bsr  	putch
015F6C 3A FC FF FF 		      	bra  	stdio_24
                	stdio_25:
                	stdio_26:
015F70 57 BF 10 00 		      	pop  	r11
015F74 82 ED 01 1A 		      	mov  	sp,bp
015F78 57 BF 11 00 		      	pop  	bp
015F7C 57 CF 11 00 		      	pop  	xlr
015F80 57 FF 11 00 		      	pop  	lr
015F84 37 FF 41 00 		      	rtl  	#32
                	stdio_3:
015F88 C6 FD 11 00 		      	lw   	lr,8[bp]
015F8C E3 FD 21 00 		      	sw   	lr,16[bp]
015F90 3A FC FF FF 		      	bra  	stdio_26
                	endpublic
                	
                	public code puthexnum:
015F94 E7 EF 01 00 		      	push 	lr
015F98 67 EE 01 00 		      	push 	xlr
015F9C E7 ED 01 00 		      	push 	bp
015FA0 7C 01 00 00 		      	ldi  	xlr,#stdio_27
015FA4 0A C0 09 C2 
015FA8 02 BF 01 1A 		      	mov  	bp,sp
015FAC 15 EF 81 00 		      	subui	sp,sp,#64
015FB0 E7 E5 01 00 		      	push 	r11
015FB4 C7 3D 8C FF 		      	lea  	r3,-58[bp]
015FB8 82 B1 00 1A 		      	mov  	r11,r3
015FBC C6 3D 40 00 		      	lw   	r3,32[bp]
015FC0 BD 41 08 00 		      	blt  	r3,stdio_30
015FC4 C6 3D 40 00 		      	lw   	r3,32[bp]
015FC8 86 31 90 01 		      	cmp  	r3,r3,#200
015FCC BD 51 04 00 		      	ble  	r3,stdio_28
                	stdio_30:
015FD0 E3 0D 40 00 		      	sw   	r0,32[bp]
                	stdio_28:
015FD4 E3 0D F0 FF 		      	sw   	r0,-8[bp]
015FD8 C6 3D 30 00 		      	lw   	r3,24[bp]
015FDC BD 31 06 00 		      	bge  	r3,stdio_31
015FE0 0A 30 5A 00 		      	ldi  	r3,#45
015FE4 BA 01 00 00 		      	bra  	stdio_32
                	stdio_31:
015FE8 0A 40 56 00 		      	ldi  	r4,#43
015FEC 02 32 00 1A 		      	mov  	r3,r4
                	stdio_32:
015FF0 E1 3D DC FF 		      	sc   	r3,-18[bp]
015FF4 C6 3D 30 00 		      	lw   	r3,24[bp]
015FF8 BD 31 08 00 		      	bge  	r3,stdio_33
015FFC C6 3D 30 00 		      	lw   	r3,24[bp]
016000 02 30 06 2A 		      	neg  	r3,r3
016004 E3 3D 30 00 		      	sw   	r3,24[bp]
                	stdio_33:
                	stdio_35:
016008 C6 3D 30 00 		      	lw   	r3,24[bp]
01600C 8C 31 1E 00 		      	and  	r3,r3,#15
016010 E3 3D E0 FF 		      	sw   	r3,-16[bp]
016014 C6 3D E0 FF 		      	lw   	r3,-16[bp]
016018 86 31 14 00 		      	cmp  	r3,r3,#10
01601C BD 31 0E 00 		      	bge  	r3,stdio_37
016020 C6 3D E0 FF 		      	lw   	r3,-16[bp]
016024 94 31 60 00 		      	addu 	r3,r3,#48
016028 C6 4D F0 FF 		      	lw   	r4,-8[bp]
01602C 02 42 02 70 		      	asli 	r4,r4,#1
016030 E9 35 08 00 		      	sc   	r3,0[r11+r4]
016034 3A 07 00 00 		      	bra  	stdio_38
                	stdio_37:
016038 C6 3D 50 00 		      	lw   	r3,40[bp]
01603C BD 01 0E 00 		      	beq  	r3,stdio_39
016040 C6 3D E0 FF 		      	lw   	r3,-16[bp]
016044 95 31 92 FF 		      	subu 	r3,r3,#-55
016048 C6 4D F0 FF 		      	lw   	r4,-8[bp]
01604C 02 42 02 70 		      	asli 	r4,r4,#1
016050 E9 35 08 00 		      	sc   	r3,0[r11+r4]
016054 3A 03 00 00 		      	bra  	stdio_40
                	stdio_39:
016058 C6 3D E0 FF 		      	lw   	r3,-16[bp]
01605C 95 31 52 FF 		      	subu 	r3,r3,#-87
016060 C6 4D F0 FF 		      	lw   	r4,-8[bp]
016064 02 42 02 70 		      	asli 	r4,r4,#1
016068 E9 35 08 00 		      	sc   	r3,0[r11+r4]
                	stdio_40:
                	stdio_38:
01606C C6 3D 30 00 		      	lw   	r3,24[bp]
016070 82 31 08 78 		      	asri 	r3,r3,#4
016074 E3 3D 30 00 		      	sw   	r3,24[bp]
016078 E4 1D F0 FF 		      	inc  	-8[bp],#1
01607C C6 3D 30 00 		      	lw   	r3,24[bp]
016080 BD 11 C4 FF 		      	bne  	r3,stdio_35
                	stdio_36:
016084 C3 3D DC FF 		      	lcu  	r3,-18[bp]
016088 86 31 5A 00 		      	cmp  	r3,r3,#45
01608C BD 11 0C 00 		      	bne  	r3,stdio_41
016090 C6 3D F0 FF 		      	lw   	r3,-8[bp]
016094 82 31 02 70 		      	asli 	r3,r3,#1
016098 C3 4D DC FF 		      	lcu  	r4,-18[bp]
01609C E9 45 06 00 		      	sc   	r4,0[r11+r3]
0160A0 E4 1D F0 FF 		      	inc  	-8[bp],#1
                	stdio_41:
                	stdio_43:
0160A4 C6 3D F0 FF 		      	lw   	r3,-8[bp]
0160A8 C6 4D 40 00 		      	lw   	r4,32[bp]
0160AC 82 31 08 0C 		      	cmp  	r3,r3,r4
0160B0 BD 31 0C 00 		      	bge  	r3,stdio_44
0160B4 C3 3D 60 00 		      	lcu  	r3,48[bp]
0160B8 E7 E1 01 00 		      	push 	r3
0160BC B9 A2 FF FF 		      	bsr  	putch
0160C0 E4 FD 41 00 		      	dec  	32[bp],#1
0160C4 3A FC FF FF 		      	bra  	stdio_43
                	stdio_44:
                	stdio_45:
0160C8 C6 3D F0 FF 		      	lw   	r3,-8[bp]
0160CC BD 51 10 00 		      	ble  	r3,stdio_46
0160D0 E4 FD F1 FF 		      	dec  	-8[bp],#1
0160D4 C6 3D F0 FF 		      	lw   	r3,-8[bp]
0160D8 82 31 02 70 		      	asli 	r3,r3,#1
0160DC CB 35 06 00 		      	lcu  	r3,0[r11+r3]
0160E0 E7 E1 01 00 		      	push 	r3
0160E4 B9 9D FF FF 		      	bsr  	putch
0160E8 3A FC FF FF 		      	bra  	stdio_45
                	stdio_46:
                	stdio_47:
0160EC 57 BF 10 00 		      	pop  	r11
0160F0 82 ED 01 1A 		      	mov  	sp,bp
0160F4 57 BF 11 00 		      	pop  	bp
0160F8 57 CF 11 00 		      	pop  	xlr
0160FC 57 FF 11 00 		      	pop  	lr
016100 37 FF 41 00 		      	rtl  	#32
                	stdio_27:
016104 C6 FD 11 00 		      	lw   	lr,8[bp]
016108 E3 FD 21 00 		      	sw   	lr,16[bp]
01610C 3A FC FF FF 		      	bra  	stdio_47
                	endpublic
                	
                	public code putstr:
016110 E7 EF 01 00 		      	push 	lr
016114 67 EE 01 00 		      	push 	xlr
016118 E7 ED 01 00 		      	push 	bp
01611C 7C 01 00 00 		      	ldi  	xlr,#stdio_48
016120 0A C0 19 C3 
016124 02 BF 01 1A 		      	mov  	bp,sp
016128 15 EF 11 00 		      	subui	sp,sp,#8
01612C E7 E5 01 00 		      	push 	r11
016130 C6 BD 30 00 		      	lw   	r11,24[bp]
016134 E3 BD F0 FF 		      	sw   	r11,-8[bp]
                	stdio_49:
016138 C3 35 00 00 		      	lcu  	r3,[r11]
01613C BD 01 12 00 		      	beq  	r3,stdio_50
016140 C6 3D 40 00 		      	lw   	r3,32[bp]
016144 BD 51 0E 00 		      	ble  	r3,stdio_50
016148 C3 35 00 00 		      	lcu  	r3,[r11]
01614C E7 E1 01 00 		      	push 	r3
016150 39 90 FF FF 		      	bsr  	putch
                	stdio_51:
016154 94 B5 04 00 		      	addui	r11,r11,#2
016158 E4 FD 41 00 		      	dec  	32[bp],#1
01615C BA FB FF FF 		      	bra  	stdio_49
                	stdio_50:
016160 C6 3D F0 FF 		      	lw   	r3,-8[bp]
016164 82 31 02 70 		      	asli 	r3,r3,#1
016168 82 B5 06 2A 		      	subu 	r11,r11,r3
01616C 82 B5 02 72 		      	lsri 	r11,r11,#1
016170 82 15 00 1A 		      	mov  	r1,r11
                	stdio_52:
016174 57 BF 10 00 		      	pop  	r11
016178 82 ED 01 1A 		      	mov  	sp,bp
01617C 57 BF 11 00 		      	pop  	bp
016180 57 CF 11 00 		      	pop  	xlr
016184 57 FF 11 00 		      	pop  	lr
016188 37 FF 21 00 		      	rtl  	#16
                	stdio_48:
01618C C6 FD 11 00 		      	lw   	lr,8[bp]
016190 E3 FD 21 00 		      	sw   	lr,16[bp]
016194 3A FC FF FF 		      	bra  	stdio_52
                	endpublic
                	
                	public code putstr2:
016198 15 EF 21 00 		      	subui	sp,sp,#16
01619C E7 ED 01 00 		      	push 	bp
0161A0 02 BF 01 1A 		      	mov  	bp,sp
0161A4 67 E3 01 00 		      	     	        push    r6
0161A8 C6 1D 30 00 	        lw      r1,24[bp]
0161AC 0A 60 36 00 	        ldi     r6,#$1B   ; Video BIOS DisplayString16 function
0161B0 38 0F 34 03 	        sys     #410
0161B4 57 6F 10 00 	        pop     r6
                	    
                	stdio_54:
0161B8 82 ED 01 1A 		      	mov  	sp,bp
0161BC 57 BF 11 00 		      	pop  	bp
0161C0 37 FF 31 00 		      	rtl  	#24
                	endpublic
                	
                	public code getcharNoWait:
0161C4 67 E3 01 00 		      	     	        push    r6
                	        ld      r6,#3    ; KeybdGetCharNoWait
0161C8 38 0F 14 00 	        sys     #10
0161CC 57 6F 10 00 	        pop     r6
0161D0 37 FF 01 00 	        rtl
	
                	endpublic
                	
                	public code getchar:
0161D4 E7 EF 01 00 		      	push 	lr
0161D8 67 EE 01 00 		      	push 	xlr
0161DC E7 ED 01 00 		      	push 	bp
0161E0 7C 01 00 00 		      	ldi  	xlr,#stdio_57
0161E4 0A C0 51 C4 
0161E8 02 BF 01 1A 		      	mov  	bp,sp
0161EC 15 EF 11 00 		      	subui	sp,sp,#8
                	stdio_58:
0161F0 B9 FA FF FF 		      	bsr  	getcharNoWait
0161F4 82 30 00 1A 		      	mov  	r3,r1
0161F8 E3 3D F0 FF 		      	sw   	r3,-8[bp]
0161FC C6 3D F0 FF 		      	lw   	r3,-8[bp]
016200 86 31 FE FF 		      	cmp  	r3,r3,#-1
016204 BD 01 F6 FF 		      	beq  	r3,stdio_58
                	stdio_59:
016208 C6 3D F0 FF 		      	lw   	r3,-8[bp]
01620C 8C 31 FE 01 		      	and  	r3,r3,#255
016210 82 11 00 1A 		      	mov  	r1,r3
                	stdio_60:
016214 82 ED 01 1A 		      	mov  	sp,bp
016218 57 BF 11 00 		      	pop  	bp
01621C 57 CF 11 00 		      	pop  	xlr
016220 57 FF 11 00 		      	pop  	lr
016224 37 FF 01 00 		      	rtl  	#0
                	stdio_57:
016228 C6 FD 11 00 		      	lw   	lr,8[bp]
01622C E3 FD 21 00 		      	sw   	lr,16[bp]
016230 BA FC FF FF 		      	bra  	stdio_60
                	endpublic
                	
                	public code printf:
016234 E7 EF 01 00 		      	push 	lr
016238 67 EE 01 00 		      	push 	xlr
01623C E7 ED 01 00 		      	push 	bp
016240 7C 01 00 00 		      	ldi  	xlr,#stdio_62
016244 0A C0 F9 C9 
016248 02 BF 01 1A 		      	mov  	bp,sp
01624C 15 EF 51 00 		      	subui	sp,sp,#40
016250 E7 E5 01 00 		      	push 	r11
016254 67 E6 01 00 		      	push 	r12
016258 C7 3D 30 00 		      	lea  	r3,24[bp]
01625C 82 B1 00 1A 		      	mov  	r11,r3
016260 82 C5 00 1A 		      	mov  	r12,r11
                	stdio_63:
016264 C6 35 00 00 		      	lw   	r3,[r11]
016268 C3 31 00 00 		      	lcu  	r3,[r3]
01626C BD 01 3A 01 		      	beq  	r3,stdio_64
016270 0A 30 40 00 		      	ldi  	r3,#32
016274 E1 3D BC FF 		      	sc   	r3,-34[bp]
016278 C6 35 00 00 		      	lw   	r3,[r11]
01627C C3 31 00 00 		      	lcu  	r3,[r3]
016280 86 31 4A 00 		      	cmp  	r3,r3,#37
016284 BD 11 22 01 		      	bne  	r3,stdio_66
016288 E3 0D E0 FF 		      	sw   	r0,-16[bp]
01628C FC 00 00 00 		      	ldi  	r3,#65535
016290 0A 30 FE FF 
016294 E3 3D D0 FF 		      	sw   	r3,-24[bp]
016298 E4 25 00 00 		      	inc  	[r11],#2
                	stdio_61:
01629C C6 35 00 00 		      	lw   	r3,[r11]
0162A0 C3 31 00 00 		      	lcu  	r3,[r3]
0162A4 86 41 4A 00 		      	cmp  	r4,r3,#37
0162A8 3D 02 44 00 		      	beq  	r4,stdio_69
0162AC 86 41 C6 00 		      	cmp  	r4,r3,#99
0162B0 3D 02 46 00 		      	beq  	r4,stdio_70
0162B4 86 41 C8 00 		      	cmp  	r4,r3,#100
0162B8 3D 02 4A 00 		      	beq  	r4,stdio_71
0162BC 86 41 F0 00 		      	cmp  	r4,r3,#120
0162C0 3D 02 56 00 		      	beq  	r4,stdio_72
0162C4 86 41 B0 00 		      	cmp  	r4,r3,#88
0162C8 3D 02 62 00 		      	beq  	r4,stdio_73
0162CC 86 41 E6 00 		      	cmp  	r4,r3,#115
0162D0 3D 02 6E 00 		      	beq  	r4,stdio_74
0162D4 86 41 60 00 		      	cmp  	r4,r3,#48
0162D8 3D 02 78 00 		      	beq  	r4,stdio_75
0162DC 86 41 72 00 		      	cmp  	r4,r3,#57
0162E0 3D 02 78 00 		      	beq  	r4,stdio_76
0162E4 86 41 70 00 		      	cmp  	r4,r3,#56
0162E8 3D 02 74 00 		      	beq  	r4,stdio_76
0162EC 86 41 6E 00 		      	cmp  	r4,r3,#55
0162F0 3D 02 70 00 		      	beq  	r4,stdio_76
0162F4 86 41 6C 00 		      	cmp  	r4,r3,#54
0162F8 3D 02 6C 00 		      	beq  	r4,stdio_76
0162FC 86 41 6A 00 		      	cmp  	r4,r3,#53
016300 3D 02 68 00 		      	beq  	r4,stdio_76
016304 86 41 68 00 		      	cmp  	r4,r3,#52
016308 3D 02 64 00 		      	beq  	r4,stdio_76
01630C 86 41 66 00 		      	cmp  	r4,r3,#51
016310 3D 02 60 00 		      	beq  	r4,stdio_76
016314 86 41 64 00 		      	cmp  	r4,r3,#50
016318 3D 02 5C 00 		      	beq  	r4,stdio_76
01631C 86 41 62 00 		      	cmp  	r4,r3,#49
016320 3D 02 58 00 		      	beq  	r4,stdio_76
016324 86 41 5C 00 		      	cmp  	r4,r3,#46
016328 3D 02 8C 00 		      	beq  	r4,stdio_77
01632C 3A 33 00 00 		      	bra  	stdio_68
                	stdio_69:
016330 65 E0 4B 00 		      	push 	#37
016334 B9 53 FF FF 		      	bsr  	putch
016338 BA 31 00 00 		      	bra  	stdio_68
                	stdio_70:
01633C 14 C6 10 00 		      	addui	r12,r12,#8
016340 66 E6 01 00 		      	push 	[r12]
016344 B9 51 FF FF 		      	bsr  	putch
016348 BA 2F 00 00 		      	bra  	stdio_68
                	stdio_71:
01634C 14 C6 10 00 		      	addui	r12,r12,#8
016350 C3 3D BC FF 		      	lcu  	r3,-34[bp]
016354 E7 E1 01 00 		      	push 	r3
016358 65 E0 01 00 		      	push 	#0
01635C E6 ED E1 FF 		      	push 	-16[bp]
016360 66 E6 01 00 		      	push 	[r12]
016364 39 53 FF FF 		      	bsr  	putnum
016368 BA 2B 00 00 		      	bra  	stdio_68
                	stdio_72:
01636C 14 C6 10 00 		      	addui	r12,r12,#8
016370 C3 3D BC FF 		      	lcu  	r3,-34[bp]
016374 E7 E1 01 00 		      	push 	r3
016378 65 E0 01 00 		      	push 	#0
01637C E6 ED E1 FF 		      	push 	-16[bp]
016380 66 E6 01 00 		      	push 	[r12]
016384 39 82 FF FF 		      	bsr  	puthexnum
016388 BA 27 00 00 		      	bra  	stdio_68
                	stdio_73:
01638C 14 C6 10 00 		      	addui	r12,r12,#8
016390 C3 3D BC FF 		      	lcu  	r3,-34[bp]
016394 E7 E1 01 00 		      	push 	r3
016398 65 E0 03 00 		      	push 	#1
01639C E6 ED E1 FF 		      	push 	-16[bp]
0163A0 66 E6 01 00 		      	push 	[r12]
0163A4 39 7E FF FF 		      	bsr  	puthexnum
0163A8 BA 23 00 00 		      	bra  	stdio_68
                	stdio_74:
0163AC 14 C6 10 00 		      	addui	r12,r12,#8
0163B0 E6 ED D1 FF 		      	push 	-24[bp]
0163B4 66 E6 01 00 		      	push 	[r12]
0163B8 39 AB FF FF 		      	bsr  	putstr
0163BC 82 30 00 1A 		      	mov  	r3,r1
0163C0 E3 3D C0 FF 		      	sw   	r3,-32[bp]
0163C4 3A 20 00 00 		      	bra  	stdio_68
                	stdio_75:
0163C8 0A 30 60 00 		      	ldi  	r3,#48
0163CC E1 3D BC FF 		      	sc   	r3,-34[bp]
                	stdio_76:
0163D0 C6 35 00 00 		      	lw   	r3,[r11]
0163D4 C3 31 00 00 		      	lcu  	r3,[r3]
0163D8 95 31 60 00 		      	subu 	r3,r3,#48
0163DC E3 3D E0 FF 		      	sw   	r3,-16[bp]
0163E0 E4 25 00 00 		      	inc  	[r11],#2
                	stdio_78:
0163E4 C6 35 00 00 		      	lw   	r3,[r11]
0163E8 C3 31 00 00 		      	lcu  	r3,[r3]
0163EC E7 E1 01 00 		      	push 	r3
0163F0 B9 33 00 00 		      	bsr  	isdigit
0163F4 14 EF 11 00 		      	addui	sp,sp,#8
0163F8 82 30 00 1A 		      	mov  	r3,r1
0163FC BD 01 18 00 		      	beq  	r3,stdio_79
016400 C6 3D E0 FF 		      	lw   	r3,-16[bp]
016404 87 31 14 00 		      	muli 	r3,r3,#10
016408 E3 3D E0 FF 		      	sw   	r3,-16[bp]
01640C C6 35 00 00 		      	lw   	r3,[r11]
016410 C3 31 00 00 		      	lcu  	r3,[r3]
016414 95 31 60 00 		      	subu 	r3,r3,#48
016418 C6 4D E0 FF 		      	lw   	r4,-16[bp]
01641C 02 42 06 28 		      	addu 	r4,r4,r3
016420 E3 4D E0 FF 		      	sw   	r4,-16[bp]
016424 E4 25 00 00 		      	inc  	[r11],#2
016428 BA F7 FF FF 		      	bra  	stdio_78
                	stdio_79:
01642C C6 35 00 00 		      	lw   	r3,[r11]
016430 C3 31 00 00 		      	lcu  	r3,[r3]
016434 86 31 5C 00 		      	cmp  	r3,r3,#46
016438 BD 01 04 00 		      	beq  	r3,stdio_80
01643C 3A CC FF FF 		      	bra  	stdio_61
                	stdio_80:
                	stdio_77:
016440 E4 25 00 00 		      	inc  	[r11],#2
016444 C6 35 00 00 		      	lw   	r3,[r11]
016448 C3 31 00 00 		      	lcu  	r3,[r3]
01644C E7 E1 01 00 		      	push 	r3
016450 B9 27 00 00 		      	bsr  	isdigit
016454 14 EF 11 00 		      	addui	sp,sp,#8
016458 82 30 00 1A 		      	mov  	r3,r1
01645C BD 11 04 00 		      	bne  	r3,stdio_82
016460 BA C7 FF FF 		      	bra  	stdio_61
                	stdio_82:
016464 C6 35 00 00 		      	lw   	r3,[r11]
016468 C3 31 00 00 		      	lcu  	r3,[r3]
01646C 95 31 60 00 		      	subu 	r3,r3,#48
016470 E3 3D D0 FF 		      	sw   	r3,-24[bp]
016474 E4 25 00 00 		      	inc  	[r11],#2
                	stdio_84:
016478 C6 35 00 00 		      	lw   	r3,[r11]
01647C C3 31 00 00 		      	lcu  	r3,[r3]
016480 E7 E1 01 00 		      	push 	r3
016484 39 21 00 00 		      	bsr  	isdigit
016488 14 EF 11 00 		      	addui	sp,sp,#8
01648C 82 30 00 1A 		      	mov  	r3,r1
016490 BD 01 18 00 		      	beq  	r3,stdio_85
016494 C6 3D D0 FF 		      	lw   	r3,-24[bp]
016498 87 31 14 00 		      	muli 	r3,r3,#10
01649C E3 3D D0 FF 		      	sw   	r3,-24[bp]
0164A0 C6 35 00 00 		      	lw   	r3,[r11]
0164A4 C3 31 00 00 		      	lcu  	r3,[r3]
0164A8 95 31 60 00 		      	subu 	r3,r3,#48
0164AC C6 4D D0 FF 		      	lw   	r4,-24[bp]
0164B0 02 42 06 28 		      	addu 	r4,r4,r3
0164B4 E3 4D D0 FF 		      	sw   	r4,-24[bp]
0164B8 E4 25 00 00 		      	inc  	[r11],#2
0164BC BA F7 FF FF 		      	bra  	stdio_84
                	stdio_85:
0164C0 BA BB FF FF 		      	bra  	stdio_61
                	stdio_68:
0164C4 BA 02 00 00 		      	bra  	stdio_67
                	stdio_66:
0164C8 C6 35 00 00 		      	lw   	r3,[r11]
0164CC C3 31 00 00 		      	lcu  	r3,[r3]
0164D0 E7 E1 01 00 		      	push 	r3
0164D4 B9 1F FF FF 		      	bsr  	putch
                	stdio_67:
                	stdio_65:
0164D8 E4 25 00 00 		      	inc  	[r11],#2
0164DC 3A B1 FF FF 		      	bra  	stdio_63
                	stdio_64:
                	stdio_86:
0164E0 57 CF 10 00 		      	pop  	r12
0164E4 57 BF 10 00 		      	pop  	r11
0164E8 82 ED 01 1A 		      	mov  	sp,bp
0164EC 57 BF 11 00 		      	pop  	bp
0164F0 57 CF 11 00 		      	pop  	xlr
0164F4 57 FF 11 00 		      	pop  	lr
0164F8 37 FF 01 00 		      	rtl  	#0
                	stdio_62:
0164FC C6 FD 11 00 		      	lw   	lr,8[bp]
016500 E3 FD 21 00 		      	sw   	lr,16[bp]
016504 BA FB FF FF 		      	bra  	stdio_86
                	endpublic
                	
                		code
016508 00 00 00 00 		align	1
01650C 00 00 00 00 
                	
                	public code isxdigit:
016510 15 EF 21 00 		      	subui	sp,sp,#16
016514 E7 ED 01 00 		      	push 	bp
016518 02 BF 01 1A 		      	mov  	bp,sp
01651C C3 3D 30 00 		      	lcu  	r3,24[bp]
016520 96 31 82 00 		      	cmpu 	r3,r3,#65
016524 BD 41 10 00 		      	blt  	r3,ctype_1
016528 C3 3D 30 00 		      	lcu  	r3,24[bp]
01652C 96 31 8C 00 		      	cmpu 	r3,r3,#70
016530 BD 21 0A 00 		      	bgt  	r3,ctype_1
016534 0A 10 02 00 		      	ldi  	r1,#1
                	ctype_3:
016538 82 ED 01 1A 		      	mov  	sp,bp
01653C 57 BF 11 00 		      	pop  	bp
016540 37 FF 21 00 		      	rtl  	#16
                	ctype_1:
016544 C3 3D 30 00 		      	lcu  	r3,24[bp]
016548 96 31 C2 00 		      	cmpu 	r3,r3,#97
01654C BD 41 0C 00 		      	blt  	r3,ctype_4
016550 C3 3D 30 00 		      	lcu  	r3,24[bp]
016554 96 31 CC 00 		      	cmpu 	r3,r3,#102
016558 BD 21 06 00 		      	bgt  	r3,ctype_4
01655C 0A 10 02 00 		      	ldi  	r1,#1
016560 3A FB FF FF 		      	bra  	ctype_3
                	ctype_4:
016564 C3 3D 30 00 		      	lcu  	r3,24[bp]
016568 96 31 60 00 		      	cmpu 	r3,r3,#48
01656C BD 41 0C 00 		      	blt  	r3,ctype_6
016570 C3 3D 30 00 		      	lcu  	r3,24[bp]
016574 96 31 72 00 		      	cmpu 	r3,r3,#57
016578 BD 21 06 00 		      	bgt  	r3,ctype_6
01657C 0A 10 02 00 		      	ldi  	r1,#1
016580 3A F7 FF FF 		      	bra  	ctype_3
                	ctype_6:
016584 0A 10 00 00 		      	ldi  	r1,#0
016588 3A F6 FF FF 		      	bra  	ctype_3
                	endpublic
                	
                	public code isdigit:
01658C 15 EF 21 00 		      	subui	sp,sp,#16
016590 E7 ED 01 00 		      	push 	bp
016594 02 BF 01 1A 		      	mov  	bp,sp
016598 C3 3D 30 00 		      	lcu  	r3,24[bp]
01659C 96 31 60 00 		      	cmpu 	r3,r3,#48
0165A0 BD 41 10 00 		      	blt  	r3,ctype_9
0165A4 C3 3D 30 00 		      	lcu  	r3,24[bp]
0165A8 96 31 72 00 		      	cmpu 	r3,r3,#57
0165AC BD 21 0A 00 		      	bgt  	r3,ctype_9
0165B0 0A 10 02 00 		      	ldi  	r1,#1
                	ctype_11:
0165B4 82 ED 01 1A 		      	mov  	sp,bp
0165B8 57 BF 11 00 		      	pop  	bp
0165BC 37 FF 21 00 		      	rtl  	#16
                	ctype_9:
0165C0 0A 10 00 00 		      	ldi  	r1,#0
0165C4 3A FE FF FF 		      	bra  	ctype_11
                	endpublic
                	
                	public code isalpha:
0165C8 15 EF 21 00 		      	subui	sp,sp,#16
0165CC E7 ED 01 00 		      	push 	bp
0165D0 02 BF 01 1A 		      	mov  	bp,sp
0165D4 C3 3D 30 00 		      	lcu  	r3,24[bp]
0165D8 96 31 C2 00 		      	cmpu 	r3,r3,#97
0165DC BD 41 10 00 		      	blt  	r3,ctype_13
0165E0 C3 3D 30 00 		      	lcu  	r3,24[bp]
0165E4 96 31 F4 00 		      	cmpu 	r3,r3,#122
0165E8 BD 21 0A 00 		      	bgt  	r3,ctype_13
0165EC 0A 10 02 00 		      	ldi  	r1,#1
                	ctype_15:
0165F0 82 ED 01 1A 		      	mov  	sp,bp
0165F4 57 BF 11 00 		      	pop  	bp
0165F8 37 FF 21 00 		      	rtl  	#16
                	ctype_13:
0165FC C3 3D 30 00 		      	lcu  	r3,24[bp]
016600 96 31 82 00 		      	cmpu 	r3,r3,#65
016604 BD 41 0C 00 		      	blt  	r3,ctype_16
016608 C3 3D 30 00 		      	lcu  	r3,24[bp]
01660C 96 31 B4 00 		      	cmpu 	r3,r3,#90
016610 BD 21 06 00 		      	bgt  	r3,ctype_16
016614 0A 10 02 00 		      	ldi  	r1,#1
016618 3A FB FF FF 		      	bra  	ctype_15
                	ctype_16:
01661C 0A 10 00 00 		      	ldi  	r1,#0
016620 3A FA FF FF 		      	bra  	ctype_15
                	endpublic
                	
                	public code isalnum:
016624 15 EF 21 00 		      	subui	sp,sp,#16
016628 E7 ED 01 00 		      	push 	bp
01662C 02 BF 01 1A 		      	mov  	bp,sp
016630 C3 3D 30 00 		      	lcu  	r3,24[bp]
016634 96 31 60 00 		      	cmpu 	r3,r3,#48
016638 BD 41 10 00 		      	blt  	r3,ctype_19
01663C C3 3D 30 00 		      	lcu  	r3,24[bp]
016640 96 31 72 00 		      	cmpu 	r3,r3,#57
016644 BD 21 0A 00 		      	bgt  	r3,ctype_19
016648 0A 10 02 00 		      	ldi  	r1,#1
                	ctype_21:
01664C 82 ED 01 1A 		      	mov  	sp,bp
016650 57 BF 11 00 		      	pop  	bp
016654 37 FF 21 00 		      	rtl  	#16
                	ctype_19:
016658 C3 3D 30 00 		      	lcu  	r3,24[bp]
01665C 96 31 C2 00 		      	cmpu 	r3,r3,#97
016660 BD 41 0C 00 		      	blt  	r3,ctype_22
016664 C3 3D 30 00 		      	lcu  	r3,24[bp]
016668 96 31 F4 00 		      	cmpu 	r3,r3,#122
01666C BD 21 06 00 		      	bgt  	r3,ctype_22
016670 0A 10 02 00 		      	ldi  	r1,#1
016674 3A FB FF FF 		      	bra  	ctype_21
                	ctype_22:
016678 C3 3D 30 00 		      	lcu  	r3,24[bp]
01667C 96 31 82 00 		      	cmpu 	r3,r3,#65
016680 BD 41 0C 00 		      	blt  	r3,ctype_24
016684 C3 3D 30 00 		      	lcu  	r3,24[bp]
016688 96 31 B4 00 		      	cmpu 	r3,r3,#90
01668C BD 21 06 00 		      	bgt  	r3,ctype_24
016690 0A 10 02 00 		      	ldi  	r1,#1
016694 3A F7 FF FF 		      	bra  	ctype_21
                	ctype_24:
016698 0A 10 00 00 		      	ldi  	r1,#0
01669C 3A F6 FF FF 		      	bra  	ctype_21
                	endpublic
                	
                	public code isspace:
0166A0 15 EF 21 00 		      	subui	sp,sp,#16
0166A4 E7 ED 01 00 		      	push 	bp
0166A8 02 BF 01 1A 		      	mov  	bp,sp
0166AC C3 3D 30 00 		      	lcu  	r3,24[bp]
0166B0 86 31 40 00 		      	cmp  	r3,r3,#32
0166B4 BD 11 0A 00 		      	bne  	r3,ctype_27
0166B8 0A 10 02 00 		      	ldi  	r1,#1
                	ctype_29:
0166BC 82 ED 01 1A 		      	mov  	sp,bp
0166C0 57 BF 11 00 		      	pop  	bp
0166C4 37 FF 21 00 		      	rtl  	#16
                	ctype_27:
0166C8 C3 3D 30 00 		      	lcu  	r3,24[bp]
0166CC 86 31 12 00 		      	cmp  	r3,r3,#9
0166D0 BD 11 06 00 		      	bne  	r3,ctype_30
0166D4 0A 10 02 00 		      	ldi  	r1,#1
0166D8 BA FC FF FF 		      	bra  	ctype_29
                	ctype_30:
0166DC C3 3D 30 00 		      	lcu  	r3,24[bp]
0166E0 86 31 14 00 		      	cmp  	r3,r3,#10
0166E4 BD 11 06 00 		      	bne  	r3,ctype_32
0166E8 0A 10 02 00 		      	ldi  	r1,#1
0166EC 3A FA FF FF 		      	bra  	ctype_29
                	ctype_32:
0166F0 C3 3D 30 00 		      	lcu  	r3,24[bp]
0166F4 86 31 1A 00 		      	cmp  	r3,r3,#13
0166F8 BD 11 06 00 		      	bne  	r3,ctype_34
0166FC 0A 10 02 00 		      	ldi  	r1,#1
016700 BA F7 FF FF 		      	bra  	ctype_29
                	ctype_34:
016704 C3 3D 30 00 		      	lcu  	r3,24[bp]
016708 86 31 18 00 		      	cmp  	r3,r3,#12
01670C BD 11 06 00 		      	bne  	r3,ctype_36
016710 0A 10 02 00 		      	ldi  	r1,#1
016714 3A F5 FF FF 		      	bra  	ctype_29
                	ctype_36:
016718 0A 10 00 00 		      	ldi  	r1,#0
01671C 3A F4 FF FF 		      	bra  	ctype_29
                	endpublic
                	
                	public code tolower:
016720 15 EF 21 00 		      	subui	sp,sp,#16
016724 E7 ED 01 00 		      	push 	bp
016728 02 BF 01 1A 		      	mov  	bp,sp
01672C C3 3D 30 00 		      	lcu  	r3,24[bp]
016730 96 31 82 00 		      	cmpu 	r3,r3,#65
016734 BD 41 0E 00 		      	blt  	r3,ctype_39
016738 C3 3D 30 00 		      	lcu  	r3,24[bp]
01673C 96 31 B4 00 		      	cmpu 	r3,r3,#90
016740 BD 21 08 00 		      	bgt  	r3,ctype_39
016744 C3 3D 30 00 		      	lcu  	r3,24[bp]
016748 94 31 40 00 		      	addu 	r3,r3,#32
01674C E1 3D 30 00 		      	sc   	r3,24[bp]
                	ctype_39:
016750 C3 3D 30 00 		      	lcu  	r3,24[bp]
016754 82 11 00 1A 		      	mov  	r1,r3
                	ctype_41:
016758 82 ED 01 1A 		      	mov  	sp,bp
01675C 57 BF 11 00 		      	pop  	bp
016760 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code toupper:
016764 15 EF 21 00 		      	subui	sp,sp,#16
016768 E7 ED 01 00 		      	push 	bp
01676C 02 BF 01 1A 		      	mov  	bp,sp
016770 C3 3D 30 00 		      	lcu  	r3,24[bp]
016774 96 31 C2 00 		      	cmpu 	r3,r3,#97
016778 BD 41 0E 00 		      	blt  	r3,ctype_43
01677C C3 3D 30 00 		      	lcu  	r3,24[bp]
016780 96 31 C2 00 		      	cmpu 	r3,r3,#97
016784 BD 21 08 00 		      	bgt  	r3,ctype_43
016788 C3 3D 30 00 		      	lcu  	r3,24[bp]
01678C 94 31 C0 FF 		      	addu 	r3,r3,#-32
016790 E1 3D 30 00 		      	sc   	r3,24[bp]
                	ctype_43:
016794 C3 3D 30 00 		      	lcu  	r3,24[bp]
016798 82 11 00 1A 		      	mov  	r1,r3
                	ctype_45:
01679C 82 ED 01 1A 		      	mov  	sp,bp
0167A0 57 BF 11 00 		      	pop  	bp
0167A4 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code isupper:
0167A8 15 EF 21 00 		      	subui	sp,sp,#16
0167AC E7 ED 01 00 		      	push 	bp
0167B0 02 BF 01 1A 		      	mov  	bp,sp
0167B4 C3 3D 30 00 		      	lcu  	r3,24[bp]
0167B8 96 31 82 00 		      	cmpu 	r3,r3,#65
0167BC BD 41 0C 00 		      	blt  	r3,ctype_47
0167C0 C3 3D 30 00 		      	lcu  	r3,24[bp]
0167C4 96 31 B4 00 		      	cmpu 	r3,r3,#90
0167C8 BD 21 06 00 		      	bgt  	r3,ctype_47
0167CC 0A 30 02 00 		      	ldi  	r3,#1
0167D0 3A 01 00 00 		      	bra  	ctype_48
                	ctype_47:
0167D4 0A 30 00 00 		      	ldi  	r3,#0
                	ctype_48:
0167D8 82 11 00 1A 		      	mov  	r1,r3
                	ctype_49:
0167DC 82 ED 01 1A 		      	mov  	sp,bp
0167E0 57 BF 11 00 		      	pop  	bp
0167E4 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code islower:
0167E8 15 EF 21 00 		      	subui	sp,sp,#16
0167EC E7 ED 01 00 		      	push 	bp
0167F0 02 BF 01 1A 		      	mov  	bp,sp
0167F4 C3 3D 30 00 		      	lcu  	r3,24[bp]
0167F8 96 31 C2 00 		      	cmpu 	r3,r3,#97
0167FC BD 41 0C 00 		      	blt  	r3,ctype_51
016800 C3 3D 30 00 		      	lcu  	r3,24[bp]
016804 96 31 F4 00 		      	cmpu 	r3,r3,#122
016808 BD 21 06 00 		      	bgt  	r3,ctype_51
01680C 0A 30 02 00 		      	ldi  	r3,#1
016810 3A 01 00 00 		      	bra  	ctype_52
                	ctype_51:
016814 0A 30 00 00 		      	ldi  	r3,#0
                	ctype_52:
016818 82 11 00 1A 		      	mov  	r1,r3
                	ctype_53:
01681C 82 ED 01 1A 		      	mov  	sp,bp
016820 57 BF 11 00 		      	pop  	bp
016824 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code ispunct:
016828 15 EF 21 00 		      	subui	sp,sp,#16
01682C E7 ED 01 00 		      	push 	bp
016830 02 BF 01 1A 		      	mov  	bp,sp
016834 C3 3D 30 00 		      	lcu  	r3,24[bp]
016838 86 41 BC 00 		      	cmp  	r4,r3,#94
01683C 3D 02 60 00 		      	beq  	r4,ctype_56
016840 86 41 74 00 		      	cmp  	r4,r3,#58
016844 3D 02 5C 00 		      	beq  	r4,ctype_56
016848 86 41 5E 00 		      	cmp  	r4,r3,#47
01684C 3D 02 58 00 		      	beq  	r4,ctype_56
016850 86 41 5C 00 		      	cmp  	r4,r3,#46
016854 3D 02 54 00 		      	beq  	r4,ctype_56
016858 86 41 5A 00 		      	cmp  	r4,r3,#45
01685C 3D 02 50 00 		      	beq  	r4,ctype_56
016860 86 41 58 00 		      	cmp  	r4,r3,#44
016864 3D 02 4C 00 		      	beq  	r4,ctype_56
016868 86 41 56 00 		      	cmp  	r4,r3,#43
01686C 3D 02 48 00 		      	beq  	r4,ctype_56
016870 86 41 54 00 		      	cmp  	r4,r3,#42
016874 3D 02 44 00 		      	beq  	r4,ctype_56
016878 86 41 BA 00 		      	cmp  	r4,r3,#93
01687C 3D 02 40 00 		      	beq  	r4,ctype_56
016880 86 41 B8 00 		      	cmp  	r4,r3,#92
016884 3D 02 3C 00 		      	beq  	r4,ctype_56
016888 86 41 B6 00 		      	cmp  	r4,r3,#91
01688C 3D 02 38 00 		      	beq  	r4,ctype_56
016890 86 41 7E 00 		      	cmp  	r4,r3,#63
016894 3D 02 34 00 		      	beq  	r4,ctype_56
016898 86 41 7C 00 		      	cmp  	r4,r3,#62
01689C 3D 02 30 00 		      	beq  	r4,ctype_56
0168A0 86 41 7A 00 		      	cmp  	r4,r3,#61
0168A4 3D 02 2C 00 		      	beq  	r4,ctype_56
0168A8 86 41 78 00 		      	cmp  	r4,r3,#60
0168AC 3D 02 28 00 		      	beq  	r4,ctype_56
0168B0 86 41 76 00 		      	cmp  	r4,r3,#59
0168B4 3D 02 24 00 		      	beq  	r4,ctype_56
0168B8 86 41 52 00 		      	cmp  	r4,r3,#41
0168BC 3D 02 20 00 		      	beq  	r4,ctype_56
0168C0 86 41 50 00 		      	cmp  	r4,r3,#40
0168C4 3D 02 1C 00 		      	beq  	r4,ctype_56
0168C8 86 41 4E 00 		      	cmp  	r4,r3,#39
0168CC 3D 02 18 00 		      	beq  	r4,ctype_56
0168D0 86 41 4C 00 		      	cmp  	r4,r3,#38
0168D4 3D 02 14 00 		      	beq  	r4,ctype_56
0168D8 86 41 4A 00 		      	cmp  	r4,r3,#37
0168DC 3D 02 10 00 		      	beq  	r4,ctype_56
0168E0 86 41 46 00 		      	cmp  	r4,r3,#35
0168E4 3D 02 0C 00 		      	beq  	r4,ctype_56
0168E8 86 41 44 00 		      	cmp  	r4,r3,#34
0168EC 3D 02 08 00 		      	beq  	r4,ctype_56
0168F0 86 41 42 00 		      	cmp  	r4,r3,#33
0168F4 3D 02 04 00 		      	beq  	r4,ctype_56
0168F8 BA 02 00 00 		      	bra  	ctype_57
                	ctype_56:
0168FC 0A 10 02 00 		      	ldi  	r1,#1
                	ctype_58:
016900 82 ED 01 1A 		      	mov  	sp,bp
016904 57 BF 11 00 		      	pop  	bp
016908 37 FF 21 00 		      	rtl  	#16
                	ctype_57:
01690C 0A 10 00 00 		      	ldi  	r1,#0
016910 3A FE FF FF 		      	bra  	ctype_58
                	ctype_55:
016914 BA FD FF FF 		      	bra  	ctype_58
                	endpublic
                	
                	public code isgraph:
016918 E7 EF 01 00 		      	push 	lr
01691C 67 EE 01 00 		      	push 	xlr
016920 E7 ED 01 00 		      	push 	bp
016924 7C 01 00 00 		      	ldi  	xlr,#ctype_59
016928 0A C0 09 D3 
01692C 02 BF 01 1A 		      	mov  	bp,sp
016930 C3 3D 30 00 		      	lcu  	r3,24[bp]
016934 E7 E1 01 00 		      	push 	r3
016938 39 DE FF FF 		      	bsr  	ispunct
01693C 14 EF 11 00 		      	addui	sp,sp,#8
016940 82 30 00 1A 		      	mov  	r3,r1
016944 BD 11 0E 00 		      	bne  	r3,ctype_62
016948 C3 3D 30 00 		      	lcu  	r3,24[bp]
01694C E7 E1 01 00 		      	push 	r3
016950 B9 9A FF FF 		      	bsr  	isalnum
016954 14 EF 11 00 		      	addui	sp,sp,#8
016958 82 30 00 1A 		      	mov  	r3,r1
01695C BD 01 06 00 		      	beq  	r3,ctype_60
                	ctype_62:
016960 0A 30 02 00 		      	ldi  	r3,#1
016964 3A 01 00 00 		      	bra  	ctype_61
                	ctype_60:
016968 0A 30 00 00 		      	ldi  	r3,#0
                	ctype_61:
01696C 82 11 00 1A 		      	mov  	r1,r3
                	ctype_63:
016970 82 ED 01 1A 		      	mov  	sp,bp
016974 57 BF 11 00 		      	pop  	bp
016978 57 CF 11 00 		      	pop  	xlr
01697C 57 FF 11 00 		      	pop  	lr
016980 37 FF 01 00 		      	rtl  	#0
                	ctype_59:
016984 C6 FD 11 00 		      	lw   	lr,8[bp]
016988 E3 FD 21 00 		      	sw   	lr,16[bp]
01698C BA FC FF FF 		      	bra  	ctype_63
                	endpublic
                	
                	public code isprint:
016990 E7 EF 01 00 		      	push 	lr
016994 67 EE 01 00 		      	push 	xlr
016998 E7 ED 01 00 		      	push 	bp
01699C 7C 01 00 00 		      	ldi  	xlr,#ctype_64
0169A0 0A C0 E1 D3 
0169A4 02 BF 01 1A 		      	mov  	bp,sp
0169A8 C3 3D 30 00 		      	lcu  	r3,24[bp]
0169AC E7 E1 01 00 		      	push 	r3
0169B0 39 ED FF FF 		      	bsr  	isgraph
0169B4 14 EF 11 00 		      	addui	sp,sp,#8
0169B8 82 30 00 1A 		      	mov  	r3,r1
0169BC BD 11 08 00 		      	bne  	r3,ctype_67
0169C0 C3 3D 30 00 		      	lcu  	r3,24[bp]
0169C4 86 31 40 00 		      	cmp  	r3,r3,#32
0169C8 BD 11 06 00 		      	bne  	r3,ctype_65
                	ctype_67:
0169CC 0A 30 02 00 		      	ldi  	r3,#1
0169D0 3A 01 00 00 		      	bra  	ctype_66
                	ctype_65:
0169D4 0A 30 00 00 		      	ldi  	r3,#0
                	ctype_66:
0169D8 82 11 00 1A 		      	mov  	r1,r3
                	ctype_68:
0169DC 82 ED 01 1A 		      	mov  	sp,bp
0169E0 57 BF 11 00 		      	pop  	bp
0169E4 57 CF 11 00 		      	pop  	xlr
0169E8 57 FF 11 00 		      	pop  	lr
0169EC 37 FF 01 00 		      	rtl  	#0
                	ctype_64:
0169F0 C6 FD 11 00 		      	lw   	lr,8[bp]
0169F4 E3 FD 21 00 		      	sw   	lr,16[bp]
0169F8 BA FC FF FF 		      	bra  	ctype_68
                	endpublic
                	
                	public code iscntrl:
0169FC 15 EF 21 00 		      	subui	sp,sp,#16
016A00 E7 ED 01 00 		      	push 	bp
016A04 02 BF 01 1A 		      	mov  	bp,sp
016A08 C3 3D 30 00 		      	lcu  	r3,24[bp]
016A0C 86 41 0E 00 		      	cmp  	r4,r3,#7
016A10 3D 02 18 00 		      	beq  	r4,ctype_71
016A14 86 41 10 00 		      	cmp  	r4,r3,#8
016A18 3D 02 14 00 		      	beq  	r4,ctype_71
016A1C 86 41 14 00 		      	cmp  	r4,r3,#10
016A20 3D 02 10 00 		      	beq  	r4,ctype_71
016A24 86 41 1A 00 		      	cmp  	r4,r3,#13
016A28 3D 02 0C 00 		      	beq  	r4,ctype_71
016A2C 86 41 18 00 		      	cmp  	r4,r3,#12
016A30 3D 02 08 00 		      	beq  	r4,ctype_71
016A34 86 41 12 00 		      	cmp  	r4,r3,#9
016A38 3D 02 04 00 		      	beq  	r4,ctype_71
016A3C BA 02 00 00 		      	bra  	ctype_72
                	ctype_71:
016A40 0A 10 02 00 		      	ldi  	r1,#1
                	ctype_73:
016A44 82 ED 01 1A 		      	mov  	sp,bp
016A48 57 BF 11 00 		      	pop  	bp
016A4C 37 FF 21 00 		      	rtl  	#16
                	ctype_72:
016A50 0A 10 00 00 		      	ldi  	r1,#0
016A54 3A FE FF FF 		      	bra  	ctype_73
                	ctype_70:
016A58 BA FD FF FF 		      	bra  	ctype_73
                	endpublic
                	
                		code
016A5C 00 00 00 00 		align	1
                	
                	public code SetCurAttr:
016A60 15 EF 21 00 		      	subui	sp,sp,#16
016A64 E7 ED 01 00 		      	push 	bp
016A68 02 BF 01 1A 		      	mov  	bp,sp
016A6C C6 1D 30 00 		      	     	         lw    r1,24[bp]
016A70 39 29 F4 FF 	         bsr   SetCurrAttr
                	     
                	disassem_1:
016A74 82 ED 01 1A 		      	mov  	sp,bp
016A78 57 BF 11 00 		      	pop  	bp
016A7C 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code reverse_video:
016A80 E7 EF 01 00 		      	push 	lr
016A84 67 EE 01 00 		      	push 	xlr
016A88 E7 ED 01 00 		      	push 	bp
016A8C 7C 01 00 00 		      	ldi  	xlr,#disassem_2
016A90 0A C0 E9 D5 
016A94 02 BF 01 1A 		      	mov  	bp,sp
016A98 15 EF 11 00 		      	subui	sp,sp,#8
016A9C B9 21 F4 FF 		      	bsr  	GetCurrAttr
016AA0 82 30 00 1A 		      	mov  	r3,r1
016AA4 E2 3D F8 FF 		      	sh   	r3,-4[bp]
016AA8 C5 3D F8 FF 		      	lhu  	r3,-4[bp]
016AAC 8C 31 FE FF 		      	andi 	r3,r3,#-1
016AB0 82 31 14 78 		      	asri 	r3,r3,#10
016AB4 82 31 26 70 		      	asli 	r3,r3,#19
016AB8 C5 4D F8 FF 		      	lhu  	r4,-4[bp]
016ABC 0C 42 FE FF 		      	andi 	r4,r4,#-1
016AC0 02 42 26 78 		      	asri 	r4,r4,#19
016AC4 02 42 14 70 		      	asli 	r4,r4,#10
016AC8 82 31 08 1A 		      	or   	r3,r3,r4
016ACC E2 3D F8 FF 		      	sh   	r3,-4[bp]
016AD0 C5 3D F8 FF 		      	lhu  	r3,-4[bp]
016AD4 E7 E1 01 00 		      	push 	r3
016AD8 39 F1 FF FF 		      	bsr  	SetCurAttr
016ADC 14 EF 11 00 		      	addui	sp,sp,#8
                	disassem_3:
016AE0 82 ED 01 1A 		      	mov  	sp,bp
016AE4 57 BF 11 00 		      	pop  	bp
016AE8 57 CF 11 00 		      	pop  	xlr
016AEC 57 FF 11 00 		      	pop  	lr
016AF0 37 FF 01 00 		      	rtl  	#0
                	disassem_2:
016AF4 C6 FD 11 00 		      	lw   	lr,8[bp]
016AF8 E3 FD 21 00 		      	sw   	lr,16[bp]
016AFC BA FC FF FF 		      	bra  	disassem_3
                	endpublic
                	
                	public code DumpInsnBytes:
016B00 E7 EF 01 00 		      	push 	lr
016B04 67 EE 01 00 		      	push 	xlr
016B08 E7 ED 01 00 		      	push 	bp
016B0C 7C 01 00 00 		      	ldi  	xlr,#disassem_5
016B10 0A C0 F9 D6 
016B14 02 BF 01 1A 		      	mov  	bp,sp
016B18 C6 3D 40 00 		      	lw   	r3,32[bp]
016B1C 82 31 30 78 		      	asri 	r3,r3,#24
016B20 8C 31 FE 01 		      	and  	r3,r3,#255
016B24 E7 E1 01 00 		      	push 	r3
016B28 C6 3D 40 00 		      	lw   	r3,32[bp]
016B2C 82 31 20 78 		      	asri 	r3,r3,#16
016B30 8C 31 FE 01 		      	and  	r3,r3,#255
016B34 E7 E1 01 00 		      	push 	r3
016B38 C6 3D 40 00 		      	lw   	r3,32[bp]
016B3C 82 31 10 78 		      	asri 	r3,r3,#8
016B40 8C 31 FE 01 		      	and  	r3,r3,#255
016B44 E7 E1 01 00 		      	push 	r3
016B48 C6 3D 40 00 		      	lw   	r3,32[bp]
016B4C 8C 31 FE 01 		      	and  	r3,r3,#255
016B50 E7 E1 01 00 		      	push 	r3
016B54 E6 ED 31 00 		      	push 	24[bp]
016B58 FC 01 00 00 		      	push 	#disassem_4
016B5C 65 E0 A1 4C 
016B60 B9 DA FE FF 		      	bsr  	printf
016B64 14 EF 61 00 		      	addui	sp,sp,#48
                	disassem_6:
016B68 82 ED 01 1A 		      	mov  	sp,bp
016B6C 57 BF 11 00 		      	pop  	bp
016B70 57 CF 11 00 		      	pop  	xlr
016B74 57 FF 11 00 		      	pop  	lr
016B78 37 FF 01 00 		      	rtl  	#0
                	disassem_5:
016B7C C6 FD 11 00 		      	lw   	lr,8[bp]
016B80 E3 FD 21 00 		      	sw   	lr,16[bp]
016B84 BA FC FF FF 		      	bra  	disassem_6
                	endpublic
                	
                	DispRst:
016B88 E7 EF 01 00 		      	push 	lr
016B8C 67 EE 01 00 		      	push 	xlr
016B90 E7 ED 01 00 		      	push 	bp
016B94 7C 01 00 00 		      	ldi  	xlr,#disassem_9
016B98 0A C0 A9 D7 
016B9C 02 BF 01 1A 		      	mov  	bp,sp
016BA0 C6 3D 30 00 		      	lw   	r3,24[bp]
016BA4 82 31 18 78 		      	asri 	r3,r3,#12
016BA8 8C 31 3E 00 		      	and  	r3,r3,#31
016BAC E7 E1 01 00 		      	push 	r3
016BB0 FC 01 00 00 		      	push 	#disassem_8
016BB4 65 E0 91 4C 
016BB8 B9 CF FE FF 		      	bsr  	printf
016BBC 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_10:
016BC0 82 ED 01 1A 		      	mov  	sp,bp
016BC4 57 BF 11 00 		      	pop  	bp
016BC8 57 CF 11 00 		      	pop  	xlr
016BCC 57 FF 11 00 		      	pop  	lr
016BD0 37 FF 01 00 		      	rtl  	#0
                	disassem_9:
016BD4 C6 FD 11 00 		      	lw   	lr,8[bp]
016BD8 E3 FD 21 00 		      	sw   	lr,16[bp]
016BDC BA FC FF FF 		      	bra  	disassem_10
                	DispRstc:
016BE0 E7 EF 01 00 		      	push 	lr
016BE4 67 EE 01 00 		      	push 	xlr
016BE8 E7 ED 01 00 		      	push 	bp
016BEC 7C 01 00 00 		      	ldi  	xlr,#disassem_13
016BF0 0A C0 59 D8 
016BF4 02 BF 01 1A 		      	mov  	bp,sp
016BF8 C6 3D 30 00 		      	lw   	r3,24[bp]
016BFC 82 31 18 78 		      	asri 	r3,r3,#12
016C00 8C 31 3E 00 		      	and  	r3,r3,#31
016C04 E7 E1 01 00 		      	push 	r3
016C08 FC 01 00 00 		      	push 	#disassem_12
016C0C 65 E0 7D 4C 
016C10 B9 C4 FE FF 		      	bsr  	printf
016C14 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_14:
016C18 82 ED 01 1A 		      	mov  	sp,bp
016C1C 57 BF 11 00 		      	pop  	bp
016C20 57 CF 11 00 		      	pop  	xlr
016C24 57 FF 11 00 		      	pop  	lr
016C28 37 FF 01 00 		      	rtl  	#0
                	disassem_13:
016C2C C6 FD 11 00 		      	lw   	lr,8[bp]
016C30 E3 FD 21 00 		      	sw   	lr,16[bp]
016C34 BA FC FF FF 		      	bra  	disassem_14
                	DispRac:
016C38 E7 EF 01 00 		      	push 	lr
016C3C 67 EE 01 00 		      	push 	xlr
016C40 E7 ED 01 00 		      	push 	bp
016C44 7C 01 00 00 		      	ldi  	xlr,#disassem_17
016C48 0A C0 09 D9 
016C4C 02 BF 01 1A 		      	mov  	bp,sp
016C50 C6 3D 30 00 		      	lw   	r3,24[bp]
016C54 82 31 0E 78 		      	asri 	r3,r3,#7
016C58 8C 31 3E 00 		      	and  	r3,r3,#31
016C5C E7 E1 01 00 		      	push 	r3
016C60 FC 01 00 00 		      	push 	#disassem_16
016C64 65 E0 69 4C 
016C68 B9 B9 FE FF 		      	bsr  	printf
016C6C 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_18:
016C70 82 ED 01 1A 		      	mov  	sp,bp
016C74 57 BF 11 00 		      	pop  	bp
016C78 57 CF 11 00 		      	pop  	xlr
016C7C 57 FF 11 00 		      	pop  	lr
016C80 37 FF 01 00 		      	rtl  	#0
                	disassem_17:
016C84 C6 FD 11 00 		      	lw   	lr,8[bp]
016C88 E3 FD 21 00 		      	sw   	lr,16[bp]
016C8C BA FC FF FF 		      	bra  	disassem_18
                	DispRa:
016C90 E7 EF 01 00 		      	push 	lr
016C94 67 EE 01 00 		      	push 	xlr
016C98 E7 ED 01 00 		      	push 	bp
016C9C 7C 01 00 00 		      	ldi  	xlr,#disassem_21
016CA0 0A C0 B9 D9 
016CA4 02 BF 01 1A 		      	mov  	bp,sp
016CA8 C6 3D 30 00 		      	lw   	r3,24[bp]
016CAC 82 31 0E 78 		      	asri 	r3,r3,#7
016CB0 8C 31 3E 00 		      	and  	r3,r3,#31
016CB4 E7 E1 01 00 		      	push 	r3
016CB8 FC 01 00 00 		      	push 	#disassem_20
016CBC 65 E0 59 4C 
016CC0 B9 AE FE FF 		      	bsr  	printf
016CC4 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_22:
016CC8 82 ED 01 1A 		      	mov  	sp,bp
016CCC 57 BF 11 00 		      	pop  	bp
016CD0 57 CF 11 00 		      	pop  	xlr
016CD4 57 FF 11 00 		      	pop  	lr
016CD8 37 FF 01 00 		      	rtl  	#0
                	disassem_21:
016CDC C6 FD 11 00 		      	lw   	lr,8[bp]
016CE0 E3 FD 21 00 		      	sw   	lr,16[bp]
016CE4 BA FC FF FF 		      	bra  	disassem_22
                	DispRb:
016CE8 E7 EF 01 00 		      	push 	lr
016CEC 67 EE 01 00 		      	push 	xlr
016CF0 E7 ED 01 00 		      	push 	bp
016CF4 7C 01 00 00 		      	ldi  	xlr,#disassem_25
016CF8 0A C0 69 DA 
016CFC 02 BF 01 1A 		      	mov  	bp,sp
016D00 C6 3D 30 00 		      	lw   	r3,24[bp]
016D04 82 31 22 78 		      	asri 	r3,r3,#17
016D08 8C 31 3E 00 		      	and  	r3,r3,#31
016D0C E7 E1 01 00 		      	push 	r3
016D10 FC 01 00 00 		      	push 	#disassem_24
016D14 65 E0 49 4C 
016D18 B9 A3 FE FF 		      	bsr  	printf
016D1C 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_26:
016D20 82 ED 01 1A 		      	mov  	sp,bp
016D24 57 BF 11 00 		      	pop  	bp
016D28 57 CF 11 00 		      	pop  	xlr
016D2C 57 FF 11 00 		      	pop  	lr
016D30 37 FF 01 00 		      	rtl  	#0
                	disassem_25:
016D34 C6 FD 11 00 		      	lw   	lr,8[bp]
016D38 E3 FD 21 00 		      	sw   	lr,16[bp]
016D3C BA FC FF FF 		      	bra  	disassem_26
                	DispSpr:
016D40 E7 EF 01 00 		      	push 	lr
016D44 67 EE 01 00 		      	push 	xlr
016D48 E7 ED 01 00 		      	push 	bp
016D4C 7C 01 00 00 		      	ldi  	xlr,#disassem_43
016D50 0A C0 49 DE 
016D54 02 BF 01 1A 		      	mov  	bp,sp
016D58 15 EF 11 00 		      	subui	sp,sp,#8
016D5C C6 3D 30 00 		      	lw   	r3,24[bp]
016D60 82 31 22 78 		      	asri 	r3,r3,#17
016D64 8C 31 FE 01 		      	and  	r3,r3,#255
016D68 E3 3D F0 FF 		      	sw   	r3,-8[bp]
016D6C C6 3D F0 FF 		      	lw   	r3,-8[bp]
016D70 86 41 00 00 		      	cmp  	r4,r3,#0
016D74 3D 02 38 00 		      	beq  	r4,disassem_45
016D78 86 41 06 00 		      	cmp  	r4,r3,#3
016D7C 3D 02 3E 00 		      	beq  	r4,disassem_46
016D80 86 41 08 00 		      	cmp  	r4,r3,#4
016D84 3D 02 44 00 		      	beq  	r4,disassem_47
016D88 86 41 0C 00 		      	cmp  	r4,r3,#6
016D8C 3D 02 4A 00 		      	beq  	r4,disassem_48
016D90 86 41 0E 00 		      	cmp  	r4,r3,#7
016D94 3D 02 50 00 		      	beq  	r4,disassem_49
016D98 86 41 10 00 		      	cmp  	r4,r3,#8
016D9C 3D 02 56 00 		      	beq  	r4,disassem_50
016DA0 86 41 12 00 		      	cmp  	r4,r3,#9
016DA4 3D 02 5C 00 		      	beq  	r4,disassem_51
016DA8 86 41 14 00 		      	cmp  	r4,r3,#10
016DAC 3D 02 62 00 		      	beq  	r4,disassem_52
016DB0 86 41 64 00 		      	cmp  	r4,r3,#50
016DB4 3D 02 68 00 		      	beq  	r4,disassem_53
016DB8 86 41 66 00 		      	cmp  	r4,r3,#51
016DBC 3D 02 6E 00 		      	beq  	r4,disassem_54
016DC0 86 41 68 00 		      	cmp  	r4,r3,#52
016DC4 3D 02 74 00 		      	beq  	r4,disassem_55
016DC8 86 41 6A 00 		      	cmp  	r4,r3,#53
016DCC 3D 02 7A 00 		      	beq  	r4,disassem_56
016DD0 86 41 6C 00 		      	cmp  	r4,r3,#54
016DD4 3D 02 80 00 		      	beq  	r4,disassem_57
016DD8 86 41 6E 00 		      	cmp  	r4,r3,#55
016DDC 3D 02 86 00 		      	beq  	r4,disassem_58
016DE0 BA 23 00 00 		      	bra  	disassem_59
                	disassem_45:
016DE4 FC 01 00 00 		      	push 	#disassem_28
016DE8 65 E0 39 4C 
016DEC 39 89 FE FF 		      	bsr  	printf
016DF0 14 EF 11 00 		      	addui	sp,sp,#8
016DF4 BA 23 00 00 		      	bra  	disassem_44
                	disassem_46:
016DF8 FC 01 00 00 		      	push 	#disassem_29
016DFC 65 E0 29 4C 
016E00 B9 86 FE FF 		      	bsr  	printf
016E04 14 EF 11 00 		      	addui	sp,sp,#8
016E08 3A 21 00 00 		      	bra  	disassem_44
                	disassem_47:
016E0C FC 01 00 00 		      	push 	#disassem_30
016E10 65 E0 15 4C 
016E14 39 84 FE FF 		      	bsr  	printf
016E18 14 EF 11 00 		      	addui	sp,sp,#8
016E1C BA 1E 00 00 		      	bra  	disassem_44
                	disassem_48:
016E20 FC 01 00 00 		      	push 	#disassem_31
016E24 65 E0 05 4C 
016E28 B9 81 FE FF 		      	bsr  	printf
016E2C 14 EF 11 00 		      	addui	sp,sp,#8
016E30 3A 1C 00 00 		      	bra  	disassem_44
                	disassem_49:
016E34 FC 01 00 00 		      	push 	#disassem_32
016E38 65 E0 F5 4B 
016E3C 39 7F FE FF 		      	bsr  	printf
016E40 14 EF 11 00 		      	addui	sp,sp,#8
016E44 BA 19 00 00 		      	bra  	disassem_44
                	disassem_50:
016E48 FC 01 00 00 		      	push 	#disassem_33
016E4C 65 E0 E5 4B 
016E50 B9 7C FE FF 		      	bsr  	printf
016E54 14 EF 11 00 		      	addui	sp,sp,#8
016E58 3A 17 00 00 		      	bra  	disassem_44
                	disassem_51:
016E5C FC 01 00 00 		      	push 	#disassem_34
016E60 65 E0 D5 4B 
016E64 39 7A FE FF 		      	bsr  	printf
016E68 14 EF 11 00 		      	addui	sp,sp,#8
016E6C BA 14 00 00 		      	bra  	disassem_44
                	disassem_52:
016E70 FC 01 00 00 		      	push 	#disassem_35
016E74 65 E0 C5 4B 
016E78 B9 77 FE FF 		      	bsr  	printf
016E7C 14 EF 11 00 		      	addui	sp,sp,#8
016E80 3A 12 00 00 		      	bra  	disassem_44
                	disassem_53:
016E84 FC 01 00 00 		      	push 	#disassem_36
016E88 65 E0 AD 4B 
016E8C 39 75 FE FF 		      	bsr  	printf
016E90 14 EF 11 00 		      	addui	sp,sp,#8
016E94 BA 0F 00 00 		      	bra  	disassem_44
                	disassem_54:
016E98 FC 01 00 00 		      	push 	#disassem_37
016E9C 65 E0 95 4B 
016EA0 B9 72 FE FF 		      	bsr  	printf
016EA4 14 EF 11 00 		      	addui	sp,sp,#8
016EA8 3A 0D 00 00 		      	bra  	disassem_44
                	disassem_55:
016EAC FC 01 00 00 		      	push 	#disassem_38
016EB0 65 E0 7D 4B 
016EB4 39 70 FE FF 		      	bsr  	printf
016EB8 14 EF 11 00 		      	addui	sp,sp,#8
016EBC BA 0A 00 00 		      	bra  	disassem_44
                	disassem_56:
016EC0 FC 01 00 00 		      	push 	#disassem_39
016EC4 65 E0 65 4B 
016EC8 B9 6D FE FF 		      	bsr  	printf
016ECC 14 EF 11 00 		      	addui	sp,sp,#8
016ED0 3A 08 00 00 		      	bra  	disassem_44
                	disassem_57:
016ED4 FC 01 00 00 		      	push 	#disassem_40
016ED8 65 E0 49 4B 
016EDC 39 6B FE FF 		      	bsr  	printf
016EE0 14 EF 11 00 		      	addui	sp,sp,#8
016EE4 BA 05 00 00 		      	bra  	disassem_44
                	disassem_58:
016EE8 FC 01 00 00 		      	push 	#disassem_41
016EEC 65 E0 2D 4B 
016EF0 B9 68 FE FF 		      	bsr  	printf
016EF4 14 EF 11 00 		      	addui	sp,sp,#8
016EF8 3A 03 00 00 		      	bra  	disassem_44
                	disassem_59:
016EFC E6 ED F1 FF 		      	push 	-8[bp]
016F00 FC 01 00 00 		      	push 	#disassem_42
016F04 65 E0 15 4B 
016F08 B9 65 FE FF 		      	bsr  	printf
016F0C 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_44:
                	disassem_60:
016F10 82 ED 01 1A 		      	mov  	sp,bp
016F14 57 BF 11 00 		      	pop  	bp
016F18 57 CF 11 00 		      	pop  	xlr
016F1C 57 FF 11 00 		      	pop  	lr
016F20 37 FF 01 00 		      	rtl  	#0
                	disassem_43:
016F24 C6 FD 11 00 		      	lw   	lr,8[bp]
016F28 E3 FD 21 00 		      	sw   	lr,16[bp]
016F2C BA FC FF FF 		      	bra  	disassem_60
                	DispMemAddress:
016F30 E7 EF 01 00 		      	push 	lr
016F34 67 EE 01 00 		      	push 	xlr
016F38 E7 ED 01 00 		      	push 	bp
016F3C 7C 01 00 00 		      	ldi  	xlr,#disassem_66
016F40 0A C0 09 E0 
016F44 02 BF 01 1A 		      	mov  	bp,sp
016F48 15 EF 11 00 		      	subui	sp,sp,#8
016F4C C6 3D 50 00 		      	lw   	r3,40[bp]
016F50 E2 3D F8 FF 		      	sh   	r3,-4[bp]
016F54 C6 3D 30 00 		      	lw   	r3,24[bp]
016F58 BD 01 18 00 		      	beq  	r3,disassem_67
016F5C C6 3D 40 00 		      	lw   	r3,32[bp]
016F60 82 31 1E 70 		      	asli 	r3,r3,#15
016F64 C6 4D 50 00 		      	lw   	r4,40[bp]
016F68 02 42 22 78 		      	asri 	r4,r4,#17
016F6C 82 31 08 1A 		      	or   	r3,r3,r4
016F70 E7 E1 01 00 		      	push 	r3
016F74 FC 01 00 00 		      	push 	#disassem_62
016F78 65 E0 05 4B 
016F7C 39 57 FE FF 		      	bsr  	printf
016F80 14 EF 21 00 		      	addui	sp,sp,#16
016F84 3A 05 00 00 		      	bra  	disassem_68
                	disassem_67:
016F88 C4 3D F8 FF 		      	lh   	r3,-4[bp]
016F8C 82 31 00 24 		      	sxh  	r3,r3
016F90 82 31 00 24 		      	sxh  	r3,r3
016F94 82 31 22 78 		      	asri 	r3,r3,#17
016F98 E7 E1 01 00 		      	push 	r3
016F9C FC 01 00 00 		      	push 	#disassem_63
016FA0 65 E0 F5 4A 
016FA4 39 52 FE FF 		      	bsr  	printf
016FA8 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_68:
016FAC C6 3D 50 00 		      	lw   	r3,40[bp]
016FB0 82 31 0E 78 		      	asri 	r3,r3,#7
016FB4 8C 31 3E 00 		      	and  	r3,r3,#31
016FB8 BD 01 14 00 		      	beq  	r3,disassem_69
016FBC C6 3D 50 00 		      	lw   	r3,40[bp]
016FC0 82 31 0E 78 		      	asri 	r3,r3,#7
016FC4 8C 31 3E 00 		      	and  	r3,r3,#31
016FC8 E7 E1 01 00 		      	push 	r3
016FCC FC 01 00 00 		      	push 	#disassem_64
016FD0 65 E0 D5 4A 
016FD4 39 4C FE FF 		      	bsr  	printf
016FD8 14 EF 21 00 		      	addui	sp,sp,#16
016FDC BA 02 00 00 		      	bra  	disassem_70
                	disassem_69:
016FE0 FC 01 00 00 		      	push 	#disassem_65
016FE4 65 E0 C9 4A 
016FE8 B9 49 FE FF 		      	bsr  	printf
016FEC 14 EF 11 00 		      	addui	sp,sp,#8
                	disassem_70:
                	disassem_71:
016FF0 82 ED 01 1A 		      	mov  	sp,bp
016FF4 57 BF 11 00 		      	pop  	bp
016FF8 57 CF 11 00 		      	pop  	xlr
016FFC 57 FF 11 00 		      	pop  	lr
017000 37 FF 01 00 		      	rtl  	#0
                	disassem_66:
017004 C6 FD 11 00 		      	lw   	lr,8[bp]
017008 E3 FD 21 00 		      	sw   	lr,16[bp]
01700C BA FC FF FF 		      	bra  	disassem_71
                	PrintSc:
017010 E7 EF 01 00 		      	push 	lr
017014 67 EE 01 00 		      	push 	xlr
017018 E7 ED 01 00 		      	push 	bp
01701C 7C 01 00 00 		      	ldi  	xlr,#disassem_75
017020 0A C0 E1 E0 
017024 02 BF 01 1A 		      	mov  	bp,sp
017028 C6 3D 30 00 		      	lw   	r3,24[bp]
01702C 86 31 02 00 		      	cmp  	r3,r3,#1
017030 BD 51 0E 00 		      	ble  	r3,disassem_76
017034 E6 ED 31 00 		      	push 	24[bp]
017038 FC 01 00 00 		      	push 	#disassem_73
01703C 65 E0 AD 4A 
017040 B9 3E FE FF 		      	bsr  	printf
017044 14 EF 21 00 		      	addui	sp,sp,#16
017048 BA 02 00 00 		      	bra  	disassem_77
                	disassem_76:
01704C FC 01 00 00 		      	push 	#disassem_74
017050 65 E0 9D 4A 
017054 39 3C FE FF 		      	bsr  	printf
017058 14 EF 11 00 		      	addui	sp,sp,#8
                	disassem_77:
                	disassem_78:
01705C 82 ED 01 1A 		      	mov  	sp,bp
017060 57 BF 11 00 		      	pop  	bp
017064 57 CF 11 00 		      	pop  	xlr
017068 57 FF 11 00 		      	pop  	lr
01706C 37 FF 01 00 		      	rtl  	#0
                	disassem_75:
017070 C6 FD 11 00 		      	lw   	lr,8[bp]
017074 E3 FD 21 00 		      	sw   	lr,16[bp]
017078 BA FC FF FF 		      	bra  	disassem_78
                	DispBrk:
01707C E7 EF 01 00 		      	push 	lr
017080 67 EE 01 00 		      	push 	xlr
017084 E7 ED 01 00 		      	push 	bp
017088 7C 01 00 00 		      	ldi  	xlr,#disassem_84
01708C 0A C0 99 E2 
017090 02 BF 01 1A 		      	mov  	bp,sp
017094 15 EF 21 00 		      	subui	sp,sp,#16
017098 C5 3D 30 00 		      	lhu  	r3,24[bp]
01709C 8C 31 FE FF 		      	andi 	r3,r3,#-1
0170A0 82 31 3C 78 		      	asri 	r3,r3,#30
0170A4 8C 31 06 00 		      	and  	r3,r3,#3
0170A8 E3 3D F0 FF 		      	sw   	r3,-8[bp]
0170AC C5 3D 30 00 		      	lhu  	r3,24[bp]
0170B0 8C 31 FE FF 		      	andi 	r3,r3,#-1
0170B4 82 31 22 78 		      	asri 	r3,r3,#17
0170B8 8C 31 FE 03 		      	and  	r3,r3,#511
0170BC E3 3D E0 FF 		      	sw   	r3,-16[bp]
0170C0 C6 3D F0 FF 		      	lw   	r3,-8[bp]
0170C4 86 41 00 00 		      	cmp  	r4,r3,#0
0170C8 3D 02 10 00 		      	beq  	r4,disassem_86
0170CC 86 41 02 00 		      	cmp  	r4,r3,#1
0170D0 3D 02 16 00 		      	beq  	r4,disassem_87
0170D4 86 41 04 00 		      	cmp  	r4,r3,#2
0170D8 3D 02 1C 00 		      	beq  	r4,disassem_88
0170DC 86 41 06 00 		      	cmp  	r4,r3,#3
0170E0 3D 02 22 00 		      	beq  	r4,disassem_89
0170E4 BA 0A 00 00 		      	bra  	disassem_85
                	disassem_86:
0170E8 E6 ED E1 FF 		      	push 	-16[bp]
0170EC FC 01 00 00 		      	push 	#disassem_80
0170F0 65 E0 6D 4A 
0170F4 39 28 FE FF 		      	bsr  	printf
0170F8 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_87:
0170FC E6 ED E1 FF 		      	push 	-16[bp]
017100 FC 01 00 00 		      	push 	#disassem_81
017104 65 E0 3D 4A 
017108 B9 25 FE FF 		      	bsr  	printf
01710C 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_88:
017110 E6 ED E1 FF 		      	push 	-16[bp]
017114 FC 01 00 00 		      	push 	#disassem_82
017118 65 E0 0D 4A 
01711C 39 23 FE FF 		      	bsr  	printf
017120 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_89:
017124 E6 ED E1 FF 		      	push 	-16[bp]
017128 FC 01 00 00 		      	push 	#disassem_83
01712C 65 E0 DD 49 
017130 B9 20 FE FF 		      	bsr  	printf
017134 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_85:
                	disassem_90:
017138 82 ED 01 1A 		      	mov  	sp,bp
01713C 57 BF 11 00 		      	pop  	bp
017140 57 CF 11 00 		      	pop  	xlr
017144 57 FF 11 00 		      	pop  	lr
017148 37 FF 01 00 		      	rtl  	#0
                	disassem_84:
01714C C6 FD 11 00 		      	lw   	lr,8[bp]
017150 E3 FD 21 00 		      	sw   	lr,16[bp]
017154 BA FC FF FF 		      	bra  	disassem_90
                	DispIndexedAddr:
017158 E7 EF 01 00 		      	push 	lr
01715C 67 EE 01 00 		      	push 	xlr
017160 E7 ED 01 00 		      	push 	bp
017164 7C 01 00 00 		      	ldi  	xlr,#disassem_97
017168 0A C0 69 E5 
01716C 02 BF 01 1A 		      	mov  	bp,sp
017170 15 EF 51 00 		      	subui	sp,sp,#40
017174 C5 3D 50 00 		      	lhu  	r3,40[bp]
017178 8C 31 FE FF 		      	andi 	r3,r3,#-1
01717C 82 31 30 78 		      	asri 	r3,r3,#24
017180 E3 3D F0 FF 		      	sw   	r3,-8[bp]
017184 C5 3D 50 00 		      	lhu  	r3,40[bp]
017188 8C 31 FE FF 		      	andi 	r3,r3,#-1
01718C 82 31 0E 78 		      	asri 	r3,r3,#7
017190 8C 31 3E 00 		      	and  	r3,r3,#31
017194 E3 3D E0 FF 		      	sw   	r3,-16[bp]
017198 C5 3D 50 00 		      	lhu  	r3,40[bp]
01719C 8C 31 FE FF 		      	andi 	r3,r3,#-1
0171A0 82 31 18 78 		      	asri 	r3,r3,#12
0171A4 8C 31 3E 00 		      	and  	r3,r3,#31
0171A8 E3 3D C0 FF 		      	sw   	r3,-32[bp]
0171AC C5 3D 50 00 		      	lhu  	r3,40[bp]
0171B0 8C 31 FE FF 		      	andi 	r3,r3,#-1
0171B4 82 31 22 78 		      	asri 	r3,r3,#17
0171B8 8C 31 3E 00 		      	and  	r3,r3,#31
0171BC E3 3D D0 FF 		      	sw   	r3,-24[bp]
0171C0 C5 3D 50 00 		      	lhu  	r3,40[bp]
0171C4 8C 31 FE FF 		      	andi 	r3,r3,#-1
0171C8 82 31 2C 78 		      	asri 	r3,r3,#22
0171CC 8C 31 06 00 		      	and  	r3,r3,#3
0171D0 E3 3D B0 FF 		      	sw   	r3,-40[bp]
0171D4 0A 30 02 00 		      	ldi  	r3,#1
0171D8 C6 4D B0 FF 		      	lw   	r4,-40[bp]
0171DC 82 31 08 60 		      	asl  	r3,r3,r4
0171E0 E3 3D B0 FF 		      	sw   	r3,-40[bp]
0171E4 C5 3D 50 00 		      	lhu  	r3,40[bp]
0171E8 E7 E1 01 00 		      	push 	r3
0171EC E6 ED 31 00 		      	push 	24[bp]
0171F0 39 22 FF FF 		      	bsr  	DumpInsnBytes
0171F4 14 EF 21 00 		      	addui	sp,sp,#16
0171F8 E6 ED C1 FF 		      	push 	-32[bp]
0171FC E6 ED 41 00 		      	push 	32[bp]
017200 FC 01 00 00 		      	push 	#disassem_92
017204 65 E0 BD 49 
017208 B9 05 FE FF 		      	bsr  	printf
01720C 14 EF 31 00 		      	addui	sp,sp,#24
017210 C6 3D F0 FF 		      	lw   	r3,-8[bp]
017214 BD 01 0C 00 		      	beq  	r3,disassem_98
017218 E6 ED F1 FF 		      	push 	-8[bp]
01721C FC 01 00 00 		      	push 	#disassem_93
017220 65 E0 AD 49 
017224 39 02 FE FF 		      	bsr  	printf
017228 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_98:
01722C C6 3D E0 FF 		      	lw   	r3,-16[bp]
017230 BD 01 16 00 		      	beq  	r3,disassem_100
017234 C6 3D D0 FF 		      	lw   	r3,-24[bp]
017238 BD 01 12 00 		      	beq  	r3,disassem_100
01723C FC 01 00 00 		      	push 	#disassem_94
017240 65 E0 89 49 
017244 39 FE FD FF 		      	bsr  	printf
017248 14 EF 11 00 		      	addui	sp,sp,#8
01724C E6 ED B1 FF 		      	push 	-40[bp]
017250 39 B8 FF FF 		      	bsr  	PrintSc
017254 14 EF 11 00 		      	addui	sp,sp,#8
017258 3A 09 00 00 		      	bra  	disassem_101
                	disassem_100:
01725C C6 3D E0 FF 		      	lw   	r3,-16[bp]
017260 BD 11 14 00 		      	bne  	r3,disassem_102
017264 E6 ED D1 FF 		      	push 	-24[bp]
017268 FC 01 00 00 		      	push 	#disassem_95
01726C 65 E0 75 49 
017270 B9 F8 FD FF 		      	bsr  	printf
017274 14 EF 21 00 		      	addui	sp,sp,#16
017278 E6 ED B1 FF 		      	push 	-40[bp]
01727C B9 B2 FF FF 		      	bsr  	PrintSc
017280 14 EF 11 00 		      	addui	sp,sp,#8
017284 BA 03 00 00 		      	bra  	disassem_103
                	disassem_102:
017288 C6 3D D0 FF 		      	lw   	r3,-24[bp]
01728C BD 11 0A 00 		      	bne  	r3,disassem_104
017290 FC 01 00 00 		      	push 	#disassem_96
017294 65 E0 55 49 
017298 B9 F3 FD FF 		      	bsr  	printf
01729C 14 EF 11 00 		      	addui	sp,sp,#8
                	disassem_104:
                	disassem_103:
                	disassem_101:
                	disassem_106:
0172A0 82 ED 01 1A 		      	mov  	sp,bp
0172A4 57 BF 11 00 		      	pop  	bp
0172A8 57 CF 11 00 		      	pop  	xlr
0172AC 57 FF 11 00 		      	pop  	lr
0172B0 37 FF 01 00 		      	rtl  	#0
                	disassem_97:
0172B4 C6 FD 11 00 		      	lw   	lr,8[bp]
0172B8 E3 FD 21 00 		      	sw   	lr,16[bp]
0172BC BA FC FF FF 		      	bra  	disassem_106
                	DispLS:
0172C0 E7 EF 01 00 		      	push 	lr
0172C4 67 EE 01 00 		      	push 	xlr
0172C8 E7 ED 01 00 		      	push 	bp
0172CC 7C 01 00 00 		      	ldi  	xlr,#disassem_109
0172D0 0A C0 61 E6 
0172D4 02 BF 01 1A 		      	mov  	bp,sp
0172D8 E6 ED 71 00 		      	push 	56[bp]
0172DC E6 ED 31 00 		      	push 	24[bp]
0172E0 39 04 FF FF 		      	bsr  	DumpInsnBytes
0172E4 14 EF 21 00 		      	addui	sp,sp,#16
0172E8 E6 ED 41 00 		      	push 	32[bp]
0172EC FC 01 00 00 		      	push 	#disassem_108
0172F0 65 E0 45 49 
0172F4 39 E8 FD FF 		      	bsr  	printf
0172F8 14 EF 21 00 		      	addui	sp,sp,#16
0172FC E6 ED 71 00 		      	push 	56[bp]
017300 39 1C FF FF 		      	bsr  	DispRstc
017304 14 EF 11 00 		      	addui	sp,sp,#8
017308 E6 ED 71 00 		      	push 	56[bp]
01730C E6 ED 61 00 		      	push 	48[bp]
017310 E6 ED 51 00 		      	push 	40[bp]
017314 B9 83 FF FF 		      	bsr  	DispMemAddress
017318 14 EF 31 00 		      	addui	sp,sp,#24
                	disassem_110:
01731C 82 ED 01 1A 		      	mov  	sp,bp
017320 57 BF 11 00 		      	pop  	bp
017324 57 CF 11 00 		      	pop  	xlr
017328 57 FF 11 00 		      	pop  	lr
01732C 37 FF 01 00 		      	rtl  	#0
                	disassem_109:
017330 C6 FD 11 00 		      	lw   	lr,8[bp]
017334 E3 FD 21 00 		      	sw   	lr,16[bp]
017338 BA FC FF FF 		      	bra  	disassem_110
                	DispRI:
01733C E7 EF 01 00 		      	push 	lr
017340 67 EE 01 00 		      	push 	xlr
017344 E7 ED 01 00 		      	push 	bp
017348 7C 01 00 00 		      	ldi  	xlr,#disassem_115
01734C 0A C0 11 E8 
017350 02 BF 01 1A 		      	mov  	bp,sp
017354 15 EF 11 00 		      	subui	sp,sp,#8
017358 C6 3D 70 00 		      	lw   	r3,56[bp]
01735C E2 3D F8 FF 		      	sh   	r3,-4[bp]
017360 E6 ED 71 00 		      	push 	56[bp]
017364 E6 ED 31 00 		      	push 	24[bp]
017368 39 F3 FE FF 		      	bsr  	DumpInsnBytes
01736C 14 EF 21 00 		      	addui	sp,sp,#16
017370 E6 ED 41 00 		      	push 	32[bp]
017374 FC 01 00 00 		      	push 	#disassem_112
017378 65 E0 35 49 
01737C 39 D7 FD FF 		      	bsr  	printf
017380 14 EF 21 00 		      	addui	sp,sp,#16
017384 E6 ED 71 00 		      	push 	56[bp]
017388 39 0B FF FF 		      	bsr  	DispRstc
01738C 14 EF 11 00 		      	addui	sp,sp,#8
017390 E6 ED 71 00 		      	push 	56[bp]
017394 B9 14 FF FF 		      	bsr  	DispRac
017398 14 EF 11 00 		      	addui	sp,sp,#8
01739C C6 3D 50 00 		      	lw   	r3,40[bp]
0173A0 BD 01 18 00 		      	beq  	r3,disassem_116
0173A4 C6 3D 60 00 		      	lw   	r3,48[bp]
0173A8 82 31 1E 70 		      	asli 	r3,r3,#15
0173AC C6 4D 70 00 		      	lw   	r4,56[bp]
0173B0 02 42 22 78 		      	asri 	r4,r4,#17
0173B4 82 31 08 1A 		      	or   	r3,r3,r4
0173B8 E7 E1 01 00 		      	push 	r3
0173BC FC 01 00 00 		      	push 	#disassem_113
0173C0 65 E0 19 49 
0173C4 39 CE FD FF 		      	bsr  	printf
0173C8 14 EF 21 00 		      	addui	sp,sp,#16
0173CC 3A 05 00 00 		      	bra  	disassem_117
                	disassem_116:
0173D0 C4 3D F8 FF 		      	lh   	r3,-4[bp]
0173D4 82 31 00 24 		      	sxh  	r3,r3
0173D8 82 31 00 24 		      	sxh  	r3,r3
0173DC 82 31 22 78 		      	asri 	r3,r3,#17
0173E0 E7 E1 01 00 		      	push 	r3
0173E4 FC 01 00 00 		      	push 	#disassem_114
0173E8 65 E0 FD 48 
0173EC 39 C9 FD FF 		      	bsr  	printf
0173F0 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_117:
                	disassem_118:
0173F4 82 ED 01 1A 		      	mov  	sp,bp
0173F8 57 BF 11 00 		      	pop  	bp
0173FC 57 CF 11 00 		      	pop  	xlr
017400 57 FF 11 00 		      	pop  	lr
017404 37 FF 01 00 		      	rtl  	#0
                	disassem_115:
017408 C6 FD 11 00 		      	lw   	lr,8[bp]
01740C E3 FD 21 00 		      	sw   	lr,16[bp]
017410 BA FC FF FF 		      	bra  	disassem_118
                	public code DispBcc:
017414 E7 EF 01 00 		      	push 	lr
017418 67 EE 01 00 		      	push 	xlr
01741C E7 ED 01 00 		      	push 	bp
017420 7C 01 00 00 		      	ldi  	xlr,#disassem_121
017424 0A C0 99 E9 
017428 02 BF 01 1A 		      	mov  	bp,sp
01742C 15 EF 21 00 		      	subui	sp,sp,#16
017430 C6 3D 50 00 		      	lw   	r3,40[bp]
017434 82 31 22 78 		      	asri 	r3,r3,#17
017438 7C 00 00 00 		      	and  	r3,r3,#32767
01743C 8C 31 FE FF 
017440 82 31 04 70 		      	asli 	r3,r3,#2
017444 E3 3D E0 FF 		      	sw   	r3,-16[bp]
017448 C6 3D 50 00 		      	lw   	r3,40[bp]
01744C 7C 00 80 FF 		      	and  	r3,r3,#-2147483648
017450 8C 31 00 00 
017454 BD 01 0A 00 		      	beq  	r3,disassem_122
017458 C6 3D E0 FF 		      	lw   	r3,-16[bp]
01745C 7C FF FF FF 		      	ori  	r3,r3,#-65536
017460 8D 31 00 00 
017464 E3 3D E0 FF 		      	sw   	r3,-16[bp]
                	disassem_122:
017468 E6 ED 51 00 		      	push 	40[bp]
01746C E6 ED 31 00 		      	push 	24[bp]
017470 39 D2 FE FF 		      	bsr  	DumpInsnBytes
017474 14 EF 21 00 		      	addui	sp,sp,#16
017478 E6 ED 41 00 		      	push 	32[bp]
01747C FC 01 00 00 		      	push 	#disassem_119
017480 65 E0 ED 48 
017484 39 B6 FD FF 		      	bsr  	printf
017488 14 EF 21 00 		      	addui	sp,sp,#16
01748C E6 ED 51 00 		      	push 	40[bp]
017490 39 F5 FE FF 		      	bsr  	DispRac
017494 14 EF 11 00 		      	addui	sp,sp,#8
017498 C6 3D 30 00 		      	lw   	r3,24[bp]
01749C C6 4D E0 FF 		      	lw   	r4,-16[bp]
0174A0 82 31 08 28 		      	addu 	r3,r3,r4
0174A4 E7 E1 01 00 		      	push 	r3
0174A8 FC 01 00 00 		      	push 	#disassem_120
0174AC 65 E0 D1 48 
0174B0 B9 B0 FD FF 		      	bsr  	printf
0174B4 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_124:
0174B8 82 ED 01 1A 		      	mov  	sp,bp
0174BC 57 BF 11 00 		      	pop  	bp
0174C0 57 CF 11 00 		      	pop  	xlr
0174C4 57 FF 11 00 		      	pop  	lr
0174C8 37 FF 01 00 		      	rtl  	#0
                	disassem_121:
0174CC C6 FD 11 00 		      	lw   	lr,8[bp]
0174D0 E3 FD 21 00 		      	sw   	lr,16[bp]
0174D4 BA FC FF FF 		      	bra  	disassem_124
                	endpublic
                	
                	public code DispRR:
0174D8 E7 EF 01 00 		      	push 	lr
0174DC 67 EE 01 00 		      	push 	xlr
0174E0 E7 ED 01 00 		      	push 	bp
0174E4 7C 01 00 00 		      	ldi  	xlr,#disassem_129
0174E8 0A C0 D9 EB 
0174EC 02 BF 01 1A 		      	mov  	bp,sp
0174F0 15 EF 21 00 		      	subui	sp,sp,#16
0174F4 C5 3D 50 00 		      	lhu  	r3,40[bp]
0174F8 8C 31 FE FF 		      	andi 	r3,r3,#-1
0174FC 82 31 32 78 		      	asri 	r3,r3,#25
017500 E3 3D F0 FF 		      	sw   	r3,-8[bp]
017504 C5 3D 50 00 		      	lhu  	r3,40[bp]
017508 8C 31 FE FF 		      	andi 	r3,r3,#-1
01750C 82 31 22 78 		      	asri 	r3,r3,#17
017510 8C 31 3E 00 		      	and  	r3,r3,#31
017514 E3 3D E0 FF 		      	sw   	r3,-16[bp]
017518 C5 3D 50 00 		      	lhu  	r3,40[bp]
01751C E7 E1 01 00 		      	push 	r3
017520 E6 ED 31 00 		      	push 	24[bp]
017524 B9 BB FE FF 		      	bsr  	DumpInsnBytes
017528 14 EF 21 00 		      	addui	sp,sp,#16
01752C C6 3D F0 FF 		      	lw   	r3,-8[bp]
017530 86 31 1C 00 		      	cmp  	r3,r3,#14
017534 BD 11 30 00 		      	bne  	r3,disassem_130
017538 C6 3D E0 FF 		      	lw   	r3,-16[bp]
01753C BD 11 2C 00 		      	bne  	r3,disassem_130
017540 FC 01 00 00 		      	push 	#disassem_125
017544 65 E0 B5 48 
017548 B9 9D FD FF 		      	bsr  	printf
01754C 14 EF 11 00 		      	addui	sp,sp,#8
017550 C5 3D 50 00 		      	lhu  	r3,40[bp]
017554 E7 E1 01 00 		      	push 	r3
017558 39 D1 FE FF 		      	bsr  	DispRstc
01755C 14 EF 11 00 		      	addui	sp,sp,#8
017560 C5 3D 50 00 		      	lhu  	r3,40[bp]
017564 E7 E1 01 00 		      	push 	r3
017568 39 E5 FE FF 		      	bsr  	DispRa
01756C 14 EF 11 00 		      	addui	sp,sp,#8
017570 FC 01 00 00 		      	push 	#disassem_126
017574 65 E0 A9 48 
017578 B9 97 FD FF 		      	bsr  	printf
01757C 14 EF 11 00 		      	addui	sp,sp,#8
                	disassem_132:
017580 82 ED 01 1A 		      	mov  	sp,bp
017584 57 BF 11 00 		      	pop  	bp
017588 57 CF 11 00 		      	pop  	xlr
01758C 57 FF 11 00 		      	pop  	lr
017590 37 FF 01 00 		      	rtl  	#0
                	disassem_130:
017594 E6 ED 41 00 		      	push 	32[bp]
017598 FC 01 00 00 		      	push 	#disassem_127
01759C 65 E0 99 48 
0175A0 B9 92 FD FF 		      	bsr  	printf
0175A4 14 EF 21 00 		      	addui	sp,sp,#16
0175A8 C5 3D 50 00 		      	lhu  	r3,40[bp]
0175AC E7 E1 01 00 		      	push 	r3
0175B0 39 C6 FE FF 		      	bsr  	DispRstc
0175B4 14 EF 11 00 		      	addui	sp,sp,#8
0175B8 C5 3D 50 00 		      	lhu  	r3,40[bp]
0175BC E7 E1 01 00 		      	push 	r3
0175C0 39 CF FE FF 		      	bsr  	DispRac
0175C4 14 EF 11 00 		      	addui	sp,sp,#8
0175C8 C5 3D 50 00 		      	lhu  	r3,40[bp]
0175CC E7 E1 01 00 		      	push 	r3
0175D0 39 E3 FE FF 		      	bsr  	DispRb
0175D4 14 EF 11 00 		      	addui	sp,sp,#8
0175D8 FC 01 00 00 		      	push 	#disassem_128
0175DC 65 E0 8D 48 
0175E0 B9 8A FD FF 		      	bsr  	printf
0175E4 14 EF 11 00 		      	addui	sp,sp,#8
0175E8 3A F3 FF FF 		      	bra  	disassem_132
                	disassem_129:
0175EC C6 FD 11 00 		      	lw   	lr,8[bp]
0175F0 E3 FD 21 00 		      	sw   	lr,16[bp]
0175F4 BA F1 FF FF 		      	bra  	disassem_132
                	endpublic
                	
                	public code disassem:
0175F8 E7 EF 01 00 		      	push 	lr
0175FC 67 EE 01 00 		      	push 	xlr
017600 E7 ED 01 00 		      	push 	bp
017604 FC 01 00 00 		      	ldi  	xlr,#disassem_218
017608 0A C0 51 0E 
01760C 02 BF 01 1A 		      	mov  	bp,sp
017610 15 EF C1 00 		      	subui	sp,sp,#96
017614 E7 E5 01 00 		      	push 	r11
017618 67 E6 01 00 		      	push 	r12
01761C C6 BD 30 00 		      	lw   	r11,24[bp]
017620 0A C0 00 00 		      	ldi  	r12,#0
017624 E3 0D B0 FF 		      	sw   	r0,-40[bp]
017628 E3 0D A0 FF 		      	sw   	r0,-48[bp]
01762C 0A 30 02 00 		      	ldi  	r3,#1
017630 E3 3D 50 FF 		      	sw   	r3,-88[bp]
017634 E3 0D 40 FF 		      	sw   	r0,-96[bp]
                	disassem_219:
017638 C6 35 00 00 		      	lw   	r3,[r11]
01763C C6 4D 40 00 		      	lw   	r4,32[bp]
017640 82 31 08 0C 		      	cmp  	r3,r3,r4
017644 BD 11 08 00 		      	bne  	r3,disassem_221
017648 39 87 FE FF 		      	bsr  	reverse_video
01764C 0A 30 02 00 		      	ldi  	r3,#1
017650 E3 3D 40 FF 		      	sw   	r3,-96[bp]
                	disassem_221:
017654 C6 35 00 00 		      	lw   	r3,[r11]
017658 82 31 04 78 		      	asri 	r3,r3,#2
01765C E3 3D 70 FF 		      	sw   	r3,-72[bp]
017660 C6 3D 70 FF 		      	lw   	r3,-72[bp]
017664 82 31 04 70 		      	asli 	r3,r3,#2
017668 4D 46 06 00 		      	lhu  	r4,0[r12+r3]
01766C E2 4D E8 FF 		      	sh   	r4,-12[bp]
017670 C4 3D E8 FF 		      	lh   	r3,-12[bp]
017674 E2 3D 68 FF 		      	sh   	r3,-76[bp]
017678 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
01767C 8C 31 FE 00 		      	and  	r3,r3,#127
017680 E3 3D D0 FF 		      	sw   	r3,-24[bp]
017684 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017688 8C 31 FE FF 		      	andi 	r3,r3,#-1
01768C 82 31 32 78 		      	asri 	r3,r3,#25
017690 8C 31 FE 00 		      	and  	r3,r3,#127
017694 E3 3D C0 FF 		      	sw   	r3,-32[bp]
017698 C6 3D D0 FF 		      	lw   	r3,-24[bp]
01769C 86 41 F8 00 		      	cmp  	r4,r3,#124
0176A0 3D 02 CC 00 		      	beq  	r4,disassem_224
0176A4 86 41 04 00 		      	cmp  	r4,r3,#2
0176A8 3D 02 10 01 		      	beq  	r4,disassem_225
0176AC 86 41 08 00 		      	cmp  	r4,r3,#4
0176B0 3D 02 32 03 		      	beq  	r4,disassem_226
0176B4 86 41 28 00 		      	cmp  	r4,r3,#20
0176B8 3D 02 42 03 		      	beq  	r4,disassem_227
0176BC 86 41 0A 00 		      	cmp  	r4,r3,#5
0176C0 3D 02 52 03 		      	beq  	r4,disassem_228
0176C4 86 41 2A 00 		      	cmp  	r4,r3,#21
0176C8 3D 02 62 03 		      	beq  	r4,disassem_229
0176CC 86 41 0C 00 		      	cmp  	r4,r3,#6
0176D0 3D 02 72 03 		      	beq  	r4,disassem_230
0176D4 86 41 2C 00 		      	cmp  	r4,r3,#22
0176D8 3D 02 82 03 		      	beq  	r4,disassem_231
0176DC 86 41 0E 00 		      	cmp  	r4,r3,#7
0176E0 3D 02 92 03 		      	beq  	r4,disassem_232
0176E4 86 41 2E 00 		      	cmp  	r4,r3,#23
0176E8 3D 02 A2 03 		      	beq  	r4,disassem_233
0176EC 86 41 10 00 		      	cmp  	r4,r3,#8
0176F0 3D 02 B2 03 		      	beq  	r4,disassem_234
0176F4 86 41 30 00 		      	cmp  	r4,r3,#24
0176F8 3D 02 C2 03 		      	beq  	r4,disassem_235
0176FC 86 41 18 00 		      	cmp  	r4,r3,#12
017700 3D 02 D2 03 		      	beq  	r4,disassem_236
017704 86 41 1A 00 		      	cmp  	r4,r3,#13
017708 3D 02 E2 03 		      	beq  	r4,disassem_237
01770C 86 41 1C 00 		      	cmp  	r4,r3,#14
017710 3D 02 F2 03 		      	beq  	r4,disassem_238
017714 86 41 7A 00 		      	cmp  	r4,r3,#61
017718 3D 02 02 04 		      	beq  	r4,disassem_239
01771C 86 41 70 00 		      	cmp  	r4,r3,#56
017720 3D 02 9A 04 		      	beq  	r4,disassem_240
017724 86 41 72 00 		      	cmp  	r4,r3,#57
017728 3D 02 A0 04 		      	beq  	r4,disassem_241
01772C 86 41 74 00 		      	cmp  	r4,r3,#58
017730 3D 02 D4 04 		      	beq  	r4,disassem_242
017734 86 41 6E 00 		      	cmp  	r4,r3,#55
017738 3D 02 08 05 		      	beq  	r4,disassem_243
01773C 86 41 76 00 		      	cmp  	r4,r3,#59
017740 3D 02 22 05 		      	beq  	r4,disassem_244
017744 86 41 80 00 		      	cmp  	r4,r3,#64
017748 3D 02 3C 05 		      	beq  	r4,disassem_245
01774C 86 41 82 00 		      	cmp  	r4,r3,#65
017750 3D 02 4C 05 		      	beq  	r4,disassem_246
017754 86 41 84 00 		      	cmp  	r4,r3,#66
017758 3D 02 5C 05 		      	beq  	r4,disassem_247
01775C 86 41 86 00 		      	cmp  	r4,r3,#67
017760 3D 02 6C 05 		      	beq  	r4,disassem_248
017764 86 41 88 00 		      	cmp  	r4,r3,#68
017768 3D 02 7C 05 		      	beq  	r4,disassem_249
01776C 86 41 8A 00 		      	cmp  	r4,r3,#69
017770 3D 02 8C 05 		      	beq  	r4,disassem_250
017774 86 41 8C 00 		      	cmp  	r4,r3,#70
017778 3D 02 9C 05 		      	beq  	r4,disassem_251
01777C 86 41 8E 00 		      	cmp  	r4,r3,#71
017780 3D 02 AC 05 		      	beq  	r4,disassem_252
017784 86 41 90 00 		      	cmp  	r4,r3,#72
017788 3D 02 BC 05 		      	beq  	r4,disassem_253
01778C 86 41 92 00 		      	cmp  	r4,r3,#73
017790 3D 02 C8 05 		      	beq  	r4,disassem_254
017794 86 41 94 00 		      	cmp  	r4,r3,#74
017798 3D 02 D4 05 		      	beq  	r4,disassem_255
01779C 86 41 96 00 		      	cmp  	r4,r3,#75
0177A0 3D 02 E0 05 		      	beq  	r4,disassem_256
0177A4 86 41 98 00 		      	cmp  	r4,r3,#76
0177A8 3D 02 EC 05 		      	beq  	r4,disassem_257
0177AC 86 41 9A 00 		      	cmp  	r4,r3,#77
0177B0 3D 02 F8 05 		      	beq  	r4,disassem_258
0177B4 86 41 9C 00 		      	cmp  	r4,r3,#78
0177B8 3D 02 04 06 		      	beq  	r4,disassem_259
0177BC 86 41 9E 00 		      	cmp  	r4,r3,#79
0177C0 3D 02 10 06 		      	beq  	r4,disassem_260
0177C4 86 41 C0 00 		      	cmp  	r4,r3,#96
0177C8 3D 02 1C 06 		      	beq  	r4,disassem_261
0177CC 86 41 C2 00 		      	cmp  	r4,r3,#97
0177D0 3D 02 2C 06 		      	beq  	r4,disassem_262
0177D4 86 41 C4 00 		      	cmp  	r4,r3,#98
0177D8 3D 02 3C 06 		      	beq  	r4,disassem_263
0177DC 86 41 C6 00 		      	cmp  	r4,r3,#99
0177E0 3D 02 4C 06 		      	beq  	r4,disassem_264
0177E4 86 41 D0 00 		      	cmp  	r4,r3,#104
0177E8 3D 02 5C 06 		      	beq  	r4,disassem_265
0177EC 86 41 D2 00 		      	cmp  	r4,r3,#105
0177F0 3D 02 68 06 		      	beq  	r4,disassem_266
0177F4 86 41 D4 00 		      	cmp  	r4,r3,#106
0177F8 3D 02 74 06 		      	beq  	r4,disassem_267
0177FC 86 41 D6 00 		      	cmp  	r4,r3,#107
017800 3D 02 80 06 		      	beq  	r4,disassem_268
017804 86 41 B8 00 		      	cmp  	r4,r3,#92
017808 3D 02 8C 06 		      	beq  	r4,disassem_269
01780C 86 41 DC 00 		      	cmp  	r4,r3,#110
017810 3D 02 9C 06 		      	beq  	r4,disassem_270
017814 86 41 CE 00 		      	cmp  	r4,r3,#103
017818 3D 02 AC 06 		      	beq  	r4,disassem_271
01781C 86 41 AE 00 		      	cmp  	r4,r3,#87
017820 3D 02 CC 06 		      	beq  	r4,disassem_272
017824 86 41 7E 00 		      	cmp  	r4,r3,#63
017828 3D 02 EC 06 		      	beq  	r4,disassem_273
01782C 86 41 14 00 		      	cmp  	r4,r3,#10
017830 3D 02 FC 06 		      	beq  	r4,disassem_274
017834 3A D1 01 00 		      	bra  	disassem_275
                	disassem_224:
017838 0A 30 02 00 		      	ldi  	r3,#1
01783C E3 3D B0 FF 		      	sw   	r3,-40[bp]
017840 C6 3D 50 FF 		      	lw   	r3,-88[bp]
017844 BD 01 1E 00 		      	beq  	r3,disassem_276
017848 C4 3D 68 FF 		      	lh   	r3,-76[bp]
01784C 82 31 00 24 		      	sxh  	r3,r3
017850 82 31 00 24 		      	sxh  	r3,r3
017854 82 31 0E 78 		      	asri 	r3,r3,#7
017858 E3 3D A0 FF 		      	sw   	r3,-48[bp]
01785C C6 3D A0 FF 		      	lw   	r3,-48[bp]
017860 7C 00 01 00 		      	and  	r3,r3,#16777216
017864 8C 31 00 00 
017868 BD 01 0A 00 		      	beq  	r3,disassem_278
01786C C6 3D A0 FF 		      	lw   	r3,-48[bp]
017870 7C 00 FF FF 		      	ori  	r3,r3,#-16777216
017874 8D 31 00 00 
017878 E3 3D A0 FF 		      	sw   	r3,-48[bp]
                	disassem_278:
01787C 3A 04 00 00 		      	bra  	disassem_277
                	disassem_276:
017880 C6 3D A0 FF 		      	lw   	r3,-48[bp]
017884 82 31 32 70 		      	asli 	r3,r3,#25
017888 C5 4D E8 FF 		      	lhu  	r4,-12[bp]
01788C 0C 42 FE FF 		      	andi 	r4,r4,#-1
017890 02 42 0E 78 		      	asri 	r4,r4,#7
017894 82 31 08 1A 		      	or   	r3,r3,r4
017898 E3 3D A0 FF 		      	sw   	r3,-48[bp]
                	disassem_277:
01789C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0178A0 E7 E1 01 00 		      	push 	r3
0178A4 E6 E5 01 00 		      	push 	[r11]
0178A8 39 4B FE FF 		      	bsr  	DumpInsnBytes
0178AC 14 EF 21 00 		      	addui	sp,sp,#16
0178B0 FC 01 00 00 		      	push 	#disassem_133
0178B4 65 E0 75 48 
0178B8 B9 2F FD FF 		      	bsr  	printf
0178BC 14 EF 11 00 		      	addui	sp,sp,#8
0178C0 E3 0D 50 FF 		      	sw   	r0,-88[bp]
0178C4 3A C4 01 00 		      	bra  	disassem_223
                	disassem_225:
0178C8 C6 3D C0 FF 		      	lw   	r3,-32[bp]
0178CC 86 41 6E 00 		      	cmp  	r4,r3,#55
0178D0 3D 02 40 00 		      	beq  	r4,disassem_281
0178D4 86 41 08 00 		      	cmp  	r4,r3,#4
0178D8 3D 02 EC 00 		      	beq  	r4,disassem_282
0178DC 86 41 28 00 		      	cmp  	r4,r3,#20
0178E0 3D 02 F8 00 		      	beq  	r4,disassem_283
0178E4 86 41 0A 00 		      	cmp  	r4,r3,#5
0178E8 3D 02 04 01 		      	beq  	r4,disassem_284
0178EC 86 41 2A 00 		      	cmp  	r4,r3,#21
0178F0 3D 02 10 01 		      	beq  	r4,disassem_285
0178F4 86 41 0C 00 		      	cmp  	r4,r3,#6
0178F8 3D 02 1C 01 		      	beq  	r4,disassem_286
0178FC 86 41 2C 00 		      	cmp  	r4,r3,#22
017900 3D 02 28 01 		      	beq  	r4,disassem_287
017904 86 41 0E 00 		      	cmp  	r4,r3,#7
017908 3D 02 34 01 		      	beq  	r4,disassem_288
01790C 86 41 2E 00 		      	cmp  	r4,r3,#23
017910 3D 02 40 01 		      	beq  	r4,disassem_289
017914 86 41 10 00 		      	cmp  	r4,r3,#8
017918 3D 02 4C 01 		      	beq  	r4,disassem_290
01791C 86 41 30 00 		      	cmp  	r4,r3,#24
017920 3D 02 58 01 		      	beq  	r4,disassem_291
017924 86 41 18 00 		      	cmp  	r4,r3,#12
017928 3D 02 64 01 		      	beq  	r4,disassem_292
01792C 86 41 1A 00 		      	cmp  	r4,r3,#13
017930 3D 02 70 01 		      	beq  	r4,disassem_293
017934 86 41 1C 00 		      	cmp  	r4,r3,#14
017938 3D 02 7C 01 		      	beq  	r4,disassem_294
01793C 86 41 3E 00 		      	cmp  	r4,r3,#31
017940 3D 02 88 01 		      	beq  	r4,disassem_295
017944 86 41 3C 00 		      	cmp  	r4,r3,#30
017948 3D 02 B0 01 		      	beq  	r4,disassem_296
01794C BA 78 00 00 		      	bra  	disassem_280
                	disassem_281:
017950 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017954 8C 31 FE FF 		      	andi 	r3,r3,#-1
017958 82 31 22 78 		      	asri 	r3,r3,#17
01795C 8C 31 3E 00 		      	and  	r3,r3,#31
017960 86 41 00 00 		      	cmp  	r4,r3,#0
017964 3D 02 18 00 		      	beq  	r4,disassem_298
017968 86 41 02 00 		      	cmp  	r4,r3,#1
01796C 3D 02 28 00 		      	beq  	r4,disassem_299
017970 86 41 06 00 		      	cmp  	r4,r3,#3
017974 3D 02 38 00 		      	beq  	r4,disassem_300
017978 86 41 3A 00 		      	cmp  	r4,r3,#29
01797C 3D 02 48 00 		      	beq  	r4,disassem_301
017980 86 41 3C 00 		      	cmp  	r4,r3,#30
017984 3D 02 58 00 		      	beq  	r4,disassem_302
017988 86 41 3E 00 		      	cmp  	r4,r3,#31
01798C 3D 02 68 00 		      	beq  	r4,disassem_303
017990 BA 1E 00 00 		      	bra  	disassem_304
                	disassem_298:
017994 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017998 E7 E1 01 00 		      	push 	r3
01799C E6 E5 01 00 		      	push 	[r11]
0179A0 39 2C FE FF 		      	bsr  	DumpInsnBytes
0179A4 14 EF 21 00 		      	addui	sp,sp,#16
0179A8 FC 01 00 00 		      	push 	#disassem_134
0179AC 65 E0 5D 48 
0179B0 B9 10 FD FF 		      	bsr  	printf
0179B4 14 EF 11 00 		      	addui	sp,sp,#8
0179B8 BA 1E 00 00 		      	bra  	disassem_297
                	disassem_299:
0179BC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0179C0 E7 E1 01 00 		      	push 	r3
0179C4 E6 E5 01 00 		      	push 	[r11]
0179C8 39 27 FE FF 		      	bsr  	DumpInsnBytes
0179CC 14 EF 21 00 		      	addui	sp,sp,#16
0179D0 FC 01 00 00 		      	push 	#disassem_135
0179D4 65 E0 45 48 
0179D8 B9 0B FD FF 		      	bsr  	printf
0179DC 14 EF 11 00 		      	addui	sp,sp,#8
0179E0 BA 19 00 00 		      	bra  	disassem_297
                	disassem_300:
0179E4 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0179E8 E7 E1 01 00 		      	push 	r3
0179EC E6 E5 01 00 		      	push 	[r11]
0179F0 39 22 FE FF 		      	bsr  	DumpInsnBytes
0179F4 14 EF 21 00 		      	addui	sp,sp,#16
0179F8 FC 01 00 00 		      	push 	#disassem_136
0179FC 65 E0 2D 48 
017A00 B9 06 FD FF 		      	bsr  	printf
017A04 14 EF 11 00 		      	addui	sp,sp,#8
017A08 BA 14 00 00 		      	bra  	disassem_297
                	disassem_301:
017A0C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017A10 E7 E1 01 00 		      	push 	r3
017A14 E6 E5 01 00 		      	push 	[r11]
017A18 39 1D FE FF 		      	bsr  	DumpInsnBytes
017A1C 14 EF 21 00 		      	addui	sp,sp,#16
017A20 FC 01 00 00 		      	push 	#disassem_137
017A24 65 E0 15 48 
017A28 B9 01 FD FF 		      	bsr  	printf
017A2C 14 EF 11 00 		      	addui	sp,sp,#8
017A30 BA 0F 00 00 		      	bra  	disassem_297
                	disassem_302:
017A34 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017A38 E7 E1 01 00 		      	push 	r3
017A3C E6 E5 01 00 		      	push 	[r11]
017A40 39 18 FE FF 		      	bsr  	DumpInsnBytes
017A44 14 EF 21 00 		      	addui	sp,sp,#16
017A48 FC 01 00 00 		      	push 	#disassem_138
017A4C 65 E0 FD 47 
017A50 B9 FC FC FF 		      	bsr  	printf
017A54 14 EF 11 00 		      	addui	sp,sp,#8
017A58 BA 0A 00 00 		      	bra  	disassem_297
                	disassem_303:
017A5C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017A60 E7 E1 01 00 		      	push 	r3
017A64 E6 E5 01 00 		      	push 	[r11]
017A68 39 13 FE FF 		      	bsr  	DumpInsnBytes
017A6C 14 EF 21 00 		      	addui	sp,sp,#16
017A70 FC 01 00 00 		      	push 	#disassem_139
017A74 65 E0 E5 47 
017A78 B9 F7 FC FF 		      	bsr  	printf
017A7C 14 EF 11 00 		      	addui	sp,sp,#8
017A80 BA 05 00 00 		      	bra  	disassem_297
                	disassem_304:
017A84 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017A88 E7 E1 01 00 		      	push 	r3
017A8C E6 E5 01 00 		      	push 	[r11]
017A90 39 0E FE FF 		      	bsr  	DumpInsnBytes
017A94 14 EF 21 00 		      	addui	sp,sp,#16
017A98 FC 01 00 00 		      	push 	#disassem_140
017A9C 65 E0 CD 47 
017AA0 B9 F2 FC FF 		      	bsr  	printf
017AA4 14 EF 11 00 		      	addui	sp,sp,#8
017AA8 BA 00 00 00 		      	bra  	disassem_297
                	disassem_297:
017AAC BA 4C 00 00 		      	bra  	disassem_280
                	disassem_282:
017AB0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017AB4 E7 E1 01 00 		      	push 	r3
017AB8 FC 01 00 00 		      	push 	#disassem_141
017ABC 65 E0 B5 47 
017AC0 E6 E5 01 00 		      	push 	[r11]
017AC4 B9 42 FF FF 		      	bsr  	DispRR
017AC8 14 EF 31 00 		      	addui	sp,sp,#24
017ACC BA 48 00 00 		      	bra  	disassem_280
                	disassem_283:
017AD0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017AD4 E7 E1 01 00 		      	push 	r3
017AD8 FC 01 00 00 		      	push 	#disassem_142
017ADC 65 E0 9D 47 
017AE0 E6 E5 01 00 		      	push 	[r11]
017AE4 B9 3E FF FF 		      	bsr  	DispRR
017AE8 14 EF 31 00 		      	addui	sp,sp,#24
017AEC BA 44 00 00 		      	bra  	disassem_280
                	disassem_284:
017AF0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017AF4 E7 E1 01 00 		      	push 	r3
017AF8 FC 01 00 00 		      	push 	#disassem_143
017AFC 65 E0 85 47 
017B00 E6 E5 01 00 		      	push 	[r11]
017B04 B9 3A FF FF 		      	bsr  	DispRR
017B08 14 EF 31 00 		      	addui	sp,sp,#24
017B0C BA 40 00 00 		      	bra  	disassem_280
                	disassem_285:
017B10 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017B14 E7 E1 01 00 		      	push 	r3
017B18 FC 01 00 00 		      	push 	#disassem_144
017B1C 65 E0 6D 47 
017B20 E6 E5 01 00 		      	push 	[r11]
017B24 B9 36 FF FF 		      	bsr  	DispRR
017B28 14 EF 31 00 		      	addui	sp,sp,#24
017B2C BA 3C 00 00 		      	bra  	disassem_280
                	disassem_286:
017B30 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017B34 E7 E1 01 00 		      	push 	r3
017B38 FC 01 00 00 		      	push 	#disassem_145
017B3C 65 E0 55 47 
017B40 E6 E5 01 00 		      	push 	[r11]
017B44 B9 32 FF FF 		      	bsr  	DispRR
017B48 14 EF 31 00 		      	addui	sp,sp,#24
017B4C BA 38 00 00 		      	bra  	disassem_280
                	disassem_287:
017B50 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017B54 E7 E1 01 00 		      	push 	r3
017B58 FC 01 00 00 		      	push 	#disassem_146
017B5C 65 E0 3D 47 
017B60 E6 E5 01 00 		      	push 	[r11]
017B64 B9 2E FF FF 		      	bsr  	DispRR
017B68 14 EF 31 00 		      	addui	sp,sp,#24
017B6C BA 34 00 00 		      	bra  	disassem_280
                	disassem_288:
017B70 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017B74 E7 E1 01 00 		      	push 	r3
017B78 FC 01 00 00 		      	push 	#disassem_147
017B7C 65 E0 25 47 
017B80 E6 E5 01 00 		      	push 	[r11]
017B84 B9 2A FF FF 		      	bsr  	DispRR
017B88 14 EF 31 00 		      	addui	sp,sp,#24
017B8C BA 30 00 00 		      	bra  	disassem_280
                	disassem_289:
017B90 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017B94 E7 E1 01 00 		      	push 	r3
017B98 FC 01 00 00 		      	push 	#disassem_148
017B9C 65 E0 0D 47 
017BA0 E6 E5 01 00 		      	push 	[r11]
017BA4 B9 26 FF FF 		      	bsr  	DispRR
017BA8 14 EF 31 00 		      	addui	sp,sp,#24
017BAC BA 2C 00 00 		      	bra  	disassem_280
                	disassem_290:
017BB0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017BB4 E7 E1 01 00 		      	push 	r3
017BB8 FC 01 00 00 		      	push 	#disassem_149
017BBC 65 E0 F5 46 
017BC0 E6 E5 01 00 		      	push 	[r11]
017BC4 B9 22 FF FF 		      	bsr  	DispRR
017BC8 14 EF 31 00 		      	addui	sp,sp,#24
017BCC BA 28 00 00 		      	bra  	disassem_280
                	disassem_291:
017BD0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017BD4 E7 E1 01 00 		      	push 	r3
017BD8 FC 01 00 00 		      	push 	#disassem_150
017BDC 65 E0 DD 46 
017BE0 E6 E5 01 00 		      	push 	[r11]
017BE4 B9 1E FF FF 		      	bsr  	DispRR
017BE8 14 EF 31 00 		      	addui	sp,sp,#24
017BEC BA 24 00 00 		      	bra  	disassem_280
                	disassem_292:
017BF0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017BF4 E7 E1 01 00 		      	push 	r3
017BF8 FC 01 00 00 		      	push 	#disassem_151
017BFC 65 E0 C5 46 
017C00 E6 E5 01 00 		      	push 	[r11]
017C04 B9 1A FF FF 		      	bsr  	DispRR
017C08 14 EF 31 00 		      	addui	sp,sp,#24
017C0C BA 20 00 00 		      	bra  	disassem_280
                	disassem_293:
017C10 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017C14 E7 E1 01 00 		      	push 	r3
017C18 FC 01 00 00 		      	push 	#disassem_152
017C1C 65 E0 AD 46 
017C20 E6 E5 01 00 		      	push 	[r11]
017C24 B9 16 FF FF 		      	bsr  	DispRR
017C28 14 EF 31 00 		      	addui	sp,sp,#24
017C2C BA 1C 00 00 		      	bra  	disassem_280
                	disassem_294:
017C30 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017C34 E7 E1 01 00 		      	push 	r3
017C38 FC 01 00 00 		      	push 	#disassem_153
017C3C 65 E0 95 46 
017C40 E6 E5 01 00 		      	push 	[r11]
017C44 B9 12 FF FF 		      	bsr  	DispRR
017C48 14 EF 31 00 		      	addui	sp,sp,#24
017C4C BA 18 00 00 		      	bra  	disassem_280
                	disassem_295:
017C50 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017C54 E7 E1 01 00 		      	push 	r3
017C58 E6 E5 01 00 		      	push 	[r11]
017C5C B9 D4 FD FF 		      	bsr  	DumpInsnBytes
017C60 14 EF 21 00 		      	addui	sp,sp,#16
017C64 FC 01 00 00 		      	push 	#disassem_154
017C68 65 E0 79 46 
017C6C 39 B9 FC FF 		      	bsr  	printf
017C70 14 EF 11 00 		      	addui	sp,sp,#8
017C74 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017C78 E7 E1 01 00 		      	push 	r3
017C7C B9 EC FD FF 		      	bsr  	DispRstc
017C80 14 EF 11 00 		      	addui	sp,sp,#8
017C84 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017C88 E7 E1 01 00 		      	push 	r3
017C8C B9 16 FE FF 		      	bsr  	DispSpr
017C90 14 EF 11 00 		      	addui	sp,sp,#8
017C94 FC 01 00 00 		      	push 	#disassem_155
017C98 65 E0 6D 46 
017C9C 39 B3 FC FF 		      	bsr  	printf
017CA0 14 EF 11 00 		      	addui	sp,sp,#8
017CA4 BA 0D 00 00 		      	bra  	disassem_280
                	disassem_296:
017CA8 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017CAC E7 E1 01 00 		      	push 	r3
017CB0 E6 E5 01 00 		      	push 	[r11]
017CB4 B9 C9 FD FF 		      	bsr  	DumpInsnBytes
017CB8 14 EF 21 00 		      	addui	sp,sp,#16
017CBC FC 01 00 00 		      	push 	#disassem_156
017CC0 65 E0 51 46 
017CC4 39 AE FC FF 		      	bsr  	printf
017CC8 14 EF 11 00 		      	addui	sp,sp,#8
017CCC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017CD0 E7 E1 01 00 		      	push 	r3
017CD4 B9 0D FE FF 		      	bsr  	DispSpr
017CD8 14 EF 11 00 		      	addui	sp,sp,#8
017CDC FC 01 00 00 		      	push 	#disassem_157
017CE0 65 E0 49 46 
017CE4 39 AA FC FF 		      	bsr  	printf
017CE8 14 EF 11 00 		      	addui	sp,sp,#8
017CEC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017CF0 E7 E1 01 00 		      	push 	r3
017CF4 B9 F3 FD FF 		      	bsr  	DispRa
017CF8 14 EF 11 00 		      	addui	sp,sp,#8
017CFC FC 01 00 00 		      	push 	#disassem_158
017D00 65 E0 3D 46 
017D04 39 A6 FC FF 		      	bsr  	printf
017D08 14 EF 11 00 		      	addui	sp,sp,#8
017D0C BA 00 00 00 		      	bra  	disassem_280
                	disassem_280:
017D10 BA 3A 01 00 		      	bra  	disassem_223
                	disassem_226:
017D14 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017D18 E7 E1 01 00 		      	push 	r3
017D1C E6 ED A1 FF 		      	push 	-48[bp]
017D20 E6 ED B1 FF 		      	push 	-40[bp]
017D24 FC 01 00 00 		      	push 	#disassem_159
017D28 65 E0 25 46 
017D2C E6 E5 01 00 		      	push 	[r11]
017D30 B9 C1 FE FF 		      	bsr  	DispRI
017D34 14 EF 51 00 		      	addui	sp,sp,#40
017D38 BA 35 01 00 		      	bra  	disassem_223
                	disassem_227:
017D3C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017D40 E7 E1 01 00 		      	push 	r3
017D44 E6 ED A1 FF 		      	push 	-48[bp]
017D48 E6 ED B1 FF 		      	push 	-40[bp]
017D4C FC 01 00 00 		      	push 	#disassem_160
017D50 65 E0 0D 46 
017D54 E6 E5 01 00 		      	push 	[r11]
017D58 B9 BC FE FF 		      	bsr  	DispRI
017D5C 14 EF 51 00 		      	addui	sp,sp,#40
017D60 BA 30 01 00 		      	bra  	disassem_223
                	disassem_228:
017D64 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017D68 E7 E1 01 00 		      	push 	r3
017D6C E6 ED A1 FF 		      	push 	-48[bp]
017D70 E6 ED B1 FF 		      	push 	-40[bp]
017D74 FC 01 00 00 		      	push 	#disassem_161
017D78 65 E0 F5 45 
017D7C E6 E5 01 00 		      	push 	[r11]
017D80 B9 B7 FE FF 		      	bsr  	DispRI
017D84 14 EF 51 00 		      	addui	sp,sp,#40
017D88 BA 2B 01 00 		      	bra  	disassem_223
                	disassem_229:
017D8C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017D90 E7 E1 01 00 		      	push 	r3
017D94 E6 ED A1 FF 		      	push 	-48[bp]
017D98 E6 ED B1 FF 		      	push 	-40[bp]
017D9C FC 01 00 00 		      	push 	#disassem_162
017DA0 65 E0 DD 45 
017DA4 E6 E5 01 00 		      	push 	[r11]
017DA8 B9 B2 FE FF 		      	bsr  	DispRI
017DAC 14 EF 51 00 		      	addui	sp,sp,#40
017DB0 BA 26 01 00 		      	bra  	disassem_223
                	disassem_230:
017DB4 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017DB8 E7 E1 01 00 		      	push 	r3
017DBC E6 ED A1 FF 		      	push 	-48[bp]
017DC0 E6 ED B1 FF 		      	push 	-40[bp]
017DC4 FC 01 00 00 		      	push 	#disassem_163
017DC8 65 E0 C5 45 
017DCC E6 E5 01 00 		      	push 	[r11]
017DD0 B9 AD FE FF 		      	bsr  	DispRI
017DD4 14 EF 51 00 		      	addui	sp,sp,#40
017DD8 BA 21 01 00 		      	bra  	disassem_223
                	disassem_231:
017DDC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017DE0 E7 E1 01 00 		      	push 	r3
017DE4 E6 ED A1 FF 		      	push 	-48[bp]
017DE8 E6 ED B1 FF 		      	push 	-40[bp]
017DEC FC 01 00 00 		      	push 	#disassem_164
017DF0 65 E0 AD 45 
017DF4 E6 E5 01 00 		      	push 	[r11]
017DF8 B9 A8 FE FF 		      	bsr  	DispRI
017DFC 14 EF 51 00 		      	addui	sp,sp,#40
017E00 BA 1C 01 00 		      	bra  	disassem_223
                	disassem_232:
017E04 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017E08 E7 E1 01 00 		      	push 	r3
017E0C E6 ED A1 FF 		      	push 	-48[bp]
017E10 E6 ED B1 FF 		      	push 	-40[bp]
017E14 FC 01 00 00 		      	push 	#disassem_165
017E18 65 E0 95 45 
017E1C E6 E5 01 00 		      	push 	[r11]
017E20 B9 A3 FE FF 		      	bsr  	DispRI
017E24 14 EF 51 00 		      	addui	sp,sp,#40
017E28 BA 17 01 00 		      	bra  	disassem_223
                	disassem_233:
017E2C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017E30 E7 E1 01 00 		      	push 	r3
017E34 E6 ED A1 FF 		      	push 	-48[bp]
017E38 E6 ED B1 FF 		      	push 	-40[bp]
017E3C FC 01 00 00 		      	push 	#disassem_166
017E40 65 E0 7D 45 
017E44 E6 E5 01 00 		      	push 	[r11]
017E48 B9 9E FE FF 		      	bsr  	DispRI
017E4C 14 EF 51 00 		      	addui	sp,sp,#40
017E50 BA 12 01 00 		      	bra  	disassem_223
                	disassem_234:
017E54 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017E58 E7 E1 01 00 		      	push 	r3
017E5C E6 ED A1 FF 		      	push 	-48[bp]
017E60 E6 ED B1 FF 		      	push 	-40[bp]
017E64 FC 01 00 00 		      	push 	#disassem_167
017E68 65 E0 65 45 
017E6C E6 E5 01 00 		      	push 	[r11]
017E70 B9 99 FE FF 		      	bsr  	DispRI
017E74 14 EF 51 00 		      	addui	sp,sp,#40
017E78 BA 0D 01 00 		      	bra  	disassem_223
                	disassem_235:
017E7C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017E80 E7 E1 01 00 		      	push 	r3
017E84 E6 ED A1 FF 		      	push 	-48[bp]
017E88 E6 ED B1 FF 		      	push 	-40[bp]
017E8C FC 01 00 00 		      	push 	#disassem_168
017E90 65 E0 4D 45 
017E94 E6 E5 01 00 		      	push 	[r11]
017E98 B9 94 FE FF 		      	bsr  	DispRI
017E9C 14 EF 51 00 		      	addui	sp,sp,#40
017EA0 BA 08 01 00 		      	bra  	disassem_223
                	disassem_236:
017EA4 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017EA8 E7 E1 01 00 		      	push 	r3
017EAC E6 ED A1 FF 		      	push 	-48[bp]
017EB0 E6 ED B1 FF 		      	push 	-40[bp]
017EB4 FC 01 00 00 		      	push 	#disassem_169
017EB8 65 E0 35 45 
017EBC E6 E5 01 00 		      	push 	[r11]
017EC0 B9 8F FE FF 		      	bsr  	DispRI
017EC4 14 EF 51 00 		      	addui	sp,sp,#40
017EC8 BA 03 01 00 		      	bra  	disassem_223
                	disassem_237:
017ECC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017ED0 E7 E1 01 00 		      	push 	r3
017ED4 E6 ED A1 FF 		      	push 	-48[bp]
017ED8 E6 ED B1 FF 		      	push 	-40[bp]
017EDC FC 01 00 00 		      	push 	#disassem_170
017EE0 65 E0 1D 45 
017EE4 E6 E5 01 00 		      	push 	[r11]
017EE8 B9 8A FE FF 		      	bsr  	DispRI
017EEC 14 EF 51 00 		      	addui	sp,sp,#40
017EF0 BA FE 00 00 		      	bra  	disassem_223
                	disassem_238:
017EF4 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017EF8 E7 E1 01 00 		      	push 	r3
017EFC E6 ED A1 FF 		      	push 	-48[bp]
017F00 E6 ED B1 FF 		      	push 	-40[bp]
017F04 FC 01 00 00 		      	push 	#disassem_171
017F08 65 E0 05 45 
017F0C E6 E5 01 00 		      	push 	[r11]
017F10 B9 85 FE FF 		      	bsr  	DispRI
017F14 14 EF 51 00 		      	addui	sp,sp,#40
017F18 BA F9 00 00 		      	bra  	disassem_223
                	disassem_239:
017F1C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017F20 8C 31 FE FF 		      	andi 	r3,r3,#-1
017F24 82 31 18 78 		      	asri 	r3,r3,#12
017F28 8C 31 0E 00 		      	and  	r3,r3,#7
017F2C 86 41 00 00 		      	cmp  	r4,r3,#0
017F30 3D 02 20 00 		      	beq  	r4,disassem_306
017F34 86 41 02 00 		      	cmp  	r4,r3,#1
017F38 3D 02 2C 00 		      	beq  	r4,disassem_307
017F3C 86 41 08 00 		      	cmp  	r4,r3,#4
017F40 3D 02 38 00 		      	beq  	r4,disassem_308
017F44 86 41 0A 00 		      	cmp  	r4,r3,#5
017F48 3D 02 44 00 		      	beq  	r4,disassem_309
017F4C 86 41 04 00 		      	cmp  	r4,r3,#2
017F50 3D 02 50 00 		      	beq  	r4,disassem_310
017F54 86 41 06 00 		      	cmp  	r4,r3,#3
017F58 3D 02 5C 00 		      	beq  	r4,disassem_311
017F5C 86 41 0C 00 		      	cmp  	r4,r3,#6
017F60 3D 02 68 00 		      	beq  	r4,disassem_312
017F64 86 41 0E 00 		      	cmp  	r4,r3,#7
017F68 3D 02 64 00 		      	beq  	r4,disassem_312
017F6C BA 1C 00 00 		      	bra  	disassem_305
                	disassem_306:
017F70 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017F74 E7 E1 01 00 		      	push 	r3
017F78 FC 01 00 00 		      	push 	#disassem_172
017F7C 65 E0 ED 44 
017F80 E6 E5 01 00 		      	push 	[r11]
017F84 39 92 FE FF 		      	bsr  	DispBcc
017F88 14 EF 31 00 		      	addui	sp,sp,#24
017F8C BA 18 00 00 		      	bra  	disassem_305
                	disassem_307:
017F90 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017F94 E7 E1 01 00 		      	push 	r3
017F98 FC 01 00 00 		      	push 	#disassem_173
017F9C 65 E0 D5 44 
017FA0 E6 E5 01 00 		      	push 	[r11]
017FA4 39 8E FE FF 		      	bsr  	DispBcc
017FA8 14 EF 31 00 		      	addui	sp,sp,#24
017FAC BA 14 00 00 		      	bra  	disassem_305
                	disassem_308:
017FB0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017FB4 E7 E1 01 00 		      	push 	r3
017FB8 FC 01 00 00 		      	push 	#disassem_174
017FBC 65 E0 BD 44 
017FC0 E6 E5 01 00 		      	push 	[r11]
017FC4 39 8A FE FF 		      	bsr  	DispBcc
017FC8 14 EF 31 00 		      	addui	sp,sp,#24
017FCC BA 10 00 00 		      	bra  	disassem_305
                	disassem_309:
017FD0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017FD4 E7 E1 01 00 		      	push 	r3
017FD8 FC 01 00 00 		      	push 	#disassem_175
017FDC 65 E0 A5 44 
017FE0 E6 E5 01 00 		      	push 	[r11]
017FE4 39 86 FE FF 		      	bsr  	DispBcc
017FE8 14 EF 31 00 		      	addui	sp,sp,#24
017FEC BA 0C 00 00 		      	bra  	disassem_305
                	disassem_310:
017FF0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017FF4 E7 E1 01 00 		      	push 	r3
017FF8 FC 01 00 00 		      	push 	#disassem_176
017FFC 65 E0 8D 44 
018000 E6 E5 01 00 		      	push 	[r11]
018004 39 82 FE FF 		      	bsr  	DispBcc
018008 14 EF 31 00 		      	addui	sp,sp,#24
01800C BA 08 00 00 		      	bra  	disassem_305
                	disassem_311:
018010 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018014 E7 E1 01 00 		      	push 	r3
018018 FC 01 00 00 		      	push 	#disassem_177
01801C 65 E0 75 44 
018020 E6 E5 01 00 		      	push 	[r11]
018024 39 7E FE FF 		      	bsr  	DispBcc
018028 14 EF 31 00 		      	addui	sp,sp,#24
01802C BA 04 00 00 		      	bra  	disassem_305
                	disassem_312:
018030 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018034 E7 E1 01 00 		      	push 	r3
018038 FC 01 00 00 		      	push 	#disassem_178
01803C 65 E0 5D 44 
018040 E6 E5 01 00 		      	push 	[r11]
018044 39 7A FE FF 		      	bsr  	DispBcc
018048 14 EF 31 00 		      	addui	sp,sp,#24
01804C BA 00 00 00 		      	bra  	disassem_305
                	disassem_305:
018050 BA D2 00 00 		      	bra  	disassem_223
                	disassem_240:
018054 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018058 E7 E1 01 00 		      	push 	r3
01805C 39 04 FE FF 		      	bsr  	DispBrk
018060 14 EF 11 00 		      	addui	sp,sp,#8
018064 3A D0 00 00 		      	bra  	disassem_223
                	disassem_241:
018068 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
01806C E7 E1 01 00 		      	push 	r3
018070 E6 E5 01 00 		      	push 	[r11]
018074 B9 51 FD FF 		      	bsr  	DumpInsnBytes
018078 14 EF 21 00 		      	addui	sp,sp,#16
01807C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018080 8C 31 FE FF 		      	andi 	r3,r3,#-1
018084 82 31 0E 78 		      	asri 	r3,r3,#7
018088 E3 3D 80 FF 		      	sw   	r3,-64[bp]
01808C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018090 7C 00 80 FF 		      	and  	r3,r3,#-2147483648
018094 8C 31 00 00 
018098 BD 01 0A 00 		      	beq  	r3,disassem_313
01809C C6 3D 80 FF 		      	lw   	r3,-64[bp]
0180A0 7C 00 FF FF 		      	ori  	r3,r3,#-16777216
0180A4 8D 31 00 00 
0180A8 E3 3D 80 FF 		      	sw   	r3,-64[bp]
                	disassem_313:
0180AC C6 35 00 00 		      	lw   	r3,[r11]
0180B0 C6 4D 80 FF 		      	lw   	r4,-64[bp]
0180B4 02 42 04 70 		      	asli 	r4,r4,#2
0180B8 82 31 08 28 		      	addu 	r3,r3,r4
0180BC E3 3D 90 FF 		      	sw   	r3,-56[bp]
0180C0 E6 ED 91 FF 		      	push 	-56[bp]
0180C4 FC 01 00 00 		      	push 	#disassem_179
0180C8 65 E0 2D 44 
0180CC 39 2D FC FF 		      	bsr  	printf
0180D0 14 EF 21 00 		      	addui	sp,sp,#16
0180D4 3A C2 00 00 		      	bra  	disassem_223
                	disassem_242:
0180D8 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0180DC E7 E1 01 00 		      	push 	r3
0180E0 E6 E5 01 00 		      	push 	[r11]
0180E4 B9 43 FD FF 		      	bsr  	DumpInsnBytes
0180E8 14 EF 21 00 		      	addui	sp,sp,#16
0180EC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0180F0 8C 31 FE FF 		      	andi 	r3,r3,#-1
0180F4 82 31 0E 78 		      	asri 	r3,r3,#7
0180F8 E3 3D 80 FF 		      	sw   	r3,-64[bp]
0180FC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018100 7C 00 80 FF 		      	and  	r3,r3,#-2147483648
018104 8C 31 00 00 
018108 BD 01 0A 00 		      	beq  	r3,disassem_315
01810C C6 3D 80 FF 		      	lw   	r3,-64[bp]
018110 7C 00 FF FF 		      	ori  	r3,r3,#-16777216
018114 8D 31 00 00 
018118 E3 3D 80 FF 		      	sw   	r3,-64[bp]
                	disassem_315:
01811C C6 35 00 00 		      	lw   	r3,[r11]
018120 C6 4D 80 FF 		      	lw   	r4,-64[bp]
018124 02 42 04 70 		      	asli 	r4,r4,#2
018128 82 31 08 28 		      	addu 	r3,r3,r4
01812C E3 3D 90 FF 		      	sw   	r3,-56[bp]
018130 E6 ED 91 FF 		      	push 	-56[bp]
018134 FC 01 00 00 		      	push 	#disassem_180
018138 65 E0 FD 43 
01813C 39 1F FC FF 		      	bsr  	printf
018140 14 EF 21 00 		      	addui	sp,sp,#16
018144 3A B4 00 00 		      	bra  	disassem_223
                	disassem_243:
018148 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
01814C E7 E1 01 00 		      	push 	r3
018150 E6 E5 01 00 		      	push 	[r11]
018154 B9 35 FD FF 		      	bsr  	DumpInsnBytes
018158 14 EF 21 00 		      	addui	sp,sp,#16
01815C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018160 8C 31 FE FF 		      	andi 	r3,r3,#-1
018164 82 31 22 78 		      	asri 	r3,r3,#17
018168 E3 3D 90 FF 		      	sw   	r3,-56[bp]
01816C E6 ED 91 FF 		      	push 	-56[bp]
018170 FC 01 00 00 		      	push 	#disassem_181
018174 65 E0 CD 43 
018178 B9 17 FC FF 		      	bsr  	printf
01817C 14 EF 21 00 		      	addui	sp,sp,#16
018180 BA AC 00 00 		      	bra  	disassem_223
                	disassem_244:
018184 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018188 E7 E1 01 00 		      	push 	r3
01818C E6 E5 01 00 		      	push 	[r11]
018190 39 2E FD FF 		      	bsr  	DumpInsnBytes
018194 14 EF 21 00 		      	addui	sp,sp,#16
018198 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
01819C 8C 31 FE FF 		      	andi 	r3,r3,#-1
0181A0 82 31 22 78 		      	asri 	r3,r3,#17
0181A4 E3 3D 90 FF 		      	sw   	r3,-56[bp]
0181A8 E6 ED 91 FF 		      	push 	-56[bp]
0181AC FC 01 00 00 		      	push 	#disassem_182
0181B0 65 E0 9D 43 
0181B4 39 10 FC FF 		      	bsr  	printf
0181B8 14 EF 21 00 		      	addui	sp,sp,#16
0181BC 3A A5 00 00 		      	bra  	disassem_223
                	disassem_245:
0181C0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0181C4 E7 E1 01 00 		      	push 	r3
0181C8 E6 ED A1 FF 		      	push 	-48[bp]
0181CC E6 ED B1 FF 		      	push 	-40[bp]
0181D0 FC 01 00 00 		      	push 	#disassem_183
0181D4 65 E0 85 43 
0181D8 E6 E5 01 00 		      	push 	[r11]
0181DC B9 1C FE FF 		      	bsr  	DispLS
0181E0 14 EF 51 00 		      	addui	sp,sp,#40
0181E4 3A A0 00 00 		      	bra  	disassem_223
                	disassem_246:
0181E8 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0181EC E7 E1 01 00 		      	push 	r3
0181F0 E6 ED A1 FF 		      	push 	-48[bp]
0181F4 E6 ED B1 FF 		      	push 	-40[bp]
0181F8 FC 01 00 00 		      	push 	#disassem_184
0181FC 65 E0 6D 43 
018200 E6 E5 01 00 		      	push 	[r11]
018204 B9 17 FE FF 		      	bsr  	DispLS
018208 14 EF 51 00 		      	addui	sp,sp,#40
01820C 3A 9B 00 00 		      	bra  	disassem_223
                	disassem_247:
018210 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018214 E7 E1 01 00 		      	push 	r3
018218 E6 ED A1 FF 		      	push 	-48[bp]
01821C E6 ED B1 FF 		      	push 	-40[bp]
018220 FC 01 00 00 		      	push 	#disassem_185
018224 65 E0 55 43 
018228 E6 E5 01 00 		      	push 	[r11]
01822C B9 12 FE FF 		      	bsr  	DispLS
018230 14 EF 51 00 		      	addui	sp,sp,#40
018234 3A 96 00 00 		      	bra  	disassem_223
                	disassem_248:
018238 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
01823C E7 E1 01 00 		      	push 	r3
018240 E6 ED A1 FF 		      	push 	-48[bp]
018244 E6 ED B1 FF 		      	push 	-40[bp]
018248 FC 01 00 00 		      	push 	#disassem_186
01824C 65 E0 3D 43 
018250 E6 E5 01 00 		      	push 	[r11]
018254 B9 0D FE FF 		      	bsr  	DispLS
018258 14 EF 51 00 		      	addui	sp,sp,#40
01825C 3A 91 00 00 		      	bra  	disassem_223
                	disassem_249:
018260 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018264 E7 E1 01 00 		      	push 	r3
018268 E6 ED A1 FF 		      	push 	-48[bp]
01826C E6 ED B1 FF 		      	push 	-40[bp]
018270 FC 01 00 00 		      	push 	#disassem_187
018274 65 E0 25 43 
018278 E6 E5 01 00 		      	push 	[r11]
01827C B9 08 FE FF 		      	bsr  	DispLS
018280 14 EF 51 00 		      	addui	sp,sp,#40
018284 3A 8C 00 00 		      	bra  	disassem_223
                	disassem_250:
018288 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
01828C E7 E1 01 00 		      	push 	r3
018290 E6 ED A1 FF 		      	push 	-48[bp]
018294 E6 ED B1 FF 		      	push 	-40[bp]
018298 FC 01 00 00 		      	push 	#disassem_188
01829C 65 E0 0D 43 
0182A0 E6 E5 01 00 		      	push 	[r11]
0182A4 B9 03 FE FF 		      	bsr  	DispLS
0182A8 14 EF 51 00 		      	addui	sp,sp,#40
0182AC 3A 87 00 00 		      	bra  	disassem_223
                	disassem_251:
0182B0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0182B4 E7 E1 01 00 		      	push 	r3
0182B8 E6 ED A1 FF 		      	push 	-48[bp]
0182BC E6 ED B1 FF 		      	push 	-40[bp]
0182C0 FC 01 00 00 		      	push 	#disassem_189
0182C4 65 E0 F5 42 
0182C8 E6 E5 01 00 		      	push 	[r11]
0182CC B9 FE FD FF 		      	bsr  	DispLS
0182D0 14 EF 51 00 		      	addui	sp,sp,#40
0182D4 3A 82 00 00 		      	bra  	disassem_223
                	disassem_252:
0182D8 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0182DC E7 E1 01 00 		      	push 	r3
0182E0 E6 ED A1 FF 		      	push 	-48[bp]
0182E4 E6 ED B1 FF 		      	push 	-40[bp]
0182E8 FC 01 00 00 		      	push 	#disassem_190
0182EC 65 E0 DD 42 
0182F0 E6 E5 01 00 		      	push 	[r11]
0182F4 B9 F9 FD FF 		      	bsr  	DispLS
0182F8 14 EF 51 00 		      	addui	sp,sp,#40
0182FC 3A 7D 00 00 		      	bra  	disassem_223
                	disassem_253:
018300 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018304 E7 E1 01 00 		      	push 	r3
018308 FC 01 00 00 		      	push 	#disassem_191
01830C 65 E0 C5 42 
018310 E6 E5 01 00 		      	push 	[r11]
018314 B9 C8 FD FF 		      	bsr  	DispIndexedAddr
018318 14 EF 31 00 		      	addui	sp,sp,#24
01831C 3A 79 00 00 		      	bra  	disassem_223
                	disassem_254:
018320 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018324 E7 E1 01 00 		      	push 	r3
018328 FC 01 00 00 		      	push 	#disassem_192
01832C 65 E0 AD 42 
018330 E6 E5 01 00 		      	push 	[r11]
018334 B9 C4 FD FF 		      	bsr  	DispIndexedAddr
018338 14 EF 31 00 		      	addui	sp,sp,#24
01833C 3A 75 00 00 		      	bra  	disassem_223
                	disassem_255:
018340 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018344 E7 E1 01 00 		      	push 	r3
018348 FC 01 00 00 		      	push 	#disassem_193
01834C 65 E0 95 42 
018350 E6 E5 01 00 		      	push 	[r11]
018354 B9 C0 FD FF 		      	bsr  	DispIndexedAddr
018358 14 EF 31 00 		      	addui	sp,sp,#24
01835C 3A 71 00 00 		      	bra  	disassem_223
                	disassem_256:
018360 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018364 E7 E1 01 00 		      	push 	r3
018368 FC 01 00 00 		      	push 	#disassem_194
01836C 65 E0 7D 42 
018370 E6 E5 01 00 		      	push 	[r11]
018374 B9 BC FD FF 		      	bsr  	DispIndexedAddr
018378 14 EF 31 00 		      	addui	sp,sp,#24
01837C 3A 6D 00 00 		      	bra  	disassem_223
                	disassem_257:
018380 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018384 E7 E1 01 00 		      	push 	r3
018388 FC 01 00 00 		      	push 	#disassem_195
01838C 65 E0 65 42 
018390 E6 E5 01 00 		      	push 	[r11]
018394 B9 B8 FD FF 		      	bsr  	DispIndexedAddr
018398 14 EF 31 00 		      	addui	sp,sp,#24
01839C 3A 69 00 00 		      	bra  	disassem_223
                	disassem_258:
0183A0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0183A4 E7 E1 01 00 		      	push 	r3
0183A8 FC 01 00 00 		      	push 	#disassem_196
0183AC 65 E0 4D 42 
0183B0 E6 E5 01 00 		      	push 	[r11]
0183B4 B9 B4 FD FF 		      	bsr  	DispIndexedAddr
0183B8 14 EF 31 00 		      	addui	sp,sp,#24
0183BC 3A 65 00 00 		      	bra  	disassem_223
                	disassem_259:
0183C0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0183C4 E7 E1 01 00 		      	push 	r3
0183C8 FC 01 00 00 		      	push 	#disassem_197
0183CC 65 E0 35 42 
0183D0 E6 E5 01 00 		      	push 	[r11]
0183D4 B9 B0 FD FF 		      	bsr  	DispIndexedAddr
0183D8 14 EF 31 00 		      	addui	sp,sp,#24
0183DC 3A 61 00 00 		      	bra  	disassem_223
                	disassem_260:
0183E0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0183E4 E7 E1 01 00 		      	push 	r3
0183E8 FC 01 00 00 		      	push 	#disassem_198
0183EC 65 E0 1D 42 
0183F0 E6 E5 01 00 		      	push 	[r11]
0183F4 B9 AC FD FF 		      	bsr  	DispIndexedAddr
0183F8 14 EF 31 00 		      	addui	sp,sp,#24
0183FC 3A 5D 00 00 		      	bra  	disassem_223
                	disassem_261:
018400 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018404 E7 E1 01 00 		      	push 	r3
018408 E6 ED A1 FF 		      	push 	-48[bp]
01840C E6 ED B1 FF 		      	push 	-40[bp]
018410 FC 01 00 00 		      	push 	#disassem_199
018414 65 E0 05 42 
018418 E6 E5 01 00 		      	push 	[r11]
01841C B9 D4 FD FF 		      	bsr  	DispLS
018420 14 EF 51 00 		      	addui	sp,sp,#40
018424 3A 58 00 00 		      	bra  	disassem_223
                	disassem_262:
018428 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
01842C E7 E1 01 00 		      	push 	r3
018430 E6 ED A1 FF 		      	push 	-48[bp]
018434 E6 ED B1 FF 		      	push 	-40[bp]
018438 FC 01 00 00 		      	push 	#disassem_200
01843C 65 E0 ED 41 
018440 E6 E5 01 00 		      	push 	[r11]
018444 B9 CF FD FF 		      	bsr  	DispLS
018448 14 EF 51 00 		      	addui	sp,sp,#40
01844C 3A 53 00 00 		      	bra  	disassem_223
                	disassem_263:
018450 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018454 E7 E1 01 00 		      	push 	r3
018458 E6 ED A1 FF 		      	push 	-48[bp]
01845C E6 ED B1 FF 		      	push 	-40[bp]
018460 FC 01 00 00 		      	push 	#disassem_201
018464 65 E0 D5 41 
018468 E6 E5 01 00 		      	push 	[r11]
01846C B9 CA FD FF 		      	bsr  	DispLS
018470 14 EF 51 00 		      	addui	sp,sp,#40
018474 3A 4E 00 00 		      	bra  	disassem_223
                	disassem_264:
018478 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
01847C E7 E1 01 00 		      	push 	r3
018480 E6 ED A1 FF 		      	push 	-48[bp]
018484 E6 ED B1 FF 		      	push 	-40[bp]
018488 FC 01 00 00 		      	push 	#disassem_202
01848C 65 E0 BD 41 
018490 E6 E5 01 00 		      	push 	[r11]
018494 B9 C5 FD FF 		      	bsr  	DispLS
018498 14 EF 51 00 		      	addui	sp,sp,#40
01849C 3A 49 00 00 		      	bra  	disassem_223
                	disassem_265:
0184A0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0184A4 E7 E1 01 00 		      	push 	r3
0184A8 FC 01 00 00 		      	push 	#disassem_203
0184AC 65 E0 A5 41 
0184B0 E6 E5 01 00 		      	push 	[r11]
0184B4 B9 94 FD FF 		      	bsr  	DispIndexedAddr
0184B8 14 EF 31 00 		      	addui	sp,sp,#24
0184BC 3A 45 00 00 		      	bra  	disassem_223
                	disassem_266:
0184C0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0184C4 E7 E1 01 00 		      	push 	r3
0184C8 FC 01 00 00 		      	push 	#disassem_204
0184CC 65 E0 8D 41 
0184D0 E6 E5 01 00 		      	push 	[r11]
0184D4 B9 90 FD FF 		      	bsr  	DispIndexedAddr
0184D8 14 EF 31 00 		      	addui	sp,sp,#24
0184DC 3A 41 00 00 		      	bra  	disassem_223
                	disassem_267:
0184E0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0184E4 E7 E1 01 00 		      	push 	r3
0184E8 FC 01 00 00 		      	push 	#disassem_205
0184EC 65 E0 75 41 
0184F0 E6 E5 01 00 		      	push 	[r11]
0184F4 B9 8C FD FF 		      	bsr  	DispIndexedAddr
0184F8 14 EF 31 00 		      	addui	sp,sp,#24
0184FC 3A 3D 00 00 		      	bra  	disassem_223
                	disassem_268:
018500 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018504 E7 E1 01 00 		      	push 	r3
018508 FC 01 00 00 		      	push 	#disassem_206
01850C 65 E0 5D 41 
018510 E6 E5 01 00 		      	push 	[r11]
018514 B9 88 FD FF 		      	bsr  	DispIndexedAddr
018518 14 EF 31 00 		      	addui	sp,sp,#24
01851C 3A 39 00 00 		      	bra  	disassem_223
                	disassem_269:
018520 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018524 E7 E1 01 00 		      	push 	r3
018528 E6 ED A1 FF 		      	push 	-48[bp]
01852C E6 ED B1 FF 		      	push 	-40[bp]
018530 FC 01 00 00 		      	push 	#disassem_207
018534 65 E0 45 41 
018538 E6 E5 01 00 		      	push 	[r11]
01853C B9 B0 FD FF 		      	bsr  	DispLS
018540 14 EF 51 00 		      	addui	sp,sp,#40
018544 3A 34 00 00 		      	bra  	disassem_223
                	disassem_270:
018548 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
01854C E7 E1 01 00 		      	push 	r3
018550 E6 ED A1 FF 		      	push 	-48[bp]
018554 E6 ED B1 FF 		      	push 	-40[bp]
018558 FC 01 00 00 		      	push 	#disassem_208
01855C 65 E0 2D 41 
018560 E6 E5 01 00 		      	push 	[r11]
018564 B9 AB FD FF 		      	bsr  	DispLS
018568 14 EF 51 00 		      	addui	sp,sp,#40
01856C 3A 2F 00 00 		      	bra  	disassem_223
                	disassem_271:
018570 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018574 E7 E1 01 00 		      	push 	r3
018578 E6 E5 01 00 		      	push 	[r11]
01857C B9 B0 FC FF 		      	bsr  	DumpInsnBytes
018580 14 EF 21 00 		      	addui	sp,sp,#16
018584 FC 01 00 00 		      	push 	#disassem_209
018588 65 E0 11 41 
01858C 39 95 FB FF 		      	bsr  	printf
018590 14 EF 11 00 		      	addui	sp,sp,#8
018594 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018598 E7 E1 01 00 		      	push 	r3
01859C B9 DE FC FF 		      	bsr  	DispRa
0185A0 14 EF 11 00 		      	addui	sp,sp,#8
0185A4 FC 01 00 00 		      	push 	#disassem_210
0185A8 65 E0 05 41 
0185AC 39 91 FB FF 		      	bsr  	printf
0185B0 14 EF 11 00 		      	addui	sp,sp,#8
0185B4 3A 26 00 00 		      	bra  	disassem_223
                	disassem_272:
0185B8 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0185BC E7 E1 01 00 		      	push 	r3
0185C0 E6 E5 01 00 		      	push 	[r11]
0185C4 B9 A7 FC FF 		      	bsr  	DumpInsnBytes
0185C8 14 EF 21 00 		      	addui	sp,sp,#16
0185CC FC 01 00 00 		      	push 	#disassem_211
0185D0 65 E0 E9 40 
0185D4 39 8C FB FF 		      	bsr  	printf
0185D8 14 EF 11 00 		      	addui	sp,sp,#8
0185DC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0185E0 E7 E1 01 00 		      	push 	r3
0185E4 B9 B4 FC FF 		      	bsr  	DispRst
0185E8 14 EF 11 00 		      	addui	sp,sp,#8
0185EC FC 01 00 00 		      	push 	#disassem_212
0185F0 65 E0 DD 40 
0185F4 39 88 FB FF 		      	bsr  	printf
0185F8 14 EF 11 00 		      	addui	sp,sp,#8
0185FC 3A 1D 00 00 		      	bra  	disassem_223
                	disassem_273:
018600 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018604 E7 E1 01 00 		      	push 	r3
018608 E6 E5 01 00 		      	push 	[r11]
01860C B9 9E FC FF 		      	bsr  	DumpInsnBytes
018610 14 EF 21 00 		      	addui	sp,sp,#16
018614 FC 01 00 00 		      	push 	#disassem_213
018618 65 E0 C5 40 
01861C 39 83 FB FF 		      	bsr  	printf
018620 14 EF 11 00 		      	addui	sp,sp,#8
018624 3A 18 00 00 		      	bra  	disassem_223
                	disassem_274:
018628 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
01862C E7 E1 01 00 		      	push 	r3
018630 E6 E5 01 00 		      	push 	[r11]
018634 B9 99 FC FF 		      	bsr  	DumpInsnBytes
018638 14 EF 21 00 		      	addui	sp,sp,#16
01863C FC 01 00 00 		      	push 	#disassem_214
018640 65 E0 A9 40 
018644 39 7E FB FF 		      	bsr  	printf
018648 14 EF 11 00 		      	addui	sp,sp,#8
01864C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018650 E7 E1 01 00 		      	push 	r3
018654 B9 B1 FC FF 		      	bsr  	DispRstc
018658 14 EF 11 00 		      	addui	sp,sp,#8
01865C C6 3D B0 FF 		      	lw   	r3,-40[bp]
018660 BD 01 1A 00 		      	beq  	r3,disassem_317
018664 C6 3D A0 FF 		      	lw   	r3,-48[bp]
018668 82 31 1E 70 		      	asli 	r3,r3,#15
01866C C5 4D E8 FF 		      	lhu  	r4,-12[bp]
018670 0C 42 FE FF 		      	andi 	r4,r4,#-1
018674 02 42 22 78 		      	asri 	r4,r4,#17
018678 82 31 08 1A 		      	or   	r3,r3,r4
01867C E7 E1 01 00 		      	push 	r3
018680 FC 01 00 00 		      	push 	#disassem_215
018684 65 E0 8D 40 
018688 B9 75 FB FF 		      	bsr  	printf
01868C 14 EF 21 00 		      	addui	sp,sp,#16
018690 3A 05 00 00 		      	bra  	disassem_318
                	disassem_317:
018694 C4 3D 68 FF 		      	lh   	r3,-76[bp]
018698 82 31 00 24 		      	sxh  	r3,r3
01869C 82 31 00 24 		      	sxh  	r3,r3
0186A0 82 31 22 78 		      	asri 	r3,r3,#17
0186A4 E7 E1 01 00 		      	push 	r3
0186A8 FC 01 00 00 		      	push 	#disassem_216
0186AC 65 E0 71 40 
0186B0 B9 70 FB FF 		      	bsr  	printf
0186B4 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_318:
0186B8 BA 05 00 00 		      	bra  	disassem_223
                	disassem_275:
0186BC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0186C0 E7 E1 01 00 		      	push 	r3
0186C4 E6 E5 01 00 		      	push 	[r11]
0186C8 39 87 FC FF 		      	bsr  	DumpInsnBytes
0186CC 14 EF 21 00 		      	addui	sp,sp,#16
0186D0 FC 01 00 00 		      	push 	#disassem_217
0186D4 65 E0 51 40 
0186D8 B9 6B FB FF 		      	bsr  	printf
0186DC 14 EF 11 00 		      	addui	sp,sp,#8
0186E0 BA 00 00 00 		      	bra  	disassem_223
                	disassem_223:
0186E4 C6 35 00 00 		      	lw   	r3,[r11]
0186E8 94 31 08 00 		      	addu 	r3,r3,#4
0186EC E3 35 00 00 		      	sw   	r3,[r11]
0186F0 C6 3D 40 FF 		      	lw   	r3,-96[bp]
0186F4 BD 01 06 00 		      	beq  	r3,disassem_319
0186F8 39 71 FC FF 		      	bsr  	reverse_video
0186FC E3 0D 40 FF 		      	sw   	r0,-96[bp]
                	disassem_319:
018700 C6 3D D0 FF 		      	lw   	r3,-24[bp]
018704 86 31 F8 00 		      	cmp  	r3,r3,#124
018708 BD 01 98 F7 		      	beq  	r3,disassem_219
                	disassem_220:
                	disassem_321:
01870C 57 CF 10 00 		      	pop  	r12
018710 57 BF 10 00 		      	pop  	r11
018714 82 ED 01 1A 		      	mov  	sp,bp
018718 57 BF 11 00 		      	pop  	bp
01871C 57 CF 11 00 		      	pop  	xlr
018720 57 FF 11 00 		      	pop  	lr
018724 37 FF 01 00 		      	rtl  	#0
                	disassem_218:
018728 C6 FD 11 00 		      	lw   	lr,8[bp]
01872C E3 FD 21 00 		      	sw   	lr,16[bp]
018730 BA FB FF FF 		      	bra  	disassem_321
                	endpublic
                	
                	public code disassem20:
018734 E7 EF 01 00 		      	push 	lr
018738 67 EE 01 00 		      	push 	xlr
01873C E7 ED 01 00 		      	push 	bp
018740 FC 01 00 00 		      	ldi  	xlr,#disassem_323
018744 0A C0 39 0F 
018748 02 BF 01 1A 		      	mov  	bp,sp
01874C 15 EF 21 00 		      	subui	sp,sp,#16
018750 FC 01 00 00 		      	push 	#disassem_322
018754 65 E0 21 40 
018758 B9 5B FB FF 		      	bsr  	printf
01875C 14 EF 11 00 		      	addui	sp,sp,#8
018760 E3 0D F0 FF 		      	sw   	r0,-8[bp]
                	disassem_324:
018764 C6 3D F0 FF 		      	lw   	r3,-8[bp]
018768 86 31 20 00 		      	cmp  	r3,r3,#16
01876C BD 31 0E 00 		      	bge  	r3,disassem_325
018770 E6 ED 41 00 		      	push 	32[bp]
018774 E5 ED 31 00 		      	pea  	24[bp]
018778 39 D0 FD FF 		      	bsr  	disassem
01877C 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_326:
018780 E4 1D F0 FF 		      	inc  	-8[bp],#1
018784 3A FC FF FF 		      	bra  	disassem_324
                	disassem_325:
                	disassem_327:
018788 82 ED 01 1A 		      	mov  	sp,bp
01878C 57 BF 11 00 		      	pop  	bp
018790 57 CF 11 00 		      	pop  	xlr
018794 57 FF 11 00 		      	pop  	lr
018798 37 FF 01 00 		      	rtl  	#0
                	disassem_323:
01879C C6 FD 11 00 		      	lw   	lr,8[bp]
0187A0 E3 FD 21 00 		      	sw   	lr,16[bp]
0187A4 BA FC FF FF 		      	bra  	disassem_327
                	endpublic
                	
                		code
0187A8 00 00 00 00 		align	1
0187AC 00 00 00 00 
                	
                	public code dbg_DisplayHelp:
0187B0 E7 EF 01 00 		      	push 	lr
0187B4 67 EE 01 00 		      	push 	xlr
0187B8 E7 ED 01 00 		      	push 	bp
0187BC FC 01 00 00 		      	ldi  	xlr,#debugger_15
0187C0 0A C0 99 11 
0187C4 02 BF 01 1A 		      	mov  	bp,sp
0187C8 FC 01 00 00 		      	push 	#debugger_0
0187CC 65 E0 D5 5A 
0187D0 B9 4C FB FF 		      	bsr  	printf
0187D4 14 EF 11 00 		      	addui	sp,sp,#8
0187D8 FC 01 00 00 		      	push 	#debugger_1
0187DC 65 E0 AD 5A 
0187E0 B9 4A FB FF 		      	bsr  	printf
0187E4 14 EF 11 00 		      	addui	sp,sp,#8
0187E8 FC 01 00 00 		      	push 	#debugger_2
0187EC 65 E0 D1 59 
0187F0 B9 48 FB FF 		      	bsr  	printf
0187F4 14 EF 11 00 		      	addui	sp,sp,#8
0187F8 FC 01 00 00 		      	push 	#debugger_3
0187FC 65 E0 81 59 
018800 B9 46 FB FF 		      	bsr  	printf
018804 14 EF 11 00 		      	addui	sp,sp,#8
018808 FC 01 00 00 		      	push 	#debugger_4
01880C 65 E0 BD 58 
018810 B9 44 FB FF 		      	bsr  	printf
018814 14 EF 11 00 		      	addui	sp,sp,#8
018818 FC 01 00 00 		      	push 	#debugger_5
01881C 65 E0 DD 57 
018820 B9 42 FB FF 		      	bsr  	printf
018824 14 EF 11 00 		      	addui	sp,sp,#8
018828 FC 01 00 00 		      	push 	#debugger_6
01882C 65 E0 FD 56 
018830 B9 40 FB FF 		      	bsr  	printf
018834 14 EF 11 00 		      	addui	sp,sp,#8
018838 FC 01 00 00 		      	push 	#debugger_7
01883C 65 E0 29 56 
018840 B9 3E FB FF 		      	bsr  	printf
018844 14 EF 11 00 		      	addui	sp,sp,#8
018848 FC 01 00 00 		      	push 	#debugger_8
01884C 65 E0 51 55 
018850 B9 3C FB FF 		      	bsr  	printf
018854 14 EF 11 00 		      	addui	sp,sp,#8
018858 FC 01 00 00 		      	push 	#debugger_9
01885C 65 E0 AD 54 
018860 B9 3A FB FF 		      	bsr  	printf
018864 14 EF 11 00 		      	addui	sp,sp,#8
018868 FC 01 00 00 		      	push 	#debugger_10
01886C 65 E0 CD 53 
018870 B9 38 FB FF 		      	bsr  	printf
018874 14 EF 11 00 		      	addui	sp,sp,#8
018878 FC 01 00 00 		      	push 	#debugger_11
01887C 65 E0 F1 52 
018880 B9 36 FB FF 		      	bsr  	printf
018884 14 EF 11 00 		      	addui	sp,sp,#8
018888 FC 01 00 00 		      	push 	#debugger_12
01888C 65 E0 41 52 
018890 B9 34 FB FF 		      	bsr  	printf
018894 14 EF 11 00 		      	addui	sp,sp,#8
018898 FC 01 00 00 		      	push 	#debugger_13
01889C 65 E0 F1 51 
0188A0 B9 32 FB FF 		      	bsr  	printf
0188A4 14 EF 11 00 		      	addui	sp,sp,#8
0188A8 FC 01 00 00 		      	push 	#debugger_14
0188AC 65 E0 D5 51 
0188B0 B9 30 FB FF 		      	bsr  	printf
0188B4 14 EF 11 00 		      	addui	sp,sp,#8
                	debugger_16:
0188B8 82 ED 01 1A 		      	mov  	sp,bp
0188BC 57 BF 11 00 		      	pop  	bp
0188C0 57 CF 11 00 		      	pop  	xlr
0188C4 57 FF 11 00 		      	pop  	lr
0188C8 37 FF 01 00 		      	rtl  	#0
                	debugger_15:
0188CC C6 FD 11 00 		      	lw   	lr,8[bp]
0188D0 E3 FD 21 00 		      	sw   	lr,16[bp]
0188D4 BA FC FF FF 		      	bra  	debugger_16
                	endpublic
                	
                	public code GetVBR:
0188D8 15 EF 21 00 		      	subui	sp,sp,#16
0188DC E7 ED 01 00 		      	push 	bp
0188E0 02 BF 01 1A 		      	mov  	bp,sp
0188E4 02 10 14 3E 		      	     	        mfspr r1,vbr
                	    
                	debugger_18:
0188E8 82 ED 01 1A 		      	mov  	sp,bp
0188EC 57 BF 11 00 		      	pop  	bp
0188F0 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code set_vector:
0188F4 E7 EF 01 00 		      	push 	lr
0188F8 67 EE 01 00 		      	push 	xlr
0188FC E7 ED 01 00 		      	push 	bp
018900 FC 01 00 00 		      	ldi  	xlr,#debugger_19
018904 0A C0 D1 12 
018908 02 BF 01 1A 		      	mov  	bp,sp
01890C C6 3D 30 00 		      	lw   	r3,24[bp]
018910 96 31 FE 03 		      	cmpu 	r3,r3,#511
018914 BD 51 0C 00 		      	ble  	r3,debugger_20
                	debugger_22:
018918 82 ED 01 1A 		      	mov  	sp,bp
01891C 57 BF 11 00 		      	pop  	bp
018920 57 CF 11 00 		      	pop  	xlr
018924 57 FF 11 00 		      	pop  	lr
018928 37 FF 01 00 		      	rtl  	#0
                	debugger_20:
01892C C6 3D 40 00 		      	lw   	r3,32[bp]
018930 BD 01 08 00 		      	beq  	r3,debugger_25
018934 C6 3D 40 00 		      	lw   	r3,32[bp]
018938 8C 31 06 00 		      	and  	r3,r3,#3
01893C BD 01 04 00 		      	beq  	r3,debugger_23
                	debugger_25:
018940 3A FB FF FF 		      	bra  	debugger_22
                	debugger_23:
018944 C6 3D 30 00 		      	lw   	r3,24[bp]
018948 82 31 06 70 		      	asli 	r3,r3,#3
01894C E7 E1 01 00 		      	push 	r3
018950 39 F1 FF FF 		      	bsr  	GetVBR
018954 57 3F 10 00 		      	pop  	r3
018958 82 40 00 1A 		      	mov  	r4,r1
01895C C6 5D 40 00 		      	lw   	r5,32[bp]
018960 6B 52 06 00 		      	sw   	r5,0[r4+r3]
018964 BA F6 FF FF 		      	bra  	debugger_22
                	debugger_19:
018968 C6 FD 11 00 		      	lw   	lr,8[bp]
01896C E3 FD 21 00 		      	sw   	lr,16[bp]
018970 3A F5 FF FF 		      	bra  	debugger_22
                	endpublic
                	
                	public code dbg_GetCursorRow:
018974 15 EF 21 00 		      	subui	sp,sp,#16
018978 E7 ED 01 00 		      	push 	bp
01897C 02 BF 01 1A 		      	mov  	bp,sp
018980 41 1C 28 04 		      	     	        lbu    r1,TCB_hJCB[tr]
018984 97 FF FF FF 	        mulu   r1,#JCB_Size
018988 7C C5 00 00 	        addui  r1,r1,#JCB_Array
01898C 94 10 00 00 
018990 C1 10 18 08 	        lbu    r1,JCB_CursorRow[r1]
                	    
                	debugger_27:
018994 82 ED 01 1A 		      	mov  	sp,bp
018998 57 BF 11 00 		      	pop  	bp
01899C 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code dbg_GetCursorCol:
0189A0 15 EF 21 00 		      	subui	sp,sp,#16
0189A4 E7 ED 01 00 		      	push 	bp
0189A8 02 BF 01 1A 		      	mov  	bp,sp
0189AC 41 1C 28 04 		      	     	        lbu    r1,TCB_hJCB[tr]
0189B0 97 FF FF FF 	        mulu   r1,#JCB_Size
0189B4 7C C5 00 00 	        addui  r1,r1,#JCB_Array
0189B8 94 10 00 00 
0189BC C1 10 1A 08 	        lbu    r1,JCB_CursorCol[r1]
                	    
                	debugger_29:
0189C0 82 ED 01 1A 		      	mov  	sp,bp
0189C4 57 BF 11 00 		      	pop  	bp
0189C8 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code dbg_GetDBAD:
0189CC 15 EF 21 00 		      	subui	sp,sp,#16
0189D0 E7 ED 01 00 		      	push 	bp
0189D4 02 BF 01 1A 		      	mov  	bp,sp
0189D8 C6 3D 30 00 		      	lw   	r3,24[bp]
0189DC 86 41 00 00 		      	cmp  	r4,r3,#0
0189E0 3D 02 10 00 		      	beq  	r4,debugger_32
0189E4 86 41 02 00 		      	cmp  	r4,r3,#1
0189E8 3D 02 10 00 		      	beq  	r4,debugger_33
0189EC 86 41 04 00 		      	cmp  	r4,r3,#2
0189F0 3D 02 10 00 		      	beq  	r4,debugger_34
0189F4 86 41 06 00 		      	cmp  	r4,r3,#3
0189F8 3D 02 10 00 		      	beq  	r4,debugger_35
0189FC 3A 06 00 00 		      	bra  	debugger_31
                	debugger_32:
018A00 02 10 64 3E 		      	     	mfspr  r1,dbad0  
018A04 3A 05 00 00 		      	bra  	debugger_31
                	debugger_33:
018A08 02 10 66 3E 		      	     	mfspr  r1,dbad1  
018A0C 3A 04 00 00 		      	bra  	debugger_31
                	debugger_34:
018A10 02 10 68 3E 		      	     	mfspr  r1,dbad2  
018A14 3A 03 00 00 		      	bra  	debugger_31
                	debugger_35:
018A18 02 10 6A 3E 		      	     	mfspr  r1,dbad3  
018A1C 3A 02 00 00 		      	bra  	debugger_31
                	debugger_36:
018A20 82 ED 01 1A 		      	mov  	sp,bp
018A24 57 BF 11 00 		      	pop  	bp
018A28 37 FF 21 00 		      	rtl  	#16
                	debugger_31:
018A2C BA FE FF FF 		      	bra  	debugger_36
                	endpublic
                	
                	public code dbg_SetDBAD:
018A30 15 EF 21 00 		      	subui	sp,sp,#16
018A34 E7 ED 01 00 		      	push 	bp
018A38 02 BF 01 1A 		      	mov  	bp,sp
018A3C C6 3D 30 00 		      	lw   	r3,24[bp]
018A40 86 41 00 00 		      	cmp  	r4,r3,#0
018A44 3D 02 10 00 		      	beq  	r4,debugger_39
018A48 86 41 02 00 		      	cmp  	r4,r3,#1
018A4C 3D 02 12 00 		      	beq  	r4,debugger_40
018A50 86 41 04 00 		      	cmp  	r4,r3,#2
018A54 3D 02 14 00 		      	beq  	r4,debugger_41
018A58 86 41 06 00 		      	cmp  	r4,r3,#3
018A5C 3D 02 16 00 		      	beq  	r4,debugger_42
018A60 BA 06 00 00 		      	bra  	debugger_38
                	debugger_39:
018A64 C6 1D 40 00 		      	     	          lw    r1,32[bp]
018A68 82 00 64 3C 	          mtspr dbad0,r1
                	          
018A6C 3A 05 00 00 		      	bra  	debugger_38
                	debugger_40:
018A70 C6 1D 40 00 		      	     	          lw    r1,32[bp]
018A74 82 00 66 3C 	          mtspr dbad1,r1
                	          
018A78 BA 03 00 00 		      	bra  	debugger_38
                	debugger_41:
018A7C C6 1D 40 00 		      	     	          lw    r1,32[bp]
018A80 82 00 68 3C 	          mtspr dbad2,r1
                	          
018A84 3A 02 00 00 		      	bra  	debugger_38
                	debugger_42:
018A88 C6 1D 40 00 		      	     	          lw    r1,32[bp]
018A8C 82 00 6A 3C 	          mtspr dbad3,r1
                	          
018A90 BA 00 00 00 		      	bra  	debugger_38
                	debugger_38:
                	debugger_43:
018A94 82 ED 01 1A 		      	mov  	sp,bp
018A98 57 BF 11 00 		      	pop  	bp
018A9C 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code dbg_arm:
018AA0 15 EF 21 00 		      	subui	sp,sp,#16
018AA4 E7 ED 01 00 		      	push 	bp
018AA8 02 BF 01 1A 		      	mov  	bp,sp
018AAC C6 1D 30 00 		      	     	         lw    r1,24[bp]
018AB0 82 00 6C 3C 	         mtspr dbctrl,r1
                	     
                	debugger_45:
018AB4 82 ED 01 1A 		      	mov  	sp,bp
018AB8 57 BF 11 00 		      	pop  	bp
018ABC 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code CvtScreenToAscii:
018AC0 15 EF 21 00 		      	subui	sp,sp,#16
018AC4 E7 ED 01 00 		      	push 	bp
018AC8 02 BF 01 1A 		      	mov  	bp,sp
018ACC C6 1D 30 00 		      	     	         lw    r1,24[bp]
018AD0 39 AD F0 FF 	         bsr   ScreenToAscii
                	     
                	debugger_47:
018AD4 82 ED 01 1A 		      	mov  	sp,bp
018AD8 57 BF 11 00 		      	pop  	bp
018ADC 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code dbg_getchar:
018AE0 15 EF 21 00 		      	subui	sp,sp,#16
018AE4 E7 ED 01 00 		      	push 	bp
018AE8 02 BF 01 1A 		      	mov  	bp,sp
018AEC 15 EF 11 00 		      	subui	sp,sp,#8
018AF0 E7 E5 01 00 		      	push 	r11
018AF4 7C C0 00 00 		      	ldi  	r11,#linendx
018AF8 0A B0 40 04 
018AFC 0A 30 FE FF 		      	ldi  	r3,#-1
018B00 E1 3D FC FF 		      	sc   	r3,-2[bp]
018B04 C6 35 00 00 		      	lw   	r3,[r11]
018B08 86 31 A8 00 		      	cmp  	r3,r3,#84
018B0C BD 31 0E 00 		      	bge  	r3,debugger_49
018B10 C6 35 00 00 		      	lw   	r3,[r11]
018B14 82 31 02 70 		      	asli 	r3,r3,#1
018B18 7C C0 00 00 		      	lcu  	r4,linebuf[r3]
018B1C C3 41 50 04 
018B20 E1 4D FC FF 		      	sc   	r4,-2[bp]
018B24 E4 15 00 00 		      	inc  	[r11],#1
                	debugger_49:
018B28 C3 3D FC FF 		      	lcu  	r3,-2[bp]
018B2C 82 11 00 1A 		      	mov  	r1,r3
                	debugger_51:
018B30 57 BF 10 00 		      	pop  	r11
018B34 82 ED 01 1A 		      	mov  	sp,bp
018B38 57 BF 11 00 		      	pop  	bp
018B3C 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code ignore_blanks:
018B40 15 EF 21 00 		      	subui	sp,sp,#16
018B44 E7 ED 01 00 		      	push 	bp
018B48 02 BF 01 1A 		      	mov  	bp,sp
018B4C 15 EF 11 00 		      	subui	sp,sp,#8
                	debugger_53:
018B50 7C C0 00 00 		      	lw   	r3,linendx
018B54 46 30 40 04 
018B58 82 31 02 70 		      	asli 	r3,r3,#1
018B5C 7C C0 00 00 		      	lcu  	r4,linebuf[r3]
018B60 C3 41 50 04 
018B64 E1 4D FC FF 		      	sc   	r4,-2[bp]
018B68 7C C0 00 00 		      	inc  	linendx,#1
018B6C 64 10 40 04 
018B70 C3 3D FC FF 		      	lcu  	r3,-2[bp]
018B74 86 31 40 00 		      	cmp  	r3,r3,#32
018B78 BD 01 EC FF 		      	beq  	r3,debugger_53
                	debugger_54:
                	debugger_55:
018B7C 82 ED 01 1A 		      	mov  	sp,bp
018B80 57 BF 11 00 		      	pop  	bp
018B84 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code dbg_ungetch:
018B88 15 EF 21 00 		      	subui	sp,sp,#16
018B8C E7 ED 01 00 		      	push 	bp
018B90 02 BF 01 1A 		      	mov  	bp,sp
018B94 7C C0 00 00 		      	lw   	r3,linendx
018B98 46 30 40 04 
018B9C BD 51 06 00 		      	ble  	r3,debugger_57
018BA0 7C C0 00 00 		      	dec  	linendx,#1
018BA4 64 F0 41 04 
                	debugger_57:
                	debugger_59:
018BA8 82 ED 01 1A 		      	mov  	sp,bp
018BAC 57 BF 11 00 		      	pop  	bp
018BB0 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code dbg_nextNonSpace:
018BB4 E7 EF 01 00 		      	push 	lr
018BB8 67 EE 01 00 		      	push 	xlr
018BBC E7 ED 01 00 		      	push 	bp
018BC0 FC 01 00 00 		      	ldi  	xlr,#debugger_60
018BC4 0A C0 61 18 
018BC8 02 BF 01 1A 		      	mov  	bp,sp
018BCC 15 EF 11 00 		      	subui	sp,sp,#8
                	debugger_61:
018BD0 7C C0 00 00 		      	lw   	r3,linendx
018BD4 46 30 40 04 
018BD8 86 31 A8 00 		      	cmp  	r3,r3,#84
018BDC BD 31 26 00 		      	bge  	r3,debugger_62
018BE0 39 E0 FF FF 		      	bsr  	dbg_getchar
018BE4 82 30 00 1A 		      	mov  	r3,r1
018BE8 82 31 00 22 		      	sxc  	r3,r3
018BEC E1 3D FC FF 		      	sc   	r3,-2[bp]
018BF0 C3 3D FC FF 		      	lcu  	r3,-2[bp]
018BF4 86 31 40 00 		      	cmp  	r3,r3,#32
018BF8 BD 11 08 00 		      	bne  	r3,debugger_65
018BFC C3 3D FC FF 		      	lcu  	r3,-2[bp]
018C00 86 31 FE FF 		      	cmp  	r3,r3,#-1
018C04 BD 11 10 00 		      	bne  	r3,debugger_63
                	debugger_65:
018C08 C3 3D FC FF 		      	lcu  	r3,-2[bp]
018C0C 82 11 00 1A 		      	mov  	r1,r3
                	debugger_66:
018C10 82 ED 01 1A 		      	mov  	sp,bp
018C14 57 BF 11 00 		      	pop  	bp
018C18 57 CF 11 00 		      	pop  	xlr
018C1C 57 FF 11 00 		      	pop  	lr
018C20 37 FF 01 00 		      	rtl  	#0
                	debugger_63:
018C24 BA F5 FF FF 		      	bra  	debugger_61
                	debugger_62:
018C28 0A 10 FE FF 		      	ldi  	r1,#-1
018C2C BA FC FF FF 		      	bra  	debugger_66
                	debugger_60:
018C30 C6 FD 11 00 		      	lw   	lr,8[bp]
018C34 E3 FD 21 00 		      	sw   	lr,16[bp]
018C38 3A FB FF FF 		      	bra  	debugger_66
                	endpublic
                	
                	public code dbg_GetHexNumber:
018C3C E7 EF 01 00 		      	push 	lr
018C40 67 EE 01 00 		      	push 	xlr
018C44 E7 ED 01 00 		      	push 	bp
018C48 FC 01 00 00 		      	ldi  	xlr,#debugger_67
018C4C 0A C0 89 1A 
018C50 02 BF 01 1A 		      	mov  	bp,sp
018C54 15 EF 31 00 		      	subui	sp,sp,#24
018C58 E3 0D E0 FF 		      	sw   	r0,-16[bp]
018C5C E3 0D D0 FF 		      	sw   	r0,-24[bp]
                	debugger_68:
018C60 0A 30 02 00 		      	ldi  	r3,#1
018C64 BD 01 6E 00 		      	beq  	r3,debugger_69
018C68 C6 3D E0 FF 		      	lw   	r3,-16[bp]
018C6C 82 31 08 70 		      	asl  	r3,r3,#4
018C70 E3 3D E0 FF 		      	sw   	r3,-16[bp]
018C74 B9 CD FF FF 		      	bsr  	dbg_getchar
018C78 82 30 00 1A 		      	mov  	r3,r1
018C7C 82 31 00 22 		      	sxc  	r3,r3
018C80 E1 3D FC FF 		      	sc   	r3,-2[bp]
018C84 C3 3D FC FF 		      	lcu  	r3,-2[bp]
018C88 96 31 60 00 		      	cmpu 	r3,r3,#48
018C8C BD 41 14 00 		      	blt  	r3,debugger_70
018C90 C3 3D FC FF 		      	lcu  	r3,-2[bp]
018C94 96 31 72 00 		      	cmpu 	r3,r3,#57
018C98 BD 21 0E 00 		      	bgt  	r3,debugger_70
018C9C C6 3D E0 FF 		      	lw   	r3,-16[bp]
018CA0 C3 4D FC FF 		      	lcu  	r4,-2[bp]
018CA4 15 42 60 00 		      	subu 	r4,r4,#48
018CA8 82 31 08 1A 		      	or   	r3,r3,r4
018CAC E3 3D E0 FF 		      	sw   	r3,-16[bp]
018CB0 BA 11 00 00 		      	bra  	debugger_71
                	debugger_70:
018CB4 C3 3D FC FF 		      	lcu  	r3,-2[bp]
018CB8 96 31 82 00 		      	cmpu 	r3,r3,#65
018CBC BD 41 14 00 		      	blt  	r3,debugger_72
018CC0 C3 3D FC FF 		      	lcu  	r3,-2[bp]
018CC4 96 31 8C 00 		      	cmpu 	r3,r3,#70
018CC8 BD 21 0E 00 		      	bgt  	r3,debugger_72
018CCC C6 3D E0 FF 		      	lw   	r3,-16[bp]
018CD0 C3 4D FC FF 		      	lcu  	r4,-2[bp]
018CD4 14 42 92 FF 		      	addu 	r4,r4,#-55
018CD8 82 31 08 1A 		      	or   	r3,r3,r4
018CDC E3 3D E0 FF 		      	sw   	r3,-16[bp]
018CE0 BA 0B 00 00 		      	bra  	debugger_73
                	debugger_72:
018CE4 C3 3D FC FF 		      	lcu  	r3,-2[bp]
018CE8 96 31 C2 00 		      	cmpu 	r3,r3,#97
018CEC BD 41 14 00 		      	blt  	r3,debugger_74
018CF0 C3 3D FC FF 		      	lcu  	r3,-2[bp]
018CF4 96 31 CC 00 		      	cmpu 	r3,r3,#102
018CF8 BD 21 0E 00 		      	bgt  	r3,debugger_74
018CFC C6 3D E0 FF 		      	lw   	r3,-16[bp]
018D00 C3 4D FC FF 		      	lcu  	r4,-2[bp]
018D04 14 42 48 FF 		      	addu 	r4,r4,#-92
018D08 82 31 08 1A 		      	or   	r3,r3,r4
018D0C E3 3D E0 FF 		      	sw   	r3,-16[bp]
018D10 BA 05 00 00 		      	bra  	debugger_75
                	debugger_74:
018D14 C6 3D 30 00 		      	lw   	r3,24[bp]
018D18 C6 4D E0 FF 		      	lw   	r4,-16[bp]
018D1C E3 41 00 00 		      	sw   	r4,[r3]
018D20 C6 3D D0 FF 		      	lw   	r3,-24[bp]
018D24 82 11 00 1A 		      	mov  	r1,r3
                	debugger_76:
018D28 82 ED 01 1A 		      	mov  	sp,bp
018D2C 57 BF 11 00 		      	pop  	bp
018D30 57 CF 11 00 		      	pop  	xlr
018D34 57 FF 11 00 		      	pop  	lr
018D38 37 FF 01 00 		      	rtl  	#0
                	debugger_75:
                	debugger_73:
                	debugger_71:
018D3C BA E4 FF FF 		      	bra  	debugger_68
                	debugger_69:
018D40 3A FD FF FF 		      	bra  	debugger_76
                	debugger_67:
018D44 C6 FD 11 00 		      	lw   	lr,8[bp]
018D48 E3 FD 21 00 		      	sw   	lr,16[bp]
018D4C BA FB FF FF 		      	bra  	debugger_76
                	endpublic
                	
                	public code dbg_ReadSetIB:
018D50 E7 EF 01 00 		      	push 	lr
018D54 67 EE 01 00 		      	push 	xlr
018D58 E7 ED 01 00 		      	push 	bp
018D5C FC 01 00 00 		      	ldi  	xlr,#debugger_79
018D60 0A C0 69 1D 
018D64 02 BF 01 1A 		      	mov  	bp,sp
018D68 15 EF 21 00 		      	subui	sp,sp,#16
018D6C E7 E5 01 00 		      	push 	r11
018D70 FC C0 00 00 		      	ldi  	r11,#dbctrl
018D74 0A B0 E0 05 
018D78 C6 3D 30 00 		      	lw   	r3,24[bp]
018D7C 96 31 06 00 		      	cmpu 	r3,r3,#3
018D80 BD 51 0E 00 		      	ble  	r3,debugger_80
                	debugger_82:
018D84 57 BF 10 00 		      	pop  	r11
018D88 82 ED 01 1A 		      	mov  	sp,bp
018D8C 57 BF 11 00 		      	pop  	bp
018D90 57 CF 11 00 		      	pop  	xlr
018D94 57 FF 11 00 		      	pop  	lr
018D98 37 FF 01 00 		      	rtl  	#0
                	debugger_80:
018D9C 39 C3 FF FF 		      	bsr  	dbg_nextNonSpace
018DA0 82 30 00 1A 		      	mov  	r3,r1
018DA4 82 31 00 22 		      	sxc  	r3,r3
018DA8 E1 3D FC FF 		      	sc   	r3,-2[bp]
018DAC C3 3D FC FF 		      	lcu  	r3,-2[bp]
018DB0 86 31 7A 00 		      	cmp  	r3,r3,#61
018DB4 BD 11 34 00 		      	bne  	r3,debugger_83
018DB8 E5 ED E1 FF 		      	pea  	-16[bp]
018DBC 39 D0 FF FF 		      	bsr  	dbg_GetHexNumber
018DC0 14 EF 11 00 		      	addui	sp,sp,#8
018DC4 82 30 00 1A 		      	mov  	r3,r1
018DC8 BD 51 28 00 		      	ble  	r3,debugger_85
018DCC E6 ED E1 FF 		      	push 	-16[bp]
018DD0 E6 ED 31 00 		      	push 	24[bp]
018DD4 B9 8B FF FF 		      	bsr  	dbg_SetDBAD
018DD8 14 EF 21 00 		      	addui	sp,sp,#16
018DDC 0A 30 02 00 		      	ldi  	r3,#1
018DE0 C6 4D 30 00 		      	lw   	r4,24[bp]
018DE4 82 31 08 60 		      	asl  	r3,r3,r4
018DE8 C6 45 00 00 		      	lw   	r4,[r11]
018DEC 02 42 06 1A 		      	or   	r4,r4,r3
018DF0 E3 45 00 00 		      	sw   	r4,[r11]
018DF4 7C 03 00 00 		      	ldi  	r3,#196608
018DF8 0A 30 00 00 
018DFC C6 4D 30 00 		      	lw   	r4,24[bp]
018E00 02 42 02 70 		      	asli 	r4,r4,#1
018E04 82 31 08 60 		      	asl  	r3,r3,r4
018E08 8E 31 FE FF 		      	com  	r3,r3
018E0C C6 45 00 00 		      	lw   	r4,[r11]
018E10 02 42 06 18 		      	and  	r4,r4,r3
018E14 E3 45 00 00 		      	sw   	r4,[r11]
                	debugger_85:
018E18 3A 13 00 00 		      	bra  	debugger_84
                	debugger_83:
018E1C C3 3D FC FF 		      	lcu  	r3,-2[bp]
018E20 86 31 7E 00 		      	cmp  	r3,r3,#63
018E24 BD 11 46 00 		      	bne  	r3,debugger_87
018E28 C6 35 00 00 		      	lw   	r3,[r11]
018E2C 7C 03 00 00 		      	ldi  	r4,#196608
018E30 0A 40 00 00 
018E34 C6 5D 30 00 		      	lw   	r5,24[bp]
018E38 82 52 02 70 		      	asli 	r5,r5,#1
018E3C 02 42 0A 60 		      	asl  	r4,r4,r5
018E40 82 31 08 18 		      	and  	r3,r3,r4
018E44 BD 11 2C 00 		      	bne  	r3,debugger_89
018E48 C6 35 00 00 		      	lw   	r3,[r11]
018E4C 0A 40 02 00 		      	ldi  	r4,#1
018E50 C6 5D 30 00 		      	lw   	r5,24[bp]
018E54 02 42 0A 60 		      	asl  	r4,r4,r5
018E58 0A 50 02 00 		      	ldi  	r5,#1
018E5C C6 6D 30 00 		      	lw   	r6,24[bp]
018E60 82 52 0C 60 		      	asl  	r5,r5,r6
018E64 02 42 0A 40 		      	seq  	r4,r4,r5
018E68 82 31 08 18 		      	and  	r3,r3,r4
018E6C BD 01 18 00 		      	beq  	r3,debugger_89
018E70 E6 ED 31 00 		      	push 	24[bp]
018E74 39 6B FF FF 		      	bsr  	dbg_GetDBAD
018E78 14 EF 11 00 		      	addui	sp,sp,#8
018E7C 82 30 00 1A 		      	mov  	r3,r1
018E80 E7 E1 01 00 		      	push 	r3
018E84 E6 ED 31 00 		      	push 	24[bp]
018E88 FC 01 00 00 		      	push 	#debugger_77
018E8C 65 E0 8D 51 
018E90 B9 74 FA FF 		      	bsr  	printf
018E94 14 EF 31 00 		      	addui	sp,sp,#24
018E98 3A 03 00 00 		      	bra  	debugger_90
                	debugger_89:
018E9C E6 ED 31 00 		      	push 	24[bp]
018EA0 FC 01 00 00 		      	push 	#debugger_78
018EA4 65 E0 39 51 
018EA8 B9 71 FA FF 		      	bsr  	printf
018EAC 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_90:
                	debugger_87:
                	debugger_84:
018EB0 BA DA FF FF 		      	bra  	debugger_82
                	debugger_79:
018EB4 C6 FD 11 00 		      	lw   	lr,8[bp]
018EB8 E3 FD 21 00 		      	sw   	lr,16[bp]
018EBC 3A D9 FF FF 		      	bra  	debugger_82
                	endpublic
                	
                	public code dbg_ReadSetDB:
018EC0 E7 EF 01 00 		      	push 	lr
018EC4 67 EE 01 00 		      	push 	xlr
018EC8 E7 ED 01 00 		      	push 	bp
018ECC FC 01 00 00 		      	ldi  	xlr,#debugger_95
018ED0 0A C0 B9 20 
018ED4 02 BF 01 1A 		      	mov  	bp,sp
018ED8 15 EF 21 00 		      	subui	sp,sp,#16
018EDC E7 E5 01 00 		      	push 	r11
018EE0 FC C0 00 00 		      	ldi  	r11,#dbctrl
018EE4 0A B0 E0 05 
018EE8 C6 3D 30 00 		      	lw   	r3,24[bp]
018EEC 96 31 06 00 		      	cmpu 	r3,r3,#3
018EF0 BD 51 0E 00 		      	ble  	r3,debugger_96
                	debugger_98:
018EF4 57 BF 10 00 		      	pop  	r11
018EF8 82 ED 01 1A 		      	mov  	sp,bp
018EFC 57 BF 11 00 		      	pop  	bp
018F00 57 CF 11 00 		      	pop  	xlr
018F04 57 FF 11 00 		      	pop  	lr
018F08 37 FF 01 00 		      	rtl  	#0
                	debugger_96:
018F0C 39 95 FF FF 		      	bsr  	dbg_nextNonSpace
018F10 82 30 00 1A 		      	mov  	r3,r1
018F14 82 31 00 22 		      	sxc  	r3,r3
018F18 E1 3D FC FF 		      	sc   	r3,-2[bp]
018F1C C3 3D FC FF 		      	lcu  	r3,-2[bp]
018F20 86 31 7A 00 		      	cmp  	r3,r3,#61
018F24 BD 11 44 00 		      	bne  	r3,debugger_99
018F28 E5 ED E1 FF 		      	pea  	-16[bp]
018F2C 39 A2 FF FF 		      	bsr  	dbg_GetHexNumber
018F30 14 EF 11 00 		      	addui	sp,sp,#8
018F34 82 30 00 1A 		      	mov  	r3,r1
018F38 BD 51 38 00 		      	ble  	r3,debugger_101
018F3C E6 ED E1 FF 		      	push 	-16[bp]
018F40 E6 ED 31 00 		      	push 	24[bp]
018F44 B9 5D FF FF 		      	bsr  	dbg_SetDBAD
018F48 14 EF 21 00 		      	addui	sp,sp,#16
018F4C 0A 30 02 00 		      	ldi  	r3,#1
018F50 C6 4D 30 00 		      	lw   	r4,24[bp]
018F54 82 31 08 60 		      	asl  	r3,r3,r4
018F58 C6 45 00 00 		      	lw   	r4,[r11]
018F5C 02 42 06 1A 		      	or   	r4,r4,r3
018F60 E3 45 00 00 		      	sw   	r4,[r11]
018F64 7C 03 00 00 		      	ldi  	r3,#196608
018F68 0A 30 00 00 
018F6C C6 4D 30 00 		      	lw   	r4,24[bp]
018F70 02 42 02 70 		      	asli 	r4,r4,#1
018F74 82 31 08 60 		      	asl  	r3,r3,r4
018F78 8E 31 FE FF 		      	com  	r3,r3
018F7C C6 45 00 00 		      	lw   	r4,[r11]
018F80 02 42 06 18 		      	and  	r4,r4,r3
018F84 E3 45 00 00 		      	sw   	r4,[r11]
018F88 7C 03 00 00 		      	ldi  	r3,#196608
018F8C 0A 30 00 00 
018F90 C6 4D 30 00 		      	lw   	r4,24[bp]
018F94 02 42 02 70 		      	asli 	r4,r4,#1
018F98 82 31 08 60 		      	asl  	r3,r3,r4
018F9C C6 45 00 00 		      	lw   	r4,[r11]
018FA0 02 42 06 1A 		      	or   	r4,r4,r3
018FA4 E3 45 00 00 		      	sw   	r4,[r11]
                	debugger_101:
018FA8 3A 16 00 00 		      	bra  	debugger_100
                	debugger_99:
018FAC C3 3D FC FF 		      	lcu  	r3,-2[bp]
018FB0 86 31 7E 00 		      	cmp  	r3,r3,#63
018FB4 BD 11 52 00 		      	bne  	r3,debugger_103
018FB8 C6 35 00 00 		      	lw   	r3,[r11]
018FBC 7C 03 00 00 		      	ldi  	r4,#196608
018FC0 0A 40 00 00 
018FC4 C6 5D 30 00 		      	lw   	r5,24[bp]
018FC8 82 52 02 70 		      	asli 	r5,r5,#1
018FCC 02 42 0A 60 		      	asl  	r4,r4,r5
018FD0 82 31 08 18 		      	and  	r3,r3,r4
018FD4 7C 03 00 00 		      	ldi  	r4,#196608
018FD8 0A 40 00 00 
018FDC C6 5D 30 00 		      	lw   	r5,24[bp]
018FE0 82 52 02 70 		      	asli 	r5,r5,#1
018FE4 02 42 0A 60 		      	asl  	r4,r4,r5
018FE8 82 31 08 0C 		      	cmp  	r3,r3,r4
018FEC BD 11 2C 00 		      	bne  	r3,debugger_105
018FF0 C6 35 00 00 		      	lw   	r3,[r11]
018FF4 0A 40 02 00 		      	ldi  	r4,#1
018FF8 C6 5D 30 00 		      	lw   	r5,24[bp]
018FFC 02 42 0A 60 		      	asl  	r4,r4,r5
019000 0A 50 02 00 		      	ldi  	r5,#1
019004 C6 6D 30 00 		      	lw   	r6,24[bp]
019008 82 52 0C 60 		      	asl  	r5,r5,r6
01900C 02 42 0A 40 		      	seq  	r4,r4,r5
019010 82 31 08 18 		      	and  	r3,r3,r4
019014 BD 01 18 00 		      	beq  	r3,debugger_105
019018 E6 ED 31 00 		      	push 	24[bp]
01901C 39 36 FF FF 		      	bsr  	dbg_GetDBAD
019020 14 EF 11 00 		      	addui	sp,sp,#8
019024 82 30 00 1A 		      	mov  	r3,r1
019028 E7 E1 01 00 		      	push 	r3
01902C E6 ED 31 00 		      	push 	24[bp]
019030 FC 01 00 00 		      	push 	#debugger_93
019034 65 E0 F1 50 
019038 B9 3F FA FF 		      	bsr  	printf
01903C 14 EF 31 00 		      	addui	sp,sp,#24
019040 3A 03 00 00 		      	bra  	debugger_106
                	debugger_105:
019044 E6 ED 31 00 		      	push 	24[bp]
019048 FC 01 00 00 		      	push 	#debugger_94
01904C 65 E0 9D 50 
019050 B9 3C FA FF 		      	bsr  	printf
019054 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_106:
                	debugger_103:
                	debugger_100:
019058 BA D3 FF FF 		      	bra  	debugger_98
                	debugger_95:
01905C C6 FD 11 00 		      	lw   	lr,8[bp]
019060 E3 FD 21 00 		      	sw   	lr,16[bp]
019064 3A D2 FF FF 		      	bra  	debugger_98
                	endpublic
                	
                	public code dbg_ReadSetDSB:
019068 E7 EF 01 00 		      	push 	lr
01906C 67 EE 01 00 		      	push 	xlr
019070 E7 ED 01 00 		      	push 	bp
019074 FC 01 00 00 		      	ldi  	xlr,#debugger_111
019078 0A C0 09 24 
01907C 02 BF 01 1A 		      	mov  	bp,sp
019080 15 EF 21 00 		      	subui	sp,sp,#16
019084 E7 E5 01 00 		      	push 	r11
019088 FC C0 00 00 		      	ldi  	r11,#dbctrl
01908C 0A B0 E0 05 
019090 C6 3D 30 00 		      	lw   	r3,24[bp]
019094 96 31 06 00 		      	cmpu 	r3,r3,#3
019098 BD 51 0E 00 		      	ble  	r3,debugger_112
                	debugger_114:
01909C 57 BF 10 00 		      	pop  	r11
0190A0 82 ED 01 1A 		      	mov  	sp,bp
0190A4 57 BF 11 00 		      	pop  	bp
0190A8 57 CF 11 00 		      	pop  	xlr
0190AC 57 FF 11 00 		      	pop  	lr
0190B0 37 FF 01 00 		      	rtl  	#0
                	debugger_112:
0190B4 39 60 FF FF 		      	bsr  	dbg_nextNonSpace
0190B8 82 30 00 1A 		      	mov  	r3,r1
0190BC 82 31 00 22 		      	sxc  	r3,r3
0190C0 E1 3D FC FF 		      	sc   	r3,-2[bp]
0190C4 C3 3D FC FF 		      	lcu  	r3,-2[bp]
0190C8 86 31 7A 00 		      	cmp  	r3,r3,#61
0190CC BD 11 44 00 		      	bne  	r3,debugger_115
0190D0 E5 ED E1 FF 		      	pea  	-16[bp]
0190D4 39 6D FF FF 		      	bsr  	dbg_GetHexNumber
0190D8 14 EF 11 00 		      	addui	sp,sp,#8
0190DC 82 30 00 1A 		      	mov  	r3,r1
0190E0 BD 51 38 00 		      	ble  	r3,debugger_117
0190E4 E6 ED E1 FF 		      	push 	-16[bp]
0190E8 E6 ED 31 00 		      	push 	24[bp]
0190EC B9 28 FF FF 		      	bsr  	dbg_SetDBAD
0190F0 14 EF 21 00 		      	addui	sp,sp,#16
0190F4 0A 30 02 00 		      	ldi  	r3,#1
0190F8 C6 4D 30 00 		      	lw   	r4,24[bp]
0190FC 82 31 08 60 		      	asl  	r3,r3,r4
019100 C6 45 00 00 		      	lw   	r4,[r11]
019104 02 42 06 1A 		      	or   	r4,r4,r3
019108 E3 45 00 00 		      	sw   	r4,[r11]
01910C 7C 03 00 00 		      	ldi  	r3,#196608
019110 0A 30 00 00 
019114 C6 4D 30 00 		      	lw   	r4,24[bp]
019118 02 42 02 70 		      	asli 	r4,r4,#1
01911C 82 31 08 60 		      	asl  	r3,r3,r4
019120 8E 31 FE FF 		      	com  	r3,r3
019124 C6 45 00 00 		      	lw   	r4,[r11]
019128 02 42 06 18 		      	and  	r4,r4,r3
01912C E3 45 00 00 		      	sw   	r4,[r11]
019130 7C 01 00 00 		      	ldi  	r3,#65536
019134 0A 30 00 00 
019138 C6 4D 30 00 		      	lw   	r4,24[bp]
01913C 02 42 02 70 		      	asli 	r4,r4,#1
019140 82 31 08 60 		      	asl  	r3,r3,r4
019144 C6 45 00 00 		      	lw   	r4,[r11]
019148 02 42 06 1A 		      	or   	r4,r4,r3
01914C E3 45 00 00 		      	sw   	r4,[r11]
                	debugger_117:
019150 3A 16 00 00 		      	bra  	debugger_116
                	debugger_115:
019154 C3 3D FC FF 		      	lcu  	r3,-2[bp]
019158 86 31 7E 00 		      	cmp  	r3,r3,#63
01915C BD 11 52 00 		      	bne  	r3,debugger_119
019160 C6 35 00 00 		      	lw   	r3,[r11]
019164 7C 03 00 00 		      	ldi  	r4,#196608
019168 0A 40 00 00 
01916C C6 5D 30 00 		      	lw   	r5,24[bp]
019170 82 52 02 70 		      	asli 	r5,r5,#1
019174 02 42 0A 60 		      	asl  	r4,r4,r5
019178 82 31 08 18 		      	and  	r3,r3,r4
01917C 7C 01 00 00 		      	ldi  	r4,#65536
019180 0A 40 00 00 
019184 C6 5D 30 00 		      	lw   	r5,24[bp]
019188 82 52 02 70 		      	asli 	r5,r5,#1
01918C 02 42 0A 60 		      	asl  	r4,r4,r5
019190 82 31 08 0C 		      	cmp  	r3,r3,r4
019194 BD 11 2C 00 		      	bne  	r3,debugger_121
019198 C6 35 00 00 		      	lw   	r3,[r11]
01919C 0A 40 02 00 		      	ldi  	r4,#1
0191A0 C6 5D 30 00 		      	lw   	r5,24[bp]
0191A4 02 42 0A 60 		      	asl  	r4,r4,r5
0191A8 0A 50 02 00 		      	ldi  	r5,#1
0191AC C6 6D 30 00 		      	lw   	r6,24[bp]
0191B0 82 52 0C 60 		      	asl  	r5,r5,r6
0191B4 02 42 0A 40 		      	seq  	r4,r4,r5
0191B8 82 31 08 18 		      	and  	r3,r3,r4
0191BC BD 01 18 00 		      	beq  	r3,debugger_121
0191C0 E6 ED 31 00 		      	push 	24[bp]
0191C4 39 01 FF FF 		      	bsr  	dbg_GetDBAD
0191C8 14 EF 11 00 		      	addui	sp,sp,#8
0191CC 82 30 00 1A 		      	mov  	r3,r1
0191D0 E7 E1 01 00 		      	push 	r3
0191D4 E6 ED 31 00 		      	push 	24[bp]
0191D8 FC 01 00 00 		      	push 	#debugger_109
0191DC 65 E0 51 50 
0191E0 B9 0A FA FF 		      	bsr  	printf
0191E4 14 EF 31 00 		      	addui	sp,sp,#24
0191E8 3A 03 00 00 		      	bra  	debugger_122
                	debugger_121:
0191EC E6 ED 31 00 		      	push 	24[bp]
0191F0 FC 01 00 00 		      	push 	#debugger_110
0191F4 65 E0 F9 4F 
0191F8 B9 07 FA FF 		      	bsr  	printf
0191FC 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_122:
                	debugger_119:
                	debugger_116:
019200 BA D3 FF FF 		      	bra  	debugger_114
                	debugger_111:
019204 C6 FD 11 00 		      	lw   	lr,8[bp]
019208 E3 FD 21 00 		      	sw   	lr,16[bp]
01920C 3A D2 FF FF 		      	bra  	debugger_114
                	endpublic
                	
                	public code dbg_prompt:
019210 E7 EF 01 00 		      	push 	lr
019214 67 EE 01 00 		      	push 	xlr
019218 E7 ED 01 00 		      	push 	bp
01921C FC 01 00 00 		      	ldi  	xlr,#debugger_126
019220 0A C0 99 24 
019224 02 BF 01 1A 		      	mov  	bp,sp
019228 FC 01 00 00 		      	push 	#debugger_125
01922C 65 E0 DD 4F 
019230 B9 00 FA FF 		      	bsr  	printf
019234 14 EF 11 00 		      	addui	sp,sp,#8
                	debugger_127:
019238 82 ED 01 1A 		      	mov  	sp,bp
01923C 57 BF 11 00 		      	pop  	bp
019240 57 CF 11 00 		      	pop  	xlr
019244 57 FF 11 00 		      	pop  	lr
019248 37 FF 01 00 		      	rtl  	#0
                	debugger_126:
01924C C6 FD 11 00 		      	lw   	lr,8[bp]
019250 E3 FD 21 00 		      	sw   	lr,16[bp]
019254 BA FC FF FF 		      	bra  	debugger_127
                	endpublic
                	
                	public code dbg_parse_line:
019258 E7 EF 01 00 		      	push 	lr
01925C 67 EE 01 00 		      	push 	xlr
019260 E7 ED 01 00 		      	push 	bp
019264 FC 01 00 00 		      	ldi  	xlr,#debugger_144
019268 0A C0 41 33 
01926C 02 BF 01 1A 		      	mov  	bp,sp
019270 15 EF 21 00 		      	subui	sp,sp,#16
019274 E7 E5 01 00 		      	push 	r11
019278 67 E6 01 00 		      	push 	r12
01927C E7 E6 01 00 		      	push 	r13
019280 FC C0 00 00 		      	ldi  	r11,#dbctrl
019284 0A B0 E0 05 
019288 7C C0 00 00 		      	ldi  	r12,#linebuf
01928C 0A C0 50 04 
019290 7C C0 00 00 		      	ldi  	r13,#linendx
019294 0A D0 40 04 
019298 E3 06 00 00 		      	sw   	r0,[r13]
01929C 43 36 00 00 		      	lcu  	r3,[r12]
0192A0 86 31 88 00 		      	cmp  	r3,r3,#68
0192A4 BD 11 18 00 		      	bne  	r3,debugger_145
0192A8 43 36 04 00 		      	lcu  	r3,2[r12]
0192AC 86 31 84 00 		      	cmp  	r3,r3,#66
0192B0 BD 11 12 00 		      	bne  	r3,debugger_145
0192B4 43 36 08 00 		      	lcu  	r3,4[r12]
0192B8 86 31 8E 00 		      	cmp  	r3,r3,#71
0192BC BD 11 0C 00 		      	bne  	r3,debugger_145
0192C0 43 36 0C 00 		      	lcu  	r3,6[r12]
0192C4 86 31 7C 00 		      	cmp  	r3,r3,#62
0192C8 BD 11 06 00 		      	bne  	r3,debugger_145
0192CC 0A 30 08 00 		      	ldi  	r3,#4
0192D0 E3 36 00 00 		      	sw   	r3,[r13]
                	debugger_145:
0192D4 C6 36 00 00 		      	lw   	r3,[r13]
0192D8 82 31 02 70 		      	asli 	r3,r3,#1
0192DC 4B 46 06 00 		      	lcu  	r4,0[r12+r3]
0192E0 E1 4D FC FF 		      	sc   	r4,-2[bp]
0192E4 E4 16 00 00 		      	inc  	[r13],#1
0192E8 C3 3D FC FF 		      	lcu  	r3,-2[bp]
0192EC 86 41 7E 00 		      	cmp  	r4,r3,#63
0192F0 3D 02 14 00 		      	beq  	r4,debugger_148
0192F4 86 41 E2 00 		      	cmp  	r4,r3,#113
0192F8 3D 02 14 00 		      	beq  	r4,debugger_149
0192FC 86 41 C2 00 		      	cmp  	r4,r3,#97
019300 3D 02 22 00 		      	beq  	r4,debugger_150
019304 86 41 D2 00 		      	cmp  	r4,r3,#105
019308 3D 02 26 00 		      	beq  	r4,debugger_151
01930C 86 41 C8 00 		      	cmp  	r4,r3,#100
019310 3D 02 EE 00 		      	beq  	r4,debugger_152
019314 3A D1 00 00 		      	bra  	debugger_147
                	debugger_148:
019318 39 93 FE FF 		      	bsr  	dbg_DisplayHelp
01931C 3A D0 00 00 		      	bra  	debugger_147
                	debugger_149:
019320 0A 10 02 00 		      	ldi  	r1,#1
                	debugger_153:
019324 57 DF 10 00 		      	pop  	r13
019328 57 CF 10 00 		      	pop  	r12
01932C 57 BF 10 00 		      	pop  	r11
019330 82 ED 01 1A 		      	mov  	sp,bp
019334 57 BF 11 00 		      	pop  	bp
019338 57 CF 11 00 		      	pop  	xlr
01933C 57 FF 11 00 		      	pop  	lr
019340 37 FF 01 00 		      	rtl  	#0
                	debugger_150:
019344 E6 E5 01 00 		      	push 	[r11]
019348 39 EB FE FF 		      	bsr  	dbg_arm
01934C 14 EF 11 00 		      	addui	sp,sp,#8
019350 BA C9 00 00 		      	bra  	debugger_147
                	debugger_151:
019354 B9 F1 FE FF 		      	bsr  	dbg_getchar
019358 82 30 00 1A 		      	mov  	r3,r1
01935C 82 31 00 22 		      	sxc  	r3,r3
019360 E1 3D FC FF 		      	sc   	r3,-2[bp]
019364 C3 3D FC FF 		      	lcu  	r3,-2[bp]
019368 86 41 7E 00 		      	cmp  	r4,r3,#63
01936C 3D 02 14 00 		      	beq  	r4,debugger_155
019370 86 41 60 00 		      	cmp  	r4,r3,#48
019374 3D 02 9A 00 		      	beq  	r4,debugger_156
019378 86 41 62 00 		      	cmp  	r4,r3,#49
01937C 3D 02 9E 00 		      	beq  	r4,debugger_157
019380 86 41 64 00 		      	cmp  	r4,r3,#50
019384 3D 02 A2 00 		      	beq  	r4,debugger_158
019388 86 41 66 00 		      	cmp  	r4,r3,#51
01938C 3D 02 A6 00 		      	beq  	r4,debugger_159
019390 3A 2B 00 00 		      	bra  	debugger_154
                	debugger_155:
019394 C6 35 00 00 		      	lw   	r3,[r11]
019398 7C 03 00 00 		      	and  	r3,r3,#196608
01939C 8C 31 00 00 
0193A0 BD 11 1C 00 		      	bne  	r3,debugger_160
0193A4 C6 35 00 00 		      	lw   	r3,[r11]
0193A8 8C 31 02 00 		      	and  	r3,r3,#1
0193AC 86 31 02 00 		      	cmp  	r3,r3,#1
0193B0 BD 11 14 00 		      	bne  	r3,debugger_160
0193B4 65 E0 01 00 		      	push 	#0
0193B8 B9 C2 FE FF 		      	bsr  	dbg_GetDBAD
0193BC 14 EF 11 00 		      	addui	sp,sp,#8
0193C0 82 30 00 1A 		      	mov  	r3,r1
0193C4 E7 E1 01 00 		      	push 	r3
0193C8 FC 01 00 00 		      	push 	#debugger_128
0193CC 65 E0 B5 4F 
0193D0 B9 CC F9 FF 		      	bsr  	printf
0193D4 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_160:
0193D8 C6 35 00 00 		      	lw   	r3,[r11]
0193DC 7C 30 00 00 		      	and  	r3,r3,#3145728
0193E0 8C 31 00 00 
0193E4 BD 11 1C 00 		      	bne  	r3,debugger_162
0193E8 C6 35 00 00 		      	lw   	r3,[r11]
0193EC 8C 31 04 00 		      	and  	r3,r3,#2
0193F0 86 31 04 00 		      	cmp  	r3,r3,#2
0193F4 BD 11 14 00 		      	bne  	r3,debugger_162
0193F8 65 E0 03 00 		      	push 	#1
0193FC 39 BA FE FF 		      	bsr  	dbg_GetDBAD
019400 14 EF 11 00 		      	addui	sp,sp,#8
019404 82 30 00 1A 		      	mov  	r3,r1
019408 E7 E1 01 00 		      	push 	r3
01940C FC 01 00 00 		      	push 	#debugger_129
019410 65 E0 8D 4F 
019414 39 C4 F9 FF 		      	bsr  	printf
019418 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_162:
01941C C6 35 00 00 		      	lw   	r3,[r11]
019420 7C 00 03 00 		      	and  	r3,r3,#50331648
019424 8C 31 00 00 
019428 BD 11 1C 00 		      	bne  	r3,debugger_164
01942C C6 35 00 00 		      	lw   	r3,[r11]
019430 8C 31 08 00 		      	and  	r3,r3,#4
019434 86 31 08 00 		      	cmp  	r3,r3,#4
019438 BD 11 14 00 		      	bne  	r3,debugger_164
01943C 65 E0 05 00 		      	push 	#2
019440 B9 B1 FE FF 		      	bsr  	dbg_GetDBAD
019444 14 EF 11 00 		      	addui	sp,sp,#8
019448 82 30 00 1A 		      	mov  	r3,r1
01944C E7 E1 01 00 		      	push 	r3
019450 FC 01 00 00 		      	push 	#debugger_130
019454 65 E0 65 4F 
019458 B9 BB F9 FF 		      	bsr  	printf
01945C 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_164:
019460 C6 35 00 00 		      	lw   	r3,[r11]
019464 7C 00 30 00 		      	and  	r3,r3,#805306368
019468 8C 31 00 00 
01946C BD 11 1C 00 		      	bne  	r3,debugger_166
019470 C6 35 00 00 		      	lw   	r3,[r11]
019474 8C 31 10 00 		      	and  	r3,r3,#8
019478 86 31 10 00 		      	cmp  	r3,r3,#8
01947C BD 11 14 00 		      	bne  	r3,debugger_166
019480 65 E0 07 00 		      	push 	#3
019484 39 A9 FE FF 		      	bsr  	dbg_GetDBAD
019488 14 EF 11 00 		      	addui	sp,sp,#8
01948C 82 30 00 1A 		      	mov  	r3,r1
019490 E7 E1 01 00 		      	push 	r3
019494 FC 01 00 00 		      	push 	#debugger_131
019498 65 E0 3D 4F 
01949C 39 B3 F9 FF 		      	bsr  	printf
0194A0 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_166:
0194A4 BA 08 00 00 		      	bra  	debugger_154
                	debugger_156:
0194A8 65 E0 01 00 		      	push 	#0
0194AC B9 14 FF FF 		      	bsr  	dbg_ReadSetIB
0194B0 14 EF 11 00 		      	addui	sp,sp,#8
0194B4 BA 06 00 00 		      	bra  	debugger_154
                	debugger_157:
0194B8 65 E0 03 00 		      	push 	#1
0194BC B9 12 FF FF 		      	bsr  	dbg_ReadSetIB
0194C0 14 EF 11 00 		      	addui	sp,sp,#8
0194C4 BA 04 00 00 		      	bra  	debugger_154
                	debugger_158:
0194C8 65 E0 05 00 		      	push 	#2
0194CC B9 10 FF FF 		      	bsr  	dbg_ReadSetIB
0194D0 14 EF 11 00 		      	addui	sp,sp,#8
0194D4 BA 02 00 00 		      	bra  	debugger_154
                	debugger_159:
0194D8 65 E0 07 00 		      	push 	#3
0194DC B9 0E FF FF 		      	bsr  	dbg_ReadSetIB
0194E0 14 EF 11 00 		      	addui	sp,sp,#8
0194E4 BA 00 00 00 		      	bra  	debugger_154
                	debugger_154:
0194E8 BA 96 00 00 		      	bra  	debugger_147
                	debugger_152:
0194EC B9 BE FE FF 		      	bsr  	dbg_getchar
0194F0 82 30 00 1A 		      	mov  	r3,r1
0194F4 82 31 00 22 		      	sxc  	r3,r3
0194F8 E1 3D FC FF 		      	sc   	r3,-2[bp]
0194FC C3 3D FC FF 		      	lcu  	r3,-2[bp]
019500 86 41 7E 00 		      	cmp  	r4,r3,#63
019504 3D 02 1C 00 		      	beq  	r4,debugger_169
019508 86 41 60 00 		      	cmp  	r4,r3,#48
01950C 3D 02 B2 00 		      	beq  	r4,debugger_170
019510 86 41 62 00 		      	cmp  	r4,r3,#49
019514 3D 02 B6 00 		      	beq  	r4,debugger_171
019518 86 41 64 00 		      	cmp  	r4,r3,#50
01951C 3D 02 BA 00 		      	beq  	r4,debugger_172
019520 86 41 66 00 		      	cmp  	r4,r3,#51
019524 3D 02 BE 00 		      	beq  	r4,debugger_173
019528 86 41 7E 00 		      	cmp  	r4,r3,#63
01952C 3D 02 C2 00 		      	beq  	r4,debugger_174
019530 86 41 E6 00 		      	cmp  	r4,r3,#115
019534 3D 02 58 01 		      	beq  	r4,debugger_175
019538 3A 8C 00 00 		      	bra  	debugger_168
                	debugger_169:
01953C C6 35 00 00 		      	lw   	r3,[r11]
019540 7C 03 00 00 		      	and  	r3,r3,#196608
019544 8C 31 00 00 
019548 7C 03 00 00 		      	cmp  	r3,r3,#196608
01954C 86 31 00 00 
019550 BD 11 1C 00 		      	bne  	r3,debugger_176
019554 C6 35 00 00 		      	lw   	r3,[r11]
019558 8C 31 02 00 		      	and  	r3,r3,#1
01955C 86 31 02 00 		      	cmp  	r3,r3,#1
019560 BD 11 14 00 		      	bne  	r3,debugger_176
019564 65 E0 01 00 		      	push 	#0
019568 B9 8C FE FF 		      	bsr  	dbg_GetDBAD
01956C 14 EF 11 00 		      	addui	sp,sp,#8
019570 82 30 00 1A 		      	mov  	r3,r1
019574 E7 E1 01 00 		      	push 	r3
019578 FC 01 00 00 		      	push 	#debugger_132
01957C 65 E0 15 4F 
019580 B9 96 F9 FF 		      	bsr  	printf
019584 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_176:
019588 C6 35 00 00 		      	lw   	r3,[r11]
01958C 7C 30 00 00 		      	and  	r3,r3,#3145728
019590 8C 31 00 00 
019594 7C 30 00 00 		      	cmp  	r3,r3,#3145728
019598 86 31 00 00 
01959C BD 11 1C 00 		      	bne  	r3,debugger_178
0195A0 C6 35 00 00 		      	lw   	r3,[r11]
0195A4 8C 31 04 00 		      	and  	r3,r3,#2
0195A8 86 31 04 00 		      	cmp  	r3,r3,#2
0195AC BD 11 14 00 		      	bne  	r3,debugger_178
0195B0 65 E0 03 00 		      	push 	#1
0195B4 39 83 FE FF 		      	bsr  	dbg_GetDBAD
0195B8 14 EF 11 00 		      	addui	sp,sp,#8
0195BC 82 30 00 1A 		      	mov  	r3,r1
0195C0 E7 E1 01 00 		      	push 	r3
0195C4 FC 01 00 00 		      	push 	#debugger_133
0195C8 65 E0 ED 4E 
0195CC 39 8D F9 FF 		      	bsr  	printf
0195D0 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_178:
0195D4 C6 35 00 00 		      	lw   	r3,[r11]
0195D8 7C 00 03 00 		      	and  	r3,r3,#50331648
0195DC 8C 31 00 00 
0195E0 7C 00 03 00 		      	cmp  	r3,r3,#50331648
0195E4 86 31 00 00 
0195E8 BD 11 1C 00 		      	bne  	r3,debugger_180
0195EC C6 35 00 00 		      	lw   	r3,[r11]
0195F0 8C 31 08 00 		      	and  	r3,r3,#4
0195F4 86 31 08 00 		      	cmp  	r3,r3,#4
0195F8 BD 11 14 00 		      	bne  	r3,debugger_180
0195FC 65 E0 05 00 		      	push 	#2
019600 B9 79 FE FF 		      	bsr  	dbg_GetDBAD
019604 14 EF 11 00 		      	addui	sp,sp,#8
019608 82 30 00 1A 		      	mov  	r3,r1
01960C E7 E1 01 00 		      	push 	r3
019610 FC 01 00 00 		      	push 	#debugger_134
019614 65 E0 C5 4E 
019618 B9 83 F9 FF 		      	bsr  	printf
01961C 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_180:
019620 C6 35 00 00 		      	lw   	r3,[r11]
019624 7C 00 30 00 		      	and  	r3,r3,#805306368
019628 8C 31 00 00 
01962C 7C 00 30 00 		      	cmp  	r3,r3,#805306368
019630 86 31 00 00 
019634 BD 11 1C 00 		      	bne  	r3,debugger_182
019638 C6 35 00 00 		      	lw   	r3,[r11]
01963C 8C 31 10 00 		      	and  	r3,r3,#8
019640 86 31 10 00 		      	cmp  	r3,r3,#8
019644 BD 11 14 00 		      	bne  	r3,debugger_182
019648 65 E0 07 00 		      	push 	#3
01964C 39 70 FE FF 		      	bsr  	dbg_GetDBAD
019650 14 EF 11 00 		      	addui	sp,sp,#8
019654 82 30 00 1A 		      	mov  	r3,r1
019658 E7 E1 01 00 		      	push 	r3
01965C FC 01 00 00 		      	push 	#debugger_135
019660 65 E0 9D 4E 
019664 39 7A F9 FF 		      	bsr  	printf
019668 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_182:
01966C BA 65 00 00 		      	bra  	debugger_168
                	debugger_170:
019670 65 E0 01 00 		      	push 	#0
019674 B9 09 FF FF 		      	bsr  	dbg_ReadSetDB
019678 14 EF 11 00 		      	addui	sp,sp,#8
01967C BA 63 00 00 		      	bra  	debugger_168
                	debugger_171:
019680 65 E0 03 00 		      	push 	#1
019684 B9 07 FF FF 		      	bsr  	dbg_ReadSetDB
019688 14 EF 11 00 		      	addui	sp,sp,#8
01968C BA 61 00 00 		      	bra  	debugger_168
                	debugger_172:
019690 65 E0 05 00 		      	push 	#2
019694 B9 05 FF FF 		      	bsr  	dbg_ReadSetDB
019698 14 EF 11 00 		      	addui	sp,sp,#8
01969C BA 5F 00 00 		      	bra  	debugger_168
                	debugger_173:
0196A0 65 E0 07 00 		      	push 	#3
0196A4 B9 03 FF FF 		      	bsr  	dbg_ReadSetDB
0196A8 14 EF 11 00 		      	addui	sp,sp,#8
0196AC BA 5D 00 00 		      	bra  	debugger_168
                	debugger_174:
0196B0 C6 35 00 00 		      	lw   	r3,[r11]
0196B4 7C 03 00 00 		      	and  	r3,r3,#196608
0196B8 8C 31 00 00 
0196BC 7C 03 00 00 		      	cmp  	r3,r3,#196608
0196C0 86 31 00 00 
0196C4 BD 11 1C 00 		      	bne  	r3,debugger_184
0196C8 C6 35 00 00 		      	lw   	r3,[r11]
0196CC 8C 31 02 00 		      	and  	r3,r3,#1
0196D0 86 31 02 00 		      	cmp  	r3,r3,#1
0196D4 BD 11 14 00 		      	bne  	r3,debugger_184
0196D8 65 E0 01 00 		      	push 	#0
0196DC 39 5E FE FF 		      	bsr  	dbg_GetDBAD
0196E0 14 EF 11 00 		      	addui	sp,sp,#8
0196E4 82 30 00 1A 		      	mov  	r3,r1
0196E8 E7 E1 01 00 		      	push 	r3
0196EC FC 01 00 00 		      	push 	#debugger_136
0196F0 65 E0 71 4E 
0196F4 39 68 F9 FF 		      	bsr  	printf
0196F8 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_184:
0196FC C6 35 00 00 		      	lw   	r3,[r11]
019700 7C 30 00 00 		      	and  	r3,r3,#3145728
019704 8C 31 00 00 
019708 7C 30 00 00 		      	cmp  	r3,r3,#3145728
01970C 86 31 00 00 
019710 BD 11 1C 00 		      	bne  	r3,debugger_186
019714 C6 35 00 00 		      	lw   	r3,[r11]
019718 8C 31 04 00 		      	and  	r3,r3,#2
01971C 86 31 04 00 		      	cmp  	r3,r3,#2
019720 BD 11 14 00 		      	bne  	r3,debugger_186
019724 65 E0 03 00 		      	push 	#1
019728 B9 54 FE FF 		      	bsr  	dbg_GetDBAD
01972C 14 EF 11 00 		      	addui	sp,sp,#8
019730 82 30 00 1A 		      	mov  	r3,r1
019734 E7 E1 01 00 		      	push 	r3
019738 FC 01 00 00 		      	push 	#debugger_137
01973C 65 E0 45 4E 
019740 B9 5E F9 FF 		      	bsr  	printf
019744 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_186:
019748 C6 35 00 00 		      	lw   	r3,[r11]
01974C 7C 00 03 00 		      	and  	r3,r3,#50331648
019750 8C 31 00 00 
019754 7C 00 03 00 		      	cmp  	r3,r3,#50331648
019758 86 31 00 00 
01975C BD 11 1C 00 		      	bne  	r3,debugger_188
019760 C6 35 00 00 		      	lw   	r3,[r11]
019764 8C 31 08 00 		      	and  	r3,r3,#4
019768 86 31 08 00 		      	cmp  	r3,r3,#4
01976C BD 11 14 00 		      	bne  	r3,debugger_188
019770 65 E0 05 00 		      	push 	#2
019774 39 4B FE FF 		      	bsr  	dbg_GetDBAD
019778 14 EF 11 00 		      	addui	sp,sp,#8
01977C 82 30 00 1A 		      	mov  	r3,r1
019780 E7 E1 01 00 		      	push 	r3
019784 FC 01 00 00 		      	push 	#debugger_138
019788 65 E0 19 4E 
01978C 39 55 F9 FF 		      	bsr  	printf
019790 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_188:
019794 C6 35 00 00 		      	lw   	r3,[r11]
019798 7C 00 30 00 		      	and  	r3,r3,#805306368
01979C 8C 31 00 00 
0197A0 7C 00 30 00 		      	cmp  	r3,r3,#805306368
0197A4 86 31 00 00 
0197A8 BD 11 1C 00 		      	bne  	r3,debugger_190
0197AC C6 35 00 00 		      	lw   	r3,[r11]
0197B0 8C 31 10 00 		      	and  	r3,r3,#8
0197B4 86 31 10 00 		      	cmp  	r3,r3,#8
0197B8 BD 11 14 00 		      	bne  	r3,debugger_190
0197BC 65 E0 07 00 		      	push 	#3
0197C0 B9 41 FE FF 		      	bsr  	dbg_GetDBAD
0197C4 14 EF 11 00 		      	addui	sp,sp,#8
0197C8 82 30 00 1A 		      	mov  	r3,r1
0197CC E7 E1 01 00 		      	push 	r3
0197D0 FC 01 00 00 		      	push 	#debugger_139
0197D4 65 E0 ED 4D 
0197D8 B9 4B F9 FF 		      	bsr  	printf
0197DC 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_190:
0197E0 3A 37 00 00 		      	bra  	debugger_168
                	debugger_175:
0197E4 B9 5F FE FF 		      	bsr  	dbg_getchar
0197E8 82 30 00 1A 		      	mov  	r3,r1
0197EC 82 31 00 22 		      	sxc  	r3,r3
0197F0 E1 3D FC FF 		      	sc   	r3,-2[bp]
0197F4 C3 3D FC FF 		      	lcu  	r3,-2[bp]
0197F8 86 41 7E 00 		      	cmp  	r4,r3,#63
0197FC 3D 02 14 00 		      	beq  	r4,debugger_193
019800 86 41 60 00 		      	cmp  	r4,r3,#48
019804 3D 02 AA 00 		      	beq  	r4,debugger_194
019808 86 41 62 00 		      	cmp  	r4,r3,#49
01980C 3D 02 AE 00 		      	beq  	r4,debugger_195
019810 86 41 64 00 		      	cmp  	r4,r3,#50
019814 3D 02 B2 00 		      	beq  	r4,debugger_196
019818 86 41 66 00 		      	cmp  	r4,r3,#51
01981C 3D 02 B6 00 		      	beq  	r4,debugger_197
019820 3A 2F 00 00 		      	bra  	debugger_192
                	debugger_193:
019824 C6 35 00 00 		      	lw   	r3,[r11]
019828 7C 03 00 00 		      	and  	r3,r3,#196608
01982C 8C 31 00 00 
019830 7C 01 00 00 		      	cmp  	r3,r3,#65536
019834 86 31 00 00 
019838 BD 11 1C 00 		      	bne  	r3,debugger_198
01983C C6 35 00 00 		      	lw   	r3,[r11]
019840 8C 31 02 00 		      	and  	r3,r3,#1
019844 86 31 02 00 		      	cmp  	r3,r3,#1
019848 BD 11 14 00 		      	bne  	r3,debugger_198
01984C 65 E0 01 00 		      	push 	#0
019850 B9 2F FE FF 		      	bsr  	dbg_GetDBAD
019854 14 EF 11 00 		      	addui	sp,sp,#8
019858 82 30 00 1A 		      	mov  	r3,r1
01985C E7 E1 01 00 		      	push 	r3
019860 FC 01 00 00 		      	push 	#debugger_140
019864 65 E0 C1 4D 
019868 B9 39 F9 FF 		      	bsr  	printf
01986C 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_198:
019870 C6 35 00 00 		      	lw   	r3,[r11]
019874 7C 30 00 00 		      	and  	r3,r3,#3145728
019878 8C 31 00 00 
01987C 7C 10 00 00 		      	cmp  	r3,r3,#1048576
019880 86 31 00 00 
019884 BD 11 1C 00 		      	bne  	r3,debugger_200
019888 C6 35 00 00 		      	lw   	r3,[r11]
01988C 8C 31 04 00 		      	and  	r3,r3,#2
019890 86 31 04 00 		      	cmp  	r3,r3,#2
019894 BD 11 14 00 		      	bne  	r3,debugger_200
019898 65 E0 03 00 		      	push 	#1
01989C 39 26 FE FF 		      	bsr  	dbg_GetDBAD
0198A0 14 EF 11 00 		      	addui	sp,sp,#8
0198A4 82 30 00 1A 		      	mov  	r3,r1
0198A8 E7 E1 01 00 		      	push 	r3
0198AC FC 01 00 00 		      	push 	#debugger_141
0198B0 65 E0 95 4D 
0198B4 39 30 F9 FF 		      	bsr  	printf
0198B8 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_200:
0198BC C6 35 00 00 		      	lw   	r3,[r11]
0198C0 7C 00 03 00 		      	and  	r3,r3,#50331648
0198C4 8C 31 00 00 
0198C8 7C 00 01 00 		      	cmp  	r3,r3,#16777216
0198CC 86 31 00 00 
0198D0 BD 11 1C 00 		      	bne  	r3,debugger_202
0198D4 C6 35 00 00 		      	lw   	r3,[r11]
0198D8 8C 31 08 00 		      	and  	r3,r3,#4
0198DC 86 31 08 00 		      	cmp  	r3,r3,#4
0198E0 BD 11 14 00 		      	bne  	r3,debugger_202
0198E4 65 E0 05 00 		      	push 	#2
0198E8 B9 1C FE FF 		      	bsr  	dbg_GetDBAD
0198EC 14 EF 11 00 		      	addui	sp,sp,#8
0198F0 82 30 00 1A 		      	mov  	r3,r1
0198F4 E7 E1 01 00 		      	push 	r3
0198F8 FC 01 00 00 		      	push 	#debugger_142
0198FC 65 E0 69 4D 
019900 B9 26 F9 FF 		      	bsr  	printf
019904 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_202:
019908 C6 35 00 00 		      	lw   	r3,[r11]
01990C 7C 00 30 00 		      	and  	r3,r3,#805306368
019910 8C 31 00 00 
019914 7C 00 10 00 		      	cmp  	r3,r3,#268435456
019918 86 31 00 00 
01991C BD 11 1C 00 		      	bne  	r3,debugger_204
019920 C6 35 00 00 		      	lw   	r3,[r11]
019924 8C 31 10 00 		      	and  	r3,r3,#8
019928 86 31 10 00 		      	cmp  	r3,r3,#8
01992C BD 11 14 00 		      	bne  	r3,debugger_204
019930 65 E0 07 00 		      	push 	#3
019934 39 13 FE FF 		      	bsr  	dbg_GetDBAD
019938 14 EF 11 00 		      	addui	sp,sp,#8
01993C 82 30 00 1A 		      	mov  	r3,r1
019940 E7 E1 01 00 		      	push 	r3
019944 FC 01 00 00 		      	push 	#debugger_143
019948 65 E0 3D 4D 
01994C 39 1D F9 FF 		      	bsr  	printf
019950 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_204:
019954 BA 08 00 00 		      	bra  	debugger_192
                	debugger_194:
019958 65 E0 01 00 		      	push 	#0
01995C B9 E1 FE FF 		      	bsr  	dbg_ReadSetDSB
019960 14 EF 11 00 		      	addui	sp,sp,#8
019964 BA 06 00 00 		      	bra  	debugger_192
                	debugger_195:
019968 65 E0 03 00 		      	push 	#1
01996C B9 DF FE FF 		      	bsr  	dbg_ReadSetDSB
019970 14 EF 11 00 		      	addui	sp,sp,#8
019974 BA 04 00 00 		      	bra  	debugger_192
                	debugger_196:
019978 65 E0 05 00 		      	push 	#2
01997C B9 DD FE FF 		      	bsr  	dbg_ReadSetDSB
019980 14 EF 11 00 		      	addui	sp,sp,#8
019984 BA 02 00 00 		      	bra  	debugger_192
                	debugger_197:
019988 65 E0 07 00 		      	push 	#3
01998C B9 DB FE FF 		      	bsr  	dbg_ReadSetDSB
019990 14 EF 11 00 		      	addui	sp,sp,#8
019994 BA 00 00 00 		      	bra  	debugger_192
                	debugger_192:
                	debugger_168:
019998 BA 00 00 00 		      	bra  	debugger_147
                	debugger_147:
01999C 3A 31 FF FF 		      	bra  	debugger_153
                	debugger_144:
0199A0 C6 FD 11 00 		      	lw   	lr,8[bp]
0199A4 E3 FD 21 00 		      	sw   	lr,16[bp]
0199A8 BA 2F FF FF 		      	bra  	debugger_153
                	endpublic
                	
                	public code dbg_irq:
0199AC 7C C0 00 00 		      	     	         lea   sp,dbg_stack+4088
0199B0 47 E0 D1 25 
0199B4 67 E0 01 00 	         push  r0
0199B8 E7 E0 01 00 	         push  r1
0199BC 67 E1 01 00 	         push  r2
0199C0 E7 E1 01 00 	         push  r3
0199C4 67 E2 01 00 	         push  r4
0199C8 E7 E2 01 00 	         push  r5
0199CC 67 E3 01 00 	         push  r6
0199D0 E7 E3 01 00 	         push  r7
0199D4 67 E4 01 00 	         push  r8
0199D8 E7 E4 01 00 	         push  r9
0199DC 67 E5 01 00 	         push  r10
0199E0 E7 E5 01 00 	         push  r11
0199E4 67 E6 01 00 	         push  r12
0199E8 E7 E6 01 00 	         push  r13
0199EC 67 E7 01 00 	         push  r14
0199F0 E7 E7 01 00 	         push  r15
0199F4 67 E8 01 00 	         push  r16
0199F8 E7 E8 01 00 	         push  r17
0199FC 67 E9 01 00 	         push  r18
019A00 E7 E9 01 00 	         push  r19
019A04 67 EA 01 00 	         push  r20
019A08 E7 EA 01 00 	         push  r21
019A0C 67 EB 01 00 	         push  r22
019A10 E7 EB 01 00 	         push  r23
019A14 E7 EC 01 00 	         push  r25
019A18 67 ED 01 00 	         push  r26
019A1C E7 ED 01 00 	         push  r27
019A20 67 EE 01 00 	         push  r28
019A24 E7 EE 01 00 	         push  r29
019A28 E7 EF 01 00 	         push  r31
                	
019A2C 02 10 6C 3E 	         mfspr r1,dbctrl
019A30 E7 E0 01 00 	         push  r1
019A34 02 00 6C 3C 	         mtspr dbctrl,r0
019A38 02 10 0E 3E 	         mfspr r1,dpc
019A3C E7 E0 01 00 	         push  r1
019A40 B9 10 00 00 	         bsr   debugger
019A44 14 EF 21 00 	         addui sp,sp,#16
                	         
019A48 57 FF 11 00 	         pop   r31
019A4C 57 DF 11 00 	         pop   r29
019A50 57 CF 11 00 	         pop   r28
019A54 57 BF 11 00 	         pop   r27
019A58 57 AF 11 00 	         pop   r26
019A5C 57 9F 11 00 	         pop   r25
019A60 57 7F 11 00 	         pop   r23
019A64 57 6F 11 00 	         pop   r22
019A68 57 5F 11 00 	         pop   r21
019A6C 57 4F 11 00 	         pop   r20
019A70 57 3F 11 00 	         pop   r19
019A74 57 2F 11 00 	         pop   r18
019A78 57 1F 11 00 	         pop   r17
019A7C 57 0F 11 00 	         pop   r16
019A80 57 FF 10 00 	         pop   r15
019A84 57 EF 10 00 	         pop   r14
019A88 57 DF 10 00 	         pop   r13
019A8C 57 CF 10 00 	         pop   r12
019A90 57 BF 10 00 	         pop   r11
019A94 57 AF 10 00 	         pop   r10
019A98 57 9F 10 00 	         pop   r9
019A9C 57 8F 10 00 	         pop   r8
019AA0 57 7F 10 00 	         pop   r7
019AA4 57 6F 10 00 	         pop   r6
019AA8 57 5F 10 00 	         pop   r5
019AAC 57 4F 10 00 	         pop   r4
019AB0 57 3F 10 00 	         pop   r3
019AB4 57 2F 10 00 	         pop   r2
019AB8 57 1F 10 00 	         pop   r1
019ABC 57 0F 10 00 	         pop   r0
019AC0 02 E0 3F 6E 	         rti
                	     
                	endpublic
                	
                	public code debugger:
019AC4 E7 EF 01 00 		      	push 	lr
019AC8 67 EE 01 00 		      	push 	xlr
019ACC E7 ED 01 00 		      	push 	bp
019AD0 FC 01 00 00 		      	ldi  	xlr,#debugger_209
019AD4 0A C0 F1 37 
019AD8 02 BF 01 1A 		      	mov  	bp,sp
019ADC 15 EF 51 00 		      	subui	sp,sp,#40
019AE0 E7 E5 01 00 		      	push 	r11
019AE4 7C D0 FF FF 		      	ldi  	r11,#-3145728
019AE8 0A B0 00 00 
019AEC C6 3D 30 00 		      	lw   	r3,24[bp]
019AF0 BD 01 0A 00 		      	beq  	r3,debugger_210
019AF4 E6 ED 31 00 		      	push 	24[bp]
019AF8 E6 ED 31 00 		      	push 	24[bp]
019AFC 39 87 FD FF 		      	bsr  	disassem20
019B00 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_210:
                	debugger_212:
019B04 0A 30 02 00 		      	ldi  	r3,#1
019B08 BD 01 6C 00 		      	beq  	r3,debugger_213
019B0C FC 01 00 00 		      	push 	#debugger_208
019B10 65 E0 21 4D 
019B14 39 E4 F8 FF 		      	bsr  	printf
019B18 14 EF 11 00 		      	addui	sp,sp,#8
                	debugger_214:
019B1C 39 D7 F8 FF 		      	bsr  	getchar
019B20 82 30 00 1A 		      	mov  	r3,r1
019B24 E1 3D FC FF 		      	sc   	r3,-2[bp]
019B28 C3 3D FC FF 		      	lcu  	r3,-2[bp]
019B2C 86 31 1A 00 		      	cmp  	r3,r3,#13
019B30 BD 11 04 00 		      	bne  	r3,debugger_216
019B34 BA 03 00 00 		      	bra  	debugger_215
                	debugger_216:
019B38 C3 3D FC FF 		      	lcu  	r3,-2[bp]
019B3C E7 E1 01 00 		      	push 	r3
019B40 39 52 F8 FF 		      	bsr  	putch
019B44 14 EF 11 00 		      	addui	sp,sp,#8
019B48 0A 30 02 00 		      	ldi  	r3,#1
019B4C BD 11 E8 FF 		      	bne  	r3,debugger_214
                	debugger_215:
019B50 B9 C4 FD FF 		      	bsr  	dbg_GetCursorRow
019B54 82 30 00 1A 		      	mov  	r3,r1
019B58 82 31 00 20 		      	sxb  	r3,r3
019B5C E3 3D E0 FF 		      	sw   	r3,-16[bp]
019B60 39 C8 FD FF 		      	bsr  	dbg_GetCursorCol
019B64 82 30 00 1A 		      	mov  	r3,r1
019B68 82 31 00 20 		      	sxb  	r3,r3
019B6C E3 3D D0 FF 		      	sw   	r3,-24[bp]
019B70 E3 0D B0 FF 		      	sw   	r0,-40[bp]
                	debugger_218:
019B74 C6 3D B0 FF 		      	lw   	r3,-40[bp]
019B78 86 31 A8 00 		      	cmp  	r3,r3,#84
019B7C BD 31 26 00 		      	bge  	r3,debugger_219
019B80 C6 3D E0 FF 		      	lw   	r3,-16[bp]
019B84 87 31 A8 00 		      	mul  	r3,r3,#84
019B88 C6 4D B0 FF 		      	lw   	r4,-40[bp]
019B8C 82 31 08 28 		      	addu 	r3,r3,r4
019B90 82 31 04 70 		      	asli 	r3,r3,#2
019B94 CD 35 06 00 		      	lhu  	r3,0[r11+r3]
019B98 8C 31 FE 07 		      	and  	r3,r3,#1023
019B9C E7 E1 01 00 		      	push 	r3
019BA0 39 E4 FD FF 		      	bsr  	CvtScreenToAscii
019BA4 14 EF 11 00 		      	addui	sp,sp,#8
019BA8 82 30 00 1A 		      	mov  	r3,r1
019BAC 82 31 00 22 		      	sxc  	r3,r3
019BB0 C6 4D B0 FF 		      	lw   	r4,-40[bp]
019BB4 02 42 02 70 		      	asli 	r4,r4,#1
019BB8 7C C0 00 00 		      	sc   	r3,linebuf[r4]
019BBC 61 32 50 04 
                	debugger_220:
019BC0 E4 1D B0 FF 		      	inc  	-40[bp],#1
019BC4 3A F6 FF FF 		      	bra  	debugger_218
                	debugger_219:
019BC8 39 D2 FE FF 		      	bsr  	dbg_parse_line
019BCC 82 30 00 1A 		      	mov  	r3,r1
019BD0 86 31 02 00 		      	cmp  	r3,r3,#1
019BD4 BD 11 04 00 		      	bne  	r3,debugger_221
019BD8 3A 01 00 00 		      	bra  	debugger_213
                	debugger_221:
019BDC 3A E5 FF FF 		      	bra  	debugger_212
                	debugger_213:
                	debugger_223:
019BE0 57 BF 10 00 		      	pop  	r11
019BE4 82 ED 01 1A 		      	mov  	sp,bp
019BE8 57 BF 11 00 		      	pop  	bp
019BEC 57 CF 11 00 		      	pop  	xlr
019BF0 57 FF 11 00 		      	pop  	lr
019BF4 37 FF 01 00 		      	rtl  	#0
                	debugger_209:
019BF8 C6 FD 11 00 		      	lw   	lr,8[bp]
019BFC E3 FD 21 00 		      	sw   	lr,16[bp]
019C00 3A FC FF FF 		      	bra  	debugger_223
                	endpublic
                	
                	public code dbg_init:
019C04 E7 EF 01 00 		      	push 	lr
019C08 67 EE 01 00 		      	push 	xlr
019C0C E7 ED 01 00 		      	push 	bp
019C10 FC 01 00 00 		      	ldi  	xlr,#debugger_224
019C14 0A C0 89 38 
019C18 02 BF 01 1A 		      	mov  	bp,sp
019C1C FC 01 00 00 		      	push 	#dbg_irq
019C20 65 E0 59 33 
019C24 65 E0 E1 03 		      	push 	#496
019C28 B9 99 FD FF 		      	bsr  	set_vector
019C2C 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_225:
019C30 82 ED 01 1A 		      	mov  	sp,bp
019C34 57 BF 11 00 		      	pop  	bp
019C38 57 CF 11 00 		      	pop  	xlr
019C3C 57 FF 11 00 		      	pop  	lr
019C40 37 FF 01 00 		      	rtl  	#0
                	debugger_224:
019C44 C6 FD 11 00 		      	lw   	lr,8[bp]
019C48 E3 FD 21 00 		      	sw   	lr,16[bp]
019C4C BA FC FF FF 		      	bra  	debugger_225
                	endpublic
                	
                		rodata
                		align	16                	
                		align	8                	
                		extern	RTCC_BUF
                		extern	Milliseconds
                		extern	Milliseconds
                		rodata
                		align	16                	
                		align	8                	
                	stdio_2:	; moderr 
01A000 6D 00 6F 00 64 00 65 00 		dc	109,111,100,101,114,114,32,0
01A008 72 00 72 00 20 00 00 00 
                	;	global	putch
                	;	global	getcharNoWait
                	;	global	printf
                	;	global	putnum
                	;	global	putstr
                	;	global	getchar
                	;	global	putstr2
                		extern	isdigit
                	;	global	puthexnum
                	;	global	puthexnum
                		rodata
                		align	16                	
                		align	8                	
                	;	global	islower
                	;	global	ispunct
                	;	global	isupper
                	;	global	isprint
                	;	global	tolower
                	;	global	toupper
                	;	global	isxdigit
                	;	global	isalpha
                	;	global	isspace
                	;	global	isdigit
                	;	global	isgraph
                	;	global	isalnum
                	;	global	iscntrl
                	;	global	iscntrl
                		rodata
                		align	16                	
                		align	8                	
                	disassem_322:	; Disassem:
01A010 44 00 69 00 73 00 61 00 		dc	68,105,115,97,115,115,101,109
01A018 73 00 73 00 65 00 6D 00 
01A020 3A 00 0D 00 0A 00 00 00 		dc	58,13,10,0
                	disassem_217:	; ?????
01A028 3F 00 3F 00 3F 00 3F 00 		dc	63,63,63,63,63,13,10,0
01A030 3F 00 0D 00 0A 00 00 00 
                	disassem_216:	; #$%X
01A038 23 00 24 00 25 00 58 00 		dc	35,36,37,88,13,10,0
01A040 0D 00 0A 00 00 00       
                	disassem_215:	; #$%X
01A046 23 00 24 00 25 00 58 00 		dc	35,36,37,88,13,10,0
01A04E 0D 00 0A 00 00 00       
                	disassem_214:	; LDI   
01A054 4C 00 44 00 49 00 20 00 		dc	76,68,73,32,32,32,0
01A05C 20 00 20 00 00 00       
                	disassem_213:	; NOP
01A062 4E 00 4F 00 50 00 0D 00 		dc	78,79,80,13,10,0
01A06A 0A 00 00 00             
                	disassem_212:
01A06E 0D 00 0A 00 00 00       		dc	13,10,0
                	disassem_211:	; POP   
01A074 50 00 4F 00 50 00 20 00 		dc	80,79,80,32,32,32,0
01A07C 20 00 20 00 00 00       
                	disassem_210:
01A082 0D 00 0A 00 00 00       		dc	13,10,0
                	disassem_209:	; PUSH  
01A088 50 00 55 00 53 00 48 00 		dc	80,85,83,72,32,32,0
01A090 20 00 20 00 00 00       
                	disassem_208:	; SWCR 
01A096 53 00 57 00 43 00 52 00 		dc	83,87,67,82,32,0
01A09E 20 00 00 00             
                	disassem_207:	; LWAR 
01A0A2 4C 00 57 00 41 00 52 00 		dc	76,87,65,82,32,0
01A0AA 20 00 00 00             
                	disassem_206:	; SW   
01A0AE 53 00 57 00 20 00 20 00 		dc	83,87,32,32,32,0
01A0B6 20 00 00 00             
                	disassem_205:	; SH   
01A0BA 53 00 48 00 20 00 20 00 		dc	83,72,32,32,32,0
01A0C2 20 00 00 00             
                	disassem_204:	; SC   
01A0C6 53 00 43 00 20 00 20 00 		dc	83,67,32,32,32,0
01A0CE 20 00 00 00             
                	disassem_203:	; SB   
01A0D2 53 00 42 00 20 00 20 00 		dc	83,66,32,32,32,0
01A0DA 20 00 00 00             
                	disassem_202:	; SW   
01A0DE 53 00 57 00 20 00 20 00 		dc	83,87,32,32,32,0
01A0E6 20 00 00 00             
                	disassem_201:	; SH   
01A0EA 53 00 48 00 20 00 20 00 		dc	83,72,32,32,32,0
01A0F2 20 00 00 00             
                	disassem_200:	; SC   
01A0F6 53 00 43 00 20 00 20 00 		dc	83,67,32,32,32,0
01A0FE 20 00 00 00             
                	disassem_199:	; SB   
01A102 53 00 42 00 20 00 20 00 		dc	83,66,32,32,32,0
01A10A 20 00 00 00             
                	disassem_198:	; LEA  
01A10E 4C 00 45 00 41 00 20 00 		dc	76,69,65,32,32,0
01A116 20 00 00 00             
                	disassem_197:	; LW   
01A11A 4C 00 57 00 20 00 20 00 		dc	76,87,32,32,32,0
01A122 20 00 00 00             
                	disassem_196:	; LHU  
01A126 4C 00 48 00 55 00 20 00 		dc	76,72,85,32,32,0
01A12E 20 00 00 00             
                	disassem_195:	; LH   
01A132 4C 00 48 00 20 00 20 00 		dc	76,72,32,32,32,0
01A13A 20 00 00 00             
                	disassem_194:	; LCU  
01A13E 4C 00 43 00 55 00 20 00 		dc	76,67,85,32,32,0
01A146 20 00 00 00             
                	disassem_193:	; LC   
01A14A 4C 00 43 00 20 00 20 00 		dc	76,67,32,32,32,0
01A152 20 00 00 00             
                	disassem_192:	; LBU  
01A156 4C 00 42 00 55 00 20 00 		dc	76,66,85,32,32,0
01A15E 20 00 00 00             
                	disassem_191:	; LB   
01A162 4C 00 42 00 20 00 20 00 		dc	76,66,32,32,32,0
01A16A 20 00 00 00             
                	disassem_190:	; LEA  
01A16E 4C 00 45 00 41 00 20 00 		dc	76,69,65,32,32,0
01A176 20 00 00 00             
                	disassem_189:	; LW   
01A17A 4C 00 57 00 20 00 20 00 		dc	76,87,32,32,32,0
01A182 20 00 00 00             
                	disassem_188:	; LHU  
01A186 4C 00 48 00 55 00 20 00 		dc	76,72,85,32,32,0
01A18E 20 00 00 00             
                	disassem_187:	; LH   
01A192 4C 00 48 00 20 00 20 00 		dc	76,72,32,32,32,0
01A19A 20 00 00 00             
                	disassem_186:	; LCU  
01A19E 4C 00 43 00 55 00 20 00 		dc	76,67,85,32,32,0
01A1A6 20 00 00 00             
                	disassem_185:	; LC   
01A1AA 4C 00 43 00 20 00 20 00 		dc	76,67,32,32,32,0
01A1B2 20 00 00 00             
                	disassem_184:	; LBU  
01A1B6 4C 00 42 00 55 00 20 00 		dc	76,66,85,32,32,0
01A1BE 20 00 00 00             
                	disassem_183:	; LB   
01A1C2 4C 00 42 00 20 00 20 00 		dc	76,66,32,32,32,0
01A1CA 20 00 00 00             
                	disassem_182:	; RTS   #%X
01A1CE 52 00 54 00 53 00 20 00 		dc	82,84,83,32,32,32,35,37
01A1D6 20 00 20 00 23 00 25 00 
01A1DE 58 00 0D 00 0A 00 00 00 		dc	88,13,10,0
                	disassem_181:	; RTL   #%X
01A1E6 52 00 54 00 4C 00 20 00 		dc	82,84,76,32,32,32,35,37
01A1EE 20 00 20 00 23 00 25 00 
01A1F6 58 00 0D 00 0A 00 00 00 		dc	88,13,10,0
                	disassem_180:	; BRA   $%X
01A1FE 42 00 52 00 41 00 20 00 		dc	66,82,65,32,32,32,36,37
01A206 20 00 20 00 24 00 25 00 
01A20E 58 00 0D 00 0A 00 00 00 		dc	88,13,10,0
                	disassem_179:	; BSR   $%X
01A216 42 00 53 00 52 00 20 00 		dc	66,83,82,32,32,32,36,37
01A21E 20 00 20 00 24 00 25 00 
01A226 58 00 0D 00 0A 00 00 00 		dc	88,13,10,0
                	disassem_178:	; ???  
01A22E 3F 00 3F 00 3F 00 20 00 		dc	63,63,63,32,32,0
01A236 20 00 00 00             
                	disassem_177:	; BGE  
01A23A 42 00 47 00 45 00 20 00 		dc	66,71,69,32,32,0
01A242 20 00 00 00             
                	disassem_176:	; BGT  
01A246 42 00 47 00 54 00 20 00 		dc	66,71,84,32,32,0
01A24E 20 00 00 00             
                	disassem_175:	; BLE  
01A252 42 00 4C 00 45 00 20 00 		dc	66,76,69,32,32,0
01A25A 20 00 00 00             
                	disassem_174:	; BLT  
01A25E 42 00 4C 00 54 00 20 00 		dc	66,76,84,32,32,0
01A266 20 00 00 00             
                	disassem_173:	; BNE  
01A26A 42 00 4E 00 45 00 20 00 		dc	66,78,69,32,32,0
01A272 20 00 00 00             
                	disassem_172:	; BEQ  
01A276 42 00 45 00 51 00 20 00 		dc	66,69,81,32,32,0
01A27E 20 00 00 00             
                	disassem_171:	; EOR  
01A282 45 00 4F 00 52 00 20 00 		dc	69,79,82,32,32,0
01A28A 20 00 00 00             
                	disassem_170:	; OR   
01A28E 4F 00 52 00 20 00 20 00 		dc	79,82,32,32,32,0
01A296 20 00 00 00             
                	disassem_169:	; AND  
01A29A 41 00 4E 00 44 00 20 00 		dc	65,78,68,32,32,0
01A2A2 20 00 00 00             
                	disassem_168:	; DIVU 
01A2A6 44 00 49 00 56 00 55 00 		dc	68,73,86,85,32,0
01A2AE 20 00 00 00             
                	disassem_167:	; DIV  
01A2B2 44 00 49 00 56 00 20 00 		dc	68,73,86,32,32,0
01A2BA 20 00 00 00             
                	disassem_166:	; MULU 
01A2BE 4D 00 55 00 4C 00 55 00 		dc	77,85,76,85,32,0
01A2C6 20 00 00 00             
                	disassem_165:	; MUL  
01A2CA 4D 00 55 00 4C 00 20 00 		dc	77,85,76,32,32,0
01A2D2 20 00 00 00             
                	disassem_164:	; CMPU 
01A2D6 43 00 4D 00 50 00 55 00 		dc	67,77,80,85,32,0
01A2DE 20 00 00 00             
                	disassem_163:	; CMP  
01A2E2 43 00 4D 00 50 00 20 00 		dc	67,77,80,32,32,0
01A2EA 20 00 00 00             
                	disassem_162:	; SUBU 
01A2EE 53 00 55 00 42 00 55 00 		dc	83,85,66,85,32,0
01A2F6 20 00 00 00             
                	disassem_161:	; SUB  
01A2FA 53 00 55 00 42 00 20 00 		dc	83,85,66,32,32,0
01A302 20 00 00 00             
                	disassem_160:	; ADDU 
01A306 41 00 44 00 44 00 55 00 		dc	65,68,68,85,32,0
01A30E 20 00 00 00             
                	disassem_159:	; ADD  
01A312 41 00 44 00 44 00 20 00 		dc	65,68,68,32,32,0
01A31A 20 00 00 00             
                	disassem_158:
01A31E 0D 00 0A 00 00 00       		dc	13,10,0
                	disassem_157:	; ,
01A324 2C 00 00 00             		dc	44,0
                	disassem_156:	; MTSPR 
01A328 4D 00 54 00 53 00 50 00 		dc	77,84,83,80,82,32,0
01A330 52 00 20 00 00 00       
                	disassem_155:
01A336 0D 00 0A 00 00 00       		dc	13,10,0
                	disassem_154:	; MFSPR 
01A33C 4D 00 46 00 53 00 50 00 		dc	77,70,83,80,82,32,0
01A344 52 00 20 00 00 00       
                	disassem_153:	; EOR  
01A34A 45 00 4F 00 52 00 20 00 		dc	69,79,82,32,32,0
01A352 20 00 00 00             
                	disassem_152:	; OR   
01A356 4F 00 52 00 20 00 20 00 		dc	79,82,32,32,32,0
01A35E 20 00 00 00             
                	disassem_151:	; AND  
01A362 41 00 4E 00 44 00 20 00 		dc	65,78,68,32,32,0
01A36A 20 00 00 00             
                	disassem_150:	; DIVU 
01A36E 44 00 49 00 56 00 55 00 		dc	68,73,86,85,32,0
01A376 20 00 00 00             
                	disassem_149:	; DIV  
01A37A 44 00 49 00 56 00 20 00 		dc	68,73,86,32,32,0
01A382 20 00 00 00             
                	disassem_148:	; MULU 
01A386 4D 00 55 00 4C 00 55 00 		dc	77,85,76,85,32,0
01A38E 20 00 00 00             
                	disassem_147:	; MUL  
01A392 4D 00 55 00 4C 00 20 00 		dc	77,85,76,32,32,0
01A39A 20 00 00 00             
                	disassem_146:	; CMPU 
01A39E 43 00 4D 00 50 00 55 00 		dc	67,77,80,85,32,0
01A3A6 20 00 00 00             
                	disassem_145:	; CMP  
01A3AA 43 00 4D 00 50 00 20 00 		dc	67,77,80,32,32,0
01A3B2 20 00 00 00             
                	disassem_144:	; SUBU 
01A3B6 53 00 55 00 42 00 55 00 		dc	83,85,66,85,32,0
01A3BE 20 00 00 00             
                	disassem_143:	; SUB  
01A3C2 53 00 55 00 42 00 20 00 		dc	83,85,66,32,32,0
01A3CA 20 00 00 00             
                	disassem_142:	; ADDU 
01A3CE 41 00 44 00 44 00 55 00 		dc	65,68,68,85,32,0
01A3D6 20 00 00 00             
                	disassem_141:	; ADD  
01A3DA 41 00 44 00 44 00 20 00 		dc	65,68,68,32,32,0
01A3E2 20 00 00 00             
                	disassem_140:	; ???
01A3E6 3F 00 3F 00 3F 00 0D 00 		dc	63,63,63,13,10,0
01A3EE 0A 00 00 00             
                	disassem_139:	; RTI
01A3F2 52 00 54 00 49 00 0D 00 		dc	82,84,73,13,10,0
01A3FA 0A 00 00 00             
                	disassem_138:	; RTE
01A3FE 52 00 54 00 45 00 0D 00 		dc	82,84,69,13,10,0
01A406 0A 00 00 00             
                	disassem_137:	; RTD
01A40A 52 00 54 00 44 00 0D 00 		dc	82,84,68,13,10,0
01A412 0A 00 00 00             
                	disassem_136:	; WAI
01A416 57 00 41 00 49 00 0D 00 		dc	87,65,73,13,10,0
01A41E 0A 00 00 00             
                	disassem_135:	; SEI
01A422 53 00 45 00 49 00 0D 00 		dc	83,69,73,13,10,0
01A42A 0A 00 00 00             
                	disassem_134:	; CLI
01A42E 43 00 4C 00 49 00 0D 00 		dc	67,76,73,13,10,0
01A436 0A 00 00 00             
                	disassem_133:	; IMM
01A43A 49 00 4D 00 4D 00 0D 00 		dc	73,77,77,13,10,0
01A442 0A 00 00 00             
                	disassem_128:
01A446 0D 00 0A 00 00 00       		dc	13,10,0
                	disassem_127:	; %s 
01A44C 25 00 73 00 20 00 00 00 		dc	37,115,32,0
                	disassem_126:
01A454 0D 00 0A 00 00 00       		dc	13,10,0
                	disassem_125:	; MOV   
01A45A 4D 00 4F 00 56 00 20 00 		dc	77,79,86,32,32,32,0
01A462 20 00 20 00 00 00       
                	disassem_120:	; %06X
01A468 25 00 30 00 36 00 58 00 		dc	37,48,54,88,13,10,0
01A470 0D 00 0A 00 00 00       
                	disassem_119:	; %s 
01A476 25 00 73 00 20 00 00 00 		dc	37,115,32,0
                	disassem_114:	; #$%X
01A47E 23 00 24 00 25 00 58 00 		dc	35,36,37,88,13,10,0
01A486 0D 00 0A 00 00 00       
                	disassem_113:	; #$%X
01A48C 23 00 24 00 25 00 58 00 		dc	35,36,37,88,13,10,0
01A494 0D 00 0A 00 00 00       
                	disassem_112:	; %s 
01A49A 25 00 73 00 20 00 00 00 		dc	37,115,32,0
                	disassem_108:	; %s 
01A4A2 25 00 73 00 20 00 00 00 		dc	37,115,32,0
                	disassem_96:	; [R%d]
01A4AA 5B 00 52 00 25 00 64 00 		dc	91,82,37,100,93,13,10,0
01A4B2 5D 00 0D 00 0A 00 00 00 
                	disassem_95:	; [R%d
01A4BA 5B 00 52 00 25 00 64 00 		dc	91,82,37,100,0
01A4C2 00 00                   
                	disassem_94:	; [R%d+R%d
01A4C4 5B 00 52 00 25 00 64 00 		dc	91,82,37,100,43,82,37,100
01A4CC 2B 00 52 00 25 00 64 00 
01A4D4 00 00                   		dc	0
                	disassem_93:	; $%X
01A4D6 24 00 25 00 58 00 00 00 		dc	36,37,88,0
                	disassem_92:	; %s R%d,
01A4DE 25 00 73 00 20 00 52 00 		dc	37,115,32,82,37,100,44,0
01A4E6 25 00 64 00 2C 00 00 00 
                	disassem_83:	; BRK?  #%X
01A4EE 42 00 52 00 4B 00 3F 00 		dc	66,82,75,63,32,32,35,37
01A4F6 20 00 20 00 23 00 25 00 
01A4FE 58 00 0D 00 0A 00 00 00 		dc	88,13,10,0
                	disassem_82:	; INT   #%X
01A506 49 00 4E 00 54 00 20 00 		dc	73,78,84,32,32,32,35,37
01A50E 20 00 20 00 23 00 25 00 
01A516 58 00 0D 00 0A 00 00 00 		dc	88,13,10,0
                	disassem_81:	; DBG   #%X
01A51E 44 00 42 00 47 00 20 00 		dc	68,66,71,32,32,32,35,37
01A526 20 00 20 00 23 00 25 00 
01A52E 58 00 0D 00 0A 00 00 00 		dc	88,13,10,0
                	disassem_80:	; SYS   #%X
01A536 53 00 59 00 53 00 20 00 		dc	83,89,83,32,32,32,35,37
01A53E 20 00 20 00 23 00 25 00 
01A546 58 00 0D 00 0A 00 00 00 		dc	88,13,10,0
                	disassem_74:	; ]
01A54E 5D 00 0D 00 0A 00 00 00 		dc	93,13,10,0
                	disassem_73:	; *%d]
01A556 2A 00 25 00 64 00 5D 00 		dc	42,37,100,93,13,10,0
01A55E 0D 00 0A 00 00 00       
                	disassem_65:
01A564 0D 00 0A 00 00 00       		dc	13,10,0
                	disassem_64:	; [R%d]
01A56A 5B 00 52 00 25 00 64 00 		dc	91,82,37,100,93,13,10,0
01A572 5D 00 0D 00 0A 00 00 00 
                	disassem_63:	; $%X
01A57A 24 00 25 00 58 00 00 00 		dc	36,37,88,0
                	disassem_62:	; $%X
01A582 24 00 25 00 58 00 00 00 		dc	36,37,88,0
                	disassem_42:	; SPR%d
01A58A 53 00 50 00 52 00 25 00 		dc	83,80,82,37,100,0
01A592 64 00 00 00             
                	disassem_41:	; DBSTAT
01A596 44 00 42 00 53 00 54 00 		dc	68,66,83,84,65,84,0
01A59E 41 00 54 00 00 00       
                	disassem_40:	; DBCTRL
01A5A4 44 00 42 00 43 00 54 00 		dc	68,66,67,84,82,76,0
01A5AC 52 00 4C 00 00 00       
                	disassem_39:	; DBAD3
01A5B2 44 00 42 00 41 00 44 00 		dc	68,66,65,68,51,0
01A5BA 33 00 00 00             
                	disassem_38:	; DBAD2
01A5BE 44 00 42 00 41 00 44 00 		dc	68,66,65,68,50,0
01A5C6 32 00 00 00             
                	disassem_37:	; DBAD1
01A5CA 44 00 42 00 41 00 44 00 		dc	68,66,65,68,49,0
01A5D2 31 00 00 00             
                	disassem_36:	; DBAD0
01A5D6 44 00 42 00 41 00 44 00 		dc	68,66,65,68,48,0
01A5DE 30 00 00 00             
                	disassem_35:	; VBR
01A5E2 56 00 42 00 52 00 00 00 		dc	86,66,82,0
                	disassem_34:	; EPC
01A5EA 45 00 50 00 43 00 00 00 		dc	69,80,67,0
                	disassem_33:	; IPC
01A5F2 49 00 50 00 43 00 00 00 		dc	73,80,67,0
                	disassem_32:	; DPC
01A5FA 44 00 50 00 43 00 00 00 		dc	68,80,67,0
                	disassem_31:	; CLK
01A602 43 00 4C 00 4B 00 00 00 		dc	67,76,75,0
                	disassem_30:	; TICK
01A60A 54 00 49 00 43 00 4B 00 		dc	84,73,67,75,0
01A612 00 00                   
                	disassem_29:	; CR3
01A614 43 00 52 00 33 00 00 00 		dc	67,82,51,0
                	disassem_28:	; CR0
01A61C 43 00 52 00 30 00 00 00 		dc	67,82,48,0
                	disassem_24:	; R%d
01A624 52 00 25 00 64 00 00 00 		dc	82,37,100,0
                	disassem_20:	; R%d
01A62C 52 00 25 00 64 00 00 00 		dc	82,37,100,0
                	disassem_16:	; R%d,
01A634 52 00 25 00 64 00 2C 00 		dc	82,37,100,44,0
01A63C 00 00                   
                	disassem_12:	; R%d,
01A63E 52 00 25 00 64 00 2C 00 		dc	82,37,100,44,0
01A646 00 00                   
                	disassem_8:	; r%d
01A648 72 00 25 00 64 00 00 00 		dc	114,37,100,0
                	disassem_4:	; %06X %02X %02X %02X %02X	
01A650 25 00 30 00 36 00 58 00 		dc	37,48,54,88,32,37,48,50
01A658 20 00 25 00 30 00 32 00 
01A660 58 00 20 00 25 00 30 00 		dc	88,32,37,48,50,88,32,37
01A668 32 00 58 00 20 00 25 00 
01A670 30 00 32 00 58 00 20 00 		dc	48,50,88,32,37,48,50,88
01A678 25 00 30 00 32 00 58 00 
01A680 09 00 00 00             		dc	9,0
                	;	global	DispRR
                	;	global	DumpInsnBytes
                		extern	GetCurrAttr
                	;	global	disassem
                	;	global	reverse_video
                		extern	printf
                	;	global	DispBcc
                	;	global	disassem20
                		extern	putstr2
                	;	global	SetCurAttr
                	;	global	SetCurAttr
                		rodata
01A684 00 00 00 00 00 00 00 00 		align	1
01A68C 00 00 00 00             
                	
                		align	8                	
                	debugger_208:	; DBG>
01A690 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,0
01A698 47 00 3E 00 00 00       
                	debugger_143:	; ds2=%08X
01A69E 64 00 73 00 32 00 3D 00 		dc	100,115,50,61,37,48,56,88
01A6A6 25 00 30 00 38 00 58 00 
01A6AE 0D 00 0A 00 00 00       		dc	13,10,0
                	debugger_142:	; ds2=%08X
01A6B4 64 00 73 00 32 00 3D 00 		dc	100,115,50,61,37,48,56,88
01A6BC 25 00 30 00 38 00 58 00 
01A6C4 0D 00 0A 00 00 00       		dc	13,10,0
                	debugger_141:	; ds1=%08X
01A6CA 64 00 73 00 31 00 3D 00 		dc	100,115,49,61,37,48,56,88
01A6D2 25 00 30 00 38 00 58 00 
01A6DA 0D 00 0A 00 00 00       		dc	13,10,0
                	debugger_140:	; ds0=%08X
01A6E0 64 00 73 00 30 00 3D 00 		dc	100,115,48,61,37,48,56,88
01A6E8 25 00 30 00 38 00 58 00 
01A6F0 0D 00 0A 00 00 00       		dc	13,10,0
                	debugger_139:	; db2=%08X
01A6F6 64 00 62 00 32 00 3D 00 		dc	100,98,50,61,37,48,56,88
01A6FE 25 00 30 00 38 00 58 00 
01A706 0D 00 0A 00 00 00       		dc	13,10,0
                	debugger_138:	; db2=%08X
01A70C 64 00 62 00 32 00 3D 00 		dc	100,98,50,61,37,48,56,88
01A714 25 00 30 00 38 00 58 00 
01A71C 0D 00 0A 00 00 00       		dc	13,10,0
                	debugger_137:	; db1=%08X
01A722 64 00 62 00 31 00 3D 00 		dc	100,98,49,61,37,48,56,88
01A72A 25 00 30 00 38 00 58 00 
01A732 0D 00 0A 00 00 00       		dc	13,10,0
                	debugger_136:	; db0=%08X
01A738 64 00 62 00 30 00 3D 00 		dc	100,98,48,61,37,48,56,88
01A740 25 00 30 00 38 00 58 00 
01A748 0D 00 0A 00 00 00       		dc	13,10,0
                	debugger_135:	; d2=%08X
01A74E 64 00 32 00 3D 00 25 00 		dc	100,50,61,37,48,56,88,13
01A756 30 00 38 00 58 00 0D 00 
01A75E 0A 00 00 00             		dc	10,0
                	debugger_134:	; d2=%08X
01A762 64 00 32 00 3D 00 25 00 		dc	100,50,61,37,48,56,88,13
01A76A 30 00 38 00 58 00 0D 00 
01A772 0A 00 00 00             		dc	10,0
                	debugger_133:	; d1=%08X
01A776 64 00 31 00 3D 00 25 00 		dc	100,49,61,37,48,56,88,13
01A77E 30 00 38 00 58 00 0D 00 
01A786 0A 00 00 00             		dc	10,0
                	debugger_132:	; d0=%08X
01A78A 64 00 30 00 3D 00 25 00 		dc	100,48,61,37,48,56,88,13
01A792 30 00 38 00 58 00 0D 00 
01A79A 0A 00 00 00             		dc	10,0
                	debugger_131:	; i2=%08X
01A79E 69 00 32 00 3D 00 25 00 		dc	105,50,61,37,48,56,88,13
01A7A6 30 00 38 00 58 00 0D 00 
01A7AE 0A 00 00 00             		dc	10,0
                	debugger_130:	; i2=%08X
01A7B2 69 00 32 00 3D 00 25 00 		dc	105,50,61,37,48,56,88,13
01A7BA 30 00 38 00 58 00 0D 00 
01A7C2 0A 00 00 00             		dc	10,0
                	debugger_129:	; i1=%08X
01A7C6 69 00 31 00 3D 00 25 00 		dc	105,49,61,37,48,56,88,13
01A7CE 30 00 38 00 58 00 0D 00 
01A7D6 0A 00 00 00             		dc	10,0
                	debugger_128:	; i0=%08X
01A7DA 69 00 30 00 3D 00 25 00 		dc	105,48,61,37,48,56,88,13
01A7E2 30 00 38 00 58 00 0D 00 
01A7EA 0A 00 00 00             		dc	10,0
                	debugger_125:	; DBG>
01A7EE 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,0
01A7F6 47 00 3E 00 00 00       
                	debugger_110:	; DBG>dsb%d <not set>
01A7FC 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,100,115
01A804 47 00 3E 00 64 00 73 00 
01A80C 62 00 25 00 64 00 20 00 		dc	98,37,100,32,60,110,111,116
01A814 3C 00 6E 00 6F 00 74 00 
01A81C 20 00 73 00 65 00 74 00 		dc	32,115,101,116,62,0
01A824 3E 00 00 00             
                	debugger_109:	; DBG>dsb%d=%08X
01A828 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,100,115
01A830 47 00 3E 00 64 00 73 00 
01A838 62 00 25 00 64 00 3D 00 		dc	98,37,100,61,37,48,56,88
01A840 25 00 30 00 38 00 58 00 
01A848 0D 00 0A 00 00 00       		dc	13,10,0
                	debugger_94:	; DBG>db%d <not set>
01A84E 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,100,98
01A856 47 00 3E 00 64 00 62 00 
01A85E 25 00 64 00 20 00 3C 00 		dc	37,100,32,60,110,111,116,32
01A866 6E 00 6F 00 74 00 20 00 
01A86E 73 00 65 00 74 00 3E 00 		dc	115,101,116,62,0
01A876 00 00                   
                	debugger_93:	; DBG>db%d=%08X
01A878 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,100,98
01A880 47 00 3E 00 64 00 62 00 
01A888 25 00 64 00 3D 00 25 00 		dc	37,100,61,37,48,56,88,13
01A890 30 00 38 00 58 00 0D 00 
01A898 0A 00 00 00             		dc	10,0
                	debugger_78:	; DBG>ib%d <not set>
01A89C 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,105,98
01A8A4 47 00 3E 00 69 00 62 00 
01A8AC 25 00 64 00 20 00 3C 00 		dc	37,100,32,60,110,111,116,32
01A8B4 6E 00 6F 00 74 00 20 00 
01A8BC 73 00 65 00 74 00 3E 00 		dc	115,101,116,62,0
01A8C4 00 00                   
                	debugger_77:	; DBG>ib%d=%08X
01A8C6 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,105,98
01A8CE 47 00 3E 00 69 00 62 00 
01A8D6 25 00 64 00 3D 00 25 00 		dc	37,100,61,37,48,56,88,13
01A8DE 30 00 38 00 58 00 0D 00 
01A8E6 0A 00 00 00             		dc	10,0
                	debugger_14:	; DBG>
01A8EA 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,0
01A8F2 47 00 3E 00 00 00       
                	debugger_13:	; Type 'q' to quit.
01A8F8 0D 00 0A 00 54 00 79 00 		dc	13,10,84,121,112,101,32,39
01A900 70 00 65 00 20 00 27 00 
01A908 71 00 27 00 20 00 74 00 		dc	113,39,32,116,111,32,113,117
01A910 6F 00 20 00 71 00 75 00 
01A918 69 00 74 00 2E 00 00 00 		dc	105,116,46,0
                	debugger_12:	; arm debugging mode using the 'a' command.
01A920 0D 00 0A 00 61 00 72 00 		dc	13,10,97,114,109,32,100,101
01A928 6D 00 20 00 64 00 65 00 
01A930 62 00 75 00 67 00 67 00 		dc	98,117,103,103,105,110,103,32
01A938 69 00 6E 00 67 00 20 00 
01A940 6D 00 6F 00 64 00 65 00 		dc	109,111,100,101,32,117,115,105
01A948 20 00 75 00 73 00 69 00 
01A950 6E 00 67 00 20 00 74 00 		dc	110,103,32,116,104,101,32,39
01A958 68 00 65 00 20 00 27 00 
01A960 61 00 27 00 20 00 63 00 		dc	97,39,32,99,111,109,109,97
01A968 6F 00 6D 00 6D 00 61 00 
01A970 6E 00 64 00 2E 00 00 00 		dc	110,100,46,0
                	debugger_11:	; Once the debug registers are set it is necessary to 
01A978 0D 00 0A 00 4F 00 6E 00 		dc	13,10,79,110,99,101,32,116
01A980 63 00 65 00 20 00 74 00 
01A988 68 00 65 00 20 00 64 00 		dc	104,101,32,100,101,98,117,103
01A990 65 00 62 00 75 00 67 00 
01A998 20 00 72 00 65 00 67 00 		dc	32,114,101,103,105,115,116,101
01A9A0 69 00 73 00 74 00 65 00 
01A9A8 72 00 73 00 20 00 61 00 		dc	114,115,32,97,114,101,32,115
01A9B0 72 00 65 00 20 00 73 00 
01A9B8 65 00 74 00 20 00 69 00 		dc	101,116,32,105,116,32,105,115
01A9C0 74 00 20 00 69 00 73 00 
01A9C8 20 00 6E 00 65 00 63 00 		dc	32,110,101,99,101,115,115,97
01A9D0 65 00 73 00 73 00 61 00 
01A9D8 72 00 79 00 20 00 74 00 		dc	114,121,32,116,111,32,0
01A9E0 6F 00 20 00 00 00       
                	debugger_10:	; Setting a register to zero will clear the breakpoint.
01A9E6 0D 00 0A 00 53 00 65 00 		dc	13,10,83,101,116,116,105,110
01A9EE 74 00 74 00 69 00 6E 00 
01A9F6 67 00 20 00 61 00 20 00 		dc	103,32,97,32,114,101,103,105
01A9FE 72 00 65 00 67 00 69 00 
01AA06 73 00 74 00 65 00 72 00 		dc	115,116,101,114,32,116,111,32
01AA0E 20 00 74 00 6F 00 20 00 
01AA16 7A 00 65 00 72 00 6F 00 		dc	122,101,114,111,32,119,105,108
01AA1E 20 00 77 00 69 00 6C 00 
01AA26 6C 00 20 00 63 00 6C 00 		dc	108,32,99,108,101,97,114,32
01AA2E 65 00 61 00 72 00 20 00 
01AA36 74 00 68 00 65 00 20 00 		dc	116,104,101,32,98,114,101,97
01AA3E 62 00 72 00 65 00 61 00 
01AA46 6B 00 70 00 6F 00 69 00 		dc	107,112,111,105,110,116,46,0
01AA4E 6E 00 74 00 2E 00 00 00 
                	debugger_9:	; indicate a data store only breakpoint.
01AA56 0D 00 0A 00 69 00 6E 00 		dc	13,10,105,110,100,105,99,97
01AA5E 64 00 69 00 63 00 61 00 
01AA66 74 00 65 00 20 00 61 00 		dc	116,101,32,97,32,100,97,116
01AA6E 20 00 64 00 61 00 74 00 
01AA76 61 00 20 00 73 00 74 00 		dc	97,32,115,116,111,114,101,32
01AA7E 6F 00 72 00 65 00 20 00 
01AA86 6F 00 6E 00 6C 00 79 00 		dc	111,110,108,121,32,98,114,101
01AA8E 20 00 62 00 72 00 65 00 
01AA96 61 00 6B 00 70 00 6F 00 		dc	97,107,112,111,105,110,116,46
01AA9E 69 00 6E 00 74 00 2E 00 
01AAA6 00 00                   		dc	0
                	debugger_8:	; breakpoint. Prefix the register number with 'ds' to
01AAA8 0D 00 0A 00 62 00 72 00 		dc	13,10,98,114,101,97,107,112
01AAB0 65 00 61 00 6B 00 70 00 
01AAB8 6F 00 69 00 6E 00 74 00 		dc	111,105,110,116,46,32,80,114
01AAC0 2E 00 20 00 50 00 72 00 
01AAC8 65 00 66 00 69 00 78 00 		dc	101,102,105,120,32,116,104,101
01AAD0 20 00 74 00 68 00 65 00 
01AAD8 20 00 72 00 65 00 67 00 		dc	32,114,101,103,105,115,116,101
01AAE0 69 00 73 00 74 00 65 00 
01AAE8 72 00 20 00 6E 00 75 00 		dc	114,32,110,117,109,98,101,114
01AAF0 6D 00 62 00 65 00 72 00 
01AAF8 20 00 77 00 69 00 74 00 		dc	32,119,105,116,104,32,39,100
01AB00 68 00 20 00 27 00 64 00 
01AB08 73 00 27 00 20 00 74 00 		dc	115,39,32,116,111,0
01AB10 6F 00 00 00             
                	debugger_7:	; instruction breakpoint or a 'd' to indicate a data
01AB14 0D 00 0A 00 69 00 6E 00 		dc	13,10,105,110,115,116,114,117
01AB1C 73 00 74 00 72 00 75 00 
01AB24 63 00 74 00 69 00 6F 00 		dc	99,116,105,111,110,32,98,114
01AB2C 6E 00 20 00 62 00 72 00 
01AB34 65 00 61 00 6B 00 70 00 		dc	101,97,107,112,111,105,110,116
01AB3C 6F 00 69 00 6E 00 74 00 
01AB44 20 00 6F 00 72 00 20 00 		dc	32,111,114,32,97,32,39,100
01AB4C 61 00 20 00 27 00 64 00 
01AB54 27 00 20 00 74 00 6F 00 		dc	39,32,116,111,32,105,110,100
01AB5C 20 00 69 00 6E 00 64 00 
01AB64 69 00 63 00 61 00 74 00 		dc	105,99,97,116,101,32,97,32
01AB6C 65 00 20 00 61 00 20 00 
01AB74 64 00 61 00 74 00 61 00 		dc	100,97,116,97,0
01AB7C 00 00                   
                	debugger_6:	; Prefix the register number with an 'i' to indicate an
01AB7E 0D 00 0A 00 50 00 72 00 		dc	13,10,80,114,101,102,105,120
01AB86 65 00 66 00 69 00 78 00 
01AB8E 20 00 74 00 68 00 65 00 		dc	32,116,104,101,32,114,101,103
01AB96 20 00 72 00 65 00 67 00 
01AB9E 69 00 73 00 74 00 65 00 		dc	105,115,116,101,114,32,110,117
01ABA6 72 00 20 00 6E 00 75 00 
01ABAE 6D 00 62 00 65 00 72 00 		dc	109,98,101,114,32,119,105,116
01ABB6 20 00 77 00 69 00 74 00 
01ABBE 68 00 20 00 61 00 6E 00 		dc	104,32,97,110,32,39,105,39
01ABC6 20 00 27 00 69 00 27 00 
01ABCE 20 00 74 00 6F 00 20 00 		dc	32,116,111,32,105,110,100,105
01ABD6 69 00 6E 00 64 00 69 00 
01ABDE 63 00 61 00 74 00 65 00 		dc	99,97,116,101,32,97,110,0
01ABE6 20 00 61 00 6E 00 00 00 
                	debugger_5:	; There are a total of four breakpoint registers (0-3).
01ABEE 0D 00 0A 00 54 00 68 00 		dc	13,10,84,104,101,114,101,32
01ABF6 65 00 72 00 65 00 20 00 
01ABFE 61 00 72 00 65 00 20 00 		dc	97,114,101,32,97,32,116,111
01AC06 61 00 20 00 74 00 6F 00 
01AC0E 74 00 61 00 6C 00 20 00 		dc	116,97,108,32,111,102,32,102
01AC16 6F 00 66 00 20 00 66 00 
01AC1E 6F 00 75 00 72 00 20 00 		dc	111,117,114,32,98,114,101,97
01AC26 62 00 72 00 65 00 61 00 
01AC2E 6B 00 70 00 6F 00 69 00 		dc	107,112,111,105,110,116,32,114
01AC36 6E 00 74 00 20 00 72 00 
01AC3E 65 00 67 00 69 00 73 00 		dc	101,103,105,115,116,101,114,115
01AC46 74 00 65 00 72 00 73 00 
01AC4E 20 00 28 00 30 00 2D 00 		dc	32,40,48,45,51,41,46,0
01AC56 33 00 29 00 2E 00 00 00 
                	debugger_4:	; DBG>i1=12345678     will assign 12345678 to i1
01AC5E 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,105,49
01AC66 47 00 3E 00 69 00 31 00 
01AC6E 3D 00 31 00 32 00 33 00 		dc	61,49,50,51,52,53,54,55
01AC76 34 00 35 00 36 00 37 00 
01AC7E 38 00 20 00 20 00 20 00 		dc	56,32,32,32,32,32,119,105
01AC86 20 00 20 00 77 00 69 00 
01AC8E 6C 00 6C 00 20 00 61 00 		dc	108,108,32,97,115,115,105,103
01AC96 73 00 73 00 69 00 67 00 
01AC9E 6E 00 20 00 31 00 32 00 		dc	110,32,49,50,51,52,53,54
01ACA6 33 00 34 00 35 00 36 00 
01ACAE 37 00 38 00 20 00 74 00 		dc	55,56,32,116,111,32,105,49
01ACB6 6F 00 20 00 69 00 31 00 
01ACBE 00 00                   		dc	0
                	debugger_3:	; an address to it.
01ACC0 0D 00 0A 00 61 00 6E 00 		dc	13,10,97,110,32,97,100,100
01ACC8 20 00 61 00 64 00 64 00 
01ACD0 72 00 65 00 73 00 73 00 		dc	114,101,115,115,32,116,111,32
01ACD8 20 00 74 00 6F 00 20 00 
01ACE0 69 00 74 00 2E 00 00 00 		dc	105,116,46,0
                	debugger_2:	; Following a breakpoint register with an '=' assigns 
01ACE8 0D 00 0A 00 46 00 6F 00 		dc	13,10,70,111,108,108,111,119
01ACF0 6C 00 6C 00 6F 00 77 00 
01ACF8 69 00 6E 00 67 00 20 00 		dc	105,110,103,32,97,32,98,114
01AD00 61 00 20 00 62 00 72 00 
01AD08 65 00 61 00 6B 00 70 00 		dc	101,97,107,112,111,105,110,116
01AD10 6F 00 69 00 6E 00 74 00 
01AD18 20 00 72 00 65 00 67 00 		dc	32,114,101,103,105,115,116,101
01AD20 69 00 73 00 74 00 65 00 
01AD28 72 00 20 00 77 00 69 00 		dc	114,32,119,105,116,104,32,97
01AD30 74 00 68 00 20 00 61 00 
01AD38 6E 00 20 00 27 00 3D 00 		dc	110,32,39,61,39,32,97,115
01AD40 27 00 20 00 61 00 73 00 
01AD48 73 00 69 00 67 00 6E 00 		dc	115,105,103,110,115,32,0
01AD50 73 00 20 00 00 00       
                	debugger_1:	; DBG>i2?
01AD56 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,105,50
01AD5E 47 00 3E 00 69 00 32 00 
01AD66 3F 00 00 00             		dc	63,0
                	debugger_0:	; '?' queries the status of a breakpoint register as in:
01AD6A 0D 00 0A 00 27 00 3F 00 		dc	13,10,39,63,39,32,113,117
01AD72 27 00 20 00 71 00 75 00 
01AD7A 65 00 72 00 69 00 65 00 		dc	101,114,105,101,115,32,116,104
01AD82 73 00 20 00 74 00 68 00 
01AD8A 65 00 20 00 73 00 74 00 		dc	101,32,115,116,97,116,117,115
01AD92 61 00 74 00 75 00 73 00 
01AD9A 20 00 6F 00 66 00 20 00 		dc	32,111,102,32,97,32,98,114
01ADA2 61 00 20 00 62 00 72 00 
01ADAA 65 00 61 00 6B 00 70 00 		dc	101,97,107,112,111,105,110,116
01ADB2 6F 00 69 00 6E 00 74 00 
01ADBA 20 00 72 00 65 00 67 00 		dc	32,114,101,103,105,115,116,101
01ADC2 69 00 73 00 74 00 65 00 
01ADCA 72 00 20 00 61 00 73 00 		dc	114,32,97,115,32,105,110,58
01ADD2 20 00 69 00 6E 00 3A 00 
01ADDA 00 00                   		dc	0
                	;	global	GetVBR
                	;	global	dbg_ReadSetDSB
                		extern	putch
                	;	global	dbg_prompt
                	;	global	CvtScreenToAscii
                	;	global	dbg_GetHexNumber
                	;	global	set_vector
                	;	global	dbg_init
                	;	global	debugger
                	;	global	dbg_GetCursorCol
                	;	global	ignore_blanks
                	;	global	dbg_GetCursorRow
                	;	global	dbg_nextNonSpace
                	;	global	dbg_getchar
                	;	global	dbg_ungetch
                	;	global	dbctrl
                		extern	printf
                	;	global	dbg_stack
                	;	global	dbg_parse_line
                	;	global	dbg_GetDBAD
                	;	global	dbg_ReadSetDB
                		extern	disassem20
                	;	global	dbg_ReadSetIB
                	;	global	dbg_SetDBAD
                	;	global	dbg_arm
                	;	global	dbg_irq
                		extern	getchar
                	;	global	linebuf
                	;	global	dbg_DisplayHelp
                	;	global	linendx
                	;	global	linendx
                	
01ADDC 3F 00 00 00             	    nop
01ADE0 3F 00 00 00             	    nop
                	
                	
1804 symbols
  Symbol Name                              seg     address
  API_AREA                                    bss  001c20
  API_head                                    bss  001376
  API_sema                                    bss  001380
  API_tail                                    bss  001378
  AddTaskToReadyList                         code  014978
  AddTaskToReadyList.0001                    code  0149e8
  AddTaskToReadyList.0002                    code  0149a8
  AddTaskToReadyList.0003                    code  0149d8
  AddToTimeoutList                           code  014a88
  AllocMbx                                   code  014c7c
  AsciiToHexNybble                           code  0119b4
  AsciiToHexNybble.gthx3                     code  011a14
  AsciiToHexNybble.gthx5                     code  0119d4
  AsciiToHexNybble.gthx6                     code  0119f4
  AsciiToScreen                              code  010ff0
  AsciiToScreen.00001                        code  011020
  AsciiToScreen.00003                        code  011028
  AsciiToScreen.00004                        code  011030
  BIOS1_sema                                  bss  c00218
  BIOSCall                                   code  011278
  BIOSCall.0003                              code  0112d4
  BIOSCall.0004                              code  0112c4
  BIOSCall1                                  code  0111c0
  BIOSCall1.0002                             code  01124c
  BIOSCall1.0003                             code  011264
  BIOSCall1.0004                             code  011248
  BIOSCallTask                               code  0112dc
  BIOSCallTask.0001                          code  0112ec
  BIOS_CALL                                 const  00000a
  BIOS_DONE                                 const  000001
  BIOS_E_Timeout                            const  000002
  BIOS_FREE                                 const  000000
  BIOS_FuncTable                             code  010080
  BIOS_INSERVICE                            const  000002
  BIOS_MbxHandle                            const  c00008
  BIOS_RespMbx                                bss  c00010
  BIOS_STACKS_Array                         const  7e00000
  BIOS_arg1                                 const  000008
  BIOS_arg2                                 const  000010
  BIOS_arg3                                 const  000018
  BIOS_arg4                                 const  000020
  BIOS_arg5                                 const  000028
  BIOS_op                                   const  000000
  BIOS_resp                                 const  000030
  BIOS_sema                                   bss  001388
  BIOS_stat                                 const  000038
  BITMAP_SCREEN1                            const  400000
  BITMAP_SCREEN2                            const  800000
  BMP_CLUT                                  const  0c5800
  BPT_ISR                                    code  012b70
  BPT_ISR.0001                               code  012b9c
  BSI_BootSig                               const  000026
  BSI_DriveNum                              const  000024
  BSI_FATS                                  const  000010
  BSI_FileSysType                           const  000036
  BSI_Heads                                 const  00001a
  BSI_HiddenSecs                            const  00001c
  BSI_HugeSecs                              const  00001e
  BSI_JMP                                   const  000000
  BSI_Media                                 const  000015
  BSI_OEMName                               const  000003
  BSI_ResSectors                            const  00000e
  BSI_RootDirEnts                           const  000011
  BSI_Rsvd1                                 const  000025
  BSI_SecPerCluster                         const  00000d
  BSI_SecPerFAT                             const  000016
  BSI_SecPerTrack                           const  000018
  BSI_Sectors                               const  000013
  BSI_VolID                                 const  000027
  BSI_VolLabel                              const  00002b
  BSI_bps                                   const  00000b
  BYTE_SECTOR_BUF                           const  008000
  BlankLine                                  code  010f84
  BlankLine.0001                             code  010fcc
  BranchToSelf                               code  014018
  BranchToSelf2                              code  0110c4
  CPU0_BIOS_STACK                           const  006800
  CPU0_DBG_STACK                            const  7cf000
  CPU0_IRQ_STACK                            const  008800
  CPU0_SYS_STACK                            const  005000
  CPU0_Start                                 code  010134
  CPU0_Start.0001                            code  010198
  CPU0_Start.0002                            code  010134
  CPU1_BIOS_STACK                           const  021800
  CPU1_IRQ_STACK                            const  020800
  CPU1_STACK                                const  7cf800
  CPU1_SYS_STACK                            const  021000
  CPU1_Start                                 code  0100b8
  CPU1_Start.0001                            code  0100f4
  CPU1_Start.0003                            code  010114
  CPUIdleTick                                 bss  0013a0
  CR                                        const  00000d
  CRLF                                       code  010ad8
  CRLF1                                      code  010adc
  CTRLC                                     const  000003
  CTRLCCheck                                 code  011914
  CTRLCCheck.0001                            code  01193c
  CTRLH                                     const  000008
  CTRLI                                     const  000009
  CTRLJ                                     const  00000a
  CTRLK                                     const  00000b
  CTRLM                                     const  00000d
  CTRLS                                     const  000013
  CTRLX                                     const  000018
  CalcScreenLoc                              code  010c38
  CalcScreenLoc.0001                         code  010c84
  CharsInRxBuf                               code  0105f8
  CheckKeys                                  code  011900
  CheckMsg                                   code  0153a0
  CheckScrollLock                            code  011944
  CheckScrollLock.0001                       code  011964
  CheckScrollLock.0002                       code  011950
  ClearBmpScreen                             code  80000000000000be
  ClearScreen                                code  010964
  ClearScreen.cs1                            code  0109b0
  CopyScreenToVirtualScreen                  code  015d74
  CopyScreenToVirtualScreen.0001             code  015da0
  CopyVirtualScreenToScreen                  code  015cfc
  CopyVirtualScreenToScreen.0001             code  015d28
  CursorCol                                   bss  001131
  CursorOff                                  code  011068
  CursorOn                                   code  01106c
  CursorRow                                   bss  001130
  CvtScreenToAscii                           code  018ac0
  DBG_STACK                                 const  007000
  DCB_Array                                   bss  e50000
  DCB_ArrayEnd                                bss  e50d00
  DCB_LastErc                               const  000018
  DCB_Mbx                                   const  000048
  DCB_Name                                  const  000000
  DCB_ReentCount                            const  000038
  DCB_Resv1                                 const  000058
  DCB_Resv2                                 const  000060
  DCB_Size                                  const  000068
  DCB_StartBlock                            const  000020
  DCB_Type                                  const  00000c
  DCB_fSingleUser                           const  000039
  DCB_hJob                                  const  000040
  DCB_nBPB                                  const  000010
  DCB_nBlocks                               const  000028
  DCB_pCmdProc                              const  000030
  DCB_pSema                                 const  000050
  DRSP_DONE                                 const  000001
  DVC_BuildBPB                              const  000005
  DVC_Close                                 const  000007
  DVC_FlushInput                            const  000014
  DVC_FlushOutput                           const  000015
  DVC_GetChar                               const  000008
  DVC_GetCharDirect                         const  00000a
  DVC_IOCTRL_READ                           const  000018
  DVC_IOCTRL_WRITE                          const  000019
  DVC_IRQ                                   const  000016
  DVC_Initialize                            const  000002
  DVC_InputStatus                           const  00000c
  DVC_IsRemoveable                          const  000017
  DVC_MediaCheck                            const  000004
  DVC_Nop                                   const  000000
  DVC_Open                                  const  000006
  DVC_OutputStatus                          const  000013
  DVC_OutputUntilBusy                       const  00001a
  DVC_PeekChar                              const  000009
  DVC_PeekCharDirect                        const  00000b
  DVC_PutChar                               const  00000d
  DVC_ReadBlock                             const  000010
  DVC_SetPosition                           const  00000f
  DVC_Setup                                 const  000001
  DVC_Status                                const  000003
  DVC_VerifyBlock                           const  000012
  DVC_WriteBlock                            const  000011
  DequeueMsgFromMbx                          code  014f88
  DequeueThreadFromMbx                       code  014fdc
  DequeueThreadFromMbx2                      code  015068
  DispBcc                                    code  017414
  DispBrk                                    code  01707c
  DispCharAttr                               code  0108e0
  DispCharQ                                  code  010af8
  DispIndexedAddr                            code  017158
  DispLS                                     code  0172c0
  DispMemAddress                             code  016f30
  DispRI                                     code  01733c
  DispRR                                     code  0174d8
  DispRa                                     code  016c90
  DispRac                                    code  016c38
  DispRb                                     code  016ce8
  DispRst                                    code  016b88
  DispRstc                                   code  016be0
  DispSpr                                    code  016d40
  DispStartMsg                               code  0110b0
  DisplayByte                                code  010a0c
  DisplayChar                                code  010ca0
  DisplayChar.dcx12                          code  010df8
  DisplayChar.dcx4                           code  010d34
  DisplayChar.dcx5                           code  010e3c
  DisplayChar.dcx7                           code  010d90
  DisplayChar.doBackspace                    code  010e14
  DisplayChar.doCursorDown                   code  010dc8
  DisplayChar.doCursorHome                   code  010de4
  DisplayChar.doCursorLeft                   code  010db0
  DisplayChar.doCursorRight                  code  010d78
  DisplayChar.doCursorUp                     code  010d98
  DisplayChar.doDelete                       code  010e00
  DisplayChar.doLinefeed                     code  010e70
  DisplayChar.doTab                          code  010d50
  DisplayChar.docr                           code  010d68
  DisplayCharHex                             code  0109f8
  DisplayErr                                 code  011a20
  DisplayHalf                                code  0109e4
  DisplayMemBytes                            code  011840
  DisplayMemBytes.001                        code  011874
  DisplayMemBytes.002                        code  0118ac
  DisplayMemBytes.003                        code  0118cc
  DisplayMemBytes.004                        code  0118c0
  DisplayNybble                              code  010a20
  DisplayNybble.0001                         code  010a40
  DisplaySpace                               code  011128
  DisplayString                              code  010a50
  DisplayString.dm1                          code  010a74
  DisplayString.dm2                          code  010a60
  DisplayString16                            code  010a80
  DisplayString16.dm1                        code  010ac0
  DisplayString16.dm2                        code  010a9c
  DisplayStringCRLF                          code  010acc
  DisplayWord                                code  0109d0
  Dummy1                                      bss  001132
  DumpInsnBytes                              code  016b00
  DumpTaskList                               code  0147f8
  DumpTaskList.0001                          code  01481c
  E_Arg                                     const  000001
  E_BadAlarm                                const  000011
  E_BadBlockNum                             const  000025
  E_BadDevNum                               const  000020
  E_BadDevOp                                const  000022
  E_BadFuncno                               const  000001
  E_BadMbx                                  const  000004
  E_DCBInUse                                const  000019
  E_NoDev                                   const  000021
  E_NoMem                                   const  00000c
  E_NoMoreAlarmBlks                         const  000044
  E_NoMoreMbx                               const  000040
  E_NoMoreMsgBlks                           const  000041
  E_NoMoreTCBs                              const  000045
  E_NoMsg                                   const  00000b
  E_NoThread                                const  000006
  E_NotAlloc                                const  000009
  E_NotOwner                                const  000012
  E_Ok                                      const  000000
  E_QueFull                                 const  000005
  E_QueStrategy                             const  000013
  E_ReadError                               const  000023
  E_Timeout                                 const  000010
  E_TooManyBlocks                           const  000026
  E_Unsupported                             const  000003
  E_WriteError                              const  000024
  EndStaticAllocations                        bss  00d400
  ExitTask                                   code  014704
  FMTKInitialize                             code  01401c
  FMTKTick                                   code  0155ec
  FMTKTick.0001                              code  015600
  FMTKTick.0002                              code  015608
  FMTKTick.0003                              code  01562c
  FMTKTick.0004                              code  015688
  FMTKTick.SYSLocked                         code  015698
  FMTKTick.cantLockSYS                       code  015658
  FMTK_CALL                                 const  000004
  FMTK_Inited                                 bss  c001b0
  ForceIOFocus                               code  015a74
  ForceReleaseIOFocus                        code  015c1c
  FreeJCB                                     bss  c00100
  FreeMbx                                    code  014d3c
  FreeMbx2                                   code  014d54
  FreeMbxHandle                               bss  c00120
  FreeMsg                                     bss  c00130
  FreeTCB                                     bss  c00108
  GetCurrAttr                              rodata  010ba8
  GetCursorPos                               code  011098
  GetHexNumber                               code  011974
  GetHexNumber.gthxn1                        code  0119a4
  GetHexNumber.gthxn2                        code  011988
  GetJCBPtr                                  code  011140
  GetJCBPtr.0001                             code  011168
  GetPixel                                   code  800000000000014a
  GetRandomNumber                            code  011b18
  GetRange                                   code  011558
  GetScreenLocation                          code  010b98
  GetSystemTime                              code  0113d4
  GetTwoParams                               code  01153c
  GetVBR                                     code  0188d8
  HomeCursor                                 code  010928
  HomeCursor.0001                            code  010958
  I2C_CMD                                   const  000004
  I2C_CONTROL                               const  000002
  I2C_ERR                                    code  012600
  I2C_INIT                                   code  012530
  I2C_MASTER                                const  ffdc0e00
  I2C_PRESCALE_HI                           const  000001
  I2C_PRESCALE_LO                           const  000000
  I2C_READ                                   code  012564
  I2C_RX                                    const  000003
  I2C_STAT                                  const  000004
  I2C_TX                                    const  000003
  I2C_WAIT_TC                                code  012690
  I2C_WAIT_TC.0001                           code  012690
  I2C_WRITE                                  code  012610
  IOFocusNdx                                  bss  c00028
  IOFocusTbl                                  bss  c00030
  IRQFlag                                     bss  c00018
  IdleTask                                   code  01444c
  IncCursorPos                               code  010e78
  IncCursorRow                               code  010eac
  InitFMTK                                   code  01401c
  InitFMTK.0001                              code  014138
  InitFMTK.0002                              code  01403c
  InitPIC                                    code  010428
  InitPIC1                                   code  010444
  InitUart                                   code  010460
  InputVec                                    bss  001110
  JCB0                                        bss  0013c0
  JCB_Array                                   bss  c50000
  JCB_ArrayEnd                                bss  c5ff00
  JCB_CmdLine                               const  000280
  JCB_CurrAttr                              const  000418
  JCB_CursorCol                             const  00040d
  JCB_CursorFlash                           const  00040f
  JCB_CursorOn                              const  00040e
  JCB_CursorRow                             const  00040c
  JCB_CursorType                            const  000410
  JCB_ExitError                             const  0003e0
  JCB_ExitRF                                const  000180
  JCB_KeybdAck                              const  00044a
  JCB_KeybdBad                              const  000449
  JCB_KeybdBuffer                           const  000450
  JCB_KeybdEcho                             const  000448
  JCB_KeybdHead                             const  000438
  JCB_KeybdLocks                            const  00044c
  JCB_KeybdTail                             const  000440
  JCB_LogSize                               const  00000b
  JCB_MemGroup0                             const  000024
  JCB_MemGroup1                             const  000026
  JCB_MemGroup2                             const  000028
  JCB_MemGroup3                             const  00002a
  JCB_MemGroup4                             const  00002c
  JCB_MemGroup5                             const  00002e
  JCB_Name                                  const  000004
  JCB_Next                                  const  000420
  JCB_NormAttr                              const  000414
  JCB_Number                                const  000000
  JCB_Path                                  const  000080
  JCB_ScrlCnt                               const  00041c
  JCB_Size                                  const  000500
  JCB_SysIn                                 const  000380
  JCB_SysOut                                const  0003b0
  JCB_UserName                              const  000060
  JCB_VideoCols                             const  00040b
  JCB_VideoMode                             const  000408
  JCB_VideoRows                             const  00040a
  JCB_esc                                   const  000470
  JCB_fVidPause                             const  00041e
  JCB_iof_next                              const  000428
  JCB_iof_prev                              const  000430
  JCB_nCode                                 const  000038
  JCB_nData                                 const  000048
  JCB_nStack                                const  000058
  JCB_pCode                                 const  000030
  JCB_pData                                 const  000040
  JCB_pStack                                const  000050
  JCB_pVidMem                               const  0003e8
  JCB_pVirtVid                              const  0003f8
  KEYBD                                     const  ffdc0000
  KEYBDCLR                                  const  ffdc0004
  KEYBD_DELAY                               const  0003e8
  KeyState1                                   bss  001138
  KeyState2                                   bss  001139
  KeybdBad                                    bss  001135
  KeybdEcho                                   bss  001134
  KeybdGetChar                               code  011e70
  KeybdGetChar.0001                          code  011ea4
  KeybdGetChar.0003                          code  011e7c
  KeybdGetChar.0004                          code  011fcc
  KeybdGetChar.0005                          code  012050
  KeybdGetChar.0006                          code  011ea0
  KeybdGetChar.0007                          code  011f64
  KeybdGetChar.0008                          code  011f78
  KeybdGetChar.0009                          code  011f4c
  KeybdGetChar.0010                          code  011f30
  KeybdGetChar.0011                          code  011ffc
  KeybdGetChar.0012                          code  01202c
  KeybdGetChar.0013                          code  011f0c
  KeybdGetChar.doAlt                         code  011fdc
  KeybdGetChar.doCapsLock                    code  012074
  KeybdGetChar.doCtrl                        code  011fb0
  KeybdGetChar.doExtend                      code  011fa0
  KeybdGetChar.doKeyup                       code  011f94
  KeybdGetChar.doNumLock                     code  012060
  KeybdGetChar.doScrollLock                  code  012088
  KeybdGetChar.doShift                       code  012034
  KeybdGetChar.doTab                         code  01200c
  KeybdGetCharDirect                         code  011b98
  KeybdGetCharDirect.0001                    code  011ba0
  KeybdGetCharDirect.gk1                     code  011be4
  KeybdGetCharDirect.gk2                     code  011be0
  KeybdGetCharDirectNB                       code  011b24
  KeybdGetCharDirectNB.0001                  code  011b84
  KeybdGetCharDirectNB.0002                  code  011b78
  KeybdGetCharDirectNB.0003                  code  011b74
  KeybdGetCharNoWait                         code  011e60
  KeybdGetCharWait                           code  011e68
  KeybdGetScancode                           code  011d38
  KeybdGetScancode.0001                      code  011dc4
  KeybdGetScancode.0002                      code  011db4
  KeybdGetStatus                             code  011cbc
  KeybdGetStatus.0001                        code  011d2c
  KeybdGetStatus.0002                        code  011d20
  KeybdIRQ                                   code  01215c
  KeybdIRQ.0001                              code  012200
  KeybdIRQ.0002                              code  012218
  KeybdIRQ1                                  code  012220
  KeybdInit                                  code  011c09
  KeybdInit.0001                             code  011c14
  KeybdInit.0002                             code  011c24
  KeybdInit.0004                             code  011ca4
  KeybdInit.config                           code  011c60
  KeybdInit.keybdErr                         code  011c90
  KeybdInit.tryAgain                         code  011c88
  KeybdLEDs                                   bss  00113b
  KeybdLocks                                  bss  001136
  KeybdRecvByte                              code  011dd0
  KeybdRecvByte.0003                         code  011ddc
  KeybdRecvByte.0004                         code  011e00
  KeybdSendByte                              code  012120
  KeybdSetLEDStatus                          code  01209c
  KeybdSetLEDStatus.0001                     code  012110
  KeybdSetLEDStatus.0002                     code  0120c0
  KeybdSetLEDStatus.0003                     code  0120d4
  KeybdSetLEDStatus.0004                     code  0120e8
  KeybdWaitFlag                               bss  00113a
  KeybdWaitTx                                code  011e10
  KeybdWaitTx.0001                           code  011e20
  KeybdWaitTx.0002                           code  011e4c
  KillTask                                   code  014763
  LEDS                                      const  ffdc0600
  LF                                        const  00000a
  LoadFromSerial                             code  0129a8
  LoadFromSerial.0001                        code  0129bc
  LockBIOS                                   code  011174
  LockBIOS1                                  code  0111a4
  LockIOF                                    code  015a3c
  LockSYS                                    code  0144f8
  LockSema                                   code  014530
  LockSema.0001                              code  01453c
  LockSema.0002                              code  01456c
  LockSema.0003                              code  014554
  LockVideoBIOS                              code  010844
  MAX_BIOS_CALL                             const  000064
  MAX_DEV_OP                                const  00001f
  MAX_VIDEO_BIOS_CALL                       const  000021
  MBX_Array                                   bss  c5ff00
  MBX_ArrayEnd                                bss  c7ff00
  MBX_LINK                                  const  000000
  MBX_MQ_COUNT                              const  000034
  MBX_MQ_HEAD                               const  000020
  MBX_MQ_MISSED                             const  000038
  MBX_MQ_SIZE                               const  000032
  MBX_MQ_STRATEGY                           const  000037
  MBX_MQ_TAIL                               const  000028
  MBX_OWNER                                 const  000036
  MBX_Size                                  const  000040
  MBX_TQ_COUNT                              const  000030
  MBX_TQ_HEAD                               const  000008
  MBX_TQ_TAIL                               const  000018
  MEM_END                                   const  8000000
  MEM_END.bss                                 bss  e50d00
  MON_STACK                                 const  006000
  MON_r1                                      bss  001008
  MON_r10                                     bss  001050
  MON_r11                                     bss  001058
  MON_r12                                     bss  001060
  MON_r13                                     bss  001068
  MON_r14                                     bss  001070
  MON_r15                                     bss  001078
  MON_r16                                     bss  001080
  MON_r17                                     bss  001088
  MON_r18                                     bss  001090
  MON_r19                                     bss  001098
  MON_r2                                      bss  001010
  MON_r20                                     bss  0010a0
  MON_r21                                     bss  0010a8
  MON_r22                                     bss  0010b0
  MON_r23                                     bss  0010b8
  MON_r24                                     bss  0010c0
  MON_r25                                     bss  0010c8
  MON_r26                                     bss  0010d0
  MON_r27                                     bss  0010d8
  MON_r28                                     bss  0010e0
  MON_r29                                     bss  0010e8
  MON_r3                                      bss  001018
  MON_r30                                     bss  0010f0
  MON_r31                                     bss  0010f8
  MON_r4                                      bss  001020
  MON_r5                                      bss  001028
  MON_r6                                      bss  001030
  MON_r7                                      bss  001038
  MON_r8                                      bss  001040
  MON_r9                                      bss  001048
  MQS_NEWEST                                const  000002
  MQS_OLDEST                                const  000001
  MQS_UNLIMITED                             const  000000
  MRTest                                     code  80000000000001b4
  MSG_Array                                   bss  c80000
  MSG_ArrayEnd                                bss  d80000
  MSG_D1                                    const  000008
  MSG_D2                                    const  000010
  MSG_LINK                                  const  000000
  MSG_Size                                  const  000020
  MSG_TYPE                                  const  000018
  MT_GETCHAR                                const  ffffffffffffffef
  MT_IRQ                                    const  fffffffffffffff0
  MT_SEMA                                   const  ffffffffffffffff
  MicroDelay                                 code  012978
  MicroDelay.0001                            code  012984
  Milliseconds                                bss  001100
  MonGetch                                   code  011500
  Monitor                                    code  0113fe
  NR_DCB                                    const  000020
  NR_JCB                                    const  000033
  NR_MBX                                    const  000800
  NR_MSG                                    const  008000
  NR_TCB                                    const  000100
  NUMWKA                                      bss  00113c
  NormAttr                                    bss  001128
  OutCRLF                                    code  010ad8
  OutChar                                    code  011648
  OutputVec                                   bss  001108
  PIC                                       const  ffdc0fc0
  PIC_ES                                    const  ffdc0fd0
  PIC_IE                                    const  ffdc0fc4
  PIC_RSTE                                  const  ffdc0fd4
  PN1                                        code  010b38
  PN2                                        code  010b38
  PN3                                        code  010b58
  PN4                                        code  010b64
  PN5                                        code  010b70
  PN6                                        code  010b54
  PNRET                                      code  010b84
  PRI_HIGH                                  const  000001
  PRI_HIGHEST                               const  000000
  PRI_LOW                                   const  000005
  PRI_LOWEST                                const  000007
  PRI_NORMAL                                const  000003
  PROG_LOAD_AREA                            const  009000
  PRTNUM                                     code  010b0c
  PeekMsg                                    code  015390
  PopTimeoutList                             code  014c18
  PostMsg                                    code  0150d8
  PrintSc                                    code  017010
  QNdx0                                       bss  c00050
  QNdx1                                       bss  c00058
  QNdx2                                       bss  c00060
  QNdx3                                       bss  c00068
  QNdx4                                       bss  c00070
  QNdx5                                       bss  c00078
  QNdx6                                       bss  c00080
  QNdx7                                       bss  c00088
  QueueMsgAtMbx                              code  014e58
  RANDOM_NUM                                const  ffdc0c00
  ROMChecksum                                code  0110c8
  ROMChecksum.0001                           code  0110e0
  ROOTDIR_BUF                                 bss  009000
  RTCCOscOn                                  code  0126f0
  RTCCReadbuf                                code  0126a0
  RTCCReadbuf.0001                           code  0126ac
  RTCCWritebuf                               code  0126c8
  RTCCWritebuf.0001                          code  0126d4
  RTCC_BUF                                    bss  001bc0
  RW_READ_SD_BLOCK                          const  000002
  RW_WRITE_SD_BLOCK                         const  000003
  ReleaseIOFocus                             code  015c3c
  RemoveFromTimeoutList                      code  014b60
  RemoveTaskFromReadyList                    code  0149f8
  RequestIOFocus                             code  015b34
  RunningTCB                                  bss  c00118
  SCREEN_Array                                bss  d80000
  SCREEN_ArrayEnd                             bss  e4c000
  SC_ALT                                    const  000011
  SC_CAPSLOCK                               const  000058
  SC_CTRL                                   const  000014
  SC_DEL                                    const  000071
  SC_EXTEND                                 const  0000e0
  SC_KEYUP                                  const  0000f0
  SC_LCTRL                                  const  000058
  SC_LSHIFT                                 const  000012
  SC_NUMLOCK                                const  000077
  SC_RSHIFT                                 const  000059
  SC_SCROLLLOCK                             const  00007e
  SC_TAB                                    const  00000d
  SDDiskSize                                 code  80000000000000c4
  SDInit                                     code  80000000000000c0
  SDReadBoot                                 code  80000000000001c9
  SDReadMultiple                             code  80000000000000c1
  SDReadPart                                 code  80000000000000c3
  SDWriteMultiple                            code  80000000000000c2
  SD_2_0                                     code  8000000000000264
  SD_CMD8                                    code  012760
  SD_CMD8.0001                               code  0127d0
  SD_CMD8.0002                               code  0127d8
  SD_CMD8.0003                               code  012834
  SD_CMD8.0004                               code  0127e8
  SD_CMD8.respOk                             code  012878
  SD_INIT                                    code  012714
  SD_MASTER                                 const  ffdc0b00
  SD_WAIT_RESP                               code  012890
  SD_WAIT_RESP.0001                          code  0128a4
  SD_WAIT_RESP.0002                          code  0128d0
  SECTOR_BUF                                  bss  008000
  SPIMASTER                                 const  ffdc0500
  SPI_DIRECT_ACCESS_DATA_REG                const  000018
  SPI_INIT_NO_ERROR                         const  000000
  SPI_INIT_SD                               const  000001
  SPI_MASTER_CONTROL_REG                    const  000004
  SPI_MASTER_VERSION_REG                    const  000000
  SPI_READ_NO_ERROR                         const  000000
  SPI_RESP_BYTE1                            const  0000c0
  SPI_RESP_BYTE2                            const  0000c4
  SPI_RESP_BYTE3                            const  0000c8
  SPI_RESP_BYTE4                            const  0000cc
  SPI_RX_FIFO_CTRL_REG                      const  000050
  SPI_RX_FIFO_DATA_COUNT_LSB                const  00004c
  SPI_RX_FIFO_DATA_COUNT_MSB                const  000048
  SPI_RX_FIFO_DATA_REG                      const  000040
  SPI_SD_SECT_15_8_REG                      const  000020
  SPI_SD_SECT_23_16_REG                     const  000024
  SPI_SD_SECT_31_24_REG                     const  000028
  SPI_SD_SECT_7_0_REG                       const  00001c
  SPI_TRANS_BUSY                            const  000001
  SPI_TRANS_CTRL_REG                        const  00000c
  SPI_TRANS_ERROR_REG                       const  000014
  SPI_TRANS_START                           const  000001
  SPI_TRANS_STATUS_REG                      const  000010
  SPI_TRANS_TYPE_REG                        const  000008
  SPI_TX_FIFO_CTRL_REG                      const  000090
  SPI_TX_FIFO_DATA_REG                      const  000080
  SPI_WRITE_NO_ERROR                        const  000000
  SSM_ISR                                    code  012b6c
  STACKS_Array                              const  7f00000
  STACKS_ArrayEnd                           const  8000000
  SYS_STACKS_Array                          const  7d00000
  ScreenToAscii                              code  011038
  ScreenToAscii.0001                         code  011054
  ScreenToAscii.stasc1                       code  011060
  ScrollUp                                   code  010f04
  ScrollUp.0001                              code  010f44
  SelectTaskToRun                            code  0157d8
  SendMsg                                    code  0150f0
  SendMsgPrim                                code  01510c
  SerialCheckForCharDirect                   code  0104e8
  SerialGetChar                              code  01061c
  SerialGetCharDirect                        code  0104cc
  SerialIRQ                                  code  0106e0
  SerialPutChar                              code  0104f8
  SerialStartMsg                             code  01024c
  ServiceRequestIRQ                          code  8000000000000107
  SetBkColor                                 code  8000000000000148
  SetCurAttr                                 code  016a60
  SetCurrAttr                                code  010bb8
  SetCursorPos                               code  011070
  SetPixel                                   code  8000000000000149
  SetTaskPriority                            code  014905
  SetTaskPriority.stp2                       code  014930
  SetTaskPriority.stp3                       code  014934
  SetupIntVectors                            code  010278
  SetupIntVectors.0001                       code  010294
  SetupIntVectors1                           code  010368
  SetupIntVectors1.0001                      code  010384
  SetupMemtags                               code  012934
  Sleep                                      code  014c48
  StartCPU1Addr                               bss  001398
  StartCPU1Flag                               bss  001390
  StartJob                                   code  014498
  StartTask                                  code  0145a8
  SwitchIOFocus                              code  015ad4
  TAB                                       const  000009
  TCB_Affinity                              const  000280
  TCB_Array                                   bss  c10000
  TCB_ArrayEnd                                bss  c50000
  TCB_BASE                                  const  c00000
  TCB_BIOS_Stack                            const  000288
  TCB_BackLink                              const  000000
  TCB_CR0                                   const  0001b0
  TCB_DPC                                   const  000188
  TCB_DSP                                   const  0001a0
  TCB_EPC                                   const  000190
  TCB_ESP                                   const  0001a8
  TCB_IPC                                   const  000180
  TCB_ISP                                   const  000198
  TCB_LogSize                               const  00000a
  TCB_MSG_D1                                const  000248
  TCB_MSG_D2                                const  000250
  TCB_MbxList                               const  000260
  TCB_NextFree                              const  000218
  TCB_NextRdy                               const  000200
  TCB_NextTo                                const  000228
  TCB_PrevRdy                               const  000208
  TCB_PrevTo                                const  000230
  TCB_Priority                              const  000212
  TCB_SP0Save                               const  000100
  TCB_SP10Save                              const  000150
  TCB_SP11Save                              const  000158
  TCB_SP12Save                              const  000160
  TCB_SP13Save                              const  000168
  TCB_SP14Save                              const  000170
  TCB_SP15Save                              const  000178
  TCB_SP1Save                               const  000108
  TCB_SP2Save                               const  000110
  TCB_SP3Save                               const  000118
  TCB_SP4Save                               const  000120
  TCB_SP5Save                               const  000128
  TCB_SP6Save                               const  000130
  TCB_SP7Save                               const  000138
  TCB_SP8Save                               const  000140
  TCB_SP9Save                               const  000148
  TCB_SYS_Stack                             const  000290
  TCB_Size                                  const  000400
  TCB_StackTop                              const  000268
  TCB_Status                                const  000210
  TCB_TOP                                   const  1c00000
  TCB_Timeout                               const  000278
  TCB_errno                                 const  000270
  TCB_hJCB                                  const  000214
  TCB_hWaitMbx                              const  000258
  TCB_mbq_next                              const  000238
  TCB_mbq_prev                              const  000240
  TCB_r1                                    const  000008
  TCB_r10                                   const  000050
  TCB_r11                                   const  000058
  TCB_r12                                   const  000060
  TCB_r13                                   const  000068
  TCB_r14                                   const  000070
  TCB_r15                                   const  000078
  TCB_r16                                   const  000080
  TCB_r17                                   const  000088
  TCB_r18                                   const  000090
  TCB_r19                                   const  000098
  TCB_r2                                    const  000010
  TCB_r20                                   const  0000a0
  TCB_r21                                   const  0000a8
  TCB_r22                                   const  0000b0
  TCB_r23                                   const  0000b8
  TCB_r24                                   const  0000c0
  TCB_r25                                   const  0000c8
  TCB_r26                                   const  0000d0
  TCB_r27                                   const  0000d8
  TCB_r28                                   const  0000e0
  TCB_r29                                   const  0000e8
  TCB_r3                                    const  000018
  TCB_r30                                   const  0000f0
  TCB_r31                                   const  0000f8
  TCB_r4                                    const  000020
  TCB_r5                                    const  000028
  TCB_r6                                    const  000030
  TCB_r7                                    const  000038
  TCB_r8                                    const  000040
  TCB_r9                                    const  000048
  TEXTREG                                   const  0a0000
  TEXTSCR                                   const  ffd00000
  TEXT_COLS                                 const  000000
  TEXT_CURCTL                               const  000020
  TEXT_CURPOS                               const  00002c
  TEXT_ROWS                                 const  000004
  TS_NONE                                   const  000000
  TS_PREEMPT                                const  000004
  TS_READY                                  const  000010
  TS_READY_BIT                              const  000004
  TS_RUNNING                                const  000008
  TS_RUNNING_BIT                            const  000003
  TS_SLEEP                                  const  000020
  TS_TIMEOUT                                const  000001
  TS_TIMEOUT_BIT                            const  000000
  TS_WAITMSG                                const  000002
  TS_WAITMSG_BIT                            const  000001
  TXTCOLS                                   const  000054
  TXTROWS                                   const  00001f
  Tick1024Rout                               code  0113b0
  TickRout                                   code  01134c
  TickRout.0001                              code  011374
  TickVec                                     bss  001120
  Ticks                                       bss  001000
  TimeoutList                                 bss  c00110
  ToJul                                      code  012d74
  UART                                      const  ffdc0a00
  UART_CM0                                  const  000008
  UART_CM1                                  const  000009
  UART_CM2                                  const  00000a
  UART_CM3                                  const  00000b
  UART_CTRL                                 const  000007
  UART_FF                                   const  000005
  UART_IE                                   const  000004
  UART_IS                                   const  000003
  UART_LS                                   const  000001
  UART_MC                                   const  000006
  UART_MS                                   const  000002
  UART_RX                                   const  000000
  UART_SPR                                  const  00000f
  UART_TX                                   const  000000
  Uart_foff                                   bss  00116e
  Uart_fon                                    bss  001170
  Uart_ms                                     bss  001164
  Uart_rxdtr                                  bss  00116c
  Uart_rxfifo                                 bss  001175
  Uart_rxflow                                 bss  00116a
  Uart_rxhead                                 bss  001166
  Uart_rxrts                                  bss  00116b
  Uart_rxtail                                 bss  001168
  Uart_rxxon                                  bss  00116d
  Uart_txdtr                                  bss  001173
  Uart_txrts                                  bss  001172
  Uart_txxon                                  bss  001174
  Uart_txxonoff                               bss  001165
  UninitIRQ                                  code  012afc
  UninitIRQ.0001                             code  012b08
  UnlockBIOS                                 code  01118c
  UnlockIOF                                  code  015a58
  UnlockSYS                                  code  014514
  UnlockSema                                 code  014578
  UnlockSema.0001                            code  014580
  UnlockSema.0002                            code  01459c
  UnlockVideoBIOS                            code  010860
  UpdateCursorPos                            code  010bd4
  UpdateCursorPos.0001                       code  010c24
  UserTick                                    bss  c00000
  UserTickRout                               code  011380
  VAR_Area                                  const  c00000
  ValidateTCBPtr                             code  014940
  ValidateTCBPtr.0001                        code  014958
  ValidateTCBPtr.badPtr                      code  01494c
  VideoBIOSCall                              code  01087c
  VideoBIOSCall.0003                         code  0108d0
  VideoBIOSCall.0004                         code  0108bc
  VideoBIOSCall.0005                         code  0108d8
  VideoBIOS_FuncTable                        code  010800
  VideoBIOS_sema                              bss  00d408
  Wait10ms                                   code  01212c
  Wait10ms.0001                              code  012138
  Wait10ms.0002                              code  012150
  WaitMsg                                    code  015244
  XOFF                                      const  000013
  XON                                       const  000011
  ambx_bad_ptr                               code  014d1c
  ambx_no_mbxs                               code  014d24
  attl1                                      code  014b4c
  attl_add_at_end                            code  014ad4
  attl_add_at_head                           code  014b2c
  attl_adjust_timeout                        code  014b14
  attl_check_next                            code  014abc
  attl_exit                                  code  014b40
  attl_insert_before                         code  014ae8
  attl_insert_before_head                    code  014b00
  berr_rout                                  code  012b0c
  brkpt1                                     code  01293c
  brkpt1.0001                                code  012958
  cirxb1                                     code  010618
  clockmsg_d1                                 bss  c00188
  clockmsg_d2                                 bss  c00190
  cmsg1                                      code  01541c
  cmsg10                                     code  0153e8
  cmsg2                                      code  015428
  cmsg3                                      code  0153d0
  cmsg4                                      code  0153d4
  cmsg5                                      code  015440
  cmsg8                                      code  015404
  csvs3                                      code  015db0
  ctype_1                                    code  016544
  ctype_11                                   code  0165b4
  ctype_13                                   code  0165fc
  ctype_15                                   code  0165f0
  ctype_16                                   code  01661c
  ctype_19                                   code  016658
  ctype_21                                   code  01664c
  ctype_22                                   code  016678
  ctype_24                                   code  016698
  ctype_27                                   code  0166c8
  ctype_29                                   code  0166bc
  ctype_3                                    code  016538
  ctype_30                                   code  0166dc
  ctype_32                                   code  0166f0
  ctype_34                                   code  016704
  ctype_36                                   code  016718
  ctype_39                                   code  016750
  ctype_4                                    code  016564
  ctype_41                                   code  016758
  ctype_43                                   code  016794
  ctype_45                                   code  01679c
  ctype_47                                   code  0167d4
  ctype_48                                   code  0167d8
  ctype_49                                   code  0167dc
  ctype_51                                   code  016814
  ctype_52                                   code  016818
  ctype_53                                   code  01681c
  ctype_55                                   code  016914
  ctype_56                                   code  0168fc
  ctype_57                                   code  01690c
  ctype_58                                   code  016900
  ctype_59                                   code  016984
  ctype_6                                    code  016584
  ctype_60                                   code  016968
  ctype_61                                   code  01696c
  ctype_62                                   code  016960
  ctype_63                                   code  016970
  ctype_64                                   code  0169f0
  ctype_65                                   code  0169d4
  ctype_66                                   code  0169d8
  ctype_67                                   code  0169cc
  ctype_68                                   code  0169dc
  ctype_70                                   code  016a58
  ctype_71                                   code  016a40
  ctype_72                                   code  016a50
  ctype_73                                   code  016a44
  ctype_9                                    code  0165c0
  cvss3                                      code  015d38
  dbctrl                                      bss  c082f0
  dbg_DisplayHelp                            code  0187b0
  dbg_GetCursorCol                           code  0189a0
  dbg_GetCursorRow                           code  018974
  dbg_GetDBAD                                code  0189cc
  dbg_GetHexNumber                           code  018c3c
  dbg_ReadSetDB                              code  018ec0
  dbg_ReadSetDSB                             code  019068
  dbg_ReadSetIB                              code  018d50
  dbg_SetDBAD                                code  018a30
  dbg_arm                                    code  018aa0
  dbg_getchar                                code  018ae0
  dbg_init                                   code  019c04
  dbg_irq                                    code  0199ac
  dbg_nextNonSpace                           code  018bb4
  dbg_parse_line                             code  019258
  dbg_prompt                                 code  019210
  dbg_stack                                   bss  c002f0
  dbg_ungetch                                code  018b88
  debugger                                   code  019ac4
  debugger_0                               rodata  01ad6a
  debugger_1                               rodata  01ad56
  debugger_10                              rodata  01a9e6
  debugger_100                               code  019058
  debugger_101                               code  018fa8
  debugger_103                               code  019058
  debugger_105                               code  019044
  debugger_106                               code  019058
  debugger_109                             rodata  01a828
  debugger_11                              rodata  01a978
  debugger_110                             rodata  01a7fc
  debugger_111                               code  019204
  debugger_112                               code  0190b4
  debugger_114                               code  01909c
  debugger_115                               code  019154
  debugger_116                               code  019200
  debugger_117                               code  019150
  debugger_119                               code  019200
  debugger_12                              rodata  01a920
  debugger_121                               code  0191ec
  debugger_122                               code  019200
  debugger_125                             rodata  01a7ee
  debugger_126                               code  01924c
  debugger_127                               code  019238
  debugger_128                             rodata  01a7da
  debugger_129                             rodata  01a7c6
  debugger_13                              rodata  01a8f8
  debugger_130                             rodata  01a7b2
  debugger_131                             rodata  01a79e
  debugger_132                             rodata  01a78a
  debugger_133                             rodata  01a776
  debugger_134                             rodata  01a762
  debugger_135                             rodata  01a74e
  debugger_136                             rodata  01a738
  debugger_137                             rodata  01a722
  debugger_138                             rodata  01a70c
  debugger_139                             rodata  01a6f6
  debugger_14                              rodata  01a8ea
  debugger_140                             rodata  01a6e0
  debugger_141                             rodata  01a6ca
  debugger_142                             rodata  01a6b4
  debugger_143                             rodata  01a69e
  debugger_144                               code  0199a0
  debugger_145                               code  0192d4
  debugger_147                               code  01999c
  debugger_148                               code  019318
  debugger_149                               code  019320
  debugger_15                                code  0188cc
  debugger_150                               code  019344
  debugger_151                               code  019354
  debugger_152                               code  0194ec
  debugger_153                               code  019324
  debugger_154                               code  0194e8
  debugger_155                               code  019394
  debugger_156                               code  0194a8
  debugger_157                               code  0194b8
  debugger_158                               code  0194c8
  debugger_159                               code  0194d8
  debugger_16                                code  0188b8
  debugger_160                               code  0193d8
  debugger_162                               code  01941c
  debugger_164                               code  019460
  debugger_166                               code  0194a4
  debugger_168                               code  019998
  debugger_169                               code  01953c
  debugger_170                               code  019670
  debugger_171                               code  019680
  debugger_172                               code  019690
  debugger_173                               code  0196a0
  debugger_174                               code  0196b0
  debugger_175                               code  0197e4
  debugger_176                               code  019588
  debugger_178                               code  0195d4
  debugger_18                                code  0188e8
  debugger_180                               code  019620
  debugger_182                               code  01966c
  debugger_184                               code  0196fc
  debugger_186                               code  019748
  debugger_188                               code  019794
  debugger_19                                code  018968
  debugger_190                               code  0197e0
  debugger_192                               code  019998
  debugger_193                               code  019824
  debugger_194                               code  019958
  debugger_195                               code  019968
  debugger_196                               code  019978
  debugger_197                               code  019988
  debugger_198                               code  019870
  debugger_2                               rodata  01ace8
  debugger_20                                code  01892c
  debugger_200                               code  0198bc
  debugger_202                               code  019908
  debugger_204                               code  019954
  debugger_208                             rodata  01a690
  debugger_209                               code  019bf8
  debugger_210                               code  019b04
  debugger_212                               code  019b04
  debugger_213                               code  019be0
  debugger_214                               code  019b1c
  debugger_215                               code  019b50
  debugger_216                               code  019b38
  debugger_218                               code  019b74
  debugger_219                               code  019bc8
  debugger_22                                code  018918
  debugger_220                               code  019bc0
  debugger_221                               code  019bdc
  debugger_223                               code  019be0
  debugger_224                               code  019c44
  debugger_225                               code  019c30
  debugger_23                                code  018944
  debugger_25                                code  018940
  debugger_27                                code  018994
  debugger_29                                code  0189c0
  debugger_3                               rodata  01acc0
  debugger_31                                code  018a2c
  debugger_32                                code  018a00
  debugger_33                                code  018a08
  debugger_34                                code  018a10
  debugger_35                                code  018a18
  debugger_36                                code  018a20
  debugger_38                                code  018a94
  debugger_39                                code  018a64
  debugger_4                               rodata  01ac5e
  debugger_40                                code  018a70
  debugger_41                                code  018a7c
  debugger_42                                code  018a88
  debugger_43                                code  018a94
  debugger_45                                code  018ab4
  debugger_47                                code  018ad4
  debugger_49                                code  018b28
  debugger_5                               rodata  01abee
  debugger_51                                code  018b30
  debugger_53                                code  018b50
  debugger_54                                code  018b7c
  debugger_55                                code  018b7c
  debugger_57                                code  018ba8
  debugger_59                                code  018ba8
  debugger_6                               rodata  01ab7e
  debugger_60                                code  018c30
  debugger_61                                code  018bd0
  debugger_62                                code  018c28
  debugger_63                                code  018c24
  debugger_65                                code  018c08
  debugger_66                                code  018c10
  debugger_67                                code  018d44
  debugger_68                                code  018c60
  debugger_69                                code  018d40
  debugger_7                               rodata  01ab14
  debugger_70                                code  018cb4
  debugger_71                                code  018d3c
  debugger_72                                code  018ce4
  debugger_73                                code  018d3c
  debugger_74                                code  018d14
  debugger_75                                code  018d3c
  debugger_76                                code  018d28
  debugger_77                              rodata  01a8c6
  debugger_78                              rodata  01a89c
  debugger_79                                code  018eb4
  debugger_8                               rodata  01aaa8
  debugger_80                                code  018d9c
  debugger_82                                code  018d84
  debugger_83                                code  018e1c
  debugger_84                                code  018eb0
  debugger_85                                code  018e18
  debugger_87                                code  018eb0
  debugger_89                                code  018e9c
  debugger_9                               rodata  01aa56
  debugger_90                                code  018eb0
  debugger_93                              rodata  01a878
  debugger_94                              rodata  01a84e
  debugger_95                                code  01905c
  debugger_96                                code  018f0c
  debugger_98                                code  018ef4
  debugger_99                                code  018fac
  disassem                                   code  0175f8
  disassem20                               rodata  018734
  disassem_1                                 code  016a74
  disassem_10                                code  016bc0
  disassem_100                               code  01725c
  disassem_101                               code  0172a0
  disassem_102                               code  017288
  disassem_103                               code  0172a0
  disassem_104                               code  0172a0
  disassem_106                               code  0172a0
  disassem_108                             rodata  01a4a2
  disassem_109                               code  017330
  disassem_110                               code  01731c
  disassem_112                             rodata  01a49a
  disassem_113                             rodata  01a48c
  disassem_114                             rodata  01a47e
  disassem_115                               code  017408
  disassem_116                               code  0173d0
  disassem_117                               code  0173f4
  disassem_118                               code  0173f4
  disassem_119                             rodata  01a476
  disassem_12                              rodata  01a63e
  disassem_120                             rodata  01a468
  disassem_121                               code  0174cc
  disassem_122                               code  017468
  disassem_124                               code  0174b8
  disassem_125                             rodata  01a45a
  disassem_126                             rodata  01a454
  disassem_127                             rodata  01a44c
  disassem_128                             rodata  01a446
  disassem_129                               code  0175ec
  disassem_13                                code  016c2c
  disassem_130                               code  017594
  disassem_132                               code  017580
  disassem_133                             rodata  01a43a
  disassem_134                             rodata  01a42e
  disassem_135                             rodata  01a422
  disassem_136                             rodata  01a416
  disassem_137                             rodata  01a40a
  disassem_138                             rodata  01a3fe
  disassem_139                             rodata  01a3f2
  disassem_14                                code  016c18
  disassem_140                             rodata  01a3e6
  disassem_141                             rodata  01a3da
  disassem_142                             rodata  01a3ce
  disassem_143                             rodata  01a3c2
  disassem_144                             rodata  01a3b6
  disassem_145                             rodata  01a3aa
  disassem_146                             rodata  01a39e
  disassem_147                             rodata  01a392
  disassem_148                             rodata  01a386
  disassem_149                             rodata  01a37a
  disassem_150                             rodata  01a36e
  disassem_151                             rodata  01a362
  disassem_152                             rodata  01a356
  disassem_153                             rodata  01a34a
  disassem_154                             rodata  01a33c
  disassem_155                             rodata  01a336
  disassem_156                             rodata  01a328
  disassem_157                             rodata  01a324
  disassem_158                             rodata  01a31e
  disassem_159                             rodata  01a312
  disassem_16                              rodata  01a634
  disassem_160                             rodata  01a306
  disassem_161                             rodata  01a2fa
  disassem_162                             rodata  01a2ee
  disassem_163                             rodata  01a2e2
  disassem_164                             rodata  01a2d6
  disassem_165                             rodata  01a2ca
  disassem_166                             rodata  01a2be
  disassem_167                             rodata  01a2b2
  disassem_168                             rodata  01a2a6
  disassem_169                             rodata  01a29a
  disassem_17                                code  016c84
  disassem_170                             rodata  01a28e
  disassem_171                             rodata  01a282
  disassem_172                             rodata  01a276
  disassem_173                             rodata  01a26a
  disassem_174                             rodata  01a25e
  disassem_175                             rodata  01a252
  disassem_176                             rodata  01a246
  disassem_177                             rodata  01a23a
  disassem_178                             rodata  01a22e
  disassem_179                             rodata  01a216
  disassem_18                                code  016c70
  disassem_180                             rodata  01a1fe
  disassem_181                             rodata  01a1e6
  disassem_182                             rodata  01a1ce
  disassem_183                             rodata  01a1c2
  disassem_184                             rodata  01a1b6
  disassem_185                             rodata  01a1aa
  disassem_186                             rodata  01a19e
  disassem_187                             rodata  01a192
  disassem_188                             rodata  01a186
  disassem_189                             rodata  01a17a
  disassem_190                             rodata  01a16e
  disassem_191                             rodata  01a162
  disassem_192                             rodata  01a156
  disassem_193                             rodata  01a14a
  disassem_194                             rodata  01a13e
  disassem_195                             rodata  01a132
  disassem_196                             rodata  01a126
  disassem_197                             rodata  01a11a
  disassem_198                             rodata  01a10e
  disassem_199                             rodata  01a102
  disassem_2                                 code  016af4
  disassem_20                              rodata  01a62c
  disassem_200                             rodata  01a0f6
  disassem_201                             rodata  01a0ea
  disassem_202                             rodata  01a0de
  disassem_203                             rodata  01a0d2
  disassem_204                             rodata  01a0c6
  disassem_205                             rodata  01a0ba
  disassem_206                             rodata  01a0ae
  disassem_207                             rodata  01a0a2
  disassem_208                             rodata  01a096
  disassem_209                             rodata  01a088
  disassem_21                                code  016cdc
  disassem_210                             rodata  01a082
  disassem_211                             rodata  01a074
  disassem_212                             rodata  01a06e
  disassem_213                             rodata  01a062
  disassem_214                             rodata  01a054
  disassem_215                             rodata  01a046
  disassem_216                             rodata  01a038
  disassem_217                             rodata  01a028
  disassem_218                               code  018728
  disassem_219                               code  017638
  disassem_22                                code  016cc8
  disassem_220                               code  01870c
  disassem_221                               code  017654
  disassem_223                               code  0186e4
  disassem_224                               code  017838
  disassem_225                               code  0178c8
  disassem_226                               code  017d14
  disassem_227                               code  017d3c
  disassem_228                               code  017d64
  disassem_229                               code  017d8c
  disassem_230                               code  017db4
  disassem_231                               code  017ddc
  disassem_232                               code  017e04
  disassem_233                               code  017e2c
  disassem_234                               code  017e54
  disassem_235                               code  017e7c
  disassem_236                               code  017ea4
  disassem_237                               code  017ecc
  disassem_238                               code  017ef4
  disassem_239                               code  017f1c
  disassem_24                              rodata  01a624
  disassem_240                               code  018054
  disassem_241                               code  018068
  disassem_242                               code  0180d8
  disassem_243                               code  018148
  disassem_244                               code  018184
  disassem_245                               code  0181c0
  disassem_246                               code  0181e8
  disassem_247                               code  018210
  disassem_248                               code  018238
  disassem_249                               code  018260
  disassem_25                                code  016d34
  disassem_250                               code  018288
  disassem_251                               code  0182b0
  disassem_252                               code  0182d8
  disassem_253                               code  018300
  disassem_254                               code  018320
  disassem_255                               code  018340
  disassem_256                               code  018360
  disassem_257                               code  018380
  disassem_258                               code  0183a0
  disassem_259                               code  0183c0
  disassem_26                                code  016d20
  disassem_260                               code  0183e0
  disassem_261                               code  018400
  disassem_262                               code  018428
  disassem_263                               code  018450
  disassem_264                               code  018478
  disassem_265                               code  0184a0
  disassem_266                               code  0184c0
  disassem_267                               code  0184e0
  disassem_268                               code  018500
  disassem_269                               code  018520
  disassem_270                               code  018548
  disassem_271                               code  018570
  disassem_272                               code  0185b8
  disassem_273                               code  018600
  disassem_274                               code  018628
  disassem_275                               code  0186bc
  disassem_276                               code  017880
  disassem_277                               code  01789c
  disassem_278                               code  01787c
  disassem_28                              rodata  01a61c
  disassem_280                               code  017d10
  disassem_281                               code  017950
  disassem_282                               code  017ab0
  disassem_283                               code  017ad0
  disassem_284                               code  017af0
  disassem_285                               code  017b10
  disassem_286                               code  017b30
  disassem_287                               code  017b50
  disassem_288                               code  017b70
  disassem_289                               code  017b90
  disassem_29                              rodata  01a614
  disassem_290                               code  017bb0
  disassem_291                               code  017bd0
  disassem_292                               code  017bf0
  disassem_293                               code  017c10
  disassem_294                               code  017c30
  disassem_295                               code  017c50
  disassem_296                               code  017ca8
  disassem_297                               code  017aac
  disassem_298                               code  017994
  disassem_299                               code  0179bc
  disassem_3                                 code  016ae0
  disassem_30                              rodata  01a60a
  disassem_300                               code  0179e4
  disassem_301                               code  017a0c
  disassem_302                               code  017a34
  disassem_303                               code  017a5c
  disassem_304                               code  017a84
  disassem_305                               code  018050
  disassem_306                               code  017f70
  disassem_307                               code  017f90
  disassem_308                               code  017fb0
  disassem_309                               code  017fd0
  disassem_31                              rodata  01a602
  disassem_310                               code  017ff0
  disassem_311                               code  018010
  disassem_312                               code  018030
  disassem_313                               code  0180ac
  disassem_315                               code  01811c
  disassem_317                               code  018694
  disassem_318                               code  0186b8
  disassem_319                               code  018700
  disassem_32                              rodata  01a5fa
  disassem_321                               code  01870c
  disassem_322                             rodata  01a010
  disassem_323                               code  01879c
  disassem_324                               code  018764
  disassem_325                               code  018788
  disassem_326                               code  018780
  disassem_327                               code  018788
  disassem_33                              rodata  01a5f2
  disassem_34                              rodata  01a5ea
  disassem_35                              rodata  01a5e2
  disassem_36                              rodata  01a5d6
  disassem_37                              rodata  01a5ca
  disassem_38                              rodata  01a5be
  disassem_39                              rodata  01a5b2
  disassem_4                               rodata  01a650
  disassem_40                              rodata  01a5a4
  disassem_41                              rodata  01a596
  disassem_42                              rodata  01a58a
  disassem_43                                code  016f24
  disassem_44                                code  016f10
  disassem_45                                code  016de4
  disassem_46                                code  016df8
  disassem_47                                code  016e0c
  disassem_48                                code  016e20
  disassem_49                                code  016e34
  disassem_5                                 code  016b7c
  disassem_50                                code  016e48
  disassem_51                                code  016e5c
  disassem_52                                code  016e70
  disassem_53                                code  016e84
  disassem_54                                code  016e98
  disassem_55                                code  016eac
  disassem_56                                code  016ec0
  disassem_57                                code  016ed4
  disassem_58                                code  016ee8
  disassem_59                                code  016efc
  disassem_6                                 code  016b68
  disassem_60                                code  016f10
  disassem_62                              rodata  01a582
  disassem_63                              rodata  01a57a
  disassem_64                              rodata  01a56a
  disassem_65                              rodata  01a564
  disassem_66                                code  017004
  disassem_67                                code  016f88
  disassem_68                                code  016fac
  disassem_69                                code  016fe0
  disassem_70                                code  016ff0
  disassem_71                                code  016ff0
  disassem_73                              rodata  01a556
  disassem_74                              rodata  01a54e
  disassem_75                                code  017070
  disassem_76                                code  01704c
  disassem_77                                code  01705c
  disassem_78                                code  01705c
  disassem_8                               rodata  01a648
  disassem_80                              rodata  01a536
  disassem_81                              rodata  01a51e
  disassem_82                              rodata  01a506
  disassem_83                              rodata  01a4ee
  disassem_84                                code  01714c
  disassem_85                                code  017138
  disassem_86                                code  0170e8
  disassem_87                                code  0170fc
  disassem_88                                code  017110
  disassem_89                                code  017124
  disassem_9                                 code  016bd4
  disassem_90                                code  017138
  disassem_92                              rodata  01a4de
  disassem_93                              rodata  01a4d6
  disassem_94                              rodata  01a4c4
  disassem_95                              rodata  01a4ba
  disassem_96                              rodata  01a4aa
  disassem_97                                code  0172b4
  disassem_98                                code  01722c
  disk_size                                   bss  001160
  dmfm1                                      code  014fc0
  dmfm2                                      code  014fbc
  dmfm3                                      code  014fcc
  doCLS                                      code  011b0c
  doCS                                       code  80000000000001b1
  doDate                                     code  011758
  doDate.0001                                code  0117a8
  doDay                                      code  0117e0
  doDebug                                    code  011824
  doDisassem                                 code  0117fc
  doDumpTL                                   code  011598
  doDumpmem                                  code  011578
  doDumpmem.001                              code  011584
  doFillmem                                  code  0115a0
  doFillmem.0001                             code  0115fc
  doFillmem.0002                             code  0115e4
  doFillmem.0003                             code  011604
  doFillmem.0004                             code  0115b4
  doJump                                     code  01164c
  doRand                                     code  80000000000001b6
  doSDBoot                                   code  011624
  drf_rout                                   code  012a28
  drf_rout.0001                              code  012a40
  dtfm2                                      code  014ff8
  dtfm2a                                     code  015084
  dtfm3                                      code  015020
  dtfm3a                                     code  0150ac
  dtfm4                                      code  015024
  dtfm4a                                     code  0150b0
  dtfm5                                      code  015048
  dtl1                                       code  0148b0
  dtl2                                       code  01481c
  dtl3                                       code  01482c
  dwf_rout                                   code  012a44
  dwf_rout.0001                              code  012a5c
  eval                                       code  80000000000001b7
  exf_rout                                   code  012a0c
  exf_rout.0001                              code  012a24
  fif1                                       code  015ac0
  fmbx0                                      code  014e44
  fmbx1                                      code  014e40
  fmbx10                                     code  014dd8
  fmbx11                                     code  014e08
  fmbx12                                     code  014e14
  fmbx2                                      code  014e28
  fmbx3                                      code  014db0
  fmbx5                                      code  014d80
  fmbx6                                      code  014db4
  fmbx7                                      code  014dc8
  fmbx9                                      code  014df4
  freejcb_sema                                bss  c001b8
  freembx_sema                                bss  c001c8
  freemsg_sema                                bss  c001d0
  freetcb_sema                                bss  c001c0
  get_datetime                               code  012ba0
  getchar                                  rodata  0161d4
  getcharNoWait                              code  0161c4
  hangprg                                    code  012924
  icc1                                       code  010ee4
  icr1                                       code  010ec4
  ignBlanks                                  code  01151c
  ignBlanks1                                 code  011524
  ignore_blanks                              code  018b40
  ijcb1                                      code  014204
  ijcb2                                      code  014288
  iof_sema                                    bss  c001f8
  iof_switch                                  bss  c00180
  isalnum                                    code  016624
  isalpha                                    code  0165c8
  iscntrl                                    code  0169fc
  isdigit                                  rodata  01658c
  isgraph                                    code  016918
  islower                                    code  0167e8
  isprint                                    code  016990
  ispunct                                    code  016828
  isspace                                    code  0166a0
  isupper                                    code  0167a8
  isxdigit                                   code  016510
  it1                                        code  014478
  it2                                        code  014454
  it3                                        code  01444c
  jcb_sema                                    bss  c00210
  jmp_vector                                  bss  001118
  kbdi5                                      code  011bf0
  kernel_panic                               code  015a00
  keybdControlCodes                          code  012430
  keybdExtendedCodes                         code  0124b0
  keybdInIRQ                                  bss  c00178
  keybdIsSetup                                bss  c00168
  keybdLock                                   bss  c00170
  keybd_char                                  bss  c00160
  keybd_mbx                                   bss  c00158
  keybdmsg_d1                                 bss  c00148
  keybdmsg_d2                                 bss  c00150
  kpan1                                      code  015a20
  kpan2                                      code  015a04
  kt1                                        code  0147ec
  kt6                                        code  0147c4
  kt6.self                                   code  0147e8
  kt7                                        code  0147b0
  ld                                         code  0161c8
  linebuf                                     bss  c00228
  linendx                                     bss  c00220
  loadBootFile                               code  80000000000001ca
  mbx_sema                                    bss  c00200
  missed_ticks                                bss  c00140
  mmu_acc_save                                bss  c001a8
  mon1                                       code  011430
  mon1.Prompt1                               code  01146c
  mon1.Prompt2                               code  01148c
  mon1.Prompt3                               code  011454
  mon1.PromptLn                              code  011448
  mon1.doHelp                                code  0114f0
  msgBadKeybd                                code  011bf0
  msgBusErr                                  code  012ad3
  msgEA                                      code  012ae3
  msgErr                                     code  011a30
  msgExitingTask                             code  014754
  msgHelp                                    code  011a38
  msgMonitorStarted                          code  011afb
  msgParErr                                  code  0129fc
  msgPriv                                    code  012ab7
  msgROMChecksum                             code  011114
  msgStart                                   code  0113e1
  msgTaskList                                code  0148d0
  msgUninit                                  code  012ac7
  msgUninitIRQ                               code  012ae8
  msg_sema                                    bss  c00208
  msgdrf                                     code  012aad
  msgdwf                                     code  012ab2
  msgexf                                     code  012aa8
  nMailbox                                    bss  c00128
  nMsgBlk                                     bss  c00138
  nmi_rout                                   code  0129d4
  nmi_rout1                                  code  0129f8
  p100Hz1                                    code  015798
  p100Hz12                                   code  0157d8
  p100Hz14                                   code  0157b8
  p100Hz15                                   code  015780
  p100Hz4                                    code  015774
  p100Hz_missed_tick                         code  0157ac
  pSpriteController                          code  012f04
  printf                                   rodata  016234
  priv_rout                                  code  012a60
  priv_rout.0001                             code  012aa4
  ptl1                                       code  014c2c
  putch                                    rodata  015dd0
  puthexnum                                  code  015f94
  putnum                                     code  015dfc
  putstr                                     code  016110
  putstr2                                  rodata  016198
  qmam1                                      code  014f44
  qmam2                                      code  014ecc
  qmam3                                      code  014f0c
  qmam4                                      code  014f10
  qmam6                                      code  014ed0
  qmam8                                      code  014f38
  qmam_add_at_head                           code  014ec8
  qmam_bad_msg                               code  014ef4
  qmam_newest                                code  014ef8
  qmam_oldest                                code  014f74
  qmam_unlimited                             code  014eb4
  r2                                         code  01260c
  r3                                         code  01260c
  r5                                         code  01260c
  r6                                         code  0161c8
  rdy_sema                                    bss  c001e8
  resched1                                   code  0155bc
  reschedule                                 code  0154ac
  reschedule.0001                            code  0154c0
  reschedule.0002                            code  0154c8
  reschedule.0004                            code  0154f4
  reschedule.0005                            code  015500
  reverse_video                              code  016a80
  rfr1                                       code  014a6c
  rfr2                                       code  014a74
  rftBadPtr                                  code  014c04
  rftl_empty_list                            code  014be8
  rftl_not_on_list                           code  014c04
  rftl_not_on_list2                          code  014c14
  rftl_remove_from_head                      code  014bc4
  riof1                                      code  015bd8
  riof2                                      code  015bf4
  riof3                                      code  015ba4
  riof4                                      code  015c08
  rliof1                                     code  015cb8
  rliof2                                     code  015cd8
  rliof3                                     code  015ce0
  rliof4                                     code  015c60
  rliof5                                     code  015cd0
  rliof6                                     code  015ce4
  rxfull                                    const  000001
  set_time_serial                            code  012e48
  set_time_serial_10                         code  012d14
  set_time_serial_12                         code  012d4c
  set_time_serial_14                         code  012d4c
  set_time_serial_17                         code  012e3c
  set_time_serial_19                         code  012ef8
  set_time_serial_2                          code  012c28
  set_time_serial_20                         code  012ee4
  set_time_serial_4                          code  012c60
  set_time_serial_6                          code  012c98
  set_time_serial_8                          code  012cdc
  set_vector                                 code  0188f4
  sgc1                                       code  0104cc
  sgcfifo1                                   code  0106c8
  sgcfifo2                                   code  0106b4
  sgcfifo3                                   code  01068c
  sgcfifo4                                   code  0106a0
  sgcfifo5                                   code  0106b4
  shiftedScanCodes                           code  012330
  siof3                                      code  015b20
  sirq1                                      code  010724
  sjob1                                      code  0144ec
  sjob2                                      code  0144e8
  sjob3                                      code  0144c8
  smp2                                       code  015150
  smsg1                                      code  015200
  smsg2                                      code  015214
  smsg3                                      code  0151a0
  smsg4                                      code  01522c
  smsg5                                      code  0151e8
  smsg7                                      code  0151a8
  smsg8                                      code  0151bc
  smsg9                                      code  0151ec
  smsirq                                     code  010738
  spcabort                                   code  0105e0
  spcb1                                      code  010558
  spcb2                                      code  010590
  spcb3                                      code  010530
  spcb4                                      code  010568
  spcb5                                      code  0105ac
  spcb6                                      code  010598
  spcb7                                      code  0105dc
  spcb8                                      code  0105b4
  sprite_demo                                code  012f0c
  sprite_demo_10                             code  012fac
  sprite_demo_11                             code  013024
  sprite_demo_12                             code  01301c
  sprite_demo_13                             code  013024
  sprite_demo_14                             code  0130f8
  sprite_demo_15                             code  013030
  sprite_demo_16                             code  0130e8
  sprite_demo_17                             code  0130e0
  sprite_demo_18                             code  0130f8
  sprite_demo_4                              code  012f44
  sprite_demo_5                              code  012f7c
  sprite_demo_6                              code  012f74
  sprite_demo_7                              code  012f80
  sprite_demo_8                              code  012fa8
  sprite_demo_9                              code  012fa0
  sprites                                     bss  00d000
  srxirq                                     code  010748
  srxirq1                                    code  010748
  srxirq2                                    code  010768
  srxirq3                                    code  010778
  srxirq5                                    code  010790
  srxirq6                                    code  0107d8
  srxirq7                                    code  0107ec
  srxirq8                                    code  0107fc
  st4                                        code  0142bc
  st4.0001                                   code  01437c
  st4.imbxl1                                 code  014310
  st4.imbxl2                                 code  014334
  st4.nextTCB                                code  0143a8
  st5                                        code  0141e0
  start                                      code  0100a8
  startSector                                 bss  00115c
  stask1                                     code  0146d0
  stask2                                     code  0146a0
  stdio_1                                    code  015df0
  stdio_11                                   code  015e70
  stdio_12                                   code  015f08
  stdio_13                                   code  015ea0
  stdio_15                                   code  015ed0
  stdio_17                                   code  015ec0
  stdio_18                                   code  015f08
  stdio_19                                   code  015f28
  stdio_2                                  rodata  01a000
  stdio_21                                   code  015f28
  stdio_22                                   code  015f4c
  stdio_23                                   code  015f44
  stdio_24                                   code  015f4c
  stdio_25                                   code  015f70
  stdio_26                                   code  015f70
  stdio_27                                   code  016104
  stdio_28                                   code  015fd4
  stdio_3                                    code  015f88
  stdio_30                                   code  015fd0
  stdio_31                                   code  015fe8
  stdio_32                                   code  015ff0
  stdio_33                                   code  016008
  stdio_35                                   code  016008
  stdio_36                                   code  016084
  stdio_37                                   code  016038
  stdio_38                                   code  01606c
  stdio_39                                   code  016058
  stdio_4                                    code  015e3c
  stdio_40                                   code  01606c
  stdio_41                                   code  0160a4
  stdio_43                                   code  0160a4
  stdio_44                                   code  0160c8
  stdio_45                                   code  0160c8
  stdio_46                                   code  0160ec
  stdio_47                                   code  0160ec
  stdio_48                                   code  01618c
  stdio_49                                   code  016138
  stdio_50                                   code  016160
  stdio_51                                   code  016154
  stdio_52                                   code  016174
  stdio_54                                   code  0161b8
  stdio_57                                   code  016228
  stdio_58                                   code  0161f0
  stdio_59                                   code  016208
  stdio_6                                    code  015e38
  stdio_60                                   code  016214
  stdio_61                                   code  01629c
  stdio_62                                   code  0164fc
  stdio_63                                   code  016264
  stdio_64                                   code  0164e0
  stdio_65                                   code  0164d8
  stdio_66                                   code  0164c8
  stdio_67                                   code  0164d8
  stdio_68                                   code  0164c4
  stdio_69                                   code  016330
  stdio_7                                    code  015e4c
  stdio_70                                   code  01633c
  stdio_71                                   code  01634c
  stdio_72                                   code  01636c
  stdio_73                                   code  01638c
  stdio_74                                   code  0163ac
  stdio_75                                   code  0163c8
  stdio_76                                   code  0163d0
  stdio_77                                   code  016440
  stdio_78                                   code  0163e4
  stdio_79                                   code  01642c
  stdio_8                                    code  015e54
  stdio_80                                   code  016440
  stdio_82                                   code  016464
  stdio_84                                   code  016478
  stdio_85                                   code  0164c0
  stdio_86                                   code  0164e0
  stdio_9                                    code  015e6c
  strStartQue                                code  0155d0
  sttr10                                     code  015830
  sttr11                                     code  015824
  sttr2                                      code  0157f8
  sttr3                                      code  015998
  sttr5                                      code  015848
  sttr6                                      code  0158b0
  sttr7                                      code  015964
  sttr8                                      code  01599c
  sttr_badtask                               code  0159d8
  sttr_nextInList                            code  015970
  sttr_nextList                              code  015984
  stxirq                                     code  010744
  sys_sema                                    bss  c001d8
  sys_ticks                                   bss  c00020
  syscall_exception                          code  015458
  syscall_vectors                            code  014000
  tcb_sema                                    bss  c001e0
  tcbsema_d1                                  bss  c00198
  tcbsema_d2                                  bss  c001a0
  tck3                                       code  0157d8
  tol_sema                                    bss  c001f0
  tolower                                    code  016720
  toupper                                    code  016764
  tr                                         code  01545c
  tr.bad_callno                              code  0154a0
  unshiftedScanCodes                         code  012230
  wmsg1                                      code  01535c
  wmsg10                                     code  0152d0
  wmsg11                                     code  015264
  wmsg12                                     code  01527c
  wmsg13                                     code  015284
  wmsg14                                     code  0152c0
  wmsg2                                      code  015374
  wmsg3                                      code  01531c
  wmsg6                                      code  015300
  wmsg7                                      code  0152bc
  wmsg8                                      code  015344
  xtsk1                                      code  014750
  xtsk6                                      code  014734
  xtsk7                                      code  014720
