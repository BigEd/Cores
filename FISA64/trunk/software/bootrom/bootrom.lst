                	; ============================================================================
                	; bootrom.s
                	;        __
                	;   \\__/ o\    (C) 2014  Robert Finch, Stratford
                	;    \  __ /    All rights reserved.
                	;     \/_//     robfinch<remove>@finitron.ca
                	;       ||
                	;  
                	;
                	; This source file is free software: you can redistribute it and/or modify 
                	; it under the terms of the GNU Lesser General Public License as published 
                	; by the Free Software Foundation, either version 3 of the License, or     
                	; (at your option) any later version.                                      
                	;                                                                          
                	; This source file is distributed in the hope that it will be useful,      
                	; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                	; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                	; GNU General Public License for more details.                             
                	;                                                                          
                	; You should have received a copy of the GNU General Public License        
                	; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                	;                                                                          
                	; ============================================================================
                	;
                	TXTCOLS		EQU		84
                	TXTROWS		EQU		31
                	
                	CR	EQU	0x0D		;ASCII equates
                	LF	EQU	0x0A
                	TAB	EQU	0x09
                	CTRLC	EQU	0x03
                	CTRLH	EQU	0x08
                	CTRLI	EQU	0x09
                	CTRLJ	EQU	0x0A
                	CTRLK	EQU	0x0B
                	CTRLM   EQU 0x0D
                	CTRLS	EQU	0x13
                	CTRLX	EQU	0x18
                	XON		EQU	0x11
                	XOFF	EQU	0x13
                	
                	SC_LSHIFT	EQU		$12
                	SC_RSHIFT	EQU		$59
                	SC_KEYUP	EQU		$F0
                	SC_EXTEND	EQU		$E0
                	SC_CTRL		EQU		$14
                	SC_ALT		EQU		$11
                	SC_DEL		EQU		$71		; extend
                	SC_LCTRL	EQU		$58
                	SC_NUMLOCK	EQU		$77
                	SC_SCROLLLOCK	EQU	$7E
                	SC_CAPSLOCK	EQU		$58
                	SC_TAB      EQU     $0D
                	
                	; Boot sector info (62 byte structure) */
                	BSI_JMP		= 0x00
                	BSI_OEMName	= 0x03
                	BSI_bps		= 0x0B
                	BSI_SecPerCluster	= 0x0D
                	BSI_ResSectors	= 0x0E
                	BSI_FATS	= 0x10
                	BSI_RootDirEnts	= 0x11
                	BSI_Sectors	= 0x13
                	BSI_Media	= 0x15
                	BSI_SecPerFAT	= 0x16
                	BSI_SecPerTrack	= 0x18
                	BSI_Heads	= 0x1A
                	BSI_HiddenSecs	= 0x1C
                	BSI_HugeSecs	= 0x1E
                	
                	BSI_DriveNum	= 0x24
                	BSI_Rsvd1		= 0x25
                	BSI_BootSig		= 0x26
                	BSI_VolID		= 0x27
                	BSI_VolLabel	= 0x2B
                	BSI_FileSysType = 0x36
                	
                	DBG_STACK   EQU     $7000
                	CPU0_BIOS_STACK  EQU     $6800
                	MON_STACK   EQU     $6000
                	; CPU1 Ram allocations must be to the dram area.
                	CPU0_IRQ_STACK   EQU    $8800
                	CPU1_IRQ_STACK  EQU     $20800
                	CPU1_SYS_STACK      EQU  $21000
                	CPU1_BIOS_STACK     EQU  $21800
                	CPU0_SYS_STACK      EQU  $5000
                	
                	LEDS	equ		$FFDC0600
                	
                	BIOS_FREE      EQU       0
                	BIOS_DONE      EQU       1
                	BIOS_INSERVICE EQU       2
                	
                	MAX_BIOS_CALL  EQU       100
                	E_BadFuncno    EQU       1
                	BIOS_E_Timeout EQU       2
                	E_Unsupported  EQU       3
                	
                	; The following offsets in the I/O segment
                	TEXTSCR	equ		$FFD00000
                	TEXTREG		EQU		$A0000
                	TEXT_COLS	EQU		0x00
                	TEXT_ROWS	EQU		0x04
                	TEXT_CURPOS	EQU		0x2C
                	TEXT_CURCTL	EQU		0x20
                	
                	BMP_CLUT	EQU		$C5800
                	
                	PIC			EQU		0xFFDC0FC0
                	PIC_IE		EQU		0xFFDC0FC4
                	PIC_ES		EQU		0xFFDC0FD0
                	PIC_RSTE	EQU		0xFFDC0FD4
                	
                	KEYBD		EQU		0xFFDC0000
                	KEYBDCLR	EQU		0xFFDC0004
                	
                	SPIMASTER	EQU		0xFFDC0500
                	SPI_MASTER_VERSION_REG	EQU	0x00
                	SPI_MASTER_CONTROL_REG	EQU	0x04
                	SPI_TRANS_TYPE_REG	EQU		0x08
                	SPI_TRANS_CTRL_REG	EQU		0x0C
                	SPI_TRANS_STATUS_REG	EQU	0x10
                	SPI_TRANS_ERROR_REG		EQU	0x14
                	SPI_DIRECT_ACCESS_DATA_REG		EQU	0x18
                	SPI_SD_SECT_7_0_REG		EQU	0x1C
                	SPI_SD_SECT_15_8_REG	EQU	0x20
                	SPI_SD_SECT_23_16_REG	EQU	0x24
                	SPI_SD_SECT_31_24_REG	EQU	0x28
                	SPI_RX_FIFO_DATA_REG	EQU	0x40
                	SPI_RX_FIFO_DATA_COUNT_MSB	EQU	0x48
                	SPI_RX_FIFO_DATA_COUNT_LSB  EQU 0x4C
                	SPI_RX_FIFO_CTRL_REG		EQU	0x50
                	SPI_TX_FIFO_DATA_REG	EQU	0x80
                	SPI_TX_FIFO_CTRL_REG	EQU	0x90
                	SPI_RESP_BYTE1			EQU	0xC0
                	SPI_RESP_BYTE2			EQU	0xC4
                	SPI_RESP_BYTE3			EQU	0xC8
                	SPI_RESP_BYTE4			EQU	0xCC
                	
                	SPI_INIT_SD			EQU		0x01
                	SPI_TRANS_START		EQU		0x01
                	SPI_TRANS_BUSY		EQU		0x01
                	SPI_INIT_NO_ERROR	EQU		0x00
                	SPI_READ_NO_ERROR	EQU		0x00
                	SPI_WRITE_NO_ERROR	EQU		0x00
                	RW_READ_SD_BLOCK	EQU		0x02
                	RW_WRITE_SD_BLOCK	EQU		0x03
                	
                	I2C_MASTER		EQU		0xFFDC0E00
                	I2C_PRESCALE_LO	EQU		0x00
                	I2C_PRESCALE_HI	EQU		0x01
                	I2C_CONTROL		EQU		0x02
                	I2C_TX			EQU		0x03
                	I2C_RX			EQU		0x03
                	I2C_CMD			EQU		0x04
                	I2C_STAT		EQU		0x04
                	
                	SD_MASTER		EQU		0xFFDC0B00
                	
                	RANDOM_NUM      EQU     0xFFDC0C00
                	
                	UART            EQU     0xFFDC0A00
                	UART_TX         EQU     0
                	UART_RX         EQU     0
                	UART_LS         EQU     1
                	UART_MS         EQU     2
                	UART_IS         EQU     3
                	UART_IE         EQU     4
                	UART_FF         EQU     5
                	UART_MC         EQU     6
                	UART_CTRL       EQU     7
                	UART_CM0        EQU     8
                	UART_CM1        EQU     9
                	UART_CM2        EQU     10
                	UART_CM3        EQU     11
                	UART_SPR        EQU     15
                	
                	TCB_BASE       EQU     $0C00000
                	TCB_TOP        EQU     $1C00000
                	
                	; BIOS request structure
                	BIOS_op        EQU     $00
                	BIOS_arg1      EQU     $08
                	BIOS_arg2      EQU     $10
                	BIOS_arg3      EQU     $18
                	BIOS_arg4      EQU     $20
                	BIOS_arg5      EQU     $28
                	BIOS_resp      EQU     $30
                	BIOS_stat      EQU     $38
                	
                	; ============================================================================
                	;        __
                	;   \\__/ o\    (C) 2014,2015  Robert Finch, Stratford
                	;    \  __ /    All rights reserved.
                	;     \/_//     robfinch<remove>@finitron.ca
                	;       ||
                	;  
                	;
                	; This source file is free software: you can redistribute it and/or modify 
                	; it under the terms of the GNU Lesser General Public License as published 
                	; by the Free Software Foundation, either version 3 of the License, or     
                	; (at your option) any later version.                                      
                	;                                                                          
                	; This source file is distributed in the hope that it will be useful,      
                	; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                	; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                	; GNU General Public License for more details.                             
                	;                                                                          
                	; You should have received a copy of the GNU General Public License        
                	; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                	;
                	; DeviceDriver.inc
                	; - Device driver structures and constants                                                                         
                	; ============================================================================
                	
                	;	.global			; global constants
                	
                	; Device Control Block
                	;
                	DCB_Name			EQU		0		; string: first byte is length, 11 chars max
                	DCB_Type			EQU		0x0C
                	DCB_nBPB			EQU		0x10
                	DCB_LastErc			EQU		0x18		; last error code
                	DCB_StartBlock		EQU		0x20		; starting block number (partitioned devices)
                	DCB_nBlocks			EQU		0x28		; number of blocks on device
                	DCB_pCmdProc		EQU		0x30		; pointer to command processor routine
                	DCB_ReentCount		EQU		0x38		; re-entrancy count (1 to 255)
                	DCB_fSingleUser		EQU		0x39
                	DCB_hJob			EQU		0x40		; handle to associated job
                	DCB_Mbx				EQU		0x48
                	DCB_pSema			EQU		0x50		; pointer to device semaphore
                	DCB_Resv1			EQU		0x58		; reserved
                	DCB_Resv2			EQU		0x60		; reserved
                	DCB_SIZE			EQU		0x68
                	
                	; Device command opcodes
                	;
                	DVC_Nop				EQU		0
                	DVC_Setup			EQU		1
                	DVC_Initialize		EQU		2
                	DVC_Status			EQU		3
                	DVC_MediaCheck		EQU		4
                	DVC_BuildBPB		EQU		5
                	DVC_Open			EQU		6
                	DVC_Close			EQU		7
                	DVC_GetChar			EQU		8
                	DVC_PeekChar		EQU		9
                	DVC_GetCharDirect	EQU		10
                	DVC_PeekCharDirect	EQU		11
                	DVC_InputStatus		EQU		12
                	DVC_PutChar			EQU		13
                	DVC_SetPosition		EQU		15
                	DVC_ReadBlock		EQU		16
                	DVC_WriteBlock		EQU		17
                	DVC_VerifyBlock		EQU		18
                	DVC_OutputStatus	EQU		19
                	DVC_FlushInput		EQU		20
                	DVC_FlushOutput		EQU		21
                	DVC_IRQ				EQU		22
                	DVC_IsRemoveable	EQU		23
                	DVC_IOCTRL_READ		EQU		24
                	DVC_IOCTRL_WRITE	EQU		25
                	DVC_OutputUntilBusy	EQU		26
                	
                	MAX_DEV_OP			EQU		31
                	
                	
                	DRSP_DONE			EQU		1
                	
                	;Standard Devices are:
                	
                	;#		Device					Standard name
                	
                	;0		NULL device 			NUL		(OS built-in)
                	;1		Keyboard (sequential)	KBD		(OS built-in)
                	;2		Video (sequential)		VID		(OS built-in)
                	;3		Printer (parallel 1)	LPT
                	;4		Printer (parallel 2)	LPT2
                	;5		RS-232 1				COM1	(OS built-in)
                	;6		RS-232 2				COM2
                	;7		RS-232 3				COM3
                	;8		RS-232 4				COM4
                	;9
                	;10		Floppy					FD0
                	;11		Floppy					FD1
                	;12		Hard disk				HD0
                	;13		Hard disk				HD1
                	;14
                	;15
                	;16		SDCard					CARD1 	(OS built-in)
                	;17
                	;18
                	;19
                	;20
                	;21
                	;22
                	;23
                	;24
                	;25
                	;26
                	;27
                	;28		Audio					PSG1	(OS built-in)
                	;29
                	;30
                	;31
                	
                	NR_DCB			EQU		32
                	NR_DCB			EQU		32
                	;include "FMTK_Equates.inc"
                	
                		code
                		org		$00010000
010000 3A 15 00 00 		bra     start
010004 00 00 00 00 		align   
                	
010008 20 09 01 00 		dw		ClearScreen		; $8000
01000C 00 00 00 00 
010010 E4 08 01 00 		dw		HomeCursor		; $8008
010014 00 00 00 00 
010018 0C 0A 01 00 		dw		DisplayString	; $8010
01001C 00 00 00 00 
010020 1C 1E 01 00 		dw		KeybdGetCharNoWait; $8018
010024 00 00 00 00 
010028 BE 00 00 00 		dw		ClearBmpScreen	; $8020
01002C 00 00 00 80 
010030 5C 0C 01 00 		dw		DisplayChar		; $8028
010034 00 00 00 00 
010038 C0 00 00 00 		dw		SDInit			; $8030
01003C 00 00 00 80 
010040 C1 00 00 00 		dw		SDReadMultiple	; $8038
010044 00 00 00 80 
010048 C2 00 00 00 		dw		SDWriteMultiple	; $8040
01004C 00 00 00 80 
010050 C3 00 00 00 		dw		SDReadPart		; $8048
010054 00 00 00 80 
010058 C4 00 00 00 		dw		SDDiskSize		; $8050
01005C 00 00 00 80 
010060 8C 09 01 00 		dw		DisplayWord		; $8058
010064 00 00 00 00 
010068 A0 09 01 00 		dw		DisplayHalf		; $8060
01006C 00 00 00 00 
010070 B4 09 01 00 		dw		DisplayCharHex	; $8068
010074 00 00 00 00 
010078 C8 09 01 00 		dw		DisplayByte		; $8070
01007C 00 00 00 00 
                	BIOS_FuncTable:
010080 20 09       	    dc      ClearScreen
010082 E4 08       	    dc      HomeCursor
010084 0C 0A       	    dc      DisplayString
010086 1C 1E       	    dc      KeybdGetCharNoWait
010088 00 00       	    dc      0
01008A 04 16       	    dc      OutChar
01008C 00 00       	    dc      0
01008E 00 00       	    dc      0
010090 00 00       	    dc      0
010092 00 00       	    dc      0
010094 00 00       	    dc      0
010096 8C 09       	    dc      DisplayWord
010098 A0 09       	    dc      DisplayHalf
01009A B4 09       	    dc      DisplayCharHex
01009C C8 09       	    dc      DisplayByte
01009E 3C 0A       	    dc      DisplayString16
0100A0 00 00       	    dc      0
0100A2 00 00       	    dc      0
0100A4 00 00       	    dc      0
                	    
0100A6 00 00       	    align   
                	
                	message "start"
                	start:
0100A8 7C C0 00 00 	    sw      r0,FMTK_Inited
0100AC 63 00 60 03 
0100B0 02 10 00 6C 	    cpuid   r1,r0,#0
0100B4 BD 00 2A 00 	    beq     r1,CPU0_Start
                	CPU1_Start:
0100B8 FC 7C 00 00 	    ldi     sp,#CPU1_STACK
0100BC 0A E0 01 F0 
0100C0 B9 4C 00 00 	    bsr     SetupIntVectors1
0100C4 B9 67 00 00 		bsr		InitPIC1
                		; Wait for CPU #0 to complete FMTK initialization before proceeding.
                	.0001:
0100C8 3F 00 00 00 	    nop
0100CC 3F 00 00 00 	    nop
0100D0 7C C0 00 00 		lw      r1,FMTK_Inited
0100D4 46 10 60 03 
0100D8 7C 34 12 00 		cmpu    r1,r1,#$12345678
0100DC 96 10 F0 AC 
0100E0 BD 10 F4 FF 		bne     r1,.0001
0100E4 39 E7 07 00 		bsr     FMTKInitialize        ;  Initialize for CPU #1
                	.0003:
0100E8 02 00 00 6E 	    cli
0100EC 7C 02 00 00 	    inc     $20000
0100F0 64 10 00 00 
0100F4 46 10 20 27 	    lw      r1,StartCPU1Flag
0100F8 7C 34 12 00 	    cmp     r1,r1,#$12345678
0100FC 86 10 F0 AC 
010100 BD 10 F4 FF 	    bne     r1,.0003
010104 3E 00 30 27 	    jmp     (StartCPU1Addr)
                	    ; This is a little bit kludgy, we setup just enough of the FMTK vars
                	    ; in order to be able to get display output.
                	CPU0_Start:
                	.0002:
010108 7C F0 07 00 		ldi     sp,#STACKS_Array+4088
01010C 0A E0 F1 1F 
010110 7C C1 00 00 		ldi     tr,#TCB_Array               ; load task register with BIOS task
010114 0A 80 01 00 
010118 63 EC 31 03 		sw      sp,TCB_ISP[tr]
01011C 63 EC E1 01 		sw      sp,TCB_r30[tr]
010120 7C 00 00 00 		ldi     r1,#CPU0_BIOS_STACK         ;BIOS_STACKS_Array+4088  ; so we can call the BIOS during startup
010124 0A 10 00 D0 
010128 63 1C 10 05 		sw      r1,TCB_BIOS_Stack[tr]
01012C 60 0C 28 04 		sb      r0,TCB_hJCB[tr]             ; JCB#0 is the system JCB
010130 B9 F9 01 00 		bsr     GetJCBPtr
010134 7C C0 00 00 		sw      r1,IOFocusNdx               ; The screen routines check this var
010138 63 10 50 00 
01013C 7C D0 FF 00 		ldi     r2,#$FFD00000
010140 0A 20 00 00 
010144 E3 20 D0 07 		sw      r2,JCB_pVidMem[r1]          ; point JCB#0 to real screen
010148 FC 26 00 00 		ldi		r4,#%000000100_110101110_0000000000	; grey on blue
01014C 0A 40 00 70 
010150 E2 40 28 08 		sh		r4,JCB_NormAttr[r1]
010154 E2 40 30 08 		sh		r4,JCB_CurrAttr[r1]
010158 0A 50 00 00 	    ldi     r5,#$0000
01015C 0A 10 28 00 	    ldi     r1,#20
                	.0001:
010160 7C DC FF 00 	    sc      r5,LEDS
010164 61 50 00 0C 
010168 94 52 02 00 	    addui   r5,r5,#1
01016C 63 00 00 22 		sw		r0,Milliseconds
010170 0A 10 FE FF 		ldi     r1,#-1
010174 63 10 00 27 		sw      r1,API_sema
010178 63 00 10 27 		sw      r0,BIOS_sema
01017C 7C C0 00 00 		sw      r0,BIOS1_sema
010180 63 00 30 04 
010184 FC 26 00 00 		ldi		r1,#%000000100_110101110_0000000000
010188 0A 10 00 70 
01018C 60 10 68 22 		sb		r1,KeybdEcho
010190 60 00 6A 22 		sb		r0,KeybdBad
010194 62 10 50 22 		sh		r1,NormAttr
010198 7C 01 00 00 		ldi		r1,#DisplayChar
01019C 0A 10 B8 18 
0101A0 63 10 10 22 		sw		r1,OutputVec
0101A4 B9 EF 00 00 		bsr		ClearScreen
0101A8 B9 E7 00 00 		bsr		HomeCursor
0101AC 7C 01 00 00 		ldi     r1,#msgStart
0101B0 0A 10 3A 27 
0101B4 B9 1A 01 00 		bsr     DisplayStringCRLF
0101B8 B9 0F 00 00 		bsr		SetupIntVectors
0101BC 39 D9 01 00 		bsr     ROMChecksum
0101C0 B9 44 13 00 		bsr     dbg_init
                	;	bsr		KeybdInit
                	    ; set data breakpoint at FreeTCB address
                	;    ldi     r1,#$C00098
                	;    mtspr   dbad0,r1
                	;    ldi     r1,#$D0001
                	;    mtspr   dbctrl,r1
0101C4 39 CB 07 00 	    bsr     FMTKInitialize
0101C8 7C 01 00 00 	    ldi     r1,#UserTickRout     ; set user tick vector
0101CC 0A 10 78 26 
0101D0 7C C0 00 00 	    sw      r1,$C00000
0101D4 63 10 00 00 
0101D8 B9 41 00 00 		bsr		InitPIC
0101DC 39 48 00 00 		bsr     InitUart
0101E0 39 8E 04 00 		bsr     RTCCReadbuf          ; read the real-time clock
0101E4 B9 82 05 00 		bsr     set_time_serial      ; set the system time serial
                	
                		; Startup BIOS call task so that CPU#1 may make BIOS calls
0101E8 0A 10 00 00 		ldi     r1,#0                ; task priority
0101EC 0A 20 00 00 		ldi     r2,#0                ; cpu affinity
0101F0 7C 01 00 00 		ldi     r3,#BIOSCallTask|1   ; start address (start in kernel mode)
0101F4 0A 30 32 25 
0101F8 0A 40 00 00 		ldi     r4,#0                ; start parameter
0101FC 0A 50 00 00 		ldi     r5,#0                ; owning job
                	;	sys     #FMTK_CALL
                	;	dh      1                    ; start task function
010200 39 BC 08 00 	    bsr     DumpTaskList
010204 BA 36 02 00 		bra		Monitor
                	
                	SerialStartMsg:
010208 E7 EF 01 00 	    push    lr
01020C 7C 01 00 00 		ldi     r1,#SerialPutChar
010210 0A 10 68 09 
010214 63 10 10 22 		sw      r1,OutputVec
010218 7C 01 00 00 		ldi     r1,#msgStart
01021C 0A 10 3A 27 
010220 39 0D 01 00 		bsr     DisplayStringCRLF
010224 7C 01 00 00 		ldi		r1,#DisplayChar
010228 0A 10 B8 18 
01022C 63 10 10 22 		sw		r1,OutputVec
010230 3B FF 11 00 	    rts
 
                	SetupIntVectors:
010234 02 00 14 3C 		mtspr   vbr,r0               ; place vector table at $0000
010238 3F 00 00 00 		nop
01023C 3F 00 00 00 		nop
010240 02 20 14 3E 		mfspr   r2,vbr
010244 7C 01 00 00 		ldi     r1,#UninitIRQ
010248 0A 10 58 55 
01024C 0A 30 FE 03 		ldi     r3,#511
                	.0001:
010250 6B 11 C6 00 		sw      r1,[r2+r3*8]
010254 95 31 02 00 		subui   r3,r3,#1
010258 BD 31 FC FF 		bge     r3,.0001
01025C 7C 01 00 00 		ldi     r1,#BIOSCall
010260 0A 10 68 24 
010264 63 11 A0 00 		sw      r1,10*8[r2]
010268 7C 01 00 00 		ldi     r1,#VideoBIOSCall
01026C 0A 10 70 10 
010270 63 11 A0 19 		sw      r1,410*8[r2]
010274 7C 01 00 00 		ldi		r1,#Tick1024Rout
010278 0A 10 D8 26 
01027C 63 11 20 1C 		sw		r1,450*8[r2]
010280 7C 01 00 00 		ldi		r1,#TickRout         ; This vector will be taken over by FMTK
010284 0A 10 10 26 
010288 63 11 30 1C 		sw		r1,451*8[r2]
01028C 7C 01 00 00 		ldi     r1,#SerialIRQ
010290 0A 10 38 0D 
010294 63 11 80 1C 		sw      r1,456*8[r2]
010298 7C 00 00 00 		ldi     r1,#ServiceRequestIRQ
01029C 7C 00 00 00 
0102A0 0A 10 04 02 
0102A4 63 11 90 1C 		sw      r1,457*8[r2]
0102A8 7C 01 00 00 		ldi		r1,#KeybdIRQ
0102AC 0A 10 30 42 
0102B0 63 11 F0 1C 		sw		r1,463*8[r2]
0102B4 7C 01 00 00 	    ldi     r1,#SSM_ISR          ; set ISR vector for single step routine
0102B8 0A 10 38 56 
0102BC 63 11 F0 1E 	    sw      r1,495*8[r2]
0102C0 7C 01 00 00 	    ldi     r1,#BPT_ISR          ; set ISR vector for breakpoint routine
0102C4 0A 10 40 56 
0102C8 63 11 00 1F 	    sw      r1,496*8[r2]
0102CC 7C 01 00 00 		ldi		r1,#exf_rout
0102D0 0A 10 78 53 
0102D4 63 11 10 1F 		sw		r1,497*8[r2]
0102D8 7C 01 00 00 		ldi		r1,#dwf_rout
0102DC 0A 10 E8 53 
0102E0 63 11 20 1F 		sw		r1,498*8[r2]
0102E4 7C 01 00 00 		ldi		r1,#drf_rout
0102E8 0A 10 B0 53 
0102EC 63 11 30 1F 		sw		r1,499*8[r2]
0102F0 7C 01 00 00 		ldi		r1,#priv_rout
0102F4 0A 10 20 54 
0102F8 63 11 50 1F 		sw		r1,501*8[r2]
0102FC 7C 01 00 00 		ldi		r1,#berr_rout
010300 0A 10 78 55 
010304 63 11 C0 1F 		sw		r1,508*8[r2]
010308 7C 01 00 00 		ldi		r1,#berr_rout
01030C 0A 10 78 55 
010310 63 11 D0 1F 		sw		r1,509*8[r2]
010314 7C 01 00 00 		ldi		r1,#nmi_rout
010318 0A 10 08 53 
01031C 63 11 E0 1F 		sw		r1,510*8[r2]
010320 37 FF 01 00 	    rtl
 
                	; Setup interrupt vector table for processor #1
                	SetupIntVectors1:
010324 02 00 14 3C 		mtspr   vbr,r0               ; place vector table at $0000
010328 3F 00 00 00 		nop
01032C 3F 00 00 00 		nop
010330 02 20 14 3E 		mfspr   r2,vbr
010334 7C 01 00 00 		ldi     r1,#UninitIRQ
010338 0A 10 58 55 
01033C 0A 30 FE 03 		ldi     r3,#511
                	.0001:
010340 6B 11 C6 00 		sw      r1,[r2+r3*8]
010344 95 31 02 00 		subui   r3,r3,#1
010348 BD 31 FC FF 		bge     r3,.0001
01034C 7C 01 00 00 		ldi     r1,#BIOSCall1
010350 0A 10 F8 22 
010354 63 11 A0 00 		sw      r1,10*8[r2]
010358 7C 01 00 00 		ldi		r1,#TickRout         ; This vector will be taken over by FMTK
01035C 0A 10 10 26 
010360 63 11 30 1C 		sw		r1,451*8[r2]
010364 7C 00 00 00 		ldi     r1,#ServiceRequestIRQ
010368 7C 00 00 00 
01036C 0A 10 04 02 
010370 63 11 90 1C 		sw      r1,457*8[r2]
010374 7C 01 00 00 	    ldi     r1,#SSM_ISR          ; set ISR vector for single step routine
010378 0A 10 38 56 
01037C 63 11 F0 1E 	    sw      r1,495*8[r2]
010380 7C 01 00 00 	    ldi     r1,#BPT_ISR          ; set ISR vector for instruction breakpoint routine
010384 0A 10 40 56 
010388 63 11 00 1F 	    sw      r1,496*8[r2]
01038C 7C 01 00 00 		ldi		r1,#exf_rout
010390 0A 10 78 53 
010394 63 11 10 1F 		sw		r1,497*8[r2]
010398 7C 01 00 00 		ldi		r1,#dwf_rout
01039C 0A 10 E8 53 
0103A0 63 11 20 1F 		sw		r1,498*8[r2]
0103A4 7C 01 00 00 		ldi		r1,#drf_rout
0103A8 0A 10 B0 53 
0103AC 63 11 30 1F 		sw		r1,499*8[r2]
0103B0 7C 01 00 00 		ldi		r1,#priv_rout
0103B4 0A 10 20 54 
0103B8 63 11 50 1F 		sw		r1,501*8[r2]
0103BC 7C 01 00 00 		ldi		r1,#berr_rout
0103C0 0A 10 78 55 
0103C4 63 11 C0 1F 		sw		r1,508*8[r2]
0103C8 7C 01 00 00 		ldi		r1,#berr_rout
0103CC 0A 10 78 55 
0103D0 63 11 D0 1F 		sw		r1,509*8[r2]
0103D4 7C 01 00 00 		ldi		r1,#nmi_rout1
0103D8 0A 10 50 53 
0103DC 63 11 E0 1F 		sw		r1,510*8[r2]
0103E0 37 FF 01 00 	    rtl
 
                	;------------------------------------------------------------------------------
                	; Initialize the interrupt controller.
                	;------------------------------------------------------------------------------
                	
                	InitPIC:
0103E4 0A 10 18 00 		ldi		r1,#$000C		; timer interrupt(s) are edge sensitive
0103E8 7C DC FF 00 		sh		r1,PIC_ES
0103EC 62 10 A0 1F 
0103F0 0A 10 1E 00 		ldi		r1,#$000F		; enable keyboard reset, timer interrupts
0103F4 7C DC FF 00 		sh		r1,PIC_IE
0103F8 62 10 88 1F 
0103FC 37 FF 01 00 		rtl

                	; For CPU #1 the only interrupt to be serviced is the 30Hz time slice.
                	
                	InitPIC1:
010400 0A 10 18 00 		ldi		r1,#$000C		; timer interrupt(s) are edge sensitive
010404 7C DC FF 00 		sh		r1,PIC_ES
010408 62 10 A0 1F 
01040C 0A 10 16 00 		ldi		r1,#$000B		; enable keyboard reset, timer interrupts
010410 7C DC FF 00 		sh		r1,PIC_IE
010414 62 10 88 1F 
010418 37 FF 01 00 		rtl

                	
                	;==============================================================================
                	; Serial port
                	;==============================================================================
                		code
                	;------------------------------------------------------------------------------
                	; Initialize UART
                	;------------------------------------------------------------------------------
                	
                	InitUart:
01041C 7C DC FF 00 	    ldi     r2,#UART
010420 0A 20 00 14 
                	;    ldi     r1,#$025BF7BA   ; constant for clock multiplier with 16.667MHz clock for 9600 baud
010424 FC 27 0E 00 	    ldi     r1,#$0E27CE61   ; constant for clock multiplier with 16.667MHz clock for 57600 baud
010428 0A 10 C2 9C 
01042C 82 10 10 72 	    lsr     r1,r1,#8          ; drop the LSB (not used)
010430 60 11 12 00 	    sb      r1,UART_CM1[r2]
010434 82 10 10 72 	    lsr     r1,r1,#8
010438 60 11 14 00 	    sb      r1,UART_CM2[r2]
01043C 82 10 10 72 	    lsr     r1,r1,#8
010440 60 11 16 00 	    sb      r1,UART_CM3[r2]
010444 60 01 0E 00 	    sb      r0,UART_CTRL[r2]           ; no hardware flow control
010448 61 00 CC 22 		sc		r0,Uart_rxhead			; reset buffer indexes
01044C 61 00 D0 22 		sc		r0,Uart_rxtail
010450 0A 10 E0 03 		ldi		r1,#0x1f0
010454 61 10 DC 22 		sc		r1,Uart_foff		; set threshold for XOFF
010458 0A 10 20 00 		ldi		r1,#0x010
01045C 61 10 E0 22 		sc		r1,Uart_fon			; set threshold for XON
010460 0A 10 02 00 		ldi		r1,#1
010464 60 11 08 00 		sb		r1,UART_IE[r2]		; enable receive interrupt only
010468 60 00 D6 22 		sb		r0,Uart_rxrts		; no RTS/CTS signals available
01046C 60 00 E4 22 		sb		r0,Uart_txrts		; no RTS/CTS signals available
010470 60 00 E6 22 		sb		r0,Uart_txdtr		; no DTR signals available
010474 60 00 D8 22 		sb		r0,Uart_rxdtr		; no DTR signals available
010478 0A 10 02 00 		ldi		r1,#1
01047C 60 10 E8 22 		sb		r1,Uart_txxon		; for now
010480 0A 10 02 00 		ldi		r1,#1
                	;	sb		r1,SERIAL_SEMA
010484 37 FF 01 00 	    rtl

                	;---------------------------------------------------------------------------------
                	; Get character directly from serial port. Blocks until a character is available.
                	;---------------------------------------------------------------------------------
                	;
                	SerialGetCharDirect:
                	sgc1:
010488 7C DC FF 00 		lb		r1,UART+UART_LS	; uart status
01048C 40 10 02 14 
010490 8C 10 02 00 		and		r1,r1,#1		; is there a char available ?
010494 BD 00 FA FF 		beq		r1,sgc1
010498 7C DC FF 00 		lb		r1,UART+UART_RX
01049C 40 10 00 14 
0104A0 37 FF 01 00 		rtl

                	;------------------------------------------------
                	; Check for a character at the serial port
                	; returns r1 = 1 if char available, 0 otherwise
                	;------------------------------------------------
                	;
                	SerialCheckForCharDirect:
0104A4 7C DC FF 00 		lb		r1,UART+UART_LS			; uart status
0104A8 40 10 02 14 
0104AC 8C 10 02 00 		and		r1,r1,#rxfull			; is there a char available ?
0104B0 37 FF 01 00 		rtl

                	;-----------------------------------------
                	; Put character to serial port
                	; r1 = char to put
                	;-----------------------------------------
                	;
                	SerialPutChar:
0104B4 67 E1 01 00 	    push    r2
0104B8 E7 E1 01 00 	    push    r3
0104BC 67 E2 01 00 		push	r4
0104C0 E7 E2 01 00 		push	r5
0104C4 67 E3 01 00 	    push    r6
0104C8 7C DC FF 00 	    ldi     r6,#UART
0104CC 0A 60 00 14 
0104D0 40 23 0C 00 		lb		r2,UART_MC[r6]
0104D4 0D 21 06 00 		or		r2,r2,#3		; assert DTR / RTS
0104D8 60 23 0C 00 		sb		r2,UART_MC[r6]
0104DC 40 20 E4 22 		lb		r2,Uart_txrts
0104E0 3D 01 1A 00 		beq		r2,spcb1
0104E4 46 40 00 22 		lw		r4,Milliseconds
0104E8 0A 30 00 08 		ldi		r3,#1024		; delay count (1 s)
                	spcb3:
0104EC 40 23 04 00 		lb		r2,UART_MS[r6]
0104F0 0C 21 20 00 		and		r2,r2,#$10		; is CTS asserted ?
0104F4 3D 11 10 00 		bne		r2,spcb1
0104F8 46 50 00 22 		lw		r5,Milliseconds
0104FC 02 22 0A 0C 		cmp		r2,r4,r5
010500 3D 01 F6 FF 		beq		r2,spcb3
010504 82 42 00 1A 		mov		r4,r5
010508 95 31 02 00 		subui   r3,r3,#1
01050C BD 11 F0 FF 		bne		r3,spcb3
010510 BA 11 00 00 		bra		spcabort
                	spcb1:
010514 40 20 E6 22 		lb		r2,Uart_txdtr
010518 3D 01 1A 00 		beq		r2,spcb2
01051C 46 40 00 22 		lw		r4,Milliseconds
010520 0A 30 00 08 		ldi		r3,#1024		; delay count
                	spcb4:
010524 40 23 04 00 		lb		r2,UART_MS[r6]
010528 0C 21 40 00 		and		r2,r2,#$20		; is DSR asserted ?
01052C 3D 11 10 00 		bne		r2,spcb2
010530 46 50 00 22 		lw		r5,Milliseconds
010534 02 22 0A 0C 		cmp		r2,r4,r5
010538 3D 01 F6 FF 		beq		r2,spcb4
01053C 82 42 00 1A 		mov		r4,r5
010540 95 31 02 00 		subui   r3,r3,#1
010544 BD 11 F0 FF 		bne		r3,spcb4
010548 BA 0A 00 00 		bra		spcabort
                	spcb2:	
01054C 40 20 E8 22 		lb		r2,Uart_txxon
010550 3D 01 0C 00 		beq		r2,spcb5
                	spcb6:
010554 40 20 CA 22 		lb		r2,Uart_txxonoff
010558 3D 01 08 00 		beq		r2,spcb5
01055C 40 43 04 00 		lb		r4,UART_MS[r6]
010560 0C 42 00 01 		and		r4,r4,#0x80			; DCD ?
010564 3D 12 F8 FF 		bne		r4,spcb6
                	spcb5:
010568 46 40 00 22 		lw		r4,Milliseconds
01056C 0A 30 00 08 		ldi		r3,#1024			; wait up to 1s
                	spcb8:
010570 40 23 02 00 		lb		r2,UART_LS[r6]
010574 0C 21 40 00 		and		r2,r2,#0x20			; tx not full ?
010578 3D 11 10 00 		bne		r2,spcb7
01057C 46 50 00 22 		lw		r5,Milliseconds
010580 02 22 0A 0C 		cmp		r2,r4,r5
010584 3D 01 F6 FF 		beq		r2,spcb8
010588 82 42 00 1A 		mov		r4,r5
01058C 95 31 02 00 		subui   r3,r3,#1
010590 BD 11 F0 FF 		bne		r3,spcb8
010594 3A 01 00 00 		bra		spcabort
                	spcb7:
010598 60 13 00 00 		sb		r1,UART_TX[r6]
                	spcabort:
01059C 57 6F 10 00 	    pop     r6
0105A0 57 5F 10 00 		pop		r5
0105A4 57 4F 10 00 		pop		r4
0105A8 57 3F 10 00 		pop     r3
0105AC 57 2F 10 00 		pop     r2
0105B0 37 FF 01 00 		rtl

                	
                	;-------------------------------------------------
                	; Compute number of characters in recieve buffer.
                	; r4 = number of chars
                	;-------------------------------------------------
                	CharsInRxBuf:
0105B4 43 40 CC 22 		lcu		r4,Uart_rxhead
0105B8 43 30 D0 22 		lcu		r3,Uart_rxtail
0105BC 02 42 06 2A 		subu	r4,r4,r3
0105C0 3D 22 0A 00 		bgt		r4,cirxb1
0105C4 0A 40 00 04 		ldi		r4,#0x200
0105C8 02 42 06 28 		addu	r4,r4,r3
0105CC 43 30 CC 22 		lcu		r3,Uart_rxhead
0105D0 02 42 06 2A 		subu	r4,r4,r3
                	cirxb1:
0105D4 37 FF 01 00 		rtl

                	;----------------------------------------------
                	; Get character from rx fifo
                	; If the fifo is empty enough then send an XON
                	;----------------------------------------------
                	;
                	SerialGetChar:
0105D8 67 E1 01 00 	    push    r2
0105DC E7 E1 01 00 	    push    r3
0105E0 67 E2 01 00 		push	r4
0105E4 E7 E2 01 00 	    push    r5
0105E8 7C DC FF 00 	    ldi     r5,#UART
0105EC 0A 50 00 14 
0105F0 43 30 CC 22 		lcu		r3,Uart_rxhead
0105F4 43 20 D0 22 		lcu		r2,Uart_rxtail
0105F8 02 31 06 0C 		cmp		r3,r2,r3
0105FC BD 01 44 00 		beq		r3,sgcfifo1		    ; is there a char available ?
010600 41 11 EA 22 		lbu		r1,Uart_rxfifo[r2]	; get the char from the fifo into r1
010604 14 21 02 00 		addui   r2,r2,#1    		; increment the fifo pointer
010608 0C 21 FE 03 		and		r2,r2,#$1ff
01060C 61 20 D0 22 		sc		r2,Uart_rxtail
010610 40 20 D4 22 		lb		r2,Uart_rxflow		; using flow control ?
010614 3D 01 2E 00 		beq		r2,sgcfifo2
010618 43 30 E0 22 		lcu		r3,Uart_fon		; enough space in Rx buffer ?
01061C E7 EF 01 00 		push    lr
010620 B9 F2 FF FF 		bsr		CharsInRxBuf
010624 57 FF 11 00 		pop     lr
010628 02 42 06 0C 		cmp		r4,r4,r3
01062C 3D 22 22 00 		bgt		r4,sgcfifo2
010630 60 00 D4 22 		sb		r0,Uart_rxflow		; flow off
010634 40 40 D6 22 		lb		r4,Uart_rxrts
010638 3D 02 08 00 		beq		r4,sgcfifo3
01063C C0 42 0C 00 		lb		r4,UART_MC[r5]		; set rts bit in MC
010640 0D 42 04 00 		or		r4,r4,#2
010644 E0 42 0C 00 		sb		r4,UART_MC[r5]
                	sgcfifo3:
010648 40 40 D8 22 		lb		r4,Uart_rxdtr
01064C 3D 02 08 00 		beq		r4,sgcfifo4
010650 C0 42 0C 00 		lb		r4,UART_MC[r5]		; set DTR
010654 0D 42 02 00 		or		r4,r4,#1
010658 E0 42 0C 00 		sb		r4,UART_MC[r5]
                	sgcfifo4:
01065C 40 40 DA 22 		lb		r4,Uart_rxxon
010660 3D 02 08 00 		beq		r4,sgcfifo5
010664 0A 40 22 00 		ldi		r4,#XON
010668 7C DC FF 00 		sb		r4,UART[r5]
01066C E0 42 00 14 
                	sgcfifo5:
                	sgcfifo2:					; return with char in r1
010670 57 5F 10 00 	    pop     r5
010674 57 4F 10 00 		pop		r4
010678 57 3F 10 00 		pop     r3
01067C 57 2F 10 00 		pop     r2
010680 37 FF 01 00 		rtl
sgcfifo1:
010684 0A 10 FE FF 		ldi		r1,#-1				; no char available
010688 57 5F 10 00 		pop     r5
01068C 57 4F 10 00 		pop		r4
010690 57 3F 10 00 		pop     r3
010694 57 2F 10 00 		pop     r2
010698 3B FF 11 00 		rts

                	
                	;-----------------------------------------
                	; Serial port IRQ
                	;-----------------------------------------
                	;
                	SerialIRQ:
01069C FC 00 00 00 	    ldi     sp,#CPU0_IRQ_STACK
0106A0 0A E0 01 10 
0106A4 E7 E0 01 00 		push    r1
0106A8 67 E1 01 00 		push    r2
0106AC E7 E1 01 00 		push    r3
0106B0 67 E2 01 00 		push	r4
                	
0106B4 7C DC FF 00 	    ldi     r2,#UART
0106B8 0A 20 00 14 
0106BC 40 11 06 00 	    lb      r1,UART_IS[r2]  ; get interrupt status
0106C0 BD 20 10 00 		bgt		r1,sirq1		; no interrupt
0106C4 8C 10 FE 00 		and		r1,r1,#0x7f  	; switch on interrupt type
0106C8 86 30 08 00 		cmp		r3,r1,#4
0106CC BD 01 1C 00 		beq		r3,srxirq
0106D0 86 30 18 00 		cmp		r3,r1,#$0C
0106D4 BD 01 16 00 		beq		r3,stxirq
0106D8 86 30 20 00 		cmp		r3,r1,#$10
0106DC BD 01 0C 00 		beq		r3,smsirq
                		; unknown IRQ type
                	sirq1:
0106E0 57 4F 10 00 		pop		r4
0106E4 57 3F 10 00 		pop     r3
0106E8 57 2F 10 00 		pop     r2
0106EC 57 1F 10 00 		pop     r1
0106F0 02 E0 3F 6E 		rti
                	
                	; Get the modem status and record it
                	smsirq:
0106F4 41 11 04 00 	    lbu     r1,UART_MS[r2]
0106F8 60 10 C8 22 		sb      r1,Uart_ms
0106FC BA FC FF FF 		bra		sirq1
                	
                	stxirq:
010700 3A FC FF FF 		bra		sirq1
                	
                	; Get a character from the uart and store it in the rx fifo
                	srxirq:
                	srxirq1:
010704 41 11 00 00 	    lbu     r1,UART_RX[r2]      ; get the char (clears interrupt)
010708 41 30 E8 22 	    lbu     r3,Uart_txxon
01070C BD 01 14 00 		beq		r3,srxirq3
010710 86 40 26 00 		cmp		r4,r1,#XOFF
010714 3D 12 08 00 		bne		r4,srxirq2
010718 0A 10 02 00 		ldi     r1,#1
01071C 60 10 CA 22 		sb		r1,Uart_txxonoff
010720 BA 05 00 00 		bra		srxirq5
                	srxirq2:
010724 86 40 22 00 		cmp		r4,r1,#XON
010728 3D 12 06 00 		bne		r4,srxirq3
01072C 60 00 CA 22 		sb		r0,Uart_txxonoff
010730 BA 03 00 00 		bra		srxirq5
                	srxirq3:
010734 60 00 CA 22 		sb		r0,Uart_txxonoff
010738 43 40 CC 22 		lcu		r4,Uart_rxhead
01073C 60 12 EA 22 		sb		r1,Uart_rxfifo[r4]  ; store in buffer
010740 14 42 02 00 		addui   r4,r4,#1
010744 0C 42 FE 03 		and		r4,r4,#$1ff
010748 61 40 CC 22 		sc		r4,Uart_rxhead
                	srxirq5:
01074C 40 11 02 00 	    lb      r1,UART_LS[r2]      ; check for another ready character
010750 8C 10 02 00 		and		r1,r1,#1            ; check rxfull bit
010754 BD 10 D8 FF 		bne		r1,srxirq1          ; loop back for another character
010758 40 10 D4 22 		lb		r1,Uart_rxflow		; are we using flow controls?
01075C BD 10 2E 00 		bne		r1,srxirq8
010760 E7 EF 01 00 		push    lr
010764 39 CA FF FF 		bsr		CharsInRxBuf
010768 57 FF 11 00 		pop     lr
01076C 40 10 DC 22 		lb		r1,Uart_foff
010770 02 12 02 0C 		cmp		r1,r4,r1
010774 BD 40 22 00 		blt		r1,srxirq8
010778 0A 10 02 00 		ldi		r1,#1
01077C 60 10 D4 22 		sb		r1,Uart_rxflow
010780 40 10 D6 22 		lb		r1,Uart_rxrts
010784 BD 00 08 00 		beq		r1,srxirq6
010788 40 11 0C 00 		lb		r1,UART_MC[r2]
01078C 8C 10 FA 01 		and		r1,r1,#$FD		; turn off RTS
010790 60 11 0C 00 		sb		r1,UART_MC[r2]
                	srxirq6:
010794 40 10 D8 22 		lb		r1,Uart_rxdtr
010798 BD 00 08 00 		beq		r1,srxirq7
01079C 40 11 0C 00 		lb		r1,UART_MC[r2]
0107A0 8C 10 FC 01 		and		r1,r1,#$FE		; turn off DTR
0107A4 60 11 0C 00 		sb		r1,UART_MC[r2]
                	srxirq7:
0107A8 40 10 DA 22 		lb		r1,Uart_rxxon
0107AC BD 00 06 00 		beq		r1,srxirq8
0107B0 0A 10 26 00 		ldi		r1,#XOFF
0107B4 60 11 00 00 		sb		r1,UART_TX[r2]
                	srxirq8:
0107B8 3A E5 FF FF 		bra		sirq1
                	
                	
                	;------------------------------------------------------------------------------
                	; Video BIOS
                	; Video Exception #410
                	;
                	; Function in R6
                	; 0x02 = Set Cursor Position	r1 = row, r2 = col 
                	; 0x03 = Get Cursor position	returns r1 = row, r2 = col
                	; 0x06 = Scroll screen up
                	; 0x09 = Display character+attribute, r1=char, r2=attrib, r3=#times
                	; 0x0A = Display character at cursor position, r1 = char, r2 = # times
                	; 0x0B = Set background color, r1 = color
                	; 0x0C = Display Pixel r1 = x, r2 = y, r3 = color
                	; 0x0D = Get pixel  r1 = x, r2 = y
                	; 0x0E = Teletype output, r1 = char
                	; 0x14 = Display String	r1 = pointer to string
                	; 0x15 = Display number r1 = number, r2 = # digits
                	; 0x16 = Display String + CRLF   r1 = pointer to string
                	; 0x17 = Display Word r1 as hex = word
                	; 0x18 = Display Half word as hex r1 = half word
                	; 0x19 = Display Charr char in hex r1 = char
                	; 0x1A = Display Byte in hex r1 = byte
                	; 0x1B = Display String -wide characters r1=pointer to string
                	; 0x1C = Display hexidecimal number, r1 = number, r2 = # of digits
                	; 0x20 = Convert ascii to screen
                	; 0x21 = Convert screen to ascii
                	;------------------------------------------------------------------------------
                	
                	MAX_VIDEO_BIOS_CALL = 0x21
                	
                	    code
                	    align   2                	
                	VideoBIOS_FuncTable:
0107BC 00 00       	    dc      0            ; 0x00
0107BE 00 00       	    dc      0
0107C0 2C 10       	    dc      SetCursorPos ; 0x02
0107C2 54 10       	    dc      GetCursorPos ; 0x03
0107C4 00 00       	    dc      0
0107C6 00 00       	    dc      0
0107C8 C0 0E       	    dc      ScrollUp     ; 0x06
0107CA 00 00       	    dc      0
0107CC 00 00       	    dc      0
0107CE 9C 08       	    dc      DispCharAttr ; 0x09
0107D0 00 00       	    dc      0
0107D2 43 01       	    dc      SetBkColor   ; 0x0B
0107D4 44 01       	    dc      SetPixel     ; 0x0C
0107D6 45 01       	    dc      GetPixel     ; 0x0D
0107D8 5C 0C       	    dc      DisplayChar  ; 0x0E
0107DA 00 00       	    dc      0
0107DC 00 00       	    dc      0
0107DE 00 00       	    dc      0
0107E0 00 00       	    dc      0
0107E2 00 00       	    dc      0
0107E4 0C 0A       	    dc      DisplayString  ; 0x14
0107E6 C8 0A       	    dc      PRTNUM         ; 0x15
0107E8 88 0A       	    dc      DisplayStringCRLF    ; 0x16
0107EA 8C 09       	    dc      DisplayWord    ; 0x17
0107EC A0 09       	    dc      DisplayHalf    ; 0x18
0107EE B4 09       	    dc      DisplayCharHex ; 0x19
0107F0 C8 09       	    dc      DisplayByte    ; 0x1A
0107F2 3C 0A       	    dc      DisplayString16  ; 0x1B
0107F4 00 00       	    dc      0
0107F6 00 00       	    dc      0
0107F8 00 00       	    dc      0
0107FA 00 00       	    dc      0
0107FC AC 0F       	    dc      AsciiToScreen    ; 0x20
0107FE F4 0F       	    dc      ScreenToAscii    ; 0x21
                	    
                	    
                	    
                	                    
                	    align   4                	
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	LockVideoBIOS:
010800 E7 EF 01 00 	    push    lr
010804 E7 E0 01 00 	    push    r1
010808 FC 00 00 00 	    ldi     r1,#VideoBIOS_sema
01080C 0A 10 10 A8 
010810 39 A7 07 00 	    bsr     LockSema
010814 57 1F 10 00 	    pop     r1
010818 3B FF 11 00 	    rts
UnlockVideoBIOS:
01081C E7 EF 01 00 	    push    lr
010820 E7 E0 01 00 	    push    r1
010824 FC 00 00 00 	    lea     r1,VideoBIOS_sema
010828 47 10 10 A8 
01082C B9 AA 07 00 	    bsr     UnlockSema
010830 57 1F 10 00 	    pop     r1
010834 3B FF 11 00 	    rts

                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	VideoBIOSCall:
010838 46 EC 11 05 	    lw      sp,TCB_BIOS_Stack[tr]
01083C E7 EF 01 00 	    push    lr
010840 39 F8 FF FF 	    bsr     LockVideoBIOS
010844 67 E5 01 00 	    push    r10
010848 02 A0 12 3E 	    mfspr   r10,epc             ; update the return address
01084C 14 A5 08 00 	    addui   r10,r10,#4
010850 02 05 12 3C 	    mtspr   epc,r10
010854 06 A3 42 00 	    cmp     r10,r6,#MAX_VIDEO_BIOS_CALL
010858 3D 25 1A 00 	    bgt     r10,.0003
01085C 7C 01 00 00 	    lea     r10,VideoBIOS_FuncTable
010860 47 A0 78 0F 
010864 4B A5 4C 00 	    lcu     r10,[r10+r6*2]
010868 3D 05 16 00 	    beq     r10,.0005
01086C 7C 01 00 00 	    or      r10,r10,#VideoBIOSCall & 0xFFFFFFFFFFFF0000    ; recover high order bits
010870 0D A5 00 00 
010874 3C F5 01 00 	    jsr     [r10]
                	.0004:
010878 3F 00 00 00 	    nop
01087C 39 F4 FF FF 	    bsr     UnlockVideoBIOS
010880 57 AF 10 00 	    pop     r10
010884 57 FF 11 00 	    pop     lr
010888 02 E0 3D 6E 	    rte
                	.0003:
01088C 0A 20 02 00 	    ldi     r2,#E_BadFuncno
010890 3A FD FF FF 	    bra     .0004
                	.0005:
010894 0A 20 06 00 	    ldi     r2,#E_Unsupported
010898 3A FC FF FF 	    bra     .0004
                	
                	;------------------------------------------------------------------------------
                	; Display a character with a specific attribute.
                	;------------------------------------------------------------------------------
                	
                	DispCharAttr:
01089C E7 EF 01 00 	    push    lr
0108A0 E7 E1 01 00 	    push    r3
0108A4 67 E2 01 00 	    push    r4
0108A8 E7 E2 01 00 	    push    r5
0108AC 82 40 00 1A 	    mov     r4,r1
0108B0 B9 09 01 00 	    bsr     GetJCBPtr
0108B4 82 50 00 1A 	    mov     r5,r1
0108B8 C4 32 28 08 	    lh      r3,JCB_NormAttr[r5]
0108BC E7 E1 01 00 	    push    r3
0108C0 E2 22 28 08 	    sh      r2,JCB_NormAttr[r5]
0108C4 02 12 00 1A 	    mov     r1,r4
0108C8 B9 A7 01 00 	    bsr     OutChar
0108CC 57 3F 10 00 	    pop     r3
0108D0 E2 32 28 08 	    sh      r3,JCB_NormAttr[r5]    ; restore normal attribute
0108D4 57 5F 10 00 	    pop     r5
0108D8 57 4F 10 00 	    pop     r4
0108DC 57 3F 10 00 	    pop     r3
0108E0 3B FF 11 00 	    rts

                	
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	                                                                               
                	HomeCursor:
0108E4 E7 EF 01 00 	    push    lr
0108E8 E7 E0 01 00 	    push    r1
0108EC 67 E1 01 00 	    push    r2
0108F0 B9 01 01 00 	    bsr     GetJCBPtr
0108F4 E0 00 18 08 	    sb      r0,JCB_CursorRow[r1]
0108F8 E0 00 1A 08 	    sb      r0,JCB_CursorCol[r1]
0108FC 7C C0 00 00 	    lw      r2,IOFocusNdx
010900 46 20 50 00 
010904 82 10 04 0C 	    cmp     r1,r1,r2
010908 BD 10 06 00 	    bne     r1,.0001
01090C 7C DA FF 00 		sc	    r0,TEXTREG+TEXT_CURPOS+$FFD00000
010910 61 00 58 00 
                	.0001:
010914 57 2F 10 00 	    pop     r2
010918 57 1F 10 00 	    pop     r1
01091C 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	                                                                               
                	ClearScreen:
010920 E7 EF 01 00 	    push    lr
010924 E7 E0 01 00 	    push	r1
010928 67 E1 01 00 	    push    r2
01092C E7 E1 01 00 	    push    r3
010930 67 E2 01 00 	    push    r4
010934 7C DA FF 00 		lbu	    r1,TEXTREG+TEXT_COLS+$FFD00000
010938 41 10 00 00 
01093C 7C DA FF 00 		lbu	    r2,TEXTREG+TEXT_ROWS+$FFD00000
010940 41 20 08 00 
010944 02 41 02 2E 		mulu	r4,r2,r1
010948 B9 41 00 00 		bsr     GetScreenLocation
01094C 82 30 00 1A 		mov     r3,r1
010950 0A 10 40 00 		ldi		r1,#' '
010954 39 CB 00 00 		bsr		AsciiToScreen
010958 E7 E0 01 00 		push    r1
01095C 39 41 00 00 		bsr     GetCurrAttr
010960 82 20 00 1A 		mov     r2,r1
010964 57 1F 10 00 		pop     r1
010968 82 10 04 1A 		or		r1,r1,r2
                	.cs1:
01096C EA 11 88 00 	    sh	    r1,[r3+r4*4]
010970 15 42 02 00 	    subui   r4,r4,#1
010974 3D 12 FC FF 		bne	    r4,.cs1
010978 57 4F 10 00 		pop     r4
01097C 57 3F 10 00 		pop     r3
010980 57 2F 10 00 		pop     r2
010984 57 1F 10 00 		pop     r1
010988 3B FF 11 00 	    rts

                	;------------------------------------------------------------------------------
                	; Display the word in r1
                	;------------------------------------------------------------------------------
                	
                	DisplayWord:
01098C E7 EF 01 00 	    push    lr
010990 82 10 40 74 		rol	    r1,r1,#32
010994 B9 01 00 00 		bsr		DisplayHalf
010998 82 10 40 74 		rol	    r1,r1,#32
01099C 57 FF 11 00 	    pop     lr
                	
                	;------------------------------------------------------------------------------
                	; Display the half-word in r1
                	;------------------------------------------------------------------------------
                	
                	DisplayHalf:
0109A0 E7 EF 01 00 	    push    lr
0109A4 82 10 20 76 		ror		r1,r1,#16
0109A8 B9 01 00 00 		bsr		DisplayCharHex
0109AC 82 10 20 74 		rol		r1,r1,#16
0109B0 57 FF 11 00 	    pop     lr
                	
                	;------------------------------------------------------------------------------
                	; Display the char in r1
                	;------------------------------------------------------------------------------
                	
                	DisplayCharHex:
0109B4 E7 EF 01 00 	    push    lr
0109B8 82 10 10 76 		ror		r1,r1,#8
0109BC B9 01 00 00 		bsr		DisplayByte
0109C0 82 10 10 74 		rol		r1,r1,#8
0109C4 57 FF 11 00 	    pop     lr
                	
                	;------------------------------------------------------------------------------
                	; Display the byte in r1
                	;------------------------------------------------------------------------------
                	
                	DisplayByte:
0109C8 E7 EF 01 00 	    push    lr
0109CC 82 10 08 76 		ror		r1,r1,#4
0109D0 B9 01 00 00 		bsr		DisplayNybble
0109D4 82 10 08 74 		rol		r1,r1,#4
0109D8 57 FF 11 00 		pop     lr
                	 
                	;------------------------------------------------------------------------------
                	; Display nybble in r1
                	;------------------------------------------------------------------------------
                	
                	DisplayNybble:
0109DC E7 EF 01 00 	    push    lr
0109E0 E7 E0 01 00 		push	r1
0109E4 67 E1 01 00 		push    r2
0109E8 8C 10 1E 00 		and		r1,r1,#$0F
0109EC 94 10 60 00 		addui	r1,r1,#'0'
0109F0 96 20 74 00 		cmpu	r2,r1,#'9'+1
0109F4 3D 41 04 00 		blt		r2,.0001
0109F8 94 10 0E 00 		addui	r1,r1,#7
                	.0001:
0109FC 39 81 01 00 		bsr		OutChar
010A00 57 2F 10 00 		pop     r2
010A04 57 1F 10 00 		pop		r1
010A08 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Display a string pointer to string in r1.
                	;------------------------------------------------------------------------------
                	
                	DisplayString:
010A0C E7 EF 01 00 	    push    lr
010A10 E7 E0 01 00 		push	r1
010A14 67 E1 01 00 		push    r2
010A18 82 20 00 1A 		mov		r2,r1
                	.dm2:
010A1C 41 11 00 00 		lbu		r1,[r2]
010A20 14 21 02 00 		addui   r2,r2,#1	; increment text pointer
010A24 BD 00 06 00 		beq		r1,.dm1
010A28 B9 7B 01 00 		bsr		OutChar
010A2C 3A FE FF FF 		bra		.dm2
                	.dm1:
010A30 57 2F 10 00 		pop		r2
010A34 57 1F 10 00 	    pop     r1
010A38 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Display a string pointer to string in r1 using 16 bit characters.
                	;------------------------------------------------------------------------------
                	
                	DisplayString16:
010A3C E7 EF 01 00 	    push    lr
010A40 E7 E0 01 00 		push	r1
010A44 67 E1 01 00 		push    r2
010A48 0A 20 6E 00 		ldi     r2,#55
010A4C 7C DC FF 00 		sb      r2,LEDS
010A50 60 20 00 0C 
010A54 82 20 00 1A 		mov		r2,r1
                	.dm2:
010A58 43 11 00 00 		lcu		r1,[r2]
010A5C 14 21 04 00 		addui   r2,r2,#2	; increment text pointer
010A60 BD 00 0E 00 		beq		r1,.dm1
010A64 8C 10 FE 01 		and     r1,r1,#$FF
010A68 B9 73 01 00 		bsr		OutChar
010A6C 0A 10 70 00 		ldi     r1,#56
010A70 7C DC FF 00 		sb      r1,LEDS
010A74 60 10 00 0C 
010A78 3A FC FF FF 		bra		.dm2
                	.dm1:
010A7C 57 2F 10 00 		pop		r2
010A80 57 1F 10 00 	    pop     r1
010A84 3B FF 11 00 		rts

                	DisplayStringCRLF:
010A88 E7 EF 01 00 	    push    lr
010A8C 39 F0 FF FF 		bsr		DisplayString
010A90 3A 01 00 00 		bra     CRLF1
                	OutCRLF:
                	CRLF:
010A94 E7 EF 01 00 	    push    lr
                	CRLF1:
010A98 E7 E0 01 00 		push	r1
010A9C 0A 10 1A 00 		ldi		r1,#CR
010AA0 B9 6C 01 00 		bsr		OutChar
010AA4 0A 10 14 00 		ldi		r1,#LF
010AA8 B9 6B 01 00 		bsr		OutChar
010AAC 57 1F 10 00 		pop		r1
010AB0 3B FF 11 00 		rts

                	
                	DispCharQ:
010AB4 E7 EF 01 00 	    push    lr
010AB8 B9 9E 00 00 		bsr		AsciiToScreen
010ABC E1 11 00 00 		sc		r1,[r3]
010AC0 84 31 08 00 		add		r3,r3,#4
010AC4 3B FF 11 00 	    rts

                	;------------------------------------------------------------------------------
                	; 'PRTNUM' prints the 64 bit number in r1, leading blanks are added if
                	; needed to pad the number of spaces to the number in r2.
                	; However, if the number of digits is larger than the no. in
                	; r2, all digits are printed anyway. Negative sign is also
                	; printed and counted in, positive sign is not.
                	;
                	; r1 = number to print
                	; r2 = number of digits
                	; Register Usage
                	;	r5 = number of padding spaces
                	;------------------------------------------------------------------------------
                	PRTNUM:
010AC8 E7 EF 01 00 	    push    lr
010ACC E7 E1 01 00 		push	r3
010AD0 E7 E2 01 00 		push	r5
010AD4 67 E3 01 00 		push	r6
010AD8 E7 E3 01 00 		push	r7
010ADC 0A 70 78 22 		ldi		r7,#NUMWKA	; r7 = pointer to numeric work area
010AE0 82 60 00 1A 		mov		r6,r1		; save number for later
010AE4 02 51 00 1A 		mov		r5,r2		; r5 = min number of chars
010AE8 BD 30 06 00 		bge		r1,PN2			; is it negative? if not
010AEC 02 10 02 2A 		subu	r1,r0,r1	; else make it positive
010AF0 95 52 02 00 		subui   r5,r5,#1	; one less for width count
                	PN2:
                	;	ldi		r3,#10
                	PN1:
010AF4 89 20 14 00 		mod		r2,r1,#10	; r2 = r1 mod 10
010AF8 88 10 14 00 		div		r1,r1,#10	; r1 /= 10 divide by 10
010AFC 04 21 60 00 		add		r2,r2,#'0'	; convert remainder to ascii
010B00 E0 23 00 00 		sb		r2,[r7]		; and store in buffer
010B04 94 73 02 00 		addui   r7,r7,#1
010B08 95 52 02 00 		subui   r5,r5,#1	; decrement width
010B0C BD 10 F4 FF 		bne		r1,PN1
                	PN6:
010B10 BD 52 08 00 		ble		r5,PN4		; test pad count, skip padding if not needed
                	PN3:
010B14 39 BA 00 00 		bsr     DisplaySpace	; display the required leading spaces
010B18 95 52 02 00 		subui   r5,r5,#1
010B1C BD 12 FC FF 		bne		r5,PN3
                	PN4:
010B20 3D 33 06 00 		bge		r6,PN5		; is number negative?
010B24 0A 10 5A 00 		ldi		r1,#'-'		; if so, display the sign
010B28 B9 5B 01 00 		bsr		OutChar
                	PN5:
010B2C 95 73 02 00 	    subui   r7,r7,#1
010B30 C0 13 00 00 		lb		r1,[r7]		; now unstack the digits and display
010B34 39 5A 01 00 		bsr		OutChar
010B38 86 13 78 22 		cmp		r1,r7,#NUMWKA
010B3C BD 20 F8 FF 		bgt		r1,PN5
                	PNRET:
010B40 57 7F 10 00 		pop		r7
010B44 57 6F 10 00 		pop		r6
010B48 57 5F 10 00 		pop		r5
010B4C 57 3F 10 00 		pop		r3
010B50 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Returns:
                	; r1 = pointer to screen from JCB. This may be either the real screen or
                	;      the virtual screen buffer.
                	;------------------------------------------------------------------------------
                	
                	GetScreenLocation:
010B54 E7 EF 01 00 	    push    lr
010B58 B9 B4 00 00 	    bsr     GetJCBPtr
010B5C C6 10 D0 07 	    lw      r1,JCB_pVidMem[r1]
010B60 3B FF 11 00 		rts

                	GetCurrAttr:
010B64 E7 EF 01 00 	    push    lr
010B68 B9 B2 00 00 	    bsr     GetJCBPtr
010B6C C5 10 28 08 		lhu		r1,JCB_NormAttr[r1]
010B70 3B FF 11 00 		rts
SetCurrAttr:
010B74 E7 EF 01 00 	    push    lr
010B78 67 E1 01 00 	    push    r2
010B7C 82 20 00 1A 	    mov     r2,r1
010B80 B9 AF 00 00 	    bsr     GetJCBPtr
010B84 E2 20 28 08 	    sh      r2,JCB_NormAttr[r1]
010B88 57 2F 10 00 	    pop     r2
010B8C 3B FF 11 00 	    rts

                	;------------------------------------------------------------------------------
                	; Update the cursor position in the text controller.
                	;------------------------------------------------------------------------------
                	
                	UpdateCursorPos:
010B90 E7 EF 01 00 	    push    lr
010B94 E7 E0 01 00 		push	r1
010B98 67 E1 01 00 		push    r2
010B9C E7 E1 01 00 		push    r3
010BA0 67 E2 01 00 		push    r4
010BA4 39 AB 00 00 		bsr     GetJCBPtr
010BA8 7C C0 00 00 		lw      r3,IOFocusNdx
010BAC 46 30 50 00 
010BB0 82 31 02 0C 		cmp     r3,r3,r1
010BB4 BD 11 16 00 		bne     r3,.0001
010BB8 C1 30 18 08 		lbu		r3,JCB_CursorRow[r1]
010BBC 8C 31 7E 00 		and		r3,r3,#$3f
010BC0 7C DA FF 00 		lbu	    r2,TEXTREG+TEXT_COLS+$FFD00000
010BC4 41 20 00 00 
010BC8 02 21 06 2E 		mulu	r2,r2,r3
010BCC C1 30 1A 08 		lbu		r3,JCB_CursorCol[r1]
010BD0 8C 31 FE 00 		and		r3,r3,#$7f
010BD4 02 21 06 28 		addu	r2,r2,r3
010BD8 7C DA FF 00 		sc	    r2,TEXTREG+TEXT_CURPOS+$FFD00000
010BDC 61 20 58 00 
                	.0001:
010BE0 57 4F 10 00 		pop		r4
010BE4 57 3F 10 00 		pop     r3
010BE8 57 2F 10 00 	    pop     r2
010BEC 57 1F 10 00 	    pop     r1
010BF0 3B FF 11 00 	    rts
	
                	;------------------------------------------------------------------------------
                	; Compute the screen address given the cursor row and column. While we're at
                	; it update the cursor position in the text controller.
                	;------------------------------------------------------------------------------
                	
                	CalcScreenLoc:
010BF4 E7 EF 01 00 	    push    lr
010BF8 67 E1 01 00 		push	r2
010BFC E7 E1 01 00 		push    r3
010C00 67 E2 01 00 		push    r4
010C04 39 9F 00 00 		bsr     GetJCBPtr
010C08 C1 30 18 08 		lbu		r3,JCB_CursorRow[r1]
010C0C 8C 31 7E 00 		and		r3,r3,#$3f
010C10 7C DA FF 00 		lbu	    r2,TEXTREG+TEXT_COLS+$FFD00000
010C14 41 20 00 00 
010C18 02 21 06 2E 		mulu	r2,r2,r3
010C1C C1 30 1A 08 		lbu		r3,JCB_CursorCol[r1]
010C20 8C 31 FE 00 		and		r3,r3,#$7f
010C24 02 21 06 28 		addu	r2,r2,r3
010C28 7C C0 00 00 	    lw      r3,IOFocusNdx
010C2C 46 30 50 00 
010C30 82 30 06 0C 	    cmp     r3,r1,r3
010C34 BD 11 06 00 	    bne     r3,.0001
010C38 7C DA FF 00 		sc	    r2,TEXTREG+TEXT_CURPOS+$FFD00000
010C3C 61 20 58 00 
                	.0001:
010C40 B9 E2 FF FF 		bsr		GetScreenLocation
010C44 02 21 04 70 		asl		r2,r2,#2
010C48 82 10 04 28 		addu	r1,r1,r2
010C4C 57 4F 10 00 		pop		r4
010C50 57 3F 10 00 		pop     r3
010C54 57 2F 10 00 	    pop     r2
010C58 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Display a character on-screen.
                	;------------------------------------------------------------------------------
                	
                	DisplayChar:
010C5C E7 EF 01 00 	    push    lr
010C60 E7 E0 01 00 		push	r1
010C64 67 E1 01 00 	    push    r2
010C68 E7 E1 01 00 	    push    r3
010C6C 67 E2 01 00 	    push    r4
010C70 E7 E2 01 00 	    push    r5
010C74 8C 10 FE 01 		and		r1,r1,#$FF
010C78 86 20 1A 00 		cmp		r2,r1,#'\r'
010C7C 3D 01 54 00 		beq		r2,.docr
010C80 86 20 22 01 		cmp		r2,r1,#$91		; cursor right ?
010C84 3D 01 58 00 		beq		r2,.doCursorRight
010C88 86 20 20 01 		cmp		r2,r1,#$90		; cursor up ?
010C8C 3D 01 64 00 		beq		r2,.doCursorUp
010C90 86 20 26 01 		cmp		r2,r1,#$93		; cursor left ?
010C94 3D 01 6C 00 		beq		r2,.doCursorLeft
010C98 86 20 24 01 		cmp		r2,r1,#$92		; cursor down ?
010C9C 3D 01 74 00 		beq		r2,.doCursorDown
010CA0 86 20 28 01 		cmp		r2,r1,#$94		; cursor home ?
010CA4 3D 01 7E 00 		beq		r2,.doCursorHome
010CA8 86 20 32 01 		cmp		r2,r1,#$99		; delete ?
010CAC 3D 01 88 00 		beq		r2,.doDelete
010CB0 86 20 10 00 		cmp		r2,r1,#CTRLH	; backspace ?
010CB4 3D 01 8E 00 		beq		r2,.doBackspace
010CB8 86 20 14 00 		cmp		r2,r1,#'\n'	; line feed ?
010CBC 3D 01 B8 00 		beq		r2,.doLinefeed
010CC0 86 20 12 00 		cmp     r2,r1,#'\t'
010CC4 3D 01 24 00 		beq     r2,.doTab
010CC8 82 20 00 1A 		mov		r2,r1
010CCC 39 E5 FF FF 		bsr		CalcScreenLoc
010CD0 82 30 00 1A 		mov		r3,r1
010CD4 02 11 00 1A 		mov		r1,r2
010CD8 B9 5A 00 00 		bsr		AsciiToScreen
010CDC 82 20 00 1A 		mov		r2,r1
010CE0 B9 D0 FF FF 		bsr		GetCurrAttr
010CE4 82 10 04 1A 		or		r1,r1,r2
010CE8 E2 11 00 00 		sh	    r1,[r3]
010CEC 39 29 00 00 		bsr		IncCursorPos
                	.dcx4:
010CF0 57 5F 10 00 	    pop     r5
010CF4 57 4F 10 00 		pop		r4
010CF8 57 3F 10 00 	    pop     r3
010CFC 57 2F 10 00 	    pop     r2
010D00 57 1F 10 00 	    pop     r1
010D04 57 FF 11 00 	    pop     lr
010D08 37 FF 01 00 		rtl
.doTab:
010D0C 0A 10 40 00 	    ldi     r1,#' '
010D10 B9 E9 FF FF 	    bsr     DisplayChar
010D14 39 E9 FF FF 	    bsr     DisplayChar
010D18 B9 E8 FF FF 	    bsr     DisplayChar
010D1C 39 E8 FF FF 	    bsr     DisplayChar
010D20 3A FA FF FF 	    bra     .dcx4
                	.docr:
010D24 39 7B 00 00 	    bsr     GetJCBPtr
010D28 E0 00 1A 08 		sb		r0,JCB_CursorCol[r1]
010D2C B9 CC FF FF 		bsr		UpdateCursorPos
010D30 3A F8 FF FF 		bra     .dcx4
                	.doCursorRight:
010D34 39 79 00 00 	    bsr     GetJCBPtr
010D38 C1 30 1A 08 		lbu		r3,JCB_CursorCol[r1]
010D3C 84 31 02 00 		add		r3,r3,#1
010D40 96 21 A8 00 		cmpu	r2,r3,#TXTCOLS
010D44 3D 31 04 00 		bge		r2,.dcx7
010D48 E0 30 1A 08 		sb		r3,JCB_CursorCol[r1]
                	.dcx7:
010D4C B9 C8 FF FF 		bsr		UpdateCursorPos
010D50 3A F4 FF FF 		bra     .dcx4
                	.doCursorUp:
010D54 39 75 00 00 	    bsr     GetJCBPtr
010D58 C1 30 18 08 		lbu		r3,JCB_CursorRow[r1]
010D5C BD 01 F8 FF 		beq		r3,.dcx7
010D60 95 31 02 00 		subui	r3,r3,#1
010D64 E0 30 18 08 		sb		r3,JCB_CursorRow[r1]
010D68 BA FC FF FF 		bra		.dcx7
                	.doCursorLeft:
010D6C 39 72 00 00 	    bsr     GetJCBPtr
010D70 C1 30 1A 08 		lbu		r3,JCB_CursorCol[r1]
010D74 BD 01 EC FF 		beq		r3,.dcx7
010D78 95 31 02 00 		subui	r3,r3,#1
010D7C E0 30 1A 08 		sb		r3,JCB_CursorCol[r1]
010D80 BA F9 FF FF 		bra		.dcx7
                	.doCursorDown:
010D84 39 6F 00 00 	    bsr     GetJCBPtr
010D88 C1 30 18 08 		lbu		r3,JCB_CursorRow[r1]
010D8C 94 31 02 00 		addui	r3,r3,#1
010D90 96 21 3E 00 		cmpu	r2,r3,#TXTROWS
010D94 3D 31 DC FF 		bge		r2,.dcx7
010D98 E0 30 18 08 		sb		r3,JCB_CursorRow[r1]
010D9C 3A F6 FF FF 		bra		.dcx7
                	.doCursorHome:
010DA0 B9 6B 00 00 	    bsr     GetJCBPtr
010DA4 C1 30 1A 08 		lbu		r3,JCB_CursorCol[r1]
010DA8 BD 01 06 00 		beq		r3,.dcx12
010DAC E0 00 1A 08 		sb		r0,JCB_CursorCol[r1]
010DB0 BA F3 FF FF 		bra		.dcx7
                	.dcx12:
010DB4 E0 00 18 08 		sb		r0,JCB_CursorRow[r1]
010DB8 BA F2 FF FF 		bra		.dcx7
                	.doDelete:
010DBC 39 C7 FF FF 		bsr		CalcScreenLoc
010DC0 82 30 00 1A 		mov		r3,r1
010DC4 39 67 00 00 	    bsr     GetJCBPtr
010DC8 C1 50 1A 08 		lbu		r5,JCB_CursorCol[r1]
010DCC BA 05 00 00 		bra		.dcx5
                	.doBackspace:
010DD0 B9 65 00 00 	    bsr     GetJCBPtr
010DD4 C1 30 1A 08 		lbu		r3,JCB_CursorCol[r1]
010DD8 BD 01 8C FF 		beq		r3,.dcx4
010DDC 95 31 02 00 		subui	r3,r3,#1
010DE0 E0 30 1A 08 		sb		r3,JCB_CursorCol[r1]
010DE4 E7 E0 01 00 		push    r1
010DE8 B9 C1 FF FF 		bsr		CalcScreenLoc
010DEC 82 30 00 1A 		mov		r3,r1
010DF0 57 1F 10 00 		pop     r1
010DF4 C1 50 1A 08 		lbu		r5,JCB_CursorCol[r1]
                	.dcx5:
010DF8 C5 21 08 00 		lhu	    r2,4[r3]
010DFC E2 21 00 00 		sh	    r2,[r3]
010E00 94 31 08 00 		addui	r3,r3,#4
010E04 94 52 02 00 		addui	r5,r5,#1
010E08 96 22 A8 00 		cmpu	r2,r5,#TXTCOLS
010E0C 3D 41 F6 FF 		blt		r2,.dcx5
010E10 0A 10 40 00 		ldi		r1,#' '
010E14 39 33 00 00 		bsr		AsciiToScreen
010E18 45 20 50 22 		lhu		r2,NormAttr
010E1C 82 10 04 1A 		or		r1,r1,r2
010E20 95 31 08 00 		subui	r3,r3,#4
010E24 E2 11 00 00 		sh	    r1,[r3]
010E28 3A D9 FF FF 		bra		.dcx4
                	.doLinefeed:
010E2C B9 07 00 00 		bsr		IncCursorRow
010E30 3A D8 FF FF 		bra		.dcx4
                	
                	
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	IncCursorPos:
010E34 E7 EF 01 00 	    push    lr
010E38 E7 E0 01 00 		push	r1
010E3C 67 E1 01 00 	    push    r2
010E40 E7 E1 01 00 	    push    r3
010E44 67 E2 01 00 	    push    r4
010E48 B9 56 00 00 	    bsr     GetJCBPtr
010E4C C1 30 1A 08 		lbu		r3,JCB_CursorCol[r1]
010E50 94 31 02 00 		addui	r3,r3,#1
010E54 E0 30 1A 08 		sb		r3,JCB_CursorCol[r1]
010E58 96 21 A8 00 		cmpu	r2,r3,#TXTCOLS
010E5C 3D 41 22 00 		blt		r2,icc1
010E60 E0 00 1A 08 		sb		r0,JCB_CursorCol[r1]
010E64 BA 03 00 00 		bra		icr1
                	IncCursorRow:
010E68 E7 EF 01 00 	    push    lr
010E6C E7 E0 01 00 		push	r1
010E70 67 E1 01 00 	    push    r2
010E74 E7 E1 01 00 	    push    r3
010E78 67 E2 01 00 	    push    r4
010E7C 39 50 00 00 	    bsr     GetJCBPtr
                	icr1:
010E80 C1 30 18 08 		lbu		r3,JCB_CursorRow[r1]
010E84 94 31 02 00 		addui	r3,r3,#1
010E88 E0 30 18 08 		sb		r3,JCB_CursorRow[r1]
010E8C 96 21 3E 00 		cmpu	r2,r3,#TXTROWS
010E90 3D 41 08 00 		blt		r2,icc1
010E94 0A 20 3C 00 		ldi		r2,#TXTROWS-1
010E98 E0 20 18 08 		sb		r2,JCB_CursorRow[r1]
010E9C B9 04 00 00 		bsr		ScrollUp
                	icc1:
010EA0 3F 00 00 00 	    nop
010EA4 3F 00 00 00 	    nop
010EA8 39 9D FF FF 		bsr		UpdateCursorPos
010EAC 57 4F 10 00 		pop		r4
010EB0 57 3F 10 00 		pop     r3
010EB4 57 2F 10 00 	    pop     r2
010EB8 57 1F 10 00 	    pop     r1
010EBC 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	ScrollUp:
010EC0 E7 EF 01 00 	    push    lr
010EC4 E7 E0 01 00 		push	r1
010EC8 67 E1 01 00 	    push    r2
010ECC E7 E1 01 00 	    push    r3
010ED0 E7 E2 01 00 	    push    r5
010ED4 67 E3 01 00 		push	r6
010ED8 7C DA FF 00 		lbu	    r1,TEXTREG+TEXT_COLS+$FFD00000
010EDC 41 10 00 00 
010EE0 7C DA FF 00 		lbu	    r2,TEXTREG+TEXT_ROWS+$FFD00000
010EE4 41 20 08 00 
010EE8 15 21 02 00 		subui	r2,r2,#1
010EEC 82 60 04 2E 		mulu	r6,r1,r2
010EF0 B9 8C FF FF 		bsr     GetScreenLocation
010EF4 82 20 00 1A 		mov     r2,r1
010EF8 14 21 A0 02 		addui   r2,r2,#TXTCOLS*4
010EFC 0A 30 00 00 		ldi		r3,#0
                	.0001:
010F00 4C 51 86 00 		lh	    r5,[r2+r3*4]
010F04 EA 50 86 00 		sh	    r5,[r1+r3*4]
010F08 94 31 02 00 		addui	r3,r3,#1
010F0C 15 63 02 00 		subui   r6,r6,#1
010F10 3D 13 F8 FF 		bne	    r6,.0001
010F14 7C DA FF 00 		lbu	    r1,TEXTREG+TEXT_ROWS+$FFD00000
010F18 41 10 08 00 
010F1C 95 10 02 00 		subui	r1,r1,#1
010F20 39 04 00 00 		bsr		BlankLine
010F24 57 6F 10 00 		pop		r6
010F28 57 5F 10 00 		pop		r5
010F2C 57 3F 10 00 	    pop     r3
010F30 57 2F 10 00 	    pop     r2
010F34 57 1F 10 00 	    pop     r1
010F38 57 FF 11 00 		pop     lr
010F3C 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; Blank out a line on the screen.
                	;
                	; Parameters:
                	;	r1 = line number to blank out
                	;------------------------------------------------------------------------------
                	
                	BlankLine:
010F40 E7 EF 01 00 	    push    lr
010F44 E7 E0 01 00 		push	r1
010F48 67 E1 01 00 	    push    r2
010F4C E7 E1 01 00 	    push    r3
010F50 67 E2 01 00 	    push    r4
010F54 7C DA FF 00 	    lbu     r2,TEXTREG+TEXT_COLS+$FFD00000
010F58 41 20 00 00 
010F5C 02 31 02 2E 		mulu	r3,r2,r1
                	;	subui	r2,r2,#1		; r2 = #chars to blank - 1
010F60 82 31 04 70 		asl		r3,r3,#2
010F64 39 7E FF FF 		bsr     GetScreenLocation
010F68 82 31 02 28 		addu	r3,r3,r1
010F6C 0A 10 40 00 		ldi		r1,#' '
010F70 B9 07 00 00 		bsr		AsciiToScreen
010F74 E7 E0 01 00 		push    r1
010F78 B9 7D FF FF 		bsr     GetCurrAttr
010F7C 82 40 00 1A 		mov     r4,r1
010F80 57 1F 10 00 		pop     r1
010F84 82 10 08 1A 		or		r1,r1,r4
                	.0001:
010F88 EA 11 84 00 		sh	    r1,[r3+r2*4]
010F8C 15 21 02 00 		subui   r2,r2,#1
010F90 3D 11 FC FF 		bne	    r2,.0001
010F94 57 4F 10 00 		pop		r4
010F98 57 3F 10 00 	    pop     r3
010F9C 57 2F 10 00 	    pop     r2
010FA0 57 1F 10 00 	    pop     r1
010FA4 57 FF 11 00 		pop     lr
010FA8 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; Convert ASCII character to screen display character.
                	;------------------------------------------------------------------------------
                	
                	AsciiToScreen:
010FAC 67 E1 01 00 	    push    r2
010FB0 86 20 B6 00 	    cmp     r2,r1,#$5B          ; [
010FB4 3D 01 18 00 	    beq     r2,.00003
010FB8 86 20 BA 00 	    cmp     r2,r1,#$5D          ; ]
010FBC 3D 01 18 00 	    beq     r2,.00004
010FC0 8C 10 FE 01 		and		r1,r1,#$FF
010FC4 8D 10 00 02 		or		r1,r1,#$100
010FC8 8C 20 40 00 		and		r2,r1,#%00100000	; if bit 5 or 6 isn't set
010FCC 3D 01 08 00 		beq		r2,.00001
010FD0 8C 20 80 00 		and		r2,r1,#%01000000
010FD4 3D 01 04 00 		beq		r2,.00001
010FD8 8C 10 3E 03 		and		r1,r1,#%110011111
                	.00001:
010FDC 57 2F 10 00 	    pop     r2
010FE0 37 FF 01 00 		rtl
.00003:
010FE4 0A 10 36 02 	    ldi     r1,#$11B
010FE8 BA FE FF FF 	    bra     .00001
                	.00004:
010FEC 0A 10 3A 02 	    ldi     r1,#$11D
010FF0 BA FD FF FF 	    bra     .00001
                	
                	;------------------------------------------------------------------------------
                	; Convert screen display character to ascii.
                	;------------------------------------------------------------------------------
                	
                	ScreenToAscii:
010FF4 67 E1 01 00 	    push    r2
010FF8 8C 10 FE 01 		and		r1,r1,#$FF
010FFC 86 20 36 00 	    cmp     r2,r1,#$1B          ; fix up brackets
011000 3D 41 08 00 	    blt     r2,.0001
011004 86 20 3A 00 	    cmp     r2,r1,#$1D
011008 3D 21 04 00 	    bgt     r2,.0001
01100C 94 10 80 00 	    addu    r1,r1,#$40
                	.0001:
011010 96 20 36 00 		cmpu	r2,r1,#26+1
011014 3D 31 04 00 		bge		r2,.stasc1
011018 84 10 C0 00 		add		r1,r1,#$60
                	.stasc1:
01101C 57 2F 10 00 	    pop     r2
011020 37 FF 01 00 		rtl

                	CursorOff:
011024 37 FF 01 00 		rtl
CursorOn:
011028 37 FF 01 00 		rtl

                	SetCursorPos:
01102C E7 EF 01 00 	    push    lr
011030 E7 E1 01 00 	    push    r3
011034 82 30 00 1A 	    mov     r3,r1
011038 B9 18 00 00 	    bsr     GetJCBPtr
01103C E0 30 18 08 	    sb      r3,JCB_CursorRow[r1]
011040 E0 20 1A 08 	    sb      r2,JCB_CursorCol[r1]
011044 B9 69 FF FF 	    bsr     UpdateCursorPos
011048 82 11 00 1A 	    mov     r1,r3
01104C 57 3F 10 00 	    pop     r3
011050 3B FF 11 00 	    rts

                	GetCursorPos:
011054 E7 EF 01 00 	    push    lr
011058 B9 14 00 00 	    bsr     GetJCBPtr
01105C C1 20 1A 08 	    lbu     r2,JCB_CursorCol[r1]
011060 C1 10 18 08 	    lbu     r1,JCB_CursorRow[r1]
011064 3B FF 11 00 	    rts
    rts

011068 3B FF 11 00 
                	
                	DispStartMsg:
01106C E7 EF 01 00 	    push    lr
011070 7C 01 00 00 		ldi		r1,#msgStart
011074 0A 10 3A 27 
011078 B9 32 FF FF 		bsr		DisplayString
01107C 3B FF 11 00 	    rts

                	   
                	BranchToSelf2:
011080 3A 00 00 00 	    bra      BranchToSelf2
                	
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	ROMChecksum:
011084 E7 EF 01 00 	    push     lr
011088 7C 01 00 00 	    ldi      r2,#$10000
01108C 0A 20 00 00 
011090 0A 40 00 00 	    ldi      r4,#0
011094 0A 30 00 00 	    ldi      r3,#0
011098 0A 50 00 00 	    ldi      r5,#0
                	.0001:
01109C 4D 31 08 00 	    lhu      r3,[r2+r4]
0110A0 82 52 06 28 	    addu     r5,r5,r3
0110A4 14 42 08 00 	    addui    r4,r4,#4
0110A8 7C 01 00 00 	    cmp      r3,r4,#$10000
0110AC 06 32 00 00 
0110B0 BD 41 F6 FF 	    blt      r3,.0001
0110B4 7C 01 00 00 	    lea      r1,msgROMChecksum
0110B8 47 10 A0 21 
0110BC 39 2A FF FF 	    bsr      DisplayString
0110C0 82 12 00 1A 	    mov      r1,r5
0110C4 B9 1B FF FF 	    bsr      DisplayHalf
0110C8 B9 39 FF FF 	    bsr      CRLF
0110CC 3B FF 11 00 	    rts

                	msgROMChecksum:
0110D0 0D 0A 52 4F 	    db    CR,LF,"ROM Checksum: ",0
0110D4 4D 20 43 68 
0110D8 65 63 6B 73 
0110DC 75 6D 3A 20 
0110E0 00          
                	
0110E1 00 00 00    	    align 
                	 
                	;------------------------------------------------------------------------------
                	; Display a space on the output device.
                	;------------------------------------------------------------------------------
                	
                	DisplaySpace:
0110E4 E7 EF 01 00 	    push     lr
0110E8 E7 E0 01 00 	    push     r1
0110EC 0A 10 40 00 	    ldi      r1,#' '
0110F0 B9 A2 00 00 	    bsr      OutChar
0110F4 57 1F 10 00 	    pop      r1
0110F8 3B FF 11 00 	    rts

                	GetJCBPtr:
0110FC 67 E1 01 00 	    push    r2
011100 41 1C 28 04 		lbu     r1,TCB_hJCB[tr]
011104 BD 00 10 00 	    beq     r1,.0001
011108 96 20 66 00 	    cmpu    r2,r1,#NR_JCB
01110C 3D 31 0C 00 	    bge     r2,.0001
011110 97 10 00 0A 		mulu    r1,r1,#JCB_Size
011114 7C C5 00 00 		addui   r1,r1,#JCB_Array
011118 94 10 00 00 
01111C 57 2F 10 00 		pop     r2
011120 37 FF 01 00 	    rtl
.0001:
011124 57 2F 10 00 	    pop     r2
011128 0A 10 80 27 	    ldi     r1,#JCB0
01112C 37 FF 01 00 	    rtl 

                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	LockBIOS:
011130 E7 EF 01 00 	    push    lr
011134 E7 E0 01 00 	    push    r1
011138 0A 10 10 27 	    ldi     r1,#BIOS_sema
01113C B9 81 06 00 	    bsr     LockSema
011140 57 1F 10 00 	    pop     r1
011144 3B FF 11 00 	    rts
UnlockBIOS:
011148 E7 EF 01 00 	    push    lr
01114C E7 E0 01 00 	    push    r1
011150 47 10 10 27 	    lea     r1,BIOS_sema
011154 B9 85 06 00 	    bsr     UnlockSema
011158 57 1F 10 00 	    pop     r1
01115C 37 FF 01 00 	    rtl

                	LockBIOS1:
011160 E7 EF 01 00 	    push    lr
011164 E7 E0 01 00 	    push    r1
011168 7C C0 00 00 	    ldi     r1,#BIOS1_sema
01116C 0A 10 30 04 
011170 39 7B 06 00 	    bsr     LockSema
011174 57 1F 10 00 	    pop     r1
011178 3B FF 11 00 	    rts

                	;------------------------------------------------------------------------------
                	; Perform a BIOS call from CPU #1
                	; This routine sets up a structure variable in memory for the primary CPU
                	; to process.
                	;------------------------------------------------------------------------------
                	
                	BIOSCall1:
01117C 46 EC 11 05 	    lw      sp,TCB_BIOS_Stack[tr]
011180 E7 EF 01 00 	    push    lr
011184 67 E5 01 00 	    push    r10
011188 E7 E5 01 00 	    push    r11
01118C 02 A0 12 3E 	    mfspr   r10,epc             ;
011190 14 A5 08 00 	    addui   r10,r10,#4
011194 02 05 12 3C 	    mtspr   epc,r10
011198 06 A3 C8 00 	    cmp     r10,r6,#MAX_BIOS_CALL
01119C 3D 25 42 00 	    bgt     r10,.0003
0111A0 39 F8 FF FF 	    bsr     LockBIOS1
0111A4 63 60 00 00 	    sw      r6,BIOS_op
0111A8 63 10 10 00 	    sw      r1,BIOS_arg1
0111AC 63 20 20 00 	    sw      r2,BIOS_arg2
0111B0 63 30 30 00 	    sw      r3,BIOS_arg3
0111B4 63 40 40 00 	    sw      r4,BIOS_arg4
0111B8 63 50 50 00 	    sw      r5,BIOS_arg5
0111BC 63 00 60 00 	    sw      r0,BIOS_resp
0111C0 63 00 70 00 	    sw      r0,BIOS_stat
0111C4 7C C0 00 00 	    lw      r1,BIOS_MbxHandle
0111C8 46 10 10 00 
0111CC 0A 20 00 00 	    ldi     r2,#BIOS_op          ;
0111D0 7C C0 00 00 	    lw      r3,BIOS_RespMbx      ; response mailbox handle
0111D4 46 30 20 00 
0111D8 38 0F 08 00 	    sys     #FMTK_CALL
0111DC 09 00 00 00 	    dh      9                    ; SendMsg
0111E0 7C C0 00 00 	    lw      r1,BIOS_RespMbx
0111E4 46 10 20 00 
0111E8 0A 20 FE FF 	    ldi     r2,#-1
0111EC 38 0F 08 00 	    sys     #FMTK_CALL
0111F0 0A 00 00 00 	    dh      10                   ; WaitMsg
0111F4 86 70 20 00 	    cmp     r7,r1,#E_Timeout
0111F8 BD 13 06 00 	    bne     r7,.0004
0111FC 0A 20 04 00 	    ldi     r2,#BIOS_E_Timeout
011200 3A 01 00 00 	    bra     .0002
                	.0004:
011204 02 11 00 1A 	    mov     r1,r2
                	.0002:
011208 7C C0 00 00 	    sw      r0,BIOS1_sema
01120C 63 00 30 04 
011210 57 BF 10 00 	    pop     r11
011214 57 AF 10 00 	    pop     r10
011218 57 FF 11 00 	    pop     lr
01121C 02 E0 3D 6E 	    rte
                	.0003:
011220 0A 20 02 00 	    ldi     r2,#E_BadFuncno
011224 57 BF 10 00 	    pop     r11
011228 57 AF 10 00 	    pop     r10
01122C 57 FF 11 00 	    pop     lr
011230 02 E0 3D 6E 	    rte
                	
                	;------------------------------------------------------------------------------
                	; BIOSCall
                	;
                	; Peform a BIOS function for CPU #0
                	;
                	; Parameters:
                	; r1 = first function argument
                	; r2 = second function argument
                	; r3 = third function argument
                	; r4 = fourth function argument
                	; r5 = fifth function argument
                	; r6 = function
                	;
                	; Returns:
                	; r1 = response from BIOS routine
                	;------------------------------------------------------------------------------
                	
                	BIOSCall:
011234 46 EC 11 05 	    lw      sp,TCB_BIOS_Stack[tr]
011238 E7 EF 01 00 	    push    lr
01123C B9 DE FF FF 	    bsr     LockBIOS
011240 67 E5 01 00 	    push    r10
011244 02 A0 12 3E 	    mfspr   r10,epc             ; update the return address
011248 14 A5 08 00 	    addui   r10,r10,#4
01124C 02 05 12 3C 	    mtspr   epc,r10
011250 06 A3 C8 00 	    cmp     r10,r6,#MAX_BIOS_CALL
011254 3D 25 1E 00 	    bgt     r10,.0003
011258 7C 01 00 00 	    ldi     r10,#BIOS_FuncTable
01125C 0A A0 00 01 
011260 4B A5 4C 00 	    lcu     r10,[r10+r6*2]
011264 7C 01 00 00 	    or      r10,r10,#BIOSCall & 0xFFFFFFFFFFFF0000
011268 0D A5 00 00 
01126C 3C F5 01 00 	    jsr     [r10]
011270 7C 00 00 00 	    ldi     r1,#$5678
011274 0A 10 F0 AC 
011278 7C DC FF 00 	    sc      r1,LEDS
01127C 61 10 00 0C 
                	.0004:
011280 39 D9 FF FF 	    bsr     UnlockBIOS
011284 57 AF 10 00 	    pop     r10
011288 57 FF 11 00 	    pop     lr
01128C 02 E0 3D 6E 	    rte
                	.0003:
011290 0A 20 02 00 	    ldi     r2,#E_BadFuncno
011294 BA FD FF FF 	    bra     .0004
                	
                	;------------------------------------------------------------------------------
                	; This task is a BIOS service task.
                	;------------------------------------------------------------------------------
                	
                	BIOSCallTask:
                	    ; Get a mailbox for BIOS calls
011298 7C C0 00 00 	    ldi     r1,#BIOS_MbxHandle
01129C 0A 10 10 00 
0112A0 38 0F 08 00 	    sys     #FMTK_CALL            ; call FMTK AllocMbx function
0112A4 06 00 00 00 	    dh      6
                	.0001:
0112A8 7C C0 00 00 	    lw      r1,BIOS_MbxHandle
0112AC 46 10 10 00 
0112B0 0A 20 FE FF 	    ldi     r2,#-1                ; infinite timeout
0112B4 38 0F 08 00 	    sys     #FMTK_CALL
0112B8 0A 00 00 00 	    dh      10                    ; call FMTK Waitmsg Function
0112BC 86 B0 00 00 	    cmp     r11,r1,#E_Ok          ; ignore bad reponses
0112C0 BD 15 F4 FF 	    bne     r11,.0001
0112C4 02 B1 00 1A 	    mov     r11,r2
0112C8 82 C1 00 1A 	    mov     r12,r3
0112CC 02 B0 00 1A 	    mov     r11,r0   ; for now
0112D0 C6 65 00 00 	    lw      r6,BIOS_op[r11]
0112D4 C6 15 10 00 	    lw      r1,BIOS_arg1[r11]
0112D8 C6 25 20 00 	    lw      r2,BIOS_arg2[r11]
0112DC C6 35 30 00 	    lw      r3,BIOS_arg3[r11]
0112E0 C6 45 40 00 	    lw      r4,BIOS_arg4[r11]
0112E4 C6 55 50 00 	    lw      r5,BIOS_arg5[r11]
                	;    sys     #BIOS_CALL
0112E8 3D 06 E0 FF 	    beq     r12,.0001
0112EC E3 15 60 00 	    sw      r1,BIOS_resp[r11]
0112F0 82 20 00 1A 	    mov     r2,r1                ; r2 = return value from BIOS
0112F4 02 16 00 1A 	    mov     r1,r12               ; r1 = mailbox to respond to
0112F8 0A 30 00 00 	    ldi     r3,#0                ; r3 = not used
0112FC 38 0F 08 00 	    sys     #FMTK_CALL
011300 08 00 00 00 	    dh      8                    ; PostMsg
011304 BA F4 FF FF 	    bra     .0001        
                	
                	;------------------------------------------------------------------------------
                	; 60 Hz interrupt routine.
                	; Both cpu's will execute this interrupt.
                	;------------------------------------------------------------------------------
                	
                	TickRout:
011308 FC 00 00 00 	    ldi     sp,#CPU0_IRQ_STACK       ; set stack pointer to interrupt processing stack
01130C 0A E0 01 10 
011310 E7 EF 01 00 	    push    lr
011314 E7 E0 01 00 	    push    r1
011318 0A 10 06 00 		ldi		r1,#3				; reset the edge sense circuit
01131C 7C DC FF 00 		sh		r1,PIC_RSTE
011320 62 10 A8 1F 
011324 02 10 00 6C 		cpuid   r1,r0,#0
011328 BD 10 04 00 		bne     r1,.0001
01132C 39 02 00 00 		bsr     UserTickRout
                	.0001:
011330 57 1F 10 00 		pop     r1
011334 57 FF 11 00 		pop     lr
011338 02 E0 3F 6E 		rti
                	
                	UserTickRout:
01133C E7 E0 01 00 	    push    r1
011340 7C D0 FF 00 		lh	    r1,TEXTSCR+220
011344 44 10 B8 01 
011348 94 10 02 00 		addui	r1,r1,#1
01134C 7C D0 FF 00 		sh	    r1,TEXTSCR+220
011350 62 10 B8 01 
011354 7C 02 00 00 		lw      r1,$20000
011358 46 10 00 00 
01135C 7C D0 FF 00 		sh      r1,TEXTSCR+224
011360 62 10 C0 01 
011364 57 1F 10 00 		pop     r1
011368 37 FF 01 00 	    rtl

                	;------------------------------------------------------------------------------
                	; 1024Hz interupt routine. This must be fast. Allows the system time to be
                	; gotten by right shifting by 10 bits.
                	;------------------------------------------------------------------------------
                	
                	Tick1024Rout:
01136C FC 00 00 00 	    ldi     sp,#CPU0_IRQ_STACK  ; set stack pointer to interrupt processing stack
011370 0A E0 01 10 
011374 E7 E0 01 00 		push	r1
011378 0A 10 04 00 		ldi		r1,#2				; reset the edge sense circuit
01137C 7C DC FF 00 		sh		r1,PIC_RSTE
011380 62 10 A8 1F 
011384 64 10 00 22 		inc     Milliseconds
011388 57 1F 10 00 		pop		r1
01138C 02 E0 3F 6E 		rti                         ; restore stack pointer and return
                	
                	;------------------------------------------------------------------------------
                	; GetSystemTime
                	;
                	; Returns 
                	;    r1 = the system time in seconds.
                	;------------------------------------------------------------------------------
                	
                	GetSystemTime:
011390 46 10 00 22 	    lw      r1,Milliseconds
011394 82 10 14 72 	    lsr     r1,r1,#10
011398 37 FF 01 00 	    rtl

                	
01139C 00          		db	0
                	msgStart:
01139D 46 49 53 41 		db	"FISA64 test system starting.",0
0113A1 36 34 20 74 
0113A5 65 73 74 20 
0113A9 73 79 73 74 
0113AD 65 6D 20 73 
0113B1 74 61 72 74 
0113B5 69 6E 67 2E 
0113B9 00          
                	
                	
                	; ============================================================================
                	; Monitor Task
                	; ============================================================================
                	
                	Monitor:
0113BA 00 00 0A 10 		ldi		r1,#49
0113BE 62 00       
0113C0 7C DC FF 00 		sc		r1,LEDS
0113C4 61 10 00 0C 
                	;	bsr		ClearScreen
                	;	bsr		HomeCursor
0113C8 7C 01 00 00 		ldi		r1,#msgMonitorStarted
0113CC 0A 10 6E 35 
0113D0 39 D7 FE FF 		bsr		DisplayStringCRLF
0113D4 0A 10 66 00 		ldi		r1,#51
0113D8 7C DC FF 00 		sc		r1,LEDS
0113DC 61 10 00 0C 
0113E0 60 00 68 22 		sb		r0,KeybdEcho
0113E4 0A 10 80 27 		ldi     r1,#JCB0
0113E8 E0 00 90 08 		sb      r0,JCB_KeybdEcho[r1]
                		;ldi		r1,#7
                		;ldi		r2,#0
                		;ldi		r3,#IdleTask
                		;ldi		r4,#0
                		;ldi		r5,#0
                		;bsr		StartTask
                	mon1:
0113EC 0A 10 64 00 		ldi		r1,#50
0113F0 7C DC FF 00 		sc		r1,LEDS
0113F4 61 10 00 0C 
                	;	ldi		sp,#TCBs+TCB_Size-8		; reload the stack pointer, it may have been trashed
0113F8 7C 00 00 00 		ldi		sp,#MON_STACK
0113FC 0A E0 01 C0 
011400 02 00 00 6E 		cli
                	.PromptLn:
011404 39 D2 FE FF 		bsr		CRLF
011408 0A 10 48 00 		ldi		r1,#'$'
01140C 39 3F 00 00 		bsr		OutChar
                	.Prompt3:
011410 B9 41 01 00 		bsr		KeybdGetCharNoWait		; KeybdGetCharDirectNB
011414 BD 40 FE FF 		blt	    r1,.Prompt3
011418 86 20 1A 00 		cmp		r2,r1,#CR
01141C 3D 01 06 00 		beq		r2,.Prompt1
011420 B9 3C 00 00 		bsr		OutChar
011424 BA FD FF FF 		bra		.Prompt3
                	.Prompt1:
011428 B9 9A FF FF 	    bsr     GetJCBPtr
01142C E0 00 1A 08 		sb		r0,JCB_CursorCol[r1]
011430 B9 F8 FE FF 		bsr		CalcScreenLoc
011434 82 30 00 1A 		mov		r3,r1
011438 B9 10 00 00 		bsr		MonGetch
01143C 86 20 48 00 		cmp		r2,r1,#'$'
011440 3D 11 04 00 		bne		r2,.Prompt2
011444 39 0F 00 00 		bsr		MonGetch
                	.Prompt2:
011448 86 20 7E 00 		cmp		r2,r1,#'?'
01144C 3D 01 30 00 		beq		r2,.doHelp
011450 86 20 86 00 		cmp		r2,r1,#'C'
011454 3D 01 3A 03 		beq		r2,doCLS
011458 86 20 C6 00 		cmp     r2,r1,#'c'
01145C 3D 01 A8 76 		beq     r2,doCS
011460 86 20 9A 00 		cmp		r2,r1,#'M'
011464 3D 01 68 00 		beq		r2,doDumpmem
011468 86 20 8C 00 		cmp		r2,r1,#'F'
01146C 3D 01 78 00 		beq		r2,doFillmem
011470 86 20 DA 00 		cmp		r2,r1,#'m'
011474 3D 01 9E 76 		beq		r2,MRTest
011478 86 20 A6 00 		cmp		r2,r1,#'S'
01147C 3D 01 B2 00 		beq		r2,doSDBoot
011480 86 20 CE 00 		cmp		r2,r1,#'g'
011484 3D 01 96 76 		beq		r2,doRand
011488 86 20 CA 00 		cmp		r2,r1,#'e'
01148C 3D 01 94 76 		beq		r2,eval
011490 86 20 94 00 		cmp		r2,r1,#'J'
011494 3D 01 BA 00 		beq		r2,doJump
011498 86 20 88 00 		cmp		r2,r1,#'D'
01149C 3D 01 3C 01 		beq		r2,doDate
0114A0 86 20 A8 00 		cmp     r2,r1,#'T'
0114A4 3D 01 58 00 		beq     r2,doDumpTL
0114A8 BA E8 FF FF 		bra     mon1
                	
                	.doHelp:
0114AC 7C 01 00 00 		ldi		r1,#msgHelp
0114B0 0A 10 E8 33 
0114B4 39 AB FE FF 		bsr		DisplayString
0114B8 BA E6 FF FF 		bra     mon1
                	
                	MonGetch:
0114BC E7 EF 01 00 	    push    lr
0114C0 C5 11 00 00 		lhu	    r1,[r3]
0114C4 8C 10 FE 03 		andi	r1,r1,#$1FF
0114C8 84 31 08 00 		add		r3,r3,#4
0114CC 39 65 FF FF 		bsr		ScreenToAscii
0114D0 57 FF 11 00 		pop     lr
0114D4 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; Ignore blanks in the input
                	; r3 = text pointer
                	; r1 destroyed
                	;------------------------------------------------------------------------------
                	
                	ignBlanks:
0114D8 E7 EF 01 00 	    push    lr
0114DC 67 E1 01 00 	    push    r2
                	ignBlanks1:
0114E0 B9 FB FF FF 		bsr		MonGetch
0114E4 86 20 40 00 		cmp		r2,r1,#' '
0114E8 3D 01 FC FF 		beq		r2,ignBlanks1
0114EC 85 31 08 00 		sub		r3,r3,#4
0114F0 57 2F 10 00 		pop     r2
0114F4 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	GetTwoParams:
0114F8 E7 EF 01 00 	    push    lr
0114FC B9 FB FF FF 		bsr		ignBlanks
011500 39 86 00 00 		bsr		GetHexNumber	; get start address of dump
011504 82 20 00 1A 		mov		r2,r1
011508 39 FA FF FF 		bsr		ignBlanks
01150C B9 84 00 00 		bsr		GetHexNumber	; get end address of dump
011510 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Get a range, the end must be greater or equal to the start.
                	;------------------------------------------------------------------------------
                	
                	GetRange:
011514 E7 EF 01 00 	    push    lr
011518 67 E2 01 00 	    push    r4
01151C B9 FB FF FF 		bsr		GetTwoParams
011520 02 41 02 2C 		cmpu	r4,r2,r1
011524 3D 22 5C 02 		bgt		r4,DisplayErr
011528 57 4F 10 00 		pop     r4
01152C 57 FF 11 00 		pop     lr
011530 37 FF 01 00 		rtl

                	doDumpmem:
011534 39 5E FF FF 		bsr		CursorOff
011538 B9 FB FF FF 		bsr		GetRange
01153C 39 AB FE FF 		bsr		CRLF
                	;	bra     mon1
                	.001:
011540 B9 6F 00 00 		bsr		CheckKeys
011544 39 57 00 00 		bsr		DisplayMemBytes
011548 02 41 02 2C 		cmpu	r4,r2,r1
01154C 3D 52 FA FF 		ble		r4,.001
011550 BA D3 FF FF 		bra     mon1
                	
                	doDumpTL:
011554 B9 51 06 00 	    bsr     DumpTaskList
011558 BA D2 FF FF 	    bra     mon1
                	
                	;------------------------------------------------------------------------------
                	; Fill memory
                	;
                	; FB FFD80000 FFD8FFFF r	; fill sprite memory with random bytes
                	;------------------------------------------------------------------------------
                	
                	doFillmem:
01155C 39 59 FF FF 		bsr		CursorOff
011560 B9 EB FF FF 		bsr		MonGetch		; skip over 'B' of "FB"
011564 86 20 84 00 		cmp		r2,r1,#'B'
011568 3D 01 04 00 		beq		r2,.0004
01156C 95 31 08 00 		subui	r3,r3,#4		; backup text pointer
                	.0004:
011570 B9 F4 FF FF 		bsr		GetRange
011574 E7 E0 01 00 		push	r1
011578 67 E1 01 00 	    push    r2
01157C B9 EB FF FF 		bsr		ignBlanks
011580 B9 E7 FF FF 		bsr		MonGetch		; check for random fill
011584 86 20 E4 00 		cmp		r2,r1,#'r'
011588 3D 01 18 00 		beq		r2,.0001
01158C 95 31 08 00 		subui   r3,r3,#4
011590 39 74 00 00 		bsr		GetHexNumber
011594 82 30 00 1A 		mov		r3,r1
011598 57 2F 10 00 		pop		r2
01159C 57 1F 10 00 	    pop     r1
                	.0002:
0115A0 B9 63 00 00 		bsr		CheckKeys
0115A4 60 31 00 00 		sb		r3,[r2]
0115A8 14 21 02 00 		addui	r2,r2,#1
0115AC 02 51 02 2C 		cmpu	r5,r2,r1
0115B0 BD 42 F8 FF 		blt		r5,.0002
0115B4 3A C7 FF FF 		bra		mon1
                	.0001:
0115B8 57 2F 10 00 		pop		r2
0115BC 57 1F 10 00 	    pop     r1
                	.0003:
0115C0 B9 5F 00 00 		bsr		CheckKeys
0115C4 7C DC FF 00 		lw	    r3,RANDOM_NUM
0115C8 46 30 00 18 
0115CC 60 31 00 00 		sb		r3,[r2]
0115D0 14 21 02 00 		addui	r2,r2,#1
0115D4 02 51 02 2C 		cmpu	r5,r2,r1
0115D8 BD 42 F4 FF 		blt		r5,.0003
0115DC 3A C2 FF FF 		bra		mon1
                	
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	doSDBoot:
                	;	sub		r3,r3,#4
0115E0 39 5C DD FF 		bsr		SDInit
0115E4 BD 10 04 FF 		bne	    r1,mon1
0115E8 39 5B DD FF 		bsr		SDReadPart
0115EC BD 10 00 FF 		bne	    r1,mon1
0115F0 B9 7A DD FF 		bsr		SDReadBoot
0115F4 BD 10 FC FE 		bne	    r1,mon1
0115F8 B9 79 DD FF 		bsr		loadBootFile
0115FC 7C 00 00 00 		jmp		mon1
011600 3C 00 F6 89 
                	
                	OutChar:
011604 3E 00 10 22 	    jmp     (OutputVec)
                	
                	;------------------------------------------------------------------------------
                	; Jump to subroutine
                	;
                	; J 10000     ; restart system
                	;------------------------------------------------------------------------------
                	
                	doJump:
011608 B9 D6 FF FF 		bsr		MonGetch		; skip over 'S'
01160C B9 D9 FF FF 		bsr		ignBlanks
011610 39 64 00 00 		bsr		GetHexNumber
011614 63 10 30 22 		sw      r1,jmp_vector
011618 46 F0 F1 21 	    lw      r31,MON_r31
01161C 46 E0 E1 21 	    lw      r30,MON_r30
011620 46 D0 D1 21 	    lw      r29,MON_r29
011624 46 C0 C1 21 	    lw      r28,MON_r28
011628 46 B0 B1 21 	    lw      r27,MON_r27
01162C 46 A0 A1 21 	    lw      r26,MON_r26
011630 46 90 91 21 	    lw      r25,MON_r25
                	;   lw      r24,MON_r24    ; r24 is the task register - no need to load
011634 46 70 71 21 	    lw      r23,MON_r23
011638 46 60 61 21 	    lw      r22,MON_r22
01163C 46 50 51 21 	    lw      r21,MON_r21
011640 46 40 41 21 	    lw      r20,MON_r20
011644 46 30 31 21 	    lw      r19,MON_r19
011648 46 20 21 21 	    lw      r18,MON_r18
01164C 46 10 11 21 	    lw      r17,MON_r17
011650 46 00 01 21 	    lw      r16,MON_r16
011654 46 F0 F0 20 	    lw      r15,MON_r15
011658 46 E0 E0 20 	    lw      r14,MON_r14
01165C 46 D0 D0 20 	    lw      r13,MON_r13
011660 46 C0 C0 20 	    lw      r12,MON_r12
011664 46 B0 B0 20 	    lw      r11,MON_r11
011668 46 A0 A0 20 	    lw      r10,MON_r10
01166C 46 90 90 20 	    lw      r9,MON_r9
011670 46 80 80 20 	    lw      r8,MON_r8
011674 46 70 70 20 	    lw      r7,MON_r7
011678 46 60 60 20 	    lw      r6,MON_r6
01167C 46 50 50 20 	    lw      r5,MON_r5
011680 46 40 40 20 	    lw      r4,MON_r4
011684 46 30 30 20 	    lw      r3,MON_r3
011688 46 20 20 20 	    lw      r2,MON_r2
01168C 46 10 10 20 	    lw      r1,MON_r1
011690 3E F0 31 22 	    jsr		(jmp_vector)
011694 63 10 10 20 	    sw      r1,MON_r1
011698 63 20 20 20 	    sw      r2,MON_r2
01169C 63 30 30 20 	    sw      r3,MON_r3
0116A0 63 40 40 20 	    sw      r4,MON_r4
0116A4 63 50 50 20 	    sw      r5,MON_r5
0116A8 63 60 60 20 	    sw      r6,MON_r6
0116AC 63 70 70 20 	    sw      r7,MON_r7
0116B0 63 80 80 20 	    sw      r8,MON_r8
0116B4 63 90 90 20 	    sw      r9,MON_r9
0116B8 63 A0 A0 20 	    sw      r10,MON_r10
0116BC 63 B0 B0 20 	    sw      r11,MON_r11
0116C0 63 C0 C0 20 	    sw      r12,MON_r12
0116C4 63 D0 D0 20 	    sw      r13,MON_r13
0116C8 63 E0 E0 20 	    sw      r14,MON_r14
0116CC 63 F0 F0 20 	    sw      r15,MON_r15
0116D0 63 00 01 21 	    sw      r16,MON_r16
0116D4 63 10 11 21 	    sw      r17,MON_r17
0116D8 63 20 21 21 	    sw      r18,MON_r18
0116DC 63 30 31 21 	    sw      r19,MON_r19
0116E0 63 40 41 21 	    sw      r20,MON_r20
0116E4 63 50 51 21 	    sw      r21,MON_r21
0116E8 63 60 61 21 	    sw      r22,MON_r22
0116EC 63 70 71 21 	    sw      r23,MON_r23
0116F0 63 80 81 21 	    sw      r24,MON_r24
0116F4 63 90 91 21 	    sw      r25,MON_r25
0116F8 63 A0 A1 21 	    sw      r26,MON_r26
0116FC 63 B0 B1 21 	    sw      r27,MON_r27
011700 63 C0 C1 21 	    sw      r28,MON_r28
011704 63 D0 D1 21 	    sw      r29,MON_r29
011708 63 E0 E1 21 	    sw      r30,MON_r30
01170C 63 F0 F1 21 	    sw      r31,MON_r31
011710 BA 9B FF FF 		bra		mon1
                	
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	doDate:
011714 39 B5 FF FF 		bsr		MonGetch		; skip over 'T'
011718 86 50 84 00 		cmp     r5,r1,#'B'
01171C BD 02 62 00 		beq     r5,doDebug
011720 86 50 82 00 		cmp		r5,r1,#'A'		; look for DAY
011724 BD 02 3C 00 		beq		r5,doDay
011728 86 50 A8 00 		cmp     r5,r1,#'T'
01172C BD 12 46 00 		bne     r5,doDisassem
011730 39 B5 FF FF 		bsr		ignBlanks
011734 39 B1 FF FF 		bsr		MonGetch
011738 86 50 7E 00 		cmp		r5,r1,#'?'
01173C BD 02 14 00 		beq		r5,.0001
011740 95 31 08 00 		subui	r3,r3,#4
011744 B9 3D 00 00 		bsr		GetHexNumber
011748 60 10 8A 37 		sb		r1,RTCC_BUF+5	; update month
01174C B9 3C 00 00 		bsr		GetHexNumber
011750 60 10 88 37 		sb		r1,RTCC_BUF+4	; update day
011754 B9 3B 00 00 		bsr		GetHexNumber
011758 60 10 8C 37 		sb		r1,RTCC_BUF+6	; update year
01175C B9 E3 01 00 		bsr		RTCCWritebuf
011760 BA 91 FF FF 		bra		mon1
                	.0001:
011764 B9 DD 01 00 		bsr		RTCCReadbuf
011768 B9 65 FE FF 		bsr		CRLF
01176C 41 10 8A 37 		lbu		r1,RTCC_BUF+5
011770 39 4B FE FF 		bsr		DisplayByte
011774 0A 10 5E 00 		ldi		r1,#'/'
011778 B9 D1 FF FF 		bsr		OutChar
01177C 41 10 88 37 		lbu		r1,RTCC_BUF+4
011780 39 49 FE FF 		bsr		DisplayByte
011784 0A 10 5E 00 		ldi		r1,#'/'
011788 B9 CF FF FF 		bsr		OutChar
01178C 41 10 8C 37 		lbu		r1,RTCC_BUF+6
011790 39 47 FE FF 		bsr		DisplayByte
011794 39 60 FE FF 		bsr		CRLF
011798 BA 8A FF FF 		bra		mon1
                	
                	doDay:
01179C B9 A7 FF FF 		bsr		ignBlanks
0117A0 39 32 00 00 		bsr		GetHexNumber
0117A4 82 30 00 1A 		mov		r3,r1			; value to write
0117A8 0A 10 DE 00 		ldi		r1,#$6F			; device $6F
0117AC 0A 20 06 00 		ldi		r2,#$03			; register 3
0117B0 39 C2 01 00 		bsr		I2C_WRITE
0117B4 3A 87 FF FF 		bra		mon1
                	
                	doDisassem:
0117B8 95 31 08 00 	    subui   r3,r3,#4
0117BC B9 A3 FF FF 	    bsr     ignBlanks
0117C0 39 2E 00 00 	    bsr     GetHexNumber
0117C4 95 10 40 00 	    subu    r1,r1,#32
0117C8 E7 E0 01 00 	    push    r1
0117CC 94 10 40 00 	    addu    r1,r1,#32
0117D0 E7 E0 01 00 	    push    r1
0117D4 39 E8 0D 00 	    bsr     disassem20
0117D8 14 EF 21 00 	    addui   sp,sp,#16
0117DC 3A 82 FF FF 	    bra     mon1
                	
                	doDebug:
0117E0 39 9F FF FF 	   bsr   ignBlanks
0117E4 B9 29 00 00 	   bsr   GetHexNumber
0117E8 65 E0 01 00 	   push  #0
0117EC E7 E0 01 00 	   push  r1
0117F0 B9 56 10 00 	   bsr   debugger
0117F4 14 EF 21 00 	   addui sp,sp,#16
0117F8 BA 7E FF FF 	   bra   mon1
                	
                	;------------------------------------------------------------------------------
                	; Display memory pointed to by r2.
                	; destroys r1,r3
                	;------------------------------------------------------------------------------
                	;
                	DisplayMemBytes:
0117FC E7 EF 01 00 	    push    lr
011800 E7 E0 01 00 		push	r1
011804 E7 E1 01 00 	    push    r3
011808 67 E2 01 00 	    push    r4
01180C 0A 10 7C 00 		ldi		r1,#'>'
011810 B9 BE FF FF 		bsr		OutChar
011814 0A 10 84 00 		ldi		r1,#'B'
011818 B9 BD FF FF 		bsr		OutChar
01181C 0A 10 40 00 		ldi		r1,#' '
011820 B9 BC FF FF 		bsr		OutChar
011824 02 11 00 1A 		mov		r1,r2
011828 39 2F FE FF 		bsr		DisplayHalf
01182C 0A 30 10 00 		ldi		r3,#8
                	.001:
011830 0A 10 40 00 		ldi		r1,#' '
011834 39 BA FF FF 		bsr		OutChar
011838 41 11 00 00 		lbu		r1,[r2]
01183C B9 31 FE FF 		bsr		DisplayByte
011840 14 21 02 00 		addui	r2,r2,#1
011844 95 31 02 00 		subui   r3,r3,#1
011848 BD 11 F4 FF 		bne	    r3,.001
01184C 0A 10 74 00 		ldi		r1,#':'
011850 B9 B6 FF FF 		bsr		OutChar
011854 7C 70 0D 00 		ldi		r1,#%110101110_000000100_0000000000	; reverse video
011858 0A 10 00 20 
01185C 62 10 50 22 		sh		r1,NormAttr
011860 0A 30 10 00 		ldi		r3,#8
011864 15 21 10 00 		subui	r2,r2,#8
                	.002
011868 41 11 00 00 		lbu		r1,[r2]
01186C 96 40 34 00 		cmpu	r4,r1,#26				; convert control characters to '.'
011870 3D 32 06 00 		bge		r4,.004
011874 0A 10 5C 00 		ldi		r1,#'.'
011878 3A 02 00 00 		bra     .003
                	.004:
01187C 96 40 00 01 		cmpu	r4,r1,#$80				; convert other non-ascii to '.'
011880 3D 42 04 00 		blt		r4,.003
011884 0A 10 5C 00 		ldi		r1,#'.'
                	.003:
011888 B9 AF FF FF 		bsr		OutChar
01188C 14 21 02 00 		addui	r2,r2,#1
011890 95 31 02 00 		subui   r3,r3,#1
011894 BD 11 EA FF 		bne	    r3,.002
011898 FC 26 00 00 		ldi		r1,#%000000100_110101110_0000000000	; normal video
01189C 0A 10 00 70 
0118A0 62 10 50 22 		sh		r1,NormAttr
0118A4 39 3E FE FF 		bsr		CRLF
0118A8 57 4F 10 00 		pop     r4
0118AC 57 3F 10 00 		pop		r3
0118B0 57 1F 10 00 	    pop     r1
0118B4 57 FF 11 00 	    pop     lr
0118B8 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; CheckKeys:
                	;	Checks for a CTRLC or a scroll lock during long running dumps.
                	;------------------------------------------------------------------------------
                	
                	CheckKeys:
0118BC E7 EF 01 00 	    push    lr
0118C0 39 02 00 00 		bsr	    CTRLCCheck
0118C4 B9 07 00 00 		bsr     CheckScrollLock
0118C8 57 FF 11 00 		pop     lr
0118CC 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; CTRLCCheck
                	;	Checks to see if CTRL-C is pressed. If so then the current routine is
                	; aborted and control is returned to the monitor.
                	;------------------------------------------------------------------------------
                	
                	CTRLCCheck:
0118D0 E7 EF 01 00 	    push    lr
0118D4 E7 E0 01 00 		push	r1
0118D8 67 E1 01 00 		push    r2
0118DC 39 A8 00 00 		bsr		KeybdGetCharNoWait
0118E0 86 20 06 00 		cmp		r2,r1,#CTRLC
0118E4 3D 01 0A 00 		beq		r2,.0001
0118E8 57 2F 10 00 		pop     r2
0118EC 57 1F 10 00 		pop		r1
0118F0 57 FF 11 00 		pop     lr
0118F4 37 FF 01 00 		rtl
.0001:
0118F8 14 EF 31 00 		addui	sp,sp,#24
0118FC 3A 5E FF FF 		bra     mon1
                	
                	;------------------------------------------------------------------------------
                	; CheckScrollLock:
                	;	Check for a scroll lock by the user. If scroll lock is active then tasks
                	; are rescheduled while the scroll lock state is tested in a loop.
                	;------------------------------------------------------------------------------
                	
                	CheckScrollLock:
011900 E7 EF 01 00 	    push    lr
011904 E7 E0 01 00 		push	r1
011908 67 E1 01 00 		push    r2
                	.0002:
01190C 43 10 6C 22 		lcu		r1,KeybdLocks
011910 7C 00 00 00 		and		r2,r1,#$4000		; is scroll lock active ?
011914 8C 20 00 80 
011918 3D 01 04 00 		beq		r2,.0001
                	;	brk		#2*16				; reschedule tasks
01191C 3A FE FF FF 		bra     .0002
                	.0001:
011920 57 2F 10 00 	    pop     r2
011924 57 1F 10 00 		pop		r1
011928 57 FF 11 00 		pop     lr
01192C 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; Get a hexidecimal number. Maximum of eight digits.
                	; R3 = text pointer (updated)
                	; R1 = hex number
                	;------------------------------------------------------------------------------
                	;
                	GetHexNumber:
011930 E7 EF 01 00 	    push    lr
011934 67 E1 01 00 		push	r2
011938 67 E2 01 00 	    push    r4
01193C 0A 20 00 00 		ldi		r2,#0
011940 0A 40 20 00 		ldi		r4,#16
                	.gthxn2:
011944 39 6F FF FF 		bsr		MonGetch
011948 39 05 00 00 		bsr		AsciiToHexNybble
01194C BD 40 0A 00 		bmi		r1,.gthxn1
011950 02 21 08 70 		asl		r2,r2,#4
011954 02 21 02 1A 		or		r2,r2,r1
011958 15 42 02 00 		subui   r4,r4,#1
01195C 3D 12 F4 FF 	    bne	    r4,.gthxn2
                	.gthxn1:
011960 02 11 00 1A 		mov		r1,r2
011964 57 4F 10 00 		pop		r4
011968 57 2F 10 00 	    pop     r2
01196C 3B FF 11 00 	    rts

                	;------------------------------------------------------------------------------
                	; Convert ASCII character in the range '0' to '9', 'a' to 'f' or 'A' to 'F'
                	; to a hex nybble.
                	;------------------------------------------------------------------------------
                	;
                	AsciiToHexNybble:
011970 67 E1 01 00 	    push    r2
011974 96 20 60 00 		cmpu	r2,r1,#'0'
011978 3D 41 2C 00 		blt		r2,.gthx3
01197C 96 20 74 00 		cmpu	r2,r1,#'9'+1
011980 3D 31 08 00 		bge		r2,.gthx5
011984 95 10 60 00 		subui	r1,r1,#'0'
011988 57 2F 10 00 		pop     r2
01198C 37 FF 01 00 		rtl
.gthx5:
011990 96 20 82 00 		cmpu	r2,r1,#'A'
011994 3D 41 1E 00 		blt		r2,.gthx3
011998 96 20 8E 00 		cmpu	r2,r1,#'F'+1
01199C 3D 31 0A 00 		bge		r2,.gthx6
0119A0 95 10 82 00 		subui	r1,r1,#'A'
0119A4 94 10 14 00 		addui	r1,r1,#10
0119A8 57 2F 10 00 		pop     r2
0119AC 37 FF 01 00 		rtl
.gthx6:
0119B0 96 20 C2 00 		cmpu	r2,r1,#'a'
0119B4 3D 41 0E 00 		blt		r2,.gthx3
0119B8 96 20 F6 00 		cmpu	r2,r1,#'z'+1
0119BC 3D 31 0A 00 		bge		r2,.gthx3
0119C0 95 10 C2 00 		subui	r1,r1,#'a'
0119C4 94 10 14 00 		addui	r1,r1,#10
0119C8 57 2F 10 00 		pop     r2
0119CC 37 FF 01 00 		rtl
.gthx3:
0119D0 57 2F 10 00 	    pop     r2
0119D4 0A 10 FE FF 		ldi		r1,#-1		; not a hex number
0119D8 37 FF 01 00 		rtl

                	DisplayErr:
0119DC 7C 01 00 00 		ldi		r1,#msgErr
0119E0 0A 10 D8 33 
0119E4 39 05 FE FF 		bsr		DisplayString
0119E8 BA 40 FF FF 		bra mon1
                	
                	msgErr:
0119EC 2A 2A 45 72 		db	"**Err",CR,LF,0
0119F0 72 0D 0A 00 
                	
                	msgHelp:
0119F4 3F 20 3D 20 		db		"? = Display Help",CR,LF
0119F8 44 69 73 70 
0119FC 6C 61 79 20 
011A00 48 65 6C 70 
011A04 0D 0A       
011A06 43 4C 53 20 		db		"CLS = clear screen",CR,LF
011A0A 3D 20 63 6C 
011A0E 65 61 72 20 
011A12 73 63 72 65 
011A16 65 6E 0D 0A 
011A1A 44 20 3D 20 		db      "D = disassemble",CR,LF
011A1E 64 69 73 61 
011A22 73 73 65 6D 
011A26 62 6C 65 0D 
011A2A 0A          
011A2B 44 42 20 3D 		db      "DB = start debugger",CR,LF
011A2F 20 73 74 61 
011A33 72 74 20 64 
011A37 65 62 75 67 
011A3B 67 65 72 0D 
011A3F 0A          
011A40 44 54 20 3D 		db		"DT = set/read date",CR,LF
011A44 20 73 65 74 
011A48 2F 72 65 61 
011A4C 64 20 64 61 
011A50 74 65 0D 0A 
011A54 46 42 20 3D 		db		"FB = fill memory",CR,LF
011A58 20 66 69 6C 
011A5C 6C 20 6D 65 
011A60 6D 6F 72 79 
011A64 0D 0A       
011A66 4D 42 20 3D 		db		"MB = dump memory",CR,LF
011A6A 20 64 75 6D 
011A6E 70 20 6D 65 
011A72 6D 6F 72 79 
011A76 0D 0A       
011A78 4A 53 20 3D 		db		"JS = jump to code",CR,LF
011A7C 20 6A 75 6D 
011A80 70 20 74 6F 
011A84 20 63 6F 64 
011A88 65 0D 0A    
011A8B 54 20 3D 20 		db	    "T = Dump task list",CR,LF
011A8F 44 75 6D 70 
011A93 20 74 61 73 
011A97 6B 20 6C 69 
011A9B 73 74 0D 0A 
011A9F 53 20 3D 20 		db		"S = boot from SD card",CR,LF
011AA3 62 6F 6F 74 
011AA7 20 66 72 6F 
011AAB 6D 20 53 44 
011AAF 20 63 61 72 
011AB3 64 0D 0A    
011AB6 00          		db		0
                	
                	msgMonitorStarted
011AB7 4D 6F 6E 69 		db		"Monitor started.",0
011ABB 74 6F 72 20 
011ABF 73 74 61 72 
011AC3 74 65 64 2E 
011AC7 00          
                	
                	doCLS:
011AC8 39 CB FD FF 		bsr		ClearScreen
011ACC 39 C3 FD FF 		bsr		HomeCursor
011AD0 BA 23 FF FF 		bra     mon1
                	
                	;------------------------------------------------------------------------------
                	; Get a random number from peripheral device.
                	;------------------------------------------------------------------------------
                	
                	GetRandomNumber:
011AD4 7C DC FF 00 	    lw      r1,$FFDC0C00
011AD8 46 10 00 18 
011ADC 37 FF 01 00 	    rtl
                
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	; Keyboard processing routines follow.
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	KEYBD_DELAY		EQU		1000
                	
                	KeybdGetCharDirectNB:
011AE0 E7 EF 01 00 	    push    lr
011AE4 67 E1 01 00 		push	r2
011AE8 02 00 02 6E 		sei
011AEC 7C DC FF 00 		lcu		r1,KEYBD
011AF0 43 10 00 00 
011AF4 FC 00 00 00 		and		r2,r1,#$8000
011AF8 8C 20 00 00 
011AFC 3D 01 22 00 		beq		r2,.0001
011B00 7C DC FF 00 		lbu		r0,KEYBD+4		; clear keyboard strobe
011B04 41 00 08 00 
011B08 02 00 00 6E 		cli
011B0C 8C 20 00 10 		and		r2,r1,#$800	; is it keydown ?
011B10 3D 11 18 00 		bne	    r2,.0001
011B14 8C 10 FE 01 		and		r1,r1,#$FF
011B18 41 20 68 22 		lbu		r2,KeybdEcho
011B1C 3D 01 0C 00 		beq		r2,.0002
011B20 86 20 1A 00 		cmp		r2,r1,#CR
011B24 3D 11 06 00 		bne		r2,.0003
011B28 B9 ED FD FF 		bsr		CRLF
011B2C 3A 01 00 00 		bra     .0002
                	.0003:
011B30 3E F0 11 22 		jsr		(OutputVec)
                	.0002:
011B34 57 2F 10 00 		pop		r2
011B38 57 FF 11 00 		pop     lr
011B3C 37 FF 01 00 		rtl
.0001:
011B40 02 00 00 6E 		cli
011B44 0A 10 FE FF 		ldi		r1,#-1
011B48 57 2F 10 00 		pop		r2
011B4C 57 FF 11 00 		pop     lr
011B50 37 FF 01 00 		rtl

                	KeybdGetCharDirect:
011B54 E7 EF 01 00 	    push    lr
011B58 67 E1 01 00 		push	r2
                	.0001:
011B5C 7C DC FF 00 		lc		r1,KEYBD
011B60 42 10 00 00 
011B64 FC 00 00 00 		and		r2,r1,#$8000
011B68 8C 20 00 00 
011B6C 3D 01 F8 FF 		beq		r2,.0001
011B70 7C DC FF 00 		lbu		r0,KEYBD+4		; clear keyboard strobe
011B74 41 00 08 00 
011B78 8C 20 00 10 		and		r2,r1,#$800	; is it keydown ?
011B7C 3D 11 F0 FF 		bne	    r2,.0001
011B80 8C 10 FE 01 		and		r1,r1,#$FF
011B84 41 20 68 22 		lbu		r2,KeybdEcho
011B88 3D 01 0C 00 		beq		r2,.gk1
011B8C 86 20 1A 00 		cmp		r2,r1,#CR
011B90 3D 11 06 00 		bne		r2,.gk2
011B94 39 E0 FD FF 		bsr		CRLF
011B98 3A 01 00 00 		bra     .gk1
                	.gk2:
011B9C 3E F0 11 22 		jsr		(OutputVec)
                	.gk1:
011BA0 57 2F 10 00 		pop		r2
011BA4 57 FF 11 00 		pop     lr
011BA8 37 FF 01 00 		rtl

                	;KeybdInit:
                	;	mfspr	r1,cr0		; turn off tmr mode
                	;	push	r1
                	;	mtspr	cr0,r0
                	;	ldi		r1,#33
                	;	sb		r1,LEDS
                	;	bsr		WaitForKeybdAck	; grab a byte from the keyboard
                	;	cmp		flg0,r1,#$AA	; did it send a ack ?
                	;	
                	;	ldi		r1,#$ff			; issue keyboard reset
                	;	bsr		SendByteToKeybd
                	;	ldi		r1,#38
                	;	sb		r1,LEDS
                	;	ldi		r1,#4
                	;	jsr		Sleep
                	;	ldi		r1,#KEYBD_DELAY	; delay a bit
                	kbdi5:
                	;	sub		r1,r1,#1
                	;	brnz	r1,kbdi5
                	;	ldi		r1,#34
                	;	sb		r1,LEDS
                	;	ldi		r1,#0xf0		; send scan code select
                	;	bsr		SendByteToKeybd
                	;	ldi		r1,#35
                	;	sb		r1,LEDS
                	;	ldi		r2,#0xFA
                	;	bsr		WaitForKeybdAck
                	;	cmp		fl0,r1,#$FA
                	;	bne		fl0,kbdi2
                	;	ldi		r1,#36
                	;	sb		r1,LEDS
                	;	ldi		r1,#2			; select scan code set#2
                	;	bsr		SendByteToKeybd
                	;	ldi		r1,#39
                	;	sb		r1,LEDS
                	;kbdi2:
                	;	ldi		r1,#45
                	;	sb		r1,LEDS
                	;	pop		r1				; turn back on tmr mode
                	;	mtspr	cr0,r1
                	;	rtl
                	
                	msgBadKeybd:
011BAC 4B 65 79 62 		db		"Keyboard not responding.",0
011BB0 6F 61 72 64 
011BB4 20 6E 6F 74 
011BB8 20 72 65 73 
011BBC 70 6F 6E 64 
011BC0 69 6E 67 2E 
011BC4 00          
                	
                	;SendByteToKeybd:
                	;	push	r2
                	;	sb		r1,KEYBD
                	;	ldi		r1,#40
                	;	sb		r1,LEDS
                	;	mfspr	r3,tick
                	;kbdi4:						; wait for transmit complete
                	;	mfspr	r4,tick
                	;	sub		r4,r4,r3
                	;	cmp		fl0,r4,#KEYBD_DELAY
                	;	bhi		fl0,kbdbad
                	;	ldi		r1,#41
                	;	sb		r1,LEDS
                	;	lbu		r1,KEYBD+1
                	;	and		fl0,r1,#64
                	;	brz		fl0,kbdi4
                	;	bra 	sbtk1
                	;kbdbad:
                	;	ldi		r1,#42
                	;	sb		r1,LEDS
                	;	lbu		r1,KeybdBad
                	;	brnz	r1,sbtk2
                	;	ldi		r1,#1
                	;	sb		r1,KeybdBad
                	;	ldi		r1,#43
                	;	sb		r1,LEDS
                	;	ldi		r1,#msgBadKeybd
                	;	bsr		DisplayStringCRLF
                	;sbtk1:
                	;	ldi		r1,#44
                	;	sb		r1,LEDS
                	;	pop		r2
                	;	rtl
                	;sbtk2:
                	;	bra sbtk1
                	
                	; Wait for keyboard to respond with an ACK (FA)
                	;
                	;WaitForKeybdAck:
                	;	ldi		r1,#64
                	;	sb		r1,LEDS
                	;	mfspr	r3,tick
                	;wkbdack1:
                	;	mfspr	r4,tick
                	;	sub		r4,r4,r3
                	;	cmp		fl0,r4,#KEYBD_DELAY
                	;	bhi		fl0,wkbdbad
                	;	ldi		r1,#65
                	;	sb		r1,LEDS
                	;	lb		r1,KEYBD+1				; check keyboard status for key
                	;	brpl	r1,wkbdack1				; no key available, go back
                	;	lbu		r1,KEYBD				; get the scan code
                	;	sb		r0,KEYBD+1				; clear recieve register
                	;wkbdbad:
                	;	rtl
                	
                	KeybdInit:
011BC5 00 00 00 E7 	    push    lr
011BC9 EF 01 00    
011BCC 0A 30 0A 00 		ldi		r3,#5
                	.0001:
011BD0 B9 37 00 00 		bsr		KeybdRecvByte	; Look for $AA
011BD4 BD 40 06 00 		bmi		r1,.0002
011BD8 86 20 54 01 		cmp		r2,r1,#$AA		;
011BDC 3D 01 20 00 		beq		r2,.config
                	.0002:
011BE0 39 A1 00 00 		bsr		Wait10ms
011BE4 0A 10 FE FF 		ldi		r1,#-1			; send reset code to keyboard
011BE8 7C DC FF 00 		sb		r1,KEYBD+1		; write to status reg to clear TX state
011BEC 60 10 02 00 
011BF0 39 9F 00 00 		bsr		Wait10ms
011BF4 0A 10 FE 01 		ldi		r1,#$FF
011BF8 B9 9C 00 00 		bsr		KeybdSendByte	; now write to transmit register
011BFC 39 3A 00 00 		bsr		KeybdWaitTx		; wait until no longer busy
011C00 B9 31 00 00 		bsr		KeybdRecvByte	; look for an ACK ($FA)
011C04 86 20 F4 01 		cmp		r2,r1,#$FA
011C08 B9 30 00 00 		bsr		KeybdRecvByte
011C0C 86 20 F8 01 		cmp		r2,r1,#$FC		; reset error ?
011C10 3D 01 1A 00 		beq		r2,.tryAgain
011C14 86 20 54 01 		cmp		r2,r1,#$AA		; reset complete okay ?
011C18 3D 11 16 00 		bne		r2,.tryAgain
                	.config:
011C1C 0A 10 E0 01 		ldi		r1,#$F0			; send scan code select
011C20 7C DC FF 00 		sc		r1,LEDS
011C24 61 10 00 0C 
011C28 B9 96 00 00 		bsr		KeybdSendByte
011C2C 39 34 00 00 		bsr		KeybdWaitTx
011C30 BD 40 0A 00 		bmi		r1,.tryAgain
011C34 39 2B 00 00 		bsr		KeybdRecvByte	; wait for response from keyboard
011C38 BD 40 06 00 		bmi		r1,.tryAgain
011C3C 86 20 F4 01 		cmp		r2,r1,#$FA
011C40 3D 01 10 00 		beq		r2,.0004
                	.tryAgain:
011C44 95 31 02 00 	    subui   r3,r3,#1
011C48 BD 11 C4 FF 		bne	    r3,.0001
                	.keybdErr:
011C4C 7C 01 00 00 		ldi		r1,#msgBadKeybd
011C50 0A 10 58 37 
011C54 39 B7 FD FF 		bsr		DisplayString
011C58 57 FF 11 00 		pop     lr
011C5C 37 FF 01 00 		rtl
.0004:
011C60 0A 10 04 00 		ldi		r1,#2			; select scan code set #2
011C64 39 8F 00 00 		bsr		KeybdSendByte
011C68 B9 2C 00 00 		bsr		KeybdWaitTx
011C6C BD 40 EC FF 		bmi		r1,.tryAgain
011C70 57 FF 11 00 		pop     lr
011C74 37 FF 01 00 		rtl

                	; Get the keyboard status
                	;
                	KeybdGetStatus:
011C78 7C DC FF 00 		lb		r1,KEYBD+1
011C7C 40 10 02 00 
011C80 37 FF 01 00 		rtl
    push    r2
011C84 67 E1 01 00 
011C88 41 2C 28 04 	    lbu     r2,TCB_hJCB[tr]
011C8C 06 11 66 00 	    cmp     r1,r2,#NR_JCB
011C90 BD 30 2C 00 	    bge     r1,.0001
011C94 97 FF FF FF 	    mulu    r2,#JCB_Size
011C98 7C C5 00 00 	    addui   r2,r2,#JCB_Array
011C9C 14 21 00 00 
011CA0 E7 E1 01 00 	    push    r3
011CA4 67 E2 01 00 	    push    r4
011CA8 E7 EF 01 00 	    push    lr
011CAC B9 0C 05 00 	    bsr     LockSYS
011CB0 41 11 70 08 	    lbu     r1,JCB_KeybdHead[r2]
011CB4 41 31 80 08 	    lbu     r3,JCB_KeybdTail[r2]
011CB8 B9 0E 05 00 	    bsr     UnlockSYS
011CBC 82 40 06 2C 	    cmpu    r4,r1,r3
011CC0 3D 02 0E 00 	    beq     r4,.0002
011CC4 0A 10 FE FF 	    ldi     r1,#-1
011CC8 57 FF 11 00 	    pop     lr
011CCC 57 4F 10 00 	    pop     r4
011CD0 57 3F 10 00 	    pop     r3
011CD4 57 2F 10 00 	    pop     r2
011CD8 37 FF 01 00 	    rtl
.0002:
011CDC 57 FF 11 00 	    pop     lr
011CE0 57 4F 10 00 	    pop     r4
011CE4 57 3F 10 00 	    pop     r3
                	.0001:
011CE8 0A 10 00 00 	    ldi     r1,#0   ; no scancode available
011CEC 57 2F 10 00 	    pop     r2
011CF0 37 FF 01 00 	    rtl

                	; Get the scancode from the keyboard port
                	;
                	KeybdGetScancode:
011CF4 7C DC FF 00 		lbu		r1,KEYBD				; get the scan code
011CF8 41 10 00 00 
011CFC 7C DC FF 00 		sb		r0,KEYBD+1				; clear receive register
011D00 60 00 02 00 
011D04 37 FF 01 00 		rtl
    push    r2
011D08 67 E1 01 00 
011D0C 41 2C 28 04 	    lbu     r2,TCB_hJCB[tr]
011D10 06 11 66 00 	    cmp     r1,r2,#NR_JCB
011D14 BD 30 36 00 	    bge     r1,.0001
011D18 97 FF FF FF 	    mulu    r2,#JCB_Size
011D1C 7C C5 00 00 	    addui   r2,r2,#JCB_Array
011D20 14 21 00 00 
011D24 E7 E1 01 00 	    push    r3
011D28 67 E2 01 00 	    push    r4
011D2C E7 EF 01 00 	    push    lr
011D30 39 FC 04 00 	    bsr     LockSYS
011D34 41 11 70 08 	    lbu     r1,JCB_KeybdHead[r2]
011D38 41 31 80 08 	    lbu     r3,JCB_KeybdTail[r2]
011D3C 82 40 06 2C 	    cmpu    r4,r1,r3
011D40 3D 02 18 00 	    beq     r4,.0002
011D44 47 41 A0 08 	    lea     r4,JCB_KeybdBuffer[r2]
011D48 49 12 06 00 	    lbu     r1,[r4+r3]
011D4C 94 31 02 00 	    addui   r3,r3,#1
011D50 8C 31 3E 00 	    and     r3,r3,#31 ; mod 32
011D54 60 31 80 08 	    sb      r3,JCB_KeybdTail[r2]
011D58 B9 FA 04 00 	    bsr     UnlockSYS
011D5C 57 FF 11 00 	    pop     lr
011D60 57 4F 10 00 	    pop     r4
011D64 57 3F 10 00 	    pop     r3
011D68 57 2F 10 00 	    pop     r2
011D6C 37 FF 01 00 	    rtl
.0002:
011D70 B9 F7 04 00 	    bsr     UnlockSYS
011D74 57 FF 11 00 	    pop     lr
011D78 57 4F 10 00 	    pop     r4
011D7C 57 3F 10 00 	    pop     r3
                	.0001:
011D80 0A 10 00 00 	    ldi     r1,#0   ; no scancode available
011D84 57 2F 10 00 	    pop     r2
011D88 37 FF 01 00 	    rtl

                	
                	; Recieve a byte from the keyboard, used after a command is sent to the
                	; keyboard in order to wait for a response.
                	;
                	KeybdRecvByte:
011D8C E7 EF 01 00 	    push    lr
011D90 E7 E1 01 00 		push	r3
011D94 0A 30 C8 00 		ldi		r3,#100			; wait up to 1s
                	.0003:
011D98 39 DC FF FF 		bsr		KeybdGetStatus	; wait for response from keyboard
011D9C BD 40 10 00 		bmi		r1,.0004		; is input buffer full ? yes, branch
011DA0 39 69 00 00 		bsr		Wait10ms		; wait a bit
011DA4 95 31 02 00 		subui   r3,r3,#1
011DA8 BD 11 F8 FF 		bne     r3,.0003		; go back and try again
011DAC 57 3F 10 00 		pop		r3				; timeout
011DB0 0A 10 FE FF 		ldi		r1,#-1			; return -1
011DB4 57 FF 11 00 		pop     lr
011DB8 37 FF 01 00 		rtl
.0004:
011DBC 39 E7 FF FF 		bsr		KeybdGetScancode
011DC0 57 3F 10 00 		pop		r3
011DC4 57 FF 11 00 		pop     lr
011DC8 37 FF 01 00 		rtl

                	
                	; Wait until the keyboard transmit is complete
                	; Returns .CF = 1 if successful, .CF=0 timeout
                	;
                	KeybdWaitTx:
011DCC E7 EF 01 00 	    push    lr
011DD0 67 E1 01 00 		push	r2
011DD4 E7 E1 01 00 	    push    r3
011DD8 0A 30 C8 00 		ldi		r3,#100			; wait a max of 1s
                	.0001:
011DDC B9 D3 FF FF 		bsr		KeybdGetStatus
011DE0 8C 10 80 00 		and		r1,r1,#$40		; check for transmit complete bit
011DE4 BD 10 12 00 		bne	    r1,.0002		; branch if bit set
011DE8 39 60 00 00 		bsr		Wait10ms		; delay a little bit
011DEC 95 31 02 00 		subui   r3,r3,#1
011DF0 BD 11 F6 FF 		bne	    r3,.0001		; go back and try again
011DF4 57 3F 10 00 		pop		r3
011DF8 57 2F 10 00 	    pop     r2			    ; timed out
011DFC 0A 10 FE FF 		ldi		r1,#-1			; return -1
011E00 57 FF 11 00 		pop     lr
011E04 37 FF 01 00 		rtl
.0002:
011E08 57 3F 10 00 		pop		r3
011E0C 57 2F 10 00 	    pop     r2			    ; wait complete, return 
011E10 0A 10 00 00 		ldi		r1,#0			; return 0
011E14 57 FF 11 00 		pop     lr
011E18 37 FF 01 00 		rtl

                	KeybdGetCharNoWait:
011E1C 60 00 74 22 		sb		r0,KeybdWaitFlag
011E20 BA 01 00 00 		bra		KeybdGetChar
                	
                	KeybdGetCharWait:
011E24 0A 10 FE FF 		ldi		r1,#-1
011E28 60 10 74 22 		sb		r1,KeybdWaitFlag
                	
                	;
                	; KeyState2
                	; 876543210
                	; ||||||||+ = alt
                	; |||||||+- =
                	; ||||||+-- = control
                	; |||||+--- = numlock
                	; ||||+---- = capslock
                	; |||+----- = scrolllock
                	; ||+------ =
                	; |+------- = 
                	; +-------- = extended
                	;
                	KeybdGetChar:
011E2C E7 EF 01 00 	    push    lr
011E30 67 E1 01 00 		push	r2
011E34 E7 E1 01 00 	    push    r3
                	.0003:
011E38 39 C8 FF FF 		bsr		KeybdGetStatus			; check keyboard status for key available
011E3C BD 40 10 00 		bmi		r1,.0006				; yes, go process
011E40 40 10 74 22 		lb		r1,KeybdWaitFlag		; are we willing to wait for a key ?
011E44 BD 40 FA FF 		bmi		r1,.0003				; yes, branch back
011E48 0A 10 FE FF 		ldi		r1,#-1					; flag no char available
011E4C 57 3F 10 00 		pop		r3
011E50 57 2F 10 00 	    pop     r2
011E54 57 FF 11 00 	    pop     lr
011E58 37 FF 01 00 		rtl
.0006:
011E5C 39 D3 FF FF 		bsr		KeybdGetScancode
                	.0001:
011E60 0A 20 02 00 		ldi		r2,#1
011E64 7C DC FF 00 		sb		r2,LEDS
011E68 60 20 00 0C 
011E6C 86 20 E0 01 		cmp		r2,r1,#SC_KEYUP
011E70 3D 01 70 00 		beq		r2,.doKeyup
011E74 86 20 C0 01 		cmp		r2,r1,#SC_EXTEND
011E78 3D 01 72 00 		beq		r2,.doExtend
011E7C 86 20 28 00 		cmp		r2,r1,#$14				; code for CTRL
011E80 3D 01 76 00 		beq		r2,.doCtrl
011E84 86 20 24 00 		cmp		r2,r1,#$12				; code for left shift
011E88 3D 01 B4 00 		beq		r2,.doShift
011E8C 86 20 B2 00 		cmp		r2,r1,#$59				; code for right-shift
011E90 3D 01 B0 00 		beq		r2,.doShift
011E94 86 20 EE 00 		cmp		r2,r1,#SC_NUMLOCK
011E98 3D 01 C2 00 		beq		r2,.doNumLock
011E9C 86 20 B0 00 		cmp		r2,r1,#SC_CAPSLOCK
011EA0 3D 01 C8 00 		beq		r2,.doCapsLock
011EA4 86 20 FC 00 		cmp		r2,r1,#SC_SCROLLLOCK
011EA8 3D 01 CE 00 		beq		r2,.doScrollLock
011EAC 86 20 22 00 		cmp     r2,r1,#SC_ALT
011EB0 3D 01 74 00 		beq     r2,.doAlt
011EB4 40 20 70 22 		lb		r2,KeyState1			; check key up/down
011EB8 60 00 70 22 		sb		r0,KeyState1			; clear keyup status
011EBC 3D 11 BE FF 		bne	    r2,.0003				; ignore key up
011EC0 86 20 1A 00 		cmp     r2,r1,#SC_TAB
011EC4 3D 01 82 00 		beq     r2,.doTab
                	.0013:
011EC8 40 20 72 22 		lb		r2,KeyState2
011ECC 0C 31 00 01 		and		r3,r2,#$80				; is it extended code ?
011ED0 BD 01 0E 00 		beq		r3,.0010
011ED4 0C 31 FE 00 		and		r3,r2,#$7f				; clear extended bit
011ED8 60 30 72 22 		sb		r3,KeyState2
011EDC 60 00 70 22 		sb		r0,KeyState1			; clear keyup
011EE0 7C 01 00 00 		lbu		r1,keybdExtendedCodes[r1]
011EE4 C1 10 C0 48 
011EE8 BA 09 00 00 		bra		.0008
                	.0010:
011EEC 40 20 72 22 		lb		r2,KeyState2
011EF0 0C 31 08 00 		and		r3,r2,#$04				; is it CTRL code ?
011EF4 BD 01 0A 00 		beq		r3,.0009
011EF8 8C 10 FE 00 		and		r1,r1,#$7F
011EFC 7C 01 00 00 		lbu		r1,keybdControlCodes[r1]
011F00 C1 10 C0 47 
011F04 3A 06 00 00 		bra		.0008
                	.0009:
011F08 40 20 72 22 		lb		r2,KeyState2
011F0C 0C 31 02 00 		and		r3,r2,#$01				; is it shift down ?
011F10 BD 01 08 00 		beq  	r3,.0007
011F14 7C 01 00 00 		lbu		r1,shiftedScanCodes[r1]
011F18 C1 10 C0 45 
011F1C 3A 03 00 00 		bra		.0008
                	.0007:
011F20 7C 01 00 00 		lbu		r1,unshiftedScanCodes[r1]
011F24 C1 10 C0 43 
011F28 0A 20 04 00 		ldi		r2,#2
011F2C 7C DC FF 00 		sb		r2,LEDS
011F30 60 20 00 0C 
                	.0008:
011F34 0A 20 06 00 		ldi		r2,#3
011F38 7C DC FF 00 		sb		r2,LEDS
011F3C 60 20 00 0C 
011F40 57 3F 10 00 		pop		r3
011F44 57 2F 10 00 	    pop     r2
011F48 57 FF 11 00 	    pop     lr
011F4C 37 FF 01 00 		rtl
.doKeyup:
011F50 0A 10 FE FF 		ldi		r1,#-1
011F54 60 10 70 22 		sb		r1,KeyState1
011F58 3A DC FF FF 		bra		.0003
                	.doExtend:
011F5C 41 10 72 22 		lbu		r1,KeyState2
011F60 8D 10 00 01 		or		r1,r1,#$80
011F64 60 10 72 22 		sb		r1,KeyState2
011F68 3A DA FF FF 		bra		.0003
                	.doCtrl:
011F6C 40 10 70 22 		lb		r1,KeyState1
011F70 60 00 70 22 		sb		r0,KeyState1
011F74 BD 30 0A 00 		bpl		r1,.0004
011F78 40 10 72 22 		lb		r1,KeyState2
011F7C 8C 10 F6 FF 		and		r1,r1,#-5
011F80 60 10 72 22 		sb		r1,KeyState2
011F84 BA D6 FF FF 		bra		.0003
                	.0004:
011F88 40 10 72 22 		lb		r1,KeyState2
011F8C 8D 10 08 00 		or		r1,r1,#4
011F90 60 10 72 22 		sb		r1,KeyState2
011F94 BA D4 FF FF 		bra		.0003
                	.doAlt:
011F98 40 10 70 22 		lb		r1,KeyState1
011F9C 60 00 70 22 		sb		r0,KeyState1
011FA0 BD 30 0C 00 		bpl		r1,.0011
011FA4 40 10 72 22 	    lb      r1,KeyState2
011FA8 40 10 72 22 		lb		r1,KeyState2
011FAC 8C 10 FC FF 		and		r1,r1,#-2
011FB0 60 10 72 22 		sb		r1,KeyState2
011FB4 BA D0 FF FF 		bra		.0003
                	.0011:
011FB8 40 10 72 22 		lb		r1,KeyState2
011FBC 8D 10 02 00 		or		r1,r1,#1
011FC0 60 10 72 22 		sb		r1,KeyState2
011FC4 BA CE FF FF 		bra		.0003
                	.doTab:
011FC8 E7 E0 01 00 	    push    r1
011FCC 40 10 72 22 	    lb      r1,KeyState2
011FD0 8C 10 02 00 	    and     r1,r1,#1                 ; is ALT down ?
011FD4 BD 00 0A 00 	    beq     r1,.0012
011FD8 7C C0 00 00 	    inc     iof_switch
011FDC 64 10 00 03 
011FE0 57 1F 10 00 	    pop     r1
011FE4 BA CA FF FF 	    bra     .0003
                	.0012:
011FE8 57 1F 10 00 	    pop     r1
011FEC BA DB FF FF 	    bra     .0013
                	.doShift:
011FF0 40 10 70 22 		lb		r1,KeyState1
011FF4 60 00 70 22 		sb		r0,KeyState1
011FF8 BD 30 0A 00 		bpl		r1,.0005
011FFC 40 10 72 22 		lb		r1,KeyState2
012000 8C 10 FC FF 		and		r1,r1,#-2
012004 60 10 72 22 		sb		r1,KeyState2
012008 3A C6 FF FF 		bra		.0003
                	.0005:
01200C 40 10 72 22 		lb		r1,KeyState2
012010 8D 10 02 00 		or		r1,r1,#1
012014 60 10 72 22 		sb		r1,KeyState2
012018 3A C4 FF FF 		bra		.0003
                	.doNumLock:
01201C 40 10 72 22 		lb		r1,KeyState2
012020 8E 10 20 00 		eor		r1,r1,#16
012024 60 10 72 22 		sb		r1,KeyState2
012028 39 06 00 00 		bsr		KeybdSetLEDStatus
01202C BA C1 FF FF 		bra		.0003
                	.doCapsLock:
012030 40 10 72 22 		lb		r1,KeyState2
012034 8E 10 40 00 		eor		r1,r1,#32
012038 60 10 72 22 		sb		r1,KeyState2
01203C B9 03 00 00 		bsr		KeybdSetLEDStatus
012040 3A BF FF FF 		bra		.0003
                	.doScrollLock:
012044 40 10 72 22 		lb		r1,KeyState2
012048 8E 10 80 00 		eor		r1,r1,#64
01204C 60 10 72 22 		sb		r1,KeyState2
012050 39 01 00 00 		bsr		KeybdSetLEDStatus
012054 BA BC FF FF 		bra		.0003
                	
                	KeybdSetLEDStatus:
012058 E7 EF 01 00 	    push    lr
01205C 67 E1 01 00 		push	r2
012060 E7 E1 01 00 	    push    r3
012064 60 00 76 22 		sb		r0,KeybdLEDs
012068 40 10 72 22 		lb		r1,KeyState2
01206C 8C 20 20 00 		and		r2,r1,#16
012070 3D 01 06 00 		beq		r2,.0002
012074 0A 30 04 00 		ldi		r3,#2
012078 60 30 76 22 		sb		r3,KeybdLEDs
                	.0002:
01207C 8C 20 40 00 		and		r2,r1,#32
012080 3D 01 08 00 		beq		r2,.0003
012084 40 30 76 22 		lb		r3,KeybdLEDs
012088 8D 31 08 00 		or		r3,r3,#4
01208C 60 30 76 22 		sb		r3,KeybdLEDs
                	.0003:
012090 8C 20 80 00 		and		r2,r1,#64
012094 3D 01 08 00 		beq		r2,.0004
012098 40 30 76 22 		lb		r3,KeybdLEDs
01209C 8D 31 02 00 		or		r3,r3,#1
0120A0 60 30 76 22 		sb		r3,KeybdLEDs
                	.0004:
0120A4 0A 10 DA 01 		ldi		r1,#$ED
0120A8 B9 06 00 00 		bsr		KeybdSendByte
0120AC 39 A4 FF FF 		bsr		KeybdWaitTx
0120B0 B9 9B FF FF 		bsr		KeybdRecvByte
0120B4 BD 40 0C 00 		bmi		r1,.0001
0120B8 86 20 F4 01 		cmp		r2,r1,#$FA
0120BC 40 10 76 22 		lb		r1,KeybdLEDs
0120C0 B9 03 00 00 		bsr		KeybdSendByte
0120C4 39 A1 FF FF 		bsr		KeybdWaitTx
0120C8 B9 98 FF FF 		bsr		KeybdRecvByte
                	.0001:
0120CC 57 3F 10 00 		pop		r3
0120D0 57 2F 10 00 	    pop     r2
0120D4 57 FF 11 00 	    pop     lr
0120D8 37 FF 01 00 		rtl

                	KeybdSendByte:
0120DC 7C DC FF 00 		sb		r1,KEYBD
0120E0 60 10 00 00 
0120E4 37 FF 01 00 		rtl
	
                	Wait10ms:
0120E8 E7 E1 01 00 		push	r3
0120EC 67 E2 01 00 	    push    r4
0120F0 02 30 08 3E 		mfspr	r3,tick					; get orginal count
                	.0001:
0120F4 02 40 08 3E 		mfspr	r4,tick
0120F8 02 42 06 0A 		sub		r4,r4,r3
0120FC 3D 42 08 00 		blt  	r4,.0002				; shouldn't be -ve unless counter overflowed
012100 FC 03 00 00 		cmpu	r4,r4,#250000			; about 10ms at 25 MHz
012104 16 42 20 A1 
012108 3D 42 F6 FF 		blt		r4,.0001
                	.0002:
01210C 57 4F 10 00 		pop		r4
012110 57 3F 10 00 	    pop     r3
012114 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; KeybdIRQ
                	;     Keyboard interrupt processing routine. Must be short.
                	; Grab a scancode from the keyboard and place it into the keyboard buffer
                	; for the job with the I/O focus.
                	;------------------------------------------------------------------------------
                	
                	KeybdIRQ:
012118 FC 00 00 00 	    ldi     sp,#CPU0_IRQ_STACK
01211C 0A E0 01 10 
012120 E7 EF 01 00 	    push    lr
012124 E7 E0 01 00 	    push    r1
012128 67 E1 01 00 	    push    r2
01212C E7 E1 01 00 	    push    r3
012130 67 E2 01 00 	    push    r4
012134 7C DC FF 00 	    lb      r1,KEYBD+1      ; get the keyboard status
012138 40 10 02 00 
01213C BD 20 40 00 	    bgt     r1,.0001        ; is there a scancode present ?
012140 7C DC FF 00 		lbu		r1,KEYBD		; get the scan code
012144 41 10 00 00 
012148 7C DC FF 00 		sb		r0,KEYBD+1		; clear receive register (acknowledges interrupt)
01214C 60 00 02 00 
012150 7C C0 00 00 		lw      r2,IOFocusNdx   ; get task with I/O focus
012154 46 20 50 00 
012158 3D 01 32 00 		beq     r2,.0001
01215C 40 21 28 04 	    lb      r2,TCB_hJCB[r2] ; get JCB handle
012160 96 31 66 00 	    cmpu    r3,r3,#NR_JCB   ; make sure valid handle
012164 BD 31 2C 00 	    bge     r3,.0001
012168 17 21 00 0A 	    mulu    r2,r2,#JCB_Size ; and convert it to a pointer
01216C 7C C5 00 00 	    addui   r2,r2,#JCB_Array
012170 14 21 00 00 
012174 B9 73 04 00 	    bsr     LockSYS
012178 41 31 70 08 	    lbu     r3,JCB_KeybdHead[r2]  ; get head index of keyboard buffer
01217C 41 41 80 08 	    lbu     r4,JCB_KeybdTail[r2]  ; get tail index of keyboard buffer
012180 94 31 02 00 	    addui   r3,r3,#1        ; advance head      
012184 8C 31 3E 00 	    and     r3,r3,#31       ; mod 32
012188 82 51 08 0C 	    cmp     r5,r3,r4        ; is there room in the buffer ?
01218C BD 02 24 00 	    beq     r5,.0002        ; if not, newest chars will be lost
012190 60 31 70 08 	    sb      r3,JCB_KeybdHead[r2]
012194 47 21 A0 08 	    lea     r2,JCB_KeybdBuffer[r2]
012198 68 11 06 00 	    sb      r1,[r2+r3]      ; save off the scan code
01219C 39 72 04 00 	    bsr     UnlockSYS
0121A0 40 20 72 22 	    lb      r2,KeyState2    ; check for ALT-tab
0121A4 0C 21 02 00 	    and     r2,r2,#1        ; is ALT down ?
0121A8 3D 01 0A 00 	    beq     r2,.0001        
0121AC 86 20 1A 00 	    cmp     r2,r1,#SC_TAB
0121B0 3D 11 06 00 	    bne     r2,.0001
0121B4 7C C0 00 00 	    inc     iof_switch      ; flag an I/O focus switch
0121B8 64 10 00 03 
                	.0001:
0121BC 57 4F 10 00 	    pop     r4
0121C0 57 3F 10 00 	    pop     r3
0121C4 57 2F 10 00 	    pop     r2
0121C8 57 1F 10 00 		pop     r1
0121CC 57 FF 11 00 		pop     lr
0121D0 02 E0 3F 6E 	    rti
                	.0002:
0121D4 39 6B 04 00 	    bsr     UnlockSYS
0121D8 BA FC FF FF 	    bra     .0001
                	KeybdIRQ1:
0121DC 02 E0 3F 6E 	    rti
                	
                	
                		;--------------------------------------------------------------------------
                		; PS2 scan codes to ascii conversion tables.
                		;--------------------------------------------------------------------------
                		;
                		align	16                	
                	unshiftedScanCodes:
0121E0 2E A9 2E A5 		.byte	$2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
0121E4 A3 A1 A2 AC 
0121E8 2E AA A8 A6 		.byte	$2e,$aa,$a8,$a6,$a4,$09,$60,$2e
0121EC A4 09 60 2E 
0121F0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$71,$31,$2e
0121F4 2E 71 31 2E 
0121F8 2E 2E 7A 73 		.byte	$2e,$2e,$7a,$73,$61,$77,$32,$2e
0121FC 61 77 32 2E 
012200 2E 63 78 64 		.byte	$2e,$63,$78,$64,$65,$34,$33,$2e
012204 65 34 33 2E 
012208 2E 20 76 66 		.byte	$2e,$20,$76,$66,$74,$72,$35,$2e
01220C 74 72 35 2E 
012210 2E 6E 62 68 		.byte	$2e,$6e,$62,$68,$67,$79,$36,$2e
012214 67 79 36 2E 
012218 2E 2E 6D 6A 		.byte	$2e,$2e,$6d,$6a,$75,$37,$38,$2e
01221C 75 37 38 2E 
012220 2E 2C 6B 69 		.byte	$2e,$2c,$6b,$69,$6f,$30,$39,$2e
012224 6F 30 39 2E 
012228 2E 2E 2F 6C 		.byte	$2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
01222C 3B 70 2D 2E 
012230 2E 2E 27 2E 		.byte	$2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
012234 5B 3D 2E 2E 
012238 AD 2E 0D 5D 		.byte	$ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
01223C 2E 5C 2E 2E 
012240 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
012244 2E 2E 08 2E 
012248 2E 95 2E 93 		.byte	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
01224C 94 2E 2E 2E 
012250 98 7F 92 2E 		.byte	$98,$7f,$92,$2e,$91,$90,$1b,$af
012254 91 90 1B AF 
012258 AB 2E 97 2E 		.byte	$ab,$2e,$97,$2e,$2e,$96,$ae,$2e
01225C 2E 96 AE 2E 
                	
012260 2E 2E 2E A7 		.byte	$2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
012264 2E 2E 2E 2E 
012268 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01226C 2E 2E 2E 2E 
012270 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012274 2E 2E 2E 2E 
012278 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01227C 2E 2E 2E 2E 
012280 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012284 2E 2E 2E 2E 
012288 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01228C 2E 2E 2E 2E 
012290 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012294 2E 2E 2E 2E 
012298 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01229C 2E 2E 2E 2E 
0122A0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0122A4 2E 2E 2E 2E 
0122A8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0122AC 2E 2E 2E 2E 
0122B0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0122B4 2E 2E 2E 2E 
0122B8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0122BC 2E 2E 2E 2E 
0122C0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0122C4 2E 2E 2E 2E 
0122C8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0122CC 2E 2E 2E 2E 
0122D0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0122D4 2E 2E 2E 2E 
0122D8 2E 2E FA 2E 		.byte	$2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
0122DC 2E 2E 2E 2E 
                	
                	shiftedScanCodes:
0122E0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0122E4 2E 2E 2E 2E 
0122E8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
0122EC 2E 09 7E 2E 
0122F0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$51,$21,$2e
0122F4 2E 51 21 2E 
0122F8 2E 2E 5A 53 		.byte	$2e,$2e,$5a,$53,$41,$57,$40,$2e
0122FC 41 57 40 2E 
012300 2E 43 58 44 		.byte	$2e,$43,$58,$44,$45,$24,$23,$2e
012304 45 24 23 2E 
012308 2E 20 56 46 		.byte	$2e,$20,$56,$46,$54,$52,$25,$2e
01230C 54 52 25 2E 
012310 2E 4E 42 48 		.byte	$2e,$4e,$42,$48,$47,$59,$5e,$2e
012314 47 59 5E 2E 
012318 2E 2E 4D 4A 		.byte	$2e,$2e,$4d,$4a,$55,$26,$2a,$2e
01231C 55 26 2A 2E 
012320 2E 3C 4B 49 		.byte	$2e,$3c,$4b,$49,$4f,$29,$28,$2e
012324 4F 29 28 2E 
012328 2E 3E 3F 4C 		.byte	$2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
01232C 3A 50 5F 2E 
012330 2E 2E 22 2E 		.byte	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
012334 7B 2B 2E 2E 
012338 2E 2E 0D 7D 		.byte	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
01233C 2E 7C 2E 2E 
012340 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
012344 2E 2E 08 2E 
012348 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01234C 2E 2E 2E 2E 
012350 2E 7F 2E 2E 		.byte	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
012354 2E 2E 1B 2E 
012358 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01235C 2E 2E 2E 2E 
                	
012360 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012364 2E 2E 2E 2E 
012368 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01236C 2E 2E 2E 2E 
012370 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012374 2E 2E 2E 2E 
012378 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01237C 2E 2E 2E 2E 
012380 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012384 2E 2E 2E 2E 
012388 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01238C 2E 2E 2E 2E 
012390 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012394 2E 2E 2E 2E 
012398 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01239C 2E 2E 2E 2E 
0123A0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123A4 2E 2E 2E 2E 
0123A8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123AC 2E 2E 2E 2E 
0123B0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123B4 2E 2E 2E 2E 
0123B8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123BC 2E 2E 2E 2E 
0123C0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123C4 2E 2E 2E 2E 
0123C8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123CC 2E 2E 2E 2E 
0123D0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123D4 2E 2E 2E 2E 
0123D8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123DC 2E 2E 2E 2E 
                	
                	; control
                	keybdControlCodes:
0123E0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0123E4 2E 2E 2E 2E 
0123E8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
0123EC 2E 09 7E 2E 
0123F0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$11,$21,$2e
0123F4 2E 11 21 2E 
0123F8 2E 2E 1A 13 		.byte	$2e,$2e,$1a,$13,$01,$17,$40,$2e
0123FC 01 17 40 2E 
012400 2E 03 18 04 		.byte	$2e,$03,$18,$04,$05,$24,$23,$2e
012404 05 24 23 2E 
012408 2E 20 16 06 		.byte	$2e,$20,$16,$06,$14,$12,$25,$2e
01240C 14 12 25 2E 
012410 2E 0E 02 08 		.byte	$2e,$0e,$02,$08,$07,$19,$5e,$2e
012414 07 19 5E 2E 
012418 2E 2E 0D 0A 		.byte	$2e,$2e,$0d,$0a,$15,$26,$2a,$2e
01241C 15 26 2A 2E 
012420 2E 3C 0B 09 		.byte	$2e,$3c,$0b,$09,$0f,$29,$28,$2e
012424 0F 29 28 2E 
012428 2E 3E 3F 0C 		.byte	$2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
01242C 3A 10 5F 2E 
012430 2E 2E 22 2E 		.byte	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
012434 7B 2B 2E 2E 
012438 2E 2E 0D 7D 		.byte	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
01243C 2E 7C 2E 2E 
012440 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
012444 2E 2E 08 2E 
012448 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01244C 2E 2E 2E 2E 
012450 2E 7F 2E 2E 		.byte	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
012454 2E 2E 1B 2E 
012458 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01245C 2E 2E 2E 2E 
                	
                	keybdExtendedCodes:
012460 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
012464 A3 A1 A2 2E 
012468 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01246C 2E 2E 2E 2E 
012470 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012474 2E 2E 2E 2E 
012478 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01247C 2E 2E 2E 2E 
012480 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012484 2E 2E 2E 2E 
012488 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01248C 2E 2E 2E 2E 
012490 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
012494 2E 2E 2E 2E 
012498 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01249C 2E 2E 2E 2E 
0124A0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0124A4 2E 2E 2E 2E 
0124A8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0124AC 2E 2E 2E 2E 
0124B0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0124B4 2E 2E 2E 2E 
0124B8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0124BC 2E 2E 2E 2E 
0124C0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0124C4 2E 2E 2E 2E 
0124C8 2E 95 2E 93 		.byte	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
0124CC 94 2E 2E 2E 
0124D0 98 99 92 2E 		.byte	$98,$99,$92,$2e,$91,$90,$2e,$2e
0124D4 91 90 2E 2E 
0124D8 2E 2E 97 2E 		.byte	$2e,$2e,$97,$2e,$2e,$96,$2e,$2e
0124DC 2E 96 2E 2E 
                	
                	
                	; ============================================================================
                	; I2C interface to RTCC
                	; ============================================================================
                	
                	I2C_INIT:
0124E0 E7 E0 01 00 	    push    r1
0124E4 67 E1 01 00 	    push    r2
0124E8 7C DC FF 00 		ldi		r2,#I2C_MASTER
0124EC 0A 20 00 1C 
0124F0 60 01 04 00 		sb		r0,I2C_CONTROL[r2]		; disable the contoller
0124F4 60 01 02 00 		sb		r0,I2C_PRESCALE_HI[r2]	; set clock divisor for 100kHz
0124F8 0A 10 C6 00 		ldi		r1,#99					; 24=400kHz, 99=100KHz
0124FC 60 11 00 00 		sb		r1,I2C_PRESCALE_LO[r2]
012500 0A 10 00 01 		ldi		r1,#$80					; controller enable bit
012504 60 11 04 00 		sb		r1,I2C_CONTROL[r2]
012508 57 2F 10 00 		pop		r2
01250C 57 1F 10 00 	    pop     r1
012510 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; I2C Read
                	;
                	; Parameters:
                	; 	r1 = device ($6F for RTCC)
                	; 	r2 = register to read
                	; Returns
                	; 	r1 = register value $00 to $FF if successful, else r1 = -1 on error
                	;------------------------------------------------------------------------------
                	;
                	I2C_READ:
012514 E7 EF 01 00 	    push    lr
012518 67 E1 01 00 		push	r2
01251C E7 E1 01 00 	    push    r3
012520 67 E2 01 00 	    push    r4
012524 82 10 02 70 		asl		r1,r1,#1				; clear rw bit for write
                	;	or		r1,r1,#1				; set rw bit for a read
012528 82 40 00 1A 		mov		r4,r1					; save device address in r4
01252C 02 31 00 1A 		mov		r3,r2
                		; transmit device #
012530 7C DC FF 00 		ldi		r2,#I2C_MASTER
012534 0A 20 00 1C 
012538 60 11 06 00 		sb		r1,I2C_TX[r2]
01253C 0A 10 20 01 		ldi		r1,#$90					; STA($80) and WR($10) bits set
012540 60 11 08 00 		sb		r1,I2C_CMD[r2]
012544 B9 1F 00 00 		bsr		I2C_WAIT_TC				; wait for transmit to complete
                		; transmit register #
012548 40 11 08 00 		lb		r1,I2C_STAT[r2]
01254C 8C 10 00 01 		and		r1,r1,#$80				; test RxACK bit
012550 BD 10 30 00 		bne	    r1,I2C_ERR
012554 60 31 06 00 		sb		r3,I2C_TX[r2]			; select register r3
012558 0A 10 20 00 		ldi		r1,#$10					; set WR bit
01255C 60 11 08 00 		sb		r1,I2C_CMD[r2]
012560 39 1C 00 00 		bsr		I2C_WAIT_TC
                	
                		; transmit device #
012564 40 11 08 00 		lb		r1,I2C_STAT[r2]
012568 8C 10 00 01 		and		r1,r1,#$80				; test RxACK bit
01256C BD 10 22 00 		bne	    r1,I2C_ERR
012570 0D 42 02 00 		or		r4,r4,#1				; set read flag
012574 60 41 06 00 		sb		r4,I2C_TX[r2]
012578 0A 10 20 01 		ldi		r1,#$90					; STA($80) and WR($10) bits set
01257C 60 11 08 00 		sb		r1,I2C_CMD[r2]
012580 39 18 00 00 		bsr		I2C_WAIT_TC				; wait for transmit to complete
                	
                		; receive data byte
012584 40 11 08 00 		lb		r1,I2C_STAT[r2]
012588 8C 10 00 01 		and		r1,r1,#$80				; test RxACK bit
01258C BD 10 12 00 		bne	    r1,I2C_ERR
012590 0A 10 D0 00 		ldi		r1,#$68					; STO($40), RD($20), and NACK($08)
012594 60 11 08 00 		sb		r1,I2C_CMD[r2]
012598 39 15 00 00 		bsr		I2C_WAIT_TC
01259C 41 11 06 00 		lbu		r1,I2C_RX[r2]			; $00 to $FF = byte read, -1=err
0125A0 57 4F 10 00 		pop		r4
0125A4 57 3F 10 00 	    pop     r3
0125A8 57 2F 10 00 	    pop     r2
0125AC 3B FF 11 00 		rts

                	I2C_ERR:
0125B0 0A 10 FE FF 		ldi		r1,#-1
0125B4 82 02 00 3C 		mtspr	cr0,r5					; restore TMR
0125B8 57 4F 10 00 		pop		r4/r3/r2/r5
0125BC 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; I2C Write
                	;
                	; Parameters:
                	; 	r1 = device ($6F)
                	; 	r2 = register to write
                	; 	r3 = value for register
                	; Returns
                	; 	r1 = 0 if successful, else r1 = -1 on error
                	;------------------------------------------------------------------------------
                	;
                	I2C_WRITE:
0125C0 E7 EF 01 00 		push	lr
0125C4 67 E1 01 00 	    push    r2
0125C8 E7 E1 01 00 	    push    r3
0125CC 67 E2 01 00 	    push    r4
0125D0 82 10 02 70 		asl		r1,r1,#1				; clear rw bit for write
0125D4 82 41 00 1A 		mov		r4,r3					; save value r4
0125D8 02 31 00 1A 		mov		r3,r2
                		; transmit device #
0125DC 7C DC FF 00 		ldi		r2,#I2C_MASTER			; r2 = I/O base address of controller
0125E0 0A 20 00 1C 
0125E4 60 11 06 00 		sb		r1,I2C_TX[r2]
0125E8 0A 10 20 01 		ldi		r1,#$90					; STA($80) and WR($10) bits set
0125EC 60 11 08 00 		sb		r1,I2C_CMD[r2]
0125F0 39 0A 00 00 		bsr		I2C_WAIT_TC				; wait for transmit to complete
                		; transmit register #
0125F4 40 11 08 00 		lb		r1,I2C_STAT[r2]
0125F8 8C 10 00 01 		and		r1,r1,#$80				; test RxACK bit
0125FC BD 10 DA FF 		bne  	r1,I2C_ERR
012600 60 31 06 00 		sb		r3,I2C_TX[r2]			; select register r3
012604 0A 10 20 00 		ldi		r1,#$10					; set WR bit
012608 60 11 08 00 		sb		r1,I2C_CMD[r2]
01260C B9 06 00 00 		bsr		I2C_WAIT_TC
                		; transmit value
012610 40 11 08 00 		lb		r1,I2C_STAT[r2]
012614 8C 10 00 01 		and		r1,r1,#$80				; test RxACK bit
012618 BD 10 CC FF 		bne  	r1,I2C_ERR
01261C 60 41 06 00 		sb		r4,I2C_TX[r2]			; select value in r4
012620 0A 10 A0 00 		ldi		r1,#$50					; set STO, WR bit
012624 60 11 08 00 		sb		r1,I2C_CMD[r2]
012628 39 03 00 00 		bsr		I2C_WAIT_TC
01262C 0A 10 00 00 		ldi		r1,#0					; everything okay
012630 57 4F 10 00 		pop		r4
012634 57 3F 10 00 	    pop     r3
012638 57 2F 10 00 	    pop     r2
01263C 3B FF 11 00 		rts

                	; Wait for I2C controller transmit complete
                	
                	I2C_WAIT_TC:
                	.0001:
012640 40 11 08 00 		lb		r1,I2C_STAT[r2]
012644 8C 10 04 00 		and		r1,r1,#2
012648 BD 10 FC FF 		bne 	r1,.0001
01264C 37 FF 01 00 		rtl

                	; Read the entire contents of the RTCC including 64 SRAM bytes
                	
                	RTCCReadbuf:
012650 E7 EF 01 00 	    push    lr
012654 B9 D1 FF FF 		bsr		I2C_INIT
012658 0A 20 00 00 		ldi		r2,#$00
                	.0001:
01265C 0A 10 DE 00 		ldi		r1,#$6F
012660 B9 D6 FF FF 		bsr		I2C_READ
012664 60 11 80 37 		sb		r1,RTCC_BUF[r2]
012668 04 21 02 00 		add		r2,r2,#1
01266C 16 11 C0 00 		cmpu	r1,r2,#$60
012670 BD 40 F6 FF 		blt		r1,.0001
012674 3B FF 11 00 		rts

                	; Write the entire contents of the RTCC including 64 SRAM bytes
                	
                	RTCCWritebuf:
012678 E7 EF 01 00 	    push    lr
01267C B9 CC FF FF 		bsr		I2C_INIT
012680 0A 20 00 00 		ldi		r2,#$00
                	.0001:
012684 0A 10 DE 00 		ldi		r1,#$6F
012688 41 31 80 37 		lbu		r3,RTCC_BUF[r2]
01268C B9 E6 FF FF 		bsr		I2C_WRITE
012690 04 21 02 00 		add		r2,r2,#1
012694 16 11 C0 00 		cmpu	r1,r2,#$60
012698 BD 40 F6 FF 		blt		r1,.0001
01269C 3B FF 11 00 		rts

                	RTCCOscOn:
0126A0 E7 EF 01 00 	    push    lr
0126A4 B9 C7 FF FF 		bsr		I2C_INIT
0126A8 0A 10 DE 00 		ldi		r1,#$6F
0126AC 0A 20 00 00 		ldi		r2,#$00			; register zero
0126B0 B9 CC FF FF 		bsr		I2C_READ		; read register zero
0126B4 8D 30 00 01 		or		r3,r1,#$80		; set start osc bit
0126B8 0A 10 DE 00 		ldi		r1,#$6F
0126BC B9 E0 FF FF 		bsr		I2C_WRITE
0126C0 3B FF 11 00 		rts

                	; ============================================================================
                	; SD/MMC Card interface
                	; ============================================================================
                	SD_INIT:
0126C4 E7 EF 01 00 	    push    lr
0126C8 7C DC FF 00 		ldi		r3,#SD_MASTER
0126CC 0A 30 00 16 
0126D0 7C 00 00 00 		ldi		r2,#25000
0126D4 0A 20 50 C3 
0126D8 E1 21 58 00 		sc		r2,0x2c[r3]		; timeout register
                		; Software reset should be held active for several cycles to allow
                		; reset to be detected on the sd_clk domain.
0126DC 0A 20 02 00 		ldi		r2,#1
0126E0 E0 21 50 00 		sb		r2,0x28[r3]		; software reset reg
0126E4 0A 20 04 00 		ldi		r2,#2
0126E8 E0 21 98 00 		sb		r2,0x4c[r3]		; prog /6 for clock divider
0126EC 0A 10 C8 00 		ldi		r1,#100			; software reset delay
0126F0 39 47 00 00 		bsr     MicroDelay
0126F4 E0 01 50 00 		sb		r0,0x28[r3]		; clear software reset
0126F8 E1 01 08 00 		sc		r0,0x04[r3]		; command 0
0126FC E2 01 00 00 		sh		r0,0x00[r3]		; arg 0
012700 39 28 00 00 		bsr		SD_WAIT_RESP
012704 C4 11 18 00 		lh		r1,0x0C[r3]		; read response register
012708 39 53 FC FF 		bsr		DisplayHalf
01270C 3B FF 11 00 		rts

                	SD_CMD8:
012710 E7 EF 01 00 	    push    lr
012714 7C DC FF 00 		ldi		r3,#SD_MASTER
012718 0A 30 00 16 
01271C 0A 20 34 10 		ldi		r2,#$81A
012720 E1 21 08 00 		sc		r2,0x04[r3]		; set command register
012724 0A 20 54 03 		ldi		r2,#$1AA
012728 E2 21 00 00 		sh		r2,0x00[r3]		; set command argument x1AA
01272C B9 22 00 00 		bsr		SD_WAIT_RESP
012730 7C 00 00 00 		sb		r1,SD_2_0
012734 7C 00 00 00 
012738 60 10 C2 04 
01273C C4 11 18 00 		lh		r1,0x0C[r3]		; read response register
012740 39 4C FC FF 		bsr		DisplayHalf
                		; send command zero
012744 E1 01 08 00 		sc		r0,0x04[r3]
012748 E2 01 00 00 		sh		r0,0x00[r3]
01274C B9 1E 00 00 		bsr		SD_WAIT_RESP
012750 7C 00 00 00 		lbu		r1,SD_2_0
012754 7C 00 00 00 
012758 41 10 C2 04 
01275C BD 00 12 00 		beq		r1,.0001
012760 0A 10 64 00 		ldi		r1,#'2'
012764 39 D4 FD FF 		bsr		OutChar
012768 0A 10 5C 00 		ldi		r1,#'.'
01276C 39 D3 FD FF 		bsr		OutChar
012770 0A 10 60 00 		ldi		r1,#'0'
012774 39 D2 FD FF 		bsr		OutChar
012778 B9 63 FC FF 		bsr		CRLF
01277C 3B FF 11 00 		rts
.0001:
012780 E1 01 08 00 		sc		r0,0x04[r3]		; send CMD0
012784 E2 01 00 00 		sh		r0,0x00[r3]
                	.0002:
012788 C3 11 10 00 		lcu		r1,0x08[r3]
01278C 8C 10 02 00 		and		r1,r1,#1
012790 BD 10 FC FF 		bne  	r1,.0002
012794 02 40 00 1A 		mov		r4,r0			; ret_reg = r4 = 0
                	.0004:
012798 02 52 00 1A 		mov		r5,r4
01279C 7C 00 80 00 		and		r4,r4,#$80000000
0127A0 0C 42 00 00 
0127A4 3D 12 20 00 		bne  	r4,.0003
0127A8 0A 10 04 6E 		ldi		r1,#$3702		; CMD55|RSP48
0127AC E1 11 08 00 		sc		r1,0x04[r3]
0127B0 E2 01 00 00 		sh		r0,0x00[r3]
0127B4 B9 11 00 00 		bsr		SD_WAIT_RESP
0127B8 BD 10 38 00 		bne  	r1,.respOk
0127BC 0A 10 04 52 		ldi		r1,#$2902		; ACMD41|RSP48
0127C0 E1 11 08 00 		sc		r1,0x04[r3]
0127C4 E2 01 00 00 		sh		r0,0x00[r3]
0127C8 39 0F 00 00 		bsr		SD_WAIT_RESP
0127CC BD 10 2E 00 		bne  	r1,.respOk
0127D0 C4 41 18 00 		lh		r4,0x0c[r3]		; ret_reg = RESP1
0127D4 02 12 00 1A 		mov		r1,r4
0127D8 39 39 FC FF 		bsr		DisplayHalf
0127DC 39 57 FC FF 		bsr		CRLF
0127E0 3A F7 FF FF 		bra		.0004
                	.0003:
0127E4 FC FF 00 00 		and		r1,r5,#$FFFFFF	; voltage mask
0127E8 8C 12 FE FF 
0127EC B9 36 FC FF 		bsr		DisplayHalf
0127F0 B9 54 FC FF 		bsr		CRLF
                		; GetCID
0127F4 0A 10 02 04 		ldi		r1,#$201		; CMD2 + RSP146
0127F8 E1 11 08 00 		sc		r1,0x04[r3]
0127FC E2 01 00 00 		sh		r0,0x00[r3]
012800 39 08 00 00 		bsr		SD_WAIT_RESP
                		; GetRCA
012804 0A 10 34 06 		ldi		r1,#$31A		; CMD3 + CICE + CRCE + RSP48
012808 E1 11 08 00 		sc		r1,0x04[r3]
01280C E2 01 00 00 		sh		r0,0x00[r3]
012810 39 06 00 00 		bsr		SD_WAIT_RESP
012814 C4 41 18 00 		lh		r4,0x0c[r3]			; r4 = RESP1
012818 7C FF FF 00 		and		r1,r4,#$FFFF0000	; r4 & RCA_MASK
01281C 0C 12 00 00 
012820 39 30 FC FF 		bsr		DisplayHalf
012824 39 4E FC FF 		bsr		CRLF
                	.respOk:
012828 0A 10 9E 00 		ldi		r1,#'O'
01282C 39 BB FD FF 		bsr		OutChar
012830 0A 10 D6 00 		ldi		r1,#'k'
012834 39 BA FD FF 		bsr		OutChar
012838 B9 4B FC FF 		bsr		CRLF
01283C 3B FF 11 00 		rts

                	SD_WAIT_RESP:
012840 E7 EF 01 00 	    push    lr
012844 67 E1 01 00 		push	r2
012848 E7 E1 01 00 	    push    r3
01284C 7C DC FF 00 		ldi		r2,#SD_MASTER
012850 0A 20 00 16 
                	.0001:
012854 42 31 68 00 		lc		r3,0x34[r2]		; read error interrupt status reg
012858 42 11 60 00 		lc		r1,0x30[r2]		; read normal interrupt status reg
01285C 8C 31 02 00 		and		r3,r3,#1		; get command timeout indicator
012860 BD 11 10 00 		bne  	r3,.0002
012864 8C 10 02 00 		and		r1,r1,#1		; wait for command complete bit to set
012868 BD 00 F6 FF 		beq		r1,.0001
01286C 0A 10 02 00 		ldi		r1,#1
012870 57 3F 10 00 		pop		r3
012874 57 2F 10 00 	    pop     r2
012878 57 FF 11 00 	    pop     lr
01287C 37 FF 01 00 		rtl
.0002:
012880 0A 10 A8 00 		ldi		r1,#'T'
012884 39 B0 FD FF 		bsr		OutChar
012888 0A 10 9E 00 		ldi		r1,#'O'
01288C 39 AF FD FF 		bsr		OutChar
012890 B9 40 FC FF 		bsr		CRLF
012894 0A 10 00 00 		ldi		r1,#0
012898 57 3F 10 00 		pop		r3
01289C 57 2F 10 00 	    pop     r2
0128A0 57 FF 11 00 	    pop     lr
0128A4 37 FF 01 00 		rtl

                	; ============================================================================
                	; ============================================================================
                	
0128A8 7C 01 00 00 	    ldi     r1,#brkpt1           ; set breakpoint address
0128AC 0A 10 D8 51 
0128B0 82 00 64 3C 	    mtspr   dbad0,r1
0128B4 0A 10 00 00 	    ldi     r1,#$0000000000000000   ; enable instruction breakpoint, turn on single step mode
0128B8 82 00 6C 3C 	    mtspr   dbctrl,r1
0128BC 02 00 54 3C 	    mtspr   lotgrp,r0            ; operating system is group #0
0128C0 B9 04 00 00 	    bsr     SetupMemtags
0128C4 0A 10 C8 00 	    ldi     r1,#100
0128C8 39 0C 00 00 	    bsr     MicroDelay
0128CC 3F 00 00 00 	    nop
0128D0 3F 00 00 00 	    nop
                	hangprg:
0128D4 3F 00 00 00 	    nop
0128D8 3F 00 00 00 	    nop
0128DC 3F 00 00 00 	    nop
0128E0 BA FE FF FF 	    bra     hangprg
                	
                	SetupMemtags:
0128E4 02 00 50 3C 	    mtspr   ea,r0                ; select tag for first 64kB
0128E8 0A 10 0C 00 	    ldi     r1,#$0006            ; system only: readable, writeable, not executable
                	brkpt1:
0128EC 82 00 52 3C 	    mtspr   tag,r1
0128F0 7C 01 00 00 	    ldi     r1,#$10000           ; select tag for second 64kB
0128F4 0A 10 00 00 
0128F8 82 00 50 3C 	    mtspr   ea,r1
0128FC 0A 20 0A 00 	    ldi     r2,#$0005            ; system only: readable, executable, not writeable
012900 02 01 52 3C 	    mtspr   tag,r2
012904 0A 30 24 00 	    ldi     r3,#20-2             ; number of tags to setup
                	.0001:
012908 7C 01 00 00 	    addui   r1,r1,#$10000
01290C 94 10 00 00 
012910 82 00 50 3C 	    mtspr   ea,r1
012914 0A 20 0C 00 	    ldi     r2,#$0006            ; set them up as data
012918 02 01 52 3C 	    mtspr   tag,r2
01291C 95 31 02 00 	    subui   r3,r3,#1
012920 BD 11 F4 FF 	    bne     r3,.0001
012924 37 FF 01 00 	    rtl

                	;------------------------------------------------------------------------------
                	; MicroDelay
                	;     Delay for a short time for at least the specified number of clock cycles
                	;
                	; Parameters:
                	;     r1 = required delay in clock ticks
                	;------------------------------------------------------------------------------
                	;
                	MicroDelay:
012928 67 E1 01 00 	    push    r2
01292C E7 E1 01 00 	    push    r3
012930 02 30 08 3E 	    mfspr   r3,tick             ; get starting tick
                	.0001:
012934 02 20 08 3E 	    mfspr   r2,tick
012938 02 21 06 2A 	    subu    r2,r2,r3
01293C 02 21 02 0C 	    cmp     r2,r2,r1
012940 3D 41 FA FF 	    blt     r2,.0001
012944 57 3F 10 00 	    pop     r3
012948 57 2F 10 00 	    pop     r2
01294C 37 FF 01 00 	    rtl
;
012950 3F 00 00 00 	    nop
012954 3F 00 00 00 	    nop
                	
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	LoadFromSerial:
012958 E7 EF 01 00 	    push    lr
01295C 7C 00 00 00 	    ldi     r3,#16384
012960 0A 30 00 80 
012964 7C 02 00 00 	    ldi     r2,#$24000          ; target store address
012968 0A 20 00 80 
                	.0001:
01296C B9 63 FB FF 	    bsr     SerialGetCharDirect
012970 60 11 00 00 	    sb      r1,[r2]
012974 14 21 02 00 	    addui   r2,r2,#1
012978 95 31 02 00 	    subui   r3,r3,#1
01297C BD 11 F8 FF 	    bne     r3,.0001
012980 3B FF 11 00 	    rts

                	nmi_rout:
012984 FC 00 00 00 	    ldi    sp,CPU0_IRQ_STACK
012988 0A E0 01 10 
01298C E7 E0 01 00 	    push   r1
012990 7C 01 00 00 	    lea    r1,msgParErr
012994 47 10 58 53 
012998 39 1E FC FF 	    bsr    DisplayStringCRLF
01299C 39 91 FE FF 	    bsr    KeybdGetCharWait
0129A0 57 1F 10 00 	    pop    r1
0129A4 02 E0 3F 6E 	    rti
                	
                	nmi_rout1:
0129A8 02 E0 3F 6E 	    rti
                	
                	msgParErr:
0129AC 50 61 72 69 	    db "Parity error",0
0129B0 74 79 20 65 
0129B4 72 72 6F 72 
0129B8 00          
                	    
0129B9 00 00 00    	    align  
                	
                	;------------------------------------------------------------------------------
                	; Execution fault. Occurs when an attempt is made to execute code from a
                	; page marked as non-executable.
                	;------------------------------------------------------------------------------
                	
                	exf_rout:
0129BC 0A 10 76 01 		ldi		r1,#$bb
0129C0 7C DC FF 00 		sc		r1,LEDS
0129C4 61 10 00 0C 
0129C8 7C 01 00 00 		ldi		r1,#msgexf
0129CC 0A 10 B0 54 
0129D0 39 17 FC FF 		bsr		DisplayStringCRLF
                	.0001:
0129D4 3A 00 00 00 		bra .0001
                	
                	;------------------------------------------------------------------------------
                	; Data read fault. Occurs when an attempt is made to read from a page marked
                	; as non-readble.
                	;------------------------------------------------------------------------------
                	
                	drf_rout:
0129D8 0A 10 76 01 		ldi		r1,#$bb
0129DC 7C DC FF 00 		sc		r1,LEDS
0129E0 61 10 00 0C 
0129E4 7C 01 00 00 		ldi		r1,#msgdrf
0129E8 0A 10 BA 54 
0129EC B9 13 FC FF 		bsr		DisplayStringCRLF
                	.0001:
0129F0 3A 00 00 00 		bra .0001
                	
                	;------------------------------------------------------------------------------
                	; Data write fault. Occurs when an attempt is made to write to a page marked
                	; as non-writeable.
                	;------------------------------------------------------------------------------
                	
                	dwf_rout:
0129F4 0A 10 76 01 		ldi		r1,#$bb
0129F8 7C DC FF 00 		sc		r1,LEDS
0129FC 61 10 00 0C 
012A00 7C 01 00 00 		ldi		r1,#msgdwf
012A04 0A 10 C4 54 
012A08 39 10 FC FF 		bsr		DisplayStringCRLF
                	.0001:
012A0C 3A 00 00 00 		bra .0001
                	
                	;------------------------------------------------------------------------------
                	; Privilege violation fault. Occurs when the current privilege level isn't
                	; sufficient to allow access.
                	;------------------------------------------------------------------------------
                	
                	priv_rout:
012A10 46 EC 21 05 	    lw      sp,TCB_SYS_Stack[tr]
012A14 0A 10 78 01 		ldi		r1,#$bc
012A18 7C DC FF 00 		sc		r1,LEDS
012A1C 61 10 00 0C 
012A20 7C 01 00 00 		ldi		r1,#msgPriv
012A24 0A 10 CE 54 
012A28 B9 FC FB FF 		bsr		DisplayString
012A2C 02 10 12 3E 		mfspr   r1,epc
012A30 39 EE FB FF 		bsr     DisplayHalf
012A34 39 0C FC FF 		bsr     CRLF
012A38 B9 7D FE FF 		bsr		KeybdGetCharWait
012A3C 7C 01 00 00 		ldi     r1,#Monitor|1
012A40 0A 10 76 27 
012A44 82 00 12 3C 		mtspr   epc,r1
012A48 3F 00 00 00 		nop
012A4C 3F 00 00 00 		nop
012A50 02 E0 3D 6E 		rte
                	.0001:
012A54 3A 00 00 00 		bra .0001
                	
                	;------------------------------------------------------------------------------
                	; Message strings for the faults.
                	;------------------------------------------------------------------------------
                	
                	msgexf:
012A58 65 78 66 20 		db	"exf ",0
012A5C 00          
                	msgdrf:
012A5D 64 72 66 20 		db	"drf ",0
012A61 00          
                	msgdwf:
012A62 64 77 66 20 		db	"dwf ",0
012A66 00          
                	msgPriv:
012A67 70 72 69 76 		db	"priv fault: PC=",0
012A6B 20 66 61 75 
012A6F 6C 74 3A 20 
012A73 50 43 3D 00 
                	msgUninit:
012A77 75 6E 69 6E 		db	"uninit int.",0
012A7B 69 74 20 69 
012A7F 6E 74 2E 00 
                	msgBusErr:
012A83 0D 0A 42 75 	    db  CR,LF,"Bus error PC=",0
012A87 73 20 65 72 
012A8B 72 6F 72 20 
012A8F 50 43 3D 00 
                	msgEA:
012A93 20 45 41 3D 	    db  " EA=",0
012A97 00          
                	msgUninitIRQ:
012A98 55 6E 69 6E 	    db  "Uninitialized IRQ",0
012A9C 69 74 69 61 
012AA0 6C 69 7A 65 
012AA4 64 20 49 52 
012AA8 51 00       
                	
012AAA 00 00       	    align 
                	
                	UninitIRQ:
012AAC 7C 01 00 00 	    ldi   r1,msgUninitIRQ
012AB0 0A 10 30 55 
012AB4 39 EB FB FF 	    bsr   DisplayString
                	.0001:
012AB8 3A 00 00 00 	    bra   .0001
                	
                	;------------------------------------------------------------------------------
                	; Bus error routine.
                	;------------------------------------------------------------------------------
                	
                	berr_rout:
012ABC 7C 00 00 00 	    ldi     sp,#$7800
012AC0 0A E0 01 F0 
012AC4 FC 00 00 00 		ldi		r1,#$bebe
012AC8 0A 10 7C 7D 
012ACC 7C DC FF 00 		sc		r1,LEDS
012AD0 61 10 00 0C 
012AD4 7C 01 00 00 		ldi     r1,#msgBusErr
012AD8 0A 10 06 55 
012ADC 39 E6 FB FF 		bsr     DisplayString
012AE0 02 10 10 3E 		mfspr   r1,ipc
012AE4 39 D5 FB FF 		bsr		DisplayWord
012AE8 7C 01 00 00 		ldi     r1,#msgEA
012AEC 0A 10 26 55 
012AF0 B9 E3 FB FF 		bsr     DisplayString
012AF4 02 10 16 3E 	    mfspr   r1,bear
012AF8 B9 D2 FB FF 		bsr     DisplayWord
012AFC 39 F3 FB FF 		bsr     CRLF
012B00 B9 64 FE FF 		bsr		KeybdGetCharWait
                	
                		; In order to return an RTI must be used to exit the routine (or interrupts
                		; will permanently disabled). The RTI instruction clears an internal
                		; processor flag used to prevent nested interrupts.
                		; Since this is a serious error the system is just restarted. So the IPC
                		; is set to point to the restart address.
                	
012B04 7C 01 00 00 		ldi     r1,#start|1
012B08 0A 10 52 01 
012B0C 82 00 10 3C 		mtspr   ipc,r1
                		
                		; Allow pipeline time for IPC to update before RTI (there's no results
                		; forwarding on SPR's).
012B10 3F 00 00 00 		nop     
012B14 3F 00 00 00 		nop
012B18 02 E0 3F 6E 		rti
                	
                	
                	SSM_ISR:
012B1C 02 E0 3B 6E 	    rtd
                	
                	; -----------------------------------------------------------------------------
                	; Breakpoint routine.
                	; -----------------------------------------------------------------------------
                	
                	BPT_ISR:
012B20 FC 7C 00 00 	    ldi      sp,#CPU0_DBG_STACK
012B24 0A E0 01 E0 
012B28 02 00 6C 3C 	    mtspr    dbctrl,r0
012B2C 02 10 0E 3E 	    mfspr    r1,dpc
012B30 8C 10 FC FF 	    and      r1,r1,#-2        ; clear LSB
012B34 E7 E0 01 00 	    push     r1
012B38 95 10 40 00 	    subui    r1,r1,#32
012B3C E7 E0 01 00 	    push     r1
012B40 B9 7A 0B 00 	    bsr      disassem20
012B44 39 5C FE FF 		bsr		 KeybdGetCharWait
012B48 02 E0 3B 6E 	    rtd
                	.0001:
012B4C 3A 00 00 00 	    bra     .0001
                	
                		code
                		align	16                	
                	get_datetime:
012B50 15 EF 21 00 		      	subui	sp,sp,#16
012B54 E7 ED 01 00 		      	push 	bp
012B58 02 BF 01 1A 		      	mov  	bp,sp
012B5C 15 EF 11 00 		      	subui	sp,sp,#8
012B60 E7 E5 01 00 		      	push 	r11
012B64 67 E6 01 00 		      	push 	r12
012B68 E7 E6 01 00 		      	push 	r13
012B6C 67 E7 01 00 		      	push 	r14
012B70 E7 E7 01 00 		      	push 	r15
012B74 67 E8 01 00 		      	push 	r16
012B78 E7 E8 01 00 		      	push 	r17
012B7C 0A B0 80 37 		      	ldi  	r11,#RTCC_BUF
012B80 C6 CD A0 00 		      	lw   	r12,80[bp]
012B84 C6 DD 90 00 		      	lw   	r13,72[bp]
012B88 C6 ED 80 00 		      	lw   	r14,64[bp]
012B8C C6 FD 70 00 		      	lw   	r15,56[bp]
012B90 C6 0D 61 00 		      	lw   	r16,48[bp]
012B94 C6 1D 51 00 		      	lw   	r17,40[bp]
012B98 BD 08 20 00 		      	beq  	r17,set_time_serial_2
012B9C C1 35 0C 00 		      	lbu  	r3,6[r11]
012BA0 82 31 00 20 		      	sxb  	r3,r3
012BA4 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012BA8 0A 30 A0 0F 		      	ldi  	r3,#2000
012BAC C6 4D F0 FF 		      	lw   	r4,-8[bp]
012BB0 0C 42 1E 00 		      	and  	r4,r4,#15
012BB4 C6 5D F0 FF 		      	lw   	r5,-8[bp]
012BB8 8C 52 E0 01 		      	and  	r5,r5,#240
012BBC 82 52 08 78 		      	asri 	r5,r5,#4
012BC0 87 52 14 00 		      	mul  	r5,r5,#10
012BC4 02 42 0A 28 		      	addu 	r4,r4,r5
012BC8 82 31 08 28 		      	addu 	r3,r3,r4
012BCC E3 3D F0 FF 		      	sw   	r3,-8[bp]
012BD0 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012BD4 E3 38 00 00 		      	sw   	r3,[r17]
                	set_time_serial_2:
012BD8 3D 08 1C 00 		      	beq  	r16,set_time_serial_4
012BDC C1 35 08 00 		      	lbu  	r3,4[r11]
012BE0 82 31 00 20 		      	sxb  	r3,r3
012BE4 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012BE8 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012BEC 8C 31 1E 00 		      	and  	r3,r3,#15
012BF0 C6 4D F0 FF 		      	lw   	r4,-8[bp]
012BF4 0C 42 20 00 		      	and  	r4,r4,#16
012BF8 02 42 08 78 		      	asri 	r4,r4,#4
012BFC 07 42 14 00 		      	mul  	r4,r4,#10
012C00 82 31 08 28 		      	addu 	r3,r3,r4
012C04 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012C08 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012C0C 63 38 00 00 		      	sw   	r3,[r16]
                	set_time_serial_4:
012C10 BD 07 1C 00 		      	beq  	r15,set_time_serial_6
012C14 C1 35 0A 00 		      	lbu  	r3,5[r11]
012C18 82 31 00 20 		      	sxb  	r3,r3
012C1C E3 3D F0 FF 		      	sw   	r3,-8[bp]
012C20 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012C24 8C 31 1E 00 		      	and  	r3,r3,#15
012C28 C6 4D F0 FF 		      	lw   	r4,-8[bp]
012C2C 0C 42 60 00 		      	and  	r4,r4,#48
012C30 02 42 08 78 		      	asri 	r4,r4,#4
012C34 07 42 14 00 		      	mul  	r4,r4,#10
012C38 82 31 08 28 		      	addu 	r3,r3,r4
012C3C E3 3D F0 FF 		      	sw   	r3,-8[bp]
012C40 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012C44 E3 37 00 00 		      	sw   	r3,[r15]
                	set_time_serial_6:
012C48 3D 07 22 00 		      	beq  	r14,set_time_serial_8
012C4C C1 35 04 00 		      	lbu  	r3,2[r11]
012C50 82 31 00 20 		      	sxb  	r3,r3
012C54 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012C58 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012C5C 8C 31 1E 00 		      	and  	r3,r3,#15
012C60 C6 4D F0 FF 		      	lw   	r4,-8[bp]
012C64 0C 42 60 00 		      	and  	r4,r4,#48
012C68 02 42 08 78 		      	asri 	r4,r4,#4
012C6C 07 42 14 00 		      	mul  	r4,r4,#10
012C70 82 31 08 28 		      	addu 	r3,r3,r4
012C74 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012C78 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012C7C 8C 31 7E 00 		      	and  	r3,r3,#63
012C80 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012C84 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012C88 63 37 00 00 		      	sw   	r3,[r14]
                	set_time_serial_8:
012C8C BD 06 1C 00 		      	beq  	r13,set_time_serial_10
012C90 C1 35 02 00 		      	lbu  	r3,1[r11]
012C94 82 31 00 20 		      	sxb  	r3,r3
012C98 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012C9C C6 3D F0 FF 		      	lw   	r3,-8[bp]
012CA0 8C 31 1E 00 		      	and  	r3,r3,#15
012CA4 C6 4D F0 FF 		      	lw   	r4,-8[bp]
012CA8 0C 42 E0 00 		      	and  	r4,r4,#112
012CAC 02 42 08 78 		      	asri 	r4,r4,#4
012CB0 07 42 14 00 		      	mul  	r4,r4,#10
012CB4 82 31 08 28 		      	addu 	r3,r3,r4
012CB8 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012CBC C6 3D F0 FF 		      	lw   	r3,-8[bp]
012CC0 E3 36 00 00 		      	sw   	r3,[r13]
                	set_time_serial_10:
012CC4 3D 06 1C 00 		      	beq  	r12,set_time_serial_12
012CC8 C1 35 00 00 		      	lbu  	r3,[r11]
012CCC 82 31 00 20 		      	sxb  	r3,r3
012CD0 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012CD4 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012CD8 8C 31 1E 00 		      	and  	r3,r3,#15
012CDC C6 4D F0 FF 		      	lw   	r4,-8[bp]
012CE0 0C 42 E0 00 		      	and  	r4,r4,#112
012CE4 02 42 08 78 		      	asri 	r4,r4,#4
012CE8 07 42 14 00 		      	mul  	r4,r4,#10
012CEC 82 31 08 28 		      	addu 	r3,r3,r4
012CF0 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012CF4 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012CF8 63 36 00 00 		      	sw   	r3,[r12]
                	set_time_serial_12:
                	set_time_serial_14:
012CFC 57 1F 11 00 		      	pop  	r17
012D00 57 0F 11 00 		      	pop  	r16
012D04 57 FF 10 00 		      	pop  	r15
012D08 57 EF 10 00 		      	pop  	r14
012D0C 57 DF 10 00 		      	pop  	r13
012D10 57 CF 10 00 		      	pop  	r12
012D14 57 BF 10 00 		      	pop  	r11
012D18 82 ED 01 1A 		      	mov  	sp,bp
012D1C 57 BF 11 00 		      	pop  	bp
012D20 37 FF 21 00 		      	rtl  	#16
                	ToJul:
012D24 15 EF 21 00 		      	subui	sp,sp,#16
012D28 E7 ED 01 00 		      	push 	bp
012D2C 02 BF 01 1A 		      	mov  	bp,sp
012D30 15 EF 41 00 		      	subui	sp,sp,#32
012D34 C6 3D 50 00 		      	lw   	r3,40[bp]
012D38 E3 3D E0 FF 		      	sw   	r3,-16[bp]
012D3C C6 3D 60 00 		      	lw   	r3,48[bp]
012D40 E3 3D D0 FF 		      	sw   	r3,-24[bp]
012D44 C6 3D 70 00 		      	lw   	r3,56[bp]
012D48 E3 3D C0 FF 		      	sw   	r3,-32[bp]
012D4C FC FF FF FF 		      	ldi  	r3,#-32075
012D50 0A 30 6A 05 
012D54 C6 4D C0 FF 		      	lw   	r4,-32[bp]
012D58 7C 6B 00 00 		      	ldi  	r5,#7012800
012D5C 0A 50 80 03 
012D60 C6 6D E0 FF 		      	lw   	r6,-16[bp]
012D64 C6 7D D0 FF 		      	lw   	r7,-24[bp]
012D68 95 73 1C 00 		      	subu 	r7,r7,#14
012D6C 88 73 18 00 		      	divs 	r7,r7,#12
012D70 02 63 0E 28 		      	addu 	r6,r6,r7
012D74 07 63 6A 0B 		      	mul  	r6,r6,#1461
012D78 82 52 0C 28 		      	addu 	r5,r5,r6
012D7C 82 52 04 78 		      	asri 	r5,r5,#2
012D80 02 42 0A 28 		      	addu 	r4,r4,r5
012D84 0A 50 44 FA 		      	ldi  	r5,#-734
012D88 C6 6D D0 FF 		      	lw   	r6,-24[bp]
012D8C C6 7D D0 FF 		      	lw   	r7,-24[bp]
012D90 95 73 1C 00 		      	subu 	r7,r7,#14
012D94 88 73 18 00 		      	divs 	r7,r7,#12
012D98 87 73 18 00 		      	mul  	r7,r7,#12
012D9C 02 63 0E 2A 		      	subu 	r6,r6,r7
012DA0 07 63 DE 02 		      	mul  	r6,r6,#367
012DA4 82 52 0C 28 		      	addu 	r5,r5,r6
012DA8 88 52 18 00 		      	divs 	r5,r5,#12
012DAC 02 42 0A 28 		      	addu 	r4,r4,r5
012DB0 0A 50 48 26 		      	ldi  	r5,#4900
012DB4 C6 6D E0 FF 		      	lw   	r6,-16[bp]
012DB8 C6 7D D0 FF 		      	lw   	r7,-24[bp]
012DBC 95 73 1C 00 		      	subu 	r7,r7,#14
012DC0 88 73 18 00 		      	divs 	r7,r7,#12
012DC4 02 63 0E 28 		      	addu 	r6,r6,r7
012DC8 82 52 0C 28 		      	addu 	r5,r5,r6
012DCC 88 52 C8 00 		      	divs 	r5,r5,#100
012DD0 87 52 06 00 		      	mul  	r5,r5,#3
012DD4 82 52 04 78 		      	asri 	r5,r5,#2
012DD8 02 42 0A 2A 		      	subu 	r4,r4,r5
012DDC 82 31 08 28 		      	addu 	r3,r3,r4
012DE0 E3 3D F0 FF 		      	sw   	r3,-8[bp]
012DE4 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012DE8 82 11 00 1A 		      	mov  	r1,r3
                	set_time_serial_17:
012DEC 82 ED 01 1A 		      	mov  	sp,bp
012DF0 57 BF 11 00 		      	pop  	bp
012DF4 37 FF 21 00 		      	rtl  	#16
                	set_time_serial:
012DF8 E7 EF 01 00 		      	push 	lr
012DFC 67 EE 01 00 		      	push 	xlr
012E00 E7 ED 01 00 		      	push 	bp
012E04 7C 01 00 00 		      	ldi  	xlr,#set_time_serial_19
012E08 0A C0 51 5D 
012E0C 02 BF 01 1A 		      	mov  	bp,sp
012E10 15 EF 91 00 		      	subui	sp,sp,#72
012E14 E5 ED 81 FF 		      	pea  	-64[bp]
012E18 E5 ED 91 FF 		      	pea  	-56[bp]
012E1C E5 ED A1 FF 		      	pea  	-48[bp]
012E20 E5 ED B1 FF 		      	pea  	-40[bp]
012E24 E5 ED C1 FF 		      	pea  	-32[bp]
012E28 E5 ED D1 FF 		      	pea  	-24[bp]
012E2C B9 A4 FF FF 		      	bsr  	get_datetime
012E30 14 EF 61 00 		      	addui	sp,sp,#48
012E34 C6 3D 80 FF 		      	lw   	r3,-64[bp]
012E38 82 31 14 70 		      	asli 	r3,r3,#10
012E3C C6 4D 90 FF 		      	lw   	r4,-56[bp]
012E40 FC 00 00 00 		      	mul  	r4,r4,#61440
012E44 07 42 00 E0 
012E48 82 31 08 28 		      	addu 	r3,r3,r4
012E4C C6 4D A0 FF 		      	lw   	r4,-48[bp]
012E50 7C 38 00 00 		      	mul  	r4,r4,#3686400
012E54 07 42 00 80 
012E58 82 31 08 28 		      	addu 	r3,r3,r4
012E5C E7 E1 01 00 		      	push 	r3
012E60 E6 ED B1 FF 		      	push 	-40[bp]
012E64 E6 ED C1 FF 		      	push 	-32[bp]
012E68 E6 ED D1 FF 		      	push 	-24[bp]
012E6C 39 D7 FF FF 		      	bsr  	ToJul
012E70 14 EF 31 00 		      	addui	sp,sp,#24
012E74 57 3F 10 00 		      	pop  	r3
012E78 82 40 00 1A 		      	mov  	r4,r1
012E7C 7C 46 05 00 		      	mul  	r4,r4,#88473600
012E80 07 42 00 00 
012E84 82 31 08 28 		      	addu 	r3,r3,r4
012E88 63 30 00 22 		      	sw   	r3,Milliseconds
012E8C C6 3D E0 FF 		      	lw   	r3,-16[bp]
012E90 82 11 00 1A 		      	mov  	r1,r3
                	set_time_serial_20:
012E94 82 ED 01 1A 		      	mov  	sp,bp
012E98 57 BF 11 00 		      	pop  	bp
012E9C 57 CF 11 00 		      	pop  	xlr
012EA0 57 FF 11 00 		      	pop  	lr
012EA4 37 FF 01 00 		      	rtl  	#0
                	set_time_serial_19:
012EA8 C6 FD 11 00 		      	lw   	lr,8[bp]
012EAC E3 FD 21 00 		      	sw   	lr,16[bp]
012EB0 BA FC FF FF 		      	bra  	set_time_serial_20
                	        code
                	
                	pSpriteController:
012EB4 00 D0 DA FF 		dw	-2437120
012EB8 FF FF FF FF 
                	
                	sprite_demo:
012EBC 15 EF 21 00 		      	subui	sp,sp,#16
012EC0 E7 ED 01 00 		      	push 	bp
012EC4 02 BF 01 1A 		      	mov  	bp,sp
012EC8 15 EF 31 00 		      	subui	sp,sp,#24
012ECC E7 E5 01 00 		      	push 	r11
012ED0 67 E6 01 00 		      	push 	r12
012ED4 E7 E6 01 00 		      	push 	r13
012ED8 FC 00 00 00 		      	ldi  	r11,#sprites
012EDC 0A B0 00 A0 
012EE0 7C DC FF FF 		      	ldi  	r12,#-2356224
012EE4 0A C0 00 18 
012EE8 7C D8 FF FF 		      	ldi  	r13,#-2621440
012EEC 0A D0 00 00 
012EF0 E3 0D F0 FF 		      	sw   	r0,-8[bp]
                	sprite_demo_4:
012EF4 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012EF8 86 31 40 00 		      	cmp  	r3,r3,#32
012EFC BD 31 18 00 		      	bge  	r3,sprite_demo_5
012F00 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012F04 82 31 04 70 		      	asli 	r3,r3,#2
012F08 82 31 04 70 		      	asli 	r3,r3,#2
012F0C 7C 01 00 00 		      	lw   	r4,pSpriteController
012F10 46 40 68 5D 
012F14 82 31 08 28 		      	addu 	r3,r3,r4
012F18 C5 41 08 00 		      	lhu  	r4,4[r3]
012F1C 0D 42 98 01 		      	ori  	r4,r4,#204
012F20 E2 41 08 00 		      	sh   	r4,4[r3]
                	sprite_demo_6:
012F24 E4 1D F0 FF 		      	inc  	-8[bp],#1
012F28 BA F9 FF FF 		      	bra  	sprite_demo_4
                	sprite_demo_5:
012F2C E3 0D F0 FF 		      	sw   	r0,-8[bp]
                	sprite_demo_7:
012F30 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012F34 7C 00 00 00 		      	cmp  	r3,r3,#16384
012F38 86 31 00 80 
012F3C BD 31 0E 00 		      	bge  	r3,sprite_demo_8
012F40 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012F44 82 31 04 70 		      	asli 	r3,r3,#2
012F48 45 46 00 00 		      	lhu  	r4,[r12]
012F4C EA 46 06 00 		      	sh   	r4,0[r13+r3]
                	sprite_demo_9:
012F50 E4 1D F0 FF 		      	inc  	-8[bp],#1
012F54 BA FB FF FF 		      	bra  	sprite_demo_7
                	sprite_demo_8:
012F58 E3 0D F0 FF 		      	sw   	r0,-8[bp]
                	sprite_demo_10:
012F5C C6 3D F0 FF 		      	lw   	r3,-8[bp]
012F60 86 31 40 00 		      	cmp  	r3,r3,#32
012F64 BD 31 38 00 		      	bge  	r3,sprite_demo_11
012F68 46 36 00 00 		      	lw   	r3,[r12]
012F6C 89 31 A8 0A 		      	mod  	r3,r3,#1364
012F70 C6 4D F0 FF 		      	lw   	r4,-8[bp]
012F74 02 42 0A 70 		      	asli 	r4,r4,#5
012F78 EB 35 08 00 		      	sw   	r3,0[r11+r4]
012F7C 46 36 00 00 		      	lw   	r3,[r12]
012F80 89 31 00 06 		      	mod  	r3,r3,#768
012F84 C6 4D F0 FF 		      	lw   	r4,-8[bp]
012F88 02 42 0A 70 		      	asli 	r4,r4,#5
012F8C 02 42 16 28 		      	addu 	r4,r4,r11
012F90 63 32 10 00 		      	sw   	r3,8[r4]
012F94 46 36 00 00 		      	lw   	r3,[r12]
012F98 8C 31 0E 00 		      	and  	r3,r3,#7
012F9C 95 31 08 00 		      	subu 	r3,r3,#4
012FA0 C6 4D F0 FF 		      	lw   	r4,-8[bp]
012FA4 02 42 0A 70 		      	asli 	r4,r4,#5
012FA8 02 42 16 28 		      	addu 	r4,r4,r11
012FAC 63 32 20 00 		      	sw   	r3,16[r4]
012FB0 46 36 00 00 		      	lw   	r3,[r12]
012FB4 8C 31 0E 00 		      	and  	r3,r3,#7
012FB8 95 31 08 00 		      	subu 	r3,r3,#4
012FBC C6 4D F0 FF 		      	lw   	r4,-8[bp]
012FC0 02 42 0A 70 		      	asli 	r4,r4,#5
012FC4 02 42 16 28 		      	addu 	r4,r4,r11
012FC8 63 32 30 00 		      	sw   	r3,24[r4]
                	sprite_demo_12:
012FCC E4 1D F0 FF 		      	inc  	-8[bp],#1
012FD0 BA F1 FF FF 		      	bra  	sprite_demo_10
                	sprite_demo_11:
                	sprite_demo_13:
012FD4 0A 30 02 00 		      	ldi  	r3,#1
012FD8 BD 01 68 00 		      	beq  	r3,sprite_demo_14
012FDC E3 0D F0 FF 		      	sw   	r0,-8[bp]
                	sprite_demo_15:
012FE0 C6 3D F0 FF 		      	lw   	r3,-8[bp]
012FE4 86 31 40 00 		      	cmp  	r3,r3,#32
012FE8 BD 31 58 00 		      	bge  	r3,sprite_demo_16
012FEC C6 3D F0 FF 		      	lw   	r3,-8[bp]
012FF0 82 31 0A 70 		      	asli 	r3,r3,#5
012FF4 CE 35 06 00 		      	lw   	r3,0[r11+r3]
012FF8 C6 4D F0 FF 		      	lw   	r4,-8[bp]
012FFC 02 42 0A 70 		      	asli 	r4,r4,#5
013000 02 42 16 28 		      	addu 	r4,r4,r11
013004 46 42 20 00 		      	lw   	r4,16[r4]
013008 82 31 08 28 		      	addu 	r3,r3,r4
01300C 8C 31 FE 07 		      	and  	r3,r3,#1023
013010 C6 4D F0 FF 		      	lw   	r4,-8[bp]
013014 02 42 0A 70 		      	asli 	r4,r4,#5
013018 EB 35 08 00 		      	sw   	r3,0[r11+r4]
01301C C6 3D F0 FF 		      	lw   	r3,-8[bp]
013020 82 31 0A 70 		      	asli 	r3,r3,#5
013024 82 31 16 28 		      	addu 	r3,r3,r11
013028 C6 31 10 00 		      	lw   	r3,8[r3]
01302C C6 4D F0 FF 		      	lw   	r4,-8[bp]
013030 02 42 0A 70 		      	asli 	r4,r4,#5
013034 02 42 16 28 		      	addu 	r4,r4,r11
013038 46 42 30 00 		      	lw   	r4,24[r4]
01303C 82 31 08 28 		      	addu 	r3,r3,r4
013040 8C 31 FE 03 		      	and  	r3,r3,#511
013044 C6 4D F0 FF 		      	lw   	r4,-8[bp]
013048 02 42 0A 70 		      	asli 	r4,r4,#5
01304C 02 42 16 28 		      	addu 	r4,r4,r11
013050 63 32 10 00 		      	sw   	r3,8[r4]
013054 C6 3D F0 FF 		      	lw   	r3,-8[bp]
013058 82 31 0A 70 		      	asli 	r3,r3,#5
01305C CE 35 06 00 		      	lw   	r3,0[r11+r3]
013060 C6 4D F0 FF 		      	lw   	r4,-8[bp]
013064 02 42 0A 70 		      	asli 	r4,r4,#5
013068 02 42 16 28 		      	addu 	r4,r4,r11
01306C 46 42 10 00 		      	lw   	r4,8[r4]
013070 02 42 20 70 		      	asli 	r4,r4,#16
013074 82 31 08 28 		      	addu 	r3,r3,r4
013078 C6 4D F0 FF 		      	lw   	r4,-8[bp]
01307C 02 42 04 70 		      	asli 	r4,r4,#2
013080 02 42 04 70 		      	asli 	r4,r4,#2
013084 7C 01 00 00 		      	lw   	r5,pSpriteController
013088 46 50 68 5D 
01308C EA 32 08 00 		      	sh   	r3,0[r5+r4]
                	sprite_demo_17:
013090 E4 1D F0 FF 		      	inc  	-8[bp],#1
013094 BA E9 FF FF 		      	bra  	sprite_demo_15
                	sprite_demo_16:
013098 7C 0F 00 00 		      	     	            ldi  r1,#1000000
01309C 0A 10 80 84 
0130A0 39 11 FF FF 	            bsr  MicroDelay
                	        
0130A4 3A E6 FF FF 		      	bra  	sprite_demo_13
                	sprite_demo_14:
                	sprite_demo_18:
0130A8 57 DF 10 00 		      	pop  	r13
0130AC 57 CF 10 00 		      	pop  	r12
0130B0 57 BF 10 00 		      	pop  	r11
0130B4 82 ED 01 1A 		      	mov  	sp,bp
0130B8 57 BF 11 00 		      	pop  	bp
0130BC 37 FF 21 00 		      	rtl  	#16
                	
                	; error codes
                	E_Ok		=		0x00
                	E_Arg		=		0x01
                	E_BadMbx	=		0x04
                	E_QueFull	=		0x05
                	E_NoThread	=		0x06
                	E_NotAlloc	=		0x09
                	E_NoMsg		=		0x0b
                	E_Timeout	=		0x10
                	E_BadAlarm	=		0x11
                	E_NotOwner	=		0x12
                	E_QueStrategy =		0x13
                	E_BadDevNum	=		0x18
                	E_DCBInUse	=		0x19
                	; Device driver errors
                	E_BadDevNum	=		0x20
                	E_NoDev		=		0x21
                	E_BadDevOp	=		0x22
                	E_ReadError	=		0x23
                	E_WriteError =		0x24
                	E_BadBlockNum	=	0x25
                	E_TooManyBlocks	=	0x26
                	
                	; resource errors
                	E_NoMoreMbx	=		0x40
                	E_NoMoreMsgBlks	=	0x41
                	E_NoMoreAlarmBlks	=0x44
                	E_NoMoreTCBs	=	0x45
                	E_NoMem		= 12
                	
                	; task status
                	TS_NONE     =0
                	TS_TIMEOUT	=1
                	TS_WAITMSG	=2
                	TS_PREEMPT	=4
                	TS_RUNNING	=8
                	TS_READY	=16
                	TS_SLEEP	=32
                	
                	TS_TIMEOUT_BIT	=0
                	TS_WAITMSG_BIT	=1
                	TS_RUNNING_BIT	=3
                	TS_READY_BIT	=4
                	
                	PRI_HIGHEST	=0
                	PRI_HIGH	=1
                	PRI_NORMAL	=3
                	PRI_LOW		=5
                	PRI_LOWEST	=7
                	
                	
                	NR_TCB		EQU		256
                	TCB_BackLink    EQU     0
                	TCB_r1          EQU     8
                	TCB_r2          EQU     $10
                	TCB_r3          EQU     $18
                	TCB_r4          EQU     $20
                	TCB_r5          EQU     $28
                	TCB_r6          EQU     $30
                	TCB_r7          EQU     $38
                	TCB_r8          EQU     $40
                	TCB_r9          EQU     $48
                	TCB_r10         EQU     $50
                	TCB_r11         EQU     $58
                	TCB_r12         EQU     $60
                	TCB_r13         EQU     $68
                	TCB_r14         EQU     $70
                	TCB_r15         EQU     $78
                	TCB_r16         EQU     $80
                	TCB_r17         EQU     $88
                	TCB_r18         EQU     $90
                	TCB_r19         EQU     $98
                	TCB_r20         EQU     $A0
                	TCB_r21         EQU     $A8
                	TCB_r22         EQU     $B0
                	TCB_r23         EQU     $B8
                	TCB_r24         EQU     $C0
                	TCB_r25         EQU     $C8
                	TCB_r26         EQU     $D0
                	TCB_r27         EQU     $D8
                	TCB_r28         EQU     $E0
                	TCB_r29         EQU     $E8
                	TCB_r30         EQU     $F0
                	TCB_r31         EQU     $F8
                	
                	TCB_SP0Save		EQU		0x100
                	TCB_SP1Save		EQU		0x108
                	TCB_SP2Save		EQU		0x110
                	TCB_SP3Save		EQU		0x118
                	TCB_SP4Save		EQU		0x120
                	TCB_SP5Save		EQU		0x128
                	TCB_SP6Save		EQU		0x130
                	TCB_SP7Save		EQU		0x138
                	TCB_SP8Save		EQU		0x140
                	TCB_SP9Save		EQU		0x148
                	TCB_SP10Save	EQU		0x150
                	TCB_SP11Save	EQU		0x158
                	TCB_SP12Save	EQU		0x160
                	TCB_SP13Save	EQU		0x168
                	TCB_SP14Save	EQU		0x170
                	TCB_SP15Save	EQU		0x178
                	
                	TCB_IPC         EQU     0x180
                	TCB_DPC         EQU     0x188
                	TCB_EPC         EQU     0x190
                	TCB_ISP         EQU     0x198
                	TCB_DSP         EQU     0x1A0
                	TCB_ESP         EQU     0x1A8
                	TCB_CR0         EQU     0x1B0
                	
                	TCB_NextRdy     EQU     $200
                	TCB_PrevRdy     EQU     $208
                	TCB_Status      EQU     $210
                	TCB_Priority    EQU     $212
                	TCB_hJCB        EQU     $214
                	TCB_NextFree    EQU     $218
                	TCB_NextTo      EQU     $228
                	TCB_PrevTo      EQU     $230
                	TCB_mbq_next    EQU     $238
                	TCB_mbq_prev    EQU     $240
                	TCB_MSG_D1      EQU     $248
                	TCB_MSG_D2      EQU     $250
                	TCB_hWaitMbx    EQU     $258
                	TCB_MbxList     EQU     $260
                	TCB_StackTop    EQU     $268
                	TCB_errno       EQU     $270
                	TCB_Timeout     EQU     $278
                	TCB_Affinity    EQU     $280
                	TCB_BIOS_Stack  EQU     $288
                	TCB_SYS_Stack   EQU     $290
                	TCB_Size	    EQU	    $400
                	TCB_LogSize     EQU     10
                	
                	; Mailboxes, room for 2048
                	;			.bss
                	;			.org		0x07E40000
                	NR_MBX		EQU		2048
                	MBX_LINK		EQU     $00       ; link to next mailbox in list (free list)
                	MBX_TQ_HEAD		EQU     $08       ; head of task queue
                	MBX_TQ_TAIL		EQU     $18
                	MBX_MQ_HEAD		EQU     $20	      ; head of message queue
                	MBX_MQ_TAIL		EQU     $28
                	MBX_TQ_COUNT	EQU     $30	      ; count of queued threads
                	MBX_MQ_SIZE		EQU     $32       ; number of messages that may be queued
                	MBX_MQ_COUNT	EQU     $34       ; count of messages that are queued
                	MBX_OWNER		EQU     $36	      ; job handle of mailbox owner
                	MBX_MQ_STRATEGY	EQU     $37	      ; message queueing strategy
                	MBX_MQ_MISSED	EQU     $38	      ; number of messages dropped from queue
                	MBX_Size        EQU     $40
                	
                	MQS_UNLIMITED    EQU     0
                	MQS_OLDEST       EQU     1
                	MQS_NEWEST       EQU     2
                	
                	; Messages, room for 64kW (16,384) messages
                	;			.bss
                	;			.org		0x07E80000
                	NR_MSG		EQU		32768
                	MSG_LINK	EQU     $00	        ; link to next message in queue or free list
                	MSG_D1		EQU     $08         ; message data 1
                	MSG_D2		EQU     $10	        ; message data 2
                	MSG_TYPE	EQU     $18	        ; message type
                	MSG_Size    EQU     $20
                	
                	MT_SEMA		EQU		-1
                	MT_IRQ		EQU		-16
                	MT_GETCHAR	EQU		-17
                	
                	
                	NR_JCB			EQU		51
                	JCB_Number		EQU		0
                	JCB_Name		EQU		4		; 32 bytes (1 len + 31)
                	JCB_MemGroup0	EQU		0x24	; memory map number associated with job
                	JCB_MemGroup1   EQU     0x26
                	JCB_MemGroup2   EQU     0x28
                	JCB_MemGroup3   EQU     0x2A
                	JCB_MemGroup4   EQU     0x2C
                	JCB_MemGroup5   EQU     0x2E
                	JCB_pCode		EQU		0x30
                	JCB_nCode		EQU		0x38	; size of code
                	JCB_pData		EQU		0x40
                	JCB_nData		EQU		0x48	; size of data
                	JCB_pStack		EQU		0x50
                	JCB_nStack		EQU		0x58
                	JCB_UserName	EQU		0x60	; 32 bytes
                	JCB_Path		EQU		0x80	; 256 bytes
                	JCB_ExitRF		EQU		0x180	; 256 bytes
                	JCB_CmdLine		EQU		0x280	; 256 bytes		
                	JCB_SysIn		EQU		0x380	; 48 chars
                	JCB_SysOut		EQU		0x3B0	; 48 chars
                	JCB_ExitError	EQU		0x3E0
                	JCB_pVidMem		EQU		0x3E8		; pointer to video memory
                	JCB_pVirtVid	EQU		0x3F8		; pointer to virtual video buffer
                	JCB_VideoMode	EQU		0x408
                	JCB_VideoRows	EQU		0x40A
                	JCB_VideoCols	EQU		0x40B
                	JCB_CursorRow	EQU		0x40C
                	JCB_CursorCol	EQU		0x40D
                	JCB_CursorOn	EQU		0x40E
                	JCB_CursorFlash	EQU		0x40F
                	JCB_CursorType	EQU		0x410
                	JCB_NormAttr	EQU		0x414
                	JCB_CurrAttr	EQU		0x418
                	JCB_ScrlCnt		EQU		0x41C
                	JCB_fVidPause	EQU		0x41E
                	JCB_Next		EQU		0x420
                	JCB_iof_next	EQU		0x428		; I/O focus list
                	JCB_iof_prev	EQU		0x430
                	JCB_KeybdHead	EQU		0x438
                	JCB_KeybdTail	EQU		0x440
                	JCB_KeybdEcho	EQU		0x448
                	JCB_KeybdBad	EQU		0x449
                	JCB_KeybdAck	EQU		0x44A
                	JCB_KeybdLocks	EQU		0x44C
                	JCB_KeybdBuffer	EQU		0x450		; buffer is 16 words (chars = words)
                	JCB_esc			EQU		0x470		; escape flag for DisplayChar processing
                	JCB_Size		EQU		0x500
                	JCB_LogSize		EQU		11
                	
                	BITMAP_SCREEN1  EQU     $400000     ; bitmap graphics screen area (4MB)
                	BITMAP_SCREEN2  EQU     $800000     ; bitmap graphics screen area (4MB)
                	VAR_Area        EQU     $C00000     ; 64k block for OS vars
                	    code
0130C0 00 00 00 00 		org		$14000
0130C4 00 00 00 00 
0130C8 00 00 00 00 
0130CC 00 00 00 00 
0130D0 00 00 00 00 
0130D4 00 00 00 00 
0130D8 00 00 00 00 
0130DC 00 00 00 00 
0130E0 00 00 00 00 
0130E4 00 00 00 00 
0130E8 00 00 00 00 
0130EC 00 00 00 00 
0130F0 00 00 00 00 
0130F4 00 00 00 00 
0130F8 00 00 00 00 
0130FC 00 00 00 00 
013100 00 00 00 00 
013104 00 00 00 00 
013108 00 00 00 00 
01310C 00 00 00 00 
013110 00 00 00 00 
013114 00 00 00 00 
013118 00 00 00 00 
01311C 00 00 00 00 
013120 00 00 00 00 
013124 00 00 00 00 
013128 00 00 00 00 
01312C 00 00 00 00 
013130 00 00 00 00 
013134 00 00 00 00 
013138 00 00 00 00 
01313C 00 00 00 00 
013140 00 00 00 00 
013144 00 00 00 00 
013148 00 00 00 00 
01314C 00 00 00 00 
013150 00 00 00 00 
013154 00 00 00 00 
013158 00 00 00 00 
01315C 00 00 00 00 
013160 00 00 00 00 
013164 00 00 00 00 
013168 00 00 00 00 
01316C 00 00 00 00 
013170 00 00 00 00 
013174 00 00 00 00 
013178 00 00 00 00 
01317C 00 00 00 00 
013180 00 00 00 00 
013184 00 00 00 00 
013188 00 00 00 00 
01318C 00 00 00 00 
013190 00 00 00 00 
013194 00 00 00 00 
013198 00 00 00 00 
01319C 00 00 00 00 
0131A0 00 00 00 00 
0131A4 00 00 00 00 
0131A8 00 00 00 00 
0131AC 00 00 00 00 
0131B0 00 00 00 00 
0131B4 00 00 00 00 
0131B8 00 00 00 00 
0131BC 00 00 00 00 
0131C0 00 00 00 00 
0131C4 00 00 00 00 
0131C8 00 00 00 00 
0131CC 00 00 00 00 
0131D0 00 00 00 00 
0131D4 00 00 00 00 
0131D8 00 00 00 00 
0131DC 00 00 00 00 
0131E0 00 00 00 00 
0131E4 00 00 00 00 
0131E8 00 00 00 00 
0131EC 00 00 00 00 
0131F0 00 00 00 00 
0131F4 00 00 00 00 
0131F8 00 00 00 00 
0131FC 00 00 00 00 
013200 00 00 00 00 
013204 00 00 00 00 
013208 00 00 00 00 
01320C 00 00 00 00 
013210 00 00 00 00 
013214 00 00 00 00 
013218 00 00 00 00 
01321C 00 00 00 00 
013220 00 00 00 00 
013224 00 00 00 00 
013228 00 00 00 00 
01322C 00 00 00 00 
013230 00 00 00 00 
013234 00 00 00 00 
013238 00 00 00 00 
01323C 00 00 00 00 
013240 00 00 00 00 
013244 00 00 00 00 
013248 00 00 00 00 
01324C 00 00 00 00 
013250 00 00 00 00 
013254 00 00 00 00 
013258 00 00 00 00 
01325C 00 00 00 00 
013260 00 00 00 00 
013264 00 00 00 00 
013268 00 00 00 00 
01326C 00 00 00 00 
013270 00 00 00 00 
013274 00 00 00 00 
013278 00 00 00 00 
01327C 00 00 00 00 
013280 00 00 00 00 
013284 00 00 00 00 
013288 00 00 00 00 
01328C 00 00 00 00 
013290 00 00 00 00 
013294 00 00 00 00 
013298 00 00 00 00 
01329C 00 00 00 00 
0132A0 00 00 00 00 
0132A4 00 00 00 00 
0132A8 00 00 00 00 
0132AC 00 00 00 00 
0132B0 00 00 00 00 
0132B4 00 00 00 00 
0132B8 00 00 00 00 
0132BC 00 00 00 00 
0132C0 00 00 00 00 
0132C4 00 00 00 00 
0132C8 00 00 00 00 
0132CC 00 00 00 00 
0132D0 00 00 00 00 
0132D4 00 00 00 00 
0132D8 00 00 00 00 
0132DC 00 00 00 00 
0132E0 00 00 00 00 
0132E4 00 00 00 00 
0132E8 00 00 00 00 
0132EC 00 00 00 00 
0132F0 00 00 00 00 
0132F4 00 00 00 00 
0132F8 00 00 00 00 
0132FC 00 00 00 00 
013300 00 00 00 00 
013304 00 00 00 00 
013308 00 00 00 00 
01330C 00 00 00 00 
013310 00 00 00 00 
013314 00 00 00 00 
013318 00 00 00 00 
01331C 00 00 00 00 
013320 00 00 00 00 
013324 00 00 00 00 
013328 00 00 00 00 
01332C 00 00 00 00 
013330 00 00 00 00 
013334 00 00 00 00 
013338 00 00 00 00 
01333C 00 00 00 00 
013340 00 00 00 00 
013344 00 00 00 00 
013348 00 00 00 00 
01334C 00 00 00 00 
013350 00 00 00 00 
013354 00 00 00 00 
013358 00 00 00 00 
01335C 00 00 00 00 
013360 00 00 00 00 
013364 00 00 00 00 
013368 00 00 00 00 
01336C 00 00 00 00 
013370 00 00 00 00 
013374 00 00 00 00 
013378 00 00 00 00 
01337C 00 00 00 00 
013380 00 00 00 00 
013384 00 00 00 00 
013388 00 00 00 00 
01338C 00 00 00 00 
013390 00 00 00 00 
013394 00 00 00 00 
013398 00 00 00 00 
01339C 00 00 00 00 
0133A0 00 00 00 00 
0133A4 00 00 00 00 
0133A8 00 00 00 00 
0133AC 00 00 00 00 
0133B0 00 00 00 00 
0133B4 00 00 00 00 
0133B8 00 00 00 00 
0133BC 00 00 00 00 
0133C0 00 00 00 00 
0133C4 00 00 00 00 
0133C8 00 00 00 00 
0133CC 00 00 00 00 
0133D0 00 00 00 00 
0133D4 00 00 00 00 
0133D8 00 00 00 00 
0133DC 00 00 00 00 
0133E0 00 00 00 00 
0133E4 00 00 00 00 
0133E8 00 00 00 00 
0133EC 00 00 00 00 
0133F0 00 00 00 00 
0133F4 00 00 00 00 
0133F8 00 00 00 00 
0133FC 00 00 00 00 
013400 00 00 00 00 
013404 00 00 00 00 
013408 00 00 00 00 
01340C 00 00 00 00 
013410 00 00 00 00 
013414 00 00 00 00 
013418 00 00 00 00 
01341C 00 00 00 00 
013420 00 00 00 00 
013424 00 00 00 00 
013428 00 00 00 00 
01342C 00 00 00 00 
013430 00 00 00 00 
013434 00 00 00 00 
013438 00 00 00 00 
01343C 00 00 00 00 
013440 00 00 00 00 
013444 00 00 00 00 
013448 00 00 00 00 
01344C 00 00 00 00 
013450 00 00 00 00 
013454 00 00 00 00 
013458 00 00 00 00 
01345C 00 00 00 00 
013460 00 00 00 00 
013464 00 00 00 00 
013468 00 00 00 00 
01346C 00 00 00 00 
013470 00 00 00 00 
013474 00 00 00 00 
013478 00 00 00 00 
01347C 00 00 00 00 
013480 00 00 00 00 
013484 00 00 00 00 
013488 00 00 00 00 
01348C 00 00 00 00 
013490 00 00 00 00 
013494 00 00 00 00 
013498 00 00 00 00 
01349C 00 00 00 00 
0134A0 00 00 00 00 
0134A4 00 00 00 00 
0134A8 00 00 00 00 
0134AC 00 00 00 00 
0134B0 00 00 00 00 
0134B4 00 00 00 00 
0134B8 00 00 00 00 
0134BC 00 00 00 00 
0134C0 00 00 00 00 
0134C4 00 00 00 00 
0134C8 00 00 00 00 
0134CC 00 00 00 00 
0134D0 00 00 00 00 
0134D4 00 00 00 00 
0134D8 00 00 00 00 
0134DC 00 00 00 00 
0134E0 00 00 00 00 
0134E4 00 00 00 00 
0134E8 00 00 00 00 
0134EC 00 00 00 00 
0134F0 00 00 00 00 
0134F4 00 00 00 00 
0134F8 00 00 00 00 
0134FC 00 00 00 00 
013500 00 00 00 00 
013504 00 00 00 00 
013508 00 00 00 00 
01350C 00 00 00 00 
013510 00 00 00 00 
013514 00 00 00 00 
013518 00 00 00 00 
01351C 00 00 00 00 
013520 00 00 00 00 
013524 00 00 00 00 
013528 00 00 00 00 
01352C 00 00 00 00 
013530 00 00 00 00 
013534 00 00 00 00 
013538 00 00 00 00 
01353C 00 00 00 00 
013540 00 00 00 00 
013544 00 00 00 00 
013548 00 00 00 00 
01354C 00 00 00 00 
013550 00 00 00 00 
013554 00 00 00 00 
013558 00 00 00 00 
01355C 00 00 00 00 
013560 00 00 00 00 
013564 00 00 00 00 
013568 00 00 00 00 
01356C 00 00 00 00 
013570 00 00 00 00 
013574 00 00 00 00 
013578 00 00 00 00 
01357C 00 00 00 00 
013580 00 00 00 00 
013584 00 00 00 00 
013588 00 00 00 00 
01358C 00 00 00 00 
013590 00 00 00 00 
013594 00 00 00 00 
013598 00 00 00 00 
01359C 00 00 00 00 
0135A0 00 00 00 00 
0135A4 00 00 00 00 
0135A8 00 00 00 00 
0135AC 00 00 00 00 
0135B0 00 00 00 00 
0135B4 00 00 00 00 
0135B8 00 00 00 00 
0135BC 00 00 00 00 
0135C0 00 00 00 00 
0135C4 00 00 00 00 
0135C8 00 00 00 00 
0135CC 00 00 00 00 
0135D0 00 00 00 00 
0135D4 00 00 00 00 
0135D8 00 00 00 00 
0135DC 00 00 00 00 
0135E0 00 00 00 00 
0135E4 00 00 00 00 
0135E8 00 00 00 00 
0135EC 00 00 00 00 
0135F0 00 00 00 00 
0135F4 00 00 00 00 
0135F8 00 00 00 00 
0135FC 00 00 00 00 
013600 00 00 00 00 
013604 00 00 00 00 
013608 00 00 00 00 
01360C 00 00 00 00 
013610 00 00 00 00 
013614 00 00 00 00 
013618 00 00 00 00 
01361C 00 00 00 00 
013620 00 00 00 00 
013624 00 00 00 00 
013628 00 00 00 00 
01362C 00 00 00 00 
013630 00 00 00 00 
013634 00 00 00 00 
013638 00 00 00 00 
01363C 00 00 00 00 
013640 00 00 00 00 
013644 00 00 00 00 
013648 00 00 00 00 
01364C 00 00 00 00 
013650 00 00 00 00 
013654 00 00 00 00 
013658 00 00 00 00 
01365C 00 00 00 00 
013660 00 00 00 00 
013664 00 00 00 00 
013668 00 00 00 00 
01366C 00 00 00 00 
013670 00 00 00 00 
013674 00 00 00 00 
013678 00 00 00 00 
01367C 00 00 00 00 
013680 00 00 00 00 
013684 00 00 00 00 
013688 00 00 00 00 
01368C 00 00 00 00 
013690 00 00 00 00 
013694 00 00 00 00 
013698 00 00 00 00 
01369C 00 00 00 00 
0136A0 00 00 00 00 
0136A4 00 00 00 00 
0136A8 00 00 00 00 
0136AC 00 00 00 00 
0136B0 00 00 00 00 
0136B4 00 00 00 00 
0136B8 00 00 00 00 
0136BC 00 00 00 00 
0136C0 00 00 00 00 
0136C4 00 00 00 00 
0136C8 00 00 00 00 
0136CC 00 00 00 00 
0136D0 00 00 00 00 
0136D4 00 00 00 00 
0136D8 00 00 00 00 
0136DC 00 00 00 00 
0136E0 00 00 00 00 
0136E4 00 00 00 00 
0136E8 00 00 00 00 
0136EC 00 00 00 00 
0136F0 00 00 00 00 
0136F4 00 00 00 00 
0136F8 00 00 00 00 
0136FC 00 00 00 00 
013700 00 00 00 00 
013704 00 00 00 00 
013708 00 00 00 00 
01370C 00 00 00 00 
013710 00 00 00 00 
013714 00 00 00 00 
013718 00 00 00 00 
01371C 00 00 00 00 
013720 00 00 00 00 
013724 00 00 00 00 
013728 00 00 00 00 
01372C 00 00 00 00 
013730 00 00 00 00 
013734 00 00 00 00 
013738 00 00 00 00 
01373C 00 00 00 00 
013740 00 00 00 00 
013744 00 00 00 00 
013748 00 00 00 00 
01374C 00 00 00 00 
013750 00 00 00 00 
013754 00 00 00 00 
013758 00 00 00 00 
01375C 00 00 00 00 
013760 00 00 00 00 
013764 00 00 00 00 
013768 00 00 00 00 
01376C 00 00 00 00 
013770 00 00 00 00 
013774 00 00 00 00 
013778 00 00 00 00 
01377C 00 00 00 00 
013780 00 00 00 00 
013784 00 00 00 00 
013788 00 00 00 00 
01378C 00 00 00 00 
013790 00 00 00 00 
013794 00 00 00 00 
013798 00 00 00 00 
01379C 00 00 00 00 
0137A0 00 00 00 00 
0137A4 00 00 00 00 
0137A8 00 00 00 00 
0137AC 00 00 00 00 
0137B0 00 00 00 00 
0137B4 00 00 00 00 
0137B8 00 00 00 00 
0137BC 00 00 00 00 
0137C0 00 00 00 00 
0137C4 00 00 00 00 
0137C8 00 00 00 00 
0137CC 00 00 00 00 
0137D0 00 00 00 00 
0137D4 00 00 00 00 
0137D8 00 00 00 00 
0137DC 00 00 00 00 
0137E0 00 00 00 00 
0137E4 00 00 00 00 
0137E8 00 00 00 00 
0137EC 00 00 00 00 
0137F0 00 00 00 00 
0137F4 00 00 00 00 
0137F8 00 00 00 00 
0137FC 00 00 00 00 
013800 00 00 00 00 
013804 00 00 00 00 
013808 00 00 00 00 
01380C 00 00 00 00 
013810 00 00 00 00 
013814 00 00 00 00 
013818 00 00 00 00 
01381C 00 00 00 00 
013820 00 00 00 00 
013824 00 00 00 00 
013828 00 00 00 00 
01382C 00 00 00 00 
013830 00 00 00 00 
013834 00 00 00 00 
013838 00 00 00 00 
01383C 00 00 00 00 
013840 00 00 00 00 
013844 00 00 00 00 
013848 00 00 00 00 
01384C 00 00 00 00 
013850 00 00 00 00 
013854 00 00 00 00 
013858 00 00 00 00 
01385C 00 00 00 00 
013860 00 00 00 00 
013864 00 00 00 00 
013868 00 00 00 00 
01386C 00 00 00 00 
013870 00 00 00 00 
013874 00 00 00 00 
013878 00 00 00 00 
01387C 00 00 00 00 
013880 00 00 00 00 
013884 00 00 00 00 
013888 00 00 00 00 
01388C 00 00 00 00 
013890 00 00 00 00 
013894 00 00 00 00 
013898 00 00 00 00 
01389C 00 00 00 00 
0138A0 00 00 00 00 
0138A4 00 00 00 00 
0138A8 00 00 00 00 
0138AC 00 00 00 00 
0138B0 00 00 00 00 
0138B4 00 00 00 00 
0138B8 00 00 00 00 
0138BC 00 00 00 00 
0138C0 00 00 00 00 
0138C4 00 00 00 00 
0138C8 00 00 00 00 
0138CC 00 00 00 00 
0138D0 00 00 00 00 
0138D4 00 00 00 00 
0138D8 00 00 00 00 
0138DC 00 00 00 00 
0138E0 00 00 00 00 
0138E4 00 00 00 00 
0138E8 00 00 00 00 
0138EC 00 00 00 00 
0138F0 00 00 00 00 
0138F4 00 00 00 00 
0138F8 00 00 00 00 
0138FC 00 00 00 00 
013900 00 00 00 00 
013904 00 00 00 00 
013908 00 00 00 00 
01390C 00 00 00 00 
013910 00 00 00 00 
013914 00 00 00 00 
013918 00 00 00 00 
01391C 00 00 00 00 
013920 00 00 00 00 
013924 00 00 00 00 
013928 00 00 00 00 
01392C 00 00 00 00 
013930 00 00 00 00 
013934 00 00 00 00 
013938 00 00 00 00 
01393C 00 00 00 00 
013940 00 00 00 00 
013944 00 00 00 00 
013948 00 00 00 00 
01394C 00 00 00 00 
013950 00 00 00 00 
013954 00 00 00 00 
013958 00 00 00 00 
01395C 00 00 00 00 
013960 00 00 00 00 
013964 00 00 00 00 
013968 00 00 00 00 
01396C 00 00 00 00 
013970 00 00 00 00 
013974 00 00 00 00 
013978 00 00 00 00 
01397C 00 00 00 00 
013980 00 00 00 00 
013984 00 00 00 00 
013988 00 00 00 00 
01398C 00 00 00 00 
013990 00 00 00 00 
013994 00 00 00 00 
013998 00 00 00 00 
01399C 00 00 00 00 
0139A0 00 00 00 00 
0139A4 00 00 00 00 
0139A8 00 00 00 00 
0139AC 00 00 00 00 
0139B0 00 00 00 00 
0139B4 00 00 00 00 
0139B8 00 00 00 00 
0139BC 00 00 00 00 
0139C0 00 00 00 00 
0139C4 00 00 00 00 
0139C8 00 00 00 00 
0139CC 00 00 00 00 
0139D0 00 00 00 00 
0139D4 00 00 00 00 
0139D8 00 00 00 00 
0139DC 00 00 00 00 
0139E0 00 00 00 00 
0139E4 00 00 00 00 
0139E8 00 00 00 00 
0139EC 00 00 00 00 
0139F0 00 00 00 00 
0139F4 00 00 00 00 
0139F8 00 00 00 00 
0139FC 00 00 00 00 
013A00 00 00 00 00 
013A04 00 00 00 00 
013A08 00 00 00 00 
013A0C 00 00 00 00 
013A10 00 00 00 00 
013A14 00 00 00 00 
013A18 00 00 00 00 
013A1C 00 00 00 00 
013A20 00 00 00 00 
013A24 00 00 00 00 
013A28 00 00 00 00 
013A2C 00 00 00 00 
013A30 00 00 00 00 
013A34 00 00 00 00 
013A38 00 00 00 00 
013A3C 00 00 00 00 
013A40 00 00 00 00 
013A44 00 00 00 00 
013A48 00 00 00 00 
013A4C 00 00 00 00 
013A50 00 00 00 00 
013A54 00 00 00 00 
013A58 00 00 00 00 
013A5C 00 00 00 00 
013A60 00 00 00 00 
013A64 00 00 00 00 
013A68 00 00 00 00 
013A6C 00 00 00 00 
013A70 00 00 00 00 
013A74 00 00 00 00 
013A78 00 00 00 00 
013A7C 00 00 00 00 
013A80 00 00 00 00 
013A84 00 00 00 00 
013A88 00 00 00 00 
013A8C 00 00 00 00 
013A90 00 00 00 00 
013A94 00 00 00 00 
013A98 00 00 00 00 
013A9C 00 00 00 00 
013AA0 00 00 00 00 
013AA4 00 00 00 00 
013AA8 00 00 00 00 
013AAC 00 00 00 00 
013AB0 00 00 00 00 
013AB4 00 00 00 00 
013AB8 00 00 00 00 
013ABC 00 00 00 00 
013AC0 00 00 00 00 
013AC4 00 00 00 00 
013AC8 00 00 00 00 
013ACC 00 00 00 00 
013AD0 00 00 00 00 
013AD4 00 00 00 00 
013AD8 00 00 00 00 
013ADC 00 00 00 00 
013AE0 00 00 00 00 
013AE4 00 00 00 00 
013AE8 00 00 00 00 
013AEC 00 00 00 00 
013AF0 00 00 00 00 
013AF4 00 00 00 00 
013AF8 00 00 00 00 
013AFC 00 00 00 00 
013B00 00 00 00 00 
013B04 00 00 00 00 
013B08 00 00 00 00 
013B0C 00 00 00 00 
013B10 00 00 00 00 
013B14 00 00 00 00 
013B18 00 00 00 00 
013B1C 00 00 00 00 
013B20 00 00 00 00 
013B24 00 00 00 00 
013B28 00 00 00 00 
013B2C 00 00 00 00 
013B30 00 00 00 00 
013B34 00 00 00 00 
013B38 00 00 00 00 
013B3C 00 00 00 00 
013B40 00 00 00 00 
013B44 00 00 00 00 
013B48 00 00 00 00 
013B4C 00 00 00 00 
013B50 00 00 00 00 
013B54 00 00 00 00 
013B58 00 00 00 00 
013B5C 00 00 00 00 
013B60 00 00 00 00 
013B64 00 00 00 00 
013B68 00 00 00 00 
013B6C 00 00 00 00 
013B70 00 00 00 00 
013B74 00 00 00 00 
013B78 00 00 00 00 
013B7C 00 00 00 00 
013B80 00 00 00 00 
013B84 00 00 00 00 
013B88 00 00 00 00 
013B8C 00 00 00 00 
013B90 00 00 00 00 
013B94 00 00 00 00 
013B98 00 00 00 00 
013B9C 00 00 00 00 
013BA0 00 00 00 00 
013BA4 00 00 00 00 
013BA8 00 00 00 00 
013BAC 00 00 00 00 
013BB0 00 00 00 00 
013BB4 00 00 00 00 
013BB8 00 00 00 00 
013BBC 00 00 00 00 
013BC0 00 00 00 00 
013BC4 00 00 00 00 
013BC8 00 00 00 00 
013BCC 00 00 00 00 
013BD0 00 00 00 00 
013BD4 00 00 00 00 
013BD8 00 00 00 00 
013BDC 00 00 00 00 
013BE0 00 00 00 00 
013BE4 00 00 00 00 
013BE8 00 00 00 00 
013BEC 00 00 00 00 
013BF0 00 00 00 00 
013BF4 00 00 00 00 
013BF8 00 00 00 00 
013BFC 00 00 00 00 
013C00 00 00 00 00 
013C04 00 00 00 00 
013C08 00 00 00 00 
013C0C 00 00 00 00 
013C10 00 00 00 00 
013C14 00 00 00 00 
013C18 00 00 00 00 
013C1C 00 00 00 00 
013C20 00 00 00 00 
013C24 00 00 00 00 
013C28 00 00 00 00 
013C2C 00 00 00 00 
013C30 00 00 00 00 
013C34 00 00 00 00 
013C38 00 00 00 00 
013C3C 00 00 00 00 
013C40 00 00 00 00 
013C44 00 00 00 00 
013C48 00 00 00 00 
013C4C 00 00 00 00 
013C50 00 00 00 00 
013C54 00 00 00 00 
013C58 00 00 00 00 
013C5C 00 00 00 00 
013C60 00 00 00 00 
013C64 00 00 00 00 
013C68 00 00 00 00 
013C6C 00 00 00 00 
013C70 00 00 00 00 
013C74 00 00 00 00 
013C78 00 00 00 00 
013C7C 00 00 00 00 
013C80 00 00 00 00 
013C84 00 00 00 00 
013C88 00 00 00 00 
013C8C 00 00 00 00 
013C90 00 00 00 00 
013C94 00 00 00 00 
013C98 00 00 00 00 
013C9C 00 00 00 00 
013CA0 00 00 00 00 
013CA4 00 00 00 00 
013CA8 00 00 00 00 
013CAC 00 00 00 00 
013CB0 00 00 00 00 
013CB4 00 00 00 00 
013CB8 00 00 00 00 
013CBC 00 00 00 00 
013CC0 00 00 00 00 
013CC4 00 00 00 00 
013CC8 00 00 00 00 
013CCC 00 00 00 00 
013CD0 00 00 00 00 
013CD4 00 00 00 00 
013CD8 00 00 00 00 
013CDC 00 00 00 00 
013CE0 00 00 00 00 
013CE4 00 00 00 00 
013CE8 00 00 00 00 
013CEC 00 00 00 00 
013CF0 00 00 00 00 
013CF4 00 00 00 00 
013CF8 00 00 00 00 
013CFC 00 00 00 00 
013D00 00 00 00 00 
013D04 00 00 00 00 
013D08 00 00 00 00 
013D0C 00 00 00 00 
013D10 00 00 00 00 
013D14 00 00 00 00 
013D18 00 00 00 00 
013D1C 00 00 00 00 
013D20 00 00 00 00 
013D24 00 00 00 00 
013D28 00 00 00 00 
013D2C 00 00 00 00 
013D30 00 00 00 00 
013D34 00 00 00 00 
013D38 00 00 00 00 
013D3C 00 00 00 00 
013D40 00 00 00 00 
013D44 00 00 00 00 
013D48 00 00 00 00 
013D4C 00 00 00 00 
013D50 00 00 00 00 
013D54 00 00 00 00 
013D58 00 00 00 00 
013D5C 00 00 00 00 
013D60 00 00 00 00 
013D64 00 00 00 00 
013D68 00 00 00 00 
013D6C 00 00 00 00 
013D70 00 00 00 00 
013D74 00 00 00 00 
013D78 00 00 00 00 
013D7C 00 00 00 00 
013D80 00 00 00 00 
013D84 00 00 00 00 
013D88 00 00 00 00 
013D8C 00 00 00 00 
013D90 00 00 00 00 
013D94 00 00 00 00 
013D98 00 00 00 00 
013D9C 00 00 00 00 
013DA0 00 00 00 00 
013DA4 00 00 00 00 
013DA8 00 00 00 00 
013DAC 00 00 00 00 
013DB0 00 00 00 00 
013DB4 00 00 00 00 
013DB8 00 00 00 00 
013DBC 00 00 00 00 
013DC0 00 00 00 00 
013DC4 00 00 00 00 
013DC8 00 00 00 00 
013DCC 00 00 00 00 
013DD0 00 00 00 00 
013DD4 00 00 00 00 
013DD8 00 00 00 00 
013DDC 00 00 00 00 
013DE0 00 00 00 00 
013DE4 00 00 00 00 
013DE8 00 00 00 00 
013DEC 00 00 00 00 
013DF0 00 00 00 00 
013DF4 00 00 00 00 
013DF8 00 00 00 00 
013DFC 00 00 00 00 
013E00 00 00 00 00 
013E04 00 00 00 00 
013E08 00 00 00 00 
013E0C 00 00 00 00 
013E10 00 00 00 00 
013E14 00 00 00 00 
013E18 00 00 00 00 
013E1C 00 00 00 00 
013E20 00 00 00 00 
013E24 00 00 00 00 
013E28 00 00 00 00 
013E2C 00 00 00 00 
013E30 00 00 00 00 
013E34 00 00 00 00 
013E38 00 00 00 00 
013E3C 00 00 00 00 
013E40 00 00 00 00 
013E44 00 00 00 00 
013E48 00 00 00 00 
013E4C 00 00 00 00 
013E50 00 00 00 00 
013E54 00 00 00 00 
013E58 00 00 00 00 
013E5C 00 00 00 00 
013E60 00 00 00 00 
013E64 00 00 00 00 
013E68 00 00 00 00 
013E6C 00 00 00 00 
013E70 00 00 00 00 
013E74 00 00 00 00 
013E78 00 00 00 00 
013E7C 00 00 00 00 
013E80 00 00 00 00 
013E84 00 00 00 00 
013E88 00 00 00 00 
013E8C 00 00 00 00 
013E90 00 00 00 00 
013E94 00 00 00 00 
013E98 00 00 00 00 
013E9C 00 00 00 00 
013EA0 00 00 00 00 
013EA4 00 00 00 00 
013EA8 00 00 00 00 
013EAC 00 00 00 00 
013EB0 00 00 00 00 
013EB4 00 00 00 00 
013EB8 00 00 00 00 
013EBC 00 00 00 00 
013EC0 00 00 00 00 
013EC4 00 00 00 00 
013EC8 00 00 00 00 
013ECC 00 00 00 00 
013ED0 00 00 00 00 
013ED4 00 00 00 00 
013ED8 00 00 00 00 
013EDC 00 00 00 00 
013EE0 00 00 00 00 
013EE4 00 00 00 00 
013EE8 00 00 00 00 
013EEC 00 00 00 00 
013EF0 00 00 00 00 
013EF4 00 00 00 00 
013EF8 00 00 00 00 
013EFC 00 00 00 00 
013F00 00 00 00 00 
013F04 00 00 00 00 
013F08 00 00 00 00 
013F0C 00 00 00 00 
013F10 00 00 00 00 
013F14 00 00 00 00 
013F18 00 00 00 00 
013F1C 00 00 00 00 
013F20 00 00 00 00 
013F24 00 00 00 00 
013F28 00 00 00 00 
013F2C 00 00 00 00 
013F30 00 00 00 00 
013F34 00 00 00 00 
013F38 00 00 00 00 
013F3C 00 00 00 00 
013F40 00 00 00 00 
013F44 00 00 00 00 
013F48 00 00 00 00 
013F4C 00 00 00 00 
013F50 00 00 00 00 
013F54 00 00 00 00 
013F58 00 00 00 00 
013F5C 00 00 00 00 
013F60 00 00 00 00 
013F64 00 00 00 00 
013F68 00 00 00 00 
013F6C 00 00 00 00 
013F70 00 00 00 00 
013F74 00 00 00 00 
013F78 00 00 00 00 
013F7C 00 00 00 00 
013F80 00 00 00 00 
013F84 00 00 00 00 
013F88 00 00 00 00 
013F8C 00 00 00 00 
013F90 00 00 00 00 
013F94 00 00 00 00 
013F98 00 00 00 00 
013F9C 00 00 00 00 
013FA0 00 00 00 00 
013FA4 00 00 00 00 
013FA8 00 00 00 00 
013FAC 00 00 00 00 
013FB0 00 00 00 00 
013FB4 00 00 00 00 
013FB8 00 00 00 00 
013FBC 00 00 00 00 
013FC0 00 00 00 00 
013FC4 00 00 00 00 
013FC8 00 00 00 00 
013FCC 00 00 00 00 
013FD0 00 00 00 00 
013FD4 00 00 00 00 
013FD8 00 00 00 00 
013FDC 00 00 00 00 
013FE0 00 00 00 00 
013FE4 00 00 00 00 
013FE8 00 00 00 00 
013FEC 00 00 00 00 
013FF0 00 00 00 00 
013FF4 00 00 00 00 
013FF8 00 00 00 00 
013FFC 00 00 00 00 
                		; Compress vector table by storing only the low order 16 bits of the
                		; vector. The high order bits are always the same.
                	syscall_vectors:
014000 1C 40       		dc		FMTKInitialize
014002 B0 45       		dc		StartTask
014004 0C 47       		dc		ExitTask
014006 4C 47       		dc   	KillTask
014008 ED 48       		dc		SetTaskPriority
01400A 38 4C       		dc		Sleep
01400C 6C 4C       		dc		AllocMbx
01400E 2C 4D       		dc		FreeMbx
014010 C8 50       		dc		PostMsg
014012 E0 50       		dc		SendMsg
014014 34 52       		dc		WaitMsg
014016 90 53       		dc		CheckMsg
                	
                	message "InitFMTK"
                	BranchToSelf:
014018 3A 00 00 00 	    bra     BranchToSelf
                	
                	FMTKInitialize:
                	InitFMTK:
                	    ; The first part initialization is common setup for all processors.
                	    ; The second part is 'do once' by whatever processor gets to initizlization
                	    ; first.
                	    
01401C E7 EF 01 00 	    push    lr
014020 02 40 09 3E 	    mfspr   r20,tick
014024 39 A1 00 00 	    bsr     UnlockSYS
                	
                	    ; Setup bounds checking register #48 to check the TCB pointer
014028 7C C1 00 00 	    lea     r1,TCB_Array
01402C 47 10 00 00 
014030 82 00 E0 3C 	    mtspr   112,r1                   ; set lower bounds
014034 7C C5 00 00 	    lea     r1,TCB_ArrayEnd
014038 47 10 00 00 
01403C 82 00 60 3D 	    mtspr   176,r1                   ; set upper bounds
014040 0A 10 FE 07 	    ldi     r1,#$3FF                 
014044 82 00 E0 3D 	    mtspr   240,r1                   ; set modulo mask
                	
                	    ; Setup bounds checking register #49 to check the MBX pointer
014048 FC C5 00 00 	    lea     r1,MBX_Array
01404C 47 10 00 FE 
014050 82 00 E2 3C 	    mtspr   113,r1                   ; set lower bounds
014054 FC C7 00 00 	    lea     r1,MBX_ArrayEnd
014058 47 10 00 FE 
01405C 82 00 62 3D 	    mtspr   177,r1                   ; set upper bounds
014060 0A 10 7E 00 	    ldi     r1,#$3F                 
014064 82 00 E2 3D 	    mtspr   241,r1                   ; set modulo mask
                	
014068 39 95 00 00 	    bsr     LockSYS
                	    
                	    ; Set interrupt vectors
01406C 02 20 14 3E 		mfspr	r2,vbr
014070 7C 01 00 00 		ldi		r1,#reschedule
014074 0A 10 38 A9 
014078 63 11 20 00 		sw		r1,16[r2]
01407C 7C 01 00 00 		ldi		r1,#syscall_exception
014080 0A 10 90 A8 
014084 63 11 40 00 		sw		r1,32[r2]
014088 7C 01 00 00 		ldi		r1,#FMTKTick
01408C 0A 10 B8 AB 
014090 63 11 30 1C 		sw		r1,(448+3)<<3[r2]
                	
                		; Manually setup the BIOS task
                		; FMTK can't be called to setup the first task because it uses the
                		; SYS_STACK associated with the running task which hasn't been set yet.
014094 02 80 01 6C 		cpuid   tr,r0,#0
014098 02 8C 15 70 		asli    tr,tr,#TCB_LogSize
01409C 7C C1 00 00 		addui   tr,tr,#TCB_Array
0140A0 14 8C 01 00 
0140A4 63 0C 50 04 		sw		r0,TCB_NextTo[tr]
0140A8 63 0C 60 04 		sw		r0,TCB_PrevTo[tr]
0140AC 60 0C 28 04 		sb      r0,TCB_hJCB[tr]         ; system JOB owns this TCB
0140B0 7C D0 07 00 		ldi     r1,#SYS_STACKS_Array + 4088
0140B4 0A 10 F0 1F 
0140B8 63 1C 20 05 		sw      r1,TCB_SYS_Stack[tr]
0140BC 7C E0 07 00 		ldi     r1,#BIOS_STACKS_Array + 4088
0140C0 0A 10 F0 1F 
0140C4 63 1C 10 05 		sw      r1,TCB_BIOS_Stack[tr]
0140C8 0A 10 06 00 		ldi		r1,#3
0140CC 61 1C 24 04 		sc		r1,TCB_Priority[tr]
0140D0 02 10 00 6C 		cpuid   r1,r0,#0
0140D4 60 1C 00 05 		sb      r1,TCB_Affinity[tr]
0140D8 63 0C F0 04 		sw		r0,TCB_Timeout[tr]
0140DC 7C F0 07 00 		ldi     r1,#STACKS_Array+$FF8   ; setup stack pointer top of memory
0140E0 0A 10 F0 1F 
0140E4 63 1C F0 01 		sw		r1,TCB_r31[tr]
                	
0140E8 7C C0 00 00 	    lw      r1,FMTK_Inited
0140EC 46 10 60 03 
0140F0 7C 34 12 00 	    cmp     r1,r1,#$12345678
0140F4 86 10 F0 AC 
0140F8 BD 10 0E 00 	    bne     r1,.0001
0140FC 02 1C 00 1A 	    mov     r1,tr
014100 39 0C 01 00 	    bsr     AddTaskToReadyList
014104 0A 10 30 00 		ldi		r1,#TS_RUNNING|TS_READY
014108 60 1C 20 04 		sb		r1,TCB_Status[tr]
01410C 39 84 00 00 	    bsr     UnlockSYS
014110 3B FF 11 00 	    rts
.0001:
014114 7C C0 00 00 		sw		r0,UserTick
014118 63 00 00 00 
                	    
                	    ; Clear memory used by FMTK
                	    ; The bootrom uses TCB #0 
                	;    ldi     r1,#VAR_Area
                	zap1:
                	;    sw      r0,[r1]
                	;    addui   r1,r1,#8
                	;    cmpu    r2,r1,#DCB_ArrayEnd
                	;    blt     r2,zap1
                	
                		; Initialize semaphores
01411C 39 24 03 00 	    bsr     UnlockIOF
                	     
014120 7C C0 00 00 		sw		r0,TimeoutList		; no entries in timeout list
014124 63 00 20 02 
014128 7C C0 00 00 		sw		r0,QNdx0
01412C 63 00 A0 00 
014130 7C C0 00 00 		sw		r0,QNdx1
014134 63 00 B0 00 
014138 7C C0 00 00 		sw		r0,QNdx2
01413C 63 00 C0 00 
014140 7C C0 00 00 		sw		r0,QNdx3
014144 63 00 D0 00 
014148 7C C0 00 00 		sw		r0,QNdx4
01414C 63 00 E0 00 
014150 7C C0 00 00 		sw		r0,QNdx5
014154 63 00 F0 00 
014158 7C C0 00 00 		sw		r0,QNdx6
01415C 63 00 00 01 
014160 7C C0 00 00 		sw		r0,QNdx7
014164 63 00 10 01 
014168 02 1C 00 1A 	    mov     r1,tr
01416C B9 FE 00 00 	    bsr     AddTaskToReadyList
014170 0A 10 30 00 		ldi		r1,#TS_RUNNING|TS_READY
014174 60 1C 20 04 		sb		r1,TCB_Status[tr]
                	
014178 7C C0 00 00 		sw		r0,missed_ticks
01417C 63 00 80 02 
                	
                		; Initialize IO Focus List
                		; There is a bit for each job that could have the I/O focus. This really
                		; requires only a single word of storage as there are only 51 jobs
                		; allowed for.
                		;
014180 7C C0 00 00 		sw      r0,IOFocusTbl
014184 63 00 60 00 
014188 7C C0 00 00 		sw      r0,IOFocusTbl+8
01418C 63 00 70 00 
014190 7C C0 00 00 		sw      r0,IOFocusTbl+16
014194 63 00 80 00 
014198 7C C0 00 00 		sw      r0,IOFocusTbl+32
01419C 63 00 A0 00 
                	
                		; Initialize the FreeJCB list
0141A0 7C C5 00 00 		ldi		r1,#JCB_Array+JCB_Size		; the next available JCB
0141A4 0A 10 00 0A 
0141A8 7C C0 00 00 		sw		r1,FreeJCB
0141AC 63 10 00 02 
0141B0 82 20 00 1A 		mov     r2,r1
0141B4 94 10 00 0A 		addui	r1,r1,#JCB_Size
0141B8 0A 30 64 00 		ldi		r3,#NR_JCB-1
                	st5:
0141BC 63 11 40 08 		sw		r1,JCB_Next[r2]
0141C0 94 10 00 0A 		addui	r1,r1,#JCB_Size
0141C4 14 21 00 0A 		addui	r2,r2,#JCB_Size
0141C8 95 31 02 00 		subui   r3,r3,#1
0141CC BD 11 F8 FF 		bne		r3,st5
0141D0 63 01 40 08 		sw      r0,JCB_Next[r2]
                	
                		; Setup default values in the JCB's
0141D4 0A 30 00 00 		ldi		r3,#0
0141D8 0A 20 66 00 		ldi		r2,#NR_JCB
0141DC 0A 40 80 27 		ldi     r4,#JCB0
                	ijcb1:
0141E0 61 32 00 00 		sc		r3,JCB_Number[r4]
0141E4 60 02 E0 08 		sb		r0,JCB_esc[r4]
0141E8 0A 10 3E 00 		ldi     r1,#31
0141EC 60 12 14 08 		sb		r1,JCB_VideoRows[r4]
0141F0 0A 10 A8 00 		ldi		r1,#84
0141F4 60 12 16 08 		sb		r1,JCB_VideoCols[r4]
0141F8 0A 10 02 00 		ldi		r1,#1				; turn on keyboard echo
0141FC 60 12 90 08 		sb		r1,JCB_KeybdEcho[r4]
014200 60 12 1C 08 		sb		r1,JCB_CursorOn[r4]
014204 60 12 1E 08 		sb		r1,JCB_CursorFlash[r4]
014208 60 02 18 08 		sb		r0,JCB_CursorRow[r4]
01420C 60 02 1A 08 		sb		r0,JCB_CursorCol[r4]
014210 60 02 20 08 		sb		r0,JCB_CursorType[r4]
014214 FC 97 04 00 		ldi		r1,#%010010010_111111111_0000000000	; white on grey
014218 0A 10 00 F8 
01421C 62 12 28 08 		sh		r1,JCB_NormAttr[r4]
014220 62 12 30 08 		sh		r1,JCB_CurrAttr[r4]
014224 7C 00 00 00 		mulu	r5,r3,#16384		; 8192 words per screen
014228 97 51 00 80 
01422C 7C D8 00 00 		addui   r5,r5,#SCREEN_Array
014230 94 52 00 00 
014234 62 52 F0 07 		sh		r5,JCB_pVirtVid[r4]
014238 62 52 D0 07 		sh		r5,JCB_pVidMem[r4]
01423C BD 11 14 00 		bne		r3,ijcb2
014240 FC 26 00 00 		ldi		r1,#%000000100_110101110_0000000000	; grey on blue
014244 0A 10 00 70 
014248 62 12 28 08 		sh		r1,JCB_NormAttr[r4]
01424C 62 12 30 08 		sh		r1,JCB_CurrAttr[r4]
014250 7C D0 FF 00 		ldi		r5,#TEXTSCR
014254 0A 50 00 00 
014258 62 52 D0 07 		sh		r5,JCB_pVidMem[r4]
01425C 7C C5 00 00 		ldi     r4,#JCB_Array
014260 0A 40 00 00 
                	ijcb2:
014264 94 31 02 00 	    addui   r3,r3,#1
014268 14 42 00 0A 		addui	r4,r4,#JCB_Size
01426C 86 21 66 00 		cmp     r2,r3,#NR_JCB
014270 3D 41 B8 FF 		blt		r2,ijcb1
                	
                		; Initialize free message list
014274 FC 00 00 00 		ldi		r1,#NR_MSG
014278 0A 10 00 00 
01427C 7C C0 00 00 		sw		r1,nMsgBlk
014280 63 10 70 02 
014284 7C C8 00 00 		ldi     r1,#MSG_Array
014288 0A 10 00 00 
01428C 7C C0 00 00 		sw		r1,FreeMsg
014290 63 10 60 02 
014294 94 20 40 00 		addui   r2,r1,MSG_Size
                	st4:
014298 E3 20 00 00 		sw		r2,MSG_LINK[r1]
01429C E3 00 10 00 		sw      r0,MSG_D1[r1]
0142A0 E3 00 20 00 		sw      r0,MSG_D2[r1]
0142A4 E3 00 30 00 		sw      r0,MSG_TYPE[r1]
0142A8 94 10 40 00 		addui	r1,r1,#MSG_Size
0142AC 14 21 40 00 		addui   r2,r2,#MSG_Size
0142B0 FC D7 00 00 		cmp     r3,r2,#MSG_ArrayEnd-MSG_Size
0142B4 06 31 C0 FF 
0142B8 BD 41 F0 FF 		blt     r3,st4
0142BC E3 00 00 00 		sw      r0,MSG_LINK[r1]
                	
                		; Initialize free mailbox list
                		; Note the first NR_TCB mailboxes are statically allocated to the tasks.
                		; They are effectively pre-allocated.
0142C0 0A 50 00 0E 		ldi		r5,#NR_MBX-NR_TCB
0142C4 7C C0 00 00 		sw		r5,nMailbox
0142C8 63 50 50 02 
                	
0142CC 0A 10 00 02 	    ldi     r1,#NR_TCB
0142D0 97 20 80 00 	    mulu    r2,r1,#MBX_Size
0142D4 FC C5 00 00 	    addui   r2,r2,#MBX_Array
0142D8 14 21 00 FE 
0142DC 7C C0 00 00 	    sw      r2,FreeMbxHandle
0142E0 63 20 40 02 
0142E4 02 31 00 1A 	    mov     r3,r2
0142E8 94 31 80 00 	    addui   r3,r3,#MBX_Size
                	.imbxl1:
0142EC 63 31 00 00 	    sw      r3,MBX_LINK[r2]
0142F0 14 21 80 00 	    addui   r2,r2,#MBX_Size
0142F4 94 31 80 00 	    addui   r3,r3,#MBX_Size
0142F8 95 52 02 00 	    subui   r5,r5,#1
0142FC BD 22 F8 FF 	    bgt     r5,.imbxl1
014300 63 01 00 00 	    sw      r0,MBX_LINK[r2]               ; last one
                	
                	    ; Initialize mailboxes with default values.
014304 0A 50 00 10 	    ldi     r5,#NR_MBX
014308 FC C5 00 00 	    lea     r2,MBX_Array
01430C 47 20 00 FE 
                	.imbxl2:    
014310 63 01 10 00 	    sw      r0,MBX_TQ_HEAD[r2]
014314 63 01 30 00 	    sw      r0,MBX_TQ_TAIL[r2]
014318 63 01 40 00 	    sw      r0,MBX_MQ_HEAD[r2]
01431C 63 01 50 00 	    sw      r0,MBX_MQ_TAIL[r2]
014320 61 01 60 00 	    sc      r0,MBX_TQ_COUNT[r2]
014324 61 01 68 00 	    sc      r0,MBX_MQ_COUNT[r2]
014328 60 01 6E 00 	    sb      r0,MBX_MQ_STRATEGY[r2]       ; unlimited
01432C 60 01 6C 00 	    sb      r0,MBX_OWNER[r2]             ; JOB #0
014330 0A 10 10 00 	    ldi     r1,#8                        ; default to queue eight messages
014334 61 11 64 00 	    sc      r1,MBX_MQ_SIZE[r2]
014338 61 01 70 00 	    sc      r0,MBX_MQ_MISSED[r2]
01433C 14 21 80 00 	    addui   r2,r2,#MBX_Size
014340 95 52 02 00 	    subui   r5,r5,#1
014344 BD 22 E6 FF 	    bgt     r5,.imbxl2
                	    
                	    ; Initialize the free TCB list
                	    ; The first two TCB's are pre-allocated and so aren't part of the list
014348 7C C1 00 00 	    ldi     r2,#TCB_Array+TCB_Size*2
01434C 0A 20 00 10 
014350 7C C0 00 00 	    sw      r2,FreeTCB
014354 63 20 10 02 
                	.0001:
014358 14 31 00 08 	    addui   r3,r2,#TCB_Size
01435C 63 31 30 04 	    sw      r3,TCB_NextFree[r2]
014360 14 21 00 08 	    addui   r2,r2,#TCB_Size
014364 FC C4 00 00 	    cmpu    r4,r2,#TCB_ArrayEnd-TCB_Size
014368 16 41 00 F8 
01436C 3D 42 F6 FF 	    blt     r4,.0001
014370 3F 00 00 00 	    nop
014374 63 01 30 04 	    sw      r0,TCB_NextFree[r2]
                	
014378 7C C1 00 00 	    ldi     r2,#TCB_Array+TCB_Size*2
01437C 0A 20 00 10 
014380 0A 40 04 00 	    ldi     r4,#2
                	.nextTCB:
014384 0A 50 00 00 	    ldi     r5,#0
014388 63 51 28 04 	    sw      r5,TCB_hJCB[r2]   ; owning JOB = monitor
01438C 7C 01 00 00 	    ldi     r3,#BranchToSelf
014390 0A 30 30 80 
014394 63 31 00 03 	    sw      r3,TCB_IPC[r2]    ; set startup address
014398 63 31 20 03 	    sw      r3,TCB_EPC[r2]
01439C 63 31 10 03 	    sw      r3,TCB_DPC[r2]
0143A0 17 32 00 20 	    mulu    r3,r4,#4096       ; initial stack size=4096
0143A4 7C F0 07 00 	    addui   r3,r3,#STACKS_Array+4088
0143A8 94 31 F0 1F 
0143AC 63 31 E0 01 	    sw      r3,TCB_r30[r2]    ; set the stack pointer to the default stack
0143B0 14 21 00 08 	    addui   r2,r2,#TCB_Size   ; move to next TCB 768B TCB size
0143B4 14 42 02 00 	    addui   r4,r4,#1
0143B8 16 12 00 02 	    cmpu    r1,r4,#NR_TCB
0143BC BD 40 E4 FF 	    blt     r1,.nextTCB
                	
                		; manually build the IO focus list
0143C0 47 10 80 27 		lea		r1,JCB0
0143C4 7C C0 00 00 		sw	    r1,IOFocusNdx		; Job #0 (Monitor) has the focus
0143C8 63 10 50 00 
0143CC E3 10 50 08 		sw		r1,JCB_iof_next[r1]
0143D0 E3 10 60 08 		sw		r1,JCB_iof_prev[r1]
0143D4 0A 10 02 00 		ldi		r1,#1
0143D8 7C C0 00 00 		sw		r1,IOFocusTbl		; set the job #0 request bit
0143DC 63 10 60 00 
0143E0 7C 34 12 00 	    ldi     r1,#$12345678  ; set system initialized flag
0143E4 0A 10 F0 AC 
0143E8 7C C0 00 00 	    sw      r1,FMTK_Inited
0143EC 63 10 60 03 
                	
0143F0 B9 27 00 00 	    bsr     UnlockSYS
                	 
0143F4 0A 10 00 00 		ldi		r1,#0          ; priority
0143F8 0A 20 02 00 		ldi		r2,#1          ; processor #1
0143FC 7C 01 00 00 		ldi		r3,#CPU1_Start|1 ; start address
014400 0A 30 72 01 
014404 0A 40 00 00 		ldi     r4,#0          ; start parameter (NULL)
014408 0A 50 00 00 		ldi     r5,#0          ; r5 = job handle of owning job
01440C 38 0F 08 00 		sys     #FMTK_CALL
014410 01 00 00 00 		dh      1              ; start task
                	
014414 0A 10 0E 00 		ldi		r1,#7          ; priority
014418 0A 20 00 00 		ldi		r2,#0          ; processor #0
01441C 7C 01 00 00 		ldi		r3,#IdleTask|1 ; start address (start in kernel mode)
014420 0A 30 DA 88 
014424 0A 40 00 00 		ldi     r4,#0          ; start parameter (NULL)
014428 0A 50 00 00 		ldi     r5,#0          ; r5 = job handle of owning job
01442C 38 0F 08 00 		sys     #FMTK_CALL
014430 01 00 00 00 		dh      1              ; start task
                	
014434 02 50 09 3E 	    mfspr   r21,tick
014438 82 5A 29 2A 	    subu    r21,r21,r20
01443C 7C C0 00 00 	    sw      r21,sys_ticks
014440 63 50 41 00 
                	
014444 3B FF 11 00 	    rts

                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	StartIdleTask:
014448 E7 EF 01 00 	    push    lr
01444C 0A 10 0E 00 		ldi		r1,#7          ; priority
014450 0A 20 00 00 		ldi		r2,#0
014454 7C 01 00 00 		ldi		r3,#IdleTask   ; start address
014458 0A 30 D8 88 
01445C 0A 40 00 00 		ldi     r4,#0          ; start parameter (NULL)
014460 0A 50 00 00 		ldi     r5,#0          ; r5 = job handle of owning job
014464 B9 29 00 00 		bsr		StartTask
014468 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; IdleTask
                	;
                	; IdleTask is a low priority task that is always running. It runs when there
                	; is nothing else to run.
                	; This task check for tasks that are stuck in infinite loops and kills them.
                	;------------------------------------------------------------------------------
                	IdleTask:
                	it3:
01446C 7C C1 00 00 	    ldi     r2,#TCB_Array
014470 0A 20 00 00 
                	it2:
                	;	inc		TEXTSCR+444		; increment IDLE active flag
014474 7C C1 00 00 		cmpu    r1,r2,#TCB_Array
014478 16 11 00 00 
01447C BD 00 0A 00 		beq		r1,it1
014480 40 11 20 04 		lb		r1,TCB_Status[r2]
014484 86 10 40 00 		cmp		r1,r1,#TS_SLEEP
014488 BD 10 04 00 		bne		r1,it1
01448C 02 11 00 1A 		mov     r1,r2
                	;	sys		#4				; KillTask function
                	;	dh		3
                	it1:
014490 14 21 00 08 	    addui   r2,r2,#TCB_Size
014494 FC C4 00 00 	    cmpu    r1,r2,#TCB_ArrayEnd-TCB_Size
014498 16 11 00 F8 
01449C BD 40 EC FF 	    blt     r1,it2
0144A0 BA F9 FF FF 	    bra     it3
0144A4 02 00 00 6E 		cli						; enable interrupts
0144A8 02 00 06 6E 		wai						; wait for one to happen
0144AC 3A F9 FF FF 		bra		it2
                	
                	;------------------------------------------------------------------------------
                	; Parameters:
                	;	r1 = job name
                	;	r2 = start address
                	;------------------------------------------------------------------------------
                	
                	StartJob:
0144B0 E7 EF 01 00 	    push    lr
0144B4 E7 E0 01 00 		push    r1
                		
                		; Get a free JCB
0144B8 39 0B 00 00 	    bsr     LockSYS
                	
0144BC 7C C0 00 00 		lw		r6,FreeJCB
0144C0 46 60 00 02 
0144C4 3D 03 20 00 		beq		r6,sjob1
0144C8 46 73 40 08 		lw		r7,JCB_Next[r6]
0144CC 7C C0 00 00 		sw		r7,FreeJCB
0144D0 63 70 00 02 
                	
0144D4 47 73 08 00 		lea		r7,JCB_Name[r6]		; r7 = address of name field
0144D8 82 93 00 1A 		mov		r9,r7				; save off buffer address
0144DC 0A 80 00 00 		ldi		r8,#0				; r8 = count of characters (0 to 31)
                	sjob3:
0144E0 C0 50 00 00 		lb	    r5,[r1]				; get a character
0144E4 BD 02 0E 00 		beq		r5,sjob2			; end of string ?
0144E8 E0 53 02 00 		sb		r5,1[r7]
0144EC 94 10 02 00 		addui   r1,r1,#1
0144F0 94 73 02 00 		addui   r7,r7,#1
0144F4 14 84 02 00 		addui   r8,r8,#1
0144F8 16 54 3E 00 		cmpu	r5,r8,#31   		; max number of chars ?
0144FC BD 42 F2 FF 		blt		r5,sjob3
                	sjob2:
014500 E0 84 00 00 		sb		r8,[r9]				; save name length
                	
                	sjob1:
014504 39 05 00 00 		bsr     UnlockSYS
014508 57 1F 10 00 		pop     r1
01450C 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Lock/unlock routines.
                	;------------------------------------------------------------------------------
                	
                	LockSYS:
014510 E7 EF 01 00 	    push    lr
014514 E7 E0 01 00 	    push    r1
014518 7C C0 00 00 	    lea     r1,sys_sema
01451C 47 10 B0 03 
014520 39 05 00 00 	    bsr     LockSema
014524 57 1F 10 00 	    pop     r1
014528 3B FF 11 00 	    rts
UnlockSYS:
01452C E7 EF 01 00 	    push    lr
014530 E7 E0 01 00 	    push    r1
014534 7C C0 00 00 	    lea     r1,sys_sema
014538 47 10 B0 03 
01453C B9 08 00 00 	    bsr     UnlockSema
014540 57 1F 10 00 	    pop     r1
014544 3B FF 11 00 	    rts

                	;------------------------------------------------------------------------------
                	; Lock the semaphore.
                	;
                	; Parameters:
                	; r1 = address of semaphore to lock
                	;------------------------------------------------------------------------------
                	
                	LockSema:
014548 67 E1 01 00 	    push    r2
01454C E7 E1 01 00 	    push    r3
                	
                	    ; Interrupts should be already enabled or there would be no way for a locked
                	    ; semaphore to clear. Let's enable interrupts just in case.
014550 02 00 00 6E 	    cli
                	.0001:
014554 DC 30 00 00 	    lwar    r3,[r1]
014558 BD 01 06 00 	    beq     r3,.0003            ; branch if free
01455C 82 21 60 34 	    chk     r2,r3,b48           ; check if locked by a valid task
014560 3D 11 FA FF 	    bne     r2,.0001
                	.0003:
014564 EE 80 01 00 	    swcr    tr,[r1]             ; try and lock it
014568 02 30 00 3E 	    mfspr   r3,cr0
01456C 83 31 48 D2 	    bfextu  r3,r3,#36,#36       ; status is bit 36 of cr0
014570 BD 01 F2 FF 	    beq     r3,.0001            ; lock failed, go try again
                	.0002:
014574 57 3F 10 00 	    pop     r3
014578 57 2F 10 00 	    pop     r2
01457C 37 FF 01 00 	    rtl

                	;------------------------------------------------------------------------------
                	; Unlock a semaphore
                	;
                	; When unlocking the semaphore a test is made to see if the semaphore is still
                	; locked by same task attempting an unlock. If that is the case then the 
                	; SW instruction must have failed to clear the semaphore. So that the system
                	; isn't hung, we go back and redo the unlock.
                	;------------------------------------------------------------------------------
                	
                	UnlockSema:
014580 67 E1 01 00 	    push    r2
014584 E7 E1 01 00 	    push    r3
                	.0001:
014588 E3 00 00 00 	    sw      r0,[r1]
01458C C6 20 00 00 	    lw      r2,[r1]
014590 3D 01 0A 00 	    beq     r2,.0002  ; the semaphore is unlock, by this task or another
014594 02 31 30 2C 	    cmpu    r3,r2,tr
014598 BD 01 F8 FF 	    beq     r3,.0001  ; ??? this task still has it locked - store failed
                	    ; Here the semaphore was locked, but not by this task anymore. Another task
                	    ; must have interceded amd locked the semaphore right after it was unlocked
                	    ; by this task. Make sure this is the case, and it's not just bad memory.
                	    ; Make sure the semaphore was locked by a valid task
01459C 02 31 60 34 	    chk     r3,r2,b48
0145A0 BD 01 F4 FF 	    beq     r3,.0001
                	    ; Here the semaphore probably was validly locked by a different task.
                	    ; Assume the unlock must have been successful.
                	.0002:
0145A4 57 3F 10 00 	    pop     r3
0145A8 57 2F 10 00 	    pop     r2
0145AC 37 FF 01 00 	    rtl
    
                	;------------------------------------------------------------------------------
                	; StartTask
                	;
                	; Startup a task. The task is automatically allocated a 1kW stack from the BIOS
                	; stacks area. 
                	;
                	; Parameters:
                	;	r1 = task priority
                	;	r2 = start flags
                	;	r3 = start address
                	;	r4 = start parameter
                	;	r5 = job handle
                	;------------------------------------------------------------------------------
                	
                	StartTask:
0145B0 E7 EF 01 00 	    push    lr
0145B4 E7 E0 01 00 	    push    r1
0145B8 67 E1 01 00 	    push    r2
0145BC E7 E1 01 00 	    push    r3
0145C0 67 E2 01 00 	    push    r4
0145C4 E7 E2 01 00 	    push    r5
0145C8 67 E3 01 00 		push    r6
0145CC E7 E3 01 00 		push    r7
0145D0 67 E4 01 00 		push    r8
0145D4 E7 E4 01 00 		push    r9
0145D8 67 E5 01 00 		push    r10
0145DC E7 E5 01 00 		push    r11
0145E0 82 60 00 1A 		mov		r6,r1				; r6 = task priority
0145E4 02 91 00 1A 		mov		r9,r2				; r9 = flag register value on startup
                		
                		; get a free TCB
                		;
0145E8 39 E5 FF FF 	    bsr     LockSYS
0145EC 7C C0 00 00 		lw		r1,FreeTCB			; get free tcb list pointer
0145F0 46 10 10 02 
0145F4 82 20 60 34 		chk     r2,r1,b48           ; check and make sure it's a valid pointer
0145F8 3D 01 70 00 		beq		r2,stask1           ; branch if NULL or some other garbage
0145FC 82 20 00 1A 		mov     r2,r1
014600 46 11 30 04 		lw		r1,TCB_NextFree[r2]
014604 7C C0 00 00 		sw		r1,FreeTCB			; update the FreeTCB list pointer
014608 63 10 10 02 
                	
01460C 39 E4 FF FF 		bsr     UnlockSYS
014610 02 11 00 1A 		mov     r1,r2				; r1 = TCB pointer
                	
                		; setup the stack for the task
                		; Zap the stack memory.
014614 02 71 00 1A 		mov		r7,r2
014618 7C C1 00 00 		subui   r2,r2,#TCB_Array
01461C 15 21 00 00 
014620 02 21 14 72 		lsr     r2,r2,#TCB_LogSize  ; r2 = index number of TCB
014624 02 21 18 70 		asl		r2,r2,#12			; 4kB stack per task
014628 7C F0 07 00 		addui	r8,r2,#STACKS_Array	; add in stack base
01462C 14 81 00 00 
014630 7C E0 07 00 		addui   r10,r2,#BIOS_STACKS_Array
014634 14 A1 00 00 
014638 7C D0 07 00 		addui   r11,r2,#SYS_STACKS_Array
01463C 14 B1 00 00 
                	
                		; It's safe to update the TCB here without checking the semaphore because
                		; the TCB isn't on any list. It's in no-man's land at this point.
014640 14 24 F0 1F 		addui   r2,r8,#4088
014644 E3 23 D0 04 		sw      r2,TCB_StackTop[r7]
014648 E3 23 E0 01 		sw      r2,TCB_r30[r7]     ; stack pointer is r30!
01464C E3 23 30 03 		sw      r2,TCB_ISP[r7]
014650 7C 01 00 00 		ldi     r1,#ExitTask
014654 0A 10 18 8E 
014658 E3 13 F0 01 		sw      r1,TCB_r31[r7]
01465C 14 85 F0 1F 		addui   r8,r10,#4088
014660 E3 83 10 05 		sw      r8,TCB_BIOS_Stack[r7]
014664 94 85 F0 1F 		addui   r8,r11,#4088
014668 E3 83 20 05 		sw      r8,TCB_SYS_Stack[r7]
01466C E3 43 10 00 		sw      r4,TCB_r1[r7]
014670 E0 93 00 05 		sb      r9,TCB_Affinity[r7]
014674 E0 63 24 04 		sb		r6,TCB_Priority[r7]
014678 E0 03 20 04 		sb		r0,TCB_Status[r7]
01467C E3 03 F0 04 		sw		r0,TCB_Timeout[r7]
014680 E0 53 28 04 		sb		r5,TCB_hJCB[r7]		; save job handle
014684 E3 03 C0 04 		sw		r0,TCB_MbxList[r7]
014688 8D 31 02 00 		or      r3,r3,#1            ; kernel mode flag for now
01468C E3 33 00 03 		sw      r3,TCB_IPC[r7];     ; set starting address
014690 E3 33 10 03 		sw      r3,TCB_DPC[r7];
014694 E3 33 20 03 		sw      r3,TCB_EPC[r7];
                	
                		; Insert the task into the ready list
014698 82 13 00 1A 		mov     r1,r7
01469C B9 CE FF FF 	    bsr     LockSYS
0146A0 39 58 00 00 		bsr		AddTaskToReadyList
0146A4 39 D1 FF FF 		bsr     UnlockSYS
                	stask2:
0146A8 57 BF 10 00 	    pop     r11
0146AC 57 AF 10 00 	    pop     r10
0146B0 57 9F 10 00 	    pop     r9
0146B4 57 8F 10 00 		pop     r8
0146B8 57 7F 10 00 		pop     r7
0146BC 57 6F 10 00 		pop     r6
0146C0 57 5F 10 00 		pop     r5
0146C4 57 4F 10 00 		pop     r4
0146C8 57 3F 10 00 		pop     r3
0146CC 57 2F 10 00 		pop     r2
0146D0 57 1F 10 00 		pop     r1
0146D4 3B FF 11 00 		rts
stask1:
0146D8 B9 CA FF FF 		bsr     UnlockSYS
0146DC 39 61 02 00 		bsr		kernel_panic
0146E0 4E 6F 20 6D 		db		"No more task control blocks available.",0
0146E4 6F 72 65 20 
0146E8 74 61 73 6B 
0146EC 20 63 6F 6E 
0146F0 74 72 6F 6C 
0146F4 20 62 6C 6F 
0146F8 63 6B 73 20 
0146FC 61 76 61 69 
014700 6C 61 62 6C 
014704 65 2E 00    
014707 00 3A F4 FF 		bra		stask2
01470B FF          
                	
                	;------------------------------------------------------------------------------
                	; ExitTask
                	;
                	; This routine is called when the task exits with an rts instruction. OR
                	; it may be invoked with a JMP ExitTask. In either case the task must be
                	; running so it can't be on the timeout list.
                	;------------------------------------------------------------------------------
                	message "ExitTask"
                	ExitTask:
                		; release any aquired resources
                		; - mailboxes
                		; - messages
                	;	hoff
01470C B9 C0 FF FF 	    bsr     LockSYS
014710 B9 5B 00 00 		bsr		RemoveTaskFromReadyList
014714 60 0C 20 04 		sb		r0,TCB_Status[tr]				; set task status to TS_NONE
                	;	bsr		ReleaseIOFocus
                		; Free up all the mailboxes associated with the task.
                	xtsk7:
014718 46 1C C0 04 		lw		r1,TCB_MbxList[tr]
01471C 82 20 62 34 		chk     r2,r1,b49
014720 3D 01 06 00 		beq		r2,xtsk6
014724 39 C1 00 00 		bsr		FreeMbx
014728 3A FE FF FF 		bra		xtsk7
                	xtsk6:
01472C 7C C0 00 00 		lw		r1,FreeTCB						; add the task control block to the free list
014730 46 10 10 02 
014734 63 1C 30 04 		sw		r1,TCB_NextFree[tr]
014738 7C C0 00 00 		sw		tr,FreeTCB
01473C 63 80 11 02 
014740 B9 BD FF FF 		bsr     UnlockSYS
                		; This loop will eventually be interrupted, the interrupt return will not
                		; return to here.
014744 02 00 06 6E 		wai
                	xtsk1:
014748 3A 00 00 00 		bra     xtsk1
                	
                	;------------------------------------------------------------------------------
                	; KillTask
                	;
                	; "Kills" a task, removing it from all system lists. If the task has the 
                	; IO focus, the IO focus is switched. Task #0 is immortal and cannot be
                	; killed. Task #1 is immortal and cannot be killed.
                	;
                	; Registers Affected: none
                	; Parameters:
                	;	r1 = task number
                	;------------------------------------------------------------------------------
                	;
                	KillTask:
01474C E7 EF 01 00 	    push    lr
014750 67 E1 01 00 		push    r2
014754 E7 E1 01 00 		push    r3
                	;	bsr     ValidateTCBPtr
014758 82 20 40 34 		chk     r2,r1,b32
01475C 3D 01 3C 00 		beq		r2,kt1
014760 82 20 00 1A 		mov     r2,r1
014764 B9 B5 FF FF 		bsr     LockSYS
014768 C6 10 28 04 		lw		r1,TCB_hJCB[r1]
01476C B9 92 02 00 		bsr		ForceReleaseIOFocus
014770 02 11 00 1A 		mov     r1,r2
014774 7C 00 00 00 		jsr		RemoveTaskFromReadyList
014778 3C F0 F7 A4 
01477C 7C 00 00 00 		jsr		RemoveFromTimeoutList
014780 3C F0 A9 A5 
014784 E0 00 20 04 		sb		r0,TCB_Status[r1]    		; set task status to TS_NONE
                	
                		; Free up all the mailboxes associated with the task.
014788 E7 E0 01 00 		push    r1
01478C 82 20 00 1A 		mov     r2,r1
014790 82 30 00 1A 		mov     r3,r1
014794 C6 11 C0 04 		lw		r1,TCB_MbxList[r3]
                	kt7:
014798 BD 00 0A 00 		beq		r1,kt6
01479C C6 30 00 00 		lw      r3,MBX_LINK[r1]
0147A0 B9 B4 00 00 		bsr		FreeMbx2
0147A4 82 11 00 1A 		mov     r1,r3
0147A8 3A FE FF FF 		bra		kt7
                	kt6:
0147AC 57 1F 10 00 	    pop     r1
0147B0 7C C0 00 00 		lw		r2,FreeTCB					; add the task control block to the free list
0147B4 46 20 10 02 
0147B8 E3 20 30 04 		sw		r2,TCB_NextFree[r1]
0147BC 7C C0 00 00 		sw		r1,FreeTCB
0147C0 63 10 10 02 
0147C4 39 AD FF FF 		bsr     UnlockSYS
0147C8 82 20 30 0C 		cmp     r2,r1,tr                    ; keep running the current task as long as
0147CC 3D 11 04 00 		bne		r2,kt1						; the task didn't kill itself.
                	.self:
0147D0 3A 00 00 00 		bra     .self
                	kt1:
0147D4 57 3F 10 00 	    pop     r3
0147D8 57 2F 10 00 		pop     r2
0147DC 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Dump the task list. The task list isn't locked while it is being dumped
                	; because that would prevent task switches from occuring and we probably
                	; don't want to interfere with the system. However because it's not locked,
                	; there's no guarentee that everything will display correctly. It's safe to
                	; not lock the task list because we are simply reading the fields from it and
                	; not updating information.
                	;------------------------------------------------------------------------------
                	
                	message "DumpTaskList"
                	DumpTaskList:
0147E0 E7 EF 01 00 	    push    lr
0147E4 E7 E0 01 00 		push    r1
0147E8 67 E1 01 00 		push    r2
0147EC E7 E1 01 00 		push    r3
0147F0 67 E2 01 00 		push	r4
0147F4 7C 01 00 00 		ldi		r1,#msgTaskList
0147F8 0A 10 70 91 
0147FC 39 42 F8 FF 		bsr		DisplayString
014800 0A 30 00 00 		ldi		r3,#0
                	.0001:
                	;    lwar    r4,tcb_sema
                	;    bne     r4,.0001
                	;    swcr    tr,tcb_sema
                	;    mfspr   r4,cr0
                	;    and     r4,r4,#$1000000000
                	;    beq     r4,.0001
                	dtl2:
014804 7C C0 00 00 		lw		r1,QNdx0[r3]
014808 C6 11 A0 00 
01480C 82 40 00 1A 		mov		r4,r1
014810 3D 02 44 00 		beq		r4,dtl1
                	dtl3:
014814 0A 20 06 00 	    ldi     r2,#3
014818 82 40 00 1A 	    mov     r4,r1
01481C C0 10 00 05 	    lb      r1,TCB_Affinity[r1]
014820 39 55 F8 FF 	    bsr     PRTNUM
014824 02 12 00 1A 	    mov     r1,r4
014828 0A 20 08 00 		ldi	    r2,#4
01482C 82 11 06 72 		lsr     r1,r3,#3
014830 39 53 F8 FF 		bsr		PRTNUM
014834 39 16 F9 FF 		bsr		DisplaySpace
014838 02 12 00 1A 		mov		r1,r4
01483C B9 2C F8 FF 		bsr		DisplayHalf
014840 B9 14 F9 FF 		bsr		DisplaySpace
014844 39 14 F9 FF 		bsr		DisplaySpace
014848 02 12 00 1A 		mov		r1,r4
01484C C0 10 20 04 		lb		r1,TCB_Status[r1]
014850 39 2F F8 FF 		bsr		DisplayByte
014854 39 12 F9 FF 		bsr		DisplaySpace
014858 0A 20 06 00 		ldi		r2,#3
01485C 46 12 10 04 		lw		r1,TCB_PrevRdy[r4]
014860 39 28 F8 FF 		bsr		DisplayHalf
014864 39 10 F9 FF 		bsr		DisplaySpace
014868 0A 20 06 00 		ldi		r2,#3
01486C 46 12 00 04 		lw		r1,TCB_NextRdy[r4]
014870 39 26 F8 FF 		bsr		DisplayHalf
014874 39 0E F9 FF 		bsr		DisplaySpace
014878 46 12 F0 04 		lw		r1,TCB_Timeout[r4]
01487C 39 22 F8 FF 		bsr		DisplayWord
014880 B9 42 F8 FF 		bsr		CRLF
014884 46 42 00 04 		lw		r4,TCB_NextRdy[r4]
014888 7C C0 00 00 		lw      r1,QNdx0[r3]
01488C C6 11 A0 00 
014890 02 12 02 0C 		cmp		r1,r4,r1
014894 BD 10 C0 FF 		bne		r1,dtl3
                	dtl1:
014898 94 31 10 00 		addui   r3,r3,#8
01489C 86 41 80 00 		cmp     r4,r3,#64
0148A0 3D 42 B2 FF 		blt		r4,dtl2
                	;	sw		r0,tcb_sema       ; release semaphore
0148A4 57 4F 10 00 		pop		r4
0148A8 57 3F 10 00 		pop     r3
0148AC 57 2F 10 00 		pop     r2
0148B0 57 1F 10 00 		pop     r1
0148B4 3B FF 11 00 		rts

                	msgTaskList:
0148B8 0D 0A 43 50 		db	CR,LF,"CPU Pri   Task   Stat   Prv      Nxt     Timeout",CR,LF,0
0148BC 55 20 50 72 
0148C0 69 20 20 20 
0148C4 54 61 73 6B 
0148C8 20 20 20 53 
0148CC 74 61 74 20 
0148D0 20 20 50 72 
0148D4 76 20 20 20 
0148D8 20 20 20 4E 
0148DC 78 74 20 20 
0148E0 20 20 20 54 
0148E4 69 6D 65 6F 
0148E8 75 74 0D 0A 
0148EC 00          
                	
                	
                	;------------------------------------------------------------------------------
                	; r1 = task number
                	; r2 = new priority
                	;------------------------------------------------------------------------------
                	
                	SetTaskPriority:
0148ED 00 00 00 E7 	    push    lr
0148F1 EF 01 00    
0148F4 E7 E1 01 00 		push    r3
0148F8 39 83 FF FF 		bsr     LockSYS
0148FC C0 30 20 04 		lb		r3,TCB_Status[r1]			    ; if the task is on the ready list
014900 8C 31 30 00 		and		r3,r3,#TS_READY|TS_RUNNING		; then remove it and re-add it.
014904 BD 01 0A 00 		beq		r3,.stp2						; Otherwise just go set the priority field
014908 B9 1C 00 00 		bsr		RemoveTaskFromReadyList
01490C E0 30 24 04 		sb		r3,TCB_Priority[r1]
014910 39 0A 00 00 		bsr		AddTaskToReadyList
014914 3A 01 00 00 		bra		.stp3
                	.stp2:
014918 E0 30 24 04 		sb		r3,TCB_Priority[r1]
                	.stp3:
01491C 39 82 FF FF 		bsr     UnlockSYS
014920 57 3F 10 00 		pop     r3
014924 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Make sure we have a real TCB pointer.
                	;------------------------------------------------------------------------------
                	
                	ValidateTCBPtr:
014928 67 E1 01 00 	    push    r2
01492C 8C 20 FE 07 	    and     r2,r1,#$3FF
014930 3D 01 08 00 	    beq     r2,.0001
                	.badPtr:
014934 0A 10 00 00 	    ldi     r1,#0
014938 57 2F 10 00 	    pop     r2
01493C 37 FF 01 00 	    rtl
.0001:
014940 7C C1 00 00 	    cmp     r2,r1,#TCB_Array
014944 86 20 00 00 
014948 3D 41 F6 FF 	    blt     r2,.badPtr
01494C 7C C5 00 00 	    cmp     r2,r1,#TCB_ArrayEnd
014950 86 20 00 00 
014954 3D 31 F0 FF 	    bge     r2,.badPtr
014958 57 2F 10 00 	    pop     r2
01495C 37 FF 01 00 	    rtl

                	;------------------------------------------------------------------------------
                	; AddTaskToReadyList
                	;
                	; The ready list is a group of eight ready lists, one for each priority
                	; level. Each ready list is organized as a doubly linked list to allow fast
                	; insertions and removals. The list is organized as a ring (or bubble) with
                	; the last entry pointing back to the first. This allows a fast task switch
                	; to the next task. Which task is at the head of the list is maintained
                	; in the variable QNdx for the priority level.
                	;
                	; On Entry: Task list must be locked
                	; Registers Affected: none
                	; Parameters:
                	;	r1 = pointer to task control block
                	; Returns:
                	;	none
                	;------------------------------------------------------------------------------
                	message "AddToReadyList"
                	AddTaskToReadyList:
014960 E7 EF 01 00 	    push    lr
014964 67 E1 01 00 	    push    r2
014968 E7 E1 01 00 	    push    r3
01496C 67 E2 01 00 	    push    r4
                	;    bsr     ValidateTCBPtr
014970 82 20 60 34 	    chk     r2,r1,b48
014974 3D 01 24 00 	    beq     r2,.0001
014978 0A 20 20 00 		ldi     r2,#TS_READY
01497C E0 20 20 04 		sb		r2,TCB_Status[r1]
014980 C0 30 24 04 		lb		r3,TCB_Priority[r1]
014984 86 41 10 00 		cmp		r4,r3,#8
014988 3D 42 04 00 		blt		r4,.0002
01498C 0A 30 0E 00 		ldi		r3,#PRI_LOWEST
                	.0002:
014990 82 40 00 1A 	    mov     r4,r1
014994 82 31 06 70 	    asl     r3,r3,#3
014998 7C C0 00 00 		lw		r1,QNdx0[r3]
01499C C6 11 A0 00 
                	;	bsr     ValidateTCBPtr
0149A0 82 30 60 34 		chk     r3,r1,b48
0149A4 BD 01 14 00 		beq		r3,.0003
0149A8 C6 30 10 04 		lw		r3,TCB_PrevRdy[r1]
0149AC E3 11 00 04 		sw		r1,TCB_NextRdy[r3]
0149B0 63 32 10 04 		sw		r3,TCB_PrevRdy[r4]
0149B4 E3 40 10 04 		sw		r4,TCB_PrevRdy[r1]
0149B8 63 12 00 04 		sw		r1,TCB_NextRdy[r4]
                	.0001:
0149BC 57 4F 10 00 		pop     r4
0149C0 57 3F 10 00 		pop     r3
0149C4 57 2F 10 00 		pop     r2
0149C8 3B FF 11 00 		rts

                		; Here the ready list was empty, so add at head
                	.0003:
0149CC 7C C0 00 00 		sw		r4,QNdx0[r3]
0149D0 E3 41 A0 00 
0149D4 63 42 00 04 		sw		r4,TCB_NextRdy[r4]
0149D8 63 42 10 04 		sw		r4,TCB_PrevRdy[r4]
0149DC 57 4F 10 00 		pop     r4
0149E0 57 3F 10 00 		pop     r3
0149E4 57 2F 10 00 		pop     r2
0149E8 3B FF 11 00 		rts
	
                	
                	;------------------------------------------------------------------------------
                	; RemoveTaskFromReadyList
                	;
                	; This subroutine removes a task from the ready list.
                	;
                	; Registers Affected: none
                	; Parameters:
                	;	r1 = pointer to task control block
                	; Returns:
                	;   r1 = pointer to task control block
                	;------------------------------------------------------------------------------
                	message "RemoveFromReadyList"
                	RemoveTaskFromReadyList:
0149EC E7 EF 01 00 	    push    lr
0149F0 67 E1 01 00 	    push    r2
0149F4 E7 E1 01 00 	    push    r3
0149F8 67 E2 01 00 		push	r4
0149FC E7 E2 01 00 		push	r5
                	
                	;    bsr     ValidateTCBPtr
014A00 82 20 60 34 	    chk     r2,r1,b48
014A04 3D 01 30 00 	    beq     r2,rfr2
014A08 C0 30 20 04 		lb		r3,TCB_Status[r1]	; is the task on the ready list ?
014A0C 8C 41 30 00 		and		r4,r3,#TS_READY|TS_RUNNING
014A10 3D 02 2A 00 		beq		r4,rfr2
014A14 8C 31 CE FF 		and		r3,r3,#~(TS_READY|TS_RUNNING)
	sb		r3,TCB_Status[r1]	; task status no longer running or ready
014A18 E0 30 20 04 
014A1C C6 40 00 04 		lw		r4,TCB_NextRdy[r1]	; Get previous and next fields.
014A20 C6 50 10 04 		lw		r5,TCB_PrevRdy[r1]
014A24 E3 42 00 04 		sw		r4,TCB_NextRdy[r5]
014A28 63 52 10 04 		sw		r5,TCB_PrevRdy[r4]
014A2C C0 30 24 04 		lb		r3,TCB_Priority[r1]
014A30 82 31 06 70 		asl     r3,r3,#3
014A34 7C C0 00 00 		lw      r5,QNdx0[r3]
014A38 C6 51 A0 00 
014A3C 82 50 0A 0C 		cmp		r5,r1,r5			; Are we removing the QNdx task ?
014A40 BD 12 12 00 		bne		r5,rfr2
014A44 7C C0 00 00 		sw		r4,QNdx0[r3]
014A48 E3 41 A0 00 
                		; Now we test for the case where the task being removed was the only one
                		; on the ready list of that priority level. We can tell because the
                		; NxtRdy would point to the task itself.
014A4C 02 52 02 0C 		cmp		r5,r4,r1				
014A50 BD 12 0A 00 		bne		r5,rfr2
014A54 7C C0 00 00 		sw		r0,QNdx0[r3]        ; Make QNdx NULL
014A58 E3 01 A0 00 
014A5C E3 00 00 04 		sw		r0,TCB_NextRdy[r1]
014A60 E3 00 10 04 		sw		r0,TCB_PrevRdy[r1]
                	rfr2:
014A64 57 5F 10 00 		pop		r5
014A68 57 4F 10 00 		pop		r4
014A6C 57 3F 10 00 		pop     r3
014A70 57 2F 10 00 		pop     r2
                	rfr1:
014A74 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; AddToTimeoutList
                	; AddToTimeoutList adds a task to the timeout list. The task is placed in the
                	; list depending on it's timeout value.
                	;
                	; Registers Affected: none
                	; Parameters:
                	;	r1 = task
                	;	r2 = timeout value
                	;------------------------------------------------------------------------------
                	message "AddToTimeoutList"
                	AddToTimeoutList:
014A78 E7 EF 01 00 	    push    lr
014A7C 67 E1 01 00 		push    r2
014A80 E7 E1 01 00 		push    r3
014A84 67 E2 01 00 		push	r4
014A88 E7 E2 01 00 		push	r5
                	
                	;    bsr     ValidateTCBPtr
014A8C 82 20 60 34 	    chk     r2,r1,b48
014A90 3D 01 56 00 	    beq     r2,attl1
014A94 0A 50 00 00 	    ldi     r5,#0
014A98 E3 00 50 04 		sw		r0,TCB_NextTo[r1]   ; these fields should already be NULL
014A9C E3 00 60 04 		sw		r0,TCB_PrevTo[r1]
014AA0 7C C0 00 00 		lw		r4,TimeoutList		; are there any tasks on the timeout list ?
014AA4 46 40 20 02 
014AA8 3D 02 3A 00 		beq		r4,attl_add_at_head	; If not, update head of list
                	attl_check_next:
014AAC 46 32 F0 04 	    lw      r3,TCB_Timeout[r4]            
014AB0 02 21 06 2A 		subu	r2,r2,r3	        ; is this timeout > next
014AB4 3D 41 12 00 		blt		r2,attl_insert_before
014AB8 02 52 00 1A 		mov		r5,r4
014ABC 46 42 50 04 		lw		r4,TCB_NextTo[r4]
014AC0 3D 12 F6 FF 		bne		r4,attl_check_next
                	
                		; timeout of a greater value. So we add the task to the end of the list.
                	attl_add_at_end:
                		; Here we scanned until the end of the timeout list and didn't find a 
014AC4 E3 00 50 04 		sw		r0,TCB_NextTo[r1]		; 
014AC8 E3 12 50 04 		sw		r1,TCB_NextTo[r5]
014ACC E3 50 60 04 		sw		r5,TCB_PrevTo[r1]
014AD0 E3 20 F0 04 		sw		r2,TCB_Timeout[r1]
014AD4 BA 0B 00 00 		bra		attl_exit
                	
                	attl_insert_before:
014AD8 BD 02 0C 00 		beq		r5,attl_insert_before_head
014ADC E3 40 50 04 		sw		r4,TCB_NextTo[r1]	; next on list goes after this task
014AE0 E3 50 60 04 		sw		r5,TCB_PrevTo[r1]	; set previous link
014AE4 E3 12 50 04 		sw		r1,TCB_NextTo[r5]
014AE8 63 12 60 04 		sw		r1,TCB_PrevTo[r4]
014AEC 3A 03 00 00 		bra		attl_adjust_timeout
                	
                		; Here there is no previous entry in the timeout list
                		; Add at start
                	attl_insert_before_head:
014AF0 63 12 60 04 		sw		r1,TCB_PrevTo[r4]
014AF4 E3 00 60 04 		sw		r0,TCB_PrevTo[r1]	;
014AF8 E3 40 50 04 		sw		r4,TCB_NextTo[r1]
014AFC 7C C0 00 00 		sw		r1,TimeoutList			; update the head pointer
014B00 63 10 20 02 
                	attl_adjust_timeout:
014B04 02 21 06 28 		addu	r2,r2,r3	       ; get back timeout
014B08 E3 20 F0 04 		sw		r2,TCB_Timeout[r1]
014B0C 46 52 F0 04 		lw		r5,TCB_Timeout[r4]	; adjust the timeout of the next task
014B10 82 52 04 2A 		subu	r5,r5,r2
014B14 63 52 F0 04 		sw		r5,TCB_Timeout[r4]
014B18 3A 03 00 00 		bra		attl_exit
                	
                		; Here there were no tasks on the timeout list, so we add at the
                		; head of the list.
                	attl_add_at_head:
014B1C 7C C0 00 00 		sw		r1,TimeoutList		; set the head of the timeout list
014B20 63 10 20 02 
014B24 E3 20 F0 04 		sw		r2,TCB_Timeout[r1]
                		; flag no more entries in timeout list
014B28 E3 00 50 04 		sw		r0,TCB_NextTo[r1]	; no next entries
014B2C E3 00 60 04 		sw		r0,TCB_PrevTo[r1]	; and no prev entries
                	attl_exit:
014B30 C0 20 20 04 		lb		r2,TCB_Status[r1]	; set the task's status as timing out
014B34 0D 21 02 00 		or		r2,r2,#TS_TIMEOUT
014B38 E0 20 20 04 		sb		r2,TCB_Status[r1]
                	attl1:
014B3C 57 5F 10 00 		pop		r5
014B40 57 4F 10 00 		pop		r4
014B44 57 3F 10 00 		pop     r3
014B48 57 2F 10 00 		pop     r2
014B4C 3B FF 11 00 		rts
	
                	;------------------------------------------------------------------------------
                	; RemoveFromTimeoutList
                	;
                	; This routine is called when a task is killed. The task may need to be
                	; removed from the middle of the timeout list.
                	;
                	; On entry: the timeout list semaphore must be already set.
                	; Registers Affected: none
                	; Parameters:
                	;	 r1 = pointer to task control block
                	;------------------------------------------------------------------------------
                	
                	RemoveFromTimeoutList:
014B50 E7 EF 01 00 	    push    lr
014B54 67 E1 01 00 		push    r2
014B58 E7 E1 01 00 		push    r3
014B5C 67 E2 01 00 		push	r4
014B60 E7 E2 01 00 		push	r5
                	
                	;    bsr     ValidateTCBPtr
014B64 82 20 60 34 	    chk     r2,r1,b48
014B68 3D 01 46 00 	    beq     r2,rftBadPtr
014B6C C0 40 20 04 		lb		r4,TCB_Status[r1]		; Is the task even on the timeout list ?
014B70 0C 42 02 00 		and		r4,r4,#TS_TIMEOUT
014B74 3D 02 40 00 		beq		r4,rftl_not_on_list
014B78 7C C0 00 00 		lw      r5,TimeoutList
014B7C 46 50 20 02 
014B80 82 40 0A 0C 		cmp		r4,r1,r5         		; Are we removing the head of the list ?
014B84 3D 02 18 00 		beq		r4,rftl_remove_from_head
014B88 C6 40 60 04 		lw		r4,TCB_PrevTo[r1]		; adjust the links of the next and previous
014B8C 3D 02 26 00 		beq		r4,rftl_empty_list		; no previous link - list corrupt?
014B90 C6 50 50 04 		lw		r5,TCB_NextTo[r1]		; tasks on the list to point around the task
014B94 63 52 50 04 		sw		r5,TCB_NextTo[r4]
014B98 BD 02 20 00 		beq		r5,rftl_empty_list
014B9C E3 42 60 04 		sw		r4,TCB_PrevTo[r5]
014BA0 C6 20 F0 04 		lw		r2,TCB_Timeout[r1]		; update the timeout of the next on list
014BA4 C6 32 F0 04 		lw      r3,TCB_Timeout[r5]
014BA8 02 21 06 08 		add		r2,r2,r3            	; with any remaining timeout in the task
014BAC E3 22 F0 04 		sw		r2,TCB_Timeout[r5]		; removed from the list
014BB0 3A 05 00 00 		bra		rftl_empty_list
                	
                		; Update the head of the list.
                	rftl_remove_from_head:
014BB4 C6 50 50 04 		lw		r5,TCB_NextTo[r1]
014BB8 7C C0 00 00 		sw		r5,TimeoutList			; store next field into list head
014BBC 63 50 20 02 
014BC0 BD 02 0C 00 		beq		r5,rftl_empty_list
014BC4 C6 40 F0 04 		lw		r4,TCB_Timeout[r1]		; add any remaining timeout to the timeout
014BC8 C6 32 F0 04 		lw      r3,TCB_Timeout[r5]
014BCC 02 42 06 08 		add		r4,r4,r3            	; of the next task on the list.
014BD0 E3 42 F0 04 		sw		r4,TCB_Timeout[r5]
014BD4 E3 02 60 04 		sw		r0,TCB_PrevTo[r5]       ; there is no previous item to the head
                		
                		; Here there is no previous or next items in the list, so the list
                		; will be empty once this task is removed from it.
                	rftl_empty_list:
014BD8 82 20 00 1A 		mov     r2,r1
014BDC 40 31 20 04 		lb		r3,TCB_Status[r2]	; clear timeout status (bit #0)
014BE0 8C 31 FC 01 		and     r3,r3,#$FE
014BE4 60 31 20 04 		sb      r3,TCB_Status[r2]
014BE8 63 01 50 04 		sw		r0,TCB_NextTo[r2]	; make sure the next and prev fields indicate	
014BEC 63 01 60 04 		sw	    r0,TCB_PrevTo[r2]   ; the task is not on a list.
014BF0 02 11 00 1A 		mov     r1,r2
                	rftBadPtr:
                	rftl_not_on_list:
014BF4 57 5F 10 00 		pop		r5
014BF8 57 4F 10 00 		pop		r4
014BFC 57 3F 10 00 		pop     r3
014C00 57 2F 10 00 		pop     r2
                	rftl_not_on_list2:
014C04 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; PopTimeoutList
                	;
                	; This subroutine is called from within the timer ISR when the task's 
                	; timeout expires. It's always the head of the list that's being removed in
                	; the timer ISR so the removal from the timeout list is optimized. We know
                	; the timeout expired, so the amount of time to add to the next task is zero.
                	;
                	; Registers Affected: 
                	; Parameters:
                	;	r2: head of timeout list
                	; Returns:
                	;	r1 = task id of task popped from timeout list
                	;------------------------------------------------------------------------------
                	
                	PopTimeoutList:
014C08 46 11 50 04 		lw		r1,TCB_NextTo[r2]
014C0C 7C C0 00 00 		sw		r1,TimeoutList  ; store next field into list head
014C10 63 10 20 02 
014C14 BD 00 04 00 		beq		r1,ptl1
014C18 E3 00 60 04 		sw		r0,TCB_PrevTo[r1]; previous link = NULL
                	ptl1:
014C1C 40 11 20 04 	    lb      r1,TCB_Status[r2]
014C20 8C 10 FC 01 	    and     r1,r1,#$FE       ; clear timeout status
014C24 60 11 20 04 	    sb      r1,TCB_Status[r2]
014C28 63 01 50 04 		sw		r0,TCB_NextTo[r2]	; make sure the next and prev fields indicate
014C2C 63 01 60 04 		sw		r0,TCB_PrevTo[r2]		; the task is not on a list.
014C30 02 11 00 1A 		mov     r1,r2
014C34 37 FF 01 00 	    rtl

                	;------------------------------------------------------------------------------
                	; Sleep
                	;
                	; Put the currently running task to sleep for a specified time.
                	;
                	; Registers Affected: none
                	; Parameters:
                	;	r1 = time duration in jiffies (1/60 second).
                	; Returns: none
                	;------------------------------------------------------------------------------
                	message "sleep"
                	
                	Sleep:
014C38 E7 EF 01 00 	    push    lr
014C3C E7 E0 01 00 	    push    r1
014C40 67 E1 01 00 	    push    r2
014C44 82 20 00 1A 		mov     r2,r1
014C48 39 19 FF FF 		bsr     LockSYS
014C4C 02 1C 00 1A 		mov		r1,tr
014C50 B9 B3 FF FF 		bsr		RemoveTaskFromReadyList
014C54 B9 C4 FF FF 		bsr		AddToTimeoutList	; The scheduler will be returning to this
014C58 B9 1A FF FF 		bsr     UnlockSYS
014C5C 38 0F 04 80 		int		#2				; task eventually, once the timeout expires,
014C60 57 2F 10 00 		pop     r2
014C64 57 1F 10 00 		pop     r1
014C68 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Allocate a mailbox
                	; Parameters:
                	;	r1 = pointer to place to store handle
                	; Returns:
                	;	r1 = E_Ok	means mailbox allocated properly
                	;	r1 = E_Arg	means a NULL pointer was passed in r1
                	;	r1 = E_NoMoreMbx	means no more mailboxes were available
                	;	zf is set if everything is ok, otherwise zf is clear
                	;------------------------------------------------------------------------------
                	;
                	AllocMbx:
014C6C BD 00 50 00 		beq		r1,ambx_bad_ptr
014C70 E7 EF 01 00 		push    lr
014C74 67 E1 01 00 		push    r2
014C78 E7 E1 01 00 		push    r3
014C7C 67 E2 01 00 		push	r4
014C80 82 40 00 1A 		mov		r4,r1			; r4 = pointer to returned handle
014C84 B9 11 FF FF 		bsr     LockSYS
014C88 7C C0 00 00 		lw		r1,FreeMbxHandle			; Get mailbox off of free mailbox list
014C8C 46 10 40 02 
014C90 63 12 00 00 		sw		r1,[r4]			; store off the mailbox number
014C94 BD 00 40 00 		beq		r1,ambx_no_mbxs
014C98 C6 20 00 00 		lw		r2,MBX_LINK[r1]		; and update the head of the list
014C9C 7C C0 00 00 		sw		r2,FreeMbxHandle
014CA0 63 20 40 02 
014CA4 7C C0 00 00 		dec		nMailbox,#1		; decrement number of available mailboxes
014CA8 64 F0 51 02 
014CAC 02 3C 00 1A 		mov		r3,tr           ; Add the mailbox to the list of mailboxes
014CB0 46 2C C0 04 		lw		r2,TCB_MbxList[tr]	; managed by the task.
014CB4 E3 20 00 00 		sw		r2,MBX_LINK[r1]
014CB8 63 1C C0 04 		sw		r1,TCB_MbxList[tr]
014CBC 82 20 00 1A 		mov     r2,r1
014CC0 40 1C 28 04 		lb		r1,TCB_hJCB[tr]
014CC4 60 11 6C 00 		sb		r1,MBX_OWNER[r2]
014CC8 63 01 10 00 		sw		r0,MBX_TQ_HEAD[r2] ; initialize the head and tail of the queues
014CCC 63 01 30 00 		sw		r0,MBX_TQ_TAIL[r2]
014CD0 63 01 40 00 		sw		r0,MBX_MQ_HEAD[r2]
014CD4 63 01 50 00 		sw		r0,MBX_MQ_TAIL[r2]
014CD8 61 01 60 00 		sc		r0,MBX_TQ_COUNT[r2]	; initialize counts to zero
014CDC 61 01 68 00 		sc		r0,MBX_MQ_COUNT[r2]
014CE0 61 01 70 00 		sc		r0,MBX_MQ_MISSED[r2]
014CE4 0A 10 10 00 		ldi		r1,#8				; set the max queue size
014CE8 61 11 64 00 		sc		r1,MBX_MQ_SIZE[r2]	; and
014CEC 0A 10 04 00 		ldi		r1,#MQS_NEWEST		; queueing strategy
014CF0 60 11 6E 00 		sb		r1,MBX_MQ_STRATEGY[r2]
014CF4 39 07 FF FF 		bsr     UnlockSYS
014CF8 57 4F 10 00 		pop		r4
014CFC 57 3F 10 00 		pop     r3
014D00 57 2F 10 00 		pop     r2
014D04 0A 10 00 00 		ldi		r1,#E_Ok
014D08 3B FF 11 00 		rts
ambx_bad_ptr:
014D0C 0A 10 02 00 		ldi		r1,#E_Arg
014D10 37 FF 01 00 		rtl
ambx_no_mbxs:
014D14 39 03 FF FF 		bsr     UnlockSYS
014D18 57 4F 10 00 		pop		r4
014D1C 57 3F 10 00 		pop     r3
014D20 57 2F 10 00 		pop     r2
014D24 0A 10 80 00 		ldi		r1,#E_NoMoreMbx
014D28 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Free up a mailbox.
                	;	This function frees a mailbox from the currently running task. It may be
                	; called by ExitTask().
                	;
                	; Parameters:
                	;	r1 = mailbox handle
                	;------------------------------------------------------------------------------
                	
                	FreeMbx:
014D2C E7 EF 01 00 	    push    lr
014D30 67 E1 01 00 		push    r2
014D34 02 2C 00 1A 		mov     r2,tr
014D38 B9 01 00 00 		bsr		FreeMbx2
014D3C 57 2F 10 00 		pop     r2
014D40 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Free up a mailbox.
                	;	This function dequeues any messages from the mailbox and adds the messages
                	; back to the free message pool. The function also dequeues any threads from
                	; the mailbox.
                	;	Called from KillTask() and FreeMbx().
                	;
                	; Parameters:
                	;	r1 = mailbox handle
                	;	r2 = task handle
                	; Returns:
                	;	r1 = E_Ok	if everything ok
                	;	r1 = E_Arg	if a bad handle is passed
                	;------------------------------------------------------------------------------
                	
                	FreeMbx2:
014D44 E7 EF 01 00 	    push    lr
014D48 67 E1 01 00 		push    r2
014D4C E7 E1 01 00 		push    r3
014D50 67 E2 01 00 		push    r4
014D54 82 30 62 34 		chk     r3,r1,b49
014D58 BD 01 6E 00 		beq     r3,fmbx0
014D5C 82 40 00 1A 		mov     r4,r1
014D60 02 11 60 34 		chk     r1,r2,b48
014D64 BD 00 68 00 		beq     r1,fmbx0
014D68 02 12 00 1A 		mov     r1,r4
014D6C B9 F4 FE FF 		bsr     LockSYS
                	
                		; Dequeue messages from mailbox and add them back to the free message list.
                	fmbx5:
014D70 E7 E0 01 00 		push    r1
014D74 B9 40 00 00 		bsr		DequeueMsgFromMbx
014D78 BD 00 14 00 		beq		r1,fmbx3
014D7C 67 E1 01 00 		push    r2
014D80 7C C0 00 00 		lw		r2,FreeMsg
014D84 46 20 60 02 
014D88 E3 20 00 00 		sw		r2,MSG_LINK[r1]
014D8C 7C C0 00 00 		sw		r1,FreeMsg
014D90 63 10 60 02 
014D94 57 2F 10 00 		pop     r2
014D98 57 1F 10 00 		pop     r1
014D9C BA FA FF FF 		bra		fmbx5
                	fmbx3:
014DA0 57 1F 10 00 		pop     r1
                	
                		; Dequeue threads from mailbox.
                	fmbx6:
014DA4 E7 E0 01 00 		push    r1
014DA8 39 56 00 00 		bsr		DequeueThreadFromMbx2
014DAC BD 00 06 00 		beq		r1,fmbx7
014DB0 57 1F 10 00 		pop     r1
014DB4 3A FE FF FF 		bra		fmbx6
                	fmbx7:
014DB8 57 1F 10 00 		pop     r1
                	
                		; Remove mailbox from TCB list
014DBC 46 31 C0 04 		lw		r3,TCB_MbxList[r2]
014DC0 67 E1 01 00 		push    r2
014DC4 0A 20 FE FF 		ldi		r2,#-1
                	fmbx10:
014DC8 82 40 06 0C 		cmp		r4,r1,r3
014DCC 3D 02 0C 00 		beq		r4,fmbx9
014DD0 82 21 00 1A 		mov     r2,r3
014DD4 C6 31 00 00 		lw		r3,MBX_LINK[r3]
014DD8 BD 11 F8 FF 		bne		r3,fmbx10
                		; ?The mailbox was not in the list managed by the task.
014DDC 57 2F 10 00 		pop     r2
014DE0 3A 07 00 00 		bra		fmbx2
                	fmbx9:
014DE4 3D 01 0A 00 		beq		r2,fmbx11
014DE8 C6 31 00 00 		lw		r3,MBX_LINK[r3]
014DEC 63 31 00 00 		sw		r3,MBX_LINK[r2]
014DF0 57 2F 10 00 		pop     r2
014DF4 3A 02 00 00 		bra		fmbx12
                	fmbx11:
                		; No prior mailbox in list, update head
014DF8 C6 30 00 00 		lw		r3,MBX_LINK[r1]
014DFC 57 2F 10 00 		pop     r2
014E00 63 31 C0 04 		sw		r3,TCB_MbxList[r2]
                	
                	fmbx12:
                		; Add mailbox back to mailbox pool
014E04 7C C0 00 00 		lw		r2,FreeMbxHandle
014E08 46 20 40 02 
014E0C E3 20 00 00 		sw		r2,MBX_LINK[r1]
014E10 7C C0 00 00 		sw		r1,FreeMbxHandle
014E14 63 10 40 02 
                	fmbx2:
014E18 B9 E2 FE FF 		bsr     UnlockSYS
014E1C 57 4F 10 00 		pop     r4
014E20 57 3F 10 00 		pop     r3
014E24 57 2F 10 00 		pop     r2
014E28 0A 10 00 00 		ldi		r1,#E_Ok
014E2C 3B FF 11 00 		rts
fmbx1:
014E30 B9 DF FE FF 		bsr     UnlockSYS
                	fmbx0:
014E34 57 4F 10 00 		pop     r4
014E38 57 3F 10 00 		pop     r3
014E3C 57 2F 10 00 		pop     r2
014E40 0A 10 02 00 		ldi		r1,#E_Arg
014E44 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Queue a message at a mailbox.
                	; On entry the mailbox semaphore is already activated.
                	;
                	; Parameters:
                	;	r1 = message
                	;	r2 = mailbox
                	;------------------------------------------------------------------------------
                	
                	QueueMsgAtMbx:
014E48 BD 00 4E 00 		beq		r1,qmam_bad_msg
014E4C E7 EF 01 00 		push    lr
014E50 E7 E0 01 00 		push    r1
014E54 67 E1 01 00 		push    r2
014E58 E7 E1 01 00 		push    r3
014E5C 67 E2 01 00 		push	r4
014E60 40 41 6E 00 		lb		r4,MBX_MQ_STRATEGY[r2]
014E64 06 32 00 00 		cmp		r3,r4,#MQS_UNLIMITED
014E68 BD 01 1E 00 		beq		r3,qmam_unlimited
014E6C 06 32 04 00 		cmp		r3,r4,#MQS_NEWEST
014E70 BD 01 3C 00 		beq		r3,qmam_newest
014E74 06 32 02 00 		cmp		r3,r4,#MQS_OLDEST
014E78 BD 01 76 00 		beq		r3,qmam_oldest
014E7C 39 6D 01 00 		bsr		kernel_panic
014E80 49 6C 6C 65 		db		"Illegal message queue strategy",0
014E84 67 61 6C 20 
014E88 6D 65 73 73 
014E8C 61 67 65 20 
014E90 71 75 65 75 
014E94 65 20 73 74 
014E98 72 61 74 65 
014E9C 67 79 00    
014E9F 00 3A 11 00 		bra		qmam8
014EA3 00          
                		; Here we assumed "unlimited" message storage. Just add the new message at
                		; the tail of the queue.
                	qmam_unlimited:
014EA4 46 31 50 00 		lw		r3,MBX_MQ_TAIL[r2]
014EA8 82 41 62 34 		chk     r4,r3,b49
014EAC 3D 02 06 00 		beq		r4,qmam_add_at_head
014EB0 E3 11 00 00 		sw		r1,MSG_LINK[r3]
014EB4 3A 01 00 00 		bra		qmam2
                	qmam_add_at_head:
014EB8 63 11 40 00 		sw		r1,MBX_MQ_HEAD[r2]
                	qmam2:
014EBC 63 11 50 00 		sw		r1,MBX_MQ_TAIL[r2]
                	qmam6:
014EC0 43 31 68 00 	    lcu     r3,MBX_MQ_COUNT[r2]
014EC4 94 31 02 00 	    addui   r3,r3,#1
014EC8 61 31 68 00 		sc		r3,MBX_MQ_COUNT[r2]		; increase the queued message count
014ECC E3 00 00 00 		sw		r0,MSG_LINK[r1]
014ED0 57 4F 10 00 		pop		r4
014ED4 57 3F 10 00 		pop     r3
014ED8 57 2F 10 00 		pop     r2
014EDC 57 1F 10 00 		pop     r1
014EE0 3B FF 11 00 		rts
qmam_bad_msg:
014EE4 37 FF 01 00 		rtl
	; Here we are queueing a limited number of messages. As new messages are
                		; added at the tail of the queue, messages drop off the head of the queue.
                	qmam_newest:
014EE8 46 31 50 00 		lw		r3,MBX_MQ_TAIL[r2]
014EEC 82 41 62 34 		chk     r4,r3,b49
014EF0 3D 02 06 00 		beq		r4,qmam3
014EF4 E3 11 00 00 		sw		r1,MSG_LINK[r3]
014EF8 3A 01 00 00 		bra		qmam4
                	qmam3:
014EFC 63 11 40 00 		sw		r1,MBX_MQ_HEAD[r2]
                	qmam4:
014F00 63 11 50 00 		sw		r1,MBX_MQ_TAIL[r2]
014F04 43 31 68 00 		lcu		r3,MBX_MQ_COUNT[r2]
014F08 94 31 02 00 		addui   r3,r3,#1
014F0C 43 41 64 00 		lcu     r4,MBX_MQ_SIZE[r2]
014F10 82 31 08 2C 		cmpu    r3,r3,r4
014F14 BD 51 D6 FF 		ble		r3,qmam6
014F18 E3 00 00 00 		sw		r0,MSG_LINK[r1]
                		; Remove the oldest message which is the one at the head of the mailbox queue.
                		; Add the message back to the pool of free messages.
014F1C 46 11 40 00 		lw		r1,MBX_MQ_HEAD[r2]
014F20 C6 30 00 00 		lw		r3,MSG_LINK[r1]		; move next in queue
014F24 63 31 40 00 		sw		r3,MBX_MQ_HEAD[r2]	; to head of list
                	qmam8:
014F28 43 31 70 00 	    lcu     r3,MBX_MQ_MISSED[r2]
014F2C 94 31 02 00 	    addui   r3,r3,#1
014F30 61 31 70 00 	    sc      r3,MBX_MQ_MISSED[r2]  
                	qmam1:
014F34 7C C0 00 00 		lw		r3,FreeMsg				; put old message back into free message list
014F38 46 30 60 02 
014F3C E3 30 00 00 		sw		r3,MSG_LINK[r1]
014F40 7C C0 00 00 		sw		r1,FreeMsg
014F44 63 10 60 02 
014F48 7C C0 00 00 		inc		nMsgBlk,#1
014F4C 64 10 70 02 
                		;GoReschedule
014F50 57 4F 10 00 		pop		r4
014F54 57 3F 10 00 		pop     r3
014F58 57 2F 10 00 		pop     r2
014F5C 57 1F 10 00 		pop     r1
014F60 3B FF 11 00 		rts
	; Here we are buffering the oldest messages. So if there are too many messages
                		; in the queue already, then the queue doesn't change and the new message is
                		; lost.
                	qmam_oldest:
014F64 43 31 68 00 		lcu		r3,MBX_MQ_COUNT[r2]		; Check if the queue is full
014F68 43 41 64 00 		lcu     r4,MBX_MQ_SIZE[r2]
014F6C 82 31 08 2C 		cmpu	r3,r3,r4
014F70 BD 31 DC FF 		bge		r3,qmam8			; If the queue is full, then lose the current message
014F74 3A E6 FF FF 		bra		qmam_unlimited		; Otherwise add message to queue
                	
                	;------------------------------------------------------------------------------
                	; Dequeue a message from a mailbox.
                	;
                	; Returns
                	;	r1 = message pointer (NULL if there are no messages)
                	;------------------------------------------------------------------------------
                	
                	DequeueMsgFromMbx:
014F78 67 E1 01 00 	    push    r2
014F7C E7 E1 01 00 	    push    r3
014F80 82 20 00 1A 		mov     r2,r1				; x = mailbox index
014F84 43 11 68 00 		lcu		r1,MBX_MQ_COUNT[r2]		; are there any messages available ?
014F88 BD 00 1A 00 		beq		r1,dmfm3
014F8C 95 10 02 00 		subui   r1,r1,#1
014F90 61 11 68 00 		sc		r1,MBX_MQ_COUNT[r2]		; update the message count
014F94 46 11 40 00 		lw		r1,MBX_MQ_HEAD[r2]		; Get the head of the list, this should not be NULL
014F98 BD 00 12 00 		beq		r1,dmfm3			; since the message count > 0
014F9C C6 30 00 00 		lw		r3,MSG_LINK[r1]		; get the link to the next message
014FA0 63 31 40 00 		sw		r3,MBX_MQ_HEAD[r2]		; update the head of the list
014FA4 BD 11 04 00 		bne		r3,dmfm2			; if there was no more messages then update the
014FA8 63 31 50 00 		sw		r3,MBX_MQ_TAIL[r2]	; tail of the list as well.
                	dmfm2:
014FAC E3 10 00 00 		sw		r1,MSG_LINK[r1]		; point the link to the message itself to indicate it's dequeued
                	dmfm1:
014FB0 57 3F 10 00 	    pop     r3
014FB4 57 2F 10 00 	    pop     r2
014FB8 3B FF 11 00 		rts
dmfm3:
014FBC 57 3F 10 00 	    pop     r3
014FC0 57 2F 10 00 	    pop     r2
014FC4 0A 10 00 00 		ldi		r1,#0
014FC8 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; Parameters:
                	;	r1 = mailbox handle
                	; Returns:
                	;	r1 = E_arg		means pointer is invalid
                	;	r1 = E_NoThread	means no thread was queued at the mailbox
                	;	r2 = thead handle
                	;------------------------------------------------------------------------------
                	
                	DequeueThreadFromMbx:
014FCC 67 E2 01 00 		push	r4
014FD0 C6 40 10 00 		lw		r4,MBX_TQ_HEAD[r1]
014FD4 3D 12 0A 00 		bne		r4,dtfm2
014FD8 57 4F 10 00 		pop		r4
014FDC 0A 20 00 00 		ldi		r2,#0
014FE0 0A 10 0C 00 		ldi		r1,#E_NoThread
014FE4 37 FF 01 00 		rtl
dtfm2:
014FE8 E7 E2 01 00 		push	r5
014FEC C3 50 60 00 		lcu     r5,MBX_TQ_COUNT[r1]
014FF0 95 52 02 00 		subui   r5,r5,#1
014FF4 E1 50 60 00 		sc      r5,MBX_TQ_COUNT[r1]
014FF8 02 22 00 1A 		mov		r2,r4
014FFC 46 42 70 04 		lw		r4,TCB_mbq_next[r4]
015000 E3 40 10 00 		sw		r4,MBX_TQ_HEAD[r1]
015004 3D 02 06 00 		beq		r4,dtfm3
015008 63 02 80 04 			sw		r0,TCB_mbq_prev[r4]
01500C 3A 01 00 00 			bra		dtfm4
                	dtfm3:
015010 E3 00 30 00 			sw		r0,MBX_TQ_TAIL[r1]
                	dtfm4:
015014 02 51 00 1A 		mov		r5,r2
015018 C0 12 20 04 		lb		r1,TCB_Status[r5]
01501C 8C 10 02 00 		and		r1,r1,#TS_TIMEOUT
015020 BD 00 0C 00 		beq		r1,dtfm5
015024 82 12 00 1A 		mov		r1,r5
015028 E7 EF 01 00 		push    lr
01502C 7C 00 00 00 		jsr		RemoveFromTimeoutList
015030 3C F0 A9 A5 
015034 57 FF 11 00 		pop     lr
                	dtfm5:
015038 E3 02 70 04 		sw		r0,TCB_mbq_next[r5]
01503C E3 02 80 04 		sw		r0,TCB_mbq_prev[r5]
015040 E3 02 B0 04 		sw		r0,TCB_hWaitMbx[r5]
015044 E0 02 20 04 		sb		r0,TCB_Status[r5]		; set task status = TS_NONE
015048 57 5F 10 00 		pop		r5
01504C 57 4F 10 00 		pop		r4
015050 0A 10 00 00 		ldi		r1,#E_Ok
015054 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	;	This function is called from FreeMbx(). It dequeues threads from the
                	; mailbox without removing the thread from the timeout list. The thread will
                	; then timeout waiting for a message that can never be delivered.
                	;
                	; Parameters:
                	;	r1 = mailbox handle
                	; Returns:
                	;	r1 = E_arg		means pointer is invalid
                	;	r1 = E_NoThread	means no thread was queued at the mailbox
                	;	r2 = thead handle
                	;------------------------------------------------------------------------------
                	
                	DequeueThreadFromMbx2:
015058 67 E2 01 00 		push	r4
01505C C6 40 10 00 		lw		r4,MBX_TQ_HEAD[r1]
015060 3D 12 0A 00 		bne		r4,dtfm2a
015064 57 4F 10 00 		pop		r4
015068 0A 20 00 00 		ldi		r2,#0
01506C 0A 10 0C 00 		ldi		r1,#E_NoThread
015070 37 FF 01 00 		rtl
dtfm2a:
015074 E7 E2 01 00 		push	r5
015078 C3 50 60 00 		lcu     r5,MBX_TQ_COUNT[r1]
01507C 95 52 02 00 		subui   r5,r5,#1
015080 E1 50 60 00 		sc      r5,MBX_TQ_COUNT[r1]
015084 02 22 00 1A 		mov		r2,r4
015088 46 42 70 04 		lw		r4,TCB_mbq_next[r4]
01508C E3 40 10 00 		sw		r4,MBX_TQ_HEAD[r1]
015090 3D 02 06 00 		beq		r4,dtfm3a
015094 63 02 80 04 			sw		r0,TCB_mbq_prev[r4]
015098 3A 01 00 00 			bra		dtfm4a
                	dtfm3a:
01509C E3 00 30 00 			sw		r0,MBX_TQ_TAIL[r1]
                	dtfm4a:
0150A0 63 01 70 04 		sw	    r0,TCB_mbq_next[r2]
0150A4 63 01 80 04 		sw		r0,TCB_mbq_prev[r2]
0150A8 63 01 B0 04 		sw		r0,TCB_hWaitMbx[r2]
                	;	sei
0150AC 40 11 20 04 	    lb      r1,TCB_Status[r2]
0150B0 8C 10 FA FF 	    and     r1,r1,#~TS_WAITMSG
0150B4 60 11 20 04 	    sb      r1,TCB_Status[r2]
                	;	cli
0150B8 57 5F 10 00 		pop		r5
0150BC 57 4F 10 00 		pop		r4
0150C0 0A 10 00 00 		ldi		r1,#E_Ok
0150C4 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; PostMsg and SendMsg are the same operation except that PostMsg doesn't
                	; invoke rescheduling while SendMsg does. So they both call the same
                	; SendMsgPrim primitive routine. This two wrapper functions for convenience.
                	;------------------------------------------------------------------------------
                	
                	PostMsg:
0150C8 E7 EF 01 00 	    push    lr
0150CC 67 E2 01 00 		push	r4
0150D0 0A 40 00 00 		ldi		r4,#0			; Don't invoke scheduler
0150D4 39 05 00 00 		bsr		SendMsgPrim
0150D8 57 4F 10 00 		pop		r4
0150DC 3B FF 11 00 		rts

                	SendMsg:
0150E0 E7 EF 01 00 	    push    lr
0150E4 67 E2 01 00 		push	r4
0150E8 0A 40 02 00 		ldi		r4,#1			; Do invoke scheduler
0150EC 7C 00 00 00 		jsr		SendMsgPrim
0150F0 3C F0 7F A8 
0150F4 57 4F 10 00 		pop		r4
0150F8 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; SendMsgPrim
                	; Send a message to a mailbox
                	;
                	; Parameters
                	;	r1 = handle to mailbox
                	;	r2 = message D1
                	;	r3 = message D2
                	;	r4 = scheduler flag		1=invoke,0=don't invoke
                	;
                	; Returns
                	;	r1=E_Ok			everything is ok
                	;	r1=E_BadMbx		for a bad mailbox number
                	;	r1=E_NotAlloc	for a mailbox that isn't allocated
                	;	r1=E_NoMsg		if there are no more message blocks available
                	;------------------------------------------------------------------------------
                	message "SendMsgPrim"
                	SendMsgPrim:
0150FC E7 EF 01 00 	    push    lr
015100 E7 E2 01 00 		push	r5
015104 67 E3 01 00 		push	r6
015108 E7 E3 01 00 		push	r7
                	
01510C 82 50 62 34 	    chk     r5,r1,b49
015110 BD 02 70 00 	    beq     r5,smsg1
015114 B9 7F FE FF 	    bsr     LockSYS
015118 C1 70 6C 00 		lbu		r7,MBX_OWNER[r1]
01511C 96 53 66 00 		cmpu    r5,r7,#NR_JCB
015120 BD 32 72 00 		bge		r5,smsg2				; error: no owner
015124 E7 E0 01 00 		push    r1
015128 67 E1 01 00 		push    r2
01512C 39 D4 FF FF 		bsr		DequeueThreadFromMbx	; r1=mbx
015130 02 61 00 1A 		mov		r6,r2					; r6 = thread
015134 57 2F 10 00 		pop     r2
015138 57 1F 10 00 		pop     r1
01513C 3D 13 2A 00 		bne		r6,smsg3
                			; Here there was no thread waiting at the mailbox, so a message needs to
                			; be allocated
                	smp2:
015140 7C C0 00 00 			lw		r7,FreeMsg
015144 46 70 60 02 
015148 BD 03 6A 00 			beq		r7,smsg4		; no more messages available
01514C C6 53 00 00 			lw		r5,MSG_LINK[r7]
015150 7C C0 00 00 			sw		r5,FreeMsg
015154 63 50 60 02 
015158 7C C0 00 00 			dec		nMsgBlk		; decrement the number of available messages
01515C 64 F0 71 02 
015160 7C C0 00 00 			sw		r0,freemsg_sema
015164 63 00 A0 03 
015168 E3 23 10 00 			sw		r2,MSG_D1[r7]
01516C E3 33 20 00 			sw		r3,MSG_D2[r7]
015170 E7 E0 01 00 			push    r1
015174 67 E1 01 00 			push    r2
015178 82 20 00 1A 			mov     r2,r1			; r2 = mailbox
01517C 82 13 00 1A 			mov		r1,r7			; r1 = message
015180 39 99 FF FF 			bsr		QueueMsgAtMbx
015184 57 2F 10 00 			pop     r2
015188 57 1F 10 00 			pop     r1
01518C 3D 03 26 00 			beq		r6,smsg5    ; check if there is a thread waiting for a message
                	smsg3:
015190 63 23 90 04 		sw		r2,TCB_MSG_D1[r6]
015194 63 33 A0 04 		sw		r3,TCB_MSG_D2[r6]
                	smsg7:
015198 40 53 20 04 		lb		r5,TCB_Status[r6]
01519C 8C 52 02 00 		and		r5,r5,#TS_TIMEOUT
0151A0 BD 02 06 00 		beq		r5,smsg8
0151A4 02 13 00 1A 		mov		r1,r6
0151A8 39 35 FF FF 		bsr		RemoveFromTimeoutList
                	smsg8:
0151AC 40 13 20 04 	    lb      r1,TCB_Status[r6]
0151B0 8C 10 FA FF 	    and     r1,r1,#~TS_WAITMSG
0151B4 60 13 20 04 	    sb      r1,TCB_Status[r6]
0151B8 02 13 00 1A 		mov		r1,r6
0151BC B9 F4 FE FF 		bsr		AddTaskToReadyList
0151C0 7C C0 00 00 		sw		r0,sys_sema
0151C4 63 00 B0 03 
0151C8 3D 02 08 00 		beq		r4,smsg5
0151CC 39 6C FE FF 		bsr     UnlockSYS
0151D0 38 0F 04 80 		int		#2
                		;GoReschedule
0151D4 3A 01 00 00 		bra		smsg9
                	smsg5:
0151D8 B9 6A FE FF 		bsr     UnlockSYS
                	smsg9:
0151DC 57 7F 10 00 		pop		r7
0151E0 57 6F 10 00 		pop		r6
0151E4 57 5F 10 00 		pop		r5
0151E8 0A 10 00 00 		ldi		r1,#E_Ok
0151EC 3B FF 11 00 		rts
smsg1:
0151F0 57 7F 10 00 		pop		r7
0151F4 57 6F 10 00 		pop		r6
0151F8 57 5F 10 00 		pop		r5
0151FC 0A 10 08 00 		ldi		r1,#E_BadMbx
015200 37 FF 01 00 		rtl
smsg2:
015204 39 65 FE FF 		bsr     UnlockSYS
015208 57 7F 10 00 		pop		r7
01520C 57 6F 10 00 		pop		r6
015210 57 5F 10 00 		pop		r5
015214 0A 10 12 00 		ldi		r1,#E_NotAlloc
015218 3B FF 11 00 		rts
smsg4:
01521C 39 62 FE FF 		bsr     UnlockSYS
015220 57 7F 10 00 		pop		r7
015224 57 6F 10 00 		pop		r6
015228 57 5F 10 00 		pop		r5
01522C 0A 10 16 00 		ldi		r1,#E_NoMsg
015230 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; WaitMsg
                	; Wait at a mailbox for a message to arrive. This subroutine will block the
                	; task until a message is available or the task times out on the timeout
                	; list.
                	;
                	; Parameters
                	;	r1=mailbox
                	;	r2=timeout
                	; Returns:
                	;	r1=E_Ok			if everything is ok
                	;	r1=E_BadMbx		for a bad mailbox number
                	;	r1=E_NotAlloc	for a mailbox that isn't allocated
                	;	r2=message D1
                	;	r3=message D2
                	;------------------------------------------------------------------------------
                	message "WaitMsg"
                	WaitMsg:
015234 E7 EF 01 00 		push    lr
015238 67 E2 01 00 		push	r4
01523C E7 E2 01 00 		push	r5
015240 67 E3 01 00 		push	r6
015244 E7 E3 01 00 		push	r7
015248 82 50 62 34 		chk     r5,r1,b49
01524C BD 02 80 00 	    beq     r5,wmsg1
015250 82 60 00 1A 		mov		r6,r1
                	wmsg11:
015254 B9 57 FE FF 	    bsr     LockSYS
015258 C0 50 6C 00 		lb		r5,MBX_OWNER[r1]
01525C 86 32 66 00 		cmp		r3,r5,#NR_JCB
015260 BD 21 82 00 		bgt		r3,wmsg2				; error: no owner
015264 B9 A2 FF FF 		bsr		DequeueMsgFromMbx
015268 BD 10 52 00 		bne		r1,wmsg3
                	
                		; Here there was no message available, remove the task from
                		; the ready list, and optionally add it to the timeout list.
                		; Queue the task at the mailbox.
                	wmsg12:
01526C 02 1C 00 1A 		mov		r1,tr				; remove the task from the ready list
015270 B9 EF FE FF 		bsr		RemoveTaskFromReadyList
                	wmsg13:
015274 C0 70 20 04 		lb		r7,TCB_Status[r1]
015278 8D 73 04 00 		or		r7,r7,#TS_WAITMSG			; set task status to waiting
01527C E0 70 20 04 		sb		r7,TCB_Status[r1]
015280 E3 60 B0 04 		sw		r6,TCB_hWaitMbx[r1]			; set which mailbox is waited for
015284 E3 00 70 04 		sw		r0,TCB_mbq_next[r1]			; adding at tail, so there is no next
015288 46 73 10 00 		lw		r7,MBX_TQ_HEAD[r6]			; is there a task que setup at the mailbox ?
01528C BD 03 32 00 		beq		r7,wmsg6
015290 46 73 30 00 		lw		r7,MBX_TQ_TAIL[r6]
015294 E3 70 80 04 		sw		r7,TCB_mbq_prev[r1]
015298 E3 13 70 04 		sw		r1,TCB_mbq_next[r7]
01529C 63 13 30 00 		sw		r1,MBX_TQ_TAIL[r6]
0152A0 43 73 60 00 		lcu     r7,MBX_TQ_COUNT[r6]         ; increment number of tasks queued
0152A4 94 73 02 00 		addui   r7,r7,#1
0152A8 61 73 60 00 		sc      r7,MBX_TQ_COUNT[r6]
                	wmsg7:
0152AC 3D 01 0A 00 		beq		r2,wmsg10                   ; check for a timeout
                	wmsg14:
0152B0 39 F9 FE FF 		bsr		AddToTimeoutList
0152B4 39 4F FE FF 		bsr     UnlockSYS
0152B8 38 0F 04 80 		int		#2	;	GoReschedule			; invoke the scheduler
0152BC B9 4A FE FF 		bsr     LockSYS
                	wmsg10:
                		; At this point either a message was sent to the task, or the task
                		; timed out. If a message is still not available then the task must
                		; have timed out. Return a timeout error.
                		; Note that SendMsg will directly set the message D1, D2 data
                		; without queing a message at the mailbox (if there is a task
                		; waiting already). So we cannot just try dequeing a message again.
0152C0 C6 20 90 04 		lw		r2,TCB_MSG_D1[r1]
0152C4 C6 30 A0 04 		lw		r3,TCB_MSG_D2[r1]
0152C8 C0 40 20 04 		lb		r4,TCB_Status[r1]
0152CC 39 4C FE FF 		bsr     UnlockSYS
0152D0 0C 42 04 00 		and		r4,r4,#TS_WAITMSG	; Is the task still waiting for a message ?
0152D4 3D 02 30 00 		beq		r4,wmsg8			; If not, go return OK status
0152D8 57 7F 10 00 		pop		r7				; Otherwise return timeout error
0152DC 57 6F 10 00 		pop		r6
0152E0 57 5F 10 00 		pop		r5
0152E4 57 4F 10 00 		pop		r4
0152E8 0A 10 20 00 		ldi		r1,#E_Timeout
0152EC 3B FF 11 00 		rts
	
                		; Here there were no prior tasks queued at the mailbox
                	wmsg6:
0152F0 E3 00 80 04 		sw		r0,TCB_mbq_prev[r1]		; no previous tasks
0152F4 E3 00 70 04 		sw		r0,TCB_mbq_next[r1]
0152F8 63 13 10 00 		sw		r1,MBX_TQ_HEAD[r6]		; set both head and tail indexes
0152FC 63 13 30 00 		sw		r1,MBX_TQ_TAIL[r6]
015300 0A 70 02 00 		ldi		r7,#1
015304 61 73 60 00 		sc		r7,MBX_TQ_COUNT[r6]		; one task queued
015308 BA F4 FF FF 		bra		wmsg7					; check for a timeout value
                		
                	wmsg3:
01530C C6 20 10 00 		lw		r2,MSG_D1[r1]
015310 C6 30 20 00 		lw		r3,MSG_D2[r1]
                		; Add the newly dequeued message to the free messsage list
015314 7C C0 00 00 		lw		r7,FreeMsg
015318 46 70 60 02 
01531C E3 70 00 00 		sw		r7,MSG_LINK[r1]
015320 7C C0 00 00 		sw		r1,FreeMsg
015324 63 10 60 02 
015328 7C C0 00 00 		inc		nMsgBlk,#1
01532C 64 10 70 02 
015330 B9 3F FE FF 		bsr     UnlockSYS
                	wmsg8:
015334 57 7F 10 00 		pop		r7
015338 57 6F 10 00 		pop		r6
01533C 57 5F 10 00 		pop		r5
015340 57 4F 10 00 		pop		r4
015344 0A 10 00 00 		ldi		r1,#E_Ok
015348 3B FF 11 00 		rts
wmsg1:
01534C 57 7F 10 00 		pop		r7
015350 57 6F 10 00 		pop		r6
015354 57 5F 10 00 		pop		r5
015358 57 4F 10 00 		pop		r4
01535C 0A 10 08 00 		ldi		r1,#E_BadMbx
015360 3B FF 11 00 		rts
wmsg2:
015364 39 39 FE FF 		bsr     UnlockSYS
015368 57 7F 10 00 		pop		r7
01536C 57 6F 10 00 		pop		r6
015370 57 5F 10 00 		pop		r5
015374 57 4F 10 00 		pop		r4
015378 0A 10 12 00 		ldi		r1,#E_NotAlloc
01537C 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Check for a message at a mailbox. Does not block. This function is a
                	; convenience wrapper for CheckMsg().
                	;
                	; Parameters
                	;	r1=mailbox handle
                	; Returns:
                	;	r1=E_Ok			if everything is ok
                	;	r1=E_NoMsg		if no message is available
                	;	r1=E_BadMbx		for a bad mailbox number
                	;	r1=E_NotAlloc	for a mailbox that isn't allocated
                	;	r2=message D1
                	;	r3=message D2
                	;------------------------------------------------------------------------------
                	
                	PeekMsg:
015380 E7 EF 01 00 	    push    lr
015384 0A 20 00 00 		ldi		r2,#0		; don't remove from queue
015388 39 01 00 00 		bsr		CheckMsg
01538C 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; CheckMsg
                	; Check for a message at a mailbox. Does not block.
                	;
                	; Parameters
                	;	r1=mailbox handle
                	;	r2=remove from queue if present
                	; Returns:
                	;	r1=E_Ok			if everything is ok
                	;	r1=E_NoMsg		if no message is available
                	;	r1=E_BadMbx		for a bad mailbox number
                	;	r1=E_NotAlloc	for a mailbox that isn't allocated
                	;	r2=message D1
                	;	r3=message D2
                	;------------------------------------------------------------------------------
                	message "CheckMsg"
                	CheckMsg:
015390 E7 EF 01 00 	    push    lr
015394 67 E3 01 00 	    push    r6
                	;	cmp		r3,r1,#NR_MBX			; check the mailbox number to make sure
                	;	bge		r3,cmsg1				; that it's sensible
015398 82 60 62 34 	    chk     r6,r1,b49
01539C 3D 03 38 00 	    beq     r6,cmsg1
0153A0 67 E2 01 00 		push	r4
0153A4 E7 E2 01 00 		push	r5
                	
0153A8 39 2D FE FF 	    bsr     LockSYS
                	
0153AC C6 50 6C 00 		lw		r5,MBX_OWNER[r1]
0153B0 BD 02 34 00 		beq		r5,cmsg2				; error: no owner
0153B4 3D 01 06 00 		beq		r2,cmsg3                ; are we to dequeue the message ?
0153B8 39 78 FF FF 		bsr		DequeueMsgFromMbx
0153BC 3A 01 00 00 		bra		cmsg4
                	cmsg3:
0153C0 C6 10 40 00 		lw		r1,MBX_MQ_HEAD[r1]		; peek the message at the head of the messages queue
                	cmsg4:
0153C4 BD 00 36 00 		beq		r1,cmsg5
0153C8 02 41 00 1A 		mov     r4,r2
0153CC C6 20 10 00 		lw		r2,MSG_D1[r1]
0153D0 C6 30 20 00 		lw		r3,MSG_D2[r1]
0153D4 3D 02 10 00 		beq		r4,cmsg8
                	cmsg10:
0153D8 7C C0 00 00 		lw		r5,FreeMsg
0153DC 46 50 60 02 
0153E0 E3 50 00 00 		sw		r5,MSG_LINK[r1]
0153E4 7C C0 00 00 		sw		r1,FreeMsg
0153E8 63 10 60 02 
0153EC 7C C0 00 00 		inc		nMsgBlk,#1
0153F0 64 10 70 02 
                	cmsg8:
0153F4 39 27 FE FF 		bsr     UnlockSYS
0153F8 57 5F 10 00 		pop		r5
0153FC 57 4F 10 00 		pop		r4
015400 57 6F 10 00 		pop     r6
015404 0A 10 00 00 		ldi		r1,#E_Ok
015408 3B FF 11 00 		rts
cmsg1:
01540C 0A 10 08 00 		ldi		r1,#E_BadMbx
015410 57 6F 10 00 		pop     r6
015414 3B FF 11 00 		rts
cmsg2:
015418 B9 22 FE FF 		bsr     UnlockSYS
01541C 57 5F 10 00 		pop		r5
015420 57 4F 10 00 		pop		r4
015424 57 6F 10 00 		pop     r6
015428 0A 10 12 00 		ldi		r1,#E_NotAlloc
01542C 3B FF 11 00 		rts
cmsg5:
015430 B9 1F FE FF 		bsr     UnlockSYS
015434 57 5F 10 00 		pop		r5
015438 57 4F 10 00 		pop		r4
01543C 57 6F 10 00 		pop     r6
015440 0A 10 16 00 		ldi		r1,#E_NoMsg
015444 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; System Call Exception
                	;
                	;------------------------------------------------------------------------------
                	;
                	syscall_exception:
015448 0A E0 21 05 	    ldi     sp,TCB_SYS_Stack[tr]
01544C 67 E3 01 00 		push	r6					; save off some working registers
015450 E7 E3 01 00 		push	r7
015454 02 60 12 3E 		mfspr   r6,epc              ; get return address into r6
015458 0C 73 FC FF 		and     r7,r6,#-2           ; clear LSB
01545C C4 73 08 00 		lh	    r7,4[r7]			; get static call number parameter into r7
015460 14 63 10 00 		addui   r6,r6,#8			; update return address
015464 02 03 12 3C 		mtspr   epc,r6
015468 96 63 28 00 		cmpu    r6,r7,#20
01546C 3D 23 12 00 		bgt     r6,.bad_callno
015470 82 73 02 70 		asl     r7,r7,#1
015474 7C 01 00 00 		lcu     r6,syscall_vectors[r7]       ; load the vector into r6
015478 C3 63 00 80 
01547C 7C 01 00 00 		or      r6,r6,#syscall_exception & 0xFFFFFFFFFFFF0000
015480 0D 63 00 00 
015484 E7 EF 01 00 		push    lr
015488 3C F3 01 00 		jsr		[r6]				; do the system function
01548C 57 FF 11 00 		pop     lr
                	.bad_callno:
015490 57 7F 10 00 		pop		r7
015494 57 6F 10 00 		pop		r6
015498 02 E0 3D 6E 		rte
                	
                	;------------------------------------------------------------------------------
                	; Reschedule tasks to run without affecting the timeout list timing.
                	;------------------------------------------------------------------------------
                	
                	reschedule:
01549C 02 E0 01 6C 	    cpuid   sp,r0,#0
0154A0 3D 0F 08 00 	    beq     sp,.0001
0154A4 7C 02 00 00 	    ldi     sp,#CPU1_IRQ_STACK
0154A8 0A E0 01 10 
0154AC BA 01 00 00 	    bra     .0002
                	.0001:
0154B0 FC 00 00 00 	    ldi     sp,#CPU0_IRQ_STACK
0154B4 0A E0 01 10 
                	.0002:
0154B8 E7 E0 01 00 	    push    r1
0154BC 67 E1 01 00 		push    r2
0154C0 7C C0 00 00 		lwar    r1,sys_sema
0154C4 5C 10 B0 03 
0154C8 BD 10 0E 00 		bne     r1,.0004   
0154CC 7C C0 00 00 		swcr    tr,sys_sema       ; In this case interrupts are off already
0154D0 6E 80 B1 03 
0154D4 02 10 00 3E 		mfspr   r1,cr0            ; because we are in an interrupt routine.
0154D8 7C 00 00 10 		and     r1,r1,#$1000000000
0154DC 8C 10 00 00 
0154E0 BD 10 08 00 		bne     r1,.0005
                	.0004:
0154E4 57 2F 10 00 		pop     r2
0154E8 57 1F 10 00 		pop     r1
0154EC 02 E0 3F 6E 		rti
                	.0005:
0154F0 57 2F 10 00 	    pop     r2
0154F4 57 1F 10 00 	    pop     r1
0154F8 63 1C 10 00 	    sw      r1,TCB_r1[tr]
0154FC 63 2C 20 00 	    sw      r2,TCB_r2[tr]
015500 63 3C 30 00 	    sw      r3,TCB_r3[tr]
015504 63 4C 40 00 	    sw      r4,TCB_r4[tr]
015508 63 5C 50 00 	    sw      r5,TCB_r5[tr]
01550C 63 6C 60 00 	    sw      r6,TCB_r6[tr]
015510 63 7C 70 00 	    sw      r7,TCB_r7[tr]
015514 63 8C 80 00 	    sw      r8,TCB_r8[tr]
015518 63 9C 90 00 	    sw      r9,TCB_r9[tr]
01551C 63 AC A0 00 	    sw      r10,TCB_r10[tr]
015520 63 BC B0 00 	    sw      r11,TCB_r11[tr]
015524 63 CC C0 00 	    sw      r12,TCB_r12[tr]
015528 63 DC D0 00 	    sw      r13,TCB_r13[tr]
01552C 63 EC E0 00 	    sw      r14,TCB_r14[tr]
015530 63 FC F0 00 	    sw      r15,TCB_r15[tr]
015534 63 0C 01 01 	    sw      r16,TCB_r16[tr]
015538 63 1C 11 01 	    sw      r17,TCB_r17[tr]
01553C 63 2C 21 01 	    sw      r18,TCB_r18[tr]
015540 63 3C 31 01 	    sw      r19,TCB_r19[tr]
015544 63 4C 41 01 	    sw      r20,TCB_r20[tr]
015548 63 5C 51 01 	    sw      r21,TCB_r21[tr]
01554C 63 6C 61 01 	    sw      r22,TCB_r22[tr]
015550 63 7C 71 01 	    sw      r23,TCB_r23[tr]
015554 63 8C 81 01 	    sw      r24,TCB_r24[tr]
015558 63 9C 91 01 	    sw      r25,TCB_r25[tr]
01555C 63 AC A1 01 	    sw      r26,TCB_r26[tr]
015560 63 BC B1 01 	    sw      r27,TCB_r27[tr]
015564 63 CC C1 01 	    sw      r28,TCB_r28[tr]
015568 63 DC D1 01 	    sw      r29,TCB_r29[tr]
01556C 02 10 1E 3E 	    mfspr   r1,isp
015570 63 1C E0 01 	    sw      r1,TCB_r30[tr]
015574 63 1C 30 03 	    sw      r1,TCB_ISP[tr]
015578 02 10 20 3E 	    mfspr   r1,dsp
01557C 63 1C 40 03 	    sw      r1,TCB_DSP[tr]
015580 02 10 22 3E 	    mfspr   r1,esp
015584 63 1C 50 03 	    sw      r1,TCB_ESP[tr]
015588 63 FC F1 01 	    sw      r31,TCB_r31[tr]
01558C 02 10 10 3E 	    mfspr   r1,ipc
015590 63 1C 00 03 	    sw      r1,TCB_IPC[tr]
015594 02 10 0E 3E 	    mfspr   r1,dpc
015598 63 1C 10 03 	    sw      r1,TCB_DPC[tr]
01559C 02 10 12 3E 	    mfspr   r1,epc
0155A0 63 1C 20 03 	    sw      r1,TCB_EPC[tr]
0155A4 02 10 00 3E 	    mfspr   r1,cr0
0155A8 63 1C 60 03 	    sw      r1,TCB_CR0[tr]
                	resched1:
0155AC 40 1C 20 04 	    lb      r1,TCB_Status[tr]  ; clear RUNNING status (bit #3)
0155B0 8C 10 EE FF 	    and     r1,r1,#~TS_RUNNING
0155B4 60 1C 20 04 	    sb      r1,TCB_Status[tr]
0155B8 7C 00 00 00 		jmp		SelectTaskToRun
0155BC 3C 00 E2 AB 
                	
                	strStartQue:
0155C0 00 00 00 01 		db		0,0,0,1,0,0,0,2,0,1,0,3,0,0,0,4,0,1,0,5,0,0,0,6,0,1,0,7
0155C4 00 00 00 02 
0155C8 00 01 00 03 
0155CC 00 00 00 04 
0155D0 00 01 00 05 
0155D4 00 00 00 06 
0155D8 00 01 00 07 
                	;	db		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                	
                	;------------------------------------------------------------------------------
                	; 60 Hz interrupt
                	; - takes care of "flashing" the cursor
                	; - decrements timeouts for tasks on timeout list
                	; - switching tasks
                	;------------------------------------------------------------------------------
                	
                	FMTKTick:
0155DC 02 E0 01 6C 	    cpuid   sp,r0,#0
0155E0 3D 0F 08 00 	    beq     sp,.0001
0155E4 7C 02 00 00 	    ldi     sp,#CPU1_IRQ_STACK
0155E8 0A E0 01 10 
0155EC BA 01 00 00 	    bra     .0002
                	.0001:
0155F0 FC 00 00 00 	    ldi     sp,#CPU0_IRQ_STACK
0155F4 0A E0 01 10 
                	.0002:
0155F8 E7 E0 01 00 	    push    r1
0155FC 67 E1 01 00 	    push    r2
015600 E7 E1 01 00 	    push    r3
                	
                	    ; The interrupt has to be acknowledged regardless of whether or not
                	    ; the semaphore can be locked, and task switching occur.
                	    ; Each CPU has it's own PIC mapped at the same address.
015604 0A 10 06 00 		ldi		r1,#3				; reset the edge sense circuit
015608 7C DC FF 00 		sh		r1,PIC_RSTE
01560C 62 10 A8 1F 
015610 7C C0 00 00 		inc		IRQFlag,#1
015614 64 10 30 00 
                	
                	    ; Lock up the resources needed by the tick routine
                	    ; Retry up to 10 times to lock the semaphore.
015618 0A 30 14 00 	    ldi     r3,#10
                	.0003:
01561C 7C C0 00 00 	    lwar    r1,sys_sema
015620 5C 10 B0 03 
015624 82 20 60 34 	    chk     r2,r1,b48
015628 3D 11 0E 00 	    bne     r2,.cantLockSYS
01562C 7C C0 00 00 	    swcr    tr,sys_sema
015630 6E 80 B1 03 
015634 02 10 00 3E 	    mfspr   r1,cr0
015638 FC 9A 3B 00 	    and     r1,r1,#1000000000
01563C 8C 10 00 94 
015640 BD 10 22 00 	    bne     r1,.SYSLocked
                	.cantLockSYS:
015644 95 31 02 00 	    subui   r3,r3,#1
015648 BD 11 EA FF 	    bne     r3,.0003
01564C 7C C0 00 00 	    inc     missed_ticks,#1
015650 64 10 80 02 
015654 02 10 00 6C 		cpuid   r1,r0,#0
015658 BD 10 0E 00 		bne     r1,.0004
01565C 7C C0 00 00 		lw		r1,UserTick
015660 46 10 00 00 
015664 BD 00 08 00 		beq		r1,.0004
015668 E7 EF 01 00 		push    lr
01566C BC F0 01 00 		jsr		[r1]
015670 57 FF 11 00 		pop     lr
                	.0004:
015674 57 3F 10 00 	    pop     r3
015678 57 2F 10 00 	    pop     r2
01567C 57 1F 10 00 	    pop     r1
015680 02 E0 3F 6E 	    rti
                	
                	.SYSLocked:
015684 57 3F 10 00 	    pop     r3
015688 57 2F 10 00 	    pop     r2
01568C 57 1F 10 00 	    pop     r1
015690 63 1C 10 00 	    sw      r1,TCB_r1[tr]
015694 63 2C 20 00 	    sw      r2,TCB_r2[tr]
015698 63 3C 30 00 	    sw      r3,TCB_r3[tr]
01569C 63 4C 40 00 	    sw      r4,TCB_r4[tr]
0156A0 63 5C 50 00 	    sw      r5,TCB_r5[tr]
0156A4 63 6C 60 00 	    sw      r6,TCB_r6[tr]
0156A8 63 7C 70 00 	    sw      r7,TCB_r7[tr]
0156AC 63 8C 80 00 	    sw      r8,TCB_r8[tr]
0156B0 63 9C 90 00 	    sw      r9,TCB_r9[tr]
0156B4 63 AC A0 00 	    sw      r10,TCB_r10[tr]
0156B8 63 BC B0 00 	    sw      r11,TCB_r11[tr]
0156BC 63 CC C0 00 	    sw      r12,TCB_r12[tr]
0156C0 63 DC D0 00 	    sw      r13,TCB_r13[tr]
0156C4 63 EC E0 00 	    sw      r14,TCB_r14[tr]
0156C8 63 FC F0 00 	    sw      r15,TCB_r15[tr]
0156CC 63 0C 01 01 	    sw      r16,TCB_r16[tr]
0156D0 63 1C 11 01 	    sw      r17,TCB_r17[tr]
0156D4 63 2C 21 01 	    sw      r18,TCB_r18[tr]
0156D8 63 3C 31 01 	    sw      r19,TCB_r19[tr]
0156DC 63 4C 41 01 	    sw      r20,TCB_r20[tr]
0156E0 63 5C 51 01 	    sw      r21,TCB_r21[tr]
0156E4 63 6C 61 01 	    sw      r22,TCB_r22[tr]
0156E8 63 7C 71 01 	    sw      r23,TCB_r23[tr]
0156EC 63 8C 81 01 	    sw      r24,TCB_r24[tr]  ; not really necessary since we are going to reload it later
0156F0 63 9C 91 01 	    sw      r25,TCB_r25[tr]
0156F4 63 AC A1 01 	    sw      r26,TCB_r26[tr]
0156F8 63 BC B1 01 	    sw      r27,TCB_r27[tr]
0156FC 63 CC C1 01 	    sw      r28,TCB_r28[tr]
015700 63 DC D1 01 	    sw      r29,TCB_r29[tr]
015704 02 10 1E 3E 	    mfspr   r1,isp           ; the interrupt placed the SP into this register
015708 63 1C 30 03 	    sw      r1,TCB_ISP[tr]
01570C 02 10 20 3E 	    mfspr   r1,dsp
015710 63 1C 40 03 	    sw      r1,TCB_DSP[tr]
015714 02 10 22 3E 	    mfspr   r1,esp
015718 63 1C 50 03 	    sw      r1,TCB_ESP[tr]
01571C 63 FC F1 01 	    sw      r31,TCB_r31[tr]
015720 02 10 10 3E 	    mfspr   r1,ipc
015724 63 1C 00 03 	    sw      r1,TCB_IPC[tr]
015728 02 10 0E 3E 	    mfspr   r1,dpc
01572C 63 1C 10 03 	    sw      r1,TCB_DPC[tr]
015730 02 10 12 3E 	    mfspr   r1,epc
015734 63 1C 20 03 	    sw      r1,TCB_EPC[tr]
015738 02 10 00 3E 	    mfspr   r1,cr0
01573C 63 1C 60 03 	    sw      r1,TCB_CR0[tr]
                	
015740 02 10 00 6C 		cpuid   r1,r0,#0
015744 BD 10 0E 00 		bne     r1,p100Hz4
015748 7C C0 00 00 		lw		r1,UserTick
01574C 46 10 00 00 
015750 BD 00 08 00 		beq		r1,p100Hz4
015754 E7 EF 01 00 		push    lr
015758 BC F0 01 00 		jsr		[r1]
01575C 57 FF 11 00 		pop     lr
                	p100Hz4:
015760 40 1C 20 04 	    lb      r1,TCB_Status[tr]
015764 8C 10 EE FF 	    and     r1,r1,#~TS_RUNNING
015768 60 1C 20 04 	    sb      r1,TCB_Status[tr]
                	
                		; Check the timeout list to see if there are items ready to be removed from
                		; the list. Also decrement the timeout of the item at the head of the list.
                		; Note the timeout list is checked by each CPU which decrements timeouts,
                		; the resulting decrement rate is 60Hz as each CPU services the interrupt
                		; at a 30Hz rate.
                	p100Hz15:
01576C 7C C0 00 00 		lw		r2,TimeoutList
015770 46 20 20 02 
015774 02 11 60 34 		chk     r1,r2,b48
015778 BD 00 26 00 		beq		r1,p100Hz12				; are there any entries in the timeout list ?
01577C 46 11 F0 04 		lw		r1,TCB_Timeout[r2]
015780 BD 10 12 00 		bne		r1,p100Hz14				; has this entry timed out ?
                	p100Hz1:
015784 E7 EF 01 00 		push    lr
015788 39 90 FE FF 		bsr     PopTimeoutList
01578C B9 3A FE FF 		bsr		AddTaskToReadyList
015790 57 FF 11 00 		pop     lr
015794 3A FB FF FF 		bra		p100Hz15				; go back and see if there's another task to be removed
                										; there could be a string of tasks to make ready.
                	p100Hz_missed_tick:
015798 7C C0 00 00 	    inc     missed_ticks
01579C 64 10 80 02 
0157A0 BA 04 00 00 	    bra     p100Hz12
                	
                	p100Hz14:
0157A4 95 10 02 00 		subui   r1,r1,#1				; decrement the entry's timeout
0157A8 7C C0 00 00 		lw      r3,missed_ticks
0157AC 46 30 80 02 
0157B0 82 10 06 2A 		subu	r1,r1,r3        		; account for any missed ticks
0157B4 7C C0 00 00 		sw		r0,missed_ticks
0157B8 63 00 80 02 
0157BC 63 11 F0 04 		sw		r1,TCB_Timeout[r2]
0157C0 BD 50 E2 FF 		ble     r1,p100Hz1
                		
                	p100Hz12:
                		; Falls through into selecting a task to run
                	tck3:
                	
                	;------------------------------------------------------------------------------
                	; Search the ready queues for a ready task.
                	; The search is occasionally started at a lower priority queue in order
                	; to prevent starvation of lower priority tasks. This is managed by 
                	; using a tick count as an index to a string containing the start que.
                	;------------------------------------------------------------------------------
                	;
                	SelectTaskToRun:
0157C4 0A 60 10 00 		ldi		r6,#8			; number of queues to search
0157C8 7C C0 00 00 		lw		r3,IRQFlag		; use the IRQFlag as a buffer index
0157CC 46 30 30 00 
0157D0 8C 31 7E 00 		and		r3,r3,#$3F		; counts from 0 to 31
0157D4 82 31 02 72 		lsr     r3,r3,#1
0157D8 7C 01 00 00 		lb	    r3,strStartQue[r3]	; get the queue to start search at
0157DC C0 31 80 AB 
0157E0 8C 31 0E 00 		and     r3,r3,#7
                	sttr2:
0157E4 82 41 06 70 	    asl     r4,r3,#3
0157E8 7C C0 00 00 		lw		r1,QNdx0[r4]
0157EC 46 12 A0 00 
0157F0 82 50 60 34 		chk     r5,r1,b48
0157F4 BD 02 AC 00 		beq		r5,sttr1
                		; The task could already be running on the other CPU, don't run a running
                		; task.
0157F8 C0 50 20 04 		lb      r5,TCB_Status[r1]
0157FC 8C 72 10 00 		and     r7,r5,#TS_RUNNING
015800 BD 13 D0 00 		bne     r7,sttr9
                	sttr10:
015804 C6 10 00 04 		lw		r1,TCB_NextRdy[r1]		; Advance the queue index
                		; Task control blocks are aligned on 1kB boundaries. Address ends in "$00"
                	    ; Check and make sure this is the case. This should catch most bad pointers.
015808 82 70 60 34 	    chk     r7,r1,b48
01580C BD 03 D8 00 	    beq     r7,sttr_badtask
                		; Probably got a valid pointer...
                		; CPU #0 can run any task, CPU #1 can only run tasks associated with it as
                		; it has no I/O. -- for the moment
015810 02 70 00 6C 		cpuid   r7,r0,#0
                	;	beq     r7,sttr5
015814 C1 80 00 05 		lbu     r8,TCB_Affinity[r1]
015818 82 73 10 0C 		cmp     r7,r7,r8
01581C BD 13 98 00 		bne     r7,sttr1
                	sttr5:
                		; This is the only place the RunningTCB is set (except for initialization).
015820 7C C0 00 00 		sw		r1,QNdx0[r4]
015824 63 12 A0 00 
015828 82 80 01 1A 		mov     tr,r1
01582C 40 1C 20 04 		lb      r1,TCB_Status[tr]
015830 8D 10 10 00 		or      r1,r1,#TS_RUNNING    ; flag the task as the running task
015834 60 1C 20 04 		sb      r1,TCB_Status[tr]
                		; Only CPU #0 has access to I/O, so check for an I/O focus switch only
                		; on CPU #0.
015838 02 10 00 6C 		cpuid   r1,r0,#0
01583C BD 10 28 00 		bne     r1,sttr6
015840 7C C0 00 00 		lw		r1,iof_switch		
015844 46 10 00 03 
015848 BD 00 22 00 		beq		r1,sttr6				
01584C 7C C0 00 00 		lwar	r1,iof_sema		; just ignore the request to switch
015850 5C 10 F0 03 
015854 BD 10 76 00 		bne		r1,sttr7		; I/O focus if the semaphore can't be aquired
015858 7C C0 00 00 		swcr    tr,iof_sema
01585C 6E 80 F1 03 
015860 02 10 00 3E 		mfspr   r1,cr0
015864 7C 00 00 10 		and     r1,r1,#$1000000000
015868 8C 10 00 00 
01586C BD 00 10 00 		beq     r1,sttr6
015870 7C C0 00 00 		sw		r0,iof_switch
015874 63 00 00 03 
015878 E7 EF 01 00 		push    lr
01587C B9 47 00 00 		bsr		SwitchIOFocus
015880 57 FF 11 00 		pop     lr
015884 7C C0 00 00 		sw		r0,iof_sema
015888 63 00 F0 03 
                		; Restore the task context
                	sttr6:
01588C 46 1C 60 03 	    lw      r1,TCB_CR0[tr]
015890 82 00 00 3C 	    mtspr   cr0,r1
015894 46 1C 20 03 	    lw      r1,TCB_EPC[tr]
015898 82 00 12 3C 	    mtspr   epc,r1
01589C 46 1C 10 03 	    lw      r1,TCB_DPC[tr]
0158A0 82 00 0E 3C 	    mtspr   dpc,r1
0158A4 46 1C 00 03 	    lw      r1,TCB_IPC[tr]
0158A8 82 00 10 3C 	    mtspr   ipc,r1
0158AC 46 FC F1 01 	    lw      r31,TCB_r31[tr]
0158B0 46 1C 50 03 	    lw      r1,TCB_ESP[tr]
0158B4 82 00 22 3C 	    mtspr   esp,r1
0158B8 46 1C 40 03 	    lw      r1,TCB_DSP[tr]
0158BC 82 00 20 3C 	    mtspr   dsp,r1
0158C0 46 1C 30 03 	    lw      r1,TCB_ISP[tr]
0158C4 82 00 1E 3C 	    mtspr   isp,r1
0158C8 46 DC D1 01 	    lw      r29,TCB_r29[tr]
0158CC 46 CC C1 01 	    lw      r28,TCB_r28[tr]
0158D0 46 BC B1 01 	    lw      r27,TCB_r27[tr]
0158D4 46 AC A1 01 	    lw      r26,TCB_r26[tr]
0158D8 46 9C 91 01 	    lw      r25,TCB_r25[tr]
                	;   lw      r24,TCB_r24[tr]    ; r24 is the task register - no need to load
0158DC 46 7C 71 01 	    lw      r23,TCB_r23[tr]
0158E0 46 6C 61 01 	    lw      r22,TCB_r22[tr]
0158E4 46 5C 51 01 	    lw      r21,TCB_r21[tr]
0158E8 46 4C 41 01 	    lw      r20,TCB_r20[tr]
0158EC 46 3C 31 01 	    lw      r19,TCB_r19[tr]
0158F0 46 2C 21 01 	    lw      r18,TCB_r18[tr]
0158F4 46 1C 11 01 	    lw      r17,TCB_r17[tr]
0158F8 46 0C 01 01 	    lw      r16,TCB_r16[tr]
0158FC 46 FC F0 00 	    lw      r15,TCB_r15[tr]
015900 46 EC E0 00 	    lw      r14,TCB_r14[tr]
015904 46 DC D0 00 	    lw      r13,TCB_r13[tr]
015908 46 CC C0 00 	    lw      r12,TCB_r12[tr]
01590C 46 BC B0 00 	    lw      r11,TCB_r11[tr]
015910 46 AC A0 00 	    lw      r10,TCB_r10[tr]
015914 46 9C 90 00 	    lw      r9,TCB_r9[tr]
015918 46 8C 80 00 	    lw      r8,TCB_r8[tr]
01591C 46 7C 70 00 	    lw      r7,TCB_r7[tr]
015920 46 6C 60 00 	    lw      r6,TCB_r6[tr]
015924 46 5C 50 00 	    lw      r5,TCB_r5[tr]
015928 46 4C 40 00 	    lw      r4,TCB_r4[tr]
01592C 46 3C 30 00 	    lw      r3,TCB_r3[tr]
015930 46 2C 20 00 	    lw      r2,TCB_r2[tr]
015934 46 1C 10 00 	    lw      r1,TCB_r1[tr]
015938 B9 7E FD FF 	    bsr     UnlockSYS
01593C 02 E0 3F 6E 		rti
                	sttr7:
015940 7C C0 00 00 	    swcr    r1,iof_sema
015944 6E 10 F0 03 
015948 BA E8 FF FF 	    bra     sttr6
                	
                		; Set index to check the next ready list for a task to run
                	sttr1:
01594C 94 31 02 00 		addui   r3,r3,#1
015950 8C 31 0E 00 		and     r3,r3,#7     ; count moduluo 8
015954 15 63 02 00 		subui   r6,r6,#1
015958 3D 33 46 FF 		bge		r6,sttr2
                	 
                		; Here there were no tasks ready
                		; This should not be able to happen, so hang the machine (in a lower
                		; power mode).
                		; For now just go back to running whatever was running in the first place.
                		; Something had to be running sucessfully before the interrupt; return to
                	    ; it.
01595C 3A E6 FF FF 	    bra     sttr6
                	sttr3:
015960 02 10 00 6C 		cpuid   r1,r0,#0
                	sttr8:
015964 BD 10 00 00 		bne     r1,sttr8
015968 E7 EF 01 00 		push    lr
01596C 39 0F 00 00 		bsr		kernel_panic
015970 4E 6F 20 74 		db		"No tasks in ready queue.",0
015974 61 73 6B 73 
015978 20 69 6E 20 
01597C 72 65 61 64 
015980 79 20 71 75 
015984 65 75 65 2E 
015988 00          
015989 00 00 00 B9 		bsr     DumpTaskList
01598D CA FD FF    
015990 57 FF 11 00 		pop     lr
                		; Might as well power down the clock and wait for a reset or
                		; NMI. In the case of an NMI the kernel is reinitialized without
                		; doing the boot reset.
015994 02 00 04 6E 		stp								
015998 7C 00 00 00 		jmp		FMTKInitialize
01599C 3C 00 0E A0 
                	
                	    ; We found a running task at the head of a ready queue. Check for a next
                	    ; ready task.
                	sttr9:
                	    ; If the next ready task is just the running one, then go check the next
                	    ; queue.
0159A0 C6 70 00 04 	    lw      r7,TCB_NextRdy[r1]
0159A4 BD 03 D4 FF 	    beq     r7,sttr1            ; NULL pointer ?
0159A8 82 70 0E 0C 	    cmp     r7,r1,r7
0159AC BD 03 D0 FF 	    beq     r7,sttr1            ; Running = next
                	    ; Assume there aren't two running tasks (there shouldn't be)
0159B0 82 70 30 0C 	    cmp     r7,r1,tr            ; skip over outgoing task
0159B4 BD 03 CC FF 	    beq     r7,sttr1    
0159B8 BA C9 FF FF 	    bra     sttr10
                	    ;
                	    
                	sttr_badtask:
0159BC 02 10 00 6C 		cpuid   r1,r0,#0
0159C0 BD 10 C6 FF 		bne     r1,sttr1
0159C4 39 04 00 00 	    bsr     kernel_panic
0159C8 42 61 64 20 	    db      "Bad task on ready list.",0
0159CC 74 61 73 6B 
0159D0 20 6F 6E 20 
0159D4 72 65 61 64 
0159D8 79 20 6C 69 
0159DC 73 74 2E 00 
0159E0 BA ED FF FF 	    bra     sttr1
                	
                	;------------------------------------------------------------------------------
                	; kernal_panic:
                	;	All this does right now is display the panic message on the screen.
                	; Parameters:
                	;	inline: string
                	;------------------------------------------------------------------------------
                	;
                	kernel_panic:
0159E4 E7 E0 01 00 	    push    r1
                	kpan2:
0159E8 C1 1F 00 00 		lbu	    r1,[lr]		; get a byte from the code space
0159EC BD 00 0C 00 		beq		r1,kpan1		; is it end of string ?
0159F0 94 FF 03 00 		addui	lr,lr,#1	; increment pointer
0159F4 E7 EF 01 00 		push    lr
0159F8 B9 81 F7 FF 		bsr		OutChar
0159FC 57 FF 11 00 		pop     lr
015A00 3A FD FF FF 		bra		kpan2
                	kpan1:
015A04 E7 EF 01 00 	    push    lr   		; must update the return address !
015A08 B9 11 F6 FF 		bsr		CRLF
015A0C 57 FF 11 00 		pop     lr
015A10 57 1F 10 00 		pop     r1
015A14 94 FF 07 00 		addui   lr,lr,#3    ; round the link register to the next instruction address
015A18 8C FF F9 FF 		and     lr,lr,#-4
015A1C 37 FF 01 00 		rtl

                	
                	; ============================================================================
                	; iofocus.s
                	;        __
                	;   \\__/ o\    (C) 2014, 2015  Robert Finch, Stratford
                	;    \  __ /    All rights reserved.
                	;     \/_//     robfinch<remove>@finitron.ca
                	;       ||
                	;  
                	;
                	; This source file is free software: you can redistribute it and/or modify 
                	; it under the terms of the GNU Lesser General Public License as published 
                	; by the Free Software Foundation, either version 3 of the License, or     
                	; (at your option) any later version.                                      
                	;                                                                          
                	; This source file is distributed in the hope that it will be useful,      
                	; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                	; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                	; GNU General Public License for more details.                             
                	;                                                                          
                	; You should have received a copy of the GNU General Public License        
                	; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                	;
                	; iofocus.s
                	; ============================================================================
                	
                	LockIOF:
015A20 E7 EF 01 00 	    push    lr
015A24 E7 E0 01 00 	    push    r1
015A28 7C C0 00 00 	    ldi     r1,#iof_sema
015A2C 0A 10 F0 03 
015A30 39 63 FD FF 	    bsr     LockSema
015A34 57 1F 10 00 	    pop     r1
015A38 3B FF 11 00 	    rts
UnlockIOF:
015A3C E7 EF 01 00 	     push   lr
015A40 E7 E0 01 00 	     push   r1
015A44 7C C0 00 00 	     lea    r1,iof_sema
015A48 47 10 F0 03 
015A4C B9 66 FD FF 	     bsr    UnlockSema
015A50 57 1F 10 00 	     pop    r1
015A54 3B FF 11 00 	     rts

                	;------------------------------------------------------------------------------
                	; ForceIOFocus
                	;
                	; Force the IO focus to a specific job.
                	;------------------------------------------------------------------------------
                	;
                	ForceIOFocus:
015A58 E7 EF 01 00 	    push    lr
015A5C E7 E0 01 00 		push    r1
015A60 67 E1 01 00 	    push    r2
015A64 E7 E1 01 00 	    push    r3 
015A68 39 F7 FF FF 	    bsr     LockIOF
015A6C 7C C0 00 00 		lw		r3,IOFocusNdx
015A70 46 30 50 00 
015A74 82 20 06 0C 		cmp		r2,r1,r3
015A78 3D 01 16 00 		beq		r2,fif1
015A7C 82 20 00 1A 		mov     r2,r1
015A80 39 5B 00 00 		bsr		CopyScreenToVirtualScreen
015A84 C6 11 F0 07 		lw		r1,JCB_pVirtVid[r3]
015A88 E3 11 D0 07 		sw		r1,JCB_pVidMem[r3]
015A8C 7C C0 00 00 		sw		r2,IOFocusNdx
015A90 63 20 50 00 
015A94 7C D0 FF 00 		ldi		r1,#TEXTSCR
015A98 0A 10 00 00 
015A9C 63 11 D0 07 		sw		r1,JCB_pVidMem[r2]
015AA0 39 48 00 00 		bsr		CopyVirtualScreenToScreen
                	fif1:
015AA4 39 F3 FF FF 		bsr     UnlockIOF
015AA8 57 3F 10 00 		pop     r3
015AAC 57 2F 10 00 		pop     r2
015AB0 57 1F 10 00 		pop     r1
015AB4 3B FF 11 00 		rts
	
                	;------------------------------------------------------------------------------
                	; SwitchIOFocus
                	;
                	; Switches the IO focus to the next task requesting the I/O focus. This
                	; routine may be called when a task releases the I/O focus as well as when
                	; the user presses ALT-TAB on the keyboard.
                	; On Entry: the io focus semaphore is set already.
                	;------------------------------------------------------------------------------
                	;
                	SwitchIOFocus:
015AB8 E7 EF 01 00 	    push    lr
015ABC E7 E0 01 00 	    push    r1
015AC0 67 E1 01 00 	    push    r2
015AC4 E7 E1 01 00 	    push    r3
                	
                		; First check if it's even possible to switch the focus to another
                		; task. The I/O focus list could be empty or there may be only a
                		; single task in the list. In either case it's not possible to
                		; switch.
015AC8 39 EB FF FF 		bsr     LockIOF
015ACC 7C C0 00 00 		lw		r3,IOFocusNdx		; Get the job at the head of the list.
015AD0 46 30 50 00 
015AD4 BD 01 18 00 		beq	    r3,siof3			; Is the list empty ?
015AD8 C6 21 50 08 		lw		r2,JCB_iof_next[r3]	; Get the next job on the list.
015ADC 3D 01 14 00 		beq		r2,siof3			; Nothing to switch to
                	
                		; Copy the current task's screen to it's virtual screen buffer.
015AE0 39 4F 00 00 		bsr		CopyScreenToVirtualScreen
015AE4 C6 11 F0 07 		lw		r1,JCB_pVirtVid[r3]
015AE8 E3 11 D0 07 		sw		r1,JCB_pVidMem[r3]
                	
015AEC 7C C0 00 00 		sw		r2,IOFocusNdx		; Make task the new head of list.
015AF0 63 20 50 00 
015AF4 7C D0 FF 00 		ldi		r1,#TEXTSCR
015AF8 0A 10 00 00 
015AFC 63 11 D0 07 		sw		r1,JCB_pVidMem[r2]
                	
                		; Copy the virtual screen of the task recieving the I/O focus to the
                		; text screen.
015B00 39 3C 00 00 		bsr		CopyVirtualScreenToScreen
                	siof3:
015B04 39 E7 FF FF 	    bsr     UnlockIOF
015B08 57 3F 10 00 		pop     r3
015B0C 57 2F 10 00 		pop     r2
015B10 57 1F 10 00 		pop     r1
015B14 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; The I/O focus list is an array indicating which jobs are requesting the
                	; I/O focus. The I/O focus is user controlled by pressing ALT-TAB on the
                	; keyboard.
                	;------------------------------------------------------------------------------
                	
                	RequestIOFocus:
015B18 E7 EF 01 00 	    push    lr
015B1C E7 E0 01 00 	    push    r1
015B20 67 E1 01 00 	    push    r2
015B24 E7 E1 01 00 	    push    r3
015B28 67 E2 01 00 		push	r4
015B2C E7 E2 01 00 		push    r5
                	;	DisTmrKbd
015B30 40 2C 28 04 		lb	    r2,TCB_hJCB[tr]
015B34 02 11 00 1A 		mov     r1,r2
015B38 17 21 00 0A 		mulu    r2,r2,#JCB_Size
015B3C 7C C5 00 00 	    addui   r1,r1,#JCB_Array
015B40 94 10 00 00 
015B44 82 30 0C 72 		lsr     r3,r1,#6           ; r3 = word index into IO focus table
015B48 39 DB FF FF 		bsr     LockIOF
015B4C 7C C0 00 00 		lw      r4,IOFocusTbl[r3]  ; r4 = word from IO focus table
015B50 C6 41 60 00 
015B54 8C 30 7E 00 		and     r3,r1,#$3F         ; r3 = bit number in word
015B58 82 50 06 62 		lsr     r5,r1,r3           ; extract bit into r5
015B5C 8C 52 02 00 		and     r5,r5,#1           ; mask off extra bits
015B60 BD 12 2E 00 		bne     r5,riof1           ; is the job already in the IO focus list ?
015B64 7C C0 00 00 		lw		r1,IOFocusNdx	   ; Is the focus list empty ?
015B68 46 10 50 00 
015B6C BD 00 36 00 		beq		r1,riof2
015B70 C6 30 60 08 		lw		r3,JCB_iof_prev[r1]
015B74 BD 01 3C 00 		beq		r3,riof4
015B78 E3 20 60 08 		sw		r2,JCB_iof_prev[r1]
015B7C 63 11 50 08 		sw		r1,JCB_iof_next[r2]
015B80 63 31 60 08 		sw		r3,JCB_iof_prev[r2]
015B84 E3 21 50 08 		sw		r2,JCB_iof_next[r3]
                	riof3:
015B88 02 11 00 1A 	    mov     r1,r2
015B8C 7C C5 00 00 		subui   r1,r1,#JCB_Array
015B90 95 10 00 00 
015B94 98 10 00 0A 		divu    r1,r1,#JCB_Size    ; r1 = index into JCB array
015B98 82 30 0C 72 		lsr     r3,r1,#6           ; r3 = word index into IO focus table
015B9C 7C C0 00 00 		lw      r4,IOFocusTbl[r3]  ; r4 = word from IO focus table
015BA0 C6 41 60 00 
015BA4 8C 20 7E 00 		and     r2,r1,#$3F         ; r2 = bit number in word
015BA8 0A 50 02 00 		ldi     r5,#1              ; r5 = 1 bit to insert
015BAC 82 52 04 60 		asl     r5,r5,r2           ; r5 shifted into place
015BB0 82 52 08 1A 		or      r5,r5,r4           ; insert bit
015BB4 7C C0 00 00 		sw      r5,IOFocusTbl[r3]  ; store word back to IO focus table
015BB8 E3 51 60 00 
                	riof1:
                	;	EnTmrKbd4
015BBC 39 D0 FF FF 	    bsr     UnlockIOF
015BC0 57 5F 10 00 	    pop     r5
015BC4 57 4F 10 00 		pop		r4
015BC8 57 3F 10 00 		pop     r3
015BCC 57 2F 10 00 		pop     r2
015BD0 57 1F 10 00 		pop     r1
015BD4 37 FF 01 00 		rtl

                		; Here, the IO focus list was empty. So expand it.
                		; Make sure pointers are NULL
                	riof2:
015BD8 7C C0 00 00 		sw		r2,IOFocusNdx
015BDC 63 20 50 00 
015BE0 63 01 50 08 		sw		r0,JCB_iof_next[r2]
015BE4 63 01 60 08 		sw		r0,JCB_iof_prev[r2]
015BE8 3A F4 FF FF 		bra		riof3
                	
                		; Here there was only a single entry in the list.
                		; Setup pointers appropriately.
                	riof4:
015BEC 63 11 50 08 		sw		r1,JCB_iof_next[r2]
015BF0 63 11 60 08 		sw		r1,JCB_iof_prev[r2]
015BF4 E3 20 50 08 		sw		r2,JCB_iof_next[r1]
015BF8 E3 20 60 08 		st		r2,JCB_iof_prev[r1]
015BFC BA F1 FF FF 		bra		riof3
                	
                	;------------------------------------------------------------------------------
                	; Releasing the I/O focus causes the focus to switch if the running job
                	; had the I/O focus.
                	; ForceReleaseIOFocus forces the release of the IO focus for a job
                	; different than the one currently running.
                	;------------------------------------------------------------------------------
                	
                	ForceReleaseIOFocus:
015C00 E7 EF 01 00 	    push    lr
015C04 E7 E0 01 00 		push    r1
015C08 67 E1 01 00 		push    r2
015C0C E7 E1 01 00 		push    r3
015C10 67 E2 01 00 		push	r4
015C14 E7 E2 01 00 		push    r5
015C18 02 11 00 1A 		mov     r1,r2
                	;	DisTmrKbd
015C1C 3A 05 00 00 		bra		rliof4  ; wedge into ReleaseIOFocus
                	
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	message "ReleaseIOFocus"	
                	ReleaseIOFocus:
015C20 E7 EF 01 00 	    push    lr
015C24 E7 E0 01 00 		push    r1
015C28 67 E1 01 00 		push    r2
015C2C E7 E1 01 00 		push    r3
015C30 67 E2 01 00 		push	r4
015C34 E7 E2 01 00 		push    r5
                	;	DisTmrKbd
015C38 41 2C 28 04 		lbu	    r2,TCB_hJCB[tr]
015C3C 16 11 66 00 		cmpu    r1,r2,#NR_JCB
015C40 BD 30 FC 53 		bge     r1,rliof6
                	rliof4:
015C44 02 11 00 1A 		mov     r1,r2
015C48 17 21 00 0A 		mulu    r2,r2,#JCB_Size
015C4C 7C C5 00 00 		addui   r1,r1,#JCB_Array   ; r2 = pointer to JCB
015C50 94 10 00 00 
015C54 82 30 0C 72 		lsr     r3,r1,#6           ; r3 = word index into IO focus table
015C58 39 B9 FF FF 		bsr     LockIOF
015C5C 7C C0 00 00 		lw      r4,IOFocusTbl[r3]  ; r4 = word from IO focus table
015C60 C6 41 60 00 
015C64 8C 30 7E 00 		and     r3,r1,#$3F         ; r3 = bit number in word
015C68 02 52 06 62 		lsr     r5,r4,r3           ; extract bit into r5
015C6C 8C 52 02 00 		and     r5,r5,#1           ; mask off extra bits
015C70 BD 02 2A 00 		beq		r5,rliof3          ; nothing to do (not in table)
015C74 02 42 06 66 		ror     r4,r4,r3
015C78 0C 42 FC FF 		and     r4,r4,#-2          ; mask off LSB
015C7C 02 42 06 64 		rol     r4,r4,r3           ; back in position
015C80 7C C0 00 00 		sw		r4,IOFocusTbl
015C84 63 40 60 00 
015C88 7C C0 00 00 		lw      r5,IOFocusNdx	; Does the running job have the I/O focus ?
015C8C 46 50 50 00 
015C90 02 51 0A 0C 		cmp		r5,r2,r5
015C94 BD 12 04 00 		bne		r5,rliof1
015C98 39 C4 FF FF 		bsr		SwitchIOFocus	; If so, then switch the focus.
                	rliof1:
015C9C 46 11 50 08 		lw		r1,JCB_iof_next[r2]	; get next and previous fields.
015CA0 BD 00 0A 00 		beq		r1,rliof5			; Is list emptying ?
015CA4 46 31 60 08 		lw		r3,JCB_iof_prev[r2]
015CA8 E3 11 50 08 		sw		r1,JCB_iof_next[r3]	; prev->next = current->next
015CAC E3 30 60 08 		sw	    r3,JCB_iof_prev[r1]	; next->prev = current->prev
015CB0 BA 01 00 00 		bra		rliof2
                	rliof5:
015CB4 7C C0 00 00 		sw		r0,IOFocusNdx		; emptied.
015CB8 63 00 50 00 
                	rliof2:
015CBC 63 01 50 08 		sw		r0,JCB_iof_next[r2]	; Update the next and prev fields to indicate
015CC0 63 01 60 08 		sw		r0,JCB_iof_prev[r2]	; the job is no longer on the list.
                	rliof3:
                	;	EnTmrKbd
015CC4 39 AF FF FF 	    bsr     UnlockIOF
                	rlifo6:
015CC8 57 5F 10 00 	    pop     r5
015CCC 57 4F 10 00 		pop		r4
015CD0 57 3F 10 00 		pop     r3
015CD4 57 2F 10 00 		pop     r2
015CD8 57 1F 10 00 		pop     r1
015CDC 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	message "CopyVirtualScreenToScreen"
                	CopyVirtualScreenToScreen
015CE0 E7 E0 01 00 	    push    r1
015CE4 67 E1 01 00 	    push    r2
015CE8 E7 E1 01 00 	    push    r3
015CEC 67 E2 01 00 		push	r4
015CF0 7C C0 00 00 		lw		r2,IOFocusNdx		; compute virtual screen location
015CF4 46 20 50 00 
015CF8 3D 01 12 00 		beq		r2,cvss3
                		; copy screen chars
015CFC 0A 10 FE 1F 		ldi		r1,#4095			; number of words to copy-1
015D00 46 21 F0 07 		lw		r2,JCB_pVirtVid[r2]
015D04 7C D0 FF 00 		ldi		r3,#TEXTSCR
015D08 0A 30 00 00 
                	.0001:
015D0C 4C 41 82 00 		lh      r4,[r2+r1*4]       ; from virtual
015D10 EA 41 82 00 		sh      r4,[r3+r1*4]       ; to screen
015D14 95 10 02 00 		subui   r1,r1,#1
015D18 BD 30 FA FF 		bge     r1,.0001
                	cvss3:
                		; reset the cursor position in the text controller
015D1C 7C C0 00 00 		lw		r3,IOFocusNdx
015D20 46 30 50 00 
015D24 C0 21 18 08 		lb		r2,JCB_CursorRow[r3]
015D28 7C DA FF 00 		ldi		r1,(TEXTREG+TEXT_COLS)|$FFD00000
015D2C 0A 10 00 00 
015D30 02 21 02 2E 		mulu	r2,r2,r1
015D34 C0 41 1A 08 		lb      r4,JCB_CursorCol[r3]
015D38 02 21 08 08 		add		r2,r2,r4
015D3C 7C DA FF 00 		sc		r2,(TEXTREG+TEXT_CURPOS)|$FFD00000
015D40 61 20 58 00 
015D44 57 4F 10 00 		pop		r4
015D48 57 3F 10 00 		pop     r3
015D4C 57 2F 10 00 		pop     r2
015D50 57 1F 10 00 		pop     r1
015D54 37 FF 01 00 		rtl
message "CopyScreenToVirtualScreen"
                	CopyScreenToVirtualScreen
015D58 E7 E0 01 00 	    push    r1
015D5C 67 E1 01 00 	    push    r2
015D60 E7 E1 01 00 	    push    r3
015D64 67 E2 01 00 		push	r4
015D68 0A 10 FE 1F 		ldi		r1,#4095
015D6C 7C D0 FF 00 		ldi		r2,#TEXTSCR
015D70 0A 20 00 00 
015D74 7C C0 00 00 		lw		r3,IOFocusNdx
015D78 46 30 50 00 
015D7C BD 01 0C 00 		beq		r3,csvs3
015D80 C6 31 F0 07 		lw		r3,JCB_pVirtVid[r3]
                	.0001:
015D84 4C 41 82 00 		lh      r4,[r2+r1*4]
015D88 EA 41 82 00 		sh      r4,[r3+r1*4]
015D8C 95 10 02 00 		subui   r1,r1,#1
015D90 BD 30 FA FF 		bge     r1,.0001
                	csvs3:
015D94 57 4F 10 00 		pop		r4
015D98 57 3F 10 00 		pop     r3
015D9C 57 2F 10 00 		pop     r2
015DA0 57 1F 10 00 		pop     r1
015DA4 37 FF 01 00 		rtl

                	
                		code
015DA8 00 00 00 00 		align	1
015DAC 00 00 00 00 
                	
                	public code putch:
015DB0 15 EF 21 00 		      	subui	sp,sp,#16
015DB4 E7 ED 01 00 		      	push 	bp
015DB8 02 BF 01 1A 		      	mov  	bp,sp
015DBC 67 E3 01 00 		      	     	        push    r6
015DC0 C6 1D 30 00 			lw		r1,24[bp]
015DC4 0A 60 1C 00 			ldi     r6,#14    ; Teletype output function
015DC8 38 0F 34 03 	        sys     #410      ; Video BIOS call
015DCC 57 6F 10 00 	        pop     r6
                		
                	stdio_1:
015DD0 82 ED 01 1A 		      	mov  	sp,bp
015DD4 57 BF 11 00 		      	pop  	bp
015DD8 37 FF 31 00 		      	rtl  	#24
                	endpublic
                	
                	public code putnum:
015DDC E7 EF 01 00 		      	push 	lr
015DE0 67 EE 01 00 		      	push 	xlr
015DE4 E7 ED 01 00 		      	push 	bp
015DE8 7C 01 00 00 		      	ldi  	xlr,#stdio_3
015DEC 0A C0 D1 BE 
015DF0 02 BF 01 1A 		      	mov  	bp,sp
015DF4 15 EF 81 00 		      	subui	sp,sp,#64
015DF8 E7 E5 01 00 		      	push 	r11
015DFC C7 3D 8C FF 		      	lea  	r3,-58[bp]
015E00 82 B1 00 1A 		      	mov  	r11,r3
015E04 C6 3D 40 00 		      	lw   	r3,32[bp]
015E08 BD 41 08 00 		      	blt  	r3,stdio_6
015E0C C6 3D 40 00 		      	lw   	r3,32[bp]
015E10 86 31 90 01 		      	cmp  	r3,r3,#200
015E14 BD 51 04 00 		      	ble  	r3,stdio_4
                	stdio_6:
015E18 E3 0D 40 00 		      	sw   	r0,32[bp]
                	stdio_4:
015E1C C6 3D 30 00 		      	lw   	r3,24[bp]
015E20 BD 31 06 00 		      	bge  	r3,stdio_7
015E24 0A 30 5A 00 		      	ldi  	r3,#45
015E28 BA 01 00 00 		      	bra  	stdio_8
                	stdio_7:
015E2C 0A 40 56 00 		      	ldi  	r4,#43
015E30 02 32 00 1A 		      	mov  	r3,r4
                	stdio_8:
015E34 E1 3D DC FF 		      	sc   	r3,-18[bp]
015E38 C6 3D 30 00 		      	lw   	r3,24[bp]
015E3C BD 31 08 00 		      	bge  	r3,stdio_9
015E40 C6 3D 30 00 		      	lw   	r3,24[bp]
015E44 02 30 06 2A 		      	neg  	r3,r3
015E48 E3 3D 30 00 		      	sw   	r3,24[bp]
                	stdio_9:
015E4C E3 0D F0 FF 		      	sw   	r0,-8[bp]
                	stdio_11:
015E50 C6 3D F0 FF 		      	lw   	r3,-8[bp]
015E54 8C 31 06 00 		      	and  	r3,r3,#3
015E58 86 31 06 00 		      	cmp  	r3,r3,#3
015E5C BD 11 12 00 		      	bne  	r3,stdio_13
015E60 C3 3D 50 00 		      	lcu  	r3,40[bp]
015E64 82 31 00 22 		      	sxc  	r3,r3
015E68 BD 01 0C 00 		      	beq  	r3,stdio_13
015E6C C6 3D F0 FF 		      	lw   	r3,-8[bp]
015E70 82 31 02 70 		      	asli 	r3,r3,#1
015E74 C3 4D 50 00 		      	lcu  	r4,40[bp]
015E78 E9 45 06 00 		      	sc   	r4,0[r11+r3]
015E7C E4 1D F0 FF 		      	inc  	-8[bp],#1
                	stdio_13:
015E80 C6 3D 30 00 		      	lw   	r3,24[bp]
015E84 89 31 14 00 		      	mod  	r3,r3,#10
015E88 E3 3D E0 FF 		      	sw   	r3,-16[bp]
015E8C C6 3D E0 FF 		      	lw   	r3,-16[bp]
015E90 86 31 12 00 		      	cmp  	r3,r3,#9
015E94 BD 21 06 00 		      	bgt  	r3,stdio_17
015E98 C6 3D E0 FF 		      	lw   	r3,-16[bp]
015E9C BD 31 0A 00 		      	bge  	r3,stdio_15
                	stdio_17:
015EA0 FC 01 00 00 		      	push 	#stdio_2
015EA4 65 E0 01 40 
015EA8 B9 6D 00 00 		      	bsr  	printf
015EAC 14 EF 11 00 		      	addui	sp,sp,#8
                	stdio_15:
015EB0 C6 3D E0 FF 		      	lw   	r3,-16[bp]
015EB4 94 31 60 00 		      	addu 	r3,r3,#48
015EB8 C6 4D F0 FF 		      	lw   	r4,-8[bp]
015EBC 02 42 02 70 		      	asli 	r4,r4,#1
015EC0 E9 35 08 00 		      	sc   	r3,0[r11+r4]
015EC4 C6 3D 30 00 		      	lw   	r3,24[bp]
015EC8 88 31 14 00 		      	divs 	r3,r3,#10
015ECC E3 3D 30 00 		      	sw   	r3,24[bp]
015ED0 E4 1D F0 FF 		      	inc  	-8[bp],#1
015ED4 C6 3D 30 00 		      	lw   	r3,24[bp]
015ED8 BD 01 08 00 		      	beq  	r3,stdio_18
015EDC C6 3D F0 FF 		      	lw   	r3,-8[bp]
015EE0 86 31 24 00 		      	cmp  	r3,r3,#18
015EE4 BD 51 B6 FF 		      	ble  	r3,stdio_11
                	stdio_18:
                	stdio_12:
015EE8 C3 3D DC FF 		      	lcu  	r3,-18[bp]
015EEC 86 31 5A 00 		      	cmp  	r3,r3,#45
015EF0 BD 11 0C 00 		      	bne  	r3,stdio_19
015EF4 C6 3D F0 FF 		      	lw   	r3,-8[bp]
015EF8 82 31 02 70 		      	asli 	r3,r3,#1
015EFC C3 4D DC FF 		      	lcu  	r4,-18[bp]
015F00 E9 45 06 00 		      	sc   	r4,0[r11+r3]
015F04 E4 1D F0 FF 		      	inc  	-8[bp],#1
                	stdio_19:
                	stdio_21:
015F08 C6 3D F0 FF 		      	lw   	r3,-8[bp]
015F0C C6 4D 40 00 		      	lw   	r4,32[bp]
015F10 82 31 08 0C 		      	cmp  	r3,r3,r4
015F14 BD 31 0C 00 		      	bge  	r3,stdio_22
015F18 C3 3D 60 00 		      	lcu  	r3,48[bp]
015F1C E7 E1 01 00 		      	push 	r3
015F20 39 D2 FF FF 		      	bsr  	putch
                	stdio_23:
015F24 E4 FD 41 00 		      	dec  	32[bp],#1
015F28 3A FC FF FF 		      	bra  	stdio_21
                	stdio_22:
                	stdio_24:
015F2C C6 3D F0 FF 		      	lw   	r3,-8[bp]
015F30 BD 51 10 00 		      	ble  	r3,stdio_25
015F34 E4 FD F1 FF 		      	dec  	-8[bp],#1
015F38 C6 3D F0 FF 		      	lw   	r3,-8[bp]
015F3C 82 31 02 70 		      	asli 	r3,r3,#1
015F40 CB 35 06 00 		      	lcu  	r3,0[r11+r3]
015F44 E7 E1 01 00 		      	push 	r3
015F48 39 CD FF FF 		      	bsr  	putch
015F4C 3A FC FF FF 		      	bra  	stdio_24
                	stdio_25:
                	stdio_26:
015F50 57 BF 10 00 		      	pop  	r11
015F54 82 ED 01 1A 		      	mov  	sp,bp
015F58 57 BF 11 00 		      	pop  	bp
015F5C 57 CF 11 00 		      	pop  	xlr
015F60 57 FF 11 00 		      	pop  	lr
015F64 37 FF 41 00 		      	rtl  	#32
                	stdio_3:
015F68 C6 FD 11 00 		      	lw   	lr,8[bp]
015F6C E3 FD 21 00 		      	sw   	lr,16[bp]
015F70 3A FC FF FF 		      	bra  	stdio_26
                	endpublic
                	
                	public code puthexnum:
015F74 E7 EF 01 00 		      	push 	lr
015F78 67 EE 01 00 		      	push 	xlr
015F7C E7 ED 01 00 		      	push 	bp
015F80 7C 01 00 00 		      	ldi  	xlr,#stdio_27
015F84 0A C0 C9 C1 
015F88 02 BF 01 1A 		      	mov  	bp,sp
015F8C 15 EF 81 00 		      	subui	sp,sp,#64
015F90 E7 E5 01 00 		      	push 	r11
015F94 C7 3D 8C FF 		      	lea  	r3,-58[bp]
015F98 82 B1 00 1A 		      	mov  	r11,r3
015F9C C6 3D 40 00 		      	lw   	r3,32[bp]
015FA0 BD 41 08 00 		      	blt  	r3,stdio_30
015FA4 C6 3D 40 00 		      	lw   	r3,32[bp]
015FA8 86 31 90 01 		      	cmp  	r3,r3,#200
015FAC BD 51 04 00 		      	ble  	r3,stdio_28
                	stdio_30:
015FB0 E3 0D 40 00 		      	sw   	r0,32[bp]
                	stdio_28:
015FB4 E3 0D F0 FF 		      	sw   	r0,-8[bp]
015FB8 C6 3D 30 00 		      	lw   	r3,24[bp]
015FBC BD 31 06 00 		      	bge  	r3,stdio_31
015FC0 0A 30 5A 00 		      	ldi  	r3,#45
015FC4 BA 01 00 00 		      	bra  	stdio_32
                	stdio_31:
015FC8 0A 40 56 00 		      	ldi  	r4,#43
015FCC 02 32 00 1A 		      	mov  	r3,r4
                	stdio_32:
015FD0 E1 3D DC FF 		      	sc   	r3,-18[bp]
015FD4 C6 3D 30 00 		      	lw   	r3,24[bp]
015FD8 BD 31 08 00 		      	bge  	r3,stdio_33
015FDC C6 3D 30 00 		      	lw   	r3,24[bp]
015FE0 02 30 06 2A 		      	neg  	r3,r3
015FE4 E3 3D 30 00 		      	sw   	r3,24[bp]
                	stdio_33:
                	stdio_35:
015FE8 C6 3D 30 00 		      	lw   	r3,24[bp]
015FEC 8C 31 1E 00 		      	and  	r3,r3,#15
015FF0 E3 3D E0 FF 		      	sw   	r3,-16[bp]
015FF4 C6 3D E0 FF 		      	lw   	r3,-16[bp]
015FF8 86 31 14 00 		      	cmp  	r3,r3,#10
015FFC BD 31 0E 00 		      	bge  	r3,stdio_37
016000 C6 3D E0 FF 		      	lw   	r3,-16[bp]
016004 94 31 60 00 		      	addu 	r3,r3,#48
016008 C6 4D F0 FF 		      	lw   	r4,-8[bp]
01600C 02 42 02 70 		      	asli 	r4,r4,#1
016010 E9 35 08 00 		      	sc   	r3,0[r11+r4]
016014 3A 07 00 00 		      	bra  	stdio_38
                	stdio_37:
016018 C6 3D 50 00 		      	lw   	r3,40[bp]
01601C BD 01 0E 00 		      	beq  	r3,stdio_39
016020 C6 3D E0 FF 		      	lw   	r3,-16[bp]
016024 95 31 92 FF 		      	subu 	r3,r3,#-55
016028 C6 4D F0 FF 		      	lw   	r4,-8[bp]
01602C 02 42 02 70 		      	asli 	r4,r4,#1
016030 E9 35 08 00 		      	sc   	r3,0[r11+r4]
016034 3A 03 00 00 		      	bra  	stdio_40
                	stdio_39:
016038 C6 3D E0 FF 		      	lw   	r3,-16[bp]
01603C 95 31 52 FF 		      	subu 	r3,r3,#-87
016040 C6 4D F0 FF 		      	lw   	r4,-8[bp]
016044 02 42 02 70 		      	asli 	r4,r4,#1
016048 E9 35 08 00 		      	sc   	r3,0[r11+r4]
                	stdio_40:
                	stdio_38:
01604C C6 3D 30 00 		      	lw   	r3,24[bp]
016050 82 31 08 78 		      	asri 	r3,r3,#4
016054 E3 3D 30 00 		      	sw   	r3,24[bp]
016058 E4 1D F0 FF 		      	inc  	-8[bp],#1
01605C C6 3D 30 00 		      	lw   	r3,24[bp]
016060 BD 11 C4 FF 		      	bne  	r3,stdio_35
                	stdio_36:
016064 C3 3D DC FF 		      	lcu  	r3,-18[bp]
016068 86 31 5A 00 		      	cmp  	r3,r3,#45
01606C BD 11 0C 00 		      	bne  	r3,stdio_41
016070 C6 3D F0 FF 		      	lw   	r3,-8[bp]
016074 82 31 02 70 		      	asli 	r3,r3,#1
016078 C3 4D DC FF 		      	lcu  	r4,-18[bp]
01607C E9 45 06 00 		      	sc   	r4,0[r11+r3]
016080 E4 1D F0 FF 		      	inc  	-8[bp],#1
                	stdio_41:
                	stdio_43:
016084 C6 3D F0 FF 		      	lw   	r3,-8[bp]
016088 C6 4D 40 00 		      	lw   	r4,32[bp]
01608C 82 31 08 0C 		      	cmp  	r3,r3,r4
016090 BD 31 0C 00 		      	bge  	r3,stdio_44
016094 C3 3D 60 00 		      	lcu  	r3,48[bp]
016098 E7 E1 01 00 		      	push 	r3
01609C B9 A2 FF FF 		      	bsr  	putch
0160A0 E4 FD 41 00 		      	dec  	32[bp],#1
0160A4 3A FC FF FF 		      	bra  	stdio_43
                	stdio_44:
                	stdio_45:
0160A8 C6 3D F0 FF 		      	lw   	r3,-8[bp]
0160AC BD 51 10 00 		      	ble  	r3,stdio_46
0160B0 E4 FD F1 FF 		      	dec  	-8[bp],#1
0160B4 C6 3D F0 FF 		      	lw   	r3,-8[bp]
0160B8 82 31 02 70 		      	asli 	r3,r3,#1
0160BC CB 35 06 00 		      	lcu  	r3,0[r11+r3]
0160C0 E7 E1 01 00 		      	push 	r3
0160C4 B9 9D FF FF 		      	bsr  	putch
0160C8 3A FC FF FF 		      	bra  	stdio_45
                	stdio_46:
                	stdio_47:
0160CC 57 BF 10 00 		      	pop  	r11
0160D0 82 ED 01 1A 		      	mov  	sp,bp
0160D4 57 BF 11 00 		      	pop  	bp
0160D8 57 CF 11 00 		      	pop  	xlr
0160DC 57 FF 11 00 		      	pop  	lr
0160E0 37 FF 41 00 		      	rtl  	#32
                	stdio_27:
0160E4 C6 FD 11 00 		      	lw   	lr,8[bp]
0160E8 E3 FD 21 00 		      	sw   	lr,16[bp]
0160EC 3A FC FF FF 		      	bra  	stdio_47
                	endpublic
                	
                	public code putstr:
0160F0 E7 EF 01 00 		      	push 	lr
0160F4 67 EE 01 00 		      	push 	xlr
0160F8 E7 ED 01 00 		      	push 	bp
0160FC 7C 01 00 00 		      	ldi  	xlr,#stdio_48
016100 0A C0 D9 C2 
016104 02 BF 01 1A 		      	mov  	bp,sp
016108 15 EF 11 00 		      	subui	sp,sp,#8
01610C E7 E5 01 00 		      	push 	r11
016110 C6 BD 30 00 		      	lw   	r11,24[bp]
016114 E3 BD F0 FF 		      	sw   	r11,-8[bp]
                	stdio_49:
016118 C3 35 00 00 		      	lcu  	r3,[r11]
01611C BD 01 12 00 		      	beq  	r3,stdio_50
016120 C6 3D 40 00 		      	lw   	r3,32[bp]
016124 BD 51 0E 00 		      	ble  	r3,stdio_50
016128 C3 35 00 00 		      	lcu  	r3,[r11]
01612C E7 E1 01 00 		      	push 	r3
016130 39 90 FF FF 		      	bsr  	putch
                	stdio_51:
016134 94 B5 04 00 		      	addui	r11,r11,#2
016138 E4 FD 41 00 		      	dec  	32[bp],#1
01613C BA FB FF FF 		      	bra  	stdio_49
                	stdio_50:
016140 C6 3D F0 FF 		      	lw   	r3,-8[bp]
016144 82 31 02 70 		      	asli 	r3,r3,#1
016148 82 B5 06 2A 		      	subu 	r11,r11,r3
01614C 82 B5 02 72 		      	lsri 	r11,r11,#1
016150 82 15 00 1A 		      	mov  	r1,r11
                	stdio_52:
016154 57 BF 10 00 		      	pop  	r11
016158 82 ED 01 1A 		      	mov  	sp,bp
01615C 57 BF 11 00 		      	pop  	bp
016160 57 CF 11 00 		      	pop  	xlr
016164 57 FF 11 00 		      	pop  	lr
016168 37 FF 21 00 		      	rtl  	#16
                	stdio_48:
01616C C6 FD 11 00 		      	lw   	lr,8[bp]
016170 E3 FD 21 00 		      	sw   	lr,16[bp]
016174 3A FC FF FF 		      	bra  	stdio_52
                	endpublic
                	
                	public code putstr2:
016178 15 EF 21 00 		      	subui	sp,sp,#16
01617C E7 ED 01 00 		      	push 	bp
016180 02 BF 01 1A 		      	mov  	bp,sp
016184 67 E3 01 00 		      	     	        push    r6
016188 C6 1D 30 00 	        lw      r1,24[bp]
01618C 0A 60 36 00 	        ldi     r6,#$1B   ; Video BIOS DisplayString16 function
016190 38 0F 34 03 	        sys     #410
016194 57 6F 10 00 	        pop     r6
                	    
                	stdio_54:
016198 82 ED 01 1A 		      	mov  	sp,bp
01619C 57 BF 11 00 		      	pop  	bp
0161A0 37 FF 31 00 		      	rtl  	#24
                	endpublic
                	
                	public code getcharNoWait:
0161A4 67 E3 01 00 		      	     	        push    r6
                	        ld      r6,#3    ; KeybdGetCharNoWait
0161A8 38 0F 14 00 	        sys     #10
0161AC 57 6F 10 00 	        pop     r6
0161B0 37 FF 01 00 	        rtl
	
                	endpublic
                	
                	public code getchar:
0161B4 E7 EF 01 00 		      	push 	lr
0161B8 67 EE 01 00 		      	push 	xlr
0161BC E7 ED 01 00 		      	push 	bp
0161C0 7C 01 00 00 		      	ldi  	xlr,#stdio_57
0161C4 0A C0 11 C4 
0161C8 02 BF 01 1A 		      	mov  	bp,sp
0161CC 15 EF 11 00 		      	subui	sp,sp,#8
                	stdio_58:
0161D0 B9 FA FF FF 		      	bsr  	getcharNoWait
0161D4 82 30 00 1A 		      	mov  	r3,r1
0161D8 E3 3D F0 FF 		      	sw   	r3,-8[bp]
0161DC C6 3D F0 FF 		      	lw   	r3,-8[bp]
0161E0 86 31 FE FF 		      	cmp  	r3,r3,#-1
0161E4 BD 01 F6 FF 		      	beq  	r3,stdio_58
                	stdio_59:
0161E8 C6 3D F0 FF 		      	lw   	r3,-8[bp]
0161EC 8C 31 FE 01 		      	and  	r3,r3,#255
0161F0 82 11 00 1A 		      	mov  	r1,r3
                	stdio_60:
0161F4 82 ED 01 1A 		      	mov  	sp,bp
0161F8 57 BF 11 00 		      	pop  	bp
0161FC 57 CF 11 00 		      	pop  	xlr
016200 57 FF 11 00 		      	pop  	lr
016204 37 FF 01 00 		      	rtl  	#0
                	stdio_57:
016208 C6 FD 11 00 		      	lw   	lr,8[bp]
01620C E3 FD 21 00 		      	sw   	lr,16[bp]
016210 BA FC FF FF 		      	bra  	stdio_60
                	endpublic
                	
                	public code printf:
016214 E7 EF 01 00 		      	push 	lr
016218 67 EE 01 00 		      	push 	xlr
01621C E7 ED 01 00 		      	push 	bp
016220 7C 01 00 00 		      	ldi  	xlr,#stdio_62
016224 0A C0 B9 C9 
016228 02 BF 01 1A 		      	mov  	bp,sp
01622C 15 EF 51 00 		      	subui	sp,sp,#40
016230 E7 E5 01 00 		      	push 	r11
016234 67 E6 01 00 		      	push 	r12
016238 C7 3D 30 00 		      	lea  	r3,24[bp]
01623C 82 B1 00 1A 		      	mov  	r11,r3
016240 82 C5 00 1A 		      	mov  	r12,r11
                	stdio_63:
016244 C6 35 00 00 		      	lw   	r3,[r11]
016248 C3 31 00 00 		      	lcu  	r3,[r3]
01624C BD 01 3A 01 		      	beq  	r3,stdio_64
016250 0A 30 40 00 		      	ldi  	r3,#32
016254 E1 3D BC FF 		      	sc   	r3,-34[bp]
016258 C6 35 00 00 		      	lw   	r3,[r11]
01625C C3 31 00 00 		      	lcu  	r3,[r3]
016260 86 31 4A 00 		      	cmp  	r3,r3,#37
016264 BD 11 22 01 		      	bne  	r3,stdio_66
016268 E3 0D E0 FF 		      	sw   	r0,-16[bp]
01626C FC 00 00 00 		      	ldi  	r3,#65535
016270 0A 30 FE FF 
016274 E3 3D D0 FF 		      	sw   	r3,-24[bp]
016278 E4 25 00 00 		      	inc  	[r11],#2
                	stdio_61:
01627C C6 35 00 00 		      	lw   	r3,[r11]
016280 C3 31 00 00 		      	lcu  	r3,[r3]
016284 86 41 4A 00 		      	cmp  	r4,r3,#37
016288 3D 02 44 00 		      	beq  	r4,stdio_69
01628C 86 41 C6 00 		      	cmp  	r4,r3,#99
016290 3D 02 46 00 		      	beq  	r4,stdio_70
016294 86 41 C8 00 		      	cmp  	r4,r3,#100
016298 3D 02 4A 00 		      	beq  	r4,stdio_71
01629C 86 41 F0 00 		      	cmp  	r4,r3,#120
0162A0 3D 02 56 00 		      	beq  	r4,stdio_72
0162A4 86 41 B0 00 		      	cmp  	r4,r3,#88
0162A8 3D 02 62 00 		      	beq  	r4,stdio_73
0162AC 86 41 E6 00 		      	cmp  	r4,r3,#115
0162B0 3D 02 6E 00 		      	beq  	r4,stdio_74
0162B4 86 41 60 00 		      	cmp  	r4,r3,#48
0162B8 3D 02 78 00 		      	beq  	r4,stdio_75
0162BC 86 41 72 00 		      	cmp  	r4,r3,#57
0162C0 3D 02 78 00 		      	beq  	r4,stdio_76
0162C4 86 41 70 00 		      	cmp  	r4,r3,#56
0162C8 3D 02 74 00 		      	beq  	r4,stdio_76
0162CC 86 41 6E 00 		      	cmp  	r4,r3,#55
0162D0 3D 02 70 00 		      	beq  	r4,stdio_76
0162D4 86 41 6C 00 		      	cmp  	r4,r3,#54
0162D8 3D 02 6C 00 		      	beq  	r4,stdio_76
0162DC 86 41 6A 00 		      	cmp  	r4,r3,#53
0162E0 3D 02 68 00 		      	beq  	r4,stdio_76
0162E4 86 41 68 00 		      	cmp  	r4,r3,#52
0162E8 3D 02 64 00 		      	beq  	r4,stdio_76
0162EC 86 41 66 00 		      	cmp  	r4,r3,#51
0162F0 3D 02 60 00 		      	beq  	r4,stdio_76
0162F4 86 41 64 00 		      	cmp  	r4,r3,#50
0162F8 3D 02 5C 00 		      	beq  	r4,stdio_76
0162FC 86 41 62 00 		      	cmp  	r4,r3,#49
016300 3D 02 58 00 		      	beq  	r4,stdio_76
016304 86 41 5C 00 		      	cmp  	r4,r3,#46
016308 3D 02 8C 00 		      	beq  	r4,stdio_77
01630C 3A 33 00 00 		      	bra  	stdio_68
                	stdio_69:
016310 65 E0 4B 00 		      	push 	#37
016314 B9 53 FF FF 		      	bsr  	putch
016318 BA 31 00 00 		      	bra  	stdio_68
                	stdio_70:
01631C 14 C6 10 00 		      	addui	r12,r12,#8
016320 66 E6 01 00 		      	push 	[r12]
016324 B9 51 FF FF 		      	bsr  	putch
016328 BA 2F 00 00 		      	bra  	stdio_68
                	stdio_71:
01632C 14 C6 10 00 		      	addui	r12,r12,#8
016330 C3 3D BC FF 		      	lcu  	r3,-34[bp]
016334 E7 E1 01 00 		      	push 	r3
016338 65 E0 01 00 		      	push 	#0
01633C E6 ED E1 FF 		      	push 	-16[bp]
016340 66 E6 01 00 		      	push 	[r12]
016344 39 53 FF FF 		      	bsr  	putnum
016348 BA 2B 00 00 		      	bra  	stdio_68
                	stdio_72:
01634C 14 C6 10 00 		      	addui	r12,r12,#8
016350 C3 3D BC FF 		      	lcu  	r3,-34[bp]
016354 E7 E1 01 00 		      	push 	r3
016358 65 E0 01 00 		      	push 	#0
01635C E6 ED E1 FF 		      	push 	-16[bp]
016360 66 E6 01 00 		      	push 	[r12]
016364 39 82 FF FF 		      	bsr  	puthexnum
016368 BA 27 00 00 		      	bra  	stdio_68
                	stdio_73:
01636C 14 C6 10 00 		      	addui	r12,r12,#8
016370 C3 3D BC FF 		      	lcu  	r3,-34[bp]
016374 E7 E1 01 00 		      	push 	r3
016378 65 E0 03 00 		      	push 	#1
01637C E6 ED E1 FF 		      	push 	-16[bp]
016380 66 E6 01 00 		      	push 	[r12]
016384 39 7E FF FF 		      	bsr  	puthexnum
016388 BA 23 00 00 		      	bra  	stdio_68
                	stdio_74:
01638C 14 C6 10 00 		      	addui	r12,r12,#8
016390 E6 ED D1 FF 		      	push 	-24[bp]
016394 66 E6 01 00 		      	push 	[r12]
016398 39 AB FF FF 		      	bsr  	putstr
01639C 82 30 00 1A 		      	mov  	r3,r1
0163A0 E3 3D C0 FF 		      	sw   	r3,-32[bp]
0163A4 3A 20 00 00 		      	bra  	stdio_68
                	stdio_75:
0163A8 0A 30 60 00 		      	ldi  	r3,#48
0163AC E1 3D BC FF 		      	sc   	r3,-34[bp]
                	stdio_76:
0163B0 C6 35 00 00 		      	lw   	r3,[r11]
0163B4 C3 31 00 00 		      	lcu  	r3,[r3]
0163B8 95 31 60 00 		      	subu 	r3,r3,#48
0163BC E3 3D E0 FF 		      	sw   	r3,-16[bp]
0163C0 E4 25 00 00 		      	inc  	[r11],#2
                	stdio_78:
0163C4 C6 35 00 00 		      	lw   	r3,[r11]
0163C8 C3 31 00 00 		      	lcu  	r3,[r3]
0163CC E7 E1 01 00 		      	push 	r3
0163D0 B9 33 00 00 		      	bsr  	isdigit
0163D4 14 EF 11 00 		      	addui	sp,sp,#8
0163D8 82 30 00 1A 		      	mov  	r3,r1
0163DC BD 01 18 00 		      	beq  	r3,stdio_79
0163E0 C6 3D E0 FF 		      	lw   	r3,-16[bp]
0163E4 87 31 14 00 		      	muli 	r3,r3,#10
0163E8 E3 3D E0 FF 		      	sw   	r3,-16[bp]
0163EC C6 35 00 00 		      	lw   	r3,[r11]
0163F0 C3 31 00 00 		      	lcu  	r3,[r3]
0163F4 95 31 60 00 		      	subu 	r3,r3,#48
0163F8 C6 4D E0 FF 		      	lw   	r4,-16[bp]
0163FC 02 42 06 28 		      	addu 	r4,r4,r3
016400 E3 4D E0 FF 		      	sw   	r4,-16[bp]
016404 E4 25 00 00 		      	inc  	[r11],#2
016408 BA F7 FF FF 		      	bra  	stdio_78
                	stdio_79:
01640C C6 35 00 00 		      	lw   	r3,[r11]
016410 C3 31 00 00 		      	lcu  	r3,[r3]
016414 86 31 5C 00 		      	cmp  	r3,r3,#46
016418 BD 01 04 00 		      	beq  	r3,stdio_80
01641C 3A CC FF FF 		      	bra  	stdio_61
                	stdio_80:
                	stdio_77:
016420 E4 25 00 00 		      	inc  	[r11],#2
016424 C6 35 00 00 		      	lw   	r3,[r11]
016428 C3 31 00 00 		      	lcu  	r3,[r3]
01642C E7 E1 01 00 		      	push 	r3
016430 B9 27 00 00 		      	bsr  	isdigit
016434 14 EF 11 00 		      	addui	sp,sp,#8
016438 82 30 00 1A 		      	mov  	r3,r1
01643C BD 11 04 00 		      	bne  	r3,stdio_82
016440 BA C7 FF FF 		      	bra  	stdio_61
                	stdio_82:
016444 C6 35 00 00 		      	lw   	r3,[r11]
016448 C3 31 00 00 		      	lcu  	r3,[r3]
01644C 95 31 60 00 		      	subu 	r3,r3,#48
016450 E3 3D D0 FF 		      	sw   	r3,-24[bp]
016454 E4 25 00 00 		      	inc  	[r11],#2
                	stdio_84:
016458 C6 35 00 00 		      	lw   	r3,[r11]
01645C C3 31 00 00 		      	lcu  	r3,[r3]
016460 E7 E1 01 00 		      	push 	r3
016464 39 21 00 00 		      	bsr  	isdigit
016468 14 EF 11 00 		      	addui	sp,sp,#8
01646C 82 30 00 1A 		      	mov  	r3,r1
016470 BD 01 18 00 		      	beq  	r3,stdio_85
016474 C6 3D D0 FF 		      	lw   	r3,-24[bp]
016478 87 31 14 00 		      	muli 	r3,r3,#10
01647C E3 3D D0 FF 		      	sw   	r3,-24[bp]
016480 C6 35 00 00 		      	lw   	r3,[r11]
016484 C3 31 00 00 		      	lcu  	r3,[r3]
016488 95 31 60 00 		      	subu 	r3,r3,#48
01648C C6 4D D0 FF 		      	lw   	r4,-24[bp]
016490 02 42 06 28 		      	addu 	r4,r4,r3
016494 E3 4D D0 FF 		      	sw   	r4,-24[bp]
016498 E4 25 00 00 		      	inc  	[r11],#2
01649C BA F7 FF FF 		      	bra  	stdio_84
                	stdio_85:
0164A0 BA BB FF FF 		      	bra  	stdio_61
                	stdio_68:
0164A4 BA 02 00 00 		      	bra  	stdio_67
                	stdio_66:
0164A8 C6 35 00 00 		      	lw   	r3,[r11]
0164AC C3 31 00 00 		      	lcu  	r3,[r3]
0164B0 E7 E1 01 00 		      	push 	r3
0164B4 B9 1F FF FF 		      	bsr  	putch
                	stdio_67:
                	stdio_65:
0164B8 E4 25 00 00 		      	inc  	[r11],#2
0164BC 3A B1 FF FF 		      	bra  	stdio_63
                	stdio_64:
                	stdio_86:
0164C0 57 CF 10 00 		      	pop  	r12
0164C4 57 BF 10 00 		      	pop  	r11
0164C8 82 ED 01 1A 		      	mov  	sp,bp
0164CC 57 BF 11 00 		      	pop  	bp
0164D0 57 CF 11 00 		      	pop  	xlr
0164D4 57 FF 11 00 		      	pop  	lr
0164D8 37 FF 01 00 		      	rtl  	#0
                	stdio_62:
0164DC C6 FD 11 00 		      	lw   	lr,8[bp]
0164E0 E3 FD 21 00 		      	sw   	lr,16[bp]
0164E4 BA FB FF FF 		      	bra  	stdio_86
                	endpublic
                	
                		code
0164E8 00 00 00 00 		align	1
0164EC 00 00 00 00 
                	
                	public code isxdigit:
0164F0 15 EF 21 00 		      	subui	sp,sp,#16
0164F4 E7 ED 01 00 		      	push 	bp
0164F8 02 BF 01 1A 		      	mov  	bp,sp
0164FC C3 3D 30 00 		      	lcu  	r3,24[bp]
016500 96 31 82 00 		      	cmpu 	r3,r3,#65
016504 BD 41 10 00 		      	blt  	r3,ctype_1
016508 C3 3D 30 00 		      	lcu  	r3,24[bp]
01650C 96 31 8C 00 		      	cmpu 	r3,r3,#70
016510 BD 21 0A 00 		      	bgt  	r3,ctype_1
016514 0A 10 02 00 		      	ldi  	r1,#1
                	ctype_3:
016518 82 ED 01 1A 		      	mov  	sp,bp
01651C 57 BF 11 00 		      	pop  	bp
016520 37 FF 21 00 		      	rtl  	#16
                	ctype_1:
016524 C3 3D 30 00 		      	lcu  	r3,24[bp]
016528 96 31 C2 00 		      	cmpu 	r3,r3,#97
01652C BD 41 0C 00 		      	blt  	r3,ctype_4
016530 C3 3D 30 00 		      	lcu  	r3,24[bp]
016534 96 31 CC 00 		      	cmpu 	r3,r3,#102
016538 BD 21 06 00 		      	bgt  	r3,ctype_4
01653C 0A 10 02 00 		      	ldi  	r1,#1
016540 3A FB FF FF 		      	bra  	ctype_3
                	ctype_4:
016544 C3 3D 30 00 		      	lcu  	r3,24[bp]
016548 96 31 60 00 		      	cmpu 	r3,r3,#48
01654C BD 41 0C 00 		      	blt  	r3,ctype_6
016550 C3 3D 30 00 		      	lcu  	r3,24[bp]
016554 96 31 72 00 		      	cmpu 	r3,r3,#57
016558 BD 21 06 00 		      	bgt  	r3,ctype_6
01655C 0A 10 02 00 		      	ldi  	r1,#1
016560 3A F7 FF FF 		      	bra  	ctype_3
                	ctype_6:
016564 0A 10 00 00 		      	ldi  	r1,#0
016568 3A F6 FF FF 		      	bra  	ctype_3
                	endpublic
                	
                	public code isdigit:
01656C 15 EF 21 00 		      	subui	sp,sp,#16
016570 E7 ED 01 00 		      	push 	bp
016574 02 BF 01 1A 		      	mov  	bp,sp
016578 C3 3D 30 00 		      	lcu  	r3,24[bp]
01657C 96 31 60 00 		      	cmpu 	r3,r3,#48
016580 BD 41 10 00 		      	blt  	r3,ctype_9
016584 C3 3D 30 00 		      	lcu  	r3,24[bp]
016588 96 31 72 00 		      	cmpu 	r3,r3,#57
01658C BD 21 0A 00 		      	bgt  	r3,ctype_9
016590 0A 10 02 00 		      	ldi  	r1,#1
                	ctype_11:
016594 82 ED 01 1A 		      	mov  	sp,bp
016598 57 BF 11 00 		      	pop  	bp
01659C 37 FF 21 00 		      	rtl  	#16
                	ctype_9:
0165A0 0A 10 00 00 		      	ldi  	r1,#0
0165A4 3A FE FF FF 		      	bra  	ctype_11
                	endpublic
                	
                	public code isalpha:
0165A8 15 EF 21 00 		      	subui	sp,sp,#16
0165AC E7 ED 01 00 		      	push 	bp
0165B0 02 BF 01 1A 		      	mov  	bp,sp
0165B4 C3 3D 30 00 		      	lcu  	r3,24[bp]
0165B8 96 31 C2 00 		      	cmpu 	r3,r3,#97
0165BC BD 41 10 00 		      	blt  	r3,ctype_13
0165C0 C3 3D 30 00 		      	lcu  	r3,24[bp]
0165C4 96 31 F4 00 		      	cmpu 	r3,r3,#122
0165C8 BD 21 0A 00 		      	bgt  	r3,ctype_13
0165CC 0A 10 02 00 		      	ldi  	r1,#1
                	ctype_15:
0165D0 82 ED 01 1A 		      	mov  	sp,bp
0165D4 57 BF 11 00 		      	pop  	bp
0165D8 37 FF 21 00 		      	rtl  	#16
                	ctype_13:
0165DC C3 3D 30 00 		      	lcu  	r3,24[bp]
0165E0 96 31 82 00 		      	cmpu 	r3,r3,#65
0165E4 BD 41 0C 00 		      	blt  	r3,ctype_16
0165E8 C3 3D 30 00 		      	lcu  	r3,24[bp]
0165EC 96 31 B4 00 		      	cmpu 	r3,r3,#90
0165F0 BD 21 06 00 		      	bgt  	r3,ctype_16
0165F4 0A 10 02 00 		      	ldi  	r1,#1
0165F8 3A FB FF FF 		      	bra  	ctype_15
                	ctype_16:
0165FC 0A 10 00 00 		      	ldi  	r1,#0
016600 3A FA FF FF 		      	bra  	ctype_15
                	endpublic
                	
                	public code isalnum:
016604 15 EF 21 00 		      	subui	sp,sp,#16
016608 E7 ED 01 00 		      	push 	bp
01660C 02 BF 01 1A 		      	mov  	bp,sp
016610 C3 3D 30 00 		      	lcu  	r3,24[bp]
016614 96 31 60 00 		      	cmpu 	r3,r3,#48
016618 BD 41 10 00 		      	blt  	r3,ctype_19
01661C C3 3D 30 00 		      	lcu  	r3,24[bp]
016620 96 31 72 00 		      	cmpu 	r3,r3,#57
016624 BD 21 0A 00 		      	bgt  	r3,ctype_19
016628 0A 10 02 00 		      	ldi  	r1,#1
                	ctype_21:
01662C 82 ED 01 1A 		      	mov  	sp,bp
016630 57 BF 11 00 		      	pop  	bp
016634 37 FF 21 00 		      	rtl  	#16
                	ctype_19:
016638 C3 3D 30 00 		      	lcu  	r3,24[bp]
01663C 96 31 C2 00 		      	cmpu 	r3,r3,#97
016640 BD 41 0C 00 		      	blt  	r3,ctype_22
016644 C3 3D 30 00 		      	lcu  	r3,24[bp]
016648 96 31 F4 00 		      	cmpu 	r3,r3,#122
01664C BD 21 06 00 		      	bgt  	r3,ctype_22
016650 0A 10 02 00 		      	ldi  	r1,#1
016654 3A FB FF FF 		      	bra  	ctype_21
                	ctype_22:
016658 C3 3D 30 00 		      	lcu  	r3,24[bp]
01665C 96 31 82 00 		      	cmpu 	r3,r3,#65
016660 BD 41 0C 00 		      	blt  	r3,ctype_24
016664 C3 3D 30 00 		      	lcu  	r3,24[bp]
016668 96 31 B4 00 		      	cmpu 	r3,r3,#90
01666C BD 21 06 00 		      	bgt  	r3,ctype_24
016670 0A 10 02 00 		      	ldi  	r1,#1
016674 3A F7 FF FF 		      	bra  	ctype_21
                	ctype_24:
016678 0A 10 00 00 		      	ldi  	r1,#0
01667C 3A F6 FF FF 		      	bra  	ctype_21
                	endpublic
                	
                	public code isspace:
016680 15 EF 21 00 		      	subui	sp,sp,#16
016684 E7 ED 01 00 		      	push 	bp
016688 02 BF 01 1A 		      	mov  	bp,sp
01668C C3 3D 30 00 		      	lcu  	r3,24[bp]
016690 86 31 40 00 		      	cmp  	r3,r3,#32
016694 BD 11 0A 00 		      	bne  	r3,ctype_27
016698 0A 10 02 00 		      	ldi  	r1,#1
                	ctype_29:
01669C 82 ED 01 1A 		      	mov  	sp,bp
0166A0 57 BF 11 00 		      	pop  	bp
0166A4 37 FF 21 00 		      	rtl  	#16
                	ctype_27:
0166A8 C3 3D 30 00 		      	lcu  	r3,24[bp]
0166AC 86 31 12 00 		      	cmp  	r3,r3,#9
0166B0 BD 11 06 00 		      	bne  	r3,ctype_30
0166B4 0A 10 02 00 		      	ldi  	r1,#1
0166B8 BA FC FF FF 		      	bra  	ctype_29
                	ctype_30:
0166BC C3 3D 30 00 		      	lcu  	r3,24[bp]
0166C0 86 31 14 00 		      	cmp  	r3,r3,#10
0166C4 BD 11 06 00 		      	bne  	r3,ctype_32
0166C8 0A 10 02 00 		      	ldi  	r1,#1
0166CC 3A FA FF FF 		      	bra  	ctype_29
                	ctype_32:
0166D0 C3 3D 30 00 		      	lcu  	r3,24[bp]
0166D4 86 31 1A 00 		      	cmp  	r3,r3,#13
0166D8 BD 11 06 00 		      	bne  	r3,ctype_34
0166DC 0A 10 02 00 		      	ldi  	r1,#1
0166E0 BA F7 FF FF 		      	bra  	ctype_29
                	ctype_34:
0166E4 C3 3D 30 00 		      	lcu  	r3,24[bp]
0166E8 86 31 18 00 		      	cmp  	r3,r3,#12
0166EC BD 11 06 00 		      	bne  	r3,ctype_36
0166F0 0A 10 02 00 		      	ldi  	r1,#1
0166F4 3A F5 FF FF 		      	bra  	ctype_29
                	ctype_36:
0166F8 0A 10 00 00 		      	ldi  	r1,#0
0166FC 3A F4 FF FF 		      	bra  	ctype_29
                	endpublic
                	
                	public code tolower:
016700 15 EF 21 00 		      	subui	sp,sp,#16
016704 E7 ED 01 00 		      	push 	bp
016708 02 BF 01 1A 		      	mov  	bp,sp
01670C C3 3D 30 00 		      	lcu  	r3,24[bp]
016710 96 31 82 00 		      	cmpu 	r3,r3,#65
016714 BD 41 0E 00 		      	blt  	r3,ctype_39
016718 C3 3D 30 00 		      	lcu  	r3,24[bp]
01671C 96 31 B4 00 		      	cmpu 	r3,r3,#90
016720 BD 21 08 00 		      	bgt  	r3,ctype_39
016724 C3 3D 30 00 		      	lcu  	r3,24[bp]
016728 94 31 40 00 		      	addu 	r3,r3,#32
01672C E1 3D 30 00 		      	sc   	r3,24[bp]
                	ctype_39:
016730 C3 3D 30 00 		      	lcu  	r3,24[bp]
016734 82 11 00 1A 		      	mov  	r1,r3
                	ctype_41:
016738 82 ED 01 1A 		      	mov  	sp,bp
01673C 57 BF 11 00 		      	pop  	bp
016740 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code toupper:
016744 15 EF 21 00 		      	subui	sp,sp,#16
016748 E7 ED 01 00 		      	push 	bp
01674C 02 BF 01 1A 		      	mov  	bp,sp
016750 C3 3D 30 00 		      	lcu  	r3,24[bp]
016754 96 31 C2 00 		      	cmpu 	r3,r3,#97
016758 BD 41 0E 00 		      	blt  	r3,ctype_43
01675C C3 3D 30 00 		      	lcu  	r3,24[bp]
016760 96 31 C2 00 		      	cmpu 	r3,r3,#97
016764 BD 21 08 00 		      	bgt  	r3,ctype_43
016768 C3 3D 30 00 		      	lcu  	r3,24[bp]
01676C 94 31 C0 FF 		      	addu 	r3,r3,#-32
016770 E1 3D 30 00 		      	sc   	r3,24[bp]
                	ctype_43:
016774 C3 3D 30 00 		      	lcu  	r3,24[bp]
016778 82 11 00 1A 		      	mov  	r1,r3
                	ctype_45:
01677C 82 ED 01 1A 		      	mov  	sp,bp
016780 57 BF 11 00 		      	pop  	bp
016784 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code isupper:
016788 15 EF 21 00 		      	subui	sp,sp,#16
01678C E7 ED 01 00 		      	push 	bp
016790 02 BF 01 1A 		      	mov  	bp,sp
016794 C3 3D 30 00 		      	lcu  	r3,24[bp]
016798 96 31 82 00 		      	cmpu 	r3,r3,#65
01679C BD 41 0C 00 		      	blt  	r3,ctype_47
0167A0 C3 3D 30 00 		      	lcu  	r3,24[bp]
0167A4 96 31 B4 00 		      	cmpu 	r3,r3,#90
0167A8 BD 21 06 00 		      	bgt  	r3,ctype_47
0167AC 0A 30 02 00 		      	ldi  	r3,#1
0167B0 3A 01 00 00 		      	bra  	ctype_48
                	ctype_47:
0167B4 0A 30 00 00 		      	ldi  	r3,#0
                	ctype_48:
0167B8 82 11 00 1A 		      	mov  	r1,r3
                	ctype_49:
0167BC 82 ED 01 1A 		      	mov  	sp,bp
0167C0 57 BF 11 00 		      	pop  	bp
0167C4 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code islower:
0167C8 15 EF 21 00 		      	subui	sp,sp,#16
0167CC E7 ED 01 00 		      	push 	bp
0167D0 02 BF 01 1A 		      	mov  	bp,sp
0167D4 C3 3D 30 00 		      	lcu  	r3,24[bp]
0167D8 96 31 C2 00 		      	cmpu 	r3,r3,#97
0167DC BD 41 0C 00 		      	blt  	r3,ctype_51
0167E0 C3 3D 30 00 		      	lcu  	r3,24[bp]
0167E4 96 31 F4 00 		      	cmpu 	r3,r3,#122
0167E8 BD 21 06 00 		      	bgt  	r3,ctype_51
0167EC 0A 30 02 00 		      	ldi  	r3,#1
0167F0 3A 01 00 00 		      	bra  	ctype_52
                	ctype_51:
0167F4 0A 30 00 00 		      	ldi  	r3,#0
                	ctype_52:
0167F8 82 11 00 1A 		      	mov  	r1,r3
                	ctype_53:
0167FC 82 ED 01 1A 		      	mov  	sp,bp
016800 57 BF 11 00 		      	pop  	bp
016804 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code ispunct:
016808 15 EF 21 00 		      	subui	sp,sp,#16
01680C E7 ED 01 00 		      	push 	bp
016810 02 BF 01 1A 		      	mov  	bp,sp
016814 C3 3D 30 00 		      	lcu  	r3,24[bp]
016818 86 41 BC 00 		      	cmp  	r4,r3,#94
01681C 3D 02 60 00 		      	beq  	r4,ctype_56
016820 86 41 74 00 		      	cmp  	r4,r3,#58
016824 3D 02 5C 00 		      	beq  	r4,ctype_56
016828 86 41 5E 00 		      	cmp  	r4,r3,#47
01682C 3D 02 58 00 		      	beq  	r4,ctype_56
016830 86 41 5C 00 		      	cmp  	r4,r3,#46
016834 3D 02 54 00 		      	beq  	r4,ctype_56
016838 86 41 5A 00 		      	cmp  	r4,r3,#45
01683C 3D 02 50 00 		      	beq  	r4,ctype_56
016840 86 41 58 00 		      	cmp  	r4,r3,#44
016844 3D 02 4C 00 		      	beq  	r4,ctype_56
016848 86 41 56 00 		      	cmp  	r4,r3,#43
01684C 3D 02 48 00 		      	beq  	r4,ctype_56
016850 86 41 54 00 		      	cmp  	r4,r3,#42
016854 3D 02 44 00 		      	beq  	r4,ctype_56
016858 86 41 BA 00 		      	cmp  	r4,r3,#93
01685C 3D 02 40 00 		      	beq  	r4,ctype_56
016860 86 41 B8 00 		      	cmp  	r4,r3,#92
016864 3D 02 3C 00 		      	beq  	r4,ctype_56
016868 86 41 B6 00 		      	cmp  	r4,r3,#91
01686C 3D 02 38 00 		      	beq  	r4,ctype_56
016870 86 41 7E 00 		      	cmp  	r4,r3,#63
016874 3D 02 34 00 		      	beq  	r4,ctype_56
016878 86 41 7C 00 		      	cmp  	r4,r3,#62
01687C 3D 02 30 00 		      	beq  	r4,ctype_56
016880 86 41 7A 00 		      	cmp  	r4,r3,#61
016884 3D 02 2C 00 		      	beq  	r4,ctype_56
016888 86 41 78 00 		      	cmp  	r4,r3,#60
01688C 3D 02 28 00 		      	beq  	r4,ctype_56
016890 86 41 76 00 		      	cmp  	r4,r3,#59
016894 3D 02 24 00 		      	beq  	r4,ctype_56
016898 86 41 52 00 		      	cmp  	r4,r3,#41
01689C 3D 02 20 00 		      	beq  	r4,ctype_56
0168A0 86 41 50 00 		      	cmp  	r4,r3,#40
0168A4 3D 02 1C 00 		      	beq  	r4,ctype_56
0168A8 86 41 4E 00 		      	cmp  	r4,r3,#39
0168AC 3D 02 18 00 		      	beq  	r4,ctype_56
0168B0 86 41 4C 00 		      	cmp  	r4,r3,#38
0168B4 3D 02 14 00 		      	beq  	r4,ctype_56
0168B8 86 41 4A 00 		      	cmp  	r4,r3,#37
0168BC 3D 02 10 00 		      	beq  	r4,ctype_56
0168C0 86 41 46 00 		      	cmp  	r4,r3,#35
0168C4 3D 02 0C 00 		      	beq  	r4,ctype_56
0168C8 86 41 44 00 		      	cmp  	r4,r3,#34
0168CC 3D 02 08 00 		      	beq  	r4,ctype_56
0168D0 86 41 42 00 		      	cmp  	r4,r3,#33
0168D4 3D 02 04 00 		      	beq  	r4,ctype_56
0168D8 BA 02 00 00 		      	bra  	ctype_57
                	ctype_56:
0168DC 0A 10 02 00 		      	ldi  	r1,#1
                	ctype_58:
0168E0 82 ED 01 1A 		      	mov  	sp,bp
0168E4 57 BF 11 00 		      	pop  	bp
0168E8 37 FF 21 00 		      	rtl  	#16
                	ctype_57:
0168EC 0A 10 00 00 		      	ldi  	r1,#0
0168F0 3A FE FF FF 		      	bra  	ctype_58
                	ctype_55:
0168F4 BA FD FF FF 		      	bra  	ctype_58
                	endpublic
                	
                	public code isgraph:
0168F8 E7 EF 01 00 		      	push 	lr
0168FC 67 EE 01 00 		      	push 	xlr
016900 E7 ED 01 00 		      	push 	bp
016904 7C 01 00 00 		      	ldi  	xlr,#ctype_59
016908 0A C0 C9 D2 
01690C 02 BF 01 1A 		      	mov  	bp,sp
016910 C3 3D 30 00 		      	lcu  	r3,24[bp]
016914 E7 E1 01 00 		      	push 	r3
016918 39 DE FF FF 		      	bsr  	ispunct
01691C 14 EF 11 00 		      	addui	sp,sp,#8
016920 82 30 00 1A 		      	mov  	r3,r1
016924 BD 11 0E 00 		      	bne  	r3,ctype_62
016928 C3 3D 30 00 		      	lcu  	r3,24[bp]
01692C E7 E1 01 00 		      	push 	r3
016930 B9 9A FF FF 		      	bsr  	isalnum
016934 14 EF 11 00 		      	addui	sp,sp,#8
016938 82 30 00 1A 		      	mov  	r3,r1
01693C BD 01 06 00 		      	beq  	r3,ctype_60
                	ctype_62:
016940 0A 30 02 00 		      	ldi  	r3,#1
016944 3A 01 00 00 		      	bra  	ctype_61
                	ctype_60:
016948 0A 30 00 00 		      	ldi  	r3,#0
                	ctype_61:
01694C 82 11 00 1A 		      	mov  	r1,r3
                	ctype_63:
016950 82 ED 01 1A 		      	mov  	sp,bp
016954 57 BF 11 00 		      	pop  	bp
016958 57 CF 11 00 		      	pop  	xlr
01695C 57 FF 11 00 		      	pop  	lr
016960 37 FF 01 00 		      	rtl  	#0
                	ctype_59:
016964 C6 FD 11 00 		      	lw   	lr,8[bp]
016968 E3 FD 21 00 		      	sw   	lr,16[bp]
01696C BA FC FF FF 		      	bra  	ctype_63
                	endpublic
                	
                	public code isprint:
016970 E7 EF 01 00 		      	push 	lr
016974 67 EE 01 00 		      	push 	xlr
016978 E7 ED 01 00 		      	push 	bp
01697C 7C 01 00 00 		      	ldi  	xlr,#ctype_64
016980 0A C0 A1 D3 
016984 02 BF 01 1A 		      	mov  	bp,sp
016988 C3 3D 30 00 		      	lcu  	r3,24[bp]
01698C E7 E1 01 00 		      	push 	r3
016990 39 ED FF FF 		      	bsr  	isgraph
016994 14 EF 11 00 		      	addui	sp,sp,#8
016998 82 30 00 1A 		      	mov  	r3,r1
01699C BD 11 08 00 		      	bne  	r3,ctype_67
0169A0 C3 3D 30 00 		      	lcu  	r3,24[bp]
0169A4 86 31 40 00 		      	cmp  	r3,r3,#32
0169A8 BD 11 06 00 		      	bne  	r3,ctype_65
                	ctype_67:
0169AC 0A 30 02 00 		      	ldi  	r3,#1
0169B0 3A 01 00 00 		      	bra  	ctype_66
                	ctype_65:
0169B4 0A 30 00 00 		      	ldi  	r3,#0
                	ctype_66:
0169B8 82 11 00 1A 		      	mov  	r1,r3
                	ctype_68:
0169BC 82 ED 01 1A 		      	mov  	sp,bp
0169C0 57 BF 11 00 		      	pop  	bp
0169C4 57 CF 11 00 		      	pop  	xlr
0169C8 57 FF 11 00 		      	pop  	lr
0169CC 37 FF 01 00 		      	rtl  	#0
                	ctype_64:
0169D0 C6 FD 11 00 		      	lw   	lr,8[bp]
0169D4 E3 FD 21 00 		      	sw   	lr,16[bp]
0169D8 BA FC FF FF 		      	bra  	ctype_68
                	endpublic
                	
                	public code iscntrl:
0169DC 15 EF 21 00 		      	subui	sp,sp,#16
0169E0 E7 ED 01 00 		      	push 	bp
0169E4 02 BF 01 1A 		      	mov  	bp,sp
0169E8 C3 3D 30 00 		      	lcu  	r3,24[bp]
0169EC 86 41 0E 00 		      	cmp  	r4,r3,#7
0169F0 3D 02 18 00 		      	beq  	r4,ctype_71
0169F4 86 41 10 00 		      	cmp  	r4,r3,#8
0169F8 3D 02 14 00 		      	beq  	r4,ctype_71
0169FC 86 41 14 00 		      	cmp  	r4,r3,#10
016A00 3D 02 10 00 		      	beq  	r4,ctype_71
016A04 86 41 1A 00 		      	cmp  	r4,r3,#13
016A08 3D 02 0C 00 		      	beq  	r4,ctype_71
016A0C 86 41 18 00 		      	cmp  	r4,r3,#12
016A10 3D 02 08 00 		      	beq  	r4,ctype_71
016A14 86 41 12 00 		      	cmp  	r4,r3,#9
016A18 3D 02 04 00 		      	beq  	r4,ctype_71
016A1C BA 02 00 00 		      	bra  	ctype_72
                	ctype_71:
016A20 0A 10 02 00 		      	ldi  	r1,#1
                	ctype_73:
016A24 82 ED 01 1A 		      	mov  	sp,bp
016A28 57 BF 11 00 		      	pop  	bp
016A2C 37 FF 21 00 		      	rtl  	#16
                	ctype_72:
016A30 0A 10 00 00 		      	ldi  	r1,#0
016A34 3A FE FF FF 		      	bra  	ctype_73
                	ctype_70:
016A38 BA FD FF FF 		      	bra  	ctype_73
                	endpublic
                	
                		code
016A3C 00 00 00 00 		align	1
                	
                	public code SetCurAttr:
016A40 15 EF 21 00 		      	subui	sp,sp,#16
016A44 E7 ED 01 00 		      	push 	bp
016A48 02 BF 01 1A 		      	mov  	bp,sp
016A4C C6 1D 30 00 		      	     	         lw    r1,24[bp]
016A50 B9 24 F4 FF 	         bsr   SetCurrAttr
                	     
                	disassem_1:
016A54 82 ED 01 1A 		      	mov  	sp,bp
016A58 57 BF 11 00 		      	pop  	bp
016A5C 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code reverse_video:
016A60 E7 EF 01 00 		      	push 	lr
016A64 67 EE 01 00 		      	push 	xlr
016A68 E7 ED 01 00 		      	push 	bp
016A6C 7C 01 00 00 		      	ldi  	xlr,#disassem_2
016A70 0A C0 A9 D5 
016A74 02 BF 01 1A 		      	mov  	bp,sp
016A78 15 EF 11 00 		      	subui	sp,sp,#8
016A7C 39 1D F4 FF 		      	bsr  	GetCurrAttr
016A80 82 30 00 1A 		      	mov  	r3,r1
016A84 E2 3D F8 FF 		      	sh   	r3,-4[bp]
016A88 C5 3D F8 FF 		      	lhu  	r3,-4[bp]
016A8C 8C 31 FE FF 		      	andi 	r3,r3,#-1
016A90 82 31 14 78 		      	asri 	r3,r3,#10
016A94 82 31 26 70 		      	asli 	r3,r3,#19
016A98 C5 4D F8 FF 		      	lhu  	r4,-4[bp]
016A9C 0C 42 FE FF 		      	andi 	r4,r4,#-1
016AA0 02 42 26 78 		      	asri 	r4,r4,#19
016AA4 02 42 14 70 		      	asli 	r4,r4,#10
016AA8 82 31 08 1A 		      	or   	r3,r3,r4
016AAC E2 3D F8 FF 		      	sh   	r3,-4[bp]
016AB0 C5 3D F8 FF 		      	lhu  	r3,-4[bp]
016AB4 E7 E1 01 00 		      	push 	r3
016AB8 39 F1 FF FF 		      	bsr  	SetCurAttr
016ABC 14 EF 11 00 		      	addui	sp,sp,#8
                	disassem_3:
016AC0 82 ED 01 1A 		      	mov  	sp,bp
016AC4 57 BF 11 00 		      	pop  	bp
016AC8 57 CF 11 00 		      	pop  	xlr
016ACC 57 FF 11 00 		      	pop  	lr
016AD0 37 FF 01 00 		      	rtl  	#0
                	disassem_2:
016AD4 C6 FD 11 00 		      	lw   	lr,8[bp]
016AD8 E3 FD 21 00 		      	sw   	lr,16[bp]
016ADC BA FC FF FF 		      	bra  	disassem_3
                	endpublic
                	
                	public code DumpInsnBytes:
016AE0 E7 EF 01 00 		      	push 	lr
016AE4 67 EE 01 00 		      	push 	xlr
016AE8 E7 ED 01 00 		      	push 	bp
016AEC 7C 01 00 00 		      	ldi  	xlr,#disassem_5
016AF0 0A C0 B9 D6 
016AF4 02 BF 01 1A 		      	mov  	bp,sp
016AF8 C6 3D 40 00 		      	lw   	r3,32[bp]
016AFC 82 31 30 78 		      	asri 	r3,r3,#24
016B00 8C 31 FE 01 		      	and  	r3,r3,#255
016B04 E7 E1 01 00 		      	push 	r3
016B08 C6 3D 40 00 		      	lw   	r3,32[bp]
016B0C 82 31 20 78 		      	asri 	r3,r3,#16
016B10 8C 31 FE 01 		      	and  	r3,r3,#255
016B14 E7 E1 01 00 		      	push 	r3
016B18 C6 3D 40 00 		      	lw   	r3,32[bp]
016B1C 82 31 10 78 		      	asri 	r3,r3,#8
016B20 8C 31 FE 01 		      	and  	r3,r3,#255
016B24 E7 E1 01 00 		      	push 	r3
016B28 C6 3D 40 00 		      	lw   	r3,32[bp]
016B2C 8C 31 FE 01 		      	and  	r3,r3,#255
016B30 E7 E1 01 00 		      	push 	r3
016B34 E6 ED 31 00 		      	push 	24[bp]
016B38 FC 01 00 00 		      	push 	#disassem_4
016B3C 65 E0 A1 4C 
016B40 B9 DA FE FF 		      	bsr  	printf
016B44 14 EF 61 00 		      	addui	sp,sp,#48
                	disassem_6:
016B48 82 ED 01 1A 		      	mov  	sp,bp
016B4C 57 BF 11 00 		      	pop  	bp
016B50 57 CF 11 00 		      	pop  	xlr
016B54 57 FF 11 00 		      	pop  	lr
016B58 37 FF 01 00 		      	rtl  	#0
                	disassem_5:
016B5C C6 FD 11 00 		      	lw   	lr,8[bp]
016B60 E3 FD 21 00 		      	sw   	lr,16[bp]
016B64 BA FC FF FF 		      	bra  	disassem_6
                	endpublic
                	
                	DispRst:
016B68 E7 EF 01 00 		      	push 	lr
016B6C 67 EE 01 00 		      	push 	xlr
016B70 E7 ED 01 00 		      	push 	bp
016B74 7C 01 00 00 		      	ldi  	xlr,#disassem_9
016B78 0A C0 69 D7 
016B7C 02 BF 01 1A 		      	mov  	bp,sp
016B80 C6 3D 30 00 		      	lw   	r3,24[bp]
016B84 82 31 18 78 		      	asri 	r3,r3,#12
016B88 8C 31 3E 00 		      	and  	r3,r3,#31
016B8C E7 E1 01 00 		      	push 	r3
016B90 FC 01 00 00 		      	push 	#disassem_8
016B94 65 E0 91 4C 
016B98 B9 CF FE FF 		      	bsr  	printf
016B9C 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_10:
016BA0 82 ED 01 1A 		      	mov  	sp,bp
016BA4 57 BF 11 00 		      	pop  	bp
016BA8 57 CF 11 00 		      	pop  	xlr
016BAC 57 FF 11 00 		      	pop  	lr
016BB0 37 FF 01 00 		      	rtl  	#0
                	disassem_9:
016BB4 C6 FD 11 00 		      	lw   	lr,8[bp]
016BB8 E3 FD 21 00 		      	sw   	lr,16[bp]
016BBC BA FC FF FF 		      	bra  	disassem_10
                	DispRstc:
016BC0 E7 EF 01 00 		      	push 	lr
016BC4 67 EE 01 00 		      	push 	xlr
016BC8 E7 ED 01 00 		      	push 	bp
016BCC 7C 01 00 00 		      	ldi  	xlr,#disassem_13
016BD0 0A C0 19 D8 
016BD4 02 BF 01 1A 		      	mov  	bp,sp
016BD8 C6 3D 30 00 		      	lw   	r3,24[bp]
016BDC 82 31 18 78 		      	asri 	r3,r3,#12
016BE0 8C 31 3E 00 		      	and  	r3,r3,#31
016BE4 E7 E1 01 00 		      	push 	r3
016BE8 FC 01 00 00 		      	push 	#disassem_12
016BEC 65 E0 7D 4C 
016BF0 B9 C4 FE FF 		      	bsr  	printf
016BF4 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_14:
016BF8 82 ED 01 1A 		      	mov  	sp,bp
016BFC 57 BF 11 00 		      	pop  	bp
016C00 57 CF 11 00 		      	pop  	xlr
016C04 57 FF 11 00 		      	pop  	lr
016C08 37 FF 01 00 		      	rtl  	#0
                	disassem_13:
016C0C C6 FD 11 00 		      	lw   	lr,8[bp]
016C10 E3 FD 21 00 		      	sw   	lr,16[bp]
016C14 BA FC FF FF 		      	bra  	disassem_14
                	DispRac:
016C18 E7 EF 01 00 		      	push 	lr
016C1C 67 EE 01 00 		      	push 	xlr
016C20 E7 ED 01 00 		      	push 	bp
016C24 7C 01 00 00 		      	ldi  	xlr,#disassem_17
016C28 0A C0 C9 D8 
016C2C 02 BF 01 1A 		      	mov  	bp,sp
016C30 C6 3D 30 00 		      	lw   	r3,24[bp]
016C34 82 31 0E 78 		      	asri 	r3,r3,#7
016C38 8C 31 3E 00 		      	and  	r3,r3,#31
016C3C E7 E1 01 00 		      	push 	r3
016C40 FC 01 00 00 		      	push 	#disassem_16
016C44 65 E0 69 4C 
016C48 B9 B9 FE FF 		      	bsr  	printf
016C4C 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_18:
016C50 82 ED 01 1A 		      	mov  	sp,bp
016C54 57 BF 11 00 		      	pop  	bp
016C58 57 CF 11 00 		      	pop  	xlr
016C5C 57 FF 11 00 		      	pop  	lr
016C60 37 FF 01 00 		      	rtl  	#0
                	disassem_17:
016C64 C6 FD 11 00 		      	lw   	lr,8[bp]
016C68 E3 FD 21 00 		      	sw   	lr,16[bp]
016C6C BA FC FF FF 		      	bra  	disassem_18
                	DispRa:
016C70 E7 EF 01 00 		      	push 	lr
016C74 67 EE 01 00 		      	push 	xlr
016C78 E7 ED 01 00 		      	push 	bp
016C7C 7C 01 00 00 		      	ldi  	xlr,#disassem_21
016C80 0A C0 79 D9 
016C84 02 BF 01 1A 		      	mov  	bp,sp
016C88 C6 3D 30 00 		      	lw   	r3,24[bp]
016C8C 82 31 0E 78 		      	asri 	r3,r3,#7
016C90 8C 31 3E 00 		      	and  	r3,r3,#31
016C94 E7 E1 01 00 		      	push 	r3
016C98 FC 01 00 00 		      	push 	#disassem_20
016C9C 65 E0 59 4C 
016CA0 B9 AE FE FF 		      	bsr  	printf
016CA4 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_22:
016CA8 82 ED 01 1A 		      	mov  	sp,bp
016CAC 57 BF 11 00 		      	pop  	bp
016CB0 57 CF 11 00 		      	pop  	xlr
016CB4 57 FF 11 00 		      	pop  	lr
016CB8 37 FF 01 00 		      	rtl  	#0
                	disassem_21:
016CBC C6 FD 11 00 		      	lw   	lr,8[bp]
016CC0 E3 FD 21 00 		      	sw   	lr,16[bp]
016CC4 BA FC FF FF 		      	bra  	disassem_22
                	DispRb:
016CC8 E7 EF 01 00 		      	push 	lr
016CCC 67 EE 01 00 		      	push 	xlr
016CD0 E7 ED 01 00 		      	push 	bp
016CD4 7C 01 00 00 		      	ldi  	xlr,#disassem_25
016CD8 0A C0 29 DA 
016CDC 02 BF 01 1A 		      	mov  	bp,sp
016CE0 C6 3D 30 00 		      	lw   	r3,24[bp]
016CE4 82 31 22 78 		      	asri 	r3,r3,#17
016CE8 8C 31 3E 00 		      	and  	r3,r3,#31
016CEC E7 E1 01 00 		      	push 	r3
016CF0 FC 01 00 00 		      	push 	#disassem_24
016CF4 65 E0 49 4C 
016CF8 B9 A3 FE FF 		      	bsr  	printf
016CFC 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_26:
016D00 82 ED 01 1A 		      	mov  	sp,bp
016D04 57 BF 11 00 		      	pop  	bp
016D08 57 CF 11 00 		      	pop  	xlr
016D0C 57 FF 11 00 		      	pop  	lr
016D10 37 FF 01 00 		      	rtl  	#0
                	disassem_25:
016D14 C6 FD 11 00 		      	lw   	lr,8[bp]
016D18 E3 FD 21 00 		      	sw   	lr,16[bp]
016D1C BA FC FF FF 		      	bra  	disassem_26
                	DispSpr:
016D20 E7 EF 01 00 		      	push 	lr
016D24 67 EE 01 00 		      	push 	xlr
016D28 E7 ED 01 00 		      	push 	bp
016D2C 7C 01 00 00 		      	ldi  	xlr,#disassem_43
016D30 0A C0 09 DE 
016D34 02 BF 01 1A 		      	mov  	bp,sp
016D38 15 EF 11 00 		      	subui	sp,sp,#8
016D3C C6 3D 30 00 		      	lw   	r3,24[bp]
016D40 82 31 22 78 		      	asri 	r3,r3,#17
016D44 8C 31 FE 01 		      	and  	r3,r3,#255
016D48 E3 3D F0 FF 		      	sw   	r3,-8[bp]
016D4C C6 3D F0 FF 		      	lw   	r3,-8[bp]
016D50 86 41 00 00 		      	cmp  	r4,r3,#0
016D54 3D 02 38 00 		      	beq  	r4,disassem_45
016D58 86 41 06 00 		      	cmp  	r4,r3,#3
016D5C 3D 02 3E 00 		      	beq  	r4,disassem_46
016D60 86 41 08 00 		      	cmp  	r4,r3,#4
016D64 3D 02 44 00 		      	beq  	r4,disassem_47
016D68 86 41 0C 00 		      	cmp  	r4,r3,#6
016D6C 3D 02 4A 00 		      	beq  	r4,disassem_48
016D70 86 41 0E 00 		      	cmp  	r4,r3,#7
016D74 3D 02 50 00 		      	beq  	r4,disassem_49
016D78 86 41 10 00 		      	cmp  	r4,r3,#8
016D7C 3D 02 56 00 		      	beq  	r4,disassem_50
016D80 86 41 12 00 		      	cmp  	r4,r3,#9
016D84 3D 02 5C 00 		      	beq  	r4,disassem_51
016D88 86 41 14 00 		      	cmp  	r4,r3,#10
016D8C 3D 02 62 00 		      	beq  	r4,disassem_52
016D90 86 41 64 00 		      	cmp  	r4,r3,#50
016D94 3D 02 68 00 		      	beq  	r4,disassem_53
016D98 86 41 66 00 		      	cmp  	r4,r3,#51
016D9C 3D 02 6E 00 		      	beq  	r4,disassem_54
016DA0 86 41 68 00 		      	cmp  	r4,r3,#52
016DA4 3D 02 74 00 		      	beq  	r4,disassem_55
016DA8 86 41 6A 00 		      	cmp  	r4,r3,#53
016DAC 3D 02 7A 00 		      	beq  	r4,disassem_56
016DB0 86 41 6C 00 		      	cmp  	r4,r3,#54
016DB4 3D 02 80 00 		      	beq  	r4,disassem_57
016DB8 86 41 6E 00 		      	cmp  	r4,r3,#55
016DBC 3D 02 86 00 		      	beq  	r4,disassem_58
016DC0 BA 23 00 00 		      	bra  	disassem_59
                	disassem_45:
016DC4 FC 01 00 00 		      	push 	#disassem_28
016DC8 65 E0 39 4C 
016DCC 39 89 FE FF 		      	bsr  	printf
016DD0 14 EF 11 00 		      	addui	sp,sp,#8
016DD4 BA 23 00 00 		      	bra  	disassem_44
                	disassem_46:
016DD8 FC 01 00 00 		      	push 	#disassem_29
016DDC 65 E0 29 4C 
016DE0 B9 86 FE FF 		      	bsr  	printf
016DE4 14 EF 11 00 		      	addui	sp,sp,#8
016DE8 3A 21 00 00 		      	bra  	disassem_44
                	disassem_47:
016DEC FC 01 00 00 		      	push 	#disassem_30
016DF0 65 E0 15 4C 
016DF4 39 84 FE FF 		      	bsr  	printf
016DF8 14 EF 11 00 		      	addui	sp,sp,#8
016DFC BA 1E 00 00 		      	bra  	disassem_44
                	disassem_48:
016E00 FC 01 00 00 		      	push 	#disassem_31
016E04 65 E0 05 4C 
016E08 B9 81 FE FF 		      	bsr  	printf
016E0C 14 EF 11 00 		      	addui	sp,sp,#8
016E10 3A 1C 00 00 		      	bra  	disassem_44
                	disassem_49:
016E14 FC 01 00 00 		      	push 	#disassem_32
016E18 65 E0 F5 4B 
016E1C 39 7F FE FF 		      	bsr  	printf
016E20 14 EF 11 00 		      	addui	sp,sp,#8
016E24 BA 19 00 00 		      	bra  	disassem_44
                	disassem_50:
016E28 FC 01 00 00 		      	push 	#disassem_33
016E2C 65 E0 E5 4B 
016E30 B9 7C FE FF 		      	bsr  	printf
016E34 14 EF 11 00 		      	addui	sp,sp,#8
016E38 3A 17 00 00 		      	bra  	disassem_44
                	disassem_51:
016E3C FC 01 00 00 		      	push 	#disassem_34
016E40 65 E0 D5 4B 
016E44 39 7A FE FF 		      	bsr  	printf
016E48 14 EF 11 00 		      	addui	sp,sp,#8
016E4C BA 14 00 00 		      	bra  	disassem_44
                	disassem_52:
016E50 FC 01 00 00 		      	push 	#disassem_35
016E54 65 E0 C5 4B 
016E58 B9 77 FE FF 		      	bsr  	printf
016E5C 14 EF 11 00 		      	addui	sp,sp,#8
016E60 3A 12 00 00 		      	bra  	disassem_44
                	disassem_53:
016E64 FC 01 00 00 		      	push 	#disassem_36
016E68 65 E0 AD 4B 
016E6C 39 75 FE FF 		      	bsr  	printf
016E70 14 EF 11 00 		      	addui	sp,sp,#8
016E74 BA 0F 00 00 		      	bra  	disassem_44
                	disassem_54:
016E78 FC 01 00 00 		      	push 	#disassem_37
016E7C 65 E0 95 4B 
016E80 B9 72 FE FF 		      	bsr  	printf
016E84 14 EF 11 00 		      	addui	sp,sp,#8
016E88 3A 0D 00 00 		      	bra  	disassem_44
                	disassem_55:
016E8C FC 01 00 00 		      	push 	#disassem_38
016E90 65 E0 7D 4B 
016E94 39 70 FE FF 		      	bsr  	printf
016E98 14 EF 11 00 		      	addui	sp,sp,#8
016E9C BA 0A 00 00 		      	bra  	disassem_44
                	disassem_56:
016EA0 FC 01 00 00 		      	push 	#disassem_39
016EA4 65 E0 65 4B 
016EA8 B9 6D FE FF 		      	bsr  	printf
016EAC 14 EF 11 00 		      	addui	sp,sp,#8
016EB0 3A 08 00 00 		      	bra  	disassem_44
                	disassem_57:
016EB4 FC 01 00 00 		      	push 	#disassem_40
016EB8 65 E0 49 4B 
016EBC 39 6B FE FF 		      	bsr  	printf
016EC0 14 EF 11 00 		      	addui	sp,sp,#8
016EC4 BA 05 00 00 		      	bra  	disassem_44
                	disassem_58:
016EC8 FC 01 00 00 		      	push 	#disassem_41
016ECC 65 E0 2D 4B 
016ED0 B9 68 FE FF 		      	bsr  	printf
016ED4 14 EF 11 00 		      	addui	sp,sp,#8
016ED8 3A 03 00 00 		      	bra  	disassem_44
                	disassem_59:
016EDC E6 ED F1 FF 		      	push 	-8[bp]
016EE0 FC 01 00 00 		      	push 	#disassem_42
016EE4 65 E0 15 4B 
016EE8 B9 65 FE FF 		      	bsr  	printf
016EEC 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_44:
                	disassem_60:
016EF0 82 ED 01 1A 		      	mov  	sp,bp
016EF4 57 BF 11 00 		      	pop  	bp
016EF8 57 CF 11 00 		      	pop  	xlr
016EFC 57 FF 11 00 		      	pop  	lr
016F00 37 FF 01 00 		      	rtl  	#0
                	disassem_43:
016F04 C6 FD 11 00 		      	lw   	lr,8[bp]
016F08 E3 FD 21 00 		      	sw   	lr,16[bp]
016F0C BA FC FF FF 		      	bra  	disassem_60
                	DispMemAddress:
016F10 E7 EF 01 00 		      	push 	lr
016F14 67 EE 01 00 		      	push 	xlr
016F18 E7 ED 01 00 		      	push 	bp
016F1C 7C 01 00 00 		      	ldi  	xlr,#disassem_66
016F20 0A C0 C9 DF 
016F24 02 BF 01 1A 		      	mov  	bp,sp
016F28 15 EF 11 00 		      	subui	sp,sp,#8
016F2C C6 3D 50 00 		      	lw   	r3,40[bp]
016F30 E2 3D F8 FF 		      	sh   	r3,-4[bp]
016F34 C6 3D 30 00 		      	lw   	r3,24[bp]
016F38 BD 01 18 00 		      	beq  	r3,disassem_67
016F3C C6 3D 40 00 		      	lw   	r3,32[bp]
016F40 82 31 1E 70 		      	asli 	r3,r3,#15
016F44 C6 4D 50 00 		      	lw   	r4,40[bp]
016F48 02 42 22 78 		      	asri 	r4,r4,#17
016F4C 82 31 08 1A 		      	or   	r3,r3,r4
016F50 E7 E1 01 00 		      	push 	r3
016F54 FC 01 00 00 		      	push 	#disassem_62
016F58 65 E0 05 4B 
016F5C 39 57 FE FF 		      	bsr  	printf
016F60 14 EF 21 00 		      	addui	sp,sp,#16
016F64 3A 05 00 00 		      	bra  	disassem_68
                	disassem_67:
016F68 C4 3D F8 FF 		      	lh   	r3,-4[bp]
016F6C 82 31 00 24 		      	sxh  	r3,r3
016F70 82 31 00 24 		      	sxh  	r3,r3
016F74 82 31 22 78 		      	asri 	r3,r3,#17
016F78 E7 E1 01 00 		      	push 	r3
016F7C FC 01 00 00 		      	push 	#disassem_63
016F80 65 E0 F5 4A 
016F84 39 52 FE FF 		      	bsr  	printf
016F88 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_68:
016F8C C6 3D 50 00 		      	lw   	r3,40[bp]
016F90 82 31 0E 78 		      	asri 	r3,r3,#7
016F94 8C 31 3E 00 		      	and  	r3,r3,#31
016F98 BD 01 14 00 		      	beq  	r3,disassem_69
016F9C C6 3D 50 00 		      	lw   	r3,40[bp]
016FA0 82 31 0E 78 		      	asri 	r3,r3,#7
016FA4 8C 31 3E 00 		      	and  	r3,r3,#31
016FA8 E7 E1 01 00 		      	push 	r3
016FAC FC 01 00 00 		      	push 	#disassem_64
016FB0 65 E0 D5 4A 
016FB4 39 4C FE FF 		      	bsr  	printf
016FB8 14 EF 21 00 		      	addui	sp,sp,#16
016FBC BA 02 00 00 		      	bra  	disassem_70
                	disassem_69:
016FC0 FC 01 00 00 		      	push 	#disassem_65
016FC4 65 E0 C9 4A 
016FC8 B9 49 FE FF 		      	bsr  	printf
016FCC 14 EF 11 00 		      	addui	sp,sp,#8
                	disassem_70:
                	disassem_71:
016FD0 82 ED 01 1A 		      	mov  	sp,bp
016FD4 57 BF 11 00 		      	pop  	bp
016FD8 57 CF 11 00 		      	pop  	xlr
016FDC 57 FF 11 00 		      	pop  	lr
016FE0 37 FF 01 00 		      	rtl  	#0
                	disassem_66:
016FE4 C6 FD 11 00 		      	lw   	lr,8[bp]
016FE8 E3 FD 21 00 		      	sw   	lr,16[bp]
016FEC BA FC FF FF 		      	bra  	disassem_71
                	PrintSc:
016FF0 E7 EF 01 00 		      	push 	lr
016FF4 67 EE 01 00 		      	push 	xlr
016FF8 E7 ED 01 00 		      	push 	bp
016FFC 7C 01 00 00 		      	ldi  	xlr,#disassem_75
017000 0A C0 A1 E0 
017004 02 BF 01 1A 		      	mov  	bp,sp
017008 C6 3D 30 00 		      	lw   	r3,24[bp]
01700C 86 31 02 00 		      	cmp  	r3,r3,#1
017010 BD 51 0E 00 		      	ble  	r3,disassem_76
017014 E6 ED 31 00 		      	push 	24[bp]
017018 FC 01 00 00 		      	push 	#disassem_73
01701C 65 E0 AD 4A 
017020 B9 3E FE FF 		      	bsr  	printf
017024 14 EF 21 00 		      	addui	sp,sp,#16
017028 BA 02 00 00 		      	bra  	disassem_77
                	disassem_76:
01702C FC 01 00 00 		      	push 	#disassem_74
017030 65 E0 9D 4A 
017034 39 3C FE FF 		      	bsr  	printf
017038 14 EF 11 00 		      	addui	sp,sp,#8
                	disassem_77:
                	disassem_78:
01703C 82 ED 01 1A 		      	mov  	sp,bp
017040 57 BF 11 00 		      	pop  	bp
017044 57 CF 11 00 		      	pop  	xlr
017048 57 FF 11 00 		      	pop  	lr
01704C 37 FF 01 00 		      	rtl  	#0
                	disassem_75:
017050 C6 FD 11 00 		      	lw   	lr,8[bp]
017054 E3 FD 21 00 		      	sw   	lr,16[bp]
017058 BA FC FF FF 		      	bra  	disassem_78
                	DispBrk:
01705C E7 EF 01 00 		      	push 	lr
017060 67 EE 01 00 		      	push 	xlr
017064 E7 ED 01 00 		      	push 	bp
017068 7C 01 00 00 		      	ldi  	xlr,#disassem_84
01706C 0A C0 59 E2 
017070 02 BF 01 1A 		      	mov  	bp,sp
017074 15 EF 21 00 		      	subui	sp,sp,#16
017078 C5 3D 30 00 		      	lhu  	r3,24[bp]
01707C 8C 31 FE FF 		      	andi 	r3,r3,#-1
017080 82 31 3C 78 		      	asri 	r3,r3,#30
017084 8C 31 06 00 		      	and  	r3,r3,#3
017088 E3 3D F0 FF 		      	sw   	r3,-8[bp]
01708C C5 3D 30 00 		      	lhu  	r3,24[bp]
017090 8C 31 FE FF 		      	andi 	r3,r3,#-1
017094 82 31 22 78 		      	asri 	r3,r3,#17
017098 8C 31 FE 03 		      	and  	r3,r3,#511
01709C E3 3D E0 FF 		      	sw   	r3,-16[bp]
0170A0 C6 3D F0 FF 		      	lw   	r3,-8[bp]
0170A4 86 41 00 00 		      	cmp  	r4,r3,#0
0170A8 3D 02 10 00 		      	beq  	r4,disassem_86
0170AC 86 41 02 00 		      	cmp  	r4,r3,#1
0170B0 3D 02 16 00 		      	beq  	r4,disassem_87
0170B4 86 41 04 00 		      	cmp  	r4,r3,#2
0170B8 3D 02 1C 00 		      	beq  	r4,disassem_88
0170BC 86 41 06 00 		      	cmp  	r4,r3,#3
0170C0 3D 02 22 00 		      	beq  	r4,disassem_89
0170C4 BA 0A 00 00 		      	bra  	disassem_85
                	disassem_86:
0170C8 E6 ED E1 FF 		      	push 	-16[bp]
0170CC FC 01 00 00 		      	push 	#disassem_80
0170D0 65 E0 6D 4A 
0170D4 39 28 FE FF 		      	bsr  	printf
0170D8 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_87:
0170DC E6 ED E1 FF 		      	push 	-16[bp]
0170E0 FC 01 00 00 		      	push 	#disassem_81
0170E4 65 E0 3D 4A 
0170E8 B9 25 FE FF 		      	bsr  	printf
0170EC 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_88:
0170F0 E6 ED E1 FF 		      	push 	-16[bp]
0170F4 FC 01 00 00 		      	push 	#disassem_82
0170F8 65 E0 0D 4A 
0170FC 39 23 FE FF 		      	bsr  	printf
017100 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_89:
017104 E6 ED E1 FF 		      	push 	-16[bp]
017108 FC 01 00 00 		      	push 	#disassem_83
01710C 65 E0 DD 49 
017110 B9 20 FE FF 		      	bsr  	printf
017114 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_85:
                	disassem_90:
017118 82 ED 01 1A 		      	mov  	sp,bp
01711C 57 BF 11 00 		      	pop  	bp
017120 57 CF 11 00 		      	pop  	xlr
017124 57 FF 11 00 		      	pop  	lr
017128 37 FF 01 00 		      	rtl  	#0
                	disassem_84:
01712C C6 FD 11 00 		      	lw   	lr,8[bp]
017130 E3 FD 21 00 		      	sw   	lr,16[bp]
017134 BA FC FF FF 		      	bra  	disassem_90
                	DispIndexedAddr:
017138 E7 EF 01 00 		      	push 	lr
01713C 67 EE 01 00 		      	push 	xlr
017140 E7 ED 01 00 		      	push 	bp
017144 7C 01 00 00 		      	ldi  	xlr,#disassem_97
017148 0A C0 29 E5 
01714C 02 BF 01 1A 		      	mov  	bp,sp
017150 15 EF 51 00 		      	subui	sp,sp,#40
017154 C5 3D 50 00 		      	lhu  	r3,40[bp]
017158 8C 31 FE FF 		      	andi 	r3,r3,#-1
01715C 82 31 30 78 		      	asri 	r3,r3,#24
017160 E3 3D F0 FF 		      	sw   	r3,-8[bp]
017164 C5 3D 50 00 		      	lhu  	r3,40[bp]
017168 8C 31 FE FF 		      	andi 	r3,r3,#-1
01716C 82 31 0E 78 		      	asri 	r3,r3,#7
017170 8C 31 3E 00 		      	and  	r3,r3,#31
017174 E3 3D E0 FF 		      	sw   	r3,-16[bp]
017178 C5 3D 50 00 		      	lhu  	r3,40[bp]
01717C 8C 31 FE FF 		      	andi 	r3,r3,#-1
017180 82 31 18 78 		      	asri 	r3,r3,#12
017184 8C 31 3E 00 		      	and  	r3,r3,#31
017188 E3 3D C0 FF 		      	sw   	r3,-32[bp]
01718C C5 3D 50 00 		      	lhu  	r3,40[bp]
017190 8C 31 FE FF 		      	andi 	r3,r3,#-1
017194 82 31 22 78 		      	asri 	r3,r3,#17
017198 8C 31 3E 00 		      	and  	r3,r3,#31
01719C E3 3D D0 FF 		      	sw   	r3,-24[bp]
0171A0 C5 3D 50 00 		      	lhu  	r3,40[bp]
0171A4 8C 31 FE FF 		      	andi 	r3,r3,#-1
0171A8 82 31 2C 78 		      	asri 	r3,r3,#22
0171AC 8C 31 06 00 		      	and  	r3,r3,#3
0171B0 E3 3D B0 FF 		      	sw   	r3,-40[bp]
0171B4 0A 30 02 00 		      	ldi  	r3,#1
0171B8 C6 4D B0 FF 		      	lw   	r4,-40[bp]
0171BC 82 31 08 60 		      	asl  	r3,r3,r4
0171C0 E3 3D B0 FF 		      	sw   	r3,-40[bp]
0171C4 C5 3D 50 00 		      	lhu  	r3,40[bp]
0171C8 E7 E1 01 00 		      	push 	r3
0171CC E6 ED 31 00 		      	push 	24[bp]
0171D0 39 22 FF FF 		      	bsr  	DumpInsnBytes
0171D4 14 EF 21 00 		      	addui	sp,sp,#16
0171D8 E6 ED C1 FF 		      	push 	-32[bp]
0171DC E6 ED 41 00 		      	push 	32[bp]
0171E0 FC 01 00 00 		      	push 	#disassem_92
0171E4 65 E0 BD 49 
0171E8 B9 05 FE FF 		      	bsr  	printf
0171EC 14 EF 31 00 		      	addui	sp,sp,#24
0171F0 C6 3D F0 FF 		      	lw   	r3,-8[bp]
0171F4 BD 01 0C 00 		      	beq  	r3,disassem_98
0171F8 E6 ED F1 FF 		      	push 	-8[bp]
0171FC FC 01 00 00 		      	push 	#disassem_93
017200 65 E0 AD 49 
017204 39 02 FE FF 		      	bsr  	printf
017208 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_98:
01720C C6 3D E0 FF 		      	lw   	r3,-16[bp]
017210 BD 01 16 00 		      	beq  	r3,disassem_100
017214 C6 3D D0 FF 		      	lw   	r3,-24[bp]
017218 BD 01 12 00 		      	beq  	r3,disassem_100
01721C FC 01 00 00 		      	push 	#disassem_94
017220 65 E0 89 49 
017224 39 FE FD FF 		      	bsr  	printf
017228 14 EF 11 00 		      	addui	sp,sp,#8
01722C E6 ED B1 FF 		      	push 	-40[bp]
017230 39 B8 FF FF 		      	bsr  	PrintSc
017234 14 EF 11 00 		      	addui	sp,sp,#8
017238 3A 09 00 00 		      	bra  	disassem_101
                	disassem_100:
01723C C6 3D E0 FF 		      	lw   	r3,-16[bp]
017240 BD 11 14 00 		      	bne  	r3,disassem_102
017244 E6 ED D1 FF 		      	push 	-24[bp]
017248 FC 01 00 00 		      	push 	#disassem_95
01724C 65 E0 75 49 
017250 B9 F8 FD FF 		      	bsr  	printf
017254 14 EF 21 00 		      	addui	sp,sp,#16
017258 E6 ED B1 FF 		      	push 	-40[bp]
01725C B9 B2 FF FF 		      	bsr  	PrintSc
017260 14 EF 11 00 		      	addui	sp,sp,#8
017264 BA 03 00 00 		      	bra  	disassem_103
                	disassem_102:
017268 C6 3D D0 FF 		      	lw   	r3,-24[bp]
01726C BD 11 0A 00 		      	bne  	r3,disassem_104
017270 FC 01 00 00 		      	push 	#disassem_96
017274 65 E0 55 49 
017278 B9 F3 FD FF 		      	bsr  	printf
01727C 14 EF 11 00 		      	addui	sp,sp,#8
                	disassem_104:
                	disassem_103:
                	disassem_101:
                	disassem_106:
017280 82 ED 01 1A 		      	mov  	sp,bp
017284 57 BF 11 00 		      	pop  	bp
017288 57 CF 11 00 		      	pop  	xlr
01728C 57 FF 11 00 		      	pop  	lr
017290 37 FF 01 00 		      	rtl  	#0
                	disassem_97:
017294 C6 FD 11 00 		      	lw   	lr,8[bp]
017298 E3 FD 21 00 		      	sw   	lr,16[bp]
01729C BA FC FF FF 		      	bra  	disassem_106
                	DispLS:
0172A0 E7 EF 01 00 		      	push 	lr
0172A4 67 EE 01 00 		      	push 	xlr
0172A8 E7 ED 01 00 		      	push 	bp
0172AC 7C 01 00 00 		      	ldi  	xlr,#disassem_109
0172B0 0A C0 21 E6 
0172B4 02 BF 01 1A 		      	mov  	bp,sp
0172B8 E6 ED 71 00 		      	push 	56[bp]
0172BC E6 ED 31 00 		      	push 	24[bp]
0172C0 39 04 FF FF 		      	bsr  	DumpInsnBytes
0172C4 14 EF 21 00 		      	addui	sp,sp,#16
0172C8 E6 ED 41 00 		      	push 	32[bp]
0172CC FC 01 00 00 		      	push 	#disassem_108
0172D0 65 E0 45 49 
0172D4 39 E8 FD FF 		      	bsr  	printf
0172D8 14 EF 21 00 		      	addui	sp,sp,#16
0172DC E6 ED 71 00 		      	push 	56[bp]
0172E0 39 1C FF FF 		      	bsr  	DispRstc
0172E4 14 EF 11 00 		      	addui	sp,sp,#8
0172E8 E6 ED 71 00 		      	push 	56[bp]
0172EC E6 ED 61 00 		      	push 	48[bp]
0172F0 E6 ED 51 00 		      	push 	40[bp]
0172F4 B9 83 FF FF 		      	bsr  	DispMemAddress
0172F8 14 EF 31 00 		      	addui	sp,sp,#24
                	disassem_110:
0172FC 82 ED 01 1A 		      	mov  	sp,bp
017300 57 BF 11 00 		      	pop  	bp
017304 57 CF 11 00 		      	pop  	xlr
017308 57 FF 11 00 		      	pop  	lr
01730C 37 FF 01 00 		      	rtl  	#0
                	disassem_109:
017310 C6 FD 11 00 		      	lw   	lr,8[bp]
017314 E3 FD 21 00 		      	sw   	lr,16[bp]
017318 BA FC FF FF 		      	bra  	disassem_110
                	DispRI:
01731C E7 EF 01 00 		      	push 	lr
017320 67 EE 01 00 		      	push 	xlr
017324 E7 ED 01 00 		      	push 	bp
017328 7C 01 00 00 		      	ldi  	xlr,#disassem_115
01732C 0A C0 D1 E7 
017330 02 BF 01 1A 		      	mov  	bp,sp
017334 15 EF 11 00 		      	subui	sp,sp,#8
017338 C6 3D 70 00 		      	lw   	r3,56[bp]
01733C E2 3D F8 FF 		      	sh   	r3,-4[bp]
017340 E6 ED 71 00 		      	push 	56[bp]
017344 E6 ED 31 00 		      	push 	24[bp]
017348 39 F3 FE FF 		      	bsr  	DumpInsnBytes
01734C 14 EF 21 00 		      	addui	sp,sp,#16
017350 E6 ED 41 00 		      	push 	32[bp]
017354 FC 01 00 00 		      	push 	#disassem_112
017358 65 E0 35 49 
01735C 39 D7 FD FF 		      	bsr  	printf
017360 14 EF 21 00 		      	addui	sp,sp,#16
017364 E6 ED 71 00 		      	push 	56[bp]
017368 39 0B FF FF 		      	bsr  	DispRstc
01736C 14 EF 11 00 		      	addui	sp,sp,#8
017370 E6 ED 71 00 		      	push 	56[bp]
017374 B9 14 FF FF 		      	bsr  	DispRac
017378 14 EF 11 00 		      	addui	sp,sp,#8
01737C C6 3D 50 00 		      	lw   	r3,40[bp]
017380 BD 01 18 00 		      	beq  	r3,disassem_116
017384 C6 3D 60 00 		      	lw   	r3,48[bp]
017388 82 31 1E 70 		      	asli 	r3,r3,#15
01738C C6 4D 70 00 		      	lw   	r4,56[bp]
017390 02 42 22 78 		      	asri 	r4,r4,#17
017394 82 31 08 1A 		      	or   	r3,r3,r4
017398 E7 E1 01 00 		      	push 	r3
01739C FC 01 00 00 		      	push 	#disassem_113
0173A0 65 E0 19 49 
0173A4 39 CE FD FF 		      	bsr  	printf
0173A8 14 EF 21 00 		      	addui	sp,sp,#16
0173AC 3A 05 00 00 		      	bra  	disassem_117
                	disassem_116:
0173B0 C4 3D F8 FF 		      	lh   	r3,-4[bp]
0173B4 82 31 00 24 		      	sxh  	r3,r3
0173B8 82 31 00 24 		      	sxh  	r3,r3
0173BC 82 31 22 78 		      	asri 	r3,r3,#17
0173C0 E7 E1 01 00 		      	push 	r3
0173C4 FC 01 00 00 		      	push 	#disassem_114
0173C8 65 E0 FD 48 
0173CC 39 C9 FD FF 		      	bsr  	printf
0173D0 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_117:
                	disassem_118:
0173D4 82 ED 01 1A 		      	mov  	sp,bp
0173D8 57 BF 11 00 		      	pop  	bp
0173DC 57 CF 11 00 		      	pop  	xlr
0173E0 57 FF 11 00 		      	pop  	lr
0173E4 37 FF 01 00 		      	rtl  	#0
                	disassem_115:
0173E8 C6 FD 11 00 		      	lw   	lr,8[bp]
0173EC E3 FD 21 00 		      	sw   	lr,16[bp]
0173F0 BA FC FF FF 		      	bra  	disassem_118
                	public code DispBcc:
0173F4 E7 EF 01 00 		      	push 	lr
0173F8 67 EE 01 00 		      	push 	xlr
0173FC E7 ED 01 00 		      	push 	bp
017400 7C 01 00 00 		      	ldi  	xlr,#disassem_121
017404 0A C0 59 E9 
017408 02 BF 01 1A 		      	mov  	bp,sp
01740C 15 EF 21 00 		      	subui	sp,sp,#16
017410 C6 3D 50 00 		      	lw   	r3,40[bp]
017414 82 31 22 78 		      	asri 	r3,r3,#17
017418 7C 00 00 00 		      	and  	r3,r3,#32767
01741C 8C 31 FE FF 
017420 82 31 04 70 		      	asli 	r3,r3,#2
017424 E3 3D E0 FF 		      	sw   	r3,-16[bp]
017428 C6 3D 50 00 		      	lw   	r3,40[bp]
01742C 7C 00 80 FF 		      	and  	r3,r3,#-2147483648
017430 8C 31 00 00 
017434 BD 01 0A 00 		      	beq  	r3,disassem_122
017438 C6 3D E0 FF 		      	lw   	r3,-16[bp]
01743C 7C FF FF FF 		      	ori  	r3,r3,#-65536
017440 8D 31 00 00 
017444 E3 3D E0 FF 		      	sw   	r3,-16[bp]
                	disassem_122:
017448 E6 ED 51 00 		      	push 	40[bp]
01744C E6 ED 31 00 		      	push 	24[bp]
017450 39 D2 FE FF 		      	bsr  	DumpInsnBytes
017454 14 EF 21 00 		      	addui	sp,sp,#16
017458 E6 ED 41 00 		      	push 	32[bp]
01745C FC 01 00 00 		      	push 	#disassem_119
017460 65 E0 ED 48 
017464 39 B6 FD FF 		      	bsr  	printf
017468 14 EF 21 00 		      	addui	sp,sp,#16
01746C E6 ED 51 00 		      	push 	40[bp]
017470 39 F5 FE FF 		      	bsr  	DispRac
017474 14 EF 11 00 		      	addui	sp,sp,#8
017478 C6 3D 30 00 		      	lw   	r3,24[bp]
01747C C6 4D E0 FF 		      	lw   	r4,-16[bp]
017480 82 31 08 28 		      	addu 	r3,r3,r4
017484 E7 E1 01 00 		      	push 	r3
017488 FC 01 00 00 		      	push 	#disassem_120
01748C 65 E0 D1 48 
017490 B9 B0 FD FF 		      	bsr  	printf
017494 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_124:
017498 82 ED 01 1A 		      	mov  	sp,bp
01749C 57 BF 11 00 		      	pop  	bp
0174A0 57 CF 11 00 		      	pop  	xlr
0174A4 57 FF 11 00 		      	pop  	lr
0174A8 37 FF 01 00 		      	rtl  	#0
                	disassem_121:
0174AC C6 FD 11 00 		      	lw   	lr,8[bp]
0174B0 E3 FD 21 00 		      	sw   	lr,16[bp]
0174B4 BA FC FF FF 		      	bra  	disassem_124
                	endpublic
                	
                	public code DispRR:
0174B8 E7 EF 01 00 		      	push 	lr
0174BC 67 EE 01 00 		      	push 	xlr
0174C0 E7 ED 01 00 		      	push 	bp
0174C4 7C 01 00 00 		      	ldi  	xlr,#disassem_129
0174C8 0A C0 99 EB 
0174CC 02 BF 01 1A 		      	mov  	bp,sp
0174D0 15 EF 21 00 		      	subui	sp,sp,#16
0174D4 C5 3D 50 00 		      	lhu  	r3,40[bp]
0174D8 8C 31 FE FF 		      	andi 	r3,r3,#-1
0174DC 82 31 32 78 		      	asri 	r3,r3,#25
0174E0 E3 3D F0 FF 		      	sw   	r3,-8[bp]
0174E4 C5 3D 50 00 		      	lhu  	r3,40[bp]
0174E8 8C 31 FE FF 		      	andi 	r3,r3,#-1
0174EC 82 31 22 78 		      	asri 	r3,r3,#17
0174F0 8C 31 3E 00 		      	and  	r3,r3,#31
0174F4 E3 3D E0 FF 		      	sw   	r3,-16[bp]
0174F8 C5 3D 50 00 		      	lhu  	r3,40[bp]
0174FC E7 E1 01 00 		      	push 	r3
017500 E6 ED 31 00 		      	push 	24[bp]
017504 B9 BB FE FF 		      	bsr  	DumpInsnBytes
017508 14 EF 21 00 		      	addui	sp,sp,#16
01750C C6 3D F0 FF 		      	lw   	r3,-8[bp]
017510 86 31 1C 00 		      	cmp  	r3,r3,#14
017514 BD 11 30 00 		      	bne  	r3,disassem_130
017518 C6 3D E0 FF 		      	lw   	r3,-16[bp]
01751C BD 11 2C 00 		      	bne  	r3,disassem_130
017520 FC 01 00 00 		      	push 	#disassem_125
017524 65 E0 B5 48 
017528 B9 9D FD FF 		      	bsr  	printf
01752C 14 EF 11 00 		      	addui	sp,sp,#8
017530 C5 3D 50 00 		      	lhu  	r3,40[bp]
017534 E7 E1 01 00 		      	push 	r3
017538 39 D1 FE FF 		      	bsr  	DispRstc
01753C 14 EF 11 00 		      	addui	sp,sp,#8
017540 C5 3D 50 00 		      	lhu  	r3,40[bp]
017544 E7 E1 01 00 		      	push 	r3
017548 39 E5 FE FF 		      	bsr  	DispRa
01754C 14 EF 11 00 		      	addui	sp,sp,#8
017550 FC 01 00 00 		      	push 	#disassem_126
017554 65 E0 A9 48 
017558 B9 97 FD FF 		      	bsr  	printf
01755C 14 EF 11 00 		      	addui	sp,sp,#8
                	disassem_132:
017560 82 ED 01 1A 		      	mov  	sp,bp
017564 57 BF 11 00 		      	pop  	bp
017568 57 CF 11 00 		      	pop  	xlr
01756C 57 FF 11 00 		      	pop  	lr
017570 37 FF 01 00 		      	rtl  	#0
                	disassem_130:
017574 E6 ED 41 00 		      	push 	32[bp]
017578 FC 01 00 00 		      	push 	#disassem_127
01757C 65 E0 99 48 
017580 B9 92 FD FF 		      	bsr  	printf
017584 14 EF 21 00 		      	addui	sp,sp,#16
017588 C5 3D 50 00 		      	lhu  	r3,40[bp]
01758C E7 E1 01 00 		      	push 	r3
017590 39 C6 FE FF 		      	bsr  	DispRstc
017594 14 EF 11 00 		      	addui	sp,sp,#8
017598 C5 3D 50 00 		      	lhu  	r3,40[bp]
01759C E7 E1 01 00 		      	push 	r3
0175A0 39 CF FE FF 		      	bsr  	DispRac
0175A4 14 EF 11 00 		      	addui	sp,sp,#8
0175A8 C5 3D 50 00 		      	lhu  	r3,40[bp]
0175AC E7 E1 01 00 		      	push 	r3
0175B0 39 E3 FE FF 		      	bsr  	DispRb
0175B4 14 EF 11 00 		      	addui	sp,sp,#8
0175B8 FC 01 00 00 		      	push 	#disassem_128
0175BC 65 E0 8D 48 
0175C0 B9 8A FD FF 		      	bsr  	printf
0175C4 14 EF 11 00 		      	addui	sp,sp,#8
0175C8 3A F3 FF FF 		      	bra  	disassem_132
                	disassem_129:
0175CC C6 FD 11 00 		      	lw   	lr,8[bp]
0175D0 E3 FD 21 00 		      	sw   	lr,16[bp]
0175D4 BA F1 FF FF 		      	bra  	disassem_132
                	endpublic
                	
                	public code disassem:
0175D8 E7 EF 01 00 		      	push 	lr
0175DC 67 EE 01 00 		      	push 	xlr
0175E0 E7 ED 01 00 		      	push 	bp
0175E4 FC 01 00 00 		      	ldi  	xlr,#disassem_218
0175E8 0A C0 11 0E 
0175EC 02 BF 01 1A 		      	mov  	bp,sp
0175F0 15 EF C1 00 		      	subui	sp,sp,#96
0175F4 E7 E5 01 00 		      	push 	r11
0175F8 67 E6 01 00 		      	push 	r12
0175FC C6 BD 30 00 		      	lw   	r11,24[bp]
017600 0A C0 00 00 		      	ldi  	r12,#0
017604 E3 0D B0 FF 		      	sw   	r0,-40[bp]
017608 E3 0D A0 FF 		      	sw   	r0,-48[bp]
01760C 0A 30 02 00 		      	ldi  	r3,#1
017610 E3 3D 50 FF 		      	sw   	r3,-88[bp]
017614 E3 0D 40 FF 		      	sw   	r0,-96[bp]
                	disassem_219:
017618 C6 35 00 00 		      	lw   	r3,[r11]
01761C C6 4D 40 00 		      	lw   	r4,32[bp]
017620 82 31 08 0C 		      	cmp  	r3,r3,r4
017624 BD 11 08 00 		      	bne  	r3,disassem_221
017628 39 87 FE FF 		      	bsr  	reverse_video
01762C 0A 30 02 00 		      	ldi  	r3,#1
017630 E3 3D 40 FF 		      	sw   	r3,-96[bp]
                	disassem_221:
017634 C6 35 00 00 		      	lw   	r3,[r11]
017638 82 31 04 78 		      	asri 	r3,r3,#2
01763C E3 3D 70 FF 		      	sw   	r3,-72[bp]
017640 C6 3D 70 FF 		      	lw   	r3,-72[bp]
017644 82 31 04 70 		      	asli 	r3,r3,#2
017648 4D 46 06 00 		      	lhu  	r4,0[r12+r3]
01764C E2 4D E8 FF 		      	sh   	r4,-12[bp]
017650 C4 3D E8 FF 		      	lh   	r3,-12[bp]
017654 E2 3D 68 FF 		      	sh   	r3,-76[bp]
017658 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
01765C 8C 31 FE 00 		      	and  	r3,r3,#127
017660 E3 3D D0 FF 		      	sw   	r3,-24[bp]
017664 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017668 8C 31 FE FF 		      	andi 	r3,r3,#-1
01766C 82 31 32 78 		      	asri 	r3,r3,#25
017670 8C 31 FE 00 		      	and  	r3,r3,#127
017674 E3 3D C0 FF 		      	sw   	r3,-32[bp]
017678 C6 3D D0 FF 		      	lw   	r3,-24[bp]
01767C 86 41 F8 00 		      	cmp  	r4,r3,#124
017680 3D 02 CC 00 		      	beq  	r4,disassem_224
017684 86 41 04 00 		      	cmp  	r4,r3,#2
017688 3D 02 10 01 		      	beq  	r4,disassem_225
01768C 86 41 08 00 		      	cmp  	r4,r3,#4
017690 3D 02 32 03 		      	beq  	r4,disassem_226
017694 86 41 28 00 		      	cmp  	r4,r3,#20
017698 3D 02 42 03 		      	beq  	r4,disassem_227
01769C 86 41 0A 00 		      	cmp  	r4,r3,#5
0176A0 3D 02 52 03 		      	beq  	r4,disassem_228
0176A4 86 41 2A 00 		      	cmp  	r4,r3,#21
0176A8 3D 02 62 03 		      	beq  	r4,disassem_229
0176AC 86 41 0C 00 		      	cmp  	r4,r3,#6
0176B0 3D 02 72 03 		      	beq  	r4,disassem_230
0176B4 86 41 2C 00 		      	cmp  	r4,r3,#22
0176B8 3D 02 82 03 		      	beq  	r4,disassem_231
0176BC 86 41 0E 00 		      	cmp  	r4,r3,#7
0176C0 3D 02 92 03 		      	beq  	r4,disassem_232
0176C4 86 41 2E 00 		      	cmp  	r4,r3,#23
0176C8 3D 02 A2 03 		      	beq  	r4,disassem_233
0176CC 86 41 10 00 		      	cmp  	r4,r3,#8
0176D0 3D 02 B2 03 		      	beq  	r4,disassem_234
0176D4 86 41 30 00 		      	cmp  	r4,r3,#24
0176D8 3D 02 C2 03 		      	beq  	r4,disassem_235
0176DC 86 41 18 00 		      	cmp  	r4,r3,#12
0176E0 3D 02 D2 03 		      	beq  	r4,disassem_236
0176E4 86 41 1A 00 		      	cmp  	r4,r3,#13
0176E8 3D 02 E2 03 		      	beq  	r4,disassem_237
0176EC 86 41 1C 00 		      	cmp  	r4,r3,#14
0176F0 3D 02 F2 03 		      	beq  	r4,disassem_238
0176F4 86 41 7A 00 		      	cmp  	r4,r3,#61
0176F8 3D 02 02 04 		      	beq  	r4,disassem_239
0176FC 86 41 70 00 		      	cmp  	r4,r3,#56
017700 3D 02 9A 04 		      	beq  	r4,disassem_240
017704 86 41 72 00 		      	cmp  	r4,r3,#57
017708 3D 02 A0 04 		      	beq  	r4,disassem_241
01770C 86 41 74 00 		      	cmp  	r4,r3,#58
017710 3D 02 D4 04 		      	beq  	r4,disassem_242
017714 86 41 6E 00 		      	cmp  	r4,r3,#55
017718 3D 02 08 05 		      	beq  	r4,disassem_243
01771C 86 41 76 00 		      	cmp  	r4,r3,#59
017720 3D 02 22 05 		      	beq  	r4,disassem_244
017724 86 41 80 00 		      	cmp  	r4,r3,#64
017728 3D 02 3C 05 		      	beq  	r4,disassem_245
01772C 86 41 82 00 		      	cmp  	r4,r3,#65
017730 3D 02 4C 05 		      	beq  	r4,disassem_246
017734 86 41 84 00 		      	cmp  	r4,r3,#66
017738 3D 02 5C 05 		      	beq  	r4,disassem_247
01773C 86 41 86 00 		      	cmp  	r4,r3,#67
017740 3D 02 6C 05 		      	beq  	r4,disassem_248
017744 86 41 88 00 		      	cmp  	r4,r3,#68
017748 3D 02 7C 05 		      	beq  	r4,disassem_249
01774C 86 41 8A 00 		      	cmp  	r4,r3,#69
017750 3D 02 8C 05 		      	beq  	r4,disassem_250
017754 86 41 8C 00 		      	cmp  	r4,r3,#70
017758 3D 02 9C 05 		      	beq  	r4,disassem_251
01775C 86 41 8E 00 		      	cmp  	r4,r3,#71
017760 3D 02 AC 05 		      	beq  	r4,disassem_252
017764 86 41 90 00 		      	cmp  	r4,r3,#72
017768 3D 02 BC 05 		      	beq  	r4,disassem_253
01776C 86 41 92 00 		      	cmp  	r4,r3,#73
017770 3D 02 C8 05 		      	beq  	r4,disassem_254
017774 86 41 94 00 		      	cmp  	r4,r3,#74
017778 3D 02 D4 05 		      	beq  	r4,disassem_255
01777C 86 41 96 00 		      	cmp  	r4,r3,#75
017780 3D 02 E0 05 		      	beq  	r4,disassem_256
017784 86 41 98 00 		      	cmp  	r4,r3,#76
017788 3D 02 EC 05 		      	beq  	r4,disassem_257
01778C 86 41 9A 00 		      	cmp  	r4,r3,#77
017790 3D 02 F8 05 		      	beq  	r4,disassem_258
017794 86 41 9C 00 		      	cmp  	r4,r3,#78
017798 3D 02 04 06 		      	beq  	r4,disassem_259
01779C 86 41 9E 00 		      	cmp  	r4,r3,#79
0177A0 3D 02 10 06 		      	beq  	r4,disassem_260
0177A4 86 41 C0 00 		      	cmp  	r4,r3,#96
0177A8 3D 02 1C 06 		      	beq  	r4,disassem_261
0177AC 86 41 C2 00 		      	cmp  	r4,r3,#97
0177B0 3D 02 2C 06 		      	beq  	r4,disassem_262
0177B4 86 41 C4 00 		      	cmp  	r4,r3,#98
0177B8 3D 02 3C 06 		      	beq  	r4,disassem_263
0177BC 86 41 C6 00 		      	cmp  	r4,r3,#99
0177C0 3D 02 4C 06 		      	beq  	r4,disassem_264
0177C4 86 41 D0 00 		      	cmp  	r4,r3,#104
0177C8 3D 02 5C 06 		      	beq  	r4,disassem_265
0177CC 86 41 D2 00 		      	cmp  	r4,r3,#105
0177D0 3D 02 68 06 		      	beq  	r4,disassem_266
0177D4 86 41 D4 00 		      	cmp  	r4,r3,#106
0177D8 3D 02 74 06 		      	beq  	r4,disassem_267
0177DC 86 41 D6 00 		      	cmp  	r4,r3,#107
0177E0 3D 02 80 06 		      	beq  	r4,disassem_268
0177E4 86 41 B8 00 		      	cmp  	r4,r3,#92
0177E8 3D 02 8C 06 		      	beq  	r4,disassem_269
0177EC 86 41 DC 00 		      	cmp  	r4,r3,#110
0177F0 3D 02 9C 06 		      	beq  	r4,disassem_270
0177F4 86 41 CE 00 		      	cmp  	r4,r3,#103
0177F8 3D 02 AC 06 		      	beq  	r4,disassem_271
0177FC 86 41 AE 00 		      	cmp  	r4,r3,#87
017800 3D 02 CC 06 		      	beq  	r4,disassem_272
017804 86 41 7E 00 		      	cmp  	r4,r3,#63
017808 3D 02 EC 06 		      	beq  	r4,disassem_273
01780C 86 41 14 00 		      	cmp  	r4,r3,#10
017810 3D 02 FC 06 		      	beq  	r4,disassem_274
017814 3A D1 01 00 		      	bra  	disassem_275
                	disassem_224:
017818 0A 30 02 00 		      	ldi  	r3,#1
01781C E3 3D B0 FF 		      	sw   	r3,-40[bp]
017820 C6 3D 50 FF 		      	lw   	r3,-88[bp]
017824 BD 01 1E 00 		      	beq  	r3,disassem_276
017828 C4 3D 68 FF 		      	lh   	r3,-76[bp]
01782C 82 31 00 24 		      	sxh  	r3,r3
017830 82 31 00 24 		      	sxh  	r3,r3
017834 82 31 0E 78 		      	asri 	r3,r3,#7
017838 E3 3D A0 FF 		      	sw   	r3,-48[bp]
01783C C6 3D A0 FF 		      	lw   	r3,-48[bp]
017840 7C 00 01 00 		      	and  	r3,r3,#16777216
017844 8C 31 00 00 
017848 BD 01 0A 00 		      	beq  	r3,disassem_278
01784C C6 3D A0 FF 		      	lw   	r3,-48[bp]
017850 7C 00 FF FF 		      	ori  	r3,r3,#-16777216
017854 8D 31 00 00 
017858 E3 3D A0 FF 		      	sw   	r3,-48[bp]
                	disassem_278:
01785C 3A 04 00 00 		      	bra  	disassem_277
                	disassem_276:
017860 C6 3D A0 FF 		      	lw   	r3,-48[bp]
017864 82 31 32 70 		      	asli 	r3,r3,#25
017868 C5 4D E8 FF 		      	lhu  	r4,-12[bp]
01786C 0C 42 FE FF 		      	andi 	r4,r4,#-1
017870 02 42 0E 78 		      	asri 	r4,r4,#7
017874 82 31 08 1A 		      	or   	r3,r3,r4
017878 E3 3D A0 FF 		      	sw   	r3,-48[bp]
                	disassem_277:
01787C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017880 E7 E1 01 00 		      	push 	r3
017884 E6 E5 01 00 		      	push 	[r11]
017888 39 4B FE FF 		      	bsr  	DumpInsnBytes
01788C 14 EF 21 00 		      	addui	sp,sp,#16
017890 FC 01 00 00 		      	push 	#disassem_133
017894 65 E0 75 48 
017898 B9 2F FD FF 		      	bsr  	printf
01789C 14 EF 11 00 		      	addui	sp,sp,#8
0178A0 E3 0D 50 FF 		      	sw   	r0,-88[bp]
0178A4 3A C4 01 00 		      	bra  	disassem_223
                	disassem_225:
0178A8 C6 3D C0 FF 		      	lw   	r3,-32[bp]
0178AC 86 41 6E 00 		      	cmp  	r4,r3,#55
0178B0 3D 02 40 00 		      	beq  	r4,disassem_281
0178B4 86 41 08 00 		      	cmp  	r4,r3,#4
0178B8 3D 02 EC 00 		      	beq  	r4,disassem_282
0178BC 86 41 28 00 		      	cmp  	r4,r3,#20
0178C0 3D 02 F8 00 		      	beq  	r4,disassem_283
0178C4 86 41 0A 00 		      	cmp  	r4,r3,#5
0178C8 3D 02 04 01 		      	beq  	r4,disassem_284
0178CC 86 41 2A 00 		      	cmp  	r4,r3,#21
0178D0 3D 02 10 01 		      	beq  	r4,disassem_285
0178D4 86 41 0C 00 		      	cmp  	r4,r3,#6
0178D8 3D 02 1C 01 		      	beq  	r4,disassem_286
0178DC 86 41 2C 00 		      	cmp  	r4,r3,#22
0178E0 3D 02 28 01 		      	beq  	r4,disassem_287
0178E4 86 41 0E 00 		      	cmp  	r4,r3,#7
0178E8 3D 02 34 01 		      	beq  	r4,disassem_288
0178EC 86 41 2E 00 		      	cmp  	r4,r3,#23
0178F0 3D 02 40 01 		      	beq  	r4,disassem_289
0178F4 86 41 10 00 		      	cmp  	r4,r3,#8
0178F8 3D 02 4C 01 		      	beq  	r4,disassem_290
0178FC 86 41 30 00 		      	cmp  	r4,r3,#24
017900 3D 02 58 01 		      	beq  	r4,disassem_291
017904 86 41 18 00 		      	cmp  	r4,r3,#12
017908 3D 02 64 01 		      	beq  	r4,disassem_292
01790C 86 41 1A 00 		      	cmp  	r4,r3,#13
017910 3D 02 70 01 		      	beq  	r4,disassem_293
017914 86 41 1C 00 		      	cmp  	r4,r3,#14
017918 3D 02 7C 01 		      	beq  	r4,disassem_294
01791C 86 41 3E 00 		      	cmp  	r4,r3,#31
017920 3D 02 88 01 		      	beq  	r4,disassem_295
017924 86 41 3C 00 		      	cmp  	r4,r3,#30
017928 3D 02 B0 01 		      	beq  	r4,disassem_296
01792C BA 78 00 00 		      	bra  	disassem_280
                	disassem_281:
017930 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017934 8C 31 FE FF 		      	andi 	r3,r3,#-1
017938 82 31 22 78 		      	asri 	r3,r3,#17
01793C 8C 31 3E 00 		      	and  	r3,r3,#31
017940 86 41 00 00 		      	cmp  	r4,r3,#0
017944 3D 02 18 00 		      	beq  	r4,disassem_298
017948 86 41 02 00 		      	cmp  	r4,r3,#1
01794C 3D 02 28 00 		      	beq  	r4,disassem_299
017950 86 41 06 00 		      	cmp  	r4,r3,#3
017954 3D 02 38 00 		      	beq  	r4,disassem_300
017958 86 41 3A 00 		      	cmp  	r4,r3,#29
01795C 3D 02 48 00 		      	beq  	r4,disassem_301
017960 86 41 3C 00 		      	cmp  	r4,r3,#30
017964 3D 02 58 00 		      	beq  	r4,disassem_302
017968 86 41 3E 00 		      	cmp  	r4,r3,#31
01796C 3D 02 68 00 		      	beq  	r4,disassem_303
017970 BA 1E 00 00 		      	bra  	disassem_304
                	disassem_298:
017974 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017978 E7 E1 01 00 		      	push 	r3
01797C E6 E5 01 00 		      	push 	[r11]
017980 39 2C FE FF 		      	bsr  	DumpInsnBytes
017984 14 EF 21 00 		      	addui	sp,sp,#16
017988 FC 01 00 00 		      	push 	#disassem_134
01798C 65 E0 5D 48 
017990 B9 10 FD FF 		      	bsr  	printf
017994 14 EF 11 00 		      	addui	sp,sp,#8
017998 BA 1E 00 00 		      	bra  	disassem_297
                	disassem_299:
01799C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0179A0 E7 E1 01 00 		      	push 	r3
0179A4 E6 E5 01 00 		      	push 	[r11]
0179A8 39 27 FE FF 		      	bsr  	DumpInsnBytes
0179AC 14 EF 21 00 		      	addui	sp,sp,#16
0179B0 FC 01 00 00 		      	push 	#disassem_135
0179B4 65 E0 45 48 
0179B8 B9 0B FD FF 		      	bsr  	printf
0179BC 14 EF 11 00 		      	addui	sp,sp,#8
0179C0 BA 19 00 00 		      	bra  	disassem_297
                	disassem_300:
0179C4 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0179C8 E7 E1 01 00 		      	push 	r3
0179CC E6 E5 01 00 		      	push 	[r11]
0179D0 39 22 FE FF 		      	bsr  	DumpInsnBytes
0179D4 14 EF 21 00 		      	addui	sp,sp,#16
0179D8 FC 01 00 00 		      	push 	#disassem_136
0179DC 65 E0 2D 48 
0179E0 B9 06 FD FF 		      	bsr  	printf
0179E4 14 EF 11 00 		      	addui	sp,sp,#8
0179E8 BA 14 00 00 		      	bra  	disassem_297
                	disassem_301:
0179EC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0179F0 E7 E1 01 00 		      	push 	r3
0179F4 E6 E5 01 00 		      	push 	[r11]
0179F8 39 1D FE FF 		      	bsr  	DumpInsnBytes
0179FC 14 EF 21 00 		      	addui	sp,sp,#16
017A00 FC 01 00 00 		      	push 	#disassem_137
017A04 65 E0 15 48 
017A08 B9 01 FD FF 		      	bsr  	printf
017A0C 14 EF 11 00 		      	addui	sp,sp,#8
017A10 BA 0F 00 00 		      	bra  	disassem_297
                	disassem_302:
017A14 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017A18 E7 E1 01 00 		      	push 	r3
017A1C E6 E5 01 00 		      	push 	[r11]
017A20 39 18 FE FF 		      	bsr  	DumpInsnBytes
017A24 14 EF 21 00 		      	addui	sp,sp,#16
017A28 FC 01 00 00 		      	push 	#disassem_138
017A2C 65 E0 FD 47 
017A30 B9 FC FC FF 		      	bsr  	printf
017A34 14 EF 11 00 		      	addui	sp,sp,#8
017A38 BA 0A 00 00 		      	bra  	disassem_297
                	disassem_303:
017A3C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017A40 E7 E1 01 00 		      	push 	r3
017A44 E6 E5 01 00 		      	push 	[r11]
017A48 39 13 FE FF 		      	bsr  	DumpInsnBytes
017A4C 14 EF 21 00 		      	addui	sp,sp,#16
017A50 FC 01 00 00 		      	push 	#disassem_139
017A54 65 E0 E5 47 
017A58 B9 F7 FC FF 		      	bsr  	printf
017A5C 14 EF 11 00 		      	addui	sp,sp,#8
017A60 BA 05 00 00 		      	bra  	disassem_297
                	disassem_304:
017A64 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017A68 E7 E1 01 00 		      	push 	r3
017A6C E6 E5 01 00 		      	push 	[r11]
017A70 39 0E FE FF 		      	bsr  	DumpInsnBytes
017A74 14 EF 21 00 		      	addui	sp,sp,#16
017A78 FC 01 00 00 		      	push 	#disassem_140
017A7C 65 E0 CD 47 
017A80 B9 F2 FC FF 		      	bsr  	printf
017A84 14 EF 11 00 		      	addui	sp,sp,#8
017A88 BA 00 00 00 		      	bra  	disassem_297
                	disassem_297:
017A8C BA 4C 00 00 		      	bra  	disassem_280
                	disassem_282:
017A90 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017A94 E7 E1 01 00 		      	push 	r3
017A98 FC 01 00 00 		      	push 	#disassem_141
017A9C 65 E0 B5 47 
017AA0 E6 E5 01 00 		      	push 	[r11]
017AA4 B9 42 FF FF 		      	bsr  	DispRR
017AA8 14 EF 31 00 		      	addui	sp,sp,#24
017AAC BA 48 00 00 		      	bra  	disassem_280
                	disassem_283:
017AB0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017AB4 E7 E1 01 00 		      	push 	r3
017AB8 FC 01 00 00 		      	push 	#disassem_142
017ABC 65 E0 9D 47 
017AC0 E6 E5 01 00 		      	push 	[r11]
017AC4 B9 3E FF FF 		      	bsr  	DispRR
017AC8 14 EF 31 00 		      	addui	sp,sp,#24
017ACC BA 44 00 00 		      	bra  	disassem_280
                	disassem_284:
017AD0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017AD4 E7 E1 01 00 		      	push 	r3
017AD8 FC 01 00 00 		      	push 	#disassem_143
017ADC 65 E0 85 47 
017AE0 E6 E5 01 00 		      	push 	[r11]
017AE4 B9 3A FF FF 		      	bsr  	DispRR
017AE8 14 EF 31 00 		      	addui	sp,sp,#24
017AEC BA 40 00 00 		      	bra  	disassem_280
                	disassem_285:
017AF0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017AF4 E7 E1 01 00 		      	push 	r3
017AF8 FC 01 00 00 		      	push 	#disassem_144
017AFC 65 E0 6D 47 
017B00 E6 E5 01 00 		      	push 	[r11]
017B04 B9 36 FF FF 		      	bsr  	DispRR
017B08 14 EF 31 00 		      	addui	sp,sp,#24
017B0C BA 3C 00 00 		      	bra  	disassem_280
                	disassem_286:
017B10 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017B14 E7 E1 01 00 		      	push 	r3
017B18 FC 01 00 00 		      	push 	#disassem_145
017B1C 65 E0 55 47 
017B20 E6 E5 01 00 		      	push 	[r11]
017B24 B9 32 FF FF 		      	bsr  	DispRR
017B28 14 EF 31 00 		      	addui	sp,sp,#24
017B2C BA 38 00 00 		      	bra  	disassem_280
                	disassem_287:
017B30 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017B34 E7 E1 01 00 		      	push 	r3
017B38 FC 01 00 00 		      	push 	#disassem_146
017B3C 65 E0 3D 47 
017B40 E6 E5 01 00 		      	push 	[r11]
017B44 B9 2E FF FF 		      	bsr  	DispRR
017B48 14 EF 31 00 		      	addui	sp,sp,#24
017B4C BA 34 00 00 		      	bra  	disassem_280
                	disassem_288:
017B50 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017B54 E7 E1 01 00 		      	push 	r3
017B58 FC 01 00 00 		      	push 	#disassem_147
017B5C 65 E0 25 47 
017B60 E6 E5 01 00 		      	push 	[r11]
017B64 B9 2A FF FF 		      	bsr  	DispRR
017B68 14 EF 31 00 		      	addui	sp,sp,#24
017B6C BA 30 00 00 		      	bra  	disassem_280
                	disassem_289:
017B70 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017B74 E7 E1 01 00 		      	push 	r3
017B78 FC 01 00 00 		      	push 	#disassem_148
017B7C 65 E0 0D 47 
017B80 E6 E5 01 00 		      	push 	[r11]
017B84 B9 26 FF FF 		      	bsr  	DispRR
017B88 14 EF 31 00 		      	addui	sp,sp,#24
017B8C BA 2C 00 00 		      	bra  	disassem_280
                	disassem_290:
017B90 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017B94 E7 E1 01 00 		      	push 	r3
017B98 FC 01 00 00 		      	push 	#disassem_149
017B9C 65 E0 F5 46 
017BA0 E6 E5 01 00 		      	push 	[r11]
017BA4 B9 22 FF FF 		      	bsr  	DispRR
017BA8 14 EF 31 00 		      	addui	sp,sp,#24
017BAC BA 28 00 00 		      	bra  	disassem_280
                	disassem_291:
017BB0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017BB4 E7 E1 01 00 		      	push 	r3
017BB8 FC 01 00 00 		      	push 	#disassem_150
017BBC 65 E0 DD 46 
017BC0 E6 E5 01 00 		      	push 	[r11]
017BC4 B9 1E FF FF 		      	bsr  	DispRR
017BC8 14 EF 31 00 		      	addui	sp,sp,#24
017BCC BA 24 00 00 		      	bra  	disassem_280
                	disassem_292:
017BD0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017BD4 E7 E1 01 00 		      	push 	r3
017BD8 FC 01 00 00 		      	push 	#disassem_151
017BDC 65 E0 C5 46 
017BE0 E6 E5 01 00 		      	push 	[r11]
017BE4 B9 1A FF FF 		      	bsr  	DispRR
017BE8 14 EF 31 00 		      	addui	sp,sp,#24
017BEC BA 20 00 00 		      	bra  	disassem_280
                	disassem_293:
017BF0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017BF4 E7 E1 01 00 		      	push 	r3
017BF8 FC 01 00 00 		      	push 	#disassem_152
017BFC 65 E0 AD 46 
017C00 E6 E5 01 00 		      	push 	[r11]
017C04 B9 16 FF FF 		      	bsr  	DispRR
017C08 14 EF 31 00 		      	addui	sp,sp,#24
017C0C BA 1C 00 00 		      	bra  	disassem_280
                	disassem_294:
017C10 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017C14 E7 E1 01 00 		      	push 	r3
017C18 FC 01 00 00 		      	push 	#disassem_153
017C1C 65 E0 95 46 
017C20 E6 E5 01 00 		      	push 	[r11]
017C24 B9 12 FF FF 		      	bsr  	DispRR
017C28 14 EF 31 00 		      	addui	sp,sp,#24
017C2C BA 18 00 00 		      	bra  	disassem_280
                	disassem_295:
017C30 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017C34 E7 E1 01 00 		      	push 	r3
017C38 E6 E5 01 00 		      	push 	[r11]
017C3C B9 D4 FD FF 		      	bsr  	DumpInsnBytes
017C40 14 EF 21 00 		      	addui	sp,sp,#16
017C44 FC 01 00 00 		      	push 	#disassem_154
017C48 65 E0 79 46 
017C4C 39 B9 FC FF 		      	bsr  	printf
017C50 14 EF 11 00 		      	addui	sp,sp,#8
017C54 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017C58 E7 E1 01 00 		      	push 	r3
017C5C B9 EC FD FF 		      	bsr  	DispRstc
017C60 14 EF 11 00 		      	addui	sp,sp,#8
017C64 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017C68 E7 E1 01 00 		      	push 	r3
017C6C B9 16 FE FF 		      	bsr  	DispSpr
017C70 14 EF 11 00 		      	addui	sp,sp,#8
017C74 FC 01 00 00 		      	push 	#disassem_155
017C78 65 E0 6D 46 
017C7C 39 B3 FC FF 		      	bsr  	printf
017C80 14 EF 11 00 		      	addui	sp,sp,#8
017C84 BA 0D 00 00 		      	bra  	disassem_280
                	disassem_296:
017C88 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017C8C E7 E1 01 00 		      	push 	r3
017C90 E6 E5 01 00 		      	push 	[r11]
017C94 B9 C9 FD FF 		      	bsr  	DumpInsnBytes
017C98 14 EF 21 00 		      	addui	sp,sp,#16
017C9C FC 01 00 00 		      	push 	#disassem_156
017CA0 65 E0 51 46 
017CA4 39 AE FC FF 		      	bsr  	printf
017CA8 14 EF 11 00 		      	addui	sp,sp,#8
017CAC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017CB0 E7 E1 01 00 		      	push 	r3
017CB4 B9 0D FE FF 		      	bsr  	DispSpr
017CB8 14 EF 11 00 		      	addui	sp,sp,#8
017CBC FC 01 00 00 		      	push 	#disassem_157
017CC0 65 E0 49 46 
017CC4 39 AA FC FF 		      	bsr  	printf
017CC8 14 EF 11 00 		      	addui	sp,sp,#8
017CCC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017CD0 E7 E1 01 00 		      	push 	r3
017CD4 B9 F3 FD FF 		      	bsr  	DispRa
017CD8 14 EF 11 00 		      	addui	sp,sp,#8
017CDC FC 01 00 00 		      	push 	#disassem_158
017CE0 65 E0 3D 46 
017CE4 39 A6 FC FF 		      	bsr  	printf
017CE8 14 EF 11 00 		      	addui	sp,sp,#8
017CEC BA 00 00 00 		      	bra  	disassem_280
                	disassem_280:
017CF0 BA 3A 01 00 		      	bra  	disassem_223
                	disassem_226:
017CF4 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017CF8 E7 E1 01 00 		      	push 	r3
017CFC E6 ED A1 FF 		      	push 	-48[bp]
017D00 E6 ED B1 FF 		      	push 	-40[bp]
017D04 FC 01 00 00 		      	push 	#disassem_159
017D08 65 E0 25 46 
017D0C E6 E5 01 00 		      	push 	[r11]
017D10 B9 C1 FE FF 		      	bsr  	DispRI
017D14 14 EF 51 00 		      	addui	sp,sp,#40
017D18 BA 35 01 00 		      	bra  	disassem_223
                	disassem_227:
017D1C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017D20 E7 E1 01 00 		      	push 	r3
017D24 E6 ED A1 FF 		      	push 	-48[bp]
017D28 E6 ED B1 FF 		      	push 	-40[bp]
017D2C FC 01 00 00 		      	push 	#disassem_160
017D30 65 E0 0D 46 
017D34 E6 E5 01 00 		      	push 	[r11]
017D38 B9 BC FE FF 		      	bsr  	DispRI
017D3C 14 EF 51 00 		      	addui	sp,sp,#40
017D40 BA 30 01 00 		      	bra  	disassem_223
                	disassem_228:
017D44 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017D48 E7 E1 01 00 		      	push 	r3
017D4C E6 ED A1 FF 		      	push 	-48[bp]
017D50 E6 ED B1 FF 		      	push 	-40[bp]
017D54 FC 01 00 00 		      	push 	#disassem_161
017D58 65 E0 F5 45 
017D5C E6 E5 01 00 		      	push 	[r11]
017D60 B9 B7 FE FF 		      	bsr  	DispRI
017D64 14 EF 51 00 		      	addui	sp,sp,#40
017D68 BA 2B 01 00 		      	bra  	disassem_223
                	disassem_229:
017D6C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017D70 E7 E1 01 00 		      	push 	r3
017D74 E6 ED A1 FF 		      	push 	-48[bp]
017D78 E6 ED B1 FF 		      	push 	-40[bp]
017D7C FC 01 00 00 		      	push 	#disassem_162
017D80 65 E0 DD 45 
017D84 E6 E5 01 00 		      	push 	[r11]
017D88 B9 B2 FE FF 		      	bsr  	DispRI
017D8C 14 EF 51 00 		      	addui	sp,sp,#40
017D90 BA 26 01 00 		      	bra  	disassem_223
                	disassem_230:
017D94 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017D98 E7 E1 01 00 		      	push 	r3
017D9C E6 ED A1 FF 		      	push 	-48[bp]
017DA0 E6 ED B1 FF 		      	push 	-40[bp]
017DA4 FC 01 00 00 		      	push 	#disassem_163
017DA8 65 E0 C5 45 
017DAC E6 E5 01 00 		      	push 	[r11]
017DB0 B9 AD FE FF 		      	bsr  	DispRI
017DB4 14 EF 51 00 		      	addui	sp,sp,#40
017DB8 BA 21 01 00 		      	bra  	disassem_223
                	disassem_231:
017DBC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017DC0 E7 E1 01 00 		      	push 	r3
017DC4 E6 ED A1 FF 		      	push 	-48[bp]
017DC8 E6 ED B1 FF 		      	push 	-40[bp]
017DCC FC 01 00 00 		      	push 	#disassem_164
017DD0 65 E0 AD 45 
017DD4 E6 E5 01 00 		      	push 	[r11]
017DD8 B9 A8 FE FF 		      	bsr  	DispRI
017DDC 14 EF 51 00 		      	addui	sp,sp,#40
017DE0 BA 1C 01 00 		      	bra  	disassem_223
                	disassem_232:
017DE4 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017DE8 E7 E1 01 00 		      	push 	r3
017DEC E6 ED A1 FF 		      	push 	-48[bp]
017DF0 E6 ED B1 FF 		      	push 	-40[bp]
017DF4 FC 01 00 00 		      	push 	#disassem_165
017DF8 65 E0 95 45 
017DFC E6 E5 01 00 		      	push 	[r11]
017E00 B9 A3 FE FF 		      	bsr  	DispRI
017E04 14 EF 51 00 		      	addui	sp,sp,#40
017E08 BA 17 01 00 		      	bra  	disassem_223
                	disassem_233:
017E0C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017E10 E7 E1 01 00 		      	push 	r3
017E14 E6 ED A1 FF 		      	push 	-48[bp]
017E18 E6 ED B1 FF 		      	push 	-40[bp]
017E1C FC 01 00 00 		      	push 	#disassem_166
017E20 65 E0 7D 45 
017E24 E6 E5 01 00 		      	push 	[r11]
017E28 B9 9E FE FF 		      	bsr  	DispRI
017E2C 14 EF 51 00 		      	addui	sp,sp,#40
017E30 BA 12 01 00 		      	bra  	disassem_223
                	disassem_234:
017E34 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017E38 E7 E1 01 00 		      	push 	r3
017E3C E6 ED A1 FF 		      	push 	-48[bp]
017E40 E6 ED B1 FF 		      	push 	-40[bp]
017E44 FC 01 00 00 		      	push 	#disassem_167
017E48 65 E0 65 45 
017E4C E6 E5 01 00 		      	push 	[r11]
017E50 B9 99 FE FF 		      	bsr  	DispRI
017E54 14 EF 51 00 		      	addui	sp,sp,#40
017E58 BA 0D 01 00 		      	bra  	disassem_223
                	disassem_235:
017E5C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017E60 E7 E1 01 00 		      	push 	r3
017E64 E6 ED A1 FF 		      	push 	-48[bp]
017E68 E6 ED B1 FF 		      	push 	-40[bp]
017E6C FC 01 00 00 		      	push 	#disassem_168
017E70 65 E0 4D 45 
017E74 E6 E5 01 00 		      	push 	[r11]
017E78 B9 94 FE FF 		      	bsr  	DispRI
017E7C 14 EF 51 00 		      	addui	sp,sp,#40
017E80 BA 08 01 00 		      	bra  	disassem_223
                	disassem_236:
017E84 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017E88 E7 E1 01 00 		      	push 	r3
017E8C E6 ED A1 FF 		      	push 	-48[bp]
017E90 E6 ED B1 FF 		      	push 	-40[bp]
017E94 FC 01 00 00 		      	push 	#disassem_169
017E98 65 E0 35 45 
017E9C E6 E5 01 00 		      	push 	[r11]
017EA0 B9 8F FE FF 		      	bsr  	DispRI
017EA4 14 EF 51 00 		      	addui	sp,sp,#40
017EA8 BA 03 01 00 		      	bra  	disassem_223
                	disassem_237:
017EAC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017EB0 E7 E1 01 00 		      	push 	r3
017EB4 E6 ED A1 FF 		      	push 	-48[bp]
017EB8 E6 ED B1 FF 		      	push 	-40[bp]
017EBC FC 01 00 00 		      	push 	#disassem_170
017EC0 65 E0 1D 45 
017EC4 E6 E5 01 00 		      	push 	[r11]
017EC8 B9 8A FE FF 		      	bsr  	DispRI
017ECC 14 EF 51 00 		      	addui	sp,sp,#40
017ED0 BA FE 00 00 		      	bra  	disassem_223
                	disassem_238:
017ED4 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017ED8 E7 E1 01 00 		      	push 	r3
017EDC E6 ED A1 FF 		      	push 	-48[bp]
017EE0 E6 ED B1 FF 		      	push 	-40[bp]
017EE4 FC 01 00 00 		      	push 	#disassem_171
017EE8 65 E0 05 45 
017EEC E6 E5 01 00 		      	push 	[r11]
017EF0 B9 85 FE FF 		      	bsr  	DispRI
017EF4 14 EF 51 00 		      	addui	sp,sp,#40
017EF8 BA F9 00 00 		      	bra  	disassem_223
                	disassem_239:
017EFC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017F00 8C 31 FE FF 		      	andi 	r3,r3,#-1
017F04 82 31 18 78 		      	asri 	r3,r3,#12
017F08 8C 31 0E 00 		      	and  	r3,r3,#7
017F0C 86 41 00 00 		      	cmp  	r4,r3,#0
017F10 3D 02 20 00 		      	beq  	r4,disassem_306
017F14 86 41 02 00 		      	cmp  	r4,r3,#1
017F18 3D 02 2C 00 		      	beq  	r4,disassem_307
017F1C 86 41 08 00 		      	cmp  	r4,r3,#4
017F20 3D 02 38 00 		      	beq  	r4,disassem_308
017F24 86 41 0A 00 		      	cmp  	r4,r3,#5
017F28 3D 02 44 00 		      	beq  	r4,disassem_309
017F2C 86 41 04 00 		      	cmp  	r4,r3,#2
017F30 3D 02 50 00 		      	beq  	r4,disassem_310
017F34 86 41 06 00 		      	cmp  	r4,r3,#3
017F38 3D 02 5C 00 		      	beq  	r4,disassem_311
017F3C 86 41 0C 00 		      	cmp  	r4,r3,#6
017F40 3D 02 68 00 		      	beq  	r4,disassem_312
017F44 86 41 0E 00 		      	cmp  	r4,r3,#7
017F48 3D 02 64 00 		      	beq  	r4,disassem_312
017F4C BA 1C 00 00 		      	bra  	disassem_305
                	disassem_306:
017F50 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017F54 E7 E1 01 00 		      	push 	r3
017F58 FC 01 00 00 		      	push 	#disassem_172
017F5C 65 E0 ED 44 
017F60 E6 E5 01 00 		      	push 	[r11]
017F64 39 92 FE FF 		      	bsr  	DispBcc
017F68 14 EF 31 00 		      	addui	sp,sp,#24
017F6C BA 18 00 00 		      	bra  	disassem_305
                	disassem_307:
017F70 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017F74 E7 E1 01 00 		      	push 	r3
017F78 FC 01 00 00 		      	push 	#disassem_173
017F7C 65 E0 D5 44 
017F80 E6 E5 01 00 		      	push 	[r11]
017F84 39 8E FE FF 		      	bsr  	DispBcc
017F88 14 EF 31 00 		      	addui	sp,sp,#24
017F8C BA 14 00 00 		      	bra  	disassem_305
                	disassem_308:
017F90 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017F94 E7 E1 01 00 		      	push 	r3
017F98 FC 01 00 00 		      	push 	#disassem_174
017F9C 65 E0 BD 44 
017FA0 E6 E5 01 00 		      	push 	[r11]
017FA4 39 8A FE FF 		      	bsr  	DispBcc
017FA8 14 EF 31 00 		      	addui	sp,sp,#24
017FAC BA 10 00 00 		      	bra  	disassem_305
                	disassem_309:
017FB0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017FB4 E7 E1 01 00 		      	push 	r3
017FB8 FC 01 00 00 		      	push 	#disassem_175
017FBC 65 E0 A5 44 
017FC0 E6 E5 01 00 		      	push 	[r11]
017FC4 39 86 FE FF 		      	bsr  	DispBcc
017FC8 14 EF 31 00 		      	addui	sp,sp,#24
017FCC BA 0C 00 00 		      	bra  	disassem_305
                	disassem_310:
017FD0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017FD4 E7 E1 01 00 		      	push 	r3
017FD8 FC 01 00 00 		      	push 	#disassem_176
017FDC 65 E0 8D 44 
017FE0 E6 E5 01 00 		      	push 	[r11]
017FE4 39 82 FE FF 		      	bsr  	DispBcc
017FE8 14 EF 31 00 		      	addui	sp,sp,#24
017FEC BA 08 00 00 		      	bra  	disassem_305
                	disassem_311:
017FF0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
017FF4 E7 E1 01 00 		      	push 	r3
017FF8 FC 01 00 00 		      	push 	#disassem_177
017FFC 65 E0 75 44 
018000 E6 E5 01 00 		      	push 	[r11]
018004 39 7E FE FF 		      	bsr  	DispBcc
018008 14 EF 31 00 		      	addui	sp,sp,#24
01800C BA 04 00 00 		      	bra  	disassem_305
                	disassem_312:
018010 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018014 E7 E1 01 00 		      	push 	r3
018018 FC 01 00 00 		      	push 	#disassem_178
01801C 65 E0 5D 44 
018020 E6 E5 01 00 		      	push 	[r11]
018024 39 7A FE FF 		      	bsr  	DispBcc
018028 14 EF 31 00 		      	addui	sp,sp,#24
01802C BA 00 00 00 		      	bra  	disassem_305
                	disassem_305:
018030 BA D2 00 00 		      	bra  	disassem_223
                	disassem_240:
018034 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018038 E7 E1 01 00 		      	push 	r3
01803C 39 04 FE FF 		      	bsr  	DispBrk
018040 14 EF 11 00 		      	addui	sp,sp,#8
018044 3A D0 00 00 		      	bra  	disassem_223
                	disassem_241:
018048 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
01804C E7 E1 01 00 		      	push 	r3
018050 E6 E5 01 00 		      	push 	[r11]
018054 B9 51 FD FF 		      	bsr  	DumpInsnBytes
018058 14 EF 21 00 		      	addui	sp,sp,#16
01805C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018060 8C 31 FE FF 		      	andi 	r3,r3,#-1
018064 82 31 0E 78 		      	asri 	r3,r3,#7
018068 E3 3D 80 FF 		      	sw   	r3,-64[bp]
01806C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018070 7C 00 80 FF 		      	and  	r3,r3,#-2147483648
018074 8C 31 00 00 
018078 BD 01 0A 00 		      	beq  	r3,disassem_313
01807C C6 3D 80 FF 		      	lw   	r3,-64[bp]
018080 7C 00 FF FF 		      	ori  	r3,r3,#-16777216
018084 8D 31 00 00 
018088 E3 3D 80 FF 		      	sw   	r3,-64[bp]
                	disassem_313:
01808C C6 35 00 00 		      	lw   	r3,[r11]
018090 C6 4D 80 FF 		      	lw   	r4,-64[bp]
018094 02 42 04 70 		      	asli 	r4,r4,#2
018098 82 31 08 28 		      	addu 	r3,r3,r4
01809C E3 3D 90 FF 		      	sw   	r3,-56[bp]
0180A0 E6 ED 91 FF 		      	push 	-56[bp]
0180A4 FC 01 00 00 		      	push 	#disassem_179
0180A8 65 E0 2D 44 
0180AC 39 2D FC FF 		      	bsr  	printf
0180B0 14 EF 21 00 		      	addui	sp,sp,#16
0180B4 3A C2 00 00 		      	bra  	disassem_223
                	disassem_242:
0180B8 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0180BC E7 E1 01 00 		      	push 	r3
0180C0 E6 E5 01 00 		      	push 	[r11]
0180C4 B9 43 FD FF 		      	bsr  	DumpInsnBytes
0180C8 14 EF 21 00 		      	addui	sp,sp,#16
0180CC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0180D0 8C 31 FE FF 		      	andi 	r3,r3,#-1
0180D4 82 31 0E 78 		      	asri 	r3,r3,#7
0180D8 E3 3D 80 FF 		      	sw   	r3,-64[bp]
0180DC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0180E0 7C 00 80 FF 		      	and  	r3,r3,#-2147483648
0180E4 8C 31 00 00 
0180E8 BD 01 0A 00 		      	beq  	r3,disassem_315
0180EC C6 3D 80 FF 		      	lw   	r3,-64[bp]
0180F0 7C 00 FF FF 		      	ori  	r3,r3,#-16777216
0180F4 8D 31 00 00 
0180F8 E3 3D 80 FF 		      	sw   	r3,-64[bp]
                	disassem_315:
0180FC C6 35 00 00 		      	lw   	r3,[r11]
018100 C6 4D 80 FF 		      	lw   	r4,-64[bp]
018104 02 42 04 70 		      	asli 	r4,r4,#2
018108 82 31 08 28 		      	addu 	r3,r3,r4
01810C E3 3D 90 FF 		      	sw   	r3,-56[bp]
018110 E6 ED 91 FF 		      	push 	-56[bp]
018114 FC 01 00 00 		      	push 	#disassem_180
018118 65 E0 FD 43 
01811C 39 1F FC FF 		      	bsr  	printf
018120 14 EF 21 00 		      	addui	sp,sp,#16
018124 3A B4 00 00 		      	bra  	disassem_223
                	disassem_243:
018128 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
01812C E7 E1 01 00 		      	push 	r3
018130 E6 E5 01 00 		      	push 	[r11]
018134 B9 35 FD FF 		      	bsr  	DumpInsnBytes
018138 14 EF 21 00 		      	addui	sp,sp,#16
01813C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018140 8C 31 FE FF 		      	andi 	r3,r3,#-1
018144 82 31 22 78 		      	asri 	r3,r3,#17
018148 E3 3D 90 FF 		      	sw   	r3,-56[bp]
01814C E6 ED 91 FF 		      	push 	-56[bp]
018150 FC 01 00 00 		      	push 	#disassem_181
018154 65 E0 CD 43 
018158 B9 17 FC FF 		      	bsr  	printf
01815C 14 EF 21 00 		      	addui	sp,sp,#16
018160 BA AC 00 00 		      	bra  	disassem_223
                	disassem_244:
018164 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018168 E7 E1 01 00 		      	push 	r3
01816C E6 E5 01 00 		      	push 	[r11]
018170 39 2E FD FF 		      	bsr  	DumpInsnBytes
018174 14 EF 21 00 		      	addui	sp,sp,#16
018178 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
01817C 8C 31 FE FF 		      	andi 	r3,r3,#-1
018180 82 31 22 78 		      	asri 	r3,r3,#17
018184 E3 3D 90 FF 		      	sw   	r3,-56[bp]
018188 E6 ED 91 FF 		      	push 	-56[bp]
01818C FC 01 00 00 		      	push 	#disassem_182
018190 65 E0 9D 43 
018194 39 10 FC FF 		      	bsr  	printf
018198 14 EF 21 00 		      	addui	sp,sp,#16
01819C 3A A5 00 00 		      	bra  	disassem_223
                	disassem_245:
0181A0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0181A4 E7 E1 01 00 		      	push 	r3
0181A8 E6 ED A1 FF 		      	push 	-48[bp]
0181AC E6 ED B1 FF 		      	push 	-40[bp]
0181B0 FC 01 00 00 		      	push 	#disassem_183
0181B4 65 E0 85 43 
0181B8 E6 E5 01 00 		      	push 	[r11]
0181BC B9 1C FE FF 		      	bsr  	DispLS
0181C0 14 EF 51 00 		      	addui	sp,sp,#40
0181C4 3A A0 00 00 		      	bra  	disassem_223
                	disassem_246:
0181C8 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0181CC E7 E1 01 00 		      	push 	r3
0181D0 E6 ED A1 FF 		      	push 	-48[bp]
0181D4 E6 ED B1 FF 		      	push 	-40[bp]
0181D8 FC 01 00 00 		      	push 	#disassem_184
0181DC 65 E0 6D 43 
0181E0 E6 E5 01 00 		      	push 	[r11]
0181E4 B9 17 FE FF 		      	bsr  	DispLS
0181E8 14 EF 51 00 		      	addui	sp,sp,#40
0181EC 3A 9B 00 00 		      	bra  	disassem_223
                	disassem_247:
0181F0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0181F4 E7 E1 01 00 		      	push 	r3
0181F8 E6 ED A1 FF 		      	push 	-48[bp]
0181FC E6 ED B1 FF 		      	push 	-40[bp]
018200 FC 01 00 00 		      	push 	#disassem_185
018204 65 E0 55 43 
018208 E6 E5 01 00 		      	push 	[r11]
01820C B9 12 FE FF 		      	bsr  	DispLS
018210 14 EF 51 00 		      	addui	sp,sp,#40
018214 3A 96 00 00 		      	bra  	disassem_223
                	disassem_248:
018218 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
01821C E7 E1 01 00 		      	push 	r3
018220 E6 ED A1 FF 		      	push 	-48[bp]
018224 E6 ED B1 FF 		      	push 	-40[bp]
018228 FC 01 00 00 		      	push 	#disassem_186
01822C 65 E0 3D 43 
018230 E6 E5 01 00 		      	push 	[r11]
018234 B9 0D FE FF 		      	bsr  	DispLS
018238 14 EF 51 00 		      	addui	sp,sp,#40
01823C 3A 91 00 00 		      	bra  	disassem_223
                	disassem_249:
018240 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018244 E7 E1 01 00 		      	push 	r3
018248 E6 ED A1 FF 		      	push 	-48[bp]
01824C E6 ED B1 FF 		      	push 	-40[bp]
018250 FC 01 00 00 		      	push 	#disassem_187
018254 65 E0 25 43 
018258 E6 E5 01 00 		      	push 	[r11]
01825C B9 08 FE FF 		      	bsr  	DispLS
018260 14 EF 51 00 		      	addui	sp,sp,#40
018264 3A 8C 00 00 		      	bra  	disassem_223
                	disassem_250:
018268 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
01826C E7 E1 01 00 		      	push 	r3
018270 E6 ED A1 FF 		      	push 	-48[bp]
018274 E6 ED B1 FF 		      	push 	-40[bp]
018278 FC 01 00 00 		      	push 	#disassem_188
01827C 65 E0 0D 43 
018280 E6 E5 01 00 		      	push 	[r11]
018284 B9 03 FE FF 		      	bsr  	DispLS
018288 14 EF 51 00 		      	addui	sp,sp,#40
01828C 3A 87 00 00 		      	bra  	disassem_223
                	disassem_251:
018290 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018294 E7 E1 01 00 		      	push 	r3
018298 E6 ED A1 FF 		      	push 	-48[bp]
01829C E6 ED B1 FF 		      	push 	-40[bp]
0182A0 FC 01 00 00 		      	push 	#disassem_189
0182A4 65 E0 F5 42 
0182A8 E6 E5 01 00 		      	push 	[r11]
0182AC B9 FE FD FF 		      	bsr  	DispLS
0182B0 14 EF 51 00 		      	addui	sp,sp,#40
0182B4 3A 82 00 00 		      	bra  	disassem_223
                	disassem_252:
0182B8 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0182BC E7 E1 01 00 		      	push 	r3
0182C0 E6 ED A1 FF 		      	push 	-48[bp]
0182C4 E6 ED B1 FF 		      	push 	-40[bp]
0182C8 FC 01 00 00 		      	push 	#disassem_190
0182CC 65 E0 DD 42 
0182D0 E6 E5 01 00 		      	push 	[r11]
0182D4 B9 F9 FD FF 		      	bsr  	DispLS
0182D8 14 EF 51 00 		      	addui	sp,sp,#40
0182DC 3A 7D 00 00 		      	bra  	disassem_223
                	disassem_253:
0182E0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0182E4 E7 E1 01 00 		      	push 	r3
0182E8 FC 01 00 00 		      	push 	#disassem_191
0182EC 65 E0 C5 42 
0182F0 E6 E5 01 00 		      	push 	[r11]
0182F4 B9 C8 FD FF 		      	bsr  	DispIndexedAddr
0182F8 14 EF 31 00 		      	addui	sp,sp,#24
0182FC 3A 79 00 00 		      	bra  	disassem_223
                	disassem_254:
018300 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018304 E7 E1 01 00 		      	push 	r3
018308 FC 01 00 00 		      	push 	#disassem_192
01830C 65 E0 AD 42 
018310 E6 E5 01 00 		      	push 	[r11]
018314 B9 C4 FD FF 		      	bsr  	DispIndexedAddr
018318 14 EF 31 00 		      	addui	sp,sp,#24
01831C 3A 75 00 00 		      	bra  	disassem_223
                	disassem_255:
018320 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018324 E7 E1 01 00 		      	push 	r3
018328 FC 01 00 00 		      	push 	#disassem_193
01832C 65 E0 95 42 
018330 E6 E5 01 00 		      	push 	[r11]
018334 B9 C0 FD FF 		      	bsr  	DispIndexedAddr
018338 14 EF 31 00 		      	addui	sp,sp,#24
01833C 3A 71 00 00 		      	bra  	disassem_223
                	disassem_256:
018340 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018344 E7 E1 01 00 		      	push 	r3
018348 FC 01 00 00 		      	push 	#disassem_194
01834C 65 E0 7D 42 
018350 E6 E5 01 00 		      	push 	[r11]
018354 B9 BC FD FF 		      	bsr  	DispIndexedAddr
018358 14 EF 31 00 		      	addui	sp,sp,#24
01835C 3A 6D 00 00 		      	bra  	disassem_223
                	disassem_257:
018360 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018364 E7 E1 01 00 		      	push 	r3
018368 FC 01 00 00 		      	push 	#disassem_195
01836C 65 E0 65 42 
018370 E6 E5 01 00 		      	push 	[r11]
018374 B9 B8 FD FF 		      	bsr  	DispIndexedAddr
018378 14 EF 31 00 		      	addui	sp,sp,#24
01837C 3A 69 00 00 		      	bra  	disassem_223
                	disassem_258:
018380 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018384 E7 E1 01 00 		      	push 	r3
018388 FC 01 00 00 		      	push 	#disassem_196
01838C 65 E0 4D 42 
018390 E6 E5 01 00 		      	push 	[r11]
018394 B9 B4 FD FF 		      	bsr  	DispIndexedAddr
018398 14 EF 31 00 		      	addui	sp,sp,#24
01839C 3A 65 00 00 		      	bra  	disassem_223
                	disassem_259:
0183A0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0183A4 E7 E1 01 00 		      	push 	r3
0183A8 FC 01 00 00 		      	push 	#disassem_197
0183AC 65 E0 35 42 
0183B0 E6 E5 01 00 		      	push 	[r11]
0183B4 B9 B0 FD FF 		      	bsr  	DispIndexedAddr
0183B8 14 EF 31 00 		      	addui	sp,sp,#24
0183BC 3A 61 00 00 		      	bra  	disassem_223
                	disassem_260:
0183C0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0183C4 E7 E1 01 00 		      	push 	r3
0183C8 FC 01 00 00 		      	push 	#disassem_198
0183CC 65 E0 1D 42 
0183D0 E6 E5 01 00 		      	push 	[r11]
0183D4 B9 AC FD FF 		      	bsr  	DispIndexedAddr
0183D8 14 EF 31 00 		      	addui	sp,sp,#24
0183DC 3A 5D 00 00 		      	bra  	disassem_223
                	disassem_261:
0183E0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0183E4 E7 E1 01 00 		      	push 	r3
0183E8 E6 ED A1 FF 		      	push 	-48[bp]
0183EC E6 ED B1 FF 		      	push 	-40[bp]
0183F0 FC 01 00 00 		      	push 	#disassem_199
0183F4 65 E0 05 42 
0183F8 E6 E5 01 00 		      	push 	[r11]
0183FC B9 D4 FD FF 		      	bsr  	DispLS
018400 14 EF 51 00 		      	addui	sp,sp,#40
018404 3A 58 00 00 		      	bra  	disassem_223
                	disassem_262:
018408 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
01840C E7 E1 01 00 		      	push 	r3
018410 E6 ED A1 FF 		      	push 	-48[bp]
018414 E6 ED B1 FF 		      	push 	-40[bp]
018418 FC 01 00 00 		      	push 	#disassem_200
01841C 65 E0 ED 41 
018420 E6 E5 01 00 		      	push 	[r11]
018424 B9 CF FD FF 		      	bsr  	DispLS
018428 14 EF 51 00 		      	addui	sp,sp,#40
01842C 3A 53 00 00 		      	bra  	disassem_223
                	disassem_263:
018430 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018434 E7 E1 01 00 		      	push 	r3
018438 E6 ED A1 FF 		      	push 	-48[bp]
01843C E6 ED B1 FF 		      	push 	-40[bp]
018440 FC 01 00 00 		      	push 	#disassem_201
018444 65 E0 D5 41 
018448 E6 E5 01 00 		      	push 	[r11]
01844C B9 CA FD FF 		      	bsr  	DispLS
018450 14 EF 51 00 		      	addui	sp,sp,#40
018454 3A 4E 00 00 		      	bra  	disassem_223
                	disassem_264:
018458 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
01845C E7 E1 01 00 		      	push 	r3
018460 E6 ED A1 FF 		      	push 	-48[bp]
018464 E6 ED B1 FF 		      	push 	-40[bp]
018468 FC 01 00 00 		      	push 	#disassem_202
01846C 65 E0 BD 41 
018470 E6 E5 01 00 		      	push 	[r11]
018474 B9 C5 FD FF 		      	bsr  	DispLS
018478 14 EF 51 00 		      	addui	sp,sp,#40
01847C 3A 49 00 00 		      	bra  	disassem_223
                	disassem_265:
018480 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018484 E7 E1 01 00 		      	push 	r3
018488 FC 01 00 00 		      	push 	#disassem_203
01848C 65 E0 A5 41 
018490 E6 E5 01 00 		      	push 	[r11]
018494 B9 94 FD FF 		      	bsr  	DispIndexedAddr
018498 14 EF 31 00 		      	addui	sp,sp,#24
01849C 3A 45 00 00 		      	bra  	disassem_223
                	disassem_266:
0184A0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0184A4 E7 E1 01 00 		      	push 	r3
0184A8 FC 01 00 00 		      	push 	#disassem_204
0184AC 65 E0 8D 41 
0184B0 E6 E5 01 00 		      	push 	[r11]
0184B4 B9 90 FD FF 		      	bsr  	DispIndexedAddr
0184B8 14 EF 31 00 		      	addui	sp,sp,#24
0184BC 3A 41 00 00 		      	bra  	disassem_223
                	disassem_267:
0184C0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0184C4 E7 E1 01 00 		      	push 	r3
0184C8 FC 01 00 00 		      	push 	#disassem_205
0184CC 65 E0 75 41 
0184D0 E6 E5 01 00 		      	push 	[r11]
0184D4 B9 8C FD FF 		      	bsr  	DispIndexedAddr
0184D8 14 EF 31 00 		      	addui	sp,sp,#24
0184DC 3A 3D 00 00 		      	bra  	disassem_223
                	disassem_268:
0184E0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0184E4 E7 E1 01 00 		      	push 	r3
0184E8 FC 01 00 00 		      	push 	#disassem_206
0184EC 65 E0 5D 41 
0184F0 E6 E5 01 00 		      	push 	[r11]
0184F4 B9 88 FD FF 		      	bsr  	DispIndexedAddr
0184F8 14 EF 31 00 		      	addui	sp,sp,#24
0184FC 3A 39 00 00 		      	bra  	disassem_223
                	disassem_269:
018500 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018504 E7 E1 01 00 		      	push 	r3
018508 E6 ED A1 FF 		      	push 	-48[bp]
01850C E6 ED B1 FF 		      	push 	-40[bp]
018510 FC 01 00 00 		      	push 	#disassem_207
018514 65 E0 45 41 
018518 E6 E5 01 00 		      	push 	[r11]
01851C B9 B0 FD FF 		      	bsr  	DispLS
018520 14 EF 51 00 		      	addui	sp,sp,#40
018524 3A 34 00 00 		      	bra  	disassem_223
                	disassem_270:
018528 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
01852C E7 E1 01 00 		      	push 	r3
018530 E6 ED A1 FF 		      	push 	-48[bp]
018534 E6 ED B1 FF 		      	push 	-40[bp]
018538 FC 01 00 00 		      	push 	#disassem_208
01853C 65 E0 2D 41 
018540 E6 E5 01 00 		      	push 	[r11]
018544 B9 AB FD FF 		      	bsr  	DispLS
018548 14 EF 51 00 		      	addui	sp,sp,#40
01854C 3A 2F 00 00 		      	bra  	disassem_223
                	disassem_271:
018550 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018554 E7 E1 01 00 		      	push 	r3
018558 E6 E5 01 00 		      	push 	[r11]
01855C B9 B0 FC FF 		      	bsr  	DumpInsnBytes
018560 14 EF 21 00 		      	addui	sp,sp,#16
018564 FC 01 00 00 		      	push 	#disassem_209
018568 65 E0 11 41 
01856C 39 95 FB FF 		      	bsr  	printf
018570 14 EF 11 00 		      	addui	sp,sp,#8
018574 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018578 E7 E1 01 00 		      	push 	r3
01857C B9 DE FC FF 		      	bsr  	DispRa
018580 14 EF 11 00 		      	addui	sp,sp,#8
018584 FC 01 00 00 		      	push 	#disassem_210
018588 65 E0 05 41 
01858C 39 91 FB FF 		      	bsr  	printf
018590 14 EF 11 00 		      	addui	sp,sp,#8
018594 3A 26 00 00 		      	bra  	disassem_223
                	disassem_272:
018598 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
01859C E7 E1 01 00 		      	push 	r3
0185A0 E6 E5 01 00 		      	push 	[r11]
0185A4 B9 A7 FC FF 		      	bsr  	DumpInsnBytes
0185A8 14 EF 21 00 		      	addui	sp,sp,#16
0185AC FC 01 00 00 		      	push 	#disassem_211
0185B0 65 E0 E9 40 
0185B4 39 8C FB FF 		      	bsr  	printf
0185B8 14 EF 11 00 		      	addui	sp,sp,#8
0185BC C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0185C0 E7 E1 01 00 		      	push 	r3
0185C4 B9 B4 FC FF 		      	bsr  	DispRst
0185C8 14 EF 11 00 		      	addui	sp,sp,#8
0185CC FC 01 00 00 		      	push 	#disassem_212
0185D0 65 E0 DD 40 
0185D4 39 88 FB FF 		      	bsr  	printf
0185D8 14 EF 11 00 		      	addui	sp,sp,#8
0185DC 3A 1D 00 00 		      	bra  	disassem_223
                	disassem_273:
0185E0 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0185E4 E7 E1 01 00 		      	push 	r3
0185E8 E6 E5 01 00 		      	push 	[r11]
0185EC B9 9E FC FF 		      	bsr  	DumpInsnBytes
0185F0 14 EF 21 00 		      	addui	sp,sp,#16
0185F4 FC 01 00 00 		      	push 	#disassem_213
0185F8 65 E0 C5 40 
0185FC 39 83 FB FF 		      	bsr  	printf
018600 14 EF 11 00 		      	addui	sp,sp,#8
018604 3A 18 00 00 		      	bra  	disassem_223
                	disassem_274:
018608 C5 3D E8 FF 		      	lhu  	r3,-12[bp]
01860C E7 E1 01 00 		      	push 	r3
018610 E6 E5 01 00 		      	push 	[r11]
018614 B9 99 FC FF 		      	bsr  	DumpInsnBytes
018618 14 EF 21 00 		      	addui	sp,sp,#16
01861C FC 01 00 00 		      	push 	#disassem_214
018620 65 E0 A9 40 
018624 39 7E FB FF 		      	bsr  	printf
018628 14 EF 11 00 		      	addui	sp,sp,#8
01862C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
018630 E7 E1 01 00 		      	push 	r3
018634 B9 B1 FC FF 		      	bsr  	DispRstc
018638 14 EF 11 00 		      	addui	sp,sp,#8
01863C C6 3D B0 FF 		      	lw   	r3,-40[bp]
018640 BD 01 1A 00 		      	beq  	r3,disassem_317
018644 C6 3D A0 FF 		      	lw   	r3,-48[bp]
018648 82 31 1E 70 		      	asli 	r3,r3,#15
01864C C5 4D E8 FF 		      	lhu  	r4,-12[bp]
018650 0C 42 FE FF 		      	andi 	r4,r4,#-1
018654 02 42 22 78 		      	asri 	r4,r4,#17
018658 82 31 08 1A 		      	or   	r3,r3,r4
01865C E7 E1 01 00 		      	push 	r3
018660 FC 01 00 00 		      	push 	#disassem_215
018664 65 E0 8D 40 
018668 B9 75 FB FF 		      	bsr  	printf
01866C 14 EF 21 00 		      	addui	sp,sp,#16
018670 3A 05 00 00 		      	bra  	disassem_318
                	disassem_317:
018674 C4 3D 68 FF 		      	lh   	r3,-76[bp]
018678 82 31 00 24 		      	sxh  	r3,r3
01867C 82 31 00 24 		      	sxh  	r3,r3
018680 82 31 22 78 		      	asri 	r3,r3,#17
018684 E7 E1 01 00 		      	push 	r3
018688 FC 01 00 00 		      	push 	#disassem_216
01868C 65 E0 71 40 
018690 B9 70 FB FF 		      	bsr  	printf
018694 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_318:
018698 BA 05 00 00 		      	bra  	disassem_223
                	disassem_275:
01869C C5 3D E8 FF 		      	lhu  	r3,-12[bp]
0186A0 E7 E1 01 00 		      	push 	r3
0186A4 E6 E5 01 00 		      	push 	[r11]
0186A8 39 87 FC FF 		      	bsr  	DumpInsnBytes
0186AC 14 EF 21 00 		      	addui	sp,sp,#16
0186B0 FC 01 00 00 		      	push 	#disassem_217
0186B4 65 E0 51 40 
0186B8 B9 6B FB FF 		      	bsr  	printf
0186BC 14 EF 11 00 		      	addui	sp,sp,#8
0186C0 BA 00 00 00 		      	bra  	disassem_223
                	disassem_223:
0186C4 C6 35 00 00 		      	lw   	r3,[r11]
0186C8 94 31 08 00 		      	addu 	r3,r3,#4
0186CC E3 35 00 00 		      	sw   	r3,[r11]
0186D0 C6 3D 40 FF 		      	lw   	r3,-96[bp]
0186D4 BD 01 06 00 		      	beq  	r3,disassem_319
0186D8 39 71 FC FF 		      	bsr  	reverse_video
0186DC E3 0D 40 FF 		      	sw   	r0,-96[bp]
                	disassem_319:
0186E0 C6 3D D0 FF 		      	lw   	r3,-24[bp]
0186E4 86 31 F8 00 		      	cmp  	r3,r3,#124
0186E8 BD 01 98 F7 		      	beq  	r3,disassem_219
                	disassem_220:
                	disassem_321:
0186EC 57 CF 10 00 		      	pop  	r12
0186F0 57 BF 10 00 		      	pop  	r11
0186F4 82 ED 01 1A 		      	mov  	sp,bp
0186F8 57 BF 11 00 		      	pop  	bp
0186FC 57 CF 11 00 		      	pop  	xlr
018700 57 FF 11 00 		      	pop  	lr
018704 37 FF 01 00 		      	rtl  	#0
                	disassem_218:
018708 C6 FD 11 00 		      	lw   	lr,8[bp]
01870C E3 FD 21 00 		      	sw   	lr,16[bp]
018710 BA FB FF FF 		      	bra  	disassem_321
                	endpublic
                	
                	public code disassem20:
018714 E7 EF 01 00 		      	push 	lr
018718 67 EE 01 00 		      	push 	xlr
01871C E7 ED 01 00 		      	push 	bp
018720 FC 01 00 00 		      	ldi  	xlr,#disassem_323
018724 0A C0 F9 0E 
018728 02 BF 01 1A 		      	mov  	bp,sp
01872C 15 EF 21 00 		      	subui	sp,sp,#16
018730 FC 01 00 00 		      	push 	#disassem_322
018734 65 E0 21 40 
018738 B9 5B FB FF 		      	bsr  	printf
01873C 14 EF 11 00 		      	addui	sp,sp,#8
018740 E3 0D F0 FF 		      	sw   	r0,-8[bp]
                	disassem_324:
018744 C6 3D F0 FF 		      	lw   	r3,-8[bp]
018748 86 31 20 00 		      	cmp  	r3,r3,#16
01874C BD 31 0E 00 		      	bge  	r3,disassem_325
018750 E6 ED 41 00 		      	push 	32[bp]
018754 E5 ED 31 00 		      	pea  	24[bp]
018758 39 D0 FD FF 		      	bsr  	disassem
01875C 14 EF 21 00 		      	addui	sp,sp,#16
                	disassem_326:
018760 E4 1D F0 FF 		      	inc  	-8[bp],#1
018764 3A FC FF FF 		      	bra  	disassem_324
                	disassem_325:
                	disassem_327:
018768 82 ED 01 1A 		      	mov  	sp,bp
01876C 57 BF 11 00 		      	pop  	bp
018770 57 CF 11 00 		      	pop  	xlr
018774 57 FF 11 00 		      	pop  	lr
018778 37 FF 01 00 		      	rtl  	#0
                	disassem_323:
01877C C6 FD 11 00 		      	lw   	lr,8[bp]
018780 E3 FD 21 00 		      	sw   	lr,16[bp]
018784 BA FC FF FF 		      	bra  	disassem_327
                	endpublic
                	
                		code
018788 00 00 00 00 		align	1
01878C 00 00 00 00 
                	
                	public code dbg_DisplayHelp:
018790 E7 EF 01 00 		      	push 	lr
018794 67 EE 01 00 		      	push 	xlr
018798 E7 ED 01 00 		      	push 	bp
01879C FC 01 00 00 		      	ldi  	xlr,#debugger_15
0187A0 0A C0 59 11 
0187A4 02 BF 01 1A 		      	mov  	bp,sp
0187A8 FC 01 00 00 		      	push 	#debugger_0
0187AC 65 E0 D5 5A 
0187B0 B9 4C FB FF 		      	bsr  	printf
0187B4 14 EF 11 00 		      	addui	sp,sp,#8
0187B8 FC 01 00 00 		      	push 	#debugger_1
0187BC 65 E0 AD 5A 
0187C0 B9 4A FB FF 		      	bsr  	printf
0187C4 14 EF 11 00 		      	addui	sp,sp,#8
0187C8 FC 01 00 00 		      	push 	#debugger_2
0187CC 65 E0 D1 59 
0187D0 B9 48 FB FF 		      	bsr  	printf
0187D4 14 EF 11 00 		      	addui	sp,sp,#8
0187D8 FC 01 00 00 		      	push 	#debugger_3
0187DC 65 E0 81 59 
0187E0 B9 46 FB FF 		      	bsr  	printf
0187E4 14 EF 11 00 		      	addui	sp,sp,#8
0187E8 FC 01 00 00 		      	push 	#debugger_4
0187EC 65 E0 BD 58 
0187F0 B9 44 FB FF 		      	bsr  	printf
0187F4 14 EF 11 00 		      	addui	sp,sp,#8
0187F8 FC 01 00 00 		      	push 	#debugger_5
0187FC 65 E0 DD 57 
018800 B9 42 FB FF 		      	bsr  	printf
018804 14 EF 11 00 		      	addui	sp,sp,#8
018808 FC 01 00 00 		      	push 	#debugger_6
01880C 65 E0 FD 56 
018810 B9 40 FB FF 		      	bsr  	printf
018814 14 EF 11 00 		      	addui	sp,sp,#8
018818 FC 01 00 00 		      	push 	#debugger_7
01881C 65 E0 29 56 
018820 B9 3E FB FF 		      	bsr  	printf
018824 14 EF 11 00 		      	addui	sp,sp,#8
018828 FC 01 00 00 		      	push 	#debugger_8
01882C 65 E0 51 55 
018830 B9 3C FB FF 		      	bsr  	printf
018834 14 EF 11 00 		      	addui	sp,sp,#8
018838 FC 01 00 00 		      	push 	#debugger_9
01883C 65 E0 AD 54 
018840 B9 3A FB FF 		      	bsr  	printf
018844 14 EF 11 00 		      	addui	sp,sp,#8
018848 FC 01 00 00 		      	push 	#debugger_10
01884C 65 E0 CD 53 
018850 B9 38 FB FF 		      	bsr  	printf
018854 14 EF 11 00 		      	addui	sp,sp,#8
018858 FC 01 00 00 		      	push 	#debugger_11
01885C 65 E0 F1 52 
018860 B9 36 FB FF 		      	bsr  	printf
018864 14 EF 11 00 		      	addui	sp,sp,#8
018868 FC 01 00 00 		      	push 	#debugger_12
01886C 65 E0 41 52 
018870 B9 34 FB FF 		      	bsr  	printf
018874 14 EF 11 00 		      	addui	sp,sp,#8
018878 FC 01 00 00 		      	push 	#debugger_13
01887C 65 E0 F1 51 
018880 B9 32 FB FF 		      	bsr  	printf
018884 14 EF 11 00 		      	addui	sp,sp,#8
018888 FC 01 00 00 		      	push 	#debugger_14
01888C 65 E0 D5 51 
018890 B9 30 FB FF 		      	bsr  	printf
018894 14 EF 11 00 		      	addui	sp,sp,#8
                	debugger_16:
018898 82 ED 01 1A 		      	mov  	sp,bp
01889C 57 BF 11 00 		      	pop  	bp
0188A0 57 CF 11 00 		      	pop  	xlr
0188A4 57 FF 11 00 		      	pop  	lr
0188A8 37 FF 01 00 		      	rtl  	#0
                	debugger_15:
0188AC C6 FD 11 00 		      	lw   	lr,8[bp]
0188B0 E3 FD 21 00 		      	sw   	lr,16[bp]
0188B4 BA FC FF FF 		      	bra  	debugger_16
                	endpublic
                	
                	public code GetVBR:
0188B8 15 EF 21 00 		      	subui	sp,sp,#16
0188BC E7 ED 01 00 		      	push 	bp
0188C0 02 BF 01 1A 		      	mov  	bp,sp
0188C4 02 10 14 3E 		      	     	        mfspr r1,vbr
                	    
                	debugger_18:
0188C8 82 ED 01 1A 		      	mov  	sp,bp
0188CC 57 BF 11 00 		      	pop  	bp
0188D0 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code set_vector:
0188D4 E7 EF 01 00 		      	push 	lr
0188D8 67 EE 01 00 		      	push 	xlr
0188DC E7 ED 01 00 		      	push 	bp
0188E0 FC 01 00 00 		      	ldi  	xlr,#debugger_19
0188E4 0A C0 91 12 
0188E8 02 BF 01 1A 		      	mov  	bp,sp
0188EC C6 3D 30 00 		      	lw   	r3,24[bp]
0188F0 96 31 FE 03 		      	cmpu 	r3,r3,#511
0188F4 BD 51 0C 00 		      	ble  	r3,debugger_20
                	debugger_22:
0188F8 82 ED 01 1A 		      	mov  	sp,bp
0188FC 57 BF 11 00 		      	pop  	bp
018900 57 CF 11 00 		      	pop  	xlr
018904 57 FF 11 00 		      	pop  	lr
018908 37 FF 01 00 		      	rtl  	#0
                	debugger_20:
01890C C6 3D 40 00 		      	lw   	r3,32[bp]
018910 BD 01 08 00 		      	beq  	r3,debugger_25
018914 C6 3D 40 00 		      	lw   	r3,32[bp]
018918 8C 31 06 00 		      	and  	r3,r3,#3
01891C BD 01 04 00 		      	beq  	r3,debugger_23
                	debugger_25:
018920 3A FB FF FF 		      	bra  	debugger_22
                	debugger_23:
018924 C6 3D 30 00 		      	lw   	r3,24[bp]
018928 82 31 06 70 		      	asli 	r3,r3,#3
01892C E7 E1 01 00 		      	push 	r3
018930 39 F1 FF FF 		      	bsr  	GetVBR
018934 57 3F 10 00 		      	pop  	r3
018938 82 40 00 1A 		      	mov  	r4,r1
01893C C6 5D 40 00 		      	lw   	r5,32[bp]
018940 6B 52 06 00 		      	sw   	r5,0[r4+r3]
018944 BA F6 FF FF 		      	bra  	debugger_22
                	debugger_19:
018948 C6 FD 11 00 		      	lw   	lr,8[bp]
01894C E3 FD 21 00 		      	sw   	lr,16[bp]
018950 3A F5 FF FF 		      	bra  	debugger_22
                	endpublic
                	
                	public code dbg_GetCursorRow:
018954 15 EF 21 00 		      	subui	sp,sp,#16
018958 E7 ED 01 00 		      	push 	bp
01895C 02 BF 01 1A 		      	mov  	bp,sp
018960 41 1C 28 04 		      	     	        lbu    r1,TCB_hJCB[tr]
018964 97 FF FF FF 	        mulu   r1,#JCB_Size
018968 7C C5 00 00 	        addui  r1,r1,#JCB_Array
01896C 94 10 00 00 
018970 C1 10 18 08 	        lbu    r1,JCB_CursorRow[r1]
                	    
                	debugger_27:
018974 82 ED 01 1A 		      	mov  	sp,bp
018978 57 BF 11 00 		      	pop  	bp
01897C 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code dbg_GetCursorCol:
018980 15 EF 21 00 		      	subui	sp,sp,#16
018984 E7 ED 01 00 		      	push 	bp
018988 02 BF 01 1A 		      	mov  	bp,sp
01898C 41 1C 28 04 		      	     	        lbu    r1,TCB_hJCB[tr]
018990 97 FF FF FF 	        mulu   r1,#JCB_Size
018994 7C C5 00 00 	        addui  r1,r1,#JCB_Array
018998 94 10 00 00 
01899C C1 10 1A 08 	        lbu    r1,JCB_CursorCol[r1]
                	    
                	debugger_29:
0189A0 82 ED 01 1A 		      	mov  	sp,bp
0189A4 57 BF 11 00 		      	pop  	bp
0189A8 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code dbg_GetDBAD:
0189AC 15 EF 21 00 		      	subui	sp,sp,#16
0189B0 E7 ED 01 00 		      	push 	bp
0189B4 02 BF 01 1A 		      	mov  	bp,sp
0189B8 C6 3D 30 00 		      	lw   	r3,24[bp]
0189BC 86 41 00 00 		      	cmp  	r4,r3,#0
0189C0 3D 02 10 00 		      	beq  	r4,debugger_32
0189C4 86 41 02 00 		      	cmp  	r4,r3,#1
0189C8 3D 02 10 00 		      	beq  	r4,debugger_33
0189CC 86 41 04 00 		      	cmp  	r4,r3,#2
0189D0 3D 02 10 00 		      	beq  	r4,debugger_34
0189D4 86 41 06 00 		      	cmp  	r4,r3,#3
0189D8 3D 02 10 00 		      	beq  	r4,debugger_35
0189DC 3A 06 00 00 		      	bra  	debugger_31
                	debugger_32:
0189E0 02 10 64 3E 		      	     	mfspr  r1,dbad0  
0189E4 3A 05 00 00 		      	bra  	debugger_31
                	debugger_33:
0189E8 02 10 66 3E 		      	     	mfspr  r1,dbad1  
0189EC 3A 04 00 00 		      	bra  	debugger_31
                	debugger_34:
0189F0 02 10 68 3E 		      	     	mfspr  r1,dbad2  
0189F4 3A 03 00 00 		      	bra  	debugger_31
                	debugger_35:
0189F8 02 10 6A 3E 		      	     	mfspr  r1,dbad3  
0189FC 3A 02 00 00 		      	bra  	debugger_31
                	debugger_36:
018A00 82 ED 01 1A 		      	mov  	sp,bp
018A04 57 BF 11 00 		      	pop  	bp
018A08 37 FF 21 00 		      	rtl  	#16
                	debugger_31:
018A0C BA FE FF FF 		      	bra  	debugger_36
                	endpublic
                	
                	public code dbg_SetDBAD:
018A10 15 EF 21 00 		      	subui	sp,sp,#16
018A14 E7 ED 01 00 		      	push 	bp
018A18 02 BF 01 1A 		      	mov  	bp,sp
018A1C C6 3D 30 00 		      	lw   	r3,24[bp]
018A20 86 41 00 00 		      	cmp  	r4,r3,#0
018A24 3D 02 10 00 		      	beq  	r4,debugger_39
018A28 86 41 02 00 		      	cmp  	r4,r3,#1
018A2C 3D 02 12 00 		      	beq  	r4,debugger_40
018A30 86 41 04 00 		      	cmp  	r4,r3,#2
018A34 3D 02 14 00 		      	beq  	r4,debugger_41
018A38 86 41 06 00 		      	cmp  	r4,r3,#3
018A3C 3D 02 16 00 		      	beq  	r4,debugger_42
018A40 BA 06 00 00 		      	bra  	debugger_38
                	debugger_39:
018A44 C6 1D 40 00 		      	     	          lw    r1,32[bp]
018A48 82 00 64 3C 	          mtspr dbad0,r1
                	          
018A4C 3A 05 00 00 		      	bra  	debugger_38
                	debugger_40:
018A50 C6 1D 40 00 		      	     	          lw    r1,32[bp]
018A54 82 00 66 3C 	          mtspr dbad1,r1
                	          
018A58 BA 03 00 00 		      	bra  	debugger_38
                	debugger_41:
018A5C C6 1D 40 00 		      	     	          lw    r1,32[bp]
018A60 82 00 68 3C 	          mtspr dbad2,r1
                	          
018A64 3A 02 00 00 		      	bra  	debugger_38
                	debugger_42:
018A68 C6 1D 40 00 		      	     	          lw    r1,32[bp]
018A6C 82 00 6A 3C 	          mtspr dbad3,r1
                	          
018A70 BA 00 00 00 		      	bra  	debugger_38
                	debugger_38:
                	debugger_43:
018A74 82 ED 01 1A 		      	mov  	sp,bp
018A78 57 BF 11 00 		      	pop  	bp
018A7C 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code dbg_arm:
018A80 15 EF 21 00 		      	subui	sp,sp,#16
018A84 E7 ED 01 00 		      	push 	bp
018A88 02 BF 01 1A 		      	mov  	bp,sp
018A8C C6 1D 30 00 		      	     	         lw    r1,24[bp]
018A90 82 00 6C 3C 	         mtspr dbctrl,r1
                	     
                	debugger_45:
018A94 82 ED 01 1A 		      	mov  	sp,bp
018A98 57 BF 11 00 		      	pop  	bp
018A9C 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code CvtScreenToAscii:
018AA0 15 EF 21 00 		      	subui	sp,sp,#16
018AA4 E7 ED 01 00 		      	push 	bp
018AA8 02 BF 01 1A 		      	mov  	bp,sp
018AAC C6 1D 30 00 		      	     	         lw    r1,24[bp]
018AB0 B9 A8 F0 FF 	         bsr   ScreenToAscii
                	     
                	debugger_47:
018AB4 82 ED 01 1A 		      	mov  	sp,bp
018AB8 57 BF 11 00 		      	pop  	bp
018ABC 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code dbg_getchar:
018AC0 15 EF 21 00 		      	subui	sp,sp,#16
018AC4 E7 ED 01 00 		      	push 	bp
018AC8 02 BF 01 1A 		      	mov  	bp,sp
018ACC 15 EF 11 00 		      	subui	sp,sp,#8
018AD0 E7 E5 01 00 		      	push 	r11
018AD4 7C C0 00 00 		      	ldi  	r11,#linendx
018AD8 0A B0 40 04 
018ADC 0A 30 FE FF 		      	ldi  	r3,#-1
018AE0 E1 3D FC FF 		      	sc   	r3,-2[bp]
018AE4 C6 35 00 00 		      	lw   	r3,[r11]
018AE8 86 31 A8 00 		      	cmp  	r3,r3,#84
018AEC BD 31 0E 00 		      	bge  	r3,debugger_49
018AF0 C6 35 00 00 		      	lw   	r3,[r11]
018AF4 82 31 02 70 		      	asli 	r3,r3,#1
018AF8 7C C0 00 00 		      	lcu  	r4,linebuf[r3]
018AFC C3 41 50 04 
018B00 E1 4D FC FF 		      	sc   	r4,-2[bp]
018B04 E4 15 00 00 		      	inc  	[r11],#1
                	debugger_49:
018B08 C3 3D FC FF 		      	lcu  	r3,-2[bp]
018B0C 82 11 00 1A 		      	mov  	r1,r3
                	debugger_51:
018B10 57 BF 10 00 		      	pop  	r11
018B14 82 ED 01 1A 		      	mov  	sp,bp
018B18 57 BF 11 00 		      	pop  	bp
018B1C 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code ignore_blanks:
018B20 15 EF 21 00 		      	subui	sp,sp,#16
018B24 E7 ED 01 00 		      	push 	bp
018B28 02 BF 01 1A 		      	mov  	bp,sp
018B2C 15 EF 11 00 		      	subui	sp,sp,#8
                	debugger_53:
018B30 7C C0 00 00 		      	lw   	r3,linendx
018B34 46 30 40 04 
018B38 82 31 02 70 		      	asli 	r3,r3,#1
018B3C 7C C0 00 00 		      	lcu  	r4,linebuf[r3]
018B40 C3 41 50 04 
018B44 E1 4D FC FF 		      	sc   	r4,-2[bp]
018B48 7C C0 00 00 		      	inc  	linendx,#1
018B4C 64 10 40 04 
018B50 C3 3D FC FF 		      	lcu  	r3,-2[bp]
018B54 86 31 40 00 		      	cmp  	r3,r3,#32
018B58 BD 01 EC FF 		      	beq  	r3,debugger_53
                	debugger_54:
                	debugger_55:
018B5C 82 ED 01 1A 		      	mov  	sp,bp
018B60 57 BF 11 00 		      	pop  	bp
018B64 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code dbg_ungetch:
018B68 15 EF 21 00 		      	subui	sp,sp,#16
018B6C E7 ED 01 00 		      	push 	bp
018B70 02 BF 01 1A 		      	mov  	bp,sp
018B74 7C C0 00 00 		      	lw   	r3,linendx
018B78 46 30 40 04 
018B7C BD 51 06 00 		      	ble  	r3,debugger_57
018B80 7C C0 00 00 		      	dec  	linendx,#1
018B84 64 F0 41 04 
                	debugger_57:
                	debugger_59:
018B88 82 ED 01 1A 		      	mov  	sp,bp
018B8C 57 BF 11 00 		      	pop  	bp
018B90 37 FF 21 00 		      	rtl  	#16
                	endpublic
                	
                	public code dbg_nextNonSpace:
018B94 E7 EF 01 00 		      	push 	lr
018B98 67 EE 01 00 		      	push 	xlr
018B9C E7 ED 01 00 		      	push 	bp
018BA0 FC 01 00 00 		      	ldi  	xlr,#debugger_60
018BA4 0A C0 21 18 
018BA8 02 BF 01 1A 		      	mov  	bp,sp
018BAC 15 EF 11 00 		      	subui	sp,sp,#8
                	debugger_61:
018BB0 7C C0 00 00 		      	lw   	r3,linendx
018BB4 46 30 40 04 
018BB8 86 31 A8 00 		      	cmp  	r3,r3,#84
018BBC BD 31 26 00 		      	bge  	r3,debugger_62
018BC0 39 E0 FF FF 		      	bsr  	dbg_getchar
018BC4 82 30 00 1A 		      	mov  	r3,r1
018BC8 82 31 00 22 		      	sxc  	r3,r3
018BCC E1 3D FC FF 		      	sc   	r3,-2[bp]
018BD0 C3 3D FC FF 		      	lcu  	r3,-2[bp]
018BD4 86 31 40 00 		      	cmp  	r3,r3,#32
018BD8 BD 11 08 00 		      	bne  	r3,debugger_65
018BDC C3 3D FC FF 		      	lcu  	r3,-2[bp]
018BE0 86 31 FE FF 		      	cmp  	r3,r3,#-1
018BE4 BD 11 10 00 		      	bne  	r3,debugger_63
                	debugger_65:
018BE8 C3 3D FC FF 		      	lcu  	r3,-2[bp]
018BEC 82 11 00 1A 		      	mov  	r1,r3
                	debugger_66:
018BF0 82 ED 01 1A 		      	mov  	sp,bp
018BF4 57 BF 11 00 		      	pop  	bp
018BF8 57 CF 11 00 		      	pop  	xlr
018BFC 57 FF 11 00 		      	pop  	lr
018C00 37 FF 01 00 		      	rtl  	#0
                	debugger_63:
018C04 BA F5 FF FF 		      	bra  	debugger_61
                	debugger_62:
018C08 0A 10 FE FF 		      	ldi  	r1,#-1
018C0C BA FC FF FF 		      	bra  	debugger_66
                	debugger_60:
018C10 C6 FD 11 00 		      	lw   	lr,8[bp]
018C14 E3 FD 21 00 		      	sw   	lr,16[bp]
018C18 3A FB FF FF 		      	bra  	debugger_66
                	endpublic
                	
                	public code dbg_GetHexNumber:
018C1C E7 EF 01 00 		      	push 	lr
018C20 67 EE 01 00 		      	push 	xlr
018C24 E7 ED 01 00 		      	push 	bp
018C28 FC 01 00 00 		      	ldi  	xlr,#debugger_67
018C2C 0A C0 49 1A 
018C30 02 BF 01 1A 		      	mov  	bp,sp
018C34 15 EF 31 00 		      	subui	sp,sp,#24
018C38 E3 0D E0 FF 		      	sw   	r0,-16[bp]
018C3C E3 0D D0 FF 		      	sw   	r0,-24[bp]
                	debugger_68:
018C40 0A 30 02 00 		      	ldi  	r3,#1
018C44 BD 01 6E 00 		      	beq  	r3,debugger_69
018C48 C6 3D E0 FF 		      	lw   	r3,-16[bp]
018C4C 82 31 08 70 		      	asl  	r3,r3,#4
018C50 E3 3D E0 FF 		      	sw   	r3,-16[bp]
018C54 B9 CD FF FF 		      	bsr  	dbg_getchar
018C58 82 30 00 1A 		      	mov  	r3,r1
018C5C 82 31 00 22 		      	sxc  	r3,r3
018C60 E1 3D FC FF 		      	sc   	r3,-2[bp]
018C64 C3 3D FC FF 		      	lcu  	r3,-2[bp]
018C68 96 31 60 00 		      	cmpu 	r3,r3,#48
018C6C BD 41 14 00 		      	blt  	r3,debugger_70
018C70 C3 3D FC FF 		      	lcu  	r3,-2[bp]
018C74 96 31 72 00 		      	cmpu 	r3,r3,#57
018C78 BD 21 0E 00 		      	bgt  	r3,debugger_70
018C7C C6 3D E0 FF 		      	lw   	r3,-16[bp]
018C80 C3 4D FC FF 		      	lcu  	r4,-2[bp]
018C84 15 42 60 00 		      	subu 	r4,r4,#48
018C88 82 31 08 1A 		      	or   	r3,r3,r4
018C8C E3 3D E0 FF 		      	sw   	r3,-16[bp]
018C90 BA 11 00 00 		      	bra  	debugger_71
                	debugger_70:
018C94 C3 3D FC FF 		      	lcu  	r3,-2[bp]
018C98 96 31 82 00 		      	cmpu 	r3,r3,#65
018C9C BD 41 14 00 		      	blt  	r3,debugger_72
018CA0 C3 3D FC FF 		      	lcu  	r3,-2[bp]
018CA4 96 31 8C 00 		      	cmpu 	r3,r3,#70
018CA8 BD 21 0E 00 		      	bgt  	r3,debugger_72
018CAC C6 3D E0 FF 		      	lw   	r3,-16[bp]
018CB0 C3 4D FC FF 		      	lcu  	r4,-2[bp]
018CB4 14 42 92 FF 		      	addu 	r4,r4,#-55
018CB8 82 31 08 1A 		      	or   	r3,r3,r4
018CBC E3 3D E0 FF 		      	sw   	r3,-16[bp]
018CC0 BA 0B 00 00 		      	bra  	debugger_73
                	debugger_72:
018CC4 C3 3D FC FF 		      	lcu  	r3,-2[bp]
018CC8 96 31 C2 00 		      	cmpu 	r3,r3,#97
018CCC BD 41 14 00 		      	blt  	r3,debugger_74
018CD0 C3 3D FC FF 		      	lcu  	r3,-2[bp]
018CD4 96 31 CC 00 		      	cmpu 	r3,r3,#102
018CD8 BD 21 0E 00 		      	bgt  	r3,debugger_74
018CDC C6 3D E0 FF 		      	lw   	r3,-16[bp]
018CE0 C3 4D FC FF 		      	lcu  	r4,-2[bp]
018CE4 14 42 48 FF 		      	addu 	r4,r4,#-92
018CE8 82 31 08 1A 		      	or   	r3,r3,r4
018CEC E3 3D E0 FF 		      	sw   	r3,-16[bp]
018CF0 BA 05 00 00 		      	bra  	debugger_75
                	debugger_74:
018CF4 C6 3D 30 00 		      	lw   	r3,24[bp]
018CF8 C6 4D E0 FF 		      	lw   	r4,-16[bp]
018CFC E3 41 00 00 		      	sw   	r4,[r3]
018D00 C6 3D D0 FF 		      	lw   	r3,-24[bp]
018D04 82 11 00 1A 		      	mov  	r1,r3
                	debugger_76:
018D08 82 ED 01 1A 		      	mov  	sp,bp
018D0C 57 BF 11 00 		      	pop  	bp
018D10 57 CF 11 00 		      	pop  	xlr
018D14 57 FF 11 00 		      	pop  	lr
018D18 37 FF 01 00 		      	rtl  	#0
                	debugger_75:
                	debugger_73:
                	debugger_71:
018D1C BA E4 FF FF 		      	bra  	debugger_68
                	debugger_69:
018D20 3A FD FF FF 		      	bra  	debugger_76
                	debugger_67:
018D24 C6 FD 11 00 		      	lw   	lr,8[bp]
018D28 E3 FD 21 00 		      	sw   	lr,16[bp]
018D2C BA FB FF FF 		      	bra  	debugger_76
                	endpublic
                	
                	public code dbg_ReadSetIB:
018D30 E7 EF 01 00 		      	push 	lr
018D34 67 EE 01 00 		      	push 	xlr
018D38 E7 ED 01 00 		      	push 	bp
018D3C FC 01 00 00 		      	ldi  	xlr,#debugger_79
018D40 0A C0 29 1D 
018D44 02 BF 01 1A 		      	mov  	bp,sp
018D48 15 EF 21 00 		      	subui	sp,sp,#16
018D4C E7 E5 01 00 		      	push 	r11
018D50 FC C0 00 00 		      	ldi  	r11,#dbctrl
018D54 0A B0 E0 05 
018D58 C6 3D 30 00 		      	lw   	r3,24[bp]
018D5C 96 31 06 00 		      	cmpu 	r3,r3,#3
018D60 BD 51 0E 00 		      	ble  	r3,debugger_80
                	debugger_82:
018D64 57 BF 10 00 		      	pop  	r11
018D68 82 ED 01 1A 		      	mov  	sp,bp
018D6C 57 BF 11 00 		      	pop  	bp
018D70 57 CF 11 00 		      	pop  	xlr
018D74 57 FF 11 00 		      	pop  	lr
018D78 37 FF 01 00 		      	rtl  	#0
                	debugger_80:
018D7C 39 C3 FF FF 		      	bsr  	dbg_nextNonSpace
018D80 82 30 00 1A 		      	mov  	r3,r1
018D84 82 31 00 22 		      	sxc  	r3,r3
018D88 E1 3D FC FF 		      	sc   	r3,-2[bp]
018D8C C3 3D FC FF 		      	lcu  	r3,-2[bp]
018D90 86 31 7A 00 		      	cmp  	r3,r3,#61
018D94 BD 11 34 00 		      	bne  	r3,debugger_83
018D98 E5 ED E1 FF 		      	pea  	-16[bp]
018D9C 39 D0 FF FF 		      	bsr  	dbg_GetHexNumber
018DA0 14 EF 11 00 		      	addui	sp,sp,#8
018DA4 82 30 00 1A 		      	mov  	r3,r1
018DA8 BD 51 28 00 		      	ble  	r3,debugger_85
018DAC E6 ED E1 FF 		      	push 	-16[bp]
018DB0 E6 ED 31 00 		      	push 	24[bp]
018DB4 B9 8B FF FF 		      	bsr  	dbg_SetDBAD
018DB8 14 EF 21 00 		      	addui	sp,sp,#16
018DBC 0A 30 02 00 		      	ldi  	r3,#1
018DC0 C6 4D 30 00 		      	lw   	r4,24[bp]
018DC4 82 31 08 60 		      	asl  	r3,r3,r4
018DC8 C6 45 00 00 		      	lw   	r4,[r11]
018DCC 02 42 06 1A 		      	or   	r4,r4,r3
018DD0 E3 45 00 00 		      	sw   	r4,[r11]
018DD4 7C 03 00 00 		      	ldi  	r3,#196608
018DD8 0A 30 00 00 
018DDC C6 4D 30 00 		      	lw   	r4,24[bp]
018DE0 02 42 02 70 		      	asli 	r4,r4,#1
018DE4 82 31 08 60 		      	asl  	r3,r3,r4
018DE8 8E 31 FE FF 		      	com  	r3,r3
018DEC C6 45 00 00 		      	lw   	r4,[r11]
018DF0 02 42 06 18 		      	and  	r4,r4,r3
018DF4 E3 45 00 00 		      	sw   	r4,[r11]
                	debugger_85:
018DF8 3A 13 00 00 		      	bra  	debugger_84
                	debugger_83:
018DFC C3 3D FC FF 		      	lcu  	r3,-2[bp]
018E00 86 31 7E 00 		      	cmp  	r3,r3,#63
018E04 BD 11 46 00 		      	bne  	r3,debugger_87
018E08 C6 35 00 00 		      	lw   	r3,[r11]
018E0C 7C 03 00 00 		      	ldi  	r4,#196608
018E10 0A 40 00 00 
018E14 C6 5D 30 00 		      	lw   	r5,24[bp]
018E18 82 52 02 70 		      	asli 	r5,r5,#1
018E1C 02 42 0A 60 		      	asl  	r4,r4,r5
018E20 82 31 08 18 		      	and  	r3,r3,r4
018E24 BD 11 2C 00 		      	bne  	r3,debugger_89
018E28 C6 35 00 00 		      	lw   	r3,[r11]
018E2C 0A 40 02 00 		      	ldi  	r4,#1
018E30 C6 5D 30 00 		      	lw   	r5,24[bp]
018E34 02 42 0A 60 		      	asl  	r4,r4,r5
018E38 0A 50 02 00 		      	ldi  	r5,#1
018E3C C6 6D 30 00 		      	lw   	r6,24[bp]
018E40 82 52 0C 60 		      	asl  	r5,r5,r6
018E44 02 42 0A 40 		      	seq  	r4,r4,r5
018E48 82 31 08 18 		      	and  	r3,r3,r4
018E4C BD 01 18 00 		      	beq  	r3,debugger_89
018E50 E6 ED 31 00 		      	push 	24[bp]
018E54 39 6B FF FF 		      	bsr  	dbg_GetDBAD
018E58 14 EF 11 00 		      	addui	sp,sp,#8
018E5C 82 30 00 1A 		      	mov  	r3,r1
018E60 E7 E1 01 00 		      	push 	r3
018E64 E6 ED 31 00 		      	push 	24[bp]
018E68 FC 01 00 00 		      	push 	#debugger_77
018E6C 65 E0 8D 51 
018E70 B9 74 FA FF 		      	bsr  	printf
018E74 14 EF 31 00 		      	addui	sp,sp,#24
018E78 3A 03 00 00 		      	bra  	debugger_90
                	debugger_89:
018E7C E6 ED 31 00 		      	push 	24[bp]
018E80 FC 01 00 00 		      	push 	#debugger_78
018E84 65 E0 39 51 
018E88 B9 71 FA FF 		      	bsr  	printf
018E8C 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_90:
                	debugger_87:
                	debugger_84:
018E90 BA DA FF FF 		      	bra  	debugger_82
                	debugger_79:
018E94 C6 FD 11 00 		      	lw   	lr,8[bp]
018E98 E3 FD 21 00 		      	sw   	lr,16[bp]
018E9C 3A D9 FF FF 		      	bra  	debugger_82
                	endpublic
                	
                	public code dbg_ReadSetDB:
018EA0 E7 EF 01 00 		      	push 	lr
018EA4 67 EE 01 00 		      	push 	xlr
018EA8 E7 ED 01 00 		      	push 	bp
018EAC FC 01 00 00 		      	ldi  	xlr,#debugger_95
018EB0 0A C0 79 20 
018EB4 02 BF 01 1A 		      	mov  	bp,sp
018EB8 15 EF 21 00 		      	subui	sp,sp,#16
018EBC E7 E5 01 00 		      	push 	r11
018EC0 FC C0 00 00 		      	ldi  	r11,#dbctrl
018EC4 0A B0 E0 05 
018EC8 C6 3D 30 00 		      	lw   	r3,24[bp]
018ECC 96 31 06 00 		      	cmpu 	r3,r3,#3
018ED0 BD 51 0E 00 		      	ble  	r3,debugger_96
                	debugger_98:
018ED4 57 BF 10 00 		      	pop  	r11
018ED8 82 ED 01 1A 		      	mov  	sp,bp
018EDC 57 BF 11 00 		      	pop  	bp
018EE0 57 CF 11 00 		      	pop  	xlr
018EE4 57 FF 11 00 		      	pop  	lr
018EE8 37 FF 01 00 		      	rtl  	#0
                	debugger_96:
018EEC 39 95 FF FF 		      	bsr  	dbg_nextNonSpace
018EF0 82 30 00 1A 		      	mov  	r3,r1
018EF4 82 31 00 22 		      	sxc  	r3,r3
018EF8 E1 3D FC FF 		      	sc   	r3,-2[bp]
018EFC C3 3D FC FF 		      	lcu  	r3,-2[bp]
018F00 86 31 7A 00 		      	cmp  	r3,r3,#61
018F04 BD 11 44 00 		      	bne  	r3,debugger_99
018F08 E5 ED E1 FF 		      	pea  	-16[bp]
018F0C 39 A2 FF FF 		      	bsr  	dbg_GetHexNumber
018F10 14 EF 11 00 		      	addui	sp,sp,#8
018F14 82 30 00 1A 		      	mov  	r3,r1
018F18 BD 51 38 00 		      	ble  	r3,debugger_101
018F1C E6 ED E1 FF 		      	push 	-16[bp]
018F20 E6 ED 31 00 		      	push 	24[bp]
018F24 B9 5D FF FF 		      	bsr  	dbg_SetDBAD
018F28 14 EF 21 00 		      	addui	sp,sp,#16
018F2C 0A 30 02 00 		      	ldi  	r3,#1
018F30 C6 4D 30 00 		      	lw   	r4,24[bp]
018F34 82 31 08 60 		      	asl  	r3,r3,r4
018F38 C6 45 00 00 		      	lw   	r4,[r11]
018F3C 02 42 06 1A 		      	or   	r4,r4,r3
018F40 E3 45 00 00 		      	sw   	r4,[r11]
018F44 7C 03 00 00 		      	ldi  	r3,#196608
018F48 0A 30 00 00 
018F4C C6 4D 30 00 		      	lw   	r4,24[bp]
018F50 02 42 02 70 		      	asli 	r4,r4,#1
018F54 82 31 08 60 		      	asl  	r3,r3,r4
018F58 8E 31 FE FF 		      	com  	r3,r3
018F5C C6 45 00 00 		      	lw   	r4,[r11]
018F60 02 42 06 18 		      	and  	r4,r4,r3
018F64 E3 45 00 00 		      	sw   	r4,[r11]
018F68 7C 03 00 00 		      	ldi  	r3,#196608
018F6C 0A 30 00 00 
018F70 C6 4D 30 00 		      	lw   	r4,24[bp]
018F74 02 42 02 70 		      	asli 	r4,r4,#1
018F78 82 31 08 60 		      	asl  	r3,r3,r4
018F7C C6 45 00 00 		      	lw   	r4,[r11]
018F80 02 42 06 1A 		      	or   	r4,r4,r3
018F84 E3 45 00 00 		      	sw   	r4,[r11]
                	debugger_101:
018F88 3A 16 00 00 		      	bra  	debugger_100
                	debugger_99:
018F8C C3 3D FC FF 		      	lcu  	r3,-2[bp]
018F90 86 31 7E 00 		      	cmp  	r3,r3,#63
018F94 BD 11 52 00 		      	bne  	r3,debugger_103
018F98 C6 35 00 00 		      	lw   	r3,[r11]
018F9C 7C 03 00 00 		      	ldi  	r4,#196608
018FA0 0A 40 00 00 
018FA4 C6 5D 30 00 		      	lw   	r5,24[bp]
018FA8 82 52 02 70 		      	asli 	r5,r5,#1
018FAC 02 42 0A 60 		      	asl  	r4,r4,r5
018FB0 82 31 08 18 		      	and  	r3,r3,r4
018FB4 7C 03 00 00 		      	ldi  	r4,#196608
018FB8 0A 40 00 00 
018FBC C6 5D 30 00 		      	lw   	r5,24[bp]
018FC0 82 52 02 70 		      	asli 	r5,r5,#1
018FC4 02 42 0A 60 		      	asl  	r4,r4,r5
018FC8 82 31 08 0C 		      	cmp  	r3,r3,r4
018FCC BD 11 2C 00 		      	bne  	r3,debugger_105
018FD0 C6 35 00 00 		      	lw   	r3,[r11]
018FD4 0A 40 02 00 		      	ldi  	r4,#1
018FD8 C6 5D 30 00 		      	lw   	r5,24[bp]
018FDC 02 42 0A 60 		      	asl  	r4,r4,r5
018FE0 0A 50 02 00 		      	ldi  	r5,#1
018FE4 C6 6D 30 00 		      	lw   	r6,24[bp]
018FE8 82 52 0C 60 		      	asl  	r5,r5,r6
018FEC 02 42 0A 40 		      	seq  	r4,r4,r5
018FF0 82 31 08 18 		      	and  	r3,r3,r4
018FF4 BD 01 18 00 		      	beq  	r3,debugger_105
018FF8 E6 ED 31 00 		      	push 	24[bp]
018FFC 39 36 FF FF 		      	bsr  	dbg_GetDBAD
019000 14 EF 11 00 		      	addui	sp,sp,#8
019004 82 30 00 1A 		      	mov  	r3,r1
019008 E7 E1 01 00 		      	push 	r3
01900C E6 ED 31 00 		      	push 	24[bp]
019010 FC 01 00 00 		      	push 	#debugger_93
019014 65 E0 F1 50 
019018 B9 3F FA FF 		      	bsr  	printf
01901C 14 EF 31 00 		      	addui	sp,sp,#24
019020 3A 03 00 00 		      	bra  	debugger_106
                	debugger_105:
019024 E6 ED 31 00 		      	push 	24[bp]
019028 FC 01 00 00 		      	push 	#debugger_94
01902C 65 E0 9D 50 
019030 B9 3C FA FF 		      	bsr  	printf
019034 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_106:
                	debugger_103:
                	debugger_100:
019038 BA D3 FF FF 		      	bra  	debugger_98
                	debugger_95:
01903C C6 FD 11 00 		      	lw   	lr,8[bp]
019040 E3 FD 21 00 		      	sw   	lr,16[bp]
019044 3A D2 FF FF 		      	bra  	debugger_98
                	endpublic
                	
                	public code dbg_ReadSetDSB:
019048 E7 EF 01 00 		      	push 	lr
01904C 67 EE 01 00 		      	push 	xlr
019050 E7 ED 01 00 		      	push 	bp
019054 FC 01 00 00 		      	ldi  	xlr,#debugger_111
019058 0A C0 C9 23 
01905C 02 BF 01 1A 		      	mov  	bp,sp
019060 15 EF 21 00 		      	subui	sp,sp,#16
019064 E7 E5 01 00 		      	push 	r11
019068 FC C0 00 00 		      	ldi  	r11,#dbctrl
01906C 0A B0 E0 05 
019070 C6 3D 30 00 		      	lw   	r3,24[bp]
019074 96 31 06 00 		      	cmpu 	r3,r3,#3
019078 BD 51 0E 00 		      	ble  	r3,debugger_112
                	debugger_114:
01907C 57 BF 10 00 		      	pop  	r11
019080 82 ED 01 1A 		      	mov  	sp,bp
019084 57 BF 11 00 		      	pop  	bp
019088 57 CF 11 00 		      	pop  	xlr
01908C 57 FF 11 00 		      	pop  	lr
019090 37 FF 01 00 		      	rtl  	#0
                	debugger_112:
019094 39 60 FF FF 		      	bsr  	dbg_nextNonSpace
019098 82 30 00 1A 		      	mov  	r3,r1
01909C 82 31 00 22 		      	sxc  	r3,r3
0190A0 E1 3D FC FF 		      	sc   	r3,-2[bp]
0190A4 C3 3D FC FF 		      	lcu  	r3,-2[bp]
0190A8 86 31 7A 00 		      	cmp  	r3,r3,#61
0190AC BD 11 44 00 		      	bne  	r3,debugger_115
0190B0 E5 ED E1 FF 		      	pea  	-16[bp]
0190B4 39 6D FF FF 		      	bsr  	dbg_GetHexNumber
0190B8 14 EF 11 00 		      	addui	sp,sp,#8
0190BC 82 30 00 1A 		      	mov  	r3,r1
0190C0 BD 51 38 00 		      	ble  	r3,debugger_117
0190C4 E6 ED E1 FF 		      	push 	-16[bp]
0190C8 E6 ED 31 00 		      	push 	24[bp]
0190CC B9 28 FF FF 		      	bsr  	dbg_SetDBAD
0190D0 14 EF 21 00 		      	addui	sp,sp,#16
0190D4 0A 30 02 00 		      	ldi  	r3,#1
0190D8 C6 4D 30 00 		      	lw   	r4,24[bp]
0190DC 82 31 08 60 		      	asl  	r3,r3,r4
0190E0 C6 45 00 00 		      	lw   	r4,[r11]
0190E4 02 42 06 1A 		      	or   	r4,r4,r3
0190E8 E3 45 00 00 		      	sw   	r4,[r11]
0190EC 7C 03 00 00 		      	ldi  	r3,#196608
0190F0 0A 30 00 00 
0190F4 C6 4D 30 00 		      	lw   	r4,24[bp]
0190F8 02 42 02 70 		      	asli 	r4,r4,#1
0190FC 82 31 08 60 		      	asl  	r3,r3,r4
019100 8E 31 FE FF 		      	com  	r3,r3
019104 C6 45 00 00 		      	lw   	r4,[r11]
019108 02 42 06 18 		      	and  	r4,r4,r3
01910C E3 45 00 00 		      	sw   	r4,[r11]
019110 7C 01 00 00 		      	ldi  	r3,#65536
019114 0A 30 00 00 
019118 C6 4D 30 00 		      	lw   	r4,24[bp]
01911C 02 42 02 70 		      	asli 	r4,r4,#1
019120 82 31 08 60 		      	asl  	r3,r3,r4
019124 C6 45 00 00 		      	lw   	r4,[r11]
019128 02 42 06 1A 		      	or   	r4,r4,r3
01912C E3 45 00 00 		      	sw   	r4,[r11]
                	debugger_117:
019130 3A 16 00 00 		      	bra  	debugger_116
                	debugger_115:
019134 C3 3D FC FF 		      	lcu  	r3,-2[bp]
019138 86 31 7E 00 		      	cmp  	r3,r3,#63
01913C BD 11 52 00 		      	bne  	r3,debugger_119
019140 C6 35 00 00 		      	lw   	r3,[r11]
019144 7C 03 00 00 		      	ldi  	r4,#196608
019148 0A 40 00 00 
01914C C6 5D 30 00 		      	lw   	r5,24[bp]
019150 82 52 02 70 		      	asli 	r5,r5,#1
019154 02 42 0A 60 		      	asl  	r4,r4,r5
019158 82 31 08 18 		      	and  	r3,r3,r4
01915C 7C 01 00 00 		      	ldi  	r4,#65536
019160 0A 40 00 00 
019164 C6 5D 30 00 		      	lw   	r5,24[bp]
019168 82 52 02 70 		      	asli 	r5,r5,#1
01916C 02 42 0A 60 		      	asl  	r4,r4,r5
019170 82 31 08 0C 		      	cmp  	r3,r3,r4
019174 BD 11 2C 00 		      	bne  	r3,debugger_121
019178 C6 35 00 00 		      	lw   	r3,[r11]
01917C 0A 40 02 00 		      	ldi  	r4,#1
019180 C6 5D 30 00 		      	lw   	r5,24[bp]
019184 02 42 0A 60 		      	asl  	r4,r4,r5
019188 0A 50 02 00 		      	ldi  	r5,#1
01918C C6 6D 30 00 		      	lw   	r6,24[bp]
019190 82 52 0C 60 		      	asl  	r5,r5,r6
019194 02 42 0A 40 		      	seq  	r4,r4,r5
019198 82 31 08 18 		      	and  	r3,r3,r4
01919C BD 01 18 00 		      	beq  	r3,debugger_121
0191A0 E6 ED 31 00 		      	push 	24[bp]
0191A4 39 01 FF FF 		      	bsr  	dbg_GetDBAD
0191A8 14 EF 11 00 		      	addui	sp,sp,#8
0191AC 82 30 00 1A 		      	mov  	r3,r1
0191B0 E7 E1 01 00 		      	push 	r3
0191B4 E6 ED 31 00 		      	push 	24[bp]
0191B8 FC 01 00 00 		      	push 	#debugger_109
0191BC 65 E0 51 50 
0191C0 B9 0A FA FF 		      	bsr  	printf
0191C4 14 EF 31 00 		      	addui	sp,sp,#24
0191C8 3A 03 00 00 		      	bra  	debugger_122
                	debugger_121:
0191CC E6 ED 31 00 		      	push 	24[bp]
0191D0 FC 01 00 00 		      	push 	#debugger_110
0191D4 65 E0 F9 4F 
0191D8 B9 07 FA FF 		      	bsr  	printf
0191DC 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_122:
                	debugger_119:
                	debugger_116:
0191E0 BA D3 FF FF 		      	bra  	debugger_114
                	debugger_111:
0191E4 C6 FD 11 00 		      	lw   	lr,8[bp]
0191E8 E3 FD 21 00 		      	sw   	lr,16[bp]
0191EC 3A D2 FF FF 		      	bra  	debugger_114
                	endpublic
                	
                	public code dbg_prompt:
0191F0 E7 EF 01 00 		      	push 	lr
0191F4 67 EE 01 00 		      	push 	xlr
0191F8 E7 ED 01 00 		      	push 	bp
0191FC FC 01 00 00 		      	ldi  	xlr,#debugger_126
019200 0A C0 59 24 
019204 02 BF 01 1A 		      	mov  	bp,sp
019208 FC 01 00 00 		      	push 	#debugger_125
01920C 65 E0 DD 4F 
019210 B9 00 FA FF 		      	bsr  	printf
019214 14 EF 11 00 		      	addui	sp,sp,#8
                	debugger_127:
019218 82 ED 01 1A 		      	mov  	sp,bp
01921C 57 BF 11 00 		      	pop  	bp
019220 57 CF 11 00 		      	pop  	xlr
019224 57 FF 11 00 		      	pop  	lr
019228 37 FF 01 00 		      	rtl  	#0
                	debugger_126:
01922C C6 FD 11 00 		      	lw   	lr,8[bp]
019230 E3 FD 21 00 		      	sw   	lr,16[bp]
019234 BA FC FF FF 		      	bra  	debugger_127
                	endpublic
                	
                	public code dbg_parse_line:
019238 E7 EF 01 00 		      	push 	lr
01923C 67 EE 01 00 		      	push 	xlr
019240 E7 ED 01 00 		      	push 	bp
019244 FC 01 00 00 		      	ldi  	xlr,#debugger_144
019248 0A C0 01 33 
01924C 02 BF 01 1A 		      	mov  	bp,sp
019250 15 EF 21 00 		      	subui	sp,sp,#16
019254 E7 E5 01 00 		      	push 	r11
019258 67 E6 01 00 		      	push 	r12
01925C E7 E6 01 00 		      	push 	r13
019260 FC C0 00 00 		      	ldi  	r11,#dbctrl
019264 0A B0 E0 05 
019268 7C C0 00 00 		      	ldi  	r12,#linebuf
01926C 0A C0 50 04 
019270 7C C0 00 00 		      	ldi  	r13,#linendx
019274 0A D0 40 04 
019278 E3 06 00 00 		      	sw   	r0,[r13]
01927C 43 36 00 00 		      	lcu  	r3,[r12]
019280 86 31 88 00 		      	cmp  	r3,r3,#68
019284 BD 11 18 00 		      	bne  	r3,debugger_145
019288 43 36 04 00 		      	lcu  	r3,2[r12]
01928C 86 31 84 00 		      	cmp  	r3,r3,#66
019290 BD 11 12 00 		      	bne  	r3,debugger_145
019294 43 36 08 00 		      	lcu  	r3,4[r12]
019298 86 31 8E 00 		      	cmp  	r3,r3,#71
01929C BD 11 0C 00 		      	bne  	r3,debugger_145
0192A0 43 36 0C 00 		      	lcu  	r3,6[r12]
0192A4 86 31 7C 00 		      	cmp  	r3,r3,#62
0192A8 BD 11 06 00 		      	bne  	r3,debugger_145
0192AC 0A 30 08 00 		      	ldi  	r3,#4
0192B0 E3 36 00 00 		      	sw   	r3,[r13]
                	debugger_145:
0192B4 C6 36 00 00 		      	lw   	r3,[r13]
0192B8 82 31 02 70 		      	asli 	r3,r3,#1
0192BC 4B 46 06 00 		      	lcu  	r4,0[r12+r3]
0192C0 E1 4D FC FF 		      	sc   	r4,-2[bp]
0192C4 E4 16 00 00 		      	inc  	[r13],#1
0192C8 C3 3D FC FF 		      	lcu  	r3,-2[bp]
0192CC 86 41 7E 00 		      	cmp  	r4,r3,#63
0192D0 3D 02 14 00 		      	beq  	r4,debugger_148
0192D4 86 41 E2 00 		      	cmp  	r4,r3,#113
0192D8 3D 02 14 00 		      	beq  	r4,debugger_149
0192DC 86 41 C2 00 		      	cmp  	r4,r3,#97
0192E0 3D 02 22 00 		      	beq  	r4,debugger_150
0192E4 86 41 D2 00 		      	cmp  	r4,r3,#105
0192E8 3D 02 26 00 		      	beq  	r4,debugger_151
0192EC 86 41 C8 00 		      	cmp  	r4,r3,#100
0192F0 3D 02 EE 00 		      	beq  	r4,debugger_152
0192F4 3A D1 00 00 		      	bra  	debugger_147
                	debugger_148:
0192F8 39 93 FE FF 		      	bsr  	dbg_DisplayHelp
0192FC 3A D0 00 00 		      	bra  	debugger_147
                	debugger_149:
019300 0A 10 02 00 		      	ldi  	r1,#1
                	debugger_153:
019304 57 DF 10 00 		      	pop  	r13
019308 57 CF 10 00 		      	pop  	r12
01930C 57 BF 10 00 		      	pop  	r11
019310 82 ED 01 1A 		      	mov  	sp,bp
019314 57 BF 11 00 		      	pop  	bp
019318 57 CF 11 00 		      	pop  	xlr
01931C 57 FF 11 00 		      	pop  	lr
019320 37 FF 01 00 		      	rtl  	#0
                	debugger_150:
019324 E6 E5 01 00 		      	push 	[r11]
019328 39 EB FE FF 		      	bsr  	dbg_arm
01932C 14 EF 11 00 		      	addui	sp,sp,#8
019330 BA C9 00 00 		      	bra  	debugger_147
                	debugger_151:
019334 B9 F1 FE FF 		      	bsr  	dbg_getchar
019338 82 30 00 1A 		      	mov  	r3,r1
01933C 82 31 00 22 		      	sxc  	r3,r3
019340 E1 3D FC FF 		      	sc   	r3,-2[bp]
019344 C3 3D FC FF 		      	lcu  	r3,-2[bp]
019348 86 41 7E 00 		      	cmp  	r4,r3,#63
01934C 3D 02 14 00 		      	beq  	r4,debugger_155
019350 86 41 60 00 		      	cmp  	r4,r3,#48
019354 3D 02 9A 00 		      	beq  	r4,debugger_156
019358 86 41 62 00 		      	cmp  	r4,r3,#49
01935C 3D 02 9E 00 		      	beq  	r4,debugger_157
019360 86 41 64 00 		      	cmp  	r4,r3,#50
019364 3D 02 A2 00 		      	beq  	r4,debugger_158
019368 86 41 66 00 		      	cmp  	r4,r3,#51
01936C 3D 02 A6 00 		      	beq  	r4,debugger_159
019370 3A 2B 00 00 		      	bra  	debugger_154
                	debugger_155:
019374 C6 35 00 00 		      	lw   	r3,[r11]
019378 7C 03 00 00 		      	and  	r3,r3,#196608
01937C 8C 31 00 00 
019380 BD 11 1C 00 		      	bne  	r3,debugger_160
019384 C6 35 00 00 		      	lw   	r3,[r11]
019388 8C 31 02 00 		      	and  	r3,r3,#1
01938C 86 31 02 00 		      	cmp  	r3,r3,#1
019390 BD 11 14 00 		      	bne  	r3,debugger_160
019394 65 E0 01 00 		      	push 	#0
019398 B9 C2 FE FF 		      	bsr  	dbg_GetDBAD
01939C 14 EF 11 00 		      	addui	sp,sp,#8
0193A0 82 30 00 1A 		      	mov  	r3,r1
0193A4 E7 E1 01 00 		      	push 	r3
0193A8 FC 01 00 00 		      	push 	#debugger_128
0193AC 65 E0 B5 4F 
0193B0 B9 CC F9 FF 		      	bsr  	printf
0193B4 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_160:
0193B8 C6 35 00 00 		      	lw   	r3,[r11]
0193BC 7C 30 00 00 		      	and  	r3,r3,#3145728
0193C0 8C 31 00 00 
0193C4 BD 11 1C 00 		      	bne  	r3,debugger_162
0193C8 C6 35 00 00 		      	lw   	r3,[r11]
0193CC 8C 31 04 00 		      	and  	r3,r3,#2
0193D0 86 31 04 00 		      	cmp  	r3,r3,#2
0193D4 BD 11 14 00 		      	bne  	r3,debugger_162
0193D8 65 E0 03 00 		      	push 	#1
0193DC 39 BA FE FF 		      	bsr  	dbg_GetDBAD
0193E0 14 EF 11 00 		      	addui	sp,sp,#8
0193E4 82 30 00 1A 		      	mov  	r3,r1
0193E8 E7 E1 01 00 		      	push 	r3
0193EC FC 01 00 00 		      	push 	#debugger_129
0193F0 65 E0 8D 4F 
0193F4 39 C4 F9 FF 		      	bsr  	printf
0193F8 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_162:
0193FC C6 35 00 00 		      	lw   	r3,[r11]
019400 7C 00 03 00 		      	and  	r3,r3,#50331648
019404 8C 31 00 00 
019408 BD 11 1C 00 		      	bne  	r3,debugger_164
01940C C6 35 00 00 		      	lw   	r3,[r11]
019410 8C 31 08 00 		      	and  	r3,r3,#4
019414 86 31 08 00 		      	cmp  	r3,r3,#4
019418 BD 11 14 00 		      	bne  	r3,debugger_164
01941C 65 E0 05 00 		      	push 	#2
019420 B9 B1 FE FF 		      	bsr  	dbg_GetDBAD
019424 14 EF 11 00 		      	addui	sp,sp,#8
019428 82 30 00 1A 		      	mov  	r3,r1
01942C E7 E1 01 00 		      	push 	r3
019430 FC 01 00 00 		      	push 	#debugger_130
019434 65 E0 65 4F 
019438 B9 BB F9 FF 		      	bsr  	printf
01943C 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_164:
019440 C6 35 00 00 		      	lw   	r3,[r11]
019444 7C 00 30 00 		      	and  	r3,r3,#805306368
019448 8C 31 00 00 
01944C BD 11 1C 00 		      	bne  	r3,debugger_166
019450 C6 35 00 00 		      	lw   	r3,[r11]
019454 8C 31 10 00 		      	and  	r3,r3,#8
019458 86 31 10 00 		      	cmp  	r3,r3,#8
01945C BD 11 14 00 		      	bne  	r3,debugger_166
019460 65 E0 07 00 		      	push 	#3
019464 39 A9 FE FF 		      	bsr  	dbg_GetDBAD
019468 14 EF 11 00 		      	addui	sp,sp,#8
01946C 82 30 00 1A 		      	mov  	r3,r1
019470 E7 E1 01 00 		      	push 	r3
019474 FC 01 00 00 		      	push 	#debugger_131
019478 65 E0 3D 4F 
01947C 39 B3 F9 FF 		      	bsr  	printf
019480 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_166:
019484 BA 08 00 00 		      	bra  	debugger_154
                	debugger_156:
019488 65 E0 01 00 		      	push 	#0
01948C B9 14 FF FF 		      	bsr  	dbg_ReadSetIB
019490 14 EF 11 00 		      	addui	sp,sp,#8
019494 BA 06 00 00 		      	bra  	debugger_154
                	debugger_157:
019498 65 E0 03 00 		      	push 	#1
01949C B9 12 FF FF 		      	bsr  	dbg_ReadSetIB
0194A0 14 EF 11 00 		      	addui	sp,sp,#8
0194A4 BA 04 00 00 		      	bra  	debugger_154
                	debugger_158:
0194A8 65 E0 05 00 		      	push 	#2
0194AC B9 10 FF FF 		      	bsr  	dbg_ReadSetIB
0194B0 14 EF 11 00 		      	addui	sp,sp,#8
0194B4 BA 02 00 00 		      	bra  	debugger_154
                	debugger_159:
0194B8 65 E0 07 00 		      	push 	#3
0194BC B9 0E FF FF 		      	bsr  	dbg_ReadSetIB
0194C0 14 EF 11 00 		      	addui	sp,sp,#8
0194C4 BA 00 00 00 		      	bra  	debugger_154
                	debugger_154:
0194C8 BA 96 00 00 		      	bra  	debugger_147
                	debugger_152:
0194CC B9 BE FE FF 		      	bsr  	dbg_getchar
0194D0 82 30 00 1A 		      	mov  	r3,r1
0194D4 82 31 00 22 		      	sxc  	r3,r3
0194D8 E1 3D FC FF 		      	sc   	r3,-2[bp]
0194DC C3 3D FC FF 		      	lcu  	r3,-2[bp]
0194E0 86 41 7E 00 		      	cmp  	r4,r3,#63
0194E4 3D 02 1C 00 		      	beq  	r4,debugger_169
0194E8 86 41 60 00 		      	cmp  	r4,r3,#48
0194EC 3D 02 B2 00 		      	beq  	r4,debugger_170
0194F0 86 41 62 00 		      	cmp  	r4,r3,#49
0194F4 3D 02 B6 00 		      	beq  	r4,debugger_171
0194F8 86 41 64 00 		      	cmp  	r4,r3,#50
0194FC 3D 02 BA 00 		      	beq  	r4,debugger_172
019500 86 41 66 00 		      	cmp  	r4,r3,#51
019504 3D 02 BE 00 		      	beq  	r4,debugger_173
019508 86 41 7E 00 		      	cmp  	r4,r3,#63
01950C 3D 02 C2 00 		      	beq  	r4,debugger_174
019510 86 41 E6 00 		      	cmp  	r4,r3,#115
019514 3D 02 58 01 		      	beq  	r4,debugger_175
019518 3A 8C 00 00 		      	bra  	debugger_168
                	debugger_169:
01951C C6 35 00 00 		      	lw   	r3,[r11]
019520 7C 03 00 00 		      	and  	r3,r3,#196608
019524 8C 31 00 00 
019528 7C 03 00 00 		      	cmp  	r3,r3,#196608
01952C 86 31 00 00 
019530 BD 11 1C 00 		      	bne  	r3,debugger_176
019534 C6 35 00 00 		      	lw   	r3,[r11]
019538 8C 31 02 00 		      	and  	r3,r3,#1
01953C 86 31 02 00 		      	cmp  	r3,r3,#1
019540 BD 11 14 00 		      	bne  	r3,debugger_176
019544 65 E0 01 00 		      	push 	#0
019548 B9 8C FE FF 		      	bsr  	dbg_GetDBAD
01954C 14 EF 11 00 		      	addui	sp,sp,#8
019550 82 30 00 1A 		      	mov  	r3,r1
019554 E7 E1 01 00 		      	push 	r3
019558 FC 01 00 00 		      	push 	#debugger_132
01955C 65 E0 15 4F 
019560 B9 96 F9 FF 		      	bsr  	printf
019564 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_176:
019568 C6 35 00 00 		      	lw   	r3,[r11]
01956C 7C 30 00 00 		      	and  	r3,r3,#3145728
019570 8C 31 00 00 
019574 7C 30 00 00 		      	cmp  	r3,r3,#3145728
019578 86 31 00 00 
01957C BD 11 1C 00 		      	bne  	r3,debugger_178
019580 C6 35 00 00 		      	lw   	r3,[r11]
019584 8C 31 04 00 		      	and  	r3,r3,#2
019588 86 31 04 00 		      	cmp  	r3,r3,#2
01958C BD 11 14 00 		      	bne  	r3,debugger_178
019590 65 E0 03 00 		      	push 	#1
019594 39 83 FE FF 		      	bsr  	dbg_GetDBAD
019598 14 EF 11 00 		      	addui	sp,sp,#8
01959C 82 30 00 1A 		      	mov  	r3,r1
0195A0 E7 E1 01 00 		      	push 	r3
0195A4 FC 01 00 00 		      	push 	#debugger_133
0195A8 65 E0 ED 4E 
0195AC 39 8D F9 FF 		      	bsr  	printf
0195B0 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_178:
0195B4 C6 35 00 00 		      	lw   	r3,[r11]
0195B8 7C 00 03 00 		      	and  	r3,r3,#50331648
0195BC 8C 31 00 00 
0195C0 7C 00 03 00 		      	cmp  	r3,r3,#50331648
0195C4 86 31 00 00 
0195C8 BD 11 1C 00 		      	bne  	r3,debugger_180
0195CC C6 35 00 00 		      	lw   	r3,[r11]
0195D0 8C 31 08 00 		      	and  	r3,r3,#4
0195D4 86 31 08 00 		      	cmp  	r3,r3,#4
0195D8 BD 11 14 00 		      	bne  	r3,debugger_180
0195DC 65 E0 05 00 		      	push 	#2
0195E0 B9 79 FE FF 		      	bsr  	dbg_GetDBAD
0195E4 14 EF 11 00 		      	addui	sp,sp,#8
0195E8 82 30 00 1A 		      	mov  	r3,r1
0195EC E7 E1 01 00 		      	push 	r3
0195F0 FC 01 00 00 		      	push 	#debugger_134
0195F4 65 E0 C5 4E 
0195F8 B9 83 F9 FF 		      	bsr  	printf
0195FC 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_180:
019600 C6 35 00 00 		      	lw   	r3,[r11]
019604 7C 00 30 00 		      	and  	r3,r3,#805306368
019608 8C 31 00 00 
01960C 7C 00 30 00 		      	cmp  	r3,r3,#805306368
019610 86 31 00 00 
019614 BD 11 1C 00 		      	bne  	r3,debugger_182
019618 C6 35 00 00 		      	lw   	r3,[r11]
01961C 8C 31 10 00 		      	and  	r3,r3,#8
019620 86 31 10 00 		      	cmp  	r3,r3,#8
019624 BD 11 14 00 		      	bne  	r3,debugger_182
019628 65 E0 07 00 		      	push 	#3
01962C 39 70 FE FF 		      	bsr  	dbg_GetDBAD
019630 14 EF 11 00 		      	addui	sp,sp,#8
019634 82 30 00 1A 		      	mov  	r3,r1
019638 E7 E1 01 00 		      	push 	r3
01963C FC 01 00 00 		      	push 	#debugger_135
019640 65 E0 9D 4E 
019644 39 7A F9 FF 		      	bsr  	printf
019648 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_182:
01964C BA 65 00 00 		      	bra  	debugger_168
                	debugger_170:
019650 65 E0 01 00 		      	push 	#0
019654 B9 09 FF FF 		      	bsr  	dbg_ReadSetDB
019658 14 EF 11 00 		      	addui	sp,sp,#8
01965C BA 63 00 00 		      	bra  	debugger_168
                	debugger_171:
019660 65 E0 03 00 		      	push 	#1
019664 B9 07 FF FF 		      	bsr  	dbg_ReadSetDB
019668 14 EF 11 00 		      	addui	sp,sp,#8
01966C BA 61 00 00 		      	bra  	debugger_168
                	debugger_172:
019670 65 E0 05 00 		      	push 	#2
019674 B9 05 FF FF 		      	bsr  	dbg_ReadSetDB
019678 14 EF 11 00 		      	addui	sp,sp,#8
01967C BA 5F 00 00 		      	bra  	debugger_168
                	debugger_173:
019680 65 E0 07 00 		      	push 	#3
019684 B9 03 FF FF 		      	bsr  	dbg_ReadSetDB
019688 14 EF 11 00 		      	addui	sp,sp,#8
01968C BA 5D 00 00 		      	bra  	debugger_168
                	debugger_174:
019690 C6 35 00 00 		      	lw   	r3,[r11]
019694 7C 03 00 00 		      	and  	r3,r3,#196608
019698 8C 31 00 00 
01969C 7C 03 00 00 		      	cmp  	r3,r3,#196608
0196A0 86 31 00 00 
0196A4 BD 11 1C 00 		      	bne  	r3,debugger_184
0196A8 C6 35 00 00 		      	lw   	r3,[r11]
0196AC 8C 31 02 00 		      	and  	r3,r3,#1
0196B0 86 31 02 00 		      	cmp  	r3,r3,#1
0196B4 BD 11 14 00 		      	bne  	r3,debugger_184
0196B8 65 E0 01 00 		      	push 	#0
0196BC 39 5E FE FF 		      	bsr  	dbg_GetDBAD
0196C0 14 EF 11 00 		      	addui	sp,sp,#8
0196C4 82 30 00 1A 		      	mov  	r3,r1
0196C8 E7 E1 01 00 		      	push 	r3
0196CC FC 01 00 00 		      	push 	#debugger_136
0196D0 65 E0 71 4E 
0196D4 39 68 F9 FF 		      	bsr  	printf
0196D8 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_184:
0196DC C6 35 00 00 		      	lw   	r3,[r11]
0196E0 7C 30 00 00 		      	and  	r3,r3,#3145728
0196E4 8C 31 00 00 
0196E8 7C 30 00 00 		      	cmp  	r3,r3,#3145728
0196EC 86 31 00 00 
0196F0 BD 11 1C 00 		      	bne  	r3,debugger_186
0196F4 C6 35 00 00 		      	lw   	r3,[r11]
0196F8 8C 31 04 00 		      	and  	r3,r3,#2
0196FC 86 31 04 00 		      	cmp  	r3,r3,#2
019700 BD 11 14 00 		      	bne  	r3,debugger_186
019704 65 E0 03 00 		      	push 	#1
019708 B9 54 FE FF 		      	bsr  	dbg_GetDBAD
01970C 14 EF 11 00 		      	addui	sp,sp,#8
019710 82 30 00 1A 		      	mov  	r3,r1
019714 E7 E1 01 00 		      	push 	r3
019718 FC 01 00 00 		      	push 	#debugger_137
01971C 65 E0 45 4E 
019720 B9 5E F9 FF 		      	bsr  	printf
019724 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_186:
019728 C6 35 00 00 		      	lw   	r3,[r11]
01972C 7C 00 03 00 		      	and  	r3,r3,#50331648
019730 8C 31 00 00 
019734 7C 00 03 00 		      	cmp  	r3,r3,#50331648
019738 86 31 00 00 
01973C BD 11 1C 00 		      	bne  	r3,debugger_188
019740 C6 35 00 00 		      	lw   	r3,[r11]
019744 8C 31 08 00 		      	and  	r3,r3,#4
019748 86 31 08 00 		      	cmp  	r3,r3,#4
01974C BD 11 14 00 		      	bne  	r3,debugger_188
019750 65 E0 05 00 		      	push 	#2
019754 39 4B FE FF 		      	bsr  	dbg_GetDBAD
019758 14 EF 11 00 		      	addui	sp,sp,#8
01975C 82 30 00 1A 		      	mov  	r3,r1
019760 E7 E1 01 00 		      	push 	r3
019764 FC 01 00 00 		      	push 	#debugger_138
019768 65 E0 19 4E 
01976C 39 55 F9 FF 		      	bsr  	printf
019770 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_188:
019774 C6 35 00 00 		      	lw   	r3,[r11]
019778 7C 00 30 00 		      	and  	r3,r3,#805306368
01977C 8C 31 00 00 
019780 7C 00 30 00 		      	cmp  	r3,r3,#805306368
019784 86 31 00 00 
019788 BD 11 1C 00 		      	bne  	r3,debugger_190
01978C C6 35 00 00 		      	lw   	r3,[r11]
019790 8C 31 10 00 		      	and  	r3,r3,#8
019794 86 31 10 00 		      	cmp  	r3,r3,#8
019798 BD 11 14 00 		      	bne  	r3,debugger_190
01979C 65 E0 07 00 		      	push 	#3
0197A0 B9 41 FE FF 		      	bsr  	dbg_GetDBAD
0197A4 14 EF 11 00 		      	addui	sp,sp,#8
0197A8 82 30 00 1A 		      	mov  	r3,r1
0197AC E7 E1 01 00 		      	push 	r3
0197B0 FC 01 00 00 		      	push 	#debugger_139
0197B4 65 E0 ED 4D 
0197B8 B9 4B F9 FF 		      	bsr  	printf
0197BC 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_190:
0197C0 3A 37 00 00 		      	bra  	debugger_168
                	debugger_175:
0197C4 B9 5F FE FF 		      	bsr  	dbg_getchar
0197C8 82 30 00 1A 		      	mov  	r3,r1
0197CC 82 31 00 22 		      	sxc  	r3,r3
0197D0 E1 3D FC FF 		      	sc   	r3,-2[bp]
0197D4 C3 3D FC FF 		      	lcu  	r3,-2[bp]
0197D8 86 41 7E 00 		      	cmp  	r4,r3,#63
0197DC 3D 02 14 00 		      	beq  	r4,debugger_193
0197E0 86 41 60 00 		      	cmp  	r4,r3,#48
0197E4 3D 02 AA 00 		      	beq  	r4,debugger_194
0197E8 86 41 62 00 		      	cmp  	r4,r3,#49
0197EC 3D 02 AE 00 		      	beq  	r4,debugger_195
0197F0 86 41 64 00 		      	cmp  	r4,r3,#50
0197F4 3D 02 B2 00 		      	beq  	r4,debugger_196
0197F8 86 41 66 00 		      	cmp  	r4,r3,#51
0197FC 3D 02 B6 00 		      	beq  	r4,debugger_197
019800 3A 2F 00 00 		      	bra  	debugger_192
                	debugger_193:
019804 C6 35 00 00 		      	lw   	r3,[r11]
019808 7C 03 00 00 		      	and  	r3,r3,#196608
01980C 8C 31 00 00 
019810 7C 01 00 00 		      	cmp  	r3,r3,#65536
019814 86 31 00 00 
019818 BD 11 1C 00 		      	bne  	r3,debugger_198
01981C C6 35 00 00 		      	lw   	r3,[r11]
019820 8C 31 02 00 		      	and  	r3,r3,#1
019824 86 31 02 00 		      	cmp  	r3,r3,#1
019828 BD 11 14 00 		      	bne  	r3,debugger_198
01982C 65 E0 01 00 		      	push 	#0
019830 B9 2F FE FF 		      	bsr  	dbg_GetDBAD
019834 14 EF 11 00 		      	addui	sp,sp,#8
019838 82 30 00 1A 		      	mov  	r3,r1
01983C E7 E1 01 00 		      	push 	r3
019840 FC 01 00 00 		      	push 	#debugger_140
019844 65 E0 C1 4D 
019848 B9 39 F9 FF 		      	bsr  	printf
01984C 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_198:
019850 C6 35 00 00 		      	lw   	r3,[r11]
019854 7C 30 00 00 		      	and  	r3,r3,#3145728
019858 8C 31 00 00 
01985C 7C 10 00 00 		      	cmp  	r3,r3,#1048576
019860 86 31 00 00 
019864 BD 11 1C 00 		      	bne  	r3,debugger_200
019868 C6 35 00 00 		      	lw   	r3,[r11]
01986C 8C 31 04 00 		      	and  	r3,r3,#2
019870 86 31 04 00 		      	cmp  	r3,r3,#2
019874 BD 11 14 00 		      	bne  	r3,debugger_200
019878 65 E0 03 00 		      	push 	#1
01987C 39 26 FE FF 		      	bsr  	dbg_GetDBAD
019880 14 EF 11 00 		      	addui	sp,sp,#8
019884 82 30 00 1A 		      	mov  	r3,r1
019888 E7 E1 01 00 		      	push 	r3
01988C FC 01 00 00 		      	push 	#debugger_141
019890 65 E0 95 4D 
019894 39 30 F9 FF 		      	bsr  	printf
019898 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_200:
01989C C6 35 00 00 		      	lw   	r3,[r11]
0198A0 7C 00 03 00 		      	and  	r3,r3,#50331648
0198A4 8C 31 00 00 
0198A8 7C 00 01 00 		      	cmp  	r3,r3,#16777216
0198AC 86 31 00 00 
0198B0 BD 11 1C 00 		      	bne  	r3,debugger_202
0198B4 C6 35 00 00 		      	lw   	r3,[r11]
0198B8 8C 31 08 00 		      	and  	r3,r3,#4
0198BC 86 31 08 00 		      	cmp  	r3,r3,#4
0198C0 BD 11 14 00 		      	bne  	r3,debugger_202
0198C4 65 E0 05 00 		      	push 	#2
0198C8 B9 1C FE FF 		      	bsr  	dbg_GetDBAD
0198CC 14 EF 11 00 		      	addui	sp,sp,#8
0198D0 82 30 00 1A 		      	mov  	r3,r1
0198D4 E7 E1 01 00 		      	push 	r3
0198D8 FC 01 00 00 		      	push 	#debugger_142
0198DC 65 E0 69 4D 
0198E0 B9 26 F9 FF 		      	bsr  	printf
0198E4 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_202:
0198E8 C6 35 00 00 		      	lw   	r3,[r11]
0198EC 7C 00 30 00 		      	and  	r3,r3,#805306368
0198F0 8C 31 00 00 
0198F4 7C 00 10 00 		      	cmp  	r3,r3,#268435456
0198F8 86 31 00 00 
0198FC BD 11 1C 00 		      	bne  	r3,debugger_204
019900 C6 35 00 00 		      	lw   	r3,[r11]
019904 8C 31 10 00 		      	and  	r3,r3,#8
019908 86 31 10 00 		      	cmp  	r3,r3,#8
01990C BD 11 14 00 		      	bne  	r3,debugger_204
019910 65 E0 07 00 		      	push 	#3
019914 39 13 FE FF 		      	bsr  	dbg_GetDBAD
019918 14 EF 11 00 		      	addui	sp,sp,#8
01991C 82 30 00 1A 		      	mov  	r3,r1
019920 E7 E1 01 00 		      	push 	r3
019924 FC 01 00 00 		      	push 	#debugger_143
019928 65 E0 3D 4D 
01992C 39 1D F9 FF 		      	bsr  	printf
019930 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_204:
019934 BA 08 00 00 		      	bra  	debugger_192
                	debugger_194:
019938 65 E0 01 00 		      	push 	#0
01993C B9 E1 FE FF 		      	bsr  	dbg_ReadSetDSB
019940 14 EF 11 00 		      	addui	sp,sp,#8
019944 BA 06 00 00 		      	bra  	debugger_192
                	debugger_195:
019948 65 E0 03 00 		      	push 	#1
01994C B9 DF FE FF 		      	bsr  	dbg_ReadSetDSB
019950 14 EF 11 00 		      	addui	sp,sp,#8
019954 BA 04 00 00 		      	bra  	debugger_192
                	debugger_196:
019958 65 E0 05 00 		      	push 	#2
01995C B9 DD FE FF 		      	bsr  	dbg_ReadSetDSB
019960 14 EF 11 00 		      	addui	sp,sp,#8
019964 BA 02 00 00 		      	bra  	debugger_192
                	debugger_197:
019968 65 E0 07 00 		      	push 	#3
01996C B9 DB FE FF 		      	bsr  	dbg_ReadSetDSB
019970 14 EF 11 00 		      	addui	sp,sp,#8
019974 BA 00 00 00 		      	bra  	debugger_192
                	debugger_192:
                	debugger_168:
019978 BA 00 00 00 		      	bra  	debugger_147
                	debugger_147:
01997C 3A 31 FF FF 		      	bra  	debugger_153
                	debugger_144:
019980 C6 FD 11 00 		      	lw   	lr,8[bp]
019984 E3 FD 21 00 		      	sw   	lr,16[bp]
019988 BA 2F FF FF 		      	bra  	debugger_153
                	endpublic
                	
                	public code dbg_irq:
01998C 7C C0 00 00 		      	     	         lea   sp,dbg_stack+4088
019990 47 E0 D1 25 
019994 67 E0 01 00 	         push  r0
019998 E7 E0 01 00 	         push  r1
01999C 67 E1 01 00 	         push  r2
0199A0 E7 E1 01 00 	         push  r3
0199A4 67 E2 01 00 	         push  r4
0199A8 E7 E2 01 00 	         push  r5
0199AC 67 E3 01 00 	         push  r6
0199B0 E7 E3 01 00 	         push  r7
0199B4 67 E4 01 00 	         push  r8
0199B8 E7 E4 01 00 	         push  r9
0199BC 67 E5 01 00 	         push  r10
0199C0 E7 E5 01 00 	         push  r11
0199C4 67 E6 01 00 	         push  r12
0199C8 E7 E6 01 00 	         push  r13
0199CC 67 E7 01 00 	         push  r14
0199D0 E7 E7 01 00 	         push  r15
0199D4 67 E8 01 00 	         push  r16
0199D8 E7 E8 01 00 	         push  r17
0199DC 67 E9 01 00 	         push  r18
0199E0 E7 E9 01 00 	         push  r19
0199E4 67 EA 01 00 	         push  r20
0199E8 E7 EA 01 00 	         push  r21
0199EC 67 EB 01 00 	         push  r22
0199F0 E7 EB 01 00 	         push  r23
0199F4 E7 EC 01 00 	         push  r25
0199F8 67 ED 01 00 	         push  r26
0199FC E7 ED 01 00 	         push  r27
019A00 67 EE 01 00 	         push  r28
019A04 E7 EE 01 00 	         push  r29
019A08 E7 EF 01 00 	         push  r31
                	
019A0C 02 10 6C 3E 	         mfspr r1,dbctrl
019A10 E7 E0 01 00 	         push  r1
019A14 02 00 6C 3C 	         mtspr dbctrl,r0
019A18 02 10 0E 3E 	         mfspr r1,dpc
019A1C E7 E0 01 00 	         push  r1
019A20 B9 10 00 00 	         bsr   debugger
019A24 14 EF 21 00 	         addui sp,sp,#16
                	         
019A28 57 FF 11 00 	         pop   r31
019A2C 57 DF 11 00 	         pop   r29
019A30 57 CF 11 00 	         pop   r28
019A34 57 BF 11 00 	         pop   r27
019A38 57 AF 11 00 	         pop   r26
019A3C 57 9F 11 00 	         pop   r25
019A40 57 7F 11 00 	         pop   r23
019A44 57 6F 11 00 	         pop   r22
019A48 57 5F 11 00 	         pop   r21
019A4C 57 4F 11 00 	         pop   r20
019A50 57 3F 11 00 	         pop   r19
019A54 57 2F 11 00 	         pop   r18
019A58 57 1F 11 00 	         pop   r17
019A5C 57 0F 11 00 	         pop   r16
019A60 57 FF 10 00 	         pop   r15
019A64 57 EF 10 00 	         pop   r14
019A68 57 DF 10 00 	         pop   r13
019A6C 57 CF 10 00 	         pop   r12
019A70 57 BF 10 00 	         pop   r11
019A74 57 AF 10 00 	         pop   r10
019A78 57 9F 10 00 	         pop   r9
019A7C 57 8F 10 00 	         pop   r8
019A80 57 7F 10 00 	         pop   r7
019A84 57 6F 10 00 	         pop   r6
019A88 57 5F 10 00 	         pop   r5
019A8C 57 4F 10 00 	         pop   r4
019A90 57 3F 10 00 	         pop   r3
019A94 57 2F 10 00 	         pop   r2
019A98 57 1F 10 00 	         pop   r1
019A9C 57 0F 10 00 	         pop   r0
019AA0 02 E0 3F 6E 	         rti
                	     
                	endpublic
                	
                	public code debugger:
019AA4 E7 EF 01 00 		      	push 	lr
019AA8 67 EE 01 00 		      	push 	xlr
019AAC E7 ED 01 00 		      	push 	bp
019AB0 FC 01 00 00 		      	ldi  	xlr,#debugger_209
019AB4 0A C0 B1 37 
019AB8 02 BF 01 1A 		      	mov  	bp,sp
019ABC 15 EF 51 00 		      	subui	sp,sp,#40
019AC0 E7 E5 01 00 		      	push 	r11
019AC4 7C D0 FF FF 		      	ldi  	r11,#-3145728
019AC8 0A B0 00 00 
019ACC C6 3D 30 00 		      	lw   	r3,24[bp]
019AD0 BD 01 0A 00 		      	beq  	r3,debugger_210
019AD4 E6 ED 31 00 		      	push 	24[bp]
019AD8 E6 ED 31 00 		      	push 	24[bp]
019ADC 39 87 FD FF 		      	bsr  	disassem20
019AE0 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_210:
                	debugger_212:
019AE4 0A 30 02 00 		      	ldi  	r3,#1
019AE8 BD 01 6C 00 		      	beq  	r3,debugger_213
019AEC FC 01 00 00 		      	push 	#debugger_208
019AF0 65 E0 21 4D 
019AF4 39 E4 F8 FF 		      	bsr  	printf
019AF8 14 EF 11 00 		      	addui	sp,sp,#8
                	debugger_214:
019AFC 39 D7 F8 FF 		      	bsr  	getchar
019B00 82 30 00 1A 		      	mov  	r3,r1
019B04 E1 3D FC FF 		      	sc   	r3,-2[bp]
019B08 C3 3D FC FF 		      	lcu  	r3,-2[bp]
019B0C 86 31 1A 00 		      	cmp  	r3,r3,#13
019B10 BD 11 04 00 		      	bne  	r3,debugger_216
019B14 BA 03 00 00 		      	bra  	debugger_215
                	debugger_216:
019B18 C3 3D FC FF 		      	lcu  	r3,-2[bp]
019B1C E7 E1 01 00 		      	push 	r3
019B20 39 52 F8 FF 		      	bsr  	putch
019B24 14 EF 11 00 		      	addui	sp,sp,#8
019B28 0A 30 02 00 		      	ldi  	r3,#1
019B2C BD 11 E8 FF 		      	bne  	r3,debugger_214
                	debugger_215:
019B30 B9 C4 FD FF 		      	bsr  	dbg_GetCursorRow
019B34 82 30 00 1A 		      	mov  	r3,r1
019B38 82 31 00 20 		      	sxb  	r3,r3
019B3C E3 3D E0 FF 		      	sw   	r3,-16[bp]
019B40 39 C8 FD FF 		      	bsr  	dbg_GetCursorCol
019B44 82 30 00 1A 		      	mov  	r3,r1
019B48 82 31 00 20 		      	sxb  	r3,r3
019B4C E3 3D D0 FF 		      	sw   	r3,-24[bp]
019B50 E3 0D B0 FF 		      	sw   	r0,-40[bp]
                	debugger_218:
019B54 C6 3D B0 FF 		      	lw   	r3,-40[bp]
019B58 86 31 A8 00 		      	cmp  	r3,r3,#84
019B5C BD 31 26 00 		      	bge  	r3,debugger_219
019B60 C6 3D E0 FF 		      	lw   	r3,-16[bp]
019B64 87 31 A8 00 		      	mul  	r3,r3,#84
019B68 C6 4D B0 FF 		      	lw   	r4,-40[bp]
019B6C 82 31 08 28 		      	addu 	r3,r3,r4
019B70 82 31 04 70 		      	asli 	r3,r3,#2
019B74 CD 35 06 00 		      	lhu  	r3,0[r11+r3]
019B78 8C 31 FE 07 		      	and  	r3,r3,#1023
019B7C E7 E1 01 00 		      	push 	r3
019B80 39 E4 FD FF 		      	bsr  	CvtScreenToAscii
019B84 14 EF 11 00 		      	addui	sp,sp,#8
019B88 82 30 00 1A 		      	mov  	r3,r1
019B8C 82 31 00 22 		      	sxc  	r3,r3
019B90 C6 4D B0 FF 		      	lw   	r4,-40[bp]
019B94 02 42 02 70 		      	asli 	r4,r4,#1
019B98 7C C0 00 00 		      	sc   	r3,linebuf[r4]
019B9C 61 32 50 04 
                	debugger_220:
019BA0 E4 1D B0 FF 		      	inc  	-40[bp],#1
019BA4 3A F6 FF FF 		      	bra  	debugger_218
                	debugger_219:
019BA8 39 D2 FE FF 		      	bsr  	dbg_parse_line
019BAC 82 30 00 1A 		      	mov  	r3,r1
019BB0 86 31 02 00 		      	cmp  	r3,r3,#1
019BB4 BD 11 04 00 		      	bne  	r3,debugger_221
019BB8 3A 01 00 00 		      	bra  	debugger_213
                	debugger_221:
019BBC 3A E5 FF FF 		      	bra  	debugger_212
                	debugger_213:
                	debugger_223:
019BC0 57 BF 10 00 		      	pop  	r11
019BC4 82 ED 01 1A 		      	mov  	sp,bp
019BC8 57 BF 11 00 		      	pop  	bp
019BCC 57 CF 11 00 		      	pop  	xlr
019BD0 57 FF 11 00 		      	pop  	lr
019BD4 37 FF 01 00 		      	rtl  	#0
                	debugger_209:
019BD8 C6 FD 11 00 		      	lw   	lr,8[bp]
019BDC E3 FD 21 00 		      	sw   	lr,16[bp]
019BE0 3A FC FF FF 		      	bra  	debugger_223
                	endpublic
                	
                	public code dbg_init:
019BE4 E7 EF 01 00 		      	push 	lr
019BE8 67 EE 01 00 		      	push 	xlr
019BEC E7 ED 01 00 		      	push 	bp
019BF0 FC 01 00 00 		      	ldi  	xlr,#debugger_224
019BF4 0A C0 49 38 
019BF8 02 BF 01 1A 		      	mov  	bp,sp
019BFC FC 01 00 00 		      	push 	#dbg_irq
019C00 65 E0 19 33 
019C04 65 E0 E1 03 		      	push 	#496
019C08 B9 99 FD FF 		      	bsr  	set_vector
019C0C 14 EF 21 00 		      	addui	sp,sp,#16
                	debugger_225:
019C10 82 ED 01 1A 		      	mov  	sp,bp
019C14 57 BF 11 00 		      	pop  	bp
019C18 57 CF 11 00 		      	pop  	xlr
019C1C 57 FF 11 00 		      	pop  	lr
019C20 37 FF 01 00 		      	rtl  	#0
                	debugger_224:
019C24 C6 FD 11 00 		      	lw   	lr,8[bp]
019C28 E3 FD 21 00 		      	sw   	lr,16[bp]
019C2C BA FC FF FF 		      	bra  	debugger_225
                	endpublic
                	
                		rodata
                		align	16                	
                		align	8                	
                		extern	RTCC_BUF
                		extern	Milliseconds
                		extern	Milliseconds
                		rodata
                		align	16                	
                		align	8                	
                	stdio_2:	; moderr 
01A000 6D 00 6F 00 64 00 65 00 		dc	109,111,100,101,114,114,32,0
01A008 72 00 72 00 20 00 00 00 
                	;	global	putch
                	;	global	getcharNoWait
                	;	global	printf
                	;	global	putnum
                	;	global	putstr
                	;	global	getchar
                	;	global	putstr2
                		extern	isdigit
                	;	global	puthexnum
                	;	global	puthexnum
                		rodata
                		align	16                	
                		align	8                	
                	;	global	islower
                	;	global	ispunct
                	;	global	isupper
                	;	global	isprint
                	;	global	tolower
                	;	global	toupper
                	;	global	isxdigit
                	;	global	isalpha
                	;	global	isspace
                	;	global	isdigit
                	;	global	isgraph
                	;	global	isalnum
                	;	global	iscntrl
                	;	global	iscntrl
                		rodata
                		align	16                	
                		align	8                	
                	disassem_322:	; Disassem:
01A010 44 00 69 00 73 00 61 00 		dc	68,105,115,97,115,115,101,109
01A018 73 00 73 00 65 00 6D 00 
01A020 3A 00 0D 00 0A 00 00 00 		dc	58,13,10,0
                	disassem_217:	; ?????
01A028 3F 00 3F 00 3F 00 3F 00 		dc	63,63,63,63,63,13,10,0
01A030 3F 00 0D 00 0A 00 00 00 
                	disassem_216:	; #$%X
01A038 23 00 24 00 25 00 58 00 		dc	35,36,37,88,13,10,0
01A040 0D 00 0A 00 00 00       
                	disassem_215:	; #$%X
01A046 23 00 24 00 25 00 58 00 		dc	35,36,37,88,13,10,0
01A04E 0D 00 0A 00 00 00       
                	disassem_214:	; LDI   
01A054 4C 00 44 00 49 00 20 00 		dc	76,68,73,32,32,32,0
01A05C 20 00 20 00 00 00       
                	disassem_213:	; NOP
01A062 4E 00 4F 00 50 00 0D 00 		dc	78,79,80,13,10,0
01A06A 0A 00 00 00             
                	disassem_212:
01A06E 0D 00 0A 00 00 00       		dc	13,10,0
                	disassem_211:	; POP   
01A074 50 00 4F 00 50 00 20 00 		dc	80,79,80,32,32,32,0
01A07C 20 00 20 00 00 00       
                	disassem_210:
01A082 0D 00 0A 00 00 00       		dc	13,10,0
                	disassem_209:	; PUSH  
01A088 50 00 55 00 53 00 48 00 		dc	80,85,83,72,32,32,0
01A090 20 00 20 00 00 00       
                	disassem_208:	; SWCR 
01A096 53 00 57 00 43 00 52 00 		dc	83,87,67,82,32,0
01A09E 20 00 00 00             
                	disassem_207:	; LWAR 
01A0A2 4C 00 57 00 41 00 52 00 		dc	76,87,65,82,32,0
01A0AA 20 00 00 00             
                	disassem_206:	; SW   
01A0AE 53 00 57 00 20 00 20 00 		dc	83,87,32,32,32,0
01A0B6 20 00 00 00             
                	disassem_205:	; SH   
01A0BA 53 00 48 00 20 00 20 00 		dc	83,72,32,32,32,0
01A0C2 20 00 00 00             
                	disassem_204:	; SC   
01A0C6 53 00 43 00 20 00 20 00 		dc	83,67,32,32,32,0
01A0CE 20 00 00 00             
                	disassem_203:	; SB   
01A0D2 53 00 42 00 20 00 20 00 		dc	83,66,32,32,32,0
01A0DA 20 00 00 00             
                	disassem_202:	; SW   
01A0DE 53 00 57 00 20 00 20 00 		dc	83,87,32,32,32,0
01A0E6 20 00 00 00             
                	disassem_201:	; SH   
01A0EA 53 00 48 00 20 00 20 00 		dc	83,72,32,32,32,0
01A0F2 20 00 00 00             
                	disassem_200:	; SC   
01A0F6 53 00 43 00 20 00 20 00 		dc	83,67,32,32,32,0
01A0FE 20 00 00 00             
                	disassem_199:	; SB   
01A102 53 00 42 00 20 00 20 00 		dc	83,66,32,32,32,0
01A10A 20 00 00 00             
                	disassem_198:	; LEA  
01A10E 4C 00 45 00 41 00 20 00 		dc	76,69,65,32,32,0
01A116 20 00 00 00             
                	disassem_197:	; LW   
01A11A 4C 00 57 00 20 00 20 00 		dc	76,87,32,32,32,0
01A122 20 00 00 00             
                	disassem_196:	; LHU  
01A126 4C 00 48 00 55 00 20 00 		dc	76,72,85,32,32,0
01A12E 20 00 00 00             
                	disassem_195:	; LH   
01A132 4C 00 48 00 20 00 20 00 		dc	76,72,32,32,32,0
01A13A 20 00 00 00             
                	disassem_194:	; LCU  
01A13E 4C 00 43 00 55 00 20 00 		dc	76,67,85,32,32,0
01A146 20 00 00 00             
                	disassem_193:	; LC   
01A14A 4C 00 43 00 20 00 20 00 		dc	76,67,32,32,32,0
01A152 20 00 00 00             
                	disassem_192:	; LBU  
01A156 4C 00 42 00 55 00 20 00 		dc	76,66,85,32,32,0
01A15E 20 00 00 00             
                	disassem_191:	; LB   
01A162 4C 00 42 00 20 00 20 00 		dc	76,66,32,32,32,0
01A16A 20 00 00 00             
                	disassem_190:	; LEA  
01A16E 4C 00 45 00 41 00 20 00 		dc	76,69,65,32,32,0
01A176 20 00 00 00             
                	disassem_189:	; LW   
01A17A 4C 00 57 00 20 00 20 00 		dc	76,87,32,32,32,0
01A182 20 00 00 00             
                	disassem_188:	; LHU  
01A186 4C 00 48 00 55 00 20 00 		dc	76,72,85,32,32,0
01A18E 20 00 00 00             
                	disassem_187:	; LH   
01A192 4C 00 48 00 20 00 20 00 		dc	76,72,32,32,32,0
01A19A 20 00 00 00             
                	disassem_186:	; LCU  
01A19E 4C 00 43 00 55 00 20 00 		dc	76,67,85,32,32,0
01A1A6 20 00 00 00             
                	disassem_185:	; LC   
01A1AA 4C 00 43 00 20 00 20 00 		dc	76,67,32,32,32,0
01A1B2 20 00 00 00             
                	disassem_184:	; LBU  
01A1B6 4C 00 42 00 55 00 20 00 		dc	76,66,85,32,32,0
01A1BE 20 00 00 00             
                	disassem_183:	; LB   
01A1C2 4C 00 42 00 20 00 20 00 		dc	76,66,32,32,32,0
01A1CA 20 00 00 00             
                	disassem_182:	; RTS   #%X
01A1CE 52 00 54 00 53 00 20 00 		dc	82,84,83,32,32,32,35,37
01A1D6 20 00 20 00 23 00 25 00 
01A1DE 58 00 0D 00 0A 00 00 00 		dc	88,13,10,0
                	disassem_181:	; RTL   #%X
01A1E6 52 00 54 00 4C 00 20 00 		dc	82,84,76,32,32,32,35,37
01A1EE 20 00 20 00 23 00 25 00 
01A1F6 58 00 0D 00 0A 00 00 00 		dc	88,13,10,0
                	disassem_180:	; BRA   $%X
01A1FE 42 00 52 00 41 00 20 00 		dc	66,82,65,32,32,32,36,37
01A206 20 00 20 00 24 00 25 00 
01A20E 58 00 0D 00 0A 00 00 00 		dc	88,13,10,0
                	disassem_179:	; BSR   $%X
01A216 42 00 53 00 52 00 20 00 		dc	66,83,82,32,32,32,36,37
01A21E 20 00 20 00 24 00 25 00 
01A226 58 00 0D 00 0A 00 00 00 		dc	88,13,10,0
                	disassem_178:	; ???  
01A22E 3F 00 3F 00 3F 00 20 00 		dc	63,63,63,32,32,0
01A236 20 00 00 00             
                	disassem_177:	; BGE  
01A23A 42 00 47 00 45 00 20 00 		dc	66,71,69,32,32,0
01A242 20 00 00 00             
                	disassem_176:	; BGT  
01A246 42 00 47 00 54 00 20 00 		dc	66,71,84,32,32,0
01A24E 20 00 00 00             
                	disassem_175:	; BLE  
01A252 42 00 4C 00 45 00 20 00 		dc	66,76,69,32,32,0
01A25A 20 00 00 00             
                	disassem_174:	; BLT  
01A25E 42 00 4C 00 54 00 20 00 		dc	66,76,84,32,32,0
01A266 20 00 00 00             
                	disassem_173:	; BNE  
01A26A 42 00 4E 00 45 00 20 00 		dc	66,78,69,32,32,0
01A272 20 00 00 00             
                	disassem_172:	; BEQ  
01A276 42 00 45 00 51 00 20 00 		dc	66,69,81,32,32,0
01A27E 20 00 00 00             
                	disassem_171:	; EOR  
01A282 45 00 4F 00 52 00 20 00 		dc	69,79,82,32,32,0
01A28A 20 00 00 00             
                	disassem_170:	; OR   
01A28E 4F 00 52 00 20 00 20 00 		dc	79,82,32,32,32,0
01A296 20 00 00 00             
                	disassem_169:	; AND  
01A29A 41 00 4E 00 44 00 20 00 		dc	65,78,68,32,32,0
01A2A2 20 00 00 00             
                	disassem_168:	; DIVU 
01A2A6 44 00 49 00 56 00 55 00 		dc	68,73,86,85,32,0
01A2AE 20 00 00 00             
                	disassem_167:	; DIV  
01A2B2 44 00 49 00 56 00 20 00 		dc	68,73,86,32,32,0
01A2BA 20 00 00 00             
                	disassem_166:	; MULU 
01A2BE 4D 00 55 00 4C 00 55 00 		dc	77,85,76,85,32,0
01A2C6 20 00 00 00             
                	disassem_165:	; MUL  
01A2CA 4D 00 55 00 4C 00 20 00 		dc	77,85,76,32,32,0
01A2D2 20 00 00 00             
                	disassem_164:	; CMPU 
01A2D6 43 00 4D 00 50 00 55 00 		dc	67,77,80,85,32,0
01A2DE 20 00 00 00             
                	disassem_163:	; CMP  
01A2E2 43 00 4D 00 50 00 20 00 		dc	67,77,80,32,32,0
01A2EA 20 00 00 00             
                	disassem_162:	; SUBU 
01A2EE 53 00 55 00 42 00 55 00 		dc	83,85,66,85,32,0
01A2F6 20 00 00 00             
                	disassem_161:	; SUB  
01A2FA 53 00 55 00 42 00 20 00 		dc	83,85,66,32,32,0
01A302 20 00 00 00             
                	disassem_160:	; ADDU 
01A306 41 00 44 00 44 00 55 00 		dc	65,68,68,85,32,0
01A30E 20 00 00 00             
                	disassem_159:	; ADD  
01A312 41 00 44 00 44 00 20 00 		dc	65,68,68,32,32,0
01A31A 20 00 00 00             
                	disassem_158:
01A31E 0D 00 0A 00 00 00       		dc	13,10,0
                	disassem_157:	; ,
01A324 2C 00 00 00             		dc	44,0
                	disassem_156:	; MTSPR 
01A328 4D 00 54 00 53 00 50 00 		dc	77,84,83,80,82,32,0
01A330 52 00 20 00 00 00       
                	disassem_155:
01A336 0D 00 0A 00 00 00       		dc	13,10,0
                	disassem_154:	; MFSPR 
01A33C 4D 00 46 00 53 00 50 00 		dc	77,70,83,80,82,32,0
01A344 52 00 20 00 00 00       
                	disassem_153:	; EOR  
01A34A 45 00 4F 00 52 00 20 00 		dc	69,79,82,32,32,0
01A352 20 00 00 00             
                	disassem_152:	; OR   
01A356 4F 00 52 00 20 00 20 00 		dc	79,82,32,32,32,0
01A35E 20 00 00 00             
                	disassem_151:	; AND  
01A362 41 00 4E 00 44 00 20 00 		dc	65,78,68,32,32,0
01A36A 20 00 00 00             
                	disassem_150:	; DIVU 
01A36E 44 00 49 00 56 00 55 00 		dc	68,73,86,85,32,0
01A376 20 00 00 00             
                	disassem_149:	; DIV  
01A37A 44 00 49 00 56 00 20 00 		dc	68,73,86,32,32,0
01A382 20 00 00 00             
                	disassem_148:	; MULU 
01A386 4D 00 55 00 4C 00 55 00 		dc	77,85,76,85,32,0
01A38E 20 00 00 00             
                	disassem_147:	; MUL  
01A392 4D 00 55 00 4C 00 20 00 		dc	77,85,76,32,32,0
01A39A 20 00 00 00             
                	disassem_146:	; CMPU 
01A39E 43 00 4D 00 50 00 55 00 		dc	67,77,80,85,32,0
01A3A6 20 00 00 00             
                	disassem_145:	; CMP  
01A3AA 43 00 4D 00 50 00 20 00 		dc	67,77,80,32,32,0
01A3B2 20 00 00 00             
                	disassem_144:	; SUBU 
01A3B6 53 00 55 00 42 00 55 00 		dc	83,85,66,85,32,0
01A3BE 20 00 00 00             
                	disassem_143:	; SUB  
01A3C2 53 00 55 00 42 00 20 00 		dc	83,85,66,32,32,0
01A3CA 20 00 00 00             
                	disassem_142:	; ADDU 
01A3CE 41 00 44 00 44 00 55 00 		dc	65,68,68,85,32,0
01A3D6 20 00 00 00             
                	disassem_141:	; ADD  
01A3DA 41 00 44 00 44 00 20 00 		dc	65,68,68,32,32,0
01A3E2 20 00 00 00             
                	disassem_140:	; ???
01A3E6 3F 00 3F 00 3F 00 0D 00 		dc	63,63,63,13,10,0
01A3EE 0A 00 00 00             
                	disassem_139:	; RTI
01A3F2 52 00 54 00 49 00 0D 00 		dc	82,84,73,13,10,0
01A3FA 0A 00 00 00             
                	disassem_138:	; RTE
01A3FE 52 00 54 00 45 00 0D 00 		dc	82,84,69,13,10,0
01A406 0A 00 00 00             
                	disassem_137:	; RTD
01A40A 52 00 54 00 44 00 0D 00 		dc	82,84,68,13,10,0
01A412 0A 00 00 00             
                	disassem_136:	; WAI
01A416 57 00 41 00 49 00 0D 00 		dc	87,65,73,13,10,0
01A41E 0A 00 00 00             
                	disassem_135:	; SEI
01A422 53 00 45 00 49 00 0D 00 		dc	83,69,73,13,10,0
01A42A 0A 00 00 00             
                	disassem_134:	; CLI
01A42E 43 00 4C 00 49 00 0D 00 		dc	67,76,73,13,10,0
01A436 0A 00 00 00             
                	disassem_133:	; IMM
01A43A 49 00 4D 00 4D 00 0D 00 		dc	73,77,77,13,10,0
01A442 0A 00 00 00             
                	disassem_128:
01A446 0D 00 0A 00 00 00       		dc	13,10,0
                	disassem_127:	; %s 
01A44C 25 00 73 00 20 00 00 00 		dc	37,115,32,0
                	disassem_126:
01A454 0D 00 0A 00 00 00       		dc	13,10,0
                	disassem_125:	; MOV   
01A45A 4D 00 4F 00 56 00 20 00 		dc	77,79,86,32,32,32,0
01A462 20 00 20 00 00 00       
                	disassem_120:	; %06X
01A468 25 00 30 00 36 00 58 00 		dc	37,48,54,88,13,10,0
01A470 0D 00 0A 00 00 00       
                	disassem_119:	; %s 
01A476 25 00 73 00 20 00 00 00 		dc	37,115,32,0
                	disassem_114:	; #$%X
01A47E 23 00 24 00 25 00 58 00 		dc	35,36,37,88,13,10,0
01A486 0D 00 0A 00 00 00       
                	disassem_113:	; #$%X
01A48C 23 00 24 00 25 00 58 00 		dc	35,36,37,88,13,10,0
01A494 0D 00 0A 00 00 00       
                	disassem_112:	; %s 
01A49A 25 00 73 00 20 00 00 00 		dc	37,115,32,0
                	disassem_108:	; %s 
01A4A2 25 00 73 00 20 00 00 00 		dc	37,115,32,0
                	disassem_96:	; [R%d]
01A4AA 5B 00 52 00 25 00 64 00 		dc	91,82,37,100,93,13,10,0
01A4B2 5D 00 0D 00 0A 00 00 00 
                	disassem_95:	; [R%d
01A4BA 5B 00 52 00 25 00 64 00 		dc	91,82,37,100,0
01A4C2 00 00                   
                	disassem_94:	; [R%d+R%d
01A4C4 5B 00 52 00 25 00 64 00 		dc	91,82,37,100,43,82,37,100
01A4CC 2B 00 52 00 25 00 64 00 
01A4D4 00 00                   		dc	0
                	disassem_93:	; $%X
01A4D6 24 00 25 00 58 00 00 00 		dc	36,37,88,0
                	disassem_92:	; %s R%d,
01A4DE 25 00 73 00 20 00 52 00 		dc	37,115,32,82,37,100,44,0
01A4E6 25 00 64 00 2C 00 00 00 
                	disassem_83:	; BRK?  #%X
01A4EE 42 00 52 00 4B 00 3F 00 		dc	66,82,75,63,32,32,35,37
01A4F6 20 00 20 00 23 00 25 00 
01A4FE 58 00 0D 00 0A 00 00 00 		dc	88,13,10,0
                	disassem_82:	; INT   #%X
01A506 49 00 4E 00 54 00 20 00 		dc	73,78,84,32,32,32,35,37
01A50E 20 00 20 00 23 00 25 00 
01A516 58 00 0D 00 0A 00 00 00 		dc	88,13,10,0
                	disassem_81:	; DBG   #%X
01A51E 44 00 42 00 47 00 20 00 		dc	68,66,71,32,32,32,35,37
01A526 20 00 20 00 23 00 25 00 
01A52E 58 00 0D 00 0A 00 00 00 		dc	88,13,10,0
                	disassem_80:	; SYS   #%X
01A536 53 00 59 00 53 00 20 00 		dc	83,89,83,32,32,32,35,37
01A53E 20 00 20 00 23 00 25 00 
01A546 58 00 0D 00 0A 00 00 00 		dc	88,13,10,0
                	disassem_74:	; ]
01A54E 5D 00 0D 00 0A 00 00 00 		dc	93,13,10,0
                	disassem_73:	; *%d]
01A556 2A 00 25 00 64 00 5D 00 		dc	42,37,100,93,13,10,0
01A55E 0D 00 0A 00 00 00       
                	disassem_65:
01A564 0D 00 0A 00 00 00       		dc	13,10,0
                	disassem_64:	; [R%d]
01A56A 5B 00 52 00 25 00 64 00 		dc	91,82,37,100,93,13,10,0
01A572 5D 00 0D 00 0A 00 00 00 
                	disassem_63:	; $%X
01A57A 24 00 25 00 58 00 00 00 		dc	36,37,88,0
                	disassem_62:	; $%X
01A582 24 00 25 00 58 00 00 00 		dc	36,37,88,0
                	disassem_42:	; SPR%d
01A58A 53 00 50 00 52 00 25 00 		dc	83,80,82,37,100,0
01A592 64 00 00 00             
                	disassem_41:	; DBSTAT
01A596 44 00 42 00 53 00 54 00 		dc	68,66,83,84,65,84,0
01A59E 41 00 54 00 00 00       
                	disassem_40:	; DBCTRL
01A5A4 44 00 42 00 43 00 54 00 		dc	68,66,67,84,82,76,0
01A5AC 52 00 4C 00 00 00       
                	disassem_39:	; DBAD3
01A5B2 44 00 42 00 41 00 44 00 		dc	68,66,65,68,51,0
01A5BA 33 00 00 00             
                	disassem_38:	; DBAD2
01A5BE 44 00 42 00 41 00 44 00 		dc	68,66,65,68,50,0
01A5C6 32 00 00 00             
                	disassem_37:	; DBAD1
01A5CA 44 00 42 00 41 00 44 00 		dc	68,66,65,68,49,0
01A5D2 31 00 00 00             
                	disassem_36:	; DBAD0
01A5D6 44 00 42 00 41 00 44 00 		dc	68,66,65,68,48,0
01A5DE 30 00 00 00             
                	disassem_35:	; VBR
01A5E2 56 00 42 00 52 00 00 00 		dc	86,66,82,0
                	disassem_34:	; EPC
01A5EA 45 00 50 00 43 00 00 00 		dc	69,80,67,0
                	disassem_33:	; IPC
01A5F2 49 00 50 00 43 00 00 00 		dc	73,80,67,0
                	disassem_32:	; DPC
01A5FA 44 00 50 00 43 00 00 00 		dc	68,80,67,0
                	disassem_31:	; CLK
01A602 43 00 4C 00 4B 00 00 00 		dc	67,76,75,0
                	disassem_30:	; TICK
01A60A 54 00 49 00 43 00 4B 00 		dc	84,73,67,75,0
01A612 00 00                   
                	disassem_29:	; CR3
01A614 43 00 52 00 33 00 00 00 		dc	67,82,51,0
                	disassem_28:	; CR0
01A61C 43 00 52 00 30 00 00 00 		dc	67,82,48,0
                	disassem_24:	; R%d
01A624 52 00 25 00 64 00 00 00 		dc	82,37,100,0
                	disassem_20:	; R%d
01A62C 52 00 25 00 64 00 00 00 		dc	82,37,100,0
                	disassem_16:	; R%d,
01A634 52 00 25 00 64 00 2C 00 		dc	82,37,100,44,0
01A63C 00 00                   
                	disassem_12:	; R%d,
01A63E 52 00 25 00 64 00 2C 00 		dc	82,37,100,44,0
01A646 00 00                   
                	disassem_8:	; r%d
01A648 72 00 25 00 64 00 00 00 		dc	114,37,100,0
                	disassem_4:	; %06X %02X %02X %02X %02X	
01A650 25 00 30 00 36 00 58 00 		dc	37,48,54,88,32,37,48,50
01A658 20 00 25 00 30 00 32 00 
01A660 58 00 20 00 25 00 30 00 		dc	88,32,37,48,50,88,32,37
01A668 32 00 58 00 20 00 25 00 
01A670 30 00 32 00 58 00 20 00 		dc	48,50,88,32,37,48,50,88
01A678 25 00 30 00 32 00 58 00 
01A680 09 00 00 00             		dc	9,0
                	;	global	DispRR
                	;	global	DumpInsnBytes
                		extern	GetCurrAttr
                	;	global	disassem
                	;	global	reverse_video
                		extern	printf
                	;	global	DispBcc
                	;	global	disassem20
                		extern	putstr2
                	;	global	SetCurAttr
                	;	global	SetCurAttr
                		rodata
01A684 00 00 00 00 00 00 00 00 		align	1
01A68C 00 00 00 00             
                	
                		align	8                	
                	debugger_208:	; DBG>
01A690 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,0
01A698 47 00 3E 00 00 00       
                	debugger_143:	; ds2=%08X
01A69E 64 00 73 00 32 00 3D 00 		dc	100,115,50,61,37,48,56,88
01A6A6 25 00 30 00 38 00 58 00 
01A6AE 0D 00 0A 00 00 00       		dc	13,10,0
                	debugger_142:	; ds2=%08X
01A6B4 64 00 73 00 32 00 3D 00 		dc	100,115,50,61,37,48,56,88
01A6BC 25 00 30 00 38 00 58 00 
01A6C4 0D 00 0A 00 00 00       		dc	13,10,0
                	debugger_141:	; ds1=%08X
01A6CA 64 00 73 00 31 00 3D 00 		dc	100,115,49,61,37,48,56,88
01A6D2 25 00 30 00 38 00 58 00 
01A6DA 0D 00 0A 00 00 00       		dc	13,10,0
                	debugger_140:	; ds0=%08X
01A6E0 64 00 73 00 30 00 3D 00 		dc	100,115,48,61,37,48,56,88
01A6E8 25 00 30 00 38 00 58 00 
01A6F0 0D 00 0A 00 00 00       		dc	13,10,0
                	debugger_139:	; db2=%08X
01A6F6 64 00 62 00 32 00 3D 00 		dc	100,98,50,61,37,48,56,88
01A6FE 25 00 30 00 38 00 58 00 
01A706 0D 00 0A 00 00 00       		dc	13,10,0
                	debugger_138:	; db2=%08X
01A70C 64 00 62 00 32 00 3D 00 		dc	100,98,50,61,37,48,56,88
01A714 25 00 30 00 38 00 58 00 
01A71C 0D 00 0A 00 00 00       		dc	13,10,0
                	debugger_137:	; db1=%08X
01A722 64 00 62 00 31 00 3D 00 		dc	100,98,49,61,37,48,56,88
01A72A 25 00 30 00 38 00 58 00 
01A732 0D 00 0A 00 00 00       		dc	13,10,0
                	debugger_136:	; db0=%08X
01A738 64 00 62 00 30 00 3D 00 		dc	100,98,48,61,37,48,56,88
01A740 25 00 30 00 38 00 58 00 
01A748 0D 00 0A 00 00 00       		dc	13,10,0
                	debugger_135:	; d2=%08X
01A74E 64 00 32 00 3D 00 25 00 		dc	100,50,61,37,48,56,88,13
01A756 30 00 38 00 58 00 0D 00 
01A75E 0A 00 00 00             		dc	10,0
                	debugger_134:	; d2=%08X
01A762 64 00 32 00 3D 00 25 00 		dc	100,50,61,37,48,56,88,13
01A76A 30 00 38 00 58 00 0D 00 
01A772 0A 00 00 00             		dc	10,0
                	debugger_133:	; d1=%08X
01A776 64 00 31 00 3D 00 25 00 		dc	100,49,61,37,48,56,88,13
01A77E 30 00 38 00 58 00 0D 00 
01A786 0A 00 00 00             		dc	10,0
                	debugger_132:	; d0=%08X
01A78A 64 00 30 00 3D 00 25 00 		dc	100,48,61,37,48,56,88,13
01A792 30 00 38 00 58 00 0D 00 
01A79A 0A 00 00 00             		dc	10,0
                	debugger_131:	; i2=%08X
01A79E 69 00 32 00 3D 00 25 00 		dc	105,50,61,37,48,56,88,13
01A7A6 30 00 38 00 58 00 0D 00 
01A7AE 0A 00 00 00             		dc	10,0
                	debugger_130:	; i2=%08X
01A7B2 69 00 32 00 3D 00 25 00 		dc	105,50,61,37,48,56,88,13
01A7BA 30 00 38 00 58 00 0D 00 
01A7C2 0A 00 00 00             		dc	10,0
                	debugger_129:	; i1=%08X
01A7C6 69 00 31 00 3D 00 25 00 		dc	105,49,61,37,48,56,88,13
01A7CE 30 00 38 00 58 00 0D 00 
01A7D6 0A 00 00 00             		dc	10,0
                	debugger_128:	; i0=%08X
01A7DA 69 00 30 00 3D 00 25 00 		dc	105,48,61,37,48,56,88,13
01A7E2 30 00 38 00 58 00 0D 00 
01A7EA 0A 00 00 00             		dc	10,0
                	debugger_125:	; DBG>
01A7EE 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,0
01A7F6 47 00 3E 00 00 00       
                	debugger_110:	; DBG>dsb%d <not set>
01A7FC 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,100,115
01A804 47 00 3E 00 64 00 73 00 
01A80C 62 00 25 00 64 00 20 00 		dc	98,37,100,32,60,110,111,116
01A814 3C 00 6E 00 6F 00 74 00 
01A81C 20 00 73 00 65 00 74 00 		dc	32,115,101,116,62,0
01A824 3E 00 00 00             
                	debugger_109:	; DBG>dsb%d=%08X
01A828 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,100,115
01A830 47 00 3E 00 64 00 73 00 
01A838 62 00 25 00 64 00 3D 00 		dc	98,37,100,61,37,48,56,88
01A840 25 00 30 00 38 00 58 00 
01A848 0D 00 0A 00 00 00       		dc	13,10,0
                	debugger_94:	; DBG>db%d <not set>
01A84E 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,100,98
01A856 47 00 3E 00 64 00 62 00 
01A85E 25 00 64 00 20 00 3C 00 		dc	37,100,32,60,110,111,116,32
01A866 6E 00 6F 00 74 00 20 00 
01A86E 73 00 65 00 74 00 3E 00 		dc	115,101,116,62,0
01A876 00 00                   
                	debugger_93:	; DBG>db%d=%08X
01A878 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,100,98
01A880 47 00 3E 00 64 00 62 00 
01A888 25 00 64 00 3D 00 25 00 		dc	37,100,61,37,48,56,88,13
01A890 30 00 38 00 58 00 0D 00 
01A898 0A 00 00 00             		dc	10,0
                	debugger_78:	; DBG>ib%d <not set>
01A89C 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,105,98
01A8A4 47 00 3E 00 69 00 62 00 
01A8AC 25 00 64 00 20 00 3C 00 		dc	37,100,32,60,110,111,116,32
01A8B4 6E 00 6F 00 74 00 20 00 
01A8BC 73 00 65 00 74 00 3E 00 		dc	115,101,116,62,0
01A8C4 00 00                   
                	debugger_77:	; DBG>ib%d=%08X
01A8C6 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,105,98
01A8CE 47 00 3E 00 69 00 62 00 
01A8D6 25 00 64 00 3D 00 25 00 		dc	37,100,61,37,48,56,88,13
01A8DE 30 00 38 00 58 00 0D 00 
01A8E6 0A 00 00 00             		dc	10,0
                	debugger_14:	; DBG>
01A8EA 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,0
01A8F2 47 00 3E 00 00 00       
                	debugger_13:	; Type 'q' to quit.
01A8F8 0D 00 0A 00 54 00 79 00 		dc	13,10,84,121,112,101,32,39
01A900 70 00 65 00 20 00 27 00 
01A908 71 00 27 00 20 00 74 00 		dc	113,39,32,116,111,32,113,117
01A910 6F 00 20 00 71 00 75 00 
01A918 69 00 74 00 2E 00 00 00 		dc	105,116,46,0
                	debugger_12:	; arm debugging mode using the 'a' command.
01A920 0D 00 0A 00 61 00 72 00 		dc	13,10,97,114,109,32,100,101
01A928 6D 00 20 00 64 00 65 00 
01A930 62 00 75 00 67 00 67 00 		dc	98,117,103,103,105,110,103,32
01A938 69 00 6E 00 67 00 20 00 
01A940 6D 00 6F 00 64 00 65 00 		dc	109,111,100,101,32,117,115,105
01A948 20 00 75 00 73 00 69 00 
01A950 6E 00 67 00 20 00 74 00 		dc	110,103,32,116,104,101,32,39
01A958 68 00 65 00 20 00 27 00 
01A960 61 00 27 00 20 00 63 00 		dc	97,39,32,99,111,109,109,97
01A968 6F 00 6D 00 6D 00 61 00 
01A970 6E 00 64 00 2E 00 00 00 		dc	110,100,46,0
                	debugger_11:	; Once the debug registers are set it is necessary to 
01A978 0D 00 0A 00 4F 00 6E 00 		dc	13,10,79,110,99,101,32,116
01A980 63 00 65 00 20 00 74 00 
01A988 68 00 65 00 20 00 64 00 		dc	104,101,32,100,101,98,117,103
01A990 65 00 62 00 75 00 67 00 
01A998 20 00 72 00 65 00 67 00 		dc	32,114,101,103,105,115,116,101
01A9A0 69 00 73 00 74 00 65 00 
01A9A8 72 00 73 00 20 00 61 00 		dc	114,115,32,97,114,101,32,115
01A9B0 72 00 65 00 20 00 73 00 
01A9B8 65 00 74 00 20 00 69 00 		dc	101,116,32,105,116,32,105,115
01A9C0 74 00 20 00 69 00 73 00 
01A9C8 20 00 6E 00 65 00 63 00 		dc	32,110,101,99,101,115,115,97
01A9D0 65 00 73 00 73 00 61 00 
01A9D8 72 00 79 00 20 00 74 00 		dc	114,121,32,116,111,32,0
01A9E0 6F 00 20 00 00 00       
                	debugger_10:	; Setting a register to zero will clear the breakpoint.
01A9E6 0D 00 0A 00 53 00 65 00 		dc	13,10,83,101,116,116,105,110
01A9EE 74 00 74 00 69 00 6E 00 
01A9F6 67 00 20 00 61 00 20 00 		dc	103,32,97,32,114,101,103,105
01A9FE 72 00 65 00 67 00 69 00 
01AA06 73 00 74 00 65 00 72 00 		dc	115,116,101,114,32,116,111,32
01AA0E 20 00 74 00 6F 00 20 00 
01AA16 7A 00 65 00 72 00 6F 00 		dc	122,101,114,111,32,119,105,108
01AA1E 20 00 77 00 69 00 6C 00 
01AA26 6C 00 20 00 63 00 6C 00 		dc	108,32,99,108,101,97,114,32
01AA2E 65 00 61 00 72 00 20 00 
01AA36 74 00 68 00 65 00 20 00 		dc	116,104,101,32,98,114,101,97
01AA3E 62 00 72 00 65 00 61 00 
01AA46 6B 00 70 00 6F 00 69 00 		dc	107,112,111,105,110,116,46,0
01AA4E 6E 00 74 00 2E 00 00 00 
                	debugger_9:	; indicate a data store only breakpoint.
01AA56 0D 00 0A 00 69 00 6E 00 		dc	13,10,105,110,100,105,99,97
01AA5E 64 00 69 00 63 00 61 00 
01AA66 74 00 65 00 20 00 61 00 		dc	116,101,32,97,32,100,97,116
01AA6E 20 00 64 00 61 00 74 00 
01AA76 61 00 20 00 73 00 74 00 		dc	97,32,115,116,111,114,101,32
01AA7E 6F 00 72 00 65 00 20 00 
01AA86 6F 00 6E 00 6C 00 79 00 		dc	111,110,108,121,32,98,114,101
01AA8E 20 00 62 00 72 00 65 00 
01AA96 61 00 6B 00 70 00 6F 00 		dc	97,107,112,111,105,110,116,46
01AA9E 69 00 6E 00 74 00 2E 00 
01AAA6 00 00                   		dc	0
                	debugger_8:	; breakpoint. Prefix the register number with 'ds' to
01AAA8 0D 00 0A 00 62 00 72 00 		dc	13,10,98,114,101,97,107,112
01AAB0 65 00 61 00 6B 00 70 00 
01AAB8 6F 00 69 00 6E 00 74 00 		dc	111,105,110,116,46,32,80,114
01AAC0 2E 00 20 00 50 00 72 00 
01AAC8 65 00 66 00 69 00 78 00 		dc	101,102,105,120,32,116,104,101
01AAD0 20 00 74 00 68 00 65 00 
01AAD8 20 00 72 00 65 00 67 00 		dc	32,114,101,103,105,115,116,101
01AAE0 69 00 73 00 74 00 65 00 
01AAE8 72 00 20 00 6E 00 75 00 		dc	114,32,110,117,109,98,101,114
01AAF0 6D 00 62 00 65 00 72 00 
01AAF8 20 00 77 00 69 00 74 00 		dc	32,119,105,116,104,32,39,100
01AB00 68 00 20 00 27 00 64 00 
01AB08 73 00 27 00 20 00 74 00 		dc	115,39,32,116,111,0
01AB10 6F 00 00 00             
                	debugger_7:	; instruction breakpoint or a 'd' to indicate a data
01AB14 0D 00 0A 00 69 00 6E 00 		dc	13,10,105,110,115,116,114,117
01AB1C 73 00 74 00 72 00 75 00 
01AB24 63 00 74 00 69 00 6F 00 		dc	99,116,105,111,110,32,98,114
01AB2C 6E 00 20 00 62 00 72 00 
01AB34 65 00 61 00 6B 00 70 00 		dc	101,97,107,112,111,105,110,116
01AB3C 6F 00 69 00 6E 00 74 00 
01AB44 20 00 6F 00 72 00 20 00 		dc	32,111,114,32,97,32,39,100
01AB4C 61 00 20 00 27 00 64 00 
01AB54 27 00 20 00 74 00 6F 00 		dc	39,32,116,111,32,105,110,100
01AB5C 20 00 69 00 6E 00 64 00 
01AB64 69 00 63 00 61 00 74 00 		dc	105,99,97,116,101,32,97,32
01AB6C 65 00 20 00 61 00 20 00 
01AB74 64 00 61 00 74 00 61 00 		dc	100,97,116,97,0
01AB7C 00 00                   
                	debugger_6:	; Prefix the register number with an 'i' to indicate an
01AB7E 0D 00 0A 00 50 00 72 00 		dc	13,10,80,114,101,102,105,120
01AB86 65 00 66 00 69 00 78 00 
01AB8E 20 00 74 00 68 00 65 00 		dc	32,116,104,101,32,114,101,103
01AB96 20 00 72 00 65 00 67 00 
01AB9E 69 00 73 00 74 00 65 00 		dc	105,115,116,101,114,32,110,117
01ABA6 72 00 20 00 6E 00 75 00 
01ABAE 6D 00 62 00 65 00 72 00 		dc	109,98,101,114,32,119,105,116
01ABB6 20 00 77 00 69 00 74 00 
01ABBE 68 00 20 00 61 00 6E 00 		dc	104,32,97,110,32,39,105,39
01ABC6 20 00 27 00 69 00 27 00 
01ABCE 20 00 74 00 6F 00 20 00 		dc	32,116,111,32,105,110,100,105
01ABD6 69 00 6E 00 64 00 69 00 
01ABDE 63 00 61 00 74 00 65 00 		dc	99,97,116,101,32,97,110,0
01ABE6 20 00 61 00 6E 00 00 00 
                	debugger_5:	; There are a total of four breakpoint registers (0-3).
01ABEE 0D 00 0A 00 54 00 68 00 		dc	13,10,84,104,101,114,101,32
01ABF6 65 00 72 00 65 00 20 00 
01ABFE 61 00 72 00 65 00 20 00 		dc	97,114,101,32,97,32,116,111
01AC06 61 00 20 00 74 00 6F 00 
01AC0E 74 00 61 00 6C 00 20 00 		dc	116,97,108,32,111,102,32,102
01AC16 6F 00 66 00 20 00 66 00 
01AC1E 6F 00 75 00 72 00 20 00 		dc	111,117,114,32,98,114,101,97
01AC26 62 00 72 00 65 00 61 00 
01AC2E 6B 00 70 00 6F 00 69 00 		dc	107,112,111,105,110,116,32,114
01AC36 6E 00 74 00 20 00 72 00 
01AC3E 65 00 67 00 69 00 73 00 		dc	101,103,105,115,116,101,114,115
01AC46 74 00 65 00 72 00 73 00 
01AC4E 20 00 28 00 30 00 2D 00 		dc	32,40,48,45,51,41,46,0
01AC56 33 00 29 00 2E 00 00 00 
                	debugger_4:	; DBG>i1=12345678     will assign 12345678 to i1
01AC5E 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,105,49
01AC66 47 00 3E 00 69 00 31 00 
01AC6E 3D 00 31 00 32 00 33 00 		dc	61,49,50,51,52,53,54,55
01AC76 34 00 35 00 36 00 37 00 
01AC7E 38 00 20 00 20 00 20 00 		dc	56,32,32,32,32,32,119,105
01AC86 20 00 20 00 77 00 69 00 
01AC8E 6C 00 6C 00 20 00 61 00 		dc	108,108,32,97,115,115,105,103
01AC96 73 00 73 00 69 00 67 00 
01AC9E 6E 00 20 00 31 00 32 00 		dc	110,32,49,50,51,52,53,54
01ACA6 33 00 34 00 35 00 36 00 
01ACAE 37 00 38 00 20 00 74 00 		dc	55,56,32,116,111,32,105,49
01ACB6 6F 00 20 00 69 00 31 00 
01ACBE 00 00                   		dc	0
                	debugger_3:	; an address to it.
01ACC0 0D 00 0A 00 61 00 6E 00 		dc	13,10,97,110,32,97,100,100
01ACC8 20 00 61 00 64 00 64 00 
01ACD0 72 00 65 00 73 00 73 00 		dc	114,101,115,115,32,116,111,32
01ACD8 20 00 74 00 6F 00 20 00 
01ACE0 69 00 74 00 2E 00 00 00 		dc	105,116,46,0
                	debugger_2:	; Following a breakpoint register with an '=' assigns 
01ACE8 0D 00 0A 00 46 00 6F 00 		dc	13,10,70,111,108,108,111,119
01ACF0 6C 00 6C 00 6F 00 77 00 
01ACF8 69 00 6E 00 67 00 20 00 		dc	105,110,103,32,97,32,98,114
01AD00 61 00 20 00 62 00 72 00 
01AD08 65 00 61 00 6B 00 70 00 		dc	101,97,107,112,111,105,110,116
01AD10 6F 00 69 00 6E 00 74 00 
01AD18 20 00 72 00 65 00 67 00 		dc	32,114,101,103,105,115,116,101
01AD20 69 00 73 00 74 00 65 00 
01AD28 72 00 20 00 77 00 69 00 		dc	114,32,119,105,116,104,32,97
01AD30 74 00 68 00 20 00 61 00 
01AD38 6E 00 20 00 27 00 3D 00 		dc	110,32,39,61,39,32,97,115
01AD40 27 00 20 00 61 00 73 00 
01AD48 73 00 69 00 67 00 6E 00 		dc	115,105,103,110,115,32,0
01AD50 73 00 20 00 00 00       
                	debugger_1:	; DBG>i2?
01AD56 0D 00 0A 00 44 00 42 00 		dc	13,10,68,66,71,62,105,50
01AD5E 47 00 3E 00 69 00 32 00 
01AD66 3F 00 00 00             		dc	63,0
                	debugger_0:	; '?' queries the status of a breakpoint register as in:
01AD6A 0D 00 0A 00 27 00 3F 00 		dc	13,10,39,63,39,32,113,117
01AD72 27 00 20 00 71 00 75 00 
01AD7A 65 00 72 00 69 00 65 00 		dc	101,114,105,101,115,32,116,104
01AD82 73 00 20 00 74 00 68 00 
01AD8A 65 00 20 00 73 00 74 00 		dc	101,32,115,116,97,116,117,115
01AD92 61 00 74 00 75 00 73 00 
01AD9A 20 00 6F 00 66 00 20 00 		dc	32,111,102,32,97,32,98,114
01ADA2 61 00 20 00 62 00 72 00 
01ADAA 65 00 61 00 6B 00 70 00 		dc	101,97,107,112,111,105,110,116
01ADB2 6F 00 69 00 6E 00 74 00 
01ADBA 20 00 72 00 65 00 67 00 		dc	32,114,101,103,105,115,116,101
01ADC2 69 00 73 00 74 00 65 00 
01ADCA 72 00 20 00 61 00 73 00 		dc	114,32,97,115,32,105,110,58
01ADD2 20 00 69 00 6E 00 3A 00 
01ADDA 00 00                   		dc	0
                	;	global	GetVBR
                	;	global	dbg_ReadSetDSB
                		extern	putch
                	;	global	dbg_prompt
                	;	global	CvtScreenToAscii
                	;	global	dbg_GetHexNumber
                	;	global	set_vector
                	;	global	dbg_init
                	;	global	debugger
                	;	global	dbg_GetCursorCol
                	;	global	ignore_blanks
                	;	global	dbg_GetCursorRow
                	;	global	dbg_nextNonSpace
                	;	global	dbg_getchar
                	;	global	dbg_ungetch
                	;	global	dbctrl
                		extern	printf
                	;	global	dbg_stack
                	;	global	dbg_parse_line
                	;	global	dbg_GetDBAD
                	;	global	dbg_ReadSetDB
                		extern	disassem20
                	;	global	dbg_ReadSetIB
                	;	global	dbg_SetDBAD
                	;	global	dbg_arm
                	;	global	dbg_irq
                		extern	getchar
                	;	global	linebuf
                	;	global	dbg_DisplayHelp
                	;	global	linendx
                	;	global	linendx
                	
01ADDC 3F 00 00 00             	    nop
01ADE0 3F 00 00 00             	    nop
                	
                	
1805 symbols
  Symbol Name                              seg     address
  API_AREA                                    bss  001c20
  API_head                                    bss  001376
  API_sema                                    bss  001380
  API_tail                                    bss  001378
  AddTaskToReadyList                         code  014960
  AddTaskToReadyList.0001                    code  0149bc
  AddTaskToReadyList.0002                    code  014990
  AddTaskToReadyList.0003                    code  0149cc
  AddToTimeoutList                           code  014a78
  AllocMbx                                   code  014c6c
  AsciiToHexNybble                           code  011970
  AsciiToHexNybble.gthx3                     code  0119d0
  AsciiToHexNybble.gthx5                     code  011990
  AsciiToHexNybble.gthx6                     code  0119b0
  AsciiToScreen                              code  010fac
  AsciiToScreen.00001                        code  010fdc
  AsciiToScreen.00003                        code  010fe4
  AsciiToScreen.00004                        code  010fec
  BIOS1_sema                                  bss  c00218
  BIOSCall                                   code  011234
  BIOSCall.0003                              code  011290
  BIOSCall.0004                              code  011280
  BIOSCall1                                  code  01117c
  BIOSCall1.0002                             code  011208
  BIOSCall1.0003                             code  011220
  BIOSCall1.0004                             code  011204
  BIOSCallTask                               code  011298
  BIOSCallTask.0001                          code  0112a8
  BIOS_CALL                                 const  00000a
  BIOS_DONE                                 const  000001
  BIOS_E_Timeout                            const  000002
  BIOS_FREE                                 const  000000
  BIOS_FuncTable                             code  010080
  BIOS_INSERVICE                            const  000002
  BIOS_MbxHandle                            const  c00008
  BIOS_RespMbx                                bss  c00010
  BIOS_STACKS_Array                         const  7e00000
  BIOS_arg1                                 const  000008
  BIOS_arg2                                 const  000010
  BIOS_arg3                                 const  000018
  BIOS_arg4                                 const  000020
  BIOS_arg5                                 const  000028
  BIOS_op                                   const  000000
  BIOS_resp                                 const  000030
  BIOS_sema                                   bss  001388
  BIOS_stat                                 const  000038
  BITMAP_SCREEN1                            const  400000
  BITMAP_SCREEN2                            const  800000
  BMP_CLUT                                  const  0c5800
  BPT_ISR                                    code  012b20
  BPT_ISR.0001                               code  012b4c
  BSI_BootSig                               const  000026
  BSI_DriveNum                              const  000024
  BSI_FATS                                  const  000010
  BSI_FileSysType                           const  000036
  BSI_Heads                                 const  00001a
  BSI_HiddenSecs                            const  00001c
  BSI_HugeSecs                              const  00001e
  BSI_JMP                                   const  000000
  BSI_Media                                 const  000015
  BSI_OEMName                               const  000003
  BSI_ResSectors                            const  00000e
  BSI_RootDirEnts                           const  000011
  BSI_Rsvd1                                 const  000025
  BSI_SecPerCluster                         const  00000d
  BSI_SecPerFAT                             const  000016
  BSI_SecPerTrack                           const  000018
  BSI_Sectors                               const  000013
  BSI_VolID                                 const  000027
  BSI_VolLabel                              const  00002b
  BSI_bps                                   const  00000b
  BYTE_SECTOR_BUF                           const  008000
  BlankLine                                  code  010f40
  BlankLine.0001                             code  010f88
  BranchToSelf                               code  014018
  BranchToSelf2                              code  011080
  CPU0_BIOS_STACK                           const  006800
  CPU0_DBG_STACK                            const  7cf000
  CPU0_IRQ_STACK                            const  008800
  CPU0_SYS_STACK                            const  005000
  CPU0_Start                                 code  010108
  CPU0_Start.0001                            code  010160
  CPU0_Start.0002                            code  010108
  CPU1_BIOS_STACK                           const  021800
  CPU1_IRQ_STACK                            const  020800
  CPU1_STACK                                const  7cf800
  CPU1_SYS_STACK                            const  021000
  CPU1_Start                                 code  0100b8
  CPU1_Start.0001                            code  0100c8
  CPU1_Start.0003                            code  0100e8
  CPUIdleTick                                 bss  0013a0
  CR                                        const  00000d
  CRLF                                       code  010a94
  CRLF1                                      code  010a98
  CTRLC                                     const  000003
  CTRLCCheck                                 code  0118d0
  CTRLCCheck.0001                            code  0118f8
  CTRLH                                     const  000008
  CTRLI                                     const  000009
  CTRLJ                                     const  00000a
  CTRLK                                     const  00000b
  CTRLM                                     const  00000d
  CTRLS                                     const  000013
  CTRLX                                     const  000018
  CalcScreenLoc                              code  010bf4
  CalcScreenLoc.0001                         code  010c40
  CharsInRxBuf                               code  0105b4
  CheckKeys                                  code  0118bc
  CheckMsg                                   code  015390
  CheckScrollLock                            code  011900
  CheckScrollLock.0001                       code  011920
  CheckScrollLock.0002                       code  01190c
  ClearBmpScreen                             code  80000000000000be
  ClearScreen                                code  010920
  ClearScreen.cs1                            code  01096c
  CopyScreenToVirtualScreen                  code  015d58
  CopyScreenToVirtualScreen.0001             code  015d84
  CopyVirtualScreenToScreen                  code  015ce0
  CopyVirtualScreenToScreen.0001             code  015d0c
  CursorCol                                   bss  001131
  CursorOff                                  code  011024
  CursorOn                                   code  011028
  CursorRow                                   bss  001130
  CvtScreenToAscii                           code  018aa0
  DBG_STACK                                 const  007000
  DCB_Array                                   bss  e50000
  DCB_ArrayEnd                                bss  e5de40
  DCB_LastErc                               const  000018
  DCB_Mbx                                   const  000048
  DCB_Name                                  const  000000
  DCB_ReentCount                            const  000038
  DCB_Resv1                                 const  000058
  DCB_Resv2                                 const  000060
  DCB_SIZE                                  const  000068
  DCB_Size                                    bss  80000000000006f2
  DCB_StartBlock                            const  000020
  DCB_Type                                  const  00000c
  DCB_fSingleUser                           const  000039
  DCB_hJob                                  const  000040
  DCB_nBPB                                  const  000010
  DCB_nBlocks                               const  000028
  DCB_pCmdProc                              const  000030
  DCB_pSema                                 const  000050
  DRSP_DONE                                 const  000001
  DVC_BuildBPB                              const  000005
  DVC_Close                                 const  000007
  DVC_FlushInput                            const  000014
  DVC_FlushOutput                           const  000015
  DVC_GetChar                               const  000008
  DVC_GetCharDirect                         const  00000a
  DVC_IOCTRL_READ                           const  000018
  DVC_IOCTRL_WRITE                          const  000019
  DVC_IRQ                                   const  000016
  DVC_Initialize                            const  000002
  DVC_InputStatus                           const  00000c
  DVC_IsRemoveable                          const  000017
  DVC_MediaCheck                            const  000004
  DVC_Nop                                   const  000000
  DVC_Open                                  const  000006
  DVC_OutputStatus                          const  000013
  DVC_OutputUntilBusy                       const  00001a
  DVC_PeekChar                              const  000009
  DVC_PeekCharDirect                        const  00000b
  DVC_PutChar                               const  00000d
  DVC_ReadBlock                             const  000010
  DVC_SetPosition                           const  00000f
  DVC_Setup                                 const  000001
  DVC_Status                                const  000003
  DVC_VerifyBlock                           const  000012
  DVC_WriteBlock                            const  000011
  DequeueMsgFromMbx                          code  014f78
  DequeueThreadFromMbx                       code  014fcc
  DequeueThreadFromMbx2                      code  015058
  DispBcc                                    code  0173f4
  DispBrk                                    code  01705c
  DispCharAttr                               code  01089c
  DispCharQ                                  code  010ab4
  DispIndexedAddr                            code  017138
  DispLS                                     code  0172a0
  DispMemAddress                             code  016f10
  DispRI                                     code  01731c
  DispRR                                     code  0174b8
  DispRa                                     code  016c70
  DispRac                                    code  016c18
  DispRb                                     code  016cc8
  DispRst                                    code  016b68
  DispRstc                                   code  016bc0
  DispSpr                                    code  016d20
  DispStartMsg                               code  01106c
  DisplayByte                                code  0109c8
  DisplayChar                                code  010c5c
  DisplayChar.dcx12                          code  010db4
  DisplayChar.dcx4                           code  010cf0
  DisplayChar.dcx5                           code  010df8
  DisplayChar.dcx7                           code  010d4c
  DisplayChar.doBackspace                    code  010dd0
  DisplayChar.doCursorDown                   code  010d84
  DisplayChar.doCursorHome                   code  010da0
  DisplayChar.doCursorLeft                   code  010d6c
  DisplayChar.doCursorRight                  code  010d34
  DisplayChar.doCursorUp                     code  010d54
  DisplayChar.doDelete                       code  010dbc
  DisplayChar.doLinefeed                     code  010e2c
  DisplayChar.doTab                          code  010d0c
  DisplayChar.docr                           code  010d24
  DisplayCharHex                             code  0109b4
  DisplayErr                                 code  0119dc
  DisplayHalf                                code  0109a0
  DisplayMemBytes                            code  0117fc
  DisplayMemBytes.001                        code  011830
  DisplayMemBytes.002                        code  011868
  DisplayMemBytes.003                        code  011888
  DisplayMemBytes.004                        code  01187c
  DisplayNybble                              code  0109dc
  DisplayNybble.0001                         code  0109fc
  DisplaySpace                               code  0110e4
  DisplayString                              code  010a0c
  DisplayString.dm1                          code  010a30
  DisplayString.dm2                          code  010a1c
  DisplayString16                            code  010a3c
  DisplayString16.dm1                        code  010a7c
  DisplayString16.dm2                        code  010a58
  DisplayStringCRLF                          code  010a88
  DisplayWord                                code  01098c
  Dummy1                                      bss  001132
  DumpInsnBytes                              code  016ae0
  DumpTaskList                               code  0147e0
  DumpTaskList.0001                          code  014804
  E_Arg                                     const  000001
  E_BadAlarm                                const  000011
  E_BadBlockNum                             const  000025
  E_BadDevNum                               const  000020
  E_BadDevOp                                const  000022
  E_BadFuncno                               const  000001
  E_BadMbx                                  const  000004
  E_DCBInUse                                const  000019
  E_NoDev                                   const  000021
  E_NoMem                                   const  00000c
  E_NoMoreAlarmBlks                         const  000044
  E_NoMoreMbx                               const  000040
  E_NoMoreMsgBlks                           const  000041
  E_NoMoreTCBs                              const  000045
  E_NoMsg                                   const  00000b
  E_NoThread                                const  000006
  E_NotAlloc                                const  000009
  E_NotOwner                                const  000012
  E_Ok                                      const  000000
  E_QueFull                                 const  000005
  E_QueStrategy                             const  000013
  E_ReadError                               const  000023
  E_Timeout                                 const  000010
  E_TooManyBlocks                           const  000026
  E_Unsupported                             const  000003
  E_WriteError                              const  000024
  EndStaticAllocations                        bss  00d400
  ExitTask                                   code  01470c
  FMTKInitialize                             code  01401c
  FMTKTick                                   code  0155dc
  FMTKTick.0001                              code  0155f0
  FMTKTick.0002                              code  0155f8
  FMTKTick.0003                              code  01561c
  FMTKTick.0004                              code  015674
  FMTKTick.SYSLocked                         code  015684
  FMTKTick.cantLockSYS                       code  015644
  FMTK_CALL                                 const  000004
  FMTK_Inited                                 bss  c001b0
  ForceIOFocus                               code  015a58
  ForceReleaseIOFocus                        code  015c00
  FreeJCB                                     bss  c00100
  FreeMbx                                    code  014d2c
  FreeMbx2                                   code  014d44
  FreeMbxHandle                               bss  c00120
  FreeMsg                                     bss  c00130
  FreeTCB                                     bss  c00108
  GetCurrAttr                              rodata  010b64
  GetCursorPos                               code  011054
  GetHexNumber                               code  011930
  GetHexNumber.gthxn1                        code  011960
  GetHexNumber.gthxn2                        code  011944
  GetJCBPtr                                  code  0110fc
  GetJCBPtr.0001                             code  011124
  GetPixel                                   code  8000000000000145
  GetRandomNumber                            code  011ad4
  GetRange                                   code  011514
  GetScreenLocation                          code  010b54
  GetSystemTime                              code  011390
  GetTwoParams                               code  0114f8
  GetVBR                                     code  0188b8
  HomeCursor                                 code  0108e4
  HomeCursor.0001                            code  010914
  I2C_CMD                                   const  000004
  I2C_CONTROL                               const  000002
  I2C_ERR                                    code  0125b0
  I2C_INIT                                   code  0124e0
  I2C_MASTER                                const  ffdc0e00
  I2C_PRESCALE_HI                           const  000001
  I2C_PRESCALE_LO                           const  000000
  I2C_READ                                   code  012514
  I2C_RX                                    const  000003
  I2C_STAT                                  const  000004
  I2C_TX                                    const  000003
  I2C_WAIT_TC                                code  012640
  I2C_WAIT_TC.0001                           code  012640
  I2C_WRITE                                  code  0125c0
  IOFocusNdx                                  bss  c00028
  IOFocusTbl                                  bss  c00030
  IRQFlag                                     bss  c00018
  IdleTask                                   code  01446c
  IncCursorPos                               code  010e34
  IncCursorRow                               code  010e68
  InitFMTK                                   code  01401c
  InitFMTK.0001                              code  014114
  InitPIC                                    code  0103e4
  InitPIC1                                   code  010400
  InitUart                                   code  01041c
  InputVec                                    bss  001110
  JCB0                                        bss  0013c0
  JCB_Array                                   bss  c50000
  JCB_ArrayEnd                                bss  c5ff00
  JCB_CmdLine                               const  000280
  JCB_CurrAttr                              const  000418
  JCB_CursorCol                             const  00040d
  JCB_CursorFlash                           const  00040f
  JCB_CursorOn                              const  00040e
  JCB_CursorRow                             const  00040c
  JCB_CursorType                            const  000410
  JCB_ExitError                             const  0003e0
  JCB_ExitRF                                const  000180
  JCB_KeybdAck                              const  00044a
  JCB_KeybdBad                              const  000449
  JCB_KeybdBuffer                           const  000450
  JCB_KeybdEcho                             const  000448
  JCB_KeybdHead                             const  000438
  JCB_KeybdLocks                            const  00044c
  JCB_KeybdTail                             const  000440
  JCB_LogSize                               const  00000b
  JCB_MemGroup0                             const  000024
  JCB_MemGroup1                             const  000026
  JCB_MemGroup2                             const  000028
  JCB_MemGroup3                             const  00002a
  JCB_MemGroup4                             const  00002c
  JCB_MemGroup5                             const  00002e
  JCB_Name                                  const  000004
  JCB_Next                                  const  000420
  JCB_NormAttr                              const  000414
  JCB_Number                                const  000000
  JCB_Path                                  const  000080
  JCB_ScrlCnt                               const  00041c
  JCB_Size                                  const  000500
  JCB_SysIn                                 const  000380
  JCB_SysOut                                const  0003b0
  JCB_UserName                              const  000060
  JCB_VideoCols                             const  00040b
  JCB_VideoMode                             const  000408
  JCB_VideoRows                             const  00040a
  JCB_esc                                   const  000470
  JCB_fVidPause                             const  00041e
  JCB_iof_next                              const  000428
  JCB_iof_prev                              const  000430
  JCB_nCode                                 const  000038
  JCB_nData                                 const  000048
  JCB_nStack                                const  000058
  JCB_pCode                                 const  000030
  JCB_pData                                 const  000040
  JCB_pStack                                const  000050
  JCB_pVidMem                               const  0003e8
  JCB_pVirtVid                              const  0003f8
  KEYBD                                     const  ffdc0000
  KEYBDCLR                                  const  ffdc0004
  KEYBD_DELAY                               const  0003e8
  KeyState1                                   bss  001138
  KeyState2                                   bss  001139
  KeybdBad                                    bss  001135
  KeybdEcho                                   bss  001134
  KeybdGetChar                               code  011e2c
  KeybdGetChar.0001                          code  011e60
  KeybdGetChar.0003                          code  011e38
  KeybdGetChar.0004                          code  011f88
  KeybdGetChar.0005                          code  01200c
  KeybdGetChar.0006                          code  011e5c
  KeybdGetChar.0007                          code  011f20
  KeybdGetChar.0008                          code  011f34
  KeybdGetChar.0009                          code  011f08
  KeybdGetChar.0010                          code  011eec
  KeybdGetChar.0011                          code  011fb8
  KeybdGetChar.0012                          code  011fe8
  KeybdGetChar.0013                          code  011ec8
  KeybdGetChar.doAlt                         code  011f98
  KeybdGetChar.doCapsLock                    code  012030
  KeybdGetChar.doCtrl                        code  011f6c
  KeybdGetChar.doExtend                      code  011f5c
  KeybdGetChar.doKeyup                       code  011f50
  KeybdGetChar.doNumLock                     code  01201c
  KeybdGetChar.doScrollLock                  code  012044
  KeybdGetChar.doShift                       code  011ff0
  KeybdGetChar.doTab                         code  011fc8
  KeybdGetCharDirect                         code  011b54
  KeybdGetCharDirect.0001                    code  011b5c
  KeybdGetCharDirect.gk1                     code  011ba0
  KeybdGetCharDirect.gk2                     code  011b9c
  KeybdGetCharDirectNB                       code  011ae0
  KeybdGetCharDirectNB.0001                  code  011b40
  KeybdGetCharDirectNB.0002                  code  011b34
  KeybdGetCharDirectNB.0003                  code  011b30
  KeybdGetCharNoWait                         code  011e1c
  KeybdGetCharWait                           code  011e24
  KeybdGetScancode                           code  011cf4
  KeybdGetScancode.0001                      code  011d80
  KeybdGetScancode.0002                      code  011d70
  KeybdGetStatus                             code  011c78
  KeybdGetStatus.0001                        code  011ce8
  KeybdGetStatus.0002                        code  011cdc
  KeybdIRQ                                   code  012118
  KeybdIRQ.0001                              code  0121bc
  KeybdIRQ.0002                              code  0121d4
  KeybdIRQ1                                  code  0121dc
  KeybdInit                                  code  011bc5
  KeybdInit.0001                             code  011bd0
  KeybdInit.0002                             code  011be0
  KeybdInit.0004                             code  011c60
  KeybdInit.config                           code  011c1c
  KeybdInit.keybdErr                         code  011c4c
  KeybdInit.tryAgain                         code  011c44
  KeybdLEDs                                   bss  00113b
  KeybdLocks                                  bss  001136
  KeybdRecvByte                              code  011d8c
  KeybdRecvByte.0003                         code  011d98
  KeybdRecvByte.0004                         code  011dbc
  KeybdSendByte                              code  0120dc
  KeybdSetLEDStatus                          code  012058
  KeybdSetLEDStatus.0001                     code  0120cc
  KeybdSetLEDStatus.0002                     code  01207c
  KeybdSetLEDStatus.0003                     code  012090
  KeybdSetLEDStatus.0004                     code  0120a4
  KeybdWaitFlag                               bss  00113a
  KeybdWaitTx                                code  011dcc
  KeybdWaitTx.0001                           code  011ddc
  KeybdWaitTx.0002                           code  011e08
  KillTask                                   code  01474c
  LEDS                                      const  ffdc0600
  LF                                        const  00000a
  LoadFromSerial                             code  012958
  LoadFromSerial.0001                        code  01296c
  LockBIOS                                   code  011130
  LockBIOS1                                  code  011160
  LockIOF                                    code  015a20
  LockSYS                                    code  014510
  LockSema                                   code  014548
  LockSema.0001                              code  014554
  LockSema.0002                              code  014574
  LockSema.0003                              code  014564
  LockVideoBIOS                              code  010800
  MAX_BIOS_CALL                             const  000064
  MAX_DEV_OP                                const  00001f
  MAX_VIDEO_BIOS_CALL                       const  000021
  MBX_Array                                   bss  c5ff00
  MBX_ArrayEnd                                bss  c7ff00
  MBX_LINK                                  const  000000
  MBX_MQ_COUNT                              const  000034
  MBX_MQ_HEAD                               const  000020
  MBX_MQ_MISSED                             const  000038
  MBX_MQ_SIZE                               const  000032
  MBX_MQ_STRATEGY                           const  000037
  MBX_MQ_TAIL                               const  000028
  MBX_OWNER                                 const  000036
  MBX_Size                                  const  000040
  MBX_TQ_COUNT                              const  000030
  MBX_TQ_HEAD                               const  000008
  MBX_TQ_TAIL                               const  000018
  MEM_END                                   const  8000000
  MEM_END.bss                                 bss  e5de40
  MON_STACK                                 const  006000
  MON_r1                                      bss  001008
  MON_r10                                     bss  001050
  MON_r11                                     bss  001058
  MON_r12                                     bss  001060
  MON_r13                                     bss  001068
  MON_r14                                     bss  001070
  MON_r15                                     bss  001078
  MON_r16                                     bss  001080
  MON_r17                                     bss  001088
  MON_r18                                     bss  001090
  MON_r19                                     bss  001098
  MON_r2                                      bss  001010
  MON_r20                                     bss  0010a0
  MON_r21                                     bss  0010a8
  MON_r22                                     bss  0010b0
  MON_r23                                     bss  0010b8
  MON_r24                                     bss  0010c0
  MON_r25                                     bss  0010c8
  MON_r26                                     bss  0010d0
  MON_r27                                     bss  0010d8
  MON_r28                                     bss  0010e0
  MON_r29                                     bss  0010e8
  MON_r3                                      bss  001018
  MON_r30                                     bss  0010f0
  MON_r31                                     bss  0010f8
  MON_r4                                      bss  001020
  MON_r5                                      bss  001028
  MON_r6                                      bss  001030
  MON_r7                                      bss  001038
  MON_r8                                      bss  001040
  MON_r9                                      bss  001048
  MQS_NEWEST                                const  000002
  MQS_OLDEST                                const  000001
  MQS_UNLIMITED                             const  000000
  MRTest                                     code  80000000000001b1
  MSG_Array                                   bss  c80000
  MSG_ArrayEnd                                bss  d80000
  MSG_D1                                    const  000008
  MSG_D2                                    const  000010
  MSG_LINK                                  const  000000
  MSG_Size                                  const  000020
  MSG_TYPE                                  const  000018
  MT_GETCHAR                                const  ffffffffffffffef
  MT_IRQ                                    const  fffffffffffffff0
  MT_SEMA                                   const  ffffffffffffffff
  MicroDelay                                 code  012928
  MicroDelay.0001                            code  012934
  Milliseconds                                bss  001100
  MonGetch                                   code  0114bc
  Monitor                                    code  0113ba
  NR_DCB                                    const  000020
  NR_JCB                                    const  000033
  NR_MBX                                    const  000800
  NR_MSG                                    const  008000
  NR_TCB                                    const  000100
  NUMWKA                                      bss  00113c
  NormAttr                                    bss  001128
  OutCRLF                                    code  010a94
  OutChar                                    code  011604
  OutputVec                                   bss  001108
  PIC                                       const  ffdc0fc0
  PIC_ES                                    const  ffdc0fd0
  PIC_IE                                    const  ffdc0fc4
  PIC_RSTE                                  const  ffdc0fd4
  PN1                                        code  010af4
  PN2                                        code  010af4
  PN3                                        code  010b14
  PN4                                        code  010b20
  PN5                                        code  010b2c
  PN6                                        code  010b10
  PNRET                                      code  010b40
  PRI_HIGH                                  const  000001
  PRI_HIGHEST                               const  000000
  PRI_LOW                                   const  000005
  PRI_LOWEST                                const  000007
  PRI_NORMAL                                const  000003
  PROG_LOAD_AREA                            const  009000
  PRTNUM                                     code  010ac8
  PeekMsg                                    code  015380
  PopTimeoutList                             code  014c08
  PostMsg                                    code  0150c8
  PrintSc                                    code  016ff0
  QNdx0                                       bss  c00050
  QNdx1                                       bss  c00058
  QNdx2                                       bss  c00060
  QNdx3                                       bss  c00068
  QNdx4                                       bss  c00070
  QNdx5                                       bss  c00078
  QNdx6                                       bss  c00080
  QNdx7                                       bss  c00088
  QueueMsgAtMbx                              code  014e48
  RANDOM_NUM                                const  ffdc0c00
  ROMChecksum                                code  011084
  ROMChecksum.0001                           code  01109c
  ROOTDIR_BUF                                 bss  009000
  RTCCOscOn                                  code  0126a0
  RTCCReadbuf                                code  012650
  RTCCReadbuf.0001                           code  01265c
  RTCCWritebuf                               code  012678
  RTCCWritebuf.0001                          code  012684
  RTCC_BUF                                    bss  001bc0
  RW_READ_SD_BLOCK                          const  000002
  RW_WRITE_SD_BLOCK                         const  000003
  ReleaseIOFocus                             code  015c20
  RemoveFromTimeoutList                      code  014b50
  RemoveTaskFromReadyList                    code  0149ec
  RequestIOFocus                             code  015b18
  RunningTCB                                  bss  c00118
  SCREEN_Array                                bss  d80000
  SCREEN_ArrayEnd                             bss  e4c000
  SC_ALT                                    const  000011
  SC_CAPSLOCK                               const  000058
  SC_CTRL                                   const  000014
  SC_DEL                                    const  000071
  SC_EXTEND                                 const  0000e0
  SC_KEYUP                                  const  0000f0
  SC_LCTRL                                  const  000058
  SC_LSHIFT                                 const  000012
  SC_NUMLOCK                                const  000077
  SC_RSHIFT                                 const  000059
  SC_SCROLLLOCK                             const  00007e
  SC_TAB                                    const  00000d
  SDDiskSize                                 code  80000000000000c4
  SDInit                                     code  80000000000000c0
  SDReadBoot                                 code  80000000000001c6
  SDReadMultiple                             code  80000000000000c1
  SDReadPart                                 code  80000000000000c3
  SDWriteMultiple                            code  80000000000000c2
  SD_2_0                                     code  8000000000000261
  SD_CMD8                                    code  012710
  SD_CMD8.0001                               code  012780
  SD_CMD8.0002                               code  012788
  SD_CMD8.0003                               code  0127e4
  SD_CMD8.0004                               code  012798
  SD_CMD8.respOk                             code  012828
  SD_INIT                                    code  0126c4
  SD_MASTER                                 const  ffdc0b00
  SD_WAIT_RESP                               code  012840
  SD_WAIT_RESP.0001                          code  012854
  SD_WAIT_RESP.0002                          code  012880
  SECTOR_BUF                                  bss  008000
  SPIMASTER                                 const  ffdc0500
  SPI_DIRECT_ACCESS_DATA_REG                const  000018
  SPI_INIT_NO_ERROR                         const  000000
  SPI_INIT_SD                               const  000001
  SPI_MASTER_CONTROL_REG                    const  000004
  SPI_MASTER_VERSION_REG                    const  000000
  SPI_READ_NO_ERROR                         const  000000
  SPI_RESP_BYTE1                            const  0000c0
  SPI_RESP_BYTE2                            const  0000c4
  SPI_RESP_BYTE3                            const  0000c8
  SPI_RESP_BYTE4                            const  0000cc
  SPI_RX_FIFO_CTRL_REG                      const  000050
  SPI_RX_FIFO_DATA_COUNT_LSB                const  00004c
  SPI_RX_FIFO_DATA_COUNT_MSB                const  000048
  SPI_RX_FIFO_DATA_REG                      const  000040
  SPI_SD_SECT_15_8_REG                      const  000020
  SPI_SD_SECT_23_16_REG                     const  000024
  SPI_SD_SECT_31_24_REG                     const  000028
  SPI_SD_SECT_7_0_REG                       const  00001c
  SPI_TRANS_BUSY                            const  000001
  SPI_TRANS_CTRL_REG                        const  00000c
  SPI_TRANS_ERROR_REG                       const  000014
  SPI_TRANS_START                           const  000001
  SPI_TRANS_STATUS_REG                      const  000010
  SPI_TRANS_TYPE_REG                        const  000008
  SPI_TX_FIFO_CTRL_REG                      const  000090
  SPI_TX_FIFO_DATA_REG                      const  000080
  SPI_WRITE_NO_ERROR                        const  000000
  SSM_ISR                                    code  012b1c
  STACKS_Array                              const  7f00000
  STACKS_ArrayEnd                           const  8000000
  SYS_STACKS_Array                          const  7d00000
  ScreenToAscii                              code  010ff4
  ScreenToAscii.0001                         code  011010
  ScreenToAscii.stasc1                       code  01101c
  ScrollUp                                   code  010ec0
  ScrollUp.0001                              code  010f00
  SelectTaskToRun                            code  0157c4
  SendMsg                                    code  0150e0
  SendMsgPrim                                code  0150fc
  SerialCheckForCharDirect                   code  0104a4
  SerialGetChar                              code  0105d8
  SerialGetCharDirect                        code  010488
  SerialIRQ                                  code  01069c
  SerialPutChar                              code  0104b4
  SerialStartMsg                             code  010208
  ServiceRequestIRQ                          code  8000000000000102
  SetBkColor                                 code  8000000000000143
  SetCurAttr                                 code  016a40
  SetCurrAttr                                code  010b74
  SetCursorPos                               code  01102c
  SetPixel                                   code  8000000000000144
  SetTaskPriority                            code  0148ed
  SetTaskPriority.stp2                       code  014918
  SetTaskPriority.stp3                       code  01491c
  SetupIntVectors                            code  010234
  SetupIntVectors.0001                       code  010250
  SetupIntVectors1                           code  010324
  SetupIntVectors1.0001                      code  010340
  SetupMemtags                               code  0128e4
  Sleep                                      code  014c38
  StartCPU1Addr                               bss  001398
  StartCPU1Flag                               bss  001390
  StartIdleTask                              code  014448
  StartJob                                   code  0144b0
  StartTask                                  code  0145b0
  SwitchIOFocus                              code  015ab8
  TAB                                       const  000009
  TCB_Affinity                              const  000280
  TCB_Array                                   bss  c10000
  TCB_ArrayEnd                                bss  c50000
  TCB_BASE                                  const  c00000
  TCB_BIOS_Stack                            const  000288
  TCB_BackLink                              const  000000
  TCB_CR0                                   const  0001b0
  TCB_DPC                                   const  000188
  TCB_DSP                                   const  0001a0
  TCB_EPC                                   const  000190
  TCB_ESP                                   const  0001a8
  TCB_IPC                                   const  000180
  TCB_ISP                                   const  000198
  TCB_LogSize                               const  00000a
  TCB_MSG_D1                                const  000248
  TCB_MSG_D2                                const  000250
  TCB_MbxList                               const  000260
  TCB_NextFree                              const  000218
  TCB_NextRdy                               const  000200
  TCB_NextTo                                const  000228
  TCB_PrevRdy                               const  000208
  TCB_PrevTo                                const  000230
  TCB_Priority                              const  000212
  TCB_SP0Save                               const  000100
  TCB_SP10Save                              const  000150
  TCB_SP11Save                              const  000158
  TCB_SP12Save                              const  000160
  TCB_SP13Save                              const  000168
  TCB_SP14Save                              const  000170
  TCB_SP15Save                              const  000178
  TCB_SP1Save                               const  000108
  TCB_SP2Save                               const  000110
  TCB_SP3Save                               const  000118
  TCB_SP4Save                               const  000120
  TCB_SP5Save                               const  000128
  TCB_SP6Save                               const  000130
  TCB_SP7Save                               const  000138
  TCB_SP8Save                               const  000140
  TCB_SP9Save                               const  000148
  TCB_SYS_Stack                             const  000290
  TCB_Size                                  const  000400
  TCB_StackTop                              const  000268
  TCB_Status                                const  000210
  TCB_TOP                                   const  1c00000
  TCB_Timeout                               const  000278
  TCB_errno                                 const  000270
  TCB_hJCB                                  const  000214
  TCB_hWaitMbx                              const  000258
  TCB_mbq_next                              const  000238
  TCB_mbq_prev                              const  000240
  TCB_r1                                    const  000008
  TCB_r10                                   const  000050
  TCB_r11                                   const  000058
  TCB_r12                                   const  000060
  TCB_r13                                   const  000068
  TCB_r14                                   const  000070
  TCB_r15                                   const  000078
  TCB_r16                                   const  000080
  TCB_r17                                   const  000088
  TCB_r18                                   const  000090
  TCB_r19                                   const  000098
  TCB_r2                                    const  000010
  TCB_r20                                   const  0000a0
  TCB_r21                                   const  0000a8
  TCB_r22                                   const  0000b0
  TCB_r23                                   const  0000b8
  TCB_r24                                   const  0000c0
  TCB_r25                                   const  0000c8
  TCB_r26                                   const  0000d0
  TCB_r27                                   const  0000d8
  TCB_r28                                   const  0000e0
  TCB_r29                                   const  0000e8
  TCB_r3                                    const  000018
  TCB_r30                                   const  0000f0
  TCB_r31                                   const  0000f8
  TCB_r4                                    const  000020
  TCB_r5                                    const  000028
  TCB_r6                                    const  000030
  TCB_r7                                    const  000038
  TCB_r8                                    const  000040
  TCB_r9                                    const  000048
  TEXTREG                                   const  0a0000
  TEXTSCR                                   const  ffd00000
  TEXT_COLS                                 const  000000
  TEXT_CURCTL                               const  000020
  TEXT_CURPOS                               const  00002c
  TEXT_ROWS                                 const  000004
  TS_NONE                                   const  000000
  TS_PREEMPT                                const  000004
  TS_READY                                  const  000010
  TS_READY_BIT                              const  000004
  TS_RUNNING                                const  000008
  TS_RUNNING_BIT                            const  000003
  TS_SLEEP                                  const  000020
  TS_TIMEOUT                                const  000001
  TS_TIMEOUT_BIT                            const  000000
  TS_WAITMSG                                const  000002
  TS_WAITMSG_BIT                            const  000001
  TXTCOLS                                   const  000054
  TXTROWS                                   const  00001f
  Tick1024Rout                               code  01136c
  TickRout                                   code  011308
  TickRout.0001                              code  011330
  TickVec                                     bss  001120
  Ticks                                       bss  001000
  TimeoutList                                 bss  c00110
  ToJul                                      code  012d24
  UART                                      const  ffdc0a00
  UART_CM0                                  const  000008
  UART_CM1                                  const  000009
  UART_CM2                                  const  00000a
  UART_CM3                                  const  00000b
  UART_CTRL                                 const  000007
  UART_FF                                   const  000005
  UART_IE                                   const  000004
  UART_IS                                   const  000003
  UART_LS                                   const  000001
  UART_MC                                   const  000006
  UART_MS                                   const  000002
  UART_RX                                   const  000000
  UART_SPR                                  const  00000f
  UART_TX                                   const  000000
  Uart_foff                                   bss  00116e
  Uart_fon                                    bss  001170
  Uart_ms                                     bss  001164
  Uart_rxdtr                                  bss  00116c
  Uart_rxfifo                                 bss  001175
  Uart_rxflow                                 bss  00116a
  Uart_rxhead                                 bss  001166
  Uart_rxrts                                  bss  00116b
  Uart_rxtail                                 bss  001168
  Uart_rxxon                                  bss  00116d
  Uart_txdtr                                  bss  001173
  Uart_txrts                                  bss  001172
  Uart_txxon                                  bss  001174
  Uart_txxonoff                               bss  001165
  UninitIRQ                                  code  012aac
  UninitIRQ.0001                             code  012ab8
  UnlockBIOS                                 code  011148
  UnlockIOF                                  code  015a3c
  UnlockSYS                                  code  01452c
  UnlockSema                                 code  014580
  UnlockSema.0001                            code  014588
  UnlockSema.0002                            code  0145a4
  UnlockVideoBIOS                            code  01081c
  UpdateCursorPos                            code  010b90
  UpdateCursorPos.0001                       code  010be0
  UserTick                                    bss  c00000
  UserTickRout                               code  01133c
  VAR_Area                                  const  c00000
  ValidateTCBPtr                             code  014928
  ValidateTCBPtr.0001                        code  014940
  ValidateTCBPtr.badPtr                      code  014934
  VideoBIOSCall                              code  010838
  VideoBIOSCall.0003                         code  01088c
  VideoBIOSCall.0004                         code  010878
  VideoBIOSCall.0005                         code  010894
  VideoBIOS_FuncTable                        code  0107bc
  VideoBIOS_sema                              bss  00d408
  Wait10ms                                   code  0120e8
  Wait10ms.0001                              code  0120f4
  Wait10ms.0002                              code  01210c
  WaitMsg                                    code  015234
  XOFF                                      const  000013
  XON                                       const  000011
  ambx_bad_ptr                               code  014d0c
  ambx_no_mbxs                               code  014d14
  attl1                                      code  014b3c
  attl_add_at_end                            code  014ac4
  attl_add_at_head                           code  014b1c
  attl_adjust_timeout                        code  014b04
  attl_check_next                            code  014aac
  attl_exit                                  code  014b30
  attl_insert_before                         code  014ad8
  attl_insert_before_head                    code  014af0
  berr_rout                                  code  012abc
  brkpt1                                     code  0128ec
  brkpt1.0001                                code  012908
  cirxb1                                     code  0105d4
  clockmsg_d1                                 bss  c00188
  clockmsg_d2                                 bss  c00190
  cmsg1                                      code  01540c
  cmsg10                                     code  0153d8
  cmsg2                                      code  015418
  cmsg3                                      code  0153c0
  cmsg4                                      code  0153c4
  cmsg5                                      code  015430
  cmsg8                                      code  0153f4
  csvs3                                      code  015d94
  ctype_1                                    code  016524
  ctype_11                                   code  016594
  ctype_13                                   code  0165dc
  ctype_15                                   code  0165d0
  ctype_16                                   code  0165fc
  ctype_19                                   code  016638
  ctype_21                                   code  01662c
  ctype_22                                   code  016658
  ctype_24                                   code  016678
  ctype_27                                   code  0166a8
  ctype_29                                   code  01669c
  ctype_3                                    code  016518
  ctype_30                                   code  0166bc
  ctype_32                                   code  0166d0
  ctype_34                                   code  0166e4
  ctype_36                                   code  0166f8
  ctype_39                                   code  016730
  ctype_4                                    code  016544
  ctype_41                                   code  016738
  ctype_43                                   code  016774
  ctype_45                                   code  01677c
  ctype_47                                   code  0167b4
  ctype_48                                   code  0167b8
  ctype_49                                   code  0167bc
  ctype_51                                   code  0167f4
  ctype_52                                   code  0167f8
  ctype_53                                   code  0167fc
  ctype_55                                   code  0168f4
  ctype_56                                   code  0168dc
  ctype_57                                   code  0168ec
  ctype_58                                   code  0168e0
  ctype_59                                   code  016964
  ctype_6                                    code  016564
  ctype_60                                   code  016948
  ctype_61                                   code  01694c
  ctype_62                                   code  016940
  ctype_63                                   code  016950
  ctype_64                                   code  0169d0
  ctype_65                                   code  0169b4
  ctype_66                                   code  0169b8
  ctype_67                                   code  0169ac
  ctype_68                                   code  0169bc
  ctype_70                                   code  016a38
  ctype_71                                   code  016a20
  ctype_72                                   code  016a30
  ctype_73                                   code  016a24
  ctype_9                                    code  0165a0
  cvss3                                      code  015d1c
  dbctrl                                      bss  c082f0
  dbg_DisplayHelp                            code  018790
  dbg_GetCursorCol                           code  018980
  dbg_GetCursorRow                           code  018954
  dbg_GetDBAD                                code  0189ac
  dbg_GetHexNumber                           code  018c1c
  dbg_ReadSetDB                              code  018ea0
  dbg_ReadSetDSB                             code  019048
  dbg_ReadSetIB                              code  018d30
  dbg_SetDBAD                                code  018a10
  dbg_arm                                    code  018a80
  dbg_getchar                                code  018ac0
  dbg_init                                   code  019be4
  dbg_irq                                    code  01998c
  dbg_nextNonSpace                           code  018b94
  dbg_parse_line                             code  019238
  dbg_prompt                                 code  0191f0
  dbg_stack                                   bss  c002f0
  dbg_ungetch                                code  018b68
  debugger                                   code  019aa4
  debugger_0                               rodata  01ad6a
  debugger_1                               rodata  01ad56
  debugger_10                              rodata  01a9e6
  debugger_100                               code  019038
  debugger_101                               code  018f88
  debugger_103                               code  019038
  debugger_105                               code  019024
  debugger_106                               code  019038
  debugger_109                             rodata  01a828
  debugger_11                              rodata  01a978
  debugger_110                             rodata  01a7fc
  debugger_111                               code  0191e4
  debugger_112                               code  019094
  debugger_114                               code  01907c
  debugger_115                               code  019134
  debugger_116                               code  0191e0
  debugger_117                               code  019130
  debugger_119                               code  0191e0
  debugger_12                              rodata  01a920
  debugger_121                               code  0191cc
  debugger_122                               code  0191e0
  debugger_125                             rodata  01a7ee
  debugger_126                               code  01922c
  debugger_127                               code  019218
  debugger_128                             rodata  01a7da
  debugger_129                             rodata  01a7c6
  debugger_13                              rodata  01a8f8
  debugger_130                             rodata  01a7b2
  debugger_131                             rodata  01a79e
  debugger_132                             rodata  01a78a
  debugger_133                             rodata  01a776
  debugger_134                             rodata  01a762
  debugger_135                             rodata  01a74e
  debugger_136                             rodata  01a738
  debugger_137                             rodata  01a722
  debugger_138                             rodata  01a70c
  debugger_139                             rodata  01a6f6
  debugger_14                              rodata  01a8ea
  debugger_140                             rodata  01a6e0
  debugger_141                             rodata  01a6ca
  debugger_142                             rodata  01a6b4
  debugger_143                             rodata  01a69e
  debugger_144                               code  019980
  debugger_145                               code  0192b4
  debugger_147                               code  01997c
  debugger_148                               code  0192f8
  debugger_149                               code  019300
  debugger_15                                code  0188ac
  debugger_150                               code  019324
  debugger_151                               code  019334
  debugger_152                               code  0194cc
  debugger_153                               code  019304
  debugger_154                               code  0194c8
  debugger_155                               code  019374
  debugger_156                               code  019488
  debugger_157                               code  019498
  debugger_158                               code  0194a8
  debugger_159                               code  0194b8
  debugger_16                                code  018898
  debugger_160                               code  0193b8
  debugger_162                               code  0193fc
  debugger_164                               code  019440
  debugger_166                               code  019484
  debugger_168                               code  019978
  debugger_169                               code  01951c
  debugger_170                               code  019650
  debugger_171                               code  019660
  debugger_172                               code  019670
  debugger_173                               code  019680
  debugger_174                               code  019690
  debugger_175                               code  0197c4
  debugger_176                               code  019568
  debugger_178                               code  0195b4
  debugger_18                                code  0188c8
  debugger_180                               code  019600
  debugger_182                               code  01964c
  debugger_184                               code  0196dc
  debugger_186                               code  019728
  debugger_188                               code  019774
  debugger_19                                code  018948
  debugger_190                               code  0197c0
  debugger_192                               code  019978
  debugger_193                               code  019804
  debugger_194                               code  019938
  debugger_195                               code  019948
  debugger_196                               code  019958
  debugger_197                               code  019968
  debugger_198                               code  019850
  debugger_2                               rodata  01ace8
  debugger_20                                code  01890c
  debugger_200                               code  01989c
  debugger_202                               code  0198e8
  debugger_204                               code  019934
  debugger_208                             rodata  01a690
  debugger_209                               code  019bd8
  debugger_210                               code  019ae4
  debugger_212                               code  019ae4
  debugger_213                               code  019bc0
  debugger_214                               code  019afc
  debugger_215                               code  019b30
  debugger_216                               code  019b18
  debugger_218                               code  019b54
  debugger_219                               code  019ba8
  debugger_22                                code  0188f8
  debugger_220                               code  019ba0
  debugger_221                               code  019bbc
  debugger_223                               code  019bc0
  debugger_224                               code  019c24
  debugger_225                               code  019c10
  debugger_23                                code  018924
  debugger_25                                code  018920
  debugger_27                                code  018974
  debugger_29                                code  0189a0
  debugger_3                               rodata  01acc0
  debugger_31                                code  018a0c
  debugger_32                                code  0189e0
  debugger_33                                code  0189e8
  debugger_34                                code  0189f0
  debugger_35                                code  0189f8
  debugger_36                                code  018a00
  debugger_38                                code  018a74
  debugger_39                                code  018a44
  debugger_4                               rodata  01ac5e
  debugger_40                                code  018a50
  debugger_41                                code  018a5c
  debugger_42                                code  018a68
  debugger_43                                code  018a74
  debugger_45                                code  018a94
  debugger_47                                code  018ab4
  debugger_49                                code  018b08
  debugger_5                               rodata  01abee
  debugger_51                                code  018b10
  debugger_53                                code  018b30
  debugger_54                                code  018b5c
  debugger_55                                code  018b5c
  debugger_57                                code  018b88
  debugger_59                                code  018b88
  debugger_6                               rodata  01ab7e
  debugger_60                                code  018c10
  debugger_61                                code  018bb0
  debugger_62                                code  018c08
  debugger_63                                code  018c04
  debugger_65                                code  018be8
  debugger_66                                code  018bf0
  debugger_67                                code  018d24
  debugger_68                                code  018c40
  debugger_69                                code  018d20
  debugger_7                               rodata  01ab14
  debugger_70                                code  018c94
  debugger_71                                code  018d1c
  debugger_72                                code  018cc4
  debugger_73                                code  018d1c
  debugger_74                                code  018cf4
  debugger_75                                code  018d1c
  debugger_76                                code  018d08
  debugger_77                              rodata  01a8c6
  debugger_78                              rodata  01a89c
  debugger_79                                code  018e94
  debugger_8                               rodata  01aaa8
  debugger_80                                code  018d7c
  debugger_82                                code  018d64
  debugger_83                                code  018dfc
  debugger_84                                code  018e90
  debugger_85                                code  018df8
  debugger_87                                code  018e90
  debugger_89                                code  018e7c
  debugger_9                               rodata  01aa56
  debugger_90                                code  018e90
  debugger_93                              rodata  01a878
  debugger_94                              rodata  01a84e
  debugger_95                                code  01903c
  debugger_96                                code  018eec
  debugger_98                                code  018ed4
  debugger_99                                code  018f8c
  disassem                                   code  0175d8
  disassem20                               rodata  018714
  disassem_1                                 code  016a54
  disassem_10                                code  016ba0
  disassem_100                               code  01723c
  disassem_101                               code  017280
  disassem_102                               code  017268
  disassem_103                               code  017280
  disassem_104                               code  017280
  disassem_106                               code  017280
  disassem_108                             rodata  01a4a2
  disassem_109                               code  017310
  disassem_110                               code  0172fc
  disassem_112                             rodata  01a49a
  disassem_113                             rodata  01a48c
  disassem_114                             rodata  01a47e
  disassem_115                               code  0173e8
  disassem_116                               code  0173b0
  disassem_117                               code  0173d4
  disassem_118                               code  0173d4
  disassem_119                             rodata  01a476
  disassem_12                              rodata  01a63e
  disassem_120                             rodata  01a468
  disassem_121                               code  0174ac
  disassem_122                               code  017448
  disassem_124                               code  017498
  disassem_125                             rodata  01a45a
  disassem_126                             rodata  01a454
  disassem_127                             rodata  01a44c
  disassem_128                             rodata  01a446
  disassem_129                               code  0175cc
  disassem_13                                code  016c0c
  disassem_130                               code  017574
  disassem_132                               code  017560
  disassem_133                             rodata  01a43a
  disassem_134                             rodata  01a42e
  disassem_135                             rodata  01a422
  disassem_136                             rodata  01a416
  disassem_137                             rodata  01a40a
  disassem_138                             rodata  01a3fe
  disassem_139                             rodata  01a3f2
  disassem_14                                code  016bf8
  disassem_140                             rodata  01a3e6
  disassem_141                             rodata  01a3da
  disassem_142                             rodata  01a3ce
  disassem_143                             rodata  01a3c2
  disassem_144                             rodata  01a3b6
  disassem_145                             rodata  01a3aa
  disassem_146                             rodata  01a39e
  disassem_147                             rodata  01a392
  disassem_148                             rodata  01a386
  disassem_149                             rodata  01a37a
  disassem_150                             rodata  01a36e
  disassem_151                             rodata  01a362
  disassem_152                             rodata  01a356
  disassem_153                             rodata  01a34a
  disassem_154                             rodata  01a33c
  disassem_155                             rodata  01a336
  disassem_156                             rodata  01a328
  disassem_157                             rodata  01a324
  disassem_158                             rodata  01a31e
  disassem_159                             rodata  01a312
  disassem_16                              rodata  01a634
  disassem_160                             rodata  01a306
  disassem_161                             rodata  01a2fa
  disassem_162                             rodata  01a2ee
  disassem_163                             rodata  01a2e2
  disassem_164                             rodata  01a2d6
  disassem_165                             rodata  01a2ca
  disassem_166                             rodata  01a2be
  disassem_167                             rodata  01a2b2
  disassem_168                             rodata  01a2a6
  disassem_169                             rodata  01a29a
  disassem_17                                code  016c64
  disassem_170                             rodata  01a28e
  disassem_171                             rodata  01a282
  disassem_172                             rodata  01a276
  disassem_173                             rodata  01a26a
  disassem_174                             rodata  01a25e
  disassem_175                             rodata  01a252
  disassem_176                             rodata  01a246
  disassem_177                             rodata  01a23a
  disassem_178                             rodata  01a22e
  disassem_179                             rodata  01a216
  disassem_18                                code  016c50
  disassem_180                             rodata  01a1fe
  disassem_181                             rodata  01a1e6
  disassem_182                             rodata  01a1ce
  disassem_183                             rodata  01a1c2
  disassem_184                             rodata  01a1b6
  disassem_185                             rodata  01a1aa
  disassem_186                             rodata  01a19e
  disassem_187                             rodata  01a192
  disassem_188                             rodata  01a186
  disassem_189                             rodata  01a17a
  disassem_190                             rodata  01a16e
  disassem_191                             rodata  01a162
  disassem_192                             rodata  01a156
  disassem_193                             rodata  01a14a
  disassem_194                             rodata  01a13e
  disassem_195                             rodata  01a132
  disassem_196                             rodata  01a126
  disassem_197                             rodata  01a11a
  disassem_198                             rodata  01a10e
  disassem_199                             rodata  01a102
  disassem_2                                 code  016ad4
  disassem_20                              rodata  01a62c
  disassem_200                             rodata  01a0f6
  disassem_201                             rodata  01a0ea
  disassem_202                             rodata  01a0de
  disassem_203                             rodata  01a0d2
  disassem_204                             rodata  01a0c6
  disassem_205                             rodata  01a0ba
  disassem_206                             rodata  01a0ae
  disassem_207                             rodata  01a0a2
  disassem_208                             rodata  01a096
  disassem_209                             rodata  01a088
  disassem_21                                code  016cbc
  disassem_210                             rodata  01a082
  disassem_211                             rodata  01a074
  disassem_212                             rodata  01a06e
  disassem_213                             rodata  01a062
  disassem_214                             rodata  01a054
  disassem_215                             rodata  01a046
  disassem_216                             rodata  01a038
  disassem_217                             rodata  01a028
  disassem_218                               code  018708
  disassem_219                               code  017618
  disassem_22                                code  016ca8
  disassem_220                               code  0186ec
  disassem_221                               code  017634
  disassem_223                               code  0186c4
  disassem_224                               code  017818
  disassem_225                               code  0178a8
  disassem_226                               code  017cf4
  disassem_227                               code  017d1c
  disassem_228                               code  017d44
  disassem_229                               code  017d6c
  disassem_230                               code  017d94
  disassem_231                               code  017dbc
  disassem_232                               code  017de4
  disassem_233                               code  017e0c
  disassem_234                               code  017e34
  disassem_235                               code  017e5c
  disassem_236                               code  017e84
  disassem_237                               code  017eac
  disassem_238                               code  017ed4
  disassem_239                               code  017efc
  disassem_24                              rodata  01a624
  disassem_240                               code  018034
  disassem_241                               code  018048
  disassem_242                               code  0180b8
  disassem_243                               code  018128
  disassem_244                               code  018164
  disassem_245                               code  0181a0
  disassem_246                               code  0181c8
  disassem_247                               code  0181f0
  disassem_248                               code  018218
  disassem_249                               code  018240
  disassem_25                                code  016d14
  disassem_250                               code  018268
  disassem_251                               code  018290
  disassem_252                               code  0182b8
  disassem_253                               code  0182e0
  disassem_254                               code  018300
  disassem_255                               code  018320
  disassem_256                               code  018340
  disassem_257                               code  018360
  disassem_258                               code  018380
  disassem_259                               code  0183a0
  disassem_26                                code  016d00
  disassem_260                               code  0183c0
  disassem_261                               code  0183e0
  disassem_262                               code  018408
  disassem_263                               code  018430
  disassem_264                               code  018458
  disassem_265                               code  018480
  disassem_266                               code  0184a0
  disassem_267                               code  0184c0
  disassem_268                               code  0184e0
  disassem_269                               code  018500
  disassem_270                               code  018528
  disassem_271                               code  018550
  disassem_272                               code  018598
  disassem_273                               code  0185e0
  disassem_274                               code  018608
  disassem_275                               code  01869c
  disassem_276                               code  017860
  disassem_277                               code  01787c
  disassem_278                               code  01785c
  disassem_28                              rodata  01a61c
  disassem_280                               code  017cf0
  disassem_281                               code  017930
  disassem_282                               code  017a90
  disassem_283                               code  017ab0
  disassem_284                               code  017ad0
  disassem_285                               code  017af0
  disassem_286                               code  017b10
  disassem_287                               code  017b30
  disassem_288                               code  017b50
  disassem_289                               code  017b70
  disassem_29                              rodata  01a614
  disassem_290                               code  017b90
  disassem_291                               code  017bb0
  disassem_292                               code  017bd0
  disassem_293                               code  017bf0
  disassem_294                               code  017c10
  disassem_295                               code  017c30
  disassem_296                               code  017c88
  disassem_297                               code  017a8c
  disassem_298                               code  017974
  disassem_299                               code  01799c
  disassem_3                                 code  016ac0
  disassem_30                              rodata  01a60a
  disassem_300                               code  0179c4
  disassem_301                               code  0179ec
  disassem_302                               code  017a14
  disassem_303                               code  017a3c
  disassem_304                               code  017a64
  disassem_305                               code  018030
  disassem_306                               code  017f50
  disassem_307                               code  017f70
  disassem_308                               code  017f90
  disassem_309                               code  017fb0
  disassem_31                              rodata  01a602
  disassem_310                               code  017fd0
  disassem_311                               code  017ff0
  disassem_312                               code  018010
  disassem_313                               code  01808c
  disassem_315                               code  0180fc
  disassem_317                               code  018674
  disassem_318                               code  018698
  disassem_319                               code  0186e0
  disassem_32                              rodata  01a5fa
  disassem_321                               code  0186ec
  disassem_322                             rodata  01a010
  disassem_323                               code  01877c
  disassem_324                               code  018744
  disassem_325                               code  018768
  disassem_326                               code  018760
  disassem_327                               code  018768
  disassem_33                              rodata  01a5f2
  disassem_34                              rodata  01a5ea
  disassem_35                              rodata  01a5e2
  disassem_36                              rodata  01a5d6
  disassem_37                              rodata  01a5ca
  disassem_38                              rodata  01a5be
  disassem_39                              rodata  01a5b2
  disassem_4                               rodata  01a650
  disassem_40                              rodata  01a5a4
  disassem_41                              rodata  01a596
  disassem_42                              rodata  01a58a
  disassem_43                                code  016f04
  disassem_44                                code  016ef0
  disassem_45                                code  016dc4
  disassem_46                                code  016dd8
  disassem_47                                code  016dec
  disassem_48                                code  016e00
  disassem_49                                code  016e14
  disassem_5                                 code  016b5c
  disassem_50                                code  016e28
  disassem_51                                code  016e3c
  disassem_52                                code  016e50
  disassem_53                                code  016e64
  disassem_54                                code  016e78
  disassem_55                                code  016e8c
  disassem_56                                code  016ea0
  disassem_57                                code  016eb4
  disassem_58                                code  016ec8
  disassem_59                                code  016edc
  disassem_6                                 code  016b48
  disassem_60                                code  016ef0
  disassem_62                              rodata  01a582
  disassem_63                              rodata  01a57a
  disassem_64                              rodata  01a56a
  disassem_65                              rodata  01a564
  disassem_66                                code  016fe4
  disassem_67                                code  016f68
  disassem_68                                code  016f8c
  disassem_69                                code  016fc0
  disassem_70                                code  016fd0
  disassem_71                                code  016fd0
  disassem_73                              rodata  01a556
  disassem_74                              rodata  01a54e
  disassem_75                                code  017050
  disassem_76                                code  01702c
  disassem_77                                code  01703c
  disassem_78                                code  01703c
  disassem_8                               rodata  01a648
  disassem_80                              rodata  01a536
  disassem_81                              rodata  01a51e
  disassem_82                              rodata  01a506
  disassem_83                              rodata  01a4ee
  disassem_84                                code  01712c
  disassem_85                                code  017118
  disassem_86                                code  0170c8
  disassem_87                                code  0170dc
  disassem_88                                code  0170f0
  disassem_89                                code  017104
  disassem_9                                 code  016bb4
  disassem_90                                code  017118
  disassem_92                              rodata  01a4de
  disassem_93                              rodata  01a4d6
  disassem_94                              rodata  01a4c4
  disassem_95                              rodata  01a4ba
  disassem_96                              rodata  01a4aa
  disassem_97                                code  017294
  disassem_98                                code  01720c
  disk_size                                   bss  001160
  dmfm1                                      code  014fb0
  dmfm2                                      code  014fac
  dmfm3                                      code  014fbc
  doCLS                                      code  011ac8
  doCS                                       code  80000000000001ae
  doDate                                     code  011714
  doDate.0001                                code  011764
  doDay                                      code  01179c
  doDebug                                    code  0117e0
  doDisassem                                 code  0117b8
  doDumpTL                                   code  011554
  doDumpmem                                  code  011534
  doDumpmem.001                              code  011540
  doFillmem                                  code  01155c
  doFillmem.0001                             code  0115b8
  doFillmem.0002                             code  0115a0
  doFillmem.0003                             code  0115c0
  doFillmem.0004                             code  011570
  doJump                                     code  011608
  doRand                                     code  80000000000001b3
  doSDBoot                                   code  0115e0
  drf_rout                                   code  0129d8
  drf_rout.0001                              code  0129f0
  dtfm2                                      code  014fe8
  dtfm2a                                     code  015074
  dtfm3                                      code  015010
  dtfm3a                                     code  01509c
  dtfm4                                      code  015014
  dtfm4a                                     code  0150a0
  dtfm5                                      code  015038
  dtl1                                       code  014898
  dtl2                                       code  014804
  dtl3                                       code  014814
  dwf_rout                                   code  0129f4
  dwf_rout.0001                              code  012a0c
  eval                                       code  80000000000001b4
  exf_rout                                   code  0129bc
  exf_rout.0001                              code  0129d4
  fif1                                       code  015aa4
  fmbx0                                      code  014e34
  fmbx1                                      code  014e30
  fmbx10                                     code  014dc8
  fmbx11                                     code  014df8
  fmbx12                                     code  014e04
  fmbx2                                      code  014e18
  fmbx3                                      code  014da0
  fmbx5                                      code  014d70
  fmbx6                                      code  014da4
  fmbx7                                      code  014db8
  fmbx9                                      code  014de4
  freejcb_sema                                bss  c001b8
  freembx_sema                                bss  c001c8
  freemsg_sema                                bss  c001d0
  freetcb_sema                                bss  c001c0
  get_datetime                               code  012b50
  getchar                                  rodata  0161b4
  getcharNoWait                              code  0161a4
  hangprg                                    code  0128d4
  icc1                                       code  010ea0
  icr1                                       code  010e80
  ignBlanks                                  code  0114d8
  ignBlanks1                                 code  0114e0
  ignore_blanks                              code  018b20
  ijcb1                                      code  0141e0
  ijcb2                                      code  014264
  iof_sema                                    bss  c001f8
  iof_switch                                  bss  c00180
  isalnum                                    code  016604
  isalpha                                    code  0165a8
  iscntrl                                    code  0169dc
  isdigit                                  rodata  01656c
  isgraph                                    code  0168f8
  islower                                    code  0167c8
  isprint                                    code  016970
  ispunct                                    code  016808
  isspace                                    code  016680
  isupper                                    code  016788
  isxdigit                                   code  0164f0
  it1                                        code  014490
  it2                                        code  014474
  it3                                        code  01446c
  jcb_sema                                    bss  c00210
  jmp_vector                                  bss  001118
  kbdi5                                      code  011bac
  kernel_panic                               code  0159e4
  keybdControlCodes                          code  0123e0
  keybdExtendedCodes                         code  012460
  keybdInIRQ                                  bss  c00178
  keybdIsSetup                                bss  c00168
  keybdLock                                   bss  c00170
  keybd_char                                  bss  c00160
  keybd_mbx                                   bss  c00158
  keybdmsg_d1                                 bss  c00148
  keybdmsg_d2                                 bss  c00150
  kpan1                                      code  015a04
  kpan2                                      code  0159e8
  kt1                                        code  0147d4
  kt6                                        code  0147ac
  kt6.self                                   code  0147d0
  kt7                                        code  014798
  ld                                         code  0161a8
  linebuf                                     bss  c00228
  linendx                                     bss  c00220
  loadBootFile                               code  80000000000001c7
  mbx_sema                                    bss  c00200
  missed_ticks                                bss  c00140
  mmu_acc_save                                bss  c001a8
  mon1                                       code  0113ec
  mon1.Prompt1                               code  011428
  mon1.Prompt2                               code  011448
  mon1.Prompt3                               code  011410
  mon1.PromptLn                              code  011404
  mon1.doHelp                                code  0114ac
  msgBadKeybd                                code  011bac
  msgBusErr                                  code  012a83
  msgEA                                      code  012a93
  msgErr                                     code  0119ec
  msgHelp                                    code  0119f4
  msgMonitorStarted                          code  011ab7
  msgParErr                                  code  0129ac
  msgPriv                                    code  012a67
  msgROMChecksum                             code  0110d0
  msgStart                                   code  01139d
  msgTaskList                                code  0148b8
  msgUninit                                  code  012a77
  msgUninitIRQ                               code  012a98
  msg_sema                                    bss  c00208
  msgdrf                                     code  012a5d
  msgdwf                                     code  012a62
  msgexf                                     code  012a58
  nMailbox                                    bss  c00128
  nMsgBlk                                     bss  c00138
  nmi_rout                                   code  012984
  nmi_rout1                                  code  0129a8
  p100Hz1                                    code  015784
  p100Hz12                                   code  0157c4
  p100Hz14                                   code  0157a4
  p100Hz15                                   code  01576c
  p100Hz4                                    code  015760
  p100Hz_missed_tick                         code  015798
  pSpriteController                          code  012eb4
  printf                                   rodata  016214
  priv_rout                                  code  012a10
  priv_rout.0001                             code  012a54
  ptl1                                       code  014c1c
  putch                                    rodata  015db0
  puthexnum                                  code  015f74
  putnum                                     code  015ddc
  putstr                                     code  0160f0
  putstr2                                  rodata  016178
  qmam1                                      code  014f34
  qmam2                                      code  014ebc
  qmam3                                      code  014efc
  qmam4                                      code  014f00
  qmam6                                      code  014ec0
  qmam8                                      code  014f28
  qmam_add_at_head                           code  014eb8
  qmam_bad_msg                               code  014ee4
  qmam_newest                                code  014ee8
  qmam_oldest                                code  014f64
  qmam_unlimited                             code  014ea4
  r2                                         code  0125bc
  r3                                         code  0125bc
  r5                                         code  0125bc
  r6                                         code  0161a8
  rdy_sema                                    bss  c001e8
  resched1                                   code  0155ac
  reschedule                                 code  01549c
  reschedule.0001                            code  0154b0
  reschedule.0002                            code  0154b8
  reschedule.0004                            code  0154e4
  reschedule.0005                            code  0154f0
  reverse_video                              code  016a60
  rfr1                                       code  014a74
  rfr2                                       code  014a64
  rftBadPtr                                  code  014bf4
  rftl_empty_list                            code  014bd8
  rftl_not_on_list                           code  014bf4
  rftl_not_on_list2                          code  014c04
  rftl_remove_from_head                      code  014bb4
  riof1                                      code  015bbc
  riof2                                      code  015bd8
  riof3                                      code  015b88
  riof4                                      code  015bec
  rlifo6                                     code  015cc8
  rliof1                                     code  015c9c
  rliof2                                     code  015cbc
  rliof3                                     code  015cc4
  rliof4                                     code  015c44
  rliof5                                     code  015cb4
  rliof6                                     code  800000000000043a
  rxfull                                    const  000001
  set_time_serial                            code  012df8
  set_time_serial_10                         code  012cc4
  set_time_serial_12                         code  012cfc
  set_time_serial_14                         code  012cfc
  set_time_serial_17                         code  012dec
  set_time_serial_19                         code  012ea8
  set_time_serial_2                          code  012bd8
  set_time_serial_20                         code  012e94
  set_time_serial_4                          code  012c10
  set_time_serial_6                          code  012c48
  set_time_serial_8                          code  012c8c
  set_vector                                 code  0188d4
  sgc1                                       code  010488
  sgcfifo1                                   code  010684
  sgcfifo2                                   code  010670
  sgcfifo3                                   code  010648
  sgcfifo4                                   code  01065c
  sgcfifo5                                   code  010670
  shiftedScanCodes                           code  0122e0
  siof3                                      code  015b04
  sirq1                                      code  0106e0
  sjob1                                      code  014504
  sjob2                                      code  014500
  sjob3                                      code  0144e0
  smp2                                       code  015140
  smsg1                                      code  0151f0
  smsg2                                      code  015204
  smsg3                                      code  015190
  smsg4                                      code  01521c
  smsg5                                      code  0151d8
  smsg7                                      code  015198
  smsg8                                      code  0151ac
  smsg9                                      code  0151dc
  smsirq                                     code  0106f4
  spcabort                                   code  01059c
  spcb1                                      code  010514
  spcb2                                      code  01054c
  spcb3                                      code  0104ec
  spcb4                                      code  010524
  spcb5                                      code  010568
  spcb6                                      code  010554
  spcb7                                      code  010598
  spcb8                                      code  010570
  sprite_demo                                code  012ebc
  sprite_demo_10                             code  012f5c
  sprite_demo_11                             code  012fd4
  sprite_demo_12                             code  012fcc
  sprite_demo_13                             code  012fd4
  sprite_demo_14                             code  0130a8
  sprite_demo_15                             code  012fe0
  sprite_demo_16                             code  013098
  sprite_demo_17                             code  013090
  sprite_demo_18                             code  0130a8
  sprite_demo_4                              code  012ef4
  sprite_demo_5                              code  012f2c
  sprite_demo_6                              code  012f24
  sprite_demo_7                              code  012f30
  sprite_demo_8                              code  012f58
  sprite_demo_9                              code  012f50
  sprites                                     bss  00d000
  srxirq                                     code  010704
  srxirq1                                    code  010704
  srxirq2                                    code  010724
  srxirq3                                    code  010734
  srxirq5                                    code  01074c
  srxirq6                                    code  010794
  srxirq7                                    code  0107a8
  srxirq8                                    code  0107b8
  st4                                        code  014298
  st4.0001                                   code  014358
  st4.imbxl1                                 code  0142ec
  st4.imbxl2                                 code  014310
  st4.nextTCB                                code  014384
  st5                                        code  0141bc
  start                                      code  0100a8
  startSector                                 bss  00115c
  stask1                                     code  0146d8
  stask2                                     code  0146a8
  stdio_1                                    code  015dd0
  stdio_11                                   code  015e50
  stdio_12                                   code  015ee8
  stdio_13                                   code  015e80
  stdio_15                                   code  015eb0
  stdio_17                                   code  015ea0
  stdio_18                                   code  015ee8
  stdio_19                                   code  015f08
  stdio_2                                  rodata  01a000
  stdio_21                                   code  015f08
  stdio_22                                   code  015f2c
  stdio_23                                   code  015f24
  stdio_24                                   code  015f2c
  stdio_25                                   code  015f50
  stdio_26                                   code  015f50
  stdio_27                                   code  0160e4
  stdio_28                                   code  015fb4
  stdio_3                                    code  015f68
  stdio_30                                   code  015fb0
  stdio_31                                   code  015fc8
  stdio_32                                   code  015fd0
  stdio_33                                   code  015fe8
  stdio_35                                   code  015fe8
  stdio_36                                   code  016064
  stdio_37                                   code  016018
  stdio_38                                   code  01604c
  stdio_39                                   code  016038
  stdio_4                                    code  015e1c
  stdio_40                                   code  01604c
  stdio_41                                   code  016084
  stdio_43                                   code  016084
  stdio_44                                   code  0160a8
  stdio_45                                   code  0160a8
  stdio_46                                   code  0160cc
  stdio_47                                   code  0160cc
  stdio_48                                   code  01616c
  stdio_49                                   code  016118
  stdio_50                                   code  016140
  stdio_51                                   code  016134
  stdio_52                                   code  016154
  stdio_54                                   code  016198
  stdio_57                                   code  016208
  stdio_58                                   code  0161d0
  stdio_59                                   code  0161e8
  stdio_6                                    code  015e18
  stdio_60                                   code  0161f4
  stdio_61                                   code  01627c
  stdio_62                                   code  0164dc
  stdio_63                                   code  016244
  stdio_64                                   code  0164c0
  stdio_65                                   code  0164b8
  stdio_66                                   code  0164a8
  stdio_67                                   code  0164b8
  stdio_68                                   code  0164a4
  stdio_69                                   code  016310
  stdio_7                                    code  015e2c
  stdio_70                                   code  01631c
  stdio_71                                   code  01632c
  stdio_72                                   code  01634c
  stdio_73                                   code  01636c
  stdio_74                                   code  01638c
  stdio_75                                   code  0163a8
  stdio_76                                   code  0163b0
  stdio_77                                   code  016420
  stdio_78                                   code  0163c4
  stdio_79                                   code  01640c
  stdio_8                                    code  015e34
  stdio_80                                   code  016420
  stdio_82                                   code  016444
  stdio_84                                   code  016458
  stdio_85                                   code  0164a0
  stdio_86                                   code  0164c0
  stdio_9                                    code  015e4c
  strStartQue                                code  0155c0
  sttr1                                      code  01594c
  sttr10                                     code  015804
  sttr2                                      code  0157e4
  sttr3                                      code  015960
  sttr5                                      code  015820
  sttr6                                      code  01588c
  sttr7                                      code  015940
  sttr8                                      code  015964
  sttr9                                      code  0159a0
  sttr_badtask                               code  0159bc
  stxirq                                     code  010700
  sys_sema                                    bss  c001d8
  sys_ticks                                   bss  c00020
  syscall_exception                          code  015448
  syscall_vectors                            code  014000
  tcb_sema                                    bss  c001e0
  tcbsema_d1                                  bss  c00198
  tcbsema_d2                                  bss  c001a0
  tck3                                       code  0157c4
  tol_sema                                    bss  c001f0
  tolower                                    code  016700
  toupper                                    code  016744
  tr                                         code  01544c
  tr.bad_callno                              code  015490
  unshiftedScanCodes                         code  0121e0
  wmsg1                                      code  01534c
  wmsg10                                     code  0152c0
  wmsg11                                     code  015254
  wmsg12                                     code  01526c
  wmsg13                                     code  015274
  wmsg14                                     code  0152b0
  wmsg2                                      code  015364
  wmsg3                                      code  01530c
  wmsg6                                      code  0152f0
  wmsg7                                      code  0152ac
  wmsg8                                      code  015334
  xtsk1                                      code  014748
  xtsk6                                      code  01472c
  xtsk7                                      code  014718
  zap1                                       code  01411c
