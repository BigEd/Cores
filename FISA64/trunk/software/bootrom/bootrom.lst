                	; ============================================================================
                	; bootrom.s
                	;        __
                	;   \\__/ o\    (C) 2014  Robert Finch, Stratford
                	;    \  __ /    All rights reserved.
                	;     \/_//     robfinch<remove>@finitron.ca
                	;       ||
                	;  
                	;
                	; This source file is free software: you can redistribute it and/or modify 
                	; it under the terms of the GNU Lesser General Public License as published 
                	; by the Free Software Foundation, either version 3 of the License, or     
                	; (at your option) any later version.                                      
                	;                                                                          
                	; This source file is distributed in the hope that it will be useful,      
                	; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                	; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                	; GNU General Public License for more details.                             
                	;                                                                          
                	; You should have received a copy of the GNU General Public License        
                	; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                	;                                                                          
                	; ============================================================================
                	;
                	TXTCOLS		EQU		84
                	TXTROWS		EQU		31
                	
                	CR	EQU	0x0D		;ASCII equates
                	LF	EQU	0x0A
                	TAB	EQU	0x09
                	CTRLC	EQU	0x03
                	CTRLH	EQU	0x08
                	CTRLI	EQU	0x09
                	CTRLJ	EQU	0x0A
                	CTRLK	EQU	0x0B
                	CTRLM   EQU 0x0D
                	CTRLS	EQU	0x13
                	CTRLX	EQU	0x18
                	XON		EQU	0x11
                	XOFF	EQU	0x13
                	
                	SC_LSHIFT	EQU		$12
                	SC_RSHIFT	EQU		$59
                	SC_KEYUP	EQU		$F0
                	SC_EXTEND	EQU		$E0
                	SC_CTRL		EQU		$14
                	SC_ALT		EQU		$11
                	SC_DEL		EQU		$71		; extend
                	SC_LCTRL	EQU		$58
                	SC_NUMLOCK	EQU		$77
                	SC_SCROLLLOCK	EQU	$7E
                	SC_CAPSLOCK	EQU		$58
                	
                	; Boot sector info (62 byte structure) */
                	BSI_JMP		= 0x00
                	BSI_OEMName	= 0x03
                	BSI_bps		= 0x0B
                	BSI_SecPerCluster	= 0x0D
                	BSI_ResSectors	= 0x0E
                	BSI_FATS	= 0x10
                	BSI_RootDirEnts	= 0x11
                	BSI_Sectors	= 0x13
                	BSI_Media	= 0x15
                	BSI_SecPerFAT	= 0x16
                	BSI_SecPerTrack	= 0x18
                	BSI_Heads	= 0x1A
                	BSI_HiddenSecs	= 0x1C
                	BSI_HugeSecs	= 0x1E
                	
                	BSI_DriveNum	= 0x24
                	BSI_Rsvd1		= 0x25
                	BSI_BootSig		= 0x26
                	BSI_VolID		= 0x27
                	BSI_VolLabel	= 0x2B
                	BSI_FileSysType = 0x36
                	
                	; error codes
                	E_Ok		=		0x00
                	E_Arg		=		0x01
                	E_BadMbx	=		0x04
                	E_QueFull	=		0x05
                	E_NoThread	=		0x06
                	E_NotAlloc	=		0x09
                	E_NoMsg		=		0x0b
                	E_Timeout	=		0x10
                	E_BadAlarm	=		0x11
                	E_NotOwner	=		0x12
                	E_QueStrategy =		0x13
                	E_DCBInUse	=		0x19
                	; Device driver errors
                	E_BadDevNum	=		0x20
                	E_NoDev		=		0x21
                	E_BadDevOp	=		0x22
                	E_ReadError	=		0x23
                	E_WriteError =		0x24
                	E_BadBlockNum	=	0x25
                	E_TooManyBlocks	=	0x26
                	
                	; resource errors
                	E_NoMoreMbx	=		0x40
                	E_NoMoreMsgBlks	=	0x41
                	E_NoMoreAlarmBlks	= 0x44
                	E_NoMoreTCBs	=	0x45
                	E_NoMem		= 12
                	
                	TS_READY	EQU		1
                	TS_RUNNING	EQU		2
                	TS_PREEMPT	EQU		4
                	
                	LEDS	equ		$FFDC0600
                	
                	; The following offsets in the I/O segment
                	TEXTSCR	equ		$00000
                	TEXTREG		EQU		$A0000
                	TEXT_COLS	EQU		0x00
                	TEXT_ROWS	EQU		0x04
                	TEXT_CURPOS	EQU		0x2C
                	TEXT_CURCTL	EQU		0x20
                	
                	BMP_CLUT	EQU		$C5800
                	
                	PIC			EQU		0xFFDC0FC0
                	PIC_IE		EQU		0xFFDC0FC4
                	PIC_ES		EQU		0xFFDC0FD0
                	PIC_RSTE	EQU		0xFFDC0FD4
                	
                	KEYBD		EQU		0xFFDC0000
                	KEYBDCLR	EQU		0xFFDC0004
                	
                	SPIMASTER	EQU		0xFFDC0500
                	SPI_MASTER_VERSION_REG	EQU	0x00
                	SPI_MASTER_CONTROL_REG	EQU	0x04
                	SPI_TRANS_TYPE_REG	EQU		0x08
                	SPI_TRANS_CTRL_REG	EQU		0x0C
                	SPI_TRANS_STATUS_REG	EQU	0x10
                	SPI_TRANS_ERROR_REG		EQU	0x14
                	SPI_DIRECT_ACCESS_DATA_REG		EQU	0x18
                	SPI_SD_SECT_7_0_REG		EQU	0x1C
                	SPI_SD_SECT_15_8_REG	EQU	0x20
                	SPI_SD_SECT_23_16_REG	EQU	0x24
                	SPI_SD_SECT_31_24_REG	EQU	0x28
                	SPI_RX_FIFO_DATA_REG	EQU	0x40
                	SPI_RX_FIFO_DATA_COUNT_MSB	EQU	0x48
                	SPI_RX_FIFO_DATA_COUNT_LSB  EQU 0x4C
                	SPI_RX_FIFO_CTRL_REG		EQU	0x50
                	SPI_TX_FIFO_DATA_REG	EQU	0x80
                	SPI_TX_FIFO_CTRL_REG	EQU	0x90
                	SPI_RESP_BYTE1			EQU	0xC0
                	SPI_RESP_BYTE2			EQU	0xC4
                	SPI_RESP_BYTE3			EQU	0xC8
                	SPI_RESP_BYTE4			EQU	0xCC
                	
                	SPI_INIT_SD			EQU		0x01
                	SPI_TRANS_START		EQU		0x01
                	SPI_TRANS_BUSY		EQU		0x01
                	SPI_INIT_NO_ERROR	EQU		0x00
                	SPI_READ_NO_ERROR	EQU		0x00
                	SPI_WRITE_NO_ERROR	EQU		0x00
                	RW_READ_SD_BLOCK	EQU		0x02
                	RW_WRITE_SD_BLOCK	EQU		0x03
                	
                	I2C_MASTER		EQU		0xFFDC0E00
                	I2C_PRESCALE_LO	EQU		0x00
                	I2C_PRESCALE_HI	EQU		0x01
                	I2C_CONTROL		EQU		0x02
                	I2C_TX			EQU		0x03
                	I2C_RX			EQU		0x03
                	I2C_CMD			EQU		0x04
                	I2C_STAT		EQU		0x04
                	
                	SD_MASTER		EQU		0xFFDC0B00
                	
                	RANDOM_NUM      EQU     0xFFDC0C00
                	
                	UART            EQU     0xFFDC0A00
                	UART_TX         EQU     0
                	UART_RX         EQU     0
                	UART_LS         EQU     1
                	UART_MS         EQU     2
                	UART_IS         EQU     3
                	UART_IE         EQU     4
                	UART_FF         EQU     5
                	UART_MC         EQU     6
                	UART_CTRL       EQU     7
                	UART_CM0        EQU     8
                	UART_CM1        EQU     9
                	UART_CM2        EQU     10
                	UART_CM3        EQU     11
                	UART_SPR        EQU     15
                	
                	NR_TCB		EQU		16
                	TCB_BackLink    EQU     0
                	TCB_Regs		EQU		8
                	TCB_SP0Save		EQU		0x800
                	TCB_SS0Save     EQU     0x808
                	TCB_SP1Save		EQU		0x810
                	TCB_SS1Save     EQU     0x818
                	TCB_SP2Save		EQU		0x820
                	TCB_SS2Save     EQU     0x828
                	TCB_SP3Save		EQU		0x830
                	TCB_SS3Save     EQU     0x838
                	TCB_SP4Save		EQU		0x840
                	TCB_SS4Save     EQU     0x848
                	TCB_SP5Save		EQU		0x850
                	TCB_SS5Save     EQU     0x858
                	TCB_SP6Save		EQU		0x860
                	TCB_SS6Save     EQU     0x868
                	TCB_SP7Save		EQU		0x870
                	TCB_SS7Save     EQU     0x878
                	TCB_SP8Save		EQU		0x880
                	TCB_SS8Save     EQU     0x888
                	TCB_SP9Save		EQU		0x890
                	TCB_SS9Save     EQU     0x898
                	TCB_SP10Save	EQU		0x8A0
                	TCB_SS10Save    EQU     0x8A8
                	TCB_SP11Save	EQU		0x8B0
                	TCB_SS11Save    EQU     0x8B8
                	TCB_SP12Save	EQU		0x8C0
                	TCB_SS12Save    EQU     0x8C8
                	TCB_SP13Save	EQU		0x8D0
                	TCB_SS13Save    EQU     0x8D8
                	TCB_SP14Save	EQU		0x8E0
                	TCB_SS14Save    EQU     0x8E8
                	TCB_SP15Save	EQU		0x8F0
                	TCB_SS15Save    EQU     0x8F8
                	TCB_Seg0Save    EQU     0x900
                	TCB_Seg1Save	EQU		0x908
                	TCB_Seg2Save	EQU		0x910
                	TCB_Seg3Save	EQU		0x918
                	TCB_Seg4Save	EQU		0x920
                	TCB_Seg5Save	EQU		0x928
                	TCB_Seg6Save	EQU		0x930
                	TCB_Seg7Save	EQU		0x938
                	TCB_Seg8Save	EQU		0x940
                	TCB_Seg9Save	EQU		0x948
                	TCB_Seg10Save	EQU		0x950
                	TCB_Seg11Save	EQU		0x958
                	TCB_Seg12Save	EQU		0x960
                	TCB_Seg13Save	EQU		0x968
                	TCB_Seg14Save	EQU		0x970
                	TCB_Seg15Save	EQU		0x978
                	TCB_PCSave      EQU     0x980
                	TCB_SPSave		EQU		0x988
                	TCB_Next		EQU		0xA00
                	TCB_Prev		EQU		0xA08
                	TCB_Status		EQU		0xA18
                	TCB_Priority	EQU		0xA20
                	TCB_hJob		EQU		0xA28
                	TCB_Size	EQU		8192
                	
                		code
                		org		$00010000
010000 3A 10 00 00 		bra     start
010004 00 00 00 00 		align   
                	
010008 1C 06 01 00 		dw		ClearScreen		; $8000
01000C 00 00 00 00 
010010 08 06 01 00 		dw		HomeCursor		; $8008
010014 00 00 00 00 
010018 FC 06 01 00 		dw		DisplayString	; $8010
01001C 00 00 00 00 
010020 60 13 01 00 		dw		KeybdGetCharNoWait; $8018
010024 00 00 00 00 
010028 CE 00 00 00 		dw		ClearBmpScreen	; $8020
01002C 00 00 00 80 
010030 98 08 01 00 		dw		DisplayChar		; $8028
010034 00 00 00 00 
010038 D0 00 00 00 		dw		SDInit			; $8030
01003C 00 00 00 80 
010040 D1 00 00 00 		dw		SDReadMultiple	; $8038
010044 00 00 00 80 
010048 D2 00 00 00 		dw		SDWriteMultiple	; $8040
01004C 00 00 00 80 
010050 D3 00 00 00 		dw		SDReadPart		; $8048
010054 00 00 00 80 
010058 D4 00 00 00 		dw		SDDiskSize		; $8050
01005C 00 00 00 80 
010060 7C 06 01 00 		dw		DisplayWord		; $8058
010064 00 00 00 00 
010068 90 06 01 00 		dw		DisplayHalf		; $8060
01006C 00 00 00 00 
010070 A4 06 01 00 		dw		DisplayCharHex	; $8068
010074 00 00 00 00 
010078 B8 06 01 00 		dw		DisplayByte		; $8070
01007C 00 00 00 00 
                	
                	start:
010080 02 00 02 6E 	    sei     ; interrupts off
010084 7C 00 00 00 	    ldi     sp,#32760            ; set stack pointer to top of 32k Area
010088 0A E0 F1 FF 
01008C 0A 50 00 00 	    ldi     r5,#$0000
010090 0A 10 28 00 	    ldi     r1,#20
                	.0001:
010094 7C DC FF 00 	    sc      r5,LEDS
010098 61 50 00 0C 
01009C 94 52 02 00 	    addui   r5,r5,#1
0100A0 63 00 20 00 		sw		r0,Milliseconds
0100A4 FC 26 00 00 		ldi		r1,#%000000100_110101110_0000000000
0100A8 0A 10 00 70 
0100AC 60 10 08 01 		sb		r1,KeybdEcho
0100B0 60 00 0A 01 		sb		r0,KeybdBad
0100B4 62 10 F0 00 		sh		r1,NormAttr
0100B8 60 00 00 01 		sb		r0,CursorRow
0100BC 60 00 02 01 		sb		r0,CursorCol
0100C0 7C 01 00 00 		ldi		r1,#DisplayChar
0100C4 0A 10 30 11 
0100C8 63 10 30 00 		sw		r1,OutputVec
0100CC 39 AA 00 00 		bsr		ClearScreen
0100D0 39 A7 00 00 		bsr		HomeCursor
0100D4 7C 01 00 00 		ldi     r1,#msgStart
0100D8 0A 10 02 17 
0100DC 39 CA 00 00 		bsr     DisplayStringCRLF
0100E0 0A 10 10 00 		ldi     r1,#8
0100E4 7C DC FF 00 		sb      r1,LEDS
0100E8 60 10 00 0C 
0100EC B9 09 00 00 		bsr		SetupIntVectors
                	;	bsr		KeybdInit
0100F0 39 1F 00 00 		bsr		InitPIC
0100F4 39 22 00 00 		bsr     InitUart
0100F8 39 2F 03 00 		bsr     RTCCReadbuf          ; read the real-time clock
0100FC B9 FB 03 00 		bsr     set_time_serial      ; set the system time serial
010100 BA 53 01 00 		bra		Monitor
010104 B9 FC DF FF 		bsr		FMTKInitialize
010108 02 00 00 6E 		cli
                	
                	SerialStartMsg:
01010C E7 EF 01 00 	    push    lr
010110 7C 01 00 00 		ldi     r1,#SerialPutChar
010114 0A 10 48 05 
010118 63 10 30 00 		sw      r1,OutputVec
01011C 7C 01 00 00 		ldi     r1,#msgStart
010120 0A 10 02 17 
010124 39 C1 00 00 		bsr     DisplayStringCRLF
010128 7C 01 00 00 		ldi		r1,#DisplayChar
01012C 0A 10 30 11 
010130 63 10 30 00 		sw		r1,OutputVec
010134 3B FF 11 00 	    rts
 
                	SetupIntVectors:
010138 0A 10 4E 01 		ldi     r1,#$00A7
01013C 7C DC FF 00 		sc      r1,LEDS
010140 61 10 00 0C 
010144 02 00 14 3C 		mtspr   vbr,r0               ; place vector table at $0000
010148 3F 00 00 00 		nop
01014C 3F 00 00 00 		nop
010150 02 20 14 3E 		mfspr   r2,vbr
010154 7C 01 00 00 		ldi		r1,#Tick1024Rout
010158 0A 10 80 0F 
01015C 63 11 20 1C 		sw		r1,450*8[r2]
010160 7C 01 00 00 		ldi		r1,#TickRout         ; This vector will be taken over by FMTK
010164 0A 10 18 0F 
010168 63 11 30 1C 		sw		r1,451*8[r2]
01016C 7C 01 00 00 		ldi     r1,#SerialIRQ
010170 0A 10 28 09 
010174 63 11 80 1C 		sw      r1,456*8[r2]
010178 7C 01 00 00 		ldi		r1,#KeybdIRQ
01017C 0A 10 00 0F 
010180 63 11 F0 1C 		sw		r1,463*8[r2]
010184 7C 01 00 00 	    ldi     r1,#SSM_ISR          ; set ISR vector for single step routine
010188 0A 10 40 3C 
01018C 63 11 F0 1E 	    sw      r1,495*8[r2]
010190 7C 01 00 00 	    ldi     r1,#IBPT_ISR         ; set ISR vector for instruction breakpoint routine
010194 0A 10 48 3C 
010198 63 11 00 1F 	    sw      r1,496*8[r2]
01019C 7C 01 00 00 		ldi		r1,#exf_rout
0101A0 0A 10 F0 3A 
0101A4 63 11 10 1F 		sw		r1,497*8[r2]
0101A8 7C 01 00 00 		ldi		r1,#dwf_rout
0101AC 0A 10 60 3B 
0101B0 63 11 20 1F 		sw		r1,498*8[r2]
0101B4 7C 01 00 00 		ldi		r1,#drf_rout
0101B8 0A 10 28 3B 
0101BC 63 11 30 1F 		sw		r1,499*8[r2]
0101C0 7C 01 00 00 		ldi		r1,#priv_rout
0101C4 0A 10 98 3B 
0101C8 63 11 50 1F 		sw		r1,501*8[r2]
0101CC 7C 01 00 00 		ldi		r1,#berr_rout
0101D0 0A 10 1C 3C 
0101D4 63 11 C0 1F 		sw		r1,508*8[r2]
0101D8 0A 10 54 01 		ldi     r1,#$00AA
0101DC 7C DC FF 00 		sc      r1,LEDS
0101E0 61 10 00 0C 
0101E4 37 FF 01 00 	    rtl
 
                	;------------------------------------------------------------------------------
                	; Initialize the interrupt controller.
                	;------------------------------------------------------------------------------
                	
                	InitPIC:
0101E8 0A 10 18 00 		ldi		r1,#$0C			; timer interrupt(s) are edge sensitive
0101EC 7C DC FF 00 		sh		r1,PIC_ES
0101F0 62 10 A0 1F 
0101F4 0A 10 1E 00 		ldi		r1,#$000F		; enable keyboard reset, timer interrupts
0101F8 7C DC FF 00 		sh		r1,PIC_IE
0101FC 62 10 88 1F 
010200 37 FF 01 00 		rtl

                	
                	;==============================================================================
                	; Serial port
                	;==============================================================================
                		code
                	;------------------------------------------------------------------------------
                	; Initialize UART
                	;------------------------------------------------------------------------------
                	
                	InitUart:
010204 7C DC FF 00 	    ldi     r2,#UART
010208 0A 20 00 14 
01020C FC 5B 02 00 	    ldi     r1,#$025BF7BA   ; constant for clock multiplier with 16.667MHz clock for 9600 baud
010210 0A 10 74 EF 
010214 82 10 10 72 	    lsr     r1,r1,#8          ; drop the LSB (not used)
010218 60 11 12 00 	    sb      r1,UART_CM1[r2]
01021C 82 10 10 72 	    lsr     r1,r1,#8
010220 60 11 14 00 	    sb      r1,UART_CM2[r2]
010224 82 10 10 72 	    lsr     r1,r1,#8
010228 60 11 16 00 	    sb      r1,UART_CM3[r2]
01022C 60 01 0E 00 	    sb      r0,UART_CTRL[r2]           ; no hardware flow control
010230 61 00 2C 01 		sc		r0,Uart_rxhead			; reset buffer indexes
010234 61 00 30 01 		sc		r0,Uart_rxtail
010238 0A 10 E0 03 		ldi		r1,#0x1f0
01023C 61 10 3C 01 		sc		r1,Uart_foff		; set threshold for XOFF
010240 0A 10 20 00 		ldi		r1,#0x010
010244 61 10 40 01 		sc		r1,Uart_fon			; set threshold for XON
010248 0A 10 02 00 		ldi		r1,#1
01024C 60 11 08 00 		sb		r1,UART_IE[r2]		; enable receive interrupt only
010250 60 00 36 01 		sb		r0,Uart_rxrts		; no RTS/CTS signals available
010254 60 00 44 01 		sb		r0,Uart_txrts		; no RTS/CTS signals available
010258 60 00 46 01 		sb		r0,Uart_txdtr		; no DTR signals available
01025C 60 00 38 01 		sb		r0,Uart_rxdtr		; no DTR signals available
010260 0A 10 02 00 		ldi		r1,#1
010264 60 10 48 01 		sb		r1,Uart_txxon		; for now
010268 0A 10 02 00 		ldi		r1,#1
                	;	sb		r1,SERIAL_SEMA
01026C 37 FF 01 00 	    rtl

                	;---------------------------------------------------------------------------------
                	; Get character directly from serial port. Blocks until a character is available.
                	;---------------------------------------------------------------------------------
                	;
                	SerialGetCharDirect:
                	sgc1:
010270 7C DC FF 00 		lb		r1,UART+UART_LS	; uart status
010274 40 10 02 14 
010278 8C 10 02 00 		and		r1,r1,#1		; is there a char available ?
01027C BD 00 FA FF 		beq		r1,sgc1
010280 7C DC FF 00 		lb		r1,UART+UART_RX
010284 40 10 00 14 
010288 37 FF 01 00 		rtl

                	;------------------------------------------------
                	; Check for a character at the serial port
                	; returns r1 = 1 if char available, 0 otherwise
                	;------------------------------------------------
                	;
                	SerialCheckForCharDirect:
01028C 7C DC FF 00 		lb		r1,UART+UART_LS			; uart status
010290 40 10 02 14 
010294 7C 00 00 00 		and		r1,r1,#rxfull			; is there a char available ?
010298 7C 00 00 00 
01029C 8C 10 06 02 
0102A0 37 FF 01 00 		rtl

                	;-----------------------------------------
                	; Put character to serial port
                	; r1 = char to put
                	;-----------------------------------------
                	;
                	SerialPutChar:
0102A4 67 E1 01 00 	    push    r2
0102A8 E7 E1 01 00 	    push    r3
0102AC 67 E2 01 00 		push	r4
0102B0 E7 E2 01 00 		push	r5
0102B4 67 E3 01 00 	    push    r6
0102B8 7C DC FF 00 	    ldi     r6,#UART
0102BC 0A 60 00 14 
0102C0 40 23 0C 00 		lb		r2,UART_MC[r6]
0102C4 0D 21 06 00 		or		r2,r2,#3		; assert DTR / RTS
0102C8 60 23 0C 00 		sb		r2,UART_MC[r6]
0102CC 40 20 44 01 		lb		r2,Uart_txrts
0102D0 3D 01 1A 00 		beq		r2,spcb1
0102D4 46 40 20 00 		lw		r4,Milliseconds
0102D8 0A 30 00 08 		ldi		r3,#1024		; delay count (1 s)
                	spcb3:
0102DC 40 23 04 00 		lb		r2,UART_MS[r6]
0102E0 0C 21 20 00 		and		r2,r2,#$10		; is CTS asserted ?
0102E4 3D 11 10 00 		bne		r2,spcb1
0102E8 46 50 20 00 		lw		r5,Milliseconds
0102EC 02 22 0A 0C 		cmp		r2,r4,r5
0102F0 3D 01 F6 FF 		beq		r2,spcb3
0102F4 82 42 00 1A 		mov		r4,r5
0102F8 95 31 02 00 		subui   r3,r3,#1
0102FC BD 11 F0 FF 		bne		r3,spcb3
010300 BA 11 00 00 		bra		spcabort
                	spcb1:
010304 40 20 46 01 		lb		r2,Uart_txdtr
010308 3D 01 1A 00 		beq		r2,spcb2
01030C 46 40 20 00 		lw		r4,Milliseconds
010310 0A 30 00 08 		ldi		r3,#1024		; delay count
                	spcb4:
010314 40 23 04 00 		lb		r2,UART_MS[r6]
010318 0C 21 40 00 		and		r2,r2,#$20		; is DSR asserted ?
01031C 3D 11 10 00 		bne		r2,spcb2
010320 46 50 20 00 		lw		r5,Milliseconds
010324 02 22 0A 0C 		cmp		r2,r4,r5
010328 3D 01 F6 FF 		beq		r2,spcb4
01032C 82 42 00 1A 		mov		r4,r5
010330 95 31 02 00 		subui   r3,r3,#1
010334 BD 11 F0 FF 		bne		r3,spcb4
010338 BA 0A 00 00 		bra		spcabort
                	spcb2:	
01033C 40 20 48 01 		lb		r2,Uart_txxon
010340 3D 01 0C 00 		beq		r2,spcb5
                	spcb6:
010344 40 20 2A 01 		lb		r2,Uart_txxonoff
010348 3D 01 08 00 		beq		r2,spcb5
01034C 40 43 04 00 		lb		r4,UART_MS[r6]
010350 0C 42 00 01 		and		r4,r4,#0x80			; DCD ?
010354 3D 12 F8 FF 		bne		r4,spcb6
                	spcb5:
010358 46 40 20 00 		lw		r4,Milliseconds
01035C 0A 30 00 08 		ldi		r3,#1024			; wait up to 1s
                	spcb8:
010360 40 23 02 00 		lb		r2,UART_LS[r6]
010364 0C 21 40 00 		and		r2,r2,#0x20			; tx not full ?
010368 3D 11 10 00 		bne		r2,spcb7
01036C 46 50 20 00 		lw		r5,Milliseconds
010370 02 22 0A 0C 		cmp		r2,r4,r5
010374 3D 01 F6 FF 		beq		r2,spcb8
010378 82 42 00 1A 		mov		r4,r5
01037C 95 31 02 00 		subui   r3,r3,#1
010380 BD 11 F0 FF 		bne		r3,spcb8
010384 3A 01 00 00 		bra		spcabort
                	spcb7:
010388 60 13 00 00 		sb		r1,UART_TX[r6]
                	spcabort:
01038C 57 6F 10 00 	    pop     r6
010390 57 5F 10 00 		pop		r5
010394 57 4F 10 00 		pop		r4
010398 57 3F 10 00 		pop     r3
01039C 57 2F 10 00 		pop     r2
0103A0 37 FF 01 00 		rtl

                	
                	;-------------------------------------------------
                	; Compute number of characters in recieve buffer.
                	; r4 = number of chars
                	;-------------------------------------------------
                	CharsInRxBuf:
0103A4 43 40 2C 01 		lcu		r4,Uart_rxhead
0103A8 43 30 30 01 		lcu		r3,Uart_rxtail
0103AC 02 42 06 2A 		subu	r4,r4,r3
0103B0 3D 22 0A 00 		bgt		r4,cirxb1
0103B4 0A 40 00 04 		ldi		r4,#0x200
0103B8 02 42 06 28 		addu	r4,r4,r3
0103BC 43 30 2C 01 		lcu		r3,Uart_rxhead
0103C0 02 42 06 2A 		subu	r4,r4,r3
                	cirxb1:
0103C4 37 FF 01 00 		rtl

                	;----------------------------------------------
                	; Get character from rx fifo
                	; If the fifo is empty enough then send an XON
                	;----------------------------------------------
                	;
                	SerialGetChar:
0103C8 67 E1 01 00 	    push    r2
0103CC E7 E1 01 00 	    push    r3
0103D0 67 E2 01 00 		push	r4
0103D4 E7 E2 01 00 	    push    r5
0103D8 7C DC FF 00 	    ldi     r5,#UART
0103DC 0A 50 00 14 
0103E0 43 30 2C 01 		lcu		r3,Uart_rxhead
0103E4 43 20 30 01 		lcu		r2,Uart_rxtail
0103E8 02 31 06 0C 		cmp		r3,r2,r3
0103EC BD 01 48 00 		beq		r3,sgcfifo1		    ; is there a char available ?
0103F0 7C 00 00 00 		lbu		r1,Uart_rxfifo[r2]	; get the char from the fifo into r1
0103F4 7C 00 00 00 
0103F8 41 11 24 02 
0103FC 14 21 02 00 		addui   r2,r2,#1    		; increment the fifo pointer
010400 0C 21 FE 03 		and		r2,r2,#$1ff
010404 61 20 30 01 		sc		r2,Uart_rxtail
010408 40 20 34 01 		lb		r2,Uart_rxflow		; using flow control ?
01040C 3D 01 2E 00 		beq		r2,sgcfifo2
010410 43 30 40 01 		lcu		r3,Uart_fon		; enough space in Rx buffer ?
010414 E7 EF 01 00 		push    lr
010418 B9 F1 FF FF 		bsr		CharsInRxBuf
01041C 57 FF 11 00 		pop     lr
010420 02 42 06 0C 		cmp		r4,r4,r3
010424 3D 22 22 00 		bgt		r4,sgcfifo2
010428 60 00 34 01 		sb		r0,Uart_rxflow		; flow off
01042C 40 40 36 01 		lb		r4,Uart_rxrts
010430 3D 02 08 00 		beq		r4,sgcfifo3
010434 C0 42 0C 00 		lb		r4,UART_MC[r5]		; set rts bit in MC
010438 0D 42 04 00 		or		r4,r4,#2
01043C E0 42 0C 00 		sb		r4,UART_MC[r5]
                	sgcfifo3:
010440 40 40 38 01 		lb		r4,Uart_rxdtr
010444 3D 02 08 00 		beq		r4,sgcfifo4
010448 C0 42 0C 00 		lb		r4,UART_MC[r5]		; set DTR
01044C 0D 42 02 00 		or		r4,r4,#1
010450 E0 42 0C 00 		sb		r4,UART_MC[r5]
                	sgcfifo4:
010454 40 40 3A 01 		lb		r4,Uart_rxxon
010458 3D 02 08 00 		beq		r4,sgcfifo5
01045C 0A 40 22 00 		ldi		r4,#XON
010460 7C DC FF 00 		sb		r4,UART[r5]
010464 E0 42 00 14 
                	sgcfifo5:
                	sgcfifo2:					; return with char in r1
010468 57 5F 10 00 	    pop     r5
01046C 57 4F 10 00 		pop		r4
010470 57 3F 10 00 		pop     r3
010474 57 2F 10 00 		pop     r2
010478 37 FF 01 00 		rtl
sgcfifo1:
01047C 0A 10 FE FF 		ldi		r1,#-1				; no char available
010480 57 5F 10 00 		pop     r5
010484 57 4F 10 00 		pop		r4
010488 57 3F 10 00 		pop     r3
01048C 57 2F 10 00 		pop     r2
010490 3B FF 11 00 		rts

                	
                	;-----------------------------------------
                	; Serial port IRQ
                	;-----------------------------------------
                	;
                	SerialIRQ:
010494 FC 00 00 00 	    ldi     sp,#$8000
010498 0A E0 01 00 
01049C E7 E0 01 00 		push    r1
0104A0 67 E1 01 00 		push    r2
0104A4 E7 E1 01 00 		push    r3
0104A8 67 E2 01 00 		push	r4
                	
0104AC 7C DC FF 00 	    ldi     r2,#UART
0104B0 0A 20 00 14 
0104B4 40 11 06 00 	    lb      r1,UART_IS[r2]  ; get interrupt status
0104B8 BD 20 10 00 		bgt		r1,sirq1		; no interrupt
0104BC 8C 10 FE 00 		and		r1,r1,#0x7f  	; switch on interrupt type
0104C0 86 30 08 00 		cmp		r3,r1,#4
0104C4 BD 01 1C 00 		beq		r3,srxirq
0104C8 86 30 18 00 		cmp		r3,r1,#$0C
0104CC BD 01 16 00 		beq		r3,stxirq
0104D0 86 30 20 00 		cmp		r3,r1,#$10
0104D4 BD 01 0C 00 		beq		r3,smsirq
                		; unknown IRQ type
                	sirq1:
0104D8 57 4F 10 00 		pop		r4
0104DC 57 3F 10 00 		pop     r3
0104E0 57 2F 10 00 		pop     r2
0104E4 57 1F 10 00 		pop     r1
0104E8 02 E0 3F 6E 		rti
                	
                	; Get the modem status and record it
                	smsirq:
0104EC 41 11 04 00 	    lbu     r1,UART_MS[r2]
0104F0 60 10 28 01 		sb      r1,Uart_ms
0104F4 BA FC FF FF 		bra		sirq1
                	
                	stxirq:
0104F8 3A FC FF FF 		bra		sirq1
                	
                	; Get a character from the uart and store it in the rx fifo
                	srxirq:
                	srxirq1:
0104FC 41 11 00 00 	    lbu     r1,UART_RX[r2]      ; get the char (clears interrupt)
010500 41 30 48 01 	    lbu     r3,Uart_txxon
010504 BD 01 14 00 		beq		r3,srxirq3
010508 86 40 26 00 		cmp		r4,r1,#XOFF
01050C 3D 12 08 00 		bne		r4,srxirq2
010510 0A 10 02 00 		ldi     r1,#1
010514 60 10 2A 01 		sb		r1,Uart_txxonoff
010518 BA 06 00 00 		bra		srxirq5
                	srxirq2:
01051C 86 40 22 00 		cmp		r4,r1,#XON
010520 3D 12 06 00 		bne		r4,srxirq3
010524 60 00 2A 01 		sb		r0,Uart_txxonoff
010528 BA 04 00 00 		bra		srxirq5
                	srxirq3:
01052C 60 00 2A 01 		sb		r0,Uart_txxonoff
010530 43 40 2C 01 		lcu		r4,Uart_rxhead
010534 7C 00 00 00 		sb		r1,Uart_rxfifo[r4]  ; store in buffer
010538 7C 00 00 00 
01053C 60 12 24 02 
010540 14 42 02 00 		addui   r4,r4,#1
010544 0C 42 FE 03 		and		r4,r4,#$1ff
010548 61 40 2C 01 		sc		r4,Uart_rxhead
                	srxirq5:
01054C 40 11 02 00 	    lb      r1,UART_LS[r2]      ; check for another ready character
010550 8C 10 02 00 		and		r1,r1,#1            ; check rxfull bit
010554 BD 10 D4 FF 		bne		r1,srxirq1          ; loop back for another character
010558 40 10 34 01 		lb		r1,Uart_rxflow		; are we using flow controls?
01055C BD 10 2E 00 		bne		r1,srxirq8
010560 E7 EF 01 00 		push    lr
010564 39 C8 FF FF 		bsr		CharsInRxBuf
010568 57 FF 11 00 		pop     lr
01056C 40 10 3C 01 		lb		r1,Uart_foff
010570 02 12 02 0C 		cmp		r1,r4,r1
010574 BD 40 22 00 		blt		r1,srxirq8
010578 0A 10 02 00 		ldi		r1,#1
01057C 60 10 34 01 		sb		r1,Uart_rxflow
010580 40 10 36 01 		lb		r1,Uart_rxrts
010584 BD 00 08 00 		beq		r1,srxirq6
010588 40 11 0C 00 		lb		r1,UART_MC[r2]
01058C 8C 10 FA 01 		and		r1,r1,#$FD		; turn off RTS
010590 60 11 0C 00 		sb		r1,UART_MC[r2]
                	srxirq6:
010594 40 10 38 01 		lb		r1,Uart_rxdtr
010598 BD 00 08 00 		beq		r1,srxirq7
01059C 40 11 0C 00 		lb		r1,UART_MC[r2]
0105A0 8C 10 FC 01 		and		r1,r1,#$FE		; turn off DTR
0105A4 60 11 0C 00 		sb		r1,UART_MC[r2]
                	srxirq7:
0105A8 40 10 3A 01 		lb		r1,Uart_rxxon
0105AC BD 00 06 00 		beq		r1,srxirq8
0105B0 0A 10 26 00 		ldi		r1,#XOFF
0105B4 60 11 00 00 		sb		r1,UART_TX[r2]
                	srxirq8:
0105B8 3A E4 FF FF 		bra		sirq1
                	
                	
                	
                	;------------------------------------------------------------------------------
                	; Convert ASCII character to screen display character.
                	;------------------------------------------------------------------------------
                	
                	AsciiToScreen:
0105BC 67 E1 01 00 	    push    r2
0105C0 8C 10 FE 01 		and		r1,r1,#$FF
0105C4 8D 10 00 02 		or		r1,r1,#$100
0105C8 8C 20 40 00 		and		r2,r1,#%00100000	; if bit 5 or 6 isn't set
0105CC 3D 01 08 00 		beq		r2,.00001
0105D0 8C 20 80 00 		and		r2,r1,#%01000000
0105D4 3D 01 04 00 		beq		r2,.00001
0105D8 8C 10 3E 03 		and		r1,r1,#%110011111
                	.00001:
0105DC 57 2F 10 00 	    pop     r2
0105E0 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; Convert screen display character to ascii.
                	;------------------------------------------------------------------------------
                	
                	ScreenToAscii:
0105E4 67 E1 01 00 	    push    r2
0105E8 8C 10 FE 01 		and		r1,r1,#$FF
0105EC 96 20 36 00 		cmpu	r2,r1,#26+1
0105F0 3D 31 04 00 		bge		r2,.stasc1
0105F4 84 10 C0 00 		add		r1,r1,#$60
                	.stasc1:
0105F8 57 2F 10 00 	    pop     r2
0105FC 37 FF 01 00 		rtl

                	CursorOff:
010600 37 FF 01 00 		rtl
CursorOn:
010604 37 FF 01 00 		rtl
HomeCursor:
010608 60 00 00 01 		sb		r0,CursorRow
01060C 60 00 02 01 		sb		r0,CursorCol
010610 7C DA FF 00 		sc	    r0,TEXTREG+TEXT_CURPOS+$FFD00000
010614 61 00 58 00 
010618 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	                                                                               
                	ClearScreen:
01061C E7 EF 01 00 	    push    lr
010620 E7 E0 01 00 	    push	r1
010624 67 E1 01 00 	    push    r2
010628 E7 E1 01 00 	    push    r3
01062C 67 E2 01 00 	    push    r4
010630 7C DA FF 00 		lbu	    r1,TEXTREG+TEXT_COLS+$FFD00000
010634 41 10 00 00 
010638 7C DA FF 00 		lbu	    r2,TEXTREG+TEXT_ROWS+$FFD00000
01063C 41 20 08 00 
010640 02 41 02 2E 		mulu	r4,r2,r1
010644 7C D0 FF 00 		ldi		r3,#TEXTSCR+$FFD00000
010648 0A 30 00 00 
01064C 0A 10 40 00 		ldi		r1,#' '
010650 B9 ED FF FF 		bsr		AsciiToScreen
010654 45 20 F0 00 		lhu		r2,NormAttr
010658 82 10 04 1A 		or		r1,r1,r2
                	.cs1:
01065C EA 11 88 00 	    sh	    r1,[r3+r4*4]
010660 15 42 02 00 	    subui   r4,r4,#1
010664 3D 12 FC FF 		bne	    r4,.cs1
010668 57 4F 10 00 		pop     r4
01066C 57 3F 10 00 		pop     r3
010670 57 2F 10 00 		pop     r2
010674 57 1F 10 00 		pop     r1
010678 3B FF 11 00 	    rts

                	;------------------------------------------------------------------------------
                	; Display the word in r1
                	;------------------------------------------------------------------------------
                	
                	DisplayWord:
01067C E7 EF 01 00 	    push    lr
010680 82 10 40 74 		rol	    r1,r1,#32
010684 B9 01 00 00 		bsr		DisplayHalf
010688 82 10 40 74 		rol	    r1,r1,#32
01068C 57 FF 11 00 	    pop     lr
                	
                	;------------------------------------------------------------------------------
                	; Display the half-word in r1
                	;------------------------------------------------------------------------------
                	
                	DisplayHalf:
010690 E7 EF 01 00 	    push    lr
010694 82 10 20 76 		ror		r1,r1,#16
010698 B9 01 00 00 		bsr		DisplayCharHex
01069C 82 10 20 74 		rol		r1,r1,#16
0106A0 57 FF 11 00 	    pop     lr
                	
                	;------------------------------------------------------------------------------
                	; Display the char in r1
                	;------------------------------------------------------------------------------
                	
                	DisplayCharHex:
0106A4 E7 EF 01 00 	    push    lr
0106A8 82 10 10 76 		ror		r1,r1,#8
0106AC B9 01 00 00 		bsr		DisplayByte
0106B0 82 10 10 74 		rol		r1,r1,#8
0106B4 57 FF 11 00 	    pop     lr
                	
                	;------------------------------------------------------------------------------
                	; Display the byte in r1
                	;------------------------------------------------------------------------------
                	
                	DisplayByte:
0106B8 E7 EF 01 00 	    push    lr
0106BC 82 10 08 76 		ror		r1,r1,#4
0106C0 B9 01 00 00 		bsr		DisplayNybble
0106C4 82 10 08 74 		rol		r1,r1,#4
0106C8 57 FF 11 00 		pop     lr
                	 
                	;------------------------------------------------------------------------------
                	; Display nybble in r1
                	;------------------------------------------------------------------------------
                	
                	DisplayNybble:
0106CC E7 EF 01 00 	    push    lr
0106D0 E7 E0 01 00 		push	r1
0106D4 67 E1 01 00 		push    r2
0106D8 8C 10 1E 00 		and		r1,r1,#$0F
0106DC 94 10 60 00 		addui	r1,r1,#'0'
0106E0 96 20 74 00 		cmpu	r2,r1,#'9'+1
0106E4 3D 41 04 00 		blt		r2,.0001
0106E8 94 10 0E 00 		addui	r1,r1,#7
                	.0001:
0106EC B9 DA 00 00 		bsr		OutChar
0106F0 57 2F 10 00 		pop     r2
0106F4 57 1F 10 00 		pop		r1
0106F8 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Display a string pointer to string in r1.
                	;------------------------------------------------------------------------------
                	
                	DisplayString:
0106FC E7 EF 01 00 	    push    lr
010700 E7 E0 01 00 		push	r1
010704 67 E1 01 00 		push    r2
010708 82 20 00 1A 		mov		r2,r1
                	.dm2:
01070C 41 11 00 00 		lbu		r1,[r2]
010710 14 21 02 00 		addui   r2,r2,#1	; increment text pointer
010714 BD 00 06 00 		beq		r1,.dm1
010718 39 D5 00 00 		bsr		OutChar
01071C 3A FE FF FF 		bra		.dm2
                	.dm1:
010720 57 2F 10 00 		pop		r2
010724 57 1F 10 00 	    pop     r1
010728 3B FF 11 00 		rts

                	DisplayStringCRLF:
01072C E7 EF 01 00 	    push    lr
010730 B9 F9 FF FF 		bsr		DisplayString
010734 3A 01 00 00 		bra     CRLF1
                	OutCRLF:
                	CRLF:
010738 E7 EF 01 00 	    push    lr
                	CRLF1:
01073C E7 E0 01 00 		push	r1
010740 0A 10 1A 00 		ldi		r1,#CR
010744 B9 CF 00 00 		bsr		OutChar
010748 0A 10 14 00 		ldi		r1,#LF
01074C B9 CE 00 00 		bsr		OutChar
010750 57 1F 10 00 		pop		r1
010754 3B FF 11 00 		rts

                	
                	DispCharQ:
010758 E7 EF 01 00 	    push    lr
01075C 39 CC FF FF 		bsr		AsciiToScreen
010760 E1 11 00 00 		sc		r1,[r3]
010764 84 31 08 00 		add		r3,r3,#4
010768 3B FF 11 00 	    rts

                	DispStartMsg:
01076C E7 EF 01 00 	    push    lr
010770 7C 01 00 00 		ldi		r1,#msgStart
010774 0A 10 02 17 
010778 B9 F0 FF FF 		bsr		DisplayString
01077C 3B FF 11 00 	    rts

                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	KeybdIRQ:
010780 7C DC FF 00 		sb		r0,KEYBD+1
010784 60 00 02 00 
010788 02 E0 3F 6E 		rti
                	
                	;------------------------------------------------------------------------------
                	; 60 Hz interrupt routine.
                	;------------------------------------------------------------------------------
                	
                	TickRout:
01078C FC 00 00 00 	    ldi     sp,#$8000           ; set stack pointer to interrupt processing stack
010790 0A E0 01 00 
010794 E7 E0 01 00 	    push    r1
010798 0A 10 06 00 		ldi		r1,#3				; reset the edge sense circuit
01079C 7C DC FF 00 		sh		r1,PIC_RSTE
0107A0 62 10 A8 1F 
0107A4 7C D0 FF 00 		lh	    r1,TEXTSCR+220+$FFD00000
0107A8 44 10 B8 01 
0107AC 94 10 02 00 		addui	r1,r1,#1
0107B0 7C D0 FF 00 		sh	    r1,TEXTSCR+220+$FFD00000
0107B4 62 10 B8 01 
0107B8 57 1F 10 00 		pop     r1
0107BC 02 E0 3F 6E 		rti                         ; restore stack pointer and return
                	
                	;------------------------------------------------------------------------------
                	; 1024Hz interupt routine. This must be fast. Allows the system time to be
                	; gotten by right shifting by 10 bits.
                	;------------------------------------------------------------------------------
                	
                	Tick1024Rout:
0107C0 FC 00 00 00 	    ldi     sp,#$8000           ; set stack pointer to interrupt processing stack
0107C4 0A E0 01 00 
0107C8 E7 E0 01 00 		push	r1
0107CC 0A 10 04 00 		ldi		r1,#2				; reset the edge sense circuit
0107D0 7C DC FF 00 		sh		r1,PIC_RSTE
0107D4 62 10 A8 1F 
0107D8 64 10 20 00 		inc     Milliseconds
0107DC 57 1F 10 00 		pop		r1
0107E0 02 E0 3F 6E 		rti                         ; restore stack pointer and return
                	
                	;------------------------------------------------------------------------------
                	; GetSystemTime
                	;
                	; Returns 
                	;    r1 = the system time in seconds.
                	;------------------------------------------------------------------------------
                	
                	GetSystemTime:
0107E4 46 10 20 00 	    lw      r1,Milliseconds
0107E8 82 10 14 72 	    lsr     r1,r1,#10
0107EC 37 FF 01 00 	    rtl

                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	GetScreenLocation:
0107F0 7C D0 FF 00 		ldi		r1,#TEXTSCR+$FFD00000
0107F4 0A 10 00 00 
0107F8 37 FF 01 00 		rtl
GetCurrAttr:
0107FC 45 10 F0 00 		lhu		r1,NormAttr
010800 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	UpdateCursorPos:
010804 E7 EF 01 00 	    push    lr
010808 E7 E0 01 00 		push	r1
01080C 67 E1 01 00 		push    r2
010810 67 E2 01 00 		push    r4
010814 41 10 00 01 		lbu		r1,CursorRow
010818 8C 10 7E 00 		and		r1,r1,#$3f
01081C 7C DA FF 00 		lbu	    r2,TEXTREG+TEXT_COLS+$FFD00000
010820 41 20 00 00 
010824 02 21 02 2E 		mulu	r2,r2,r1
010828 41 10 02 01 		lbu		r1,CursorCol
01082C 8C 10 FE 00 		and		r1,r1,#$7f
010830 02 21 02 28 		addu	r2,r2,r1
010834 7C DA FF 00 		sc	    r2,TEXTREG+TEXT_CURPOS+$FFD00000
010838 61 20 58 00 
01083C 57 4F 10 00 		pop		r4
010840 57 2F 10 00 	    pop     r2
010844 57 1F 10 00 	    pop     r1
010848 3B FF 11 00 	    rts
	
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	CalcScreenLoc:
01084C E7 EF 01 00 	    push    lr
010850 67 E1 01 00 		push	r2
010854 67 E2 01 00 		push    r4
010858 41 10 00 01 		lbu		r1,CursorRow
01085C 8C 10 7E 00 		and		r1,r1,#$3f
010860 7C DA FF 00 		lbu	    r2,TEXTREG+TEXT_COLS+$FFD00000
010864 41 20 00 00 
010868 02 21 02 2E 		mulu	r2,r2,r1
01086C 41 10 02 01 		lbu		r1,CursorCol
010870 8C 10 FE 00 		and		r1,r1,#$7f
010874 02 21 02 28 		addu	r2,r2,r1
010878 7C DA FF 00 		sc	    r2,TEXTREG+TEXT_CURPOS+$FFD00000
01087C 61 20 58 00 
010880 39 EE FF FF 		bsr		GetScreenLocation
010884 02 21 04 70 		shl		r2,r2,#2
010888 82 10 04 28 		addu	r1,r1,r2
01088C 57 4F 10 00 		pop		r4
010890 57 2F 10 00 	    pop     r2
010894 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	DisplayChar:
010898 E7 EF 01 00 	    push    lr
01089C E7 E0 01 00 		push	r1
0108A0 67 E1 01 00 	    push    r2
0108A4 E7 E1 01 00 	    push    r3
0108A8 67 E2 01 00 	    push    r4
0108AC 8C 10 FE 01 		and		r1,r1,#$FF
0108B0 86 20 1A 00 		cmp		r2,r1,#'\r'
0108B4 3D 01 42 00 		beq		r2,.docr
0108B8 86 20 22 01 		cmp		r2,r1,#$91		; cursor right ?
0108BC 3D 01 44 00 		beq		r2,.doCursorRight
0108C0 86 20 20 01 		cmp		r2,r1,#$90		; cursor up ?
0108C4 3D 01 4E 00 		beq		r2,.doCursorUp
0108C8 86 20 26 01 		cmp		r2,r1,#$93		; cursor left ?
0108CC 3D 01 54 00 		beq		r2,.doCursorLeft
0108D0 86 20 24 01 		cmp		r2,r1,#$92		; cursor down ?
0108D4 3D 01 5A 00 		beq		r2,.doCursorDown
0108D8 86 20 28 01 		cmp		r2,r1,#$94		; cursor home ?
0108DC 3D 01 62 00 		beq		r2,.doCursorHome
0108E0 86 20 32 01 		cmp		r2,r1,#$99		; delete ?
0108E4 3D 01 6A 00 		beq		r2,.doDelete
0108E8 86 20 10 00 		cmp		r2,r1,#CTRLH	; backspace ?
0108EC 3D 01 6E 00 		beq		r2,.doBackspace
0108F0 86 20 14 00 		cmp		r2,r1,#'\n'	; line feed ?
0108F4 3D 01 92 00 		beq		r2,.doLinefeed
0108F8 82 20 00 1A 		mov		r2,r1
0108FC 39 EA FF FF 		bsr		CalcScreenLoc
010900 82 30 00 1A 		mov		r3,r1
010904 02 11 00 1A 		mov		r1,r2
010908 B9 96 FF FF 		bsr		AsciiToScreen
01090C 82 20 00 1A 		mov		r2,r1
010910 B9 DD FF FF 		bsr		GetCurrAttr
010914 82 10 04 1A 		or		r1,r1,r2
010918 E2 11 00 00 		sh	    r1,[r3]
01091C B9 20 00 00 		bsr		IncCursorPos
                	.dcx4:
010920 57 4F 10 00 		pop		r4
010924 57 3F 10 00 	    pop     r3
010928 57 2F 10 00 	    pop     r2
01092C 57 1F 10 00 	    pop     r1
010930 57 FF 11 00 	    pop     lr
010934 37 FF 01 00 		rtl
.docr:
010938 60 00 02 01 		sb		r0,CursorCol
01093C 39 D9 FF FF 		bsr		UpdateCursorPos
010940 3A FC FF FF 		bra     .dcx4
                	.doCursorRight:
010944 41 10 02 01 		lbu		r1,CursorCol
010948 84 10 02 00 		add		r1,r1,#1
01094C 96 20 A8 00 		cmpu	r2,r1,#TXTCOLS
010950 3D 31 04 00 		bge		r2,.dcx7
010954 60 10 02 01 		sb		r1,CursorCol
                	.dcx7:
010958 B9 D5 FF FF 		bsr		UpdateCursorPos
01095C BA F8 FF FF 		bra     .dcx4
                	.doCursorUp:
010960 41 10 00 01 		lbu		r1,CursorRow
010964 BD 00 FA FF 		beq		r1,.dcx7
010968 85 10 02 00 		sub		r1,r1,#1
01096C 60 10 00 01 		sb		r1,CursorRow
010970 3A FD FF FF 		bra		.dcx7
                	.doCursorLeft:
010974 41 10 02 01 		lbu		r1,CursorCol
010978 BD 00 F0 FF 		beq		r1,.dcx7
01097C 85 10 02 00 		sub		r1,r1,#1
010980 60 10 02 01 		sb		r1,CursorCol
010984 BA FA FF FF 		bra		.dcx7
                	.doCursorDown:
010988 41 10 00 01 		lbu		r1,CursorRow
01098C 84 10 02 00 		add		r1,r1,#1
010990 96 20 3E 00 		cmpu	r2,r1,#TXTROWS
010994 3D 31 E2 FF 		bge		r2,.dcx7
010998 60 10 00 01 		sb		r1,CursorRow
01099C BA F7 FF FF 		bra		.dcx7
                	.doCursorHome:
0109A0 41 10 02 01 		lbu		r1,CursorCol
0109A4 BD 00 06 00 		beq		r1,.dcx12
0109A8 60 00 02 01 		sb		r0,CursorCol
0109AC BA F5 FF FF 		bra		.dcx7
                	.dcx12:
0109B0 60 00 00 01 		sb		r0,CursorRow
0109B4 BA F4 FF FF 		bra		.dcx7
                	.doDelete:
0109B8 B9 D2 FF FF 		bsr		CalcScreenLoc
0109BC 82 30 00 1A 		mov		r3,r1
0109C0 41 10 02 01 		lbu		r1,CursorCol
0109C4 3A 04 00 00 		bra		.dcx5
                	.doBackspace:
0109C8 41 10 02 01 		lbu		r1,CursorCol
0109CC BD 00 AA FF 		beq		r1,.dcx4
0109D0 85 10 02 00 		sub		r1,r1,#1
0109D4 60 10 02 01 		sb		r1,CursorCol
0109D8 B9 CE FF FF 		bsr		CalcScreenLoc
0109DC 82 30 00 1A 		mov		r3,r1
0109E0 41 10 02 01 		lbu		r1,CursorCol
                	.dcx5:
0109E4 C5 21 08 00 		lhu	    r2,4[r3]
0109E8 E2 21 00 00 		sh	    r2,[r3]
0109EC 84 31 08 00 		add		r3,r3,#4
0109F0 84 10 02 00 		add		r1,r1,#1
0109F4 96 20 A8 00 		cmpu	r2,r1,#TXTCOLS
0109F8 3D 41 F6 FF 		blt		r2,.dcx5
0109FC 0A 10 40 00 		ldi		r1,#' '
010A00 B9 77 FF FF 		bsr		AsciiToScreen
010A04 45 20 F0 00 		lhu		r2,NormAttr
010A08 82 10 04 1A 		or		r1,r1,r2
010A0C 85 31 08 00 		sub		r3,r3,#4
010A10 E2 11 00 00 		sh	    r1,[r3]
010A14 BA E1 FF FF 		bra		.dcx4
                	.doLinefeed:
010A18 B9 06 00 00 		bsr		IncCursorRow
010A1C BA E0 FF FF 		bra		.dcx4
                	
                	
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	IncCursorPos:
010A20 E7 EF 01 00 	    push    lr
010A24 E7 E0 01 00 		push	r1
010A28 67 E1 01 00 	    push    r2
010A2C 67 E2 01 00 	    push    r4
010A30 41 10 02 01 		lbu		r1,CursorCol
010A34 94 10 02 00 		addui	r1,r1,#1
010A38 60 10 02 01 		sb		r1,CursorCol
010A3C 96 20 A8 00 		cmpu	r2,r1,#TXTCOLS
010A40 3D 41 1E 00 		blt		r2,icc1
010A44 60 00 02 01 		sb		r0,CursorCol
010A48 BA 02 00 00 		bra		icr1
                	IncCursorRow:
010A4C E7 EF 01 00 	    push    lr
010A50 E7 E0 01 00 		push	r1
010A54 67 E1 01 00 	    push    r2
010A58 67 E2 01 00 	    push    r4
                	icr1:
010A5C 41 10 00 01 		lbu		r1,CursorRow
010A60 94 10 02 00 		addui	r1,r1,#1
010A64 60 10 00 01 		sb		r1,CursorRow
010A68 96 20 3E 00 		cmpu	r2,r1,#TXTROWS
010A6C 3D 41 08 00 		blt		r2,icc1
010A70 0A 20 3C 00 		ldi		r2,#TXTROWS-1
010A74 60 20 00 01 		sb		r2,CursorRow
010A78 B9 04 00 00 		bsr		ScrollUp
                	icc1:
010A7C 3F 00 00 00 	    nop
010A80 3F 00 00 00 	    nop
010A84 39 B0 FF FF 		bsr		UpdateCursorPos
010A88 57 4F 10 00 		pop		r4
010A8C 57 2F 10 00 	    pop     r2
010A90 57 1F 10 00 	    pop     r1
010A94 57 FF 11 00 		pop     lr
010A98 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	ScrollUp:
010A9C E7 EF 01 00 	    push    lr
010AA0 E7 E0 01 00 		push	r1
010AA4 67 E1 01 00 	    push    r2
010AA8 E7 E1 01 00 	    push    r3
010AAC E7 E2 01 00 	    push    r5
010AB0 67 E3 01 00 		push	r6
010AB4 7C DA FF 00 		lbu	    r1,TEXTREG+TEXT_COLS+$FFD00000
010AB8 41 10 00 00 
010ABC 7C DA FF 00 		lbu	    r2,TEXTREG+TEXT_ROWS+$FFD00000
010AC0 41 20 08 00 
010AC4 15 21 02 00 		subui	r2,r2,#1
010AC8 82 60 04 2E 		mulu	r6,r1,r2
010ACC 7C D0 FF 00 		ldi		r1,#TEXTSCR+$FFD00000
010AD0 0A 10 00 00 
010AD4 7C D0 FF 00 		ldi		r2,#TEXTSCR+TXTCOLS*4+$FFD00000
010AD8 0A 20 A0 02 
010ADC 0A 30 00 00 		ldi		r3,#0
                	.0001:
010AE0 4C 51 86 00 		lh	    r5,[r2+r3*4]
010AE4 EA 50 86 00 		sh	    r5,[r1+r3*4]
010AE8 94 31 02 00 		addui	r3,r3,#1
010AEC 15 63 02 00 		subui   r6,r6,#1
010AF0 3D 13 F8 FF 		bne	    r6,.0001
010AF4 7C DA FF 00 		lbu	    r1,TEXTREG+TEXT_ROWS+$FFD00000
010AF8 41 10 08 00 
010AFC 95 10 02 00 		subui	r1,r1,#1
010B00 39 04 00 00 		bsr		BlankLine
010B04 57 6F 10 00 		pop		r6
010B08 57 5F 10 00 		pop		r5
010B0C 57 3F 10 00 	    pop     r3
010B10 57 2F 10 00 	    pop     r2
010B14 57 1F 10 00 	    pop     r1
010B18 57 FF 11 00 		pop     lr
010B1C 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; Blank out a line on the screen.
                	;
                	; Parameters:
                	;	r1 = line number to blank out
                	;------------------------------------------------------------------------------
                	
                	BlankLine:
010B20 E7 EF 01 00 	    push    lr
010B24 E7 E0 01 00 		push	r1
010B28 67 E1 01 00 	    push    r2
010B2C E7 E1 01 00 	    push    r3
010B30 67 E2 01 00 	    push    r4
010B34 7C DA FF 00 	    lbu     r2,TEXTREG+TEXT_COLS+$FFD00000
010B38 41 20 00 00 
010B3C 02 31 02 2E 		mulu	r3,r2,r1
                	;	subui	r2,r2,#1		; r2 = #chars to blank - 1
010B40 82 31 04 70 		shl		r3,r3,#2
010B44 7C D0 FF 00 		addui	r3,r3,#TEXTSCR+$FFD00000
010B48 94 31 00 00 
010B4C 0A 10 40 00 		ldi		r1,#' '
010B50 B9 4D FF FF 		bsr		AsciiToScreen
010B54 45 40 F0 00 		lhu		r4,NormAttr
010B58 82 10 08 1A 		or		r1,r1,r4
                	.0001:
010B5C EA 11 84 00 		sh	    r1,[r3+r2*4]
010B60 15 21 02 00 		subui   r2,r2,#1
010B64 3D 11 FC FF 		bne	    r2,.0001
010B68 57 4F 10 00 		pop		r4
010B6C 57 3F 10 00 	    pop     r3
010B70 57 2F 10 00 	    pop     r2
010B74 57 1F 10 00 	    pop     r1
010B78 57 FF 11 00 		pop     lr
010B7C 37 FF 01 00 		rtl

010B80 00          		db	0
                	msgStart:
010B81 46 49 53 41 		db	"FISA64 test system starting.",0
010B85 36 34 20 74 
010B89 65 73 74 20 
010B8D 73 79 73 74 
010B91 65 6D 20 73 
010B95 74 61 72 74 
010B99 69 6E 67 2E 
010B9D 00          
                	
                	
                	; ============================================================================
                	; Monitor Task
                	; ============================================================================
                	
                	Monitor:
010B9E 00 00 0A 10 		ldi		r1,#49
010BA2 62 00       
010BA4 7C DC FF 00 		sc		r1,LEDS
010BA8 61 10 00 0C 
                	;	bsr		ClearScreen
                	;	bsr		HomeCursor
010BAC 7C 01 00 00 		ldi		r1,#msgMonitorStarted
010BB0 0A 10 DA 21 
010BB4 39 6F FF FF 		bsr		DisplayStringCRLF
010BB8 60 00 08 01 		sb		r0,KeybdEcho
                		;ldi		r1,#7
                		;ldi		r2,#0
                		;ldi		r3,#IdleTask
                		;ldi		r4,#0
                		;ldi		r5,#0
                		;bsr		StartTask
                	mon1:
010BBC 0A 10 64 00 		ldi		r1,#50
010BC0 7C DC FF 00 		sc		r1,LEDS
010BC4 61 10 00 0C 
                	;	ldi		sp,#TCBs+TCB_Size-8		; reload the stack pointer, it may have been trashed
010BC8 7C 00 00 00 		ldi		sp,#$6000
010BCC 0A E0 01 C0 
010BD0 02 00 00 6E 		cli
                	.PromptLn:
010BD4 B9 6C FF FF 		bsr		CRLF
010BD8 0A 10 48 00 		ldi		r1,#'$'
010BDC B9 3C 00 00 		bsr		OutChar
                	.Prompt3:
010BE0 39 F0 00 00 		bsr		KeybdGetCharNoWait		; KeybdGetCharDirectNB
010BE4 BD 40 FE FF 		blt	    r1,.Prompt3
010BE8 86 20 1A 00 		cmp		r2,r1,#CR
010BEC 3D 01 06 00 		beq		r2,.Prompt1
010BF0 39 3A 00 00 		bsr		OutChar
010BF4 BA FD FF FF 		bra		.Prompt3
                	.Prompt1:
010BF8 60 00 02 01 		sb		r0,CursorCol
010BFC 39 8A FF FF 		bsr		CalcScreenLoc
010C00 82 30 00 1A 		mov		r3,r1
010C04 B9 0F 00 00 		bsr		MonGetch
010C08 86 20 48 00 		cmp		r2,r1,#'$'
010C0C 3D 11 04 00 		bne		r2,.Prompt2
010C10 39 0E 00 00 		bsr		MonGetch
                	.Prompt2:
010C14 86 20 7E 00 		cmp		r2,r1,#'?'
010C18 3D 01 2C 00 		beq		r2,.doHelp
010C1C 86 20 86 00 		cmp		r2,r1,#'C'
010C20 3D 01 6E 02 		beq		r2,doCLS
010C24 86 20 C6 00 		cmp     r2,r1,#'c'
010C28 3D 01 98 7A 		beq     r2,doCS
010C2C 86 20 9A 00 		cmp		r2,r1,#'M'
010C30 3D 01 64 00 		beq		r2,doDumpmem
010C34 86 20 8C 00 		cmp		r2,r1,#'F'
010C38 3D 01 70 00 		beq		r2,doFillmem
010C3C 86 20 DA 00 		cmp		r2,r1,#'m'
010C40 3D 01 8E 7A 		beq		r2,MRTest
010C44 86 20 A6 00 		cmp		r2,r1,#'S'
010C48 3D 01 AA 00 		beq		r2,doSDBoot
010C4C 86 20 CE 00 		cmp		r2,r1,#'g'
010C50 3D 01 86 7A 		beq		r2,doRand
010C54 86 20 CA 00 		cmp		r2,r1,#'e'
010C58 3D 01 82 7A 		beq		r2,eval
010C5C 86 20 94 00 		cmp		r2,r1,#'J'
010C60 3D 01 B2 00 		beq		r2,doJump
010C64 86 20 88 00 		cmp		r2,r1,#'D'
010C68 3D 01 B8 00 		beq		r2,doDate
010C6C 3A EA FF FF 		bra     mon1
                	
                	.doHelp:
010C70 7C 01 00 00 		ldi		r1,#msgHelp
010C74 0A 10 C8 20 
010C78 B9 50 FF FF 		bsr		DisplayString
010C7C 3A E8 FF FF 		bra     mon1
                	
                	MonGetch:
010C80 E7 EF 01 00 	    push    lr
010C84 C5 11 00 00 		lhu	    r1,[r3]
010C88 8C 10 FE 03 		andi	r1,r1,#$1FF
010C8C 84 31 08 00 		add		r3,r3,#4
010C90 B9 2A FF FF 		bsr		ScreenToAscii
010C94 57 FF 11 00 		pop     lr
010C98 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; Ignore blanks in the input
                	; r3 = text pointer
                	; r1 destroyed
                	;------------------------------------------------------------------------------
                	
                	ignBlanks:
010C9C E7 EF 01 00 	    push    lr
010CA0 67 E1 01 00 	    push    r2
                	ignBlanks1:
010CA4 B9 FB FF FF 		bsr		MonGetch
010CA8 86 20 40 00 		cmp		r2,r1,#' '
010CAC 3D 01 FC FF 		beq		r2,ignBlanks1
010CB0 85 31 08 00 		sub		r3,r3,#4
010CB4 57 2F 10 00 		pop     r2
010CB8 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	GetTwoParams:
010CBC E7 EF 01 00 	    push    lr
010CC0 B9 FB FF FF 		bsr		ignBlanks
010CC4 B9 5B 00 00 		bsr		GetHexNumber	; get start address of dump
010CC8 82 20 00 1A 		mov		r2,r1
010CCC 39 FA FF FF 		bsr		ignBlanks
010CD0 39 5A 00 00 		bsr		GetHexNumber	; get end address of dump
010CD4 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; Get a range, the end must be greater or equal to the start.
                	;------------------------------------------------------------------------------
                	
                	GetRange:
010CD8 E7 EF 01 00 	    push    lr
010CDC 67 E2 01 00 	    push    r4
010CE0 B9 FB FF FF 		bsr		GetTwoParams
010CE4 02 41 02 2C 		cmpu	r4,r2,r1
010CE8 3D 22 B2 01 		bgt		r4,DisplayErr
010CEC 57 4F 10 00 		pop     r4
010CF0 57 FF 11 00 		pop     lr
010CF4 37 FF 01 00 		rtl

                	doDumpmem:
010CF8 39 21 FF FF 		bsr		CursorOff
010CFC B9 FB FF FF 		bsr		GetRange
010D00 39 47 FF FF 		bsr		CRLF
                	;	bra     mon1
                	.001:
010D04 39 45 00 00 		bsr		CheckKeys
010D08 B9 2C 00 00 		bsr		DisplayMemBytes
010D0C 02 41 02 2C 		cmpu	r4,r2,r1
010D10 3D 52 FA FF 		ble		r4,.001
010D14 3A D5 FF FF 		bra     mon1
                	
                	;------------------------------------------------------------------------------
                	; Fill memory
                	;
                	; FB FFD80000 FFD8FFFF r	; fill sprite memory with random bytes
                	;------------------------------------------------------------------------------
                	
                	doFillmem:
010D18 39 1D FF FF 		bsr		CursorOff
010D1C B9 EC FF FF 		bsr		MonGetch		; skip over 'B' of "FB"
010D20 86 20 84 00 		cmp		r2,r1,#'B'
010D24 3D 01 04 00 		beq		r2,.0004
010D28 95 31 08 00 		subui	r3,r3,#4		; backup text pointer
                	.0004:
010D2C B9 F5 FF FF 		bsr		GetRange
010D30 E7 E0 01 00 		push	r1
010D34 67 E1 01 00 	    push    r2
010D38 B9 EC FF FF 		bsr		ignBlanks
010D3C B9 E8 FF FF 		bsr		MonGetch		; check for random fill
010D40 86 20 E4 00 		cmp		r2,r1,#'r'
010D44 3D 01 18 00 		beq		r2,.0001
010D48 95 31 08 00 		subui   r3,r3,#4
010D4C B9 4A 00 00 		bsr		GetHexNumber
010D50 82 30 00 1A 		mov		r3,r1
010D54 57 2F 10 00 		pop		r2
010D58 57 1F 10 00 	    pop     r1
                	.0002:
010D5C 39 3A 00 00 		bsr		CheckKeys
010D60 60 31 00 00 		sb		r3,[r2]
010D64 14 21 02 00 		addui	r2,r2,#1
010D68 02 51 02 2C 		cmpu	r5,r2,r1
010D6C BD 42 F8 FF 		blt		r5,.0002
010D70 BA C9 FF FF 		bra		mon1
                	.0001:
010D74 57 2F 10 00 		pop		r2
010D78 57 1F 10 00 	    pop     r1
                	.0003:
010D7C 39 36 00 00 		bsr		CheckKeys
010D80 7C DC FF 00 		lw	    r3,RANDOM_NUM
010D84 46 30 00 18 
010D88 60 31 00 00 		sb		r3,[r2]
010D8C 14 21 02 00 		addui	r2,r2,#1
010D90 02 51 02 2C 		cmpu	r5,r2,r1
010D94 BD 42 F4 FF 		blt		r5,.0003
010D98 BA C4 FF FF 		bra		mon1
                	
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	doSDBoot:
                	;	sub		r3,r3,#4
010D9C B9 66 DE FF 		bsr		SDInit
010DA0 BD 10 0E FF 		bne	    r1,mon1
010DA4 B9 65 DE FF 		bsr		SDReadPart
010DA8 BD 10 0A FF 		bne	    r1,mon1
010DAC B9 78 DE FF 		bsr		SDReadBoot
010DB0 BD 10 06 FF 		bne	    r1,mon1
010DB4 B9 77 DE FF 		bsr		loadBootFile
010DB8 7C 00 00 00 		jmp		mon1
010DBC 3C 00 DE 85 
                	
                	OutChar:
010DC0 3E 00 30 00 	    jmp     (OutputVec)
                	
                	;------------------------------------------------------------------------------
                	; Jump to subroutine
                	;
                	; J 10000     ; restart system
                	;------------------------------------------------------------------------------
                	
                	doJump:
010DC4 B9 D7 FF FF 		bsr		MonGetch		; skip over 'S'
010DC8 B9 DA FF FF 		bsr		ignBlanks
010DCC B9 3A 00 00 		bsr		GetHexNumber
010DD0 BC F0 01 00 		jsr		[r1]
010DD4 3A BD FF FF 		bra		mon1
                	
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	doDate:
010DD8 39 D5 FF FF 		bsr		MonGetch		; skip over 'T'
010DDC 86 50 82 00 		cmp		r5,r1,#'A'		; look for DAY
010DE0 BD 02 38 00 		beq		r5,doDay
010DE4 39 D7 FF FF 		bsr		ignBlanks
010DE8 39 D3 FF FF 		bsr		MonGetch
010DEC 86 50 7E 00 		cmp		r5,r1,#'?'
010DF0 BD 02 14 00 		beq		r5,.0001
010DF4 95 31 08 00 		subui	r3,r3,#4
010DF8 39 35 00 00 		bsr		GetHexNumber
010DFC 60 10 4A 01 		sb		r1,RTCC_BUF+5	; update month
010E00 39 34 00 00 		bsr		GetHexNumber
010E04 60 10 48 01 		sb		r1,RTCC_BUF+4	; update day
010E08 39 33 00 00 		bsr		GetHexNumber
010E0C 60 10 4C 01 		sb		r1,RTCC_BUF+6	; update year
010E10 39 91 01 00 		bsr		RTCCWritebuf
010E14 3A B5 FF FF 		bra		mon1
                	.0001:
010E18 39 8B 01 00 		bsr		RTCCReadbuf
010E1C B9 23 FF FF 		bsr		CRLF
010E20 41 10 4A 01 		lbu		r1,RTCC_BUF+5
010E24 B9 12 FF FF 		bsr		DisplayByte
010E28 0A 10 5E 00 		ldi		r1,#'/'
010E2C B9 F2 FF FF 		bsr		OutChar
010E30 41 10 48 01 		lbu		r1,RTCC_BUF+4
010E34 B9 10 FF FF 		bsr		DisplayByte
010E38 0A 10 5E 00 		ldi		r1,#'/'
010E3C B9 F0 FF FF 		bsr		OutChar
010E40 41 10 4C 01 		lbu		r1,RTCC_BUF+6
010E44 B9 0E FF FF 		bsr		DisplayByte
010E48 39 1E FF FF 		bsr		CRLF
010E4C 3A AE FF FF 		bra		mon1
                	
                	doDay:
010E50 B9 C9 FF FF 		bsr		ignBlanks
010E54 B9 29 00 00 		bsr		GetHexNumber
010E58 82 30 00 1A 		mov		r3,r1			; value to write
010E5C 0A 10 DE 00 		ldi		r1,#$6F			; device $6F
010E60 0A 20 06 00 		ldi		r2,#$03			; register 3
010E64 B9 6F 01 00 		bsr		I2C_WRITE
010E68 BA AA FF FF 		bra		mon1
                	
                	;------------------------------------------------------------------------------
                	; Display memory pointed to by r2.
                	; destroys r1,r3
                	;------------------------------------------------------------------------------
                	;
                	DisplayMemBytes:
010E6C E7 EF 01 00 	    push    lr
010E70 E7 E0 01 00 		push	r1
010E74 E7 E1 01 00 	    push    r3
010E78 67 E2 01 00 	    push    r4
010E7C 0A 10 7C 00 		ldi		r1,#'>'
010E80 39 E8 FF FF 		bsr		OutChar
010E84 0A 10 84 00 		ldi		r1,#'B'
010E88 39 E7 FF FF 		bsr		OutChar
010E8C 0A 10 40 00 		ldi		r1,#' '
010E90 39 E6 FF FF 		bsr		OutChar
010E94 02 11 00 1A 		mov		r1,r2
010E98 39 FF FE FF 		bsr		DisplayHalf
010E9C 0A 30 10 00 		ldi		r3,#8
                	.001:
010EA0 0A 10 40 00 		ldi		r1,#' '
010EA4 B9 E3 FF FF 		bsr		OutChar
010EA8 41 11 00 00 		lbu		r1,[r2]
010EAC B9 01 FF FF 		bsr		DisplayByte
010EB0 14 21 02 00 		addui	r2,r2,#1
010EB4 95 31 02 00 		subui   r3,r3,#1
010EB8 BD 11 F4 FF 		bne	    r3,.001
010EBC 0A 10 74 00 		ldi		r1,#':'
010EC0 39 E0 FF FF 		bsr		OutChar
010EC4 7C 70 0D 00 		ldi		r1,#%110101110_000000100_0000000000	; reverse video
010EC8 0A 10 00 20 
010ECC 62 10 F0 00 		sh		r1,NormAttr
010ED0 0A 30 10 00 		ldi		r3,#8
010ED4 15 21 10 00 		subui	r2,r2,#8
                	.002
010ED8 41 11 00 00 		lbu		r1,[r2]
010EDC 96 40 34 00 		cmpu	r4,r1,#26				; convert control characters to '.'
010EE0 3D 32 06 00 		bge		r4,.004
010EE4 0A 10 5C 00 		ldi		r1,#'.'
010EE8 3A 02 00 00 		bra     .003
                	.004:
010EEC 96 40 00 01 		cmpu	r4,r1,#$80				; convert other non-ascii to '.'
010EF0 3D 42 04 00 		blt		r4,.003
010EF4 0A 10 5C 00 		ldi		r1,#'.'
                	.003:
010EF8 39 D9 FF FF 		bsr		OutChar
010EFC 14 21 02 00 		addui	r2,r2,#1
010F00 95 31 02 00 		subui   r3,r3,#1
010F04 BD 11 EA FF 		bne	    r3,.002
010F08 FC 26 00 00 		ldi		r1,#%000000100_110101110_0000000000	; normal video
010F0C 0A 10 00 70 
010F10 62 10 F0 00 		sh		r1,NormAttr
010F14 B9 04 FF FF 		bsr		CRLF
010F18 57 4F 10 00 		pop     r4
010F1C 57 3F 10 00 		pop		r3
010F20 57 1F 10 00 	    pop     r1
010F24 57 FF 11 00 	    pop     lr
010F28 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; CheckKeys:
                	;	Checks for a CTRLC or a scroll lock during long running dumps.
                	;------------------------------------------------------------------------------
                	
                	CheckKeys:
010F2C E7 EF 01 00 	    push    lr
010F30 39 02 00 00 		bsr	    CTRLCCheck
010F34 B9 07 00 00 		bsr     CheckScrollLock
010F38 57 FF 11 00 		pop     lr
010F3C 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; CTRLCCheck
                	;	Checks to see if CTRL-C is pressed. If so then the current routine is
                	; aborted and control is returned to the monitor.
                	;------------------------------------------------------------------------------
                	
                	CTRLCCheck:
010F40 E7 EF 01 00 	    push    lr
010F44 E7 E0 01 00 		push	r1
010F48 67 E1 01 00 		push    r2
010F4C B9 82 00 00 		bsr		KeybdGetCharNoWait
010F50 86 20 06 00 		cmp		r2,r1,#CTRLC
010F54 3D 01 0A 00 		beq		r2,.0001
010F58 57 2F 10 00 		pop     r2
010F5C 57 1F 10 00 		pop		r1
010F60 57 FF 11 00 		pop     lr
010F64 37 FF 01 00 		rtl
.0001:
010F68 14 EF 31 00 		addui	sp,sp,#24
010F6C 3A 8A FF FF 		bra     mon1
                	
                	;------------------------------------------------------------------------------
                	; CheckScrollLock:
                	;	Check for a scroll lock by the user. If scroll lock is active then tasks
                	; are rescheduled while the scroll lock state is tested in a loop.
                	;------------------------------------------------------------------------------
                	
                	CheckScrollLock:
010F70 E7 EF 01 00 	    push    lr
010F74 E7 E0 01 00 		push	r1
010F78 67 E1 01 00 		push    r2
                	.0002:
010F7C 43 10 0C 01 		lcu		r1,KeybdLocks
010F80 7C 00 00 00 		and		r2,r1,#$4000		; is scroll lock active ?
010F84 8C 20 00 80 
010F88 3D 01 04 00 		beq		r2,.0001
                		brk		#2*16				; reschedule tasks
010F8C 3A FE FF FF 		bra     .0002
                	.0001:
010F90 57 2F 10 00 	    pop     r2
010F94 57 1F 10 00 		pop		r1
010F98 57 FF 11 00 		pop     lr
010F9C 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; Get a hexidecimal number. Maximum of eight digits.
                	; R3 = text pointer (updated)
                	; R1 = hex number
                	;------------------------------------------------------------------------------
                	;
                	GetHexNumber:
010FA0 E7 EF 01 00 	    push    lr
010FA4 67 E1 01 00 		push	r2
010FA8 67 E2 01 00 	    push    r4
010FAC 0A 20 00 00 		ldi		r2,#0
010FB0 0A 40 20 00 		ldi		r4,#16
                	.gthxn2:
010FB4 B9 99 FF FF 		bsr		MonGetch
010FB8 39 05 00 00 		bsr		AsciiToHexNybble
010FBC BD 40 0A 00 		bmi		r1,.gthxn1
010FC0 02 21 08 70 		asl		r2,r2,#4
010FC4 02 21 02 1A 		or		r2,r2,r1
010FC8 15 42 02 00 		subui   r4,r4,#1
010FCC 3D 12 F4 FF 	    bne	    r4,.gthxn2
                	.gthxn1:
010FD0 02 11 00 1A 		mov		r1,r2
010FD4 57 4F 10 00 		pop		r4
010FD8 57 2F 10 00 	    pop     r2
010FDC 3B FF 11 00 	    rts

                	;------------------------------------------------------------------------------
                	; Convert ASCII character in the range '0' to '9', 'a' to 'f' or 'A' to 'F'
                	; to a hex nybble.
                	;------------------------------------------------------------------------------
                	;
                	AsciiToHexNybble:
010FE0 67 E1 01 00 	    push    r2
010FE4 96 20 60 00 		cmpu	r2,r1,#'0'
010FE8 3D 41 2C 00 		blt		r2,.gthx3
010FEC 96 20 74 00 		cmpu	r2,r1,#'9'+1
010FF0 3D 31 08 00 		bge		r2,.gthx5
010FF4 95 10 60 00 		subui	r1,r1,#'0'
010FF8 57 2F 10 00 		pop     r2
010FFC 37 FF 01 00 		rtl
.gthx5:
011000 96 20 82 00 		cmpu	r2,r1,#'A'
011004 3D 41 1E 00 		blt		r2,.gthx3
011008 96 20 8E 00 		cmpu	r2,r1,#'F'+1
01100C 3D 31 0A 00 		bge		r2,.gthx6
011010 95 10 82 00 		subui	r1,r1,#'A'
011014 94 10 14 00 		addui	r1,r1,#10
011018 57 2F 10 00 		pop     r2
01101C 37 FF 01 00 		rtl
.gthx6:
011020 96 20 C2 00 		cmpu	r2,r1,#'a'
011024 3D 41 0E 00 		blt		r2,.gthx3
011028 96 20 F6 00 		cmpu	r2,r1,#'z'+1
01102C 3D 31 0A 00 		bge		r2,.gthx3
011030 95 10 C2 00 		subui	r1,r1,#'a'
011034 94 10 14 00 		addui	r1,r1,#10
011038 57 2F 10 00 		pop     r2
01103C 37 FF 01 00 		rtl
.gthx3:
011040 57 2F 10 00 	    pop     r2
011044 0A 10 FE FF 		ldi		r1,#-1		; not a hex number
011048 37 FF 01 00 		rtl

                	DisplayErr:
01104C 7C 01 00 00 		ldi		r1,#msgErr
011050 0A 10 B8 20 
011054 39 D5 FE FF 		bsr		DisplayString
011058 BA 6C FF FF 		bra mon1
                	
                	msgErr:
01105C 2A 2A 45 72 		db	"**Err",CR,LF,0
011060 72 0D 0A 00 
                	
                	msgHelp:
011064 3F 20 3D 20 		db		"? = Display Help",CR,LF
011068 44 69 73 70 
01106C 6C 61 79 20 
011070 48 65 6C 70 
011074 0D 0A       
011076 43 4C 53 20 		db		"CLS = clear screen",CR,LF
01107A 3D 20 63 6C 
01107E 65 61 72 20 
011082 73 63 72 65 
011086 65 6E 0D 0A 
01108A 44 54 20 3D 		db		"DT = set/read date",CR,LF
01108E 20 73 65 74 
011092 2F 72 65 61 
011096 64 20 64 61 
01109A 74 65 0D 0A 
01109E 46 42 20 3D 		db		"FB = fill memory",CR,LF
0110A2 20 66 69 6C 
0110A6 6C 20 6D 65 
0110AA 6D 6F 72 79 
0110AE 0D 0A       
0110B0 4D 42 20 3D 		db		"MB = dump memory",CR,LF
0110B4 20 64 75 6D 
0110B8 70 20 6D 65 
0110BC 6D 6F 72 79 
0110C0 0D 0A       
0110C2 4A 53 20 3D 		db		"JS = jump to code",CR,LF
0110C6 20 6A 75 6D 
0110CA 70 20 74 6F 
0110CE 20 63 6F 64 
0110D2 65 0D 0A    
0110D5 53 20 3D 20 		db		"S = boot from SD card",CR,LF
0110D9 62 6F 6F 74 
0110DD 20 66 72 6F 
0110E1 6D 20 53 44 
0110E5 20 63 61 72 
0110E9 64 0D 0A    
0110EC 00          		db		0
                	
                	msgMonitorStarted
0110ED 4D 6F 6E 69 		db		"Monitor started.",0
0110F1 74 6F 72 20 
0110F5 73 74 61 72 
0110F9 74 65 64 2E 
0110FD 00          
                	
                	doCLS:
0110FE 00 00 B9 A3 		bsr		ClearScreen
011102 FE FF       
011104 B9 A0 FE FF 		bsr		HomeCursor
011108 BA 56 FF FF 		bra     mon1
                	
                	;------------------------------------------------------------------------------
                	; Get a random number from peripheral device.
                	;------------------------------------------------------------------------------
                	
                	GetRandomNumber:
01110C 7C DC FF 00 	    lw      r1,$FFDC0C00
011110 46 10 00 18 
011114 37 FF 01 00 	    rtl
                
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	; Keyboard processing routines follow.
                	;------------------------------------------------------------------------------
                	;------------------------------------------------------------------------------
                	
                	KEYBD_DELAY		EQU		1000
                	
                	KeybdGetCharDirectNB:
011118 E7 EF 01 00 	    push    lr
01111C 67 E1 01 00 		push	r2
011120 02 00 02 6E 		sei
011124 7C DC FF 00 		lcu		r1,KEYBD
011128 43 10 00 00 
01112C FC 00 00 00 		and		r2,r1,#$8000
011130 8C 20 00 00 
011134 3D 01 22 00 		beq		r2,.0001
011138 7C DC FF 00 		lbu		r0,KEYBD+4		; clear keyboard strobe
01113C 41 00 08 00 
011140 02 00 00 6E 		cli
011144 8C 20 00 10 		and		r2,r1,#$800	; is it keydown ?
011148 3D 11 18 00 		bne	    r2,.0001
01114C 8C 10 FE 01 		and		r1,r1,#$FF
011150 41 20 08 01 		lbu		r2,KeybdEcho
011154 3D 01 0C 00 		beq		r2,.0002
011158 86 20 1A 00 		cmp		r2,r1,#CR
01115C 3D 11 06 00 		bne		r2,.0003
011160 39 BB FE FF 		bsr		CRLF
011164 3A 01 00 00 		bra     .0002
                	.0003:
011168 3E F0 31 00 		jsr		(OutputVec)
                	.0002:
01116C 57 2F 10 00 		pop		r2
011170 57 FF 11 00 		pop     lr
011174 37 FF 01 00 		rtl
.0001:
011178 02 00 00 6E 		cli
01117C 0A 10 FE FF 		ldi		r1,#-1
011180 57 2F 10 00 		pop		r2
011184 57 FF 11 00 		pop     lr
011188 37 FF 01 00 		rtl

                	KeybdGetCharDirect:
01118C E7 EF 01 00 	    push    lr
011190 67 E1 01 00 		push	r2
                	.0001:
011194 7C DC FF 00 		lc		r1,KEYBD
011198 42 10 00 00 
01119C FC 00 00 00 		and		r2,r1,#$8000
0111A0 8C 20 00 00 
0111A4 3D 01 F8 FF 		beq		r2,.0001
0111A8 7C DC FF 00 		lbu		r0,KEYBD+4		; clear keyboard strobe
0111AC 41 00 08 00 
0111B0 8C 20 00 10 		and		r2,r1,#$800	; is it keydown ?
0111B4 3D 11 F0 FF 		bne	    r2,.0001
0111B8 8C 10 FE 01 		and		r1,r1,#$FF
0111BC 41 20 08 01 		lbu		r2,KeybdEcho
0111C0 3D 01 0C 00 		beq		r2,.gk1
0111C4 86 20 1A 00 		cmp		r2,r1,#CR
0111C8 3D 11 06 00 		bne		r2,.gk2
0111CC B9 AD FE FF 		bsr		CRLF
0111D0 3A 01 00 00 		bra     .gk1
                	.gk2:
0111D4 3E F0 31 00 		jsr		(OutputVec)
                	.gk1:
0111D8 57 2F 10 00 		pop		r2
0111DC 57 FF 11 00 		pop     lr
0111E0 37 FF 01 00 		rtl

                	;KeybdInit:
                	;	mfspr	r1,cr0		; turn off tmr mode
                	;	push	r1
                	;	mtspr	cr0,r0
                	;	ldi		r1,#33
                	;	sb		r1,LEDS
                	;	bsr		WaitForKeybdAck	; grab a byte from the keyboard
                	;	cmp		flg0,r1,#$AA	; did it send a ack ?
                	;	
                	;	ldi		r1,#$ff			; issue keyboard reset
                	;	bsr		SendByteToKeybd
                	;	ldi		r1,#38
                	;	sb		r1,LEDS
                	;	ldi		r1,#4
                	;	jsr		Sleep
                	;	ldi		r1,#KEYBD_DELAY	; delay a bit
                	kbdi5:
                	;	sub		r1,r1,#1
                	;	brnz	r1,kbdi5
                	;	ldi		r1,#34
                	;	sb		r1,LEDS
                	;	ldi		r1,#0xf0		; send scan code select
                	;	bsr		SendByteToKeybd
                	;	ldi		r1,#35
                	;	sb		r1,LEDS
                	;	ldi		r2,#0xFA
                	;	bsr		WaitForKeybdAck
                	;	cmp		fl0,r1,#$FA
                	;	bne		fl0,kbdi2
                	;	ldi		r1,#36
                	;	sb		r1,LEDS
                	;	ldi		r1,#2			; select scan code set#2
                	;	bsr		SendByteToKeybd
                	;	ldi		r1,#39
                	;	sb		r1,LEDS
                	;kbdi2:
                	;	ldi		r1,#45
                	;	sb		r1,LEDS
                	;	pop		r1				; turn back on tmr mode
                	;	mtspr	cr0,r1
                	;	rtl
                	
                	msgBadKeybd:
0111E4 4B 65 79 62 		db		"Keyboard not responding.",0
0111E8 6F 61 72 64 
0111EC 20 6E 6F 74 
0111F0 20 72 65 73 
0111F4 70 6F 6E 64 
0111F8 69 6E 67 2E 
0111FC 00          
                	
                	;SendByteToKeybd:
                	;	push	r2
                	;	sb		r1,KEYBD
                	;	ldi		r1,#40
                	;	sb		r1,LEDS
                	;	mfspr	r3,tick
                	;kbdi4:						; wait for transmit complete
                	;	mfspr	r4,tick
                	;	sub		r4,r4,r3
                	;	cmp		fl0,r4,#KEYBD_DELAY
                	;	bhi		fl0,kbdbad
                	;	ldi		r1,#41
                	;	sb		r1,LEDS
                	;	lbu		r1,KEYBD+1
                	;	and		fl0,r1,#64
                	;	brz		fl0,kbdi4
                	;	bra 	sbtk1
                	;kbdbad:
                	;	ldi		r1,#42
                	;	sb		r1,LEDS
                	;	lbu		r1,KeybdBad
                	;	brnz	r1,sbtk2
                	;	ldi		r1,#1
                	;	sb		r1,KeybdBad
                	;	ldi		r1,#43
                	;	sb		r1,LEDS
                	;	ldi		r1,#msgBadKeybd
                	;	bsr		DisplayStringCRLF
                	;sbtk1:
                	;	ldi		r1,#44
                	;	sb		r1,LEDS
                	;	pop		r2
                	;	rtl
                	;sbtk2:
                	;	bra sbtk1
                	
                	; Wait for keyboard to respond with an ACK (FA)
                	;
                	;WaitForKeybdAck:
                	;	ldi		r1,#64
                	;	sb		r1,LEDS
                	;	mfspr	r3,tick
                	;wkbdack1:
                	;	mfspr	r4,tick
                	;	sub		r4,r4,r3
                	;	cmp		fl0,r4,#KEYBD_DELAY
                	;	bhi		fl0,wkbdbad
                	;	ldi		r1,#65
                	;	sb		r1,LEDS
                	;	lb		r1,KEYBD+1				; check keyboard status for key
                	;	brpl	r1,wkbdack1				; no key available, go back
                	;	lbu		r1,KEYBD				; get the scan code
                	;	sb		r0,KEYBD+1				; clear recieve register
                	;wkbdbad:
                	;	rtl
                	
                	KeybdInit:
0111FD 00 00 00 E7 	    push    lr
011201 EF 01 00    
011204 0A 30 0A 00 		ldi		r3,#5
                	.0001:
011208 39 19 00 00 		bsr		KeybdRecvByte	; Look for $AA
01120C BD 40 06 00 		bmi		r1,.0002
011210 86 20 54 01 		cmp		r2,r1,#$AA		;
011214 3D 01 20 00 		beq		r2,.config
                	.0002:
011218 B9 76 00 00 		bsr		Wait10ms
01121C 0A 10 FE FF 		ldi		r1,#-1			; send reset code to keyboard
011220 7C DC FF 00 		sb		r1,KEYBD+1		; write to status reg to clear TX state
011224 60 10 02 00 
011228 B9 74 00 00 		bsr		Wait10ms
01122C 0A 10 FE 01 		ldi		r1,#$FF
011230 39 72 00 00 		bsr		KeybdSendByte	; now write to transmit register
011234 B9 1B 00 00 		bsr		KeybdWaitTx		; wait until no longer busy
011238 39 13 00 00 		bsr		KeybdRecvByte	; look for an ACK ($FA)
01123C 86 20 F4 01 		cmp		r2,r1,#$FA
011240 39 12 00 00 		bsr		KeybdRecvByte
011244 86 20 F8 01 		cmp		r2,r1,#$FC		; reset error ?
011248 3D 01 1A 00 		beq		r2,.tryAgain
01124C 86 20 54 01 		cmp		r2,r1,#$AA		; reset complete okay ?
011250 3D 11 16 00 		bne		r2,.tryAgain
                	.config:
011254 0A 10 E0 01 		ldi		r1,#$F0			; send scan code select
011258 7C DC FF 00 		sc		r1,LEDS
01125C 61 10 00 0C 
011260 39 6C 00 00 		bsr		KeybdSendByte
011264 B9 15 00 00 		bsr		KeybdWaitTx
011268 BD 40 0A 00 		bmi		r1,.tryAgain
01126C B9 0C 00 00 		bsr		KeybdRecvByte	; wait for response from keyboard
011270 BD 40 06 00 		bmi		r1,.tryAgain
011274 86 20 F4 01 		cmp		r2,r1,#$FA
011278 3D 01 10 00 		beq		r2,.0004
                	.tryAgain:
01127C 95 31 02 00 	    subui   r3,r3,#1
011280 BD 11 C4 FF 		bne	    r3,.0001
                	.keybdErr:
011284 7C 01 00 00 		ldi		r1,#msgBadKeybd
011288 0A 10 C8 23 
01128C 39 8E FE FF 		bsr		DisplayString
011290 57 FF 11 00 		pop     lr
011294 37 FF 01 00 		rtl
.0004:
011298 0A 10 04 00 		ldi		r1,#2			; select scan code set #2
01129C B9 64 00 00 		bsr		KeybdSendByte
0112A0 39 0E 00 00 		bsr		KeybdWaitTx
0112A4 BD 40 EC FF 		bmi		r1,.tryAgain
0112A8 57 FF 11 00 		pop     lr
0112AC 37 FF 01 00 		rtl

                	; Get the keyboard status
                	;
                	KeybdGetStatus:
0112B0 7C DC FF 00 		lb		r1,KEYBD+1
0112B4 40 10 02 00 
0112B8 37 FF 01 00 		rtl

                	; Get the scancode from the keyboard port
                	;
                	KeybdGetScancode:
0112BC 7C DC FF 00 		lbu		r1,KEYBD				; get the scan code
0112C0 41 10 00 00 
0112C4 7C DC FF 00 		sb		r0,KEYBD+1				; clear receive register
0112C8 60 00 02 00 
0112CC 37 FF 01 00 		rtl

                	; Recieve a byte from the keyboard, used after a command is sent to the
                	; keyboard in order to wait for a response.
                	;
                	KeybdRecvByte:
0112D0 E7 EF 01 00 	    push    lr
0112D4 E7 E1 01 00 		push	r3
0112D8 0A 30 C8 00 		ldi		r3,#100			; wait up to 1s
                	.0003:
0112DC B9 FA FF FF 		bsr		KeybdGetStatus	; wait for response from keyboard
0112E0 BD 40 10 00 		bmi		r1,.0004		; is input buffer full ? yes, branch
0112E4 39 5D 00 00 		bsr		Wait10ms		; wait a bit
0112E8 95 31 02 00 		subui   r3,r3,#1
0112EC BD 11 F8 FF 		bne     r3,.0003		; go back and try again
0112F0 57 3F 10 00 		pop		r3				; timeout
0112F4 0A 10 FE FF 		ldi		r1,#-1			; return -1
0112F8 57 FF 11 00 		pop     lr
0112FC 37 FF 01 00 		rtl
.0004:
011300 B9 F7 FF FF 		bsr		KeybdGetScancode
011304 57 3F 10 00 		pop		r3
011308 57 FF 11 00 		pop     lr
01130C 37 FF 01 00 		rtl

                	
                	; Wait until the keyboard transmit is complete
                	; Returns .CF = 1 if successful, .CF=0 timeout
                	;
                	KeybdWaitTx:
011310 E7 EF 01 00 	    push    lr
011314 67 E1 01 00 		push	r2
011318 E7 E1 01 00 	    push    r3
01131C 0A 30 C8 00 		ldi		r3,#100			; wait a max of 1s
                	.0001:
011320 39 F2 FF FF 		bsr		KeybdGetStatus
011324 8C 10 80 00 		and		r1,r1,#$40		; check for transmit complete bit
011328 BD 10 12 00 		bne	    r1,.0002		; branch if bit set
01132C 39 54 00 00 		bsr		Wait10ms		; delay a little bit
011330 95 31 02 00 		subui   r3,r3,#1
011334 BD 11 F6 FF 		bne	    r3,.0001		; go back and try again
011338 57 3F 10 00 		pop		r3
01133C 57 2F 10 00 	    pop     r2			    ; timed out
011340 0A 10 FE FF 		ldi		r1,#-1			; return -1
011344 57 FF 11 00 		pop     lr
011348 37 FF 01 00 		rtl
.0002:
01134C 57 3F 10 00 		pop		r3
011350 57 2F 10 00 	    pop     r2			    ; wait complete, return 
011354 0A 10 00 00 		ldi		r1,#0			; return 0
011358 57 FF 11 00 		pop     lr
01135C 37 FF 01 00 		rtl

                	KeybdGetCharNoWait:
011360 60 00 14 01 		sb		r0,KeybdWaitFlag
011364 BA 01 00 00 		bra		KeybdGetChar
                	
                	KeybdGetCharWait:
011368 0A 10 FE FF 		ldi		r1,#-1
01136C 60 10 14 01 		sb		r1,KeybdWaitFlag
                		
                	KeybdGetChar:
011370 E7 EF 01 00 	    push    lr
011374 67 E1 01 00 		push	r2
011378 E7 E1 01 00 	    push    r3
                	.0003:
01137C B9 E6 FF FF 		bsr		KeybdGetStatus			; check keyboard status for key available
011380 BD 40 10 00 		bmi		r1,.0006				; yes, go process
011384 40 10 14 01 		lb		r1,KeybdWaitFlag		; are we willing to wait for a key ?
011388 BD 40 FA FF 		bmi		r1,.0003				; yes, branch back
01138C 0A 10 FE FF 		ldi		r1,#-1					; flag no char available
011390 57 3F 10 00 		pop		r3
011394 57 2F 10 00 	    pop     r2
011398 57 FF 11 00 	    pop     lr
01139C 37 FF 01 00 		rtl
.0006:
0113A0 B9 E3 FF FF 		bsr		KeybdGetScancode
                	.0001:
0113A4 0A 20 02 00 		ldi		r2,#1
0113A8 7C DC FF 00 		sb		r2,LEDS
0113AC 60 20 00 0C 
0113B0 86 20 E0 01 		cmp		r2,r1,#SC_KEYUP
0113B4 3D 01 68 00 		beq		r2,.doKeyup
0113B8 86 20 C0 01 		cmp		r2,r1,#SC_EXTEND
0113BC 3D 01 6A 00 		beq		r2,.doExtend
0113C0 86 20 28 00 		cmp		r2,r1,#$14				; code for CTRL
0113C4 3D 01 6E 00 		beq		r2,.doCtrl
0113C8 86 20 24 00 		cmp		r2,r1,#$12				; code for left shift
0113CC 3D 01 80 00 		beq		r2,.doShift
0113D0 86 20 B2 00 		cmp		r2,r1,#$59				; code for right-shift
0113D4 3D 01 7C 00 		beq		r2,.doShift
0113D8 86 20 EE 00 		cmp		r2,r1,#SC_NUMLOCK
0113DC 3D 01 8E 00 		beq		r2,.doNumLock
0113E0 86 20 B0 00 		cmp		r2,r1,#SC_CAPSLOCK
0113E4 3D 01 98 00 		beq		r2,.doCapsLock
0113E8 86 20 FC 00 		cmp		r2,r1,#SC_SCROLLLOCK
0113EC 3D 01 E2 76 		beq		r2,.doScrolllock
0113F0 40 20 10 01 		lb		r2,KeyState1			; check key up/down
0113F4 60 00 10 01 		sb		r0,KeyState1			; clear keyup status
0113F8 3D 11 C2 FF 		bne	    r2,.0003				; ignore key up
0113FC 40 20 12 01 		lb		r2,KeyState2
011400 0C 31 00 01 		and		r3,r2,#$80				; is it extended code ?
011404 BD 01 0E 00 		beq		r3,.0010
011408 0C 31 FE 00 		and		r3,r2,#$7f				; clear extended bit
01140C 60 30 12 01 		sb		r3,KeyState2
011410 60 00 10 01 		sb		r0,KeyState1			; clear keyup
011414 7C 01 00 00 		lbu		r1,keybdExtendedCodes[r1]
011418 C1 10 00 31 
01141C BA 09 00 00 		bra		.0008
                	.0010:
011420 40 20 12 01 		lb		r2,KeyState2
011424 0C 31 08 00 		and		r3,r2,#$04				; is it CTRL code ?
011428 BD 01 0A 00 		beq		r3,.0009
01142C 8C 10 FE 00 		and		r1,r1,#$7F
011430 7C 01 00 00 		lbu		r1,keybdControlCodes[r1]
011434 C1 10 00 30 
011438 3A 06 00 00 		bra		.0008
                	.0009:
01143C 40 20 12 01 		lb		r2,KeyState2
011440 0C 31 02 00 		and		r3,r2,#$01				; is it shift down ?
011444 BD 01 08 00 		beq  	r3,.0007
011448 7C 01 00 00 		lbu		r1,shiftedScanCodes[r1]
01144C C1 10 00 2E 
011450 3A 03 00 00 		bra		.0008
                	.0007:
011454 7C 01 00 00 		lbu		r1,unshiftedScanCodes[r1]
011458 C1 10 00 2C 
01145C 0A 20 04 00 		ldi		r2,#2
011460 7C DC FF 00 		sb		r2,LEDS
011464 60 20 00 0C 
                	.0008:
011468 0A 20 06 00 		ldi		r2,#3
01146C 7C DC FF 00 		sb		r2,LEDS
011470 60 20 00 0C 
011474 57 3F 10 00 		pop		r3
011478 57 2F 10 00 	    pop     r2
01147C 57 FF 11 00 	    pop     lr
011480 37 FF 01 00 		rtl
.doKeyup:
011484 0A 10 FE FF 		ldi		r1,#-1
011488 60 10 10 01 		sb		r1,KeyState1
01148C 3A DE FF FF 		bra		.0003
                	.doExtend:
011490 41 10 12 01 		lbu		r1,KeyState2
011494 8D 10 00 01 		or		r1,r1,#$80
011498 60 10 12 01 		sb		r1,KeyState2
01149C 3A DC FF FF 		bra		.0003
                	.doCtrl:
0114A0 40 10 10 01 		lb		r1,KeyState1
0114A4 60 00 10 01 		sb		r0,KeyState1
0114A8 BD 30 0A 00 		bpl		r1,.0004
0114AC 40 10 12 01 		lb		r1,KeyState2
0114B0 8C 10 F6 FF 		and		r1,r1,#-5
0114B4 60 10 12 01 		sb		r1,KeyState2
0114B8 BA D8 FF FF 		bra		.0003
                	.0004:
0114BC 40 10 12 01 		lb		r1,KeyState2
0114C0 8D 10 08 00 		or		r1,r1,#4
0114C4 60 10 12 01 		sb		r1,KeyState2
0114C8 BA D6 FF FF 		bra		.0003
                	.doShift:
0114CC 40 10 10 01 		lb		r1,KeyState1
0114D0 60 00 10 01 		sb		r0,KeyState1
0114D4 BD 30 0A 00 		bpl		r1,.0005
0114D8 40 10 12 01 		lb		r1,KeyState2
0114DC 8C 10 FC FF 		and		r1,r1,#-2
0114E0 60 10 12 01 		sb		r1,KeyState2
0114E4 3A D3 FF FF 		bra		.0003
                	.0005:
0114E8 40 10 12 01 		lb		r1,KeyState2
0114EC 8D 10 02 00 		or		r1,r1,#1
0114F0 60 10 12 01 		sb		r1,KeyState2
0114F4 3A D1 FF FF 		bra		.0003
                	.doNumLock:
0114F8 7C 00 00 00 		lb		r1,KeySTate2
0114FC 7C 00 00 00 
011500 40 10 7C 03 
011504 8E 10 20 00 		eor		r1,r1,#16
011508 60 10 12 01 		sb		r1,KeyState2
01150C 39 06 00 00 		bsr		KeybdSetLEDStatus
011510 BA CD FF FF 		bra		.0003
                	.doCapsLock:
011514 40 10 12 01 		lb		r1,KeyState2
011518 8E 10 40 00 		eor		r1,r1,#32
01151C 60 10 12 01 		sb		r1,KeyState2
011520 B9 03 00 00 		bsr		KeybdSetLEDStatus
011524 3A CB FF FF 		bra		.0003
                	.doScrollLock:
011528 40 10 12 01 		lb		r1,KeyState2
01152C 8E 10 80 00 		eor		r1,r1,#64
011530 60 10 12 01 		sb		r1,KeyState2
011534 39 01 00 00 		bsr		KeybdSetLEDStatus
011538 BA C8 FF FF 		bra		.0003
                	
                	KeybdSetLEDStatus:
01153C E7 EF 01 00 	    push    lr
011540 67 E1 01 00 		push	r2
011544 E7 E1 01 00 	    push    r3
011548 60 00 16 01 		sb		r0,KeybdLEDs
01154C 40 10 12 01 		lb		r1,KeyState2
011550 8C 20 20 00 		and		r2,r1,#16
011554 3D 01 06 00 		beq		r2,.0002
011558 0A 30 04 00 		ldi		r3,#2
01155C 60 30 16 01 		sb		r3,KeybdLEDs
                	.0002:
011560 8C 20 40 00 		and		r2,r1,#32
011564 3D 01 08 00 		beq		r2,.0003
011568 40 30 16 01 		lb		r3,KeybdLEDs
01156C 8D 31 08 00 		or		r3,r3,#4
011570 60 30 16 01 		sb		r3,KeybdLEDs
                	.0003:
011574 8C 20 80 00 		and		r2,r1,#64
011578 3D 01 08 00 		beq		r2,.0004
01157C 40 30 16 01 		lb		r3,KeybdLEDs
011580 8D 31 02 00 		or		r3,r3,#1
011584 60 30 16 01 		sb		r3,KeybdLEDs
                	.0004:
011588 0A 10 DA 01 		ldi		r1,#$ED
01158C B9 06 00 00 		bsr		KeybdSendByte
011590 39 B0 FF FF 		bsr		KeybdWaitTx
011594 B9 A7 FF FF 		bsr		KeybdRecvByte
011598 BD 40 0C 00 		bmi		r1,.0001
01159C 86 20 F4 01 		cmp		r2,r1,#$FA
0115A0 40 10 16 01 		lb		r1,KeybdLEDs
0115A4 B9 03 00 00 		bsr		KeybdSendByte
0115A8 39 AD FF FF 		bsr		KeybdWaitTx
0115AC B9 A4 FF FF 		bsr		KeybdRecvByte
                	.0001:
0115B0 57 3F 10 00 		pop		r3
0115B4 57 2F 10 00 	    pop     r2
0115B8 57 FF 11 00 	    pop     lr
0115BC 37 FF 01 00 		rtl

                	KeybdSendByte:
0115C0 7C DC FF 00 		sb		r1,KEYBD
0115C4 60 10 00 00 
0115C8 37 FF 01 00 		rtl
	
                	Wait10ms:
0115CC E7 E1 01 00 		push	r3
0115D0 67 E2 01 00 	    push    r4
0115D4 02 30 08 3E 		mfspr	r3,tick					; get orginal count
                	.0001:
0115D8 02 40 08 3E 		mfspr	r4,tick
0115DC 02 42 06 0A 		sub		r4,r4,r3
0115E0 3D 42 08 00 		blt  	r4,.0002				; shouldn't be -ve unless counter overflowed
0115E4 FC 03 00 00 		cmpu	r4,r4,#250000			; about 10ms at 25 MHz
0115E8 16 42 20 A1 
0115EC 3D 42 F6 FF 		blt		r4,.0001
                	.0002:
0115F0 57 4F 10 00 		pop		r4
0115F4 57 3F 10 00 	    pop     r3
0115F8 37 FF 01 00 		rtl

                		;--------------------------------------------------------------------------
                		; PS2 scan codes to ascii conversion tables.
                		;--------------------------------------------------------------------------
                		;
0115FC 00 00 00 00 		align	1
                	
                	unshiftedScanCodes:
011600 2E A9 2E A5 		.byte	$2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
011604 A3 A1 A2 AC 
011608 2E AA A8 A6 		.byte	$2e,$aa,$a8,$a6,$a4,$09,$60,$2e
01160C A4 09 60 2E 
011610 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$71,$31,$2e
011614 2E 71 31 2E 
011618 2E 2E 7A 73 		.byte	$2e,$2e,$7a,$73,$61,$77,$32,$2e
01161C 61 77 32 2E 
011620 2E 63 78 64 		.byte	$2e,$63,$78,$64,$65,$34,$33,$2e
011624 65 34 33 2E 
011628 2E 20 76 66 		.byte	$2e,$20,$76,$66,$74,$72,$35,$2e
01162C 74 72 35 2E 
011630 2E 6E 62 68 		.byte	$2e,$6e,$62,$68,$67,$79,$36,$2e
011634 67 79 36 2E 
011638 2E 2E 6D 6A 		.byte	$2e,$2e,$6d,$6a,$75,$37,$38,$2e
01163C 75 37 38 2E 
011640 2E 2C 6B 69 		.byte	$2e,$2c,$6b,$69,$6f,$30,$39,$2e
011644 6F 30 39 2E 
011648 2E 2E 2F 6C 		.byte	$2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
01164C 3B 70 2D 2E 
011650 2E 2E 27 2E 		.byte	$2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
011654 5B 3D 2E 2E 
011658 AD 2E 0D 5D 		.byte	$ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
01165C 2E 5C 2E 2E 
011660 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
011664 2E 2E 08 2E 
011668 2E 95 2E 93 		.byte	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
01166C 94 2E 2E 2E 
011670 98 7F 92 2E 		.byte	$98,$7f,$92,$2e,$91,$90,$1b,$af
011674 91 90 1B AF 
011678 AB 2E 97 2E 		.byte	$ab,$2e,$97,$2e,$2e,$96,$ae,$2e
01167C 2E 96 AE 2E 
                	
011680 2E 2E 2E A7 		.byte	$2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
011684 2E 2E 2E 2E 
011688 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01168C 2E 2E 2E 2E 
011690 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
011694 2E 2E 2E 2E 
011698 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01169C 2E 2E 2E 2E 
0116A0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0116A4 2E 2E 2E 2E 
0116A8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0116AC 2E 2E 2E 2E 
0116B0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0116B4 2E 2E 2E 2E 
0116B8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0116BC 2E 2E 2E 2E 
0116C0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0116C4 2E 2E 2E 2E 
0116C8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0116CC 2E 2E 2E 2E 
0116D0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0116D4 2E 2E 2E 2E 
0116D8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0116DC 2E 2E 2E 2E 
0116E0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0116E4 2E 2E 2E 2E 
0116E8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0116EC 2E 2E 2E 2E 
0116F0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0116F4 2E 2E 2E 2E 
0116F8 2E 2E FA 2E 		.byte	$2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
0116FC 2E 2E 2E 2E 
                	
                	shiftedScanCodes:
011700 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
011704 2E 2E 2E 2E 
011708 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
01170C 2E 09 7E 2E 
011710 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$51,$21,$2e
011714 2E 51 21 2E 
011718 2E 2E 5A 53 		.byte	$2e,$2e,$5a,$53,$41,$57,$40,$2e
01171C 41 57 40 2E 
011720 2E 43 58 44 		.byte	$2e,$43,$58,$44,$45,$24,$23,$2e
011724 45 24 23 2E 
011728 2E 20 56 46 		.byte	$2e,$20,$56,$46,$54,$52,$25,$2e
01172C 54 52 25 2E 
011730 2E 4E 42 48 		.byte	$2e,$4e,$42,$48,$47,$59,$5e,$2e
011734 47 59 5E 2E 
011738 2E 2E 4D 4A 		.byte	$2e,$2e,$4d,$4a,$55,$26,$2a,$2e
01173C 55 26 2A 2E 
011740 2E 3C 4B 49 		.byte	$2e,$3c,$4b,$49,$4f,$29,$28,$2e
011744 4F 29 28 2E 
011748 2E 3E 3F 4C 		.byte	$2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
01174C 3A 50 5F 2E 
011750 2E 2E 22 2E 		.byte	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
011754 7B 2B 2E 2E 
011758 2E 2E 0D 7D 		.byte	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
01175C 2E 7C 2E 2E 
011760 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
011764 2E 2E 08 2E 
011768 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01176C 2E 2E 2E 2E 
011770 2E 7F 2E 2E 		.byte	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
011774 2E 2E 1B 2E 
011778 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01177C 2E 2E 2E 2E 
                	
011780 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
011784 2E 2E 2E 2E 
011788 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01178C 2E 2E 2E 2E 
011790 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
011794 2E 2E 2E 2E 
011798 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01179C 2E 2E 2E 2E 
0117A0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0117A4 2E 2E 2E 2E 
0117A8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0117AC 2E 2E 2E 2E 
0117B0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0117B4 2E 2E 2E 2E 
0117B8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0117BC 2E 2E 2E 2E 
0117C0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0117C4 2E 2E 2E 2E 
0117C8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0117CC 2E 2E 2E 2E 
0117D0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0117D4 2E 2E 2E 2E 
0117D8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0117DC 2E 2E 2E 2E 
0117E0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0117E4 2E 2E 2E 2E 
0117E8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0117EC 2E 2E 2E 2E 
0117F0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0117F4 2E 2E 2E 2E 
0117F8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0117FC 2E 2E 2E 2E 
                	
                	; control
                	keybdControlCodes:
011800 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
011804 2E 2E 2E 2E 
011808 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
01180C 2E 09 7E 2E 
011810 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$11,$21,$2e
011814 2E 11 21 2E 
011818 2E 2E 1A 13 		.byte	$2e,$2e,$1a,$13,$01,$17,$40,$2e
01181C 01 17 40 2E 
011820 2E 03 18 04 		.byte	$2e,$03,$18,$04,$05,$24,$23,$2e
011824 05 24 23 2E 
011828 2E 20 16 06 		.byte	$2e,$20,$16,$06,$14,$12,$25,$2e
01182C 14 12 25 2E 
011830 2E 0E 02 08 		.byte	$2e,$0e,$02,$08,$07,$19,$5e,$2e
011834 07 19 5E 2E 
011838 2E 2E 0D 0A 		.byte	$2e,$2e,$0d,$0a,$15,$26,$2a,$2e
01183C 15 26 2A 2E 
011840 2E 3C 0B 09 		.byte	$2e,$3c,$0b,$09,$0f,$29,$28,$2e
011844 0F 29 28 2E 
011848 2E 3E 3F 0C 		.byte	$2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
01184C 3A 10 5F 2E 
011850 2E 2E 22 2E 		.byte	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
011854 7B 2B 2E 2E 
011858 2E 2E 0D 7D 		.byte	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
01185C 2E 7C 2E 2E 
011860 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
011864 2E 2E 08 2E 
011868 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01186C 2E 2E 2E 2E 
011870 2E 7F 2E 2E 		.byte	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
011874 2E 2E 1B 2E 
011878 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01187C 2E 2E 2E 2E 
                	
                	keybdExtendedCodes:
011880 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
011884 A3 A1 A2 2E 
011888 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01188C 2E 2E 2E 2E 
011890 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
011894 2E 2E 2E 2E 
011898 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01189C 2E 2E 2E 2E 
0118A0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0118A4 2E 2E 2E 2E 
0118A8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0118AC 2E 2E 2E 2E 
0118B0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0118B4 2E 2E 2E 2E 
0118B8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0118BC 2E 2E 2E 2E 
0118C0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0118C4 2E 2E 2E 2E 
0118C8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0118CC 2E 2E 2E 2E 
0118D0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0118D4 2E 2E 2E 2E 
0118D8 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0118DC 2E 2E 2E 2E 
0118E0 2E 2E 2E 2E 		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
0118E4 2E 2E 2E 2E 
0118E8 2E 95 2E 93 		.byte	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
0118EC 94 2E 2E 2E 
0118F0 98 99 92 2E 		.byte	$98,$99,$92,$2e,$91,$90,$2e,$2e
0118F4 91 90 2E 2E 
0118F8 2E 2E 97 2E 		.byte	$2e,$2e,$97,$2e,$2e,$96,$2e,$2e
0118FC 2E 96 2E 2E 
                	
                	
                	; ============================================================================
                	; I2C interface to RTCC
                	; ============================================================================
                	
                	I2C_INIT:
011900 E7 E0 01 00 	    push    r1
011904 67 E1 01 00 	    push    r2
011908 7C DC FF 00 		ldi		r2,#I2C_MASTER
01190C 0A 20 00 1C 
011910 60 01 04 00 		sb		r0,I2C_CONTROL[r2]		; disable the contoller
011914 60 01 02 00 		sb		r0,I2C_PRESCALE_HI[r2]	; set clock divisor for 100kHz
011918 0A 10 C6 00 		ldi		r1,#99					; 24=400kHz, 99=100KHz
01191C 60 11 00 00 		sb		r1,I2C_PRESCALE_LO[r2]
011920 0A 10 00 01 		ldi		r1,#$80					; controller enable bit
011924 60 11 04 00 		sb		r1,I2C_CONTROL[r2]
011928 57 2F 10 00 		pop		r2
01192C 57 1F 10 00 	    pop     r1
011930 37 FF 01 00 		rtl

                	;------------------------------------------------------------------------------
                	; I2C Read
                	;
                	; Parameters:
                	; 	r1 = device ($6F for RTCC)
                	; 	r2 = register to read
                	; Returns
                	; 	r1 = register value $00 to $FF if successful, else r1 = -1 on error
                	;------------------------------------------------------------------------------
                	;
                	I2C_READ:
011934 E7 EF 01 00 	    push    lr
011938 67 E1 01 00 		push	r2
01193C E7 E1 01 00 	    push    r3
011940 67 E2 01 00 	    push    r4
011944 82 10 02 70 		asl		r1,r1,#1				; clear rw bit for write
                	;	or		r1,r1,#1				; set rw bit for a read
011948 82 40 00 1A 		mov		r4,r1					; save device address in r4
01194C 02 31 00 1A 		mov		r3,r2
                		; transmit device #
011950 7C DC FF 00 		ldi		r2,#I2C_MASTER
011954 0A 20 00 1C 
011958 60 11 06 00 		sb		r1,I2C_TX[r2]
01195C 0A 10 20 01 		ldi		r1,#$90					; STA($80) and WR($10) bits set
011960 60 11 08 00 		sb		r1,I2C_CMD[r2]
011964 B9 1F 00 00 		bsr		I2C_WAIT_TC				; wait for transmit to complete
                		; transmit register #
011968 40 11 08 00 		lb		r1,I2C_STAT[r2]
01196C 8C 10 00 01 		and		r1,r1,#$80				; test RxACK bit
011970 BD 10 30 00 		bne	    r1,I2C_ERR
011974 60 31 06 00 		sb		r3,I2C_TX[r2]			; select register r3
011978 0A 10 20 00 		ldi		r1,#$10					; set WR bit
01197C 60 11 08 00 		sb		r1,I2C_CMD[r2]
011980 39 1C 00 00 		bsr		I2C_WAIT_TC
                	
                		; transmit device #
011984 40 11 08 00 		lb		r1,I2C_STAT[r2]
011988 8C 10 00 01 		and		r1,r1,#$80				; test RxACK bit
01198C BD 10 22 00 		bne	    r1,I2C_ERR
011990 0D 42 02 00 		or		r4,r4,#1				; set read flag
011994 60 41 06 00 		sb		r4,I2C_TX[r2]
011998 0A 10 20 01 		ldi		r1,#$90					; STA($80) and WR($10) bits set
01199C 60 11 08 00 		sb		r1,I2C_CMD[r2]
0119A0 39 18 00 00 		bsr		I2C_WAIT_TC				; wait for transmit to complete
                	
                		; receive data byte
0119A4 40 11 08 00 		lb		r1,I2C_STAT[r2]
0119A8 8C 10 00 01 		and		r1,r1,#$80				; test RxACK bit
0119AC BD 10 12 00 		bne	    r1,I2C_ERR
0119B0 0A 10 D0 00 		ldi		r1,#$68					; STO($40), RD($20), and NACK($08)
0119B4 60 11 08 00 		sb		r1,I2C_CMD[r2]
0119B8 39 15 00 00 		bsr		I2C_WAIT_TC
0119BC 41 11 06 00 		lbu		r1,I2C_RX[r2]			; $00 to $FF = byte read, -1=err
0119C0 57 4F 10 00 		pop		r4
0119C4 57 3F 10 00 	    pop     r3
0119C8 57 2F 10 00 	    pop     r2
0119CC 3B FF 11 00 		rts

                	I2C_ERR:
0119D0 0A 10 FE FF 		ldi		r1,#-1
0119D4 82 02 00 3C 		mtspr	cr0,r5					; restore TMR
0119D8 57 4F 10 00 		pop		r4/r3/r2/r5
0119DC 3B FF 11 00 		rts

                	;------------------------------------------------------------------------------
                	; I2C Write
                	;
                	; Parameters:
                	; 	r1 = device ($6F)
                	; 	r2 = register to write
                	; 	r3 = value for register
                	; Returns
                	; 	r1 = 0 if successful, else r1 = -1 on error
                	;------------------------------------------------------------------------------
                	;
                	I2C_WRITE:
0119E0 E7 EF 01 00 		push	lr
0119E4 67 E1 01 00 	    push    r2
0119E8 E7 E1 01 00 	    push    r3
0119EC 67 E2 01 00 	    push    r4
0119F0 82 10 02 70 		asl		r1,r1,#1				; clear rw bit for write
0119F4 82 41 00 1A 		mov		r4,r3					; save value r4
0119F8 02 31 00 1A 		mov		r3,r2
                		; transmit device #
0119FC 7C DC FF 00 		ldi		r2,#I2C_MASTER			; r2 = I/O base address of controller
011A00 0A 20 00 1C 
011A04 60 11 06 00 		sb		r1,I2C_TX[r2]
011A08 0A 10 20 01 		ldi		r1,#$90					; STA($80) and WR($10) bits set
011A0C 60 11 08 00 		sb		r1,I2C_CMD[r2]
011A10 39 0A 00 00 		bsr		I2C_WAIT_TC				; wait for transmit to complete
                		; transmit register #
011A14 40 11 08 00 		lb		r1,I2C_STAT[r2]
011A18 8C 10 00 01 		and		r1,r1,#$80				; test RxACK bit
011A1C BD 10 DA FF 		bne  	r1,I2C_ERR
011A20 60 31 06 00 		sb		r3,I2C_TX[r2]			; select register r3
011A24 0A 10 20 00 		ldi		r1,#$10					; set WR bit
011A28 60 11 08 00 		sb		r1,I2C_CMD[r2]
011A2C B9 06 00 00 		bsr		I2C_WAIT_TC
                		; transmit value
011A30 40 11 08 00 		lb		r1,I2C_STAT[r2]
011A34 8C 10 00 01 		and		r1,r1,#$80				; test RxACK bit
011A38 BD 10 CC FF 		bne  	r1,I2C_ERR
011A3C 60 41 06 00 		sb		r4,I2C_TX[r2]			; select value in r4
011A40 0A 10 A0 00 		ldi		r1,#$50					; set STO, WR bit
011A44 60 11 08 00 		sb		r1,I2C_CMD[r2]
011A48 39 03 00 00 		bsr		I2C_WAIT_TC
011A4C 0A 10 00 00 		ldi		r1,#0					; everything okay
011A50 57 4F 10 00 		pop		r4
011A54 57 3F 10 00 	    pop     r3
011A58 57 2F 10 00 	    pop     r2
011A5C 3B FF 11 00 		rts

                	; Wait for I2C controller transmit complete
                	
                	I2C_WAIT_TC:
                	.0001:
011A60 40 11 08 00 		lb		r1,I2C_STAT[r2]
011A64 8C 10 04 00 		and		r1,r1,#2
011A68 BD 10 FC FF 		bne 	r1,.0001
011A6C 37 FF 01 00 		rtl

                	; Read the entire contents of the RTCC including 64 SRAM bytes
                	
                	RTCCReadbuf:
011A70 E7 EF 01 00 	    push    lr
011A74 B9 D1 FF FF 		bsr		I2C_INIT
011A78 0A 20 00 00 		ldi		r2,#$00
                	.0001:
011A7C 0A 10 DE 00 		ldi		r1,#$6F
011A80 B9 D6 FF FF 		bsr		I2C_READ
011A84 60 11 40 01 		sb		r1,RTCC_BUF[r2]
011A88 04 21 02 00 		add		r2,r2,#1
011A8C 16 11 C0 00 		cmpu	r1,r2,#$60
011A90 BD 40 F6 FF 		blt		r1,.0001
011A94 3B FF 11 00 		rts

                	; Write the entire contents of the RTCC including 64 SRAM bytes
                	
                	RTCCWritebuf:
011A98 E7 EF 01 00 	    push    lr
011A9C B9 CC FF FF 		bsr		I2C_INIT
011AA0 0A 20 00 00 		ldi		r2,#$00
                	.0001:
011AA4 0A 10 DE 00 		ldi		r1,#$6F
011AA8 41 31 40 01 		lbu		r3,RTCC_BUF[r2]
011AAC B9 E6 FF FF 		bsr		I2C_WRITE
011AB0 04 21 02 00 		add		r2,r2,#1
011AB4 16 11 C0 00 		cmpu	r1,r2,#$60
011AB8 BD 40 F6 FF 		blt		r1,.0001
011ABC 3B FF 11 00 		rts

                	RTCCOscOn:
011AC0 E7 EF 01 00 	    push    lr
011AC4 B9 C7 FF FF 		bsr		I2C_INIT
011AC8 0A 10 DE 00 		ldi		r1,#$6F
011ACC 0A 20 00 00 		ldi		r2,#$00			; register zero
011AD0 B9 CC FF FF 		bsr		I2C_READ		; read register zero
011AD4 8D 30 00 01 		or		r3,r1,#$80		; set start osc bit
011AD8 0A 10 DE 00 		ldi		r1,#$6F
011ADC B9 E0 FF FF 		bsr		I2C_WRITE
011AE0 3B FF 11 00 		rts

                	; ============================================================================
                	; SD/MMC Card interface
                	; ============================================================================
                	SD_INIT:
011AE4 E7 EF 01 00 	    push    lr
011AE8 7C DC FF 00 		ldi		r3,#SD_MASTER
011AEC 0A 30 00 16 
011AF0 7C 00 00 00 		ldi		r2,#25000
011AF4 0A 20 50 C3 
011AF8 E1 21 58 00 		sc		r2,0x2c[r3]		; timeout register
                		; Software reset should be held active for several cycles to allow
                		; reset to be detected on the sd_clk domain.
011AFC 0A 20 02 00 		ldi		r2,#1
011B00 E0 21 50 00 		sb		r2,0x28[r3]		; software reset reg
011B04 0A 20 04 00 		ldi		r2,#2
011B08 E0 21 98 00 		sb		r2,0x4c[r3]		; prog /6 for clock divider
011B0C 0A 10 C8 00 		ldi		r1,#100			; software reset delay
011B10 39 47 00 00 		bsr     MicroDelay
011B14 E0 01 50 00 		sb		r0,0x28[r3]		; clear software reset
011B18 E1 01 08 00 		sc		r0,0x04[r3]		; command 0
011B1C E2 01 00 00 		sh		r0,0x00[r3]		; arg 0
011B20 39 28 00 00 		bsr		SD_WAIT_RESP
011B24 C4 11 18 00 		lh		r1,0x0C[r3]		; read response register
011B28 39 6D FD FF 		bsr		DisplayHalf
011B2C 3B FF 11 00 		rts

                	SD_CMD8:
011B30 E7 EF 01 00 	    push    lr
011B34 7C DC FF 00 		ldi		r3,#SD_MASTER
011B38 0A 30 00 16 
011B3C 0A 20 34 10 		ldi		r2,#$81A
011B40 E1 21 08 00 		sc		r2,0x04[r3]		; set command register
011B44 0A 20 54 03 		ldi		r2,#$1AA
011B48 E2 21 00 00 		sh		r2,0x00[r3]		; set command argument x1AA
011B4C B9 22 00 00 		bsr		SD_WAIT_RESP
011B50 7C 00 00 00 		sb		r1,SD_2_0
011B54 7C 00 00 00 
011B58 60 10 AE 03 
011B5C C4 11 18 00 		lh		r1,0x0C[r3]		; read response register
011B60 39 66 FD FF 		bsr		DisplayHalf
                		; send command zero
011B64 E1 01 08 00 		sc		r0,0x04[r3]
011B68 E2 01 00 00 		sh		r0,0x00[r3]
011B6C B9 1E 00 00 		bsr		SD_WAIT_RESP
011B70 7C 00 00 00 		lbu		r1,SD_2_0
011B74 7C 00 00 00 
011B78 41 10 AE 03 
011B7C BD 00 12 00 		beq		r1,.0001
011B80 0A 10 64 00 		ldi		r1,#'2'
011B84 B9 47 FE FF 		bsr		OutChar
011B88 0A 10 5C 00 		ldi		r1,#'.'
011B8C B9 46 FE FF 		bsr		OutChar
011B90 0A 10 60 00 		ldi		r1,#'0'
011B94 B9 45 FE FF 		bsr		OutChar
011B98 39 74 FD FF 		bsr		CRLF
011B9C 3B FF 11 00 		rts
.0001:
011BA0 E1 01 08 00 		sc		r0,0x04[r3]		; send CMD0
011BA4 E2 01 00 00 		sh		r0,0x00[r3]
                	.0002:
011BA8 C3 11 10 00 		lcu		r1,0x08[r3]
011BAC 8C 10 02 00 		and		r1,r1,#1
011BB0 BD 10 FC FF 		bne  	r1,.0002
011BB4 02 40 00 1A 		mov		r4,r0			; ret_reg = r4 = 0
                	.0004:
011BB8 02 52 00 1A 		mov		r5,r4
011BBC 7C 00 80 00 		and		r4,r4,#$80000000
011BC0 0C 42 00 00 
011BC4 3D 12 20 00 		bne  	r4,.0003
011BC8 0A 10 04 6E 		ldi		r1,#$3702		; CMD55|RSP48
011BCC E1 11 08 00 		sc		r1,0x04[r3]
011BD0 E2 01 00 00 		sh		r0,0x00[r3]
011BD4 B9 11 00 00 		bsr		SD_WAIT_RESP
011BD8 BD 10 38 00 		bne  	r1,.respOk
011BDC 0A 10 04 52 		ldi		r1,#$2902		; ACMD41|RSP48
011BE0 E1 11 08 00 		sc		r1,0x04[r3]
011BE4 E2 01 00 00 		sh		r0,0x00[r3]
011BE8 39 0F 00 00 		bsr		SD_WAIT_RESP
011BEC BD 10 2E 00 		bne  	r1,.respOk
011BF0 C4 41 18 00 		lh		r4,0x0c[r3]		; ret_reg = RESP1
011BF4 02 12 00 1A 		mov		r1,r4
011BF8 39 53 FD FF 		bsr		DisplayHalf
011BFC B9 67 FD FF 		bsr		CRLF
011C00 3A F7 FF FF 		bra		.0004
                	.0003:
011C04 FC FF 00 00 		and		r1,r5,#$FFFFFF	; voltage mask
011C08 8C 12 FE FF 
011C0C B9 50 FD FF 		bsr		DisplayHalf
011C10 39 65 FD FF 		bsr		CRLF
                		; GetCID
011C14 0A 10 02 04 		ldi		r1,#$201		; CMD2 + RSP146
011C18 E1 11 08 00 		sc		r1,0x04[r3]
011C1C E2 01 00 00 		sh		r0,0x00[r3]
011C20 39 08 00 00 		bsr		SD_WAIT_RESP
                		; GetRCA
011C24 0A 10 34 06 		ldi		r1,#$31A		; CMD3 + CICE + CRCE + RSP48
011C28 E1 11 08 00 		sc		r1,0x04[r3]
011C2C E2 01 00 00 		sh		r0,0x00[r3]
011C30 39 06 00 00 		bsr		SD_WAIT_RESP
011C34 C4 41 18 00 		lh		r4,0x0c[r3]			; r4 = RESP1
011C38 7C FF FF 00 		and		r1,r4,#$FFFF0000	; r4 & RCA_MASK
011C3C 0C 12 00 00 
011C40 39 4A FD FF 		bsr		DisplayHalf
011C44 B9 5E FD FF 		bsr		CRLF
                	.respOk:
011C48 0A 10 9E 00 		ldi		r1,#'O'
011C4C B9 2E FE FF 		bsr		OutChar
011C50 0A 10 D6 00 		ldi		r1,#'k'
011C54 B9 2D FE FF 		bsr		OutChar
011C58 39 5C FD FF 		bsr		CRLF
011C5C 3B FF 11 00 		rts

                	SD_WAIT_RESP:
011C60 E7 EF 01 00 	    push    lr
011C64 67 E1 01 00 		push	r2
011C68 E7 E1 01 00 	    push    r3
011C6C 7C DC FF 00 		ldi		r2,#SD_MASTER
011C70 0A 20 00 16 
                	.0001:
011C74 42 31 68 00 		lc		r3,0x34[r2]		; read error interrupt status reg
011C78 42 11 60 00 		lc		r1,0x30[r2]		; read normal interrupt status reg
011C7C 8C 31 02 00 		and		r3,r3,#1		; get command timeout indicator
011C80 BD 11 10 00 		bne  	r3,.0002
011C84 8C 10 02 00 		and		r1,r1,#1		; wait for command complete bit to set
011C88 BD 00 F6 FF 		beq		r1,.0001
011C8C 0A 10 02 00 		ldi		r1,#1
011C90 57 3F 10 00 		pop		r3
011C94 57 2F 10 00 	    pop     r2
011C98 57 FF 11 00 	    pop     lr
011C9C 37 FF 01 00 		rtl
.0002:
011CA0 0A 10 A8 00 		ldi		r1,#'T'
011CA4 B9 23 FE FF 		bsr		OutChar
011CA8 0A 10 9E 00 		ldi		r1,#'O'
011CAC B9 22 FE FF 		bsr		OutChar
011CB0 39 51 FD FF 		bsr		CRLF
011CB4 0A 10 00 00 		ldi		r1,#0
011CB8 57 3F 10 00 		pop		r3
011CBC 57 2F 10 00 	    pop     r2
011CC0 57 FF 11 00 	    pop     lr
011CC4 37 FF 01 00 		rtl

                	; ============================================================================
                	; ============================================================================
                	
011CC8 7C 01 00 00 	    ldi     r1,#brkpt1           ; set breakpoint address
011CCC 0A 10 18 3A 
011CD0 82 00 64 3C 	    mtspr   dbad0,r1
011CD4 0A 10 00 00 	    ldi     r1,#$0000000000000000   ; enable instruction breakpoint, turn on single step mode
011CD8 82 00 6C 3C 	    mtspr   dbctrl,r1
011CDC 02 00 54 3C 	    mtspr   lotgrp,r0            ; operating system is group #0
011CE0 B9 04 00 00 	    bsr     SetupMemtags
011CE4 0A 10 C8 00 	    ldi     r1,#100
011CE8 39 0C 00 00 	    bsr     MicroDelay
011CEC 3F 00 00 00 	    nop
011CF0 3F 00 00 00 	    nop
                	hangprg:
011CF4 3F 00 00 00 	    nop
011CF8 3F 00 00 00 	    nop
011CFC 3F 00 00 00 	    nop
011D00 BA FE FF FF 	    bra     hangprg
                	
                	SetupMemtags:
011D04 02 00 50 3C 	    mtspr   ea,r0                ; select tag for first 64kB
011D08 0A 10 0C 00 	    ldi     r1,#$0006            ; system only: readable, writeable, not executable
                	brkpt1:
011D0C 82 00 52 3C 	    mtspr   tag,r1
011D10 7C 01 00 00 	    ldi     r1,#$10000           ; select tag for second 64kB
011D14 0A 10 00 00 
011D18 82 00 50 3C 	    mtspr   ea,r1
011D1C 0A 20 0A 00 	    ldi     r2,#$0005            ; system only: readable, executable, not writeable
011D20 02 01 52 3C 	    mtspr   tag,r2
011D24 0A 30 24 00 	    ldi     r3,#20-2             ; number of tags to setup
                	.0001:
011D28 7C 01 00 00 	    addui   r1,r1,#$10000
011D2C 94 10 00 00 
011D30 82 00 50 3C 	    mtspr   ea,r1
011D34 0A 20 0C 00 	    ldi     r2,#$0006            ; set them up as data
011D38 02 01 52 3C 	    mtspr   tag,r2
011D3C 95 31 02 00 	    subui   r3,r3,#1
011D40 BD 11 F4 FF 	    bne     r3,.0001
011D44 37 FF 01 00 	    rtl

                	;------------------------------------------------------------------------------
                	; MicroDelay
                	;     Delay for a short time for at least the specified number of clock cycles
                	;
                	; Parameters:
                	;     r1 = required delay in clock ticks
                	;------------------------------------------------------------------------------
                	;
                	MicroDelay:
011D48 67 E1 01 00 	    push    r2
011D4C E7 E1 01 00 	    push    r3
011D50 02 30 08 3E 	    mfspr   r3,tick             ; get starting tick
                	.0001:
011D54 02 20 08 3E 	    mfspr   r2,tick
011D58 02 21 06 2A 	    subu    r2,r2,r3
011D5C 02 21 02 0C 	    cmp     r2,r2,r1
011D60 3D 41 FA FF 	    blt     r2,.0001
011D64 57 3F 10 00 	    pop     r3
011D68 57 2F 10 00 	    pop     r2
011D6C 37 FF 01 00 	    rtl
;
011D70 3F 00 00 00 	    nop
011D74 3F 00 00 00 	    nop
                	
                	;------------------------------------------------------------------------------
                	; Execution fault. Occurs when an attempt is made to execute code from a
                	; page marked as non-executable.
                	;------------------------------------------------------------------------------
                	
                	exf_rout:
011D78 0A 10 76 01 		ldi		r1,#$bb
011D7C 7C DC FF 00 		sc		r1,LEDS
011D80 61 10 00 0C 
011D84 7C 01 00 00 		ldi		r1,#msgexf
011D88 0A 10 D0 3B 
011D8C 39 34 FD FF 		bsr		DisplayStringCRLF
                	.0001:
011D90 3A 00 00 00 		bra .0001
                	
                	;------------------------------------------------------------------------------
                	; Data read fault. Occurs when an attempt is made to read from a page marked
                	; as non-readble.
                	;------------------------------------------------------------------------------
                	
                	drf_rout:
011D94 0A 10 76 01 		ldi		r1,#$bb
011D98 7C DC FF 00 		sc		r1,LEDS
011D9C 61 10 00 0C 
011DA0 7C 01 00 00 		ldi		r1,#msgdrf
011DA4 0A 10 DA 3B 
011DA8 B9 30 FD FF 		bsr		DisplayStringCRLF
                	.0001:
011DAC 3A 00 00 00 		bra .0001
                	
                	;------------------------------------------------------------------------------
                	; Data write fault. Occurs when an attempt is made to write to a page marked
                	; as non-writeable.
                	;------------------------------------------------------------------------------
                	
                	dwf_rout:
011DB0 0A 10 76 01 		ldi		r1,#$bb
011DB4 7C DC FF 00 		sc		r1,LEDS
011DB8 61 10 00 0C 
011DBC 7C 01 00 00 		ldi		r1,#msgdwf
011DC0 0A 10 E4 3B 
011DC4 39 2D FD FF 		bsr		DisplayStringCRLF
                	.0001:
011DC8 3A 00 00 00 		bra .0001
                	
                	;------------------------------------------------------------------------------
                	; Privilege violation fault. Occurs when the current privilege level isn't
                	; sufficient to allow access.
                	;------------------------------------------------------------------------------
                	
                	priv_rout:
011DCC 0A 10 78 01 		ldi		r1,#$bc
011DD0 7C DC FF 00 		sc		r1,LEDS
011DD4 61 10 00 0C 
011DD8 7C 01 00 00 		ldi		r1,#msgPriv
011DDC 0A 10 EE 3B 
011DE0 B9 29 FD FF 		bsr		DisplayStringCRLF
                	.0001:
011DE4 3A 00 00 00 		bra .0001
                	
                	;------------------------------------------------------------------------------
                	; Message strings for the faults.
                	;------------------------------------------------------------------------------
                	
                	msgexf:
011DE8 65 78 66 20 		db	"exf ",0
011DEC 00          
                	msgdrf:
011DED 64 72 66 20 		db	"drf ",0
011DF1 00          
                	msgdwf:
011DF2 64 77 66 20 		db	"dwf ",0
011DF6 00          
                	msgPriv:
011DF7 70 72 69 76 		db	"priv fault",0
011DFB 20 66 61 75 
011DFF 6C 74 00    
                	msgUninit:
011E02 75 6E 69 6E 		db	"uninit int.",0
011E06 69 74 20 69 
011E0A 6E 74 2E 00 
                	
                	;------------------------------------------------------------------------------
                	; Bus error routine.
                	;------------------------------------------------------------------------------
                	
                	berr_rout:
011E0E 00 00 0A 10 		ldi		r1,#$AA
011E12 54 01       
011E14 7C DC FF 00 		sc		r1,LEDS
011E18 61 10 00 0C 
                	;	mfspr	r1,bear
                	;	bsr		DisplayWord
                	.be1:
011E1C 3A 00 00 00 		bra .be1
                	
                	
                	
                	
                	SSM_ISR:
011E20 02 E0 3B 6E 	    rtd
                	
                	IBPT_ISR:
011E24 02 E0 3B 6E 	    rtd
                	.0001:
011E28 3A 00 00 00 	    bra     .0001
                	
                		code
011E2C 00 00 00 00 		align	1
                	
                	get_datetime:
011E30 15 EF 21 00 		      	subui	sp,sp,#16
011E34 E7 ED 01 00 		      	push 	bp
011E38 02 BF 01 1A 		      	mov  	bp,sp
011E3C 15 EF 11 00 		      	subui	sp,sp,#8
011E40 E7 E5 01 00 		      	push 	r11
011E44 67 E6 01 00 		      	push 	r12
011E48 E7 E6 01 00 		      	push 	r13
011E4C 67 E7 01 00 		      	push 	r14
011E50 E7 E7 01 00 		      	push 	r15
011E54 67 E8 01 00 		      	push 	r16
011E58 E7 E8 01 00 		      	push 	r17
011E5C 0A B0 40 01 		      	ldi  	r11,#RTCC_BUF
011E60 C6 CD A0 00 		      	lw   	r12,80[bp]
011E64 C6 DD 90 00 		      	lw   	r13,72[bp]
011E68 C6 ED 80 00 		      	lw   	r14,64[bp]
011E6C C6 FD 70 00 		      	lw   	r15,56[bp]
011E70 C6 0D 61 00 		      	lw   	r16,48[bp]
011E74 C6 1D 51 00 		      	lw   	r17,40[bp]
011E78 BD 08 20 00 		      	beq  	r17,set_time_serial_2
011E7C C1 35 0C 00 		      	lbu  	r3,6[r11]
011E80 82 31 00 20 		      	sxb  	r3,r3
011E84 E3 3D F0 FF 		      	sw   	r3,-8[bp]
011E88 0A 30 A0 0F 		      	ldi  	r3,#2000
011E8C C6 4D F0 FF 		      	lw   	r4,-8[bp]
011E90 0C 42 1E 00 		      	and  	r4,r4,#15
011E94 C6 5D F0 FF 		      	lw   	r5,-8[bp]
011E98 8C 52 E0 01 		      	and  	r5,r5,#240
011E9C 82 52 08 78 		      	asri 	r5,r5,#4
011EA0 87 52 14 00 		      	mul  	r5,r5,#10
011EA4 02 42 0A 28 		      	addu 	r4,r4,r5
011EA8 82 31 08 28 		      	addu 	r3,r3,r4
011EAC E3 3D F0 FF 		      	sw   	r3,-8[bp]
011EB0 C6 3D F0 FF 		      	lw   	r3,-8[bp]
011EB4 E3 38 00 00 		      	sw   	r3,[r17]
                	set_time_serial_2:
011EB8 3D 08 1C 00 		      	beq  	r16,set_time_serial_4
011EBC C1 35 08 00 		      	lbu  	r3,4[r11]
011EC0 82 31 00 20 		      	sxb  	r3,r3
011EC4 E3 3D F0 FF 		      	sw   	r3,-8[bp]
011EC8 C6 3D F0 FF 		      	lw   	r3,-8[bp]
011ECC 8C 31 1E 00 		      	and  	r3,r3,#15
011ED0 C6 4D F0 FF 		      	lw   	r4,-8[bp]
011ED4 0C 42 20 00 		      	and  	r4,r4,#16
011ED8 02 42 08 78 		      	asri 	r4,r4,#4
011EDC 07 42 14 00 		      	mul  	r4,r4,#10
011EE0 82 31 08 28 		      	addu 	r3,r3,r4
011EE4 E3 3D F0 FF 		      	sw   	r3,-8[bp]
011EE8 C6 3D F0 FF 		      	lw   	r3,-8[bp]
011EEC 63 38 00 00 		      	sw   	r3,[r16]
                	set_time_serial_4:
011EF0 BD 07 1C 00 		      	beq  	r15,set_time_serial_6
011EF4 C1 35 0A 00 		      	lbu  	r3,5[r11]
011EF8 82 31 00 20 		      	sxb  	r3,r3
011EFC E3 3D F0 FF 		      	sw   	r3,-8[bp]
011F00 C6 3D F0 FF 		      	lw   	r3,-8[bp]
011F04 8C 31 1E 00 		      	and  	r3,r3,#15
011F08 C6 4D F0 FF 		      	lw   	r4,-8[bp]
011F0C 0C 42 60 00 		      	and  	r4,r4,#48
011F10 02 42 08 78 		      	asri 	r4,r4,#4
011F14 07 42 14 00 		      	mul  	r4,r4,#10
011F18 82 31 08 28 		      	addu 	r3,r3,r4
011F1C E3 3D F0 FF 		      	sw   	r3,-8[bp]
011F20 C6 3D F0 FF 		      	lw   	r3,-8[bp]
011F24 E3 37 00 00 		      	sw   	r3,[r15]
                	set_time_serial_6:
011F28 3D 07 22 00 		      	beq  	r14,set_time_serial_8
011F2C C1 35 04 00 		      	lbu  	r3,2[r11]
011F30 82 31 00 20 		      	sxb  	r3,r3
011F34 E3 3D F0 FF 		      	sw   	r3,-8[bp]
011F38 C6 3D F0 FF 		      	lw   	r3,-8[bp]
011F3C 8C 31 1E 00 		      	and  	r3,r3,#15
011F40 C6 4D F0 FF 		      	lw   	r4,-8[bp]
011F44 0C 42 60 00 		      	and  	r4,r4,#48
011F48 02 42 08 78 		      	asri 	r4,r4,#4
011F4C 07 42 14 00 		      	mul  	r4,r4,#10
011F50 82 31 08 28 		      	addu 	r3,r3,r4
011F54 E3 3D F0 FF 		      	sw   	r3,-8[bp]
011F58 C6 3D F0 FF 		      	lw   	r3,-8[bp]
011F5C 8C 31 7E 00 		      	and  	r3,r3,#63
011F60 E3 3D F0 FF 		      	sw   	r3,-8[bp]
011F64 C6 3D F0 FF 		      	lw   	r3,-8[bp]
011F68 63 37 00 00 		      	sw   	r3,[r14]
                	set_time_serial_8:
011F6C BD 06 1C 00 		      	beq  	r13,set_time_serial_10
011F70 C1 35 02 00 		      	lbu  	r3,1[r11]
011F74 82 31 00 20 		      	sxb  	r3,r3
011F78 E3 3D F0 FF 		      	sw   	r3,-8[bp]
011F7C C6 3D F0 FF 		      	lw   	r3,-8[bp]
011F80 8C 31 1E 00 		      	and  	r3,r3,#15
011F84 C6 4D F0 FF 		      	lw   	r4,-8[bp]
011F88 0C 42 E0 00 		      	and  	r4,r4,#112
011F8C 02 42 08 78 		      	asri 	r4,r4,#4
011F90 07 42 14 00 		      	mul  	r4,r4,#10
011F94 82 31 08 28 		      	addu 	r3,r3,r4
011F98 E3 3D F0 FF 		      	sw   	r3,-8[bp]
011F9C C6 3D F0 FF 		      	lw   	r3,-8[bp]
011FA0 E3 36 00 00 		      	sw   	r3,[r13]
                	set_time_serial_10:
011FA4 3D 06 1C 00 		      	beq  	r12,set_time_serial_12
011FA8 C1 35 00 00 		      	lbu  	r3,[r11]
011FAC 82 31 00 20 		      	sxb  	r3,r3
011FB0 E3 3D F0 FF 		      	sw   	r3,-8[bp]
011FB4 C6 3D F0 FF 		      	lw   	r3,-8[bp]
011FB8 8C 31 1E 00 		      	and  	r3,r3,#15
011FBC C6 4D F0 FF 		      	lw   	r4,-8[bp]
011FC0 0C 42 E0 00 		      	and  	r4,r4,#112
011FC4 02 42 08 78 		      	asri 	r4,r4,#4
011FC8 07 42 14 00 		      	mul  	r4,r4,#10
011FCC 82 31 08 28 		      	addu 	r3,r3,r4
011FD0 E3 3D F0 FF 		      	sw   	r3,-8[bp]
011FD4 C6 3D F0 FF 		      	lw   	r3,-8[bp]
011FD8 63 36 00 00 		      	sw   	r3,[r12]
                	set_time_serial_12:
                	set_time_serial_14:
011FDC 57 1F 11 00 		      	pop  	r17
011FE0 57 0F 11 00 		      	pop  	r16
011FE4 57 FF 10 00 		      	pop  	r15
011FE8 57 EF 10 00 		      	pop  	r14
011FEC 57 DF 10 00 		      	pop  	r13
011FF0 57 CF 10 00 		      	pop  	r12
011FF4 57 BF 10 00 		      	pop  	r11
011FF8 82 ED 01 1A 		      	mov  	sp,bp
011FFC 57 BF 11 00 		      	pop  	bp
012000 37 FF 21 00 		      	rtl  	#16
                	ToJul:
012004 15 EF 21 00 		      	subui	sp,sp,#16
012008 E7 ED 01 00 		      	push 	bp
01200C 02 BF 01 1A 		      	mov  	bp,sp
012010 15 EF 41 00 		      	subui	sp,sp,#32
012014 C6 3D 50 00 		      	lw   	r3,40[bp]
012018 E3 3D E0 FF 		      	sw   	r3,-16[bp]
01201C C6 3D 60 00 		      	lw   	r3,48[bp]
012020 E3 3D D0 FF 		      	sw   	r3,-24[bp]
012024 C6 3D 70 00 		      	lw   	r3,56[bp]
012028 E3 3D C0 FF 		      	sw   	r3,-32[bp]
01202C FC FF FF FF 		      	ldi  	r3,#-32075
012030 0A 30 6A 05 
012034 C6 4D C0 FF 		      	lw   	r4,-32[bp]
012038 7C 6B 00 00 		      	ldi  	r5,#7012800
01203C 0A 50 80 03 
012040 C6 6D E0 FF 		      	lw   	r6,-16[bp]
012044 C6 7D D0 FF 		      	lw   	r7,-24[bp]
012048 95 73 1C 00 		      	subu 	r7,r7,#14
01204C 88 73 18 00 		      	divs 	r7,r7,#12
012050 02 63 0E 28 		      	addu 	r6,r6,r7
012054 07 63 6A 0B 		      	mul  	r6,r6,#1461
012058 82 52 0C 28 		      	addu 	r5,r5,r6
01205C 82 52 04 78 		      	asri 	r5,r5,#2
012060 02 42 0A 28 		      	addu 	r4,r4,r5
012064 0A 50 44 FA 		      	ldi  	r5,#-734
012068 C6 6D D0 FF 		      	lw   	r6,-24[bp]
01206C C6 7D D0 FF 		      	lw   	r7,-24[bp]
012070 95 73 1C 00 		      	subu 	r7,r7,#14
012074 88 73 18 00 		      	divs 	r7,r7,#12
012078 87 73 18 00 		      	mul  	r7,r7,#12
01207C 02 63 0E 2A 		      	subu 	r6,r6,r7
012080 07 63 DE 02 		      	mul  	r6,r6,#367
012084 82 52 0C 28 		      	addu 	r5,r5,r6
012088 88 52 18 00 		      	divs 	r5,r5,#12
01208C 02 42 0A 28 		      	addu 	r4,r4,r5
012090 0A 50 48 26 		      	ldi  	r5,#4900
012094 C6 6D E0 FF 		      	lw   	r6,-16[bp]
012098 C6 7D D0 FF 		      	lw   	r7,-24[bp]
01209C 95 73 1C 00 		      	subu 	r7,r7,#14
0120A0 88 73 18 00 		      	divs 	r7,r7,#12
0120A4 02 63 0E 28 		      	addu 	r6,r6,r7
0120A8 82 52 0C 28 		      	addu 	r5,r5,r6
0120AC 88 52 C8 00 		      	divs 	r5,r5,#100
0120B0 87 52 06 00 		      	mul  	r5,r5,#3
0120B4 82 52 04 78 		      	asri 	r5,r5,#2
0120B8 02 42 0A 2A 		      	subu 	r4,r4,r5
0120BC 82 31 08 28 		      	addu 	r3,r3,r4
0120C0 E3 3D F0 FF 		      	sw   	r3,-8[bp]
0120C4 C6 3D F0 FF 		      	lw   	r3,-8[bp]
0120C8 82 11 00 1A 		      	mov  	r1,r3
                	set_time_serial_17:
0120CC 82 ED 01 1A 		      	mov  	sp,bp
0120D0 57 BF 11 00 		      	pop  	bp
0120D4 37 FF 21 00 		      	rtl  	#16
                	set_time_serial:
0120D8 E7 EF 01 00 		      	push 	lr
0120DC 67 EE 01 00 		      	push 	xlr
0120E0 E7 ED 01 00 		      	push 	bp
0120E4 7C 01 00 00 		      	ldi  	xlr,#set_time_serial_19
0120E8 0A C0 11 43 
0120EC 02 BF 01 1A 		      	mov  	bp,sp
0120F0 15 EF 91 00 		      	subui	sp,sp,#72
0120F4 E5 ED 81 FF 		      	pea  	-64[bp]
0120F8 E5 ED 91 FF 		      	pea  	-56[bp]
0120FC E5 ED A1 FF 		      	pea  	-48[bp]
012100 E5 ED B1 FF 		      	pea  	-40[bp]
012104 E5 ED C1 FF 		      	pea  	-32[bp]
012108 E5 ED D1 FF 		      	pea  	-24[bp]
01210C B9 A4 FF FF 		      	bsr  	get_datetime
012110 14 EF 61 00 		      	addui	sp,sp,#48
012114 C6 3D 80 FF 		      	lw   	r3,-64[bp]
012118 82 31 14 70 		      	asli 	r3,r3,#10
01211C C6 4D 90 FF 		      	lw   	r4,-56[bp]
012120 FC 00 00 00 		      	mul  	r4,r4,#61440
012124 07 42 00 E0 
012128 82 31 08 28 		      	addu 	r3,r3,r4
01212C C6 4D A0 FF 		      	lw   	r4,-48[bp]
012130 7C 38 00 00 		      	mul  	r4,r4,#3686400
012134 07 42 00 80 
012138 82 31 08 28 		      	addu 	r3,r3,r4
01213C E7 E1 01 00 		      	push 	r3
012140 E6 ED B1 FF 		      	push 	-40[bp]
012144 E6 ED C1 FF 		      	push 	-32[bp]
012148 E6 ED D1 FF 		      	push 	-24[bp]
01214C 39 D7 FF FF 		      	bsr  	ToJul
012150 14 EF 31 00 		      	addui	sp,sp,#24
012154 57 3F 10 00 		      	pop  	r3
012158 82 40 00 1A 		      	mov  	r4,r1
01215C 7C 46 05 00 		      	mul  	r4,r4,#88473600
012160 07 42 00 00 
012164 82 31 08 28 		      	addu 	r3,r3,r4
012168 63 30 20 00 		      	sw   	r3,Milliseconds
01216C C6 3D E0 FF 		      	lw   	r3,-16[bp]
012170 82 11 00 1A 		      	mov  	r1,r3
                	set_time_serial_20:
012174 82 ED 01 1A 		      	mov  	sp,bp
012178 57 BF 11 00 		      	pop  	bp
01217C 57 CF 11 00 		      	pop  	xlr
012180 57 FF 11 00 		      	pop  	lr
012184 37 FF 01 00 		      	rtl  	#0
                	set_time_serial_19:
012188 C6 FD 11 00 		      	lw   	lr,8[bp]
01218C E3 FD 21 00 		      	sw   	lr,16[bp]
012190 BA FC FF FF 		      	bra  	set_time_serial_20
                		rodata
                		align	16                	
                		align	8                	
                		extern	RTCC_BUF
                		extern	Milliseconds
                		extern	Milliseconds
                	
                	pSpriteController:
013000 00 D0 DA FF FF FF FF FF 		dw	-2437120
                	
                	sprite_demo:
013008 15 EF 21 00             		      	subui	sp,sp,#16
01300C E7 ED 01 00             		      	push 	bp
013010 02 BF 01 1A             		      	mov  	bp,sp
013014 15 EF 31 00             		      	subui	sp,sp,#24
013018 E7 E5 01 00             		      	push 	r11
01301C 67 E6 01 00             		      	push 	r12
013020 E7 E6 01 00             		      	push 	r13
013024 7C 07 00 00 0A B0 00 A0 		      	ldi  	r11,#sprites
01302C 7C DC FF FF 0A C0 00 18 		      	ldi  	r12,#-2356224
013034 7C D8 FF FF 0A D0 00 00 		      	ldi  	r13,#-2621440
01303C E3 0D F0 FF             		      	sw   	r0,-8[bp]
                	sprite_demo_4:
013040 C6 3D F0 FF             		      	lw   	r3,-8[bp]
013044 86 31 40 00             		      	cmp  	r3,r3,#32
013048 BD 31 18 00             		      	bge  	r3,sprite_demo_5
01304C C6 3D F0 FF             		      	lw   	r3,-8[bp]
013050 82 31 04 70             		      	asli 	r3,r3,#2
013054 82 31 04 70             		      	asli 	r3,r3,#2
013058 7C 01 00 00 46 40 00 60 		      	lw   	r4,pSpriteController
013060 82 31 08 28             		      	addu 	r3,r3,r4
013064 C5 41 08 00             		      	lhu  	r4,4[r3]
013068 0D 42 98 01             		      	ori  	r4,r4,#204
01306C E2 41 08 00             		      	sh   	r4,4[r3]
                	sprite_demo_6:
013070 E4 1D F0 FF             		      	inc  	-8[bp],#1
013074 BA F9 FF FF             		      	bra  	sprite_demo_4
                	sprite_demo_5:
013078 E3 0D F0 FF             		      	sw   	r0,-8[bp]
                	sprite_demo_7:
01307C C6 3D F0 FF             		      	lw   	r3,-8[bp]
013080 7C 00 00 00 86 31 00 80 		      	cmp  	r3,r3,#16384
013088 BD 31 0E 00             		      	bge  	r3,sprite_demo_8
01308C C6 3D F0 FF             		      	lw   	r3,-8[bp]
013090 82 31 04 70             		      	asli 	r3,r3,#2
013094 45 46 00 00             		      	lhu  	r4,[r12]
013098 EA 46 06 00             		      	sh   	r4,0[r13+r3]
                	sprite_demo_9:
01309C E4 1D F0 FF             		      	inc  	-8[bp],#1
0130A0 BA FB FF FF             		      	bra  	sprite_demo_7
                	sprite_demo_8:
0130A4 E3 0D F0 FF             		      	sw   	r0,-8[bp]
                	sprite_demo_10:
0130A8 C6 3D F0 FF             		      	lw   	r3,-8[bp]
0130AC 86 31 40 00             		      	cmp  	r3,r3,#32
0130B0 BD 31 38 00             		      	bge  	r3,sprite_demo_11
0130B4 46 36 00 00             		      	lw   	r3,[r12]
0130B8 89 31 A8 0A             		      	mod  	r3,r3,#1364
0130BC C6 4D F0 FF             		      	lw   	r4,-8[bp]
0130C0 02 42 0A 70             		      	asli 	r4,r4,#5
0130C4 EB 35 08 00             		      	sw   	r3,0[r11+r4]
0130C8 46 36 00 00             		      	lw   	r3,[r12]
0130CC 89 31 00 06             		      	mod  	r3,r3,#768
0130D0 C6 4D F0 FF             		      	lw   	r4,-8[bp]
0130D4 02 42 0A 70             		      	asli 	r4,r4,#5
0130D8 02 42 16 28             		      	addu 	r4,r4,r11
0130DC 63 32 10 00             		      	sw   	r3,8[r4]
0130E0 46 36 00 00             		      	lw   	r3,[r12]
0130E4 8C 31 0E 00             		      	and  	r3,r3,#7
0130E8 95 31 08 00             		      	subu 	r3,r3,#4
0130EC C6 4D F0 FF             		      	lw   	r4,-8[bp]
0130F0 02 42 0A 70             		      	asli 	r4,r4,#5
0130F4 02 42 16 28             		      	addu 	r4,r4,r11
0130F8 63 32 20 00             		      	sw   	r3,16[r4]
0130FC 46 36 00 00             		      	lw   	r3,[r12]
013100 8C 31 0E 00             		      	and  	r3,r3,#7
013104 95 31 08 00             		      	subu 	r3,r3,#4
013108 C6 4D F0 FF             		      	lw   	r4,-8[bp]
01310C 02 42 0A 70             		      	asli 	r4,r4,#5
013110 02 42 16 28             		      	addu 	r4,r4,r11
013114 63 32 30 00             		      	sw   	r3,24[r4]
                	sprite_demo_12:
013118 E4 1D F0 FF             		      	inc  	-8[bp],#1
01311C BA F1 FF FF             		      	bra  	sprite_demo_10
                	sprite_demo_11:
                	sprite_demo_13:
013120 0A 30 02 00             		      	ldi  	r3,#1
013124 BD 01 68 00             		      	beq  	r3,sprite_demo_14
013128 E3 0D F0 FF             		      	sw   	r0,-8[bp]
                	sprite_demo_15:
01312C C6 3D F0 FF             		      	lw   	r3,-8[bp]
013130 86 31 40 00             		      	cmp  	r3,r3,#32
013134 BD 31 58 00             		      	bge  	r3,sprite_demo_16
013138 C6 3D F0 FF             		      	lw   	r3,-8[bp]
01313C 82 31 0A 70             		      	asli 	r3,r3,#5
013140 CE 35 06 00             		      	lw   	r3,0[r11+r3]
013144 C6 4D F0 FF             		      	lw   	r4,-8[bp]
013148 02 42 0A 70             		      	asli 	r4,r4,#5
01314C 02 42 16 28             		      	addu 	r4,r4,r11
013150 46 42 20 00             		      	lw   	r4,16[r4]
013154 82 31 08 28             		      	addu 	r3,r3,r4
013158 8C 31 FE 07             		      	and  	r3,r3,#1023
01315C C6 4D F0 FF             		      	lw   	r4,-8[bp]
013160 02 42 0A 70             		      	asli 	r4,r4,#5
013164 EB 35 08 00             		      	sw   	r3,0[r11+r4]
013168 C6 3D F0 FF             		      	lw   	r3,-8[bp]
01316C 82 31 0A 70             		      	asli 	r3,r3,#5
013170 82 31 16 28             		      	addu 	r3,r3,r11
013174 C6 31 10 00             		      	lw   	r3,8[r3]
013178 C6 4D F0 FF             		      	lw   	r4,-8[bp]
01317C 02 42 0A 70             		      	asli 	r4,r4,#5
013180 02 42 16 28             		      	addu 	r4,r4,r11
013184 46 42 30 00             		      	lw   	r4,24[r4]
013188 82 31 08 28             		      	addu 	r3,r3,r4
01318C 8C 31 FE 03             		      	and  	r3,r3,#511
013190 C6 4D F0 FF             		      	lw   	r4,-8[bp]
013194 02 42 0A 70             		      	asli 	r4,r4,#5
013198 02 42 16 28             		      	addu 	r4,r4,r11
01319C 63 32 10 00             		      	sw   	r3,8[r4]
0131A0 C6 3D F0 FF             		      	lw   	r3,-8[bp]
0131A4 82 31 0A 70             		      	asli 	r3,r3,#5
0131A8 CE 35 06 00             		      	lw   	r3,0[r11+r3]
0131AC C6 4D F0 FF             		      	lw   	r4,-8[bp]
0131B0 02 42 0A 70             		      	asli 	r4,r4,#5
0131B4 02 42 16 28             		      	addu 	r4,r4,r11
0131B8 46 42 10 00             		      	lw   	r4,8[r4]
0131BC 02 42 20 70             		      	asli 	r4,r4,#16
0131C0 82 31 08 28             		      	addu 	r3,r3,r4
0131C4 C6 4D F0 FF             		      	lw   	r4,-8[bp]
0131C8 02 42 04 70             		      	asli 	r4,r4,#2
0131CC 02 42 04 70             		      	asli 	r4,r4,#2
0131D0 7C 01 00 00 46 50 00 60 		      	lw   	r5,pSpriteController
0131D8 EA 32 08 00             		      	sh   	r3,0[r5+r4]
                	sprite_demo_17:
0131DC E4 1D F0 FF             		      	inc  	-8[bp],#1
0131E0 BA E9 FF FF             		      	bra  	sprite_demo_15
                	sprite_demo_16:
0131E4 7C 0F 00 00 0A 10 80 84 		      	     	            ldi  r1,#1000000
0131EC B9 6B FD FF             	            bsr  MicroDelay
                	        
0131F0 3A E6 FF FF             		      	bra  	sprite_demo_13
                	sprite_demo_14:
                	sprite_demo_18:
0131F4 57 DF 10 00             		      	pop  	r13
0131F8 57 CF 10 00             		      	pop  	r12
0131FC 57 BF 10 00             		      	pop  	r11
013200 82 ED 01 1A             		      	mov  	sp,bp
013204 57 BF 11 00             		      	pop  	bp
013208 37 FF 21 00             		      	rtl  	#16
                	         
01320C 3F 00 00 00             	    nop
013210 3F 00 00 00             	    nop
                	
                	
556 symbols
  Symbol Name                              seg     address
  AsciiToHexNybble                           code  010fe0
  AsciiToHexNybble.gthx3                     code  011040
  AsciiToHexNybble.gthx5                     code  011000
  AsciiToHexNybble.gthx6                     code  011020
  AsciiToScreen                              code  0105bc
  AsciiToScreen.00001                        code  0105dc
  BMP_CLUT                                  const  0c5800
  BSI_BootSig                               const  000026
  BSI_DriveNum                              const  000024
  BSI_FATS                                  const  000010
  BSI_FileSysType                           const  000036
  BSI_Heads                                 const  00001a
  BSI_HiddenSecs                            const  00001c
  BSI_HugeSecs                              const  00001e
  BSI_JMP                                   const  000000
  BSI_Media                                 const  000015
  BSI_OEMName                               const  000003
  BSI_ResSectors                            const  00000e
  BSI_RootDirEnts                           const  000011
  BSI_Rsvd1                                 const  000025
  BSI_SecPerCluster                         const  00000d
  BSI_SecPerFAT                             const  000016
  BSI_SecPerTrack                           const  000018
  BSI_Sectors                               const  000013
  BSI_VolID                                 const  000027
  BSI_VolLabel                              const  00002b
  BSI_bps                                   const  00000b
  BYTE_SECTOR_BUF                           const  070000
  BlankLine                                  code  010b20
  BlankLine.0001                             code  010b5c
  CR                                        const  00000d
  CRLF                                       code  010738
  CRLF1                                      code  01073c
  CTRLC                                     const  000003
  CTRLCCheck                                 code  010f40
  CTRLCCheck.0001                            code  010f68
  CTRLH                                     const  000008
  CTRLI                                     const  000009
  CTRLJ                                     const  00000a
  CTRLK                                     const  00000b
  CTRLM                                     const  00000d
  CTRLS                                     const  000013
  CTRLX                                     const  000018
  CalcScreenLoc                              code  01084c
  CharsInRxBuf                               code  0103a4
  CheckKeys                                  code  010f2c
  CheckScrollLock                            code  010f70
  CheckScrollLock.0001                       code  010f90
  CheckScrollLock.0002                       code  010f7c
  ClearBmpScreen                             code  80000000000000ce
  ClearScreen                                code  01061c
  ClearScreen.cs1                            code  01065c
  CursorCol                                   bss  000081
  CursorOff                                  code  010600
  CursorOn                                   code  010604
  CursorRow                                   bss  000080
  DispCharQ                                  code  010758
  DispStartMsg                               code  01076c
  DisplayByte                                code  0106b8
  DisplayChar                                code  010898
  DisplayChar.dcx12                          code  0109b0
  DisplayChar.dcx4                           code  010920
  DisplayChar.dcx5                           code  0109e4
  DisplayChar.dcx7                           code  010958
  DisplayChar.doBackspace                    code  0109c8
  DisplayChar.doCursorDown                   code  010988
  DisplayChar.doCursorHome                   code  0109a0
  DisplayChar.doCursorLeft                   code  010974
  DisplayChar.doCursorRight                  code  010944
  DisplayChar.doCursorUp                     code  010960
  DisplayChar.doDelete                       code  0109b8
  DisplayChar.doLinefeed                     code  010a18
  DisplayChar.docr                           code  010938
  DisplayCharHex                             code  0106a4
  DisplayErr                                 code  01104c
  DisplayHalf                                code  010690
  DisplayMemBytes                            code  010e6c
  DisplayMemBytes.001                        code  010ea0
  DisplayMemBytes.002                        code  010ed8
  DisplayMemBytes.003                        code  010ef8
  DisplayMemBytes.004                        code  010eec
  DisplayNybble                              code  0106cc
  DisplayNybble.0001                         code  0106ec
  DisplayString                              code  0106fc
  DisplayString.dm1                          code  010720
  DisplayString.dm2                          code  01070c
  DisplayStringCRLF                          code  01072c
  DisplayWord                                code  01067c
  Dummy1                                      bss  000082
  E_Arg                                     const  000001
  E_BadAlarm                                const  000011
  E_BadBlockNum                             const  000025
  E_BadDevNum                               const  000020
  E_BadDevOp                                const  000022
  E_BadMbx                                  const  000004
  E_DCBInUse                                const  000019
  E_NoDev                                   const  000021
  E_NoMem                                   const  00000c
  E_NoMoreAlarmBlks                         const  000044
  E_NoMoreMbx                               const  000040
  E_NoMoreMsgBlks                           const  000041
  E_NoMoreTCBs                              const  000045
  E_NoMsg                                   const  00000b
  E_NoThread                                const  000006
  E_NotAlloc                                const  000009
  E_NotOwner                                const  000012
  E_Ok                                      const  000000
  E_QueFull                                 const  000005
  E_QueStrategy                             const  000013
  E_ReadError                               const  000023
  E_Timeout                                 const  000010
  E_TooManyBlocks                           const  000026
  E_WriteError                              const  000024
  EndStaticAllocations                        bss  075400
  FMTKInitialize                             code  80000000000000e9
  FreeTCB                                     bss  000030
  GDTBaseAddress                              bss  012000
  GetCurrAttr                                code  0107fc
  GetHexNumber                               code  010fa0
  GetHexNumber.gthxn1                        code  010fd0
  GetHexNumber.gthxn2                        code  010fb4
  GetRandomNumber                            code  01110c
  GetRange                                   code  010cd8
  GetScreenLocation                          code  0107f0
  GetSystemTime                              code  0107e4
  GetTwoParams                               code  010cbc
  HomeCursor                                 code  010608
  I2C_CMD                                   const  000004
  I2C_CONTROL                               const  000002
  I2C_ERR                                    code  0119d0
  I2C_INIT                                   code  011900
  I2C_MASTER                                const  ffdc0e00
  I2C_PRESCALE_HI                           const  000001
  I2C_PRESCALE_LO                           const  000000
  I2C_READ                                   code  011934
  I2C_RX                                    const  000003
  I2C_STAT                                  const  000004
  I2C_TX                                    const  000003
  I2C_WAIT_TC                                code  011a60
  I2C_WAIT_TC.0001                           code  011a60
  I2C_WRITE                                  code  0119e0
  IBPT_ISR                                   code  011e24
  IBPT_ISR.0001                              code  011e28
  IOPgTbl                                     bss  04c000
  IVTBaseAddress                              bss  010000
  IncCursorPos                               code  010a20
  IncCursorRow                               code  010a4c
  InitPIC                                    code  0101e8
  InitUart                                   code  010204
  KEYBD                                     const  ffdc0000
  KEYBDCLR                                  const  ffdc0004
  KEYBD_DELAY                               const  0003e8
  KeySTate2                                  code  80000000000001be
  KeyState1                                   bss  000088
  KeyState2                                   bss  000089
  KeybdBad                                    bss  000085
  KeybdEcho                                   bss  000084
  KeybdGetChar                               code  011370
  KeybdGetChar.0001                          code  0113a4
  KeybdGetChar.0003                          code  01137c
  KeybdGetChar.0004                          code  0114bc
  KeybdGetChar.0005                          code  0114e8
  KeybdGetChar.0006                          code  0113a0
  KeybdGetChar.0007                          code  011454
  KeybdGetChar.0008                          code  011468
  KeybdGetChar.0009                          code  01143c
  KeybdGetChar.0010                          code  011420
  KeybdGetChar.doCapsLock                    code  011514
  KeybdGetChar.doCtrl                        code  0114a0
  KeybdGetChar.doExtend                      code  011490
  KeybdGetChar.doKeyup                       code  011484
  KeybdGetChar.doNumLock                     code  0114f8
  KeybdGetChar.doScrollLock                  code  011528
  KeybdGetChar.doScrolllock                  code  80000000000001b1
  KeybdGetChar.doShift                       code  0114cc
  KeybdGetCharDirect                         code  01118c
  KeybdGetCharDirect.0001                    code  011194
  KeybdGetCharDirect.gk1                     code  0111d8
  KeybdGetCharDirect.gk2                     code  0111d4
  KeybdGetCharDirectNB                       code  011118
  KeybdGetCharDirectNB.0001                  code  011178
  KeybdGetCharDirectNB.0002                  code  01116c
  KeybdGetCharDirectNB.0003                  code  011168
  KeybdGetCharNoWait                         code  011360
  KeybdGetCharWait                           code  011368
  KeybdGetScancode                           code  0112bc
  KeybdGetStatus                             code  0112b0
  KeybdIRQ                                   code  010780
  KeybdInit                                  code  0111fd
  KeybdInit.0001                             code  011208
  KeybdInit.0002                             code  011218
  KeybdInit.0004                             code  011298
  KeybdInit.config                           code  011254
  KeybdInit.keybdErr                         code  011284
  KeybdInit.tryAgain                         code  01127c
  KeybdLEDs                                   bss  00008b
  KeybdLocks                                  bss  000086
  KeybdRecvByte                              code  0112d0
  KeybdRecvByte.0003                         code  0112dc
  KeybdRecvByte.0004                         code  011300
  KeybdSendByte                              code  0115c0
  KeybdSetLEDStatus                          code  01153c
  KeybdSetLEDStatus.0001                     code  0115b0
  KeybdSetLEDStatus.0002                     code  011560
  KeybdSetLEDStatus.0003                     code  011574
  KeybdSetLEDStatus.0004                     code  011588
  KeybdWaitFlag                               bss  00008a
  KeybdWaitTx                                code  011310
  KeybdWaitTx.0001                           code  011320
  KeybdWaitTx.0002                           code  01134c
  LEDS                                      const  ffdc0600
  LF                                        const  00000a
  MRTest                                     code  800000000000015c
  MicroDelay                                 code  011d48
  MicroDelay.0001                            code  011d54
  Milliseconds                                bss  000010
  MonGetch                                   code  010c80
  Monitor                                    code  010b9e
  NR_PTBL                                   const  000020
  NR_TCB                                    const  000010
  NormAttr                                    bss  000078
  OutCRLF                                    code  010738
  OutChar                                    code  010dc0
  OutputVec                                   bss  000018
  PAM1                                        bss  022000
  PAM2                                        bss  023000
  PIC                                       const  ffdc0fc0
  PIC_ES                                    const  ffdc0fd0
  PIC_IE                                    const  ffdc0fc4
  PIC_RSTE                                  const  ffdc0fd4
  PROG_LOAD_AREA                            const  071000
  PgSD0                                       bss  044000
  PgSD3                                       bss  045000
  PgTbl0                                      bss  046000
  PgTbl1                                      bss  047000
  PgTbl2                                      bss  048000
  PgTbl3                                      bss  049000
  PgTbl4                                      bss  04a000
  PgTbl5                                      bss  04b000
  QNdx0                                       bss  000038
  RANDOM_NUM                                const  ffdc0c00
  ROOTDIR_BUF                                 bss  071000
  RTCCOscOn                                  code  011ac0
  RTCCReadbuf                                code  011a70
  RTCCReadbuf.0001                           code  011a7c
  RTCCWritebuf                               code  011a98
  RTCCWritebuf.0001                          code  011aa4
  RTCC_BUF                                    bss  0000a0
  RW_READ_SD_BLOCK                          const  000002
  RW_WRITE_SD_BLOCK                         const  000003
  RootPageTbl                                 bss  024000
  RunningTCB                                  bss  000028
  SC_ALT                                    const  000011
  SC_CAPSLOCK                               const  000058
  SC_CTRL                                   const  000014
  SC_DEL                                    const  000071
  SC_EXTEND                                 const  0000e0
  SC_KEYUP                                  const  0000f0
  SC_LCTRL                                  const  000058
  SC_LSHIFT                                 const  000012
  SC_NUMLOCK                                const  000077
  SC_RSHIFT                                 const  000059
  SC_SCROLLLOCK                             const  00007e
  SDDiskSize                                 code  80000000000000d4
  SDInit                                     code  80000000000000d0
  SDReadBoot                                 code  8000000000000170
  SDReadMultiple                             code  80000000000000d1
  SDReadPart                                 code  80000000000000d3
  SDWriteMultiple                            code  80000000000000d2
  SD_2_0                                     code  80000000000001d7
  SD_CMD8                                    code  011b30
  SD_CMD8.0001                               code  011ba0
  SD_CMD8.0002                               code  011ba8
  SD_CMD8.0003                               code  011c04
  SD_CMD8.0004                               code  011bb8
  SD_CMD8.respOk                             code  011c48
  SD_INIT                                    code  011ae4
  SD_MASTER                                 const  ffdc0b00
  SD_WAIT_RESP                               code  011c60
  SD_WAIT_RESP.0001                          code  011c74
  SD_WAIT_RESP.0002                          code  011ca0
  SECTOR_BUF                                  bss  070000
  SPIMASTER                                 const  ffdc0500
  SPI_DIRECT_ACCESS_DATA_REG                const  000018
  SPI_INIT_NO_ERROR                         const  000000
  SPI_INIT_SD                               const  000001
  SPI_MASTER_CONTROL_REG                    const  000004
  SPI_MASTER_VERSION_REG                    const  000000
  SPI_READ_NO_ERROR                         const  000000
  SPI_RESP_BYTE1                            const  0000c0
  SPI_RESP_BYTE2                            const  0000c4
  SPI_RESP_BYTE3                            const  0000c8
  SPI_RESP_BYTE4                            const  0000cc
  SPI_RX_FIFO_CTRL_REG                      const  000050
  SPI_RX_FIFO_DATA_COUNT_LSB                const  00004c
  SPI_RX_FIFO_DATA_COUNT_MSB                const  000048
  SPI_RX_FIFO_DATA_REG                      const  000040
  SPI_SD_SECT_15_8_REG                      const  000020
  SPI_SD_SECT_23_16_REG                     const  000024
  SPI_SD_SECT_31_24_REG                     const  000028
  SPI_SD_SECT_7_0_REG                       const  00001c
  SPI_TRANS_BUSY                            const  000001
  SPI_TRANS_CTRL_REG                        const  00000c
  SPI_TRANS_ERROR_REG                       const  000014
  SPI_TRANS_START                           const  000001
  SPI_TRANS_STATUS_REG                      const  000010
  SPI_TRANS_TYPE_REG                        const  000008
  SPI_TX_FIFO_CTRL_REG                      const  000090
  SPI_TX_FIFO_DATA_REG                      const  000080
  SPI_WRITE_NO_ERROR                        const  000000
  SSM_ISR                                    code  011e20
  ScreenToAscii                              code  0105e4
  ScreenToAscii.stasc1                       code  0105f8
  ScrollUp                                   code  010a9c
  ScrollUp.0001                              code  010ae0
  SerialCheckForCharDirect                   code  01028c
  SerialGetChar                              code  0103c8
  SerialGetCharDirect                        code  010270
  SerialIRQ                                  code  010494
  SerialPutChar                              code  0102a4
  SerialStartMsg                             code  01010c
  SetupIntVectors                            code  010138
  SetupMemtags                               code  011d04
  TAB                                       const  000009
  TCB_BackLink                              const  000000
  TCB_Next                                  const  000a00
  TCB_PCSave                                const  000980
  TCB_Prev                                  const  000a08
  TCB_Priority                              const  000a20
  TCB_Regs                                  const  000008
  TCB_SP0Save                               const  000800
  TCB_SP10Save                              const  0008a0
  TCB_SP11Save                              const  0008b0
  TCB_SP12Save                              const  0008c0
  TCB_SP13Save                              const  0008d0
  TCB_SP14Save                              const  0008e0
  TCB_SP15Save                              const  0008f0
  TCB_SP1Save                               const  000810
  TCB_SP2Save                               const  000820
  TCB_SP3Save                               const  000830
  TCB_SP4Save                               const  000840
  TCB_SP5Save                               const  000850
  TCB_SP6Save                               const  000860
  TCB_SP7Save                               const  000870
  TCB_SP8Save                               const  000880
  TCB_SP9Save                               const  000890
  TCB_SPSave                                const  000988
  TCB_SS0Save                               const  000808
  TCB_SS10Save                              const  0008a8
  TCB_SS11Save                              const  0008b8
  TCB_SS12Save                              const  0008c8
  TCB_SS13Save                              const  0008d8
  TCB_SS14Save                              const  0008e8
  TCB_SS15Save                              const  0008f8
  TCB_SS1Save                               const  000818
  TCB_SS2Save                               const  000828
  TCB_SS3Save                               const  000838
  TCB_SS4Save                               const  000848
  TCB_SS5Save                               const  000858
  TCB_SS6Save                               const  000868
  TCB_SS7Save                               const  000878
  TCB_SS8Save                               const  000888
  TCB_SS9Save                               const  000898
  TCB_Seg0Save                              const  000900
  TCB_Seg10Save                             const  000950
  TCB_Seg11Save                             const  000958
  TCB_Seg12Save                             const  000960
  TCB_Seg13Save                             const  000968
  TCB_Seg14Save                             const  000970
  TCB_Seg15Save                             const  000978
  TCB_Seg1Save                              const  000908
  TCB_Seg2Save                              const  000910
  TCB_Seg3Save                              const  000918
  TCB_Seg4Save                              const  000920
  TCB_Seg5Save                              const  000928
  TCB_Seg6Save                              const  000930
  TCB_Seg7Save                              const  000938
  TCB_Seg8Save                              const  000940
  TCB_Seg9Save                              const  000948
  TCB_Size                                  const  002000
  TCB_Status                                const  000a18
  TCB_hJob                                  const  000a28
  TCBs                                        bss  050000
  TEXTREG                                   const  0a0000
  TEXTSCR                                   const  000000
  TEXT_COLS                                 const  000000
  TEXT_CURCTL                               const  000020
  TEXT_CURPOS                               const  00002c
  TEXT_ROWS                                 const  000004
  TSSBaseAddress                              bss  050000
  TS_PREEMPT                                const  000004
  TS_READY                                  const  000001
  TS_RUNNING                                const  000002
  TXTCOLS                                   const  000054
  TXTROWS                                   const  00001f
  TempTCB                                     bss  04d000
  Tick1024Rout                               code  0107c0
  TickRout                                   code  01078c
  TickVec                                     bss  000020
  Ticks                                       bss  000008
  ToJul                                      code  012004
  UART                                      const  ffdc0a00
  UART_CM0                                  const  000008
  UART_CM1                                  const  000009
  UART_CM2                                  const  00000a
  UART_CM3                                  const  00000b
  UART_CTRL                                 const  000007
  UART_FF                                   const  000005
  UART_IE                                   const  000004
  UART_IS                                   const  000003
  UART_LS                                   const  000001
  UART_MC                                   const  000006
  UART_MS                                   const  000002
  UART_RX                                   const  000000
  UART_SPR                                  const  00000f
  UART_TX                                   const  000000
  Uart_foff                                   bss  00009e
  Uart_fon                                    bss  0000a0
  Uart_ms                                     bss  000094
  Uart_rxdtr                                  bss  00009c
  Uart_rxfifo                                code  8000000000000112
  Uart_rxflow                                 bss  00009a
  Uart_rxhead                                 bss  000096
  Uart_rxrts                                  bss  00009b
  Uart_rxtail                                 bss  000098
  Uart_rxxon                                  bss  00009d
  Uart_txdtr                                  bss  0000a3
  Uart_txrts                                  bss  0000a2
  Uart_txxon                                  bss  0000a4
  Uart_txxonoff                               bss  000095
  UpdateCursorPos                            code  010804
  Wait10ms                                   code  0115cc
  Wait10ms.0001                              code  0115d8
  Wait10ms.0002                              code  0115f0
  XOFF                                      const  000013
  XON                                       const  000011
  berr_rout                                  code  011e0e
  berr_rout.be1                              code  011e1c
  brkpt1                                     code  011d0c
  brkpt1.0001                                code  011d28
  cirxb1                                     code  0103c4
  disk_size                                   bss  000090
  doCLS                                      code  0110fe
  doCS                                       code  8000000000000159
  doDate                                     code  010dd8
  doDate.0001                                code  010e18
  doDay                                      code  010e50
  doDumpmem                                  code  010cf8
  doDumpmem.001                              code  010d04
  doFillmem                                  code  010d18
  doFillmem.0001                             code  010d74
  doFillmem.0002                             code  010d5c
  doFillmem.0003                             code  010d7c
  doFillmem.0004                             code  010d2c
  doJump                                     code  010dc4
  doRand                                     code  800000000000015e
  doSDBoot                                   code  010d9c
  drf_rout                                   code  011d94
  drf_rout.0001                              code  011dac
  dwf_rout                                   code  011db0
  dwf_rout.0001                              code  011dc8
  eval                                       code  800000000000015f
  exf_rout                                   code  011d78
  exf_rout.0001                              code  011d90
  get_datetime                               code  011e30
  hangprg                                    code  011cf4
  icc1                                       code  010a7c
  icr1                                       code  010a5c
  ignBlanks                                  code  010c9c
  ignBlanks1                                 code  010ca4
  kbdi5                                      code  0111e4
  keybdControlCodes                          code  011800
  keybdExtendedCodes                         code  011880
  loadBootFile                               code  8000000000000171
  mon1                                       code  010bbc
  mon1.Prompt1                               code  010bf8
  mon1.Prompt2                               code  010c14
  mon1.Prompt3                               code  010be0
  mon1.PromptLn                              code  010bd4
  mon1.doHelp                                code  010c70
  msgBadKeybd                                code  0111e4
  msgErr                                     code  01105c
  msgHelp                                    code  011064
  msgMonitorStarted                          code  0110ed
  msgPriv                                    code  011df7
  msgStart                                   code  010b81
  msgUninit                                  code  011e02
  msgdrf                                     code  011ded
  msgdwf                                     code  011df2
  msgexf                                     code  011de8
  pSpriteController                        rodata  013000
  priv_rout                                  code  011dcc
  priv_rout.0001                             code  011de4
  r2                                         code  0119dc
  r3                                         code  0119dc
  r5                                         code  0119dc
  rxfull                                     code  8000000000000103
  set_time_serial                            code  0120d8
  set_time_serial_10                         code  011fa4
  set_time_serial_12                         code  011fdc
  set_time_serial_14                         code  011fdc
  set_time_serial_17                         code  0120cc
  set_time_serial_19                         code  012188
  set_time_serial_2                          code  011eb8
  set_time_serial_20                         code  012174
  set_time_serial_4                          code  011ef0
  set_time_serial_6                          code  011f28
  set_time_serial_8                          code  011f6c
  sgc1                                       code  010270
  sgcfifo1                                   code  01047c
  sgcfifo2                                   code  010468
  sgcfifo3                                   code  010440
  sgcfifo4                                   code  010454
  sgcfifo5                                   code  010468
  shiftedScanCodes                           code  011700
  sirq1                                      code  0104d8
  smsirq                                     code  0104ec
  spcabort                                   code  01038c
  spcb1                                      code  010304
  spcb2                                      code  01033c
  spcb3                                      code  0102dc
  spcb4                                      code  010314
  spcb5                                      code  010358
  spcb6                                      code  010344
  spcb7                                      code  010388
  spcb8                                      code  010360
  sprite_demo                              rodata  013008
  sprite_demo_10                           rodata  0130a8
  sprite_demo_11                           rodata  013120
  sprite_demo_12                           rodata  013118
  sprite_demo_13                           rodata  013120
  sprite_demo_14                           rodata  0131f4
  sprite_demo_15                           rodata  01312c
  sprite_demo_16                           rodata  0131e4
  sprite_demo_17                           rodata  0131dc
  sprite_demo_18                           rodata  0131f4
  sprite_demo_4                            rodata  013040
  sprite_demo_5                            rodata  013078
  sprite_demo_6                            rodata  013070
  sprite_demo_7                            rodata  01307c
  sprite_demo_8                            rodata  0130a4
  sprite_demo_9                            rodata  01309c
  sprites                                     bss  075000
  srxirq                                     code  0104fc
  srxirq1                                    code  0104fc
  srxirq2                                    code  01051c
  srxirq3                                    code  01052c
  srxirq5                                    code  01054c
  srxirq6                                    code  010594
  srxirq7                                    code  0105a8
  srxirq8                                    code  0105b8
  start                                      code  010080
  start.0001                                 code  010094
  startSector                                 bss  00008c
  stxirq                                     code  0104f8
  unshiftedScanCodes                         code  011600
