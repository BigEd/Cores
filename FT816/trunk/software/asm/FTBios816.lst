Finitron FT832 assembler   version 1.4   Mon Nov 09 14:42:19 2015     Page 1
FTBios816.asm

                                           ; ============================================================================
                                           ; FTBios816.asm
                                           ;        __
                                           ;   \\__/ o\    (C) 2014  Robert Finch, Stratford
                                           ;    \  __ /    All rights reserved.
                                           ;     \/_//     robfinch<remove>@finitron.ca
                                           ;       ||
                                           ;  
                                           ;
                                           ; This source file is free software: you can redistribute it and/or modify 
                                           ; it under the terms of the GNU Lesser General Public License as published 
                                           ; by the Free Software Foundation, either version 3 of the License, or     
                                           ; (at your option) any later version.                                      
                                           ;                                                                          
                                           ; This source file is distributed in the hope that it will be useful,      
                                           ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                                           ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                                           ; GNU General Public License for more details.                             
                                           ;                                                                          
                                           ; You should have received a copy of the GNU General Public License        
                                           ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                                           ;                                                                          
                                           ; ============================================================================
                                           ;
     25 = 000000000000000D                               CR			EQU		13
     26 = 000000000000000A                               LF			EQU		10
     27 = 000000000000001B                               ESC			EQU		$1B
     28 = 0000000000000008                               BS			EQU		8
     29 = 0000000000000003                               CTRLC		EQU		3
                                           
     31 = 0000000000000012                               SC_LSHIFT	EQU		$12
     32 = 0000000000000059                               SC_RSHIFT	EQU		$59
     33 = 00000000000000F0                               SC_KEYUP	EQU		$F0
     34 = 00000000000000E0                               SC_EXTEND	EQU		$E0
     35 = 0000000000000014                               SC_CTRL		EQU		$14
     36 = 0000000000000011                               SC_ALT		EQU		$11
     37 = 0000000000000071                               SC_DEL		EQU		$71		; extend
     38 = 0000000000000058                               SC_LCTRL	EQU		$58
     39 = 0000000000000077                               SC_NUMLOCK	EQU		$77
     40 = 000000000000007E                               SC_SCROLLLOCK	EQU	$7E
     41 = 0000000000000058                               SC_CAPSLOCK	EQU		$58
                                           
     43 = 000000000000001F                               TEXTROWS	EQU		31
     44 = 0000000000000054                               TEXTCOLS	EQU		84
                                           
     46 = 0000000000000004                               TickCount	EQU		$4
     47 = 0000000000000008                               KeyState1	EQU		$8
     48 = 0000000000000009                               KeyState2	EQU		$9
     49 = 000000000000000A                               KeybdLEDs	EQU		$A
     50 = 000000000000000B                               KeybdWaitFlag	EQU	$B
     51 = 000000000000000C                               NumWorkArea	EQU		$C
                                           
                                           ; Range $10 to $1F reserved for hardware counters
     54 = 0000000000000010                               CNT0L		EQU		$10
     55 = 0000000000000011                               CNT0M		EQU		$11
     56 = 0000000000000012                               CNT0H		EQU		$12
     57 = 0000000000000020                               RangeStart	EQU		$20
     58 = 0000000000000024                               RangeEnd	EQU		$24
     59 = 0000000000000030                               CursorX		EQU		$30
     60 = 0000000000000032                               CursorY		EQU		$32
     61 = 0000000000000034                               VideoPos	EQU		$34
     62 = 0000000000000036                               NormAttr	EQU		$36
     63 = 0000000000000038                               StringPos	EQU		$38
     64 = 000000000000003C                               EscState	EQU		$3C
                                           
     66 = 00000000000003F0                               OutputVec	EQU		$03F0
                                           
     68 = 0000000000FD0000                               VIDBUF		EQU		$FD0000
     69 = 0000000000FEA000                               VIDREGS		EQU		$FEA000
     70 = 0000000000FEA100                               PRNG		EQU		$FEA100
     71 = 0000000000FEA110                               KEYBD		EQU		$FEA110
     72 = 0000000000FEA200                               FAC1		EQU		$FEA200
                                           
Finitron FT832 assembler   version 1.4   Mon Nov 09 14:42:19 2015     Page 1
supermon816.asm

                                           ;* ——————————————————————————————————————————————————————————————————————————————— *
                                           ;	.opt proc65c02,caseinsensitive
                                        	cpu	W65C02
                                        ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                                        ;*                                                                                 *
                                        ;*      SUPERMON 816 MACHINE LANGUAGE MONITOR FOR THE W65C816S MICROPROCESSOR      *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;*      Copyright ©1991-2014 by BCS Technology Limited.  All rights reserved.      *
                                        ;*                                                                                 *
                                        ;* Permission is hereby granted to use, copy, modify and distribute this software, *
                                        ;* provided this copyright notice remains in the source code and  proper  attribu- *
                                        ;* tion is given.  Redistribution, regardless of form, must be at no charge to the *
                                        ;* end  user.  This code or any part thereof, including any derivation, MAY NOT be *
                                        ;* incorporated into any package intended for sale,  unless written permission has * 
                                        ;* been given by the copyright holder.                                             *
                                        ;*                                                                                 *
                                        ;* THERE IS NO WARRANTY OF ANY KIND WITH THIS SOFTWARE.  The user assumes all risk *
                                        ;* in connection with the incorporation of this software into any system.          *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;* Supermon 816 is a salute to Jim Butterfield, who passed away on June 29, 2007.  *
                                        ;*                                                                                 *
                                        ;* Jim, who was the unofficial  spokesman for  Commodore  International during the *  
                                        ;* heyday of the company's 8 bit supremacy, scratch-developed the Supermon machine *
                                        ;* language monitor for the PET & CBM computers.   When the best-selling Commodore *
                                        ;* 64 was introduced, Jim adapted his software to the new machine & gave the adap- *
                                        ;* tation the name Supermon 64.   Commodore  subsequently  integrated a customized *
                                        ;* version of Supermon 64 into the C-128 to act as the resident M/L monitor.       *
                                        ;*                                                                                 *
                                        ;* Although Supermon 816 is not an adaptation of Supermon 64,  it was  decided  to *
                                        ;* keep the Supermon name alive, since Supermon 816's general operation & user in- *
                                        ;* terface is similar to that of Supermon 64.   Supermon 816 is 100 percent native *
                                        ;* mode 65C816 code & was developed from a blank canvas.                           *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;* This version customized for the RTF65002 test system                            *
                                        ;* Finitron.ca                                                                     *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;* Supermon 816 is a full featured monitor and supports the following operations:  *
                                        ;*                                                                                 *
                                        ;*     A — Assemble code                                                           *
                                        ;*     C — Compare memory regions                                                  *
                                        ;*     D — Disassemble code                                                        *
                                        ;*     F — Fill memory region (cannot span banks)                                  *
                                        ;*     G — Execute code (stops at BRK)                                             *
                                        ;*     H — Search (hunt) memory region                                             *
                                        ;*     J — Execute code as a subroutine (stops at BRK or RTS)                      *
                                        ;*     M — Dump & display memory range                                             *
                                        ;*     R — Dump & display 65C816 registers                                         *
                                        ;*     T — Copy (transfer) memory region                                           *
                                        ;*     X — Exit Supermon 816 & return to operating environment                     *
                                        ;*     > — Modify up to 32 bytes of memory                                         *
                                        ;*     ; — Modify 65C816 registers                                                 *
                                        ;*                                                                                 *
                                        ;* Supermon 816 accepts binary (%), octal (@), decimal (+) and hexadecimal ($) as  *
                                        ;* input for numeric parameters.  Additionally, the H and > operations accept an   *
                                        ;* ASCII string in place of numeric values by preceding the string with ', e.g.:   *
                                        ;*                                                                                 *
                                        ;*     h 042000 042FFF 'BCS Technology Limited                                     *
                                        ;*                                                                                 *
                                        ;* If no radix symbol is entered hex is assumed.                                   *
                                        ;*                                                                                 *
                                        ;* Numeric conversion is also available.  For example, typing:                     *
                                        ;*                                                                                 *
                                        ;*     +1234567 <CR>                                                               *
                                        ;*                                                                                 *
                                        ;* will display:                                                                   *
                                        ;*                                                                                 *
                                        ;*         $12D687                                                                 *
                                        ;*         +1234567                                                                *
                                        ;*         @04553207                                                               *
                                        ;*         %100101101011010000111                                                  *
                                        ;*                                                                                 *
                                        ;* In the above example, <CR> means the console keyboard's return or enter key.    *
                                        ;*                                                                                 *
                                        ;* All numeric values are internally processed as 32 bit unsigned integers.  Addr- *
                                        ;* esses may be entered as 8, 16 or 24 bit values.  During instruction assembly,   *
                                        ;* immediate mode operands may be forced to 16 bits by preceding the operand with  *
                                        ;* an exclamation point if the instruction can accept a 16 bit operand, e.g.:      *
                                        ;*                                                                                 *
                                        ;*     a 1f2000 lda !#4                                                            *
                                        ;*                                                                                 *
                                        ;* The above will assemble as:                                                     *
                                        ;*                                                                                 *
                                        ;*     A 1F2000  A9 04 00     LDA #$0004                                           *
                                        ;*                                                                                 *
                                        ;* Entering:                                                                       *
                                        ;*                                                                                 *
                                        ;*     a 1f2000 ldx !#+157                                                         *
                                        ;*                                                                                 *
                                        ;* will assemble as:                                                               *
                                        ;*                                                                                 *
                                        ;*     A 1F2000  A2 9D 00     LDX #$009D                                           *
                                        ;*                                                                                 *
                                        ;* Absent the ! in the operand field, the above would have been assembled as:      *
                                        ;*                                                                                 *
                                        ;*     A 1F2000  A2 9D        LDX #$9D                                             *
                                        ;*                                                                                 *
                                        ;* If an immediate mode operand is greater than $FF assembly of a 16 bit operand   *
                                        ;* is implied.                                                                     *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;* A Note on the PEA & PEI Instructions                                            *
                                        ;* ————————————————————————————————————                                            *
                                        ;*                                                                                 *
                                        ;* The Eyes and Lichty programming manual uses the following syntax for the PEA    *
                                        ;* and PEI instructions:                                                           *
                                        ;*                                                                                 *
                                        ;*     PEA <operand>                                                               *
                                        ;*     PEI (<operand>)                                                             *
                                        ;*                                                                                 *
                                        ;* The WDC data sheet that was published at the time of the 65C816's release in    *
                                        ;* 1984 does not indicate a recommended or preferred syntax for any of the above   *
                                        ;* instructions.  PEA pushes its operand to the stack and hence operates like any  *
                                        ;* other immediate mode instruction, in that the operand is the data (however, PEA *
                                        ;* doesn't affect the status register).  Similarly, PEI pushes the 16 bit value    *
                                        ;* stored at <operand> and <operand>+1, and hence operates like any other direct   *
                                        ;* (zero) page instruction, again without affecting the status register.           *
                                        ;*                                                                                 *
                                        ;* BCS Technology Limited is of the opinion that the developer of the ORCA/M as-   *
                                        ;* sembler, which is the assembler referred to in the Eyes and Lichty manual, mis- *
                                        ;* understood how PEA and PEI behave during runtime, and hence chose an incorrect  *
                                        ;* syntax for these two instructions.  This error was subsequently carried forward *
                                        ;* by Eyes and Lichty.                                                             *
                                        ;*                                                                                 *
                                        ;* Supermon 816's assembler uses the following syntax for PEA and PEI:             *
                                        ;*                                                                                 *
                                        ;*     PEA #<operand>                                                              *
                                        ;*     PEI <operand>                                                               *
                                        ;*                                                                                 *
                                        ;* The operand for PEA is treated as a 16 bit value, even if entered as an 8 bit   *
                                        ;* value.  The operand for PEI must be 8 bits.                                     *
                                        ;*                                                                                 *
                                        ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                                        ;
                                        ;	* * * * * * * * * * * *
                                        ;	* VERSION INFORMATION *
                                        ;	* * * * * * * * * * * *
                                        ;
                                        softvers .macro                ;software version — change with each revision...
                                                 .byte "1"             ;major
                                                 .byte "."
                                                 .byte "0"             ;minor
                                                 .byte "."
                                                 .byte "1"             ;revision
                                                 .endm
                                        ;
                                        ;REVISION TABLE
                                        ;
                                        ;Ver  Rev Date    Description
                                        ;———————————————————————————————————————————————————————————————————————————————
                                        ;1.0  2013/11/01  A) Original derived from the POC V1.1 single-board computer
                                        ;                    firmware.
                                        ;     2013/11/04  A) Fixed a problem where the B-accumulator wasn't always being
                                        ;                    be copied to shadow storage after return from execution of
                                        ;                    a J command.
                                        ;———————————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;
                                        ;	        COMMENT ABBREVIATIONS
                                        ;	————————————————————————————————————————————————————
                                        ;	  BCD   binary-coded decimal
                                        ;	   DP   direct page or page zero
                                        ;	  EOF   end-of-field
                                        ;	  EOI   end-of-input
                                        ;	  LSB   least significant byte/bit
                                        ;	  LSD   least significant digit
                                        ;	  LSN   least significant nybble
                                        ;	  LSW   least significant word
                                        ;	  MPU   microprocessor
                                        ;	  MSB   most significant byte/bit
                                        ;	  MSD   most significant digit
                                        ;	  MSN   most significant nybble
                                        ;	  MSW   most-significant word
                                        ;	  RAM   random access memory
                                        ;	   WS   whitespace, i.e., blanks & horizontal tabs
                                        ;	————————————————————————————————————————————————————
                                        ;	A word is defined as 16 bits.
                                        ;
                                        ;	   MPU REGISTER SYMBOLS
                                        ;	——————————————————————————
                                        ;	   .A   accumulator LSB
                                        ;	   .B   accumulator MSB
                                        ;	   .C   16 bit accumulator
                                        ;	   .X   X-index
                                        ;	   .Y   Y-index
                                        ;	   DB   data bank
                                        ;	   DP   direct page
                                        ;	   PB   program bank
                                        ;	   PC   program counter
                                        ;	   SP   stack pointer
                                        ;	   SR   MPU status
                                        ;	————————————————————————————
                                        ;
                                        ;	  MPU STATUS REGISTER SYMBOLS
                                        ;	———————————————————————————————
                                        ;	    C   carry
                                        ;	    D   decimal mode
                                        ;	    I   maskable interrupts
                                        ;	    m   accumulator/memory size
                                        ;	    N   result negative
                                        ;	    V   sign overflow
                                        ;	    x   index registers size
                                        ;	    Z   result zero
                                        ;	———————————————————————————————
                                        ;
                                        ;================================================================================
                                        ;
                                        ;SYSTEM INTERFACE DEFINITIONS
                                        ;
                                        ;	——————————————————————————————————————————————————————————————————
                                        ;	This section defines the interface between Supermon 816 & the host
                                        ;	system.   Change these definitions to suit your system, but do not
                                        ;	change any label names.  All definitions must have valid values in
                                        ;	order to assemble Supermon 816.
                                        ;	——————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————
    289 = 000000000000C000                            _origin_ =$00C000              ;assembly address...
                                        ;
                                        ;	Set _ORIGIN_ to Supermon 816's desired assembly address.
                                        ;	————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    295 = 000000000000F403                            vecexit  =$00F403              ;exit to environment address...
                                        ;
                                        ;	Set VECEXIT to where Supermon 816 should go when it exits.  Supermon 816
                                        ;	will do a JML (long jump) to this address, which means VECEXIT must be a
                                        ;	24 bit address.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    303 = 0000000000000102                            vecbrki  =$0102                ;BRK handler indirect vector...
    304 = 0000000000000105                            vecbrkia =$0105                ;system indirect BRK vector
                                        ;
                                        ;	Supermon 816 will modify this vector so that execution of a BRK instruc-
                                        ;	tion is intercepted & the registers  are  captured.   Your BRK front end
                                        ;	should jump through this vector after pushing the registers as follows:
                                        ;
                                        ;	         phb                   ;save DB
                                        ;	         phd                   ;save DP
                                        ;	         rep #%00110000        ;16 bit registers
                                        ;	         pha
                                        ;	         phx
                                        ;	         phy
                                        ;	         jmp (vecbrki)         ;indirect vector
                                        ;
                                        ;	When a G or J command is issued, the above sequence will be reversed be-
                                        ;	fore a jump is made to the code to be executed.  Upon exit from Supermon
                                        ;	816, the original address at VECBRKI will be restored.
                                        ;
                                        ;	If your BRK front end doesn't conform to the above you will have to mod-
                                        ;	ify Supermon 816 to accommodate the differences.  The most likely needed
                                        ;	changes will be in the order in which registers are pushed to the stack.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    328 = 0000000000003FFF                            hwstack  =$3fff                ;top of hardware stack...
                                        ;
                                        ;	Supermon 816 initializes the stack pointer to this address when the cold
                                        ;	start at MONCOLD is called to enter the monitor.  The stack pointer will
                                        ;	be undisturbed when entry into Supermon 816 is through JMONBRK (see jump
                                        ;	table definitions).
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    337 = 0000000000000080                            zeropage =$80                  ;Supermon 816's direct page...
                                        ;
                                        ;	Supermon 816 uses direct page starting at this address.  Be sure that no
                                        ;	conflict occurs with other software.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    344 = 000000000000F400                            getcha   =$F400                ;get keystroke from console...
                                        ;
                                        ;	GETCHA refers to an operating system API call that returns a keystroke
                                        ;	in the 8 bit accumulator.  Supermon 816  assumes that GETCHA is a non-
                                        ;	blocking subroutine & returns with carry clear to indicate that a key-
                                        ;	stroke is in .A, or with carry set to indicate that no keystroke was
                                        ;	available.  GETCHA will be called with a JSR instruction.
                                        ;
                                        ;	Supermon 816 expects .X & .Y to be preserved upon return from GETCHA.
                                        ;	You may have to modify Supermon 816 at all calls to GETCHA if your "get
                                        ;	keystroke" routine works differently than described.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    358 = 000000000000F406                            putcha   =$F406                ;print character on console...
                                        ;
                                        ;	PUTCHA refers to an operating system API call that prints a character to
                                        ;	the console screen.  The character to be printed will be in .A, which
                                        ;	will be set to 8-bit width.  Supermon 816 assumes that PUTCHA will block
                                        ;	until the character can be processed.  PUTCHA will be called with a JSR
                                        ;	instructions.
                                        ;
                                        ;	Supermon 816 expects .X & .Y to be preserved upon return from PUTCHA.
                                        ;	You may have to modify Supermon 816 at all calls to PUTCHA if your "put
                                        ;	character" routine works differently than described.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    372 = 0000000000000003                            stopkey  =$03                  ;display abort key...
                                        ;
                                        ;	Supermon 816 will poll for a "stop key" during display operations, such
                                        ;	as code disassembly & memory dumps, so as to abort further processing &
                                        ;	return to the command prompt.  STOPKEY must be defined with the ASCII
                                        ;	value that the "stop key" will emit when typed.  The polling is via a
                                        ;	call to GETCHA (described above).  The default STOPKEY definition of $03
                                        ;	is for ASCII <ETX> or [Ctrl-C].
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
    382 = 0000000000000200                            ibuffer  =$000200               ;input buffer &...
    383 = 00000251                      auxbuf   =ibuffer+s_ibuf+1 ;auxiliary buffer...
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	Supermon 816 will use the above definitions for input buffers.  These
                                        ;	buffers may be located anywhere in RAM that is convenient.  The buffers
                                        ;	are stateless, which means that unless Supermon 816 has control of your
                                        ;	system, they may be overwritten without consequence.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;================================================================================
                                        ;
                                        ;W65C816S INSTRUCTION SYNTHESIS MACROS —— !!!!! DO NOT EDIT !!!!!
                                        ;
                                        _asm24_  .macro .ad
                                                 .byte <.ad,>.ad,.ad >> 16
                                                 .endm
                                        ;
                                        brl      .macro .ad
                                        .ba      =*+3
                                                 .byte $82
                                                 .word .ad-.ba
                                                 .endm
                                        ;
                                        ; jml is supported for the RTF65002 in 65c02 mode. And the opcode is supported
                                        ; by the assembler.
                                        ;jml      .macro .ad
                                        ; ;        .byte $5c
                                        ;         _asm24_ .ad
                                        ;         .endm
                                        ;
                                        mvn      .macro .s,.d
                                                 .byte $54,.d,.s
                                                 .endm
                                        ;
                                        mvp      .macro .s,.d
                                                 .byte $44,.d,.s
                                                 .endm
                                        ;
                                        pea      .macro .op
                                                 .byte $f4
                                                 .word .op
                                                 .endm
                                        ;
                                        phb      .macro
                                                 .byte $8b
                                                 .endm
                                        ;
                                        phk      .macro
                                                 .byte $4b
                                                 .endm
                                        ;
                                        plb      .macro
                                                 .byte $ab
                                                 .endm
                                        ;
                                        rep      .macro .op
                                                 .byte $c2,.op
                                                 .endm
                                        ;
                                        sep      .macro .op
                                                 .byte $e2,.op
                                                 .endm
                                        ;
                                        tcd      .macro
                                                 .byte $5b
                                                 .endm
                                        ;
                                        tcs      .macro
                                                 .byte $1b
                                                 .endm
                                        ;
                                        tdc      .macro
                                                 .byte $7b
                                                 .endm
                                        ;
                                        tsc      .macro
                                                 .byte $3b
                                                 .endm
                                        ;
                                        txy      .macro
                                                 .byte $9b
                                                 .endm
                                        ;
                                        tyx      .macro
                                                 .byte $bb
                                                 .endm
                                        ;
                                        wai      .macro
                                                 .byte $cb
                                                 .endm
                                        ;
                                        xba      .macro
                                                 .byte $eb
                                                 .endm
                                        ;
                                        adcw     .macro .op
                                                 adc #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        andw     .macro .op
                                                 and #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        bitw     .macro .op
                                                 bit #<.op
                                                 .byte >.op
                                                 .endm
                                        ;         
                                        cmpw     .macro .op
                                                 cmp #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        cpxw     .macro .op
                                                 cpx #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        cpyw     .macro .op
                                                 cpy #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        eorw     .macro .op
                                                 eor #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        ldaw     .macro .op
                                                 lda #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        ldxw     .macro .op
                                                 ldx #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        ldyw     .macro .op
                                                 ldy #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        oraw     .macro .op
                                                 ora #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        sbcw     .macro .op
                                                 sbc #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        ldalx    .macro .ad
                                                 .byte $+         .byte a_esc,"("
                                     +            .byte a_esc,"G4"
                                        
                                     +            .byte <.ad,>.ad,.ad >> 16
                                        
                                                 .endm
                                        ;
                                        adcil    .macro .ad
                                                 .byte $67,.ad
                                                 .endm
                                        ;
                                        adcily   .macro .ad
                                                 .byte $77,.ad
                                                 .endm
                                        ;
                                        andil    .macro .ad
                                                 .byte $27,.ad
                                                 .endm
                                        ;
                                        andily   .macro .ad
                                                 .byte $37,.ad
                                                 .endm
                                        ;
                                        cmpil    .macro .ad
                                                 .byte $c7,.ad
                                                 .endm
                                        ;
                                        cmpily   .macro .ad
                                                 .byte $d7,.ad
                                                 .endm
                                        ;
                                        eoril    .macro .ad
                                                 .byte $47,.ad
                                                 .endm
                                        ;
                                        eorily   .macro .ad
                                                 .byte $57,.ad
                                                 .endm
                                        ;
                                        ldail    .macro .ad
                                                 .byte $a7,.ad
                                                 .endm
                                        ;
                                        ldaily   .macro .ad
                                                 .byte $b7,.ad
                                                 .endm
                                        ;
                                        orail    .macro .ad
                                                 .byte $07,.ad
                                                 .endm
                                        ;
                                        oraily   .macro .ad
                                                 .byte $17,.ad
                                                 .endm
                                        ;
                                        sbcil    .macro .ad
                                                 .byte $e7,.ad
                                                 .endm
                                        ;
                                        sbcily   .macro .ad
                                                 .byte $f7,.ad
                                                 .endm
                                        ;
                                        stail    .macro .ad
                                                 .byte $87,.ad
                                                 .endm
                                        ;
                                        staily   .macro .ad
                                                 .byte $97,.ad
                                                 .endm
                                        ;
                                        adcs     .macro .of
                                                 .byte $63,.of
                                                 .endm
                                        ;
                                        adcsi    .macro .of
                                                 .byte $73,.of
                                                 .endm
                                        ;
                                        ands     .macro .of
                                                 .byte $23,.of
                                                 .endm
                                        ;
                                        andsi    .macro .of
                                                 .byte $33,.of
                                                 .endm
                                        ;
                                        cmps     .macro .of
                                                 .byte $c3,.of
                                                 .endm
                                        ;
                                        cmpsi    .macro .of
                                                 .byte $d3,.of
                                                 .endm
                                        ;
                                        eors     .macro .of
                                                 .byte $43,.of
                                                 .endm
                                        ;
                                        eorsi    .macro .of
                                                 .byte $53,.of
                                                 .endm
                                        ;
                                        ldas     .macro .of
                                                 .byte $a3,.of
                                                 .endm
                                        ;
                                        ldasi    .macro .of
                                                 .byte $b3,.of
                                                 .endm
                                        ;
                                        oras     .macro .of
                                                 .byte $03,.of
                                                 .endm
                                        ;
                                        orasi    .macro .of
                                                 .byte $13,.of
                                                 .endm
                                        ;
                                        sbcs     .macro .of
                                                 .byte $e3,.of
                                                 .endm
                                        ;
                                        sbcsi    .macro .of
                                                 .byte $f3,.of
                                                 .endm
                                        ;
                                        stas     .macro .of
                                                 .byte $83,.of
                                                 .endm
                                        ;
                                        stasi    .macro .of
                                                 .byte $93,.of
                                                 .endm
                                        ;
                                        longa    .macro
                                                 .byte $c2,$20
                                                 .endm
                                        ;
                                        longr    .macro
                                                 .byte $c2,$30
                                                 .endm
                                        ;
                                        longx    .macro
                                                 .byte $c2,$10
                                                 .endm
                                        ;
                                        shorta   .macro
                                                 .byte $e2,$20
                                                 .endm
                                        ;
                                        shorti   .macro
                                                 .byte $e2,$10
                                                 .endm
                                        ;
                                        shortr   .macro
                                                 .byte $e2,$30
                                                 .endm
                                        ;
                                        shortx   .macro
                                                 .byte $e2,$10
                                                 .endm
                                        ;
                                        ;================================================================================
                                        ;
                                        ;CONSOLE DISPLAY CONTROL MACROS
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	The following macros execute terminal  control procedures  that  perform
                                        ;	such tasks as clearing the screen,  switching  between  normal & reverse
                                        ;	video, etc.  These macros are for WYSE 60 & compatible displays, such as
                                        ;	the WYSE 150, WYSE 160, WYSE 325 & WYSE GPT.   Only the functions needed
                                        ;	by Supermon 816 are included.
                                        ;
                                        ;	If your console is not WYSE 60 compatible, you will need to  edit  these
                                        ;	macros as required to control your particular console or terminal.  Note
                                        ;	that in some cases one macro may call another.  Exercise caution in your
                                        ;	edits to avoid introducing display bugs.
                                        ;
                                        ;	If your console display cannot execute one of these procedures,  such as
                                        ;	'CL' (clear to end of line), you will have to develop an alternative.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;
                                        ;	clearing data...
                                        ;
                                        bs       .macro                ;destructive backspace
                                                 .byte a_bs
                                     +            .byte a_esc,"W"
                                        
                                                 .endm
                                        ;
                                        cl       .macro                ;clear to end of line 
                                                 .byte a_esc,"T"
                                                 .endm
                                        ;
                                        ;
                                        ;	cursor control...
                                        ;
                                        cn       .macro                ;cursor on
                                                 .byte a_esc,"`1"
                                                 .endm
                                        ;
                                        co       .macro                ;cursor off
                                                 .byte a_esc,"`0"
                                                 .endm
                                        ;
                                        cr       .macro                ;carriage return
                                                 .byte a_cr
                                                 .endm
                                        ;
                                        lf       .macro                ;carriage return/line feed
                                     +            .byte a_cr
                                        
                                                 .byte a_lf
                                                 .endm
                                        ;
                                        ;
                                        ;	display attributes...
                                        ;
                                        bf       .macro                ;reverse foreground
                                                 .byte a_esc,"("
                                                 .byte a_esc,"G4"
                                                 .endm
                                        ;
                                        er       .macro                ;enable normal foreground
                                                 .byte a_esc,"("
                                                 .byte a_esc,"G0"
                                                 .endm
                                        ;
                                        sf       .macro                ;set foreground
                                                 .byte a_esc,"("
                                                 .byte a_esc,"G0"
                                                 .endm
                                        ;
                                        ;
                                        ;	display editing...
                                        ;
                                        dcuc     .macro                ;delete char under cursor
                                                 .byte a_esc,"W"
                                                 .endm
                                        ;
                                        ;
                                        ;	miscellaneous control...
                                        ;
                                        rb       .macro                ;ring "bell"
                                                 .byte a_bel
                                                 .endm
                                        ;
                                        ;================================================================================
                                        ;
                                        ;ASCII CONTROL DEFINITIONS (menmonic order)
                                        ;
    792 = 0000000000000007                            a_bel    =$07                  ;<BEL> alert/ring bell
    793 = 0000000000000008                            a_bs     =$08                  ;<BS>  backspace
    794 = 000000000000000D                            a_cr     =$0d                  ;<CR>  carriage return
    795 = 000000000000007F                            a_del    =$7f                  ;<DEL> delete
    796 = 000000000000001B                            a_esc    =$1b                  ;<ESC> escape
    797 = 0000000000000009                            a_ht     =$09                  ;<HT>  horizontal tabulation
    798 = 000000000000000A                            a_lf     =$0a                  ;<LF>  linefeed
                                        ;
                                        ;
                                        ;	miscellaneous (description order)...
                                        ;
    803 = 20                            a_blank  =' '                  ;blank (whitespace)
    804 = 7A                            a_asclch ='z'                  ;end of lowercase ASCII
    805 = 000000000000005F                            a_lctouc =$5f                  ;LC to UC conversion mask
    806 = 61                            a_asclcl ='a'                  ;start of lowercase ASCII
                                        ;
                                        ;================================================================================
                                        ;
                                        ;GLOBAL ATOMIC CONSTANTS
                                        ;
                                        ;
                                        ;	data type sizes...
                                        ;
    815 = 0000000000000001                            s_byte   =1                    ;byte
    816 = 0000000000000002                            s_word   =2                    ;word (16 bits)
    817 = 0000000000000003                            s_xword  =3                    ;extended word (24 bits)
    818 = 0000000000000004                            s_dword  =4                    ;double word (32 bits)
    819 = 0000000000000100                            s_rampag =$0100                ;65xx RAM page
                                        ;
                                        ;
                                        ;	data type sizes in bits...
                                        ;
    824 = 0000000000000008                            s_bibyte =8                    ;byte
    825 = 0000000000000004                            s_bnybbl =4                    ;nybble
                                        ;
                                        ;
                                        ;	miscellaneous...
                                        ;
    830 = 000000000000002C                            bitabs   =$2c                  ;absolute BIT opcode
    831 = 0000000000000024                            bitzp    =$24                  ;zero page BIT opcode
                                        ;
                                        ;================================================================================
                                        ;
                                        ;W65C816S NATIVE MODE STATUS REGISTER DEFINITIONS
                                        ;
    837 = 00000001                      s_mpudbx =s_byte               ;data bank size
    838 = 00000002                      s_mpudpx =s_word               ;direct page size
    839 = 00000001                      s_mpupbx =s_byte               ;program bank size
    840 = 00000002                      s_mpupcx =s_word               ;program counter size
    841 = 00000002                      s_mpuspx =s_word               ;stack pointer size
    842 = 00000001                      s_mpusrx =s_byte               ;status size
                                        ;
                                        ;
                                        ;	status register flags...
                                        ;
    847 = 0000000000000001                            sr_car   =%00000001            ;C
    848 = 00000002                      sr_zer   =sr_car << 1          ;Z
    849 = 00000004                      sr_irq   =sr_zer << 1          ;I
    850 = 00000008                      sr_bdm   =sr_irq << 1          ;D
    851 = 00000010                      sr_ixw   =sr_bdm << 1          ;x
    852 = 00000020                      sr_amw   =sr_ixw << 1          ;m
    853 = 00000040                      sr_ovl   =sr_amw << 1          ;V
    854 = 00000080                      sr_neg   =sr_ovl << 1          ;N
                                        ;
                                        ;	NVmxDIZC
                                        ;	xxxxxxxx
                                        ;	||||||||
                                        ;	|||||||+———> 1 = carry set/generated
                                        ;	||||||+————> 1 = result = zero
                                        ;	|||||+—————> 1 = IRQs ignored
                                        ;	||||+——————> 0 = binary arithmetic mode
                                        ;	||||         1 = decimal arithmetic mode
                                        ;	|||+———————> 0 = 16 bit index
                                        ;	|||          1 = 8 bit index
                                        ;	||+————————> 0 = 16 bit .A & memory
                                        ;	||           1 = 8 bit .A & memory
                                        ;	|+—————————> 1 = sign overflow
                                        ;	+——————————> 1 = result = negative
                                        ;
                                        ;================================================================================
                                        ;
                                        ;"SIZE-OF" CONSTANTS
                                        ;
    875 = 00000003                      s_addr   =s_xword              ;24 bit address
    876 = 0000000000000020                            s_auxbuf =32                   ;auxiliary buffer
    877 = 0000000000000050                            s_ibuf   =80                   ;input buffer
    878 = 0000000000000003                            s_mnemon =3                    ;MPU ASCII mnemonic
    879 = 0000000000000002                            s_mnepck =2                    ;MPU encoded mnemonic
    880 = 0000000000000003                            s_mvinst =3                    ;MVN/MVP instruction
    881 = 00000001                      s_opcode =s_byte               ;MPU opcode
    882 = 00000003                      s_oper   =s_xword              ;operand
    883 = 00000004                      s_pfac   =s_dword              ;primary math accumulator
    884 = 00000006                      s_sfac   =s_dword+s_word       ;secondary math accumulators
                                        ;
                                        ;================================================================================
                                        ;
                                        ;"NUMBER-OF" CONSTANTS
                                        ;
    890 = 0000000000000015                            n_dbytes =21                   ;default disassembly bytes
    891 = 0000000000000008                            n_dump   =8                    ;bytes per memory dump line
    892 = 000000FF                      n_mbytes =s_rampag-1           ;default memory dump bytes
    893 = 0000000000000008                            n_hccols =8                    ;compare/hunt display columns
    894 = 00000009                      n_opcols =3*s_oper             ;disassembly operand columns
    895 = 0000000000000004                            n_opslsr =4                    ;LSRs to extract instruction size
    896 = 0000000000000005                            n_shfenc =5                    ;shifts to encode/decode mnemonic
                                        ;
                                        ;================================================================================
                                        ;
                                        ;NUMERIC CONVERSION CONSTANTS
                                        ;
    902 = 0000000000000006                            a_hexdec ='A'-'9'-2            ;hex to decimal difference
    903 = 25                            c_bin    ='%'                  ;binary prefix
    904 = 2B                            c_dec    ='+'                  ;decimal prefix
    905 = 24                            c_hex    ='$'                  ;hexadecimal prefix
    906 = 40                            c_oct    ='@'                  ;octal prefix
    907 = 66                            k_hex    ='f'                  ;hex ASCII conversion
    908 = 00000020                      m_bits   =s_pfac*s_bibyte      ;operand bit size
    909 = 00000030                      m_cbits  =s_sfac*s_bibyte      ;workspace bit size
    910 = 000000000000000F                            bcdumask =%00001111            ;isolate BCD units mask
    911 = 0000000000000030                            btoamask =%00110000            ;binary to ASCII mask
                                        ;
                                        ;================================================================================
                                        ;
                                        ;ASSEMBLER/DISASSEMBLER CONSTANTS
                                        ;
    917 = 3F                            a_mnecvt ='?'                  ;encoded mnemonic conversion base
    918 = 000000000000001F                            aimmaska =%00011111            ;.A immediate opcode test #1
    919 = 0000000000000009                            aimmaskb =%00001001            ;.A immediate opcode test #2
    920 = 41                            asmprfx  ='A'                  ;assemble code prefix
    921 = 0000000000000009                            ascprmct =9                    ;assembler prompt "size-of"
    922 = 2E                            disprfx  ='.'                  ;disassemble code prefix
    923 = 00000000000000C0                            flimmask =%11000000            ;force long immediate flag
    924 = 0000000000000054                            opc_mvn  =$54                  ;MVN opcode
    925 = 0000000000000044                            opc_mvp  =$44                  ;MVP opcode
    926 = 00000000000000C2                            opc_rep  =$c2                  ;REP opcode
    927 = 00000000000000E2                            opc_sep  =$e2                  ;SEP opcode
    928 = 00000030                      pfmxmask =sr_amw | sr_ixw      ;MPU m & x flag bits mask
                                        ;
                                        ;
                                        ;	assembler prompt buffer offsets...
                                        ;
    933 = 00000002                      apadrbkh =s_word               ;instruction address bank MSN
    934 = 00000003                      apadrbkl =apadrbkh+s_byte      ;instruction address bank LSN
    935 = 00000004                      apadrmbh =apadrbkl+s_byte      ;instruction address MSB MSN
    936 = 00000005                      apadrmbl =apadrmbh+s_byte      ;instruction address MSB LSN
    937 = 00000006                      apadrlbh =apadrmbl+s_byte      ;instruction address LSB MSN
    938 = 00000007                      apadrlbl =apadrlbh+s_byte      ;instruction address LSB LSN
                                        ;
                                        ;
                                        ;	addressing mode preamble symbols...
                                        ;
    943 = 21                            amp_flim ='!'                  ;force long immediate
    944 = 23                            amp_imm  ='#'                  ;immediate
    945 = 28                            amp_ind  ='('                  ;indirect
    946 = 5B                            amp_indl ='['                  ;indirect long
                                        ;
                                        ;
                                        ;	addressing mode symbolic translation indices...
                                        ;
    951 = 0000000000000000                            am_nam   =%0000                ;(0)  no symbol
    952 = 0000000000000001                            am_imm   =%0001                ;(1)  #
    953 = 0000000000000002                            am_adrx  =%0010                ;(2)  dp,X or addr,X
    954 = 0000000000000003                            am_adry  =%0011                ;(3)  dp,Y or addr,Y
    955 = 0000000000000004                            am_ind   =%0100                ;(4)  (dp) or (addr)
    956 = 0000000000000005                            am_indl  =%0101                ;(5)  [dp] or [addr]
    957 = 0000000000000006                            am_indly =%0110                ;(6)  [dp],Y
    958 = 0000000000000007                            am_indx  =%0111                ;(7)  (dp,X) or (addr,X)
    959 = 0000000000000008                            am_indy  =%1000                ;(8)  (dp),Y
    960 = 0000000000000009                            am_stk   =%1001                ;(9)  offset,S
    961 = 000000000000000A                            am_stky  =%1010                ;(10) (offset,S),Y
    962 = 000000000000000B                            am_move  =%1011                ;(11) MVN/MVP sbnk,dbnk
                                        ;
                                        ;
                                        ;	operand size translation indices...
                                        ;
    967 = 0000000000000000                            ops0     =%0000 << 4           ;no operand
    968 = 0000000000000010                            ops1     =%0001 << 4           ;8 bit operand
    969 = 0000000000000020                            ops2     =%0010 << 4           ;16 bit operand
    970 = 0000000000000030                            ops3     =%0011 << 4           ;24 bit operand
    971 = 0000000000000050                            bop1     =%0101 << 4           ;8 bit relative branch
    972 = 0000000000000060                            bop2     =%0110 << 4           ;16 bit relative branch
    973 = 0000000000000090                            vops     =%1001 << 4           ;8 or 16 bit operand
                                        ;
                                        ;
                                        ;	operand size & addressing mode extraction masks...
                                        ;
    978 = 000000000000000F                            amodmask =%00001111            ;addressing mode index
    979 = 0000000000000030                            opsmask  =%00110000            ;operand size
    980 = 00000000000000C0                            vopsmask =%11000000            ;BOPx & VOPS flag bits
                                        ;
                                        ;
                                        ;	instruction mnemonic encoding...
                                        ;
    985 = 0000000000002144                            mne_adc  =$2144                ;ADC
    986 = 0000000000002BC4                            mne_and  =$2bc4                ;AND
    987 = 0000000000006D04                            mne_asl  =$6d04                ;ASL
    988 = 0000000000002106                            mne_bcc  =$2106                ;BCC
    989 = 000000000000A106                            mne_bcs  =$a106                ;BCS
    990 = 0000000000009186                            mne_beq  =$9186                ;BEQ
    991 = 000000000000AA86                            mne_bit  =$aa86                ;BIT
    992 = 0000000000005386                            mne_bmi  =$5386                ;BMI
    993 = 00000000000033C6                            mne_bne  =$33c6                ;BNE
    994 = 0000000000006C46                            mne_bpl  =$6c46                ;BPL
    995 = 00000000000014C6                            mne_bra  =$14c6                ;BRA
    996 = 00000000000064C6                            mne_brk  =$64c6                ;BRK
    997 = 0000000000006CC6                            mne_brl  =$6cc6                ;BRL
    998 = 00000000000025C6                            mne_bvc  =$25c6                ;BVC
    999 = 000000000000A5C6                            mne_bvs  =$a5c6                ;BVS
   1000 = 0000000000002348                            mne_clc  =$2348                ;CLC
   1001 = 0000000000002B48                            mne_cld  =$2b48                ;CLD
   1002 = 0000000000005348                            mne_cli  =$5348                ;CLI
   1003 = 000000000000BB48                            mne_clv  =$bb48                ;CLV
   1004 = 0000000000008B88                            mne_cmp  =$8b88                ;CMP
   1005 = 0000000000008C08                            mne_cop  =$8c08                ;COP
   1006 = 000000000000CC48                            mne_cpx  =$cc48                ;CPX
   1007 = 000000000000D448                            mne_cpy  =$d448                ;CPY
   1008 = 000000000000218A                            mne_dec  =$218a                ;DEC
   1009 = 000000000000C98A                            mne_dex  =$c98a                ;DEX
   1010 = 000000000000D18A                            mne_dey  =$d18a                ;DEY
   1011 = 0000000000009C0C                            mne_eor  =$9c0c                ;EOR
   1012 = 00000000000023D4                            mne_inc  =$23d4                ;INC
   1013 = 000000000000CBD4                            mne_inx  =$cbd4                ;INX
   1014 = 000000000000D3D4                            mne_iny  =$d3d4                ;INY
   1015 = 0000000000006B96                            mne_jml  =$6b96                ;JML
   1016 = 0000000000008B96                            mne_jmp  =$8b96                ;JMP
   1017 = 0000000000006D16                            mne_jsl  =$6d16                ;JSL
   1018 = 0000000000009D16                            mne_jsr  =$9d16                ;JSR
   1019 = 000000000000115A                            mne_lda  =$115a                ;LDA
   1020 = 000000000000C95A                            mne_ldx  =$c95a                ;LDX
   1021 = 000000000000D15A                            mne_ldy  =$d15a                ;LDY
   1022 = 0000000000009D1A                            mne_lsr  =$9d1a                ;LSR
   1023 = 0000000000007DDC                            mne_mvn  =$7ddc                ;MVN
   1024 = 0000000000008DDC                            mne_mvp  =$8ddc                ;MVP
   1025 = 0000000000008C1E                            mne_nop  =$8c1e                ;NOP
   1026 = 00000000000014E0                            mne_ora  =$14e0                ;ORA
   1027 = 00000000000011A2                            mne_pea  =$11a2                ;PEA
   1028 = 00000000000051A2                            mne_pei  =$51a2                ;PEI
   1029 = 00000000000099A2                            mne_per  =$99a2                ;PER
   1030 = 0000000000001262                            mne_pha  =$1262                ;PHA
   1031 = 0000000000001A62                            mne_phb  =$1a62                ;PHB
   1032 = 0000000000002A62                            mne_phd  =$2a62                ;PHD
   1033 = 0000000000006262                            mne_phk  =$6262                ;PHK
   1034 = 0000000000008A62                            mne_php  =$8a62                ;PHP
   1035 = 000000000000CA62                            mne_phx  =$ca62                ;PHX
   1036 = 000000000000D262                            mne_phy  =$d262                ;PHY
   1037 = 0000000000001362                            mne_pla  =$1362                ;PLA
   1038 = 0000000000001B62                            mne_plb  =$1b62                ;PLB
   1039 = 0000000000002B62                            mne_pld  =$2b62                ;PLD
   1040 = 0000000000008B62                            mne_plp  =$8b62                ;PLP
   1041 = 000000000000CB62                            mne_plx  =$cb62                ;PLX
   1042 = 000000000000D362                            mne_ply  =$d362                ;PLY
   1043 = 00000000000089A6                            mne_rep  =$89a6                ;REP
   1044 = 0000000000006C26                            mne_rol  =$6c26                ;ROL
   1045 = 0000000000009C26                            mne_ror  =$9c26                ;ROR
   1046 = 0000000000005566                            mne_rti  =$5566                ;RTI
   1047 = 0000000000006D66                            mne_rtl  =$6d66                ;RTL
   1048 = 000000000000A566                            mne_rts  =$a566                ;RTS
   1049 = 00000000000020E8                            mne_sbc  =$20e8                ;SBC
   1050 = 00000000000021A8                            mne_sec  =$21a8                ;SEC
   1051 = 00000000000029A8                            mne_sed  =$29a8                ;SED
   1052 = 00000000000051A8                            mne_sei  =$51a8                ;SEI
   1053 = 00000000000089A8                            mne_sep  =$89a8                ;SEP
   1054 = 0000000000001568                            mne_sta  =$1568                ;STA
   1055 = 0000000000008D68                            mne_stp  =$8d68                ;STP
   1056 = 000000000000CD68                            mne_stx  =$cd68                ;STX
   1057 = 000000000000D568                            mne_sty  =$d568                ;STY
   1058 = 000000000000DD68                            mne_stz  =$dd68                ;STZ
   1059 = 000000000000C8AA                            mne_tax  =$c8aa                ;TAX
   1060 = 000000000000D0AA                            mne_tay  =$d0aa                ;TAY
   1061 = 000000000000292A                            mne_tcd  =$292a                ;TCD
   1062 = 000000000000A12A                            mne_tcs  =$a12a                ;TCS
   1063 = 000000000000216A                            mne_tdc  =$216a                ;TDC
   1064 = 0000000000001CEA                            mne_trb  =$1cea                ;TRB
   1065 = 0000000000001D2A                            mne_tsb  =$1d2a                ;TSB
   1066 = 000000000000252A                            mne_tsc  =$252a                ;TSC
   1067 = 000000000000CD2A                            mne_tsx  =$cd2a                ;TSX
   1068 = 000000000000166A                            mne_txa  =$166a                ;TXA
   1069 = 000000000000A66A                            mne_txs  =$a66a                ;TXS
   1070 = 000000000000D66A                            mne_txy  =$d66a                ;TXY
   1071 = 00000000000016AA                            mne_tya  =$16aa                ;TYA
   1072 = 000000000000CEAA                            mne_tyx  =$ceaa                ;TYX
   1073 = 00000000000050B0                            mne_wai  =$50b0                ;WAI
   1074 = 0000000000007170                            mne_wdm  =$7170                ;WDM
   1075 = 00000000000010F2                            mne_xba  =$10f2                ;XBA
   1076 = 0000000000003132                            mne_xce  =$3132                ;XCE
                                        ;
                                        ;
                                        ;	encoded instruction mnemonic indices...
                                        ;
   1081 = 0000000000000010                            mne_adcx =16                   ;ADC
   1082 = 000000000000001D                            mne_andx =29                   ;AND
   1083 = 000000000000002C                            mne_aslx =44                   ;ASL
   1084 = 000000000000000F                            mne_bccx =15                   ;BCC
   1085 = 0000000000000041                            mne_bcsx =65                   ;BCS
   1086 = 000000000000003B                            mne_beqx =59                   ;BEQ
   1087 = 0000000000000046                            mne_bitx =70                   ;BIT
   1088 = 0000000000000024                            mne_bmix =36                   ;BMI
   1089 = 000000000000001F                            mne_bnex =31                   ;BNE
   1090 = 000000000000002A                            mne_bplx =42                   ;BPL
   1091 = 0000000000000005                            mne_brax =5                    ;BRA
   1092 = 0000000000000027                            mne_brkx =39                   ;BRK
   1093 = 000000000000002B                            mne_brlx =43                   ;BRL
   1094 = 0000000000000017                            mne_bvcx =23                   ;BVC
   1095 = 0000000000000044                            mne_bvsx =68                   ;BVS
   1096 = 0000000000000014                            mne_clcx =20                   ;CLC
   1097 = 000000000000001B                            mne_cldx =27                   ;CLD
   1098 = 0000000000000023                            mne_clix =35                   ;CLI
   1099 = 0000000000000047                            mne_clvx =71                   ;CLV
   1100 = 0000000000000035                            mne_cmpx =53                   ;CMP
   1101 = 0000000000000037                            mne_copx =55                   ;COP
   1102 = 000000000000004E                            mne_cpxx =78                   ;CPX
   1103 = 0000000000000058                            mne_cpyx =88                   ;CPY
   1104 = 0000000000000012                            mne_decx =18                   ;DEC
   1105 = 000000000000004A                            mne_dexx =74                   ;DEX
   1106 = 0000000000000054                            mne_deyx =84                   ;DEY
   1107 = 000000000000003D                            mne_eorx =61                   ;EOR
   1108 = 0000000000000015                            mne_incx =21                   ;INC
   1109 = 000000000000004D                            mne_inxx =77                   ;INX
   1110 = 0000000000000057                            mne_inyx =87                   ;INY
   1111 = 0000000000000028                            mne_jmlx =40                   ;JML
   1112 = 0000000000000036                            mne_jmpx =54                   ;JMP
   1113 = 000000000000002D                            mne_jslx =45                   ;JSL
   1114 = 000000000000003F                            mne_jsrx =63                   ;JSR
   1115 = 0000000000000001                            mne_ldax =1                    ;LDA
   1116 = 0000000000000049                            mne_ldxx =73                   ;LDX
   1117 = 0000000000000053                            mne_ldyx =83                   ;LDY
   1118 = 0000000000000040                            mne_lsrx =64                   ;LSR
   1119 = 0000000000000030                            mne_mvnx =48                   ;MVN
   1120 = 000000000000003A                            mne_mvpx =58                   ;MVP
   1121 = 0000000000000038                            mne_nopx =56                   ;NOP
   1122 = 0000000000000006                            mne_orax =6                    ;ORA
   1123 = 0000000000000002                            mne_peax =2                    ;PEA
   1124 = 0000000000000021                            mne_peix =33                   ;PEI
   1125 = 000000000000003C                            mne_perx =60                   ;PER
   1126 = 0000000000000003                            mne_phax =3                    ;PHA
   1127 = 000000000000000A                            mne_phbx =10                   ;PHB
   1128 = 000000000000001A                            mne_phdx =26                   ;PHD
   1129 = 0000000000000026                            mne_phkx =38                   ;PHK
   1130 = 0000000000000033                            mne_phpx =51                   ;PHP
   1131 = 000000000000004B                            mne_phxx =75                   ;PHX
   1132 = 0000000000000055                            mne_phyx =85                   ;PHY
   1133 = 0000000000000004                            mne_plax =4                    ;PLA
   1134 = 000000000000000B                            mne_plbx =11                   ;PLB
   1135 = 000000000000001C                            mne_pldx =28                   ;PLD
   1136 = 0000000000000034                            mne_plpx =52                   ;PLP
   1137 = 000000000000004C                            mne_plxx =76                   ;PLX
   1138 = 0000000000000056                            mne_plyx =86                   ;PLY
   1139 = 0000000000000031                            mne_repx =49                   ;REP
   1140 = 0000000000000029                            mne_rolx =41                   ;ROL
   1141 = 000000000000003E                            mne_rorx =62                   ;ROR
   1142 = 0000000000000025                            mne_rtix =37                   ;RTI
   1143 = 000000000000002E                            mne_rtlx =46                   ;RTL
   1144 = 0000000000000043                            mne_rtsx =67                   ;RTS
   1145 = 000000000000000E                            mne_sbcx =14                   ;SBC
   1146 = 0000000000000013                            mne_secx =19                   ;SEC
   1147 = 0000000000000019                            mne_sedx =25                   ;SED
   1148 = 0000000000000022                            mne_seix =34                   ;SEI
   1149 = 0000000000000032                            mne_sepx =50                   ;SEP
   1150 = 0000000000000007                            mne_stax =7                    ;STA
   1151 = 0000000000000039                            mne_stpx =57                   ;STP
   1152 = 0000000000000050                            mne_stxx =80                   ;STX
   1153 = 0000000000000059                            mne_styx =89                   ;STY
   1154 = 000000000000005B                            mne_stzx =91                   ;STZ
   1155 = 0000000000000048                            mne_taxx =72                   ;TAX
   1156 = 0000000000000052                            mne_tayx =82                   ;TAY
   1157 = 0000000000000018                            mne_tcdx =24                   ;TCD
   1158 = 0000000000000042                            mne_tcsx =66                   ;TCS
   1159 = 0000000000000011                            mne_tdcx =17                   ;TDC
   1160 = 000000000000000C                            mne_trbx =12                   ;TRB
   1161 = 000000000000000D                            mne_tsbx =13                   ;TSB
   1162 = 0000000000000016                            mne_tscx =22                   ;TSC
   1163 = 000000000000004F                            mne_tsxx =79                   ;TSX
   1164 = 0000000000000008                            mne_txax =8                    ;TXA
   1165 = 0000000000000045                            mne_txsx =69                   ;TXS
   1166 = 000000000000005A                            mne_txyx =90                   ;TXY
   1167 = 0000000000000009                            mne_tyax =9                    ;TYA
   1168 = 0000000000000051                            mne_tyxx =81                   ;TYX
   1169 = 0000000000000020                            mne_waix =32                   ;WAI
   1170 = 000000000000002F                            mne_wdmx =47                   ;WDM
   1171 = 0000000000000000                            mne_xbax =0                    ;XBA
   1172 = 000000000000001E                            mne_xcex =30                   ;XCE
                                        ;
                                        ;================================================================================
                                        ;
                                        ;MISCELLANEOUS CONSTANTS
                                        ;
   1178 = 0000000000000004                            halftab  =4                    ;1/2 tabulation spacing
   1179 = 3E                            memprfx  ='>'                  ;memory dump prefix
   1180 = 3A                            memsepch =':'                  ;memory dump separator
   1181 = 2E                            memsubch ='.'                  ;memory dump non-print char
   1182 = 0000000000000030                            srinit   =%00110000            ;SR initialization value
                                        ;
                                        ;================================================================================
                                        ;
                                        ;DIRECT PAGE STORAGE
                                        ;
   1188 = 00000080                      reg_pbx  =zeropage             ;PB
   1189 = 00000081                      reg_pcx  =reg_pbx+s_mpupbx     ;PC
   1190 = 00000083                      reg_srx  =reg_pcx+s_mpupcx     ;SR
   1191 = 00000084                      reg_ax   =reg_srx+s_mpusrx     ;.C
   1192 = 00000086                      reg_xx   =reg_ax+s_word        ;.X
   1193 = 00000088                      reg_yx   =reg_xx+s_word        ;.Y
   1194 = 0000008A                      reg_spx  =reg_yx+s_word        ;SP
   1195 = 0000008C                      reg_dpx  =reg_spx+s_mpuspx     ;DP
   1196 = 0000008E                      reg_dbx  =reg_dpx+s_mpudpx     ;DB
                                        ;
                                        ;
                                        ;	general workspace...
                                        ;
   1201 = 0000008F                      addra    =reg_dbx+s_mpudbx     ;address #1
   1202 = 00000092                      addrb    =addra+s_addr         ;address #2
   1203 = 00000095                      faca     =addrb+s_addr         ;primary accumulator
   1204 = 00000099                      facax    =faca+s_pfac          ;extended primary accumulator
   1205 = 0000009D                      facb     =facax+s_pfac         ;secondary accumulator
   1206 = 000000A3                      facc     =facb+s_sfac          ;tertiary accumulator
   1207 = 000000A9                      operand  =facc+s_sfac          ;instruction operand
   1208 = 000000AC                      auxbufix =operand+s_oper       ;auxiliary buffer index
   1209 = 000000AD                      ibufidx  =auxbufix+s_byte      ;input buffer index
   1210 = 000000AE                      bitsdig  =ibufidx+s_byte       ;bits per numeral
   1211 = 000000AF                      numeral  =bitsdig+s_byte       ;numeral buffer
   1212 = 000000B0                      radix    =numeral+s_byte       ;radix index
   1213 = 000000B1                      admodidx =radix+s_byte         ;addressing mode index
   1214 = 000000B2                      charcnt  =admodidx+s_byte      ;character counter
   1215 = 000000B4                      instsize =charcnt+s_word       ;instruction size
   1216 = 000000B6                      mnepck   =instsize+s_word      ;encoded mnemonic
   1217 = 000000B8                      opcode   =mnepck+s_mnepck      ;current opcode
   1218 = 000000B9                      status   =opcode+s_byte        ;I/O status flag
   1219 = 000000BA                      xrtemp   =status+s_byte        ;temp .X storage
   1220 = 000000BB                      eopsize  =xrtemp+s_byte        ;entered operand size
   1221 = 000000BC                      flimflag =eopsize+s_byte       ;forced long immediate...
                                        ;
                                        ;	xx000000
                                        ;	||
                                        ;	|+—————————> 0: .X/.Y = 8 bits
                                        ;	|            1: .X/.Y = 18 bits
                                        ;	+——————————> 0: .A = 8 bits
                                        ;	             1: .A = 16 bits
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	During assembly, FLIMFLAG indicates the operand size used with an immed-
                                        ;	iate mode instruction, thus causing the following disassembly to display
                                        ;	the assembled  operand size.   During disassembly,  FLIMFLAG will mirror
                                        ;	the effect of the most recent REP or SEP instruction.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
   1237 = 000000BD                      iopsize  =flimflag+s_byte      ;operand size
   1238 = 000000BE                      range    =iopsize+s_byte       ;allowable radix range
   1239 = 000000BF                      vopsflag =range+s_byte         ;VOPS & ROPS mode bits
                                        ;
                                        ;
                                        ;	copy/fill workspace (overlaps some of the above)...
                                        ;
   1244 = 000000C0                      mcftwork =vopsflag+s_byte	;faca                 ;start of copy/fill code
   1245 = 000000C1                      mcftopc  =mcftwork+s_byte      ;instruction opcode
   1246 = 000000C2                      mcftbnk  =mcftopc+s_byte       ;banks
                                        ;
                                        ;================================================================================
                                        ;
                                        ;SUPERMON 816 JUMP TABLE
                                        ;
                                                 org	_origin_
                                        ;
                                           		 CPU	W65C816S
                                           		 MEM	16
                                           		 NDX	16
   1258 00C000 A9 D0 00                     		 LDA	#$D0
   1259 00C003 8D 00 70                     		 STA	$7000
                                           		 MEM	8
                                           		 NDX	8
                                        		 CPU	W65C02
   1263 C006 80 02                      JMON     bra mon               ;cold start entry
   1264 C008 80 4F                      JMONBRK  bra monbrk            ;software interrupt intercept
                                        ;
                                        ;================================================================================
                                        ;
                                        ;mon: SUPERMON 816 COLD START
                                        ;
   1270 C00A C2 20                      mon +         .byte $c2,$20
                                        
   1271 C00C AD 02 01                             lda vecbrki           ;BRK vector
   1272 C00F C9 59                    +            cmp #<monbrk
   1272 C011 C0                       +            .byte >monbrk
                                        ;pointing at monitor?
   1273 C012 D0 03                                bne .2            ;yes, ignore cold start
   1274 C014 4C 98 C0                             jmp	monreg			; got a branch out of range here when debugging code
                                        								; was included
   1276 C017                            .2
                                        ;
   1278 C017 8D 05 01                             sta vecbrkia          ;save vector for exit
   1279 C01A A9 AB                       		 LDA	#$AB
   1280 C01C 00                          		 .byte	$00
   1281 C01D 8D 00 70                    		 STA	$7000
   1282 C020 A9 59                    +            lda #<monbrk
   1282 C022 C0                       +            .byte >monbrk
                                        ;Supermon 816 intercepts...
   1283 C023 8D 02 01                             sta vecbrki           ;BRK handler
   1284 C026 E2 30                    +            .byte $e2,$30
                                                        ;8 bit registers
   1285 C028 A2 3F                                ldx #vopsflag-reg_pbx
                                        ;
   1287 C02A 74 80                      .0000010 stz reg_pbx,x         ;clear DP storage
   1288 C02C CA                                   dex
   1289 C02D 10 FB                                bpl .0000010
                                        ;
   1291 C02F A9 AC                       		 LDA	#$AC
   1292 C031 8D 00 70                    		 STA	$7000
   1293 C034 A9 30                                lda #srinit
   1294 C036 85 83                                sta reg_srx           ;status register
   1295 C038 C2 20                    +            .byte $c2,$20
                                                         ;16 bit .A
   1296 C03A A9 FF                    +            lda #<hwstack
   1296 C03C 3F                       +            .byte >hwstack
                                        ;top of hardware stack
   1297 C03D 1B                       +            .byte $1b
                                                           ;set SP
   1298 C03E 7B                       +            .byte $7b
                                                           ;get & save...
   1299 C03F 85 8C                                sta reg_dpx           ;DP register
   1300 C041 A9 AD                       		 LDA	#$AD
   1301 C043 00                          		 .byte	$00
   1302 C044 8D 00 70                    		 STA	$7000
   1303 C047 A9 00                    +            lda #<0
   1303 C049 00                       +            .byte >0
                                        
   1304 C04A E2 20                    +            .byte $e2,$20
                                        
   1305 C04C 4B                       +            .byte $4b
                                        
   1306 C04D 68                                   pla                   ;capture PB &...
   1307 C04E 85 80                                sta reg_pbx           ;set
   1308 C050 8B                       +            .byte $8b
                                        
   1309 C051 68                                   pla                   ;capture DB &...
   1310 C052 85 8E                                sta reg_dbx           ;set
   1311 C054 F4                       +            .byte $f4
   1311 C055 C4 CF                    +            .word mm_entry
                                        ;"...ready..."
   1312 C057 80 22                                bra moncom
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monbrk: SOFTWARE INTERRUPT INTERCEPT
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	This is the entry point taken when a BRK instruction is executed.  It is
                                        ;	assumed that the BRK  handler has pushed the registers to the stack that
                                        ;	are not automatically pushed by the MPU in response to BRK.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
   1324 C059 58                         monbrk   cli                   ;reenable IRQs
   1325 C05A 7A                                   ply                   ;recover registers
   1326 C05B FA                                   plx
   1327 C05C 68                                   pla
   1328 C05D C2 30                    +            .byte $c2,$30
                                                         ;store 16 bit registers
   1329 C05F 85 84                                sta reg_ax            ;.A
   1330 C061 86 86                                stx reg_xx            ;.X
   1331 C063 84 88                                sty reg_yx            ;.Y
   1332 C065 E2 10                    +            .byte $e2,$10
                                                        ;8 bit index registers
   1333 C067 68                                   pla                   ;get DP &...
   1334 C068 85 8C                                sta reg_dpx           ;store
   1335 C06A FA                                   plx                   ;get DB &...
   1336 C06B 86 8E                                stx reg_dbx           ;store
   1337 C06D FA                                   plx                   ;get SR &...
   1338 C06E 86 83                                stx reg_srx           ;store
   1339 C070 68                                   pla                   ;get PC &...
   1340 C071 85 81                                sta reg_pcx           ;store
   1341 C073 E2 20                    +            .byte $e2,$20
                                        
   1342 C075 68                                   pla                   ;get PB &...
   1343 C076 85 80                                sta reg_pbx           ;store
   1344 C078 F4                       +            .byte $f4
   1344 C079 B9 CF                    +            .word mm_brk
                                        ;"*BRK"
                                        ;
                                        ;================================================================================
                                        ;
                                        ;moncom: COMMON ENTRY POINT
                                        ;
                                        ;	——————————————————————————————————————
                                        ;	DO NOT directly call this entry point!
                                        ;	——————————————————————————————————————
                                        ;
   1354 C07B                            moncom   
   1355 C07B A9 AE                       		 LDA	#$AE
   1356 C07D 8D 00 70                    		 STA	$7000
   1357 C080 20 B9 C7                    		 jsr sprint            ;print heading
   1358 C083 A9 AF                       		 LDA	#$AF
   1359 C085 8D 00 70                    		 STA	$7000
   1360 C088 C2 20                    +            .byte $c2,$20
                                        
   1361 C08A 3B                       +            .byte $3b
                                                           ;get SP &...
   1362 C08B 85 8A                                sta reg_spx           ;store
   1363 C08D A9 B0                       		 LDA	#$B0
   1364 C08F 00                          		 .byte	$00
   1365 C090 8D 00 70                    		 STA	$7000
   1366 C093 C2 FF                    +            .byte $c2,%11111111
                                        ;clear SR &...
   1367 C095 E2 30                    +            .byte $e2,srinit
                                        ;set default state
   1368 C097 38                                   sec                   ;see next
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monreg: DISPLAY MPU REGISTERS
                                        ;
                                        ;	—————————
                                        ;	syntax: R
                                        ;	—————————
                                        ;
   1378 C098 B0 03                      monreg   bcs .0000010          ;okay to proceed
                                        ;
   1380 C09A 4C 24 C1                             jmp monerr            ;error if called with a parm
                                        ;
   1382 C09D F4                         .0000010 +         .byte $f4
   1382 C09E EF CF                    +            .word mm_regs
                                        
   1383 C0A0 20 B9 C7                             jsr sprint            ;display heading
                                        ;
                                        ;
                                        ;	display program bank & counter...
                                        ;
   1388 C0A3 A5 80                                lda reg_pbx           ;PB
   1389 C0A5 20 8D C7                             jsr dpyhex            ;display as hex ASCII
   1390 C0A8 20 B4 C7                             jsr printspc          ;inter-field space
   1391 C0AB C2 20                    +            .byte $c2,$20
                                        
   1392 C0AD A5 81                                lda reg_pcx
   1393 C0AF E2 20                    +            .byte $e2,$20
                                        
   1394 C0B1 20 7D C7                             jsr dpyhexw           ;display PC
   1395 C0B4 A2 02                                ldx #2
   1396 C0B6 20 97 C7                             jsr multspc           ;inter-field spacing
                                        ;
                                        ;
                                        ;	display SR in bitwise fashion...
                                        ;
   1401 C0B9 A6 83                                ldx reg_srx           ;SR
   1402 C0BB A0 08                                ldy #s_bibyte         ;bits in a byte
                                        ;
   1404 C0BD 8A                         .0000020 txa                   ;remaining SR bits
   1405 C0BE 0A                                   asl                   ;grab one of them
   1406 C0BF AA                                   tax                   ;save remainder
   1407 C0C0 A9 30                                lda #'0'              ;a clear bit but...
   1408 C0C2 69 00                                adc #0                ;adjust if set &...
   1409 C0C4 20 06 F4                             jsr putcha            ;print
   1410 C0C7 88                                   dey                   ;bit processed
   1411 C0C8 D0 F3                                bne .0000020          ;do another
                                        ;
                                        ;
                                        ;	display .C, .X, .Y, SP & DP...
                                        ;
   1416 C0CA 20 B4 C7                   .0000030 jsr printspc          ;spacing
   1417 C0CD C2 20                    +            .byte $c2,$20
                                        
   1418 C0CF B9 84 00                             lda reg_ax,y          ;get register value
   1419 C0D2 E2 20                    +            .byte $e2,$20
                                        
   1420 C0D4 20 7D C7                             jsr dpyhexw           ;convert & display
                                        ;         .rept s_word
   1422 C0D7 C8                                     iny
   1423 C0D8 C8                                     iny
                                        ;         .endr
   1425 C0D9 C0 0A                                cpy #reg_dbx-reg_ax
   1426 C0DB 90 ED                                bcc .0000030          ;next
                                        ;
                                        ;
                                        ;	display DB...
                                        ;
   1431 C0DD 20 B4 C7                             jsr printspc          ;more spacing
   1432 C0E0 A5 8E                                lda reg_dbx           ;get DB &...
   1433 C0E2 20 8D C7                             jsr dpyhex            ;display it
                                               
                                        ;================================================================================
                                        ;
                                        ;monce: COMMAND EXECUTIVE
                                        ;	
   1439 C0E5 E2 20                      monce +         .byte $e2,$20
                                        
   1440 C0E7 A9 00                                lda #0                ;default buffer index
                                        ;
   1442 C0E9 E2 30                      moncea +         .byte $e2,$30
                                                        ;alternate entry point
   1443 C0EB 85 AD                                sta ibufidx           ;(re)set buffer index
   1444 C0ED F4                       +            .byte $f4
   1444 C0EE E6 CF                    +            .word mm_prmpt
                                        
   1445 C0F0 20 B9 C7                             jsr sprint            ;display input prompt
   1446 C0F3 20 D5 CB                             jsr input             ;await some input
                                        ;
   1448 C0F6                            .0000010:
   1449 C0F6 20 33 CC                    		jsr getcharc          ;read from buffer
   1450 C0F9 F0 EA                                beq monce             ;terminator, just loop
                                        ;
   1452 C0FB C9 20                                cmp #a_blank
   1453 C0FD F0 F7                                beq .0000010          ;strip leading blanks
                                        ;
   1455 C0FF A2 0C                                ldx #n_mpctab-1       ;number of primary commands
                                        ;
   1457 C101 DD 50 CC                   .0000020 cmp mpctab,x          ;search primary command list
   1458 C104 D0 0E                                bne .0000030
                                        ;
   1460 C106 8A                                   txa                   ;get index
   1461 C107 0A                                   asl                   ;double for offset
   1462 C108 AA                                   tax
   1463 C109 C2 20                    +            .byte $c2,$20
                                        
   1464 C10B BD 5D CC                             lda mpcextab,x        ;command address -1
   1465 C10E 48                                   pha                   ;prime the stack
   1466 C10F E2 20                    +            .byte $e2,$20
                                        
   1467 C111 4C 7B CA                             jmp getparm           ;evaluate parm & execute command
                                        ;
   1469 C114 CA                         .0000030 dex
   1470 C115 10 EA                                bpl .0000020          ;continue searching primary commands
                                        ;
   1472 C117 A2 03                                ldx #n_radix-1        ;number of radices
                                        ;
   1474 C119 DD 8B CC                   .0000040 cmp radxtab,x         ;search conversion command list
   1475 C11C D0 03                                bne .0000050
                                        ;
   1477 C11E 4C 6C C5                             jmp monenv            ;convert & display parameter
                                        ;
   1479 C121 CA                         .0000050 dex
   1480 C122 10 F5                                bpl .0000040
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monerr: COMMON ERROR HANDLER
                                        ;
   1486 C124 E2 30                      monerr +         .byte $e2,$30
                                                        ;8 bit registers
                                        ;
   1488 C126 20 64 C7                   monerraa jsr dpyerr            ;indicate an error &...
   1489 C129 80 BA                                bra monce             ;return to input loop
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monasc: ASSEMBLE CODE
                                        ;
                                        ;	———————————————————————————————————————————————————————————————————————
                                        ;	syntax: A <addr> <mnemonic> [<argument>]
                                        ;
                                        ;	After a line of code has been successfully assembled it will be disass-
                                        ;	embled & displayed,  & the monitor will prompt with the next address to
                                        ;	which code may be assembled.
                                        ;	———————————————————————————————————————————————————————————————————————
                                        ;
   1503 C12B 90 03                      monasc   bcc .0000020          ;assembly address entered
                                        ;
   1505 C12D 4C 24 C1                   .0000010 jmp monerr            ;terminate w/error
                                        ;
                                        ;
                                        ;	evaluate assembly address...
                                        ;
   1510 C130 20 67 CA                   .0000020 jsr facasize          ;check address...
   1511 C133 C9 04                                cmp #s_dword          ;range
   1512 C135 B0 F6                                bcs .0000010          ;out of range — error
                                        ;
   1514 C137 20 49 CA                             jsr facaddra          ;store assembly address
                                        ;
                                        ;
                                        ;	initialize workspace...
                                        ;
   1519 C13A A2 1F                                ldx #s_auxbuf-s_byte
                                        ;
   1521 C13C 9E 51 02                   .0000030 stz auxbuf,x          ;clear addressing mode buffer
   1522 C13F CA                                   dex
   1523 C140 D0 FA                                bne .0000030
                                        ;
   1525 C142 A9 20                                lda #a_blank
   1526 C144 8D 51 02                             sta auxbuf            ;preamble placeholder
   1527 C147 20 B8 C9                             jsr clroper           ;clear operand
   1528 C14A 64 AC                                stz auxbufix          ;reset addressing mode index
   1529 C14C 64 BC                                stz flimflag          ;clear forced long immediate
   1530 C14E 64 B6                                stz mnepck            ;clear encoded...
   1531 C150 64 B7                                stz mnepck+s_byte     ;mnemonic workspace
   1532 C152 64 BF                                stz vopsflag          ;clear 8/16 or relative flag
                                        ;
                                        ;
                                        ;	encode mnemonic...
                                        ;
   1537 C154 A0 03                                ldy #s_mnemon         ;expected mnemonic size
                                        ;
   1539 C156 20 C6 CB                   .0000040 jsr getcharw          ;get from buffer wo/whitespace
   1540 C159 D0 0A                                bne .0000060          ;gotten
                                        ;
   1542 C15B C0 03                                cpy #s_mnemon         ;any input at all?
   1543 C15D 90 03                                bcc .0000050          ;yes
                                        ;
   1545 C15F 4C E5 C0                             jmp monce             ;no, abort further assembly
                                        ;
   1547 C162 4C 02 C3                   .0000050 jmp monasc10          ;incomplete mnemonic — error
                                        ;
   1549 C165 38                         .0000060 sec
   1550 C166 E9 3F                                sbc #a_mnecvt         ;ASCII to binary factor
   1551 C168 A2 05                                ldx #n_shfenc         ;shifts required to encode
                                        ;
   1553 C16A 4A                         .0000070 lsr                   ;shift out a bit...
   1554 C16B 66 B7                                ror mnepck+s_byte     ;into...
   1555 C16D 66 B6                                ror mnepck            ;encoded mnemonic
   1556 C16F CA                                   dex
   1557 C170 D0 F8                                bne .0000070          ;next bit
                                        ;
   1559 C172 88                                   dey
   1560 C173 D0 E1                                bne .0000040          ;get next char
                                        ;
                                        ;
                                        ;	test for copy instruction...
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	The MVN & MVP instructions accept two operands & hence have an irregular
                                        ;	syntax.  Therefore, special handling is necessary to assemble either of
                                        ;	these instructions.
                                        ;
                                        ;	The official WDC syntax has the programmer entering a pair of 24 bit ad-
                                        ;	dresses as operands, with the assembler isolating bits 16-23 to	use as
                                        ;	operands.  This formality has been dispensed with in this monitor & the
                                        ;	operands are expected to be 8 bit bank values.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
   1575 C175 C2 20                    +            .byte $c2,$20
                                                         ;16 bit load
   1576 C177 A5 B6                                lda mnepck            ;packed menmonic
   1577 C179 A2 54                                ldx #opc_mvn          ;MVN opcode
   1578 C17B C9 DC                    +            cmp #<mne_mvn
   1578 C17D 7D                       +            .byte >mne_mvn
                                        ;is it MVN?
   1579 C17E F0 07                                beq monasc01          ;yes
                                        ;
   1581 C180 A2 44                                ldx #opc_mvp          ;MVP opcode
   1582 C182 C9 DC                    +            cmp #<mne_mvp
   1582 C184 8D                       +            .byte >mne_mvp
                                        ;is it MVP?
   1583 C185 D0 30                                bne monasc02          ;no
                                        ;
                                        ;
                                        ;	assemble copy instruction...
                                        ;
   1588 C187 86 B8                      monasc01 stx opcode            ;store relevant opcode
   1589 C189 E2 20                    +            .byte $e2,$20
                                        
   1590 C18B 20 D7 CA                             jsr instdata          ;get instruction data
   1591 C18E 86 BB                                stx eopsize           ;effective operand size
   1592 C190 E8                                   inx
   1593 C191 86 B4                                stx instsize          ;instruction size
   1594 C193 A2 01                                ldx #s_oper-s_word    ;operand index
   1595 C195 86 BA                                stx xrtemp            ;set it
                                        ;
   1597 C197 20 D2 C7                   .0000010 jsr ascbin            ;evaluate bank number
   1598 C19A B0 50                                bcs monasc04          ;conversion error
                                        ;
   1600 C19C F0 4E                                beq monasc04          ;nothing returned — error
                                        ;
   1602 C19E 20 67 CA                             jsr facasize          ;bank must be...
   1603 C1A1 C9 02                                cmp #s_word           ;8 bits
   1604 C1A3 B0 47                                bcs monasc04          ;it isn't — error
                                        ;
   1606 C1A5 A5 95                                lda faca              ;bank
   1607 C1A7 A6 BA                                ldx xrtemp            ;operand index
   1608 C1A9 95 A9                                sta operand,x         ;store
   1609 C1AB C6 BA                                dec xrtemp            ;index=index-1
   1610 C1AD 10 E8                                bpl .0000010          ;get destination bank
                                        ;
   1612 C1AF 20 68 CB                             jsr getcharr          ;should be no more input
   1613 C1B2 D0 38                                bne monasc04          ;there is — error
                                        ;
   1615 C1B4 4C B2 C2                             jmp monasc08          ;finish MVN/MVP assembly 
                                        ;
                                        ;
                                        ;	continue with normal assembly...
                                        ;
   1620 C1B7 E2 20                      monasc02 +         .byte $e2,$20
                                                        ;back to 8 bits
                                        ;
   1622 C1B9 20 C6 CB                   monasc03 jsr getcharw          ;get next char
   1623 C1BC F0 3D                                beq monasc06          ;EOI, no argument
                                        ;
   1625 C1BE C9 21                                cmp #amp_flim
   1626 C1C0 D0 0A                                bne .0000010          ;no forced long immediate
                                        ;
   1628 C1C2 A5 BC                                lda flimflag          ;FLIM already set?
   1629 C1C4 D0 26                                bne monasc04          ;yes — error
                                        ;
   1631 C1C6 A9 C0                                lda #flimmask
   1632 C1C8 85 BC                                sta flimflag          ;set flag &...
   1633 C1CA 80 ED                                bra monasc03          ;get next char
                                        ;
   1635 C1CC C9 23                      .0000010 cmp #amp_imm          ;immediate mode?
   1636 C1CE F0 08                                beq .0000020          ;yes
                                        ;
   1638 C1D0 C9 28                                cmp #amp_ind          ;indirect mode?
   1639 C1D2 F0 04                                beq .0000020          ;yes
                                        ;
   1641 C1D4 C9 5B                                cmp #amp_indl         ;indirect long mode?
   1642 C1D6 D0 07                                bne .0000030          ;no
                                        ;
   1644 C1D8 8D 51 02                   .0000020 sta auxbuf            ;set addressing mode preamble
   1645 C1DB E6 AC                                inc auxbufix          ;bump aux buffer index &...
   1646 C1DD 80 02                                bra .0000040          ;evaluate operand
                                        ;
   1648 C1DF C6 AD                      .0000030 dec ibufidx           ;position back to char
                                        ;
   1650 C1E1 20 D2 C7                   .0000040 jsr ascbin            ;evaluate operand
   1651 C1E4 D0 09                                bne monasc05          ;evaluated
                                        ;
   1653 C1E6 B0 04                                bcs monasc04          ;conversion error
                                        ;
   1655 C1E8 A5 AC                                lda auxbufix          ;no operand...any preamble?
   1656 C1EA F0 0F                                beq monasc06          ;no, syntax is okay so far
                                        ;
   1658 C1EC 4C 02 C3                   monasc04 jmp monasc10          ;abort w/error
                                        ;
   1660 C1EF 20 67 CA                   monasc05 jsr facasize          ;size operand
   1661 C1F2 C9 04                                cmp #s_dword          ;max is 24 bits
   1662 C1F4 B0 F6                                bcs monasc04          ;too big
                                        ;
   1664 C1F6 85 BB                                sta eopsize           ;save operand size
   1665 C1F8 20 5D CA                             jsr facaoper          ;store operand
                                        ;
   1667 C1FB C6 AD                      monasc06 dec ibufidx           ;back to last char
   1668 C1FD A6 AC                                ldx auxbufix          ;mode buffer index
   1669 C1FF D0 01                                bne .0000010          ;preamble in buffer
                                        ;
   1671 C201 E8                                   inx                   ;step past preamble position
                                        ;
   1673 C202 20 33 CC                   .0000010 jsr getcharc          ;get a char w/forced UC
   1674 C205 F0 0A                                beq .0000030          ;EOI
                                        ;
   1676 C207 E0 20                                cpx #s_auxbuf         ;mode buffer full?
   1677 C209 B0 E1                                bcs monasc04          ;yes, too much input
                                        ;
   1679 C20B 9D 51 02                   .0000020 sta auxbuf,x          ;store for comparison
   1680 C20E E8                                   inx
   1681 C20F D0 F1                                bne .0000010
                                        ;
                                        ;
                                        ;	evaluate mnemonic...
                                        ;
   1686 C211 A2 5B                      .0000030 ldx #n_mnemon-1       ;starting mnemonic index
                                        ;
   1688 C213 8A                         monasc07 txa                   ;convert index...
   1689 C214 0A                                   asl                   ;to offset
   1690 C215 A8                                   tay                   ;now mnemonic table index
   1691 C216 C2 20                    +            .byte $c2,$20
                                                         ;16 bit compare
   1692 C218 B9 98 CC                             lda mnetab,y          ;get mnemonic from table
   1693 C21B C5 B6                                cmp mnepck            ;compare to entered mnemonic
   1694 C21D E2 20                    +            .byte $e2,$20
                                                        ;back to 8 bits
   1695 C21F F0 05                                beq .0000020          ;match
                                        ;
   1697 C221 CA                         .0000010 dex                   ;try next mnemonic
   1698 C222 30 C8                                bmi monasc04          ;unknown mnemonic — error
                                        ;
   1700 C224 80 ED                                bra monasc07          ;keep going
                                        ;
   1702 C226 86 B6                      .0000020 stx mnepck            ;save mnemonic index
   1703 C228 8A                                   txa
   1704 C229 A2 00                                ldx #0                ;trial opcode
                                        ;
   1706 C22B DD 50 CD                   .0000030 cmp mnetabix,x        ;search index table...
   1707 C22E F0 05                                beq .0000050          ;for a match
                                        ;
   1709 C230 E8                         .0000040 inx                   ;keep going until we...
   1710 C231 D0 F8                                bne .0000030          ;search entire table
                                        ;
   1712 C233 80 B7                                bra monasc04          ;this shouldn't happen!
                                        ;
                                        ;	—————————————————————————————————————————————————————————————————————
                                        ;	If the mnemonic index table search fails then there is a coding error
                                        ;	somewhere, as every entry in the mnemonic table is supposed to have a
                                        ;	matching cardinal index.
                                        ;	—————————————————————————————————————————————————————————————————————
                                        ;
                                        ;
                                        ;	evaluate addressing mode...
                                        ;
   1723 C235 86 B8                      .0000050 stx opcode            ;save trial opcode
   1724 C237 20 D7 CA                             jsr instdata          ;get related instruction data
   1725 C23A 85 BF                                sta vopsflag          ;save 8/16 or relative flag
   1726 C23C 86 BD                                stx iopsize           ;operand size
   1727 C23E E8                                   inx
   1728 C23F 86 B4                                stx instsize          ;instruction size
   1729 C241 A6 B8                                ldx opcode            ;recover trial opcode
   1730 C243 98                                   tya                   ;addressing mode
   1731 C244 0A                                   asl                   ;create table index
   1732 C245 A8                                   tay
   1733 C246 C2 20                    +            .byte $c2,$20
                                        
   1734 C248 B9 54 CF                             lda ms_lutab,y        ;mode lookup table
   1735 C24B 85 92                                sta addrb             ;set pointer
   1736 C24D E2 20                    +            .byte $e2,$20
                                        
   1737 C24F A0 00                                ldy #0
                                        ;
   1739 C251 B1 92                      .0000060 lda (addrb),y         ;table addressing mode
   1740 C253 D9 51 02                             cmp auxbuf,y          ;entered addressing mode
   1741 C256 F0 04                                beq .0000080          ;okay so far
                                        ;
   1743 C258 A5 B6                      .0000070 lda mnepck            ;reload mnemonic index        
   1744 C25A 80 D4                                bra .0000040          ;wrong opcode for addresing mode
                                        ;
   1746 C25C 09 00                      .0000080 ora #0                ;last char the terminator?
   1747 C25E F0 03                                beq .0000090          ;yes, evaluate operand
                                        ;
   1749 C260 C8                                   iny
   1750 C261 80 EE                                bra .0000060          ;keep testing
                                        ;
                                        ;
                                        ;	evaluate operand...
                                        ;
   1755 C263 A5 BB                      .0000090 lda eopsize           ;entered operand size
   1756 C265 D0 06                                bne .0000100          ;non-zero
                                        ;
   1758 C267 05 BD                                ora iopsize           ;instruction operand size
   1759 C269 D0 ED                                bne .0000070          ;wrong opcode — keep trying
                                        ;
   1761 C26B 80 45                                bra monasc08          ;assemble instruction
                                        ;
   1763 C26D 24 BF                      .0000100 bit vopsflag          ;is this a branch?
   1764 C26F 70 3A                                bvs .0000160          ;yes, evaluate
                                        ;
   1766 C271 A5 BD                                lda iopsize           ;instruction operand size
   1767 C273 24 BF                                bit vopsflag          ;variable size operand allowed?
   1768 C275 30 15                                bmi .0000130          ;yes
                                        ;
   1770 C277 24 BC                                bit flimflag          ;was forced immediate set?
   1771 C279 10 03                                bpl .0000110          ;no
                                        ;         
   1773 C27B 4C 02 C3                             jmp monasc10          ;yes — error
                                        ;
   1775 C27E C5 BB                      .0000110 cmp eopsize           ;entered operand size
   1776 C280 90 D6                                bcc .0000070          ;operand too big
                                        ;
   1778 C282 85 BB                                sta eopsize           ;new operand size
   1779 C284 80 2C                                bra monasc08          ;assemble, otherwise...
                                        ;
   1781 C286 C5 BB                      .0000120 cmp eopsize           ;exact size match required
   1782 C288 D0 CE                                bne .0000070          ;mismatch — wrong opcode
                                        ;
   1784 C28A 80 26                                bra monasc08          ;assemble
                                        ;
                                        ;
                                        ;	process variable size immediate mode operand...
                                        ;
   1789 C28C A6 BB                      .0000130 ldx eopsize           ;entered operand size
   1790 C28E E0 03                                cpx #s_xword          ;check size
   1791 C290 B0 70                                bcs monasc10          ;too big — error
                                        ;
   1793 C292 24 BC                                bit flimflag          ;forced long immediate?
   1794 C294 10 06                                bpl .0000140          ;no
                                        ;
   1796 C296 A2 02                                ldx #s_word           ;promote operand size to...
   1797 C298 86 BB                                stx eopsize           ;16 bits
   1798 C29A 80 08                                bra .0000150
                                        ;
   1800 C29C E0 02                      .0000140 cpx #s_word           ;16 bits?
   1801 C29E D0 04                                bne .0000150          ;no
                                        ;
   1803 C2A0 A0 C0                                ldy #flimmask         ;yes so force long...
   1804 C2A2 84 BC                                sty flimflag          ;immediate disassembly
                                        ;
   1806 C2A4 1A                         .0000150 ina                   ;new instruction operand size
   1807 C2A5 C5 BB                                cmp eopsize           ;compare against operand size
   1808 C2A7 90 AF                                bcc .0000070          ;mismatch — can't assemble
                                        ;
   1810 C2A9 80 07                                bra monasc08          ;okay, assemble
                                        ;
                                        ;
                                        ;	process relative branch...
                                        ;
   1815 C2AB 20 23 CB                   .0000160 jsr targoff           ;compute branch offset
   1816 C2AE B0 52                                bcs monasc10          ;branch out of range
                                        ;
   1818 C2B0 85 BB                                sta eopsize           ;effective operand size
                                        ;
                                        ;
                                        ;	assemble instruction...
                                        ;
   1823 C2B2 A5 B8                      monasc08 lda opcode            ;opcode
   1824 C2B4 87 8F                    +            .byte $87,addra
                                        ;store at assembly address
   1825 C2B6 A6 BB                                ldx eopsize           ;any operand to process?
   1826 C2B8 F0 09                                beq .0000020          ;no
                                        ;
   1828 C2BA 9B                       +            .byte $9b
                                                           ;also storage offset
                                        ;
   1830 C2BB CA                         .0000010 dex
   1831 C2BC B5 A9                                lda operand,x         ;get operand byte &...
   1832 C2BE 97 8F                    +            .byte $97,addra
                                        ;poke into memory
   1833 C2C0 88                                   dey
   1834 C2C1 D0 F8                                bne .0000010          ;next
                                        ;
   1836 C2C3 A9 0D                      .0000020 lda #a_cr
   1837 C2C5 20 06 F4                             jsr putcha            ;return to left margin
   1838 C2C8 A9 41                                lda #asmprfx          ;assembly prefix
   1839 C2CA 20 0D C6                             jsr dpycodaa          ;disassemble & display
                                        ;
                                        ;
                                        ;	prompt for next instruction...
                                        ;
   1844 C2CD A9 20                      monasc09 lda #a_blank
   1845 C2CF A2 08                                ldx #ascprmct-1
                                        ;
   1847 C2D1 9D 00 02                   .0000010 sta ibuffer,x         ;prepare buffer for...
   1848 C2D4 CA                                   dex                   ;next instruction
   1849 C2D5 10 FA                                bpl .0000010
                                        ;
   1851 C2D7 A9 41                                lda #asmprfx          ;assemble code...
   1852 C2D9 8D 00 02                             sta ibuffer           ;prompt prefix
   1853 C2DC A5 91                                lda addra+s_word      ;next instruction address bank
   1854 C2DE 20 24 C9                             jsr binhex            ;convert to ASCII
   1855 C2E1 8D 02 02                             sta ibuffer+apadrbkh  ;store MSN in buffer
   1856 C2E4 8E 03 02                             stx ibuffer+apadrbkl  ;store LSN in buffer
   1857 C2E7 A5 90                                lda addra+s_byte      ;next instruction address MSB
   1858 C2E9 20 24 C9                             jsr binhex
   1859 C2EC 8D 04 02                             sta ibuffer+apadrmbh
   1860 C2EF 8E 05 02                             stx ibuffer+apadrmbl
   1861 C2F2 A5 8F                                lda addra             ;next instruction address LSB
   1862 C2F4 20 24 C9                             jsr binhex
   1863 C2F7 8D 06 02                             sta ibuffer+apadrlbh
   1864 C2FA 8E 07 02                             stx ibuffer+apadrlbl
   1865 C2FD A9 09                                lda #ascprmct         ;effective input count
   1866 C2FF 4C E9 C0                             jmp moncea            ;reenter input loop
                                        ;
                                        ;
                                        ;	process assembly error...
                                        ;
   1871 C302 20 64 C7                   monasc10 jsr dpyerr            ;indicate error &...
   1872 C305 80 C6                                bra monasc09          ;prompt w/same assembly address
                                        ;
                                        ;================================================================================
                                        ;
                                        ;mondsc: DISASSEMBLE CODE
                                        ;
                                        ;	—————————————————————————————
                                        ;	syntax: D [<addr1> [<addr2>]]
                                        ;	—————————————————————————————
                                        ;
   1882 C307 B0 11                      mondsc   bcs .0000010          ;no parameters
                                        ;
   1884 C309 64 BC                                stz flimflag          ;reset to 8 bit mode
   1885 C30B 20 67 CA                             jsr facasize          ;check starting...
   1886 C30E C9 04                                cmp #s_dword          ;address
   1887 C310 B0 46                                bcs .0000050          ;out of range — error
                                        ;
   1889 C312 20 49 CA                             jsr facaddra          ;copy starting address
   1890 C315 20 7B CA                             jsr getparm           ;get ending address
   1891 C318 90 17                                bcc .0000020          ;gotten
                                        ;
   1893 C31A 20 37 C9                   .0000010 jsr clrfaca           ;clear accumulator
   1894 C31D C2 20                    +            .byte $c2,$20
                                        
   1895 C31F 18                                   clc
   1896 C320 A5 8F                                lda addra             ;starting address
   1897 C322 69 15                    +            adc #<n_dbytes
   1897 C324 00                       +            .byte >n_dbytes
                                        ;default bytes
   1898 C325 85 95                                sta faca              ;effective ending address
   1899 C327 E2 20                    +            .byte $e2,$20
                                        
   1900 C329 A5 91                                lda addra+s_word      ;starting bank
   1901 C32B 69 00                                adc #0
   1902 C32D 85 97                                sta faca+s_word       ;effective ending bank
   1903 C32F B0 27                                bcs .0000050          ;end address > $FFFFFF
                                        ;
   1905 C331 20 67 CA                   .0000020 jsr facasize          ;check ending...
   1906 C334 C9 04                                cmp #s_dword          ;address
   1907 C336 B0 20                                bcs .0000050          ;out of range — error
                                        ;
   1909 C338 20 53 CA                             jsr facaddrb          ;set ending address
   1910 C33B 20 7B CA                             jsr getparm           ;check for excess input
   1911 C33E 90 18                                bcc .0000050          ;present — error
                                        ;
   1913 C340 20 A3 C9                             jsr calccnt           ;calculate bytes
   1914 C343 90 13                                bcc .0000050          ;end < start
                                        ;
   1916 C345 20 45 CC                   .0000030 jsr teststop          ;test for display stop
   1917 C348 B0 0B                                bcs .0000040          ;stopped
                                        ;
   1919 C34A 20 A4 C7                             jsr newline           ;next line
   1920 C34D 20 0B C6                             jsr dpycod            ;disassemble & display
   1921 C350 20 FF C9                             jsr decdcnt           ;decrement byte count
   1922 C353 90 F0                                bcc .0000030          ;not done
                                        ;
   1924 C355 4C E5 C0                   .0000040 jmp monce             ;back to main loop
                                        ;
   1926 C358 4C 24 C1                   .0000050 jmp monerr            ;address range error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monjmp: EXECUTE CODE
                                        ;
                                        ;	—————————————————————————————————————————————————————————————
                                        ;	syntax: G [<addr>]
                                        ;
                                        ;	If no address is specified, the current values in the PB & PC
                                        ;	shadow registers are used.
                                        ;	—————————————————————————————————————————————————————————————
                                        ;
   1939 C35B 20 0C CB                   monjmp   jsr setxaddr          ;set execution address
   1940 C35E B0 29                                bcs monjmpab          ;out of range — error
                                        ;
   1942 C360 20 7B CA                             jsr getparm           ;check for excess input
   1943 C363 90 24                                bcc monjmpab          ;too much input — error
                                        ;
   1945 C365 C2 20                    +            .byte $c2,$20
                                                         ;16 bit .A
   1946 C367 A5 8A                                lda reg_spx
   1947 C369 1B                       +            .byte $1b
                                                           ;restore SP
                                        ;
   1949 C36A E2 20                      monjmpaa +         .byte $e2,$20
                                        
   1950 C36C A5 80                                lda reg_pbx
   1951 C36E 48                                   pha                   ;restore PB
   1952 C36F C2 20                    +            .byte $c2,$20
                                        
   1953 C371 A5 81                                lda reg_pcx
   1954 C373 48                                   pha                   ;restore PC
   1955 C374 E2 20                    +            .byte $e2,$20
                                        
   1956 C376 A5 83                                lda reg_srx
   1957 C378 48                                   pha                   ;restore SR
   1958 C379 A5 8E                                lda reg_dbx
   1959 C37B 48                                   pha
   1960 C37C AB                       +            .byte $ab
                                                           ;restore DB
   1961 C37D C2 30                    +            .byte $c2,$30
                                        
   1962 C37F A5 8C                                lda reg_dpx
   1963 C381 5B                       +            .byte $5b
                                                           ;restore DP
   1964 C382 A5 84                                lda reg_ax            ;restore .C
   1965 C384 A6 86                                ldx reg_xx            ;restore .X
   1966 C386 A4 88                                ldy reg_yx            ;restore .Y
   1967 C388 40                                   rti                   ;execute code
                                        ;
   1969 C389 4C 24 C1                   monjmpab jmp monerr            ;error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monjsr: EXECUTE CODE AS SUBROUTINE
                                        ;
                                        ;	————————————————————————————————————————————————————————————
                                        ;	syntax: J [<addr>]
                                        ;
                                        ;	If no address is specified the current values in the PB & PC
                                        ;	shadow registers are used.   An RTS at the end of the called
                                        ;	subroutine will return control to the monitor  provided  the
                                        ;	stack remains in balance.
                                        ;	————————————————————————————————————————————————————————————
                                        ;
   1984 C38C 20 0C CB                   monjsr   jsr setxaddr          ;set execution address
   1985 C38F B0 F8                                bcs monjmpab          ;out of range — error
                                        ;
   1987 C391 20 7B CA                             jsr getparm           ;check for excess input
   1988 C394 90 F3                                bcc monjmpab          ;too much input — error
                                        ;
   1990 C396 C2 20                    +            .byte $c2,$20
                                        
   1991 C398 A5 8A                                lda reg_spx
   1992 C39A 1B                       +            .byte $1b
                                                           ;restore SP &...
   1993 C39B 20 6A C3                             jsr monjmpaa          ;call subroutine
   1994 C39E 08                                   php                   ;push SR
   1995 C39F C2 30                    +            .byte $c2,$30
                                        
   1996 C3A1 85 84                                sta reg_ax            ;save...
   1997 C3A3 86 86                                stx reg_xx            ;register...
   1998 C3A5 84 88                                sty reg_yx            ;returns
   1999 C3A7 E2 10                    +            .byte $e2,$10
                                                        ;8 bit .X & .Y
   2000 C3A9 FA                                   plx                   ;get & save...
   2001 C3AA 86 83                                stx reg_srx           ;return SR
   2002 C3AC 3B                       +            .byte $3b
                                                           ;get & save...
   2003 C3AD 85 8A                                sta reg_spx           ;return SP
   2004 C3AF 7B                       +            .byte $7b
                                                           ;get & save...
   2005 C3B0 85 8C                                sta reg_dpx           ;DP pointer
   2006 C3B2 E2 20                    +            .byte $e2,$20
                                                        ;8 bit .A
   2007 C3B4 4B                       +            .byte $4b
                                                           ;get &...
   2008 C3B5 68                                   pla                   ;save...
   2009 C3B6 85 80                                sta reg_pbx           ;return PB
   2010 C3B8 8B                       +            .byte $8b
                                                           ;get &...
   2011 C3B9 68                                   pla                   ;save...
   2012 C3BA 85 8E                                sta reg_dbx           ;return DB
   2013 C3BC F4                       +            .byte $f4
   2013 C3BD 25 D0                    +            .word mm_rts
                                        ;"*RET"
   2014 C3BF 4C 7B C0                             jmp moncom            ;return to monitor
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monchm: CHANGE and/or DUMP MEMORY
                                        ;
                                        ;	————————————————————————————————————————————
                                        ;	syntax: > [<addr> <operand> [<operand>]...]
                                        ;
                                        ;	> <addr> without operands will dump 16 bytes
                                        ;	of memory, starting at <addr>.
                                        ;	————————————————————————————————————————————
                                        ;
   2027 C3C2 B0 23                      monchm   bcs .0000030          ;no address given — quit
                                        ;
   2029 C3C4 20 67 CA                             jsr facasize          ;size address
   2030 C3C7 C9 04                                cmp #s_dword
   2031 C3C9 B0 1F                                bcs .0000040          ;address out of range — error
                                        ;
   2033 C3CB 20 49 CA                             jsr facaddra          ;set starting address
   2034 C3CE 20 7C CB                             jsr getpat            ;evaluate change pattern
   2035 C3D1 90 04                                bcc .0000010          ;entered
                                        ;
   2037 C3D3 10 0C                                bpl .0000020          ;not entered
                                        ;
   2039 C3D5 80 13                                bra .0000040          ;evaluation error
                                        ;
   2041 C3D7 88                         .0000010 dey                   ;next byte
   2042 C3D8 30 07                                bmi .0000020          ;done
                                        ;
   2044 C3DA B9 51 02                             lda auxbuf,y          ;write pattern...
   2045 C3DD 97 8F                    +            .byte $97,addra
                                        ;to memory
   2046 C3DF 80 F6                                bra .0000010          ;next
                                        ;
   2048 C3E1 20 A4 C7                   .0000020 jsr newline           ;next line
   2049 C3E4 20 21 C7                             jsr dpymem            ;regurgitate changes
                                        ;
   2051 C3E7 4C E5 C0                   .0000030 jmp monce             ;back to command loop
                                        ;
   2053 C3EA 4C 24 C1                   .0000040 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;moncmp: COMPARE MEMORY
                                        ;
                                        ;	—————————————————————————————
                                        ;	syntax: C <start> <end> <ref>
                                        ;	—————————————————————————————
                                        ;
   2063 C3ED B0 26                      moncmp   bcs .0000030          ;start not given — quit
                                        ;
   2065 C3EF 20 23 CA                             jsr enddest           ;get end & reference addresses
   2066 C3F2 B0 24                                bcs .0000040          ;range or other error
                                        ;
   2068 C3F4 64 BA                                stz xrtemp            ;column counter
                                        ;
   2070 C3F6 20 45 CC                   .0000010 jsr teststop          ;check for stop
   2071 C3F9 B0 1A                                bcs .0000030          ;abort
                                        ;
   2073 C3FB A7 8F                    +            .byte $a7,addra
                                        ;get from reference location
   2074 C3FD C7 A9                    +            .byte $c7,operand
                                        ;test against compare location
   2075 C3FF F0 03                                beq .0000020          ;match, don't display address
                                        ;
   2077 C401 20 F3 C5                             jsr dpycaddr          ;display current location
                                        ;
   2079 C404 20 A3 CA                   .0000020 jsr nxtaddra          ;next reference location
   2080 C407 B0 0C                                bcs .0000030          ;done
                                        ;
   2082 C409 C2 20                    +            .byte $c2,$20
                                        
   2083 C40B E6 A9                                inc operand           ;bump bits 0-15
   2084 C40D E2 20                    +            .byte $e2,$20
                                        
   2085 C40F D0 E5                                bne .0000010
                                        ;
   2087 C411 E6 AB                                inc operand+s_word    ;bump bits 16-23
   2088 C413 80 E1                                bra .0000010
                                        ;
   2090 C415 4C E5 C0                   .0000030 jmp monce             ;return to command exec
                                        ;
   2092 C418 4C 24 C1                   .0000040 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;moncpy: COPY (transfer) MEMORY
                                        ;
                                        ;	————————————————————————————————
                                        ;	syntax: T <start> <end> <target>
                                        ;	————————————————————————————————
                                        ;
   2102 C41B B0 49                      moncpy   bcs .0000040          ;start not given — quit
                                        ;
   2104 C41D 20 23 CA                             jsr enddest           ;get end & target addresses
   2105 C420 B0 47                                bcs .0000050          ;range or other error
                                        ;
   2107 C422 C2 20                    +            .byte $c2,$20
                                        
   2108 C424 38                                   sec
   2109 C425 A5 92                                lda addrb             ;ending address
   2110 C427 E5 8F                                sbc addra             ;starting address
   2111 C429 90 3E                                bcc .0000050          ;start > end — error
                                        ;
   2113 C42B 85 9D                                sta facb              ;bytes to copy
   2114 C42D E2 20                    +            .byte $e2,$20
                                        
   2115 C42F C2 10                    +            .byte $c2,$10
                                        
   2116 C431 A5 AB                                lda operand+s_word    ;target bank
   2117 C433 A4 A9                                ldy operand           ;target address
   2118 C435 C5 91                                cmp addra+s_word      ;source bank
   2119 C437 C2 20                    +            .byte $c2,$20
                                        
   2120 C439 D0 1C                                bne .0000020          ;can use forward copy
                                        ;
   2122 C43B C4 8F                                cpy addra             ;source address
   2123 C43D 90 18                                bcc .0000020          ;can use forward copy
                                        ;
   2125 C43F D0 02                                bne .0000010          ;must use reverse copy
                                        ;
   2127 C441 80 26                                bra .0000050          ;copy in place — error
                                        ;
   2129 C443 A5 9D                      .0000010 lda facb              ;get bytes to copy
   2130 C445 48                                   pha                   ;protect
   2131 C446 20 2B CC                             jsr lodbnk            ;load banks
   2132 C449 20 CB C9                             jsr cprvsup           ;do reverse copy setup
   2133 C44C 68                                   pla                   ;get bytes to copy
   2134 C44D AA                                   tax                   ;save a copy
   2135 C44E 18                                   clc
   2136 C44F 65 A9                                adc operand           ;change target to...
   2137 C451 A8                                   tay                   ;target end
   2138 C452 8A                                   txa                   ;recover bytes to copy
   2139 C453 A6 92                                ldx addrb             ;source end
   2140 C455 80 0C                                bra .0000030
                                        ;
   2142 C457 A5 9D                      .0000020 lda facb              ;get bytes to copy
   2143 C459 48                                   pha                   ;protect
   2144 C45A 20 2B CC                             jsr lodbnk            ;load banks
   2145 C45D 20 C4 C9                             jsr cpfwsup           ;do forward copy setup
   2146 C460 68                                   pla                   ;get bytes to copy
   2147 C461 A6 8F                                ldx addra             ;source start
                                        ;
   2149 C463 4C C0 00                   .0000030 jmp mcftwork          ;copy memory
                                        ;
   2151 C466 4C E5 C0                   .0000040 jmp monce             ;back to executive
                                        ;
   2153 C469 4C 24 C1                   .0000050 jmp monerr            ;error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;mondmp: DISPLAY MEMORY RANGE
                                        ;
                                        ;	—————————————————————————————
                                        ;	syntax: M [<addr1> [<addr2>]]
                                        ;	—————————————————————————————
                                        ;
   2163 C46C B0 0F                      mondmp   bcs .0000010          ;no parameters
                                        ;
   2165 C46E 20 67 CA                             jsr facasize          ;check address...
   2166 C471 C9 04                                cmp #s_dword          ;range
   2167 C473 B0 46                                bcs .0000050          ;address out of range
                                        ;
   2169 C475 20 49 CA                             jsr facaddra          ;copy starting address
   2170 C478 20 7B CA                             jsr getparm           ;get ending address
   2171 C47B 90 17                                bcc .0000020          ;gotten
                                        ;
   2173 C47D 20 37 C9                   .0000010 jsr clrfaca           ;clear accumulator
   2174 C480 C2 20                    +            .byte $c2,$20
                                        
   2175 C482 18                                   clc
   2176 C483 A5 8F                                lda addra             ;starting address
   2177 C485 69 FF                    +            adc #<n_mbytes
   2177 C487 00                       +            .byte >n_mbytes
                                        ;default bytes
   2178 C488 85 95                                sta faca              ;effective ending address
   2179 C48A E2 20                    +            .byte $e2,$20
                                        
   2180 C48C A5 91                                lda addra+s_word      ;starting bank
   2181 C48E 69 00                                adc #0
   2182 C490 85 97                                sta faca+s_word       ;effective ending bank
   2183 C492 B0 27                                bcs .0000050          ;end address > $FFFFFF
                                        ;
   2185 C494 20 67 CA                   .0000020 jsr facasize          ;check ending address...
   2186 C497 C9 04                                cmp #s_dword          ;range
   2187 C499 B0 20                                bcs .0000050          ;out of range — error
                                        ;
   2189 C49B 20 53 CA                             jsr facaddrb          ;copy ending address
   2190 C49E 20 7B CA                             jsr getparm           ;check for excess input
   2191 C4A1 90 18                                bcc .0000050          ;error
                                        ;
   2193 C4A3 20 A3 C9                             jsr calccnt           ;calculate bytes to dump
   2194 C4A6 90 13                                bcc .0000050          ;end < start
                                        ;
   2196 C4A8 20 45 CC                   .0000030 jsr teststop          ;test for display stop
   2197 C4AB B0 0B                                bcs .0000040          ;stopped
                                        ;
   2199 C4AD 20 A4 C7                             jsr newline           ;next line
   2200 C4B0 20 21 C7                             jsr dpymem            ;display
   2201 C4B3 20 FF C9                             jsr decdcnt           ;decrement byte count
   2202 C4B6 90 F0                                bcc .0000030          ;not done
                                        ;
   2204 C4B8 4C E5 C0                   .0000040 jmp monce             ;back to main loop
                                        ;
   2206 C4BB 4C 24 C1                   .0000050 jmp monerr            ;address range error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monfil: FILL MEMORY
                                        ;
                                        ;	—————————————————————————————————————————
                                        ;	syntax: F <start> <end> <fill>
                                        ;
                                        ;	<start> & <end> must be in the same bank.
                                        ;	—————————————————————————————————————————
                                        ;
   2218 C4BE B0 5E                      monfil   bcs .0000010          ;start not given — quit
                                        ;
   2220 C4C0 20 67 CA                             jsr facasize          ;check size
   2221 C4C3 C9 04                                cmp #s_dword
   2222 C4C5 B0 5A                                bcs .0000020          ;out of range — error...
                                        ;
   2224 C4C7 20 49 CA                             jsr facaddra          ;store start
   2225 C4CA 20 7B CA                             jsr getparm           ;evaluate end
   2226 C4CD B0 52                                bcs .0000020          ;not entered — error
                                        ;
   2228 C4CF 20 67 CA                             jsr facasize          ;check size
   2229 C4D2 C9 04                                cmp #s_dword
   2230 C4D4 B0 4B                                bcs .0000020          ;out of range — error
                                        ;
   2232 C4D6 A5 97                                lda faca+s_word       ;end bank
   2233 C4D8 C5 91                                cmp addra+s_word      ;start bank
   2234 C4DA D0 45                                bne .0000020          ;not same — error
                                        ;
   2236 C4DC 20 53 CA                             jsr facaddrb          ;store <end>
   2237 C4DF C2 20                    +            .byte $c2,$20
                                        
   2238 C4E1 38                                   sec
   2239 C4E2 A5 92                                lda addrb             ;ending address
   2240 C4E4 E5 8F                                sbc addra             ;starting address
   2241 C4E6 90 39                                bcc .0000020          ;start > end — error
                                        ;
   2243 C4E8 85 9D                                sta facb              ;bytes to copy
   2244 C4EA E2 20                    +            .byte $e2,$20
                                        
   2245 C4EC 20 7B CA                             jsr getparm           ;evaluate <fill>
   2246 C4EF B0 30                                bcs .0000020          ;not entered — error
                                        ;
   2248 C4F1 20 67 CA                             jsr facasize          ;<fill> should be...
   2249 C4F4 C9 02                                cmp #s_word           ;8 bits
   2250 C4F6 B0 29                                bcs .0000020          ;it isn't — error
                                        ;
   2252 C4F8 20 5D CA                             jsr facaoper          ;store <fill>
   2253 C4FB 20 7B CA                             jsr getparm           ;should be no more parameters
   2254 C4FE 90 21                                bcc .0000020          ;there are — error
                                        ;
   2256 C500 A5 A9                                lda operand           ;<fill>
   2257 C502 87 8F                    +            .byte $87,addra
                                        ;fill 1st location
   2258 C504 C2 30                    +            .byte $c2,$30
                                                         ;16 bit operations
   2259 C506 A5 9D                                lda facb              ;
   2260 C508 F0 14                                beq .0000010          ;only 1 location — finished
                                        ;
   2262 C50A 3A                                   dea                   ;zero align &...
   2263 C50B 48                                   pha                   ;protect
   2264 C50C E2 20                    +            .byte $e2,$20
                                        
   2265 C50E A5 91                                lda addra+s_word      ;start bank
   2266 C510 EB                       +            .byte $eb
                                        
   2267 C511 A5 94                                lda addrb+s_word      ;end bank
   2268 C513 20 C4 C9                             jsr cpfwsup           ;do forward copy setup
   2269 C516 68                                   pla                   ;recover fill count
   2270 C517 A6 8F                                ldx addra             ;fill-from starting location
   2271 C519 9B                       +            .byte $9b
                                        
   2272 C51A C8                                   iny                   ;fill-to starting location
   2273 C51B 4C C0 00                             jmp mcftwork          ;fill memory
                                        ;
   2275 C51E 4C E5 C0                   .0000010 jmp monce             ;goto command executive
                                        ;
   2277 C521 4C 24 C1                   .0000020 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monhnt: SEARCH (hunt) MEMORY
                                        ;
                                        ;	———————————————————————————————————
                                        ;	syntax: H <addr1> <addr2> <pattern>
                                        ;	———————————————————————————————————
                                        ;
   2287 C524 B0 40                      monhnt   bcs .0000050          ;no start address
                                        ;
   2289 C526 20 67 CA                             jsr facasize          ;size starting address
   2290 C529 C9 04                                cmp #s_dword
   2291 C52B B0 3C                                bcs .0000060          ;address out of range — error
                                        ;
   2293 C52D 20 49 CA                             jsr facaddra          ;store starting address
   2294 C530 20 7B CA                             jsr getparm           ;evaluate ending address
   2295 C533 B0 34                                bcs .0000060          ;no address — error
                                        ;
   2297 C535 20 67 CA                             jsr facasize          ;size ending address
   2298 C538 C9 04                                cmp #s_dword
   2299 C53A B0 2D                                bcs .0000060          ;address out of range — error
                                        ;
   2301 C53C 20 53 CA                             jsr facaddrb          ;store ending address
   2302 C53F 20 A3 C9                             jsr calccnt           ;calculate byte range
   2303 C542 90 25                                bcc .0000060          ;end < start
                                        ;
   2305 C544 20 7C CB                             jsr getpat            ;evaluate search pattern
   2306 C547 B0 20                                bcs .0000060          ;error
                                        ;
   2308 C549 64 BA                                stz xrtemp            ;clear column counter
                                        ;
   2310 C54B 20 45 CC                   .0000010 jsr teststop          ;check for stop
   2311 C54E B0 16                                bcs .0000050          ;abort
                                        ;
   2313 C550 A4 AC                                ldy auxbufix          ;pattern index
                                        ;
   2315 C552 88                         .0000020 dey
   2316 C553 30 09                                bmi .0000030          ;pattern match
                                        ;
   2318 C555 B7 8F                    +            .byte $b7,addra
                                        ;get from memory
   2319 C557 D9 51 02                             cmp auxbuf,y          ;test against pattern
   2320 C55A D0 05                                bne .0000040          ;mismatch, next location
                                        ;
   2322 C55C F0 F4                                beq .0000020          ;match, keep testing
                                        ;
   2324 C55E 20 F3 C5                   .0000030 jsr dpycaddr          ;display current location
                                        ;
   2326 C561 20 A3 CA                   .0000040 jsr nxtaddra          ;next location
   2327 C564 90 E5                                bcc .0000010          ;not done
                                        ;
   2329 C566 4C E5 C0                   .0000050 jmp monce             ;back to executive
                                        ;
   2331 C569 4C 24 C1                   .0000060 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monenv: CONVERT NUMERIC VALUE
                                        ;
                                        ;	——————————————————————
                                        ;	syntax: <radix><value>
                                        ;	——————————————————————
                                        ;
   2341 C56C 20 79 CA                   monenv   jsr getparmr          ;reread & evaluate parameter
   2342 C56F B0 26                                bcs .0000020          ;none entered
                                        ;
   2344 C571 A2 00                                ldx #0                ;radix index
   2345 C573 A0 04                                ldy #n_radix          ;number of radices
                                        ;
   2347 C575 5A                         .0000010 phy                   ;save counter
   2348 C576 DA                                   phx                   ;save radix index
   2349 C577 20 A4 C7                             jsr newline           ;next line &...
   2350 C57A 20 17 C7                             jsr clearlin          ;clear it
   2351 C57D A9 20                                lda #a_blank
   2352 C57F A2 04                                ldx #halftab
   2353 C581 20 97 C7                             jsr multspc           ;indent 1/2 tab
   2354 C584 FA                                   plx                   ;get radix index but...
   2355 C585 DA                                   phx                   ;put it back
   2356 C586 BD 8B CC                             lda radxtab,x         ;get radix
   2357 C589 20 90 C8                             jsr binasc            ;convert to ASCII
   2358 C58C 5A                                   phy                   ;string address MSB
   2359 C58D DA                                   phx                   ;string address LSB
   2360 C58E 20 B9 C7                             jsr sprint            ;print
   2361 C591 FA                                   plx                   ;get index again
   2362 C592 7A                                   ply                   ;get counter
   2363 C593 E8                                   inx
   2364 C594 88                                   dey
   2365 C595 D0 DE                                bne .0000010          ;no
                                        
   2367 C597 4C E5 C0                   .0000020 jmp monce             ;back to command exec
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monchr: CHANGE REGISTERS
                                        ;
                                        ;	——————————————————————————————————————————————————————
                                        ;	syntax: ; [PB [PC [.S [.C [.X [.Y [SP [DP [DB]]]]]]]]]
                                        ;
                                        ;	; with no parameters is the same as the R command.
                                        ;	——————————————————————————————————————————————————————
                                        ;
   2379 C59A B0 33                      monchr   bcs .0000040          ;dump registers & quit
                                        ;
   2381 C59C A0 00                                ldy #0                ;register counter
   2382 C59E 84 A3                                sty facc              ;initialize register index
                                        ;
   2384 C5A0 20 67 CA                   .0000010 jsr facasize          ;get parameter size
   2385 C5A3 D9 8F CC                             cmp rcvltab,y         ;check against size table
   2386 C5A6 B0 2A                                bcs .0000050          ;out of range
                                        ;
   2388 C5A8 B9 8F CC                             lda rcvltab,y         ;determine number of bytes...
   2389 C5AB C9 03                                cmp #s_word+1         ;to store
   2390 C5AD 66 A4                                ror facc+s_byte       ;condition flag
   2391 C5AF 10 02                                bpl .0000020          ;8 bit register size
                                        ;
   2393 C5B1 C2 20                    +            .byte $c2,$20
                                                         ;16 bit register size
                                        ;
   2395 C5B3 A6 A3                      .0000020 ldx facc              ;get register index
   2396 C5B5 A5 95                                lda faca              ;get parm
   2397 C5B7 95 80                                sta reg_pbx,x         ;put in shadow storage
   2398 C5B9 E2 20                    +            .byte $e2,$20
                                        
   2399 C5BB 06 A4                                asl facc+s_byte       ;mode flag to carry
   2400 C5BD 8A                                   txa                   ;register index
   2401 C5BE 69 01                                adc #s_byte           ;at least 1 byte stored
   2402 C5C0 85 A3                                sta facc              ;save new index
   2403 C5C2 20 7B CA                             jsr getparm           ;get a parameter
   2404 C5C5 B0 08                                bcs .0000040          ;EOI
                                        ;
   2406 C5C7 C8                                   iny                   ;bump register count
   2407 C5C8 C0 09                                cpy #n_regchv         ;all registers processed?
   2408 C5CA D0 D4                                bne .0000010          ;no, keep going
                                        ;
   2410 C5CC 20 B0 C7                   .0000030 jsr alert             ;excessive input
                                        ;
   2412 C5CF 4C 98 C0                   .0000040 jmp monreg            ;display changes
                                        ;
   2414 C5D2 4C 24 C1                   .0000050 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monxit: EXIT TO OPERATING ENVIRONMENT
                                        ;
                                        ;	—————————
                                        ;	syntax: X
                                        ;	—————————
                                        ;
   2424 C5D5 90 19                      monxit   bcc .0000020          ;no parameters allowed
                                        ;
   2426 C5D7 C2 20                    +            .byte $c2,$20
                                        
   2427 C5D9 AD 02 01                             lda vecbrki           ;BRK indirect vector
   2428 C5DC C9 59                    +            cmp #<monbrk
   2428 C5DE C0                       +            .byte >monbrk
                                        ;we intercept it?
   2429 C5DF D0 09                                bne .0000010          ;no, don't change it
                                        ;
   2431 C5E1 AD 05 01                             lda vecbrkia          ;old vector
   2432 C5E4 8D 02 01                             sta vecbrki           ;restore it
   2433 C5E7 9C 05 01                             stz vecbrkia          ;invalidate old vector
                                        ;         
   2435 C5EA E2 30                      .0000010 +         .byte $e2,$30
                                        
   2436 C5EC 5C 03 F4 00                          jml vecexit           ;long jump to exit
                                        ;
   2438 C5F0 4C 24 C1                   .0000020 jmp monerr            ;goto error handler
                                        ;
                                        ; * * * * * * * * * * * * * * * * * * * * * * * *
                                        ; * * * * * * * * * * * * * * * * * * * * * * * *
                                        ; * *                                         * *
                                        ; * * S T A R T   o f   S U B R O U T I N E S * *
                                        ; * *                                         * *
                                        ; * * * * * * * * * * * * * * * * * * * * * * * *
                                        ; * * * * * * * * * * * * * * * * * * * * * * * *
                                        ;
                                        ;dpycaddr: DISPLAY CURRENT ADDRESS IN COLUMNS
                                        ;
   2450 C5F3 A6 BA                      dpycaddr ldx xrtemp            ;column count
   2451 C5F5 D0 05                                bne .0000010          ;not at right side
                                        ;
   2453 C5F7 20 A4 C7                             jsr newline           ;next row
   2454 C5FA A2 08                                ldx #n_hccols         ;max columns
                                        ;
   2456 C5FC E0 08                      .0000010 cpx #n_hccols         ;max columns
   2457 C5FE F0 05                                beq .0000020          ;at left margin
                                        ;
   2459 C600 A9 09                                lda #a_ht
   2460 C602 20 06 F4                             jsr putcha            ;tab a column
                                        ;
   2462 C605 CA                         .0000020 dex                   ;one less column
   2463 C606 86 BA                                stx xrtemp            ;save column counter
   2464 C608 4C 70 C7                             jmp prntladr          ;print reference address
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpycod: DISASSEMBLE & DISPLAY CODE
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	This function disassembles & displays the machine code at  the  location
                                        ;	pointed to by ADDRA.  Upon return, ADDRA will point to the opcode of the
                                        ;	next instruction.   The entry point at DPYCODAA  should be called with a
                                        ;	disassembly prefix character loaded in .A.   If entered  at  DPYCOD, the
                                        ;	default character will be display at the beginning of each  disassembled
                                        ;	instruction.
                                        ;
                                        ;	The disassembly of immediate mode instructions that can take an 8 or  16
                                        ;	bit operand is affected by the bit pattern that is  stored  in  FLIMFLAG
                                        ;	upon entry to this function:
                                        ;
                                        ;	    FLIMFLAG: xx000000
                                        ;	              ||
                                        ;	              |+—————————> 0:  8 bit .X or .Y operand
                                        ;	              |            1: 16 bit .X or .Y operand
                                        ;	              +——————————> 0:  8 bit .A or BIT # operand
                                        ;	                           1: 16 bit .A or BIT # operand
                                        ;
                                        ;	FLIMFLAG is conditioned according to the operand of  the  most  recently
                                        ;	disassembled REP or SEP instruction.   Hence repetitive  calls  to  this
                                        ;	subroutine will usually result in the correct disassembly of 16 bit imm-
                                        ;	ediate mode instructions.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
   2495 C60B A9 2E                       public dpycod   lda #disprfx          ;default prefix
                                        ;
                                        ;
                                        ;	alternate prefix display entry point...
                                        ;
   2500 C60D 20 06 F4                   dpycodaa jsr putcha            ;print prefix
   2501 C610 20 B4 C7                             jsr printspc          ;space
   2502 C613 20 70 C7                             jsr prntladr          ;print long address
   2503 C616 20 B4 C7                             jsr printspc          ;space to opcode field
   2504 C619 20 75 CA                             jsr getbyte           ;get opcode
   2505 C61C 85 B8                                sta opcode            ;save &...
   2506 C61E 20 A9 C7                             jsr printbyt          ;display as hex
                                        ;
                                        ;
                                        ;	decode menmonic & addressing info...
                                        ;
   2511 C621 A6 B8                                ldx opcode            ;current mnemonic
   2512 C623 BD 50 CD                             lda mnetabix,x        ;get mnemonic index
   2513 C626 0A                                   asl                   ;double for...
   2514 C627 A8                                   tay                   ;mnemonic table offset
   2515 C628 C2 20                    +            .byte $c2,$20
                                                         ;16 bit load
   2516 C62A B9 98 CC                             lda mnetab,y          ;copy encoded mnemonic to...
   2517 C62D 85 B6                                sta mnepck            ;working storage
   2518 C62F E2 20                    +            .byte $e2,$20
                                                        ;back to 8 bits
   2519 C631 20 D7 CA                             jsr instdata          ;extract mode & size data
   2520 C634 85 BF                                sta vopsflag          ;save mode flags
   2521 C636 84 B1                                sty admodidx          ;save mode index
   2522 C638 0A                                   asl                   ;variable immediate instruction?
   2523 C639 90 1F                                bcc dpycod01          ;no, effective operand size in .X
                                        ;
                                        ;
                                        ;	determine immediate mode operand size...
                                        ;
   2528 C63B A5 B8                                lda opcode            ;current opcode
   2529 C63D 24 BC                                bit flimflag          ;operand display mode
   2530 C63F 10 08                                bpl .0000010          ;8 bit .A & BIT immediate mode
                                        ;
   2532 C641 29 1F                                and #aimmaska         ;determine if...
   2533 C643 C9 09                                cmp #aimmaskb         ;.A or BIT immediate
   2534 C645 F0 10                                beq .0000030          ;display 16 bit operand
                                        ;
   2536 C647 A5 B8                                lda opcode            ;not .A or BIT immediate
                                        ;
   2538 C649 50 0F                      .0000010 bvc dpycod01          ;8 bit .X/.Y immediate mode
                                        ;
   2540 C64B A0 03                                ldy #n_vopidx-1       ;opcodes to test
                                        ;
   2542 C64D D9 50 CF                   .0000020 cmp vopidx,y          ;looking for LDX #, CPY #, etc.
   2543 C650 F0 07                                beq .0000040          ;disassemble a 16 bit operand
                                        ;
   2545 C652 88                                   dey
   2546 C653 10 F8                                bpl .0000020          ;keep trying
                                        ;
   2548 C655 80 03                                bra dpycod01          ;not .X or .Y immediate
                                        ;
   2550 C657 A5 B8                      .0000030 lda opcode            ;reload
                                        ;
   2552 C659 E8                         .0000040 inx                   ;16 bit operand
                                        ;
                                        ;
                                        ;	get & display operand bytes...
                                        ;
   2557 C65A 86 BD                      dpycod01 stx iopsize           ;operand size...
   2558 C65C E8                                   inx                   ;plus opcode becomes...
   2559 C65D 86 B4                                stx instsize          ;instruction size
   2560 C65F 86 B2                                stx charcnt           ;total bytes to process
   2561 C661 A9 0B                                lda #n_opcols+2       ;total operand columns plus WS
   2562 C663 85 BA                                sta xrtemp            ;initialize counter
   2563 C665 20 B8 C9                             jsr clroper           ;clear operand
   2564 C668 A4 BD                                ldy iopsize           ;operand size
   2565 C66A F0 16                                beq .0000020          ;no operand
                                        ;
   2567 C66C A2 00                                ldx #0                ;operand index
                                        ;
   2569 C66E 20 75 CA                   .0000010 jsr getbyte           ;get operand byte
   2570 C671 95 A9                                sta operand,x         ;save
   2571 C673 DA                                   phx                   ;protect operand index
   2572 C674 20 A9 C7                             jsr printbyt          ;print operand byte
   2573 C677 C6 BA                                dec xrtemp            ;3 columns used, 2 for...
   2574 C679 C6 BA                                dec xrtemp            ;operand nybbles &...
   2575 C67B C6 BA                                dec xrtemp            ;1 for whitespace
   2576 C67D FA                                   plx                   ;get operand index
   2577 C67E E8                                   inx                   ;bump it
   2578 C67F 88                                   dey
   2579 C680 D0 EC                                bne .0000010          ;next
                                        ;
   2581 C682 A6 BA                      .0000020 ldx xrtemp            ;operand columns remaining
   2582 C684 20 97 C7                             jsr multspc           ;space to mnemonic field
                                        ;
                                        ;
                                        ;	display mnemonic...
                                        ;
   2587 C687 A0 03                                ldy #s_mnemon         ;size of ASCII mnemonic
                                        ;
   2589 C689 A9 00                      .0000030 lda #0                ;initialize char
   2590 C68B A2 05                                ldx #n_shfenc         ;shifts to execute
                                        ;
   2592 C68D 06 B6                      .0000040 asl mnepck            ;shift encoded mnemonic
   2593 C68F 26 B7                                rol mnepck+s_byte
   2594 C691 2A                                   rol
   2595 C692 CA                                   dex
   2596 C693 D0 F8                                bne .0000040
                                        ;
   2598 C695 69 3F                                adc #a_mnecvt         ;convert to ASCII &...
   2599 C697 48                                   pha                   ;stash
   2600 C698 88                                   dey
   2601 C699 D0 EE                                bne .0000030          ;continue with mnemonic
                                        ;
   2603 C69B A0 03                                ldy #s_mnemon
                                        ;
   2605 C69D 68                         .0000050 pla                   ;get mnenmonic byte
   2606 C69E 20 06 F4                             jsr putcha            ;print it
   2607 C6A1 88                                   dey
   2608 C6A2 D0 F9                                bne .0000050
                                        ;
                                        ;
                                        ;	display operand...
                                        ;
   2613 C6A4 A5 BD                                lda iopsize           ;operand size
   2614 C6A6 F0 6F                                beq clearlin          ;zero, disassembly finished
                                        ;
   2616 C6A8 20 B4 C7                             jsr printspc          ;space to operand field
   2617 C6AB 24 BF                                bit vopsflag          ;check mode flags
   2618 C6AD 50 08                                bvc dpycod02          ;not a branch
                                        ;
   2620 C6AF 20 ED CA                             jsr offtarg           ;compute branch target
   2621 C6B2 A6 B4                                ldx instsize          ;effective instruction size
   2622 C6B4 CA                                   dex
   2623 C6B5 86 BD                                stx iopsize           ;effective operand size
                                        ;
   2625 C6B7 64 BF                      dpycod02 stz vopsflag          ;clear
   2626 C6B9 A5 B1                                lda admodidx          ;instruction addressing mode
   2627 C6BB C9 0B                                cmp #am_move          ;block move instruction?
   2628 C6BD D0 02                                bne .0000010          ;no
                                        ;
   2630 C6BF 66 BF                                ror vopsflag          ;yes
                                        ;
   2632 C6C1 0A                         .0000010 asl                   ;convert addressing mode to...
   2633 C6C2 AA                                   tax                   ;symbology table index
   2634 C6C3 C2 20                    +            .byte $c2,$20
                                                         ;do a 16 bit load
   2635 C6C5 BD 54 CF                             lda ms_lutab,x        ;addressing symbol pointer
   2636 C6C8 48                                   pha
   2637 C6C9 E2 20                    +            .byte $e2,$20
                                                        ;back to 8 bit loads
   2638 C6CB A0 00                                ldy #0
   2639 C6CD B3 01                    +            .byte $b3,1
                                        ;get 1st char
   2640 C6CF C9 20                                cmp #a_blank
   2641 C6D1 F0 03                                beq .0000020          ;no addresing mode preamble
                                        ;
   2643 C6D3 20 06 F4                             jsr putcha            ;print preamble
                                        ;
   2645 C6D6 A9 24                      .0000020 lda #c_hex
   2646 C6D8 20 06 F4                             jsr putcha            ;operand displayed as hex
   2647 C6DB A4 BD                                ldy iopsize           ;operand size = index
                                        ;
   2649 C6DD 88                         .0000030 dey
   2650 C6DE 30 16                                bmi .0000040          ;done with operand
                                        ;
   2652 C6E0 B9 A9 00                             lda operand,y         ;get operand byte
   2653 C6E3 20 8D C7                             jsr dpyhex            ;print operand byte
   2654 C6E6 24 BF                                bit vopsflag          ;block move?
   2655 C6E8 10 F3                                bpl .0000030          ;no
                                        ;
   2657 C6EA 64 BF                                stz vopsflag          ;reset
   2658 C6EC 5A                                   phy                   ;protect operand index
   2659 C6ED F4                       +            .byte $f4
   2659 C6EE 8D CF                    +            .word ms_move
                                        
   2660 C6F0 20 B9 C7                             jsr sprint            ;display MVN/MVP operand separator
   2661 C6F3 7A                                   ply                   ;recover operand index again
   2662 C6F4 80 E7                                bra .0000030          ;continue
                                        ;
   2664 C6F6 FA                         .0000040 plx                   ;symbology LSB
   2665 C6F7 7A                                   ply                   ;symbology MSB
   2666 C6F8 E8                                   inx                   ;move past preamble
   2667 C6F9 D0 01                                bne .0000050
                                        ;
   2669 C6FB C8                                   iny
                                        ;
   2671 C6FC 5A                         .0000050 phy
   2672 C6FD DA                                   phx
   2673 C6FE 20 B9 C7                             jsr sprint            ;print postamble, if any
                                        ;
                                        ;
                                        ;	condition immediate mode display format...
                                        ;
   2678 C701 A5 A9                      dpycod03 lda operand           ;operand LSB
   2679 C703 29 30                                and #pfmxmask         ;isolate M & X bits
   2680 C705 0A                                   asl                   ;shift to match...
   2681 C706 0A                                   asl                   ;FLIMFLAG alignment
   2682 C707 A6 B8                                ldx opcode            ;current instruction
   2683 C709 E0 C2                                cpx #opc_rep          ;was it REP?
   2684 C70B D0 04                                bne .0000010          ;no
                                        ;
   2686 C70D 04 BC                                tsb flimflag          ;set flag bits as required
   2687 C70F 80 06                                bra clearlin
                                        ;
   2689 C711 E0 E2                      .0000010 cpx #opc_sep          ;was it SEP?
   2690 C713 D0 02                                bne clearlin          ;no, just exit
                                        ;
   2692 C715 14 BC                                trb flimflag          ;clear flag bits as required
                                        ;
                                        ;================================================================================
                                        ;
                                        ;clearlin: CLEAR DISPLAY LINE
                                        ;
   2698 C717 F4                         clearlin +         .byte $f4
   2698 C718 A5 CF                    +            .word dc_cl
                                        
   2699 C71A 80 4B                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpyibuf: DISPLAY MONITOR INPUT BUFFER CONTENTS
                                        ;
   2705 C71C F4                         dpyibuf +         .byte $f4
   2705 C71D 00 02                    +            .word ibuffer
                                        
   2706 C71F 80 46                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpymem: DISPLAY MEMORY
                                        ;
                                        ;	————————————————————————————————————————————————————————————
                                        ;	This function displays 16 bytes of memory as hex values & as
                                        ;	ASCII equivalents.  The starting address for the display is
                                        ;	in ADDRA & is expected to be a 24 bit address.  Upon return,
                                        ;	ADDRA will point to the start of the next 16 bytes.
                                        ;	————————————————————————————————————————————————————————————
                                        ;
   2719 C721 E2 30                      dpymem +         .byte $e2,$30
                                        
   2720 C723 64 B2                                stz charcnt           ;reset
   2721 C725 A9 3E                                lda #memprfx
   2722 C727 20 06 F4                             jsr putcha            ;display prefix
   2723 C72A 20 70 C7                             jsr prntladr          ;print 24 bit address
   2724 C72D A2 00                                ldx #0                ;string buffer index
   2725 C72F A0 08                                ldy #n_dump           ;bytes per line
                                        ;
   2727 C731 20 75 CA                   .0000010 jsr getbyte           ;get from RAM, also...
   2728 C734 48                                   pha                   ;save for decoding
   2729 C735 DA                                   phx                   ;save string index
   2730 C736 20 A9 C7                             jsr printbyt          ;display as hex ASCII
   2731 C739 E6 B2                                inc charcnt           ;bytes displayed +1
   2732 C73B FA                                   plx                   ;recover string index &...
   2733 C73C 68                                   pla                   ;byte
   2734 C73D C9 20                                cmp #a_blank          ;printable?
   2735 C73F 90 04                                bcc .0000020          ;no
                                        ;
   2737 C741 C9 7F                                cmp #a_del
   2738 C743 90 02                                bcc .0000030          ;is printable
                                        ;
   2740 C745 A9 2E                      .0000020 lda #memsubch         ;substitute character
                                        ;
   2742 C747 9D 00 02                   .0000030 sta ibuffer,x         ;save char
   2743 C74A E8                                   inx                   ;bump index
   2744 C74B 88                                   dey                   ;byte count -= 1
   2745 C74C D0 E3                                bne .0000010          ;not done
                                        ;
   2747 C74E 9E 00 02                             stz ibuffer,x         ;terminate ASCII string
   2748 C751 A9 3A                                lda #memsepch
   2749 C753 20 06 F4                             jsr putcha            ;separate ASCII from bytes
   2750 C756 F4                       +            .byte $f4
   2750 C757 9B CF                    +            .word dc_bf
                                        
   2751 C759 20 B9 C7                             jsr sprint            ;select reverse video
   2752 C75C 20 1C C7                             jsr dpyibuf           ;display ASCII equivalents
   2753 C75F F4                       +            .byte $f4
   2753 C760 B0 CF                    +            .word dc_er
                                        ;normal video
   2754 C762 80 03                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpyerr: DISPLAY ERROR SIGNAL
                                        ;
   2760 C764 F4                         dpyerr +         .byte $f4
   2760 C765 DD CF                    +            .word mm_err
                                        ;"*ERR"
                                        ;
   2762 C767 20 B9 C7                   dpyerraa jsr sprint
   2763 C76A 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;gendbs: GENERATE DESTRUCTIVE BACKSPACE
                                        ;
   2769 C76B F4                         gendbs +         .byte $f4
   2769 C76C A1 CF                    +            .word dc_bs
                                        ;destructive backspace
   2770 C76E 80 F7                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;prntladr: PRINT 24 BIT CURRENT ADDRESS
                                        ;
   2776 C770 08                         prntladr php                   ;protect register sizes
   2777 C771 E2 20                    +            .byte $e2,$20
                                        
   2778 C773 A5 91                                lda addra+s_word      ;get bank byte &...
   2779 C775 20 8D C7                             jsr dpyhex            ;display it
   2780 C778 C2 20                    +            .byte $c2,$20
                                        
   2781 C77A A5 8F                                lda addra             ;get 16 bit address
   2782 C77C 28                                   plp                   ;restore register sizes
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpyhexw: DISPLAY BINARY WORD AS HEX ASCII
                                        ;
                                        ;	————————————————————————————————————
                                        ;	Preparatory Ops: .C: word to display
                                        ;
                                        ;	Returned Values: .C: used
                                        ;	                 .X: used
                                        ;	                 .Y: entry value
                                        ;	————————————————————————————————————
                                        ;
   2796 C77D 08                         dpyhexw  php                   ;save register sizes
   2797 C77E C2 20                    +            .byte $c2,$20
                                        
   2798 C780 48                                   pha                   ;protect value
   2799 C781 E2 20                    +            .byte $e2,$20
                                        
   2800 C783 EB                       +            .byte $eb
                                                           ;get MSB &...
   2801 C784 20 8D C7                             jsr dpyhex            ;display
   2802 C787 C2 20                    +            .byte $c2,$20
                                        
   2803 C789 68                                   pla                   ;recover value
   2804 C78A E2 20                    +            .byte $e2,$20
                                                        ;only LSB visible
   2805 C78C 28                                   plp                   ;reset register sizes
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpyhex: DISPLAY BINARY BYTE AS HEX ASCII
                                        ;
                                        ;	————————————————————————————————————
                                        ;	Preparatory Ops: .A: byte to display
                                        ;
                                        ;	Returned Values: .A: used
                                        ;	                 .X: used
                                        ;	                 .Y: entry value
                                        ;	————————————————————————————————————
                                        ;
   2819 C78D 20 24 C9                   dpyhex   jsr binhex            ;convert to hex ASCII
   2820 C790 20 06 F4                             jsr putcha            ;print MSN
   2821 C793 8A                                   txa
   2822 C794 4C 06 F4                             jmp putcha            ;print LSN
                                        ;
                                        ;================================================================================
                                        ;
                                        ;multspc: PRINT MULTIPLE BLANKS
                                        ;
                                        ;	————————————————————————————————————————————————
                                        ;	Preparatory Ops : .X: number of blanks to print
                                        ;
                                        ;	Register Returns: none
                                        ;
                                        ;	Calling Example : ldx #3
                                        ;	                  jsr multspc    ;print 3 spaces
                                        ;
                                        ;	Notes: This sub will print 1 blank if .X=0.
                                        ;	————————————————————————————————————————————————
                                        ;
   2839 C797 8A                         multspc  txa
   2840 C798 D0 01                                bne .0000010          ;blank count specified
                                        ;
   2842 C79A E8                                   inx                   ;default to 1 blank
                                        ;
   2844 C79B A9 20                      .0000010 lda #a_blank
                                        ;
   2846 C79D 20 06 F4                   .0000020 jsr putcha
   2847 C7A0 CA                                   dex
   2848 C7A1 D0 FA                                bne .0000020
                                        ;
   2850 C7A3 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;newline: PRINT NEWLINE (CRLF)
                                        ;
   2856 C7A4 F4                         newline +         .byte $f4
   2856 C7A5 B6 CF                    +            .word dc_lf
                                        
   2857 C7A7 80 BE                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;printbyt: PRINT A BYTE WITH LEADING SPACE
                                        ;
   2863 C7A9 48                         printbyt pha                   ;protect byte
   2864 C7AA 20 B4 C7                             jsr printspc          ;print leading space
   2865 C7AD 68                                   pla                   ;restore &...
   2866 C7AE 80 DD                                bra dpyhex            ;print byte
                                        ;         
                                        ;================================================================================
                                        ;
                                        ;alert: ALERT USER w/TERMINAL BELL
                                        ;
   2872 C7B0 A9 07                      alert    lda #a_bel
   2873 C7B2 80 02                                bra printcmn
                                        ;
                                        ;================================================================================
                                        ;
                                        ;printspc: PRINT A SPACE
                                        ;
   2879 C7B4 A9 20                      printspc lda #a_blank
                                        ;
   2881 C7B6 4C 06 F4                   printcmn jmp putcha
                                        ;
                                        ;================================================================================
                                        ;
                                        ;sprint: PRINT NULL-TERMINATED CHARACTER STRING
                                        ;
                                        ;	—————————————————————————————————————————————————————————
                                        ;	Preparatory Ops : SP+1: string address LSB
                                        ;	                  SP+2: string address MSB
                                        ;
                                        ;	Register Returns: .A: used
                                        ;	                  .B: entry value
                                        ;	                  .X: used
                                        ;	                  .Y: used
                                        ;
                                        ;	MPU Flags: NVmxDIZC
                                        ;	           ||||||||
                                        ;	           |||||||+———> 0: okay
                                        ;	           |||||||      1: string too long (1)
                                        ;	           ||||+++————> not defined
                                        ;	           |||+———————> 1
                                        ;	           ||+————————> 1
                                        ;	           ++—————————> not defined
                                        ;
                                        ;	Example: PER STRING
                                        ;	         JSR SPRINT
                                        ;	         BCS TOOLONG
                                        ;
                                        ;	Notes: 1) Maximum permissible string length including the
                                        ;	          terminator is 32,767 bytes.
                                        ;	       2) All registers are forced to 8 bits.
                                        ;	       3) DO NOT JUMP OR BRANCH INTO THIS FUNCTION!
                                        ;	—————————————————————————————————————————————————————————
                                        ;
   2915 C7B9 E2 20                      sprint +         .byte $e2,$20
                                                        ;8 bit accumulator
   2916 C7BB C2 10                    +            .byte $c2,$10
                                                         ;16 bit index
                                        ;
                                        ;—————————————————————————————————————————————————————————
   3053 = 0000000000000001                            .reetaddr =1                    ;return address
                                        
   3055 = 00000003                      .src     =.reetaddr+s_word      ;string address stack offset
                                        
                                        ;—————————————————————————————————————————————————————————
                                        ;
   2925 C7BD A0 00                    +            ldy #<0
   2925 C7BF 00                       +            .byte >0
                                        
   2926 C7C0 18                                   clc                   ;no initial error
                                        ;
   2928 C7C1 B3 03                      .0000010 +         .byte $b3,.src
                                        ;get a byte
   2929 C7C3 F0 07                                beq .0000020          ;done
                                        ;
   2931 C7C5 20 06 F4                             jsr putcha            ;write to console port
   2932 C7C8 C8                                   iny
   2933 C7C9 10 F6                                bpl .0000010          ;next
                                        ;
   2935 C7CB 38                                   sec                   ;string too long
                                        ;
   2937 C7CC FA                         .0000020 plx                   ;pull RTS address
   2938 C7CD 7A                                   ply                   ;clear string pointer
   2939 C7CE DA                                   phx                   ;replace RTS
   2940 C7CF E2 10                    +            .byte $e2,$10
                                        
   2941 C7D1 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;ascbin: CONVERT NULL-TERMINATED ASCII NUMBER STRING TO BINARY
                                        ;
                                        ;	———————————————————————————————————————————————————
                                        ;	Preparatory Ops: ASCII number string in IBUFFER
                                        ;
                                        ;	Returned Values: FACA: converted parameter
                                        ;	                   .A: used
                                        ;	                   .X: used
                                        ;	                   .Y: used
                                        ;	                   .C: 1 = conversion error
                                        ;	                   .Z: 1 = nothing to convert
                                        ;
                                        ;	Notes: 1) Conversion stops when a non-numeric char-
                                        ;	          acter is encountered.
                                        ;	       2) Radix symbols are as follows:
                                        ;
                                        ;	          % binary
                                        ;	          @ octal
                                        ;	          + decimal
                                        ;	          $ hexadecimal
                                        ;
                                        ;	          Hex is the default if no radix is speci-
                                        ;	          fied in the 1st character of the string.
                                        ;	———————————————————————————————————————————————————
                                        ;
   2970 C7D2 E2 30                      ascbin +         .byte $e2,$30
                                        
   2971 C7D4 20 37 C9                             jsr clrfaca           ;clear accumulator
   2972 C7D7 64 B2                                stz charcnt           ;zero char count
   2973 C7D9 64 B0                                stz radix             ;initialize
                                        ;
                                        ;
                                        ;	process radix if present...
                                        ;
   2978 C7DB 20 C6 CB                             jsr getcharw          ;get next non-WS char
   2979 C7DE D0 02                                bne .0000010          ;got something
                                        ;
   2981 C7E0 18                                   clc                   ;no more input
   2982 C7E1 60                                   rts
                                        ;
   2984 C7E2 A2 03                      .0000010 ldx #n_radix-1        ;number of radices
                                        ;
   2986 C7E4 DD 8B CC                   .0000020 cmp radxtab,x         ;recognized radix?
   2987 C7E7 F0 06                                beq .0000030          ;yes
                                        ;
   2989 C7E9 CA                                   dex
   2990 C7EA 10 F8                                bpl .0000020          ;try next
                                        ;
   2992 C7EC C6 AD                                dec ibufidx           ;reposition to previous char
   2993 C7EE E8                                   inx                   ;not recognized, assume hex
                                        ;
   2995 C7EF C9 2B                      .0000030 cmp #c_dec            ;decimal radix?
   2996 C7F1 D0 02                                bne .0000040          ;not decimal
                                        ;
   2998 C7F3 66 B0                                ror radix             ;flag decimal conversion
                                        ;
   3000 C7F5 BD 77 CC                   .0000040 lda basetab,x         ;number bases table
   3001 C7F8 85 BE                                sta range             ;set valid numeral range
   3002 C7FA BD 7B CC                             lda bitsdtab,x        ;get bits per digit
   3003 C7FD 85 AE                                sta bitsdig           ;store
                                        ;
                                        ;
                                        ;	process numerals...
                                        ;
   3008 C7FF 20 6A CB                   ascbin01 jsr getchar           ;get next char
   3009 C802 F0 70                                beq ascbin03          ;EOI
                                        ;
   3011 C804 C9 20                                cmp #' '
   3012 C806 F0 6C                                beq ascbin03          ;blank — EOF
                                        ;
   3014 C808 C9 2C                                cmp #','
   3015 C80A F0 68                                beq ascbin03          ;comma — EOF
                                        ;
   3017 C80C C9 09                                cmp #a_ht
   3018 C80E F0 64                                beq ascbin03          ;tab — EOF
                                        ;
   3020 C810 20 91 C9                             jsr nybtobin          ;change to binary
   3021 C813 B0 60                                bcs ascbin04          ;not a recognized numeral
                                        ;
   3023 C815 C5 BE                                cmp range             ;check range
   3024 C817 B0 5C                                bcs ascbin04          ;not valid for base
                                        ;
   3026 C819 85 AF                                sta numeral           ;save processed numeral
   3027 C81B E6 B2                                inc charcnt           ;bump numeral count
   3028 C81D 24 B0                                bit radix             ;working in base 10?
   3029 C81F 10 15                                bpl .0000030          ;no
                                        ;
                                        ;
                                        ;	compute N*2 for decimal conversion...
                                        ;
   3034 C821 A2 00                                ldx #0                ;accumulator index
   3035 C823 A0 02                                ldy #s_pfac/2         ;iterations
   3036 C825 C2 20                    +            .byte $c2,$20
                                        
   3037 C827 18                                   clc
                                        ;
   3039 C828 B5 95                      .0000020 lda faca,x            ;N
   3040 C82A 2A                                   rol                   ;N=N*2
   3041 C82B 95 9D                                sta facb,x
   3042 C82D E8                                   inx
   3043 C82E E8                                   inx
   3044 C82F 88                                   dey
   3045 C830 D0 F6                                bne .0000020
                                        ;
   3047 C832 B0 41                                bcs ascbin04          ;overflow — error
                                        ;
   3049 C834 E2 20                    +            .byte $e2,$20
                                        
                                        ;
                                        ;
                                        ;	compute N*base for binary, octal or hex...
                                        ;	or N*8 for decimal...
                                        ;
   3055 C836 A6 AE                      .0000030 ldx bitsdig           ;bits per digit
   3056 C838 C2 20                    +            .byte $c2,$20
                                                         ;16 bit shifts
                                        ;
   3058 C83A 06 95                      .0000040 asl faca
   3059 C83C 26 97                                rol faca+s_word
   3060 C83E B0 35                                bcs ascbin04          ;overflow — error
                                        ;
   3062 C840 CA                                   dex
   3063 C841 D0 F7                                bne .0000040          ;next shift
                                        ;
   3065 C843 E2 20                    +            .byte $e2,$20
                                                        ;back to 8 bits
   3066 C845 24 B0                                bit radix             ;check base
   3067 C847 10 13                                bpl ascbin02          ;not decimal
                                        ;
                                        ;
                                        ;	compute N*10 for decimal (N*8 + N*2)...
                                        ;
   3072 C849 A0 04                                ldy #s_pfac
   3073 C84B C2 20                    +            .byte $c2,$20
                                        
                                        ;
   3075 C84D B5 95                      .0000050 lda faca,x            ;N*8
   3076 C84F 75 9D                                adc facb,x            ;N*2
   3077 C851 95 95                                sta faca,x            ;now N*10
   3078 C853 E8                                   inx
   3079 C854 E8                                   inx
   3080 C855 88                                   dey
   3081 C856 D0 F5                                bne .0000050
                                        ;
   3083 C858 B0 1B                                bcs ascbin04          ;overflow — error
                                        ;
   3085 C85A E2 20                    +            .byte $e2,$20
                                        
                                        ;
                                        ;
                                        ;	add current numeral to partial result...
                                        ;
   3090 C85C A5 95                      ascbin02 lda faca              ;N
   3091 C85E 65 AF                                adc numeral           ;N=N+D
   3092 C860 85 95                                sta faca
   3093 C862 A2 01                                ldx #1
   3094 C864 A0 03                                ldy #s_pfac-1
                                        ;
   3096 C866 B5 95                      .0000010 lda faca,x
   3097 C868 69 00                                adc #0                ;account for carry
   3098 C86A 95 95                                sta faca,x
   3099 C86C E8                                   inx
   3100 C86D 88                                   dey
   3101 C86E D0 F6                                bne .0000010
                                        ;
   3103 C870 90 8D                                bcc ascbin01          ;next if no overflow
                                        ;
   3105 C872 B0 01                                bcs ascbin04          ;overflow — error
                                        ;
                                        ;
                                        ;	finish up...
                                        ;
   3110 C874 18                         ascbin03 clc                   ;no error
                                        ;
   3112 C875 E2 20                      ascbin04 +         .byte $e2,$20
                                                        ;reset if necessary
   3113 C877 A5 B2                                lda charcnt           ;load char count
   3114 C879 60                                   rts                   ;done
                                        ;
                                        ;================================================================================
                                        ;
                                        ;bcdasc: CONVERT BCD DIGIT TO ASCII
                                        ;
                                        ;	———————————————————————————————————————
                                        ;	Preparatory Ops: .A: BCD digit, $00-$99
                                        ;
                                        ;	Returned Values: .A: ASCII MSD
                                        ;	                 .X: ASCII LSD
                                        ;	                 .Y: entry value
                                        ;	———————————————————————————————————————
                                        ;
   3128 C87A 20 86 C8                   bcdasc   jsr bintonyb          ;extract nybbles
   3129 C87D 48                                   pha                   ;save tens
   3130 C87E 8A                                   txa                 
   3131 C87F 09 30                                ora #btoamask         ;change units to ASCII
   3132 C881 AA                                   tax                   ;store
   3133 C882 68                                   pla                   ;get tens
   3134 C883 09 30                                ora #btoamask         ;change to ASCII
   3135 C885 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;bintonyb: EXTRACT BINARY NYBBLES
                                        ;
                                        ;	—————————————————————————————————
                                        ;	Preparatory Ops: .A: binary value
                                        ;
                                        ;	Returned Values: .A: MSN
                                        ;	                 .X: LSN
                                        ;	                 .Y: entry value
                                        ;	—————————————————————————————————
                                        ;
   3149 C886 48                         bintonyb pha                   ;save
   3150 C887 29 0F                                and #bcdumask         ;extract LSN
   3151 C889 AA                                   tax                   ;save it
   3152 C88A 68                                   pla
                                        ;         .rept s_bnybbl        ;extract MSN
   3154 C88B 4A                                     lsr
   3155 C88C 4A                                     lsr
   3156 C88D 4A                                     lsr
   3157 C88E 4A                                     lsr
                                        ;         .endr
   3159 C88F 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;binasc: CONVERT 32-BIT BINARY TO NULL-TERMINATED ASCII NUMBER STRING
                                        ;
                                        ;	——————————————————————————————————————————————————————
                                        ;	Preparatory Ops: FACA: 32-bit operand
                                        ;	                   .A: radix character, w/bit 7 set to
                                        ;	                       suppress radix symbol in the
                                        ;	                       conversion string
                                        ;
                                        ;	Returned Values: ibuffer: conversion string
                                        ;	                      .A: string length
                                        ;	                      .X: string address LSB
                                        ;	                      .Y: string address MSB
                                        ;
                                        ;	Execution Notes: ibufidx & instsize are overwritten.
                                        ;	——————————————————————————————————————————————————————
                                        ;
   3179 C890 64 AD                      binasc   stz ibufidx           ;initialize string index
   3180 C892 64 B4                                stz instsize          ;clear format flag
                                        ;
                                        ;
                                        ;	evaluate radix...
                                        ;
   3185 C894 0A                                   asl                   ;extract format flag &...
   3186 C895 66 B4                                ror instsize          ;save it
   3187 C897 4A                                   lsr                   ;extract radix character
   3188 C898 A2 03                                ldx #n_radix-1        ;total radices
                                        ;
   3190 C89A DD 8B CC                   .0000010 cmp radxtab,x         ;recognized radix?
   3191 C89D F0 04                                beq .0000020          ;yes
                                        ;
   3193 C89F CA                                   dex
   3194 C8A0 10 F8                                bpl .0000010          ;try next
                                        ;
   3196 C8A2 E8                                   inx                   ;assume hex
                                        ;
   3198 C8A3 86 B0                      .0000020 stx radix             ;save radix index for later
   3199 C8A5 24 B4                                bit instsize
   3200 C8A7 30 08                                bmi .0000030          ;no radix symbol wanted
                                        ;
   3202 C8A9 BD 8B CC                             lda radxtab,x         ;radix table
   3203 C8AC 8D 00 02                             sta ibuffer           ;prepend to string
   3204 C8AF E6 AD                                inc ibufidx           ;bump string index
                                        ;
   3206 C8B1 C9 2B                      .0000030 cmp #c_dec            ;converting to decimal?
   3207 C8B3 D0 07                                bne .0000040          ;no
                                        ;
   3209 C8B5 20 49 C9                             jsr facabcd           ;convert operand to BCD
   3210 C8B8 A9 00                                lda #0
   3211 C8BA 80 17                                bra .0000070          ;skip binary stuff
                                        ;
                                        ;
                                        ;	prepare for binary, octal or hex conversion...
                                        ;
   3216 C8BC A2 00                      .0000040 ldx #0                ;operand index
   3217 C8BE A0 05                                ldy #s_sfac-1         ;workspace index
                                        ;
   3219 C8C0 B5 95                      .0000050 lda faca,x            ;copy operand to...
   3220 C8C2 99 9D 00                             sta facb,y            ;workspace in...
   3221 C8C5 88                                   dey                   ;big-endian order
   3222 C8C6 E8                                   inx
   3223 C8C7 E0 04                                cpx #s_pfac
   3224 C8C9 D0 F5                                bne .0000050
                                        ;
   3226 C8CB A9 00                                lda #0
   3227 C8CD BB                       +            .byte $bb
                                        
                                        ;
   3229 C8CE 95 9D                      .0000060 sta facb,x            ;pad workspace
   3230 C8D0 CA                                   dex
   3231 C8D1 10 FB                                bpl .0000060
                                        ;
                                        ;
                                        ;	set up conversion parameters...
                                        ;
   3236 C8D3 85 A3                      .0000070 sta facc              ;initialize byte counter
   3237 C8D5 A4 B0                                ldy radix             ;radix index
   3238 C8D7 B9 87 CC                             lda numstab,y         ;numerals in string
   3239 C8DA 85 A4                                sta facc+s_byte       ;set remaining numeral count
   3240 C8DC B9 7F CC                             lda bitsntab,y        ;bits per numeral
   3241 C8DF 85 A5                                sta facc+s_word       ;set
   3242 C8E1 B9 83 CC                             lda lzsttab,y         ;leading zero threshold
   3243 C8E4 85 A6                                sta facc+s_xword      ;set
                                        ;
                                        ;
                                        ;	generate conversion string...
                                        ;
   3248 C8E6 A9 00                      .0000080 lda #0
   3249 C8E8 A4 A5                                ldy facc+s_word       ;bits per numeral
                                        ;
   3251 C8EA A2 05                      .0000090 ldx #s_sfac-1         ;workspace size
   3252 C8EC 18                                   clc                   ;avoid starting carry
                                        ;
   3254 C8ED 36 9D                      .0000100 rol facb,x            ;shift out a bit...
   3255 C8EF CA                                   dex                   ;from the operand or...
   3256 C8F0 10 FB                                bpl .0000100          ;BCD conversion result
                                        ;
   3258 C8F2 2A                                   rol                   ;bit to .A
   3259 C8F3 88                                   dey
   3260 C8F4 D0 F4                                bne .0000090          ;more bits to grab
                                        ;
   3262 C8F6 A8                                   tay                   ;if numeral isn't zero...
   3263 C8F7 D0 0A                                bne .0000110          ;skip leading zero tests
                                        ;
   3265 C8F9 A6 A4                                ldx facc+s_byte       ;remaining numerals
   3266 C8FB E4 A6                                cpx facc+s_xword      ;leading zero threshold
   3267 C8FD 90 04                                bcc .0000110          ;below it, must convert
                                        ;
   3269 C8FF A6 A3                                ldx facc              ;processed byte count
   3270 C901 F0 11                                beq .0000130          ;discard leading zero
                                        ;
   3272 C903 C9 0A                      .0000110 cmp #10               ;check range
   3273 C905 90 02                                bcc .0000120          ;is 0-9
                                        ;
   3275 C907 69 06                                adc #a_hexdec         ;apply hex adjust
                                        ;
   3277 C909 69 30                      .0000120 adc #'0'              ;change to ASCII
   3278 C90B A4 AD                                ldy ibufidx           ;string index
   3279 C90D 99 00 02                             sta ibuffer,y         ;save numeral in buffer
   3280 C910 E6 AD                                inc ibufidx           ;next buffer position
   3281 C912 E6 A3                                inc facc              ;bytes=bytes+1
                                        ;
   3283 C914 C6 A4                      .0000130 dec facc+s_byte       ;numerals=numerals-1
   3284 C916 D0 CE                                bne .0000080          ;not done
                                        ;
                                        ;
                                        ;	terminate string & exit...
                                        ;
   3289 C918 A6 AD                                ldx ibufidx           ;printable string length
   3290 C91A 9E 00 02                             stz ibuffer,x         ;terminate string
   3291 C91D 8A                                   txa
   3292 C91E A2 00                                ldx #<ibuffer         ;converted string
   3293 C920 A0 02                                ldy #>ibuffer
   3294 C922 18                                   clc                   ;all okay
   3295 C923 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;binhex: CONVERT BINARY BYTE TO HEX ASCII CHARS
                                        ;
                                        ;	————————————————————————————————————————————
                                        ;	Preparatory Ops: .A: byte to convert
                                        ;
                                        ;	Returned Values: .A: MSN ASCII char
                                        ;	                 .X: LSN ASCII char
                                        ;	                 .Y: entry value
                                        ;	————————————————————————————————————————————
                                        ;
   3309 C924 20 86 C8                   binhex   jsr bintonyb          ;generate binary values
   3310 C927 48                                   pha                   ;save MSN
   3311 C928 8A                                   txa
   3312 C929 20 2E C9                             jsr .0000010          ;generate ASCII LSN
   3313 C92C AA                                   tax                   ;save
   3314 C92D 68                                   pla                   ;get input
                                        ;
                                        ;
                                        ;	convert nybble to hex ASCII equivalent...
                                        ;
   3319 C92E C9 0A                      .0000010 cmp #10
   3320 C930 90 02                                bcc .0000020          ;in decimal range
                                        ;
   3322 C932 69 66                                adc #k_hex            ;hex compensate
                                        ;         
   3324 C934 49 30                      .0000020 eor #'0'              ;finalize nybble
   3325 C936 60                                   rts                   ;done
                                        ;
                                        ;================================================================================
                                        ;
                                        ;clrfaca: CLEAR FLOATING ACCUMULATOR A
                                        ;
   3331 C937 08                         clrfaca  php
   3332 C938 C2 20                    +            .byte $c2,$20
                                        
   3333 C93A 64 95                                stz faca
   3334 C93C 64 97                                stz faca+s_word
   3335 C93E 28                                   plp
   3336 C93F 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;clrfacb: CLEAR FLOATING ACCUMULATOR B
                                        ;
   3342 C940 08                         clrfacb  php
   3343 C941 C2 20                    +            .byte $c2,$20
                                        
   3344 C943 64 9D                                stz facb
   3345 C945 64 9F                                stz facb+s_word
   3346 C947 28                                   plp
   3347 C948 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facabcd: CONVERT FACA INTO BCD
                                        ;
   3353 C949 A2 03                      facabcd  ldx #s_pfac-1         ;primary accumulator size -1
                                        ;
   3355 C94B B5 95                      .0000010 lda faca,x            ;value to be converted
   3356 C94D 48                                   pha                   ;preserve
   3357 C94E CA                                   dex
   3358 C94F 10 FA                                bpl .0000010          ;next
                                        ;
   3360 C951 A2 05                                ldx #s_sfac-1         ;workspace size
                                        ;
   3362 C953 74 9D                      .0000020 stz facb,x            ;clear final result
   3363 C955 74 A3                                stz facc,x            ;clear scratchpad
   3364 C957 CA                                   dex
   3365 C958 10 F9                                bpl .0000020
                                        ;
   3367 C95A E6 A8                                inc facc+s_sfac-s_byte
   3368 C95C F8                                   sed                   ;select decimal mode
   3369 C95D A0 1F                                ldy #m_bits-1         ;bits to convert -1
                                        ;
   3371 C95F A2 03                      .0000030 ldx #s_pfac-1         ;operand size
   3372 C961 18                                   clc                   ;no carry at start
                                        ;
   3374 C962 76 95                      .0000040 ror faca,x            ;grab LS bit in operand
   3375 C964 CA                                   dex
   3376 C965 10 FB                                bpl .0000040
                                        ;
   3378 C967 90 0D                                bcc .0000060          ;LS bit clear
                                        ;
   3380 C969 18                                   clc
   3381 C96A A2 05                                ldx #s_sfac-1
                                        ;
   3383 C96C B5 9D                      .0000050 lda facb,x            ;partial result
   3384 C96E 75 A3                                adc facc,x            ;scratchpad
   3385 C970 95 9D                                sta facb,x            ;new partial result
   3386 C972 CA                                   dex
   3387 C973 10 F7                                bpl .0000050
                                        ;
   3389 C975 18                                   clc
                                        ;
   3391 C976 A2 05                      .0000060 ldx #s_sfac-1
                                        ;
   3393 C978 B5 A3                      .0000070 lda facc,x            ;scratchpad
   3394 C97A 75 A3                                adc facc,x            ;double &...
   3395 C97C 95 A3                                sta facc,x            ;save
   3396 C97E CA                                   dex
   3397 C97F 10 F7                                bpl .0000070
                                        ;
   3399 C981 88                                   dey
   3400 C982 10 DB                                bpl .0000030          ;next operand bit
                                        ;
   3402 C984 D8                                   cld
   3403 C985 A2 00                                ldx #0
   3404 C987 A0 04                                ldy #s_pfac
                                        ;
   3406 C989 68                         .0000080 pla                   ;operand
   3407 C98A 95 95                                sta faca,x            ;restore
   3408 C98C E8                                   inx
   3409 C98D 88                                   dey
   3410 C98E D0 F9                                bne .0000080          ;next
                                        ;
   3412 C990 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;nybtobin: CONVERT ASCII NYBBLE TO BINARY
                                        ;
   3418 C991 20 38 CC                   nybtobin jsr toupper           ;convert case if necessary
   3419 C994 38                                   sec
   3420 C995 E9 30                                sbc #'0'              ;change to binary
   3421 C997 90 08                                bcc .0000020          ;not a numeral — error
                                        ;
   3423 C999 C9 0A                                cmp #10
   3424 C99B 90 03                                bcc .0000010          ;numeral is 0-9
                                        ;
   3426 C99D E9 07                                sbc #a_hexdec+1       ;10-15 ——> A-F
   3427 C99F 18                                   clc                   ;no conversion error
                                        ;
   3429 C9A0 60                         .0000010 rts
                                        ;
   3431 C9A1 38                         .0000020 sec                   ;conversion error
   3432 C9A2 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;calccnt: COMPUTE BYTE COUNT FROM ADDRESS RANGE
                                        ;
   3438 C9A3 20 40 C9                   calccnt  jsr clrfacb           ;clear accumulator
   3439 C9A6 C2 20                    +            .byte $c2,$20
                                        
   3440 C9A8 38                                   sec
   3441 C9A9 A5 92                                lda addrb             ;ending address
   3442 C9AB E5 8F                                sbc addra             ;starting address
   3443 C9AD 85 9D                                sta facb              ;byte count
   3444 C9AF E2 20                    +            .byte $e2,$20
                                        
   3445 C9B1 A5 94                                lda addrb+s_word      ;handle banks
   3446 C9B3 E5 91                                sbc addra+s_word
   3447 C9B5 85 9F                                sta facb+s_word
   3448 C9B7 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;clroper: CLEAR OPERAND
                                        ;
   3454 C9B8 DA                         clroper  phx
   3455 C9B9 A2 02                                ldx #s_oper-1
                                        ;
   3457 C9BB 74 A9                      .0000010 stz operand,x
   3458 C9BD CA                                   dex
   3459 C9BE 10 FB                                bpl .0000010
                                        ;
   3461 C9C0 64 BB                                stz eopsize
   3462 C9C2 FA                                   plx
   3463 C9C3 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;cpfwsup: FOWARD COPY MEMORY SETUP
                                        ;
   3469 C9C4 C2 30                      cpfwsup +         .byte $c2,$30
                                        
   3470 C9C6 A2 54                    +            ldx #<opc_mvn
   3470 C9C8 00                       +            .byte >opc_mvn
                                        ;"move next" opcode
   3471 C9C9 80 05                                bra cpsup
                                        ;         
                                        ;================================================================================
                                        ;
                                        ;cprvsup: REVERSE COPY MEMORY SETUP
                                        ;
   3477 C9CB C2 30                      cprvsup +         .byte $c2,$30
                                        
   3478 C9CD A2 44                    +            ldx #<opc_mvp
   3478 C9CF 00                       +            .byte >opc_mvp
                                        ;"move previous" opcode
                                        ;         
                                        ;================================================================================
                                        ;
                                        ;cpsup: COPY MEMORY SETUP
                                        ;
   3484 C9D0 48                         cpsup    pha                   ;save banks
   3485 C9D1 8A                                   txa                   ;protect...
   3486 C9D2 EB                       +            .byte $eb
                                                           ;opcode
   3487 C9D3 E2 20                    +            .byte $e2,$20
                                        
   3488 C9D5 A2 08                    +            ldx #<(cpcodeee-cpcode-1)
   3488 C9D7 00                       +            .byte >(cpcodeee-cpcode-1)
                                        
                                        ;
   3490 C9D8 BF                         .0000010 +         .byte $bf
   3490 C9D9 F6 C9 00                 +   +         .byte <cpcode,>cpcode,cpcode >> 16
                                     +   
                                        ;transfer copy code to...
   3491 C9DC 95 C0                                sta mcftwork,x        ;to workspace
   3492 C9DE CA                                   dex
   3493 C9DF 10 F7                                bpl .0000010
                                        ;
   3495 C9E1 EB                       +            .byte $eb
                                                           ;recover opcode &...
   3496 C9E2 85 C1                                sta mcftopc           ;set it
   3497 C9E4 C2 20                    +            .byte $c2,$20
                                        
   3498 C9E6 68                                   pla                   ;get banks &...
   3499 C9E7 85 C2                                sta mcftbnk           ;set them
                                         
                                        ; We just dynamically created a routine, so the cache (if one is present) has
                                        ; to be invalidated. Otherwise the processor could execute dead code from the
                                        ; cache. Two lines are invalidated in case the code crosses a line boundary.
                                        ;
                                        ; Parameters to ICacheIL832:
                                        ;	acc = 16 bit address to invalidate
                                        ;
                                        ; The ICacheIL832 routine should invalidate the cache line and return. If there
                                        ; is no cache in the processor then these lines can be deleted.
                                        ;-------------------------------------------------------------------------------
   3511 C9E9 48                                   pha
   3512 C9EA A9 C0                                lda	#mcftwork
   3513 C9EC 20 75 EB                             jsr	ICacheIL832
   3514 C9EF A9 D0                                lda	#mcftwork+16
   3515 C9F1 20 75 EB                             jsr	ICacheIL832
   3516 C9F4 68                                   pla
                                        ;---------------------------------------------
   3518 C9F5 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;cpcode: COPY MEMORY CODE
                                        ;
                                        ;	———————————————————————————————————————————
                                        ;	This code is transfered to workspace when a
                                        ;	copy or fill operation is to be performed.
                                        ;	———————————————————————————————————————————
                                        ;
   3529 C9F6 8B                         cpcode +         .byte $8b
                                                           ;must preserve data bank
                                        ;         .rept s_mvinst
   3531 C9F7 EA                                     nop                 ;placeholder
   3532 C9F8 EA                                     nop
   3533 C9F9 EA                                     nop
                                        ;         .endr
   3535 C9FA AB                       +            .byte $ab
                                                           ;restore data bank
   3536 C9FB 5C E5 C0 00                          jml monce             ;return to command executive
   3705 = 0000C9FF                      cpcodeee =*                    ;placeholder — do not delete
                                        ;
                                        ;================================================================================
                                        ;
                                        ;decdcnt: DECREMENT DUMP COUNT
                                        ;
                                        ;	———————————————————————————————————————————
                                        ;	Preparatory Ops: bytes to process in FACB
                                        ;	                 bytes processed in CHARCNT
                                        ;
                                        ;	Returned Values: .A: used
                                        ;	                 .X: entry value
                                        ;	                 .Y: entry value
                                        ;	                 .C: 1 = count = zero
                                        ;	———————————————————————————————————————————
                                        ;
   3553 C9FF E2 20                      decdcnt +         .byte $e2,$20
                                        
   3554 CA01 A9 00                                lda #0
   3555 CA03 EB                       +            .byte $eb
                                                           ;clear .B
   3556 CA04 A5 9F                                lda facb+s_word       ;count MSW
   3557 CA06 C2 20                    +            .byte $c2,$20
                                        
   3558 CA08 38                                   sec
   3559 CA09 05 9D                                ora facb              ;count LSW
   3560 CA0B F0 13                                beq .0000020          ;zero, just exit
                                        ;
   3562 CA0D A5 9D                                lda facb
   3563 CA0F E5 B2                                sbc charcnt           ;bytes processed
   3564 CA11 85 9D                                sta facb
   3565 CA13 E2 20                    +            .byte $e2,$20
                                        
   3566 CA15 A5 9F                                lda facb+s_word
   3567 CA17 E9 00                                sbc #0                ;handle borrow
   3568 CA19 90 04                                bcc .0000010          ;underflow
                                        ;
   3570 CA1B 85 9F                                sta facb+s_word
   3571 CA1D 18                                   clc                   ;count > 0
   3572 CA1E 60                                   rts
                                        ;
   3574 CA1F 38                         .0000010 sec
                                        ;
   3576 CA20 E2 20                      .0000020 +         .byte $e2,$20
                                        
   3577 CA22 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;enddest: GET 2ND & 3RD ADDRESSES FOR COMPARE & TRANSFER
                                        ;
   3583 CA23 20 67 CA                   enddest  jsr facasize          ;check start...
   3584 CA26 C9 04                                cmp #s_dword          ;for range
   3585 CA28 B0 1E                                bcs .0000010          ;out of range — error
                                        ;
   3587 CA2A 20 49 CA                             jsr facaddra          ;store start
   3588 CA2D 20 7B CA                             jsr getparm           ;get end
   3589 CA30 B0 16                                bcs .0000010          ;not entered — error
                                        ;
   3591 CA32 20 67 CA                             jsr facasize          ;check end...
   3592 CA35 C9 04                                cmp #s_dword          ;for range
   3593 CA37 B0 0F                                bcs .0000010          ;out of range — error
                                        ;
   3595 CA39 20 53 CA                             jsr facaddrb          ;store end
   3596 CA3C 20 7B CA                             jsr getparm           ;get destination
   3597 CA3F B0 07                                bcs .0000010          ;not entered — error
                                        ;
   3599 CA41 20 67 CA                             jsr facasize          ;check destination...
   3600 CA44 C9 04                                cmp #s_dword          ;for range
   3601 CA46 90 15                                bcc facaoper          ;store dest address
                                        ;
   3603 CA48 60                         .0000010 rts                   ;exit w/error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facaddra: COPY FACA TO ADDRA
                                        ;
   3609 CA49 A2 02                      facaddra ldx #s_xword-1
                                        ;
   3611 CA4B B5 95                      .0000010 lda faca,x
   3612 CA4D 95 8F                                sta addra,x
   3613 CA4F CA                                   dex
   3614 CA50 10 F9                                bpl .0000010
                                        ;
   3616 CA52 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facaddrb: COPY FACA TO ADDRB
                                        ;
   3622 CA53 A2 02                      facaddrb ldx #s_xword-1
                                        ;
   3624 CA55 B5 95                      .0000010 lda faca,x
   3625 CA57 95 92                                sta addrb,x
   3626 CA59 CA                                   dex
   3627 CA5A 10 F9                                bpl .0000010
                                        ;
   3629 CA5C 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facaoper: COPY FACA TO OPERAND
                                        ;
   3635 CA5D A2 02                      facaoper ldx #s_oper-1
                                        ;
   3637 CA5F B5 95                      .0000010 lda faca,x
   3638 CA61 95 A9                                sta operand,x
   3639 CA63 CA                                   dex
   3640 CA64 10 F9                                bpl .0000010
                                        ;
   3642 CA66 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facasize: REPORT OPERAND SIZE IN FACA
                                        ;
                                        ;	——————————————————————————————————————————
                                        ;	Preparatory Ops: operand in FACA
                                        ;
                                        ;	Returned Values: .A: s_byte  (1)
                                        ;	                     s_word  (2)
                                        ;	                     s_xword (3)
                                        ;	                     s_dword (4)
                                        ;
                                        ;	Notes: 1) This function will always report
                                        ;	          a non-zero result.
                                        ;	——————————————————————————————————————————
                                        ;
   3660 CA67 E2 30                      facasize +         .byte $e2,$30
                                        
   3661 CA69 A2 03                                ldx #s_dword-1
                                        ;
   3663 CA6B B5 95                      .0000010 lda faca,x            ;get byte
   3664 CA6D D0 03                                bne .0000020          ;done
                                        ;
   3666 CA6F CA                                   dex
   3667 CA70 D0 F9                                bne .0000010          ;next byte
                                        ;
   3669 CA72 E8                         .0000020 inx                   ;count=index+1
   3670 CA73 8A                                   txa
   3671 CA74 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getbyte: GET A BYTE FROM MEMORY
                                        ;
   3677 CA75 A7 8F                      getbyte +         .byte $a7,addra
                                        ;get a byte
   3678 CA77 80 3F                                bra incaddra          ;bump address
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getparm: GET A PARAMETER
                                        ;
                                        ;	—————————————————————————————————————————————————
                                        ;	Preparatory Ops: null-terminated input in IBUFFER
                                        ;
                                        ;	Returned Values: .A: chars in converted parameter
                                        ;	                 .X: used
                                        ;	                 .Y: entry value
                                        ;	                 .C: 1 = no parameter entered
                                        ;	—————————————————————————————————————————————————
                                        ;
   3693 CA79 C6 AD                      getparmr dec ibufidx           ;reread previous char
                                        ;
   3695 CA7B 5A                         getparm  phy                   ;preserve
   3696 CA7C 20 D2 C7                             jsr ascbin            ;convert parameter to binary
   3697 CA7F B0 1C                                bcs .0000040          ;conversion error
                                        ;
   3699 CA81 20 68 CB                             jsr getcharr          ;reread last char
   3700 CA84 D0 08                                bne .0000010          ;not end-of-input
                                        ;
   3702 CA86 C6 AD                                dec ibufidx           ;reindex to terminator
   3703 CA88 A5 B2                                lda charcnt           ;get chars processed so far
   3704 CA8A F0 0C                                beq .0000030          ;none
                                        ;
   3706 CA8C D0 08                                bne .0000020          ;some
                                        ;
   3708 CA8E C9 20                      .0000010 cmp #a_blank          ;recognized delimiter
   3709 CA90 F0 04                                beq .0000020          ;end of parameter
                                        ;
   3711 CA92 C9 2C                                cmp #','              ;recognized delimiter
   3712 CA94 D0 07                                bne .0000040          ;unknown delimter
                                        ;
   3714 CA96 18                         .0000020 clc
   3715 CA97 24                                   .byte bitzp           ;skip SEC below
                                        ;
   3717 CA98 38                         .0000030 sec
   3718 CA99 7A                                   ply                   ;restore
   3719 CA9A A5 B2                                lda charcnt           ;get count
   3720 CA9C 60                                   rts                   ;done
                                        ;
   3722 CA9D                            .0000040 
                                        ;.rept 3               ;clean up stack
   3724 CA9D 68                          			pla
   3725 CA9E 68                          			pla
   3726 CA9F 68                                     pla
                                        ;        .endr
   3728 CAA0 4C 24 C1                             jmp monerr            ;abort w/error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;nxtaddra: TEST & INCREMENT WORKING ADDRESS 'A'
                                        ;
                                        ;	——————————————————————————————————————————————————
                                        ;	Calling syntax: JSR NXTADDRA
                                        ;
                                        ;	Exit registers: .A: used
                                        ;	                .B: used
                                        ;	                .X: entry value
                                        ;	                .Y: entry value
                                        ;	                DB: entry value
                                        ;	                DP: entry value
                                        ;	                PB: entry value
                                        ;	                SR: NVmxDIZC
                                        ;	                    ||||||||
                                        ;	                    |||||||+———> 0: ADDRA < ADDRB
                                        ;	                    |||||||      1: ADDRA >= ADDRB
                                        ;	                    ||||||+————> undefined
                                        ;	                    |||+++—————> entry value
                                        ;	                    ||+————————> 1
                                        ;	                    ++—————————> undefined
                                        ;	——————————————————————————————————————————————————
                                        ;
   3754 CAA3 E2 20                      nxtaddra +         .byte $e2,$20
                                        
   3755 CAA5 A5 91                                lda addra+s_word      ;bits 16-23
   3756 CAA7 C5 94                                cmp addrb+s_word
   3757 CAA9 90 0D                                bcc incaddra          ;increment
                                        ;
   3759 CAAB D0 0A                                bne .0000010          ;don't increment
                                        ;
   3761 CAAD C2 20                    +            .byte $c2,$20
                                        
   3762 CAAF A5 8F                                lda addra             ;bits 0-15
   3763 CAB1 C5 92                                cmp addrb             ;condition flags
   3764 CAB3 E2 20                    +            .byte $e2,$20
                                        
   3765 CAB5 90 01                                bcc incaddra          ;increment
                                        ;
   3767 CAB7 60                         .0000010 rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;incaddra: INCREMENT WORKING ADDRESS 'A'
                                        ;
                                        ;	——————————————————————————————————————————————————
                                        ;	Calling syntax: JSR INCADDRA
                                        ;
                                        ;	Exit registers: .A: entry value
                                        ;	                .B: entry value
                                        ;	                .X: entry value
                                        ;	                .Y: entry value
                                        ;	                DB: entry value
                                        ;	                DP: entry value
                                        ;	                PB: entry value
                                        ;	                SR: NVmxDIZC
                                        ;	                    ||||||||
                                        ;	                    ++++++++———> entry value
                                        ;	——————————————————————————————————————————————————
                                        ;
   3788 CAB8 08                         incaddra php
   3789 CAB9 C2 20                    +            .byte $c2,$20
                                        
   3790 CABB E6 8F                                inc addra             ;bump bits 0-15
   3791 CABD D0 04                                bne .0000010
                                        ;
   3793 CABF E2 20                    +            .byte $e2,$20
                                        
   3794 CAC1 E6 91                                inc addra+s_word      ;bump bits 16-23
                                        ;
   3796 CAC3 28                         .0000010 plp
   3797 CAC4 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;incoper: INCREMENT OPERAND ADDRESS
                                        ;
   3803 CAC5 18                         incoper  clc
   3804 CAC6 08                                   php
   3805 CAC7 C2 30                    +            .byte $c2,$30
                                        
   3806 CAC9 48                                   pha
   3807 CACA E6 A9                                inc operand           ;handle base address
   3808 CACC D0 06                                bne .0000010
                                        ;              
   3810 CACE E2 20                    +            .byte $e2,$20
                                        
   3811 CAD0 E6 AB                                inc operand+s_word    ;handle bank
   3812 CAD2 C2 20                    +            .byte $c2,$20
                                        
                                        ;
   3814 CAD4 68                         .0000010 pla
   3815 CAD5 28                                   plp
   3816 CAD6 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;instdata: GET INSTRUCTION SIZE & ADDRESSING MODE DATA
                                        ;
                                        ;	——————————————————————————————————
                                        ;	Preparatory Ops: .X: 65C816 opcode
                                        ;
                                        ;	Returned Values: .A: mode flags
                                        ;	                 .X: operand size
                                        ;	                 .Y: mode index
                                        ;	——————————————————————————————————
                                        ;
   3830 CAD7 E2 30                      instdata +         .byte $e2,$30
                                        
   3831 CAD9 BD 50 CE                             lda mnetabam,x        ;addressing mode data
   3832 CADC 48                                   pha                   ;save mode flag bits
   3833 CADD 48                                   pha                   ;save size data
   3834 CADE 29 0F                                and #amodmask         ;extract mode index &...
   3835 CAE0 A8                                   tay                   ;save
   3836 CAE1 68                                   pla                   ;recover data
   3837 CAE2 29 30                                and #opsmask          ;mask mode fields &...
                                        ;         .rept n_opslsr        ;extract operand size
   3839 CAE4 4A                                     lsr
   3840 CAE5 4A                                     lsr
   3841 CAE6 4A                                     lsr
   3842 CAE7 4A                                     lsr
                                        ;         .endr
   3844 CAE8 AA                                   tax                   ;operand size
   3845 CAE9 68                                   pla                   ;recover mode flags
   3846 CAEA 29 C0                                and #vopsmask         ;discard mode & size fields
   3847 CAEC 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;offtarg: CONVERT BRANCH OFFSET TO TARGET ADDRESS
                                        ;
                                        ;	———————————————————————————————————————————————
                                        ;	Preparatory Ops:    ADDRA: base address
                                        ;	                 INSTSIZE: instruction size
                                        ;	                  OPERAND: offset
                                        ;
                                        ;	Returned Values:  OPERAND: target address (L/H)
                                        ;	                       .A: used
                                        ;	                       .X: entry value
                                        ;                              .Y: entry value
                                        ;	———————————————————————————————————————————————
                                        ;
   3864 CAED C2 20                      offtarg +         .byte $c2,$20
                                        
   3865 CAEF A5 8F                                lda addra             ;base address
   3866 CAF1 E2 20                    +            .byte $e2,$20
                                        
   3867 CAF3 46 B4                                lsr instsize          ;bit 0 will be set if...
   3868 CAF5 B0 07                                bcs .0000010          ;a long branch
                                        ;
   3870 CAF7 24 A9                                bit operand           ;short forward or backward?
   3871 CAF9 10 03                                bpl .0000010          ;forward
                                        ;
   3873 CAFB EB                       +            .byte $eb
                                                           ;expose address MSB
   3874 CAFC 3A                                   dea                   ;back a page
   3875 CAFD EB                       +            .byte $eb
                                                           ;expose address LSB
                                        ;
   3877 CAFE C2 20                      .0000010 +         .byte $c2,$20
                                        
   3878 CB00 18                                   clc
   3879 CB01 65 A9                                adc operand           ;calculate target address
   3880 CB03 85 A9                                sta operand           ;new operand
   3881 CB05 E2 20                    +            .byte $e2,$20
                                        
   3882 CB07 A9 03                                lda #s_xword
   3883 CB09 85 B4                                sta instsize          ;effective instruction size
   3884 CB0B 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;setxaddr: SET EXECUTION ADDRESS
                                        ;
   3890 CB0C B0 13                      setxaddr bcs .0000010          ;no address given
                                        ;
   3892 CB0E 20 67 CA                             jsr facasize          ;check address...
   3893 CB11 C9 04                                cmp #s_dword          ;range
   3894 CB13 B0 0D                                bcs .0000020          ;out of range
                                        ;
   3896 CB15 C2 20                    +            .byte $c2,$20
                                        
   3897 CB17 A5 95                                lda faca              ;execution address
   3898 CB19 85 81                                sta reg_pcx           ;set new PC value
   3899 CB1B E2 20                    +            .byte $e2,$20
                                        
   3900 CB1D A5 97                                lda faca+s_word
   3901 CB1F 85 80                                sta reg_pbx           ;set new PB value
                                        ;
   3903 CB21 18                         .0000010 clc                   ;no error
                                        ;
   3905 CB22 60                         .0000020 rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;targoff: CONVERT BRANCH TARGET ADDRESS TO BRANCH OFFSET                   
                                        ;
                                        ;	—————————————————————————————————————————————————
                                        ;	Preparatory Ops:   ADDRA: instruction address
                                        ;	                 OPERAND: target address
                                        ;
                                        ;	Returned Values: OPERAND: computed offset
                                        ;	                      .A: effective operand size
                                        ;	                      .X: entry value
                                        ;                             .Y: entry value
                                        ;	                      .C: 1 = branch out of range
                                        ;
                                        ;	Execution notes: ADDRB is set to the branch base
                                        ;	                 address.
                                        ;	—————————————————————————————————————————————————
                                        ;
   3925 CB23 64 B5                      targoff  stz instsize+s_byte   ;always zero
   3926 CB25 A5 B4                                lda instsize          ;instruction size will tell...
   3927 CB27 4A                                   lsr                   ;if long or short branch
                                        ;
                                        ;—————————————————————————————————————————————————
   4122 = 000000A8                      .btype   =facc+5               ;branch type flag
                                        ;—————————————————————————————————————————————————
                                        ;
   3933 CB28 66 A8                                ror .btype            ;set branch type...
                                        ;
                                        ;	x0000000
                                        ;	|
                                        ;	+——————————> 0: short
                                        ;	             1: long
                                        ;
   3940 CB2A C2 20                    +            .byte $c2,$20
                                        
   3941 CB2C 18                                   clc
   3942 CB2D A5 8F                                lda addra             ;instruction address
   3943 CB2F 65 B4                                adc instsize          ;instruction size
   3944 CB31 85 92                                sta addrb             ;base address
   3945 CB33 38                                   sec
   3946 CB34 A5 A9                                lda operand           ;target address
   3947 CB36 E5 92                                sbc addrb             ;base address
   3948 CB38 85 A9                                sta operand           ;offset
   3949 CB3A E2 20                    +            .byte $e2,$20
                                        
   3950 CB3C 90 15                                bcc .0000040          ;backward branch
                                        ;
   3952 CB3E 24 A8                                bit .btype            ;check branch range
   3953 CB40 30 0A                                bmi .0000020          ;long
                                        ;
                                        ;
                                        ;	process short forward branch...
                                        ;
   3958 CB42 EB                       +            .byte $eb
                                                           ;offset MSB should be zero
   3959 CB43 D0 21                                bne .0000060          ;it isn't — out of range
                                        ;
   3961 CB45 EB                       +            .byte $eb
                                                           ;offset LSB should be $00-$7F
   3962 CB46 30 1E                                bmi .0000060          ;it isn't — out of range
                                        ;
   3964 CB48 A9 01                      .0000010 lda #s_byte           ;final instruction size
   3965 CB4A 18                                   clc                   ;branch in range
   3966 CB4B 60                                   rts
                                        ;
                                        ;
                                        ;	process long forward branch...
                                        ;
   3971 CB4C EB                         .0000020 +         .byte $eb
                                                           ;offset MSB should be positive
   3972 CB4D 30 17                                bmi .0000060          ;it isn't — branch out of range
                                        ;
   3974 CB4F A9 02                      .0000030 lda #s_word
   3975 CB51 18                                   clc
   3976 CB52 60                                   rts
                                        ;
                                        ;
                                        ;	process backward branch...
                                        ;
   3981 CB53 24 A8                      .0000040 bit .btype            ;long or short?
   3982 CB55 30 0C                                bmi .0000050          ;long
                                        ;
                                        ;
                                        ;	process short backward branch...
                                        ;
   3987 CB57 EB                       +            .byte $eb
                                                           ;offset MSB should be negative
   3988 CB58 10 0C                                bpl .0000060          ;it isn't — out of range
                                        ;
   3990 CB5A 49 FF                                eor #%11111111        ;complement offset MSB 2s 
   3991 CB5C D0 08                                bne .0000060          ;out of range
                                        ;
   3993 CB5E EB                       +            .byte $eb
                                                           ;offset LSB should be $80-$FF
   3994 CB5F 30 E7                                bmi .0000010          ;it is — branch in range
                                        ;
   3996 CB61 80 03                                bra .0000060          ;branch out of range
                                        ;
                                        ;
                                        ;	process long backward branch...
                                        ;
   4001 CB63 EB                         .0000050 +         .byte $eb
                                                           ;offset MSB should be negative
   4002 CB64 30 E9                                bmi .0000030          ;it is — branch in range
                                        ;
   4004 CB66 38                         .0000060 sec                   ;range error
   4005 CB67 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getcharr: GET PREVIOUS INPUT BUFFER CHARACTER
                                        ;
   4011 CB68 C6 AD                      getcharr dec ibufidx           ;move back a char
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getchar: GET A CHARACTER FROM INPUT BUFFER
                                        ;
                                        ;	——————————————————————————————————————————————
                                        ;	Preparatory Ops : none
                                        ;
                                        ;	Register Returns: .A: character or <NUL>
                                        ;	                  .B: entry value
                                        ;	                  .X: entry value
                                        ;	                  .Y: entry value
                                        ;
                                        ;	MPU Flags: NVmxDIZC
                                        ;	           ||||||||
                                        ;	           |||||||+———> entry value
                                        ;	           ||||||+————> 1: <NUL> gotten
                                        ;	           |||||+—————> entry value
                                        ;	           ||||+——————> entry value
                                        ;	           |||+———————> entry value
                                        ;	           ||+————————> entry value
                                        ;	           |+—————————> not defined
                                        ;	           +——————————> not defined
                                        ;	——————————————————————————————————————————————
                                        ;
   4037 CB6A DA                         getchar  phx
   4038 CB6B 5A                                   phy
   4039 CB6C 08                                   php                   ;save register sizes
   4040 CB6D E2 30                    +            .byte $e2,$30
                                                        ;force 8 bits
   4041 CB6F A6 AD                                ldx ibufidx           ;buffer index
   4042 CB71 BD 00 02                             lda ibuffer,x         ;get char
   4043 CB74 E6 AD                                inc ibufidx           ;bump index
   4044 CB76 28                                   plp                   ;restore register widths
   4045 CB77 7A                                   ply
   4046 CB78 FA                                   plx
                                        ; Changed the following to XBA instruction which seems to work as well.
                                        ; XBA doesn't access the stack memory saving a data memory access,
                                        ; and hence is faster.
   4050 CB79 EB                       +            .byte $eb
                                        		;	pha                   ;condition...
   4051 CB7A EB                       +            .byte $eb
                                        		;   pla                   ;.Z
   4052 CB7B 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getpat: GET PATTERN FOR MEMORY CHANGE or SEARCH
                                        ;
                                        ;	—————————————————————————————————————————————————————
                                        ;	Preparatory Ops: Null-terminated pattern in IBUFFER.
                                        ;
                                        ;	Returned Values: .A: used
                                        ;	                 .X: used
                                        ;	                 .Y: pattern length if entered
                                        ;	                 .C: 0 = pattern valid
                                        ;	                     1 = exception:
                                        ;	                 .N  0 = no pattern entered
                                        ;	                     1 = evaluation error
                                        ;
                                        ;	Notes: 1) If pattern is preceded by "'" the following
                                        ;	          characters are interpreted as ASCII.
                                        ;	       2) A maximum of 32 bytes or characters is
                                        ;	          accepted.  Excess input will be discarded.
                                        ;	—————————————————————————————————————————————————————
                                        ;
   4075 CB7C 64 B9                      getpat   stz status            ;clear pattern type indicator
   4076 CB7E A0 00                                ldy #0                ;pattern index
   4077 CB80 20 68 CB                             jsr getcharr          ;get last char
   4078 CB83 F0 3A                                beq .0000070          ;EOS
                                        ;
   4080 CB85 A6 AD                                ldx ibufidx           ;current buffer index
   4081 CB87 20 C6 CB                             jsr getcharw          ;get next
   4082 CB8A F0 33                                beq .0000070          ;EOS
                                        ;
   4084 CB8C C9 27                                cmp #'''
                                        ;
   4086 CB8E 66 B9                                ror status            ;condition flag
   4087 CB90 80 12                                bra .0000030          ;balance of input is ASCII
                                        ;
   4089 CB92 86 AD                      .0000010 stx ibufidx           ;restore buffer index
                                        ;
   4091 CB94 20 7B CA                   .0000020 jsr getparm           ;evaluate numeric pattern
   4092 CB97 B0 21                                bcs .0000060          ;done w/pattern
                                        ;
   4094 CB99 20 67 CA                             jsr facasize          ;size
   4095 CB9C C9 02                                cmp #s_word
   4096 CB9E B0 1F                                bcs .0000070          ;not a byte — error
                                        ;
   4098 CBA0 A5 95                                lda faca              ;get byte &...
   4099 CBA2 80 05                                bra .0000040          ;store
                                        ;
   4101 CBA4 20 6A CB                   .0000030 jsr getchar           ;get ASCII char
   4102 CBA7 F0 11                                beq .0000060          ;done w/pattern
                                        ;
   4104 CBA9 C0 20                      .0000040 cpy #s_auxbuf         ;pattern buffer full?
   4105 CBAB F0 0A                                beq .0000050          ;yes
                                        ;
   4107 CBAD 99 51 02                             sta auxbuf,y          ;store pattern
   4108 CBB0 C8                                   iny
   4109 CBB1 24 B9                                bit status
   4110 CBB3 10 DF                                bpl .0000020          ;get next numeric value
                                        ;
   4112 CBB5 80 ED                                bra .0000030          ;get next ASCII char
                                        ;
   4114 CBB7 20 B0 C7                   .0000050 jsr alert             ;excess input
                                        ;
   4116 CBBA 84 AC                      .0000060 sty auxbufix          ;save pattern size
   4117 CBBC 98                                   tya                   ;condition .Z
   4118 CBBD 18                                   clc                   ;pattern valid
   4119 CBBE 60                                   rts
                                        ;
                                        ;
                                        ;	no pattern entered...
                                        ;
   4124 CBBF C2 80                      .0000070 +         .byte $c2,%10000000
                                        
   4125 CBC1 38                                   sec
   4126 CBC2 60                                   rts
                                        ;
                                        ;
                                        ;	evaluation error...
                                        ;
   4131 CBC3 E2 81                      .0000080 +         .byte $e2,%10000001
                                        
   4132 CBC5 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getcharw: GET FROM INPUT BUFFER, DISCARDING WHITESPACE
                                        ;
                                        ;	——————————————————————————————————————————————————
                                        ;	Preparatory Ops: Null-terminated input in IBUFFER.
                                        ;
                                        ;	Returned Values: .A: char or null
                                        ;	                 .X: entry value
                                        ;	                 .Y: entry value
                                        ;	                 .Z: 1 = null terminator detected
                                        ;
                                        ;	Notes: Whitespace is defined as a blank ($20) or a
                                        ;	       horizontal tab ($09).
                                        ;	——————————————————————————————————————————————————
                                        ;
   4150 CBC6 20 6A CB                   getcharw jsr getchar           ;get from buffer
   4151 CBC9 F0 08                                beq .0000010          ;EOI
                                        ;
   4153 CBCB C9 20                                cmp #' '
   4154 CBCD F0 F7                                beq getcharw          ;discard whitespace
                                        ;
   4156 CBCF C9 09                                cmp #a_ht             ;also whitespace
   4157 CBD1 F0 F3                                beq getcharw
                                        ;
   4159 CBD3 18                         .0000010 clc
   4160 CBD4 60                                   rts  
                                        ;
                                        ;================================================================================
                                        ;
                                        ;input: INTERACTIVE INPUT FROM CONSOLE CHANNEL
                                        ;
                                        ;	———————————————————————————————————————————————————————————
                                        ;	Preparatory Ops: Zero IBUFIDX or load IBUFFER with default
                                        ;	                 input & set IBUFIDX to the number of chars
                                        ;	                 loaded into the buffer.
                                        ;
                                        ;	Returned Values: .A: used
                                        ;	                 .X: characters entered
                                        ;	                 .Y: used
                                        ;
                                        ;	Example: STZ IBUFIDX
                                        ;	         JSR INPUT
                                        ;
                                        ;	Notes: Input is collected in IBUFFER & is null-terminated.
                                        ;	       IBUFIDX is reset to zero upon exit.
                                        ;	———————————————————————————————————————————————————————————
                                        ;
   4182 CBD5                            input:
   4183 CBD5 A6 AD                       	    ldx ibufidx
   4184 CBD7 9E 00 02                             stz ibuffer,x         ;be sure buffer is terminated
   4185 CBDA 20 1C C7                             jsr dpyibuf           ;print default input if any
   4186 CBDD F4                       +            .byte $f4
   4186 CBDE A8 CF                    +            .word dc_cn
                                        
   4187 CBE0 20 B9 C7                             jsr sprint            ;enable cursor
   4188 CBE3 A6 AD                                ldx ibufidx           ;starting buffer index
                                        ;
                                        ;
                                        ;	main input loop...
                                        ;
   4193 CBE5 20 00 F4                   .0000010 jsr getcha            ;poll for input
   4194 CBE8 90 02                                bcc .0000020          ;got something
                                        ;
                                        ;         jsr	$F409          ;wait 'til any IRQ &... (Reschedule tasks)
   4197 CBEA 80 F9                                bra .0000010          ;try again
                                        ;
   4199 CBEC                            .0000020
   4200 CBEC C9 7F                       		cmp #a_del            ;above ASCII range?
   4201 CBEE B0 F5                                bcs .0000010          ;yes, ignore
                                        ;
   4203 CBF0 C9 09                                cmp #a_ht             ;horizontal tab?
   4204 CBF2 D0 02                                bne .0000030          ;no
                                        ;
   4206 CBF4 A9 20                                lda #a_blank          ;replace <HT> w/blank
                                        ;
   4208 CBF6 C9 20                      .0000030 cmp #a_blank          ;control char?
   4209 CBF8 90 10                                bcc .0000050          ;yes
                                        ;
                                        ;
                                        ;	process QWERTY character...
                                        ;
   4214 CBFA E0 50                                cpx #s_ibuf           ;room in buffer?
   4215 CBFC B0 05                                bcs .0000040          ;no
                                        ;
   4217 CBFE 9D 00 02                             sta ibuffer,x         ;store char
   4218 CC01 E8                                   inx                   ;bump index
   4219 CC02 2C                                   .byte bitabs          ;echo char
                                        ;
   4221 CC03 A9 07                      .0000040 lda #a_bel            ;alert user
   4222 CC05 20 06 F4                             jsr putcha
   4223 CC08 80 DB                                bra .0000010          ;get some more
                                        ;
                                        ;
                                        ;	process carriage return...
                                        ;
   4228 CC0A C9 0D                      .0000050 cmp #a_cr             ;carriage return?
   4229 CC0C D0 0E                                bne .0000060          ;no
                                        ;
   4231 CC0E DA                                   phx                   ;protect input count
   4232 CC0F F4                       +            .byte $f4
   4232 CC10 AC CF                    +            .word dc_co
                                        
   4233 CC12 20 B9 C7                             jsr sprint            ;cursor off
   4234 CC15 FA                                   plx                   ;recover input count
   4235 CC16 9E 00 02                             stz ibuffer,x         ;terminate input &...
   4236 CC19 64 AD                                stz ibufidx           ;reset buffer index
   4237 CC1B 60                                   rts                   ;done
                                        ;
                                        ;
                                        ;	process backspace...
                                        ;
   4242 CC1C C9 08                      .0000060 cmp #a_bs             ;backspace?
   4243 CC1E D0 C5                                bne .0000010          ;no
                                        ;
   4245 CC20 8A                                   txa
   4246 CC21 F0 C2                                beq .0000010          ;no input, ignore <BS>
                                        ;
   4248 CC23 CA                                   dex                   ;1 less char
   4249 CC24 DA                                   phx                   ;preserve count
   4250 CC25 20 6B C7                             jsr gendbs            ;destructive backspace
   4251 CC28 FA                                   plx                   ;restore count
   4252 CC29 80 BA                                bra .0000010          ;get more input
                                        ;
                                        ;================================================================================
                                        ;
                                        ;lodbnk: LOAD SOURCE & DESTINATION BANKS
                                        ;
   4258 CC2B E2 20                      lodbnk +         .byte $e2,$20
                                        
   4259 CC2D A5 AB                                lda operand+s_word    ;destination bank
   4260 CC2F EB                       +            .byte $eb
                                                           ;make it MSB
   4261 CC30 A5 91                                lda addra+s_word      ;source bank is LSB
   4262 CC32 60                                   rts
                                        ;         
                                        ;================================================================================
                                        ;
                                        ;getcharc: GET A CHARACTER FROM INPUT BUFFER & CONVERT CASE
                                        ;
                                        ;	——————————————————————————————————————————————————
                                        ;	Preparatory Ops: Null-terminated input in IBUFFER.
                                        ;
                                        ;	Returned Values: .A: char or null
                                        ;	                 .X: entry value
                                        ;	                 .Y: entry value
                                        ;	                 .Z: 1 = null terminator detected
                                        ;	——————————————————————————————————————————————————
                                        ;
   4277 CC33 20 6A CB                   getcharc jsr getchar           ;get from buffer
   4278 CC36 F0 0C                                beq touppera          ;just return
                                        ;
                                        ;================================================================================
                                        ;
                                        ;toupper: FORCE CHARACTER TO UPPER CASE
                                        ;
                                        ;	————————————————————————————————————————————————
                                        ;	Preparatory Ops : .A: character to convert
                                        ;
                                        ;	Register Returns: .A: converted character
                                        ;	                  .B: entry value
                                        ;	                  .X: entry value
                                        ;	                  .Y: entry value
                                        ;
                                        ;	MPU Flags: no change
                                        ;
                                        ;	Notes: 1) This subroutine has no effect on char-
                                        ;	          acters that are not alpha.
                                        ;	————————————————————————————————————————————————
                                        ;
   4298 CC38 08                         toupper  php                   ;protect flags
   4299 CC39 C9 61                                cmp #a_asclcl         ;check char range
   4300 CC3B 90 06                                bcc .0000010          ;not LC alpha
                                        ;
   4302 CC3D C9 7B                                cmp #a_asclch+s_byte
   4303 CC3F B0 02                                bcs .0000010          ;not LC alpha
                                        ;
   4305 CC41 29 5F                                and #a_lctouc         ;force to UC
                                        ;
   4307 CC43 28                         .0000010 plp                   ;restore flags
                                        ;
   4309 CC44 60                         touppera rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;teststop: TEST FOR STOP KEY
                                        ;
                                        ;	——————————————————————————————————————————————
                                        ;	Preparatory Ops: none
                                        ;
                                        ;	Returned Values: .A: detected keypress, if any
                                        ;	                 .X: entry value
                                        ;	                 .Y: entry value
                                        ;
                                        ;	MPU Flags: NVmxDIZC
                                        ;	           ||||||||
                                        ;	           |||||||+———> 0: normal key detected
                                        ;	           |||||||      1: <STOP> detected
                                        ;	           +++++++————> not defined
                                        ;
                                        ;	Example: jsr teststop
                                        ;	         bcs stopped
                                        ;
                                        ;	Notes: The symbol STOPKEY defines the ASCII
                                        ;	       value of the "stop key."
                                        ;	——————————————————————————————————————————————
                                        ;
   4335 CC45 20 00 F4                   teststop jsr getcha            ;poll console
   4336 CC48 B0 04                                bcs .0000010          ;no input
                                        ;
   4338 CC4A C9 03                                cmp #stopkey          ;stop key pressed?
   4339 CC4C F0 01                                beq .0000020          ;yes
                                        ;
   4341 CC4E 18                         .0000010 clc
                                        ;
   4343 CC4F 60                         .0000020 rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;COMMAND PROCESSING DATA TABLES
                                        ;
                                        ;
                                        ;	monitor commands...
                                        ;
   4352 CC50 41                         mpctab   .byte "A"             ;assemble code
   4353 CC51 43                                   .byte "C"             ;compare memory ranges
   4354 CC52 44                                   .byte "D"             ;disassemble code
   4355 CC53 46                                   .byte "F"             ;fill memory
   4356 CC54 47                                   .byte "G"             ;execute code
   4357 CC55 48                                   .byte "H"             ;search memory
   4358 CC56 4A                                   .byte "J"             ;execute code as subroutine
   4359 CC57 4D                                   .byte "M"             ;dump memory range
   4360 CC58 52                                   .byte "R"             ;dump registers
   4361 CC59 54                                   .byte "T"             ;copy memory range
   4362 CC5A 58                                   .byte "X"             ;exit from monitor
   4363 CC5B 3E                                   .byte ">"             ;change memory
   4364 CC5C 3B                                   .byte ";"             ;change registers
   4576 = 0000000D                      n_mpctab =*-mpctab             ;entries in above table
                                        ;
                                        ;
                                        ;	monitor command jump table...
                                        ;
   4370 CC5D 2A C1                      mpcextab .word monasc-s_byte   ; A  assemble code
   4371 CC5F EC C3                                .word moncmp-s_byte   ; C  compare memory ranges
   4372 CC61 06 C3                                .word mondsc-s_byte   ; D  disassemble code
   4373 CC63 BD C4                                .word monfil-s_byte   ; F  fill memory
   4374 CC65 5A C3                                .word monjmp-s_byte   ; G  execute code
   4375 CC67 23 C5                                .word monhnt-s_byte   ; H  search memory
   4376 CC69 8B C3                                .word monjsr-s_byte   ; J  execute code as subroutine
   4377 CC6B 6B C4                                .word mondmp-s_byte   ; M  dump memory range
   4378 CC6D 97 C0                                .word monreg-s_byte   ; R  dump registers
   4379 CC6F 1A C4                                .word moncpy-s_byte   ; T  copy memory range
   4380 CC71 D4 C5                                .word monxit-s_byte   ; X  exit from monitor
   4381 CC73 C1 C3                                .word monchm-s_byte   ; >  change memory
   4382 CC75 99 C5                                .word monchr-s_byte   ; ;  change registers
                                        ;
                                        ;
                                        ;	number conversion...
                                        ;        
   4387 CC77 10 0A 08 02                basetab  .byte 16,10,8,2       ;supported number bases
   4388 CC7B 04 03 03 01                bitsdtab .byte 4,3,3,1         ;bits per binary digit
   4389 CC7F 04 04 03 01                bitsntab .byte 4,4,3,1         ;bits per ASCII character
   4390 CC83 03 02 09 02                lzsttab  .byte 3,2,9,2         ;leading zero suppression thresholds
   4391 CC87 0C 0C 10 30                numstab  .byte 12,12,16,48     ;bin to ASCII conversion numerals
   4392 CC8B 24                         radxtab  .byte c_hex           ;hexadecimal radix
   4393 CC8C 2B                                   .byte c_dec           ;decimal radix
   4394 CC8D 40                                   .byte c_oct           ;octal radix
   4395 CC8E 25                                   .byte c_bin           ;binary radix
   4607 = 00000004                      n_radix  =*-radxtab            ;number of recognized radices
                                        ;
                                        ;
                                        ;	shadow MPU register sizes...
                                        ;
   4401 CC8F 02                         rcvltab  .byte s_mpupbx+s_byte ; PB
   4402 CC90 03                                   .byte s_mpupcx+s_byte ; PC
   4403 CC91 02                                   .byte s_mpusrx+s_byte ; SR
   4404 CC92 03                                   .byte s_word+s_byte   ; .C
   4405 CC93 03                                   .byte s_word+s_byte   ; .X
   4406 CC94 03                                   .byte s_word+s_byte   ; .Y
   4407 CC95 03                                   .byte s_mpuspx+s_byte ; SP
   4408 CC96 03                                   .byte s_mpudpx+s_byte ; DP
   4409 CC97 02                                   .byte s_mpudbx+s_byte ; DB
   4621 = 00000009                      n_regchv =*-rcvltab            ;total shadow registers
                                        ;
                                        ;================================================================================
                                        ;
                                        ;ASSEMBLER/DISASSEMBLER DATA TABLES
                                        ;
                                        ;
                                        ;	numerically sorted & encoded W65C816S mnemonics...
                                        ;
   4419 CC98 F2 10                      mnetab   .word mne_xba         ;  0 — XBA
   4420 CC9A 5A 11                                .word mne_lda         ;  1 — LDA
   4421 CC9C A2 11                                .word mne_pea         ;  2 — PEA
   4422 CC9E 62 12                                .word mne_pha         ;  3 — PHA
   4423 CCA0 62 13                                .word mne_pla         ;  4 — PLA
   4424 CCA2 C6 14                                .word mne_bra         ;  5 — BRA
   4425 CCA4 E0 14                                .word mne_ora         ;  6 — ORA
   4426 CCA6 68 15                                .word mne_sta         ;  7 — STA
   4427 CCA8 6A 16                                .word mne_txa         ;  8 — TXA
   4428 CCAA AA 16                                .word mne_tya         ;  9 — TYA
   4429 CCAC 62 1A                                .word mne_phb         ; 10 — PHB
   4430 CCAE 62 1B                                .word mne_plb         ; 11 — PLB
   4431 CCB0 EA 1C                                .word mne_trb         ; 12 — TRB
   4432 CCB2 2A 1D                                .word mne_tsb         ; 13 — TSB
   4433 CCB4 E8 20                                .word mne_sbc         ; 14 — SBC
   4434 CCB6 06 21                                .word mne_bcc         ; 15 — BCC
   4435 CCB8 44 21                                .word mne_adc         ; 16 — ADC
   4436 CCBA 6A 21                                .word mne_tdc         ; 17 — TDC
   4437 CCBC 8A 21                                .word mne_dec         ; 18 — DEC
   4438 CCBE A8 21                                .word mne_sec         ; 19 — SEC
   4439 CCC0 48 23                                .word mne_clc         ; 20 — CLC
   4440 CCC2 D4 23                                .word mne_inc         ; 21 — INC
   4441 CCC4 2A 25                                .word mne_tsc         ; 22 — TSC
   4442 CCC6 C6 25                                .word mne_bvc         ; 23 — BVC
   4443 CCC8 2A 29                                .word mne_tcd         ; 24 — TCD
   4444 CCCA A8 29                                .word mne_sed         ; 25 — SED
   4445 CCCC 62 2A                                .word mne_phd         ; 26 — PHD
   4446 CCCE 48 2B                                .word mne_cld         ; 27 — CLD
   4447 CCD0 62 2B                                .word mne_pld         ; 28 — PLD
   4448 CCD2 C4 2B                                .word mne_and         ; 29 — AND
   4449 CCD4 32 31                                .word mne_xce         ; 30 — XCE
   4450 CCD6 C6 33                                .word mne_bne         ; 31 — BNE
   4451 CCD8 B0 50                                .word mne_wai         ; 32 — WAI
   4452 CCDA A2 51                                .word mne_pei         ; 33 — PEI
   4453 CCDC A8 51                                .word mne_sei         ; 34 — SEI
   4454 CCDE 48 53                                .word mne_cli         ; 35 — CLI
   4455 CCE0 86 53                                .word mne_bmi         ; 36 — BMI
   4456 CCE2 66 55                                .word mne_rti         ; 37 — RTI
   4457 CCE4 62 62                                .word mne_phk         ; 38 — PHK
   4458 CCE6 C6 64                                .word mne_brk         ; 39 — BRK
   4459 CCE8 96 6B                                .word mne_jml         ; 40 — JML
   4460 CCEA 26 6C                                .word mne_rol         ; 41 — ROL
   4461 CCEC 46 6C                                .word mne_bpl         ; 42 — BPL
   4462 CCEE C6 6C                                .word mne_brl         ; 43 — BRL
   4463 CCF0 04 6D                                .word mne_asl         ; 44 — ASL
   4464 CCF2 16 6D                                .word mne_jsl         ; 45 — JSL
   4465 CCF4 66 6D                                .word mne_rtl         ; 46 — RTL
   4466 CCF6 70 71                                .word mne_wdm         ; 47 — WDM
   4467 CCF8 DC 7D                                .word mne_mvn         ; 48 — MVN
   4468 CCFA A6 89                                .word mne_rep         ; 49 — REP
   4469 CCFC A8 89                                .word mne_sep         ; 50 — SEP
   4470 CCFE 62 8A                                .word mne_php         ; 51 — PHP
   4471 CD00 62 8B                                .word mne_plp         ; 52 — PLP
   4472 CD02 88 8B                                .word mne_cmp         ; 53 — CMP
   4473 CD04 96 8B                                .word mne_jmp         ; 54 — JMP
   4474 CD06 08 8C                                .word mne_cop         ; 55 — COP
   4475 CD08 1E 8C                                .word mne_nop         ; 56 — NOP
   4476 CD0A 68 8D                                .word mne_stp         ; 57 — STP
   4477 CD0C DC 8D                                .word mne_mvp         ; 58 — MVP
   4478 CD0E 86 91                                .word mne_beq         ; 59 — BEQ
   4479 CD10 A2 99                                .word mne_per         ; 60 — PER
   4480 CD12 0C 9C                                .word mne_eor         ; 61 — EOR
   4481 CD14 26 9C                                .word mne_ror         ; 62 — ROR
   4482 CD16 16 9D                                .word mne_jsr         ; 63 — JSR
   4483 CD18 1A 9D                                .word mne_lsr         ; 64 — LSR
   4484 CD1A 06 A1                                .word mne_bcs         ; 65 — BCS
   4485 CD1C 2A A1                                .word mne_tcs         ; 66 — TCS
   4486 CD1E 66 A5                                .word mne_rts         ; 67 — RTS
   4487 CD20 C6 A5                                .word mne_bvs         ; 68 — BVS
   4488 CD22 6A A6                                .word mne_txs         ; 69 — TXS
   4489 CD24 86 AA                                .word mne_bit         ; 70 — BIT
   4490 CD26 48 BB                                .word mne_clv         ; 71 — CLV
   4491 CD28 AA C8                                .word mne_tax         ; 72 — TAX
   4492 CD2A 5A C9                                .word mne_ldx         ; 73 — LDX
   4493 CD2C 8A C9                                .word mne_dex         ; 74 — DEX
   4494 CD2E 62 CA                                .word mne_phx         ; 75 — PHX
   4495 CD30 62 CB                                .word mne_plx         ; 76 — PLX
   4496 CD32 D4 CB                                .word mne_inx         ; 77 — INX
   4497 CD34 48 CC                                .word mne_cpx         ; 78 — CPX
   4498 CD36 2A CD                                .word mne_tsx         ; 79 — TSX
   4499 CD38 68 CD                                .word mne_stx         ; 80 — STX
   4500 CD3A AA CE                                .word mne_tyx         ; 81 — TYX
   4501 CD3C AA D0                                .word mne_tay         ; 82 — TAY
   4502 CD3E 5A D1                                .word mne_ldy         ; 83 — LDY
   4503 CD40 8A D1                                .word mne_dey         ; 84 — DEY
   4504 CD42 62 D2                                .word mne_phy         ; 85 — PHY
   4505 CD44 62 D3                                .word mne_ply         ; 86 — PLY
   4506 CD46 D4 D3                                .word mne_iny         ; 87 — INY
   4507 CD48 48 D4                                .word mne_cpy         ; 88 — CPY
   4508 CD4A 68 D5                                .word mne_sty         ; 89 — STY
   4509 CD4C 6A D6                                .word mne_txy         ; 90 — TXY
   4510 CD4E 68 DD                                .word mne_stz         ; 91 — STZ
                                        ;
   4723 = 000000B8                      s_mnetab =*-mnetab             ;mnemonic table size
   4724 = 0000005C                      n_mnemon =s_mnetab/s_word      ;total mnemonics
                                        ;
                                        ;
                                        ;	mnemonic lookup indices in opcode order...
                                        ;
   4518 CD50 27                         mnetabix .byte mne_brkx        ; $00  BRK
   4519 CD51 06                                   .byte mne_orax        ; $01  ORA (dp,X)
   4520 CD52 37                                   .byte mne_copx        ; $02  COP
   4521 CD53 06                                   .byte mne_orax        ; $03  ORA offset,S
   4522 CD54 0D                                   .byte mne_tsbx        ; $04  TSB dp
   4523 CD55 06                                   .byte mne_orax        ; $05  ORA dp
   4524 CD56 2C                                   .byte mne_aslx        ; $06  ASL dp
   4525 CD57 06                                   .byte mne_orax        ; $07  ORA [dp]
   4526 CD58 33                                   .byte mne_phpx        ; $08  PHP
   4527 CD59 06                                   .byte mne_orax        ; $09  ORA #
   4528 CD5A 2C                                   .byte mne_aslx        ; $0A  ASL A
   4529 CD5B 1A                                   .byte mne_phdx        ; $0B  PHD
   4530 CD5C 0D                                   .byte mne_tsbx        ; $0C  TSB abs
   4531 CD5D 06                                   .byte mne_orax        ; $0D  ORA abs
   4532 CD5E 2C                                   .byte mne_aslx        ; $0E  ASL abs
   4533 CD5F 06                                   .byte mne_orax        ; $0F  ORA absl
                                        ;
   4535 CD60 2A                                   .byte mne_bplx        ; $10  BPL abs
   4536 CD61 06                                   .byte mne_orax        ; $11  ORA (dp),Y
   4537 CD62 06                                   .byte mne_orax        ; $12  ORA (dp)
   4538 CD63 06                                   .byte mne_orax        ; $13  ORA (offset,S),Y
   4539 CD64 0C                                   .byte mne_trbx        ; $14  TRB dp
   4540 CD65 06                                   .byte mne_orax        ; $15  ORA dp,X
   4541 CD66 2C                                   .byte mne_aslx        ; $16  ASL dp,X
   4542 CD67 06                                   .byte mne_orax        ; $17  ORA [dp],Y
   4543 CD68 14                                   .byte mne_clcx        ; $18  CLC
   4544 CD69 06                                   .byte mne_orax        ; $19  ORA abs
   4545 CD6A 15                                   .byte mne_incx        ; $1A  INC A
   4546 CD6B 42                                   .byte mne_tcsx        ; $1B  TCS
   4547 CD6C 0C                                   .byte mne_trbx        ; $1C  TRB abs
   4548 CD6D 06                                   .byte mne_orax        ; $1D  ORA abs,X
   4549 CD6E 2C                                   .byte mne_aslx        ; $1E  ASL abs,X
   4550 CD6F 06                                   .byte mne_orax        ; $1F  ORA absl,X
                                        ;
   4552 CD70 3F                                   .byte mne_jsrx        ; $20  JSR abs
   4553 CD71 1D                                   .byte mne_andx        ; $21  AND (dp,X)
   4554 CD72 2D                                   .byte mne_jslx        ; $22  JSL absl
   4555 CD73 1D                                   .byte mne_andx        ; $23  AND offset,S
   4556 CD74 46                                   .byte mne_bitx        ; $24  BIT dp
   4557 CD75 1D                                   .byte mne_andx        ; $25  AND dp
   4558 CD76 29                                   .byte mne_rolx        ; $26  ROL dp
   4559 CD77 1D                                   .byte mne_andx        ; $27  AND [dp]
   4560 CD78 34                                   .byte mne_plpx        ; $28  PLP
   4561 CD79 1D                                   .byte mne_andx        ; $29  AND #
   4562 CD7A 29                                   .byte mne_rolx        ; $2A  ROL A
   4563 CD7B 1C                                   .byte mne_pldx        ; $2B  PLD
   4564 CD7C 46                                   .byte mne_bitx        ; $2C  BIT abs
   4565 CD7D 1D                                   .byte mne_andx        ; $2D  AND abs
   4566 CD7E 29                                   .byte mne_rolx        ; $2E  ROL abs
   4567 CD7F 1D                                   .byte mne_andx        ; $2F  AND absl
                                        ;
   4569 CD80 24                                   .byte mne_bmix        ; $30  BMI abs
   4570 CD81 1D                                   .byte mne_andx        ; $31  AND (dp),Y
   4571 CD82 1D                                   .byte mne_andx        ; $32  AND (dp)
   4572 CD83 1D                                   .byte mne_andx        ; $33  AND (offset,S),Y
   4573 CD84 46                                   .byte mne_bitx        ; $34  BIT dp,X
   4574 CD85 1D                                   .byte mne_andx        ; $35  AND dp,X
   4575 CD86 29                                   .byte mne_rolx        ; $36  ROL dp,X
   4576 CD87 1D                                   .byte mne_andx        ; $37  AND [dp],Y
   4577 CD88 13                                   .byte mne_secx        ; $38  SEC
   4578 CD89 1D                                   .byte mne_andx        ; $39  AND abs,Y
   4579 CD8A 12                                   .byte mne_decx        ; $3A  DEC A
   4580 CD8B 16                                   .byte mne_tscx        ; $3B  TSC
   4581 CD8C 46                                   .byte mne_bitx        ; $3C  BIT abs,X
   4582 CD8D 1D                                   .byte mne_andx        ; $3D  AND abs,X
   4583 CD8E 29                                   .byte mne_rolx        ; $3E  ROL abs,X
   4584 CD8F 1D                                   .byte mne_andx        ; $3F  AND absl,X
                                        ;
   4586 CD90 25                                   .byte mne_rtix        ; $40  RTI
   4587 CD91 3D                                   .byte mne_eorx        ; $41  EOR (dp,X)
   4588 CD92 2F                                   .byte mne_wdmx        ; $42  WDM
   4589 CD93 3D                                   .byte mne_eorx        ; $43  EOR offset,S
   4590 CD94 3A                                   .byte mne_mvpx        ; $44  MVP sb,db
   4591 CD95 3D                                   .byte mne_eorx        ; $45  EOR dp
   4592 CD96 40                                   .byte mne_lsrx        ; $46  LSR dp
   4593 CD97 3D                                   .byte mne_eorx        ; $47  EOR [dp]
   4594 CD98 03                                   .byte mne_phax        ; $48  PHA
   4595 CD99 3D                                   .byte mne_eorx        ; $49  EOR #
   4596 CD9A 40                                   .byte mne_lsrx        ; $4A  LSR A
   4597 CD9B 26                                   .byte mne_phkx        ; $4B  PHK
   4598 CD9C 36                                   .byte mne_jmpx        ; $4C  JMP abs
   4599 CD9D 3D                                   .byte mne_eorx        ; $4D  EOR abs
   4600 CD9E 40                                   .byte mne_lsrx        ; $4E  LSR abs
   4601 CD9F 3D                                   .byte mne_eorx        ; $4F  EOR absl
                                        ;
   4603 CDA0 17                                   .byte mne_bvcx        ; $50  BVC abs
   4604 CDA1 3D                                   .byte mne_eorx        ; $51  EOR (dp),Y
   4605 CDA2 3D                                   .byte mne_eorx        ; $52  EOR (dp)
   4606 CDA3 3D                                   .byte mne_eorx        ; $53  EOR (offset,S),Y
   4607 CDA4 30                                   .byte mne_mvnx        ; $54  MVN sb,db
   4608 CDA5 3D                                   .byte mne_eorx        ; $55  EOR dp,X
   4609 CDA6 40                                   .byte mne_lsrx        ; $56  LSR dp,X
   4610 CDA7 3D                                   .byte mne_eorx        ; $57  EOR [dp],Y
   4611 CDA8 23                                   .byte mne_clix        ; $58  CLI
   4612 CDA9 3D                                   .byte mne_eorx        ; $59  EOR abs,Y
   4613 CDAA 55                                   .byte mne_phyx        ; $5A  PHY
   4614 CDAB 18                                   .byte mne_tcdx        ; $5B  TCD
   4615 CDAC 28                                   .byte mne_jmlx        ; $5C  JML absl
   4616 CDAD 3D                                   .byte mne_eorx        ; $5D  EOR abs,X
   4617 CDAE 40                                   .byte mne_lsrx        ; $5E  LSR abs,X
   4618 CDAF 3D                                   .byte mne_eorx        ; $5F  EOR absl,X
                                        ;
   4620 CDB0 43                                   .byte mne_rtsx        ; $60  RTS
   4621 CDB1 10                                   .byte mne_adcx        ; $61  ADC (dp,X)
   4622 CDB2 3C                                   .byte mne_perx        ; $62  PER
   4623 CDB3 10                                   .byte mne_adcx        ; $63  ADC offset,S
   4624 CDB4 5B                                   .byte mne_stzx        ; $64  STZ dp
   4625 CDB5 10                                   .byte mne_adcx        ; $65  ADC dp
   4626 CDB6 3E                                   .byte mne_rorx        ; $66  ROR dp
   4627 CDB7 10                                   .byte mne_adcx        ; $67  ADC [dp]
   4628 CDB8 04                                   .byte mne_plax        ; $68  PLA
   4629 CDB9 10                                   .byte mne_adcx        ; $69  ADC #
   4630 CDBA 3E                                   .byte mne_rorx        ; $6A  ROR A
   4631 CDBB 2E                                   .byte mne_rtlx        ; $6B  RTL
   4632 CDBC 36                                   .byte mne_jmpx        ; $6C  JMP (abs)
   4633 CDBD 10                                   .byte mne_adcx        ; $6D  ADC abs
   4634 CDBE 3E                                   .byte mne_rorx        ; $6E  ROR abs
   4635 CDBF 10                                   .byte mne_adcx        ; $6F  ADC absl
                                        ;
   4637 CDC0 44                                   .byte mne_bvsx        ; $70  BVS abs
   4638 CDC1 10                                   .byte mne_adcx        ; $71  ADC (dp),Y
   4639 CDC2 10                                   .byte mne_adcx        ; $72  ADC (dp)
   4640 CDC3 10                                   .byte mne_adcx        ; $73  ADC (offset,S),Y
   4641 CDC4 5B                                   .byte mne_stzx        ; $74  STZ dp,X
   4642 CDC5 10                                   .byte mne_adcx        ; $75  ADC dp,X
   4643 CDC6 3E                                   .byte mne_rorx        ; $76  ROR dp,X
   4644 CDC7 10                                   .byte mne_adcx        ; $77  ADC [dp],Y
   4645 CDC8 22                                   .byte mne_seix        ; $78  SEI
   4646 CDC9 10                                   .byte mne_adcx        ; $79  ADC abs,Y
   4647 CDCA 56                                   .byte mne_plyx        ; $7A  PLY
   4648 CDCB 11                                   .byte mne_tdcx        ; $7B  TDC
   4649 CDCC 36                                   .byte mne_jmpx        ; $7C  JMP (abs,X)
   4650 CDCD 10                                   .byte mne_adcx        ; $7D  ADC abs,X
   4651 CDCE 3E                                   .byte mne_rorx        ; $7E  ROR abs,X
   4652 CDCF 10                                   .byte mne_adcx        ; $7F  ADC absl,X
                                        ;
   4654 CDD0 05                                   .byte mne_brax        ; $80  BRA abs
   4655 CDD1 07                                   .byte mne_stax        ; $81  STA (dp,X)
   4656 CDD2 2B                                   .byte mne_brlx        ; $82  BRL abs
   4657 CDD3 07                                   .byte mne_stax        ; $83  STA offset,S
   4658 CDD4 59                                   .byte mne_styx        ; $84  STY dp
   4659 CDD5 07                                   .byte mne_stax        ; $85  STA dp
   4660 CDD6 50                                   .byte mne_stxx        ; $86  STX dp
   4661 CDD7 07                                   .byte mne_stax        ; $87  STA [dp]
   4662 CDD8 54                                   .byte mne_deyx        ; $88  DEY
   4663 CDD9 46                                   .byte mne_bitx        ; $89  BIT #
   4664 CDDA 08                                   .byte mne_txax        ; $8A  TXA
   4665 CDDB 0A                                   .byte mne_phbx        ; $8B  PHB
   4666 CDDC 59                                   .byte mne_styx        ; $8C  STY abs
   4667 CDDD 07                                   .byte mne_stax        ; $8D  STA abs
   4668 CDDE 50                                   .byte mne_stxx        ; $8E  STX abs
   4669 CDDF 07                                   .byte mne_stax        ; $8F  STA absl
                                        ;
   4671 CDE0 0F                                   .byte mne_bccx        ; $90  BCC abs
   4672 CDE1 07                                   .byte mne_stax        ; $91  STA (dp),Y
   4673 CDE2 07                                   .byte mne_stax        ; $92  STA (dp)
   4674 CDE3 07                                   .byte mne_stax        ; $93  STA (offset,S),Y
   4675 CDE4 59                                   .byte mne_styx        ; $94  STY dp,X
   4676 CDE5 07                                   .byte mne_stax        ; $95  STA dp,X
   4677 CDE6 50                                   .byte mne_stxx        ; $96  STX dp,Y
   4678 CDE7 07                                   .byte mne_stax        ; $97  STA [dp],Y
   4679 CDE8 09                                   .byte mne_tyax        ; $98  TYA
   4680 CDE9 07                                   .byte mne_stax        ; $99  STA abs,Y
   4681 CDEA 45                                   .byte mne_txsx        ; $9A  TXS
   4682 CDEB 5A                                   .byte mne_txyx        ; $9B  TXY
   4683 CDEC 5B                                   .byte mne_stzx        ; $9C  STZ abs
   4684 CDED 07                                   .byte mne_stax        ; $9D  STA abs,X
   4685 CDEE 5B                                   .byte mne_stzx        ; $9E  STZ abs,X
   4686 CDEF 07                                   .byte mne_stax        ; $9F  STA absl,X
                                        ;
   4688 CDF0 53                                   .byte mne_ldyx        ; $A0  LDY #
   4689 CDF1 01                                   .byte mne_ldax        ; $A1  LDA (dp,X)
   4690 CDF2 49                                   .byte mne_ldxx        ; $A2  LDX #
   4691 CDF3 01                                   .byte mne_ldax        ; $A3  LDA offset,S
   4692 CDF4 53                                   .byte mne_ldyx        ; $A4  LDY dp
   4693 CDF5 01                                   .byte mne_ldax        ; $A5  LDA dp
   4694 CDF6 49                                   .byte mne_ldxx        ; $A6  LDX dp
   4695 CDF7 01                                   .byte mne_ldax        ; $A7  LDA [dp]
   4696 CDF8 52                                   .byte mne_tayx        ; $A8  TAY
   4697 CDF9 01                                   .byte mne_ldax        ; $A9  LDA #
   4698 CDFA 48                                   .byte mne_taxx        ; $AA  TAX
   4699 CDFB 0B                                   .byte mne_plbx        ; $AB  PLB
   4700 CDFC 53                                   .byte mne_ldyx        ; $AC  LDY abs
   4701 CDFD 01                                   .byte mne_ldax        ; $AD  LDA abs
   4702 CDFE 49                                   .byte mne_ldxx        ; $AE  LDX abs
   4703 CDFF 01                                   .byte mne_ldax        ; $AF  LDA absl
                                        ;
   4705 CE00 41                                   .byte mne_bcsx        ; $B0  BCS abs
   4706 CE01 01                                   .byte mne_ldax        ; $B1  LDA (dp),Y
   4707 CE02 01                                   .byte mne_ldax        ; $B2  LDA (dp)
   4708 CE03 01                                   .byte mne_ldax        ; $B3  LDA (offset,S),Y
   4709 CE04 53                                   .byte mne_ldyx        ; $B4  LDY dp,X
   4710 CE05 01                                   .byte mne_ldax        ; $B5  LDA dp,X
   4711 CE06 49                                   .byte mne_ldxx        ; $B6  LDX dp,Y
   4712 CE07 01                                   .byte mne_ldax        ; $B7  LDA [dp],Y
   4713 CE08 47                                   .byte mne_clvx        ; $B8  CLV
   4714 CE09 01                                   .byte mne_ldax        ; $B9  LDA abs,Y
   4715 CE0A 4F                                   .byte mne_tsxx        ; $BA  TSX
   4716 CE0B 51                                   .byte mne_tyxx        ; $BB  TYX
   4717 CE0C 53                                   .byte mne_ldyx        ; $BC  LDY abs,X
   4718 CE0D 01                                   .byte mne_ldax        ; $BD  LDA abs,X
   4719 CE0E 49                                   .byte mne_ldxx        ; $BE  LDX abs,Y
   4720 CE0F 01                                   .byte mne_ldax        ; $BF  LDA absl,X
                                        ;
   4722 CE10 58                                   .byte mne_cpyx        ; $C0  CPY #
   4723 CE11 35                                   .byte mne_cmpx        ; $C1  CMP (dp,X)
   4724 CE12 31                                   .byte mne_repx        ; $C2  REP #
   4725 CE13 35                                   .byte mne_cmpx        ; $C3  CMP offset,S
   4726 CE14 58                                   .byte mne_cpyx        ; $C4  CPY dp
   4727 CE15 35                                   .byte mne_cmpx        ; $C5  CMP dp
   4728 CE16 12                                   .byte mne_decx        ; $C6  DEC dp
   4729 CE17 35                                   .byte mne_cmpx        ; $C7  CMP [dp]
   4730 CE18 57                                   .byte mne_inyx        ; $C8  INY
   4731 CE19 35                                   .byte mne_cmpx        ; $C9  CMP #
   4732 CE1A 4A                                   .byte mne_dexx        ; $CA  DEX
   4733 CE1B 20                                   .byte mne_waix        ; $CB  WAI
   4734 CE1C 58                                   .byte mne_cpyx        ; $CC  CPY abs
   4735 CE1D 35                                   .byte mne_cmpx        ; $CD  CMP abs
   4736 CE1E 12                                   .byte mne_decx        ; $CE  DEC abs
   4737 CE1F 35                                   .byte mne_cmpx        ; $CF  CMP absl
                                        ;
   4739 CE20 1F                                   .byte mne_bnex        ; $D0  BNE abs
   4740 CE21 35                                   .byte mne_cmpx        ; $D1  CMP (dp),Y
   4741 CE22 35                                   .byte mne_cmpx        ; $D2  CMP (dp)
   4742 CE23 35                                   .byte mne_cmpx        ; $D3  CMP (offset,S),Y
   4743 CE24 21                                   .byte mne_peix        ; $D4  PEI dp
   4744 CE25 35                                   .byte mne_cmpx        ; $D5  CMP dp,X
   4745 CE26 12                                   .byte mne_decx        ; $D6  DEC dp,X
   4746 CE27 35                                   .byte mne_cmpx        ; $D7  CMP [dp],Y
   4747 CE28 1B                                   .byte mne_cldx        ; $D8  CLD
   4748 CE29 35                                   .byte mne_cmpx        ; $D9  CMP abs,Y
   4749 CE2A 4B                                   .byte mne_phxx        ; $DA  PHX
   4750 CE2B 39                                   .byte mne_stpx        ; $DB  STP
   4751 CE2C 36                                   .byte mne_jmpx        ; $DC  JMP [abs]
   4752 CE2D 35                                   .byte mne_cmpx        ; $DD  CMP abs,X
   4753 CE2E 12                                   .byte mne_decx        ; $DE  DEC abs,X
   4754 CE2F 35                                   .byte mne_cmpx        ; $DF  CMP absl,X
                                        ;
   4756 CE30 4E                                   .byte mne_cpxx        ; $E0  CPX #
   4757 CE31 0E                                   .byte mne_sbcx        ; $E1  SBC (dp,X)
   4758 CE32 32                                   .byte mne_sepx        ; $E2  SEP #
   4759 CE33 0E                                   .byte mne_sbcx        ; $E3  SBC offset,S
   4760 CE34 4E                                   .byte mne_cpxx        ; $E4  CPX dp
   4761 CE35 0E                                   .byte mne_sbcx        ; $E5  SBC dp
   4762 CE36 15                                   .byte mne_incx        ; $E6  INC dp
   4763 CE37 0E                                   .byte mne_sbcx        ; $E7  SBC [dp]
   4764 CE38 4D                                   .byte mne_inxx        ; $E8  INX
   4765 CE39 0E                                   .byte mne_sbcx        ; $E9  SBC #
   4766 CE3A 38                                   .byte mne_nopx        ; $EA  NOP
   4767 CE3B 00                                   .byte mne_xbax        ; $EB  XBA
   4768 CE3C 4E                                   .byte mne_cpxx        ; $EC  CPX abs
   4769 CE3D 0E                                   .byte mne_sbcx        ; $ED  SBC abs
   4770 CE3E 15                                   .byte mne_incx        ; $EE  INC abs
   4771 CE3F 0E                                   .byte mne_sbcx        ; $EF  SBC absl
                                        ;
   4773 CE40 3B                                   .byte mne_beqx        ; $F0  BEQ abs
   4774 CE41 0E                                   .byte mne_sbcx        ; $F1  SBC (dp),Y
   4775 CE42 0E                                   .byte mne_sbcx        ; $F2  SBC (dp)
   4776 CE43 0E                                   .byte mne_sbcx        ; $F3  SBC (offset,S),Y
   4777 CE44 02                                   .byte mne_peax        ; $F4  PEA #
   4778 CE45 0E                                   .byte mne_sbcx        ; $F5  SBC dp,X
   4779 CE46 15                                   .byte mne_incx        ; $F6  INC dp,X
   4780 CE47 0E                                   .byte mne_sbcx        ; $F7  SBC [dp],Y
   4781 CE48 19                                   .byte mne_sedx        ; $F8  SED
   4782 CE49 0E                                   .byte mne_sbcx        ; $F9  SBC abs,Y
   4783 CE4A 4C                                   .byte mne_plxx        ; $FA  PLX
   4784 CE4B 1E                                   .byte mne_xcex        ; $FB  XCE
   4785 CE4C 3F                                   .byte mne_jsrx        ; $FC  JSR (abs,X)
   4786 CE4D 0E                                   .byte mne_sbcx        ; $FD  SBC abs,X
   4787 CE4E 15                                   .byte mne_incx        ; $FE  INC abs,X
   4788 CE4F 0E                                   .byte mne_sbcx        ; $FF  SBC absl,X
                                        ;
                                        ;
                                        ;	instruction addressing modes & sizes in opcode order...
                                        ;
                                        ;	    xxxxxxxx
                                        ;	    ||||||||
                                        ;	    ||||++++———> Addressing Mode
                                        ;	    ||||         ——————————————————————————————————
                                        ;	    ||||          0000  dp, abs, absl, implied or A
                                        ;	    ||||          0001  #
                                        ;	    ||||          0010  dp,X, abs,X or absl,X
                                        ;	    ||||          0011  dp,Y or abs,Y
                                        ;	    ||||          0100  (dp) or (abs)
                                        ;	    ||||          0101  [dp] or [abs]
                                        ;	    ||||          0110  [dp],Y
                                        ;	    ||||          0111  (dp,X) or (abs,X)
                                        ;	    ||||          1000  (dp),Y
                                        ;	    ||||          1001  offset,S
                                        ;	    ||||          1010  (offset,S),Y
                                        ;	    ||||          1011  sbnk,dbnk (MVN or MVP)
                                        ;	    ||||          —-—-—-—-—-—-—-—-—-—-—-—-—-—-—-—-—
                                        ;	    ||||           #    = immediate
                                        ;	    ||||           A    = accumulator
                                        ;	    ||||           abs  = absolute
                                        ;	    ||||           absl = absolute long
                                        ;	    ||||           dbnk = destination bank
                                        ;	    ||||           dp   = direct (zero) page
                                        ;	    ||||           S    = stack relative
                                        ;	    ||||           sbnk = source bank
                                        ;	    ||||         ——————————————————————————————————
                                        ;	    ||||
                                        ;	    ||++———————> binary-encoded operand size
                                        ;	    |+—————————> 1: relative branch instruction
                                        ;	    +——————————> 1: variable operand size...
                                        ;
                                        ;	    —————————————————————————————————————————————————————————————
                                        ;	    Variable operand size refers to an immediate mode instruction
                                        ;	    that can accept either an 8 or 16 bit operand.  During instr-
                                        ;	    uction assembly, an 8 bit operand can be forced to 16 bits by
                                        ;	    preceding the operand field with !,  e.g.,  LDA !#$01,  which
                                        ;	    will assemble as $A9 $01 $00.
                                        ;	    —————————————————————————————————————————————————————————————
                                        ;
   4832 CE50 00                         mnetabam .byte ops0 | am_nam   ; $00  BRK
   4833 CE51 17                                   .byte ops1 | am_indx  ; $01  ORA (dp,X)
   4834 CE52 10                                   .byte ops1 | am_nam   ; $02  COP
   4835 CE53 19                                   .byte ops1 | am_stk   ; $03  ORA offset,S
   4836 CE54 10                                   .byte ops1 | am_nam   ; $04  TSB dp
   4837 CE55 10                                   .byte ops1 | am_nam   ; $05  ORA dp
   4838 CE56 10                                   .byte ops1 | am_nam   ; $06  ASL dp
   4839 CE57 15                                   .byte ops1 | am_indl  ; $07  ORA [dp]
   4840 CE58 00                                   .byte ops0 | am_nam   ; $08  PHP
   4841 CE59 91                                   .byte vops | am_imm   ; $09  ORA #
   4842 CE5A 00                                   .byte ops0 | am_nam   ; $0A  ASL A
   4843 CE5B 00                                   .byte ops0 | am_nam   ; $0B  PHD
   4844 CE5C 20                                   .byte ops2 | am_nam   ; $0C  TSB abs
   4845 CE5D 20                                   .byte ops2 | am_nam   ; $0D  ORA abs
   4846 CE5E 20                                   .byte ops2 | am_nam   ; $0E  ASL abs
   4847 CE5F 30                                   .byte ops3 | am_nam   ; $0F  ORA absl
                                        ;
   4849 CE60 50                                   .byte bop1 | am_nam   ; $10  BPL abs
   4850 CE61 18                                   .byte ops1 | am_indy  ; $11  ORA (dp),Y
   4851 CE62 14                                   .byte ops1 | am_ind   ; $12  ORA (dp)
   4852 CE63 1A                                   .byte ops1 | am_stky  ; $13  ORA (offset,S),Y
   4853 CE64 10                                   .byte ops1 | am_nam   ; $14  TRB dp
   4854 CE65 12                                   .byte ops1 | am_adrx  ; $15  ORA dp,X
   4855 CE66 12                                   .byte ops1 | am_adrx  ; $16  ASL dp,X
   4856 CE67 16                                   .byte ops1 | am_indly ; $17  ORA [dp],Y
   4857 CE68 00                                   .byte ops0 | am_nam   ; $18  CLC
   4858 CE69 20                                   .byte ops2 | am_nam   ; $19  ORA abs
   4859 CE6A 00                                   .byte ops0 | am_nam   ; $1A  INC A
   4860 CE6B 00                                   .byte ops0 | am_nam   ; $1B  TCS
   4861 CE6C 20                                   .byte ops2 | am_nam   ; $1C  TRB abs
   4862 CE6D 22                                   .byte ops2 | am_adrx  ; $1D  ORA abs,X
   4863 CE6E 22                                   .byte ops2 | am_adrx  ; $1E  ASL abs,X
   4864 CE6F 32                                   .byte ops3 | am_adrx  ; $1F  ORA absl,X
                                        ;
   4866 CE70 20                                   .byte ops2 | am_nam   ; $20  JSR abs
   4867 CE71 17                                   .byte ops1 | am_indx  ; $21  AND (dp,X)
   4868 CE72 30                                   .byte ops3 | am_nam   ; $22  JSL absl
   4869 CE73 19                                   .byte ops1 | am_stk   ; $23  AND offset,S
   4870 CE74 10                                   .byte ops1 | am_nam   ; $24  BIT dp
   4871 CE75 10                                   .byte ops1 | am_nam   ; $25  AND dp
   4872 CE76 10                                   .byte ops1 | am_nam   ; $26  ROL dp
   4873 CE77 15                                   .byte ops1 | am_indl  ; $27  AND [dp]
   4874 CE78 00                                   .byte ops0 | am_nam   ; $28  PLP
   4875 CE79 91                                   .byte vops | am_imm   ; $29  AND #
   4876 CE7A 00                                   .byte ops0 | am_nam   ; $2A  ROL A
   4877 CE7B 00                                   .byte ops0 | am_nam   ; $2B  PLD
   4878 CE7C 20                                   .byte ops2 | am_nam   ; $2C  BIT abs
   4879 CE7D 20                                   .byte ops2 | am_nam   ; $2D  AND abs
   4880 CE7E 20                                   .byte ops2 | am_nam   ; $2E  ROL abs
   4881 CE7F 30                                   .byte ops3 | am_nam   ; $2F  AND absl
                                        ;
   4883 CE80 50                                   .byte bop1 | am_nam   ; $30  BMI abs
   4884 CE81 18                                   .byte ops1 | am_indy  ; $31  AND (dp),Y
   4885 CE82 14                                   .byte ops1 | am_ind   ; $32  AND (dp)
   4886 CE83 1A                                   .byte ops1 | am_stky  ; $33  AND (offset,S),Y
   4887 CE84 12                                   .byte ops1 | am_adrx  ; $34  BIT dp,X
   4888 CE85 12                                   .byte ops1 | am_adrx  ; $35  AND dp,X
   4889 CE86 12                                   .byte ops1 | am_adrx  ; $36  ROL dp,X
   4890 CE87 16                                   .byte ops1 | am_indly ; $37  AND [dp],Y
   4891 CE88 00                                   .byte ops0 | am_nam   ; $38  SEC
   4892 CE89 23                                   .byte ops2 | am_adry  ; $39  AND abs,Y
   4893 CE8A 00                                   .byte ops0 | am_nam   ; $3A  DEC A
   4894 CE8B 00                                   .byte ops0 | am_nam   ; $3B  TSC
   4895 CE8C 22                                   .byte ops2 | am_adrx  ; $3C  BIT abs,X
   4896 CE8D 22                                   .byte ops2 | am_adrx  ; $3D  AND abs,X
   4897 CE8E 22                                   .byte ops2 | am_adrx  ; $3E  ROL abs,X
   4898 CE8F 32                                   .byte ops3 | am_adrx  ; $3F  AND absl,X
                                        ;
   4900 CE90 00                                   .byte ops0 | am_nam   ; $40  RTI
   4901 CE91 17                                   .byte ops1 | am_indx  ; $41  EOR (dp,X)
   4902 CE92 00                                   .byte ops0 | am_nam   ; $42  WDM
   4903 CE93 19                                   .byte ops1 | am_stk   ; $43  EOR offset,S
   4904 CE94 2B                                   .byte ops2 | am_move  ; $44  MVP sb,db
   4905 CE95 10                                   .byte ops1 | am_nam   ; $45  EOR dp
   4906 CE96 10                                   .byte ops1 | am_nam   ; $46  LSR dp
   4907 CE97 15                                   .byte ops1 | am_indl  ; $47  EOR [dp]
   4908 CE98 00                                   .byte ops0 | am_nam   ; $48  PHA
   4909 CE99 91                                   .byte vops | am_imm   ; $49  EOR #
   4910 CE9A 00                                   .byte ops0 | am_nam   ; $4A  LSR A
   4911 CE9B 00                                   .byte ops0 | am_nam   ; $4B  PHK
   4912 CE9C 20                                   .byte ops2 | am_nam   ; $4C  JMP abs
   4913 CE9D 20                                   .byte ops2 | am_nam   ; $4D  EOR abs
   4914 CE9E 20                                   .byte ops2 | am_nam   ; $4E  LSR abs
   4915 CE9F 30                                   .byte ops3 | am_nam   ; $4F  EOR absl
                                        ;
   4917 CEA0 50                                   .byte bop1 | am_nam   ; $50  BVC abs
   4918 CEA1 18                                   .byte ops1 | am_indy  ; $51  EOR (dp),Y
   4919 CEA2 14                                   .byte ops1 | am_ind   ; $52  EOR (dp)
   4920 CEA3 1A                                   .byte ops1 | am_stky  ; $53  EOR (offset,S),Y
   4921 CEA4 2B                                   .byte ops2 | am_move  ; $54  MVN sb,db
   4922 CEA5 12                                   .byte ops1 | am_adrx  ; $55  EOR dp,X
   4923 CEA6 12                                   .byte ops1 | am_adrx  ; $56  LSR dp,X
   4924 CEA7 16                                   .byte ops1 | am_indly ; $57  EOR [dp],Y
   4925 CEA8 00                                   .byte ops0 | am_nam   ; $58  CLI
   4926 CEA9 23                                   .byte ops2 | am_adry  ; $59  EOR abs,Y
   4927 CEAA 00                                   .byte ops0 | am_nam   ; $5A  PHY
   4928 CEAB 00                                   .byte ops0 | am_nam   ; $5B  TCD
   4929 CEAC 30                                   .byte ops3 | am_nam   ; $5C  JML absl
   4930 CEAD 22                                   .byte ops2 | am_adrx  ; $5D  EOR abs,X
   4931 CEAE 22                                   .byte ops2 | am_adrx  ; $5E  LSR abs,X
   4932 CEAF 32                                   .byte ops3 | am_adrx  ; $5F  EOR absl,X
                                        ;
   4934 CEB0 00                                   .byte ops0 | am_nam   ; $60  RTS
   4935 CEB1 17                                   .byte ops1 | am_indx  ; $61  ADC (dp,X)
   4936 CEB2 60                                   .byte bop2 | am_nam   ; $62  PER
   4937 CEB3 19                                   .byte ops1 | am_stk   ; $63  ADC offset,S
   4938 CEB4 10                                   .byte ops1 | am_nam   ; $64  STZ dp
   4939 CEB5 10                                   .byte ops1 | am_nam   ; $65  ADC dp
   4940 CEB6 10                                   .byte ops1 | am_nam   ; $66  ROR dp
   4941 CEB7 15                                   .byte ops1 | am_indl  ; $67  ADC [dp]
   4942 CEB8 00                                   .byte ops0 | am_nam   ; $68  PLA
   4943 CEB9 91                                   .byte vops | am_imm   ; $69  ADC #
   4944 CEBA 00                                   .byte ops0 | am_nam   ; $6A  ROR A
   4945 CEBB 00                                   .byte ops0 | am_nam   ; $6B  RTL
   4946 CEBC 24                                   .byte ops2 | am_ind   ; $6C  JMP (abs)
   4947 CEBD 20                                   .byte ops2 | am_nam   ; $6D  ADC abs
   4948 CEBE 20                                   .byte ops2 | am_nam   ; $6E  ROR abs
   4949 CEBF 30                                   .byte ops3 | am_nam   ; $6F  ADC absl
                                        ;
   4951 CEC0 50                                   .byte bop1 | am_nam   ; $70  BVS abs
   4952 CEC1 18                                   .byte ops1 | am_indy  ; $71  ADC (dp),Y
   4953 CEC2 14                                   .byte ops1 | am_ind   ; $72  ADC (dp)
   4954 CEC3 1A                                   .byte ops1 | am_stky  ; $73  ADC (offset,S),Y
   4955 CEC4 12                                   .byte ops1 | am_adrx  ; $74  STZ dp,X
   4956 CEC5 12                                   .byte ops1 | am_adrx  ; $75  ADC dp,X
   4957 CEC6 12                                   .byte ops1 | am_adrx  ; $76  ROR dp,X
   4958 CEC7 16                                   .byte ops1 | am_indly ; $77  ADC [dp],Y
   4959 CEC8 00                                   .byte ops0 | am_nam   ; $78  SEI
   4960 CEC9 23                                   .byte ops2 | am_adry  ; $79  ADC abs,Y
   4961 CECA 00                                   .byte ops0 | am_nam   ; $7A  PLY
   4962 CECB 00                                   .byte ops0 | am_nam   ; $7B  TDC
   4963 CECC 27                                   .byte ops2 | am_indx  ; $7C  JMP (abs,X)
   4964 CECD 22                                   .byte ops2 | am_adrx  ; $7D  ADC abs,X
   4965 CECE 22                                   .byte ops2 | am_adrx  ; $7E  ROR abs,X
   4966 CECF 32                                   .byte ops3 | am_adrx  ; $7F  ADC absl,X
                                        ;
   4968 CED0 50                                   .byte bop1 | am_nam   ; $80  BRA abs
   4969 CED1 17                                   .byte ops1 | am_indx  ; $81  STA (dp,X)
   4970 CED2 60                                   .byte bop2 | am_nam   ; $82  BRL abs
   4971 CED3 19                                   .byte ops1 | am_stk   ; $83  STA offset,S
   4972 CED4 10                                   .byte ops1 | am_nam   ; $84  STY dp
   4973 CED5 10                                   .byte ops1 | am_nam   ; $85  STA dp
   4974 CED6 10                                   .byte ops1 | am_nam   ; $86  STX dp
   4975 CED7 15                                   .byte ops1 | am_indl  ; $87  STA [dp]
   4976 CED8 00                                   .byte ops0 | am_nam   ; $88  DEY
   4977 CED9 91                                   .byte vops | am_imm   ; $89  BIT #
   4978 CEDA 00                                   .byte ops0 | am_nam   ; $8A  TXA
   4979 CEDB 00                                   .byte ops0 | am_nam   ; $8B  PHB
   4980 CEDC 20                                   .byte ops2 | am_nam   ; $8C  STY abs
   4981 CEDD 20                                   .byte ops2 | am_nam   ; $8D  STA abs
   4982 CEDE 20                                   .byte ops2 | am_nam   ; $8E  STX abs
   4983 CEDF 30                                   .byte ops3 | am_nam   ; $8F  STA absl
                                        ;
   4985 CEE0 50                                   .byte bop1 | am_nam   ; $90  BCC abs
   4986 CEE1 18                                   .byte ops1 | am_indy  ; $91  STA (dp),Y
   4987 CEE2 14                                   .byte ops1 | am_ind   ; $92  STA (dp)
   4988 CEE3 1A                                   .byte ops1 | am_stky  ; $93  STA (offset,S),Y
   4989 CEE4 12                                   .byte ops1 | am_adrx  ; $94  STY dp,X
   4990 CEE5 12                                   .byte ops1 | am_adrx  ; $95  STA dp,X
   4991 CEE6 13                                   .byte ops1 | am_adry  ; $96  STX dp,Y
   4992 CEE7 16                                   .byte ops1 | am_indly ; $97  STA [dp],Y
   4993 CEE8 00                                   .byte ops0 | am_nam   ; $98  TYA
   4994 CEE9 23                                   .byte ops2 | am_adry  ; $99  STA abs,Y
   4995 CEEA 00                                   .byte ops0 | am_nam   ; $9A  TXS
   4996 CEEB 00                                   .byte ops0 | am_nam   ; $9B  TXY
   4997 CEEC 20                                   .byte ops2 | am_nam   ; $9C  STZ abs
   4998 CEED 22                                   .byte ops2 | am_adrx  ; $9D  STA abs,X
   4999 CEEE 22                                   .byte ops2 | am_adrx  ; $9E  STZ abs,X
   5000 CEEF 32                                   .byte ops3 | am_adrx  ; $9F  STA absl,X
                                        ;
   5002 CEF0 91                                   .byte vops | am_imm   ; $A0  LDY #
   5003 CEF1 17                                   .byte ops1 | am_indx  ; $A1  LDA (dp,X)
   5004 CEF2 91                                   .byte vops | am_imm   ; $A2  LDX #
   5005 CEF3 19                                   .byte ops1 | am_stk   ; $A3  LDA offset,S
   5006 CEF4 10                                   .byte ops1 | am_nam   ; $A4  LDY dp
   5007 CEF5 10                                   .byte ops1 | am_nam   ; $A5  LDA dp
   5008 CEF6 10                                   .byte ops1 | am_nam   ; $A6  LDX dp
   5009 CEF7 15                                   .byte ops1 | am_indl  ; $A7  LDA [dp]
   5010 CEF8 00                                   .byte ops0 | am_nam   ; $A8  TAY
   5011 CEF9 91                                   .byte vops | am_imm   ; $A9  LDA #
   5012 CEFA 00                                   .byte ops0 | am_nam   ; $AA  TAX
   5013 CEFB 00                                   .byte ops0 | am_nam   ; $AB  PLB
   5014 CEFC 20                                   .byte ops2 | am_nam   ; $AC  LDY abs
   5015 CEFD 20                                   .byte ops2 | am_nam   ; $AD  LDA abs
   5016 CEFE 20                                   .byte ops2 | am_nam   ; $AE  LDX abs
   5017 CEFF 30                                   .byte ops3 | am_nam   ; $AF  LDA absl
                                        ;
   5019 CF00 50                                   .byte bop1 | am_nam   ; $B0  BCS abs
   5020 CF01 18                                   .byte ops1 | am_indy  ; $B1  LDA (dp),Y
   5021 CF02 14                                   .byte ops1 | am_ind   ; $B2  LDA (dp)
   5022 CF03 1A                                   .byte ops1 | am_stky  ; $B3  LDA (offset,S),Y
   5023 CF04 12                                   .byte ops1 | am_adrx  ; $B4  LDY dp,X
   5024 CF05 12                                   .byte ops1 | am_adrx  ; $B5  LDA dp,X
   5025 CF06 13                                   .byte ops1 | am_adry  ; $B6  LDX dp,Y
   5026 CF07 16                                   .byte ops1 | am_indly ; $B7  LDA [dp],Y
   5027 CF08 00                                   .byte ops0 | am_nam   ; $B8  CLV
   5028 CF09 23                                   .byte ops2 | am_adry  ; $B9  LDA abs,Y
   5029 CF0A 00                                   .byte ops0 | am_nam   ; $BA  TSX
   5030 CF0B 00                                   .byte ops0 | am_nam   ; $BB  TYX
   5031 CF0C 22                                   .byte ops2 | am_adrx  ; $BC  LDY abs,X
   5032 CF0D 22                                   .byte ops2 | am_adrx  ; $BD  LDA abs,X
   5033 CF0E 23                                   .byte ops2 | am_adry  ; $BE  LDX abs,Y
   5034 CF0F 32                                   .byte ops3 | am_adrx  ; $BF  LDA absl,X
                                        ;
   5036 CF10 91                                   .byte vops | am_imm   ; $C0  CPY #
   5037 CF11 17                                   .byte ops1 | am_indx  ; $C1  CMP (dp,X)
   5038 CF12 11                                   .byte ops1 | am_imm   ; $C2  REP #
   5039 CF13 19                                   .byte ops1 | am_stk   ; $C3  CMP offset,S
   5040 CF14 10                                   .byte ops1 | am_nam   ; $C4  CPY dp
   5041 CF15 10                                   .byte ops1 | am_nam   ; $C5  CMP dp
   5042 CF16 10                                   .byte ops1 | am_nam   ; $C6  DEC dp
   5043 CF17 15                                   .byte ops1 | am_indl  ; $C7  CMP [dp]
   5044 CF18 00                                   .byte ops0 | am_nam   ; $C8  INY
   5045 CF19 91                                   .byte vops | am_imm   ; $C9  CMP #
   5046 CF1A 00                                   .byte ops0 | am_nam   ; $CA  DEX
   5047 CF1B 00                                   .byte ops0 | am_nam   ; $CB  WAI
   5048 CF1C 20                                   .byte ops2 | am_nam   ; $CC  CPY abs
   5049 CF1D 20                                   .byte ops2 | am_nam   ; $CD  CMP abs
   5050 CF1E 20                                   .byte ops2 | am_nam   ; $CE  DEC abs
   5051 CF1F 30                                   .byte ops3 | am_nam   ; $CF  CMP absl
                                        ;
   5053 CF20 50                                   .byte bop1 | am_nam   ; $D0  BNE abs
   5054 CF21 18                                   .byte ops1 | am_indy  ; $D1  CMP (dp),Y
   5055 CF22 14                                   .byte ops1 | am_ind   ; $D2  CMP (dp)
   5056 CF23 1A                                   .byte ops1 | am_stky  ; $D3  CMP (offset,S),Y
   5057 CF24 10                                   .byte ops1 | am_nam   ; $D4  PEI dp
   5058 CF25 12                                   .byte ops1 | am_adrx  ; $D5  CMP dp,X
   5059 CF26 12                                   .byte ops1 | am_adrx  ; $D6  DEC dp,X
   5060 CF27 16                                   .byte ops1 | am_indly ; $D7  CMP [dp],Y
   5061 CF28 00                                   .byte ops0 | am_nam   ; $D8  CLD
   5062 CF29 23                                   .byte ops2 | am_adry  ; $D9  CMP abs,Y
   5063 CF2A 00                                   .byte ops0 | am_nam   ; $DA  PHX
   5064 CF2B 00                                   .byte ops0 | am_nam   ; $DB  STP
   5065 CF2C 25                                   .byte ops2 | am_indl  ; $DC  JMP [abs]
   5066 CF2D 22                                   .byte ops2 | am_adrx  ; $DD  CMP abs,X
   5067 CF2E 22                                   .byte ops2 | am_adrx  ; $DE  DEC abs,X
   5068 CF2F 32                                   .byte ops3 | am_adrx  ; $DF  CMP absl,X
                                        ;
   5070 CF30 91                                   .byte vops | am_imm   ; $E0  CPX #
   5071 CF31 17                                   .byte ops1 | am_indx  ; $E1  SBC (dp,X)
   5072 CF32 11                                   .byte ops1 | am_imm   ; $E2  SEP #
   5073 CF33 19                                   .byte ops1 | am_stk   ; $E3  SBC offset,S
   5074 CF34 10                                   .byte ops1 | am_nam   ; $E4  CPX dp
   5075 CF35 10                                   .byte ops1 | am_nam   ; $E5  SBC dp
   5076 CF36 10                                   .byte ops1 | am_nam   ; $E6  INC dp
   5077 CF37 15                                   .byte ops1 | am_indl  ; $E7  SBC [dp]
   5078 CF38 00                                   .byte ops0 | am_nam   ; $E8  INX
   5079 CF39 91                                   .byte vops | am_imm   ; $E9  SBC #
   5080 CF3A 00                                   .byte ops0 | am_nam   ; $EA  NOP
   5081 CF3B 00                                   .byte ops0 | am_nam   ; $EB  XBA
   5082 CF3C 20                                   .byte ops2 | am_nam   ; $EC  CPX abs
   5083 CF3D 20                                   .byte ops2 | am_nam   ; $ED  SBC abs
   5084 CF3E 20                                   .byte ops2 | am_nam   ; $EE  INC abs
   5085 CF3F 30                                   .byte ops3 | am_nam   ; $EF  SBC absl
                                        ;
   5087 CF40 50                                   .byte bop1 | am_nam   ; $F0  BEQ abs
   5088 CF41 18                                   .byte ops1 | am_indy  ; $F1  SBC (dp),Y
   5089 CF42 14                                   .byte ops1 | am_ind   ; $F2  SBC (dp)
   5090 CF43 1A                                   .byte ops1 | am_stky  ; $F3  SBC (offset,S),Y
   5091 CF44 21                                   .byte ops2 | am_imm   ; $F4  PEA #
   5092 CF45 12                                   .byte ops1 | am_adrx  ; $F5  SBC dp,X
   5093 CF46 12                                   .byte ops1 | am_adrx  ; $F6  INC dp,X
   5094 CF47 16                                   .byte ops1 | am_indly ; $F7  SBC [dp],Y
   5095 CF48 00                                   .byte ops0 | am_nam   ; $F8  SED
   5096 CF49 23                                   .byte ops2 | am_adry  ; $F9  SBC abs,Y
   5097 CF4A 00                                   .byte ops0 | am_nam   ; $FA  PLX
   5098 CF4B 00                                   .byte ops0 | am_nam   ; $FB  XCE
   5099 CF4C 27                                   .byte ops2 | am_indx  ; $FC  JSR (abs,X)
   5100 CF4D 22                                   .byte ops2 | am_adrx  ; $FD  SBC abs,X
   5101 CF4E 22                                   .byte ops2 | am_adrx  ; $FE  INC abs,X
   5102 CF4F 32                                   .byte ops3 | am_adrx  ; $FF  SBC absl,X
                                        ;
                                        ;
                                        ;	.X & .Y immediate mode opcodes...
                                        ;
   5107 CF50 A0                         vopidx   .byte $a0             ;LDY #
   5108 CF51 A2                                   .byte $a2             ;LDX #
   5109 CF52 C0                                   .byte $c0             ;CPY #
   5110 CF53 E0                                   .byte $e0             ;CPX #
   5322 = 00000004                      n_vopidx =*-vopidx             ;number of opcodes
                                        ;
                                        ;
                                        ;	addressing mode symbology lookup...
                                        ;
   5116 CF54 6C CF                      ms_lutab .word ms_nam          ;(0000)  no symbol
   5117 CF56 76 CF                                .word ms_imm          ;(0001)  #
   5118 CF58 6E CF                                .word ms_addrx        ;(0010)  dp,X or abs,X
   5119 CF5A 72 CF                                .word ms_addry        ;(0011)  dp,Y or abs,Y
   5120 CF5C 78 CF                                .word ms_ind          ;(0100)  (dp) or (abs)
   5121 CF5E 7B CF                                .word ms_indl         ;(0101)  [dp] or [abs]
   5122 CF60 7E CF                                .word ms_indly        ;(0110)  [dp],Y
   5123 CF62 83 CF                                .word ms_indx         ;(0111)  (dp,X) or (abs,X)
   5124 CF64 88 CF                                .word ms_indy         ;(1000)  (dp),Y
   5125 CF66 90 CF                                .word ms_stk          ;(1001)  offset,S
   5126 CF68 94 CF                                .word ms_stky         ;(1010) (offset,S),Y
   5127 CF6A 6C CF                                .word ms_nam          ;(1011) sbnk,dbnk
                                        ;
                                        ;
                                        ;	addressing mode symbology strings...
                                        ;
   5132 CF6C 20 00                      ms_nam   .byte " ",0           ;no symbol
   5133 CF6E 20 2C 58 00                ms_addrx .byte " ,X",0         ;dp,X or addr,X
   5134 CF72 20 2C 59 00                ms_addry .byte " ,Y",0         ;dp,Y or addr,Y
   5135 CF76 23 00                      ms_imm   .byte "#",0           ;immediate
   5136 CF78 28 29 00                   ms_ind   .byte "()",0          ;(dp) or (abs)
   5137 CF7B 5B 5D 00                   ms_indl  .byte "[]",0          ;[dp] or [abs]
   5138 CF7E 5B 5D 2C 59 00             ms_indly .byte "[],Y",0        ;[dp],Y
   5139 CF83 28 2C 58 29 00             ms_indx  .byte "(,X)",0        ;(dp,X) or (abs,X)
   5140 CF88 28 29 2C 59 00             ms_indy  .byte "(),Y",0        ;(dp),Y
   5141 CF8D 2C 24 00                   ms_move  .byte ",$",0          ;MVN/MVP sbnk,dbnk
   5142 CF90 20 2C 53 00                ms_stk   .byte " ,S",0         ;offset,S
   5143 CF94 28 2C 53 29 2C 59 00       ms_stky  .byte "(,S),Y",0      ;(offset,S),Y
                                        ;
                                        ;================================================================================
                                        ;
                                        ;CONSOLE DISPLAY CONTROL STRINGS
                                        ;
   5149 CF9B 1B 28                      dc_bf +         .byte a_esc,"("
   5149 CF9D 1B 47 34                 +            .byte a_esc,"G4"
                                                            ;enable reverse foreground
   5150 CFA0 00                                   .byte 0
                                        ;
   5152 CFA1 08                         dc_bs +         .byte a_bs
   5152 CFA2 1B 57                    +   +         .byte a_esc,"W"
                                        
                                                            ;destructive backspace
   5154 CFA4 00                                   .byte 0
                                        ;
   5156 CFA5 1B 54                      dc_cl +         .byte a_esc,"T"
                                                            ;clear to end of line 
   5157 CFA7 00                                   .byte 0
                                        ;
   5159 CFA8 1B 60 31                   dc_cn +         .byte a_esc,"`1"
                                                            ;cursor on
   5160 CFAB 00                                   .byte 0
                                        ;
   5162 CFAC 1B 60 30                   dc_co +         .byte a_esc,"`0"
                                                            ;cursor off
   5163 CFAF 00                                   .byte 0
                                        ;
   5165 CFB0 1B 28                      dc_er +         .byte a_esc,"("
   5165 CFB2 1B 47 30                 +            .byte a_esc,"G0"
                                                            ;enable normal foreground
   5166 CFB5 00                                   .byte 0
                                        ;
   5168 CFB6 0D                         dc_lf ++         .byte a_cr
                                     +   
   5168 CFB7 0A                       +            .byte a_lf
                                                            ;newline
   5169 CFB8 00                                   .byte 0
                                        ;
                                        ;================================================================================
                                        ;
                                        ;TEXT STRINGS
                                        ;
   5175 CFB9 07                         mm_brk +         .byte a_bel
                                        
   5176 CFBA 0D                       +   +         .byte a_cr
                                     +   
   5176 CFBB 0A                       +            .byte a_lf
                                        
   5177 CFBC 2A 2A 42 52 4B                       .byte "**BRK"
   5178 CFC1 0D                       +   +         .byte a_cr
                                     +   
   5178 CFC2 0A                       +            .byte a_lf
                                        
   5179 CFC3 00                                   .byte 0
                                        ;
   5181 CFC4 0D                         mm_entry ++         .byte a_cr
                                     +   
   5181 CFC5 0A                       +            .byte a_lf
                                        
   5182 CFC6 0A 53 75 70 65 72 6D 6F              .byte a_lf,"Supermon 816 "
   5182 CFCE 6E 20 38 31 36 20         
   5183 CFD4 31                       +            .byte "1"
   5183 CFD5 2E                       +            .byte "."
   5183 CFD6 30                       +            .byte "0"
   5183 CFD7 2E                       +            .byte "."
   5183 CFD8 31                       +            .byte "1"
                                        
   5184 CFD9 20                                   .byte " "
   5185 CFDA 0D                       +   +         .byte a_cr
                                     +   
   5185 CFDB 0A                       +            .byte a_lf
                                        
   5186 CFDC 00                                   .byte 0
                                        ;
   5188 CFDD 20 2A 2A 45 52 52 20 20    mm_err   .byte " **ERR  ",0
   5188 CFE5 00                        
                                        ;
   5190 CFE6 0D                         mm_prmpt ++         .byte a_cr
                                     +   
   5190 CFE7 0A                       +            .byte a_lf
                                        
   5191 CFE8 1B 28                    +            .byte a_esc,"("
   5191 CFEA 1B 47 30                 +            .byte a_esc,"G0"
                                        
   5192 CFED 2E 00                                .byte ".",0
                                        ;
   5194 CFEF 0D                         mm_regs ++         .byte a_cr
                                     +   
   5194 CFF0 0A                       +            .byte a_lf
                                        
   5195 CFF1 20 20 50 42 20 20 50 43              .byte "  PB  PC   NVmxDIZC  .C   .X   .Y   SP   DP  DB"
   5195 CFF9 20 20 20 4E 56 6D 78 44   
   5195 D001 49 5A 43 20 20 2E 43 20   
   5195 D009 20 20 2E 58 20 20 20 2E   
   5195 D011 59 20 20 20 53 50 20 20   
   5195 D019 20 44 50 20 20 44 42      
   5196 D020 0D                       +   +         .byte a_cr
                                     +   
   5196 D021 0A                       +            .byte a_lf
                                        
   5197 D022 3B 20 00                             .byte "; ",0
                                        ;
   5199 D025 07                         mm_rts +         .byte a_bel
                                        
   5200 D026 0D                       +   +         .byte a_cr
                                     +   
   5200 D027 0A                       +            .byte a_lf
                                        
   5201 D028 2A 2A 52 54 53                       .byte "**RTS"
   5202 D02D 0D                       +   +         .byte a_cr
                                     +   
   5202 D02E 0A                       +            .byte a_lf
                                        
   5203 D02F 00                                   .byte 0
                                        ;
                                        ;================================================================================
                                        ;
                                        ;VECTOR STORAGE
                                        ;
                                        ;
   5476 = 0000D030                      _txtend_ =*                     ;end of program text
                                        ;
                                        ;================================================================================
                                        	;.end
Finitron FT832 assembler   version 1.4   Mon Nov 09 14:42:19 2015     Page 1
FTBios816.asm


                                        .include "supermon816.asm"
Finitron FT832 assembler   version 1.4   Mon Nov 09 14:42:19 2015     Page 1
FAC1ToString.asm

                                        ; ============================================================================
                                        ; FAC1ToString.asm
                                        ;        __
                                        ;   \\__/ o\    (C) 2014  Robert Finch, Stratford
                                        ;    \  __ /    All rights reserved.
                                        ;     \/_//     robfinch<remove>@finitron.ca
                                        ;       ||
                                        ;  
                                        ;
                                        ; This source file is free software: you can redistribute it and/or modify 
                                        ; it under the terms of the GNU Lesser General Public License as published 
                                        ; by the Free Software Foundation, either version 3 of the License, or     
                                        ; (at your option) any later version.                                      
                                        ;                                                                          
                                        ; This source file is distributed in the hope that it will be useful,      
                                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                                        ; GNU General Public License for more details.                             
                                        ;                                                                          
                                        ; You should have received a copy of the GNU General Public License        
                                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                                        ;                                                                          
                                        ; ============================================================================
                                        ;
                                        ; This code is a heavily modified version of the floating point to string
                                        ; conversion routine which is a part of Lee Davison's EhBASIC.
                                        ;
   5508 = 0000000000000095                            Cvaral		= $95		; current var address low byte
   5509 = 00000096                      Cvarah		= Cvaral+1	; current var address high byte
   5510 = 00000000000000A8                            numexp		= $A8		; string to float number exponent count
   5511 = 00000000000000AA                            expcnt		= $AA		; string to float exponent count
   5512 = 00000000000000BA                            Sendl			= $BA	; BASIC pointer temp low byte
   5513 = 00000000000000BB                            Sendh			= $BB	; BASIC pointer temp low byte
                                        
   5515 = 00000000000003A0                            Decss		= $3A0		; number to decimal string start
   5516 = 000003A1                      Decssp1		= Decss+1	; number to decimal string start
   5517 = 0000000000000001                            FP_ADD		EQU		1
   5518 = 0000000000000002                            FP_SUB		EQU		2
   5519 = 0000000000000003                            FP_MUL		EQU		3
   5520 = 0000000000000004                            FP_DIV		EQU		4
   5521 = 0000000000000005                            FP_FIX2FLT	EQU		5
   5522 = 0000000000000006                            FP_FLT2FIX	EQU		6
   5523 = 0000000000000007                            FP_ABS		EQU		7
   5524 = 0000000000000010                            FP_NEG		EQU		16
   5525 = 0000000000000011                            FP_SWAP		EQU		17
   5526 = 0000000000000083                            FIXED_MUL	EQU		$83
   5527 = 0000000000000081                            FIXED_ADD	EQU		$81
   5528 = 0000000000000082                            FIXED_SUB	EQU		$82
                                        ;parameter FIXED_DIV = 8'h84;
                                        ;parameter FIXED_ABS = 8'h87;
                                        ;parameter FIXED_NEG = 8'h90;
   5532 = 0000000000FEA20E                            FP_CMDREG	EQU		$FEA20E
   5533 = 0000000000FEA20E                            FP_STATREG	EQU		$FEA20E
   5534 = 0000000000FEA200                            FAC1		EQU		$FEA200
   5535 = 0000000000FEA200                            FAC1_5		EQU		$FEA200
   5536 = 0000000000FEA202                            FAC1_4		EQU		$FEA202
   5537 = 0000000000FEA204                            FAC1_3		EQU		$FEA204
   5538 = 0000000000FEA206                            FAC1_2		EQU		$FEA206
   5539 = 0000000000FEA208                            FAC1_1		EQU		$FEA208
   5540 = 0000000000FEA208                            FAC1_msw	EQU		$FEA208
   5541 = 0000000000FEA20A                            FAC1_e		EQU		$FEA20A
   5542 = 0000000000FEA210                            FAC2		EQU		$FEA210
                                        
                                           	CPU		W65C816S
                                           	NDX		16
                                           	MEM		16
                                           	
                                           public FAC1ToString:
                                           
                                           ; The first chunk of code determines if the number is positive or negative
                                           ; and spits out the appropriate sign. Next it takes the absolute value of
                                           ; the accumulator so following code only has to deal with positive numbers.
                                           
   5288 00D030 A0 00 00                     	LDY	#$00			; set index = 1
   5289 00D033 AF 08 A2 FE                  	LDA	FAC1_msw		; test FAC1 sign (b15) (Can't use BIT)
   5290 00D037 10 0E                        	BPL	.0002		; branch if +ve
   5291 00D039 A9 2D 00                     	LDA	#'-'			; else character = "-"
   5292 00D03C 99 A0 03                     	STA	Decss,Y		; save leading character (" " or "-")
   5293 00D03F A9 10 00                     	LDA	#FP_NEG		; make the FAC positive
   5294 00D042 20 69 D2                     	JSR	FPCommandWait
   5295 00D045 80 06                        	BRA	.0001
   5296 00D047                             .0002:
   5297 00D047 A9 20 00                     	LDA	#$20			; character = " " (assume +ve)
   5298 00D04A 99 A0 03                     	STA	Decss,Y
   5299 00D04D                             .0001:
   5300 00D04D 84 BA                        	STY	Sendl			; save index
                                           
                                           ; This little bit of code check for a zero exponent which indicates a
                                           ; value of zero.
                                           
   5305 00D04F AF 0A A2 FE                  	LDA	FAC1_e		; get FAC1 exponent
   5306 00D053 AA                           	TAX
   5307 00D054 D0 06                        	BNE	LAB_2989		; branch if FAC1<>0
                                           					; exponent was $00 so FAC1 is 0
   5309 00D056 A9 30 00                     	LDA	#'0'			; set character = "0"
   5310 00D059 82 93 01                     	BRL	LAB_2A89		; save last character, [EOT] and exit
                                           
                                           ; This loop attempts to make small values more significant, so that there are
                                           ; fewer leading zeros in the value. (The exponent is decremented so that it
                                           ; corresponds). Because of the potential for extremely small values looping is
                                           ; limited. The problem is the 16 bit exponent can allow for much smaller
                                           ; values than an 8 bit exponent would and we don't want to loop for thousands
                                           ; of iterations in order to display a value that's almost zero.
                                           
                                           					; FAC1 is some non zero value
   5320 00D05C                             LAB_2989
   5321 00D05C 84 BA                        	STY	Sendl			; save off .Y
   5322 00D05E A0 67 06                     	LDY #1639			; max number of retries
   5323 00D061 A9 00 00                     	LDA	#$00			; clear (number exponent count)
   5324 00D064 85 A8                        	STA numexp
   5325 00D066                             LOOP_MBMILLION:
   5326 00D066 E0 00 80                     	CPX	#$8000			; compare FAC1 exponent with $8000 (>1.00000)
   5327 00D069 B0 1A                        	BCS	LAB_299A		; branch if FAC1=>1
                                           					; FAC1<1
   5329 00D06B F4 AA D2                     	PEA	A_MILLION		; multiply FAC * 1,000,000
   5330 00D06E 20 1E D2                     	JSR	LOAD_FAC2		; 
   5331 00D071 68                           	PLA					; get rid of parameter
   5332 00D072 20 18 D2                     	JSR	FMUL
   5333 00D075 A5 A8                        	LDA numexp
   5334 00D077 38                           	SEC
   5335 00D078 E9 06 00                     	SBC	#6				; set number exponent count (-6)
   5336 00D07B 85 A8                        	STA numexp
   5337 00D07D AF 0A A2 FE                  	LDA FAC1_e
   5338 00D081 AA                           	TAX
   5339 00D082 88                           	DEY
   5340 00D083 10 E1                        	BPL	LOOP_MBMILLION
                                           
   5342 00D085                             LAB_299A
   5343 00D085 A4 BA                        	LDY	Sendl		; get back .Y
                                           
                                           ; These two loops coerce the value of the FAC to be between 100,000 and
                                           ; 1,000,000. This gives a maximum of six digits before the decimal point
                                           ; in scientific notation.
                                           
                                           ; This loop divides by 10 until the value in the FAC is less than 1,000,000
                                           ;
   5351 00D087                             LOOP_DB10:
   5352 00D087 F4 C2 D2                     	PEA	MAX_BEFORE_SCI	; set pointer low byte to 999999.4375 (max before sci note)
   5353 00D08A 20 1E D2                     	JSR	LOAD_FAC2		; compare FAC1 with (AY)
   5354 00D08D 68                           	PLA					; get rid of parameter
   5355 00D08E AF 0E A2 FE                  	LDA FP_CMDREG
   5356 00D092 89 08 00                     	BIT	#$08			; test equals bit
   5357 00D095 D0 28                        	BNE	LAB_29C3		; exit if FAC1 = (AY)
   5358 00D097 89 04 00                     	BIT	#$04			; test greater than bit
   5359 00D09A F0 07                        	BEQ	LOOP_MB10		; go do *10 if FAC1 < (AY)
                                           
   5361 00D09C                             LAB_29B9
   5362 00D09C 20 56 D2                     	JSR	DivideByTen		; divide by 10
   5363 00D09F E6 A8                        	INC	numexp			; increment number exponent count
   5364 00D0A1 80 E4                        	BRA	LOOP_DB10		; go test again (branch always)
                                           
                                           ; This loop multiplies the value by 10 until it's greater than
                                           ; 100,000.
                                           					; FAC1 < (AY)
   5369 00D0A3                             LOOP_MB10
   5370 00D0A3 F4 DA D2                     	PEA CONST_9375		; set pointer to 99999.9375
   5371 00D0A6 20 1E D2                     	JSR	LOAD_FAC2		; compare FAC1 with (AY)
   5372 00D0A9 68                           	PLA					; get rid of parameter
   5373 00D0AA AF 0E A2 FE                  	LDA FP_CMDREG
   5374 00D0AE 89 08 00                     	BIT #$08
   5375 00D0B1 D0 05                        	BNE	LAB_29B2		; branch if FAC1 = (AY) (allow decimal places)
   5376 00D0B3 89 04 00                     	BIT #$04
   5377 00D0B6 D0 07                        	BNE	LAB_29C0		; branch if FAC1 > (AY) (no decimal places)
                                           					; FAC1 <= (AY)
   5379 00D0B8                             LAB_29B2
   5380 00D0B8 20 49 D2                     	JSR	MultiplyByTen	; multiply by 10
   5381 00D0BB C6 A8                        	DEC	numexp		; decrement number exponent count
   5382 00D0BD 80 E4                        	BRA	LOOP_MB10		; go test again (branch always)
                                           
                                           ; now we have just the digits to do
                                           
   5386 00D0BF                             LAB_29C0
                                           ;	JSR	AddPoint5		; add 0.5 to FAC1 (round FAC1)
   5388 00D0BF                             LAB_29C3
                                           ;	JSR	FloatToFixed	; convert FAC1 floating-to-fixed
   5390 00D0BF A2 01 00                     	LDX	#$01			; set default digits before dp = 1
   5391 00D0C2 A5 A8                        	LDA	numexp		; get number exponent count
   5392 00D0C4 18                           	CLC				; clear carry for add
   5393 00D0C5 69 07 00                     	ADC	#$07			; up to 6 digits before point
   5394 00D0C8 30 0A                        	BMI	LAB_29D8		; if -ve then 1 digit before dp
                                           
   5396 00D0CA C9 08 00                     	CMP	#$08			; A>=8 if n>=1E6
   5397 00D0CD B0 06                        	BCS	LAB_29D9		; branch if >= $08
                                           
                                           					; carry is clear
   5400 00D0CF AA                           	TAX				; copy to A
   5401 00D0D0 CA                           	DEX				; take 1 from digit count
   5402 00D0D1 A9 02 00                     	LDA	#$02			;.set exponent adjust
                                           
   5404 00D0D4                             LAB_29D8
   5405 00D0D4 38                           	SEC				; set carry for subtract
   5406 00D0D5                             LAB_29D9
   5407 00D0D5 E9 02 00                     	SBC	#$02			; -2
   5408 00D0D8 85 AA                        	STA	expcnt		;.save exponent adjust
   5409 00D0DA 86 A8                        	STX	numexp		; save digits before dp count
   5410 00D0DC 8A                           	TXA				; copy to A
   5411 00D0DD F0 02                        	BEQ	LAB_29E4		; branch if no digits before dp
                                           
   5413 00D0DF 10 15                        	BPL	LAB_29F7		; branch if digits before dp
                                           
   5415 00D0E1                             LAB_29E4
   5416 00D0E1 A4 BA                        	LDY	Sendl			; get output string index
   5417 00D0E3 A9 2E 00                     	LDA	#'.'			; character "."
   5418 00D0E6 C8                           	INY				; increment index
   5419 00D0E7 99 A0 03                     	STA	Decss,Y		; save to output string
   5420 00D0EA 8A                           	TXA				;.
   5421 00D0EB F0 07                        	BEQ	LAB_29F5		;.
                                           
   5423 00D0ED A9 30 00                     	LDA	#'0'			; character "0"
   5424 00D0F0 C8                           	INY				; increment index
   5425 00D0F1 99 A0 03                     	STA	Decss,Y		; save to output string
   5426 00D0F4                             LAB_29F5
   5427 00D0F4 84 BA                        	STY	Sendl			; save output string index
                                           
   5429 00D0F6                             LAB_29F7
   5430 00D0F6 A2 30 00                     	LDX	#'0'			; holds onto the digit value
                                           
                                           ; Now loop subtracting 100,000 as many times as we can. The value was coerced
                                           ; to be between 100,000 and 1,000,000. Count the number of times subtraction
                                           ; can be done successfully.
                                           ;
   5436 00D0F9                             LAB_29FB
   5437 00D0F9 F4 B6 D2                     	PEA CONST_100000
   5438 00D0FC 20 1E D2                     	JSR LOAD_FAC2	; load FAC2 with 100,000
   5439 00D0FF 68                           	PLA				; get rid of parameter
   5440 00D100 AF 0E A2 FE                  	LDA FP_STATREG
   5441 00D104 89 04 00                     	BIT #$04		; Is FAC1 > 100,000 ?
   5442 00D107 F0 0F                        	BEQ	.0005		; branch if not
   5443 00D109 A9 11 00                     	LDA #FP_SWAP	; subtract is FAC2-FAC1!
   5444 00D10C 20 69 D2                     	JSR FPCommandWait;
   5445 00D10F A9 02 00                     	LDA #FP_SUB		; subtract 100,000 from the mantissa.
   5446 00D112 20 69 D2                     	JSR FPCommandWait
   5447 00D115 E8                           	INX				; increment the value of the digit
   5448 00D116 80 E1                        	BRA	LAB_29FB	; try again
   5449 00D118                             .0005:
   5450 00D118 8A                           	TXA
   5451 00D119 A4 BA                        	LDY	Sendl			; get output string index
   5452 00D11B C8                           	INY				; increment output string index
   5453 00D11C 8A                           	TXA
   5454 00D11D 99 A0 03                     	STA	Decss,Y		; save to output string
   5455 00D120 C6 A8                        	DEC	numexp		; decrement # of characters before the dp
   5456 00D122 D0 07                        	BNE	LAB_2A3B		; branch if still characters to do
                                           				; else output the point
   5458 00D124 A9 2E 00                     	LDA	#'.'			; character "."
   5459 00D127 C8                           	INY				; increment output string index
   5460 00D128 99 A0 03                     	STA	Decss,Y		; save to output string
   5461 00D12B                             LAB_2A3B
   5462 00D12B 84 BA                        	STY	Sendl		; save output string index
                                           	; We subtracted until the value was < 100,000 so multiply the
                                           	; remainder upwards to get the next digit.
   5465 00D12D 20 49 D2                     	JSR	MultiplyByTen	; If not, multiply by 10
   5466 00D130 C0 1B 00                     	CPY #27			; converted (+/- . incl)
   5467 00D133 90 C1                        	BCC	LAB_29F7
                                           					; now remove trailing zeroes
   5469 00D135                             .RemoveTrailingZeros
   5470 00D135 B9 A0 03                     	LDA	Decss,Y		; get character from output string
   5471 00D138 29 FF 00                     	AND	#$FF		; mask to a byte
   5472 00D13B 88                           	DEY				; decrement output string index
   5473 00D13C C9 30 00                     	CMP	#'0'			; compare with "0"
   5474 00D13F F0 F4                        	BEQ	.RemoveTrailingZeros	; loop until non "0" character found
                                           
   5476 00D141 C9 2E 00                     	CMP	#'.'			; compare with "."
   5477 00D144 F0 01                        	BEQ	LAB_2A58		; branch if was dp
                                           
                                           					; restore last character
   5480 00D146 C8                           	INY				; increment output string index
   5481 00D147                             LAB_2A58
   5482 00D147 A9 2B 00                     	LDA	#'+'			; character "+"
   5483 00D14A A6 AA                        	LDX	expcnt		; get exponent count
   5484 00D14C F0 FF A2 00                  	LBEQ	LAB_2A8C		; if zero go set null terminator and exit
                                           
                                           					; exponent isn't zero so write exponent
   5487 00D150 10 0A                        	BPL	LAB_2A68		; branch if exponent count +ve
                                           
   5489 00D152 A9 00 00                     	LDA	#$00			; clear A
   5490 00D155 38                           	SEC				; set carry for subtract
   5491 00D156 E5 AA                        	SBC	expcnt		; subtract exponent count adjust (convert -ve to +ve)
   5492 00D158 AA                           	TAX				; copy exponent count to X
   5493 00D159 A9 2D 00                     	LDA	#'-'			; character "-"
                                           
                                           ; We must keep moving forwards through the string because the acc is storing
                                           ; two bytes.
                                           
   5498 00D15C                             LAB_2A68
   5499 00D15C 48                           	PHA
   5500 00D15D A9 45 00                     	LDA	#'E'			; character "E"
   5501 00D160 99 A1 03                     	STA	Decss+1,Y		; save exponent sign to output string
   5502 00D163 68                           	PLA
   5503 00D164 99 A2 03                     	STA	Decss+2,Y		; save to output string
   5504 00D167 8A                           	TXA				; get exponent count back
                                           
                                           ; do highest exponent digit
   5507 00D168 64 BA                        	STZ Sendl
   5508 00D16A A2 2F 00                     	LDX	#'0'-1		; one less than "0" character
   5509 00D16D 38                           	SEC				; set carry for subtract
   5510 00D16E E8                          .0001:				
   5511 00D16F E9 10 27                     	SBC	#10000
   5512 00D172 B0 FA                        	BCS .0001
   5513 00D174 69 10 27                     	ADC #10000
   5514 00D177 E0 30 00                     	CPX #'0'
   5515 00D17A F0 09                        	BEQ .0005
   5516 00D17C E6 BA                        	INC Sendl
   5517 00D17E 48                           	PHA
   5518 00D17F 8A                           	TXA
   5519 00D180 99 A3 03                     	STA Decss+3,Y
   5520 00D183 68                           	PLA
   5521 00D184 C8                           	INY
                                           ; do the next exponent digit
   5523 00D185                             .0005:
   5524 00D185 A2 2F 00                     	LDX #'0'-1
   5525 00D188 38                           	SEC
   5526 00D189                             .0002:
   5527 00D189 E8                           	INX
   5528 00D18A E9 E8 03                     	SBC #1000
   5529 00D18D B0 FA                        	BCS .0002
   5530 00D18F 69 E8 03                     	ADC #1000
   5531 00D192 46 BA                        	LSR Sendl
   5532 00D194 B0 05                        	BCS .00010
   5533 00D196 E0 30 00                     	CPX #'0'
   5534 00D199 F0 09                        	BEQ .0006
   5535 00D19B                             .00010:
   5536 00D19B E6 BA                        	INC Sendl
   5537 00D19D 48                           	PHA
   5538 00D19E 8A                           	TXA
   5539 00D19F 99 A3 03                     	STA Decss+3,Y
   5540 00D1A2 68                           	PLA
   5541 00D1A3 C8                           	INY
                                           ; and the next
   5543 00D1A4                             .0006:
   5544 00D1A4 A2 2F 00                     	LDX	#'0'-1
   5545 00D1A7 38                           	SEC
   5546 00D1A8                             .0003:
   5547 00D1A8 E8                           	INX
   5548 00D1A9 E9 64 00                     	SBC #100
   5549 00D1AC B0 FA                        	BCS .0003
   5550 00D1AE 69 64 00                     	ADC #100
   5551 00D1B1 46 BA                        	LSR Sendl
   5552 00D1B3 B0 05                        	BCS .00011
   5553 00D1B5 E0 30 00                     	CPX #'0'
   5554 00D1B8 F0 09                        	BEQ .0007
   5555 00D1BA                             .00011:
   5556 00D1BA E6 BA                        	INC Sendl
   5557 00D1BC 48                           	PHA
   5558 00D1BD 8A                           	TXA
   5559 00D1BE 99 A3 03                     	STA Decss+3,Y
   5560 00D1C1 68                           	PLA
   5561 00D1C2 C8                           	INY
                                           
   5563 00D1C3                             .0007:
   5564 00D1C3 A2 2F 00                     	LDX #'0'-1
   5565 00D1C6 38                           	SEC
   5566 00D1C7                             .0004:
   5567 00D1C7 E8                           	INX
   5568 00D1C8 E9 0A 00                     	SBC #10
   5569 00D1CB B0 FA                        	BCS .0004
   5570 00D1CD 69 0A 00                     	ADC #10
   5571 00D1D0 46 BA                        	LSR Sendl
   5572 00D1D2 B0 05                        	BCS .00012
   5573 00D1D4 E0 30 00                     	CPX #'0'
   5574 00D1D7 F0 09                        	BEQ .0008
   5575 00D1D9                             .00012:
   5576 00D1D9 E6 BA                        	INC Sendl
   5577 00D1DB 48                           	PHA
   5578 00D1DC 8A                           	TXA
   5579 00D1DD 99 A3 03                     	STA Decss+3,Y
   5580 00D1E0 68                           	PLA
   5581 00D1E1 C8                           	INY
                                           
   5583 00D1E2                             .0008:
   5584 00D1E2 69 30 00                     	ADC #'0'
   5585 00D1E5 99 A3 03                     	STA Decss+3,Y
   5586 00D1E8 A9 00 00                     	LDA	#$00			; set null terminator
   5587 00D1EB 99 A4 03                     	STA	Decss+4,Y		; save to output string
   5588 00D1EE 60                           	RTS					; go set string pointer (AY) and exit (branch always)
                                           
   5590 00D1EF                             LAB_2A89
   5591 00D1EF 99 A0 03                     	STA	Decss,Y		; save last character to output string
                                           					; set null terminator and exit
   5593 00D1F2                             LAB_2A8C
   5594 00D1F2 A9 00 00                     	LDA	#$00			; set null terminator
   5595 00D1F5 99 A1 03                     	STA	Decss+1,Y		; save after last character
                                           
   5597 00D1F8                             LAB_2A91
                                           ;	LDA	#<Decssp1		; set result string low pointer
                                           ;	LDY	#>Decssp1		; set result string high pointer
   5600 00D1F8 60                           	RTS
                                           
   5602 00D1F9                             LAB_25FB:
   5603 00D1F9 A9 11 00                     	LDA		#FP_SWAP
   5604 00D1FC 20 69 D2                     	JSR		FPCommandWait
   5605 00D1FF A0 00 00                     	LDY		#0
   5606 00D202 BB                           	TYX
   5607 00D203                             .0002:
   5608 00D203 B3 03                        	LDA		(3,S),Y
   5609 00D205 9F 00 A2 FE                  	STA		FAC1,X
   5610 00D209 C8                           	INY
   5611 00D20A C8                           	INY
   5612 00D20B E8                           	INX
   5613 00D20C E8                           	INX
   5614 00D20D E0 0C 00                     	CPX		#12
   5615 00D210 D0 F1                        	BNE		.0002
   5616 00D212 A9 05 00                     	LDA		#FP_FIX2FLT
   5617 00D215 20 69 D2                     	JSR		FPCommandWait
   5618 00D218                             FMUL:
   5619 00D218 A9 03 00                     	LDA		#FP_MUL
   5620 00D21B 4C 69 D2                     	JMP		FPCommandWait
   5621 00D21E                             	
   5622 00D21E DA                           	PHX
   5623 00D21F 5A                           	PHY
   5624 00D220 A0 00 00                     	LDY		#0
   5625 00D223 BB                           	TYX
   5626 00D224                             .0002:
   5627 00D224 B3 07                        	LDA		(7,s),Y
   5628 00D226 9F 10 A2 FE                  	STA		FAC2,X
   5629 00D22A C8                           	INY
   5630 00D22B C8                           	INY
   5631 00D22C E8                           	INX
   5632 00D22D E8                           	INX
   5633 00D22E E0 0C 00                     	CPX		#12
   5634 00D231 D0 F1                        	BNE		.0002
   5635 00D233 7A                           	PLY
   5636 00D234 FA                           	PLX
   5637 00D235 60                           	RTS
   5638 00D236                             	
   5639 00D236 A9 06 00                     	LDA		#FP_FLT2FIX
   5640 00D239 4C 69 D2                     	JMP		FPCommandWait
   5641 00D23C                             	
   5642 00D23C F4 E6 D2                     	PEA		CONST_POINT5
   5643 00D23F 20 1E D2                     	JSR		LOAD_FAC2
   5644 00D242 68                           	PLA
   5645 00D243 A9 01 00                     	LDA		#FP_ADD
   5646 00D246 4C 69 D2                     	JMP		FPCommandWait
   5647 00D249                             	
   5648 00D249 F4 CE D2                     	PEA		TEN_AS_FLOAT
   5649 00D24C 20 1E D2                     	JSR		LOAD_FAC2
   5650 00D24F 68                           	PLA
   5651 00D250 A9 03 00                     	LDA		#FP_MUL
   5652 00D253 4C 69 D2                     	JMP		FPCommandWait
                                           	
   5654 00D256 F4 CE D2                     	PEA		TEN_AS_FLOAT
   5655 00D259 20 1E D2                     	JSR		LOAD_FAC2
   5656 00D25C 68                           	PLA
   5657 00D25D 20 66 D2                     	JSR		SwapFACs
   5658 00D260 A9 04 00                     	LDA		#FP_DIV
   5659 00D263 4C 69 D2                     	JMP		FPCommandWait
   5660 00D266                             	
   5661 00D266 A9 11 00                     	LDA		#FP_SWAP
                                           
                                           ; Issue a command to the FP unit and wait for it to complete
                                           ;
                                           public FPCommandWait:
   5666 00D269 48                           	PHA
   5667 00D26A                             .0001:
   5668 00D26A AF 0E A2 FE                  	LDA		FP_STATREG	; get the status register
   5669 00D26E 89 80 00                     	BIT		#$80		; check for busy bit
   5670 00D271 D0 F7                        	BNE		.0001		; if busy go back
   5671 00D273 68                           	PLA					; to pop acc
   5672 00D274 8F 0E A2 FE                  	STA		FP_CMDREG	; store the command
   5673 00D278 60                           	RTS
                                           
                                           ; Display the FAC1 as a hex number
                                           ;
                                           public DispFAC1:
   5678 00D279 AF 0A A2 FE                  	LDA FAC1_e
   5679 00D27D 20 67 E5                     	JSR DispWord
   5680 00D280 AF 08 A2 FE                  	LDA	FAC1_1
   5681 00D284 20 67 E5                     	JSR	DispWord
   5682 00D287 AF 06 A2 FE                  	LDA FAC1_2
   5683 00D28B 20 67 E5                     	JSR	DispWord
   5684 00D28E AF 04 A2 FE                  	LDA FAC1_3
   5685 00D292 20 67 E5                     	JSR DispWord
   5686 00D295 AF 02 A2 FE                  	LDA FAC1_4
   5687 00D299 20 67 E5                     	JSR DispWord
   5688 00D29C AF 00 A2 FE                  	LDA FAC1_5
   5689 00D2A0 20 67 E5                     	JSR DispWord
   5690 00D2A3 A9 20 00                     	LDA #' '
   5691 00D2A6 20 CC E4                     	JSR OutChar
   5692 00D2A9 60                           	RTS
                                           ;
                                           ; 1,000,000 as a floating point number
                                           ;
   5696 00D2AA                             A_MILLION:	; $F4240
   5697 00D2AA 00 00                        	dw		$0000
   5698 00D2AC 00 00                        	dw		$0000
   5699 00D2AE 00 00                        	dw		$0000
   5700 00D2B0 00 00                        	dW		$0000
   5701 00D2B2 12 7A                        	dw		$7A12
   5702 00D2B4 13 80                        	dw		$8013
                                           
   5704 00D2B6                             CONST_100000:
                                           	;186A0
   5706 00D2B6 00 00                        	dw		$0000
   5707 00D2B8 00 00                        	dw		$0000
   5708 00D2BA 00 00                        	dw		$0000
   5709 00D2BC 00 00                        	dw		$0000
   5710 00D2BE A8 61                        	dw		$61A8
   5711 00D2C0 10 80                        	dw		$8010
                                           ; The constant 999999.4375 as hex
                                           ; 01.11_1010_0001_0001_1111_1011_1000_00000000000000000000000000
   5714 00D2C2                             MAX_BEFORE_SCI:
   5715 00D2C2 00 00                        	dw  $0000
   5716 00D2C4 00 00                        	dw  $0000
   5717 00D2C6 00 00                        	dw	$0000
   5718 00D2C8 80 FB                        	dw	$FB80
   5719 00D2CA 11 7A                        	dw	$7A11
   5720 00D2CC 13 80                        	dw	$8013
                                           
   5722 00D2CE                             TEN_AS_FLOAT:
   5723 00D2CE 00 00                        	dw	$0000
   5724 00D2D0 00 00                        	dw	$0000
   5725 00D2D2 00 00                        	dw	$0000
   5726 00D2D4 00 00                        	dw	$0000
   5727 00D2D6 00 50                        	dw	$5000
   5728 00D2D8 03 80                        	dw	$8003
                                           
                                           ; 99999.9375
                                           ; 01.10_0001_1010_0111_1111_1100_000000000000000000000000000000
                                           ;
   5733 00D2DA                             CONST_9375:
   5734 00D2DA 00 00                        	dw	$0000
   5735 00D2DC 00 00                        	dw	$0000
   5736 00D2DE 00 00                        	dw	$0000
   5737 00D2E0 00 FC                        	dw	$FC00
   5738 00D2E2 A7 61                        	dw	$61A7
   5739 00D2E4 10 80                        	dw	$8010
                                           
                                           ; 0.5
   5742 00D2E6                             CONST_POINT5:
   5743 00D2E6 00 00                        	dw	$0000
   5744 00D2E8 00 00                        	dw	$0000
   5745 00D2EA 00 00                        	dw	$0000
   5746 00D2EC 00 00                        	dw	$0000
   5747 00D2EE 00 40                        	dw	$4000
   5748 00D2F0 FF 7F                        	dw	$7FFF
                                           
                                           ; This table is used in converting numbers to ASCII.
                                           
   5752 00D2F2                             LAB_2A9A
   6019 = 0000D2F3                         LAB_2A9B = LAB_2A9A+1
   6020 = 0000D2F4                         LAB_2A9C = LAB_2A9B+1
                                           ;	.word	$FFFF,$F21F,$494C,$589C,$0000
                                           ;	.word	$0000,$0163,$4578,$5D8A,$0000
                                           ;	.word	$FFFF,$FFDC,$790D,$903F,$0000
                                           ;	.word	$0000,$0003,$8D7E,$A4C6,$8000
                                           ;	.word	$FFFF,$FFFF,$A50C,$EF85,$C000
                                           ;	.word	$0000,$0000,$0918,$4E72,$A000
                                           ;	.word	$FFFF,$FFFF,$FF17,$2B5A,$F000
                                           ;	.word	$0000,$0000,$0017,$4876,$E800
                                           ;	.word	$FFFF,$FFFF,$FFFD,$ABF4,$1C00
                                           ;	.word	$0000,$0000,$0000,$3B9A,$CA00
                                           ;	.word	$FFFF,$FFFF,$FFFF,$FF67,$6980
                                           ;	.word	$0000,$0000,$0000,$05F5,$E100		; 100000000
                                           ;	.word	$0000,$0000,$0098,$9680		; 10000000
                                           ;	.word   $4240,$000F,$0000,$0000,$0000,$804E		; 1000000
   5769 00D2F2 A0 86 01 00 00 00 00 00      	.word	$86A0,$0001,$0000,$0000,$0000,$804E		; 100000
   5769 00D2FA 00 00 4E 80                
   5770 00D2FE 10 27 00 00 00 00 00 00      	.word	$2710,$0000,$0000,$0000,$0000,$804E		; 10000
   5770 00D306 00 00 4E 80                
   5771 00D30A E8 03 00 00 00 00 00 00      	.word	$03E8,$0000,$0000,$0000,$0000,$804E		; 1000
   5771 00D312 00 00 4E 80                
   5772 00D316 64 00 00 00 00 00 00 00      	.word	$0064,$0000,$0000,$0000,$0000,$804E		; 100
   5772 00D31E 00 00 4E 80                
   5773 00D322                             FIXED10:
   5774 00D322 0A 00 00 00 00 00 00 00      	.word	$000A,$0000,$0000,$0000,$0000,$804E		; 10
   5774 00D32A 00 00 4E 80                
   5775 00D32E 01 00 00 00 00 00 00 00      	.word	$0001,$0000,$0000,$0000,$0000,$804E		; 1
   5775 00D336 00 00 4E 80                
                                           
                                           		 MEM	16
                                           		 NDX	16
Finitron FT832 assembler   version 1.4   Mon Nov 09 14:42:19 2015     Page 1
FTBios816.asm


                                           .include "FAC1ToString.asm"
                                           
                                           ;	cpu		W65C816S
                                           	cpu		FT832
   5782 00D33A FF FF FF FF FF FF FF FF      	.org	$E000
   5782 00D342 FF FF FF FF FF FF FF FF    
   5782 00D34A FF FF FF FF FF FF FF FF    
   5782 00D352 FF FF FF FF FF FF FF FF    
   5782 00D35A FF FF FF FF FF FF FF FF    
   5782 00D362 FF FF FF FF FF FF FF FF    
   5782 00D36A FF FF FF FF FF FF FF FF    
   5782 00D372 FF FF FF FF FF FF FF FF    
   5782 00D37A FF FF FF FF FF FF FF FF    
   5782 00D382 FF FF FF FF FF FF FF FF    
   5782 00D38A FF FF FF FF FF FF FF FF    
   5782 00D392 FF FF FF FF FF FF FF FF    
   5782 00D39A FF FF FF FF FF FF FF FF    
   5782 00D3A2 FF FF FF FF FF FF FF FF    
   5782 00D3AA FF FF FF FF FF FF FF FF    
   5782 00D3B2 FF FF FF FF FF FF FF FF    
   5782 00D3BA FF FF FF FF FF FF FF FF    
   5782 00D3C2 FF FF FF FF FF FF FF FF    
   5782 00D3CA FF FF FF FF FF FF FF FF    
   5782 00D3D2 FF FF FF FF FF FF FF FF    
   5782 00D3DA FF FF FF FF FF FF FF FF    
   5782 00D3E2 FF FF FF FF FF FF FF FF    
   5782 00D3EA FF FF FF FF FF FF FF FF    
   5782 00D3F2 FF FF FF FF FF FF FF FF    
   5782 00D3FA FF FF FF FF FF FF FF FF    
   5782 00D402 FF FF FF FF FF FF FF FF    
   5782 00D40A FF FF FF FF FF FF FF FF    
   5782 00D412 FF FF FF FF FF FF FF FF    
   5782 00D41A FF FF FF FF FF FF FF FF    
   5782 00D422 FF FF FF FF FF FF FF FF    
   5782 00D42A FF FF FF FF FF FF FF FF    
   5782 00D432 FF FF FF FF FF FF FF FF    
   5782 00D43A FF FF FF FF FF FF FF FF    
   5782 00D442 FF FF FF FF FF FF FF FF    
   5782 00D44A FF FF FF FF FF FF FF FF    
   5782 00D452 FF FF FF FF FF FF FF FF    
   5782 00D45A FF FF FF FF FF FF FF FF    
   5782 00D462 FF FF FF FF FF FF FF FF    
   5782 00D46A FF FF FF FF FF FF FF FF    
   5782 00D472 FF FF FF FF FF FF FF FF    
   5782 00D47A FF FF FF FF FF FF FF FF    
   5782 00D482 FF FF FF FF FF FF FF FF    
   5782 00D48A FF FF FF FF FF FF FF FF    
   5782 00D492 FF FF FF FF FF FF FF FF    
   5782 00D49A FF FF FF FF FF FF FF FF    
   5782 00D4A2 FF FF FF FF FF FF FF FF    
   5782 00D4AA FF FF FF FF FF FF FF FF    
   5782 00D4B2 FF FF FF FF FF FF FF FF    
   5782 00D4BA FF FF FF FF FF FF FF FF    
   5782 00D4C2 FF FF FF FF FF FF FF FF    
   5782 00D4CA FF FF FF FF FF FF FF FF    
   5782 00D4D2 FF FF FF FF FF FF FF FF    
   5782 00D4DA FF FF FF FF FF FF FF FF    
   5782 00D4E2 FF FF FF FF FF FF FF FF    
   5782 00D4EA FF FF FF FF FF FF FF FF    
   5782 00D4F2 FF FF FF FF FF FF FF FF    
   5782 00D4FA FF FF FF FF FF FF FF FF    
   5782 00D502 FF FF FF FF FF FF FF FF    
   5782 00D50A FF FF FF FF FF FF FF FF    
   5782 00D512 FF FF FF FF FF FF FF FF    
   5782 00D51A FF FF FF FF FF FF FF FF    
   5782 00D522 FF FF FF FF FF FF FF FF    
   5782 00D52A FF FF FF FF FF FF FF FF    
   5782 00D532 FF FF FF FF FF FF FF FF    
   5782 00D53A FF FF FF FF FF FF FF FF    
   5782 00D542 FF FF FF FF FF FF FF FF    
   5782 00D54A FF FF FF FF FF FF FF FF    
   5782 00D552 FF FF FF FF FF FF FF FF    
   5782 00D55A FF FF FF FF FF FF FF FF    
   5782 00D562 FF FF FF FF FF FF FF FF    
   5782 00D56A FF FF FF FF FF FF FF FF    
   5782 00D572 FF FF FF FF FF FF FF FF    
   5782 00D57A FF FF FF FF FF FF FF FF    
   5782 00D582 FF FF FF FF FF FF FF FF    
   5782 00D58A FF FF FF FF FF FF FF FF    
   5782 00D592 FF FF FF FF FF FF FF FF    
   5782 00D59A FF FF FF FF FF FF FF FF    
   5782 00D5A2 FF FF FF FF FF FF FF FF    
   5782 00D5AA FF FF FF FF FF FF FF FF    
   5782 00D5B2 FF FF FF FF FF FF FF FF    
   5782 00D5BA FF FF FF FF FF FF FF FF    
   5782 00D5C2 FF FF FF FF FF FF FF FF    
   5782 00D5CA FF FF FF FF FF FF FF FF    
   5782 00D5D2 FF FF FF FF FF FF FF FF    
   5782 00D5DA FF FF FF FF FF FF FF FF    
   5782 00D5E2 FF FF FF FF FF FF FF FF    
   5782 00D5EA FF FF FF FF FF FF FF FF    
   5782 00D5F2 FF FF FF FF FF FF FF FF    
   5782 00D5FA FF FF FF FF FF FF FF FF    
   5782 00D602 FF FF FF FF FF FF FF FF    
   5782 00D60A FF FF FF FF FF FF FF FF    
   5782 00D612 FF FF FF FF FF FF FF FF    
   5782 00D61A FF FF FF FF FF FF FF FF    
   5782 00D622 FF FF FF FF FF FF FF FF    
   5782 00D62A FF FF FF FF FF FF FF FF    
   5782 00D632 FF FF FF FF FF FF FF FF    
   5782 00D63A FF FF FF FF FF FF FF FF    
   5782 00D642 FF FF FF FF FF FF FF FF    
   5782 00D64A FF FF FF FF FF FF FF FF    
   5782 00D652 FF FF FF FF FF FF FF FF    
   5782 00D65A FF FF FF FF FF FF FF FF    
   5782 00D662 FF FF FF FF FF FF FF FF    
   5782 00D66A FF FF FF FF FF FF FF FF    
   5782 00D672 FF FF FF FF FF FF FF FF    
   5782 00D67A FF FF FF FF FF FF FF FF    
   5782 00D682 FF FF FF FF FF FF FF FF    
   5782 00D68A FF FF FF FF FF FF FF FF    
   5782 00D692 FF FF FF FF FF FF FF FF    
   5782 00D69A FF FF FF FF FF FF FF FF    
   5782 00D6A2 FF FF FF FF FF FF FF FF    
   5782 00D6AA FF FF FF FF FF FF FF FF    
   5782 00D6B2 FF FF FF FF FF FF FF FF    
   5782 00D6BA FF FF FF FF FF FF FF FF    
   5782 00D6C2 FF FF FF FF FF FF FF FF    
   5782 00D6CA FF FF FF FF FF FF FF FF    
   5782 00D6D2 FF FF FF FF FF FF FF FF    
   5782 00D6DA FF FF FF FF FF FF FF FF    
   5782 00D6E2 FF FF FF FF FF FF FF FF    
   5782 00D6EA FF FF FF FF FF FF FF FF    
   5782 00D6F2 FF FF FF FF FF FF FF FF    
   5782 00D6FA FF FF FF FF FF FF FF FF    
   5782 00D702 FF FF FF FF FF FF FF FF    
   5782 00D70A FF FF FF FF FF FF FF FF    
   5782 00D712 FF FF FF FF FF FF FF FF    
   5782 00D71A FF FF FF FF FF FF FF FF    
   5782 00D722 FF FF FF FF FF FF FF FF    
   5782 00D72A FF FF FF FF FF FF FF FF    
   5782 00D732 FF FF FF FF FF FF FF FF    
   5782 00D73A FF FF FF FF FF FF FF FF    
   5782 00D742 FF FF FF FF FF FF FF FF    
   5782 00D74A FF FF FF FF FF FF FF FF    
   5782 00D752 FF FF FF FF FF FF FF FF    
   5782 00D75A FF FF FF FF FF FF FF FF    
   5782 00D762 FF FF FF FF FF FF FF FF    
   5782 00D76A FF FF FF FF FF FF FF FF    
   5782 00D772 FF FF FF FF FF FF FF FF    
   5782 00D77A FF FF FF FF FF FF FF FF    
   5782 00D782 FF FF FF FF FF FF FF FF    
   5782 00D78A FF FF FF FF FF FF FF FF    
   5782 00D792 FF FF FF FF FF FF FF FF    
   5782 00D79A FF FF FF FF FF FF FF FF    
   5782 00D7A2 FF FF FF FF FF FF FF FF    
   5782 00D7AA FF FF FF FF FF FF FF FF    
   5782 00D7B2 FF FF FF FF FF FF FF FF    
   5782 00D7BA FF FF FF FF FF FF FF FF    
   5782 00D7C2 FF FF FF FF FF FF FF FF    
   5782 00D7CA FF FF FF FF FF FF FF FF    
   5782 00D7D2 FF FF FF FF FF FF FF FF    
   5782 00D7DA FF FF FF FF FF FF FF FF    
   5782 00D7E2 FF FF FF FF FF FF FF FF    
   5782 00D7EA FF FF FF FF FF FF FF FF    
   5782 00D7F2 FF FF FF FF FF FF FF FF    
   5782 00D7FA FF FF FF FF FF FF FF FF    
   5782 00D802 FF FF FF FF FF FF FF FF    
   5782 00D80A FF FF FF FF FF FF FF FF    
   5782 00D812 FF FF FF FF FF FF FF FF    
   5782 00D81A FF FF FF FF FF FF FF FF    
   5782 00D822 FF FF FF FF FF FF FF FF    
   5782 00D82A FF FF FF FF FF FF FF FF    
   5782 00D832 FF FF FF FF FF FF FF FF    
   5782 00D83A FF FF FF FF FF FF FF FF    
   5782 00D842 FF FF FF FF FF FF FF FF    
   5782 00D84A FF FF FF FF FF FF FF FF    
   5782 00D852 FF FF FF FF FF FF FF FF    
   5782 00D85A FF FF FF FF FF FF FF FF    
   5782 00D862 FF FF FF FF FF FF FF FF    
   5782 00D86A FF FF FF FF FF FF FF FF    
   5782 00D872 FF FF FF FF FF FF FF FF    
   5782 00D87A FF FF FF FF FF FF FF FF    
   5782 00D882 FF FF FF FF FF FF FF FF    
   5782 00D88A FF FF FF FF FF FF FF FF    
   5782 00D892 FF FF FF FF FF FF FF FF    
   5782 00D89A FF FF FF FF FF FF FF FF    
   5782 00D8A2 FF FF FF FF FF FF FF FF    
   5782 00D8AA FF FF FF FF FF FF FF FF    
   5782 00D8B2 FF FF FF FF FF FF FF FF    
   5782 00D8BA FF FF FF FF FF FF FF FF    
   5782 00D8C2 FF FF FF FF FF FF FF FF    
   5782 00D8CA FF FF FF FF FF FF FF FF    
   5782 00D8D2 FF FF FF FF FF FF FF FF    
   5782 00D8DA FF FF FF FF FF FF FF FF    
   5782 00D8E2 FF FF FF FF FF FF FF FF    
   5782 00D8EA FF FF FF FF FF FF FF FF    
   5782 00D8F2 FF FF FF FF FF FF FF FF    
   5782 00D8FA FF FF FF FF FF FF FF FF    
   5782 00D902 FF FF FF FF FF FF FF FF    
   5782 00D90A FF FF FF FF FF FF FF FF    
   5782 00D912 FF FF FF FF FF FF FF FF    
   5782 00D91A FF FF FF FF FF FF FF FF    
   5782 00D922 FF FF FF FF FF FF FF FF    
   5782 00D92A FF FF FF FF FF FF FF FF    
   5782 00D932 FF FF FF FF FF FF FF FF    
   5782 00D93A FF FF FF FF FF FF FF FF    
   5782 00D942 FF FF FF FF FF FF FF FF    
   5782 00D94A FF FF FF FF FF FF FF FF    
   5782 00D952 FF FF FF FF FF FF FF FF    
   5782 00D95A FF FF FF FF FF FF FF FF    
   5782 00D962 FF FF FF FF FF FF FF FF    
   5782 00D96A FF FF FF FF FF FF FF FF    
   5782 00D972 FF FF FF FF FF FF FF FF    
   5782 00D97A FF FF FF FF FF FF FF FF    
   5782 00D982 FF FF FF FF FF FF FF FF    
   5782 00D98A FF FF FF FF FF FF FF FF    
   5782 00D992 FF FF FF FF FF FF FF FF    
   5782 00D99A FF FF FF FF FF FF FF FF    
   5782 00D9A2 FF FF FF FF FF FF FF FF    
   5782 00D9AA FF FF FF FF FF FF FF FF    
   5782 00D9B2 FF FF FF FF FF FF FF FF    
   5782 00D9BA FF FF FF FF FF FF FF FF    
   5782 00D9C2 FF FF FF FF FF FF FF FF    
   5782 00D9CA FF FF FF FF FF FF FF FF    
   5782 00D9D2 FF FF FF FF FF FF FF FF    
   5782 00D9DA FF FF FF FF FF FF FF FF    
   5782 00D9E2 FF FF FF FF FF FF FF FF    
   5782 00D9EA FF FF FF FF FF FF FF FF    
   5782 00D9F2 FF FF FF FF FF FF FF FF    
   5782 00D9FA FF FF FF FF FF FF FF FF    
   5782 00DA02 FF FF FF FF FF FF FF FF    
   5782 00DA0A FF FF FF FF FF FF FF FF    
   5782 00DA12 FF FF FF FF FF FF FF FF    
   5782 00DA1A FF FF FF FF FF FF FF FF    
   5782 00DA22 FF FF FF FF FF FF FF FF    
   5782 00DA2A FF FF FF FF FF FF FF FF    
   5782 00DA32 FF FF FF FF FF FF FF FF    
   5782 00DA3A FF FF FF FF FF FF FF FF    
   5782 00DA42 FF FF FF FF FF FF FF FF    
   5782 00DA4A FF FF FF FF FF FF FF FF    
   5782 00DA52 FF FF FF FF FF FF FF FF    
   5782 00DA5A FF FF FF FF FF FF FF FF    
   5782 00DA62 FF FF FF FF FF FF FF FF    
   5782 00DA6A FF FF FF FF FF FF FF FF    
   5782 00DA72 FF FF FF FF FF FF FF FF    
   5782 00DA7A FF FF FF FF FF FF FF FF    
   5782 00DA82 FF FF FF FF FF FF FF FF    
   5782 00DA8A FF FF FF FF FF FF FF FF    
   5782 00DA92 FF FF FF FF FF FF FF FF    
   5782 00DA9A FF FF FF FF FF FF FF FF    
   5782 00DAA2 FF FF FF FF FF FF FF FF    
   5782 00DAAA FF FF FF FF FF FF FF FF    
   5782 00DAB2 FF FF FF FF FF FF FF FF    
   5782 00DABA FF FF FF FF FF FF FF FF    
   5782 00DAC2 FF FF FF FF FF FF FF FF    
   5782 00DACA FF FF FF FF FF FF FF FF    
   5782 00DAD2 FF FF FF FF FF FF FF FF    
   5782 00DADA FF FF FF FF FF FF FF FF    
   5782 00DAE2 FF FF FF FF FF FF FF FF    
   5782 00DAEA FF FF FF FF FF FF FF FF    
   5782 00DAF2 FF FF FF FF FF FF FF FF    
   5782 00DAFA FF FF FF FF FF FF FF FF    
   5782 00DB02 FF FF FF FF FF FF FF FF    
   5782 00DB0A FF FF FF FF FF FF FF FF    
   5782 00DB12 FF FF FF FF FF FF FF FF    
   5782 00DB1A FF FF FF FF FF FF FF FF    
   5782 00DB22 FF FF FF FF FF FF FF FF    
   5782 00DB2A FF FF FF FF FF FF FF FF    
   5782 00DB32 FF FF FF FF FF FF FF FF    
   5782 00DB3A FF FF FF FF FF FF FF FF    
   5782 00DB42 FF FF FF FF FF FF FF FF    
   5782 00DB4A FF FF FF FF FF FF FF FF    
   5782 00DB52 FF FF FF FF FF FF FF FF    
   5782 00DB5A FF FF FF FF FF FF FF FF    
   5782 00DB62 FF FF FF FF FF FF FF FF    
   5782 00DB6A FF FF FF FF FF FF FF FF    
   5782 00DB72 FF FF FF FF FF FF FF FF    
   5782 00DB7A FF FF FF FF FF FF FF FF    
   5782 00DB82 FF FF FF FF FF FF FF FF    
   5782 00DB8A FF FF FF FF FF FF FF FF    
   5782 00DB92 FF FF FF FF FF FF FF FF    
   5782 00DB9A FF FF FF FF FF FF FF FF    
   5782 00DBA2 FF FF FF FF FF FF FF FF    
   5782 00DBAA FF FF FF FF FF FF FF FF    
   5782 00DBB2 FF FF FF FF FF FF FF FF    
   5782 00DBBA FF FF FF FF FF FF FF FF    
   5782 00DBC2 FF FF FF FF FF FF FF FF    
   5782 00DBCA FF FF FF FF FF FF FF FF    
   5782 00DBD2 FF FF FF FF FF FF FF FF    
   5782 00DBDA FF FF FF FF FF FF FF FF    
   5782 00DBE2 FF FF FF FF FF FF FF FF    
   5782 00DBEA FF FF FF FF FF FF FF FF    
   5782 00DBF2 FF FF FF FF FF FF FF FF    
   5782 00DBFA FF FF FF FF FF FF FF FF    
   5782 00DC02 FF FF FF FF FF FF FF FF    
   5782 00DC0A FF FF FF FF FF FF FF FF    
   5782 00DC12 FF FF FF FF FF FF FF FF    
   5782 00DC1A FF FF FF FF FF FF FF FF    
   5782 00DC22 FF FF FF FF FF FF FF FF    
   5782 00DC2A FF FF FF FF FF FF FF FF    
   5782 00DC32 FF FF FF FF FF FF FF FF    
   5782 00DC3A FF FF FF FF FF FF FF FF    
   5782 00DC42 FF FF FF FF FF FF FF FF    
   5782 00DC4A FF FF FF FF FF FF FF FF    
   5782 00DC52 FF FF FF FF FF FF FF FF    
   5782 00DC5A FF FF FF FF FF FF FF FF    
   5782 00DC62 FF FF FF FF FF FF FF FF    
   5782 00DC6A FF FF FF FF FF FF FF FF    
   5782 00DC72 FF FF FF FF FF FF FF FF    
   5782 00DC7A FF FF FF FF FF FF FF FF    
   5782 00DC82 FF FF FF FF FF FF FF FF    
   5782 00DC8A FF FF FF FF FF FF FF FF    
   5782 00DC92 FF FF FF FF FF FF FF FF    
   5782 00DC9A FF FF FF FF FF FF FF FF    
   5782 00DCA2 FF FF FF FF FF FF FF FF    
   5782 00DCAA FF FF FF FF FF FF FF FF    
   5782 00DCB2 FF FF FF FF FF FF FF FF    
   5782 00DCBA FF FF FF FF FF FF FF FF    
   5782 00DCC2 FF FF FF FF FF FF FF FF    
   5782 00DCCA FF FF FF FF FF FF FF FF    
   5782 00DCD2 FF FF FF FF FF FF FF FF    
   5782 00DCDA FF FF FF FF FF FF FF FF    
   5782 00DCE2 FF FF FF FF FF FF FF FF    
   5782 00DCEA FF FF FF FF FF FF FF FF    
   5782 00DCF2 FF FF FF FF FF FF FF FF    
   5782 00DCFA FF FF FF FF FF FF FF FF    
   5782 00DD02 FF FF FF FF FF FF FF FF    
   5782 00DD0A FF FF FF FF FF FF FF FF    
   5782 00DD12 FF FF FF FF FF FF FF FF    
   5782 00DD1A FF FF FF FF FF FF FF FF    
   5782 00DD22 FF FF FF FF FF FF FF FF    
   5782 00DD2A FF FF FF FF FF FF FF FF    
   5782 00DD32 FF FF FF FF FF FF FF FF    
   5782 00DD3A FF FF FF FF FF FF FF FF    
   5782 00DD42 FF FF FF FF FF FF FF FF    
   5782 00DD4A FF FF FF FF FF FF FF FF    
   5782 00DD52 FF FF FF FF FF FF FF FF    
   5782 00DD5A FF FF FF FF FF FF FF FF    
   5782 00DD62 FF FF FF FF FF FF FF FF    
   5782 00DD6A FF FF FF FF FF FF FF FF    
   5782 00DD72 FF FF FF FF FF FF FF FF    
   5782 00DD7A FF FF FF FF FF FF FF FF    
   5782 00DD82 FF FF FF FF FF FF FF FF    
   5782 00DD8A FF FF FF FF FF FF FF FF    
   5782 00DD92 FF FF FF FF FF FF FF FF    
   5782 00DD9A FF FF FF FF FF FF FF FF    
   5782 00DDA2 FF FF FF FF FF FF FF FF    
   5782 00DDAA FF FF FF FF FF FF FF FF    
   5782 00DDB2 FF FF FF FF FF FF FF FF    
   5782 00DDBA FF FF FF FF FF FF FF FF    
   5782 00DDC2 FF FF FF FF FF FF FF FF    
   5782 00DDCA FF FF FF FF FF FF FF FF    
   5782 00DDD2 FF FF FF FF FF FF FF FF    
   5782 00DDDA FF FF FF FF FF FF FF FF    
   5782 00DDE2 FF FF FF FF FF FF FF FF    
   5782 00DDEA FF FF FF FF FF FF FF FF    
   5782 00DDF2 FF FF FF FF FF FF FF FF    
   5782 00DDFA FF FF FF FF FF FF FF FF    
   5782 00DE02 FF FF FF FF FF FF FF FF    
   5782 00DE0A FF FF FF FF FF FF FF FF    
   5782 00DE12 FF FF FF FF FF FF FF FF    
   5782 00DE1A FF FF FF FF FF FF FF FF    
   5782 00DE22 FF FF FF FF FF FF FF FF    
   5782 00DE2A FF FF FF FF FF FF FF FF    
   5782 00DE32 FF FF FF FF FF FF FF FF    
   5782 00DE3A FF FF FF FF FF FF FF FF    
   5782 00DE42 FF FF FF FF FF FF FF FF    
   5782 00DE4A FF FF FF FF FF FF FF FF    
   5782 00DE52 FF FF FF FF FF FF FF FF    
   5782 00DE5A FF FF FF FF FF FF FF FF    
   5782 00DE62 FF FF FF FF FF FF FF FF    
   5782 00DE6A FF FF FF FF FF FF FF FF    
   5782 00DE72 FF FF FF FF FF FF FF FF    
   5782 00DE7A FF FF FF FF FF FF FF FF    
   5782 00DE82 FF FF FF FF FF FF FF FF    
   5782 00DE8A FF FF FF FF FF FF FF FF    
   5782 00DE92 FF FF FF FF FF FF FF FF    
   5782 00DE9A FF FF FF FF FF FF FF FF    
   5782 00DEA2 FF FF FF FF FF FF FF FF    
   5782 00DEAA FF FF FF FF FF FF FF FF    
   5782 00DEB2 FF FF FF FF FF FF FF FF    
   5782 00DEBA FF FF FF FF FF FF FF FF    
   5782 00DEC2 FF FF FF FF FF FF FF FF    
   5782 00DECA FF FF FF FF FF FF FF FF    
   5782 00DED2 FF FF FF FF FF FF FF FF    
   5782 00DEDA FF FF FF FF FF FF FF FF    
   5782 00DEE2 FF FF FF FF FF FF FF FF    
   5782 00DEEA FF FF FF FF FF FF FF FF    
   5782 00DEF2 FF FF FF FF FF FF FF FF    
   5782 00DEFA FF FF FF FF FF FF FF FF    
   5782 00DF02 FF FF FF FF FF FF FF FF    
   5782 00DF0A FF FF FF FF FF FF FF FF    
   5782 00DF12 FF FF FF FF FF FF FF FF    
   5782 00DF1A FF FF FF FF FF FF FF FF    
   5782 00DF22 FF FF FF FF FF FF FF FF    
   5782 00DF2A FF FF FF FF FF FF FF FF    
   5782 00DF32 FF FF FF FF FF FF FF FF    
   5782 00DF3A FF FF FF FF FF FF FF FF    
   5782 00DF42 FF FF FF FF FF FF FF FF    
   5782 00DF4A FF FF FF FF FF FF FF FF    
   5782 00DF52 FF FF FF FF FF FF FF FF    
   5782 00DF5A FF FF FF FF FF FF FF FF    
   5782 00DF62 FF FF FF FF FF FF FF FF    
   5782 00DF6A FF FF FF FF FF FF FF FF    
   5782 00DF72 FF FF FF FF FF FF FF FF    
   5782 00DF7A FF FF FF FF FF FF FF FF    
   5782 00DF82 FF FF FF FF FF FF FF FF    
   5782 00DF8A FF FF FF FF FF FF FF FF    
   5782 00DF92 FF FF FF FF FF FF FF FF    
   5782 00DF9A FF FF FF FF FF FF FF FF    
   5782 00DFA2 FF FF FF FF FF FF FF FF    
   5782 00DFAA FF FF FF FF FF FF FF FF    
   5782 00DFB2 FF FF FF FF FF FF FF FF    
   5782 00DFBA FF FF FF FF FF FF FF FF    
   5782 00DFC2 FF FF FF FF FF FF FF FF    
   5782 00DFCA FF FF FF FF FF FF FF FF    
   5782 00DFD2 FF FF FF FF FF FF FF FF    
   5782 00DFDA FF FF FF FF FF FF FF FF    
   5782 00DFE2 FF FF FF FF FF FF FF FF    
   5782 00DFEA FF FF FF FF FF FF FF FF    
   5782 00DFF2 FF FF FF FF FF FF FF FF    
   5782 00DFFA FF FF FF FF FF FF          
                                           
   5784 00E000                             start:
   5785 00E000 78                           	SEI
   5786 00E001 D8                           	CLD
   5787 00E002 18                           	CLC					; switch to '816 mode
   5788 00E003 2C 00 E0                     	BIT		start		; set overflow bit
   5789 00E006 FB                           	XCE
   5790 00E007 C2 30                        	REP		#$30		; set 16 bit regs & mem
                                           	NDX 	16
                                           	MEM		16
   5793 00E009 A9 FF 3F                     	LDA		#$3FFF		; set top of stack
   5794 00E00C 1B                           	TAS
   5795 00E00D A9 70 00                     	LDA		#$0070		; program chip selects for I/O
   5796 00E010 8D 00 F0                     	STA		$F000		; at $007000
   5797 00E013 A9 71 00                     	LDA		#$0071
   5798 00E016 8D 02 F0                     	STA		$F002
                                           ;	LDA		#$FEA1		; select $FEA1xx I/O
                                           ;	STA		$F006
   5801 00E019 A9 00 00                     	LDA		#$0000		; select zero page ram
   5802 00E01C 8D 0A F0                     	STA		$F00A
                                           
                                           	; Setup the counters
   5805 00E01F E2 30                        	SEP		#$30		; set 8 bit regs
                                           	NDX		8			; tell the assembler
                                           	MEM		8
                                           	; Counter #0 is setup as a free running tick count
   5809 00E021 A9 FF                        	LDA		#$FF		; set limit to $FFFFFF
   5810 00E023 8D 10 F0                     	STA		$F010
   5811 00E026 8D 11 F0                     	STA		$F011
   5812 00E029 8D 12 F0                     	STA		$F012
   5813 00E02C A9 14                        	LDA		#$14		; count up, on mpu clock
   5814 00E02E 8D 13 F0                     	STA		$F013
                                           	; Counter #1 is set to interrupt at a 100Hz rate
   5816 00E031 A9 94                        	LDA		#$94		; divide by 95794 (for 100Hz)
   5817 00E033 8D 14 F0                     	STA		$F014
   5818 00E036 A9 57                        	LDA		#$57
   5819 00E038 8D 15 F0                     	STA		$F015
   5820 00E03B A9 09                        	LDA		#$09
   5821 00E03D 8D 16 F0                     	STA		$F016
   5822 00E040 A9 05                        	LDA		#$05		; count down, on mpu clock, irq disenabled
   5823 00E042 8D 17 F0                     	STA		$F017
                                           	; Counter #2 isn't setup
                                           
   5826 00E045 C2 30                        	REP		#$30		; set 16 bit regs & mem
                                           	NDX 	16
                                           	MEM		16
                                           
   5830 00E047 A9 A0 EB                     	LDA		#BrkRout1
   5831 00E04A 8D 02 01                     	STA		$0102
                                           
                                           ;	CLI
                                           
   5835 00E04D 64 04                        	stz		TickCount
   5836 00E04F                             .0001:
   5837 00E04F A9 F0 E2                     	LDA		#DisplayChar
   5838 00E052 8D F0 03                     	STA		OutputVec
   5839 00E055 AD F0 03                     	LDA		OutputVec
   5840 00E058 C9 F0 E2                     	CMP		#DisplayChar
   5841 00E05B D0 F2                        	BNE		.0001
   5842 00E05D A9 01 00                     	LDA		#$01
   5843 00E060 8D 00 70                     	STA		$7000
   5844 00E063 A9 00 BF                     	LDA		#$BF00
   5845 00E066 85 36                        	STA		NormAttr
   5846 00E068 20 20 E5                     	JSR		ClearScreen
   5847 00E06B 20 AB E4                     	JSR		HomeCursor
   5848 00E06E A9 02 00                     	LDA		#$02
   5849 00E071 8D 00 70                     	STA		$7000
   5850 00E074 F4 AF E2                     	PEA		msgStarting
   5851 00E077 20 D7 E4                     	JSR		DisplayString
   5852 00E07A A9 00 00                     	LDA		#0
   5853 00E07D 8F 00 A2 FE                  	STA		FAC1
   5854 00E081 8F 02 A2 FE                  	STA		FAC1+2
   5855 00E085 8F 04 A2 FE                  	STA		FAC1+4
   5856 00E089 8F 06 A2 FE                  	STA		FAC1+6
   5857 00E08D 8F 08 A2 FE                  	STA		FAC1+8
   5858 00E091 8F 0A A2 FE                  	STA		FAC1+10
   5859 00E095 A9 D2 04                     	LDA		#1234
   5860 00E098 8F 00 A2 FE                  	STA		FAC1
   5861 00E09C A9 05 00                     	LDA		#5			; FIX2FLT
   5862 00E09F 20 69 D2                     	JSR 	FPCommandWait
   5863 00E0A2 20 56 D2                     	JSR		DivideByTen
   5864 00E0A5 20 30 D0                     	JSR		FAC1ToString
   5865 00E0A8 F4 A0 03                     	PEA		$3A0
   5866 00E0AB 20 D7 E4                     	JSR		DisplayString
   5867 00E0AE A9 20 00                     	LDA		#' '
   5868 00E0B1 20 CC E4                     	JSR		OutChar
   5869 00E0B4 20 79 D2                     	JSR		DispFAC1
   5870 00E0B7 20 32 E6                     	JSR		KeybdInit
   5871 00E0BA                             Mon1:
   5872 00E0BA                             .mon1:
   5873 00E0BA 20 C3 E4                     	JSR		OutCRLF
   5874 00E0BD A9 24 00                     	LDA		#'$'
   5875 00E0C0                             .mon3:
   5876 00E0C0 20 CC E4                     	JSR		OutChar
   5877 00E0C3 20 1C E7                     	JSR		KeybdGetCharWait
   5878 00E0C6 29 FF 00                     	AND		#$FF
                                           ;	CMP		#'.'
                                           ;	BEQ		.mon3
   5881 00E0C9 C9 0D 00                     	CMP		#CR
   5882 00E0CC D0 F2                        	BNE		.mon3
   5883 00E0CE A5 32                        	LDA		CursorY
   5884 00E0D0 0A                           	ASL
   5885 00E0D1 AA                           	TAX
   5886 00E0D2 BD C9 EB                     	LDA		LineTbl,X
   5887 00E0D5 0A                           	ASL
   5888 00E0D6 AA                           	TAX
   5889 00E0D7                             .mon4:
   5890 00E0D7 20 53 E2                     	JSR		IgnoreBlanks
   5891 00E0DA 20 1E E1                     	JSR		MonGetch
   5892 00E0DD C9 24 00                     	CMP		#'$'
   5893 00E0E0 F0 F5                        	BEQ		.mon4
   5894 00E0E2 C9 53 00                     	CMP		#'S'
   5895 00E0E5 D0 03                        	BNE		.mon2
   5896 00E0E7 4C 00 C0                     	JMP		$C000		; invoke Supermon816
   5897 00E0EA                             .mon2:
   5898 00E0EA C9 43 00                     	CMP		#'C'
   5899 00E0ED D0 08                        	BNE		.mon5
   5900 00E0EF 20 20 E5                     	JSR		ClearScreen
   5901 00E0F2 20 AB E4                     	JSR		HomeCursor
   5902 00E0F5 80 C3                        	BRA		.mon1
   5903 00E0F7                             .mon5:
   5904 00E0F7 C9 4D 00                     	CMP		#'M'
   5905 00E0FA F0 FF 2D 00                  	LBEQ	doMemoryDump
   5906 00E0FE C9 44 00                     	CMP		#'D'
   5907 00E101 F0 FF CE 00                  	LBEQ	doDisassemble
   5908 00E105 C9 3E 00                     	CMP		#'>'
   5909 00E108 F0 FF 8D 00                  	LBEQ	doMemoryEdit
   5910 00E10C C9 4A 00                     	CMP		#'J'
   5911 00E10F F0 FF 10 01                  	LBEQ	doJump
   5912 00E113 80 A5                        	BRA		Mon1
                                           
                                           ; Get a character from the screen, skipping over spaces and tabs
                                           ;
   5916 00E115                             MonGetNonSpace:
   5917 00E115                             .0001:
   5918 00E115 20 1E E1                     	JSR		MonGetch
   5919 00E118 C9 20 00                     	CMP		#' '
   5920 00E11B F0 F8                        	BEQ		.0001
   5921 00E11D 60                           	RTS
                                           
                                           ; Get a character from the screen.
                                           ;
   5925 00E11E                             MonGetch:
   5926 00E11E BF 00 00 FD                  	LDA		VIDBUF,X
   5927 00E122 E8                           	INX
   5928 00E123 E8                           	INX
   5929 00E124 29 FF 00                     	AND		#$FF
   5930 00E127 20 E4 E2                     	JSR		ScreenToAscii
   5931 00E12A 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Dump memory.
                                           ;------------------------------------------------------------------------------
                                           
   5937 00E12B                             doMemoryDump:
   5938 00E12B 20 53 E2                     	JSR		IgnoreBlanks
   5939 00E12E 20 8E E5                     	JSR		GetRange
   5940 00E131 20 C3 E4                     	JSR		OutCRLF
   5941 00E134                             .0007:
   5942 00E134 A9 3E 00                     	LDA		#'>'
   5943 00E137 20 CC E4                     	JSR		OutChar
   5944 00E13A 20 43 E2                     	JSR		DispRangeStart
   5945 00E13D A0 00 00                     	LDY		#0
   5946 00E140                             .0001:
   5947 00E140 B7 20                        	LDA		[RangeStart],Y
   5948 00E142 20 6C E5                     	JSR		DispByte
   5949 00E145 A9 20 00                     	LDA		#' '
   5950 00E148 20 CC E4                     	JSR		OutChar
   5951 00E14B C8                           	INY
   5952 00E14C C0 08 00                     	CPY		#8
   5953 00E14F D0 EF                        	BNE		.0001
   5954 00E151 A0 00 00                     	LDY 	#0
   5955 00E154                             .0005:
   5956 00E154 B7 20                        	LDA		[RangeStart],Y
   5957 00E156 C9 00 00                     	CMP		#$' '
   5958 00E159 B0 05                        	BCS		.0002
   5959 00E15B                             .0004:
   5960 00E15B A9 2E 00                     	LDA		#'.'
   5961 00E15E 80 05                        	BRA		.0003
   5962 00E160                             .0002:
   5963 00E160 C9 7F 00                     	CMP		#$7f
   5964 00E163 90 F6                        	BCC		.0004
   5965 00E165                             .0003:
   5966 00E165 20 CC E4                     	JSR		OutChar
   5967 00E168 C8                           	INY
   5968 00E169 C0 08 00                     	CPY		#8
   5969 00E16C D0 E6                        	BNE		.0005
   5970 00E16E 20 C3 E4                     	JSR		OutCRLF
   5971 00E171 18                           	CLC
   5972 00E172 A5 20                        	LDA		RangeStart
   5973 00E174 69 08 00                     	ADC		#8
   5974 00E177 85 20                        	STA		RangeStart
   5975 00E179 90 02                        	BCC		.0006
   5976 00E17B E6 22                        	INC		RangeStart+2
   5977 00E17D                             .0006:
   5978 00E17D 38                           	SEC
   5979 00E17E A5 24                        	LDA		RangeEnd
   5980 00E180 E5 20                        	SBC		RangeStart
   5981 00E182 A5 26                        	LDA		RangeEnd+2
   5982 00E184 E5 22                        	SBC		RangeStart+2
   5983 00E186 08                           	PHP
   5984 00E187 20 14 E7                     	JSR		KeybdGetCharNoWait
   5985 00E18A C9 03 00                     	CMP		#CTRLC
   5986 00E18D F0 06                        	BEQ		.0009
   5987 00E18F 28                           	PLP
   5988 00E190 10 A2                        	BPL		.0007
   5989 00E192                             .0008:
   5990 00E192 4C BA E0                     	JMP		Mon1
   5991 00E195                             .0009:
   5992 00E195 28                           	PLP
   5993 00E196 4C BA E0                     	JMP		Mon1
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Edit memory.
                                           ;------------------------------------------------------------------------------
                                           
   5999 00E199                             doMemoryEdit:
   6000 00E199 20 53 E2                     	JSR		IgnoreBlanks
   6001 00E19C 20 B9 E5                     	JSR		GetHexNumber
   6002 00E19F C0 00 00                     	CPY		#0
   6003 00E1A2 F0 FF 14 FF                  	LBEQ	Mon1
   6004 00E1A6 A5 0C                        	LDA		NumWorkArea
   6005 00E1A8 85 20                        	STA		RangeStart
   6006 00E1AA A5 0D                        	LDA		NumWorkArea+1
   6007 00E1AC 85 21                        	STA		RangeStart+1
   6008 00E1AE A0 00 00                     	LDY		#0
   6009 00E1B1                             .0001:
   6010 00E1B1 5A                           	PHY
   6011 00E1B2 20 53 E2                     	JSR		IgnoreBlanks
   6012 00E1B5 20 B9 E5                     	JSR		GetHexNumber
   6013 00E1B8 C0 00 00                     	CPY		#0
   6014 00E1BB F0 12                        	BEQ		.0002
   6015 00E1BD 7A                           	PLY
   6016 00E1BE E2 20                        	SEP		#$20
   6017 00E1C0 A5 0C                        	LDA		NumWorkArea
   6018 00E1C2 97 20                        	STA		[RangeStart],Y
   6019 00E1C4 C2 20                        	REP		#$20
   6020 00E1C6 C8                           	INY
   6021 00E1C7 C0 08 00                     	CPY		#8
   6022 00E1CA D0 E5                        	BNE		.0001
   6023 00E1CC 82 EB FE                     	BRL		Mon1
   6024 00E1CF                             .0002:
   6025 00E1CF 7A                           	PLY
   6026 00E1D0 82 E7 FE                     	BRL		Mon1
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Disassemble code
                                           ;------------------------------------------------------------------------------
                                           
   6032 00E1D3                             doDisassemble:
   6033 00E1D3 20 1E E1                     	JSR		MonGetch
   6034 00E1D6 C9 4D 00                     	CMP		#'M'
   6035 00E1D9 F0 11                        	BEQ		.0002
   6036 00E1DB                             .0004:
   6037 00E1DB C9 4E 00                     	CMP		#'N'
   6038 00E1DE D0 1B                        	BNE		.0003
   6039 00E1E0 E2 20                        	SEP		#$20
                                           	MEM		8
   6041 00E1E2 A5 BC                        	LDA		$BC
   6042 00E1E4 09 40                        	ORA		#$40
   6043 00E1E6 85 BC                        	STA		$BC
   6044 00E1E8 C2 20                        	REP		#$20
   6045 00E1EA 80 11                        	BRA		.0005
   6046 00E1EC                             .0002:
   6047 00E1EC E2 20                        	SEP		#$20
   6048 00E1EE A5 BC                        	LDA		$BC
   6049 00E1F0 09 80                        	ORA		#$80
   6050 00E1F2 85 BC                        	STA		$BC
   6051 00E1F4 C2 20                        	REP		#$20
   6052 00E1F6 20 1E E1                     	JSR		MonGetch
   6053 00E1F9 80 E0                        	BRA		.0004
                                           	MEM		16
   6055 00E1FB                             .0003:
   6056 00E1FB CA                           	DEX
   6057 00E1FC CA                           	DEX
   6058 00E1FD                             .0005:
   6059 00E1FD 20 53 E2                     	JSR		IgnoreBlanks
   6060 00E200 20 8E E5                     	JSR		GetRange
   6061 00E203 A5 20                        	LDA		RangeStart
   6062 00E205 85 8F                        	STA		$8F				; addra
   6063 00E207 A5 21                        	LDA		RangeStart+1
   6064 00E209 85 90                        	STA		$90
   6065 00E20B 20 C3 E4                     	JSR		OutCRLF
   6066 00E20E A0 14 00                     	LDY		#20
   6067 00E211                             .0001:
   6068 00E211 5A                           	PHY
   6069 00E212 E2 30                        	SEP		#$30
   6070 00E214 20 0B C6                     	JSR		dpycod
   6071 00E217 C2 30                        	REP		#$30
   6072 00E219 20 C3 E4                     	JSR		OutCRLF
   6073 00E21C 7A                           	PLY
   6074 00E21D 88                           	DEY
   6075 00E21E D0 F1                        	BNE		.0001
   6076 00E220 4C BA E0                     	JMP		Mon1
                                           
                                           ;$BC flimflag
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Jump to subroutine
                                           ;------------------------------------------------------------------------------
                                           
   6084 00E223                             doJump:
   6085 00E223 20 53 E2                     	JSR		IgnoreBlanks
   6086 00E226 20 B9 E5                     	JSR		GetHexNumber
   6087 00E229 C0 00 00                     	CPY		#0
   6088 00E22C F0 FF 8A FE                  	LBEQ	Mon1
   6089 00E230 A9 5C 00                     	LDA		#$5C			; JML opcode
   6090 00E233 85 23                        	STA		RangeEnd-1
   6091 00E235 A5 0C                        	LDA		NumWorkArea
   6092 00E237 85 24                        	STA		RangeEnd
   6093 00E239 A5 0D                        	LDA		NumWorkArea+1
   6094 00E23B 85 25                        	STA		RangeEnd+1
   6095 00E23D 22 24 00                     	JSL		RangeEnd
   6096 00E240 82 77 FE                     	BRL		Mon1
                                           
   6098 00E243                             DispRangeStart:
   6099 00E243 A5 21                        	LDA		RangeStart+1
   6100 00E245 20 67 E5                     	JSR		DispWord
   6101 00E248 A5 20                        	LDA		RangeStart
   6102 00E24A 20 6C E5                     	JSR		DispByte
   6103 00E24D A9 20 00                     	LDA		#' '
   6104 00E250 4C CC E4                     	JMP		OutChar
                                           	
                                           ; Skip over blanks in the input
                                           ;------------------------------------------------------------------------------
                                           
   6109 00E253                             IgnoreBlanks:
   6110 00E253                             .0001:
   6111 00E253 20 1E E1                     	JSR		MonGetch
   6112 00E256 C9 20 00                     	CMP		#' '
   6113 00E259 F0 F8                        	BEQ		.0001
   6114 00E25B CA                           	DEX
   6115 00E25C CA                           	DEX
   6116 00E25D 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ; BIOSInput allows full screen editing of text until a carriage return is keyed
                                           ; at which point the line the cursor is on is copied to a buffer. The buffer
                                           ; must be at least TEXTCOLS characters in size.
                                           ;------------------------------------------------------------------------------
                                           ;
   6124 00E25E                             BIOSInput:
   6125 00E25E                             .bin1:
   6126 00E25E 20 1C E7                     	JSR		KeybdGetCharWait
   6127 00E261 29 FF 00                     	AND		#$FF
   6128 00E264 C9 0D 00                     	CMP		#CR
   6129 00E267 F0 05                        	BEQ		.bin2
   6130 00E269 20 CC E4                     	JSR		OutChar
   6131 00E26C 80 F0                        	BRA		.bin1
   6132 00E26E                             .bin2:
   6133 00E26E A5 30                        	LDA		CursorX
   6134 00E270 F0 1A                        	BEQ		.bin4
   6135 00E272 A5 34                        	LDA		VideoPos	; get current video position
   6136 00E274 38                           	SEC
   6137 00E275 E5 30                        	SBC		CursorX		; go back to the start of the line
   6138 00E277 0A                           	ASL
   6139 00E278 AA                           	TAX
   6140 00E279                             .bin3:
   6141 00E279 BF 00 00 FD                  	LDA		VIDBUF,X
   6142 00E27D 29 FF 00                     	AND		#$FF
   6143 00E280 93 03                        	STA		(3,s),Y
   6144 00E282 E8                           	INX
   6145 00E283 E8                           	INX
   6146 00E284 C8                           	INY
   6147 00E285 C6 30                        	DEC		CursorX
   6148 00E287 D0 F0                        	BNE		.bin3
   6149 00E289 A9 00 00                     	LDA		#0
   6150 00E28C                             .bin4:
   6151 00E28C 93 03                        	STA		(3,s),Y	; NULL terminate buffer
   6152 00E28E 60                           	RTS
                                           
   6154 00E28F                             .st0003:
   6155 00E28F AF 10 A1 FE                  	LDA		KEYBD
   6156 00E293 10 FA                        	BPL		.st0003
   6157 00E295 48                           	PHA					; save off the char (we need to trash acc)
   6158 00E296 AF 14 A1 FE                  	LDA		KEYBD+4		; clear keyboard strobe (must be a read operation)
   6159 00E29A 68                           	PLA					; restore char
   6160 00E29B 20 F0 E2                     	JSR		DisplayChar
   6161 00E29E 80 EF                        	BRA		.st0003
   6162 00E2A0 A0 00 00                     	ldy		#$0000
   6163 00E2A3                             .st0001:
   6164 00E2A3 A2 00 00                     	ldx		#$0000
   6165 00E2A6                             .st0002:
   6166 00E2A6 E8                           	inx
   6167 00E2A7 D0 FD                        	bne		.st0002
   6168 00E2A9 20 CC E2                     	jsr		echo_switch
   6169 00E2AC C8                           	iny
   6170 00E2AD 80 F4                        	bra		.st0001
                                           
   6172 00E2AF                             msgStarting:
   6173 00E2AF 46 54 38 33 32 20 54 65      	.byte	"FT832 Test System Starting",CR,LF,0
   6173 00E2B7 73 74 20 53 79 73 74 65    
   6173 00E2BF 6D 20 53 74 61 72 74 69    
   6173 00E2C7 6E 67 0D 0A 00             
                                           
   6175 00E2CC                             echo_switch:
   6176 00E2CC AD 00 71                     	lda		$7100
   6177 00E2CF 8D 00 70                     	sta		$7000
   6178 00E2D2 60                           	rts
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Convert Ascii character to screen character.
                                           ;------------------------------------------------------------------------------
                                           
   6184 00E2D3                             AsciiToScreen:
   6185 00E2D3 29 FF 00                     	AND		#$FF
   6186 00E2D6 89 20 00                     	BIT		#%00100000	; if bit 5 isn't set
   6187 00E2D9 F0 08                        	BEQ		.00001
   6188 00E2DB 89 40 00                     	BIT		#%01000000	; or bit 6 isn't set
   6189 00E2DE F0 03                        	BEQ		.00001
   6190 00E2E0 29 9F 00                     	AND		#%10011111
   6191 00E2E3                             .00001:
   6192 00E2E3 60                           	rts
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Convert screen character to ascii character
                                           ;------------------------------------------------------------------------------
                                           ;
   6198 00E2E4                             ScreenToAscii:
   6199 00E2E4 29 FF 00                     	AND		#$FF
   6200 00E2E7 C9 1B 00                     	CMP		#26+1
   6201 00E2EA B0 03                        	BCS		.0001
   6202 00E2EC 69 60 00                     	ADC		#$60
   6203 00E2EF                             .0001:
   6204 00E2EF 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Display a character on the screen device
                                           ;------------------------------------------------------------------------------
                                           ;
   6210 00E2F0                             DisplayChar:
   6211 00E2F0 29 FF 00                     	AND		#$0FF
   6212 00E2F3 24 3C                        	BIT		EscState
   6213 00E2F5 30 FF 8A 00                  	LBMI	processEsc
   6214 00E2F9 C9 08 00                     	CMP		#BS
   6215 00E2FC F0 FF 33 01                  	LBEQ	doBackSpace
   6216 00E300 C9 91 00                     	CMP		#$91			; cursor right
   6217 00E303 F0 FF 7D 01                  	LBEQ	doCursorRight
   6218 00E307 C9 93 00                     	CMP		#$93			; cursor left
   6219 00E30A F0 FF 82 01                  	LBEQ	doCursorLeft
   6220 00E30E C9 90 00                     	CMP		#$90			; cursor up
   6221 00E311 F0 FF 82 01                  	LBEQ	doCursorUp
   6222 00E315 C9 92 00                     	CMP		#$92			; cursor down
   6223 00E318 F0 FF 82 01                  	LBEQ	doCursorDown
   6224 00E31C C9 99 00                     	CMP		#$99			; delete
   6225 00E31F F0 FF 37 01                  	LBEQ	doDelete
   6226 00E323 C9 0D 00                     	CMP		#CR
   6227 00E326 F0 47                        	BEQ		doCR
   6228 00E328 C9 0A 00                     	CMP		#LF
   6229 00E32B F0 47                        	BEQ		doLF
   6230 00E32D C9 94 00                     	CMP		#$94
   6231 00E330 F0 FF 48 01                  	LBEQ	doCursorHome	; cursor home
   6232 00E334 C9 1B 00                     	CMP		#ESC
   6233 00E337 D0 05                        	BNE		.0003
   6234 00E339 64 3C                        	STZ		EscState		; put a -1 in the escape state
   6235 00E33B C6 3C                        	DEC		EscState
   6236 00E33D 60                           	RTS
   6237 00E33E                             .0003:
   6238 00E33E 20 D3 E2                     	JSR		AsciiToScreen
   6239 00E341 05 36                        	ORA		NormAttr
   6240 00E343 48                           	PHA
   6241 00E344 A5 34                        	LDA		VideoPos
   6242 00E346 0A                           	ASL
   6243 00E347 AA                           	TAX
   6244 00E348 68                           	PLA
   6245 00E349 9F 00 00 FD                  	STA		VIDBUF,X
   6246 00E34D A5 30                        	LDA		CursorX
   6247 00E34F 1A                           	INA
   6248 00E350 C9 54 00                     	CMP		#TEXTCOLS
   6249 00E353 D0 15                        	BNE		.0001
   6250 00E355 64 30                        	STZ		CursorX
   6251 00E357 A5 32                        	LDA		CursorY
   6252 00E359 C9 1E 00                     	CMP		#TEXTROWS-1
   6253 00E35C F0 06                        	BEQ		.0002
   6254 00E35E 1A                           	INA
   6255 00E35F 85 32                        	STA		CursorY
   6256 00E361 82 4E 01                     	BRL		SyncVideoPos
   6257 00E364                             .0002:
   6258 00E364 20 B2 E4                     	JSR		SyncVideoPos
   6259 00E367 82 CE 01                     	BRL		ScrollUp
   6260 00E36A                             .0001:
   6261 00E36A 85 30                        	STA		CursorX
   6262 00E36C 82 43 01                     	BRL		SyncVideoPos
   6263 00E36F                             doCR:
   6264 00E36F 64 30                        	STZ		CursorX
   6265 00E371 82 3E 01                     	BRL		SyncVideoPos
   6266 00E374                             doLF:
   6267 00E374 A5 32                        	LDA		CursorY
   6268 00E376 C9 1E 00                     	CMP		#TEXTROWS-1
   6269 00E379 F0 FF BB 01                  	LBEQ	ScrollUp
   6270 00E37D 1A                           	INA
   6271 00E37E 85 32                        	STA		CursorY
   6272 00E380 82 2F 01                     	BRL		SyncVideoPos
                                           
   6274 00E383                             processEsc:
   6275 00E383 A6 3C                        	LDX		EscState
   6276 00E385 E0 FF FF                     	CPX		#-1
   6277 00E388 D0 44                        	BNE		.0006
   6278 00E38A C9 54 00                     	CMP		#'T'	; clear to EOL
   6279 00E38D D0 1C                        	BNE		.0003
   6280 00E38F A5 34                        	LDA		VideoPos
   6281 00E391 0A                           	ASL
   6282 00E392 AA                           	TAX
   6283 00E393 A4 30                        	LDY		CursorX
   6284 00E395                             .0001:
   6285 00E395 C0 53 00                     	CPY		#TEXTCOLS-1
   6286 00E398 F0 0E                        	BEQ		.0002
   6287 00E39A A9 20 00                     	LDA		#' '
   6288 00E39D 05 36                        	ORA		NormAttr
   6289 00E39F 9F 00 00 FD                  	STA		VIDBUF,X
   6290 00E3A3 E8                           	INX
   6291 00E3A4 E8                           	INX
   6292 00E3A5 C8                           	INY
   6293 00E3A6 D0 ED                        	BNE		.0001
   6294 00E3A8                             .0002:
   6295 00E3A8 64 3C                        	STZ		EscState
   6296 00E3AA 60                           	RTS
   6297 00E3AB                             .0003:
   6298 00E3AB C9 57 00                     	CMP		#'W'
   6299 00E3AE D0 05                        	BNE		.0004
   6300 00E3B0 64 3C                        	STZ		EscState
   6301 00E3B2 82 A5 00                     	BRL		doDelete
   6302 00E3B5                             .0004:
   6303 00E3B5 C9 60 00                     	CMP		#'`'
   6304 00E3B8 D0 06                        	BNE		.0005
   6305 00E3BA A9 FE FF                     	LDA		#-2
   6306 00E3BD 85 3C                        	STA		EscState
   6307 00E3BF 60                           	RTS
   6308 00E3C0                             .0005:
   6309 00E3C0 C9 28 00                     	CMP		#'('
   6310 00E3C3 D0 06                        	BNE		.0008
   6311 00E3C5 A9 FD FF                     	LDA		#-3
   6312 00E3C8 85 3C                        	STA		EscState
   6313 00E3CA 60                           	RTS
   6314 00E3CB                             .0008:
   6315 00E3CB 64 3C                        	STZ		EscState
   6316 00E3CD 60                           	RTS
   6317 00E3CE                             .0006:
   6318 00E3CE E0 FE FF                     	CPX		#-2
   6319 00E3D1 D0 11                        	BNE		.0007
   6320 00E3D3 64 3C                        	STZ		EscState
   6321 00E3D5 C9 31 00                     	CMP		#'1'
   6322 00E3D8 F0 FF 30 01                  	LBEQ	CursorOn
   6323 00E3DC C9 30 00                     	CMP		#'0'
   6324 00E3DF F0 FF 33 01                  	LBEQ	CursorOff
   6325 00E3E3 60                           	RTS
   6326 00E3E4                             .0007:
   6327 00E3E4 E0 FD FF                     	CPX		#-3
   6328 00E3E7 D0 0B                        	BNE		.0009
   6329 00E3E9 C9 1B 00                     	CMP		#ESC
   6330 00E3EC D0 DD                        	BNE		.0008
   6331 00E3EE A9 FC FF                     	LDA		#-4
   6332 00E3F1 85 3C                        	STA		EscState
   6333 00E3F3 60                           	RTS
   6334 00E3F4                             .0009:
   6335 00E3F4 E0 FC FF                     	CPX		#-4
   6336 00E3F7 D0 0B                        	BNE		.0010
   6337 00E3F9 C9 47 00                     	CMP		#'G'
   6338 00E3FC D0 CD                        	BNE		.0008
   6339 00E3FE A9 FB FF                     	LDA		#-5
   6340 00E401 85 3C                        	STA		EscState
   6341 00E403 60                           	RTS
   6342 00E404                             .0010:
   6343 00E404 E0 FB FF                     	CPX		#-5
   6344 00E407 D0 C2                        	BNE		.0008
   6345 00E409 64 3C                        	STZ		EscState
   6346 00E40B C9 34 00                     	CMP		#'4'
   6347 00E40E D0 12                        	BNE		.0011
   6348 00E410 A5 36                        	LDA		NormAttr
                                           	; Swap the high nybbles of the attribute
   6350 00E412 EB                           	XBA				
   6351 00E413 E2 30                        	SEP		#$30		; set 8 bit regs
                                           	NDX		8			; tell the assembler
                                           	MEM		8
   6354 00E415 2A                           	ROL
   6355 00E416 2A                           	ROL
   6356 00E417 2A                           	ROL
   6357 00E418 2A                           	ROL
   6358 00E419 C2 30                        	REP		#$30		; set 16 bit regs
                                           	NDX		16			; tell the assembler
                                           	MEM		16
   6361 00E41B EB                           	XBA
   6362 00E41C 29 00 FF                     	AND		#$FF00
   6363 00E41F 85 36                        	STA		NormAttr
   6364 00E421 60                           	RTS
   6365 00E422                             .0011:
   6366 00E422 C9 30 00                     	CMP		#'0'
   6367 00E425 D0 06                        	BNE		.0012
   6368 00E427 A9 00 BF                     	LDA		#$BF00		; Light Grey on Dark Grey
   6369 00E42A 85 36                        	STA		NormAttr
   6370 00E42C 60                           	RTS
   6371 00E42D                             .0012:
   6372 00E42D A9 00 BF                     	LDA		#$BF00		; Light Grey on Dark Grey
   6373 00E430 85 36                        	STA		NormAttr
   6374 00E432 60                           	RTS
                                           
   6376 00E433                             doBackSpace:
   6377 00E433 A4 30                        	LDY		CursorX
   6378 00E435 F0 22                        	BEQ		.0001		; Can't backspace anymore
   6379 00E437 A5 34                        	LDA		VideoPos
   6380 00E439 0A                           	ASL
   6381 00E43A AA                           	TAX
   6382 00E43B                             .0002:
   6383 00E43B BF 00 00 FD                  	LDA		VIDBUF,X
   6384 00E43F 9F FE FF FC                  	STA		VIDBUF-2,X
   6385 00E443 E8                           	INX
   6386 00E444 E8                           	INX
   6387 00E445 C8                           	INY
   6388 00E446 C0 54 00                     	CPY		#TEXTCOLS
   6389 00E449 D0 F0                        	BNE		.0002
   6390 00E44B                             .0003:
   6391 00E44B A9 20 00                     	LDA		#' '
   6392 00E44E 05 36                        	ORA		NormAttr
   6393 00E450 9F 00 00 FD                  	STA		VIDBUF,X
   6394 00E454 C6 30                        	DEC		CursorX
   6395 00E456 82 59 00                     	BRL		SyncVideoPos
   6396 00E459                             .0001:
   6397 00E459 60                           	RTS
                                           
                                           ; Deleting a character does not change the video position so there's no need
                                           ; to resynchronize it.
                                           
   6402 00E45A                             doDelete:
   6403 00E45A A4 30                        	LDY		CursorX
   6404 00E45C A5 34                        	LDA		VideoPos
   6405 00E45E 0A                           	ASL
   6406 00E45F AA                           	TAX
   6407 00E460                             .0002:
   6408 00E460 C0 53 00                     	CPY		#TEXTCOLS-1
   6409 00E463 F0 0D                        	BEQ		.0001
   6410 00E465 BF 02 00 FD                  	LDA		VIDBUF+2,X
   6411 00E469 9F 00 00 FD                  	STA		VIDBUF,X
   6412 00E46D E8                           	INX
   6413 00E46E E8                           	INX
   6414 00E46F C8                           	INY
   6415 00E470 80 EE                        	BRA		.0002
   6416 00E472                             .0001:
   6417 00E472 A9 20 00                     	LDA		#' '
   6418 00E475 05 36                        	ORA		NormAttr
   6419 00E477 9F 00 00 FD                  	STA		VIDBUF,X
   6420 00E47B 60                           	RTS
                                           
   6422 00E47C                             doCursorHome:
   6423 00E47C A5 30                        	LDA		CursorX
   6424 00E47E F0 26                        	BEQ		doCursor1
   6425 00E480 64 30                        	STZ		CursorX
   6426 00E482 80 2E                        	BRA		SyncVideoPos
   6427 00E484                             doCursorRight:
   6428 00E484 A5 30                        	LDA		CursorX
   6429 00E486 C9 53 00                     	CMP		#TEXTCOLS-1
   6430 00E489 F0 1F                        	BEQ		doRTS
   6431 00E48B 1A                           	INA
   6432 00E48C                             doCursor2:
   6433 00E48C 85 30                        	STA		CursorX
   6434 00E48E 80 22                        	BRA		SyncVideoPos
   6435 00E490                             doCursorLeft:
   6436 00E490 A5 30                        	LDA		CursorX
   6437 00E492 F0 16                        	BEQ		doRTS
   6438 00E494 3A                           	DEA
   6439 00E495 80 F5                        	BRA		doCursor2
   6440 00E497                             doCursorUp:
   6441 00E497 A5 32                        	LDA		CursorY
   6442 00E499 F0 0F                        	BEQ		doRTS
   6443 00E49B 3A                           	DEA
   6444 00E49C 80 08                        	BRA		doCursor1
   6445 00E49E                             doCursorDown:
   6446 00E49E A5 32                        	LDA		CursorY
   6447 00E4A0 C9 1E 00                     	CMP		#TEXTROWS-1
   6448 00E4A3 F0 05                        	BEQ		doRTS
   6449 00E4A5 1A                           	INA
   6450 00E4A6                             doCursor1:
   6451 00E4A6 85 32                        	STA		CursorY
   6452 00E4A8 80 08                        	BRA		SyncVideoPos
   6453 00E4AA                             doRTS:
   6454 00E4AA 60                           	RTS
                                           
   6456 00E4AB                             HomeCursor:
   6457 00E4AB A9 00 00                     	LDA		#0
   6458 00E4AE 64 30                        	STZ		CursorX
   6459 00E4B0 64 32                        	STZ		CursorY
                                           
                                           ; Synchronize the absolute video position with the cursor co-ordinates.
                                           ;
   6463 00E4B2                             SyncVideoPos:
   6464 00E4B2 A5 32                        	LDA		CursorY
   6465 00E4B4 0A                           	ASL
   6466 00E4B5 AA                           	TAX
   6467 00E4B6 BD C9 EB                     	LDA		LineTbl,X
   6468 00E4B9 18                           	CLC
   6469 00E4BA 65 30                        	ADC		CursorX
   6470 00E4BC 85 34                        	STA		VideoPos
   6471 00E4BE 8F 0D A0 FE                  	STA		VIDREGS+13		; Update the position in the text controller
   6472 00E4C2 60                           	RTS
                                           
   6474 00E4C3                             OutCRLF:
   6475 00E4C3 A9 0D 00                     	LDA		#CR
   6476 00E4C6 20 CC E4                     	JSR		OutChar
   6477 00E4C9 A9 0A 00                     	LDA		#LF
                                           
   6479 00E4CC                             OutChar:
   6480 00E4CC DA                           	PHX
   6481 00E4CD 5A                           	PHY
   6482 00E4CE A2 00 00                     	LDX		#0
   6483 00E4D1 FC F0 03                     	JSR		(OutputVec,x)
   6484 00E4D4 7A                           	PLY
   6485 00E4D5 FA                           	PLX
   6486 00E4D6 60                           	RTS
                                           
   6488 00E4D7                             DisplayString:
   6489 00E4D7 68                           	PLA							; pop return address
   6490 00E4D8 FA                           	PLX							; get string address parameter
   6491 00E4D9 48                           	PHA							; push return address
   6492 00E4DA E2 20                        	SEP		#$20				; ACC = 8 bit
                                           	MEM		8
   6494 00E4DC A9 DE                        	LDA		#$DE
   6495 00E4DE 8D 00 70                     	STA		$7000
   6496 00E4E1 86 38                        	STX		StringPos
   6497 00E4E3 A0 00 00                     	LDY		#0
   6498 00E4E6                             .0002:
   6499 00E4E6 B1 38                        	LDA		(StringPos),Y
   6500 00E4E8 F0 06                        	BEQ		.0001
   6501 00E4EA 20 67 EB                     	JSR		SuperPutch
   6502 00E4ED C8                           	INY
   6503 00E4EE 80 F6                        	BRA		.0002
   6504 00E4F0                             .0001:
   6505 00E4F0 C2 20                        	REP		#$20				; ACC 16 bits
                                           	MEM		16
   6507 00E4F2 60                           	RTS
                                           
   6509 00E4F3                             DisplayString2:
   6510 00E4F3 68                           	PLA							; pop return address
   6511 00E4F4 FA                           	PLX							; get string address parameter
   6512 00E4F5 48                           	PHA							; push return address
   6513 00E4F6 E2 20                        	SEP		#$20				; ACC = 8 bit
   6514 00E4F8 86 38                        	STX		StringPos
   6515 00E4FA A0 00 00                     	LDY		#0
   6516 00E4FD A2 32 00                     	LDX		#50
   6517 00E500                             .0002:
   6518 00E500 B1 38                        	LDA		(StringPos),Y
   6519 00E502 20 67 EB                     	JSR		SuperPutch
   6520 00E505 C8                           	INY
   6521 00E506 CA                           	DEX
   6522 00E507 D0 F7                        	BNE		.0002
   6523 00E509                             .0001:
   6524 00E509 C2 20                        	REP		#$20				; ACC 16 bits
   6525 00E50B 60                           	RTS
                                           
   6527 00E50C                             CursorOn:
   6528 00E50C 48                           	PHA
   6529 00E50D A9 60 1F                     	LDA		#$1F60
   6530 00E510 8F 09 A0 FE                  	STA		VIDREGS+9
   6531 00E514 68                           	PLA
   6532 00E515 60                           	RTS
                                           
   6534 00E516                             CursorOff:
   6535 00E516 48                           	PHA
   6536 00E517 A9 20 00                     	LDA		#$0020
   6537 00E51A 8F 09 A0 FE                  	STA		VIDREGS+9
   6538 00E51E 68                           	PLA
   6539 00E51F 60                           	RTS
                                           
   6541 00E520                             ClearScreen:
   6542 00E520 A0 2C 0A                     	LDY		#TEXTROWS*TEXTCOLS
   6543 00E523 A2 00 00                     	LDX		#$00
   6544 00E526 A9 20 00                     	LDA		#' '
   6545 00E529 20 D3 E2                     	JSR		AsciiToScreen
   6546 00E52C 05 36                        	ORA		NormAttr
   6547 00E52E                             .0001:
   6548 00E52E 9F 00 00 FD                  	STA		VIDBUF,X
   6549 00E532 E8                           	INX
   6550 00E533 E8                           	INX
   6551 00E534 88                           	DEY
   6552 00E535 D0 F7                        	BNE		.0001
   6553 00E537 60                           	RTS
                                           
   6555 00E538                             ScrollUp:
   6556 00E538 A2 00 00                     	LDX		#0
   6557 00E53B A0 2C 0A                     	LDY 	#TEXTROWS*TEXTCOLS
   6558 00E53E                             .0001:
   6559 00E53E BF A8 00 FD                  	LDA		VIDBUF+TEXTCOLS*2,X
   6560 00E542 9F 00 00 FD                  	STA		VIDBUF,X
   6561 00E546 E8                           	INX
   6562 00E547 E8                           	INX
   6563 00E548 88                           	DEY
   6564 00E549 D0 F3                        	BNE		.0001
   6565 00E54B A9 1E 00                     	LDA		#TEXTROWS-1
                                           
   6567 00E54E                             BlankLine:
   6568 00E54E 0A                           	ASL
   6569 00E54F AA                           	TAX
   6570 00E550 BD C9 EB                     	LDA		LineTbl,X
   6571 00E553 0A                           	ASL
   6572 00E554 AA                           	TAX
   6573 00E555 A0 54 00                     	LDY		#TEXTCOLS
   6574 00E558 A5 36                        	LDA		NormAttr
   6575 00E55A 09 20 00                     	ORA		#$20
   6576 00E55D                             .0001:
   6577 00E55D 9F 00 00 FD                  	STA		VIDBUF,X
   6578 00E561 E8                           	INX
   6579 00E562 E8                           	INX
   6580 00E563 88                           	DEY
   6581 00E564 D0 F7                        	BNE		.0001
   6582 00E566 60                           	RTS
                                           
   6584 00E567                             DispWord:
   6585 00E567 EB                           	XBA
   6586 00E568 20 6C E5                     	JSR		DispByte
   6587 00E56B EB                           	XBA
   6588 00E56C                             DispByte:
   6589 00E56C 48                           	PHA
   6590 00E56D 4A                           	LSR
   6591 00E56E 4A                           	LSR
   6592 00E56F 4A                           	LSR
   6593 00E570 4A                           	LSR
   6594 00E571 20 75 E5                     	JSR		DispNybble
   6595 00E574 68                           	PLA
   6596 00E575                             DispNybble:
   6597 00E575 48                           	PHA
   6598 00E576 29 0F 00                     	AND		#$0F
   6599 00E579 C9 0A 00                     	CMP		#10
   6600 00E57C 90 08                        	BCC		.0001
   6601 00E57E 69 36 00                     	ADC		#'A'-11			; -11 cause the carry is set
   6602 00E581 20 CC E4                     	JSR		OutChar
   6603 00E584 68                           	PLA
   6604 00E585 60                           	RTS
   6605 00E586                             .0001:
   6606 00E586 09 30 00                     	ORA		#'0'
   6607 00E589 20 CC E4                     	JSR		OutChar
   6608 00E58C 68                           	PLA
   6609 00E58D 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Get a range (two hex numbers)
                                           ;------------------------------------------------------------------------------
                                           
   6615 00E58E                             GetRange:
   6616 00E58E 20 53 E2                     	JSR		IgnoreBlanks
   6617 00E591 20 B9 E5                     	JSR		GetHexNumber
   6618 00E594 C0 00 00                     	CPY		#0
   6619 00E597 F0 1F                        	BEQ		.0001
   6620 00E599 A5 0C                        	LDA		NumWorkArea
   6621 00E59B 85 20                        	STA		RangeStart
   6622 00E59D 85 24                        	STA		RangeEnd
   6623 00E59F A5 0E                        	LDA		NumWorkArea+2
   6624 00E5A1 85 22                        	STA		RangeStart+2
   6625 00E5A3 85 26                        	STA		RangeEnd+2
   6626 00E5A5 20 53 E2                     	JSR		IgnoreBlanks
   6627 00E5A8 20 B9 E5                     	JSR		GetHexNumber
   6628 00E5AB C0 00 00                     	CPY		#0
   6629 00E5AE F0 08                        	BEQ		.0001
   6630 00E5B0 A5 0C                        	LDA		NumWorkArea
   6631 00E5B2 85 24                        	STA		RangeEnd
   6632 00E5B4 A5 0E                        	LDA		NumWorkArea+2
   6633 00E5B6 85 26                        	STA		RangeEnd+2
   6634 00E5B8                             .0001:
   6635 00E5B8 60                           	RTS
                                           	
                                           ; Get a hexidecimal number. Maximum of six digits.
                                           ; .X = text pointer (updated)
                                           ;------------------------------------------------------------------------------
                                           ;
   6641 00E5B9                             GetHexNumber:
   6642 00E5B9 A0 00 00                     	LDY		#0					; maximum of six digits
   6643 00E5BC 64 0C                        	STZ		NumWorkArea
   6644 00E5BE 64 0E                        	STZ		NumWorkArea+2
   6645 00E5C0                             gthxn2:
   6646 00E5C0 20 1E E1                     	JSR		MonGetch
   6647 00E5C3 20 E6 E5                     	JSR		AsciiToHexNybble
   6648 00E5C6 30 1B                        	BMI		gthxn1
   6649 00E5C8 06 0C                        	ASL		NumWorkArea
   6650 00E5CA 26 0E                        	ROL		NumWorkArea+2
   6651 00E5CC 06 0C                        	ASL		NumWorkArea
   6652 00E5CE 26 0E                        	ROL		NumWorkArea+2
   6653 00E5D0 06 0C                        	ASL		NumWorkArea
   6654 00E5D2 26 0E                        	ROL		NumWorkArea+2
   6655 00E5D4 06 0C                        	ASL		NumWorkArea
   6656 00E5D6 26 0E                        	ROL		NumWorkArea+2
   6657 00E5D8 05 0C                        	ORA		NumWorkArea
   6658 00E5DA 85 0C                        	STA		NumWorkArea
   6659 00E5DC C8                           	INY
   6660 00E5DD C0 06 00                     	CPY		#6
   6661 00E5E0 D0 DE                        	BNE		gthxn2
   6662 00E5E2 60                           	RTS
   6663 00E5E3                             gthxn1:
   6664 00E5E3 CA                           	DEX
   6665 00E5E4 CA                           	DEX
   6666 00E5E5 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Convert ASCII character in the range '0' to '9', 'a' to 'f' or 'A' to 'F'
                                           ; to a hex nybble.
                                           ;------------------------------------------------------------------------------
                                           ;
   6673 00E5E6                             AsciiToHexNybble:
   6674 00E5E6 C9 30 00                     	CMP		#'0'
   6675 00E5E9 90 30                        	BCC		gthx3
   6676 00E5EB C9 3A 00                     	CMP		#'9'+1
   6677 00E5EE B0 05                        	BCS		gthx5
   6678 00E5F0 38                           	SEC
   6679 00E5F1 E9 30 00                     	SBC		#'0'
   6680 00E5F4 60                           	RTS
   6681 00E5F5                             gthx5:
   6682 00E5F5 C9 41 00                     	CMP		#'A'
   6683 00E5F8 90 21                        	BCC		gthx3
   6684 00E5FA C9 47 00                     	CMP		#'F'+1
   6685 00E5FD B0 09                        	BCS		gthx6
   6686 00E5FF 38                           	SEC
   6687 00E600 E9 41 00                     	SBC		#'A'
   6688 00E603 18                           	CLC
   6689 00E604 69 0A 00                     	ADC		#10
   6690 00E607 60                           	RTS
   6691 00E608                             gthx6:
   6692 00E608 C9 61 00                     	CMP		#'a'
   6693 00E60B 90 0E                        	BCC		gthx3
   6694 00E60D C9 7B 00                     	CMP		#'z'+1
   6695 00E610 B0 09                        	BCS		gthx3
   6696 00E612 38                           	SEC
   6697 00E613 E9 61 00                     	SBC		#'a'
   6698 00E616 18                           	CLC
   6699 00E617 69 0A 00                     	ADC		#10
   6700 00E61A 60                           	RTS
   6701 00E61B                             gthx3:
   6702 00E61B A9 FF FF                     	LDA		#-1		; not a hex number
   6703 00E61E 60                           	RTS
                                           
   6705 00E61F                             AsciiToDecNybble:
   6706 00E61F C9 30 00                     	CMP		#'0'
   6707 00E622 90 0A                        	BCC		gtdc3
   6708 00E624 C9 3A 00                     	CMP		#'9'+1
   6709 00E627 B0 05                        	BCS		gtdc3
   6710 00E629 38                           	SEC
   6711 00E62A E9 30 00                     	SBC		#'0'
   6712 00E62D 60                           	RTS
   6713 00E62E                             gtdc3:
   6714 00E62E A9 FF FF                     	LDA		#-1
   6715 00E631 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ;------------------------------------------------------------------------------
                                           ; Keyboard processing routines follow.
                                           ;------------------------------------------------------------------------------
                                           ;------------------------------------------------------------------------------
                                           
   6723 00E632                             KeybdInit:
   6724 00E632 E2 30                        	SEP		#$30
                                           	MEM		8
                                           	NDX		8
   6727 00E634 64 08                        	STZ		KeyState1
   6728 00E636 64 09                        	STZ		KeyState2
   6729 00E638 A0 05                        	LDY		#$5
   6730 00E63A                             .0001:
   6731 00E63A 20 96 E6                     	JSR		KeybdRecvByte	; Look for $AA
   6732 00E63D 90 04                        	BCC		.0002
   6733 00E63F C9 AA                        	CMP		#$AA			;
   6734 00E641 F0 25                        	BEQ		.config
   6735 00E643                             .0002:
   6736 00E643 20 E7 E6                     	JSR		Wait10ms
   6737 00E646 A9 FF                        	LDA		#$FF			; send reset code to keyboard
   6738 00E648 8F 11 A1 FE                  	STA		KEYBD+1			; write to status reg to clear TX state
   6739 00E64C 20 E7 E6                     	JSR		Wait10ms
   6740 00E64F A9 FF                        	LDA		#$FF
   6741 00E651 8F 10 A1 FE                  	STA		KEYBD			; now write to transmit register
   6742 00E655 20 D0 E6                     	JSR		KeybdWaitTx		; wait until no longer busy
   6743 00E658 20 96 E6                     	JSR		KeybdRecvByte	; look for an ACK ($FA)
   6744 00E65B C9 FA                        	CMP		#$FA
   6745 00E65D 20 96 E6                     	JSR		KeybdRecvByte
   6746 00E660 C9 FC                        	CMP		#$FC			; reset error ?
   6747 00E662 F0 18                        	BEQ		.tryAgain
   6748 00E664 C9 AA                        	CMP		#$AA			; reset complete okay ?
   6749 00E666 D0 14                        	BNE		.tryAgain
   6750 00E668                             .config:
   6751 00E668 A9 F0                        	LDA		#$F0			; send scan code select
   6752 00E66A 8F 10 A1 FE                  	STA		KEYBD
   6753 00E66E 20 D0 E6                     	JSR		KeybdWaitTx
   6754 00E671 90 09                        	BCC		.tryAgain
   6755 00E673 20 96 E6                     	JSR		KeybdRecvByte	; wait for response from keyboard
   6756 00E676 90 04                        	BCC		.tryAgain
   6757 00E678 C9 FA                        	CMP		#$FA
   6758 00E67A F0 0C                        	BEQ		.0004
   6759 00E67C                             .tryAgain:
   6760 00E67C 88                           	DEY
   6761 00E67D D0 BB                        	BNE		.0001
   6762 00E67F                             .keybdErr:
   6763 00E67F C2 30                        	REP		#$30
   6764 00E681 F4 F7 E6                     	PEA		msgKeybdNR
   6765 00E684 20 D7 E4                     	JSR		DisplayString
   6766 00E687 60                           	RTS
   6767 00E688                             .0004:
   6768 00E688 A9 02                        	LDA		#2				; select scan code set #2
   6769 00E68A 8F 10 A1 FE                  	STA		KEYBD
   6770 00E68E 20 D0 E6                     	JSR		KeybdWaitTx
   6771 00E691 90 E9                        	BCC		.tryAgain
   6772 00E693 C2 30                        	REP		#$30
   6773 00E695 60                           	RTS
                                           
                                           ; Recieve a byte from the keyboard, used after a command is sent to the
                                           ; keyboard in order to wait for a response.
                                           ;
   6778 00E696                             KeybdRecvByte:
   6779 00E696 5A                           	PHY
   6780 00E697 A0 64                        	LDY		#100			; wait up to 1s
   6781 00E699                             .0003:
   6782 00E699 AF 11 A1 FE                  	LDA		KEYBD+1			; wait for response from keyboard
   6783 00E69D 89 80                        	BIT		#$80			; is input buffer full ?
   6784 00E69F D0 09                        	BNE		.0004			; yes, branch
   6785 00E6A1 20 E7 E6                     	JSR		Wait10ms		; wait a bit
   6786 00E6A4 88                           	DEY
   6787 00E6A5 D0 F2                        	BNE		.0003			; go back and try again
   6788 00E6A7 7A                           	PLY						; timeout
   6789 00E6A8 18                           	CLC						; carry clear = no code
   6790 00E6A9 60                           	RTS
   6791 00E6AA                             .0004:
   6792 00E6AA AF 10 A1 FE                  	LDA		KEYBD			;
   6793 00E6AE 48                           	PHA
   6794 00E6AF A9 00                        	LDA		#0				; clear recieve state
   6795 00E6B1 8F 11 A1 FE                  	STA		KEYBD+1
   6796 00E6B5 68                           	PLA
   6797 00E6B6 7A                           	PLY
   6798 00E6B7 38                           	SEC						; carry set = code available
   6799 00E6B8 60                           	RTS
                                           
                                           ; Wait until the keyboard status is non-busy
                                           ; Returns .CF = 1 if successful, .CF=0 timeout
                                           ;
   6804 00E6B9                             KeybdWaitBusy:
   6805 00E6B9 5A                           	PHY
   6806 00E6BA A0 64                        	LDY		#100			; wait a max of 1s
   6807 00E6BC                             .0001:
   6808 00E6BC AF 11 A1 FE                  	LDA		KEYBD+1
   6809 00E6C0 89 01                        	BIT		#1
   6810 00E6C2 F0 09                        	BEQ		.0002
   6811 00E6C4 20 E7 E6                     	JSR		Wait10ms
   6812 00E6C7 88                           	DEY
   6813 00E6C8 D0 F2                        	BNE		.0001
   6814 00E6CA 7A                           	PLY
   6815 00E6CB 18                           	CLC
   6816 00E6CC 60                           	RTS
   6817 00E6CD                             .0002:
   6818 00E6CD 7A                           	PLY
   6819 00E6CE 38                           	SEC
   6820 00E6CF 60                           	RTS
                                           
                                           ; Wait until the keyboard transmit is complete
                                           ; Returns .CF = 1 if successful, .CF=0 timeout
                                           ;
   6825 00E6D0                             KeybdWaitTx:
   6826 00E6D0 5A                           	PHY
   6827 00E6D1 A0 64                        	LDY		#100			; wait a max of 1s
   6828 00E6D3                             .0001:
   6829 00E6D3 AF 11 A1 FE                  	LDA		KEYBD+1
   6830 00E6D7 89 40                        	BIT		#$40			; check for transmit complete bit
   6831 00E6D9 D0 09                        	BNE		.0002			; branch if bit set
   6832 00E6DB 20 E7 E6                     	JSR		Wait10ms		; delay a little bit
   6833 00E6DE 88                           	DEY						; go back and try again
   6834 00E6DF D0 F2                        	BNE		.0001
   6835 00E6E1 7A                           	PLY						; timed out
   6836 00E6E2 18                           	CLC						; return carry clear
   6837 00E6E3 60                           	RTS
   6838 00E6E4                             .0002:
   6839 00E6E4 7A                           	PLY						; wait complete, return 
   6840 00E6E5 38                           	SEC						; carry set
   6841 00E6E6 60                           	RTS
                                           
                                           ; Wait approximately 10ms. Used by keyboard routines. Makes use of the free
                                           ; running counter #0.
                                           ; .A = trashed (=-5)
                                           ;
   6847 00E6E7                             Wait10ms:
   6848 00E6E7 DA                           	PHX				; save .X
   6849 00E6E8 A5 12                        	LDA		CNT0H	; get starting count
   6850 00E6EA AA                           	TAX				; save it off in .X
   6851 00E6EB                             .0002:
   6852 00E6EB 38                           	SEC				; compare to current counter value
   6853 00E6EC E5 12                        	SBC		CNT0H
   6854 00E6EE 10 05                        	BPL		.0001	; teh result should be -ve, unless counter overflowed.
   6855 00E6F0 C9 FB                        	CMP		#-5		; 5 ticks pass ? 
   6856 00E6F2 8A                           	TXA				; prepare for next check, get startcount in .A
   6857 00E6F3 B0 F6                        	BCS		.0002	; go back if less than 5 ticks
   6858 00E6F5                             .0001:
   6859 00E6F5 FA                           	PLX				; restore .X
   6860 00E6F6 60                           	RTS
                                           
                                           	MEM		16
                                           	NDX		16
                                           
   6865 00E6F7                             msgKeybdNR:
   6866 00E6F7 0D 0A 4B 65 79 62 6F 61      	.byte	CR,LF,"Keyboard not responding.",CR,LF,0
   6866 00E6FF 72 64 20 6E 6F 74 20 72    
   6866 00E707 65 73 70 6F 6E 64 69 6E    
   6866 00E70F 67 2E 0D 0A 00             
                                           
   6868 00E714                             KeybdGetCharNoWait:
   6869 00E714 E2 20                        	SEP		#$20
                                           	MEM		8
   6871 00E716 A9 00                        	LDA		#0
   6872 00E718 85 0B                        	STA		KeybdWaitFlag
   6873 00E71A 80 06                        	BRA		KeybdGetChar
                                           
   6875 00E71C                             KeybdGetCharWait:
   6876 00E71C E2 20                        	SEP		#$20
                                           	MEM		8
   6878 00E71E A9 FF                        	LDA		#$FF
   6879 00E720 85 0B                        	STA		KeybdWaitFlag
                                           
                                           ; Wait for a keyboard character to be available
                                           ; Returns (CF=1) if no key available
                                           ; Return key (CF=0) if key is available
                                           ;
                                           ;
   6886 00E722                             KeybdGetChar:
   6887 00E722 E2 20                        	SEP		#$20		; 8 bit acc
                                           	MEM		8
   6889 00E724 DA                           	PHX
   6890 00E725                             .0002:
   6891 00E725                             .0003:
   6892 00E725 AF 11 A1 FE                  	LDA		KEYBD+1		; check MSB of keyboard status reg.
   6893 00E729 0A                           	ASL
   6894 00E72A B0 09                        	BCS		.0006		; branch if keystroke ready
   6895 00E72C 24 0B                        	BIT		KeybdWaitFlag
   6896 00E72E 30 F5                        	BMI		.0003
   6897 00E730 FA                           	PLX
   6898 00E731 38                           	SEC
   6899 00E732 C2 20                        	REP		#$20
   6900 00E734 60                           	RTS
   6901 00E735                             .0006:
   6902 00E735 AF 10 A1 FE                  	LDA		KEYBD		; get scan code value
   6903 00E739 48                           	PHA
   6904 00E73A A9 00                        	LDA		#0			; write a zero to the status reg
   6905 00E73C 8F 11 A1 FE                  	STA		KEYBD+1		; to clear recieve register
   6906 00E740 68                           	PLA
   6907 00E741                             .0001:
   6908 00E741 C9 F0                        	CMP		#SC_KEYUP	; keyup scan code ?
   6909 00E743 F0 FF 68 00                  	LBEQ	.doKeyup	; 
   6910 00E747 C9 E0                        	CMP		#SC_EXTEND	; extended scan code ?
   6911 00E749 F0 FF 69 00                  	LBEQ	.doExtend
   6912 00E74D C9 14                        	CMP		#$14		; control ?
   6913 00E74F F0 FF 6C 00                  	LBEQ	.doCtrl
   6914 00E753 C9 12                        	CMP		#$12		; left shift
   6915 00E755 F0 FF 76 00                  	LBEQ	.doShift
   6916 00E759 C9 59                        	CMP		#$59		; right shift
   6917 00E75B F0 FF 70 00                  	LBEQ	.doShift
   6918 00E75F C9 77                        	CMP		#SC_NUMLOCK
   6919 00E761 F0 FF 7A 00                  	LBEQ	.doNumLock
   6920 00E765 C9 58                        	CMP		#SC_CAPSLOCK
   6921 00E767 F0 FF 80 00                  	LBEQ	.doCapsLock
   6922 00E76B C9 7E                        	CMP		#SC_SCROLLLOCK
   6923 00E76D F0 FF 86 00                  	LBEQ	.doScrollLock
   6924 00E771 46 08                        	LSR		KeyState1
   6925 00E773 B0 B0                        	BCS		.0003
   6926 00E775 AA                           	TAX
   6927 00E776 A9 80                        	LDA		#$80
   6928 00E778 24 09                        	BIT		KeyState2	; Is extended code ?
   6929 00E77A F0 11                        	BEQ		.0010
   6930 00E77C A9 7F                        	LDA		#$7F
   6931 00E77E 25 09                        	AND		KeyState2
   6932 00E780 85 09                        	STA		KeyState2
   6933 00E782 46 08                        	LSR		KeyState1	; clear keyup
   6934 00E784 8A                           	TXA
   6935 00E785 29 7F                        	AND		#$7F
   6936 00E787 AA                           	TAX
   6937 00E788 BD D6 EA                     	LDA		keybdExtendedCodes,X
   6938 00E78B 80 1D                        	BRA		.0008
   6939 00E78D                             .0010:
   6940 00E78D A9 04                        	LDA		#4
   6941 00E78F 24 09                        	BIT		KeyState2	; Is Cntrl down ?
   6942 00E791 F0 09                        	BEQ		.0009
   6943 00E793 8A                           	TXA
   6944 00E794 29 7F                        	AND		#$7F		; table is 128 chars
   6945 00E796 AA                           	TAX
   6946 00E797 BD 56 EA                     	LDA		keybdControlCodes,X
   6947 00E79A 80 0E                        	BRA		.0008
   6948 00E79C                             .0009:
   6949 00E79C A9 01                        	LDA		#$1			; Is shift down ?
   6950 00E79E 24 09                        	BIT		KeyState2
   6951 00E7A0 F0 05                        	BEQ		.0007
   6952 00E7A2 BD 56 E9                     	LDA		shiftedScanCodes,X
   6953 00E7A5 80 03                        	BRA		.0008
   6954 00E7A7                             .0007:
   6955 00E7A7 BD 56 E8                     	LDA		unshiftedScanCodes,X
   6956 00E7AA                             .0008:
   6957 00E7AA C2 20                        	REP		#$20
                                           	MEM		16
   6959 00E7AC FA                           	PLX
   6960 00E7AD 18                           	CLC
   6961 00E7AE 60                           	RTS
                                           	MEM		8
   6963 00E7AF                             .doKeyup:
   6964 00E7AF A9 01                        	LDA		#1
   6965 00E7B1 04 08                        	TSB		KeyState1
   6966 00E7B3 82 6F FF                     	BRL		.0003
   6967 00E7B6                             .doExtend:				; set extended key flag
   6968 00E7B6 A5 09                        	LDA		KeyState2
   6969 00E7B8 09 80                        	ORA		#$80
   6970 00E7BA 85 09                        	STA		KeyState2
   6971 00E7BC 82 66 FF                     	BRL		.0003
   6972 00E7BF                             .doCtrl:
   6973 00E7BF A9 04                        	LDA		#4
   6974 00E7C1 46 08                        	LSR		KeyState1	; check key up/down	
   6975 00E7C3 90 05                        	BCC		.0004		; keydown = carry clear
   6976 00E7C5 14 09                        	TRB		KeyState2
   6977 00E7C7 82 5B FF                     	BRL		.0003
   6978 00E7CA                             .0004:
   6979 00E7CA 04 09                        	TSB		KeyState2	; set control active bit
   6980 00E7CC 82 56 FF                     	BRL		.0003
   6981 00E7CF                             .doShift:
   6982 00E7CF A9 01                        	LDA		#1
   6983 00E7D1 46 08                        	LSR		KeyState1	; check key up/down	
   6984 00E7D3 90 05                        	BCC		.0005
   6985 00E7D5 14 09                        	TRB		KeyState2
   6986 00E7D7 82 4B FF                     	BRL		.0003
   6987 00E7DA                             .0005:
   6988 00E7DA 04 09                        	TSB		KeyState2
   6989 00E7DC 82 46 FF                     	BRL		.0003
   6990 00E7DF                             .doNumLock:
   6991 00E7DF A5 09                        	LDA		KeyState2
   6992 00E7E1 49 10                        	EOR		#16
   6993 00E7E3 85 09                        	STA		KeyState2
   6994 00E7E5 20 03 E8                     	JSR		KeybdSetLEDStatus
   6995 00E7E8 82 3A FF                     	BRL		.0003
   6996 00E7EB                             .doCapsLock:
   6997 00E7EB A5 09                        	LDA		KeyState2
   6998 00E7ED 49 20                        	EOR		#32
   6999 00E7EF 85 09                        	STA		KeyState2
   7000 00E7F1 20 03 E8                     	JSR		KeybdSetLEDStatus
   7001 00E7F4 82 2E FF                     	BRL		.0003
   7002 00E7F7                             .doScrollLock:
   7003 00E7F7 A5 09                        	LDA		KeyState2
   7004 00E7F9 49 40                        	EOR		#64
   7005 00E7FB 85 09                        	STA		KeyState2
   7006 00E7FD 20 03 E8                     	JSR		KeybdSetLEDStatus
   7007 00E800 82 22 FF                     	BRL		.0003
                                           
   7009 00E803                             KeybdSetLEDStatus:
   7010 00E803 A9 00                        	LDA		#0
   7011 00E805 85 0A                        	STA		KeybdLEDs
   7012 00E807 A9 10                        	LDA		#16
   7013 00E809 24 09                        	BIT		KeyState2
   7014 00E80B F0 06                        	BEQ		.0002
   7015 00E80D A5 0A                        	LDA		KeybdLEDs	; set bit 1 for Num lock, 0 for scrolllock , 2 for caps lock
   7016 00E80F 09 02                        	ORA		#$2
   7017 00E811 85 0A                        	STA		KeybdLEDs
   7018 00E813                             .0002:
   7019 00E813 A9 20                        	LDA		#32
   7020 00E815 24 09                        	BIT		KeyState2
   7021 00E817 F0 06                        	BEQ		.0003
   7022 00E819 A5 0A                        	LDA		KeybdLEDs
   7023 00E81B 09 04                        	ORA		#$4
   7024 00E81D 85 0A                        	STA		KeybdLEDs
   7025 00E81F                             .0003:
   7026 00E81F A9 40                        	LDA		#64
   7027 00E821 24 09                        	BIT		KeyState2
   7028 00E823 F0 06                        	BEQ		.0004
   7029 00E825 A5 0A                        	LDA		KeybdLEDs
   7030 00E827 09 01                        	ORA		#1
   7031 00E829 85 0A                        	STA		KeybdLEDs
   7032 00E82B                             .0004:
   7033 00E82B A9 ED                        	LDA		#$ED		; set status LEDs command
   7034 00E82D 8F 10 A1 FE                  	STA		KEYBD
   7035 00E831 20 D0 E6                     	JSR		KeybdWaitTx
   7036 00E834 20 96 E6                     	JSR		KeybdRecvByte
   7037 00E837 90 0E                        	BCC		.0001
   7038 00E839 C9 FA                        	CMP		#$FA
   7039 00E83B A5 0A                        	LDA		KeybdLEDs
   7040 00E83D 8F 10 A1 FE                  	STA		KEYBD
   7041 00E841 20 D0 E6                     	JSR		KeybdWaitTx
   7042 00E844 20 96 E6                     	JSR		KeybdRecvByte	; wait for $FA byte
   7043 00E847                             .0001:
   7044 00E847 60                           	RTS
                                           
                                           	MEM		16
                                           
   7048 00E848 10 D5                        	BPL		.0003
   7049 00E84A 48                           	PHA					; save off the char (we need to trash acc)
   7050 00E84B AF 14 A1 FE                  	LDA		KEYBD+4		; clear keyboard strobe (must be a read operation)
   7051 00E84F 68                           	PLA					; restore char
   7052 00E850 89 00 08                     	BIT		#$800		; Is it a keyup code ?
   7053 00E853 D0 CA                        	BNE		.0003
   7054 00E855 60                           	RTS
                                           
                                           
                                           
                                           	;--------------------------------------------------------------------------
                                           	; PS2 scan codes to ascii conversion tables.
                                           	;--------------------------------------------------------------------------
                                           	;
   7062 00E856                             unshiftedScanCodes:
   7063 00E856 2E A9 2E A5 A3 A1 A2 AC      	.byte	$2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
                                         
   7064 00E85E 2E AA A8 A6 A4 09 60 2E      	.byte	$2e,$aa,$a8,$a6,$a4,$09,$60,$2e
                                         
   7065 00E866 2E 2E 2E 2E 2E 71 31 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$71,$31,$2e
                                         
   7066 00E86E 2E 2E 7A 73 61 77 32 2E      	.byte	$2e,$2e,$7a,$73,$61,$77,$32,$2e
                                         
   7067 00E876 2E 63 78 64 65 34 33 2E      	.byte	$2e,$63,$78,$64,$65,$34,$33,$2e
                                         
   7068 00E87E 2E 20 76 66 74 72 35 2E      	.byte	$2e,$20,$76,$66,$74,$72,$35,$2e
                                         
   7069 00E886 2E 6E 62 68 67 79 36 2E      	.byte	$2e,$6e,$62,$68,$67,$79,$36,$2e
                                         
   7070 00E88E 2E 2E 6D 6A 75 37 38 2E      	.byte	$2e,$2e,$6d,$6a,$75,$37,$38,$2e
                                         
   7071 00E896 2E 2C 6B 69 6F 30 39 2E      	.byte	$2e,$2c,$6b,$69,$6f,$30,$39,$2e
                                         
   7072 00E89E 2E 2E 2F 6C 3B 70 2D 2E      	.byte	$2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
                                         
   7073 00E8A6 2E 2E 27 2E 5B 3D 2E 2E      	.byte	$2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
                                         
   7074 00E8AE AD 2E 0D 5D 2E 5C 2E 2E      	.byte	$ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
                                         
   7075 00E8B6 2E 2E 2E 2E 2E 2E 08 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                         
   7076 00E8BE 2E 95 2E 93 94 2E 2E 2E      	.byte	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
                                         
   7077 00E8C6 98 7F 92 2E 91 90 1B AF      	.byte	$98,$7f,$92,$2e,$91,$90,$1b,$af
                                         
   7078 00E8CE AB 2E 97 2E 2E 96 AE 2E      	.byte	$ab,$2e,$97,$2e,$2e,$96,$ae,$2e
                                         
                                           
   7080 00E8D6 2E 2E 2E A7 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
                                         
   7081 00E8DE 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7082 00E8E6 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7083 00E8EE 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7084 00E8F6 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7085 00E8FE 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7086 00E906 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7087 00E90E 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7088 00E916 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7089 00E91E 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7090 00E926 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7091 00E92E 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7092 00E936 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7093 00E93E 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7094 00E946 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7095 00E94E 2E 2E FA 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
                                         
                                           
   7097 00E956                             shiftedScanCodes:
   7098 00E956 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7099 00E95E 2E 2E 2E 2E 2E 09 7E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
                                         
   7100 00E966 2E 2E 2E 2E 2E 51 21 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$51,$21,$2e
                                         
   7101 00E96E 2E 2E 5A 53 41 57 40 2E      	.byte	$2e,$2e,$5a,$53,$41,$57,$40,$2e
                                         
   7102 00E976 2E 43 58 44 45 24 23 2E      	.byte	$2e,$43,$58,$44,$45,$24,$23,$2e
                                         
   7103 00E97E 2E 20 56 46 54 52 25 2E      	.byte	$2e,$20,$56,$46,$54,$52,$25,$2e
                                         
   7104 00E986 2E 4E 42 48 47 59 5E 2E      	.byte	$2e,$4e,$42,$48,$47,$59,$5e,$2e
                                         
   7105 00E98E 2E 2E 4D 4A 55 26 2A 2E      	.byte	$2e,$2e,$4d,$4a,$55,$26,$2a,$2e
                                         
   7106 00E996 2E 3C 4B 49 4F 29 28 2E      	.byte	$2e,$3c,$4b,$49,$4f,$29,$28,$2e
                                         
   7107 00E99E 2E 3E 3F 4C 3A 50 5F 2E      	.byte	$2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
                                         
   7108 00E9A6 2E 2E 22 2E 7B 2B 2E 2E      	.byte	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
                                         
   7109 00E9AE 2E 2E 0D 7D 2E 7C 2E 2E      	.byte	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
                                         
   7110 00E9B6 2E 2E 2E 2E 2E 2E 08 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                         
   7111 00E9BE 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7112 00E9C6 2E 7F 2E 2E 2E 2E 1B 2E      	.byte	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
                                         
   7113 00E9CE 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
                                           
   7115 00E9D6 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7116 00E9DE 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7117 00E9E6 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7118 00E9EE 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7119 00E9F6 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7120 00E9FE 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7121 00EA06 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7122 00EA0E 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7123 00EA16 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7124 00EA1E 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7125 00EA26 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7126 00EA2E 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7127 00EA36 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7128 00EA3E 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7129 00EA46 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7130 00EA4E 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
                                           
                                           ; control
   7133 00EA56                             keybdControlCodes:
   7134 00EA56 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7135 00EA5E 2E 2E 2E 2E 2E 09 7E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
                                         
   7136 00EA66 2E 2E 2E 2E 2E 11 21 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$11,$21,$2e
                                         
   7137 00EA6E 2E 2E 1A 13 01 17 40 2E      	.byte	$2e,$2e,$1a,$13,$01,$17,$40,$2e
                                         
   7138 00EA76 2E 03 18 04 05 24 23 2E      	.byte	$2e,$03,$18,$04,$05,$24,$23,$2e
                                         
   7139 00EA7E 2E 20 16 06 14 12 25 2E      	.byte	$2e,$20,$16,$06,$14,$12,$25,$2e
                                         
   7140 00EA86 2E 0E 02 08 07 19 5E 2E      	.byte	$2e,$0e,$02,$08,$07,$19,$5e,$2e
                                         
   7141 00EA8E 2E 2E 0D 0A 15 26 2A 2E      	.byte	$2e,$2e,$0d,$0a,$15,$26,$2a,$2e
                                         
   7142 00EA96 2E 3C 0B 09 0F 29 28 2E      	.byte	$2e,$3c,$0b,$09,$0f,$29,$28,$2e
                                         
   7143 00EA9E 2E 3E 3F 0C 3A 10 5F 2E      	.byte	$2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
                                         
   7144 00EAA6 2E 2E 22 2E 7B 2B 2E 2E      	.byte	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
                                         
   7145 00EAAE 2E 2E 0D 7D 2E 7C 2E 2E      	.byte	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
                                         
   7146 00EAB6 2E 2E 2E 2E 2E 2E 08 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                         
   7147 00EABE 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7148 00EAC6 2E 7F 2E 2E 2E 2E 1B 2E      	.byte	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
                                         
   7149 00EACE 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
                                           
   7151 00EAD6                             keybdExtendedCodes:
   7152 00EAD6 2E 2E 2E 2E A3 A1 A2 2E      	.byte	$2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
                                         
   7153 00EADE 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7154 00EAE6 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7155 00EAEE 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7156 00EAF6 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7157 00EAFE 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7158 00EB06 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7159 00EB0E 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7160 00EB16 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7161 00EB1E 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7162 00EB26 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7163 00EB2E 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7164 00EB36 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   7165 00EB3E 2E 95 2E 93 94 2E 2E 2E      	.byte	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
                                         
   7166 00EB46 98 99 92 2E 91 90 2E 2E      	.byte	$98,$99,$92,$2e,$91,$90,$2e,$2e
                                         
   7167 00EB4E 2E 2E 97 2E 2E 96 2E 2E      	.byte	$2e,$2e,$97,$2e,$2e,$96,$2e,$2e
                                         
                                           
                                           ; Get char routine for Supermon
                                           ; This routine might be called with 8 bit regs.
                                           ;
   7172 00EB56                             SuperGetch:
   7173 00EB56 08                           	PHP
   7174 00EB57 C2 30                        	REP		#$30
                                           	MEM		16
                                           	NDX		16
   7177 00EB59 20 14 E7                     	JSR		KeybdGetCharNoWait
   7178 00EB5C 29 FF 00                     	AND		#$FF
   7179 00EB5F B0 03                        	BCS		.0001
   7180 00EB61 28                           	PLP		; to restore reg size
   7181 00EB62 18                           	CLC
   7182 00EB63 60                           	RTS
   7183 00EB64                             .0001:
   7184 00EB64 28                           	PLP
   7185 00EB65 38                           	SEC
   7186 00EB66 60                           	RTS
                                           
                                           ; Put char routine for Supermon
                                           ; This routine might be called with 8 bit regs.
                                           ;
   7191 00EB67                             SuperPutch:
   7192 00EB67 08                           	PHP
   7193 00EB68 C2 30                        	REP		#$30	; 16 bit regs
                                           	MEM		16
                                           	NDX		16
   7196 00EB6A 48                           	PHA
   7197 00EB6B DA                           	PHX
   7198 00EB6C 5A                           	PHY
   7199 00EB6D 20 CC E4                     	JSR		OutChar
   7200 00EB70 7A                           	PLY
   7201 00EB71 FA                           	PLX
   7202 00EB72 68                           	PLA
   7203 00EB73 28                           	PLP
   7204 00EB74 60                           	RTS
                                           
   7206 00EB75                             ICacheIL832:
   7207 00EB75 42 E0 01                     	CACHE	#1			; 1= invalidate instruction line identified by accumulator
   7208 00EB78 60                           	RTS
                                           
   7210 00EB79                             IRQRout:
   7211 00EB79 C2 30                        	REP		#$30
                                           	NDX		16
                                           	MEM		16
   7214 00EB7B 48                           	PHA
   7215 00EB7C A5 04                        	LDA		TickCount
   7216 00EB7E 1A                           	INA
   7217 00EB7F 85 04                        	STA		TickCount
   7218 00EB81 8F A4 00 FD                  	STA		$FD00A4
   7219 00EB85 E2 30                        	SEP		#$30
                                           	NDX		8
                                           	MEM		8
   7222 00EB87 AD 1F F0                     	LDA		$F01F		; check if counter expired
   7223 00EB8A 89 02                        	BIT		#2
   7224 00EB8C F0 05                        	BEQ		.0001
   7225 00EB8E A9 05                        	LDA		#$05		; count down, on mpu clock, irq enabled (clears irq)
   7226 00EB90 8D 17 F0                     	STA		$F017
   7227 00EB93                             .0001:
   7228 00EB93 C2 30                        	REP		#$30
                                           	NDX		16
                                           	MEM		16
   7231 00EB95 68                           	PLA
   7232 00EB96                             	RTI
                                           
                                           ; The following store sequence for the benefit of Supermon816
                                           ;
   7236 00EB96                             BrkRout:
   7237 00EB96 0B                           	PHD
   7238 00EB97 8B                           	PHB
   7239 00EB98 C2 30                        	REP		#$30
   7240 00EB9A 48                           	PHA
   7241 00EB9B DA                           	PHX
   7242 00EB9C 5A                           	PHY
   7243 00EB9D 6C 02 01                     	JMP		($0102)		; This jump normally points to BrkRout1
   7244 00EBA0                             BrkRout1:
   7245 00EBA0 C2 30                        	REP		#$30
   7246 00EBA2 7A                           	PLY
   7247 00EBA3 FA                           	PLX
   7248 00EBA4 68                           	PLA
   7249 00EBA5 AB                           	PLB
   7250 00EBA6 2B                           	PLD
   7251 00EBA7 E2 20                        	SEP		#$20
   7252 00EBA9 68                           	PLA
   7253 00EBAA C2 30                        	REP		#$30
   7254 00EBAC 68                           	PLA
   7255 00EBAD 20 67 E5                     	JSR		DispWord
   7256 00EBB0 A0 20 00                     	LDY		#32
   7257 00EBB3                             .0001:
   7258 00EBB3 42 F0                        	.word	$f042		; pchist
   7259 00EBB5 20 67 E5                     	JSR		DispWord
   7260 00EBB8 A9 20 00                     	LDA		#' '
   7261 00EBBB 20 CC E4                     	JSR		OutChar
   7262 00EBBE 88                           	DEY
   7263 00EBBF D0 F2                        	BNE		.0001
   7264 00EBC1 A9 FF FF                     	LDA		#$FFFF
   7265 00EBC4 8D 00 70                     	STA		$7000
   7266 00EBC7                             Hung:
   7267 00EBC7 80 FE                        	BRA		Hung
   7268 00EBC9                             	
   7269 00EBC9 00 00                        	.WORD	0
   7270 00EBCB 54 00                        	.WORD	TEXTCOLS
   7271 00EBCD A8 00                        	.WORD	TEXTCOLS*2
   7272 00EBCF FC 00                        	.WORD	TEXTCOLS*3
   7273 00EBD1 50 01                        	.WORD	TEXTCOLS*4
   7274 00EBD3 A4 01                        	.WORD	TEXTCOLS*5
   7275 00EBD5 F8 01                        	.WORD	TEXTCOLS*6
   7276 00EBD7 4C 02                        	.WORD	TEXTCOLS*7
   7277 00EBD9 A0 02                        	.WORD	TEXTCOLS*8
   7278 00EBDB F4 02                        	.WORD	TEXTCOLS*9
   7279 00EBDD 48 03                        	.WORD	TEXTCOLS*10
   7280 00EBDF 9C 03                        	.WORD	TEXTCOLS*11
   7281 00EBE1 F0 03                        	.WORD	TEXTCOLS*12
   7282 00EBE3 44 04                        	.WORD	TEXTCOLS*13
   7283 00EBE5 98 04                        	.WORD	TEXTCOLS*14
   7284 00EBE7 EC 04                        	.WORD	TEXTCOLS*15
   7285 00EBE9 40 05                        	.WORD	TEXTCOLS*16
   7286 00EBEB 94 05                        	.WORD	TEXTCOLS*17
   7287 00EBED E8 05                        	.WORD	TEXTCOLS*18
   7288 00EBEF 3C 06                        	.WORD	TEXTCOLS*19
   7289 00EBF1 90 06                        	.WORD	TEXTCOLS*20
   7290 00EBF3 E4 06                        	.WORD	TEXTCOLS*21
   7291 00EBF5 38 07                        	.WORD	TEXTCOLS*22
   7292 00EBF7 8C 07                        	.WORD	TEXTCOLS*23
   7293 00EBF9 E0 07                        	.WORD	TEXTCOLS*24
   7294 00EBFB 34 08                        	.WORD	TEXTCOLS*25
   7295 00EBFD 88 08                        	.WORD	TEXTCOLS*26
   7296 00EBFF DC 08                        	.WORD	TEXTCOLS*27
   7297 00EC01 30 09                        	.WORD	TEXTCOLS*28
   7298 00EC03 84 09                        	.WORD	TEXTCOLS*29
   7299 00EC05 D8 09                        	.WORD	TEXTCOLS*30
                                           
                                           	cpu		FT832
                                           	MEM		32
                                           	NDX		32
   7304 00EC07 A9 78 56 34 12               	LDA		#$12345678
   7305 00EC0C A2 32 54 76 98               	LDX		#$98765432
   7306 00EC11 42 97 23                     	STA		{$23},Y
   7307 00EC14 42 BC 56 55 45 44            	LDY		$44455556,X
   7308 00EC1A 42 1B 42 BD 56 55 45 44      	LDA		CS:$44455556,X
                                         
   7309 00EC22 42 3B 88 88 88 88 B9 34      	LDA		SEG $88888888:$1234,Y
   7309 00EC2A 12                         
   7310 00EC2B 42 20 00 E0 00 00 00 00      	JSF	    $0000:start
   7310 00EC33 00                         
   7311 00EC34 42 60                        	RTF
                                           
   7313 00EC36 FF FF FF FF FF FF FF FF      	.org	$F400
   7313 00EC3E FF FF FF FF FF FF FF FF    
   7313 00EC46 FF FF FF FF FF FF FF FF    
   7313 00EC4E FF FF FF FF FF FF FF FF    
   7313 00EC56 FF FF FF FF FF FF FF FF    
   7313 00EC5E FF FF FF FF FF FF FF FF    
   7313 00EC66 FF FF FF FF FF FF FF FF    
   7313 00EC6E FF FF FF FF FF FF FF FF    
   7313 00EC76 FF FF FF FF FF FF FF FF    
   7313 00EC7E FF FF FF FF FF FF FF FF    
   7313 00EC86 FF FF FF FF FF FF FF FF    
   7313 00EC8E FF FF FF FF FF FF FF FF    
   7313 00EC96 FF FF FF FF FF FF FF FF    
   7313 00EC9E FF FF FF FF FF FF FF FF    
   7313 00ECA6 FF FF FF FF FF FF FF FF    
   7313 00ECAE FF FF FF FF FF FF FF FF    
   7313 00ECB6 FF FF FF FF FF FF FF FF    
   7313 00ECBE FF FF FF FF FF FF FF FF    
   7313 00ECC6 FF FF FF FF FF FF FF FF    
   7313 00ECCE FF FF FF FF FF FF FF FF    
   7313 00ECD6 FF FF FF FF FF FF FF FF    
   7313 00ECDE FF FF FF FF FF FF FF FF    
   7313 00ECE6 FF FF FF FF FF FF FF FF    
   7313 00ECEE FF FF FF FF FF FF FF FF    
   7313 00ECF6 FF FF FF FF FF FF FF FF    
   7313 00ECFE FF FF FF FF FF FF FF FF    
   7313 00ED06 FF FF FF FF FF FF FF FF    
   7313 00ED0E FF FF FF FF FF FF FF FF    
   7313 00ED16 FF FF FF FF FF FF FF FF    
   7313 00ED1E FF FF FF FF FF FF FF FF    
   7313 00ED26 FF FF FF FF FF FF FF FF    
   7313 00ED2E FF FF FF FF FF FF FF FF    
   7313 00ED36 FF FF FF FF FF FF FF FF    
   7313 00ED3E FF FF FF FF FF FF FF FF    
   7313 00ED46 FF FF FF FF FF FF FF FF    
   7313 00ED4E FF FF FF FF FF FF FF FF    
   7313 00ED56 FF FF FF FF FF FF FF FF    
   7313 00ED5E FF FF FF FF FF FF FF FF    
   7313 00ED66 FF FF FF FF FF FF FF FF    
   7313 00ED6E FF FF FF FF FF FF FF FF    
   7313 00ED76 FF FF FF FF FF FF FF FF    
   7313 00ED7E FF FF FF FF FF FF FF FF    
   7313 00ED86 FF FF FF FF FF FF FF FF    
   7313 00ED8E FF FF FF FF FF FF FF FF    
   7313 00ED96 FF FF FF FF FF FF FF FF    
   7313 00ED9E FF FF FF FF FF FF FF FF    
   7313 00EDA6 FF FF FF FF FF FF FF FF    
   7313 00EDAE FF FF FF FF FF FF FF FF    
   7313 00EDB6 FF FF FF FF FF FF FF FF    
   7313 00EDBE FF FF FF FF FF FF FF FF    
   7313 00EDC6 FF FF FF FF FF FF FF FF    
   7313 00EDCE FF FF FF FF FF FF FF FF    
   7313 00EDD6 FF FF FF FF FF FF FF FF    
   7313 00EDDE FF FF FF FF FF FF FF FF    
   7313 00EDE6 FF FF FF FF FF FF FF FF    
   7313 00EDEE FF FF FF FF FF FF FF FF    
   7313 00EDF6 FF FF FF FF FF FF FF FF    
   7313 00EDFE FF FF FF FF FF FF FF FF    
   7313 00EE06 FF FF FF FF FF FF FF FF    
   7313 00EE0E FF FF FF FF FF FF FF FF    
   7313 00EE16 FF FF FF FF FF FF FF FF    
   7313 00EE1E FF FF FF FF FF FF FF FF    
   7313 00EE26 FF FF FF FF FF FF FF FF    
   7313 00EE2E FF FF FF FF FF FF FF FF    
   7313 00EE36 FF FF FF FF FF FF FF FF    
   7313 00EE3E FF FF FF FF FF FF FF FF    
   7313 00EE46 FF FF FF FF FF FF FF FF    
   7313 00EE4E FF FF FF FF FF FF FF FF    
   7313 00EE56 FF FF FF FF FF FF FF FF    
   7313 00EE5E FF FF FF FF FF FF FF FF    
   7313 00EE66 FF FF FF FF FF FF FF FF    
   7313 00EE6E FF FF FF FF FF FF FF FF    
   7313 00EE76 FF FF FF FF FF FF FF FF    
   7313 00EE7E FF FF FF FF FF FF FF FF    
   7313 00EE86 FF FF FF FF FF FF FF FF    
   7313 00EE8E FF FF FF FF FF FF FF FF    
   7313 00EE96 FF FF FF FF FF FF FF FF    
   7313 00EE9E FF FF FF FF FF FF FF FF    
   7313 00EEA6 FF FF FF FF FF FF FF FF    
   7313 00EEAE FF FF FF FF FF FF FF FF    
   7313 00EEB6 FF FF FF FF FF FF FF FF    
   7313 00EEBE FF FF FF FF FF FF FF FF    
   7313 00EEC6 FF FF FF FF FF FF FF FF    
   7313 00EECE FF FF FF FF FF FF FF FF    
   7313 00EED6 FF FF FF FF FF FF FF FF    
   7313 00EEDE FF FF FF FF FF FF FF FF    
   7313 00EEE6 FF FF FF FF FF FF FF FF    
   7313 00EEEE FF FF FF FF FF FF FF FF    
   7313 00EEF6 FF FF FF FF FF FF FF FF    
   7313 00EEFE FF FF FF FF FF FF FF FF    
   7313 00EF06 FF FF FF FF FF FF FF FF    
   7313 00EF0E FF FF FF FF FF FF FF FF    
   7313 00EF16 FF FF FF FF FF FF FF FF    
   7313 00EF1E FF FF FF FF FF FF FF FF    
   7313 00EF26 FF FF FF FF FF FF FF FF    
   7313 00EF2E FF FF FF FF FF FF FF FF    
   7313 00EF36 FF FF FF FF FF FF FF FF    
   7313 00EF3E FF FF FF FF FF FF FF FF    
   7313 00EF46 FF FF FF FF FF FF FF FF    
   7313 00EF4E FF FF FF FF FF FF FF FF    
   7313 00EF56 FF FF FF FF FF FF FF FF    
   7313 00EF5E FF FF FF FF FF FF FF FF    
   7313 00EF66 FF FF FF FF FF FF FF FF    
   7313 00EF6E FF FF FF FF FF FF FF FF    
   7313 00EF76 FF FF FF FF FF FF FF FF    
   7313 00EF7E FF FF FF FF FF FF FF FF    
   7313 00EF86 FF FF FF FF FF FF FF FF    
   7313 00EF8E FF FF FF FF FF FF FF FF    
   7313 00EF96 FF FF FF FF FF FF FF FF    
   7313 00EF9E FF FF FF FF FF FF FF FF    
   7313 00EFA6 FF FF FF FF FF FF FF FF    
   7313 00EFAE FF FF FF FF FF FF FF FF    
   7313 00EFB6 FF FF FF FF FF FF FF FF    
   7313 00EFBE FF FF FF FF FF FF FF FF    
   7313 00EFC6 FF FF FF FF FF FF FF FF    
   7313 00EFCE FF FF FF FF FF FF FF FF    
   7313 00EFD6 FF FF FF FF FF FF FF FF    
   7313 00EFDE FF FF FF FF FF FF FF FF    
   7313 00EFE6 FF FF FF FF FF FF FF FF    
   7313 00EFEE FF FF FF FF FF FF FF FF    
   7313 00EFF6 FF FF FF FF FF FF FF FF    
   7313 00EFFE FF FF FF FF FF FF FF FF    
   7313 00F006 FF FF FF FF FF FF FF FF    
   7313 00F00E FF FF FF FF FF FF FF FF    
   7313 00F016 FF FF FF FF FF FF FF FF    
   7313 00F01E FF FF FF FF FF FF FF FF    
   7313 00F026 FF FF FF FF FF FF FF FF    
   7313 00F02E FF FF FF FF FF FF FF FF    
   7313 00F036 FF FF FF FF FF FF FF FF    
   7313 00F03E FF FF FF FF FF FF FF FF    
   7313 00F046 FF FF FF FF FF FF FF FF    
   7313 00F04E FF FF FF FF FF FF FF FF    
   7313 00F056 FF FF FF FF FF FF FF FF    
   7313 00F05E FF FF FF FF FF FF FF FF    
   7313 00F066 FF FF FF FF FF FF FF FF    
   7313 00F06E FF FF FF FF FF FF FF FF    
   7313 00F076 FF FF FF FF FF FF FF FF    
   7313 00F07E FF FF FF FF FF FF FF FF    
   7313 00F086 FF FF FF FF FF FF FF FF    
   7313 00F08E FF FF FF FF FF FF FF FF    
   7313 00F096 FF FF FF FF FF FF FF FF    
   7313 00F09E FF FF FF FF FF FF FF FF    
   7313 00F0A6 FF FF FF FF FF FF FF FF    
   7313 00F0AE FF FF FF FF FF FF FF FF    
   7313 00F0B6 FF FF FF FF FF FF FF FF    
   7313 00F0BE FF FF FF FF FF FF FF FF    
   7313 00F0C6 FF FF FF FF FF FF FF FF    
   7313 00F0CE FF FF FF FF FF FF FF FF    
   7313 00F0D6 FF FF FF FF FF FF FF FF    
   7313 00F0DE FF FF FF FF FF FF FF FF    
   7313 00F0E6 FF FF FF FF FF FF FF FF    
   7313 00F0EE FF FF FF FF FF FF FF FF    
   7313 00F0F6 FF FF FF FF FF FF FF FF    
   7313 00F0FE FF FF FF FF FF FF FF FF    
   7313 00F106 FF FF FF FF FF FF FF FF    
   7313 00F10E FF FF FF FF FF FF FF FF    
   7313 00F116 FF FF FF FF FF FF FF FF    
   7313 00F11E FF FF FF FF FF FF FF FF    
   7313 00F126 FF FF FF FF FF FF FF FF    
   7313 00F12E FF FF FF FF FF FF FF FF    
   7313 00F136 FF FF FF FF FF FF FF FF    
   7313 00F13E FF FF FF FF FF FF FF FF    
   7313 00F146 FF FF FF FF FF FF FF FF    
   7313 00F14E FF FF FF FF FF FF FF FF    
   7313 00F156 FF FF FF FF FF FF FF FF    
   7313 00F15E FF FF FF FF FF FF FF FF    
   7313 00F166 FF FF FF FF FF FF FF FF    
   7313 00F16E FF FF FF FF FF FF FF FF    
   7313 00F176 FF FF FF FF FF FF FF FF    
   7313 00F17E FF FF FF FF FF FF FF FF    
   7313 00F186 FF FF FF FF FF FF FF FF    
   7313 00F18E FF FF FF FF FF FF FF FF    
   7313 00F196 FF FF FF FF FF FF FF FF    
   7313 00F19E FF FF FF FF FF FF FF FF    
   7313 00F1A6 FF FF FF FF FF FF FF FF    
   7313 00F1AE FF FF FF FF FF FF FF FF    
   7313 00F1B6 FF FF FF FF FF FF FF FF    
   7313 00F1BE FF FF FF FF FF FF FF FF    
   7313 00F1C6 FF FF FF FF FF FF FF FF    
   7313 00F1CE FF FF FF FF FF FF FF FF    
   7313 00F1D6 FF FF FF FF FF FF FF FF    
   7313 00F1DE FF FF FF FF FF FF FF FF    
   7313 00F1E6 FF FF FF FF FF FF FF FF    
   7313 00F1EE FF FF FF FF FF FF FF FF    
   7313 00F1F6 FF FF FF FF FF FF FF FF    
   7313 00F1FE FF FF FF FF FF FF FF FF    
   7313 00F206 FF FF FF FF FF FF FF FF    
   7313 00F20E FF FF FF FF FF FF FF FF    
   7313 00F216 FF FF FF FF FF FF FF FF    
   7313 00F21E FF FF FF FF FF FF FF FF    
   7313 00F226 FF FF FF FF FF FF FF FF    
   7313 00F22E FF FF FF FF FF FF FF FF    
   7313 00F236 FF FF FF FF FF FF FF FF    
   7313 00F23E FF FF FF FF FF FF FF FF    
   7313 00F246 FF FF FF FF FF FF FF FF    
   7313 00F24E FF FF FF FF FF FF FF FF    
   7313 00F256 FF FF FF FF FF FF FF FF    
   7313 00F25E FF FF FF FF FF FF FF FF    
   7313 00F266 FF FF FF FF FF FF FF FF    
   7313 00F26E FF FF FF FF FF FF FF FF    
   7313 00F276 FF FF FF FF FF FF FF FF    
   7313 00F27E FF FF FF FF FF FF FF FF    
   7313 00F286 FF FF FF FF FF FF FF FF    
   7313 00F28E FF FF FF FF FF FF FF FF    
   7313 00F296 FF FF FF FF FF FF FF FF    
   7313 00F29E FF FF FF FF FF FF FF FF    
   7313 00F2A6 FF FF FF FF FF FF FF FF    
   7313 00F2AE FF FF FF FF FF FF FF FF    
   7313 00F2B6 FF FF FF FF FF FF FF FF    
   7313 00F2BE FF FF FF FF FF FF FF FF    
   7313 00F2C6 FF FF FF FF FF FF FF FF    
   7313 00F2CE FF FF FF FF FF FF FF FF    
   7313 00F2D6 FF FF FF FF FF FF FF FF    
   7313 00F2DE FF FF FF FF FF FF FF FF    
   7313 00F2E6 FF FF FF FF FF FF FF FF    
   7313 00F2EE FF FF FF FF FF FF FF FF    
   7313 00F2F6 FF FF FF FF FF FF FF FF    
   7313 00F2FE FF FF FF FF FF FF FF FF    
   7313 00F306 FF FF FF FF FF FF FF FF    
   7313 00F30E FF FF FF FF FF FF FF FF    
   7313 00F316 FF FF FF FF FF FF FF FF    
   7313 00F31E FF FF FF FF FF FF FF FF    
   7313 00F326 FF FF FF FF FF FF FF FF    
   7313 00F32E FF FF FF FF FF FF FF FF    
   7313 00F336 FF FF FF FF FF FF FF FF    
   7313 00F33E FF FF FF FF FF FF FF FF    
   7313 00F346 FF FF FF FF FF FF FF FF    
   7313 00F34E FF FF FF FF FF FF FF FF    
   7313 00F356 FF FF FF FF FF FF FF FF    
   7313 00F35E FF FF FF FF FF FF FF FF    
   7313 00F366 FF FF FF FF FF FF FF FF    
   7313 00F36E FF FF FF FF FF FF FF FF    
   7313 00F376 FF FF FF FF FF FF FF FF    
   7313 00F37E FF FF FF FF FF FF FF FF    
   7313 00F386 FF FF FF FF FF FF FF FF    
   7313 00F38E FF FF FF FF FF FF FF FF    
   7313 00F396 FF FF FF FF FF FF FF FF    
   7313 00F39E FF FF FF FF FF FF FF FF    
   7313 00F3A6 FF FF FF FF FF FF FF FF    
   7313 00F3AE FF FF FF FF FF FF FF FF    
   7313 00F3B6 FF FF FF FF FF FF FF FF    
   7313 00F3BE FF FF FF FF FF FF FF FF    
   7313 00F3C6 FF FF FF FF FF FF FF FF    
   7313 00F3CE FF FF FF FF FF FF FF FF    
   7313 00F3D6 FF FF FF FF FF FF FF FF    
   7313 00F3DE FF FF FF FF FF FF FF FF    
   7313 00F3E6 FF FF FF FF FF FF FF FF    
   7313 00F3EE FF FF FF FF FF FF FF FF    
   7313 00F3F6 FF FF FF FF FF FF FF FF    
   7313 00F3FE FF FF                      
   7314 00F400 4C 56 EB                     	JMP		SuperGetch
   7315 00F403 4C 00 E0                     	JMP		start
   7316 00F406 4C 67 EB                     	JMP		SuperPutch
   7317 00F409 4C 5E E2                     	JMP		BIOSInput
                                           
   7319 00F40C FF FF FF FF FF FF FF FF      	.org 	$FFE6
   7319 00F414 FF FF FF FF FF FF FF FF    
   7319 00F41C FF FF FF FF FF FF FF FF    
   7319 00F424 FF FF FF FF FF FF FF FF    
   7319 00F42C FF FF FF FF FF FF FF FF    
   7319 00F434 FF FF FF FF FF FF FF FF    
   7319 00F43C FF FF FF FF FF FF FF FF    
   7319 00F444 FF FF FF FF FF FF FF FF    
   7319 00F44C FF FF FF FF FF FF FF FF    
   7319 00F454 FF FF FF FF FF FF FF FF    
   7319 00F45C FF FF FF FF FF FF FF FF    
   7319 00F464 FF FF FF FF FF FF FF FF    
   7319 00F46C FF FF FF FF FF FF FF FF    
   7319 00F474 FF FF FF FF FF FF FF FF    
   7319 00F47C FF FF FF FF FF FF FF FF    
   7319 00F484 FF FF FF FF FF FF FF FF    
   7319 00F48C FF FF FF FF FF FF FF FF    
   7319 00F494 FF FF FF FF FF FF FF FF    
   7319 00F49C FF FF FF FF FF FF FF FF    
   7319 00F4A4 FF FF FF FF FF FF FF FF    
   7319 00F4AC FF FF FF FF FF FF FF FF    
   7319 00F4B4 FF FF FF FF FF FF FF FF    
   7319 00F4BC FF FF FF FF FF FF FF FF    
   7319 00F4C4 FF FF FF FF FF FF FF FF    
   7319 00F4CC FF FF FF FF FF FF FF FF    
   7319 00F4D4 FF FF FF FF FF FF FF FF    
   7319 00F4DC FF FF FF FF FF FF FF FF    
   7319 00F4E4 FF FF FF FF FF FF FF FF    
   7319 00F4EC FF FF FF FF FF FF FF FF    
   7319 00F4F4 FF FF FF FF FF FF FF FF    
   7319 00F4FC FF FF FF FF FF FF FF FF    
   7319 00F504 FF FF FF FF FF FF FF FF    
   7319 00F50C FF FF FF FF FF FF FF FF    
   7319 00F514 FF FF FF FF FF FF FF FF    
   7319 00F51C FF FF FF FF FF FF FF FF    
   7319 00F524 FF FF FF FF FF FF FF FF    
   7319 00F52C FF FF FF FF FF FF FF FF    
   7319 00F534 FF FF FF FF FF FF FF FF    
   7319 00F53C FF FF FF FF FF FF FF FF    
   7319 00F544 FF FF FF FF FF FF FF FF    
   7319 00F54C FF FF FF FF FF FF FF FF    
   7319 00F554 FF FF FF FF FF FF FF FF    
   7319 00F55C FF FF FF FF FF FF FF FF    
   7319 00F564 FF FF FF FF FF FF FF FF    
   7319 00F56C FF FF FF FF FF FF FF FF    
   7319 00F574 FF FF FF FF FF FF FF FF    
   7319 00F57C FF FF FF FF FF FF FF FF    
   7319 00F584 FF FF FF FF FF FF FF FF    
   7319 00F58C FF FF FF FF FF FF FF FF    
   7319 00F594 FF FF FF FF FF FF FF FF    
   7319 00F59C FF FF FF FF FF FF FF FF    
   7319 00F5A4 FF FF FF FF FF FF FF FF    
   7319 00F5AC FF FF FF FF FF FF FF FF    
   7319 00F5B4 FF FF FF FF FF FF FF FF    
   7319 00F5BC FF FF FF FF FF FF FF FF    
   7319 00F5C4 FF FF FF FF FF FF FF FF    
   7319 00F5CC FF FF FF FF FF FF FF FF    
   7319 00F5D4 FF FF FF FF FF FF FF FF    
   7319 00F5DC FF FF FF FF FF FF FF FF    
   7319 00F5E4 FF FF FF FF FF FF FF FF    
   7319 00F5EC FF FF FF FF FF FF FF FF    
   7319 00F5F4 FF FF FF FF FF FF FF FF    
   7319 00F5FC FF FF FF FF FF FF FF FF    
   7319 00F604 FF FF FF FF FF FF FF FF    
   7319 00F60C FF FF FF FF FF FF FF FF    
   7319 00F614 FF FF FF FF FF FF FF FF    
   7319 00F61C FF FF FF FF FF FF FF FF    
   7319 00F624 FF FF FF FF FF FF FF FF    
   7319 00F62C FF FF FF FF FF FF FF FF    
   7319 00F634 FF FF FF FF FF FF FF FF    
   7319 00F63C FF FF FF FF FF FF FF FF    
   7319 00F644 FF FF FF FF FF FF FF FF    
   7319 00F64C FF FF FF FF FF FF FF FF    
   7319 00F654 FF FF FF FF FF FF FF FF    
   7319 00F65C FF FF FF FF FF FF FF FF    
   7319 00F664 FF FF FF FF FF FF FF FF    
   7319 00F66C FF FF FF FF FF FF FF FF    
   7319 00F674 FF FF FF FF FF FF FF FF    
   7319 00F67C FF FF FF FF FF FF FF FF    
   7319 00F684 FF FF FF FF FF FF FF FF    
   7319 00F68C FF FF FF FF FF FF FF FF    
   7319 00F694 FF FF FF FF FF FF FF FF    
   7319 00F69C FF FF FF FF FF FF FF FF    
   7319 00F6A4 FF FF FF FF FF FF FF FF    
   7319 00F6AC FF FF FF FF FF FF FF FF    
   7319 00F6B4 FF FF FF FF FF FF FF FF    
   7319 00F6BC FF FF FF FF FF FF FF FF    
   7319 00F6C4 FF FF FF FF FF FF FF FF    
   7319 00F6CC FF FF FF FF FF FF FF FF    
   7319 00F6D4 FF FF FF FF FF FF FF FF    
   7319 00F6DC FF FF FF FF FF FF FF FF    
   7319 00F6E4 FF FF FF FF FF FF FF FF    
   7319 00F6EC FF FF FF FF FF FF FF FF    
   7319 00F6F4 FF FF FF FF FF FF FF FF    
   7319 00F6FC FF FF FF FF FF FF FF FF    
   7319 00F704 FF FF FF FF FF FF FF FF    
   7319 00F70C FF FF FF FF FF FF FF FF    
   7319 00F714 FF FF FF FF FF FF FF FF    
   7319 00F71C FF FF FF FF FF FF FF FF    
   7319 00F724 FF FF FF FF FF FF FF FF    
   7319 00F72C FF FF FF FF FF FF FF FF    
   7319 00F734 FF FF FF FF FF FF FF FF    
   7319 00F73C FF FF FF FF FF FF FF FF    
   7319 00F744 FF FF FF FF FF FF FF FF    
   7319 00F74C FF FF FF FF FF FF FF FF    
   7319 00F754 FF FF FF FF FF FF FF FF    
   7319 00F75C FF FF FF FF FF FF FF FF    
   7319 00F764 FF FF FF FF FF FF FF FF    
   7319 00F76C FF FF FF FF FF FF FF FF    
   7319 00F774 FF FF FF FF FF FF FF FF    
   7319 00F77C FF FF FF FF FF FF FF FF    
   7319 00F784 FF FF FF FF FF FF FF FF    
   7319 00F78C FF FF FF FF FF FF FF FF    
   7319 00F794 FF FF FF FF FF FF FF FF    
   7319 00F79C FF FF FF FF FF FF FF FF    
   7319 00F7A4 FF FF FF FF FF FF FF FF    
   7319 00F7AC FF FF FF FF FF FF FF FF    
   7319 00F7B4 FF FF FF FF FF FF FF FF    
   7319 00F7BC FF FF FF FF FF FF FF FF    
   7319 00F7C4 FF FF FF FF FF FF FF FF    
   7319 00F7CC FF FF FF FF FF FF FF FF    
   7319 00F7D4 FF FF FF FF FF FF FF FF    
   7319 00F7DC FF FF FF FF FF FF FF FF    
   7319 00F7E4 FF FF FF FF FF FF FF FF    
   7319 00F7EC FF FF FF FF FF FF FF FF    
   7319 00F7F4 FF FF FF FF FF FF FF FF    
   7319 00F7FC FF FF FF FF FF FF FF FF    
   7319 00F804 FF FF FF FF FF FF FF FF    
   7319 00F80C FF FF FF FF FF FF FF FF    
   7319 00F814 FF FF FF FF FF FF FF FF    
   7319 00F81C FF FF FF FF FF FF FF FF    
   7319 00F824 FF FF FF FF FF FF FF FF    
   7319 00F82C FF FF FF FF FF FF FF FF    
   7319 00F834 FF FF FF FF FF FF FF FF    
   7319 00F83C FF FF FF FF FF FF FF FF    
   7319 00F844 FF FF FF FF FF FF FF FF    
   7319 00F84C FF FF FF FF FF FF FF FF    
   7319 00F854 FF FF FF FF FF FF FF FF    
   7319 00F85C FF FF FF FF FF FF FF FF    
   7319 00F864 FF FF FF FF FF FF FF FF    
   7319 00F86C FF FF FF FF FF FF FF FF    
   7319 00F874 FF FF FF FF FF FF FF FF    
   7319 00F87C FF FF FF FF FF FF FF FF    
   7319 00F884 FF FF FF FF FF FF FF FF    
   7319 00F88C FF FF FF FF FF FF FF FF    
   7319 00F894 FF FF FF FF FF FF FF FF    
   7319 00F89C FF FF FF FF FF FF FF FF    
   7319 00F8A4 FF FF FF FF FF FF FF FF    
   7319 00F8AC FF FF FF FF FF FF FF FF    
   7319 00F8B4 FF FF FF FF FF FF FF FF    
   7319 00F8BC FF FF FF FF FF FF FF FF    
   7319 00F8C4 FF FF FF FF FF FF FF FF    
   7319 00F8CC FF FF FF FF FF FF FF FF    
   7319 00F8D4 FF FF FF FF FF FF FF FF    
   7319 00F8DC FF FF FF FF FF FF FF FF    
   7319 00F8E4 FF FF FF FF FF FF FF FF    
   7319 00F8EC FF FF FF FF FF FF FF FF    
   7319 00F8F4 FF FF FF FF FF FF FF FF    
   7319 00F8FC FF FF FF FF FF FF FF FF    
   7319 00F904 FF FF FF FF FF FF FF FF    
   7319 00F90C FF FF FF FF FF FF FF FF    
   7319 00F914 FF FF FF FF FF FF FF FF    
   7319 00F91C FF FF FF FF FF FF FF FF    
   7319 00F924 FF FF FF FF FF FF FF FF    
   7319 00F92C FF FF FF FF FF FF FF FF    
   7319 00F934 FF FF FF FF FF FF FF FF    
   7319 00F93C FF FF FF FF FF FF FF FF    
   7319 00F944 FF FF FF FF FF FF FF FF    
   7319 00F94C FF FF FF FF FF FF FF FF    
   7319 00F954 FF FF FF FF FF FF FF FF    
   7319 00F95C FF FF FF FF FF FF FF FF    
   7319 00F964 FF FF FF FF FF FF FF FF    
   7319 00F96C FF FF FF FF FF FF FF FF    
   7319 00F974 FF FF FF FF FF FF FF FF    
   7319 00F97C FF FF FF FF FF FF FF FF    
   7319 00F984 FF FF FF FF FF FF FF FF    
   7319 00F98C FF FF FF FF FF FF FF FF    
   7319 00F994 FF FF FF FF FF FF FF FF    
   7319 00F99C FF FF FF FF FF FF FF FF    
   7319 00F9A4 FF FF FF FF FF FF FF FF    
   7319 00F9AC FF FF FF FF FF FF FF FF    
   7319 00F9B4 FF FF FF FF FF FF FF FF    
   7319 00F9BC FF FF FF FF FF FF FF FF    
   7319 00F9C4 FF FF FF FF FF FF FF FF    
   7319 00F9CC FF FF FF FF FF FF FF FF    
   7319 00F9D4 FF FF FF FF FF FF FF FF    
   7319 00F9DC FF FF FF FF FF FF FF FF    
   7319 00F9E4 FF FF FF FF FF FF FF FF    
   7319 00F9EC FF FF FF FF FF FF FF FF    
   7319 00F9F4 FF FF FF FF FF FF FF FF    
   7319 00F9FC FF FF FF FF FF FF FF FF    
   7319 00FA04 FF FF FF FF FF FF FF FF    
   7319 00FA0C FF FF FF FF FF FF FF FF    
   7319 00FA14 FF FF FF FF FF FF FF FF    
   7319 00FA1C FF FF FF FF FF FF FF FF    
   7319 00FA24 FF FF FF FF FF FF FF FF    
   7319 00FA2C FF FF FF FF FF FF FF FF    
   7319 00FA34 FF FF FF FF FF FF FF FF    
   7319 00FA3C FF FF FF FF FF FF FF FF    
   7319 00FA44 FF FF FF FF FF FF FF FF    
   7319 00FA4C FF FF FF FF FF FF FF FF    
   7319 00FA54 FF FF FF FF FF FF FF FF    
   7319 00FA5C FF FF FF FF FF FF FF FF    
   7319 00FA64 FF FF FF FF FF FF FF FF    
   7319 00FA6C FF FF FF FF FF FF FF FF    
   7319 00FA74 FF FF FF FF FF FF FF FF    
   7319 00FA7C FF FF FF FF FF FF FF FF    
   7319 00FA84 FF FF FF FF FF FF FF FF    
   7319 00FA8C FF FF FF FF FF FF FF FF    
   7319 00FA94 FF FF FF FF FF FF FF FF    
   7319 00FA9C FF FF FF FF FF FF FF FF    
   7319 00FAA4 FF FF FF FF FF FF FF FF    
   7319 00FAAC FF FF FF FF FF FF FF FF    
   7319 00FAB4 FF FF FF FF FF FF FF FF    
   7319 00FABC FF FF FF FF FF FF FF FF    
   7319 00FAC4 FF FF FF FF FF FF FF FF    
   7319 00FACC FF FF FF FF FF FF FF FF    
   7319 00FAD4 FF FF FF FF FF FF FF FF    
   7319 00FADC FF FF FF FF FF FF FF FF    
   7319 00FAE4 FF FF FF FF FF FF FF FF    
   7319 00FAEC FF FF FF FF FF FF FF FF    
   7319 00FAF4 FF FF FF FF FF FF FF FF    
   7319 00FAFC FF FF FF FF FF FF FF FF    
   7319 00FB04 FF FF FF FF FF FF FF FF    
   7319 00FB0C FF FF FF FF FF FF FF FF    
   7319 00FB14 FF FF FF FF FF FF FF FF    
   7319 00FB1C FF FF FF FF FF FF FF FF    
   7319 00FB24 FF FF FF FF FF FF FF FF    
   7319 00FB2C FF FF FF FF FF FF FF FF    
   7319 00FB34 FF FF FF FF FF FF FF FF    
   7319 00FB3C FF FF FF FF FF FF FF FF    
   7319 00FB44 FF FF FF FF FF FF FF FF    
   7319 00FB4C FF FF FF FF FF FF FF FF    
   7319 00FB54 FF FF FF FF FF FF FF FF    
   7319 00FB5C FF FF FF FF FF FF FF FF    
   7319 00FB64 FF FF FF FF FF FF FF FF    
   7319 00FB6C FF FF FF FF FF FF FF FF    
   7319 00FB74 FF FF FF FF FF FF FF FF    
   7319 00FB7C FF FF FF FF FF FF FF FF    
   7319 00FB84 FF FF FF FF FF FF FF FF    
   7319 00FB8C FF FF FF FF FF FF FF FF    
   7319 00FB94 FF FF FF FF FF FF FF FF    
   7319 00FB9C FF FF FF FF FF FF FF FF    
   7319 00FBA4 FF FF FF FF FF FF FF FF    
   7319 00FBAC FF FF FF FF FF FF FF FF    
   7319 00FBB4 FF FF FF FF FF FF FF FF    
   7319 00FBBC FF FF FF FF FF FF FF FF    
   7319 00FBC4 FF FF FF FF FF FF FF FF    
   7319 00FBCC FF FF FF FF FF FF FF FF    
   7319 00FBD4 FF FF FF FF FF FF FF FF    
   7319 00FBDC FF FF FF FF FF FF FF FF    
   7319 00FBE4 FF FF FF FF FF FF FF FF    
   7319 00FBEC FF FF FF FF FF FF FF FF    
   7319 00FBF4 FF FF FF FF FF FF FF FF    
   7319 00FBFC FF FF FF FF FF FF FF FF    
   7319 00FC04 FF FF FF FF FF FF FF FF    
   7319 00FC0C FF FF FF FF FF FF FF FF    
   7319 00FC14 FF FF FF FF FF FF FF FF    
   7319 00FC1C FF FF FF FF FF FF FF FF    
   7319 00FC24 FF FF FF FF FF FF FF FF    
   7319 00FC2C FF FF FF FF FF FF FF FF    
   7319 00FC34 FF FF FF FF FF FF FF FF    
   7319 00FC3C FF FF FF FF FF FF FF FF    
   7319 00FC44 FF FF FF FF FF FF FF FF    
   7319 00FC4C FF FF FF FF FF FF FF FF    
   7319 00FC54 FF FF FF FF FF FF FF FF    
   7319 00FC5C FF FF FF FF FF FF FF FF    
   7319 00FC64 FF FF FF FF FF FF FF FF    
   7319 00FC6C FF FF FF FF FF FF FF FF    
   7319 00FC74 FF FF FF FF FF FF FF FF    
   7319 00FC7C FF FF FF FF FF FF FF FF    
   7319 00FC84 FF FF FF FF FF FF FF FF    
   7319 00FC8C FF FF FF FF FF FF FF FF    
   7319 00FC94 FF FF FF FF FF FF FF FF    
   7319 00FC9C FF FF FF FF FF FF FF FF    
   7319 00FCA4 FF FF FF FF FF FF FF FF    
   7319 00FCAC FF FF FF FF FF FF FF FF    
   7319 00FCB4 FF FF FF FF FF FF FF FF    
   7319 00FCBC FF FF FF FF FF FF FF FF    
   7319 00FCC4 FF FF FF FF FF FF FF FF    
   7319 00FCCC FF FF FF FF FF FF FF FF    
   7319 00FCD4 FF FF FF FF FF FF FF FF    
   7319 00FCDC FF FF FF FF FF FF FF FF    
   7319 00FCE4 FF FF FF FF FF FF FF FF    
   7319 00FCEC FF FF FF FF FF FF FF FF    
   7319 00FCF4 FF FF FF FF FF FF FF FF    
   7319 00FCFC FF FF FF FF FF FF FF FF    
   7319 00FD04 FF FF FF FF FF FF FF FF    
   7319 00FD0C FF FF FF FF FF FF FF FF    
   7319 00FD14 FF FF FF FF FF FF FF FF    
   7319 00FD1C FF FF FF FF FF FF FF FF    
   7319 00FD24 FF FF FF FF FF FF FF FF    
   7319 00FD2C FF FF FF FF FF FF FF FF    
   7319 00FD34 FF FF FF FF FF FF FF FF    
   7319 00FD3C FF FF FF FF FF FF FF FF    
   7319 00FD44 FF FF FF FF FF FF FF FF    
   7319 00FD4C FF FF FF FF FF FF FF FF    
   7319 00FD54 FF FF FF FF FF FF FF FF    
   7319 00FD5C FF FF FF FF FF FF FF FF    
   7319 00FD64 FF FF FF FF FF FF FF FF    
   7319 00FD6C FF FF FF FF FF FF FF FF    
   7319 00FD74 FF FF FF FF FF FF FF FF    
   7319 00FD7C FF FF FF FF FF FF FF FF    
   7319 00FD84 FF FF FF FF FF FF FF FF    
   7319 00FD8C FF FF FF FF FF FF FF FF    
   7319 00FD94 FF FF FF FF FF FF FF FF    
   7319 00FD9C FF FF FF FF FF FF FF FF    
   7319 00FDA4 FF FF FF FF FF FF FF FF    
   7319 00FDAC FF FF FF FF FF FF FF FF    
   7319 00FDB4 FF FF FF FF FF FF FF FF    
   7319 00FDBC FF FF FF FF FF FF FF FF    
   7319 00FDC4 FF FF FF FF FF FF FF FF    
   7319 00FDCC FF FF FF FF FF FF FF FF    
   7319 00FDD4 FF FF FF FF FF FF FF FF    
   7319 00FDDC FF FF FF FF FF FF FF FF    
   7319 00FDE4 FF FF FF FF FF FF FF FF    
   7319 00FDEC FF FF FF FF FF FF FF FF    
   7319 00FDF4 FF FF FF FF FF FF FF FF    
   7319 00FDFC FF FF FF FF FF FF FF FF    
   7319 00FE04 FF FF FF FF FF FF FF FF    
   7319 00FE0C FF FF FF FF FF FF FF FF    
   7319 00FE14 FF FF FF FF FF FF FF FF    
   7319 00FE1C FF FF FF FF FF FF FF FF    
   7319 00FE24 FF FF FF FF FF FF FF FF    
   7319 00FE2C FF FF FF FF FF FF FF FF    
   7319 00FE34 FF FF FF FF FF FF FF FF    
   7319 00FE3C FF FF FF FF FF FF FF FF    
   7319 00FE44 FF FF FF FF FF FF FF FF    
   7319 00FE4C FF FF FF FF FF FF FF FF    
   7319 00FE54 FF FF FF FF FF FF FF FF    
   7319 00FE5C FF FF FF FF FF FF FF FF    
   7319 00FE64 FF FF FF FF FF FF FF FF    
   7319 00FE6C FF FF FF FF FF FF FF FF    
   7319 00FE74 FF FF FF FF FF FF FF FF    
   7319 00FE7C FF FF FF FF FF FF FF FF    
   7319 00FE84 FF FF FF FF FF FF FF FF    
   7319 00FE8C FF FF FF FF FF FF FF FF    
   7319 00FE94 FF FF FF FF FF FF FF FF    
   7319 00FE9C FF FF FF FF FF FF FF FF    
   7319 00FEA4 FF FF FF FF FF FF FF FF    
   7319 00FEAC FF FF FF FF FF FF FF FF    
   7319 00FEB4 FF FF FF FF FF FF FF FF    
   7319 00FEBC FF FF FF FF FF FF FF FF    
   7319 00FEC4 FF FF FF FF FF FF FF FF    
   7319 00FECC FF FF FF FF FF FF FF FF    
   7319 00FED4 FF FF FF FF FF FF FF FF    
   7319 00FEDC FF FF FF FF FF FF FF FF    
   7319 00FEE4 FF FF FF FF FF FF FF FF    
   7319 00FEEC FF FF FF FF FF FF FF FF    
   7319 00FEF4 FF FF FF FF FF FF FF FF    
   7319 00FEFC FF FF FF FF FF FF FF FF    
   7319 00FF04 FF FF FF FF FF FF FF FF    
   7319 00FF0C FF FF FF FF FF FF FF FF    
   7319 00FF14 FF FF FF FF FF FF FF FF    
   7319 00FF1C FF FF FF FF FF FF FF FF    
   7319 00FF24 FF FF FF FF FF FF FF FF    
   7319 00FF2C FF FF FF FF FF FF FF FF    
   7319 00FF34 FF FF FF FF FF FF FF FF    
   7319 00FF3C FF FF FF FF FF FF FF FF    
   7319 00FF44 FF FF FF FF FF FF FF FF    
   7319 00FF4C FF FF FF FF FF FF FF FF    
   7319 00FF54 FF FF FF FF FF FF FF FF    
   7319 00FF5C FF FF FF FF FF FF FF FF    
   7319 00FF64 FF FF FF FF FF FF FF FF    
   7319 00FF6C FF FF FF FF FF FF FF FF    
   7319 00FF74 FF FF FF FF FF FF FF FF    
   7319 00FF7C FF FF FF FF FF FF FF FF    
   7319 00FF84 FF FF FF FF FF FF FF FF    
   7319 00FF8C FF FF FF FF FF FF FF FF    
   7319 00FF94 FF FF FF FF FF FF FF FF    
   7319 00FF9C FF FF FF FF FF FF FF FF    
   7319 00FFA4 FF FF FF FF FF FF FF FF    
   7319 00FFAC FF FF FF FF FF FF FF FF    
   7319 00FFB4 FF FF FF FF FF FF FF FF    
   7319 00FFBC FF FF FF FF FF FF FF FF    
   7319 00FFC4 FF FF FF FF FF FF FF FF    
   7319 00FFCC FF FF FF FF FF FF FF FF    
   7319 00FFD4 FF FF FF FF FF FF FF FF    
   7319 00FFDC FF FF FF FF FF FF FF FF    
   7319 00FFE4 FF FF                      
   7320 00FFE6 96 EB                        	dw		BrkRout
                                           
   7322 00FFE8 FF FF FF FF FF FF            	.org	$FFEE		; IRQ vector
   7323 00FFEE 79 EB                        	dw		IRQRout
                                           
   7325 00FFF0 FF FF FF FF FF FF FF FF      	.org	$FFFC
   7325 00FFF8 FF FF FF FF                
   7326 00FFFC 00 E0                        	dw		$E000

Checksum=AE837196

Number of instructions processed: 2763
Number of opcode bytes: 5695
Bytes per instruction: 2.061165 (16.489323 bits)
Clock cycle count: 4712
Clocks per instruction: 1.705393

The above statistics are only estimates.

	The CPI assumes data memory access requires two clock cycles and instruction
	access is single cycle. The actual CPI may be higher if there are memory wait 
	states, or lower if data is found in the cache.
