Finitron FT832 assembler   version 1.4   Sat Nov 21 03:52:07 2015     Page 1
FTBios816.asm

                                        ; ============================================================================
                                        ; FTBios816.asm
                                        ;        __
                                        ;   \\__/ o\    (C) 2014  Robert Finch, Stratford
                                        ;    \  __ /    All rights reserved.
                                        ;     \/_//     robfinch<remove>@finitron.ca
                                        ;       ||
                                        ;  
                                        ;
                                        ; This source file is free software: you can redistribute it and/or modify 
                                        ; it under the terms of the GNU Lesser General Public License as published 
                                        ; by the Free Software Foundation, either version 3 of the License, or     
                                        ; (at your option) any later version.                                      
                                        ;                                                                          
                                        ; This source file is distributed in the hope that it will be useful,      
                                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                                        ; GNU General Public License for more details.                             
                                        ;                                                                          
                                        ; You should have received a copy of the GNU General Public License        
                                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                                        ;                                                                          
                                        ; ============================================================================
                                        ;
     25 = 000000000000000D                            CR			EQU		13
     26 = 000000000000000A                            LF			EQU		10
     27 = 000000000000001B                            ESC			EQU		$1B
     28 = 0000000000000008                            BS			EQU		8
     29 = 0000000000000003                            CTRLC		EQU		3
                                        
     31 = 0000000000000012                            SC_LSHIFT	EQU		$12
     32 = 0000000000000059                            SC_RSHIFT	EQU		$59
     33 = 00000000000000F0                            SC_KEYUP	EQU		$F0
     34 = 00000000000000E0                            SC_EXTEND	EQU		$E0
     35 = 0000000000000014                            SC_CTRL		EQU		$14
     36 = 0000000000000011                            SC_ALT		EQU		$11
     37 = 0000000000000071                            SC_DEL		EQU		$71		; extend
     38 = 0000000000000058                            SC_LCTRL	EQU		$58
     39 = 0000000000000077                            SC_NUMLOCK	EQU		$77
     40 = 000000000000007E                            SC_SCROLLLOCK	EQU	$7E
     41 = 0000000000000058                            SC_CAPSLOCK	EQU		$58
                                        
     43 = 000000000000001F                            TEXTROWS	EQU		31
     44 = 0000000000000054                            TEXTCOLS	EQU		84
                                        
     46 = 0000000000000004                            TickCount	EQU		$4
     47 = 0000000000000008                            KeyState1	EQU		$8
     48 = 0000000000000009                            KeyState2	EQU		$9
     49 = 000000000000000A                            KeybdLEDs	EQU		$A
     50 = 000000000000000B                            KeybdWaitFlag	EQU	$B
     51 = 000000000000000C                            NumWorkArea	EQU		$C
                                        
                                        ; Range $10 to $1F reserved for hardware counters
     54 = 0000000000000010                            CNT0L		EQU		$10
     55 = 0000000000000011                            CNT0M		EQU		$11
     56 = 0000000000000012                            CNT0H		EQU		$12
     57 = 0000000000000020                            RangeStart	EQU		$20
     58 = 0000000000000024                            RangeEnd	EQU		$24
     59 = 0000000000000030                            CursorX		EQU		$30
     60 = 0000000000000032                            CursorY		EQU		$32
     61 = 0000000000000034                            VideoPos	EQU		$34
     62 = 0000000000000036                            NormAttr	EQU		$36
     63 = 0000000000000038                            StringPos	EQU		$38
     64 = 000000000000003C                            EscState	EQU		$3C
                                        
     66 = 0000000000000080                            reg_cs		EQU		$80
     67 = 00000084                      reg_ds		EQU		reg_cs + 4
     68 = 00000088                      reg_pc		EQU		reg_ds + 4
     69 = 0000008C                      reg_a		EQU		reg_pc + 4
     70 = 00000090                      reg_x		EQU		reg_a + 4
     71 = 00000094                      reg_y		EQU		reg_x + 4
     72 = 00000098                      reg_sp		EQU		reg_y + 4
     73 = 0000009C                      reg_sr		EQU		reg_sp + 4
     74 = 000000A0                      reg_db		EQU		reg_sr + 4
     75 = 000000A4                      reg_dp		EQU		reg_db + 4
     76 = 000000A8                      reg_bl		EQU		reg_dp + 4
                                        
     78 = 0000000000000080                            cs_save		EQU		$80
     79 = 0000000000000084                            ds_save		EQU		$84
     80 = 0000000000000088                            pc_save		EQU		$88
     81 = 000000000000008C                            pb_save		EQU		$8C
     82 = 0000000000000090                            acc_save	EQU		$90
     83 = 0000000000000094                            x_save		EQU		$94
     84 = 0000000000000098                            y_save		EQU		$98
     85 = 000000000000009C                            sp_save		EQU		$9C
     86 = 00000000000000A0                            sr_save		EQU		$A0
     87 = 00000000000000A4                            srx_save	EQU		$A4
     88 = 00000000000000A8                            db_save		EQU		$A8
     89 = 00000000000000AC                            dpr_save	EQU		$AC
                                        
     91 = 00000000000000B4                            running_task	EQU		$B4
                                        
     93 = 00000000000000B6                            keybd_char	EQU		$B6
     94 = 00000000000000B8                            keybd_cmd	EQU		$B8
     95 = 00000000000000BA                            WorkTR		EQU		$BA
     96 = 0000000000000100                            ldtrec		EQU		$100
                                        
     98 = 00000000000003F0                            OutputVec	EQU		$03F0
                                        
    100 = 000000000000B000                            PCS0		EQU		$B000
    101 = 0000B002                      PCS1		EQU		PCS0 + 2
    102 = 0000B004                      PCS2		EQU		PCS1 + 2
    103 = 0000B006                      PCS3		EQU		PCS2 + 2
    104 = 0000B008                      PCS4	    EQU		PCS3 + 2
    105 = 0000B00A                      PCS5		EQU		PCS4 + 2
    106 = 0000B010                      CTR0_LMT	EQU		PCS0 + 16
    107 = 00000003                      CTR0_CTRL	EQU		CTR_LMT + 3
    108 = 00000004                      CTR1_LMT	EQU		CTR0_CTRL + 1
    109 = 00000007                      CTR1_CTRL	EQU		CTR1_LMT + 3
                                        
    111 = 0000000000FD0000                            VIDBUF		EQU		$FD0000
    112 = 0000000000FEA000                            VIDREGS		EQU		$FEA000
    113 = 0000000000FEA100                            PRNG		EQU		$FEA100
    114 = 0000000000FEA110                            KEYBD		EQU		$FEA110
    115 = 0000000000FEA200                            FAC1		EQU		$FEA200
                                        
    117 = 0000000000007868                            do_invaders			EQU		$7868
                                        
Finitron FT832 assembler   version 1.4   Sat Nov 21 03:52:07 2015     Page 1
supermon832.asm

                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;	.opt proc65c02,caseinsensitive
                                        	cpu	W65C02
                                        ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                                        ;*                                                                                 *
                                        ;*      SUPERMON 816 MACHINE LANGUAGE MONITOR FOR THE W65C816S MICROPROCESSOR      *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;*      Copyright ©1991-2014 by BCS Technology Limited.  All rights reserved.      *
                                        ;*                                                                                 *
                                        ;* Permission is hereby granted to use, copy, modify and distribute this software, *
                                        ;* provided this copyright notice remains in the source code and  proper  attribu- *
                                        ;* tion is given.  Redistribution, regardless of form, must be at no charge to the *
                                        ;* end  user.  This code or any part thereof, including any derivation, MAY NOT be *
                                        ;* incorporated into any package intended for sale,  unless written permission has * 
                                        ;* been given by the copyright holder.                                             *
                                        ;*                                                                                 *
                                        ;* THERE IS NO WARRANTY OF ANY KIND WITH THIS SOFTWARE.  The user assumes all risk *
                                        ;* in connection with the incorporation of this software into any system.          *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;* Supermon 816 is a salute to Jim Butterfield, who passed away on June 29, 2007.  *
                                        ;*                                                                                 *
                                        ;* Jim, who was the unofficial  spokesman for  Commodore  International during the *  
                                        ;* heyday of the company's 8 bit supremacy, scratch-developed the Supermon machine *
                                        ;* language monitor for the PET & CBM computers.   When the best-selling Commodore *
                                        ;* 64 was introduced, Jim adapted his software to the new machine & gave the adap- *
                                        ;* tation the name Supermon 64.   Commodore  subsequently  integrated a customized *
                                        ;* version of Supermon 64 into the C-128 to act as the resident M/L monitor.       *
                                        ;*                                                                                 *
                                        ;* Although Supermon 816 is not an adaptation of Supermon 64,  it was  decided  to *
                                        ;* keep the Supermon name alive, since Supermon 816's general operation & user in- *
                                        ;* terface is similar to that of Supermon 64.   Supermon 816 is 100 percent native *
                                        ;* mode 65C816 code & was developed from a blank canvas.                           *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;* This version customized for the RTF65002 test system                            *
                                        ;* Finitron.ca                                                                     *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;* Supermon 816 is a full featured monitor and supports the following operations:  *
                                        ;*                                                                                 *
                                        ;*     A — Assemble code                                                           *
                                        ;*     C — Compare memory regions                                                  *
                                        ;*     D — Disassemble code                                                        *
                                        ;*     F — Fill memory region (cannot span banks)                                  *
                                        ;*     G — Execute code (stops at BRK)                                             *
                                        ;*     H — Search (hunt) memory region                                             *
                                        ;*     J — Execute code as a subroutine (stops at BRK or RTS)                      *
                                        ;*     M — Dump & display memory range                                             *
                                        ;*     R — Dump & display 65C816 registers                                         *
                                        ;*     T — Copy (transfer) memory region                                           *
                                        ;*     X — Exit Supermon 816 & return to operating environment                     *
                                        ;*     > — Modify up to 32 bytes of memory                                         *
                                        ;*     ; — Modify 65C816 registers                                                 *
                                        ;*                                                                                 *
                                        ;* Supermon 816 accepts binary (%), octal (@), decimal (+) and hexadecimal ($) as  *
                                        ;* input for numeric parameters.  Additionally, the H and > operations accept an   *
                                        ;* ASCII string in place of numeric values by preceding the string with ', e.g.:   *
                                        ;*                                                                                 *
                                        ;*     h 042000 042FFF 'BCS Technology Limited                                     *
                                        ;*                                                                                 *
                                        ;* If no radix symbol is entered hex is assumed.                                   *
                                        ;*                                                                                 *
                                        ;* Numeric conversion is also available.  For example, typing:                     *
                                        ;*                                                                                 *
                                        ;*     +1234567 <CR>                                                               *
                                        ;*                                                                                 *
                                        ;* will display:                                                                   *
                                        ;*                                                                                 *
                                        ;*         $12D687                                                                 *
                                        ;*         +1234567                                                                *
                                        ;*         @04553207                                                               *
                                        ;*         %100101101011010000111                                                  *
                                        ;*                                                                                 *
                                        ;* In the above example, <CR> means the console keyboard's return or enter key.    *
                                        ;*                                                                                 *
                                        ;* All numeric values are internally processed as 32 bit unsigned integers.  Addr- *
                                        ;* esses may be entered as 8, 16 or 24 bit values.  During instruction assembly,   *
                                        ;* immediate mode operands may be forced to 16 bits by preceding the operand with  *
                                        ;* an exclamation point if the instruction can accept a 16 bit operand, e.g.:      *
                                        ;*                                                                                 *
                                        ;*     a 1f2000 lda !#4                                                            *
                                        ;*                                                                                 *
                                        ;* The above will assemble as:                                                     *
                                        ;*                                                                                 *
                                        ;*     A 1F2000  A9 04 00     LDA #$0004                                           *
                                        ;*                                                                                 *
                                        ;* Entering:                                                                       *
                                        ;*                                                                                 *
                                        ;*     a 1f2000 ldx !#+157                                                         *
                                        ;*                                                                                 *
                                        ;* will assemble as:                                                               *
                                        ;*                                                                                 *
                                        ;*     A 1F2000  A2 9D 00     LDX #$009D                                           *
                                        ;*                                                                                 *
                                        ;* Absent the ! in the operand field, the above would have been assembled as:      *
                                        ;*                                                                                 *
                                        ;*     A 1F2000  A2 9D        LDX #$9D                                             *
                                        ;*                                                                                 *
                                        ;* If an immediate mode operand is greater than $FF assembly of a 16 bit operand   *
                                        ;* is implied.                                                                     *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;* A Note on the PEA & PEI Instructions                                            *
                                        ;* ————————————————————————————————————                                            *
                                        ;*                                                                                 *
                                        ;* The Eyes and Lichty programming manual uses the following syntax for the PEA    *
                                        ;* and PEI instructions:                                                           *
                                        ;*                                                                                 *
                                        ;*     PEA <operand>                                                               *
                                        ;*     PEI (<operand>)                                                             *
                                        ;*                                                                                 *
                                        ;* The WDC data sheet that was published at the time of the 65C816's release in    *
                                        ;* 1984 does not indicate a recommended or preferred syntax for any of the above   *
                                        ;* instructions.  PEA pushes its operand to the stack and hence operates like any  *
                                        ;* other immediate mode instruction, in that the operand is the data (however, PEA *
                                        ;* doesn't affect the status register).  Similarly, PEI pushes the 16 bit value    *
                                        ;* stored at <operand> and <operand>+1, and hence operates like any other direct   *
                                        ;* (zero) page instruction, again without affecting the status register.           *
                                        ;*                                                                                 *
                                        ;* BCS Technology Limited is of the opinion that the developer of the ORCA/M as-   *
                                        ;* sembler, which is the assembler referred to in the Eyes and Lichty manual, mis- *
                                        ;* understood how PEA and PEI behave during runtime, and hence chose an incorrect  *
                                        ;* syntax for these two instructions.  This error was subsequently carried forward *
                                        ;* by Eyes and Lichty.                                                             *
                                        ;*                                                                                 *
                                        ;* Supermon 816's assembler uses the following syntax for PEA and PEI:             *
                                        ;*                                                                                 *
                                        ;*     PEA #<operand>                                                              *
                                        ;*     PEI <operand>                                                               *
                                        ;*                                                                                 *
                                        ;* The operand for PEA is treated as a 16 bit value, even if entered as an 8 bit   *
                                        ;* value.  The operand for PEI must be 8 bits.                                     *
                                        ;*                                                                                 *
                                        ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                                        ;
                                        ;	* * * * * * * * * * * *
                                        ;	* VERSION INFORMATION *
                                        ;	* * * * * * * * * * * *
                                        ;
                                        softvers .macro                ;software version — change with each revision...
                                                 .byte "1"             ;major
                                                 .byte "."
                                                 .byte "0"             ;minor
                                                 .byte "."
                                                 .byte "0"             ;revision
                                                 .endm
                                        ;
                                        ;REVISION TABLE
                                        ;
                                        ;Ver  Rev Date    Description
                                        ;———————————————————————————————————————————————————————————————————————————————
                                        ;1.0  2013/11/01  A) Original derived from the POC V1.1 single-board computer
                                        ;                    firmware.
                                        ;     2013/11/04  A) Fixed a problem where the B-accumulator wasn't always being
                                        ;                    be copied to shadow storage after return from execution of
                                        ;                    a J command.
                                        ;———————————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;
                                        ;	        COMMENT ABBREVIATIONS
                                        ;	————————————————————————————————————————————————————
                                        ;	  BCD   binary-coded decimal
                                        ;	   DP   direct page or page zero
                                        ;	  EOF   end-of-field
                                        ;	  EOI   end-of-input
                                        ;	  LSB   least significant byte/bit
                                        ;	  LSD   least significant digit
                                        ;	  LSN   least significant nybble
                                        ;	  LSW   least significant word
                                        ;	  MPU   microprocessor
                                        ;	  MSB   most significant byte/bit
                                        ;	  MSD   most significant digit
                                        ;	  MSN   most significant nybble
                                        ;	  MSW   most-significant word
                                        ;	  RAM   random access memory
                                        ;	   WS   whitespace, i.e., blanks & horizontal tabs
                                        ;	————————————————————————————————————————————————————
                                        ;	A word is defined as 16 bits.
                                        ;
                                        ;	   MPU REGISTER SYMBOLS
                                        ;	——————————————————————————
                                        ;	   .A   accumulator LSB
                                        ;	   .B   accumulator MSB
                                        ;	   .C   16 bit accumulator
                                        ;	   .X   X-index
                                        ;	   .Y   Y-index
                                        ;      DS   data segment
                                        ;	   DB   data bank
                                        ;	   DP   direct page
                                        ;      CS   code segment
                                        ;	   PB   program bank
                                        ;	   PC   program counter
                                        ;	   SP   stack pointer
                                        ;	   SR   MPU status
                                        ;      SRX  status extension
                                        ;	————————————————————————————
                                        ;
                                        ;	  MPU STATUS REGISTER SYMBOLS
                                        ;	———————————————————————————————
                                        ;	    C   carry
                                        ;	    D   decimal mode
                                        ;	    I   maskable interrupts
                                        ;	    m   accumulator/memory size
                                        ;	    N   result negative
                                        ;	    V   sign overflow
                                        ;	    x   index registers size
                                        ;	    Z   result zero
                                        ;
                                        ;      16   16 bit emulation flag
                                        ;      32   32 bit emulation flag
                                        ;	———————————————————————————————
                                        ;
                                        ;================================================================================
                                        ;
                                        ;SYSTEM INTERFACE DEFINITIONS
                                        ;
                                        ;	——————————————————————————————————————————————————————————————————
                                        ;	This section defines the interface between Supermon 816 & the host
                                        ;	system.   Change these definitions to suit your system, but do not
                                        ;	change any label names.  All definitions must have valid values in
                                        ;	order to assemble Supermon 816.
                                        ;	——————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————
    340 = 000000000000C000                            _origin_ =$00C000              ;assembly address...
                                        ;
                                        ;	Set _ORIGIN_ to Supermon 816's desired assembly address.
                                        ;	————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    346 = 000000000000F403                            vecexit  =$00F403              ;exit to environment address...
                                        ;
                                        ;	Set VECEXIT to where Supermon 816 should go when it exits.  Supermon 816
                                        ;	will do a JML (long jump) to this address, which means VECEXIT must be a
                                        ;	24 bit address.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    354 = 0000000000000102                            vecbrki  =$0102                ;BRK handler indirect vector...
    355 = 0000000000000105                            vecbrkia =$0105                ;system indirect BRK vector
                                        ;
                                        ;	Supermon 816 will modify this vector so that execution of a BRK instruc-
                                        ;	tion is intercepted & the registers  are  captured.   Your BRK front end
                                        ;	should jump through this vector after pushing the registers as follows:
                                        ;
                                        ;	         phb                   ;save DB
                                        ;	         phd                   ;save DP
                                        ;	         rep #%00110000        ;16 bit registers
                                        ;	         pha
                                        ;	         phx
                                        ;	         phy
                                        ;	         jmp (vecbrki)         ;indirect vector
                                        ;
                                        ;	When a G or J command is issued, the above sequence will be reversed be-
                                        ;	fore a jump is made to the code to be executed.  Upon exit from Supermon
                                        ;	816, the original address at VECBRKI will be restored.
                                        ;
                                        ;	If your BRK front end doesn't conform to the above you will have to mod-
                                        ;	ify Supermon 816 to accommodate the differences.  The most likely needed
                                        ;	changes will be in the order in which registers are pushed to the stack.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    379 = 0000000000003FFF                            hwstack  =$3fff                ;top of hardware stack...
                                        ;
                                        ;	Supermon 816 initializes the stack pointer to this address when the cold
                                        ;	start at MONCOLD is called to enter the monitor.  The stack pointer will
                                        ;	be undisturbed when entry into Supermon 816 is through JMONBRK (see jump
                                        ;	table definitions).
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    388 = 0000000000000080                            zeropage =$80                  ;Supermon 816's direct page...
                                        ;
                                        ;	Supermon 816 uses direct page starting at this address.  Be sure that no
                                        ;	conflict occurs with other software.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    395 = 000000000000F400                            getcha   =$F400                ;get keystroke from console...
                                        ;
                                        ;	GETCHA refers to an operating system API call that returns a keystroke
                                        ;	in the 8 bit accumulator.  Supermon 816  assumes that GETCHA is a non-
                                        ;	blocking subroutine & returns with carry clear to indicate that a key-
                                        ;	stroke is in .A, or with carry set to indicate that no keystroke was
                                        ;	available.  GETCHA will be called with a JSR instruction.
                                        ;
                                        ;	Supermon 816 expects .X & .Y to be preserved upon return from GETCHA.
                                        ;	You may have to modify Supermon 816 at all calls to GETCHA if your "get
                                        ;	keystroke" routine works differently than described.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    409 = 000000000000F406                            putcha   =$F406                ;print character on console...
                                        ;
                                        ;	PUTCHA refers to an operating system API call that prints a character to
                                        ;	the console screen.  The character to be printed will be in .A, which
                                        ;	will be set to 8-bit width.  Supermon 816 assumes that PUTCHA will block
                                        ;	until the character can be processed.  PUTCHA will be called with a JSR
                                        ;	instructions.
                                        ;
                                        ;	Supermon 816 expects .X & .Y to be preserved upon return from PUTCHA.
                                        ;	You may have to modify Supermon 816 at all calls to PUTCHA if your "put
                                        ;	character" routine works differently than described.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    423 = 0000000000000003                            stopkey  =$03                  ;display abort key...
                                        ;
                                        ;	Supermon 816 will poll for a "stop key" during display operations, such
                                        ;	as code disassembly & memory dumps, so as to abort further processing &
                                        ;	return to the command prompt.  STOPKEY must be defined with the ASCII
                                        ;	value that the "stop key" will emit when typed.  The polling is via a
                                        ;	call to GETCHA (described above).  The default STOPKEY definition of $03
                                        ;	is for ASCII <ETX> or [Ctrl-C].
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
    433 = 0000000000000200                            ibuffer  =$000200               ;input buffer &...
    434 = 00000251                      auxbuf   =ibuffer+s_ibuf+1 ;auxiliary buffer...
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	Supermon 816 will use the above definitions for input buffers.  These
                                        ;	buffers may be located anywhere in RAM that is convenient.  The buffers
                                        ;	are stateless, which means that unless Supermon 816 has control of your
                                        ;	system, they may be overwritten without consequence.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;================================================================================
                                        ;
                                        ;W65C816S INSTRUCTION SYNTHESIS MACROS —— !!!!! DO NOT EDIT !!!!!
                                        ;
                                        _asm24_  .macro .ad
                                                 .byte <.ad,>.ad,.ad >> 16
                                                 .endm
                                        ;
                                        brl      .macro .ad
                                        .ba      =*+3
                                                 .byte $82
                                                 .word .ad-.ba
                                                 .endm
                                        ;
                                        ; jml is supported for the RTF65002 in 65c02 mode. And the opcode is supported
                                        ; by the assembler.
                                        ;jml      .macro .ad
                                        ; ;        .byte $5c
                                        ;         _asm24_ .ad
                                        ;         .endm
                                        ;
                                        mvn      .macro .s,.d
                                                 .byte $54,.d,.s
                                                 .endm
                                        ;
                                        mvp      .macro .s,.d
                                                 .byte $44,.d,.s
                                                 .endm
                                        ;
                                        pea      .macro .op
                                                 .byte $f4
                                                 .word .op
                                                 .endm
                                        ;
                                        phb      .macro
                                                 .byte $8b
                                                 .endm
                                        ;
                                        phk      .macro
                                                 .byte $4b
                                                 .endm
                                        ;
                                        plb      .macro
                                                 .byte $ab
                                                 .endm
                                        ;
                                        rep      .macro .op
                                                 .byte $c2,.op
                                                 .endm
                                        ;
                                        sep      .macro .op
                                                 .byte $e2,.op
                                                 .endm
                                        ;
                                        tcd      .macro
                                                 .byte $5b
                                                 .endm
                                        ;
                                        tcs      .macro
                                                 .byte $1b
                                                 .endm
                                        ;
                                        tdc      .macro
                                                 .byte $7b
                                                 .endm
                                        ;
                                        tsc      .macro
                                                 .byte $3b
                                                 .endm
                                        ;
                                        txy      .macro
                                                 .byte $9b
                                                 .endm
                                        ;
                                        tyx      .macro
                                                 .byte $bb
                                                 .endm
                                        ;
                                        wai      .macro
                                                 .byte $cb
                                                 .endm
                                        ;
                                        xba      .macro
                                                 .byte $eb
                                                 .endm
                                        ;
                                        adcw     .macro .op
                                                 adc #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        andw     .macro .op
                                                 and #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        bitw     .macro .op
                                                 bit #<.op
                                                 .byte >.op
                                                 .endm
                                        ;         
                                        cmpw     .macro .op
                                                 cmp #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        cpxw     .macro .op
                                                 cpx #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        cpyw     .macro .op
                                                 cpy #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        eorw     .macro .op
                                                 eor #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        ldaw     .macro .op
                                                 lda #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        ldxw     .macro .op
                                                 ldx #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        ldyw     .macro .op
                                                 ldy #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        oraw     .macro .op
                                                 ora #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        sbcw     .macro .op
                                                 sbc #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        ldalx    .macro .ad
                                                 .byte $+         .byte a_esc,"("
                                     +            .byte a_esc,"G4"
                                        
                                     +            .byte <.ad,>.ad,.ad >> 16
                                        
                                                 .endm
                                        ;
                                        adcil    .macro .ad
                                                 .byte $67,.ad
                                                 .endm
                                        ;
                                        adcily   .macro .ad
                                                 .byte $77,.ad
                                                 .endm
                                        ;
                                        andil    .macro .ad
                                                 .byte $27,.ad
                                                 .endm
                                        ;
                                        andily   .macro .ad
                                                 .byte $37,.ad
                                                 .endm
                                        ;
                                        cmpil    .macro .ad
                                                 .byte $c7,.ad
                                                 .endm
                                        ;
                                        cmpily   .macro .ad
                                                 .byte $d7,.ad
                                                 .endm
                                        ;
                                        eoril    .macro .ad
                                                 .byte $47,.ad
                                                 .endm
                                        ;
                                        eorily   .macro .ad
                                                 .byte $57,.ad
                                                 .endm
                                        ;
                                        ldail    .macro .ad
                                                 .byte $a7,.ad
                                                 .endm
                                        ;
                                        ldaily   .macro .ad
                                                 .byte $b7,.ad
                                                 .endm
                                        ;
                                        orail    .macro .ad
                                                 .byte $07,.ad
                                                 .endm
                                        ;
                                        oraily   .macro .ad
                                                 .byte $17,.ad
                                                 .endm
                                        ;
                                        sbcil    .macro .ad
                                                 .byte $e7,.ad
                                                 .endm
                                        ;
                                        sbcily   .macro .ad
                                                 .byte $f7,.ad
                                                 .endm
                                        ;
                                        stail    .macro .ad
                                                 .byte $87,.ad
                                                 .endm
                                        ;
                                        staily   .macro .ad
                                                 .byte $97,.ad
                                                 .endm
                                        ;
                                        adcs     .macro .of
                                                 .byte $63,.of
                                                 .endm
                                        ;
                                        adcsi    .macro .of
                                                 .byte $73,.of
                                                 .endm
                                        ;
                                        ands     .macro .of
                                                 .byte $23,.of
                                                 .endm
                                        ;
                                        andsi    .macro .of
                                                 .byte $33,.of
                                                 .endm
                                        ;
                                        cmps     .macro .of
                                                 .byte $c3,.of
                                                 .endm
                                        ;
                                        cmpsi    .macro .of
                                                 .byte $d3,.of
                                                 .endm
                                        ;
                                        eors     .macro .of
                                                 .byte $43,.of
                                                 .endm
                                        ;
                                        eorsi    .macro .of
                                                 .byte $53,.of
                                                 .endm
                                        ;
                                        ldas     .macro .of
                                                 .byte $a3,.of
                                                 .endm
                                        ;
                                        ldasi    .macro .of
                                                 .byte $b3,.of
                                                 .endm
                                        ;
                                        oras     .macro .of
                                                 .byte $03,.of
                                                 .endm
                                        ;
                                        orasi    .macro .of
                                                 .byte $13,.of
                                                 .endm
                                        ;
                                        sbcs     .macro .of
                                                 .byte $e3,.of
                                                 .endm
                                        ;
                                        sbcsi    .macro .of
                                                 .byte $f3,.of
                                                 .endm
                                        ;
                                        stas     .macro .of
                                                 .byte $83,.of
                                                 .endm
                                        ;
                                        stasi    .macro .of
                                                 .byte $93,.of
                                                 .endm
                                        ;
                                        longa    .macro
                                                 .byte $c2,$20
                                                 .endm
                                        ;
                                        longr    .macro
                                                 .byte $c2,$30
                                                 .endm
                                        ;
                                        longx    .macro
                                                 .byte $c2,$10
                                                 .endm
                                        ;
                                        shorta   .macro
                                                 .byte $e2,$20
                                                 .endm
                                        ;
                                        shorti   .macro
                                                 .byte $e2,$10
                                                 .endm
                                        ;
                                        shortr   .macro
                                                 .byte $e2,$30
                                                 .endm
                                        ;
                                        shortx   .macro
                                                 .byte $e2,$10
                                                 .endm
                                        ;
                                        ;================================================================================
                                        ;
                                        ;CONSOLE DISPLAY CONTROL MACROS
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	The following macros execute terminal  control procedures  that  perform
                                        ;	such tasks as clearing the screen,  switching  between  normal & reverse
                                        ;	video, etc.  These macros are for WYSE 60 & compatible displays, such as
                                        ;	the WYSE 150, WYSE 160, WYSE 325 & WYSE GPT.   Only the functions needed
                                        ;	by Supermon 816 are included.
                                        ;
                                        ;	If your console is not WYSE 60 compatible, you will need to  edit  these
                                        ;	macros as required to control your particular console or terminal.  Note
                                        ;	that in some cases one macro may call another.  Exercise caution in your
                                        ;	edits to avoid introducing display bugs.
                                        ;
                                        ;	If your console display cannot execute one of these procedures,  such as
                                        ;	'CL' (clear to end of line), you will have to develop an alternative.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;
                                        ;	clearing data...
                                        ;
                                        bs       .macro                ;destructive backspace
                                                 .byte a_bs
                                     +            .byte a_esc,"W"
                                        
                                                 .endm
                                        ;
                                        cl       .macro                ;clear to end of line 
                                                 .byte a_esc,"T"
                                                 .endm
                                        ;
                                        ;
                                        ;	cursor control...
                                        ;
                                        cn       .macro                ;cursor on
                                                 .byte a_esc,"`1"
                                                 .endm
                                        ;
                                        co       .macro                ;cursor off
                                                 .byte a_esc,"`0"
                                                 .endm
                                        ;
                                        cr       .macro                ;carriage return
                                                 .byte a_cr
                                                 .endm
                                        ;
                                        lf       .macro                ;carriage return/line feed
                                     +            .byte a_cr
                                        
                                                 .byte a_lf
                                                 .endm
                                        ;
                                        ;
                                        ;	display attributes...
                                        ;
                                        bf       .macro                ;reverse foreground
                                                 .byte a_esc,"("
                                                 .byte a_esc,"G4"
                                                 .endm
                                        ;
                                        er       .macro                ;enable normal foreground
                                                 .byte a_esc,"("
                                                 .byte a_esc,"G0"
                                                 .endm
                                        ;
                                        sf       .macro                ;set foreground
                                                 .byte a_esc,"("
                                                 .byte a_esc,"G0"
                                                 .endm
                                        ;
                                        ;
                                        ;	display editing...
                                        ;
                                        dcuc     .macro                ;delete char under cursor
                                                 .byte a_esc,"W"
                                                 .endm
                                        ;
                                        ;
                                        ;	miscellaneous control...
                                        ;
                                        rb       .macro                ;ring "bell"
                                                 .byte a_bel
                                                 .endm
                                        ;
                                        ;================================================================================
                                        ;
                                        ;ASCII CONTROL DEFINITIONS (menmonic order)
                                        ;
    843 = 0000000000000007                            a_bel    =$07                  ;<BEL> alert/ring bell
    844 = 0000000000000008                            a_bs     =$08                  ;<BS>  backspace
    845 = 000000000000000D                            a_cr     =$0d                  ;<CR>  carriage return
    846 = 000000000000007F                            a_del    =$7f                  ;<DEL> delete
    847 = 000000000000001B                            a_esc    =$1b                  ;<ESC> escape
    848 = 0000000000000009                            a_ht     =$09                  ;<HT>  horizontal tabulation
    849 = 000000000000000A                            a_lf     =$0a                  ;<LF>  linefeed
                                        ;
                                        ;
                                        ;	miscellaneous (description order)...
                                        ;
    854 = 20                            a_blank  =' '                  ;blank (whitespace)
    855 = 7A                            a_asclch ='z'                  ;end of lowercase ASCII
    856 = 000000000000005F                            a_lctouc =$5f                  ;LC to UC conversion mask
    857 = 61                            a_asclcl ='a'                  ;start of lowercase ASCII
                                        ;
                                        ;================================================================================
                                        ;
                                        ;GLOBAL ATOMIC CONSTANTS
                                        ;
                                        ;
                                        ;	data type sizes...
                                        ;
    866 = 0000000000000001                            s_byte   =1                    ;byte
    867 = 0000000000000002                            s_word   =2                    ;word (16 bits)
    868 = 0000000000000003                            s_xword  =3                    ;extended word (24 bits)
    869 = 0000000000000004                            s_dword  =4                    ;double word (32 bits)
    870 = 0000000000000100                            s_rampag =$0100                ;65xx RAM page
                                        ;
                                        ;
                                        ;	data type sizes in bits...
                                        ;
    875 = 0000000000000008                            s_bibyte =8                    ;byte
    876 = 0000000000000004                            s_bnybbl =4                    ;nybble
                                        ;
                                        ;
                                        ;	miscellaneous...
                                        ;
    881 = 000000000000002C                            bitabs   =$2c                  ;absolute BIT opcode
    882 = 0000000000000024                            bitzp    =$24                  ;zero page BIT opcode
                                        ;
                                        ;================================================================================
                                        ;
                                        ;W65C816S NATIVE MODE STATUS REGISTER DEFINITIONS
                                        ;
    888 = 00000001                      s_mpudbx =s_byte               ;data bank size
    889 = 00000002                      s_mpudpx =s_word               ;direct page size
    890 = 00000001                      s_mpupbx =s_byte               ;program bank size
    891 = 00000002                      s_mpupcx =s_word               ;program counter size
    892 = 00000002                      s_mpuspx =s_word               ;stack pointer size
    893 = 00000001                      s_mpusrx =s_byte               ;status size
                                        ;
                                        ;
                                        ;	status register flags...
                                        ;
    898 = 0000000000000001                            sr_car   =%00000001            ;C
    899 = 00000002                      sr_zer   =sr_car << 1          ;Z
    900 = 00000004                      sr_irq   =sr_zer << 1          ;I
    901 = 00000008                      sr_bdm   =sr_irq << 1          ;D
    902 = 00000010                      sr_ixw   =sr_bdm << 1          ;x
    903 = 00000020                      sr_amw   =sr_ixw << 1          ;m
    904 = 00000040                      sr_ovl   =sr_amw << 1          ;V
    905 = 00000080                      sr_neg   =sr_ovl << 1          ;N
    906 = 00000100                      sr_16	 =sr_neg << 1
    907 = 00000200                      sr_32    =sr_16 << 1
                                        ;
                                        ;	NVmxDIZC
                                        ;	xxxxxxxx
                                        ;	||||||||
                                        ;	|||||||+———> 1 = carry set/generated
                                        ;	||||||+————> 1 = result = zero
                                        ;	|||||+—————> 1 = IRQs ignored
                                        ;	||||+——————> 0 = binary arithmetic mode
                                        ;	||||         1 = decimal arithmetic mode
                                        ;	|||+———————> 0 = 16 bit index
                                        ;	|||          1 = 8 bit index
                                        ;	||+————————> 0 = 16 bit .A & memory
                                        ;	||           1 = 8 bit .A & memory
                                        ;	|+—————————> 1 = sign overflow
                                        ;	+——————————> 1 = result = negative
                                        ;
                                        ;================================================================================
                                        ;
                                        ;"SIZE-OF" CONSTANTS
                                        ;
    928 = 00000003                      s_addr   =s_xword              ;24 bit address
    929 = 0000000000000020                            s_auxbuf =32                   ;auxiliary buffer
    930 = 0000000000000050                            s_ibuf   =80                   ;input buffer
    931 = 0000000000000003                            s_mnemon =3                    ;MPU ASCII mnemonic
    932 = 0000000000000002                            s_mnepck =2                    ;MPU encoded mnemonic
    933 = 0000000000000003                            s_mvinst =3                    ;MVN/MVP instruction
    934 = 00000001                      s_opcode =s_byte               ;MPU opcode
    935 = 00000003                      s_oper   =s_xword              ;operand
    936 = 00000004                      s_pfac   =s_dword              ;primary math accumulator
    937 = 00000006                      s_sfac   =s_dword+s_word       ;secondary math accumulators
                                        ;
                                        ;================================================================================
                                        ;
                                        ;"NUMBER-OF" CONSTANTS
                                        ;
    943 = 0000000000000015                            n_dbytes =21                   ;default disassembly bytes
    944 = 0000000000000008                            n_dump   =8                    ;bytes per memory dump line
    945 = 000000FF                      n_mbytes =s_rampag-1           ;default memory dump bytes
    946 = 0000000000000008                            n_hccols =8                    ;compare/hunt display columns
    947 = 00000009                      n_opcols =3*s_oper             ;disassembly operand columns
    948 = 0000000000000004                            n_opslsr =4                    ;LSRs to extract instruction size
    949 = 0000000000000005                            n_shfenc =5                    ;shifts to encode/decode mnemonic
                                        ;
                                        ;================================================================================
                                        ;
                                        ;NUMERIC CONVERSION CONSTANTS
                                        ;
    955 = 0000000000000006                            a_hexdec ='A'-'9'-2            ;hex to decimal difference
    956 = 25                            c_bin    ='%'                  ;binary prefix
    957 = 2B                            c_dec    ='+'                  ;decimal prefix
    958 = 24                            c_hex    ='$'                  ;hexadecimal prefix
    959 = 40                            c_oct    ='@'                  ;octal prefix
    960 = 66                            k_hex    ='f'                  ;hex ASCII conversion
    961 = 00000020                      m_bits   =s_pfac*s_bibyte      ;operand bit size
    962 = 00000030                      m_cbits  =s_sfac*s_bibyte      ;workspace bit size
    963 = 000000000000000F                            bcdumask =%00001111            ;isolate BCD units mask
    964 = 0000000000000030                            btoamask =%00110000            ;binary to ASCII mask
                                        ;
                                        ;================================================================================
                                        ;
                                        ;ASSEMBLER/DISASSEMBLER CONSTANTS
                                        ;
    970 = 3F                            a_mnecvt ='?'                  ;encoded mnemonic conversion base
    971 = 000000000000001F                            aimmaska =%00011111            ;.A immediate opcode test #1
    972 = 0000000000000009                            aimmaskb =%00001001            ;.A immediate opcode test #2
    973 = 41                            asmprfx  ='A'                  ;assemble code prefix
    974 = 0000000000000009                            ascprmct =9                    ;assembler prompt "size-of"
    975 = 2E                            disprfx  ='.'                  ;disassemble code prefix
    976 = 00000000000000C0                            flimmask =%11000000            ;force long immediate flag
    977 = 0000000000000054                            opc_mvn  =$54                  ;MVN opcode
    978 = 0000000000000044                            opc_mvp  =$44                  ;MVP opcode
    979 = 00000000000000C2                            opc_rep  =$c2                  ;REP opcode
    980 = 00000000000000E2                            opc_sep  =$e2                  ;SEP opcode
    981 = 00000030                      pfmxmask =sr_amw | sr_ixw      ;MPU m & x flag bits mask
                                        ;
                                        ;
                                        ;	assembler prompt buffer offsets...
                                        ;
    986 = 00000002                      apadrbkh =s_word               ;instruction address bank MSN
    987 = 00000003                      apadrbkl =apadrbkh+s_byte      ;instruction address bank LSN
    988 = 00000004                      apadrmbh =apadrbkl+s_byte      ;instruction address MSB MSN
    989 = 00000005                      apadrmbl =apadrmbh+s_byte      ;instruction address MSB LSN
    990 = 00000006                      apadrlbh =apadrmbl+s_byte      ;instruction address LSB MSN
    991 = 00000007                      apadrlbl =apadrlbh+s_byte      ;instruction address LSB LSN
                                        ;
                                        ;
                                        ;	addressing mode preamble symbols...
                                        ;
    996 = 21                            amp_flim ='!'                  ;force long immediate
    997 = 23                            amp_imm  ='#'                  ;immediate
    998 = 28                            amp_ind  ='('                  ;indirect
    999 = 5B                            amp_indl ='['                  ;indirect long
                                        ;
                                        ;
                                        ;	addressing mode symbolic translation indices...
                                        ;
   1004 = 0000000000000000                            am_nam   =%0000                ;(0)  no symbol
   1005 = 0000000000000001                            am_imm   =%0001                ;(1)  #
   1006 = 0000000000000002                            am_adrx  =%0010                ;(2)  dp,X or addr,X
   1007 = 0000000000000003                            am_adry  =%0011                ;(3)  dp,Y or addr,Y
   1008 = 0000000000000004                            am_ind   =%0100                ;(4)  (dp) or (addr)
   1009 = 0000000000000005                            am_indl  =%0101                ;(5)  [dp] or [addr]
   1010 = 0000000000000006                            am_indly =%0110                ;(6)  [dp],Y
   1011 = 0000000000000007                            am_indx  =%0111                ;(7)  (dp,X) or (addr,X)
   1012 = 0000000000000008                            am_indy  =%1000                ;(8)  (dp),Y
   1013 = 0000000000000009                            am_stk   =%1001                ;(9)  offset,S
   1014 = 000000000000000A                            am_stky  =%1010                ;(10) (offset,S),Y
   1015 = 000000000000000B                            am_move  =%1011                ;(11) MVN/MVP sbnk,dbnk
                                        ;
                                        ;
                                        ;	operand size translation indices...
                                        ;
   1020 = 0000000000000000                            ops0     =%0000 << 4           ;no operand
   1021 = 0000000000000010                            ops1     =%0001 << 4           ;8 bit operand
   1022 = 0000000000000020                            ops2     =%0010 << 4           ;16 bit operand
   1023 = 0000000000000030                            ops3     =%0011 << 4           ;24 bit operand
   1024 = 0000000000000050                            bop1     =%0101 << 4           ;8 bit relative branch
   1025 = 0000000000000060                            bop2     =%0110 << 4           ;16 bit relative branch
   1026 = 0000000000000090                            vops     =%1001 << 4           ;8 or 16 bit operand
                                        ;
                                        ;
                                        ;	operand size & addressing mode extraction masks...
                                        ;
   1031 = 000000000000000F                            amodmask =%00001111            ;addressing mode index
   1032 = 0000000000000030                            opsmask  =%00110000            ;operand size
   1033 = 00000000000000C0                            vopsmask =%11000000            ;BOPx & VOPS flag bits
                                        ;
                                        ;
                                        ;	instruction mnemonic encoding...
                                        ;
   1038 = 0000000000002144                            mne_adc  =$2144                ;ADC
   1039 = 0000000000002BC4                            mne_and  =$2bc4                ;AND
   1040 = 0000000000006D04                            mne_asl  =$6d04                ;ASL
   1041 = 0000000000002106                            mne_bcc  =$2106                ;BCC
   1042 = 000000000000A106                            mne_bcs  =$a106                ;BCS
   1043 = 0000000000009186                            mne_beq  =$9186                ;BEQ
   1044 = 000000000000AA86                            mne_bit  =$aa86                ;BIT
   1045 = 0000000000005386                            mne_bmi  =$5386                ;BMI
   1046 = 00000000000033C6                            mne_bne  =$33c6                ;BNE
   1047 = 0000000000006C46                            mne_bpl  =$6c46                ;BPL
   1048 = 00000000000014C6                            mne_bra  =$14c6                ;BRA
   1049 = 00000000000064C6                            mne_brk  =$64c6                ;BRK
   1050 = 0000000000006CC6                            mne_brl  =$6cc6                ;BRL
   1051 = 00000000000025C6                            mne_bvc  =$25c6                ;BVC
   1052 = 000000000000A5C6                            mne_bvs  =$a5c6                ;BVS
   1053 = 0000000000002348                            mne_clc  =$2348                ;CLC
   1054 = 0000000000002B48                            mne_cld  =$2b48                ;CLD
   1055 = 0000000000005348                            mne_cli  =$5348                ;CLI
   1056 = 000000000000BB48                            mne_clv  =$bb48                ;CLV
   1057 = 0000000000008B88                            mne_cmp  =$8b88                ;CMP
   1058 = 0000000000008C08                            mne_cop  =$8c08                ;COP
   1059 = 000000000000CC48                            mne_cpx  =$cc48                ;CPX
   1060 = 000000000000D448                            mne_cpy  =$d448                ;CPY
   1061 = 000000000000218A                            mne_dec  =$218a                ;DEC
   1062 = 000000000000C98A                            mne_dex  =$c98a                ;DEX
   1063 = 000000000000D18A                            mne_dey  =$d18a                ;DEY
   1064 = 0000000000009C0C                            mne_eor  =$9c0c                ;EOR
   1065 = 00000000000023D4                            mne_inc  =$23d4                ;INC
   1066 = 000000000000CBD4                            mne_inx  =$cbd4                ;INX
   1067 = 000000000000D3D4                            mne_iny  =$d3d4                ;INY
   1068 = 0000000000006B96                            mne_jml  =$6b96                ;JML
   1069 = 0000000000008B96                            mne_jmp  =$8b96                ;JMP
   1070 = 0000000000006D16                            mne_jsl  =$6d16                ;JSL
   1071 = 0000000000009D16                            mne_jsr  =$9d16                ;JSR
   1072 = 000000000000115A                            mne_lda  =$115a                ;LDA
   1073 = 000000000000C95A                            mne_ldx  =$c95a                ;LDX
   1074 = 000000000000D15A                            mne_ldy  =$d15a                ;LDY
   1075 = 0000000000009D1A                            mne_lsr  =$9d1a                ;LSR
   1076 = 0000000000007DDC                            mne_mvn  =$7ddc                ;MVN
   1077 = 0000000000008DDC                            mne_mvp  =$8ddc                ;MVP
   1078 = 0000000000008C1E                            mne_nop  =$8c1e                ;NOP
   1079 = 00000000000014E0                            mne_ora  =$14e0                ;ORA
   1080 = 00000000000011A2                            mne_pea  =$11a2                ;PEA
   1081 = 00000000000051A2                            mne_pei  =$51a2                ;PEI
   1082 = 00000000000099A2                            mne_per  =$99a2                ;PER
   1083 = 0000000000001262                            mne_pha  =$1262                ;PHA
   1084 = 0000000000001A62                            mne_phb  =$1a62                ;PHB
   1085 = 0000000000002A62                            mne_phd  =$2a62                ;PHD
   1086 = 0000000000006262                            mne_phk  =$6262                ;PHK
   1087 = 0000000000008A62                            mne_php  =$8a62                ;PHP
   1088 = 000000000000CA62                            mne_phx  =$ca62                ;PHX
   1089 = 000000000000D262                            mne_phy  =$d262                ;PHY
   1090 = 0000000000001362                            mne_pla  =$1362                ;PLA
   1091 = 0000000000001B62                            mne_plb  =$1b62                ;PLB
   1092 = 0000000000002B62                            mne_pld  =$2b62                ;PLD
   1093 = 0000000000008B62                            mne_plp  =$8b62                ;PLP
   1094 = 000000000000CB62                            mne_plx  =$cb62                ;PLX
   1095 = 000000000000D362                            mne_ply  =$d362                ;PLY
   1096 = 00000000000089A6                            mne_rep  =$89a6                ;REP
   1097 = 0000000000006C26                            mne_rol  =$6c26                ;ROL
   1098 = 0000000000009C26                            mne_ror  =$9c26                ;ROR
   1099 = 0000000000005566                            mne_rti  =$5566                ;RTI
   1100 = 0000000000006D66                            mne_rtl  =$6d66                ;RTL
   1101 = 000000000000A566                            mne_rts  =$a566                ;RTS
   1102 = 00000000000020E8                            mne_sbc  =$20e8                ;SBC
   1103 = 00000000000021A8                            mne_sec  =$21a8                ;SEC
   1104 = 00000000000029A8                            mne_sed  =$29a8                ;SED
   1105 = 00000000000051A8                            mne_sei  =$51a8                ;SEI
   1106 = 00000000000089A8                            mne_sep  =$89a8                ;SEP
   1107 = 0000000000001568                            mne_sta  =$1568                ;STA
   1108 = 0000000000008D68                            mne_stp  =$8d68                ;STP
   1109 = 000000000000CD68                            mne_stx  =$cd68                ;STX
   1110 = 000000000000D568                            mne_sty  =$d568                ;STY
   1111 = 000000000000DD68                            mne_stz  =$dd68                ;STZ
   1112 = 000000000000C8AA                            mne_tax  =$c8aa                ;TAX
   1113 = 000000000000D0AA                            mne_tay  =$d0aa                ;TAY
   1114 = 000000000000292A                            mne_tcd  =$292a                ;TCD
   1115 = 000000000000A12A                            mne_tcs  =$a12a                ;TCS
   1116 = 000000000000216A                            mne_tdc  =$216a                ;TDC
   1117 = 0000000000001CEA                            mne_trb  =$1cea                ;TRB
   1118 = 0000000000001D2A                            mne_tsb  =$1d2a                ;TSB
   1119 = 000000000000252A                            mne_tsc  =$252a                ;TSC
   1120 = 000000000000CD2A                            mne_tsx  =$cd2a                ;TSX
   1121 = 000000000000166A                            mne_txa  =$166a                ;TXA
   1122 = 000000000000A66A                            mne_txs  =$a66a                ;TXS
   1123 = 000000000000D66A                            mne_txy  =$d66a                ;TXY
   1124 = 00000000000016AA                            mne_tya  =$16aa                ;TYA
   1125 = 000000000000CEAA                            mne_tyx  =$ceaa                ;TYX
   1126 = 00000000000050B0                            mne_wai  =$50b0                ;WAI
   1127 = 0000000000007170                            mne_wdm  =$7170                ;WDM
   1128 = 00000000000010F2                            mne_xba  =$10f2                ;XBA
   1129 = 0000000000003132                            mne_xce  =$3132                ;XCE
                                        ;
                                        ;
                                        ;	encoded instruction mnemonic indices...
                                        ;
   1134 = 0000000000000010                            mne_adcx =16                   ;ADC
   1135 = 000000000000001D                            mne_andx =29                   ;AND
   1136 = 000000000000002C                            mne_aslx =44                   ;ASL
   1137 = 000000000000000F                            mne_bccx =15                   ;BCC
   1138 = 0000000000000041                            mne_bcsx =65                   ;BCS
   1139 = 000000000000003B                            mne_beqx =59                   ;BEQ
   1140 = 0000000000000046                            mne_bitx =70                   ;BIT
   1141 = 0000000000000024                            mne_bmix =36                   ;BMI
   1142 = 000000000000001F                            mne_bnex =31                   ;BNE
   1143 = 000000000000002A                            mne_bplx =42                   ;BPL
   1144 = 0000000000000005                            mne_brax =5                    ;BRA
   1145 = 0000000000000027                            mne_brkx =39                   ;BRK
   1146 = 000000000000002B                            mne_brlx =43                   ;BRL
   1147 = 0000000000000017                            mne_bvcx =23                   ;BVC
   1148 = 0000000000000044                            mne_bvsx =68                   ;BVS
   1149 = 0000000000000014                            mne_clcx =20                   ;CLC
   1150 = 000000000000001B                            mne_cldx =27                   ;CLD
   1151 = 0000000000000023                            mne_clix =35                   ;CLI
   1152 = 0000000000000047                            mne_clvx =71                   ;CLV
   1153 = 0000000000000035                            mne_cmpx =53                   ;CMP
   1154 = 0000000000000037                            mne_copx =55                   ;COP
   1155 = 000000000000004E                            mne_cpxx =78                   ;CPX
   1156 = 0000000000000058                            mne_cpyx =88                   ;CPY
   1157 = 0000000000000012                            mne_decx =18                   ;DEC
   1158 = 000000000000004A                            mne_dexx =74                   ;DEX
   1159 = 0000000000000054                            mne_deyx =84                   ;DEY
   1160 = 000000000000003D                            mne_eorx =61                   ;EOR
   1161 = 0000000000000015                            mne_incx =21                   ;INC
   1162 = 000000000000004D                            mne_inxx =77                   ;INX
   1163 = 0000000000000057                            mne_inyx =87                   ;INY
   1164 = 0000000000000028                            mne_jmlx =40                   ;JML
   1165 = 0000000000000036                            mne_jmpx =54                   ;JMP
   1166 = 000000000000002D                            mne_jslx =45                   ;JSL
   1167 = 000000000000003F                            mne_jsrx =63                   ;JSR
   1168 = 0000000000000001                            mne_ldax =1                    ;LDA
   1169 = 0000000000000049                            mne_ldxx =73                   ;LDX
   1170 = 0000000000000053                            mne_ldyx =83                   ;LDY
   1171 = 0000000000000040                            mne_lsrx =64                   ;LSR
   1172 = 0000000000000030                            mne_mvnx =48                   ;MVN
   1173 = 000000000000003A                            mne_mvpx =58                   ;MVP
   1174 = 0000000000000038                            mne_nopx =56                   ;NOP
   1175 = 0000000000000006                            mne_orax =6                    ;ORA
   1176 = 0000000000000002                            mne_peax =2                    ;PEA
   1177 = 0000000000000021                            mne_peix =33                   ;PEI
   1178 = 000000000000003C                            mne_perx =60                   ;PER
   1179 = 0000000000000003                            mne_phax =3                    ;PHA
   1180 = 000000000000000A                            mne_phbx =10                   ;PHB
   1181 = 000000000000001A                            mne_phdx =26                   ;PHD
   1182 = 0000000000000026                            mne_phkx =38                   ;PHK
   1183 = 0000000000000033                            mne_phpx =51                   ;PHP
   1184 = 000000000000004B                            mne_phxx =75                   ;PHX
   1185 = 0000000000000055                            mne_phyx =85                   ;PHY
   1186 = 0000000000000004                            mne_plax =4                    ;PLA
   1187 = 000000000000000B                            mne_plbx =11                   ;PLB
   1188 = 000000000000001C                            mne_pldx =28                   ;PLD
   1189 = 0000000000000034                            mne_plpx =52                   ;PLP
   1190 = 000000000000004C                            mne_plxx =76                   ;PLX
   1191 = 0000000000000056                            mne_plyx =86                   ;PLY
   1192 = 0000000000000031                            mne_repx =49                   ;REP
   1193 = 0000000000000029                            mne_rolx =41                   ;ROL
   1194 = 000000000000003E                            mne_rorx =62                   ;ROR
   1195 = 0000000000000025                            mne_rtix =37                   ;RTI
   1196 = 000000000000002E                            mne_rtlx =46                   ;RTL
   1197 = 0000000000000043                            mne_rtsx =67                   ;RTS
   1198 = 000000000000000E                            mne_sbcx =14                   ;SBC
   1199 = 0000000000000013                            mne_secx =19                   ;SEC
   1200 = 0000000000000019                            mne_sedx =25                   ;SED
   1201 = 0000000000000022                            mne_seix =34                   ;SEI
   1202 = 0000000000000032                            mne_sepx =50                   ;SEP
   1203 = 0000000000000007                            mne_stax =7                    ;STA
   1204 = 0000000000000039                            mne_stpx =57                   ;STP
   1205 = 0000000000000050                            mne_stxx =80                   ;STX
   1206 = 0000000000000059                            mne_styx =89                   ;STY
   1207 = 000000000000005B                            mne_stzx =91                   ;STZ
   1208 = 0000000000000048                            mne_taxx =72                   ;TAX
   1209 = 0000000000000052                            mne_tayx =82                   ;TAY
   1210 = 0000000000000018                            mne_tcdx =24                   ;TCD
   1211 = 0000000000000042                            mne_tcsx =66                   ;TCS
   1212 = 0000000000000011                            mne_tdcx =17                   ;TDC
   1213 = 000000000000000C                            mne_trbx =12                   ;TRB
   1214 = 000000000000000D                            mne_tsbx =13                   ;TSB
   1215 = 0000000000000016                            mne_tscx =22                   ;TSC
   1216 = 000000000000004F                            mne_tsxx =79                   ;TSX
   1217 = 0000000000000008                            mne_txax =8                    ;TXA
   1218 = 0000000000000045                            mne_txsx =69                   ;TXS
   1219 = 000000000000005A                            mne_txyx =90                   ;TXY
   1220 = 0000000000000009                            mne_tyax =9                    ;TYA
   1221 = 0000000000000051                            mne_tyxx =81                   ;TYX
   1222 = 0000000000000020                            mne_waix =32                   ;WAI
   1223 = 000000000000002F                            mne_wdmx =47                   ;WDM
   1224 = 0000000000000000                            mne_xbax =0                    ;XBA
   1225 = 000000000000001E                            mne_xcex =30                   ;XCE
                                        ;
                                        ;================================================================================
                                        ;
                                        ;MISCELLANEOUS CONSTANTS
                                        ;
   1231 = 0000000000000004                            halftab  =4                    ;1/2 tabulation spacing
   1232 = 3E                            memprfx  ='>'                  ;memory dump prefix
   1233 = 3A                            memsepch =':'                  ;memory dump separator
   1234 = 2E                            memsubch ='.'                  ;memory dump non-print char
   1235 = 0000000000000030                            srinit   =%00110000            ;SR initialization value
                                        ;
                                        ;================================================================================
                                        ;
                                        ;DIRECT PAGE STORAGE
                                        ;
   1241 = 00000080                      reg_csx  =zeropage			;CS
   1242 = 00000084                      reg_dsx  =reg_csx + 4		;DS
   1243 = 00000088                      reg_pcx  =reg_dsx + 4	    ;PC
   1244 = 0000008A                      reg_pbx  =reg_pcx + 2       ;PB
   1245 = 0000008B                      reg_ax   =reg_pbx + 1       ;.C
   1246 = 0000008F                      reg_xx   =reg_ax + 4        ;.X
   1247 = 00000093                      reg_yx   =reg_xx + 4        ;.Y
   1248 = 00000097                      reg_spx  =reg_yx + 4        ;SP
   1249 = 0000009B                      reg_srx  =reg_spx + 4       ;SR
   1250 = 0000009C                      reg_srxx =reg_srx + 1       ;SRX
   1251 = 0000009D                      reg_dbx  =reg_srxx + 1      ;DB
   1252 = 0000009E                      reg_dpx  =reg_dbx + 1       ;DP
                                        ;
                                        ;
                                        ;	general workspace...
                                        ;
   1257 = 000000A2                      addra    =reg_dpx+4            ;address #1
   1258 = 000000A6                      addrb    =addra+4              ;address #2
   1259 = 000000A9                      faca     =addrb+s_addr         ;primary accumulator
   1260 = 000000AD                      facax    =faca+s_pfac          ;extended primary accumulator
   1261 = 000000B1                      facb     =facax+s_pfac         ;secondary accumulator
   1262 = 000000B7                      facc     =facb+s_sfac          ;tertiary accumulator
   1263 = 000000BD                      operand  =facc+s_sfac          ;instruction operand
   1264 = 000000C0                      auxbufix =operand+s_oper       ;auxiliary buffer index
   1265 = 000000C1                      ibufidx  =auxbufix+s_byte      ;input buffer index
   1266 = 000000C2                      bitsdig  =ibufidx+s_byte       ;bits per numeral
   1267 = 000000C3                      numeral  =bitsdig+s_byte       ;numeral buffer
   1268 = 000000C4                      radix    =numeral+s_byte       ;radix index
   1269 = 000000C5                      admodidx =radix+s_byte         ;addressing mode index
   1270 = 000000C6                      charcnt  =admodidx+s_byte      ;character counter
   1271 = 000000C8                      instsize =charcnt+s_word       ;instruction size
   1272 = 000000CA                      mnepck   =instsize+s_word      ;encoded mnemonic
   1273 = 000000CC                      opcode   =mnepck+s_mnepck      ;current opcode
   1274 = 000000CD                      status   =opcode+s_byte        ;I/O status flag
   1275 = 000000CE                      xrtemp   =status+s_byte        ;temp .X storage
   1276 = 000000CF                      eopsize  =xrtemp+s_byte        ;entered operand size
   1277 = 000000D0                      flimflag =eopsize+s_byte       ;forced long immediate...
                                        ;
                                        ;	xx000000
                                        ;	||
                                        ;	|+—————————> 0: .X/.Y = 8 bits
                                        ;	|            1: .X/.Y = 18 bits
                                        ;	+——————————> 0: .A = 8 bits
                                        ;	             1: .A = 16 bits
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	During assembly, FLIMFLAG indicates the operand size used with an immed-
                                        ;	iate mode instruction, thus causing the following disassembly to display
                                        ;	the assembled  operand size.   During disassembly,  FLIMFLAG will mirror
                                        ;	the effect of the most recent REP or SEP instruction.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
   1293 = 000000D1                      iopsize  =flimflag+s_byte      ;operand size
   1294 = 000000D2                      range    =iopsize+s_byte       ;allowable radix range
   1295 = 000000D3                      vopsflag =range+s_byte         ;VOPS & ROPS mode bits
                                        ;
                                        ;
                                        ;	copy/fill workspace (overlaps some of the above)...
                                        ;
   1300 = 000000D4                      mcftwork =vopsflag+s_byte	;faca                 ;start of copy/fill code
   1301 = 000000D5                      mcftopc  =mcftwork+s_byte      ;instruction opcode
   1302 = 000000D6                      mcftbnk  =mcftopc+s_byte       ;banks
                                        ;
                                        ;================================================================================
                                        ;
                                        ;SUPERMON 816 JUMP TABLE
                                        ;
                                                 org	_origin_
                                        ;
                                           		 CPU	W65C816S
                                           		 MEM	16
                                           		 NDX	16
   1314 00C000 A9 D0 00                     		 LDA	#$D0
   1315 00C003 8D 00 70                     		 STA	$7000
                                           		 MEM	8
                                           		 NDX	8
                                        		 CPU	W65C02
   1319 C006 80 02                      JMON     bra mon               ;cold start entry
   1320 C008 80 4F                      JMONBRK  bra monbrk            ;software interrupt intercept
                                        ;
                                        ;================================================================================
                                        ;
                                        ;mon: SUPERMON 816 COLD START
                                        ;
   1326 C00A C2 20                      mon +         .byte $c2,$20
                                        
   1327 C00C AD 02 01                             lda vecbrki           ;BRK vector
   1328 C00F C9 59                    +            cmp #<monbrk
   1328 C011 C0                       +            .byte >monbrk
                                        ;pointing at monitor?
   1329 C012 D0 03                                bne .2            ;yes, ignore cold start
   1330 C014 4C A4 C0                             jmp	monreg			; got a branch out of range here when debugging code
                                        								; was included
   1332 C017                            .2
                                        ;
   1334 C017 8D 05 01                             sta vecbrkia          ;save vector for exit
   1335 C01A A9 AB                       		 LDA	#$AB
   1336 C01C 00                          		 .byte	$00
   1337 C01D 8D 00 70                    		 STA	$7000
   1338 C020 A9 59                    +            lda #<monbrk
   1338 C022 C0                       +            .byte >monbrk
                                        ;Supermon 816 intercepts...
   1339 C023 8D 02 01                             sta vecbrki           ;BRK handler
   1340 C026 E2 30                    +            .byte $e2,$30
                                                        ;8 bit registers
   1341 C028 A2 49                                ldx #vopsflag-reg_pbx
                                        ;
   1343 C02A 74 8A                      .0000010 stz reg_pbx,x         ;clear DP storage
   1344 C02C CA                                   dex
   1345 C02D 10 FB                                bpl .0000010
                                        ;
   1347 C02F A9 AC                       		 LDA	#$AC
   1348 C031 8D 00 70                    		 STA	$7000
   1349 C034 A9 30                                lda #srinit
   1350 C036 85 9B                                sta reg_srx           ;status register
   1351 C038 C2 20                    +            .byte $c2,$20
                                                         ;16 bit .A
   1352 C03A A9 FF                    +            lda #<hwstack
   1352 C03C 3F                       +            .byte >hwstack
                                        ;top of hardware stack
   1353 C03D 1B                       +            .byte $1b
                                                           ;set SP
   1354 C03E 7B                       +            .byte $7b
                                                           ;get & save...
   1355 C03F 85 9E                                sta reg_dpx           ;DP register
   1356 C041 A9 AD                       		 LDA	#$AD
   1357 C043 00                          		 .byte	$00
   1358 C044 8D 00 70                    		 STA	$7000
   1359 C047 A9 00                    +            lda #<0
   1359 C049 00                       +            .byte >0
                                        
   1360 C04A E2 20                    +            .byte $e2,$20
                                        
   1361 C04C 4B                       +            .byte $4b
                                        
   1362 C04D 68                                   pla                   ;capture PB &...
   1363 C04E 85 8A                                sta reg_pbx           ;set
   1364 C050 8B                       +            .byte $8b
                                        
   1365 C051 68                                   pla                   ;capture DB &...
   1366 C052 85 9D                                sta reg_dbx           ;set
   1367 C054 F4                       +            .byte $f4
   1367 C055 2C D0                    +            .word mm_entry
                                        ;"...ready..."
   1368 C057 80 2E                                bra moncom
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monbrk: SOFTWARE INTERRUPT INTERCEPT
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	This is the entry point taken when a BRK instruction is executed.  It is
                                        ;	assumed that the BRK  handler has pushed the registers to the stack that
                                        ;	are not automatically pushed by the MPU in response to BRK.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
   1380 C059 58                         monbrk   cli                   ;reenable IRQs
   1381 C05A                            		 phcs
   1382 C05A 68                          		 pla
   1383 C05B 85 80                       		 sta reg_csx
   1384 C05D 68                          		 pla
   1385 C05E 85 82                       		 sta reg_csx+2
   1386 C060                            		 phds
   1387 C060 68                          		 pla
   1388 C061 85 84                       		 sta reg_dsx
   1389 C063 68                          		 pla
   1390 C064 85 86                       		 sta reg_dsx+2
   1391 C066 7A                                   ply                   ;recover registers
   1392 C067 FA                                   plx
   1393 C068 68                                   pla
   1394 C069 C2 30                    +            .byte $c2,$30
                                                         ;store 16 bit registers
   1395 C06B 85 8B                                sta reg_ax            ;.A
   1396 C06D 86 8F                                stx reg_xx            ;.X
   1397 C06F 84 93                                sty reg_yx            ;.Y
   1398 C071 E2 10                    +            .byte $e2,$10
                                                        ;8 bit index registers
   1399 C073 68                                   pla                   ;get DP &...
   1400 C074 85 9E                                sta reg_dpx           ;store
   1401 C076 FA                                   plx                   ;get DB &...
   1402 C077 86 9D                                stx reg_dbx           ;store
   1403 C079 FA                                   plx                   ;get SR &...
   1404 C07A 86 9B                                stx reg_srx           ;store
   1405 C07C 68                                   pla                   ;get PC &...
   1406 C07D 85 88                                sta reg_pcx           ;store
   1407 C07F E2 20                    +            .byte $e2,$20
                                        
   1408 C081 68                                   pla                   ;get PB &...
   1409 C082 85 8A                                sta reg_pbx           ;store
   1410 C084 F4                       +            .byte $f4
   1410 C085 21 D0                    +            .word mm_brk
                                        ;"*BRK"
                                        ;
                                        ;================================================================================
                                        ;
                                        ;moncom: COMMON ENTRY POINT
                                        ;
                                        ;	——————————————————————————————————————
                                        ;	DO NOT directly call this entry point!
                                        ;	——————————————————————————————————————
                                        ;
   1420 C087                            moncom   
   1421 C087 A9 AE                       		 LDA	#$AE
   1422 C089 8D 00 70                    		 STA	$7000
   1423 C08C 20 1D C8                    		 jsr sprint            ;print heading
   1424 C08F A9 AF                       		 LDA	#$AF
   1425 C091 8D 00 70                    		 STA	$7000
   1426 C094 C2 20                    +            .byte $c2,$20
                                        
   1427 C096 3B                       +            .byte $3b
                                                           ;get SP &...
   1428 C097 85 97                                sta reg_spx           ;store
   1429 C099 A9 B0                       		 LDA	#$B0
   1430 C09B 00                          		 .byte	$00
   1431 C09C 8D 00 70                    		 STA	$7000
   1432 C09F C2 FF                    +            .byte $c2,%11111111
                                        ;clear SR &...
   1433 C0A1 E2 30                    +            .byte $e2,srinit
                                        ;set default state
   1434 C0A3 38                                   sec                   ;see next
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monreg: DISPLAY MPU REGISTERS
                                        ;
                                        ;	—————————
                                        ;	syntax: R
                                        ;	—————————
                                        ;
   1444 C0A4 B0 03                      monreg   bcs .0000010          ;okay to proceed
                                        ;
   1446 C0A6 4C 88 C1                             jmp monerr            ;error if called with a parm
                                        ;
   1448 C0A9 F4                         .0000010 +         .byte $f4
   1448 C0AA 57 D0                    +            .word mm_regs
                                        
   1449 C0AC 20 1D C8                             jsr sprint            ;display heading
                                        ;
                                        ;
                                        ;	display program bank & counter...
                                        ;
   1454 C0AF C2 20                    +            .byte $c2,$20
                                        
   1455 C0B1 A5 82                       		 lda	reg_csx+2
   1456 C0B3 E2 20                    +            .byte $e2,$20
                                        
   1457 C0B5 20 E1 C7                    		 jsr	dpyhexw
   1458 C0B8 C2 20                    +            .byte $c2,$20
                                        
   1459 C0BA A5 80                       		 lda	reg_csx
   1460 C0BC E2 20                    +            .byte $e2,$20
                                        
   1461 C0BE 20 E1 C7                    		 jsr    dpyhexw
   1462 C0C1 E2 20                    +            .byte $e2,$20
                                        
   1463 C0C3 20 18 C8                             jsr printspc          ;inter-field space
   1464 C0C6 A5 8A                                lda reg_pbx           ;PB
   1465 C0C8 20 F1 C7                             jsr dpyhex            ;display as hex ASCII
   1466 C0CB 20 18 C8                             jsr printspc          ;inter-field space
   1467 C0CE C2 20                    +            .byte $c2,$20
                                        
   1468 C0D0 A5 88                                lda reg_pcx
   1469 C0D2 E2 20                    +            .byte $e2,$20
                                        
   1470 C0D4 20 E1 C7                             jsr dpyhexw           ;display PC
   1471 C0D7 A2 02                                ldx #2
   1472 C0D9 20 FB C7                             jsr multspc           ;inter-field spacing
                                        ;
                                        ;
                                        ;	display SR in bitwise fashion...
                                        ;
   1477 C0DC A5 9C                       		 lda reg_srxx
   1478 C0DE 4A                          		 lsr
   1479 C0DF 4A                          		 lsr
   1480 C0E0 69 30                       		 adc #'0'
   1481 C0E2 20 06 F4                    		 jsr putcha
   1482 C0E5 A5 9C                       		 lda reg_srxx
   1483 C0E7 4A                          		 lsr
   1484 C0E8 69 30                       		 adc #'0'
   1485 C0EA 20 06 F4                    		 jsr putcha
                                        
   1487 C0ED A6 9B                                ldx reg_srx           ;SR
   1488 C0EF A0 08                                ldy #s_bibyte         ;bits in a byte
                                        ;
   1490 C0F1 8A                         .0000020 txa                   ;remaining SR bits
   1491 C0F2 0A                                   asl                   ;grab one of them
   1492 C0F3 AA                                   tax                   ;save remainder
   1493 C0F4 A9 30                                lda #'0'              ;a clear bit but...
   1494 C0F6 69 00                                adc #0                ;adjust if set &...
   1495 C0F8 20 06 F4                             jsr putcha            ;print
   1496 C0FB 88                                   dey                   ;bit processed
   1497 C0FC D0 F3                                bne .0000020          ;do another
                                        ;
                                        ;
                                        ;	display .C, .X, .Y, SP & DP...
                                        ;
   1502 C0FE 20 18 C8                   .0000030 jsr printspc          ;spacing
   1503 C101 C2 20                    +            .byte $c2,$20
                                        
   1504 C103 B9 8D 00                             lda reg_ax+2,y        ;get register value
   1505 C106 E2 20                    +            .byte $e2,$20
                                        
   1506 C108 20 E1 C7                             jsr dpyhexw           ;convert & display
   1507 C10B C2 20                    +            .byte $c2,$20
                                        
   1508 C10D B9 8B 00                             lda reg_ax,y          ;get register value
   1509 C110 E2 20                    +            .byte $e2,$20
                                        
   1510 C112 20 E1 C7                             jsr dpyhexw           ;convert & display
                                        ;         .rept s_word
   1512 C115 C8                                     iny
   1513 C116 C8                                     iny
                                        ;         .endr
                                        ;         .rept s_word
   1516 C117 C8                                     iny
   1517 C118 C8                                     iny
                                        ;         .endr
   1519 C119 C0 0F                                cpy #reg_spx-reg_ax+3
   1520 C11B 90 E1                                bcc .0000030          ;next
                                        ;
                                        ;
                                        ;	display DS DB...
                                        ;
   1525 C11D F4                       +            .byte $f4
   1525 C11E B7 D0                    +            .word mm_regs2
                                        
   1526 C120 20 1D C8                    		 jsr sprint
   1527 C123 C2 20                    +            .byte $c2,$20
                                        
   1528 C125 A5 86                                lda reg_dsx+2         ;get DS &...
   1529 C127 E2 20                    +            .byte $e2,$20
                                        
   1530 C129 20 E1 C7                             jsr dpyhexw           ;convert & display
   1531 C12C C2 20                    +            .byte $c2,$20
                                        
   1532 C12E A5 84                                lda reg_dsx           ;get DS &...
   1533 C130 E2 20                    +            .byte $e2,$20
                                        
   1534 C132 20 E1 C7                             jsr dpyhexw           ;convert & display
   1535 C135 20 18 C8                             jsr printspc          ;more spacing
   1536 C138 A5 9D                                lda reg_dbx           ;get DB &...
   1537 C13A 20 F1 C7                             jsr dpyhex            ;display it
   1538 C13D 20 18 C8                             jsr printspc          ;more spacing
   1539 C140 C2 20                    +            .byte $c2,$20
                                        
   1540 C142 A5 9E                                lda reg_dpx           ;get DPR &...
   1541 C144 E2 20                    +            .byte $e2,$20
                                        
   1542 C146 20 E1 C7                             jsr dpyhexw           ;convert & display
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monce: COMMAND EXECUTIVE
                                        ;	
   1548 C149 E2 20                      monce +         .byte $e2,$20
                                        
   1549 C14B A9 00                                lda #0                ;default buffer index
                                        ;
   1551 C14D E2 30                      moncea +         .byte $e2,$30
                                                        ;alternate entry point
   1552 C14F 85 C1                                sta ibufidx           ;(re)set buffer index
   1553 C151 F4                       +            .byte $f4
   1553 C152 4E D0                    +            .word mm_prmpt
                                        
   1554 C154 20 1D C8                             jsr sprint            ;display input prompt
   1555 C157 20 3D CC                             jsr input             ;await some input
                                        ;
   1557 C15A                            .0000010:
   1558 C15A 20 9B CC                    		jsr getcharc          ;read from buffer
   1559 C15D F0 EA                                beq monce             ;terminator, just loop
                                        ;
   1561 C15F C9 20                                cmp #a_blank
   1562 C161 F0 F7                                beq .0000010          ;strip leading blanks
                                        ;
   1564 C163 A2 0C                                ldx #n_mpctab-1       ;number of primary commands
                                        ;
   1566 C165 DD B8 CC                   .0000020 cmp mpctab,x          ;search primary command list
   1567 C168 D0 0E                                bne .0000030
                                        ;
   1569 C16A 8A                                   txa                   ;get index
   1570 C16B 0A                                   asl                   ;double for offset
   1571 C16C AA                                   tax
   1572 C16D C2 20                    +            .byte $c2,$20
                                        
   1573 C16F BD C5 CC                             lda mpcextab,x        ;command address -1
   1574 C172 48                                   pha                   ;prime the stack
   1575 C173 E2 20                    +            .byte $e2,$20
                                        
   1576 C175 4C E1 CA                             jmp getparm           ;evaluate parm & execute command
                                        ;
   1578 C178 CA                         .0000030 dex
   1579 C179 10 EA                                bpl .0000020          ;continue searching primary commands
                                        ;
   1581 C17B A2 03                                ldx #n_radix-1        ;number of radices
                                        ;
   1583 C17D DD F3 CC                   .0000040 cmp radxtab,x         ;search conversion command list
   1584 C180 D0 03                                bne .0000050
                                        ;
   1586 C182 4C D0 C5                             jmp monenv            ;convert & display parameter
                                        ;
   1588 C185 CA                         .0000050 dex
   1589 C186 10 F5                                bpl .0000040
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monerr: COMMON ERROR HANDLER
                                        ;
   1595 C188 E2 30                      monerr +         .byte $e2,$30
                                                        ;8 bit registers
                                        ;
   1597 C18A 20 C8 C7                   monerraa jsr dpyerr            ;indicate an error &...
   1598 C18D 80 BA                                bra monce             ;return to input loop
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monasc: ASSEMBLE CODE
                                        ;
                                        ;	———————————————————————————————————————————————————————————————————————
                                        ;	syntax: A <addr> <mnemonic> [<argument>]
                                        ;
                                        ;	After a line of code has been successfully assembled it will be disass-
                                        ;	embled & displayed,  & the monitor will prompt with the next address to
                                        ;	which code may be assembled.
                                        ;	———————————————————————————————————————————————————————————————————————
                                        ;
   1612 C18F 90 03                      monasc   bcc .0000020          ;assembly address entered
                                        ;
   1614 C191 4C 88 C1                   .0000010 jmp monerr            ;terminate w/error
                                        ;
                                        ;
                                        ;	evaluate assembly address...
                                        ;
   1619 C194 20 CD CA                   .0000020 jsr facasize          ;check address...
   1620 C197 C9 04                                cmp #s_dword          ;range
   1621 C199 B0 F6                                bcs .0000010          ;out of range — error
                                        ;
   1623 C19B 20 AF CA                             jsr facaddra          ;store assembly address
                                        ;
                                        ;
                                        ;	initialize workspace...
                                        ;
   1628 C19E A2 1F                                ldx #s_auxbuf-s_byte
                                        ;
   1630 C1A0 9E 51 02                   .0000030 stz auxbuf,x          ;clear addressing mode buffer
   1631 C1A3 CA                                   dex
   1632 C1A4 D0 FA                                bne .0000030
                                        ;
   1634 C1A6 A9 20                                lda #a_blank
   1635 C1A8 8D 51 02                             sta auxbuf            ;preamble placeholder
   1636 C1AB 20 1C CA                             jsr clroper           ;clear operand
   1637 C1AE 64 C0                                stz auxbufix          ;reset addressing mode index
   1638 C1B0 64 D0                                stz flimflag          ;clear forced long immediate
   1639 C1B2 64 CA                                stz mnepck            ;clear encoded...
   1640 C1B4 64 CB                                stz mnepck+s_byte     ;mnemonic workspace
   1641 C1B6 64 D3                                stz vopsflag          ;clear 8/16 or relative flag
                                        ;
                                        ;
                                        ;	encode mnemonic...
                                        ;
   1646 C1B8 A0 03                                ldy #s_mnemon         ;expected mnemonic size
                                        ;
   1648 C1BA 20 2E CC                   .0000040 jsr getcharw          ;get from buffer wo/whitespace
   1649 C1BD D0 0A                                bne .0000060          ;gotten
                                        ;
   1651 C1BF C0 03                                cpy #s_mnemon         ;any input at all?
   1652 C1C1 90 03                                bcc .0000050          ;yes
                                        ;
   1654 C1C3 4C 49 C1                             jmp monce             ;no, abort further assembly
                                        ;
   1656 C1C6 4C 66 C3                   .0000050 jmp monasc10          ;incomplete mnemonic — error
                                        ;
   1658 C1C9 38                         .0000060 sec
   1659 C1CA E9 3F                                sbc #a_mnecvt         ;ASCII to binary factor
   1660 C1CC A2 05                                ldx #n_shfenc         ;shifts required to encode
                                        ;
   1662 C1CE 4A                         .0000070 lsr                   ;shift out a bit...
   1663 C1CF 66 CB                                ror mnepck+s_byte     ;into...
   1664 C1D1 66 CA                                ror mnepck            ;encoded mnemonic
   1665 C1D3 CA                                   dex
   1666 C1D4 D0 F8                                bne .0000070          ;next bit
                                        ;
   1668 C1D6 88                                   dey
   1669 C1D7 D0 E1                                bne .0000040          ;get next char
                                        ;
                                        ;
                                        ;	test for copy instruction...
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	The MVN & MVP instructions accept two operands & hence have an irregular
                                        ;	syntax.  Therefore, special handling is necessary to assemble either of
                                        ;	these instructions.
                                        ;
                                        ;	The official WDC syntax has the programmer entering a pair of 24 bit ad-
                                        ;	dresses as operands, with the assembler isolating bits 16-23 to	use as
                                        ;	operands.  This formality has been dispensed with in this monitor & the
                                        ;	operands are expected to be 8 bit bank values.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
   1684 C1D9 C2 20                    +            .byte $c2,$20
                                                         ;16 bit load
   1685 C1DB A5 CA                                lda mnepck            ;packed menmonic
   1686 C1DD A2 54                                ldx #opc_mvn          ;MVN opcode
   1687 C1DF C9 DC                    +            cmp #<mne_mvn
   1687 C1E1 7D                       +            .byte >mne_mvn
                                        ;is it MVN?
   1688 C1E2 F0 07                                beq monasc01          ;yes
                                        ;
   1690 C1E4 A2 44                                ldx #opc_mvp          ;MVP opcode
   1691 C1E6 C9 DC                    +            cmp #<mne_mvp
   1691 C1E8 8D                       +            .byte >mne_mvp
                                        ;is it MVP?
   1692 C1E9 D0 30                                bne monasc02          ;no
                                        ;
                                        ;
                                        ;	assemble copy instruction...
                                        ;
   1697 C1EB 86 CC                      monasc01 stx opcode            ;store relevant opcode
   1698 C1ED E2 20                    +            .byte $e2,$20
                                        
   1699 C1EF 20 3D CB                             jsr instdata          ;get instruction data
   1700 C1F2 86 CF                                stx eopsize           ;effective operand size
   1701 C1F4 E8                                   inx
   1702 C1F5 86 C8                                stx instsize          ;instruction size
   1703 C1F7 A2 01                                ldx #s_oper-s_word    ;operand index
   1704 C1F9 86 CE                                stx xrtemp            ;set it
                                        ;
   1706 C1FB 20 36 C8                   .0000010 jsr ascbin            ;evaluate bank number
   1707 C1FE B0 50                                bcs monasc04          ;conversion error
                                        ;
   1709 C200 F0 4E                                beq monasc04          ;nothing returned — error
                                        ;
   1711 C202 20 CD CA                             jsr facasize          ;bank must be...
   1712 C205 C9 02                                cmp #s_word           ;8 bits
   1713 C207 B0 47                                bcs monasc04          ;it isn't — error
                                        ;
   1715 C209 A5 A9                                lda faca              ;bank
   1716 C20B A6 CE                                ldx xrtemp            ;operand index
   1717 C20D 95 BD                                sta operand,x         ;store
   1718 C20F C6 CE                                dec xrtemp            ;index=index-1
   1719 C211 10 E8                                bpl .0000010          ;get destination bank
                                        ;
   1721 C213 20 CE CB                             jsr getcharr          ;should be no more input
   1722 C216 D0 38                                bne monasc04          ;there is — error
                                        ;
   1724 C218 4C 16 C3                             jmp monasc08          ;finish MVN/MVP assembly 
                                        ;
                                        ;
                                        ;	continue with normal assembly...
                                        ;
   1729 C21B E2 20                      monasc02 +         .byte $e2,$20
                                                        ;back to 8 bits
                                        ;
   1731 C21D 20 2E CC                   monasc03 jsr getcharw          ;get next char
   1732 C220 F0 3D                                beq monasc06          ;EOI, no argument
                                        ;
   1734 C222 C9 21                                cmp #amp_flim
   1735 C224 D0 0A                                bne .0000010          ;no forced long immediate
                                        ;
   1737 C226 A5 D0                                lda flimflag          ;FLIM already set?
   1738 C228 D0 26                                bne monasc04          ;yes — error
                                        ;
   1740 C22A A9 C0                                lda #flimmask
   1741 C22C 85 D0                                sta flimflag          ;set flag &...
   1742 C22E 80 ED                                bra monasc03          ;get next char
                                        ;
   1744 C230 C9 23                      .0000010 cmp #amp_imm          ;immediate mode?
   1745 C232 F0 08                                beq .0000020          ;yes
                                        ;
   1747 C234 C9 28                                cmp #amp_ind          ;indirect mode?
   1748 C236 F0 04                                beq .0000020          ;yes
                                        ;
   1750 C238 C9 5B                                cmp #amp_indl         ;indirect long mode?
   1751 C23A D0 07                                bne .0000030          ;no
                                        ;
   1753 C23C 8D 51 02                   .0000020 sta auxbuf            ;set addressing mode preamble
   1754 C23F E6 C0                                inc auxbufix          ;bump aux buffer index &...
   1755 C241 80 02                                bra .0000040          ;evaluate operand
                                        ;
   1757 C243 C6 C1                      .0000030 dec ibufidx           ;position back to char
                                        ;
   1759 C245 20 36 C8                   .0000040 jsr ascbin            ;evaluate operand
   1760 C248 D0 09                                bne monasc05          ;evaluated
                                        ;
   1762 C24A B0 04                                bcs monasc04          ;conversion error
                                        ;
   1764 C24C A5 C0                                lda auxbufix          ;no operand...any preamble?
   1765 C24E F0 0F                                beq monasc06          ;no, syntax is okay so far
                                        ;
   1767 C250 4C 66 C3                   monasc04 jmp monasc10          ;abort w/error
                                        ;
   1769 C253 20 CD CA                   monasc05 jsr facasize          ;size operand
   1770 C256 C9 04                                cmp #s_dword          ;max is 24 bits
   1771 C258 B0 F6                                bcs monasc04          ;too big
                                        ;
   1773 C25A 85 CF                                sta eopsize           ;save operand size
   1774 C25C 20 C3 CA                             jsr facaoper          ;store operand
                                        ;
   1776 C25F C6 C1                      monasc06 dec ibufidx           ;back to last char
   1777 C261 A6 C0                                ldx auxbufix          ;mode buffer index
   1778 C263 D0 01                                bne .0000010          ;preamble in buffer
                                        ;
   1780 C265 E8                                   inx                   ;step past preamble position
                                        ;
   1782 C266 20 9B CC                   .0000010 jsr getcharc          ;get a char w/forced UC
   1783 C269 F0 0A                                beq .0000030          ;EOI
                                        ;
   1785 C26B E0 20                                cpx #s_auxbuf         ;mode buffer full?
   1786 C26D B0 E1                                bcs monasc04          ;yes, too much input
                                        ;
   1788 C26F 9D 51 02                   .0000020 sta auxbuf,x          ;store for comparison
   1789 C272 E8                                   inx
   1790 C273 D0 F1                                bne .0000010
                                        ;
                                        ;
                                        ;	evaluate mnemonic...
                                        ;
   1795 C275 A2 5B                      .0000030 ldx #n_mnemon-1       ;starting mnemonic index
                                        ;
   1797 C277 8A                         monasc07 txa                   ;convert index...
   1798 C278 0A                                   asl                   ;to offset
   1799 C279 A8                                   tay                   ;now mnemonic table index
   1800 C27A C2 20                    +            .byte $c2,$20
                                                         ;16 bit compare
   1801 C27C B9 00 CD                             lda mnetab,y          ;get mnemonic from table
   1802 C27F C5 CA                                cmp mnepck            ;compare to entered mnemonic
   1803 C281 E2 20                    +            .byte $e2,$20
                                                        ;back to 8 bits
   1804 C283 F0 05                                beq .0000020          ;match
                                        ;
   1806 C285 CA                         .0000010 dex                   ;try next mnemonic
   1807 C286 30 C8                                bmi monasc04          ;unknown mnemonic — error
                                        ;
   1809 C288 80 ED                                bra monasc07          ;keep going
                                        ;
   1811 C28A 86 CA                      .0000020 stx mnepck            ;save mnemonic index
   1812 C28C 8A                                   txa
   1813 C28D A2 00                                ldx #0                ;trial opcode
                                        ;
   1815 C28F DD B8 CD                   .0000030 cmp mnetabix,x        ;search index table...
   1816 C292 F0 05                                beq .0000050          ;for a match
                                        ;
   1818 C294 E8                         .0000040 inx                   ;keep going until we...
   1819 C295 D0 F8                                bne .0000030          ;search entire table
                                        ;
   1821 C297 80 B7                                bra monasc04          ;this shouldn't happen!
                                        ;
                                        ;	—————————————————————————————————————————————————————————————————————
                                        ;	If the mnemonic index table search fails then there is a coding error
                                        ;	somewhere, as every entry in the mnemonic table is supposed to have a
                                        ;	matching cardinal index.
                                        ;	—————————————————————————————————————————————————————————————————————
                                        ;
                                        ;
                                        ;	evaluate addressing mode...
                                        ;
   1832 C299 86 CC                      .0000050 stx opcode            ;save trial opcode
   1833 C29B 20 3D CB                             jsr instdata          ;get related instruction data
   1834 C29E 85 D3                                sta vopsflag          ;save 8/16 or relative flag
   1835 C2A0 86 D1                                stx iopsize           ;operand size
   1836 C2A2 E8                                   inx
   1837 C2A3 86 C8                                stx instsize          ;instruction size
   1838 C2A5 A6 CC                                ldx opcode            ;recover trial opcode
   1839 C2A7 98                                   tya                   ;addressing mode
   1840 C2A8 0A                                   asl                   ;create table index
   1841 C2A9 A8                                   tay
   1842 C2AA C2 20                    +            .byte $c2,$20
                                        
   1843 C2AC B9 BC CF                             lda ms_lutab,y        ;mode lookup table
   1844 C2AF 85 A6                                sta addrb             ;set pointer
   1845 C2B1 E2 20                    +            .byte $e2,$20
                                        
   1846 C2B3 A0 00                                ldy #0
                                        ;
   1848 C2B5 B1 A6                      .0000060 lda (addrb),y         ;table addressing mode
   1849 C2B7 D9 51 02                             cmp auxbuf,y          ;entered addressing mode
   1850 C2BA F0 04                                beq .0000080          ;okay so far
                                        ;
   1852 C2BC A5 CA                      .0000070 lda mnepck            ;reload mnemonic index        
   1853 C2BE 80 D4                                bra .0000040          ;wrong opcode for addresing mode
                                        ;
   1855 C2C0 09 00                      .0000080 ora #0                ;last char the terminator?
   1856 C2C2 F0 03                                beq .0000090          ;yes, evaluate operand
                                        ;
   1858 C2C4 C8                                   iny
   1859 C2C5 80 EE                                bra .0000060          ;keep testing
                                        ;
                                        ;
                                        ;	evaluate operand...
                                        ;
   1864 C2C7 A5 CF                      .0000090 lda eopsize           ;entered operand size
   1865 C2C9 D0 06                                bne .0000100          ;non-zero
                                        ;
   1867 C2CB 05 D1                                ora iopsize           ;instruction operand size
   1868 C2CD D0 ED                                bne .0000070          ;wrong opcode — keep trying
                                        ;
   1870 C2CF 80 45                                bra monasc08          ;assemble instruction
                                        ;
   1872 C2D1 24 D3                      .0000100 bit vopsflag          ;is this a branch?
   1873 C2D3 70 3A                                bvs .0000160          ;yes, evaluate
                                        ;
   1875 C2D5 A5 D1                                lda iopsize           ;instruction operand size
   1876 C2D7 24 D3                                bit vopsflag          ;variable size operand allowed?
   1877 C2D9 30 15                                bmi .0000130          ;yes
                                        ;
   1879 C2DB 24 D0                                bit flimflag          ;was forced immediate set?
   1880 C2DD 10 03                                bpl .0000110          ;no
                                        ;         
   1882 C2DF 4C 66 C3                             jmp monasc10          ;yes — error
                                        ;
   1884 C2E2 C5 CF                      .0000110 cmp eopsize           ;entered operand size
   1885 C2E4 90 D6                                bcc .0000070          ;operand too big
                                        ;
   1887 C2E6 85 CF                                sta eopsize           ;new operand size
   1888 C2E8 80 2C                                bra monasc08          ;assemble, otherwise...
                                        ;
   1890 C2EA C5 CF                      .0000120 cmp eopsize           ;exact size match required
   1891 C2EC D0 CE                                bne .0000070          ;mismatch — wrong opcode
                                        ;
   1893 C2EE 80 26                                bra monasc08          ;assemble
                                        ;
                                        ;
                                        ;	process variable size immediate mode operand...
                                        ;
   1898 C2F0 A6 CF                      .0000130 ldx eopsize           ;entered operand size
   1899 C2F2 E0 03                                cpx #s_xword          ;check size
   1900 C2F4 B0 70                                bcs monasc10          ;too big — error
                                        ;
   1902 C2F6 24 D0                                bit flimflag          ;forced long immediate?
   1903 C2F8 10 06                                bpl .0000140          ;no
                                        ;
   1905 C2FA A2 02                                ldx #s_word           ;promote operand size to...
   1906 C2FC 86 CF                                stx eopsize           ;16 bits
   1907 C2FE 80 08                                bra .0000150
                                        ;
   1909 C300 E0 02                      .0000140 cpx #s_word           ;16 bits?
   1910 C302 D0 04                                bne .0000150          ;no
                                        ;
   1912 C304 A0 C0                                ldy #flimmask         ;yes so force long...
   1913 C306 84 D0                                sty flimflag          ;immediate disassembly
                                        ;
   1915 C308 1A                         .0000150 ina                   ;new instruction operand size
   1916 C309 C5 CF                                cmp eopsize           ;compare against operand size
   1917 C30B 90 AF                                bcc .0000070          ;mismatch — can't assemble
                                        ;
   1919 C30D 80 07                                bra monasc08          ;okay, assemble
                                        ;
                                        ;
                                        ;	process relative branch...
                                        ;
   1924 C30F 20 89 CB                   .0000160 jsr targoff           ;compute branch offset
   1925 C312 B0 52                                bcs monasc10          ;branch out of range
                                        ;
   1927 C314 85 CF                                sta eopsize           ;effective operand size
                                        ;
                                        ;
                                        ;	assemble instruction...
                                        ;
   1932 C316 A5 CC                      monasc08 lda opcode            ;opcode
   1933 C318 87 A2                    +            .byte $87,addra
                                        ;store at assembly address
   1934 C31A A6 CF                                ldx eopsize           ;any operand to process?
   1935 C31C F0 09                                beq .0000020          ;no
                                        ;
   1937 C31E 9B                       +            .byte $9b
                                                           ;also storage offset
                                        ;
   1939 C31F CA                         .0000010 dex
   1940 C320 B5 BD                                lda operand,x         ;get operand byte &...
   1941 C322 97 A2                    +            .byte $97,addra
                                        ;poke into memory
   1942 C324 88                                   dey
   1943 C325 D0 F8                                bne .0000010          ;next
                                        ;
   1945 C327 A9 0D                      .0000020 lda #a_cr
   1946 C329 20 06 F4                             jsr putcha            ;return to left margin
   1947 C32C A9 41                                lda #asmprfx          ;assembly prefix
   1948 C32E 20 71 C6                             jsr dpycodaa          ;disassemble & display
                                        ;
                                        ;
                                        ;	prompt for next instruction...
                                        ;
   1953 C331 A9 20                      monasc09 lda #a_blank
   1954 C333 A2 08                                ldx #ascprmct-1
                                        ;
   1956 C335 9D 00 02                   .0000010 sta ibuffer,x         ;prepare buffer for...
   1957 C338 CA                                   dex                   ;next instruction
   1958 C339 10 FA                                bpl .0000010
                                        ;
   1960 C33B A9 41                                lda #asmprfx          ;assemble code...
   1961 C33D 8D 00 02                             sta ibuffer           ;prompt prefix
   1962 C340 A5 A4                                lda addra+s_word      ;next instruction address bank
   1963 C342 20 88 C9                             jsr binhex            ;convert to ASCII
   1964 C345 8D 02 02                             sta ibuffer+apadrbkh  ;store MSN in buffer
   1965 C348 8E 03 02                             stx ibuffer+apadrbkl  ;store LSN in buffer
   1966 C34B A5 A3                                lda addra+s_byte      ;next instruction address MSB
   1967 C34D 20 88 C9                             jsr binhex
   1968 C350 8D 04 02                             sta ibuffer+apadrmbh
   1969 C353 8E 05 02                             stx ibuffer+apadrmbl
   1970 C356 A5 A2                                lda addra             ;next instruction address LSB
   1971 C358 20 88 C9                             jsr binhex
   1972 C35B 8D 06 02                             sta ibuffer+apadrlbh
   1973 C35E 8E 07 02                             stx ibuffer+apadrlbl
   1974 C361 A9 09                                lda #ascprmct         ;effective input count
   1975 C363 4C 4D C1                             jmp moncea            ;reenter input loop
                                        ;
                                        ;
                                        ;	process assembly error...
                                        ;
   1980 C366 20 C8 C7                   monasc10 jsr dpyerr            ;indicate error &...
   1981 C369 80 C6                                bra monasc09          ;prompt w/same assembly address
                                        ;
                                        ;================================================================================
                                        ;
                                        ;mondsc: DISASSEMBLE CODE
                                        ;
                                        ;	—————————————————————————————
                                        ;	syntax: D [<addr1> [<addr2>]]
                                        ;	—————————————————————————————
                                        ;
   1991 C36B B0 11                      mondsc   bcs .0000010          ;no parameters
                                        ;
   1993 C36D 64 D0                                stz flimflag          ;reset to 8 bit mode
   1994 C36F 20 CD CA                             jsr facasize          ;check starting...
   1995 C372 C9 04                                cmp #s_dword          ;address
   1996 C374 B0 46                                bcs .0000050          ;out of range — error
                                        ;
   1998 C376 20 AF CA                             jsr facaddra          ;copy starting address
   1999 C379 20 E1 CA                             jsr getparm           ;get ending address
   2000 C37C 90 17                                bcc .0000020          ;gotten
                                        ;
   2002 C37E 20 9B C9                   .0000010 jsr clrfaca           ;clear accumulator
   2003 C381 C2 20                    +            .byte $c2,$20
                                        
   2004 C383 18                                   clc
   2005 C384 A5 A2                                lda addra             ;starting address
   2006 C386 69 15                    +            adc #<n_dbytes
   2006 C388 00                       +            .byte >n_dbytes
                                        ;default bytes
   2007 C389 85 A9                                sta faca              ;effective ending address
   2008 C38B E2 20                    +            .byte $e2,$20
                                        
   2009 C38D A5 A4                                lda addra+s_word      ;starting bank
   2010 C38F 69 00                                adc #0
   2011 C391 85 AB                                sta faca+s_word       ;effective ending bank
   2012 C393 B0 27                                bcs .0000050          ;end address > $FFFFFF
                                        ;
   2014 C395 20 CD CA                   .0000020 jsr facasize          ;check ending...
   2015 C398 C9 04                                cmp #s_dword          ;address
   2016 C39A B0 20                                bcs .0000050          ;out of range — error
                                        ;
   2018 C39C 20 B9 CA                             jsr facaddrb          ;set ending address
   2019 C39F 20 E1 CA                             jsr getparm           ;check for excess input
   2020 C3A2 90 18                                bcc .0000050          ;present — error
                                        ;
   2022 C3A4 20 07 CA                             jsr calccnt           ;calculate bytes
   2023 C3A7 90 13                                bcc .0000050          ;end < start
                                        ;
   2025 C3A9 20 AD CC                   .0000030 jsr teststop          ;test for display stop
   2026 C3AC B0 0B                                bcs .0000040          ;stopped
                                        ;
   2028 C3AE 20 08 C8                             jsr newline           ;next line
   2029 C3B1 20 6F C6                             jsr dpycod            ;disassemble & display
   2030 C3B4 20 65 CA                             jsr decdcnt           ;decrement byte count
   2031 C3B7 90 F0                                bcc .0000030          ;not done
                                        ;
   2033 C3B9 4C 49 C1                   .0000040 jmp monce             ;back to main loop
                                        ;
   2035 C3BC 4C 88 C1                   .0000050 jmp monerr            ;address range error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monjmp: EXECUTE CODE
                                        ;
                                        ;	—————————————————————————————————————————————————————————————
                                        ;	syntax: G [<addr>]
                                        ;
                                        ;	If no address is specified, the current values in the PB & PC
                                        ;	shadow registers are used.
                                        ;	—————————————————————————————————————————————————————————————
                                        ;
   2048 C3BF 20 72 CB                   monjmp   jsr setxaddr          ;set execution address
   2049 C3C2 B0 29                                bcs monjmpab          ;out of range — error
                                        ;
   2051 C3C4 20 E1 CA                             jsr getparm           ;check for excess input
   2052 C3C7 90 24                                bcc monjmpab          ;too much input — error
                                        ;
   2054 C3C9 C2 20                    +            .byte $c2,$20
                                                         ;16 bit .A
   2055 C3CB A5 97                                lda reg_spx
   2056 C3CD 1B                       +            .byte $1b
                                                           ;restore SP
                                        ;
   2058 C3CE E2 20                      monjmpaa +         .byte $e2,$20
                                        
   2059 C3D0 A5 8A                                lda reg_pbx
   2060 C3D2 48                                   pha                   ;restore PB
   2061 C3D3 C2 20                    +            .byte $c2,$20
                                        
   2062 C3D5 A5 88                                lda reg_pcx
   2063 C3D7 48                                   pha                   ;restore PC
   2064 C3D8 E2 20                    +            .byte $e2,$20
                                        
   2065 C3DA A5 9B                                lda reg_srx
   2066 C3DC 48                                   pha                   ;restore SR
   2067 C3DD A5 9D                                lda reg_dbx
   2068 C3DF 48                                   pha
   2069 C3E0 AB                       +            .byte $ab
                                                           ;restore DB
   2070 C3E1 C2 30                    +            .byte $c2,$30
                                        
   2071 C3E3 A5 9E                                lda reg_dpx
   2072 C3E5 5B                       +            .byte $5b
                                                           ;restore DP
   2073 C3E6 A5 8B                                lda reg_ax            ;restore .C
   2074 C3E8 A6 8F                                ldx reg_xx            ;restore .X
   2075 C3EA A4 93                                ldy reg_yx            ;restore .Y
   2076 C3EC 40                                   rti                   ;execute code
                                        ;
   2078 C3ED 4C 88 C1                   monjmpab jmp monerr            ;error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monjsr: EXECUTE CODE AS SUBROUTINE
                                        ;
                                        ;	————————————————————————————————————————————————————————————
                                        ;	syntax: J [<addr>]
                                        ;
                                        ;	If no address is specified the current values in the PB & PC
                                        ;	shadow registers are used.   An RTS at the end of the called
                                        ;	subroutine will return control to the monitor  provided  the
                                        ;	stack remains in balance.
                                        ;	————————————————————————————————————————————————————————————
                                        ;
   2093 C3F0 20 72 CB                   monjsr   jsr setxaddr          ;set execution address
   2094 C3F3 B0 F8                                bcs monjmpab          ;out of range — error
                                        ;
   2096 C3F5 20 E1 CA                             jsr getparm           ;check for excess input
   2097 C3F8 90 F3                                bcc monjmpab          ;too much input — error
                                        ;
   2099 C3FA C2 20                    +            .byte $c2,$20
                                        
   2100 C3FC A5 97                                lda reg_spx
   2101 C3FE 1B                       +            .byte $1b
                                                           ;restore SP &...
   2102 C3FF 20 CE C3                             jsr monjmpaa          ;call subroutine
   2103 C402 08                                   php                   ;push SR
   2104 C403 C2 30                    +            .byte $c2,$30
                                        
   2105 C405 85 8B                                sta reg_ax            ;save...
   2106 C407 86 8F                                stx reg_xx            ;register...
   2107 C409 84 93                                sty reg_yx            ;returns
   2108 C40B E2 10                    +            .byte $e2,$10
                                                        ;8 bit .X & .Y
   2109 C40D FA                                   plx                   ;get & save...
   2110 C40E 86 9B                                stx reg_srx           ;return SR
   2111 C410 3B                       +            .byte $3b
                                                           ;get & save...
   2112 C411 85 97                                sta reg_spx           ;return SP
   2113 C413 7B                       +            .byte $7b
                                                           ;get & save...
   2114 C414 85 9E                                sta reg_dpx           ;DP pointer
   2115 C416 E2 20                    +            .byte $e2,$20
                                                        ;8 bit .A
   2116 C418 4B                       +            .byte $4b
                                                           ;get &...
   2117 C419 68                                   pla                   ;save...
   2118 C41A 85 8A                                sta reg_pbx           ;return PB
   2119 C41C 8B                       +            .byte $8b
                                                           ;get &...
   2120 C41D 68                                   pla                   ;save...
   2121 C41E 85 9D                                sta reg_dbx           ;return DB
   2122 C420 F4                       +            .byte $f4
   2122 C421 CF D0                    +            .word mm_rts
                                        ;"*RET"
   2123 C423 4C 87 C0                             jmp moncom            ;return to monitor
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monchm: CHANGE and/or DUMP MEMORY
                                        ;
                                        ;	————————————————————————————————————————————
                                        ;	syntax: > [<addr> <operand> [<operand>]...]
                                        ;
                                        ;	> <addr> without operands will dump 16 bytes
                                        ;	of memory, starting at <addr>.
                                        ;	————————————————————————————————————————————
                                        ;
   2136 C426 B0 23                      monchm   bcs .0000030          ;no address given — quit
                                        ;
   2138 C428 20 CD CA                             jsr facasize          ;size address
   2139 C42B C9 04                                cmp #s_dword
   2140 C42D B0 1F                                bcs .0000040          ;address out of range — error
                                        ;
   2142 C42F 20 AF CA                             jsr facaddra          ;set starting address
   2143 C432 20 E2 CB                             jsr getpat            ;evaluate change pattern
   2144 C435 90 04                                bcc .0000010          ;entered
                                        ;
   2146 C437 10 0C                                bpl .0000020          ;not entered
                                        ;
   2148 C439 80 13                                bra .0000040          ;evaluation error
                                        ;
   2150 C43B 88                         .0000010 dey                   ;next byte
   2151 C43C 30 07                                bmi .0000020          ;done
                                        ;
   2153 C43E B9 51 02                             lda auxbuf,y          ;write pattern...
   2154 C441 97 A2                    +            .byte $97,addra
                                        ;to memory
   2155 C443 80 F6                                bra .0000010          ;next
                                        ;
   2157 C445 20 08 C8                   .0000020 jsr newline           ;next line
   2158 C448 20 85 C7                             jsr dpymem            ;regurgitate changes
                                        ;
   2160 C44B 4C 49 C1                   .0000030 jmp monce             ;back to command loop
                                        ;
   2162 C44E 4C 88 C1                   .0000040 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;moncmp: COMPARE MEMORY
                                        ;
                                        ;	—————————————————————————————
                                        ;	syntax: C <start> <end> <ref>
                                        ;	—————————————————————————————
                                        ;
   2172 C451 B0 26                      moncmp   bcs .0000030          ;start not given — quit
                                        ;
   2174 C453 20 89 CA                             jsr enddest           ;get end & reference addresses
   2175 C456 B0 24                                bcs .0000040          ;range or other error
                                        ;
   2177 C458 64 CE                                stz xrtemp            ;column counter
                                        ;
   2179 C45A 20 AD CC                   .0000010 jsr teststop          ;check for stop
   2180 C45D B0 1A                                bcs .0000030          ;abort
                                        ;
   2182 C45F A7 A2                    +            .byte $a7,addra
                                        ;get from reference location
   2183 C461 C7 BD                    +            .byte $c7,operand
                                        ;test against compare location
   2184 C463 F0 03                                beq .0000020          ;match, don't display address
                                        ;
   2186 C465 20 57 C6                             jsr dpycaddr          ;display current location
                                        ;
   2188 C468 20 09 CB                   .0000020 jsr nxtaddra          ;next reference location
   2189 C46B B0 0C                                bcs .0000030          ;done
                                        ;
   2191 C46D C2 20                    +            .byte $c2,$20
                                        
   2192 C46F E6 BD                                inc operand           ;bump bits 0-15
   2193 C471 E2 20                    +            .byte $e2,$20
                                        
   2194 C473 D0 E5                                bne .0000010
                                        ;
   2196 C475 E6 BF                                inc operand+s_word    ;bump bits 16-23
   2197 C477 80 E1                                bra .0000010
                                        ;
   2199 C479 4C 49 C1                   .0000030 jmp monce             ;return to command exec
                                        ;
   2201 C47C 4C 88 C1                   .0000040 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;moncpy: COPY (transfer) MEMORY
                                        ;
                                        ;	————————————————————————————————
                                        ;	syntax: T <start> <end> <target>
                                        ;	————————————————————————————————
                                        ;
   2211 C47F B0 49                      moncpy   bcs .0000040          ;start not given — quit
                                        ;
   2213 C481 20 89 CA                             jsr enddest           ;get end & target addresses
   2214 C484 B0 47                                bcs .0000050          ;range or other error
                                        ;
   2216 C486 C2 20                    +            .byte $c2,$20
                                        
   2217 C488 38                                   sec
   2218 C489 A5 A6                                lda addrb             ;ending address
   2219 C48B E5 A2                                sbc addra             ;starting address
   2220 C48D 90 3E                                bcc .0000050          ;start > end — error
                                        ;
   2222 C48F 85 B1                                sta facb              ;bytes to copy
   2223 C491 E2 20                    +            .byte $e2,$20
                                        
   2224 C493 C2 10                    +            .byte $c2,$10
                                        
   2225 C495 A5 BF                                lda operand+s_word    ;target bank
   2226 C497 A4 BD                                ldy operand           ;target address
   2227 C499 C5 A4                                cmp addra+s_word      ;source bank
   2228 C49B C2 20                    +            .byte $c2,$20
                                        
   2229 C49D D0 1C                                bne .0000020          ;can use forward copy
                                        ;
   2231 C49F C4 A2                                cpy addra             ;source address
   2232 C4A1 90 18                                bcc .0000020          ;can use forward copy
                                        ;
   2234 C4A3 D0 02                                bne .0000010          ;must use reverse copy
                                        ;
   2236 C4A5 80 26                                bra .0000050          ;copy in place — error
                                        ;
   2238 C4A7 A5 B1                      .0000010 lda facb              ;get bytes to copy
   2239 C4A9 48                                   pha                   ;protect
   2240 C4AA 20 93 CC                             jsr lodbnk            ;load banks
   2241 C4AD 20 2F CA                             jsr cprvsup           ;do reverse copy setup
   2242 C4B0 68                                   pla                   ;get bytes to copy
   2243 C4B1 AA                                   tax                   ;save a copy
   2244 C4B2 18                                   clc
   2245 C4B3 65 BD                                adc operand           ;change target to...
   2246 C4B5 A8                                   tay                   ;target end
   2247 C4B6 8A                                   txa                   ;recover bytes to copy
   2248 C4B7 A6 A6                                ldx addrb             ;source end
   2249 C4B9 80 0C                                bra .0000030
                                        ;
   2251 C4BB A5 B1                      .0000020 lda facb              ;get bytes to copy
   2252 C4BD 48                                   pha                   ;protect
   2253 C4BE 20 93 CC                             jsr lodbnk            ;load banks
   2254 C4C1 20 28 CA                             jsr cpfwsup           ;do forward copy setup
   2255 C4C4 68                                   pla                   ;get bytes to copy
   2256 C4C5 A6 A2                                ldx addra             ;source start
                                        ;
   2258 C4C7 4C D4 00                   .0000030 jmp mcftwork          ;copy memory
                                        ;
   2260 C4CA 4C 49 C1                   .0000040 jmp monce             ;back to executive
                                        ;
   2262 C4CD 4C 88 C1                   .0000050 jmp monerr            ;error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;mondmp: DISPLAY MEMORY RANGE
                                        ;
                                        ;	—————————————————————————————
                                        ;	syntax: M [<addr1> [<addr2>]]
                                        ;	—————————————————————————————
                                        ;
   2272 C4D0 B0 0F                      mondmp   bcs .0000010          ;no parameters
                                        ;
   2274 C4D2 20 CD CA                             jsr facasize          ;check address...
   2275 C4D5 C9 04                                cmp #s_dword          ;range
   2276 C4D7 B0 46                                bcs .0000050          ;address out of range
                                        ;
   2278 C4D9 20 AF CA                             jsr facaddra          ;copy starting address
   2279 C4DC 20 E1 CA                             jsr getparm           ;get ending address
   2280 C4DF 90 17                                bcc .0000020          ;gotten
                                        ;
   2282 C4E1 20 9B C9                   .0000010 jsr clrfaca           ;clear accumulator
   2283 C4E4 C2 20                    +            .byte $c2,$20
                                        
   2284 C4E6 18                                   clc
   2285 C4E7 A5 A2                                lda addra             ;starting address
   2286 C4E9 69 FF                    +            adc #<n_mbytes
   2286 C4EB 00                       +            .byte >n_mbytes
                                        ;default bytes
   2287 C4EC 85 A9                                sta faca              ;effective ending address
   2288 C4EE E2 20                    +            .byte $e2,$20
                                        
   2289 C4F0 A5 A4                                lda addra+s_word      ;starting bank
   2290 C4F2 69 00                                adc #0
   2291 C4F4 85 AB                                sta faca+s_word       ;effective ending bank
   2292 C4F6 B0 27                                bcs .0000050          ;end address > $FFFFFF
                                        ;
   2294 C4F8 20 CD CA                   .0000020 jsr facasize          ;check ending address...
   2295 C4FB C9 04                                cmp #s_dword          ;range
   2296 C4FD B0 20                                bcs .0000050          ;out of range — error
                                        ;
   2298 C4FF 20 B9 CA                             jsr facaddrb          ;copy ending address
   2299 C502 20 E1 CA                             jsr getparm           ;check for excess input
   2300 C505 90 18                                bcc .0000050          ;error
                                        ;
   2302 C507 20 07 CA                             jsr calccnt           ;calculate bytes to dump
   2303 C50A 90 13                                bcc .0000050          ;end < start
                                        ;
   2305 C50C 20 AD CC                   .0000030 jsr teststop          ;test for display stop
   2306 C50F B0 0B                                bcs .0000040          ;stopped
                                        ;
   2308 C511 20 08 C8                             jsr newline           ;next line
   2309 C514 20 85 C7                             jsr dpymem            ;display
   2310 C517 20 65 CA                             jsr decdcnt           ;decrement byte count
   2311 C51A 90 F0                                bcc .0000030          ;not done
                                        ;
   2313 C51C 4C 49 C1                   .0000040 jmp monce             ;back to main loop
                                        ;
   2315 C51F 4C 88 C1                   .0000050 jmp monerr            ;address range error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monfil: FILL MEMORY
                                        ;
                                        ;	—————————————————————————————————————————
                                        ;	syntax: F <start> <end> <fill>
                                        ;
                                        ;	<start> & <end> must be in the same bank.
                                        ;	—————————————————————————————————————————
                                        ;
   2327 C522 B0 5E                      monfil   bcs .0000010          ;start not given — quit
                                        ;
   2329 C524 20 CD CA                             jsr facasize          ;check size
   2330 C527 C9 04                                cmp #s_dword
   2331 C529 B0 5A                                bcs .0000020          ;out of range — error...
                                        ;
   2333 C52B 20 AF CA                             jsr facaddra          ;store start
   2334 C52E 20 E1 CA                             jsr getparm           ;evaluate end
   2335 C531 B0 52                                bcs .0000020          ;not entered — error
                                        ;
   2337 C533 20 CD CA                             jsr facasize          ;check size
   2338 C536 C9 04                                cmp #s_dword
   2339 C538 B0 4B                                bcs .0000020          ;out of range — error
                                        ;
   2341 C53A A5 AB                                lda faca+s_word       ;end bank
   2342 C53C C5 A4                                cmp addra+s_word      ;start bank
   2343 C53E D0 45                                bne .0000020          ;not same — error
                                        ;
   2345 C540 20 B9 CA                             jsr facaddrb          ;store <end>
   2346 C543 C2 20                    +            .byte $c2,$20
                                        
   2347 C545 38                                   sec
   2348 C546 A5 A6                                lda addrb             ;ending address
   2349 C548 E5 A2                                sbc addra             ;starting address
   2350 C54A 90 39                                bcc .0000020          ;start > end — error
                                        ;
   2352 C54C 85 B1                                sta facb              ;bytes to copy
   2353 C54E E2 20                    +            .byte $e2,$20
                                        
   2354 C550 20 E1 CA                             jsr getparm           ;evaluate <fill>
   2355 C553 B0 30                                bcs .0000020          ;not entered — error
                                        ;
   2357 C555 20 CD CA                             jsr facasize          ;<fill> should be...
   2358 C558 C9 02                                cmp #s_word           ;8 bits
   2359 C55A B0 29                                bcs .0000020          ;it isn't — error
                                        ;
   2361 C55C 20 C3 CA                             jsr facaoper          ;store <fill>
   2362 C55F 20 E1 CA                             jsr getparm           ;should be no more parameters
   2363 C562 90 21                                bcc .0000020          ;there are — error
                                        ;
   2365 C564 A5 BD                                lda operand           ;<fill>
   2366 C566 87 A2                    +            .byte $87,addra
                                        ;fill 1st location
   2367 C568 C2 30                    +            .byte $c2,$30
                                                         ;16 bit operations
   2368 C56A A5 B1                                lda facb              ;
   2369 C56C F0 14                                beq .0000010          ;only 1 location — finished
                                        ;
   2371 C56E 3A                                   dea                   ;zero align &...
   2372 C56F 48                                   pha                   ;protect
   2373 C570 E2 20                    +            .byte $e2,$20
                                        
   2374 C572 A5 A4                                lda addra+s_word      ;start bank
   2375 C574 EB                       +            .byte $eb
                                        
   2376 C575 A5 A8                                lda addrb+s_word      ;end bank
   2377 C577 20 28 CA                             jsr cpfwsup           ;do forward copy setup
   2378 C57A 68                                   pla                   ;recover fill count
   2379 C57B A6 A2                                ldx addra             ;fill-from starting location
   2380 C57D 9B                       +            .byte $9b
                                        
   2381 C57E C8                                   iny                   ;fill-to starting location
   2382 C57F 4C D4 00                             jmp mcftwork          ;fill memory
                                        ;
   2384 C582 4C 49 C1                   .0000010 jmp monce             ;goto command executive
                                        ;
   2386 C585 4C 88 C1                   .0000020 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monhnt: SEARCH (hunt) MEMORY
                                        ;
                                        ;	———————————————————————————————————
                                        ;	syntax: H <addr1> <addr2> <pattern>
                                        ;	———————————————————————————————————
                                        ;
   2396 C588 B0 40                      monhnt   bcs .0000050          ;no start address
                                        ;
   2398 C58A 20 CD CA                             jsr facasize          ;size starting address
   2399 C58D C9 04                                cmp #s_dword
   2400 C58F B0 3C                                bcs .0000060          ;address out of range — error
                                        ;
   2402 C591 20 AF CA                             jsr facaddra          ;store starting address
   2403 C594 20 E1 CA                             jsr getparm           ;evaluate ending address
   2404 C597 B0 34                                bcs .0000060          ;no address — error
                                        ;
   2406 C599 20 CD CA                             jsr facasize          ;size ending address
   2407 C59C C9 04                                cmp #s_dword
   2408 C59E B0 2D                                bcs .0000060          ;address out of range — error
                                        ;
   2410 C5A0 20 B9 CA                             jsr facaddrb          ;store ending address
   2411 C5A3 20 07 CA                             jsr calccnt           ;calculate byte range
   2412 C5A6 90 25                                bcc .0000060          ;end < start
                                        ;
   2414 C5A8 20 E2 CB                             jsr getpat            ;evaluate search pattern
   2415 C5AB B0 20                                bcs .0000060          ;error
                                        ;
   2417 C5AD 64 CE                                stz xrtemp            ;clear column counter
                                        ;
   2419 C5AF 20 AD CC                   .0000010 jsr teststop          ;check for stop
   2420 C5B2 B0 16                                bcs .0000050          ;abort
                                        ;
   2422 C5B4 A4 C0                                ldy auxbufix          ;pattern index
                                        ;
   2424 C5B6 88                         .0000020 dey
   2425 C5B7 30 09                                bmi .0000030          ;pattern match
                                        ;
   2427 C5B9 B7 A2                    +            .byte $b7,addra
                                        ;get from memory
   2428 C5BB D9 51 02                             cmp auxbuf,y          ;test against pattern
   2429 C5BE D0 05                                bne .0000040          ;mismatch, next location
                                        ;
   2431 C5C0 F0 F4                                beq .0000020          ;match, keep testing
                                        ;
   2433 C5C2 20 57 C6                   .0000030 jsr dpycaddr          ;display current location
                                        ;
   2435 C5C5 20 09 CB                   .0000040 jsr nxtaddra          ;next location
   2436 C5C8 90 E5                                bcc .0000010          ;not done
                                        ;
   2438 C5CA 4C 49 C1                   .0000050 jmp monce             ;back to executive
                                        ;
   2440 C5CD 4C 88 C1                   .0000060 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monenv: CONVERT NUMERIC VALUE
                                        ;
                                        ;	——————————————————————
                                        ;	syntax: <radix><value>
                                        ;	——————————————————————
                                        ;
   2450 C5D0 20 DF CA                   monenv   jsr getparmr          ;reread & evaluate parameter
   2451 C5D3 B0 26                                bcs .0000020          ;none entered
                                        ;
   2453 C5D5 A2 00                                ldx #0                ;radix index
   2454 C5D7 A0 04                                ldy #n_radix          ;number of radices
                                        ;
   2456 C5D9 5A                         .0000010 phy                   ;save counter
   2457 C5DA DA                                   phx                   ;save radix index
   2458 C5DB 20 08 C8                             jsr newline           ;next line &...
   2459 C5DE 20 7B C7                             jsr clearlin          ;clear it
   2460 C5E1 A9 20                                lda #a_blank
   2461 C5E3 A2 04                                ldx #halftab
   2462 C5E5 20 FB C7                             jsr multspc           ;indent 1/2 tab
   2463 C5E8 FA                                   plx                   ;get radix index but...
   2464 C5E9 DA                                   phx                   ;put it back
   2465 C5EA BD F3 CC                             lda radxtab,x         ;get radix
   2466 C5ED 20 F4 C8                             jsr binasc            ;convert to ASCII
   2467 C5F0 5A                                   phy                   ;string address MSB
   2468 C5F1 DA                                   phx                   ;string address LSB
   2469 C5F2 20 1D C8                             jsr sprint            ;print
   2470 C5F5 FA                                   plx                   ;get index again
   2471 C5F6 7A                                   ply                   ;get counter
   2472 C5F7 E8                                   inx
   2473 C5F8 88                                   dey
   2474 C5F9 D0 DE                                bne .0000010          ;no
                                        
   2476 C5FB 4C 49 C1                   .0000020 jmp monce             ;back to command exec
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monchr: CHANGE REGISTERS
                                        ;
                                        ;	——————————————————————————————————————————————————————
                                        ;	syntax: ; [PB [PC [.S [.C [.X [.Y [SP [DP [DB]]]]]]]]]
                                        ;
                                        ;	; with no parameters is the same as the R command.
                                        ;	——————————————————————————————————————————————————————
                                        ;
   2488 C5FE B0 33                      monchr   bcs .0000040          ;dump registers & quit
                                        ;
   2490 C600 A0 00                                ldy #0                ;register counter
   2491 C602 84 B7                                sty facc              ;initialize register index
                                        ;
   2493 C604 20 CD CA                   .0000010 jsr facasize          ;get parameter size
   2494 C607 D9 F7 CC                             cmp rcvltab,y         ;check against size table
   2495 C60A B0 2A                                bcs .0000050          ;out of range
                                        ;
   2497 C60C B9 F7 CC                             lda rcvltab,y         ;determine number of bytes...
   2498 C60F C9 03                                cmp #s_word+1         ;to store
   2499 C611 66 B8                                ror facc+s_byte       ;condition flag
   2500 C613 10 02                                bpl .0000020          ;8 bit register size
                                        ;
   2502 C615 C2 20                    +            .byte $c2,$20
                                                         ;16 bit register size
                                        ;
   2504 C617 A6 B7                      .0000020 ldx facc              ;get register index
   2505 C619 A5 A9                                lda faca              ;get parm
   2506 C61B 95 8A                                sta reg_pbx,x         ;put in shadow storage
   2507 C61D E2 20                    +            .byte $e2,$20
                                        
   2508 C61F 06 B8                                asl facc+s_byte       ;mode flag to carry
   2509 C621 8A                                   txa                   ;register index
   2510 C622 69 01                                adc #s_byte           ;at least 1 byte stored
   2511 C624 85 B7                                sta facc              ;save new index
   2512 C626 20 E1 CA                             jsr getparm           ;get a parameter
   2513 C629 B0 08                                bcs .0000040          ;EOI
                                        ;
   2515 C62B C8                                   iny                   ;bump register count
   2516 C62C C0 09                                cpy #n_regchv         ;all registers processed?
   2517 C62E D0 D4                                bne .0000010          ;no, keep going
                                        ;
   2519 C630 20 14 C8                   .0000030 jsr alert             ;excessive input
                                        ;
   2521 C633 4C A4 C0                   .0000040 jmp monreg            ;display changes
                                        ;
   2523 C636 4C 88 C1                   .0000050 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monxit: EXIT TO OPERATING ENVIRONMENT
                                        ;
                                        ;	—————————
                                        ;	syntax: X
                                        ;	—————————
                                        ;
   2533 C639 90 19                      monxit   bcc .0000020          ;no parameters allowed
                                        ;
   2535 C63B C2 20                    +            .byte $c2,$20
                                        
   2536 C63D AD 02 01                             lda vecbrki           ;BRK indirect vector
   2537 C640 C9 59                    +            cmp #<monbrk
   2537 C642 C0                       +            .byte >monbrk
                                        ;we intercept it?
   2538 C643 D0 09                                bne .0000010          ;no, don't change it
                                        ;
   2540 C645 AD 05 01                             lda vecbrkia          ;old vector
   2541 C648 8D 02 01                             sta vecbrki           ;restore it
   2542 C64B 9C 05 01                             stz vecbrkia          ;invalidate old vector
                                        ;         
   2544 C64E E2 30                      .0000010 +         .byte $e2,$30
                                        
   2545 C650 5C 03 F4 00                          jml vecexit           ;long jump to exit
                                        ;
   2547 C654 4C 88 C1                   .0000020 jmp monerr            ;goto error handler
                                        ;
                                        ; * * * * * * * * * * * * * * * * * * * * * * * *
                                        ; * * * * * * * * * * * * * * * * * * * * * * * *
                                        ; * *                                         * *
                                        ; * * S T A R T   o f   S U B R O U T I N E S * *
                                        ; * *                                         * *
                                        ; * * * * * * * * * * * * * * * * * * * * * * * *
                                        ; * * * * * * * * * * * * * * * * * * * * * * * *
                                        ;
                                        ;dpycaddr: DISPLAY CURRENT ADDRESS IN COLUMNS
                                        ;
   2559 C657 A6 CE                      dpycaddr ldx xrtemp            ;column count
   2560 C659 D0 05                                bne .0000010          ;not at right side
                                        ;
   2562 C65B 20 08 C8                             jsr newline           ;next row
   2563 C65E A2 08                                ldx #n_hccols         ;max columns
                                        ;
   2565 C660 E0 08                      .0000010 cpx #n_hccols         ;max columns
   2566 C662 F0 05                                beq .0000020          ;at left margin
                                        ;
   2568 C664 A9 09                                lda #a_ht
   2569 C666 20 06 F4                             jsr putcha            ;tab a column
                                        ;
   2571 C669 CA                         .0000020 dex                   ;one less column
   2572 C66A 86 CE                                stx xrtemp            ;save column counter
   2573 C66C 4C D4 C7                             jmp prntladr          ;print reference address
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpycod: DISASSEMBLE & DISPLAY CODE
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	This function disassembles & displays the machine code at  the  location
                                        ;	pointed to by ADDRA.  Upon return, ADDRA will point to the opcode of the
                                        ;	next instruction.   The entry point at DPYCODAA  should be called with a
                                        ;	disassembly prefix character loaded in .A.   If entered  at  DPYCOD, the
                                        ;	default character will be display at the beginning of each  disassembled
                                        ;	instruction.
                                        ;
                                        ;	The disassembly of immediate mode instructions that can take an 8 or  16
                                        ;	bit operand is affected by the bit pattern that is  stored  in  FLIMFLAG
                                        ;	upon entry to this function:
                                        ;
                                        ;	    FLIMFLAG: xx000000
                                        ;	              ||
                                        ;	              |+—————————> 0:  8 bit .X or .Y operand
                                        ;	              |            1: 16 bit .X or .Y operand
                                        ;	              +——————————> 0:  8 bit .A or BIT # operand
                                        ;	                           1: 16 bit .A or BIT # operand
                                        ;
                                        ;	FLIMFLAG is conditioned according to the operand of  the  most  recently
                                        ;	disassembled REP or SEP instruction.   Hence repetitive  calls  to  this
                                        ;	subroutine will usually result in the correct disassembly of 16 bit imm-
                                        ;	ediate mode instructions.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
   2604 C66F A9 2E                       public dpycod   lda #disprfx          ;default prefix
                                        ;
                                        ;
                                        ;	alternate prefix display entry point...
                                        ;
   2609 C671 20 06 F4                   dpycodaa jsr putcha            ;print prefix
   2610 C674 20 18 C8                             jsr printspc          ;space
   2611 C677 20 D4 C7                             jsr prntladr          ;print long address
   2612 C67A 20 18 C8                             jsr printspc          ;space to opcode field
   2613 C67D 20 DB CA                             jsr getbyte           ;get opcode
   2614 C680 85 CC                                sta opcode            ;save &...
   2615 C682 20 0D C8                             jsr printbyt          ;display as hex
                                        ;
                                        ;
                                        ;	decode menmonic & addressing info...
                                        ;
   2620 C685 A6 CC                                ldx opcode            ;current mnemonic
   2621 C687 BD B8 CD                             lda mnetabix,x        ;get mnemonic index
   2622 C68A 0A                                   asl                   ;double for...
   2623 C68B A8                                   tay                   ;mnemonic table offset
   2624 C68C C2 20                    +            .byte $c2,$20
                                                         ;16 bit load
   2625 C68E B9 00 CD                             lda mnetab,y          ;copy encoded mnemonic to...
   2626 C691 85 CA                                sta mnepck            ;working storage
   2627 C693 E2 20                    +            .byte $e2,$20
                                                        ;back to 8 bits
   2628 C695 20 3D CB                             jsr instdata          ;extract mode & size data
   2629 C698 85 D3                                sta vopsflag          ;save mode flags
   2630 C69A 84 C5                                sty admodidx          ;save mode index
   2631 C69C 0A                                   asl                   ;variable immediate instruction?
   2632 C69D 90 1F                                bcc dpycod01          ;no, effective operand size in .X
                                        ;
                                        ;
                                        ;	determine immediate mode operand size...
                                        ;
   2637 C69F A5 CC                                lda opcode            ;current opcode
   2638 C6A1 24 D0                                bit flimflag          ;operand display mode
   2639 C6A3 10 08                                bpl .0000010          ;8 bit .A & BIT immediate mode
                                        ;
   2641 C6A5 29 1F                                and #aimmaska         ;determine if...
   2642 C6A7 C9 09                                cmp #aimmaskb         ;.A or BIT immediate
   2643 C6A9 F0 10                                beq .0000030          ;display 16 bit operand
                                        ;
   2645 C6AB A5 CC                                lda opcode            ;not .A or BIT immediate
                                        ;
   2647 C6AD 50 0F                      .0000010 bvc dpycod01          ;8 bit .X/.Y immediate mode
                                        ;
   2649 C6AF A0 03                                ldy #n_vopidx-1       ;opcodes to test
                                        ;
   2651 C6B1 D9 B8 CF                   .0000020 cmp vopidx,y          ;looking for LDX #, CPY #, etc.
   2652 C6B4 F0 07                                beq .0000040          ;disassemble a 16 bit operand
                                        ;
   2654 C6B6 88                                   dey
   2655 C6B7 10 F8                                bpl .0000020          ;keep trying
                                        ;
   2657 C6B9 80 03                                bra dpycod01          ;not .X or .Y immediate
                                        ;
   2659 C6BB A5 CC                      .0000030 lda opcode            ;reload
                                        ;
   2661 C6BD E8                         .0000040 inx                   ;16 bit operand
                                        ;
                                        ;
                                        ;	get & display operand bytes...
                                        ;
   2666 C6BE 86 D1                      dpycod01 stx iopsize           ;operand size...
   2667 C6C0 E8                                   inx                   ;plus opcode becomes...
   2668 C6C1 86 C8                                stx instsize          ;instruction size
   2669 C6C3 86 C6                                stx charcnt           ;total bytes to process
   2670 C6C5 A9 0B                                lda #n_opcols+2       ;total operand columns plus WS
   2671 C6C7 85 CE                                sta xrtemp            ;initialize counter
   2672 C6C9 20 1C CA                             jsr clroper           ;clear operand
   2673 C6CC A4 D1                                ldy iopsize           ;operand size
   2674 C6CE F0 16                                beq .0000020          ;no operand
                                        ;
   2676 C6D0 A2 00                                ldx #0                ;operand index
                                        ;
   2678 C6D2 20 DB CA                   .0000010 jsr getbyte           ;get operand byte
   2679 C6D5 95 BD                                sta operand,x         ;save
   2680 C6D7 DA                                   phx                   ;protect operand index
   2681 C6D8 20 0D C8                             jsr printbyt          ;print operand byte
   2682 C6DB C6 CE                                dec xrtemp            ;3 columns used, 2 for...
   2683 C6DD C6 CE                                dec xrtemp            ;operand nybbles &...
   2684 C6DF C6 CE                                dec xrtemp            ;1 for whitespace
   2685 C6E1 FA                                   plx                   ;get operand index
   2686 C6E2 E8                                   inx                   ;bump it
   2687 C6E3 88                                   dey
   2688 C6E4 D0 EC                                bne .0000010          ;next
                                        ;
   2690 C6E6 A6 CE                      .0000020 ldx xrtemp            ;operand columns remaining
   2691 C6E8 20 FB C7                             jsr multspc           ;space to mnemonic field
                                        ;
                                        ;
                                        ;	display mnemonic...
                                        ;
   2696 C6EB A0 03                                ldy #s_mnemon         ;size of ASCII mnemonic
                                        ;
   2698 C6ED A9 00                      .0000030 lda #0                ;initialize char
   2699 C6EF A2 05                                ldx #n_shfenc         ;shifts to execute
                                        ;
   2701 C6F1 06 CA                      .0000040 asl mnepck            ;shift encoded mnemonic
   2702 C6F3 26 CB                                rol mnepck+s_byte
   2703 C6F5 2A                                   rol
   2704 C6F6 CA                                   dex
   2705 C6F7 D0 F8                                bne .0000040
                                        ;
   2707 C6F9 69 3F                                adc #a_mnecvt         ;convert to ASCII &...
   2708 C6FB 48                                   pha                   ;stash
   2709 C6FC 88                                   dey
   2710 C6FD D0 EE                                bne .0000030          ;continue with mnemonic
                                        ;
   2712 C6FF A0 03                                ldy #s_mnemon
                                        ;
   2714 C701 68                         .0000050 pla                   ;get mnenmonic byte
   2715 C702 20 06 F4                             jsr putcha            ;print it
   2716 C705 88                                   dey
   2717 C706 D0 F9                                bne .0000050
                                        ;
                                        ;
                                        ;	display operand...
                                        ;
   2722 C708 A5 D1                                lda iopsize           ;operand size
   2723 C70A F0 6F                                beq clearlin          ;zero, disassembly finished
                                        ;
   2725 C70C 20 18 C8                             jsr printspc          ;space to operand field
   2726 C70F 24 D3                                bit vopsflag          ;check mode flags
   2727 C711 50 08                                bvc dpycod02          ;not a branch
                                        ;
   2729 C713 20 53 CB                             jsr offtarg           ;compute branch target
   2730 C716 A6 C8                                ldx instsize          ;effective instruction size
   2731 C718 CA                                   dex
   2732 C719 86 D1                                stx iopsize           ;effective operand size
                                        ;
   2734 C71B 64 D3                      dpycod02 stz vopsflag          ;clear
   2735 C71D A5 C5                                lda admodidx          ;instruction addressing mode
   2736 C71F C9 0B                                cmp #am_move          ;block move instruction?
   2737 C721 D0 02                                bne .0000010          ;no
                                        ;
   2739 C723 66 D3                                ror vopsflag          ;yes
                                        ;
   2741 C725 0A                         .0000010 asl                   ;convert addressing mode to...
   2742 C726 AA                                   tax                   ;symbology table index
   2743 C727 C2 20                    +            .byte $c2,$20
                                                         ;do a 16 bit load
   2744 C729 BD BC CF                             lda ms_lutab,x        ;addressing symbol pointer
   2745 C72C 48                                   pha
   2746 C72D E2 20                    +            .byte $e2,$20
                                                        ;back to 8 bit loads
   2747 C72F A0 00                                ldy #0
   2748 C731 B3 01                    +            .byte $b3,1
                                        ;get 1st char
   2749 C733 C9 20                                cmp #a_blank
   2750 C735 F0 03                                beq .0000020          ;no addresing mode preamble
                                        ;
   2752 C737 20 06 F4                             jsr putcha            ;print preamble
                                        ;
   2754 C73A A9 24                      .0000020 lda #c_hex
   2755 C73C 20 06 F4                             jsr putcha            ;operand displayed as hex
   2756 C73F A4 D1                                ldy iopsize           ;operand size = index
                                        ;
   2758 C741 88                         .0000030 dey
   2759 C742 30 16                                bmi .0000040          ;done with operand
                                        ;
   2761 C744 B9 BD 00                             lda operand,y         ;get operand byte
   2762 C747 20 F1 C7                             jsr dpyhex            ;print operand byte
   2763 C74A 24 D3                                bit vopsflag          ;block move?
   2764 C74C 10 F3                                bpl .0000030          ;no
                                        ;
   2766 C74E 64 D3                                stz vopsflag          ;reset
   2767 C750 5A                                   phy                   ;protect operand index
   2768 C751 F4                       +            .byte $f4
   2768 C752 F5 CF                    +            .word ms_move
                                        
   2769 C754 20 1D C8                             jsr sprint            ;display MVN/MVP operand separator
   2770 C757 7A                                   ply                   ;recover operand index again
   2771 C758 80 E7                                bra .0000030          ;continue
                                        ;
   2773 C75A FA                         .0000040 plx                   ;symbology LSB
   2774 C75B 7A                                   ply                   ;symbology MSB
   2775 C75C E8                                   inx                   ;move past preamble
   2776 C75D D0 01                                bne .0000050
                                        ;
   2778 C75F C8                                   iny
                                        ;
   2780 C760 5A                         .0000050 phy
   2781 C761 DA                                   phx
   2782 C762 20 1D C8                             jsr sprint            ;print postamble, if any
                                        ;
                                        ;
                                        ;	condition immediate mode display format...
                                        ;
   2787 C765 A5 BD                      dpycod03 lda operand           ;operand LSB
   2788 C767 29 30                                and #pfmxmask         ;isolate M & X bits
   2789 C769 0A                                   asl                   ;shift to match...
   2790 C76A 0A                                   asl                   ;FLIMFLAG alignment
   2791 C76B A6 CC                                ldx opcode            ;current instruction
   2792 C76D E0 C2                                cpx #opc_rep          ;was it REP?
   2793 C76F D0 04                                bne .0000010          ;no
                                        ;
   2795 C771 04 D0                                tsb flimflag          ;set flag bits as required
   2796 C773 80 06                                bra clearlin
                                        ;
   2798 C775 E0 E2                      .0000010 cpx #opc_sep          ;was it SEP?
   2799 C777 D0 02                                bne clearlin          ;no, just exit
                                        ;
   2801 C779 14 D0                                trb flimflag          ;clear flag bits as required
                                        ;
                                        ;================================================================================
                                        ;
                                        ;clearlin: CLEAR DISPLAY LINE
                                        ;
   2807 C77B F4                         clearlin +         .byte $f4
   2807 C77C 0D D0                    +            .word dc_cl
                                        
   2808 C77E 80 4B                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpyibuf: DISPLAY MONITOR INPUT BUFFER CONTENTS
                                        ;
   2814 C780 F4                         dpyibuf +         .byte $f4
   2814 C781 00 02                    +            .word ibuffer
                                        
   2815 C783 80 46                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpymem: DISPLAY MEMORY
                                        ;
                                        ;	————————————————————————————————————————————————————————————
                                        ;	This function displays 16 bytes of memory as hex values & as
                                        ;	ASCII equivalents.  The starting address for the display is
                                        ;	in ADDRA & is expected to be a 24 bit address.  Upon return,
                                        ;	ADDRA will point to the start of the next 16 bytes.
                                        ;	————————————————————————————————————————————————————————————
                                        ;
   2828 C785 E2 30                      dpymem +         .byte $e2,$30
                                        
   2829 C787 64 C6                                stz charcnt           ;reset
   2830 C789 A9 3E                                lda #memprfx
   2831 C78B 20 06 F4                             jsr putcha            ;display prefix
   2832 C78E 20 D4 C7                             jsr prntladr          ;print 24 bit address
   2833 C791 A2 00                                ldx #0                ;string buffer index
   2834 C793 A0 08                                ldy #n_dump           ;bytes per line
                                        ;
   2836 C795 20 DB CA                   .0000010 jsr getbyte           ;get from RAM, also...
   2837 C798 48                                   pha                   ;save for decoding
   2838 C799 DA                                   phx                   ;save string index
   2839 C79A 20 0D C8                             jsr printbyt          ;display as hex ASCII
   2840 C79D E6 C6                                inc charcnt           ;bytes displayed +1
   2841 C79F FA                                   plx                   ;recover string index &...
   2842 C7A0 68                                   pla                   ;byte
   2843 C7A1 C9 20                                cmp #a_blank          ;printable?
   2844 C7A3 90 04                                bcc .0000020          ;no
                                        ;
   2846 C7A5 C9 7F                                cmp #a_del
   2847 C7A7 90 02                                bcc .0000030          ;is printable
                                        ;
   2849 C7A9 A9 2E                      .0000020 lda #memsubch         ;substitute character
                                        ;
   2851 C7AB 9D 00 02                   .0000030 sta ibuffer,x         ;save char
   2852 C7AE E8                                   inx                   ;bump index
   2853 C7AF 88                                   dey                   ;byte count -= 1
   2854 C7B0 D0 E3                                bne .0000010          ;not done
                                        ;
   2856 C7B2 9E 00 02                             stz ibuffer,x         ;terminate ASCII string
   2857 C7B5 A9 3A                                lda #memsepch
   2858 C7B7 20 06 F4                             jsr putcha            ;separate ASCII from bytes
   2859 C7BA F4                       +            .byte $f4
   2859 C7BB 03 D0                    +            .word dc_bf
                                        
   2860 C7BD 20 1D C8                             jsr sprint            ;select reverse video
   2861 C7C0 20 80 C7                             jsr dpyibuf           ;display ASCII equivalents
   2862 C7C3 F4                       +            .byte $f4
   2862 C7C4 18 D0                    +            .word dc_er
                                        ;normal video
   2863 C7C6 80 03                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpyerr: DISPLAY ERROR SIGNAL
                                        ;
   2869 C7C8 F4                         dpyerr +         .byte $f4
   2869 C7C9 45 D0                    +            .word mm_err
                                        ;"*ERR"
                                        ;
   2871 C7CB 20 1D C8                   dpyerraa jsr sprint
   2872 C7CE 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;gendbs: GENERATE DESTRUCTIVE BACKSPACE
                                        ;
   2878 C7CF F4                         gendbs +         .byte $f4
   2878 C7D0 09 D0                    +            .word dc_bs
                                        ;destructive backspace
   2879 C7D2 80 F7                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;prntladr: PRINT 24 BIT CURRENT ADDRESS
                                        ;
   2885 C7D4 08                         prntladr php                   ;protect register sizes
   2886 C7D5 E2 20                    +            .byte $e2,$20
                                        
   2887 C7D7 A5 A4                                lda addra+s_word      ;get bank byte &...
   2888 C7D9 20 F1 C7                             jsr dpyhex            ;display it
   2889 C7DC C2 20                    +            .byte $c2,$20
                                        
   2890 C7DE A5 A2                                lda addra             ;get 16 bit address
   2891 C7E0 28                                   plp                   ;restore register sizes
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpyhexw: DISPLAY BINARY WORD AS HEX ASCII
                                        ;
                                        ;	————————————————————————————————————
                                        ;	Preparatory Ops: .C: word to display
                                        ;
                                        ;	Returned Values: .C: used
                                        ;	                 .X: used
                                        ;	                 .Y: entry value
                                        ;	————————————————————————————————————
                                        ;
   2905 C7E1 08                         dpyhexw  php                   ;save register sizes
   2906 C7E2 C2 20                    +            .byte $c2,$20
                                        
   2907 C7E4 48                                   pha                   ;protect value
   2908 C7E5 E2 20                    +            .byte $e2,$20
                                        
   2909 C7E7 EB                       +            .byte $eb
                                                           ;get MSB &...
   2910 C7E8 20 F1 C7                             jsr dpyhex            ;display
   2911 C7EB C2 20                    +            .byte $c2,$20
                                        
   2912 C7ED 68                                   pla                   ;recover value
   2913 C7EE E2 20                    +            .byte $e2,$20
                                                        ;only LSB visible
   2914 C7F0 28                                   plp                   ;reset register sizes
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpyhex: DISPLAY BINARY BYTE AS HEX ASCII
                                        ;
                                        ;	————————————————————————————————————
                                        ;	Preparatory Ops: .A: byte to display
                                        ;
                                        ;	Returned Values: .A: used
                                        ;	                 .X: used
                                        ;	                 .Y: entry value
                                        ;	————————————————————————————————————
                                        ;
   2928 C7F1 20 88 C9                   dpyhex   jsr binhex            ;convert to hex ASCII
   2929 C7F4 20 06 F4                             jsr putcha            ;print MSN
   2930 C7F7 8A                                   txa
   2931 C7F8 4C 06 F4                             jmp putcha            ;print LSN
                                        ;
                                        ;================================================================================
                                        ;
                                        ;multspc: PRINT MULTIPLE BLANKS
                                        ;
                                        ;	————————————————————————————————————————————————
                                        ;	Preparatory Ops : .X: number of blanks to print
                                        ;
                                        ;	Register Returns: none
                                        ;
                                        ;	Calling Example : ldx #3
                                        ;	                  jsr multspc    ;print 3 spaces
                                        ;
                                        ;	Notes: This sub will print 1 blank if .X=0.
                                        ;	————————————————————————————————————————————————
                                        ;
   2948 C7FB 8A                         multspc  txa
   2949 C7FC D0 01                                bne .0000010          ;blank count specified
                                        ;
   2951 C7FE E8                                   inx                   ;default to 1 blank
                                        ;
   2953 C7FF A9 20                      .0000010 lda #a_blank
                                        ;
   2955 C801 20 06 F4                   .0000020 jsr putcha
   2956 C804 CA                                   dex
   2957 C805 D0 FA                                bne .0000020
                                        ;
   2959 C807 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;newline: PRINT NEWLINE (CRLF)
                                        ;
   2965 C808 F4                         newline +         .byte $f4
   2965 C809 1E D0                    +            .word dc_lf
                                        
   2966 C80B 80 BE                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;printbyt: PRINT A BYTE WITH LEADING SPACE
                                        ;
   2972 C80D 48                         printbyt pha                   ;protect byte
   2973 C80E 20 18 C8                             jsr printspc          ;print leading space
   2974 C811 68                                   pla                   ;restore &...
   2975 C812 80 DD                                bra dpyhex            ;print byte
                                        ;         
                                        ;================================================================================
                                        ;
                                        ;alert: ALERT USER w/TERMINAL BELL
                                        ;
   2981 C814 A9 07                      alert    lda #a_bel
   2982 C816 80 02                                bra printcmn
                                        ;
                                        ;================================================================================
                                        ;
                                        ;printspc: PRINT A SPACE
                                        ;
   2988 C818 A9 20                      printspc lda #a_blank
                                        ;
   2990 C81A 4C 06 F4                   printcmn jmp putcha
                                        ;
                                        ;================================================================================
                                        ;
                                        ;sprint: PRINT NULL-TERMINATED CHARACTER STRING
                                        ;
                                        ;	—————————————————————————————————————————————————————————
                                        ;	Preparatory Ops : SP+1: string address LSB
                                        ;	                  SP+2: string address MSB
                                        ;
                                        ;	Register Returns: .A: used
                                        ;	                  .B: entry value
                                        ;	                  .X: used
                                        ;	                  .Y: used
                                        ;
                                        ;	MPU Flags: NVmxDIZC
                                        ;	           ||||||||
                                        ;	           |||||||+———> 0: okay
                                        ;	           |||||||      1: string too long (1)
                                        ;	           ||||+++————> not defined
                                        ;	           |||+———————> 1
                                        ;	           ||+————————> 1
                                        ;	           ++—————————> not defined
                                        ;
                                        ;	Example: PER STRING
                                        ;	         JSR SPRINT
                                        ;	         BCS TOOLONG
                                        ;
                                        ;	Notes: 1) Maximum permissible string length including the
                                        ;	          terminator is 32,767 bytes.
                                        ;	       2) All registers are forced to 8 bits.
                                        ;	       3) DO NOT JUMP OR BRANCH INTO THIS FUNCTION!
                                        ;	—————————————————————————————————————————————————————————
                                        ;
   3024 C81D E2 20                      sprint +         .byte $e2,$20
                                                        ;8 bit accumulator
   3025 C81F C2 10                    +            .byte $c2,$10
                                                         ;16 bit index
                                        ;
                                        ;—————————————————————————————————————————————————————————
   3177 = 0000000000000001                            .reetaddr =1                    ;return address
                                        
   3179 = 00000003                      .src     =.reetaddr+s_word      ;string address stack offset
                                        
                                        ;—————————————————————————————————————————————————————————
                                        ;
   3034 C821 A0 00                    +            ldy #<0
   3034 C823 00                       +            .byte >0
                                        
   3035 C824 18                                   clc                   ;no initial error
                                        ;
   3037 C825 B3 03                      .0000010 +         .byte $b3,.src
                                        ;get a byte
   3038 C827 F0 07                                beq .0000020          ;done
                                        ;
   3040 C829 20 06 F4                             jsr putcha            ;write to console port
   3041 C82C C8                                   iny
   3042 C82D 10 F6                                bpl .0000010          ;next
                                        ;
   3044 C82F 38                                   sec                   ;string too long
                                        ;
   3046 C830 FA                         .0000020 plx                   ;pull RTS address
   3047 C831 7A                                   ply                   ;clear string pointer
   3048 C832 DA                                   phx                   ;replace RTS
   3049 C833 E2 10                    +            .byte $e2,$10
                                        
   3050 C835 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;ascbin: CONVERT NULL-TERMINATED ASCII NUMBER STRING TO BINARY
                                        ;
                                        ;	———————————————————————————————————————————————————
                                        ;	Preparatory Ops: ASCII number string in IBUFFER
                                        ;
                                        ;	Returned Values: FACA: converted parameter
                                        ;	                   .A: used
                                        ;	                   .X: used
                                        ;	                   .Y: used
                                        ;	                   .C: 1 = conversion error
                                        ;	                   .Z: 1 = nothing to convert
                                        ;
                                        ;	Notes: 1) Conversion stops when a non-numeric char-
                                        ;	          acter is encountered.
                                        ;	       2) Radix symbols are as follows:
                                        ;
                                        ;	          % binary
                                        ;	          @ octal
                                        ;	          + decimal
                                        ;	          $ hexadecimal
                                        ;
                                        ;	          Hex is the default if no radix is speci-
                                        ;	          fied in the 1st character of the string.
                                        ;	———————————————————————————————————————————————————
                                        ;
   3079 C836 E2 30                      ascbin +         .byte $e2,$30
                                        
   3080 C838 20 9B C9                             jsr clrfaca           ;clear accumulator
   3081 C83B 64 C6                                stz charcnt           ;zero char count
   3082 C83D 64 C4                                stz radix             ;initialize
                                        ;
                                        ;
                                        ;	process radix if present...
                                        ;
   3087 C83F 20 2E CC                             jsr getcharw          ;get next non-WS char
   3088 C842 D0 02                                bne .0000010          ;got something
                                        ;
   3090 C844 18                                   clc                   ;no more input
   3091 C845 60                                   rts
                                        ;
   3093 C846 A2 03                      .0000010 ldx #n_radix-1        ;number of radices
                                        ;
   3095 C848 DD F3 CC                   .0000020 cmp radxtab,x         ;recognized radix?
   3096 C84B F0 06                                beq .0000030          ;yes
                                        ;
   3098 C84D CA                                   dex
   3099 C84E 10 F8                                bpl .0000020          ;try next
                                        ;
   3101 C850 C6 C1                                dec ibufidx           ;reposition to previous char
   3102 C852 E8                                   inx                   ;not recognized, assume hex
                                        ;
   3104 C853 C9 2B                      .0000030 cmp #c_dec            ;decimal radix?
   3105 C855 D0 02                                bne .0000040          ;not decimal
                                        ;
   3107 C857 66 C4                                ror radix             ;flag decimal conversion
                                        ;
   3109 C859 BD DF CC                   .0000040 lda basetab,x         ;number bases table
   3110 C85C 85 D2                                sta range             ;set valid numeral range
   3111 C85E BD E3 CC                             lda bitsdtab,x        ;get bits per digit
   3112 C861 85 C2                                sta bitsdig           ;store
                                        ;
                                        ;
                                        ;	process numerals...
                                        ;
   3117 C863 20 D0 CB                   ascbin01 jsr getchar           ;get next char
   3118 C866 F0 70                                beq ascbin03          ;EOI
                                        ;
   3120 C868 C9 20                                cmp #' '
   3121 C86A F0 6C                                beq ascbin03          ;blank — EOF
                                        ;
   3123 C86C C9 2C                                cmp #','
   3124 C86E F0 68                                beq ascbin03          ;comma — EOF
                                        ;
   3126 C870 C9 09                                cmp #a_ht
   3127 C872 F0 64                                beq ascbin03          ;tab — EOF
                                        ;
   3129 C874 20 F5 C9                             jsr nybtobin          ;change to binary
   3130 C877 B0 60                                bcs ascbin04          ;not a recognized numeral
                                        ;
   3132 C879 C5 D2                                cmp range             ;check range
   3133 C87B B0 5C                                bcs ascbin04          ;not valid for base
                                        ;
   3135 C87D 85 C3                                sta numeral           ;save processed numeral
   3136 C87F E6 C6                                inc charcnt           ;bump numeral count
   3137 C881 24 C4                                bit radix             ;working in base 10?
   3138 C883 10 15                                bpl .0000030          ;no
                                        ;
                                        ;
                                        ;	compute N*2 for decimal conversion...
                                        ;
   3143 C885 A2 00                                ldx #0                ;accumulator index
   3144 C887 A0 02                                ldy #s_pfac/2         ;iterations
   3145 C889 C2 20                    +            .byte $c2,$20
                                        
   3146 C88B 18                                   clc
                                        ;
   3148 C88C B5 A9                      .0000020 lda faca,x            ;N
   3149 C88E 2A                                   rol                   ;N=N*2
   3150 C88F 95 B1                                sta facb,x
   3151 C891 E8                                   inx
   3152 C892 E8                                   inx
   3153 C893 88                                   dey
   3154 C894 D0 F6                                bne .0000020
                                        ;
   3156 C896 B0 41                                bcs ascbin04          ;overflow — error
                                        ;
   3158 C898 E2 20                    +            .byte $e2,$20
                                        
                                        ;
                                        ;
                                        ;	compute N*base for binary, octal or hex...
                                        ;	or N*8 for decimal...
                                        ;
   3164 C89A A6 C2                      .0000030 ldx bitsdig           ;bits per digit
   3165 C89C C2 20                    +            .byte $c2,$20
                                                         ;16 bit shifts
                                        ;
   3167 C89E 06 A9                      .0000040 asl faca
   3168 C8A0 26 AB                                rol faca+s_word
   3169 C8A2 B0 35                                bcs ascbin04          ;overflow — error
                                        ;
   3171 C8A4 CA                                   dex
   3172 C8A5 D0 F7                                bne .0000040          ;next shift
                                        ;
   3174 C8A7 E2 20                    +            .byte $e2,$20
                                                        ;back to 8 bits
   3175 C8A9 24 C4                                bit radix             ;check base
   3176 C8AB 10 13                                bpl ascbin02          ;not decimal
                                        ;
                                        ;
                                        ;	compute N*10 for decimal (N*8 + N*2)...
                                        ;
   3181 C8AD A0 04                                ldy #s_pfac
   3182 C8AF C2 20                    +            .byte $c2,$20
                                        
                                        ;
   3184 C8B1 B5 A9                      .0000050 lda faca,x            ;N*8
   3185 C8B3 75 B1                                adc facb,x            ;N*2
   3186 C8B5 95 A9                                sta faca,x            ;now N*10
   3187 C8B7 E8                                   inx
   3188 C8B8 E8                                   inx
   3189 C8B9 88                                   dey
   3190 C8BA D0 F5                                bne .0000050
                                        ;
   3192 C8BC B0 1B                                bcs ascbin04          ;overflow — error
                                        ;
   3194 C8BE E2 20                    +            .byte $e2,$20
                                        
                                        ;
                                        ;
                                        ;	add current numeral to partial result...
                                        ;
   3199 C8C0 A5 A9                      ascbin02 lda faca              ;N
   3200 C8C2 65 C3                                adc numeral           ;N=N+D
   3201 C8C4 85 A9                                sta faca
   3202 C8C6 A2 01                                ldx #1
   3203 C8C8 A0 03                                ldy #s_pfac-1
                                        ;
   3205 C8CA B5 A9                      .0000010 lda faca,x
   3206 C8CC 69 00                                adc #0                ;account for carry
   3207 C8CE 95 A9                                sta faca,x
   3208 C8D0 E8                                   inx
   3209 C8D1 88                                   dey
   3210 C8D2 D0 F6                                bne .0000010
                                        ;
   3212 C8D4 90 8D                                bcc ascbin01          ;next if no overflow
                                        ;
   3214 C8D6 B0 01                                bcs ascbin04          ;overflow — error
                                        ;
                                        ;
                                        ;	finish up...
                                        ;
   3219 C8D8 18                         ascbin03 clc                   ;no error
                                        ;
   3221 C8D9 E2 20                      ascbin04 +         .byte $e2,$20
                                                        ;reset if necessary
   3222 C8DB A5 C6                                lda charcnt           ;load char count
   3223 C8DD 60                                   rts                   ;done
                                        ;
                                        ;================================================================================
                                        ;
                                        ;bcdasc: CONVERT BCD DIGIT TO ASCII
                                        ;
                                        ;	———————————————————————————————————————
                                        ;	Preparatory Ops: .A: BCD digit, $00-$99
                                        ;
                                        ;	Returned Values: .A: ASCII MSD
                                        ;	                 .X: ASCII LSD
                                        ;	                 .Y: entry value
                                        ;	———————————————————————————————————————
                                        ;
   3237 C8DE 20 EA C8                   bcdasc   jsr bintonyb          ;extract nybbles
   3238 C8E1 48                                   pha                   ;save tens
   3239 C8E2 8A                                   txa                 
   3240 C8E3 09 30                                ora #btoamask         ;change units to ASCII
   3241 C8E5 AA                                   tax                   ;store
   3242 C8E6 68                                   pla                   ;get tens
   3243 C8E7 09 30                                ora #btoamask         ;change to ASCII
   3244 C8E9 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;bintonyb: EXTRACT BINARY NYBBLES
                                        ;
                                        ;	—————————————————————————————————
                                        ;	Preparatory Ops: .A: binary value
                                        ;
                                        ;	Returned Values: .A: MSN
                                        ;	                 .X: LSN
                                        ;	                 .Y: entry value
                                        ;	—————————————————————————————————
                                        ;
   3258 C8EA 48                         bintonyb pha                   ;save
   3259 C8EB 29 0F                                and #bcdumask         ;extract LSN
   3260 C8ED AA                                   tax                   ;save it
   3261 C8EE 68                                   pla
                                        ;         .rept s_bnybbl        ;extract MSN
   3263 C8EF 4A                                     lsr
   3264 C8F0 4A                                     lsr
   3265 C8F1 4A                                     lsr
   3266 C8F2 4A                                     lsr
                                        ;         .endr
   3268 C8F3 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;binasc: CONVERT 32-BIT BINARY TO NULL-TERMINATED ASCII NUMBER STRING
                                        ;
                                        ;	——————————————————————————————————————————————————————
                                        ;	Preparatory Ops: FACA: 32-bit operand
                                        ;	                   .A: radix character, w/bit 7 set to
                                        ;	                       suppress radix symbol in the
                                        ;	                       conversion string
                                        ;
                                        ;	Returned Values: ibuffer: conversion string
                                        ;	                      .A: string length
                                        ;	                      .X: string address LSB
                                        ;	                      .Y: string address MSB
                                        ;
                                        ;	Execution Notes: ibufidx & instsize are overwritten.
                                        ;	——————————————————————————————————————————————————————
                                        ;
   3288 C8F4 64 C1                      binasc   stz ibufidx           ;initialize string index
   3289 C8F6 64 C8                                stz instsize          ;clear format flag
                                        ;
                                        ;
                                        ;	evaluate radix...
                                        ;
   3294 C8F8 0A                                   asl                   ;extract format flag &...
   3295 C8F9 66 C8                                ror instsize          ;save it
   3296 C8FB 4A                                   lsr                   ;extract radix character
   3297 C8FC A2 03                                ldx #n_radix-1        ;total radices
                                        ;
   3299 C8FE DD F3 CC                   .0000010 cmp radxtab,x         ;recognized radix?
   3300 C901 F0 04                                beq .0000020          ;yes
                                        ;
   3302 C903 CA                                   dex
   3303 C904 10 F8                                bpl .0000010          ;try next
                                        ;
   3305 C906 E8                                   inx                   ;assume hex
                                        ;
   3307 C907 86 C4                      .0000020 stx radix             ;save radix index for later
   3308 C909 24 C8                                bit instsize
   3309 C90B 30 08                                bmi .0000030          ;no radix symbol wanted
                                        ;
   3311 C90D BD F3 CC                             lda radxtab,x         ;radix table
   3312 C910 8D 00 02                             sta ibuffer           ;prepend to string
   3313 C913 E6 C1                                inc ibufidx           ;bump string index
                                        ;
   3315 C915 C9 2B                      .0000030 cmp #c_dec            ;converting to decimal?
   3316 C917 D0 07                                bne .0000040          ;no
                                        ;
   3318 C919 20 AD C9                             jsr facabcd           ;convert operand to BCD
   3319 C91C A9 00                                lda #0
   3320 C91E 80 17                                bra .0000070          ;skip binary stuff
                                        ;
                                        ;
                                        ;	prepare for binary, octal or hex conversion...
                                        ;
   3325 C920 A2 00                      .0000040 ldx #0                ;operand index
   3326 C922 A0 05                                ldy #s_sfac-1         ;workspace index
                                        ;
   3328 C924 B5 A9                      .0000050 lda faca,x            ;copy operand to...
   3329 C926 99 B1 00                             sta facb,y            ;workspace in...
   3330 C929 88                                   dey                   ;big-endian order
   3331 C92A E8                                   inx
   3332 C92B E0 04                                cpx #s_pfac
   3333 C92D D0 F5                                bne .0000050
                                        ;
   3335 C92F A9 00                                lda #0
   3336 C931 BB                       +            .byte $bb
                                        
                                        ;
   3338 C932 95 B1                      .0000060 sta facb,x            ;pad workspace
   3339 C934 CA                                   dex
   3340 C935 10 FB                                bpl .0000060
                                        ;
                                        ;
                                        ;	set up conversion parameters...
                                        ;
   3345 C937 85 B7                      .0000070 sta facc              ;initialize byte counter
   3346 C939 A4 C4                                ldy radix             ;radix index
   3347 C93B B9 EF CC                             lda numstab,y         ;numerals in string
   3348 C93E 85 B8                                sta facc+s_byte       ;set remaining numeral count
   3349 C940 B9 E7 CC                             lda bitsntab,y        ;bits per numeral
   3350 C943 85 B9                                sta facc+s_word       ;set
   3351 C945 B9 EB CC                             lda lzsttab,y         ;leading zero threshold
   3352 C948 85 BA                                sta facc+s_xword      ;set
                                        ;
                                        ;
                                        ;	generate conversion string...
                                        ;
   3357 C94A A9 00                      .0000080 lda #0
   3358 C94C A4 B9                                ldy facc+s_word       ;bits per numeral
                                        ;
   3360 C94E A2 05                      .0000090 ldx #s_sfac-1         ;workspace size
   3361 C950 18                                   clc                   ;avoid starting carry
                                        ;
   3363 C951 36 B1                      .0000100 rol facb,x            ;shift out a bit...
   3364 C953 CA                                   dex                   ;from the operand or...
   3365 C954 10 FB                                bpl .0000100          ;BCD conversion result
                                        ;
   3367 C956 2A                                   rol                   ;bit to .A
   3368 C957 88                                   dey
   3369 C958 D0 F4                                bne .0000090          ;more bits to grab
                                        ;
   3371 C95A A8                                   tay                   ;if numeral isn't zero...
   3372 C95B D0 0A                                bne .0000110          ;skip leading zero tests
                                        ;
   3374 C95D A6 B8                                ldx facc+s_byte       ;remaining numerals
   3375 C95F E4 BA                                cpx facc+s_xword      ;leading zero threshold
   3376 C961 90 04                                bcc .0000110          ;below it, must convert
                                        ;
   3378 C963 A6 B7                                ldx facc              ;processed byte count
   3379 C965 F0 11                                beq .0000130          ;discard leading zero
                                        ;
   3381 C967 C9 0A                      .0000110 cmp #10               ;check range
   3382 C969 90 02                                bcc .0000120          ;is 0-9
                                        ;
   3384 C96B 69 06                                adc #a_hexdec         ;apply hex adjust
                                        ;
   3386 C96D 69 30                      .0000120 adc #'0'              ;change to ASCII
   3387 C96F A4 C1                                ldy ibufidx           ;string index
   3388 C971 99 00 02                             sta ibuffer,y         ;save numeral in buffer
   3389 C974 E6 C1                                inc ibufidx           ;next buffer position
   3390 C976 E6 B7                                inc facc              ;bytes=bytes+1
                                        ;
   3392 C978 C6 B8                      .0000130 dec facc+s_byte       ;numerals=numerals-1
   3393 C97A D0 CE                                bne .0000080          ;not done
                                        ;
                                        ;
                                        ;	terminate string & exit...
                                        ;
   3398 C97C A6 C1                                ldx ibufidx           ;printable string length
   3399 C97E 9E 00 02                             stz ibuffer,x         ;terminate string
   3400 C981 8A                                   txa
   3401 C982 A2 00                                ldx #<ibuffer         ;converted string
   3402 C984 A0 02                                ldy #>ibuffer
   3403 C986 18                                   clc                   ;all okay
   3404 C987 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;binhex: CONVERT BINARY BYTE TO HEX ASCII CHARS
                                        ;
                                        ;	————————————————————————————————————————————
                                        ;	Preparatory Ops: .A: byte to convert
                                        ;
                                        ;	Returned Values: .A: MSN ASCII char
                                        ;	                 .X: LSN ASCII char
                                        ;	                 .Y: entry value
                                        ;	————————————————————————————————————————————
                                        ;
   3418 C988 20 EA C8                   binhex   jsr bintonyb          ;generate binary values
   3419 C98B 48                                   pha                   ;save MSN
   3420 C98C 8A                                   txa
   3421 C98D 20 92 C9                             jsr .0000010          ;generate ASCII LSN
   3422 C990 AA                                   tax                   ;save
   3423 C991 68                                   pla                   ;get input
                                        ;
                                        ;
                                        ;	convert nybble to hex ASCII equivalent...
                                        ;
   3428 C992 C9 0A                      .0000010 cmp #10
   3429 C994 90 02                                bcc .0000020          ;in decimal range
                                        ;
   3431 C996 69 66                                adc #k_hex            ;hex compensate
                                        ;         
   3433 C998 49 30                      .0000020 eor #'0'              ;finalize nybble
   3434 C99A 60                                   rts                   ;done
                                        ;
                                        ;================================================================================
                                        ;
                                        ;clrfaca: CLEAR FLOATING ACCUMULATOR A
                                        ;
   3440 C99B 08                         clrfaca  php
   3441 C99C C2 20                    +            .byte $c2,$20
                                        
   3442 C99E 64 A9                                stz faca
   3443 C9A0 64 AB                                stz faca+s_word
   3444 C9A2 28                                   plp
   3445 C9A3 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;clrfacb: CLEAR FLOATING ACCUMULATOR B
                                        ;
   3451 C9A4 08                         clrfacb  php
   3452 C9A5 C2 20                    +            .byte $c2,$20
                                        
   3453 C9A7 64 B1                                stz facb
   3454 C9A9 64 B3                                stz facb+s_word
   3455 C9AB 28                                   plp
   3456 C9AC 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facabcd: CONVERT FACA INTO BCD
                                        ;
   3462 C9AD A2 03                      facabcd  ldx #s_pfac-1         ;primary accumulator size -1
                                        ;
   3464 C9AF B5 A9                      .0000010 lda faca,x            ;value to be converted
   3465 C9B1 48                                   pha                   ;preserve
   3466 C9B2 CA                                   dex
   3467 C9B3 10 FA                                bpl .0000010          ;next
                                        ;
   3469 C9B5 A2 05                                ldx #s_sfac-1         ;workspace size
                                        ;
   3471 C9B7 74 B1                      .0000020 stz facb,x            ;clear final result
   3472 C9B9 74 B7                                stz facc,x            ;clear scratchpad
   3473 C9BB CA                                   dex
   3474 C9BC 10 F9                                bpl .0000020
                                        ;
   3476 C9BE E6 BC                                inc facc+s_sfac-s_byte
   3477 C9C0 F8                                   sed                   ;select decimal mode
   3478 C9C1 A0 1F                                ldy #m_bits-1         ;bits to convert -1
                                        ;
   3480 C9C3 A2 03                      .0000030 ldx #s_pfac-1         ;operand size
   3481 C9C5 18                                   clc                   ;no carry at start
                                        ;
   3483 C9C6 76 A9                      .0000040 ror faca,x            ;grab LS bit in operand
   3484 C9C8 CA                                   dex
   3485 C9C9 10 FB                                bpl .0000040
                                        ;
   3487 C9CB 90 0D                                bcc .0000060          ;LS bit clear
                                        ;
   3489 C9CD 18                                   clc
   3490 C9CE A2 05                                ldx #s_sfac-1
                                        ;
   3492 C9D0 B5 B1                      .0000050 lda facb,x            ;partial result
   3493 C9D2 75 B7                                adc facc,x            ;scratchpad
   3494 C9D4 95 B1                                sta facb,x            ;new partial result
   3495 C9D6 CA                                   dex
   3496 C9D7 10 F7                                bpl .0000050
                                        ;
   3498 C9D9 18                                   clc
                                        ;
   3500 C9DA A2 05                      .0000060 ldx #s_sfac-1
                                        ;
   3502 C9DC B5 B7                      .0000070 lda facc,x            ;scratchpad
   3503 C9DE 75 B7                                adc facc,x            ;double &...
   3504 C9E0 95 B7                                sta facc,x            ;save
   3505 C9E2 CA                                   dex
   3506 C9E3 10 F7                                bpl .0000070
                                        ;
   3508 C9E5 88                                   dey
   3509 C9E6 10 DB                                bpl .0000030          ;next operand bit
                                        ;
   3511 C9E8 D8                                   cld
   3512 C9E9 A2 00                                ldx #0
   3513 C9EB A0 04                                ldy #s_pfac
                                        ;
   3515 C9ED 68                         .0000080 pla                   ;operand
   3516 C9EE 95 A9                                sta faca,x            ;restore
   3517 C9F0 E8                                   inx
   3518 C9F1 88                                   dey
   3519 C9F2 D0 F9                                bne .0000080          ;next
                                        ;
   3521 C9F4 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;nybtobin: CONVERT ASCII NYBBLE TO BINARY
                                        ;
   3527 C9F5 20 A0 CC                   nybtobin jsr toupper           ;convert case if necessary
   3528 C9F8 38                                   sec
   3529 C9F9 E9 30                                sbc #'0'              ;change to binary
   3530 C9FB 90 08                                bcc .0000020          ;not a numeral — error
                                        ;
   3532 C9FD C9 0A                                cmp #10
   3533 C9FF 90 03                                bcc .0000010          ;numeral is 0-9
                                        ;
   3535 CA01 E9 07                                sbc #a_hexdec+1       ;10-15 ——> A-F
   3536 CA03 18                                   clc                   ;no conversion error
                                        ;
   3538 CA04 60                         .0000010 rts
                                        ;
   3540 CA05 38                         .0000020 sec                   ;conversion error
   3541 CA06 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;calccnt: COMPUTE BYTE COUNT FROM ADDRESS RANGE
                                        ;
   3547 CA07 20 A4 C9                   calccnt  jsr clrfacb           ;clear accumulator
   3548 CA0A C2 20                    +            .byte $c2,$20
                                        
   3549 CA0C 38                                   sec
   3550 CA0D A5 A6                                lda addrb             ;ending address
   3551 CA0F E5 A2                                sbc addra             ;starting address
   3552 CA11 85 B1                                sta facb              ;byte count
   3553 CA13 E2 20                    +            .byte $e2,$20
                                        
   3554 CA15 A5 A8                                lda addrb+s_word      ;handle banks
   3555 CA17 E5 A4                                sbc addra+s_word
   3556 CA19 85 B3                                sta facb+s_word
   3557 CA1B 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;clroper: CLEAR OPERAND
                                        ;
   3563 CA1C DA                         clroper  phx
   3564 CA1D A2 02                                ldx #s_oper-1
                                        ;
   3566 CA1F 74 BD                      .0000010 stz operand,x
   3567 CA21 CA                                   dex
   3568 CA22 10 FB                                bpl .0000010
                                        ;
   3570 CA24 64 CF                                stz eopsize
   3571 CA26 FA                                   plx
   3572 CA27 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;cpfwsup: FOWARD COPY MEMORY SETUP
                                        ;
   3578 CA28 C2 30                      cpfwsup +         .byte $c2,$30
                                        
   3579 CA2A A2 54                    +            ldx #<opc_mvn
   3579 CA2C 00                       +            .byte >opc_mvn
                                        ;"move next" opcode
   3580 CA2D 80 05                                bra cpsup
                                        ;         
                                        ;================================================================================
                                        ;
                                        ;cprvsup: REVERSE COPY MEMORY SETUP
                                        ;
   3586 CA2F C2 30                      cprvsup +         .byte $c2,$30
                                        
   3587 CA31 A2 44                    +            ldx #<opc_mvp
   3587 CA33 00                       +            .byte >opc_mvp
                                        ;"move previous" opcode
                                        ;         
                                        ;================================================================================
                                        ;
                                        ;cpsup: COPY MEMORY SETUP
                                        ;
   3593 CA34 48                         cpsup    pha                   ;save banks
   3594 CA35 8A                                   txa                   ;protect...
   3595 CA36 EB                       +            .byte $eb
                                                           ;opcode
   3596 CA37 E2 20                    +            .byte $e2,$20
                                        
   3597 CA39 A2 08                    +            ldx #<(cpcodeee-cpcode-1)
   3597 CA3B 00                       +            .byte >(cpcodeee-cpcode-1)
                                        
                                        ;
   3599 CA3C BF                         .0000010 +         .byte $bf
   3599 CA3D 5C CA 00                 +   +         .byte <cpcode,>cpcode,cpcode >> 16
                                     +   
                                        ;transfer copy code to...
   3600 CA40 95 D4                                sta mcftwork,x        ;to workspace
   3601 CA42 CA                                   dex
   3602 CA43 10 F7                                bpl .0000010
                                        ;
   3604 CA45 EB                       +            .byte $eb
                                                           ;recover opcode &...
   3605 CA46 85 D5                                sta mcftopc           ;set it
   3606 CA48 C2 20                    +            .byte $c2,$20
                                        
   3607 CA4A 68                                   pla                   ;get banks &...
   3608 CA4B 85 D6                                sta mcftbnk           ;set them
                                         
                                        ; We just dynamically created a routine, so the cache (if one is present) has
                                        ; to be invalidated. Otherwise the processor could execute dead code from the
                                        ; cache. Two lines are invalidated in case the code crosses a line boundary.
                                        ;
                                        ;	acc = 16 bit address to invalidate
                                        ;
                                        ; If there is no cache in the processor then these lines can be deleted.
                                        ;-------------------------------------------------------------------------------
                                           		 CPU	FT832
                                           		 MEM	16
   3620 00CA4D 48                                    pha
   3621 00CA4E A9 D4 00                              lda	#mcftwork
   3622 00CA51 42 E0 01                     		 cache	#1				; 1= invalidate line identified by address in acc
   3623 00CA54 A9 E4 00                              lda	#mcftwork+16
   3624 00CA57 42 E0 01                     		 cache	#1
   3625 00CA5A 68                                    pla
                                        		 CPU	W65C02
   3627 CA5B                            		 MEM	8
                                        ;---------------------------------------------
   3629 CA5B 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;cpcode: COPY MEMORY CODE
                                        ;
                                        ;	———————————————————————————————————————————
                                        ;	This code is transfered to workspace when a
                                        ;	copy or fill operation is to be performed.
                                        ;	———————————————————————————————————————————
                                        ;
   3640 CA5C 8B                         cpcode +         .byte $8b
                                                           ;must preserve data bank
                                        ;         .rept s_mvinst
   3642 CA5D EA                                     nop                 ;placeholder
   3643 CA5E EA                                     nop
   3644 CA5F EA                                     nop
                                        ;         .endr
   3646 CA60 AB                       +            .byte $ab
                                                           ;restore data bank
   3647 CA61 5C 49 C1 00                          jml monce             ;return to command executive
   3831 = 0000CA65                      cpcodeee =*                    ;placeholder — do not delete
                                        ;
                                        ;================================================================================
                                        ;
                                        ;decdcnt: DECREMENT DUMP COUNT
                                        ;
                                        ;	———————————————————————————————————————————
                                        ;	Preparatory Ops: bytes to process in FACB
                                        ;	                 bytes processed in CHARCNT
                                        ;
                                        ;	Returned Values: .A: used
                                        ;	                 .X: entry value
                                        ;	                 .Y: entry value
                                        ;	                 .C: 1 = count = zero
                                        ;	———————————————————————————————————————————
                                        ;
   3664 CA65 E2 20                      decdcnt +         .byte $e2,$20
                                        
   3665 CA67 A9 00                                lda #0
   3666 CA69 EB                       +            .byte $eb
                                                           ;clear .B
   3667 CA6A A5 B3                                lda facb+s_word       ;count MSW
   3668 CA6C C2 20                    +            .byte $c2,$20
                                        
   3669 CA6E 38                                   sec
   3670 CA6F 05 B1                                ora facb              ;count LSW
   3671 CA71 F0 13                                beq .0000020          ;zero, just exit
                                        ;
   3673 CA73 A5 B1                                lda facb
   3674 CA75 E5 C6                                sbc charcnt           ;bytes processed
   3675 CA77 85 B1                                sta facb
   3676 CA79 E2 20                    +            .byte $e2,$20
                                        
   3677 CA7B A5 B3                                lda facb+s_word
   3678 CA7D E9 00                                sbc #0                ;handle borrow
   3679 CA7F 90 04                                bcc .0000010          ;underflow
                                        ;
   3681 CA81 85 B3                                sta facb+s_word
   3682 CA83 18                                   clc                   ;count > 0
   3683 CA84 60                                   rts
                                        ;
   3685 CA85 38                         .0000010 sec
                                        ;
   3687 CA86 E2 20                      .0000020 +         .byte $e2,$20
                                        
   3688 CA88 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;enddest: GET 2ND & 3RD ADDRESSES FOR COMPARE & TRANSFER
                                        ;
   3694 CA89 20 CD CA                   enddest  jsr facasize          ;check start...
   3695 CA8C C9 04                                cmp #s_dword          ;for range
   3696 CA8E B0 1E                                bcs .0000010          ;out of range — error
                                        ;
   3698 CA90 20 AF CA                             jsr facaddra          ;store start
   3699 CA93 20 E1 CA                             jsr getparm           ;get end
   3700 CA96 B0 16                                bcs .0000010          ;not entered — error
                                        ;
   3702 CA98 20 CD CA                             jsr facasize          ;check end...
   3703 CA9B C9 04                                cmp #s_dword          ;for range
   3704 CA9D B0 0F                                bcs .0000010          ;out of range — error
                                        ;
   3706 CA9F 20 B9 CA                             jsr facaddrb          ;store end
   3707 CAA2 20 E1 CA                             jsr getparm           ;get destination
   3708 CAA5 B0 07                                bcs .0000010          ;not entered — error
                                        ;
   3710 CAA7 20 CD CA                             jsr facasize          ;check destination...
   3711 CAAA C9 04                                cmp #s_dword          ;for range
   3712 CAAC 90 15                                bcc facaoper          ;store dest address
                                        ;
   3714 CAAE 60                         .0000010 rts                   ;exit w/error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facaddra: COPY FACA TO ADDRA
                                        ;
   3720 CAAF A2 02                      facaddra ldx #s_xword-1
                                        ;
   3722 CAB1 B5 A9                      .0000010 lda faca,x
   3723 CAB3 95 A2                                sta addra,x
   3724 CAB5 CA                                   dex
   3725 CAB6 10 F9                                bpl .0000010
                                        ;
   3727 CAB8 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facaddrb: COPY FACA TO ADDRB
                                        ;
   3733 CAB9 A2 02                      facaddrb ldx #s_xword-1
                                        ;
   3735 CABB B5 A9                      .0000010 lda faca,x
   3736 CABD 95 A6                                sta addrb,x
   3737 CABF CA                                   dex
   3738 CAC0 10 F9                                bpl .0000010
                                        ;
   3740 CAC2 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facaoper: COPY FACA TO OPERAND
                                        ;
   3746 CAC3 A2 02                      facaoper ldx #s_oper-1
                                        ;
   3748 CAC5 B5 A9                      .0000010 lda faca,x
   3749 CAC7 95 BD                                sta operand,x
   3750 CAC9 CA                                   dex
   3751 CACA 10 F9                                bpl .0000010
                                        ;
   3753 CACC 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facasize: REPORT OPERAND SIZE IN FACA
                                        ;
                                        ;	——————————————————————————————————————————
                                        ;	Preparatory Ops: operand in FACA
                                        ;
                                        ;	Returned Values: .A: s_byte  (1)
                                        ;	                     s_word  (2)
                                        ;	                     s_xword (3)
                                        ;	                     s_dword (4)
                                        ;
                                        ;	Notes: 1) This function will always report
                                        ;	          a non-zero result.
                                        ;	——————————————————————————————————————————
                                        ;
   3771 CACD E2 30                      facasize +         .byte $e2,$30
                                        
   3772 CACF A2 03                                ldx #s_dword-1
                                        ;
   3774 CAD1 B5 A9                      .0000010 lda faca,x            ;get byte
   3775 CAD3 D0 03                                bne .0000020          ;done
                                        ;
   3777 CAD5 CA                                   dex
   3778 CAD6 D0 F9                                bne .0000010          ;next byte
                                        ;
   3780 CAD8 E8                         .0000020 inx                   ;count=index+1
   3781 CAD9 8A                                   txa
   3782 CADA 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getbyte: GET A BYTE FROM MEMORY
                                        ;
   3788 CADB A7 A2                      getbyte +         .byte $a7,addra
                                        ;get a byte
   3789 CADD 80 3F                                bra incaddra          ;bump address
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getparm: GET A PARAMETER
                                        ;
                                        ;	—————————————————————————————————————————————————
                                        ;	Preparatory Ops: null-terminated input in IBUFFER
                                        ;
                                        ;	Returned Values: .A: chars in converted parameter
                                        ;	                 .X: used
                                        ;	                 .Y: entry value
                                        ;	                 .C: 1 = no parameter entered
                                        ;	—————————————————————————————————————————————————
                                        ;
   3804 CADF C6 C1                      getparmr dec ibufidx           ;reread previous char
                                        ;
   3806 CAE1 5A                         getparm  phy                   ;preserve
   3807 CAE2 20 36 C8                             jsr ascbin            ;convert parameter to binary
   3808 CAE5 B0 1C                                bcs .0000040          ;conversion error
                                        ;
   3810 CAE7 20 CE CB                             jsr getcharr          ;reread last char
   3811 CAEA D0 08                                bne .0000010          ;not end-of-input
                                        ;
   3813 CAEC C6 C1                                dec ibufidx           ;reindex to terminator
   3814 CAEE A5 C6                                lda charcnt           ;get chars processed so far
   3815 CAF0 F0 0C                                beq .0000030          ;none
                                        ;
   3817 CAF2 D0 08                                bne .0000020          ;some
                                        ;
   3819 CAF4 C9 20                      .0000010 cmp #a_blank          ;recognized delimiter
   3820 CAF6 F0 04                                beq .0000020          ;end of parameter
                                        ;
   3822 CAF8 C9 2C                                cmp #','              ;recognized delimiter
   3823 CAFA D0 07                                bne .0000040          ;unknown delimter
                                        ;
   3825 CAFC 18                         .0000020 clc
   3826 CAFD 24                                   .byte bitzp           ;skip SEC below
                                        ;
   3828 CAFE 38                         .0000030 sec
   3829 CAFF 7A                                   ply                   ;restore
   3830 CB00 A5 C6                                lda charcnt           ;get count
   3831 CB02 60                                   rts                   ;done
                                        ;
   3833 CB03                            .0000040 
                                        ;.rept 3               ;clean up stack
   3835 CB03 68                          			pla
   3836 CB04 68                          			pla
   3837 CB05 68                                     pla
                                        ;        .endr
   3839 CB06 4C 88 C1                             jmp monerr            ;abort w/error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;nxtaddra: TEST & INCREMENT WORKING ADDRESS 'A'
                                        ;
                                        ;	——————————————————————————————————————————————————
                                        ;	Calling syntax: JSR NXTADDRA
                                        ;
                                        ;	Exit registers: .A: used
                                        ;	                .B: used
                                        ;	                .X: entry value
                                        ;	                .Y: entry value
                                        ;	                DB: entry value
                                        ;	                DP: entry value
                                        ;	                PB: entry value
                                        ;	                SR: NVmxDIZC
                                        ;	                    ||||||||
                                        ;	                    |||||||+———> 0: ADDRA < ADDRB
                                        ;	                    |||||||      1: ADDRA >= ADDRB
                                        ;	                    ||||||+————> undefined
                                        ;	                    |||+++—————> entry value
                                        ;	                    ||+————————> 1
                                        ;	                    ++—————————> undefined
                                        ;	——————————————————————————————————————————————————
                                        ;
   3865 CB09 E2 20                      nxtaddra +         .byte $e2,$20
                                        
   3866 CB0B A5 A4                                lda addra+s_word      ;bits 16-23
   3867 CB0D C5 A8                                cmp addrb+s_word
   3868 CB0F 90 0D                                bcc incaddra          ;increment
                                        ;
   3870 CB11 D0 0A                                bne .0000010          ;don't increment
                                        ;
   3872 CB13 C2 20                    +            .byte $c2,$20
                                        
   3873 CB15 A5 A2                                lda addra             ;bits 0-15
   3874 CB17 C5 A6                                cmp addrb             ;condition flags
   3875 CB19 E2 20                    +            .byte $e2,$20
                                        
   3876 CB1B 90 01                                bcc incaddra          ;increment
                                        ;
   3878 CB1D 60                         .0000010 rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;incaddra: INCREMENT WORKING ADDRESS 'A'
                                        ;
                                        ;	——————————————————————————————————————————————————
                                        ;	Calling syntax: JSR INCADDRA
                                        ;
                                        ;	Exit registers: .A: entry value
                                        ;	                .B: entry value
                                        ;	                .X: entry value
                                        ;	                .Y: entry value
                                        ;	                DB: entry value
                                        ;	                DP: entry value
                                        ;	                PB: entry value
                                        ;	                SR: NVmxDIZC
                                        ;	                    ||||||||
                                        ;	                    ++++++++———> entry value
                                        ;	——————————————————————————————————————————————————
                                        ;
   3899 CB1E 08                         incaddra php
   3900 CB1F C2 20                    +            .byte $c2,$20
                                        
   3901 CB21 E6 A2                                inc addra             ;bump bits 0-15
   3902 CB23 D0 04                                bne .0000010
                                        ;
   3904 CB25 E2 20                    +            .byte $e2,$20
                                        
   3905 CB27 E6 A4                                inc addra+s_word      ;bump bits 16-23
                                        ;
   3907 CB29 28                         .0000010 plp
   3908 CB2A 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;incoper: INCREMENT OPERAND ADDRESS
                                        ;
   3914 CB2B 18                         incoper  clc
   3915 CB2C 08                                   php
   3916 CB2D C2 30                    +            .byte $c2,$30
                                        
   3917 CB2F 48                                   pha
   3918 CB30 E6 BD                                inc operand           ;handle base address
   3919 CB32 D0 06                                bne .0000010
                                        ;              
   3921 CB34 E2 20                    +            .byte $e2,$20
                                        
   3922 CB36 E6 BF                                inc operand+s_word    ;handle bank
   3923 CB38 C2 20                    +            .byte $c2,$20
                                        
                                        ;
   3925 CB3A 68                         .0000010 pla
   3926 CB3B 28                                   plp
   3927 CB3C 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;instdata: GET INSTRUCTION SIZE & ADDRESSING MODE DATA
                                        ;
                                        ;	——————————————————————————————————
                                        ;	Preparatory Ops: .X: 65C816 opcode
                                        ;
                                        ;	Returned Values: .A: mode flags
                                        ;	                 .X: operand size
                                        ;	                 .Y: mode index
                                        ;	——————————————————————————————————
                                        ;
   3941 CB3D E2 30                      instdata +         .byte $e2,$30
                                        
   3942 CB3F BD B8 CE                             lda mnetabam,x        ;addressing mode data
   3943 CB42 48                                   pha                   ;save mode flag bits
   3944 CB43 48                                   pha                   ;save size data
   3945 CB44 29 0F                                and #amodmask         ;extract mode index &...
   3946 CB46 A8                                   tay                   ;save
   3947 CB47 68                                   pla                   ;recover data
   3948 CB48 29 30                                and #opsmask          ;mask mode fields &...
                                        ;         .rept n_opslsr        ;extract operand size
   3950 CB4A 4A                                     lsr
   3951 CB4B 4A                                     lsr
   3952 CB4C 4A                                     lsr
   3953 CB4D 4A                                     lsr
                                        ;         .endr
   3955 CB4E AA                                   tax                   ;operand size
   3956 CB4F 68                                   pla                   ;recover mode flags
   3957 CB50 29 C0                                and #vopsmask         ;discard mode & size fields
   3958 CB52 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;offtarg: CONVERT BRANCH OFFSET TO TARGET ADDRESS
                                        ;
                                        ;	———————————————————————————————————————————————
                                        ;	Preparatory Ops:    ADDRA: base address
                                        ;	                 INSTSIZE: instruction size
                                        ;	                  OPERAND: offset
                                        ;
                                        ;	Returned Values:  OPERAND: target address (L/H)
                                        ;	                       .A: used
                                        ;	                       .X: entry value
                                        ;                              .Y: entry value
                                        ;	———————————————————————————————————————————————
                                        ;
   3975 CB53 C2 20                      offtarg +         .byte $c2,$20
                                        
   3976 CB55 A5 A2                                lda addra             ;base address
   3977 CB57 E2 20                    +            .byte $e2,$20
                                        
   3978 CB59 46 C8                                lsr instsize          ;bit 0 will be set if...
   3979 CB5B B0 07                                bcs .0000010          ;a long branch
                                        ;
   3981 CB5D 24 BD                                bit operand           ;short forward or backward?
   3982 CB5F 10 03                                bpl .0000010          ;forward
                                        ;
   3984 CB61 EB                       +            .byte $eb
                                                           ;expose address MSB
   3985 CB62 3A                                   dea                   ;back a page
   3986 CB63 EB                       +            .byte $eb
                                                           ;expose address LSB
                                        ;
   3988 CB64 C2 20                      .0000010 +         .byte $c2,$20
                                        
   3989 CB66 18                                   clc
   3990 CB67 65 BD                                adc operand           ;calculate target address
   3991 CB69 85 BD                                sta operand           ;new operand
   3992 CB6B E2 20                    +            .byte $e2,$20
                                        
   3993 CB6D A9 03                                lda #s_xword
   3994 CB6F 85 C8                                sta instsize          ;effective instruction size
   3995 CB71 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;setxaddr: SET EXECUTION ADDRESS
                                        ;
   4001 CB72 B0 13                      setxaddr bcs .0000010          ;no address given
                                        ;
   4003 CB74 20 CD CA                             jsr facasize          ;check address...
   4004 CB77 C9 04                                cmp #s_dword          ;range
   4005 CB79 B0 0D                                bcs .0000020          ;out of range
                                        ;
   4007 CB7B C2 20                    +            .byte $c2,$20
                                        
   4008 CB7D A5 A9                                lda faca              ;execution address
   4009 CB7F 85 88                                sta reg_pcx           ;set new PC value
   4010 CB81 E2 20                    +            .byte $e2,$20
                                        
   4011 CB83 A5 AB                                lda faca+s_word
   4012 CB85 85 8A                                sta reg_pbx           ;set new PB value
                                        ;
   4014 CB87 18                         .0000010 clc                   ;no error
                                        ;
   4016 CB88 60                         .0000020 rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;targoff: CONVERT BRANCH TARGET ADDRESS TO BRANCH OFFSET                   
                                        ;
                                        ;	—————————————————————————————————————————————————
                                        ;	Preparatory Ops:   ADDRA: instruction address
                                        ;	                 OPERAND: target address
                                        ;
                                        ;	Returned Values: OPERAND: computed offset
                                        ;	                      .A: effective operand size
                                        ;	                      .X: entry value
                                        ;                             .Y: entry value
                                        ;	                      .C: 1 = branch out of range
                                        ;
                                        ;	Execution notes: ADDRB is set to the branch base
                                        ;	                 address.
                                        ;	—————————————————————————————————————————————————
                                        ;
   4036 CB89 64 C9                      targoff  stz instsize+s_byte   ;always zero
   4037 CB8B A5 C8                                lda instsize          ;instruction size will tell...
   4038 CB8D 4A                                   lsr                   ;if long or short branch
                                        ;
                                        ;—————————————————————————————————————————————————
   4248 = 000000BC                      .btype   =facc+5               ;branch type flag
                                        ;—————————————————————————————————————————————————
                                        ;
   4044 CB8E 66 BC                                ror .btype            ;set branch type...
                                        ;
                                        ;	x0000000
                                        ;	|
                                        ;	+——————————> 0: short
                                        ;	             1: long
                                        ;
   4051 CB90 C2 20                    +            .byte $c2,$20
                                        
   4052 CB92 18                                   clc
   4053 CB93 A5 A2                                lda addra             ;instruction address
   4054 CB95 65 C8                                adc instsize          ;instruction size
   4055 CB97 85 A6                                sta addrb             ;base address
   4056 CB99 38                                   sec
   4057 CB9A A5 BD                                lda operand           ;target address
   4058 CB9C E5 A6                                sbc addrb             ;base address
   4059 CB9E 85 BD                                sta operand           ;offset
   4060 CBA0 E2 20                    +            .byte $e2,$20
                                        
   4061 CBA2 90 15                                bcc .0000040          ;backward branch
                                        ;
   4063 CBA4 24 BC                                bit .btype            ;check branch range
   4064 CBA6 30 0A                                bmi .0000020          ;long
                                        ;
                                        ;
                                        ;	process short forward branch...
                                        ;
   4069 CBA8 EB                       +            .byte $eb
                                                           ;offset MSB should be zero
   4070 CBA9 D0 21                                bne .0000060          ;it isn't — out of range
                                        ;
   4072 CBAB EB                       +            .byte $eb
                                                           ;offset LSB should be $00-$7F
   4073 CBAC 30 1E                                bmi .0000060          ;it isn't — out of range
                                        ;
   4075 CBAE A9 01                      .0000010 lda #s_byte           ;final instruction size
   4076 CBB0 18                                   clc                   ;branch in range
   4077 CBB1 60                                   rts
                                        ;
                                        ;
                                        ;	process long forward branch...
                                        ;
   4082 CBB2 EB                         .0000020 +         .byte $eb
                                                           ;offset MSB should be positive
   4083 CBB3 30 17                                bmi .0000060          ;it isn't — branch out of range
                                        ;
   4085 CBB5 A9 02                      .0000030 lda #s_word
   4086 CBB7 18                                   clc
   4087 CBB8 60                                   rts
                                        ;
                                        ;
                                        ;	process backward branch...
                                        ;
   4092 CBB9 24 BC                      .0000040 bit .btype            ;long or short?
   4093 CBBB 30 0C                                bmi .0000050          ;long
                                        ;
                                        ;
                                        ;	process short backward branch...
                                        ;
   4098 CBBD EB                       +            .byte $eb
                                                           ;offset MSB should be negative
   4099 CBBE 10 0C                                bpl .0000060          ;it isn't — out of range
                                        ;
   4101 CBC0 49 FF                                eor #%11111111        ;complement offset MSB 2s 
   4102 CBC2 D0 08                                bne .0000060          ;out of range
                                        ;
   4104 CBC4 EB                       +            .byte $eb
                                                           ;offset LSB should be $80-$FF
   4105 CBC5 30 E7                                bmi .0000010          ;it is — branch in range
                                        ;
   4107 CBC7 80 03                                bra .0000060          ;branch out of range
                                        ;
                                        ;
                                        ;	process long backward branch...
                                        ;
   4112 CBC9 EB                         .0000050 +         .byte $eb
                                                           ;offset MSB should be negative
   4113 CBCA 30 E9                                bmi .0000030          ;it is — branch in range
                                        ;
   4115 CBCC 38                         .0000060 sec                   ;range error
   4116 CBCD 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getcharr: GET PREVIOUS INPUT BUFFER CHARACTER
                                        ;
   4122 CBCE C6 C1                      getcharr dec ibufidx           ;move back a char
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getchar: GET A CHARACTER FROM INPUT BUFFER
                                        ;
                                        ;	——————————————————————————————————————————————
                                        ;	Preparatory Ops : none
                                        ;
                                        ;	Register Returns: .A: character or <NUL>
                                        ;	                  .B: entry value
                                        ;	                  .X: entry value
                                        ;	                  .Y: entry value
                                        ;
                                        ;	MPU Flags: NVmxDIZC
                                        ;	           ||||||||
                                        ;	           |||||||+———> entry value
                                        ;	           ||||||+————> 1: <NUL> gotten
                                        ;	           |||||+—————> entry value
                                        ;	           ||||+——————> entry value
                                        ;	           |||+———————> entry value
                                        ;	           ||+————————> entry value
                                        ;	           |+—————————> not defined
                                        ;	           +——————————> not defined
                                        ;	——————————————————————————————————————————————
                                        ;
   4148 CBD0 DA                         getchar  phx
   4149 CBD1 5A                                   phy
   4150 CBD2 08                                   php                   ;save register sizes
   4151 CBD3 E2 30                    +            .byte $e2,$30
                                                        ;force 8 bits
   4152 CBD5 A6 C1                                ldx ibufidx           ;buffer index
   4153 CBD7 BD 00 02                             lda ibuffer,x         ;get char
   4154 CBDA E6 C1                                inc ibufidx           ;bump index
   4155 CBDC 28                                   plp                   ;restore register widths
   4156 CBDD 7A                                   ply
   4157 CBDE FA                                   plx
                                        ; Changed the following to XBA instruction which seems to work as well.
                                        ; XBA doesn't access the stack memory saving a data memory access,
                                        ; and hence is faster.
   4161 CBDF EB                       +            .byte $eb
                                        		;	pha                   ;condition...
   4162 CBE0 EB                       +            .byte $eb
                                        		;   pla                   ;.Z
   4163 CBE1 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getpat: GET PATTERN FOR MEMORY CHANGE or SEARCH
                                        ;
                                        ;	—————————————————————————————————————————————————————
                                        ;	Preparatory Ops: Null-terminated pattern in IBUFFER.
                                        ;
                                        ;	Returned Values: .A: used
                                        ;	                 .X: used
                                        ;	                 .Y: pattern length if entered
                                        ;	                 .C: 0 = pattern valid
                                        ;	                     1 = exception:
                                        ;	                 .N  0 = no pattern entered
                                        ;	                     1 = evaluation error
                                        ;
                                        ;	Notes: 1) If pattern is preceded by "'" the following
                                        ;	          characters are interpreted as ASCII.
                                        ;	       2) A maximum of 32 bytes or characters is
                                        ;	          accepted.  Excess input will be discarded.
                                        ;	—————————————————————————————————————————————————————
                                        ;
   4186 CBE2 64 CD                      getpat   stz status            ;clear pattern type indicator
   4187 CBE4 A0 00                                ldy #0                ;pattern index
   4188 CBE6 20 CE CB                             jsr getcharr          ;get last char
   4189 CBE9 F0 3C                                beq .0000070          ;EOS
                                        ;
   4191 CBEB A6 C1                                ldx ibufidx           ;current buffer index
   4192 CBED 20 2E CC                             jsr getcharw          ;get next
   4193 CBF0 F0 35                                beq .0000070          ;EOS
                                        ;
   4195 CBF2 C9 27                                cmp #''''			; *** watch syntax here, the following line of code was omitted when only ''' was present
   4196 CBF4 D0 04                                bne .0000010          ;not ASCII input
                                        ;
   4198 CBF6 66 CD                                ror status            ;condition flag
   4199 CBF8 80 12                                bra .0000030          ;balance of input is ASCII
                                        ;
   4201 CBFA 86 C1                      .0000010 stx ibufidx           ;restore buffer index
                                        ;
   4203 CBFC 20 E1 CA                   .0000020 jsr getparm           ;evaluate numeric pattern
   4204 CBFF B0 21                                bcs .0000060          ;done w/pattern
                                        ;
   4206 CC01 20 CD CA                             jsr facasize          ;size
   4207 CC04 C9 02                                cmp #s_word
   4208 CC06 B0 1F                                bcs .0000070          ;not a byte — error
                                        ;
   4210 CC08 A5 A9                                lda faca              ;get byte &...
   4211 CC0A 80 05                                bra .0000040          ;store
                                        ;
   4213 CC0C 20 D0 CB                   .0000030 jsr getchar           ;get ASCII char
   4214 CC0F F0 11                                beq .0000060          ;done w/pattern
                                        ;
   4216 CC11 C0 20                      .0000040 cpy #s_auxbuf         ;pattern buffer full?
   4217 CC13 F0 0A                                beq .0000050          ;yes
                                        ;
   4219 CC15 99 51 02                             sta auxbuf,y          ;store pattern
   4220 CC18 C8                                   iny
   4221 CC19 24 CD                                bit status
   4222 CC1B 10 DF                                bpl .0000020          ;get next numeric value
                                        ;
   4224 CC1D 80 ED                                bra .0000030          ;get next ASCII char
                                        ;
   4226 CC1F 20 14 C8                   .0000050 jsr alert             ;excess input
                                        ;
   4228 CC22 84 C0                      .0000060 sty auxbufix          ;save pattern size
   4229 CC24 98                                   tya                   ;condition .Z
   4230 CC25 18                                   clc                   ;pattern valid
   4231 CC26 60                                   rts
                                        ;
                                        ;
                                        ;	no pattern entered...
                                        ;
   4236 CC27 C2 80                      .0000070 +         .byte $c2,%10000000
                                        
   4237 CC29 38                                   sec
   4238 CC2A 60                                   rts
                                        ;
                                        ;
                                        ;	evaluation error...
                                        ;
   4243 CC2B E2 81                      .0000080 +         .byte $e2,%10000001
                                        
   4244 CC2D 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getcharw: GET FROM INPUT BUFFER, DISCARDING WHITESPACE
                                        ;
                                        ;	——————————————————————————————————————————————————
                                        ;	Preparatory Ops: Null-terminated input in IBUFFER.
                                        ;
                                        ;	Returned Values: .A: char or null
                                        ;	                 .X: entry value
                                        ;	                 .Y: entry value
                                        ;	                 .Z: 1 = null terminator detected
                                        ;
                                        ;	Notes: Whitespace is defined as a blank ($20) or a
                                        ;	       horizontal tab ($09).
                                        ;	——————————————————————————————————————————————————
                                        ;
   4262 CC2E 20 D0 CB                   getcharw jsr getchar           ;get from buffer
   4263 CC31 F0 08                                beq .0000010          ;EOI
                                        ;
   4265 CC33 C9 20                                cmp #' '
   4266 CC35 F0 F7                                beq getcharw          ;discard whitespace
                                        ;
   4268 CC37 C9 09                                cmp #a_ht             ;also whitespace
   4269 CC39 F0 F3                                beq getcharw
                                        ;
   4271 CC3B 18                         .0000010 clc
   4272 CC3C 60                                   rts  
                                        ;
                                        ;================================================================================
                                        ;
                                        ;input: INTERACTIVE INPUT FROM CONSOLE CHANNEL
                                        ;
                                        ;	———————————————————————————————————————————————————————————
                                        ;	Preparatory Ops: Zero IBUFIDX or load IBUFFER with default
                                        ;	                 input & set IBUFIDX to the number of chars
                                        ;	                 loaded into the buffer.
                                        ;
                                        ;	Returned Values: .A: used
                                        ;	                 .X: characters entered
                                        ;	                 .Y: used
                                        ;
                                        ;	Example: STZ IBUFIDX
                                        ;	         JSR INPUT
                                        ;
                                        ;	Notes: Input is collected in IBUFFER & is null-terminated.
                                        ;	       IBUFIDX is reset to zero upon exit.
                                        ;	———————————————————————————————————————————————————————————
                                        ;
   4294 CC3D                            input:
   4295 CC3D A6 C1                       	    ldx ibufidx
   4296 CC3F 9E 00 02                             stz ibuffer,x         ;be sure buffer is terminated
   4297 CC42 20 80 C7                             jsr dpyibuf           ;print default input if any
   4298 CC45 F4                       +            .byte $f4
   4298 CC46 10 D0                    +            .word dc_cn
                                        
   4299 CC48 20 1D C8                             jsr sprint            ;enable cursor
   4300 CC4B A6 C1                                ldx ibufidx           ;starting buffer index
                                        ;
                                        ;
                                        ;	main input loop...
                                        ;
   4305 CC4D 20 00 F4                   .0000010 jsr getcha            ;poll for input
   4306 CC50 90 02                                bcc .0000020          ;got something
                                        ;
                                        ;         jsr	$F409          ;wait 'til any IRQ &... (Reschedule tasks)
   4309 CC52 80 F9                                bra .0000010          ;try again
                                        ;
   4311 CC54                            .0000020
   4312 CC54 C9 7F                       		cmp #a_del            ;above ASCII range?
   4313 CC56 B0 F5                                bcs .0000010          ;yes, ignore
                                        ;
   4315 CC58 C9 09                                cmp #a_ht             ;horizontal tab?
   4316 CC5A D0 02                                bne .0000030          ;no
                                        ;
   4318 CC5C A9 20                                lda #a_blank          ;replace <HT> w/blank
                                        ;
   4320 CC5E C9 20                      .0000030 cmp #a_blank          ;control char?
   4321 CC60 90 10                                bcc .0000050          ;yes
                                        ;
                                        ;
                                        ;	process QWERTY character...
                                        ;
   4326 CC62 E0 50                                cpx #s_ibuf           ;room in buffer?
   4327 CC64 B0 05                                bcs .0000040          ;no
                                        ;
   4329 CC66 9D 00 02                             sta ibuffer,x         ;store char
   4330 CC69 E8                                   inx                   ;bump index
   4331 CC6A 2C                                   .byte bitabs          ;echo char
                                        ;
   4333 CC6B A9 07                      .0000040 lda #a_bel            ;alert user
   4334 CC6D 20 06 F4                             jsr putcha
   4335 CC70 80 DB                                bra .0000010          ;get some more
                                        ;
                                        ;
                                        ;	process carriage return...
                                        ;
   4340 CC72 C9 0D                      .0000050 cmp #a_cr             ;carriage return?
   4341 CC74 D0 0E                                bne .0000060          ;no
                                        ;
   4343 CC76 DA                                   phx                   ;protect input count
   4344 CC77 F4                       +            .byte $f4
   4344 CC78 14 D0                    +            .word dc_co
                                        
   4345 CC7A 20 1D C8                             jsr sprint            ;cursor off
   4346 CC7D FA                                   plx                   ;recover input count
   4347 CC7E 9E 00 02                             stz ibuffer,x         ;terminate input &...
   4348 CC81 64 C1                                stz ibufidx           ;reset buffer index
   4349 CC83 60                                   rts                   ;done
                                        ;
                                        ;
                                        ;	process backspace...
                                        ;
   4354 CC84 C9 08                      .0000060 cmp #a_bs             ;backspace?
   4355 CC86 D0 C5                                bne .0000010          ;no
                                        ;
   4357 CC88 8A                                   txa
   4358 CC89 F0 C2                                beq .0000010          ;no input, ignore <BS>
                                        ;
   4360 CC8B CA                                   dex                   ;1 less char
   4361 CC8C DA                                   phx                   ;preserve count
   4362 CC8D 20 CF C7                             jsr gendbs            ;destructive backspace
   4363 CC90 FA                                   plx                   ;restore count
   4364 CC91 80 BA                                bra .0000010          ;get more input
                                        ;
                                        ;================================================================================
                                        ;
                                        ;lodbnk: LOAD SOURCE & DESTINATION BANKS
                                        ;
   4370 CC93 E2 20                      lodbnk +         .byte $e2,$20
                                        
   4371 CC95 A5 BF                                lda operand+s_word    ;destination bank
   4372 CC97 EB                       +            .byte $eb
                                                           ;make it MSB
   4373 CC98 A5 A4                                lda addra+s_word      ;source bank is LSB
   4374 CC9A 60                                   rts
                                        ;         
                                        ;================================================================================
                                        ;
                                        ;getcharc: GET A CHARACTER FROM INPUT BUFFER & CONVERT CASE
                                        ;
                                        ;	——————————————————————————————————————————————————
                                        ;	Preparatory Ops: Null-terminated input in IBUFFER.
                                        ;
                                        ;	Returned Values: .A: char or null
                                        ;	                 .X: entry value
                                        ;	                 .Y: entry value
                                        ;	                 .Z: 1 = null terminator detected
                                        ;	——————————————————————————————————————————————————
                                        ;
   4389 CC9B 20 D0 CB                   getcharc jsr getchar           ;get from buffer
   4390 CC9E F0 0C                                beq touppera          ;just return
                                        ;
                                        ;================================================================================
                                        ;
                                        ;toupper: FORCE CHARACTER TO UPPER CASE
                                        ;
                                        ;	————————————————————————————————————————————————
                                        ;	Preparatory Ops : .A: character to convert
                                        ;
                                        ;	Register Returns: .A: converted character
                                        ;	                  .B: entry value
                                        ;	                  .X: entry value
                                        ;	                  .Y: entry value
                                        ;
                                        ;	MPU Flags: no change
                                        ;
                                        ;	Notes: 1) This subroutine has no effect on char-
                                        ;	          acters that are not alpha.
                                        ;	————————————————————————————————————————————————
                                        ;
   4410 CCA0 08                         toupper  php                   ;protect flags
   4411 CCA1 C9 61                                cmp #a_asclcl         ;check char range
   4412 CCA3 90 06                                bcc .0000010          ;not LC alpha
                                        ;
   4414 CCA5 C9 7B                                cmp #a_asclch+s_byte
   4415 CCA7 B0 02                                bcs .0000010          ;not LC alpha
                                        ;
   4417 CCA9 29 5F                                and #a_lctouc         ;force to UC
                                        ;
   4419 CCAB 28                         .0000010 plp                   ;restore flags
                                        ;
   4421 CCAC 60                         touppera rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;teststop: TEST FOR STOP KEY
                                        ;
                                        ;	——————————————————————————————————————————————
                                        ;	Preparatory Ops: none
                                        ;
                                        ;	Returned Values: .A: detected keypress, if any
                                        ;	                 .X: entry value
                                        ;	                 .Y: entry value
                                        ;
                                        ;	MPU Flags: NVmxDIZC
                                        ;	           ||||||||
                                        ;	           |||||||+———> 0: normal key detected
                                        ;	           |||||||      1: <STOP> detected
                                        ;	           +++++++————> not defined
                                        ;
                                        ;	Example: jsr teststop
                                        ;	         bcs stopped
                                        ;
                                        ;	Notes: The symbol STOPKEY defines the ASCII
                                        ;	       value of the "stop key."
                                        ;	——————————————————————————————————————————————
                                        ;
   4447 CCAD 20 00 F4                   teststop jsr getcha            ;poll console
   4448 CCB0 B0 04                                bcs .0000010          ;no input
                                        ;
   4450 CCB2 C9 03                                cmp #stopkey          ;stop key pressed?
   4451 CCB4 F0 01                                beq .0000020          ;yes
                                        ;
   4453 CCB6 18                         .0000010 clc
                                        ;
   4455 CCB7 60                         .0000020 rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;COMMAND PROCESSING DATA TABLES
                                        ;
                                        ;
                                        ;	monitor commands...
                                        ;
   4464 CCB8 41                         mpctab   .byte "A"             ;assemble code
   4465 CCB9 43                                   .byte "C"             ;compare memory ranges
   4466 CCBA 44                                   .byte "D"             ;disassemble code
   4467 CCBB 46                                   .byte "F"             ;fill memory
   4468 CCBC 47                                   .byte "G"             ;execute code
   4469 CCBD 48                                   .byte "H"             ;search memory
   4470 CCBE 4A                                   .byte "J"             ;execute code as subroutine
   4471 CCBF 4D                                   .byte "M"             ;dump memory range
   4472 CCC0 52                                   .byte "R"             ;dump registers
   4473 CCC1 54                                   .byte "T"             ;copy memory range
   4474 CCC2 58                                   .byte "X"             ;exit from monitor
   4475 CCC3 3E                                   .byte ">"             ;change memory
   4476 CCC4 3B                                   .byte ";"             ;change registers
   4703 = 0000000D                      n_mpctab =*-mpctab             ;entries in above table
                                        ;
                                        ;
                                        ;	monitor command jump table...
                                        ;
   4482 CCC5 8E C1                      mpcextab .word monasc-s_byte   ; A  assemble code
   4483 CCC7 50 C4                                .word moncmp-s_byte   ; C  compare memory ranges
   4484 CCC9 6A C3                                .word mondsc-s_byte   ; D  disassemble code
   4485 CCCB 21 C5                                .word monfil-s_byte   ; F  fill memory
   4486 CCCD BE C3                                .word monjmp-s_byte   ; G  execute code
   4487 CCCF 87 C5                                .word monhnt-s_byte   ; H  search memory
   4488 CCD1 EF C3                                .word monjsr-s_byte   ; J  execute code as subroutine
   4489 CCD3 CF C4                                .word mondmp-s_byte   ; M  dump memory range
   4490 CCD5 A3 C0                                .word monreg-s_byte   ; R  dump registers
   4491 CCD7 7E C4                                .word moncpy-s_byte   ; T  copy memory range
   4492 CCD9 38 C6                                .word monxit-s_byte   ; X  exit from monitor
   4493 CCDB 25 C4                                .word monchm-s_byte   ; >  change memory
   4494 CCDD FD C5                                .word monchr-s_byte   ; ;  change registers
                                        ;
                                        ;
                                        ;	number conversion...
                                        ;        
   4499 CCDF 10 0A 08 02                basetab  .byte 16,10,8,2       ;supported number bases
   4500 CCE3 04 03 03 01                bitsdtab .byte 4,3,3,1         ;bits per binary digit
   4501 CCE7 04 04 03 01                bitsntab .byte 4,4,3,1         ;bits per ASCII character
   4502 CCEB 03 02 09 02                lzsttab  .byte 3,2,9,2         ;leading zero suppression thresholds
   4503 CCEF 0C 0C 10 30                numstab  .byte 12,12,16,48     ;bin to ASCII conversion numerals
   4504 CCF3 24                         radxtab  .byte c_hex           ;hexadecimal radix
   4505 CCF4 2B                                   .byte c_dec           ;decimal radix
   4506 CCF5 40                                   .byte c_oct           ;octal radix
   4507 CCF6 25                                   .byte c_bin           ;binary radix
   4734 = 00000004                      n_radix  =*-radxtab            ;number of recognized radices
                                        ;
                                        ;
                                        ;	shadow MPU register sizes...
                                        ;
   4513 CCF7 02                         rcvltab  .byte s_mpupbx+s_byte ; PB
   4514 CCF8 03                                   .byte s_mpupcx+s_byte ; PC
   4515 CCF9 02                                   .byte s_mpusrx+s_byte ; SR
   4516 CCFA 03                                   .byte s_word+s_byte   ; .C
   4517 CCFB 03                                   .byte s_word+s_byte   ; .X
   4518 CCFC 03                                   .byte s_word+s_byte   ; .Y
   4519 CCFD 03                                   .byte s_mpuspx+s_byte ; SP
   4520 CCFE 03                                   .byte s_mpudpx+s_byte ; DP
   4521 CCFF 02                                   .byte s_mpudbx+s_byte ; DB
   4748 = 00000009                      n_regchv =*-rcvltab            ;total shadow registers
                                        ;
                                        ;================================================================================
                                        ;
                                        ;ASSEMBLER/DISASSEMBLER DATA TABLES
                                        ;
                                        ;
                                        ;	numerically sorted & encoded W65C816S mnemonics...
                                        ;
   4531 CD00 F2 10                      mnetab   .word mne_xba         ;  0 — XBA
   4532 CD02 5A 11                                .word mne_lda         ;  1 — LDA
   4533 CD04 A2 11                                .word mne_pea         ;  2 — PEA
   4534 CD06 62 12                                .word mne_pha         ;  3 — PHA
   4535 CD08 62 13                                .word mne_pla         ;  4 — PLA
   4536 CD0A C6 14                                .word mne_bra         ;  5 — BRA
   4537 CD0C E0 14                                .word mne_ora         ;  6 — ORA
   4538 CD0E 68 15                                .word mne_sta         ;  7 — STA
   4539 CD10 6A 16                                .word mne_txa         ;  8 — TXA
   4540 CD12 AA 16                                .word mne_tya         ;  9 — TYA
   4541 CD14 62 1A                                .word mne_phb         ; 10 — PHB
   4542 CD16 62 1B                                .word mne_plb         ; 11 — PLB
   4543 CD18 EA 1C                                .word mne_trb         ; 12 — TRB
   4544 CD1A 2A 1D                                .word mne_tsb         ; 13 — TSB
   4545 CD1C E8 20                                .word mne_sbc         ; 14 — SBC
   4546 CD1E 06 21                                .word mne_bcc         ; 15 — BCC
   4547 CD20 44 21                                .word mne_adc         ; 16 — ADC
   4548 CD22 6A 21                                .word mne_tdc         ; 17 — TDC
   4549 CD24 8A 21                                .word mne_dec         ; 18 — DEC
   4550 CD26 A8 21                                .word mne_sec         ; 19 — SEC
   4551 CD28 48 23                                .word mne_clc         ; 20 — CLC
   4552 CD2A D4 23                                .word mne_inc         ; 21 — INC
   4553 CD2C 2A 25                                .word mne_tsc         ; 22 — TSC
   4554 CD2E C6 25                                .word mne_bvc         ; 23 — BVC
   4555 CD30 2A 29                                .word mne_tcd         ; 24 — TCD
   4556 CD32 A8 29                                .word mne_sed         ; 25 — SED
   4557 CD34 62 2A                                .word mne_phd         ; 26 — PHD
   4558 CD36 48 2B                                .word mne_cld         ; 27 — CLD
   4559 CD38 62 2B                                .word mne_pld         ; 28 — PLD
   4560 CD3A C4 2B                                .word mne_and         ; 29 — AND
   4561 CD3C 32 31                                .word mne_xce         ; 30 — XCE
   4562 CD3E C6 33                                .word mne_bne         ; 31 — BNE
   4563 CD40 B0 50                                .word mne_wai         ; 32 — WAI
   4564 CD42 A2 51                                .word mne_pei         ; 33 — PEI
   4565 CD44 A8 51                                .word mne_sei         ; 34 — SEI
   4566 CD46 48 53                                .word mne_cli         ; 35 — CLI
   4567 CD48 86 53                                .word mne_bmi         ; 36 — BMI
   4568 CD4A 66 55                                .word mne_rti         ; 37 — RTI
   4569 CD4C 62 62                                .word mne_phk         ; 38 — PHK
   4570 CD4E C6 64                                .word mne_brk         ; 39 — BRK
   4571 CD50 96 6B                                .word mne_jml         ; 40 — JML
   4572 CD52 26 6C                                .word mne_rol         ; 41 — ROL
   4573 CD54 46 6C                                .word mne_bpl         ; 42 — BPL
   4574 CD56 C6 6C                                .word mne_brl         ; 43 — BRL
   4575 CD58 04 6D                                .word mne_asl         ; 44 — ASL
   4576 CD5A 16 6D                                .word mne_jsl         ; 45 — JSL
   4577 CD5C 66 6D                                .word mne_rtl         ; 46 — RTL
   4578 CD5E 70 71                                .word mne_wdm         ; 47 — WDM
   4579 CD60 DC 7D                                .word mne_mvn         ; 48 — MVN
   4580 CD62 A6 89                                .word mne_rep         ; 49 — REP
   4581 CD64 A8 89                                .word mne_sep         ; 50 — SEP
   4582 CD66 62 8A                                .word mne_php         ; 51 — PHP
   4583 CD68 62 8B                                .word mne_plp         ; 52 — PLP
   4584 CD6A 88 8B                                .word mne_cmp         ; 53 — CMP
   4585 CD6C 96 8B                                .word mne_jmp         ; 54 — JMP
   4586 CD6E 08 8C                                .word mne_cop         ; 55 — COP
   4587 CD70 1E 8C                                .word mne_nop         ; 56 — NOP
   4588 CD72 68 8D                                .word mne_stp         ; 57 — STP
   4589 CD74 DC 8D                                .word mne_mvp         ; 58 — MVP
   4590 CD76 86 91                                .word mne_beq         ; 59 — BEQ
   4591 CD78 A2 99                                .word mne_per         ; 60 — PER
   4592 CD7A 0C 9C                                .word mne_eor         ; 61 — EOR
   4593 CD7C 26 9C                                .word mne_ror         ; 62 — ROR
   4594 CD7E 16 9D                                .word mne_jsr         ; 63 — JSR
   4595 CD80 1A 9D                                .word mne_lsr         ; 64 — LSR
   4596 CD82 06 A1                                .word mne_bcs         ; 65 — BCS
   4597 CD84 2A A1                                .word mne_tcs         ; 66 — TCS
   4598 CD86 66 A5                                .word mne_rts         ; 67 — RTS
   4599 CD88 C6 A5                                .word mne_bvs         ; 68 — BVS
   4600 CD8A 6A A6                                .word mne_txs         ; 69 — TXS
   4601 CD8C 86 AA                                .word mne_bit         ; 70 — BIT
   4602 CD8E 48 BB                                .word mne_clv         ; 71 — CLV
   4603 CD90 AA C8                                .word mne_tax         ; 72 — TAX
   4604 CD92 5A C9                                .word mne_ldx         ; 73 — LDX
   4605 CD94 8A C9                                .word mne_dex         ; 74 — DEX
   4606 CD96 62 CA                                .word mne_phx         ; 75 — PHX
   4607 CD98 62 CB                                .word mne_plx         ; 76 — PLX
   4608 CD9A D4 CB                                .word mne_inx         ; 77 — INX
   4609 CD9C 48 CC                                .word mne_cpx         ; 78 — CPX
   4610 CD9E 2A CD                                .word mne_tsx         ; 79 — TSX
   4611 CDA0 68 CD                                .word mne_stx         ; 80 — STX
   4612 CDA2 AA CE                                .word mne_tyx         ; 81 — TYX
   4613 CDA4 AA D0                                .word mne_tay         ; 82 — TAY
   4614 CDA6 5A D1                                .word mne_ldy         ; 83 — LDY
   4615 CDA8 8A D1                                .word mne_dey         ; 84 — DEY
   4616 CDAA 62 D2                                .word mne_phy         ; 85 — PHY
   4617 CDAC 62 D3                                .word mne_ply         ; 86 — PLY
   4618 CDAE D4 D3                                .word mne_iny         ; 87 — INY
   4619 CDB0 48 D4                                .word mne_cpy         ; 88 — CPY
   4620 CDB2 68 D5                                .word mne_sty         ; 89 — STY
   4621 CDB4 6A D6                                .word mne_txy         ; 90 — TXY
   4622 CDB6 68 DD                                .word mne_stz         ; 91 — STZ
                                        ;
   4850 = 000000B8                      s_mnetab =*-mnetab             ;mnemonic table size
   4851 = 0000005C                      n_mnemon =s_mnetab/s_word      ;total mnemonics
                                        ;
                                        ;
                                        ;	mnemonic lookup indices in opcode order...
                                        ;
   4630 CDB8 27                         mnetabix .byte mne_brkx        ; $00  BRK
   4631 CDB9 06                                   .byte mne_orax        ; $01  ORA (dp,X)
   4632 CDBA 37                                   .byte mne_copx        ; $02  COP
   4633 CDBB 06                                   .byte mne_orax        ; $03  ORA offset,S
   4634 CDBC 0D                                   .byte mne_tsbx        ; $04  TSB dp
   4635 CDBD 06                                   .byte mne_orax        ; $05  ORA dp
   4636 CDBE 2C                                   .byte mne_aslx        ; $06  ASL dp
   4637 CDBF 06                                   .byte mne_orax        ; $07  ORA [dp]
   4638 CDC0 33                                   .byte mne_phpx        ; $08  PHP
   4639 CDC1 06                                   .byte mne_orax        ; $09  ORA #
   4640 CDC2 2C                                   .byte mne_aslx        ; $0A  ASL A
   4641 CDC3 1A                                   .byte mne_phdx        ; $0B  PHD
   4642 CDC4 0D                                   .byte mne_tsbx        ; $0C  TSB abs
   4643 CDC5 06                                   .byte mne_orax        ; $0D  ORA abs
   4644 CDC6 2C                                   .byte mne_aslx        ; $0E  ASL abs
   4645 CDC7 06                                   .byte mne_orax        ; $0F  ORA absl
                                        ;
   4647 CDC8 2A                                   .byte mne_bplx        ; $10  BPL abs
   4648 CDC9 06                                   .byte mne_orax        ; $11  ORA (dp),Y
   4649 CDCA 06                                   .byte mne_orax        ; $12  ORA (dp)
   4650 CDCB 06                                   .byte mne_orax        ; $13  ORA (offset,S),Y
   4651 CDCC 0C                                   .byte mne_trbx        ; $14  TRB dp
   4652 CDCD 06                                   .byte mne_orax        ; $15  ORA dp,X
   4653 CDCE 2C                                   .byte mne_aslx        ; $16  ASL dp,X
   4654 CDCF 06                                   .byte mne_orax        ; $17  ORA [dp],Y
   4655 CDD0 14                                   .byte mne_clcx        ; $18  CLC
   4656 CDD1 06                                   .byte mne_orax        ; $19  ORA abs
   4657 CDD2 15                                   .byte mne_incx        ; $1A  INC A
   4658 CDD3 42                                   .byte mne_tcsx        ; $1B  TCS
   4659 CDD4 0C                                   .byte mne_trbx        ; $1C  TRB abs
   4660 CDD5 06                                   .byte mne_orax        ; $1D  ORA abs,X
   4661 CDD6 2C                                   .byte mne_aslx        ; $1E  ASL abs,X
   4662 CDD7 06                                   .byte mne_orax        ; $1F  ORA absl,X
                                        ;
   4664 CDD8 3F                                   .byte mne_jsrx        ; $20  JSR abs
   4665 CDD9 1D                                   .byte mne_andx        ; $21  AND (dp,X)
   4666 CDDA 2D                                   .byte mne_jslx        ; $22  JSL absl
   4667 CDDB 1D                                   .byte mne_andx        ; $23  AND offset,S
   4668 CDDC 46                                   .byte mne_bitx        ; $24  BIT dp
   4669 CDDD 1D                                   .byte mne_andx        ; $25  AND dp
   4670 CDDE 29                                   .byte mne_rolx        ; $26  ROL dp
   4671 CDDF 1D                                   .byte mne_andx        ; $27  AND [dp]
   4672 CDE0 34                                   .byte mne_plpx        ; $28  PLP
   4673 CDE1 1D                                   .byte mne_andx        ; $29  AND #
   4674 CDE2 29                                   .byte mne_rolx        ; $2A  ROL A
   4675 CDE3 1C                                   .byte mne_pldx        ; $2B  PLD
   4676 CDE4 46                                   .byte mne_bitx        ; $2C  BIT abs
   4677 CDE5 1D                                   .byte mne_andx        ; $2D  AND abs
   4678 CDE6 29                                   .byte mne_rolx        ; $2E  ROL abs
   4679 CDE7 1D                                   .byte mne_andx        ; $2F  AND absl
                                        ;
   4681 CDE8 24                                   .byte mne_bmix        ; $30  BMI abs
   4682 CDE9 1D                                   .byte mne_andx        ; $31  AND (dp),Y
   4683 CDEA 1D                                   .byte mne_andx        ; $32  AND (dp)
   4684 CDEB 1D                                   .byte mne_andx        ; $33  AND (offset,S),Y
   4685 CDEC 46                                   .byte mne_bitx        ; $34  BIT dp,X
   4686 CDED 1D                                   .byte mne_andx        ; $35  AND dp,X
   4687 CDEE 29                                   .byte mne_rolx        ; $36  ROL dp,X
   4688 CDEF 1D                                   .byte mne_andx        ; $37  AND [dp],Y
   4689 CDF0 13                                   .byte mne_secx        ; $38  SEC
   4690 CDF1 1D                                   .byte mne_andx        ; $39  AND abs,Y
   4691 CDF2 12                                   .byte mne_decx        ; $3A  DEC A
   4692 CDF3 16                                   .byte mne_tscx        ; $3B  TSC
   4693 CDF4 46                                   .byte mne_bitx        ; $3C  BIT abs,X
   4694 CDF5 1D                                   .byte mne_andx        ; $3D  AND abs,X
   4695 CDF6 29                                   .byte mne_rolx        ; $3E  ROL abs,X
   4696 CDF7 1D                                   .byte mne_andx        ; $3F  AND absl,X
                                        ;
   4698 CDF8 25                                   .byte mne_rtix        ; $40  RTI
   4699 CDF9 3D                                   .byte mne_eorx        ; $41  EOR (dp,X)
   4700 CDFA 2F                                   .byte mne_wdmx        ; $42  WDM
   4701 CDFB 3D                                   .byte mne_eorx        ; $43  EOR offset,S
   4702 CDFC 3A                                   .byte mne_mvpx        ; $44  MVP sb,db
   4703 CDFD 3D                                   .byte mne_eorx        ; $45  EOR dp
   4704 CDFE 40                                   .byte mne_lsrx        ; $46  LSR dp
   4705 CDFF 3D                                   .byte mne_eorx        ; $47  EOR [dp]
   4706 CE00 03                                   .byte mne_phax        ; $48  PHA
   4707 CE01 3D                                   .byte mne_eorx        ; $49  EOR #
   4708 CE02 40                                   .byte mne_lsrx        ; $4A  LSR A
   4709 CE03 26                                   .byte mne_phkx        ; $4B  PHK
   4710 CE04 36                                   .byte mne_jmpx        ; $4C  JMP abs
   4711 CE05 3D                                   .byte mne_eorx        ; $4D  EOR abs
   4712 CE06 40                                   .byte mne_lsrx        ; $4E  LSR abs
   4713 CE07 3D                                   .byte mne_eorx        ; $4F  EOR absl
                                        ;
   4715 CE08 17                                   .byte mne_bvcx        ; $50  BVC abs
   4716 CE09 3D                                   .byte mne_eorx        ; $51  EOR (dp),Y
   4717 CE0A 3D                                   .byte mne_eorx        ; $52  EOR (dp)
   4718 CE0B 3D                                   .byte mne_eorx        ; $53  EOR (offset,S),Y
   4719 CE0C 30                                   .byte mne_mvnx        ; $54  MVN sb,db
   4720 CE0D 3D                                   .byte mne_eorx        ; $55  EOR dp,X
   4721 CE0E 40                                   .byte mne_lsrx        ; $56  LSR dp,X
   4722 CE0F 3D                                   .byte mne_eorx        ; $57  EOR [dp],Y
   4723 CE10 23                                   .byte mne_clix        ; $58  CLI
   4724 CE11 3D                                   .byte mne_eorx        ; $59  EOR abs,Y
   4725 CE12 55                                   .byte mne_phyx        ; $5A  PHY
   4726 CE13 18                                   .byte mne_tcdx        ; $5B  TCD
   4727 CE14 28                                   .byte mne_jmlx        ; $5C  JML absl
   4728 CE15 3D                                   .byte mne_eorx        ; $5D  EOR abs,X
   4729 CE16 40                                   .byte mne_lsrx        ; $5E  LSR abs,X
   4730 CE17 3D                                   .byte mne_eorx        ; $5F  EOR absl,X
                                        ;
   4732 CE18 43                                   .byte mne_rtsx        ; $60  RTS
   4733 CE19 10                                   .byte mne_adcx        ; $61  ADC (dp,X)
   4734 CE1A 3C                                   .byte mne_perx        ; $62  PER
   4735 CE1B 10                                   .byte mne_adcx        ; $63  ADC offset,S
   4736 CE1C 5B                                   .byte mne_stzx        ; $64  STZ dp
   4737 CE1D 10                                   .byte mne_adcx        ; $65  ADC dp
   4738 CE1E 3E                                   .byte mne_rorx        ; $66  ROR dp
   4739 CE1F 10                                   .byte mne_adcx        ; $67  ADC [dp]
   4740 CE20 04                                   .byte mne_plax        ; $68  PLA
   4741 CE21 10                                   .byte mne_adcx        ; $69  ADC #
   4742 CE22 3E                                   .byte mne_rorx        ; $6A  ROR A
   4743 CE23 2E                                   .byte mne_rtlx        ; $6B  RTL
   4744 CE24 36                                   .byte mne_jmpx        ; $6C  JMP (abs)
   4745 CE25 10                                   .byte mne_adcx        ; $6D  ADC abs
   4746 CE26 3E                                   .byte mne_rorx        ; $6E  ROR abs
   4747 CE27 10                                   .byte mne_adcx        ; $6F  ADC absl
                                        ;
   4749 CE28 44                                   .byte mne_bvsx        ; $70  BVS abs
   4750 CE29 10                                   .byte mne_adcx        ; $71  ADC (dp),Y
   4751 CE2A 10                                   .byte mne_adcx        ; $72  ADC (dp)
   4752 CE2B 10                                   .byte mne_adcx        ; $73  ADC (offset,S),Y
   4753 CE2C 5B                                   .byte mne_stzx        ; $74  STZ dp,X
   4754 CE2D 10                                   .byte mne_adcx        ; $75  ADC dp,X
   4755 CE2E 3E                                   .byte mne_rorx        ; $76  ROR dp,X
   4756 CE2F 10                                   .byte mne_adcx        ; $77  ADC [dp],Y
   4757 CE30 22                                   .byte mne_seix        ; $78  SEI
   4758 CE31 10                                   .byte mne_adcx        ; $79  ADC abs,Y
   4759 CE32 56                                   .byte mne_plyx        ; $7A  PLY
   4760 CE33 11                                   .byte mne_tdcx        ; $7B  TDC
   4761 CE34 36                                   .byte mne_jmpx        ; $7C  JMP (abs,X)
   4762 CE35 10                                   .byte mne_adcx        ; $7D  ADC abs,X
   4763 CE36 3E                                   .byte mne_rorx        ; $7E  ROR abs,X
   4764 CE37 10                                   .byte mne_adcx        ; $7F  ADC absl,X
                                        ;
   4766 CE38 05                                   .byte mne_brax        ; $80  BRA abs
   4767 CE39 07                                   .byte mne_stax        ; $81  STA (dp,X)
   4768 CE3A 2B                                   .byte mne_brlx        ; $82  BRL abs
   4769 CE3B 07                                   .byte mne_stax        ; $83  STA offset,S
   4770 CE3C 59                                   .byte mne_styx        ; $84  STY dp
   4771 CE3D 07                                   .byte mne_stax        ; $85  STA dp
   4772 CE3E 50                                   .byte mne_stxx        ; $86  STX dp
   4773 CE3F 07                                   .byte mne_stax        ; $87  STA [dp]
   4774 CE40 54                                   .byte mne_deyx        ; $88  DEY
   4775 CE41 46                                   .byte mne_bitx        ; $89  BIT #
   4776 CE42 08                                   .byte mne_txax        ; $8A  TXA
   4777 CE43 0A                                   .byte mne_phbx        ; $8B  PHB
   4778 CE44 59                                   .byte mne_styx        ; $8C  STY abs
   4779 CE45 07                                   .byte mne_stax        ; $8D  STA abs
   4780 CE46 50                                   .byte mne_stxx        ; $8E  STX abs
   4781 CE47 07                                   .byte mne_stax        ; $8F  STA absl
                                        ;
   4783 CE48 0F                                   .byte mne_bccx        ; $90  BCC abs
   4784 CE49 07                                   .byte mne_stax        ; $91  STA (dp),Y
   4785 CE4A 07                                   .byte mne_stax        ; $92  STA (dp)
   4786 CE4B 07                                   .byte mne_stax        ; $93  STA (offset,S),Y
   4787 CE4C 59                                   .byte mne_styx        ; $94  STY dp,X
   4788 CE4D 07                                   .byte mne_stax        ; $95  STA dp,X
   4789 CE4E 50                                   .byte mne_stxx        ; $96  STX dp,Y
   4790 CE4F 07                                   .byte mne_stax        ; $97  STA [dp],Y
   4791 CE50 09                                   .byte mne_tyax        ; $98  TYA
   4792 CE51 07                                   .byte mne_stax        ; $99  STA abs,Y
   4793 CE52 45                                   .byte mne_txsx        ; $9A  TXS
   4794 CE53 5A                                   .byte mne_txyx        ; $9B  TXY
   4795 CE54 5B                                   .byte mne_stzx        ; $9C  STZ abs
   4796 CE55 07                                   .byte mne_stax        ; $9D  STA abs,X
   4797 CE56 5B                                   .byte mne_stzx        ; $9E  STZ abs,X
   4798 CE57 07                                   .byte mne_stax        ; $9F  STA absl,X
                                        ;
   4800 CE58 53                                   .byte mne_ldyx        ; $A0  LDY #
   4801 CE59 01                                   .byte mne_ldax        ; $A1  LDA (dp,X)
   4802 CE5A 49                                   .byte mne_ldxx        ; $A2  LDX #
   4803 CE5B 01                                   .byte mne_ldax        ; $A3  LDA offset,S
   4804 CE5C 53                                   .byte mne_ldyx        ; $A4  LDY dp
   4805 CE5D 01                                   .byte mne_ldax        ; $A5  LDA dp
   4806 CE5E 49                                   .byte mne_ldxx        ; $A6  LDX dp
   4807 CE5F 01                                   .byte mne_ldax        ; $A7  LDA [dp]
   4808 CE60 52                                   .byte mne_tayx        ; $A8  TAY
   4809 CE61 01                                   .byte mne_ldax        ; $A9  LDA #
   4810 CE62 48                                   .byte mne_taxx        ; $AA  TAX
   4811 CE63 0B                                   .byte mne_plbx        ; $AB  PLB
   4812 CE64 53                                   .byte mne_ldyx        ; $AC  LDY abs
   4813 CE65 01                                   .byte mne_ldax        ; $AD  LDA abs
   4814 CE66 49                                   .byte mne_ldxx        ; $AE  LDX abs
   4815 CE67 01                                   .byte mne_ldax        ; $AF  LDA absl
                                        ;
   4817 CE68 41                                   .byte mne_bcsx        ; $B0  BCS abs
   4818 CE69 01                                   .byte mne_ldax        ; $B1  LDA (dp),Y
   4819 CE6A 01                                   .byte mne_ldax        ; $B2  LDA (dp)
   4820 CE6B 01                                   .byte mne_ldax        ; $B3  LDA (offset,S),Y
   4821 CE6C 53                                   .byte mne_ldyx        ; $B4  LDY dp,X
   4822 CE6D 01                                   .byte mne_ldax        ; $B5  LDA dp,X
   4823 CE6E 49                                   .byte mne_ldxx        ; $B6  LDX dp,Y
   4824 CE6F 01                                   .byte mne_ldax        ; $B7  LDA [dp],Y
   4825 CE70 47                                   .byte mne_clvx        ; $B8  CLV
   4826 CE71 01                                   .byte mne_ldax        ; $B9  LDA abs,Y
   4827 CE72 4F                                   .byte mne_tsxx        ; $BA  TSX
   4828 CE73 51                                   .byte mne_tyxx        ; $BB  TYX
   4829 CE74 53                                   .byte mne_ldyx        ; $BC  LDY abs,X
   4830 CE75 01                                   .byte mne_ldax        ; $BD  LDA abs,X
   4831 CE76 49                                   .byte mne_ldxx        ; $BE  LDX abs,Y
   4832 CE77 01                                   .byte mne_ldax        ; $BF  LDA absl,X
                                        ;
   4834 CE78 58                                   .byte mne_cpyx        ; $C0  CPY #
   4835 CE79 35                                   .byte mne_cmpx        ; $C1  CMP (dp,X)
   4836 CE7A 31                                   .byte mne_repx        ; $C2  REP #
   4837 CE7B 35                                   .byte mne_cmpx        ; $C3  CMP offset,S
   4838 CE7C 58                                   .byte mne_cpyx        ; $C4  CPY dp
   4839 CE7D 35                                   .byte mne_cmpx        ; $C5  CMP dp
   4840 CE7E 12                                   .byte mne_decx        ; $C6  DEC dp
   4841 CE7F 35                                   .byte mne_cmpx        ; $C7  CMP [dp]
   4842 CE80 57                                   .byte mne_inyx        ; $C8  INY
   4843 CE81 35                                   .byte mne_cmpx        ; $C9  CMP #
   4844 CE82 4A                                   .byte mne_dexx        ; $CA  DEX
   4845 CE83 20                                   .byte mne_waix        ; $CB  WAI
   4846 CE84 58                                   .byte mne_cpyx        ; $CC  CPY abs
   4847 CE85 35                                   .byte mne_cmpx        ; $CD  CMP abs
   4848 CE86 12                                   .byte mne_decx        ; $CE  DEC abs
   4849 CE87 35                                   .byte mne_cmpx        ; $CF  CMP absl
                                        ;
   4851 CE88 1F                                   .byte mne_bnex        ; $D0  BNE abs
   4852 CE89 35                                   .byte mne_cmpx        ; $D1  CMP (dp),Y
   4853 CE8A 35                                   .byte mne_cmpx        ; $D2  CMP (dp)
   4854 CE8B 35                                   .byte mne_cmpx        ; $D3  CMP (offset,S),Y
   4855 CE8C 21                                   .byte mne_peix        ; $D4  PEI dp
   4856 CE8D 35                                   .byte mne_cmpx        ; $D5  CMP dp,X
   4857 CE8E 12                                   .byte mne_decx        ; $D6  DEC dp,X
   4858 CE8F 35                                   .byte mne_cmpx        ; $D7  CMP [dp],Y
   4859 CE90 1B                                   .byte mne_cldx        ; $D8  CLD
   4860 CE91 35                                   .byte mne_cmpx        ; $D9  CMP abs,Y
   4861 CE92 4B                                   .byte mne_phxx        ; $DA  PHX
   4862 CE93 39                                   .byte mne_stpx        ; $DB  STP
   4863 CE94 36                                   .byte mne_jmpx        ; $DC  JMP [abs]
   4864 CE95 35                                   .byte mne_cmpx        ; $DD  CMP abs,X
   4865 CE96 12                                   .byte mne_decx        ; $DE  DEC abs,X
   4866 CE97 35                                   .byte mne_cmpx        ; $DF  CMP absl,X
                                        ;
   4868 CE98 4E                                   .byte mne_cpxx        ; $E0  CPX #
   4869 CE99 0E                                   .byte mne_sbcx        ; $E1  SBC (dp,X)
   4870 CE9A 32                                   .byte mne_sepx        ; $E2  SEP #
   4871 CE9B 0E                                   .byte mne_sbcx        ; $E3  SBC offset,S
   4872 CE9C 4E                                   .byte mne_cpxx        ; $E4  CPX dp
   4873 CE9D 0E                                   .byte mne_sbcx        ; $E5  SBC dp
   4874 CE9E 15                                   .byte mne_incx        ; $E6  INC dp
   4875 CE9F 0E                                   .byte mne_sbcx        ; $E7  SBC [dp]
   4876 CEA0 4D                                   .byte mne_inxx        ; $E8  INX
   4877 CEA1 0E                                   .byte mne_sbcx        ; $E9  SBC #
   4878 CEA2 38                                   .byte mne_nopx        ; $EA  NOP
   4879 CEA3 00                                   .byte mne_xbax        ; $EB  XBA
   4880 CEA4 4E                                   .byte mne_cpxx        ; $EC  CPX abs
   4881 CEA5 0E                                   .byte mne_sbcx        ; $ED  SBC abs
   4882 CEA6 15                                   .byte mne_incx        ; $EE  INC abs
   4883 CEA7 0E                                   .byte mne_sbcx        ; $EF  SBC absl
                                        ;
   4885 CEA8 3B                                   .byte mne_beqx        ; $F0  BEQ abs
   4886 CEA9 0E                                   .byte mne_sbcx        ; $F1  SBC (dp),Y
   4887 CEAA 0E                                   .byte mne_sbcx        ; $F2  SBC (dp)
   4888 CEAB 0E                                   .byte mne_sbcx        ; $F3  SBC (offset,S),Y
   4889 CEAC 02                                   .byte mne_peax        ; $F4  PEA #
   4890 CEAD 0E                                   .byte mne_sbcx        ; $F5  SBC dp,X
   4891 CEAE 15                                   .byte mne_incx        ; $F6  INC dp,X
   4892 CEAF 0E                                   .byte mne_sbcx        ; $F7  SBC [dp],Y
   4893 CEB0 19                                   .byte mne_sedx        ; $F8  SED
   4894 CEB1 0E                                   .byte mne_sbcx        ; $F9  SBC abs,Y
   4895 CEB2 4C                                   .byte mne_plxx        ; $FA  PLX
   4896 CEB3 1E                                   .byte mne_xcex        ; $FB  XCE
   4897 CEB4 3F                                   .byte mne_jsrx        ; $FC  JSR (abs,X)
   4898 CEB5 0E                                   .byte mne_sbcx        ; $FD  SBC abs,X
   4899 CEB6 15                                   .byte mne_incx        ; $FE  INC abs,X
   4900 CEB7 0E                                   .byte mne_sbcx        ; $FF  SBC absl,X
                                        ;
                                        ;
                                        ;	instruction addressing modes & sizes in opcode order...
                                        ;
                                        ;	    xxxxxxxx
                                        ;	    ||||||||
                                        ;	    ||||++++———> Addressing Mode
                                        ;	    ||||         ——————————————————————————————————
                                        ;	    ||||          0000  dp, abs, absl, implied or A
                                        ;	    ||||          0001  #
                                        ;	    ||||          0010  dp,X, abs,X or absl,X
                                        ;	    ||||          0011  dp,Y or abs,Y
                                        ;	    ||||          0100  (dp) or (abs)
                                        ;	    ||||          0101  [dp] or [abs]
                                        ;	    ||||          0110  [dp],Y
                                        ;	    ||||          0111  (dp,X) or (abs,X)
                                        ;	    ||||          1000  (dp),Y
                                        ;	    ||||          1001  offset,S
                                        ;	    ||||          1010  (offset,S),Y
                                        ;	    ||||          1011  sbnk,dbnk (MVN or MVP)
                                        ;	    ||||          —-—-—-—-—-—-—-—-—-—-—-—-—-—-—-—-—
                                        ;	    ||||           #    = immediate
                                        ;	    ||||           A    = accumulator
                                        ;	    ||||           abs  = absolute
                                        ;	    ||||           absl = absolute long
                                        ;	    ||||           dbnk = destination bank
                                        ;	    ||||           dp   = direct (zero) page
                                        ;	    ||||           S    = stack relative
                                        ;	    ||||           sbnk = source bank
                                        ;	    ||||         ——————————————————————————————————
                                        ;	    ||||
                                        ;	    ||++———————> binary-encoded operand size
                                        ;	    |+—————————> 1: relative branch instruction
                                        ;	    +——————————> 1: variable operand size...
                                        ;
                                        ;	    —————————————————————————————————————————————————————————————
                                        ;	    Variable operand size refers to an immediate mode instruction
                                        ;	    that can accept either an 8 or 16 bit operand.  During instr-
                                        ;	    uction assembly, an 8 bit operand can be forced to 16 bits by
                                        ;	    preceding the operand field with !,  e.g.,  LDA !#$01,  which
                                        ;	    will assemble as $A9 $01 $00.
                                        ;	    —————————————————————————————————————————————————————————————
                                        ;
   4944 CEB8 00                         mnetabam .byte ops0 | am_nam   ; $00  BRK
   4945 CEB9 17                                   .byte ops1 | am_indx  ; $01  ORA (dp,X)
   4946 CEBA 10                                   .byte ops1 | am_nam   ; $02  COP
   4947 CEBB 19                                   .byte ops1 | am_stk   ; $03  ORA offset,S
   4948 CEBC 10                                   .byte ops1 | am_nam   ; $04  TSB dp
   4949 CEBD 10                                   .byte ops1 | am_nam   ; $05  ORA dp
   4950 CEBE 10                                   .byte ops1 | am_nam   ; $06  ASL dp
   4951 CEBF 15                                   .byte ops1 | am_indl  ; $07  ORA [dp]
   4952 CEC0 00                                   .byte ops0 | am_nam   ; $08  PHP
   4953 CEC1 91                                   .byte vops | am_imm   ; $09  ORA #
   4954 CEC2 00                                   .byte ops0 | am_nam   ; $0A  ASL A
   4955 CEC3 00                                   .byte ops0 | am_nam   ; $0B  PHD
   4956 CEC4 20                                   .byte ops2 | am_nam   ; $0C  TSB abs
   4957 CEC5 20                                   .byte ops2 | am_nam   ; $0D  ORA abs
   4958 CEC6 20                                   .byte ops2 | am_nam   ; $0E  ASL abs
   4959 CEC7 30                                   .byte ops3 | am_nam   ; $0F  ORA absl
                                        ;
   4961 CEC8 50                                   .byte bop1 | am_nam   ; $10  BPL abs
   4962 CEC9 18                                   .byte ops1 | am_indy  ; $11  ORA (dp),Y
   4963 CECA 14                                   .byte ops1 | am_ind   ; $12  ORA (dp)
   4964 CECB 1A                                   .byte ops1 | am_stky  ; $13  ORA (offset,S),Y
   4965 CECC 10                                   .byte ops1 | am_nam   ; $14  TRB dp
   4966 CECD 12                                   .byte ops1 | am_adrx  ; $15  ORA dp,X
   4967 CECE 12                                   .byte ops1 | am_adrx  ; $16  ASL dp,X
   4968 CECF 16                                   .byte ops1 | am_indly ; $17  ORA [dp],Y
   4969 CED0 00                                   .byte ops0 | am_nam   ; $18  CLC
   4970 CED1 20                                   .byte ops2 | am_nam   ; $19  ORA abs
   4971 CED2 00                                   .byte ops0 | am_nam   ; $1A  INC A
   4972 CED3 00                                   .byte ops0 | am_nam   ; $1B  TCS
   4973 CED4 20                                   .byte ops2 | am_nam   ; $1C  TRB abs
   4974 CED5 22                                   .byte ops2 | am_adrx  ; $1D  ORA abs,X
   4975 CED6 22                                   .byte ops2 | am_adrx  ; $1E  ASL abs,X
   4976 CED7 32                                   .byte ops3 | am_adrx  ; $1F  ORA absl,X
                                        ;
   4978 CED8 20                                   .byte ops2 | am_nam   ; $20  JSR abs
   4979 CED9 17                                   .byte ops1 | am_indx  ; $21  AND (dp,X)
   4980 CEDA 30                                   .byte ops3 | am_nam   ; $22  JSL absl
   4981 CEDB 19                                   .byte ops1 | am_stk   ; $23  AND offset,S
   4982 CEDC 10                                   .byte ops1 | am_nam   ; $24  BIT dp
   4983 CEDD 10                                   .byte ops1 | am_nam   ; $25  AND dp
   4984 CEDE 10                                   .byte ops1 | am_nam   ; $26  ROL dp
   4985 CEDF 15                                   .byte ops1 | am_indl  ; $27  AND [dp]
   4986 CEE0 00                                   .byte ops0 | am_nam   ; $28  PLP
   4987 CEE1 91                                   .byte vops | am_imm   ; $29  AND #
   4988 CEE2 00                                   .byte ops0 | am_nam   ; $2A  ROL A
   4989 CEE3 00                                   .byte ops0 | am_nam   ; $2B  PLD
   4990 CEE4 20                                   .byte ops2 | am_nam   ; $2C  BIT abs
   4991 CEE5 20                                   .byte ops2 | am_nam   ; $2D  AND abs
   4992 CEE6 20                                   .byte ops2 | am_nam   ; $2E  ROL abs
   4993 CEE7 30                                   .byte ops3 | am_nam   ; $2F  AND absl
                                        ;
   4995 CEE8 50                                   .byte bop1 | am_nam   ; $30  BMI abs
   4996 CEE9 18                                   .byte ops1 | am_indy  ; $31  AND (dp),Y
   4997 CEEA 14                                   .byte ops1 | am_ind   ; $32  AND (dp)
   4998 CEEB 1A                                   .byte ops1 | am_stky  ; $33  AND (offset,S),Y
   4999 CEEC 12                                   .byte ops1 | am_adrx  ; $34  BIT dp,X
   5000 CEED 12                                   .byte ops1 | am_adrx  ; $35  AND dp,X
   5001 CEEE 12                                   .byte ops1 | am_adrx  ; $36  ROL dp,X
   5002 CEEF 16                                   .byte ops1 | am_indly ; $37  AND [dp],Y
   5003 CEF0 00                                   .byte ops0 | am_nam   ; $38  SEC
   5004 CEF1 23                                   .byte ops2 | am_adry  ; $39  AND abs,Y
   5005 CEF2 00                                   .byte ops0 | am_nam   ; $3A  DEC A
   5006 CEF3 00                                   .byte ops0 | am_nam   ; $3B  TSC
   5007 CEF4 22                                   .byte ops2 | am_adrx  ; $3C  BIT abs,X
   5008 CEF5 22                                   .byte ops2 | am_adrx  ; $3D  AND abs,X
   5009 CEF6 22                                   .byte ops2 | am_adrx  ; $3E  ROL abs,X
   5010 CEF7 32                                   .byte ops3 | am_adrx  ; $3F  AND absl,X
                                        ;
   5012 CEF8 00                                   .byte ops0 | am_nam   ; $40  RTI
   5013 CEF9 17                                   .byte ops1 | am_indx  ; $41  EOR (dp,X)
   5014 CEFA 00                                   .byte ops0 | am_nam   ; $42  WDM
   5015 CEFB 19                                   .byte ops1 | am_stk   ; $43  EOR offset,S
   5016 CEFC 2B                                   .byte ops2 | am_move  ; $44  MVP sb,db
   5017 CEFD 10                                   .byte ops1 | am_nam   ; $45  EOR dp
   5018 CEFE 10                                   .byte ops1 | am_nam   ; $46  LSR dp
   5019 CEFF 15                                   .byte ops1 | am_indl  ; $47  EOR [dp]
   5020 CF00 00                                   .byte ops0 | am_nam   ; $48  PHA
   5021 CF01 91                                   .byte vops | am_imm   ; $49  EOR #
   5022 CF02 00                                   .byte ops0 | am_nam   ; $4A  LSR A
   5023 CF03 00                                   .byte ops0 | am_nam   ; $4B  PHK
   5024 CF04 20                                   .byte ops2 | am_nam   ; $4C  JMP abs
   5025 CF05 20                                   .byte ops2 | am_nam   ; $4D  EOR abs
   5026 CF06 20                                   .byte ops2 | am_nam   ; $4E  LSR abs
   5027 CF07 30                                   .byte ops3 | am_nam   ; $4F  EOR absl
                                        ;
   5029 CF08 50                                   .byte bop1 | am_nam   ; $50  BVC abs
   5030 CF09 18                                   .byte ops1 | am_indy  ; $51  EOR (dp),Y
   5031 CF0A 14                                   .byte ops1 | am_ind   ; $52  EOR (dp)
   5032 CF0B 1A                                   .byte ops1 | am_stky  ; $53  EOR (offset,S),Y
   5033 CF0C 2B                                   .byte ops2 | am_move  ; $54  MVN sb,db
   5034 CF0D 12                                   .byte ops1 | am_adrx  ; $55  EOR dp,X
   5035 CF0E 12                                   .byte ops1 | am_adrx  ; $56  LSR dp,X
   5036 CF0F 16                                   .byte ops1 | am_indly ; $57  EOR [dp],Y
   5037 CF10 00                                   .byte ops0 | am_nam   ; $58  CLI
   5038 CF11 23                                   .byte ops2 | am_adry  ; $59  EOR abs,Y
   5039 CF12 00                                   .byte ops0 | am_nam   ; $5A  PHY
   5040 CF13 00                                   .byte ops0 | am_nam   ; $5B  TCD
   5041 CF14 30                                   .byte ops3 | am_nam   ; $5C  JML absl
   5042 CF15 22                                   .byte ops2 | am_adrx  ; $5D  EOR abs,X
   5043 CF16 22                                   .byte ops2 | am_adrx  ; $5E  LSR abs,X
   5044 CF17 32                                   .byte ops3 | am_adrx  ; $5F  EOR absl,X
                                        ;
   5046 CF18 00                                   .byte ops0 | am_nam   ; $60  RTS
   5047 CF19 17                                   .byte ops1 | am_indx  ; $61  ADC (dp,X)
   5048 CF1A 60                                   .byte bop2 | am_nam   ; $62  PER
   5049 CF1B 19                                   .byte ops1 | am_stk   ; $63  ADC offset,S
   5050 CF1C 10                                   .byte ops1 | am_nam   ; $64  STZ dp
   5051 CF1D 10                                   .byte ops1 | am_nam   ; $65  ADC dp
   5052 CF1E 10                                   .byte ops1 | am_nam   ; $66  ROR dp
   5053 CF1F 15                                   .byte ops1 | am_indl  ; $67  ADC [dp]
   5054 CF20 00                                   .byte ops0 | am_nam   ; $68  PLA
   5055 CF21 91                                   .byte vops | am_imm   ; $69  ADC #
   5056 CF22 00                                   .byte ops0 | am_nam   ; $6A  ROR A
   5057 CF23 00                                   .byte ops0 | am_nam   ; $6B  RTL
   5058 CF24 24                                   .byte ops2 | am_ind   ; $6C  JMP (abs)
   5059 CF25 20                                   .byte ops2 | am_nam   ; $6D  ADC abs
   5060 CF26 20                                   .byte ops2 | am_nam   ; $6E  ROR abs
   5061 CF27 30                                   .byte ops3 | am_nam   ; $6F  ADC absl
                                        ;
   5063 CF28 50                                   .byte bop1 | am_nam   ; $70  BVS abs
   5064 CF29 18                                   .byte ops1 | am_indy  ; $71  ADC (dp),Y
   5065 CF2A 14                                   .byte ops1 | am_ind   ; $72  ADC (dp)
   5066 CF2B 1A                                   .byte ops1 | am_stky  ; $73  ADC (offset,S),Y
   5067 CF2C 12                                   .byte ops1 | am_adrx  ; $74  STZ dp,X
   5068 CF2D 12                                   .byte ops1 | am_adrx  ; $75  ADC dp,X
   5069 CF2E 12                                   .byte ops1 | am_adrx  ; $76  ROR dp,X
   5070 CF2F 16                                   .byte ops1 | am_indly ; $77  ADC [dp],Y
   5071 CF30 00                                   .byte ops0 | am_nam   ; $78  SEI
   5072 CF31 23                                   .byte ops2 | am_adry  ; $79  ADC abs,Y
   5073 CF32 00                                   .byte ops0 | am_nam   ; $7A  PLY
   5074 CF33 00                                   .byte ops0 | am_nam   ; $7B  TDC
   5075 CF34 27                                   .byte ops2 | am_indx  ; $7C  JMP (abs,X)
   5076 CF35 22                                   .byte ops2 | am_adrx  ; $7D  ADC abs,X
   5077 CF36 22                                   .byte ops2 | am_adrx  ; $7E  ROR abs,X
   5078 CF37 32                                   .byte ops3 | am_adrx  ; $7F  ADC absl,X
                                        ;
   5080 CF38 50                                   .byte bop1 | am_nam   ; $80  BRA abs
   5081 CF39 17                                   .byte ops1 | am_indx  ; $81  STA (dp,X)
   5082 CF3A 60                                   .byte bop2 | am_nam   ; $82  BRL abs
   5083 CF3B 19                                   .byte ops1 | am_stk   ; $83  STA offset,S
   5084 CF3C 10                                   .byte ops1 | am_nam   ; $84  STY dp
   5085 CF3D 10                                   .byte ops1 | am_nam   ; $85  STA dp
   5086 CF3E 10                                   .byte ops1 | am_nam   ; $86  STX dp
   5087 CF3F 15                                   .byte ops1 | am_indl  ; $87  STA [dp]
   5088 CF40 00                                   .byte ops0 | am_nam   ; $88  DEY
   5089 CF41 91                                   .byte vops | am_imm   ; $89  BIT #
   5090 CF42 00                                   .byte ops0 | am_nam   ; $8A  TXA
   5091 CF43 00                                   .byte ops0 | am_nam   ; $8B  PHB
   5092 CF44 20                                   .byte ops2 | am_nam   ; $8C  STY abs
   5093 CF45 20                                   .byte ops2 | am_nam   ; $8D  STA abs
   5094 CF46 20                                   .byte ops2 | am_nam   ; $8E  STX abs
   5095 CF47 30                                   .byte ops3 | am_nam   ; $8F  STA absl
                                        ;
   5097 CF48 50                                   .byte bop1 | am_nam   ; $90  BCC abs
   5098 CF49 18                                   .byte ops1 | am_indy  ; $91  STA (dp),Y
   5099 CF4A 14                                   .byte ops1 | am_ind   ; $92  STA (dp)
   5100 CF4B 1A                                   .byte ops1 | am_stky  ; $93  STA (offset,S),Y
   5101 CF4C 12                                   .byte ops1 | am_adrx  ; $94  STY dp,X
   5102 CF4D 12                                   .byte ops1 | am_adrx  ; $95  STA dp,X
   5103 CF4E 13                                   .byte ops1 | am_adry  ; $96  STX dp,Y
   5104 CF4F 16                                   .byte ops1 | am_indly ; $97  STA [dp],Y
   5105 CF50 00                                   .byte ops0 | am_nam   ; $98  TYA
   5106 CF51 23                                   .byte ops2 | am_adry  ; $99  STA abs,Y
   5107 CF52 00                                   .byte ops0 | am_nam   ; $9A  TXS
   5108 CF53 00                                   .byte ops0 | am_nam   ; $9B  TXY
   5109 CF54 20                                   .byte ops2 | am_nam   ; $9C  STZ abs
   5110 CF55 22                                   .byte ops2 | am_adrx  ; $9D  STA abs,X
   5111 CF56 22                                   .byte ops2 | am_adrx  ; $9E  STZ abs,X
   5112 CF57 32                                   .byte ops3 | am_adrx  ; $9F  STA absl,X
                                        ;
   5114 CF58 91                                   .byte vops | am_imm   ; $A0  LDY #
   5115 CF59 17                                   .byte ops1 | am_indx  ; $A1  LDA (dp,X)
   5116 CF5A 91                                   .byte vops | am_imm   ; $A2  LDX #
   5117 CF5B 19                                   .byte ops1 | am_stk   ; $A3  LDA offset,S
   5118 CF5C 10                                   .byte ops1 | am_nam   ; $A4  LDY dp
   5119 CF5D 10                                   .byte ops1 | am_nam   ; $A5  LDA dp
   5120 CF5E 10                                   .byte ops1 | am_nam   ; $A6  LDX dp
   5121 CF5F 15                                   .byte ops1 | am_indl  ; $A7  LDA [dp]
   5122 CF60 00                                   .byte ops0 | am_nam   ; $A8  TAY
   5123 CF61 91                                   .byte vops | am_imm   ; $A9  LDA #
   5124 CF62 00                                   .byte ops0 | am_nam   ; $AA  TAX
   5125 CF63 00                                   .byte ops0 | am_nam   ; $AB  PLB
   5126 CF64 20                                   .byte ops2 | am_nam   ; $AC  LDY abs
   5127 CF65 20                                   .byte ops2 | am_nam   ; $AD  LDA abs
   5128 CF66 20                                   .byte ops2 | am_nam   ; $AE  LDX abs
   5129 CF67 30                                   .byte ops3 | am_nam   ; $AF  LDA absl
                                        ;
   5131 CF68 50                                   .byte bop1 | am_nam   ; $B0  BCS abs
   5132 CF69 18                                   .byte ops1 | am_indy  ; $B1  LDA (dp),Y
   5133 CF6A 14                                   .byte ops1 | am_ind   ; $B2  LDA (dp)
   5134 CF6B 1A                                   .byte ops1 | am_stky  ; $B3  LDA (offset,S),Y
   5135 CF6C 12                                   .byte ops1 | am_adrx  ; $B4  LDY dp,X
   5136 CF6D 12                                   .byte ops1 | am_adrx  ; $B5  LDA dp,X
   5137 CF6E 13                                   .byte ops1 | am_adry  ; $B6  LDX dp,Y
   5138 CF6F 16                                   .byte ops1 | am_indly ; $B7  LDA [dp],Y
   5139 CF70 00                                   .byte ops0 | am_nam   ; $B8  CLV
   5140 CF71 23                                   .byte ops2 | am_adry  ; $B9  LDA abs,Y
   5141 CF72 00                                   .byte ops0 | am_nam   ; $BA  TSX
   5142 CF73 00                                   .byte ops0 | am_nam   ; $BB  TYX
   5143 CF74 22                                   .byte ops2 | am_adrx  ; $BC  LDY abs,X
   5144 CF75 22                                   .byte ops2 | am_adrx  ; $BD  LDA abs,X
   5145 CF76 23                                   .byte ops2 | am_adry  ; $BE  LDX abs,Y
   5146 CF77 32                                   .byte ops3 | am_adrx  ; $BF  LDA absl,X
                                        ;
   5148 CF78 91                                   .byte vops | am_imm   ; $C0  CPY #
   5149 CF79 17                                   .byte ops1 | am_indx  ; $C1  CMP (dp,X)
   5150 CF7A 11                                   .byte ops1 | am_imm   ; $C2  REP #
   5151 CF7B 19                                   .byte ops1 | am_stk   ; $C3  CMP offset,S
   5152 CF7C 10                                   .byte ops1 | am_nam   ; $C4  CPY dp
   5153 CF7D 10                                   .byte ops1 | am_nam   ; $C5  CMP dp
   5154 CF7E 10                                   .byte ops1 | am_nam   ; $C6  DEC dp
   5155 CF7F 15                                   .byte ops1 | am_indl  ; $C7  CMP [dp]
   5156 CF80 00                                   .byte ops0 | am_nam   ; $C8  INY
   5157 CF81 91                                   .byte vops | am_imm   ; $C9  CMP #
   5158 CF82 00                                   .byte ops0 | am_nam   ; $CA  DEX
   5159 CF83 00                                   .byte ops0 | am_nam   ; $CB  WAI
   5160 CF84 20                                   .byte ops2 | am_nam   ; $CC  CPY abs
   5161 CF85 20                                   .byte ops2 | am_nam   ; $CD  CMP abs
   5162 CF86 20                                   .byte ops2 | am_nam   ; $CE  DEC abs
   5163 CF87 30                                   .byte ops3 | am_nam   ; $CF  CMP absl
                                        ;
   5165 CF88 50                                   .byte bop1 | am_nam   ; $D0  BNE abs
   5166 CF89 18                                   .byte ops1 | am_indy  ; $D1  CMP (dp),Y
   5167 CF8A 14                                   .byte ops1 | am_ind   ; $D2  CMP (dp)
   5168 CF8B 1A                                   .byte ops1 | am_stky  ; $D3  CMP (offset,S),Y
   5169 CF8C 10                                   .byte ops1 | am_nam   ; $D4  PEI dp
   5170 CF8D 12                                   .byte ops1 | am_adrx  ; $D5  CMP dp,X
   5171 CF8E 12                                   .byte ops1 | am_adrx  ; $D6  DEC dp,X
   5172 CF8F 16                                   .byte ops1 | am_indly ; $D7  CMP [dp],Y
   5173 CF90 00                                   .byte ops0 | am_nam   ; $D8  CLD
   5174 CF91 23                                   .byte ops2 | am_adry  ; $D9  CMP abs,Y
   5175 CF92 00                                   .byte ops0 | am_nam   ; $DA  PHX
   5176 CF93 00                                   .byte ops0 | am_nam   ; $DB  STP
   5177 CF94 25                                   .byte ops2 | am_indl  ; $DC  JMP [abs]
   5178 CF95 22                                   .byte ops2 | am_adrx  ; $DD  CMP abs,X
   5179 CF96 22                                   .byte ops2 | am_adrx  ; $DE  DEC abs,X
   5180 CF97 32                                   .byte ops3 | am_adrx  ; $DF  CMP absl,X
                                        ;
   5182 CF98 91                                   .byte vops | am_imm   ; $E0  CPX #
   5183 CF99 17                                   .byte ops1 | am_indx  ; $E1  SBC (dp,X)
   5184 CF9A 11                                   .byte ops1 | am_imm   ; $E2  SEP #
   5185 CF9B 19                                   .byte ops1 | am_stk   ; $E3  SBC offset,S
   5186 CF9C 10                                   .byte ops1 | am_nam   ; $E4  CPX dp
   5187 CF9D 10                                   .byte ops1 | am_nam   ; $E5  SBC dp
   5188 CF9E 10                                   .byte ops1 | am_nam   ; $E6  INC dp
   5189 CF9F 15                                   .byte ops1 | am_indl  ; $E7  SBC [dp]
   5190 CFA0 00                                   .byte ops0 | am_nam   ; $E8  INX
   5191 CFA1 91                                   .byte vops | am_imm   ; $E9  SBC #
   5192 CFA2 00                                   .byte ops0 | am_nam   ; $EA  NOP
   5193 CFA3 00                                   .byte ops0 | am_nam   ; $EB  XBA
   5194 CFA4 20                                   .byte ops2 | am_nam   ; $EC  CPX abs
   5195 CFA5 20                                   .byte ops2 | am_nam   ; $ED  SBC abs
   5196 CFA6 20                                   .byte ops2 | am_nam   ; $EE  INC abs
   5197 CFA7 30                                   .byte ops3 | am_nam   ; $EF  SBC absl
                                        ;
   5199 CFA8 50                                   .byte bop1 | am_nam   ; $F0  BEQ abs
   5200 CFA9 18                                   .byte ops1 | am_indy  ; $F1  SBC (dp),Y
   5201 CFAA 14                                   .byte ops1 | am_ind   ; $F2  SBC (dp)
   5202 CFAB 1A                                   .byte ops1 | am_stky  ; $F3  SBC (offset,S),Y
   5203 CFAC 21                                   .byte ops2 | am_imm   ; $F4  PEA #
   5204 CFAD 12                                   .byte ops1 | am_adrx  ; $F5  SBC dp,X
   5205 CFAE 12                                   .byte ops1 | am_adrx  ; $F6  INC dp,X
   5206 CFAF 16                                   .byte ops1 | am_indly ; $F7  SBC [dp],Y
   5207 CFB0 00                                   .byte ops0 | am_nam   ; $F8  SED
   5208 CFB1 23                                   .byte ops2 | am_adry  ; $F9  SBC abs,Y
   5209 CFB2 00                                   .byte ops0 | am_nam   ; $FA  PLX
   5210 CFB3 00                                   .byte ops0 | am_nam   ; $FB  XCE
   5211 CFB4 27                                   .byte ops2 | am_indx  ; $FC  JSR (abs,X)
   5212 CFB5 22                                   .byte ops2 | am_adrx  ; $FD  SBC abs,X
   5213 CFB6 22                                   .byte ops2 | am_adrx  ; $FE  INC abs,X
   5214 CFB7 32                                   .byte ops3 | am_adrx  ; $FF  SBC absl,X
                                        ;
                                        ;
                                        ;	.X & .Y immediate mode opcodes...
                                        ;
   5219 CFB8 A0                         vopidx   .byte $a0             ;LDY #
   5220 CFB9 A2                                   .byte $a2             ;LDX #
   5221 CFBA C0                                   .byte $c0             ;CPY #
   5222 CFBB E0                                   .byte $e0             ;CPX #
   5449 = 00000004                      n_vopidx =*-vopidx             ;number of opcodes
                                        ;
                                        ;
                                        ;	addressing mode symbology lookup...
                                        ;
   5228 CFBC D4 CF                      ms_lutab .word ms_nam          ;(0000)  no symbol
   5229 CFBE DE CF                                .word ms_imm          ;(0001)  #
   5230 CFC0 D6 CF                                .word ms_addrx        ;(0010)  dp,X or abs,X
   5231 CFC2 DA CF                                .word ms_addry        ;(0011)  dp,Y or abs,Y
   5232 CFC4 E0 CF                                .word ms_ind          ;(0100)  (dp) or (abs)
   5233 CFC6 E3 CF                                .word ms_indl         ;(0101)  [dp] or [abs]
   5234 CFC8 E6 CF                                .word ms_indly        ;(0110)  [dp],Y
   5235 CFCA EB CF                                .word ms_indx         ;(0111)  (dp,X) or (abs,X)
   5236 CFCC F0 CF                                .word ms_indy         ;(1000)  (dp),Y
   5237 CFCE F8 CF                                .word ms_stk          ;(1001)  offset,S
   5238 CFD0 FC CF                                .word ms_stky         ;(1010) (offset,S),Y
   5239 CFD2 D4 CF                                .word ms_nam          ;(1011) sbnk,dbnk
                                        ;
                                        ;
                                        ;	addressing mode symbology strings...
                                        ;
   5244 CFD4 20 00                      ms_nam   .byte " ",0           ;no symbol
   5245 CFD6 20 2C 58 00                ms_addrx .byte " ,X",0         ;dp,X or addr,X
   5246 CFDA 20 2C 59 00                ms_addry .byte " ,Y",0         ;dp,Y or addr,Y
   5247 CFDE 23 00                      ms_imm   .byte "#",0           ;immediate
   5248 CFE0 28 29 00                   ms_ind   .byte "()",0          ;(dp) or (abs)
   5249 CFE3 5B 5D 00                   ms_indl  .byte "[]",0          ;[dp] or [abs]
   5250 CFE6 5B 5D 2C 59 00             ms_indly .byte "[],Y",0        ;[dp],Y
   5251 CFEB 28 2C 58 29 00             ms_indx  .byte "(,X)",0        ;(dp,X) or (abs,X)
   5252 CFF0 28 29 2C 59 00             ms_indy  .byte "(),Y",0        ;(dp),Y
   5253 CFF5 2C 24 00                   ms_move  .byte ",$",0          ;MVN/MVP sbnk,dbnk
   5254 CFF8 20 2C 53 00                ms_stk   .byte " ,S",0         ;offset,S
   5255 CFFC 28 2C 53 29 2C 59 00       ms_stky  .byte "(,S),Y",0      ;(offset,S),Y
                                        ;
                                        ;================================================================================
                                        ;
                                        ;CONSOLE DISPLAY CONTROL STRINGS
                                        ;
   5261 D003 1B 28                      dc_bf +         .byte a_esc,"("
   5261 D005 1B 47 34                 +            .byte a_esc,"G4"
                                                            ;enable reverse foreground
   5262 D008 00                                   .byte 0
                                        ;
   5264 D009 08                         dc_bs +         .byte a_bs
   5264 D00A 1B 57                    +   +         .byte a_esc,"W"
                                        
                                                            ;destructive backspace
   5266 D00C 00                                   .byte 0
                                        ;
   5268 D00D 1B 54                      dc_cl +         .byte a_esc,"T"
                                                            ;clear to end of line 
   5269 D00F 00                                   .byte 0
                                        ;
   5271 D010 1B 60 31                   dc_cn +         .byte a_esc,"`1"
                                                            ;cursor on
   5272 D013 00                                   .byte 0
                                        ;
   5274 D014 1B 60 30                   dc_co +         .byte a_esc,"`0"
                                                            ;cursor off
   5275 D017 00                                   .byte 0
                                        ;
   5277 D018 1B 28                      dc_er +         .byte a_esc,"("
   5277 D01A 1B 47 30                 +            .byte a_esc,"G0"
                                                            ;enable normal foreground
   5278 D01D 00                                   .byte 0
                                        ;
   5280 D01E 0D                         dc_lf ++         .byte a_cr
                                     +   
   5280 D01F 0A                       +            .byte a_lf
                                                            ;newline
   5281 D020 00                                   .byte 0
                                        ;
                                        ;================================================================================
                                        ;
                                        ;TEXT STRINGS
                                        ;
   5287 D021 07                         mm_brk +         .byte a_bel
                                        
   5288 D022 0D                       +   +         .byte a_cr
                                     +   
   5288 D023 0A                       +            .byte a_lf
                                        
   5289 D024 2A 2A 42 52 4B                       .byte "**BRK"
   5290 D029 0D                       +   +         .byte a_cr
                                     +   
   5290 D02A 0A                       +            .byte a_lf
                                        
   5291 D02B 00                                   .byte 0
                                        ;
   5293 D02C 0D                         mm_entry ++         .byte a_cr
                                     +   
   5293 D02D 0A                       +            .byte a_lf
                                        
   5294 D02E 0A 53 75 70 65 72 6D 6F              .byte a_lf,"Supermon 832 "
   5294 D036 6E 20 38 33 32 20         
   5295 D03C 31                       +            .byte "1"
   5295 D03D 2E                       +            .byte "."
   5295 D03E 30                       +            .byte "0"
   5295 D03F 2E                       +            .byte "."
   5295 D040 30                       +            .byte "0"
                                        
   5296 D041 20                                   .byte " "
   5297 D042 0D                       +   +         .byte a_cr
                                     +   
   5297 D043 0A                       +            .byte a_lf
                                        
   5298 D044 00                                   .byte 0
                                        ;
   5300 D045 20 2A 2A 45 52 52 20 20    mm_err   .byte " **ERR  ",0
   5300 D04D 00                        
                                        ;
   5302 D04E 0D                         mm_prmpt ++         .byte a_cr
                                     +   
   5302 D04F 0A                       +            .byte a_lf
                                        
   5303 D050 1B 28                    +            .byte a_esc,"("
   5303 D052 1B 47 30                 +            .byte a_esc,"G0"
                                        
   5304 D055 2E 00                                .byte ".",0
                                        ;
   5306 D057 0D                         mm_regs ++         .byte a_cr
                                     +   
   5306 D058 0A                       +            .byte a_lf
                                        
   5307 D059 20 20 20 20 20 20 20 20              .byte "                    31"
   5307 D061 20 20 20 20 20 20 20 20   
   5307 D069 20 20 20 20 33 31         
   5308 D06F 0D                       +   +         .byte a_cr
                                     +   
   5308 D070 0A                       +            .byte a_lf
                                        
   5309 D071 20 20 20 20 20 43 53 20              .byte "     CS    PB  PC   26NVmxDIZC    .A       .X       .Y       SP  "
   5309 D079 20 20 20 50 42 20 20 50   
   5309 D081 43 20 20 20 32 36 4E 56   
   5309 D089 6D 78 44 49 5A 43 20 20   
   5309 D091 20 20 2E 41 20 20 20 20   
   5309 D099 20 20 20 2E 58 20 20 20   
   5309 D0A1 20 20 20 20 2E 59 20 20   
   5309 D0A9 20 20 20 20 20 53 50 20   
   5309 D0B1 20                        
   5310 D0B2 0D                       +   +         .byte a_cr
                                     +   
   5310 D0B3 0A                       +            .byte a_lf
                                        
   5311 D0B4 3B 20 00                             .byte "; ",0
   5312 D0B7 0D                         mm_regs2 ++         .byte a_cr
                                     +   
   5312 D0B8 0A                       +            .byte a_lf
                                        
   5313 D0B9 20 20 20 20 20 44 53 20              .byte "     DS    DP  DB"
   5313 D0C1 20 20 20 44 50 20 20 44   
   5313 D0C9 42                        
   5314 D0CA 0D                       +   +         .byte a_cr
                                     +   
   5314 D0CB 0A                       +            .byte a_lf
                                        
   5315 D0CC 3B 20 00                             .byte "; ",0
                                        ;
   5317 D0CF 07                         mm_rts +         .byte a_bel
                                        
   5318 D0D0 0D                       +   +         .byte a_cr
                                     +   
   5318 D0D1 0A                       +            .byte a_lf
                                        
   5319 D0D2 2A 2A 52 54 53                       .byte "**RTS"
   5320 D0D7 0D                       +   +         .byte a_cr
                                     +   
   5320 D0D8 0A                       +            .byte a_lf
                                        
   5321 D0D9 00                                   .byte 0
                                        ;
                                        ;================================================================================
                                        ;
                                        ;VECTOR STORAGE
                                        ;
                                        ;
   5625 = 0000D0DA                      _txtend_ =*                     ;end of program text
                                        ;
                                        ;================================================================================
                                        	;.end
Finitron FT832 assembler   version 1.4   Sat Nov 21 03:52:07 2015     Page 1
FTBios816.asm


                                        .include "supermon832.asm"
Finitron FT832 assembler   version 1.4   Sat Nov 21 03:52:07 2015     Page 1
FAC1ToString.asm

                                        ; ============================================================================
                                        ; FAC1ToString.asm
                                        ;        __
                                        ;   \\__/ o\    (C) 2014  Robert Finch, Stratford
                                        ;    \  __ /    All rights reserved.
                                        ;     \/_//     robfinch<remove>@finitron.ca
                                        ;       ||
                                        ;  
                                        ;
                                        ; This source file is free software: you can redistribute it and/or modify 
                                        ; it under the terms of the GNU Lesser General Public License as published 
                                        ; by the Free Software Foundation, either version 3 of the License, or     
                                        ; (at your option) any later version.                                      
                                        ;                                                                          
                                        ; This source file is distributed in the hope that it will be useful,      
                                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                                        ; GNU General Public License for more details.                             
                                        ;                                                                          
                                        ; You should have received a copy of the GNU General Public License        
                                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                                        ;                                                                          
                                        ; ============================================================================
                                        ;
                                        ; This code is a heavily modified version of the floating point to string
                                        ; conversion routine which is a part of Lee Davison's EhBASIC.
                                        ;
   5657 = 0000000000000095                            Cvaral		= $95		; current var address low byte
   5658 = 00000096                      Cvarah		= Cvaral+1	; current var address high byte
   5659 = 00000000000000A8                            numexp		= $A8		; string to float number exponent count
   5660 = 00000000000000AA                            expcnt		= $AA		; string to float exponent count
   5661 = 00000000000000BA                            Sendl			= $BA	; BASIC pointer temp low byte
   5662 = 00000000000000BB                            Sendh			= $BB	; BASIC pointer temp low byte
                                        
   5664 = 00000000000003A0                            Decss		= $3A0		; number to decimal string start
   5665 = 000003A1                      Decssp1		= Decss+1	; number to decimal string start
   5666 = 0000000000000001                            FP_ADD		EQU		1
   5667 = 0000000000000002                            FP_SUB		EQU		2
   5668 = 0000000000000003                            FP_MUL		EQU		3
   5669 = 0000000000000004                            FP_DIV		EQU		4
   5670 = 0000000000000005                            FP_FIX2FLT	EQU		5
   5671 = 0000000000000006                            FP_FLT2FIX	EQU		6
   5672 = 0000000000000007                            FP_ABS		EQU		7
   5673 = 0000000000000010                            FP_NEG		EQU		16
   5674 = 0000000000000011                            FP_SWAP		EQU		17
   5675 = 0000000000000083                            FIXED_MUL	EQU		$83
   5676 = 0000000000000081                            FIXED_ADD	EQU		$81
   5677 = 0000000000000082                            FIXED_SUB	EQU		$82
                                        ;parameter FIXED_DIV = 8'h84;
                                        ;parameter FIXED_ABS = 8'h87;
                                        ;parameter FIXED_NEG = 8'h90;
   5681 = 0000000000FEA20E                            FP_CMDREG	EQU		$FEA20E
   5682 = 0000000000FEA20E                            FP_STATREG	EQU		$FEA20E
   5683 = 0000000000FEA200                            FAC1		EQU		$FEA200
   5684 = 0000000000FEA200                            FAC1_5		EQU		$FEA200
   5685 = 0000000000FEA202                            FAC1_4		EQU		$FEA202
   5686 = 0000000000FEA204                            FAC1_3		EQU		$FEA204
   5687 = 0000000000FEA206                            FAC1_2		EQU		$FEA206
   5688 = 0000000000FEA208                            FAC1_1		EQU		$FEA208
   5689 = 0000000000FEA208                            FAC1_msw	EQU		$FEA208
   5690 = 0000000000FEA20A                            FAC1_e		EQU		$FEA20A
   5691 = 0000000000FEA210                            FAC2		EQU		$FEA210
                                        
                                           	CPU		W65C816S
                                           	NDX		16
                                           	MEM		16
                                           	
                                           public FAC1ToString:
                                           
                                           ; The first chunk of code determines if the number is positive or negative
                                           ; and spits out the appropriate sign. Next it takes the absolute value of
                                           ; the accumulator so following code only has to deal with positive numbers.
                                           
   5406 00D0DA A0 00 00                     	LDY	#$00			; set index = 1
   5407 00D0DD AF 08 A2 FE                  	LDA	FAC1_msw		; test FAC1 sign (b15) (Can't use BIT)
   5408 00D0E1 10 0E                        	BPL	.0002		; branch if +ve
   5409 00D0E3 A9 2D 00                     	LDA	#'-'			; else character = "-"
   5410 00D0E6 99 A0 03                     	STA	Decss,Y		; save leading character (" " or "-")
   5411 00D0E9 A9 10 00                     	LDA	#FP_NEG		; make the FAC positive
   5412 00D0EC 20 13 D3                     	JSR	FPCommandWait
   5413 00D0EF 80 06                        	BRA	.0001
   5414 00D0F1                             .0002:
   5415 00D0F1 A9 20 00                     	LDA	#$20			; character = " " (assume +ve)
   5416 00D0F4 99 A0 03                     	STA	Decss,Y
   5417 00D0F7                             .0001:
   5418 00D0F7 84 BA                        	STY	Sendl			; save index
                                           
                                           ; This little bit of code check for a zero exponent which indicates a
                                           ; value of zero.
                                           
   5423 00D0F9 AF 0A A2 FE                  	LDA	FAC1_e		; get FAC1 exponent
   5424 00D0FD AA                           	TAX
   5425 00D0FE D0 06                        	BNE	LAB_2989		; branch if FAC1<>0
                                           					; exponent was $00 so FAC1 is 0
   5427 00D100 A9 30 00                     	LDA	#'0'			; set character = "0"
   5428 00D103 82 93 01                     	BRL	LAB_2A89		; save last character, [EOT] and exit
                                           
                                           ; This loop attempts to make small values more significant, so that there are
                                           ; fewer leading zeros in the value. (The exponent is decremented so that it
                                           ; corresponds). Because of the potential for extremely small values looping is
                                           ; limited. The problem is the 16 bit exponent can allow for much smaller
                                           ; values than an 8 bit exponent would and we don't want to loop for thousands
                                           ; of iterations in order to display a value that's almost zero.
                                           
                                           					; FAC1 is some non zero value
   5438 00D106                             LAB_2989
   5439 00D106 84 BA                        	STY	Sendl			; save off .Y
   5440 00D108 A0 67 06                     	LDY #1639			; max number of retries
   5441 00D10B A9 00 00                     	LDA	#$00			; clear (number exponent count)
   5442 00D10E 85 A8                        	STA numexp
   5443 00D110                             LOOP_MBMILLION:
   5444 00D110 E0 00 80                     	CPX	#$8000			; compare FAC1 exponent with $8000 (>1.00000)
   5445 00D113 B0 1A                        	BCS	LAB_299A		; branch if FAC1=>1
                                           					; FAC1<1
   5447 00D115 F4 54 D3                     	PEA	A_MILLION		; multiply FAC * 1,000,000
   5448 00D118 20 C8 D2                     	JSR	LOAD_FAC2		; 
   5449 00D11B 68                           	PLA					; get rid of parameter
   5450 00D11C 20 C2 D2                     	JSR	FMUL
   5451 00D11F A5 A8                        	LDA numexp
   5452 00D121 38                           	SEC
   5453 00D122 E9 06 00                     	SBC	#6				; set number exponent count (-6)
   5454 00D125 85 A8                        	STA numexp
   5455 00D127 AF 0A A2 FE                  	LDA FAC1_e
   5456 00D12B AA                           	TAX
   5457 00D12C 88                           	DEY
   5458 00D12D 10 E1                        	BPL	LOOP_MBMILLION
                                           
   5460 00D12F                             LAB_299A
   5461 00D12F A4 BA                        	LDY	Sendl		; get back .Y
                                           
                                           ; These two loops coerce the value of the FAC to be between 100,000 and
                                           ; 1,000,000. This gives a maximum of six digits before the decimal point
                                           ; in scientific notation.
                                           
                                           ; This loop divides by 10 until the value in the FAC is less than 1,000,000
                                           ;
   5469 00D131                             LOOP_DB10:
   5470 00D131 F4 6C D3                     	PEA	MAX_BEFORE_SCI	; set pointer low byte to 999999.4375 (max before sci note)
   5471 00D134 20 C8 D2                     	JSR	LOAD_FAC2		; compare FAC1 with (AY)
   5472 00D137 68                           	PLA					; get rid of parameter
   5473 00D138 AF 0E A2 FE                  	LDA FP_CMDREG
   5474 00D13C 89 08 00                     	BIT	#$08			; test equals bit
   5475 00D13F D0 28                        	BNE	LAB_29C3		; exit if FAC1 = (AY)
   5476 00D141 89 04 00                     	BIT	#$04			; test greater than bit
   5477 00D144 F0 07                        	BEQ	LOOP_MB10		; go do *10 if FAC1 < (AY)
                                           
   5479 00D146                             LAB_29B9
   5480 00D146 20 00 D3                     	JSR	DivideByTen		; divide by 10
   5481 00D149 E6 A8                        	INC	numexp			; increment number exponent count
   5482 00D14B 80 E4                        	BRA	LOOP_DB10		; go test again (branch always)
                                           
                                           ; This loop multiplies the value by 10 until it's greater than
                                           ; 100,000.
                                           					; FAC1 < (AY)
   5487 00D14D                             LOOP_MB10
   5488 00D14D F4 84 D3                     	PEA CONST_9375		; set pointer to 99999.9375
   5489 00D150 20 C8 D2                     	JSR	LOAD_FAC2		; compare FAC1 with (AY)
   5490 00D153 68                           	PLA					; get rid of parameter
   5491 00D154 AF 0E A2 FE                  	LDA FP_CMDREG
   5492 00D158 89 08 00                     	BIT #$08
   5493 00D15B D0 05                        	BNE	LAB_29B2		; branch if FAC1 = (AY) (allow decimal places)
   5494 00D15D 89 04 00                     	BIT #$04
   5495 00D160 D0 07                        	BNE	LAB_29C0		; branch if FAC1 > (AY) (no decimal places)
                                           					; FAC1 <= (AY)
   5497 00D162                             LAB_29B2
   5498 00D162 20 F3 D2                     	JSR	MultiplyByTen	; multiply by 10
   5499 00D165 C6 A8                        	DEC	numexp		; decrement number exponent count
   5500 00D167 80 E4                        	BRA	LOOP_MB10		; go test again (branch always)
                                           
                                           ; now we have just the digits to do
                                           
   5504 00D169                             LAB_29C0
                                           ;	JSR	AddPoint5		; add 0.5 to FAC1 (round FAC1)
   5506 00D169                             LAB_29C3
                                           ;	JSR	FloatToFixed	; convert FAC1 floating-to-fixed
   5508 00D169 A2 01 00                     	LDX	#$01			; set default digits before dp = 1
   5509 00D16C A5 A8                        	LDA	numexp		; get number exponent count
   5510 00D16E 18                           	CLC				; clear carry for add
   5511 00D16F 69 07 00                     	ADC	#$07			; up to 6 digits before point
   5512 00D172 30 0A                        	BMI	LAB_29D8		; if -ve then 1 digit before dp
                                           
   5514 00D174 C9 08 00                     	CMP	#$08			; A>=8 if n>=1E6
   5515 00D177 B0 06                        	BCS	LAB_29D9		; branch if >= $08
                                           
                                           					; carry is clear
   5518 00D179 AA                           	TAX				; copy to A
   5519 00D17A CA                           	DEX				; take 1 from digit count
   5520 00D17B A9 02 00                     	LDA	#$02			;.set exponent adjust
                                           
   5522 00D17E                             LAB_29D8
   5523 00D17E 38                           	SEC				; set carry for subtract
   5524 00D17F                             LAB_29D9
   5525 00D17F E9 02 00                     	SBC	#$02			; -2
   5526 00D182 85 AA                        	STA	expcnt		;.save exponent adjust
   5527 00D184 86 A8                        	STX	numexp		; save digits before dp count
   5528 00D186 8A                           	TXA				; copy to A
   5529 00D187 F0 02                        	BEQ	LAB_29E4		; branch if no digits before dp
                                           
   5531 00D189 10 15                        	BPL	LAB_29F7		; branch if digits before dp
                                           
   5533 00D18B                             LAB_29E4
   5534 00D18B A4 BA                        	LDY	Sendl			; get output string index
   5535 00D18D A9 2E 00                     	LDA	#'.'			; character "."
   5536 00D190 C8                           	INY				; increment index
   5537 00D191 99 A0 03                     	STA	Decss,Y		; save to output string
   5538 00D194 8A                           	TXA				;.
   5539 00D195 F0 07                        	BEQ	LAB_29F5		;.
                                           
   5541 00D197 A9 30 00                     	LDA	#'0'			; character "0"
   5542 00D19A C8                           	INY				; increment index
   5543 00D19B 99 A0 03                     	STA	Decss,Y		; save to output string
   5544 00D19E                             LAB_29F5
   5545 00D19E 84 BA                        	STY	Sendl			; save output string index
                                           
   5547 00D1A0                             LAB_29F7
   5548 00D1A0 A2 30 00                     	LDX	#'0'			; holds onto the digit value
                                           
                                           ; Now loop subtracting 100,000 as many times as we can. The value was coerced
                                           ; to be between 100,000 and 1,000,000. Count the number of times subtraction
                                           ; can be done successfully.
                                           ;
   5554 00D1A3                             LAB_29FB
   5555 00D1A3 F4 60 D3                     	PEA CONST_100000
   5556 00D1A6 20 C8 D2                     	JSR LOAD_FAC2	; load FAC2 with 100,000
   5557 00D1A9 68                           	PLA				; get rid of parameter
   5558 00D1AA AF 0E A2 FE                  	LDA FP_STATREG
   5559 00D1AE 89 04 00                     	BIT #$04		; Is FAC1 > 100,000 ?
   5560 00D1B1 F0 0F                        	BEQ	.0005		; branch if not
   5561 00D1B3 A9 11 00                     	LDA #FP_SWAP	; subtract is FAC2-FAC1!
   5562 00D1B6 20 13 D3                     	JSR FPCommandWait;
   5563 00D1B9 A9 02 00                     	LDA #FP_SUB		; subtract 100,000 from the mantissa.
   5564 00D1BC 20 13 D3                     	JSR FPCommandWait
   5565 00D1BF E8                           	INX				; increment the value of the digit
   5566 00D1C0 80 E1                        	BRA	LAB_29FB	; try again
   5567 00D1C2                             .0005:
   5568 00D1C2 8A                           	TXA
   5569 00D1C3 A4 BA                        	LDY	Sendl			; get output string index
   5570 00D1C5 C8                           	INY				; increment output string index
   5571 00D1C6 8A                           	TXA
   5572 00D1C7 99 A0 03                     	STA	Decss,Y		; save to output string
   5573 00D1CA C6 A8                        	DEC	numexp		; decrement # of characters before the dp
   5574 00D1CC D0 07                        	BNE	LAB_2A3B		; branch if still characters to do
                                           				; else output the point
   5576 00D1CE A9 2E 00                     	LDA	#'.'			; character "."
   5577 00D1D1 C8                           	INY				; increment output string index
   5578 00D1D2 99 A0 03                     	STA	Decss,Y		; save to output string
   5579 00D1D5                             LAB_2A3B
   5580 00D1D5 84 BA                        	STY	Sendl		; save output string index
                                           	; We subtracted until the value was < 100,000 so multiply the
                                           	; remainder upwards to get the next digit.
   5583 00D1D7 20 F3 D2                     	JSR	MultiplyByTen	; If not, multiply by 10
   5584 00D1DA C0 1B 00                     	CPY #27			; converted (+/- . incl)
   5585 00D1DD 90 C1                        	BCC	LAB_29F7
                                           					; now remove trailing zeroes
   5587 00D1DF                             .RemoveTrailingZeros
   5588 00D1DF B9 A0 03                     	LDA	Decss,Y		; get character from output string
   5589 00D1E2 29 FF 00                     	AND	#$FF		; mask to a byte
   5590 00D1E5 88                           	DEY				; decrement output string index
   5591 00D1E6 C9 30 00                     	CMP	#'0'			; compare with "0"
   5592 00D1E9 F0 F4                        	BEQ	.RemoveTrailingZeros	; loop until non "0" character found
                                           
   5594 00D1EB C9 2E 00                     	CMP	#'.'			; compare with "."
   5595 00D1EE F0 01                        	BEQ	LAB_2A58		; branch if was dp
                                           
                                           					; restore last character
   5598 00D1F0 C8                           	INY				; increment output string index
   5599 00D1F1                             LAB_2A58
   5600 00D1F1 A9 2B 00                     	LDA	#'+'			; character "+"
   5601 00D1F4 A6 AA                        	LDX	expcnt		; get exponent count
   5602 00D1F6 F0 FF A2 00                  	LBEQ	LAB_2A8C		; if zero go set null terminator and exit
                                           
                                           					; exponent isn't zero so write exponent
   5605 00D1FA 10 0A                        	BPL	LAB_2A68		; branch if exponent count +ve
                                           
   5607 00D1FC A9 00 00                     	LDA	#$00			; clear A
   5608 00D1FF 38                           	SEC				; set carry for subtract
   5609 00D200 E5 AA                        	SBC	expcnt		; subtract exponent count adjust (convert -ve to +ve)
   5610 00D202 AA                           	TAX				; copy exponent count to X
   5611 00D203 A9 2D 00                     	LDA	#'-'			; character "-"
                                           
                                           ; We must keep moving forwards through the string because the acc is storing
                                           ; two bytes.
                                           
   5616 00D206                             LAB_2A68
   5617 00D206 48                           	PHA
   5618 00D207 A9 45 00                     	LDA	#'E'			; character "E"
   5619 00D20A 99 A1 03                     	STA	Decss+1,Y		; save exponent sign to output string
   5620 00D20D 68                           	PLA
   5621 00D20E 99 A2 03                     	STA	Decss+2,Y		; save to output string
   5622 00D211 8A                           	TXA				; get exponent count back
                                           
                                           ; do highest exponent digit
   5625 00D212 64 BA                        	STZ Sendl
   5626 00D214 A2 2F 00                     	LDX	#'0'-1		; one less than "0" character
   5627 00D217 38                           	SEC				; set carry for subtract
   5628 00D218 E8                          .0001:				
   5629 00D219 E9 10 27                     	SBC	#10000
   5630 00D21C B0 FA                        	BCS .0001
   5631 00D21E 69 10 27                     	ADC #10000
   5632 00D221 E0 30 00                     	CPX #'0'
   5633 00D224 F0 09                        	BEQ .0005
   5634 00D226 E6 BA                        	INC Sendl
   5635 00D228 48                           	PHA
   5636 00D229 8A                           	TXA
   5637 00D22A 99 A3 03                     	STA Decss+3,Y
   5638 00D22D 68                           	PLA
   5639 00D22E C8                           	INY
                                           ; do the next exponent digit
   5641 00D22F                             .0005:
   5642 00D22F A2 2F 00                     	LDX #'0'-1
   5643 00D232 38                           	SEC
   5644 00D233                             .0002:
   5645 00D233 E8                           	INX
   5646 00D234 E9 E8 03                     	SBC #1000
   5647 00D237 B0 FA                        	BCS .0002
   5648 00D239 69 E8 03                     	ADC #1000
   5649 00D23C 46 BA                        	LSR Sendl
   5650 00D23E B0 05                        	BCS .00010
   5651 00D240 E0 30 00                     	CPX #'0'
   5652 00D243 F0 09                        	BEQ .0006
   5653 00D245                             .00010:
   5654 00D245 E6 BA                        	INC Sendl
   5655 00D247 48                           	PHA
   5656 00D248 8A                           	TXA
   5657 00D249 99 A3 03                     	STA Decss+3,Y
   5658 00D24C 68                           	PLA
   5659 00D24D C8                           	INY
                                           ; and the next
   5661 00D24E                             .0006:
   5662 00D24E A2 2F 00                     	LDX	#'0'-1
   5663 00D251 38                           	SEC
   5664 00D252                             .0003:
   5665 00D252 E8                           	INX
   5666 00D253 E9 64 00                     	SBC #100
   5667 00D256 B0 FA                        	BCS .0003
   5668 00D258 69 64 00                     	ADC #100
   5669 00D25B 46 BA                        	LSR Sendl
   5670 00D25D B0 05                        	BCS .00011
   5671 00D25F E0 30 00                     	CPX #'0'
   5672 00D262 F0 09                        	BEQ .0007
   5673 00D264                             .00011:
   5674 00D264 E6 BA                        	INC Sendl
   5675 00D266 48                           	PHA
   5676 00D267 8A                           	TXA
   5677 00D268 99 A3 03                     	STA Decss+3,Y
   5678 00D26B 68                           	PLA
   5679 00D26C C8                           	INY
                                           
   5681 00D26D                             .0007:
   5682 00D26D A2 2F 00                     	LDX #'0'-1
   5683 00D270 38                           	SEC
   5684 00D271                             .0004:
   5685 00D271 E8                           	INX
   5686 00D272 E9 0A 00                     	SBC #10
   5687 00D275 B0 FA                        	BCS .0004
   5688 00D277 69 0A 00                     	ADC #10
   5689 00D27A 46 BA                        	LSR Sendl
   5690 00D27C B0 05                        	BCS .00012
   5691 00D27E E0 30 00                     	CPX #'0'
   5692 00D281 F0 09                        	BEQ .0008
   5693 00D283                             .00012:
   5694 00D283 E6 BA                        	INC Sendl
   5695 00D285 48                           	PHA
   5696 00D286 8A                           	TXA
   5697 00D287 99 A3 03                     	STA Decss+3,Y
   5698 00D28A 68                           	PLA
   5699 00D28B C8                           	INY
                                           
   5701 00D28C                             .0008:
   5702 00D28C 69 30 00                     	ADC #'0'
   5703 00D28F 99 A3 03                     	STA Decss+3,Y
   5704 00D292 A9 00 00                     	LDA	#$00			; set null terminator
   5705 00D295 99 A4 03                     	STA	Decss+4,Y		; save to output string
   5706 00D298 60                           	RTS					; go set string pointer (AY) and exit (branch always)
                                           
   5708 00D299                             LAB_2A89
   5709 00D299 99 A0 03                     	STA	Decss,Y		; save last character to output string
                                           					; set null terminator and exit
   5711 00D29C                             LAB_2A8C
   5712 00D29C A9 00 00                     	LDA	#$00			; set null terminator
   5713 00D29F 99 A1 03                     	STA	Decss+1,Y		; save after last character
                                           
   5715 00D2A2                             LAB_2A91
                                           ;	LDA	#<Decssp1		; set result string low pointer
                                           ;	LDY	#>Decssp1		; set result string high pointer
   5718 00D2A2 60                           	RTS
                                           
   5720 00D2A3                             LAB_25FB:
   5721 00D2A3 A9 11 00                     	LDA		#FP_SWAP
   5722 00D2A6 20 13 D3                     	JSR		FPCommandWait
   5723 00D2A9 A0 00 00                     	LDY		#0
   5724 00D2AC BB                           	TYX
   5725 00D2AD                             .0002:
   5726 00D2AD B3 03                        	LDA		(3,S),Y
   5727 00D2AF 9F 00 A2 FE                  	STA		FAC1,X
   5728 00D2B3 C8                           	INY
   5729 00D2B4 C8                           	INY
   5730 00D2B5 E8                           	INX
   5731 00D2B6 E8                           	INX
   5732 00D2B7 E0 0C 00                     	CPX		#12
   5733 00D2BA D0 F1                        	BNE		.0002
   5734 00D2BC A9 05 00                     	LDA		#FP_FIX2FLT
   5735 00D2BF 20 13 D3                     	JSR		FPCommandWait
   5736 00D2C2                             FMUL:
   5737 00D2C2 A9 03 00                     	LDA		#FP_MUL
   5738 00D2C5 4C 13 D3                     	JMP		FPCommandWait
   5739 00D2C8                             	
   5740 00D2C8 DA                           	PHX
   5741 00D2C9 5A                           	PHY
   5742 00D2CA A0 00 00                     	LDY		#0
   5743 00D2CD BB                           	TYX
   5744 00D2CE                             .0002:
   5745 00D2CE B3 07                        	LDA		(7,s),Y
   5746 00D2D0 9F 10 A2 FE                  	STA		FAC2,X
   5747 00D2D4 C8                           	INY
   5748 00D2D5 C8                           	INY
   5749 00D2D6 E8                           	INX
   5750 00D2D7 E8                           	INX
   5751 00D2D8 E0 0C 00                     	CPX		#12
   5752 00D2DB D0 F1                        	BNE		.0002
   5753 00D2DD 7A                           	PLY
   5754 00D2DE FA                           	PLX
   5755 00D2DF 60                           	RTS
   5756 00D2E0                             	
   5757 00D2E0 A9 06 00                     	LDA		#FP_FLT2FIX
   5758 00D2E3 4C 13 D3                     	JMP		FPCommandWait
   5759 00D2E6                             	
   5760 00D2E6 F4 90 D3                     	PEA		CONST_POINT5
   5761 00D2E9 20 C8 D2                     	JSR		LOAD_FAC2
   5762 00D2EC 68                           	PLA
   5763 00D2ED A9 01 00                     	LDA		#FP_ADD
   5764 00D2F0 4C 13 D3                     	JMP		FPCommandWait
   5765 00D2F3                             	
   5766 00D2F3 F4 78 D3                     	PEA		TEN_AS_FLOAT
   5767 00D2F6 20 C8 D2                     	JSR		LOAD_FAC2
   5768 00D2F9 68                           	PLA
   5769 00D2FA A9 03 00                     	LDA		#FP_MUL
   5770 00D2FD 4C 13 D3                     	JMP		FPCommandWait
                                           	
   5772 00D300 F4 78 D3                     	PEA		TEN_AS_FLOAT
   5773 00D303 20 C8 D2                     	JSR		LOAD_FAC2
   5774 00D306 68                           	PLA
   5775 00D307 20 10 D3                     	JSR		SwapFACs
   5776 00D30A A9 04 00                     	LDA		#FP_DIV
   5777 00D30D 4C 13 D3                     	JMP		FPCommandWait
   5778 00D310                             	
   5779 00D310 A9 11 00                     	LDA		#FP_SWAP
                                           
                                           ; Issue a command to the FP unit and wait for it to complete
                                           ;
                                           public FPCommandWait:
   5784 00D313 48                           	PHA
   5785 00D314                             .0001:
   5786 00D314 AF 0E A2 FE                  	LDA		FP_STATREG	; get the status register
   5787 00D318 89 80 00                     	BIT		#$80		; check for busy bit
   5788 00D31B D0 F7                        	BNE		.0001		; if busy go back
   5789 00D31D 68                           	PLA					; to pop acc
   5790 00D31E 8F 0E A2 FE                  	STA		FP_CMDREG	; store the command
   5791 00D322 60                           	RTS
                                           
                                           ; Display the FAC1 as a hex number
                                           ;
                                           public DispFAC1:
   5796 00D323 AF 0A A2 FE                  	LDA FAC1_e
   5797 00D327 20 49 E8                     	JSR DispWord
   5798 00D32A AF 08 A2 FE                  	LDA	FAC1_1
   5799 00D32E 20 49 E8                     	JSR	DispWord
   5800 00D331 AF 06 A2 FE                  	LDA FAC1_2
   5801 00D335 20 49 E8                     	JSR	DispWord
   5802 00D338 AF 04 A2 FE                  	LDA FAC1_3
   5803 00D33C 20 49 E8                     	JSR DispWord
   5804 00D33F AF 02 A2 FE                  	LDA FAC1_4
   5805 00D343 20 49 E8                     	JSR DispWord
   5806 00D346 AF 00 A2 FE                  	LDA FAC1_5
   5807 00D34A 20 49 E8                     	JSR DispWord
   5808 00D34D A9 20 00                     	LDA #' '
   5809 00D350 20 B1 E7                     	JSR OutChar
   5810 00D353 60                           	RTS
                                           ;
                                           ; 1,000,000 as a floating point number
                                           ;
   5814 00D354                             A_MILLION:	; $F4240
   5815 00D354 00 00                        	dw		$0000
   5816 00D356 00 00                        	dw		$0000
   5817 00D358 00 00                        	dw		$0000
   5818 00D35A 00 00                        	dW		$0000
   5819 00D35C 12 7A                        	dw		$7A12
   5820 00D35E 13 80                        	dw		$8013
                                           
   5822 00D360                             CONST_100000:
                                           	;186A0
   5824 00D360 00 00                        	dw		$0000
   5825 00D362 00 00                        	dw		$0000
   5826 00D364 00 00                        	dw		$0000
   5827 00D366 00 00                        	dw		$0000
   5828 00D368 A8 61                        	dw		$61A8
   5829 00D36A 10 80                        	dw		$8010
                                           ; The constant 999999.4375 as hex
                                           ; 01.11_1010_0001_0001_1111_1011_1000_00000000000000000000000000
   5832 00D36C                             MAX_BEFORE_SCI:
   5833 00D36C 00 00                        	dw  $0000
   5834 00D36E 00 00                        	dw  $0000
   5835 00D370 00 00                        	dw	$0000
   5836 00D372 80 FB                        	dw	$FB80
   5837 00D374 11 7A                        	dw	$7A11
   5838 00D376 13 80                        	dw	$8013
                                           
   5840 00D378                             TEN_AS_FLOAT:
   5841 00D378 00 00                        	dw	$0000
   5842 00D37A 00 00                        	dw	$0000
   5843 00D37C 00 00                        	dw	$0000
   5844 00D37E 00 00                        	dw	$0000
   5845 00D380 00 50                        	dw	$5000
   5846 00D382 03 80                        	dw	$8003
                                           
                                           ; 99999.9375
                                           ; 01.10_0001_1010_0111_1111_1100_000000000000000000000000000000
                                           ;
   5851 00D384                             CONST_9375:
   5852 00D384 00 00                        	dw	$0000
   5853 00D386 00 00                        	dw	$0000
   5854 00D388 00 00                        	dw	$0000
   5855 00D38A 00 FC                        	dw	$FC00
   5856 00D38C A7 61                        	dw	$61A7
   5857 00D38E 10 80                        	dw	$8010
                                           
                                           ; 0.5
   5860 00D390                             CONST_POINT5:
   5861 00D390 00 00                        	dw	$0000
   5862 00D392 00 00                        	dw	$0000
   5863 00D394 00 00                        	dw	$0000
   5864 00D396 00 00                        	dw	$0000
   5865 00D398 00 40                        	dw	$4000
   5866 00D39A FF 7F                        	dw	$7FFF
                                           
                                           ; This table is used in converting numbers to ASCII.
                                           
   5870 00D39C                             LAB_2A9A
   6168 = 0000D39D                         LAB_2A9B = LAB_2A9A+1
   6169 = 0000D39E                         LAB_2A9C = LAB_2A9B+1
                                           ;	.word	$FFFF,$F21F,$494C,$589C,$0000
                                           ;	.word	$0000,$0163,$4578,$5D8A,$0000
                                           ;	.word	$FFFF,$FFDC,$790D,$903F,$0000
                                           ;	.word	$0000,$0003,$8D7E,$A4C6,$8000
                                           ;	.word	$FFFF,$FFFF,$A50C,$EF85,$C000
                                           ;	.word	$0000,$0000,$0918,$4E72,$A000
                                           ;	.word	$FFFF,$FFFF,$FF17,$2B5A,$F000
                                           ;	.word	$0000,$0000,$0017,$4876,$E800
                                           ;	.word	$FFFF,$FFFF,$FFFD,$ABF4,$1C00
                                           ;	.word	$0000,$0000,$0000,$3B9A,$CA00
                                           ;	.word	$FFFF,$FFFF,$FFFF,$FF67,$6980
                                           ;	.word	$0000,$0000,$0000,$05F5,$E100		; 100000000
                                           ;	.word	$0000,$0000,$0098,$9680		; 10000000
                                           ;	.word   $4240,$000F,$0000,$0000,$0000,$804E		; 1000000
   5887 00D39C A0 86 01 00 00 00 00 00      	.word	$86A0,$0001,$0000,$0000,$0000,$804E		; 100000
   5887 00D3A4 00 00 4E 80                
   5888 00D3A8 10 27 00 00 00 00 00 00      	.word	$2710,$0000,$0000,$0000,$0000,$804E		; 10000
   5888 00D3B0 00 00 4E 80                
   5889 00D3B4 E8 03 00 00 00 00 00 00      	.word	$03E8,$0000,$0000,$0000,$0000,$804E		; 1000
   5889 00D3BC 00 00 4E 80                
   5890 00D3C0 64 00 00 00 00 00 00 00      	.word	$0064,$0000,$0000,$0000,$0000,$804E		; 100
   5890 00D3C8 00 00 4E 80                
   5891 00D3CC                             FIXED10:
   5892 00D3CC 0A 00 00 00 00 00 00 00      	.word	$000A,$0000,$0000,$0000,$0000,$804E		; 10
   5892 00D3D4 00 00 4E 80                
   5893 00D3D8 01 00 00 00 00 00 00 00      	.word	$0001,$0000,$0000,$0000,$0000,$804E		; 1
   5893 00D3E0 00 00 4E 80                
                                           
                                           		 MEM	16
                                           		 NDX	16
Finitron FT832 assembler   version 1.4   Sat Nov 21 03:52:07 2015     Page 1
FTBios816.asm


                                           .include "FAC1ToString.asm"
Finitron FT832 assembler   version 1.4   Sat Nov 21 03:52:07 2015     Page 1
invaders.asm

                                           	CPU		FT832
                                           
   6203 = 0000000000FEA100                               PRNG		EQU		$FEA100
   6204 = 0000000000FEA108                               PRNG_NUM	EQU		$FEA108
   6205 = 0000000000FEA10E                               PRNG_ADV	EQU		$FEA10E
   6206 = 0000000000000001                               MAN_EXPLODING	EQU		1
                                           
                                           ; which invaders are still active (not destroyed)
                                           ; These var addresses are segment offsets into seg $7800
   6210 = 0000000000000000                               active				EQU		$00
   6211 = 000000000000005E                               left_right			EQU		$5E
   6212 = 0000000000000060                               rightmost_column	EQU		$60
   6213 = 0000000000000062                               leftmost_column		EQU		$62
   6214 = 0000000000000064                               bottom_row			EQU		$64
   6215 = 0000000000000066                               top_row				EQU		$66
   6216 = 000000000000006A                               inv_tick			EQU		$6A
   6217 = 000000000000006C                               inv_tick2			EQU		$6C
   6218 = 000000000000006E                               manX				EQU		$6E
   6219 = 0000000000000070                               manY				EQU		$70
   6220 = 0000000000000072                               manState			EQU		$72
   6221 = 0000000000000100                               InvadersX			EQU		$100
   6222 = 0000000000000200                               InvadersY			EQU		$200
   6223 = 0000000000000300                               min_right			EQU		$300
   6224 = 0000000000000310                               max_left			EQU		$310
   6225 = 0000000000000320                               bombX				EQU		$320
   6226 = 0000000000000330                               bombY				EQU		$330
   6227 = 0000000000000400                               inv_state			EQU		$400
                                           
                                           ; This var is shared, must be referenced ZS:
   6230 = 0000000000007868                               do_invaders			EQU		$7868
                                           
                                           	; minimum right +         .byte a_esc,"`0"
                                           -ordinate for each column of invaders
   5931 00D3E4                             st_min_right:
   5932 00D3E4 01 00                        	.word	1
   5933 00D3E6 05 00                        	.word	5
   5934 00D3E8 09 00                        	.word	9
   5935 00D3EA 0D 00                        	.word	13
   5936 00D3EC 11 00                        	.word	17
   5937 00D3EE 15 00                        	.word	21
   5938 00D3F0 19 00                        	.word	25
   5939 00D3F2 1D 00                        	.word	29
                                           
                                           	; maximum left +         .byte a_esc,"`0"
                                           -ordinate for each column of invaders
   5943 00D3F4 34 00                        	.word	52
   5944 00D3F6 38 00                        	.word	56
   5945 00D3F8 3C 00                        	.word	60
   5946 00D3FA 40 00                        	.word	64
   5947 00D3FC 44 00                        	.word	68
   5948 00D3FE 48 00                        	.word	72
   5949 00D400 4C 00                        	.word	76
   5950 00D402 50 00                        	.word	80
                                           
   5952 00D404 00 00                        	.word	0		; rightmost column
   5953 00D406 07 00                        	.word	7		; lefmost column
   5954 00D408 01 00                        	.word	1		; dx
                                           
                                           	MEM		16
                                           	NDX		16
                                           
                                           	code
                                           
   5961 00D40A                             InvBomb:
   5962 00D40A A2 00 00                     	LDX		#0
   5963 00D40D                             .0001:
   5964 00D40D B5 00                        	LDA		active,X
   5965 00D40F F0 27                        	BEQ		.0002
   5966 00D411 20 E9 D4                     	JSR		CanDropBomb
   5967 00D414 F0 22                        	BEQ		.0002
   5968 00D416 42 5B AF 08 A1 FE            	LDA		ZS:PRNG_NUM
   5969 00D41C 42 5B 8F 0E A1 FE            	STA		ZS:PRNG_ADV
   5970 00D422 29 63 00                     	AND		#$63
   5971 00D425 D0 11                        	BNE		.0002
   5972 00D427 20 40 D4                     	JSR		FindEmptyBomb
   5973 00D42A 30 13                        	BMI		.0003
   5974 00D42C BD 00 01                     	LDA		InvadersX,X
   5975 00D42F 99 20 03                     	STA		bombX,Y
   5976 00D432 BD 00 02                     	LDA		InvadersY,X
   5977 00D435 99 30 03                     	STA		bombY,Y
   5978 00D438                             .0002:
   5979 00D438 E8                           	INX
   5980 00D439 E8                           	INX
   5981 00D43A E0 50 00                     	CPX		#80
   5982 00D43D 30 CE                        	BMI		.0001
   5983 00D43F                             .0003:
   5984 00D43F 60                           	RTS
                                           
   5986 00D440                             FindEmptyBomb:
   5987 00D440 A0 00 00                     	LDY		#0
   5988 00D443                             .0001:
   5989 00D443 B9 20 03                     	LDA		bombX,Y
   5990 00D446 F0 0A                        	BEQ		.0002
   5991 00D448 C8                           	INY
   5992 00D449 C8                           	INY
   5993 00D44A C0 10 00                     	CPY		#16
   5994 00D44D 30 F4                        	BMI		.0001
   5995 00D44F A0 FF FF                     	LDY		#-1
   5996 00D452                             .0002:
   5997 00D452 60                           	RTS
                                           
   5999 00D453                             MoveBombs:
   6000 00D453 A2 00 00                     	LDX		#0
   6001 00D456                             .0002:
   6002 00D456 BD 20 03                     	LDA		bombX,X
   6003 00D459 F0 14                        	BEQ		.0001
   6004 00D45B BD 30 03                     	LDA		bombY,X
   6005 00D45E C9 1E 00                     	CMP		#30			; has the bomb fallen all the way to the ground ?
   6006 00D461 10 06                        	BPL		.0003		; if yes, reset bomb
   6007 00D463 1A                           	INA
   6008 00D464 9D 30 03                     	STA		bombY,X
   6009 00D467 80 06                        	BRA		.0001
   6010 00D469                             .0003:
   6011 00D469 9E 20 03                     	STZ		bombX,X
   6012 00D46C 9E 30 03                     	STZ		bombY,X
   6013 00D46F                             .0001:
   6014 00D46F E8                           	INX
   6015 00D470 E8                           	INX
   6016 00D471 E0 10 00                     	CPX		#16
   6017 00D474 30 E0                        	BMI		.0002
   6018 00D476 60                           	RTS
                                           
   6020 00D477                             GetBombOffset:
   6021 00D477 B9 30 03                     	LDA		bombY,Y
   6022 00D47A 0A                           	ASL
   6023 00D47B AA                           	TAX
   6024 00D47C 42 5B BD C3 EF               	LDA		ZS:LineTbl,X
   6025 00D481 18                           	CLC
   6026 00D482 79 20 03                     	ADC		bombX,Y
   6027 00D485 79 20 03                     	ADC		bombX,Y
   6028 00D488 AA                           	TAX
   6029 00D489 60                           	RTS
                                           
   6031 00D48A                             RenderBombs:
   6032 00D48A A0 00 00                     	LDY		#0
   6033 00D48D                             .0001:
   6034 00D48D B9 30 03                     	LDA		bombY,Y
   6035 00D490 F0 0C                        	BEQ		.0002
   6036 00D492 20 77 D4                     	JSR		GetBombOffset
   6037 00D495 A9 24 00                     	LDA		#'$'
   6038 00D498 42 5B 9F 00 00 FD            	STA		ZS:VIDBUF,X
   6039 00D49E                             .0002:
   6040 00D49E C8                           	INY
   6041 00D49F C8                           	INY
   6042 00D4A0 C0 10 00                     	CPY		#16
   6043 00D4A3 30 E8                        	BMI		.0001
   6044 00D4A5 60                           	RTS
                                           
   6046 00D4A6                             TestBombsIntercept:
   6047 00D4A6 A0 00 00                     	LDY		#0
   6048 00D4A9                             .0001:
   6049 00D4A9 20 B4 D4                     	JSR		TestBombIntercept
   6050 00D4AC C8                           	INY
   6051 00D4AD C8                           	INY
   6052 00D4AE C0 10 00                     	CPY		#16
   6053 00D4B1 30 F6                        	BMI		.0001
   6054 00D4B3 60                           	RTS
                                           
   6056 00D4B4                             TestBombIntercept:
   6057 00D4B4 20 77 D4                     	JSR		GetBombOffset
   6058 00D4B7 42 5B BF 00 00 FD            	LDA		ZS:VIDBUF,X
   6059 00D4BD C9 20 00                     	CMP		#' '
   6060 00D4C0 F0 1D                        	BEQ		.0001
   6061 00D4C2 B9 30 03                     	LDA		bombY,Y
   6062 00D4C5 C9 1D 00                     	CMP		#29
   6063 00D4C8 D0 16                        	BNE		.0002
   6064 00D4CA B9 20 03                     	LDA		bombX,Y
   6065 00D4CD D9 6E 00                     	CMP		manX,Y
   6066 00D4D0 D0 05                        	BNE		.0003
   6067 00D4D2 A9 01 00                     	LDA		#MAN_EXPLODING
   6068 00D4D5 85 72                        	STA		manState
   6069 00D4D7                             .0003:
   6070 00D4D7 BB                           	TYX
   6071 00D4D8 9E 30 03                     	STZ		bombY,X
   6072 00D4DB 9E 20 03                     	STZ		bombX,X
   6073 00D4DE 60                           	RTS
   6074 00D4DF                             .0001:
   6075 00D4DF 60                           	RTS
   6076 00D4E0                             .0002:
   6077 00D4E0 A9 20 00                     	LDA		#' '
   6078 00D4E3 9F 00 00 FD                  	STA		VIDBUF,X
   6079 00D4E7 80 EE                        	BRA		.0003
                                           
                                           ; An invader can drop a bomb only if there are no invaders underneath it.
                                           
   6083 00D4E9                             CanDropBomb:
   6084 00D4E9 E0 0F 00                     	CPX		#15
   6085 00D4EC 42 90 0C                     	BGE		.0001
   6086 00D4EF B5 10                        	LDA		active+16,X
   6087 00D4F1 15 20                        	ORA		active+32,X
   6088 00D4F3 15 30                        	ORA		active+48,X
   6089 00D4F5 15 40                        	ORA		active+64,X
   6090 00D4F7 49 01 00                     	EOR		#1
   6091 00D4FA 60                           	RTS
   6092 00D4FB                             .0001:
   6093 00D4FB E0 1F 00                     	CPX		#31
   6094 00D4FE 42 90 0A                     	BGE		.0002
   6095 00D501 B5 10                        	LDA		active+16,X
   6096 00D503 15 20                        	ORA		active+32,X
   6097 00D505 15 30                        	ORA		active+48,X
   6098 00D507 49 01 00                     	EOR		#1
   6099 00D50A 60                           	RTS
   6100 00D50B                             .0002:
   6101 00D50B E0 2F 00                     	CPX		#47
   6102 00D50E 42 90 08                     	BGE		.0003
   6103 00D511 B5 10                        	LDA		active+16,X
   6104 00D513 15 20                        	ORA		active+32,X
   6105 00D515 49 01 00                     	EOR		#1
   6106 00D518 60                           	RTS
   6107 00D519                             .0003:
   6108 00D519 E0 3F 00                     	CPX		#63
   6109 00D51C 42 90 06                     	BGE		.0004
   6110 00D51F B5 10                        	LDA		active+16,X
   6111 00D521 49 01 00                     	EOR		#1
   6112 00D524 60                           	RTS
   6113 00D525                             .0004:
   6114 00D525 A9 01 00                     	LDA		#1
   6115 00D528 60                           	RTS
                                           
                                           
                                           ; Test if it's possible to move to the left anymore.
                                           ;
   6120 00D529                             CanMoveLeft:
   6121 00D529 A5 62                        	LDA		leftmost_column
   6122 00D52B 0A                           	ASL
   6123 00D52C AA                           	TAX
   6124 00D52D BD 10 03                     	LDA		max_left,X
   6125 00D530 DD 00 01                     	CMP		InvadersX,X
   6126 00D533 30 04                        	BMI		.0001
   6127 00D535 A9 00 00                     	LDA		#0
   6128 00D538 60                           	RTS
   6129 00D539                             .0001:
   6130 00D539 A9 01 00                     	LDA		#1
   6131 00D53C 60                           	RTS
                                           
                                           ; Test if it's possible to move to the right anymore.
                                           ;
   6135 00D53D                             CanMoveRight:
   6136 00D53D A5 60                        	LDA		rightmost_column
   6137 00D53F 0A                           	ASL
   6138 00D540 AA                           	TAX
   6139 00D541 BD 00 03                     	LDA		min_right,X
   6140 00D544 DD 00 01                     	CMP		InvadersX,X
   6141 00D547 10 04                        	BPL		.0001
   6142 00D549 A9 00 00                     	LDA		#0
   6143 00D54C 60                           	RTS
   6144 00D54D                             .0001:
   6145 00D54D A9 01 00                     	LDA		#1
   6146 00D550 60                           	RTS
                                           
                                           ; Test if it's possible to move down anymore
                                           ;
   6150 00D551                             CanMoveDown:
   6151 00D551 A5 64                        	LDA		bottom_row
   6152 00D553 0A                           	ASL
   6153 00D554 0A                           	ASL
   6154 00D555 0A                           	ASL
   6155 00D556 0A                           	ASL
   6156 00D557 AA                           	TAX
   6157 00D558 BD 00 02                     	LDA		InvadersY,X
   6158 00D55B C9 1E 00                     	CMP		#30
   6159 00D55E 30 04                        	BMI		.0001
   6160 00D560 A9 00 00                     	LDA		#0
   6161 00D563 60                           	RTS
   6162 00D564                             .0001:
   6163 00D564 A9 01 00                     	LDA		#1
   6164 00D567 60                           	RTS
                                           
                                           ; Move all the invaders to the left
                                           ; Means incrementing the X co-ordinate
                                           ;
   6169 00D568                             MoveLeft:
   6170 00D568 A2 00 00                     	LDX		#00
   6171 00D56B                             .0002:
   6172 00D56B FE 00 01                     	INC		InvadersX,X
   6173 00D56E E8                           	INX
   6174 00D56F E8                           	INX
   6175 00D570 E0 50 00                     	CPX		#80
   6176 00D573 D0 F6                        	BNE		.0002
   6177 00D575 60                           	RTS
                                           
                                           ; Move all the invaders to the right.
                                           ; means decrementing the X co-ordinate
                                           ;
   6182 00D576                             MoveRight:
   6183 00D576 A2 00 00                     	LDX		#0
   6184 00D579                             .0002:
   6185 00D579 DE 00 01                     	DEC		InvadersX,X
   6186 00D57C E8                           	INX
   6187 00D57D E8                           	INX
   6188 00D57E E0 50 00                     	CPX		#80
   6189 00D581 D0 F6                        	BNE		.0002
   6190 00D583 60                           	RTS
                                           
                                           ; Move all the invaders down a row.
                                           ; Means incrementing the Y co-ordinate
                                           ;
   6195 00D584                             MoveDown:
   6196 00D584 A2 00 00                     	LDX		#00
   6197 00D587                             .0002:
   6198 00D587 FE 00 02                     	INC		InvadersY,X
   6199 00D58A E8                           	INX
   6200 00D58B E8                           	INX
   6201 00D58C E0 50 00                     	CPX		#80
   6202 00D58F D0 F6                        	BNE		.0002
   6203 00D591 60                           	RTS
                                           
                                           ; Move the invaders
                                           ; Retuns
                                           ; .A = 1 if it was possible to do a move, 0 otherwise
                                           ;
   6209 00D592                             Move:
   6210 00D592 24 5E                        	BIT		left_right
   6211 00D594 30 0A                        	BMI		.0002
   6212 00D596 20 29 D5                     	JSR		CanMoveLeft
   6213 00D599 F0 0F                        	BEQ		.0001
   6214 00D59B 20 68 D5                     	JSR		MoveLeft
   6215 00D59E 80 19                        	BRA		.0003
   6216 00D5A0                             .0002:
   6217 00D5A0 20 3D D5                     	JSR		CanMoveRight
   6218 00D5A3 F0 05                        	BEQ		.0001
   6219 00D5A5 20 76 D5                     	JSR		MoveRight
   6220 00D5A8 80 0F                        	BRA		.0003
   6221 00D5AA                             .0001:
   6222 00D5AA 20 51 D5                     	JSR		CanMoveDown
   6223 00D5AD F0 0E                        	BEQ		.0004
   6224 00D5AF A5 5E                        	LDA		left_right
   6225 00D5B1 49 FF FF                     	EOR		#$FFFF
   6226 00D5B4 85 5E                        	STA		left_right
   6227 00D5B6 20 84 D5                     	JSR		MoveDown
   6228 00D5B9                             .0003:
   6229 00D5B9 A9 01 00                     	LDA		#1
   6230 00D5BC 60                           	RTS
   6231 00D5BD                             .0004:
   6232 00D5BD A9 00 00                     	LDA		#0
   6233 00D5C0 60                           	RTS
                                           
   6235 00D5C1                             Initialize:
   6236 00D5C1 64 60                        	STZ		rightmost_column
   6237 00D5C3 A9 07 00                     	LDA		#7
   6238 00D5C6 85 62                        	STA		leftmost_column
   6239 00D5C8 64 66                        	STZ		top_row
   6240 00D5CA A9 04 00                     	LDA		#4
   6241 00D5CD 85 64                        	STA		bottom_row
   6242 00D5CF 64 5E                        	STZ		left_right
   6243 00D5D1 20 19 D6                     	JSR		ActivateAllInvaders
   6244 00D5D4 A2 00 00                     	LDX		#0
   6245 00D5D7                             .0001:
   6246 00D5D7 42 1B BD 2C DA               	LDA		CS:StartX,X
   6247 00D5DC 9D 00 01                     	STA		InvadersX,X
   6248 00D5DF 42 1B BD DC D9               	LDA		CS:StartY,X
   6249 00D5E4 9D 00 02                     	STA		InvadersY,X
   6250 00D5E7 E8                           	INX
   6251 00D5E8 E8                           	INX
   6252 00D5E9 E0 50 00                     	CPX		#80
   6253 00D5EC 30 E9                        	BMI		.0001
   6254 00D5EE A2 00 00                     	LDX		#0
   6255 00D5F1                             .0002:
   6256 00D5F1 42 1B BD E4 D3               	LDA		CS:st_min_right,X
   6257 00D5F6 9D 00 03                     	STA		min_right,X
   6258 00D5F9 E8                           	INX
   6259 00D5FA E8                           	INX
   6260 00D5FB E0 20 00                     	CPX		#32
   6261 00D5FE 30 F1                        	BMI		.0002
                                           	; Initialize Bombs
   6263 00D600 A2 00 00                     	LDX		#0
   6264 00D603                             .0003:
   6265 00D603 9E 20 03                     	STZ		bombX,X
   6266 00D606 9E 30 03                     	STZ		bombY,X
   6267 00D609 E8                           	INX
   6268 00D60A E8                           	INX
   6269 00D60B E0 10 00                     	CPX		#16
   6270 00D60E 30 F3                        	BMI		.0003
   6271 00D610 A9 FE FF                     	LDA		#$FFFE
   6272 00D613 42 5B 8D 68 78               	STA		ZS:do_invaders
   6273 00D618 60                           	RTS
                                           
   6275 00D619                             ActivateAllInvaders:
   6276 00D619 A2 00 00                     	LDX		#0
   6277 00D61C A9 01 00                     	LDA		#1
   6278 00D61F                             .0001:
   6279 00D61F 95 00                        	STA		active,X
   6280 00D621 E8                           	INX
   6281 00D622 E8                           	INX
   6282 00D623 E0 50 00                     	CPX		#80
   6283 00D626 D0 F7                        	BNE		.0001
   6284 00D628 60                           	RTS
                                           
   6286 00D629                             IsAllDestroyed:
   6287 00D629 20 B1 D6                     	JSR		IsRightmostColumnDestroyed
   6288 00D62C F0 2C                        	BEQ		.0001
   6289 00D62E E6 60                        	INC		rightmost_column
   6290 00D630 AD 0C 03                     	LDA		min_right+12
   6291 00D633 8D 0E 03                     	STA		min_right+14
   6292 00D636 AD 0A 03                     	LDA		min_right+10
   6293 00D639 8D 0C 03                     	STA		min_right+12
   6294 00D63C AD 08 03                     	LDA		min_right+8
   6295 00D63F 8D 0A 03                     	STA		min_right+10
   6296 00D642 AD 06 03                     	LDA		min_right+6
   6297 00D645 8D 08 03                     	STA		min_right+8
   6298 00D648 AD 04 03                     	LDA		min_right+4
   6299 00D64B 8D 06 03                     	STA		min_right+6
   6300 00D64E AD 02 03                     	LDA		min_right+2
   6301 00D651 8D 04 03                     	STA		min_right+4
   6302 00D654 AD 00 03                     	LDA		min_right
   6303 00D657 8D 02 03                     	STA		min_right+2
   6304 00D65A                             .0001:
   6305 00D65A 20 AD D6                     	JSR		IsLeftmostColumnDestroyed
   6306 00D65D F0 2C                        	BEQ		.0002
   6307 00D65F C6 62                        	DEC		leftmost_column
   6308 00D661 AD 12 03                     	LDA		max_left+2
   6309 00D664 8D 10 03                     	STA		max_left
   6310 00D667 AD 14 03                     	LDA		max_left+4
   6311 00D66A 8D 12 03                     	STA		max_left+2
   6312 00D66D AD 16 03                     	LDA		max_left+6
   6313 00D670 8D 14 03                     	STA		max_left+4
   6314 00D673 AD 18 03                     	LDA		max_left+8
   6315 00D676 8D 16 03                     	STA		max_left+6
   6316 00D679 AD 1A 03                     	LDA		max_left+10
   6317 00D67C 8D 18 03                     	STA		max_left+8
   6318 00D67F AD 1C 03                     	LDA		max_left+12
   6319 00D682 8D 1A 03                     	STA		max_left+10
   6320 00D685 AD 1E 03                     	LDA		max_left+14
   6321 00D688 8D 1C 03                     	STA		max_left+12
   6322 00D68B                             .0002:
   6323 00D68B A5 62                        	LDA		leftmost_column
   6324 00D68D C5 60                        	CMP		rightmost_column
   6325 00D68F 30 18                        	BMI		.allDestroyed
   6326 00D691 20 CD D6                     	JSR		IsBottomRowDestroyed
   6327 00D694 F0 02                        	BEQ		.0003
   6328 00D696 C6 64                        	DEC		bottom_row
   6329 00D698                             .0003:
   6330 00D698 20 C9 D6                     	JSR		IsTopRowDestroyed
   6331 00D69B F0 02                        	BEQ		.0004
   6332 00D69D E6 66                        	INC		top_row
   6333 00D69F                             .0004:
   6334 00D69F A5 64                        	LDA		bottom_row
   6335 00D6A1 C5 66                        	CMP		top_row
   6336 00D6A3 30 04                        	BMI		.allDestroyed
   6337 00D6A5 A9 00 00                     	LDA		#0
   6338 00D6A8 60                           	RTS
   6339 00D6A9                             .allDestroyed:
   6340 00D6A9 A9 01 00                     	LDA		#1
   6341 00D6AC 60                           	RTS
                                           
                                           
   6344 00D6AD                             IsLeftmostColumnDestroyed:
   6345 00D6AD A5 62                        	LDA		leftmost_column
   6346 00D6AF 80 02                        	BRA		IsColumnDestroyed
   6347 00D6B1                             IsRightmostColumnDestroyed:
   6348 00D6B1 A5 60                        	LDA		rightmost_column
   6349 00D6B3                             IsColumnDestroyed:
   6350 00D6B3 0A                           	ASL
   6351 00D6B4 AA                           	TAX
   6352 00D6B5 B5 00                        	LDA		active,X
   6353 00D6B7 15 10                        	ORA		active+16,X
   6354 00D6B9 15 20                        	ORA		active+32,X
   6355 00D6BB 15 30                        	ORA		active+48,X
   6356 00D6BD 15 40                        	ORA		active+64,X
   6357 00D6BF 15 50                        	ORA		active+80,X
   6358 00D6C1 15 60                        	ORA		active+96,X
   6359 00D6C3 15 70                        	ORA		active+112,X
   6360 00D6C5 49 01 00                     	EOR		#1
   6361 00D6C8 60                           	RTS
                                           
   6363 00D6C9                             IsTopRowDestroyed:
   6364 00D6C9 A5 66                        	LDA		top_row
   6365 00D6CB 80 02                        	BRA		IsRowDestroyed
   6366 00D6CD                             IsBottomRowDestroyed:
   6367 00D6CD A5 64                        	LDA		bottom_row
   6368 00D6CF                             IsRowDestroyed:
   6369 00D6CF 0A                           	ASL
   6370 00D6D0 0A                           	ASL
   6371 00D6D1 0A                           	ASL
   6372 00D6D2 0A                           	ASL
   6373 00D6D3 B5 00                        	LDA		active,X
   6374 00D6D5 15 02                        	ORA		active+2,X
   6375 00D6D7 15 04                        	ORA		active+4,X
   6376 00D6D9 15 06                        	ORA		active+6,X
   6377 00D6DB 15 08                        	ORA		active+8,X
   6378 00D6DD 15 0A                        	ORA		active+10,X
   6379 00D6DF 15 0C                        	ORA		active+12,X
   6380 00D6E1 15 0E                        	ORA		active+14,X
   6381 00D6E3 49 01 00                     	EOR		#1
   6382 00D6E6 60                           	RTS
                                           
                                           ; TickCount counts 1/100 of a second. We want to animate the graphics at a much
                                           ; slower rate, so we use bit 6 of the tick count to indicate when to animate.
                                           ;
   6387 00D6E7                             ShiftTick:
   6388 00D6E7 42 5B A5 04                  	LDA		ZS:TickCount
   6389 00D6EB 4A                           	LSR
   6390 00D6EC 4A                           	LSR
   6391 00D6ED 4A                           	LSR
   6392 00D6EE 4A                           	LSR
   6393 00D6EF 4A                           	LSR
   6394 00D6F0 4A                           	LSR
   6395 00D6F1 60                           	RTS
                                           
   6397 00D6F2                             RenderInvaders:
                                           	; First, clear the screen
   6399 00D6F2 A2 00 00                     	LDX		#0
   6400 00D6F5 A9 20 00                     	LDA		#' '
   6401 00D6F8 09 00 BF                     	ORA		#$BF00
   6402 00D6FB                             .0003:
   6403 00D6FB 42 5B 9F 00 00 FD            	STA		ZS:VIDBUF,X
   6404 00D701 E8                           	INX
   6405 00D702 E8                           	INX
   6406 00D703 E0 58 14                     	CPX		#84*31*2
   6407 00D706 30 F3                        	BMI		.0003
   6408 00D708 A2 00 00                     	LDX		#0
   6409 00D70B                             .0002:
   6410 00D70B C2 30                        	REP		#$30
                                           	MEM		16
                                           	NDX		16
   6413 00D70D B5 00                        	LDA		active,X
   6414 00D70F F0 FF BD 01                  	LBEQ	.0001
   6415 00D713 BD 00 04                     	LDA		inv_state,X
   6416 00D716 BD 00 02                     	LDA		InvadersY,X
   6417 00D719 0A                           	ASL
   6418 00D71A A8                           	TAY
   6419 00D71B 42 5B B9 C3 EF               	LDA		ZS:LineTbl,Y
   6420 00D720 18                           	CLC
   6421 00D721 7D 00 01                     	ADC		InvadersX,X
   6422 00D724 18                           	CLC
   6423 00D725 7D 00 01                     	ADC		InvadersX,X
   6424 00D728 A8                           	TAY
   6425 00D729 E2 20                        	SEP		#$20			; eight bit acc
                                           	MEM		8
   6427 00D72B 42 1B BD 7C DA               	LDA		CS:InvaderType,X
   6428 00D730 C9 01                        	CMP		#1
   6429 00D732 D0 46                        	BNE		.0004
   6430 00D734 A9 E9                        	LDA		#233
   6431 00D736 42 5B 42 99 00 00 FD 00      	STA		ZS:VIDBUF,Y
                                         
   6432 00D73E A9 F2                        	LDA		#242
   6433 00D740 42 5B 42 99 02 00 FD 00      	STA		ZS:VIDBUF+2,Y
                                         
   6434 00D748 A9 DF                        	LDA		#223
   6435 00D74A 42 5B 42 99 04 00 FD 00      	STA		ZS:VIDBUF+4,Y
                                         
   6436 00D752 20 E7 D6                     	JSR		ShiftTick
   6437 00D755 90 04                        	BCC		.0005
   6438 00D757 A9 58                        	LDA		#'X'
   6439 00D759 80 02                        	BRA		.0006
   6440 00D75B                             .0005:
   6441 00D75B A9 56                        	LDA		#'V'
   6442 00D75D                             .0006:
   6443 00D75D 42 5B 42 99 54 00 FD 00      	STA		ZS:VIDBUF+84,Y
                                         
   6444 00D765 42 5B 42 99 58 00 FD 00      	STA		ZS:VIDBUF+88,Y
                                         
   6445 00D76D A9 20                        	LDA		#' '
   6446 00D76F 42 5B 42 99 56 00 FD 00      	STA		ZS:VIDBUF+86,Y
                                         
   6447 00D777 82 E4 00                     	BRL		.0007
   6448 00D77A                             .0004:
   6449 00D77A C9 02                        	CMP		#2
   6450 00D77C D0 FF 83 00                  	LBNE	.0008
   6451 00D780 20 E7 D6                     	JSR		ShiftTick
   6452 00D783 90 3F                        	BCC		.0009
   6453 00D785 A9 FC                        	LDA		#252
   6454 00D787 42 5B 42 99 00 00 FD 00      	STA		ZS:VIDBUF,Y
                                         
   6455 00D78F A9 99                        	LDA		#153
   6456 00D791 42 5B 42 99 02 00 FD 00      	STA		ZS:VIDBUF+2,Y
                                         
   6457 00D799 A9 FE                        	LDA		#254
   6458 00D79B 42 5B 42 99 04 00 FD 00      	STA		ZS:VIDBUF+4,Y
                                         
   6459 00D7A3 A9 E2                        	LDA		#226
   6460 00D7A5 42 5B 42 99 54 00 FD 00      	STA		ZS:VIDBUF+84,Y
                                         
   6461 00D7AD A9 62                        	LDA		#98
   6462 00D7AF 42 5B 42 99 56 00 FD 00      	STA		ZS:VIDBUF+86,Y
                                         
   6463 00D7B7 A9 E2                        	LDA		#226
   6464 00D7B9 42 5B 42 99 58 00 FD 00      	STA		ZS:VIDBUF+88,Y
                                         
   6465 00D7C1 82 9A 00                     	BRL		.0007
   6466 00D7C4                             .0009:
   6467 00D7C4 A9 62                        	LDA		#98
   6468 00D7C6 42 5B 42 99 00 00 FD 00      	STA		ZS:VIDBUF,Y
                                         
   6469 00D7CE A9 99                        	LDA		#153
   6470 00D7D0 42 5B 42 99 02 00 FD 00      	STA		ZS:VIDBUF+2,Y
                                         
   6471 00D7D8 A9 62                        	LDA		#98
   6472 00D7DA 42 5B 42 99 04 00 FD 00      	STA		ZS:VIDBUF+4,Y
                                         
   6473 00D7E2 A9 EC                        	LDA		#236
   6474 00D7E4 42 5B 42 99 54 00 FD 00      	STA		ZS:VIDBUF+84,Y
                                         
   6475 00D7EC A9 62                        	LDA		#98
   6476 00D7EE 42 5B 42 99 56 00 FD 00      	STA		ZS:VIDBUF+86,Y
                                         
   6477 00D7F6 A9 FB                        	LDA		#251
   6478 00D7F8 42 5B 42 99 58 00 FD 00      	STA		ZS:VIDBUF+88,Y
                                         
   6479 00D800 82 5B 00                     	BRL		.0007
   6480 00D803                             .0008:
   6481 00D803 A9 FF                        	LDA		#255
   6482 00D805 42 5B 42 99 00 00 FD 00      	STA		ZS:VIDBUF,Y
                                         
   6483 00D80D A9 F8                        	LDA		#248
   6484 00D80F 42 5B 42 99 02 00 FD 00      	STA		ZS:VIDBUF+2,Y
                                         
   6485 00D817 A9 7F                        	LDA		#127
   6486 00D819 42 5B 99 12 D8               	STA		ZS:VIDBUf+4,Y
   6487 00D81E 20 E7 D6                     	JSR		ShiftTick
   6488 00D821 90 20                        	BCC		.0010
   6489 00D823 A9 FF                        	LDA		#255
   6490 00D825 42 5B 42 99 54 00 FD 00      	STA		ZS:VIDBUF+84,Y
                                         
   6491 00D82D A9 F9                        	LDA		#249
   6492 00D82F 42 5B 42 99 56 00 FD 00      	STA		ZS:VIDBUF+86,Y
                                         
   6493 00D837 A9 7F                        	LDA		#127
   6494 00D839 42 5B 42 99 58 00 FD 00      	STA		ZS:VIDBUF+88,Y
                                         
   6495 00D841 80 1B                        	BRA		.0007
   6496 00D843                             .0010:
   6497 00D843 A9 E1                        	LDA		#225
   6498 00D845 42 5B 99 62 D8               	STA		ZS:VIDBUf+84,Y
   6499 00D84A A9 F9                        	LDA		#249
   6500 00D84C 42 5B 42 99 56 00 FD 00      	STA		ZS:VIDBUF+86,Y
                                         
   6501 00D854 A9 60                        	LDA		#96
   6502 00D856 42 5B 42 99 58 00 FD 00      	STA		ZS:VIDBUF+88,Y
                                         
   6503 00D85E                             .0007:
                                           	; Surround the alien with spaces
   6505 00D85E A9 20                        	LDA		#' '
   6506 00D860 42 5B 42 99 AA FF FC 00      	STA		ZS:VIDBUF-86,Y
                                         
   6507 00D868 42 5B 42 99 AC FF FC 00      	STA		ZS:VIDBUF-84,Y
                                         
   6508 00D870 42 5B 42 99 AE FF FC 00      	STA		ZS:VIDBUF-82,Y
                                         
   6509 00D878 42 5B 42 99 B0 FF FC 00      	STA		ZS:VIDBUF-80,Y
                                         
   6510 00D880 42 5B 42 99 B2 FF FC 00      	STA		ZS:VIDBUF-78,Y
                                         
   6511 00D888 42 5B 42 99 FE FF FC 00      	STA		ZS:VIDBUF-2,Y
                                         
   6512 00D890 42 5B 42 99 06 00 FD 00      	STA		ZS:VIDBUF+6,Y
                                         
   6513 00D898 42 5B 42 99 52 00 FD 00      	STA		ZS:VIDBUF+82,Y
                                         
   6514 00D8A0 42 5B 42 99 5A 00 FD 00      	STA		ZS:VIDBUF+90,Y
                                         
   6515 00D8A8 42 5B 42 99 A6 00 FD 00      	STA		ZS:VIDBUF+166,Y
                                         
   6516 00D8B0 42 5B 42 99 A8 00 FD 00      	STA		ZS:VIDBUF+168,Y
                                         
   6517 00D8B8 42 5B 42 99 AA 00 FD 00      	STA		ZS:VIDBUF+170,Y
                                         
   6518 00D8C0 42 5B 42 99 AC 00 FD 00      	STA		ZS:VIDBUF+172,Y
                                         
   6519 00D8C8 42 5B 42 99 AE 00 FD 00      	STA		ZS:VIDBUF+174,Y
                                         
   6520 00D8D0                             .0001:
   6521 00D8D0 E8                           	INX
   6522 00D8D1 E8                           	INX
   6523 00D8D2 E0 50 00                     	CPX		#80
   6524 00D8D5 D0 FF 32 FE                  	LBNE	.0002
   6525 00D8D9 C2 20                        	REP		#$20
                                           	MEM		16
   6527 00D8DB 60                           	RTS
                                           
                                           public InvadersTask:
   6530 00D8DC                             .0001:
   6531 00D8DC F4 00 00                     	PEA		0				; set data segment to $7800
   6532 00D8DF F4 00 78                     	PEA		$7800
   6533 00D8E2 42 2B                        	PLDS
   6534 00D8E4 A9 FF 2B                     	LDA		#$2BFF			; set stack to $2BFF
   6535 00D8E7 1B                           	TAS
   6536 00D8E8 20 C1 D5                     	JSR		Initialize
   6537 00D8EB 42 E2 00 10                  	SEP		#$1000			; turn on single step mode
   6538 00D8EF 20 F2 D6                     	JSR		RenderInvaders
   6539 00D8F2                             .0002:
   6540 00D8F2 42 20 6F EA 07               	JCR 	KeybdGetCharNoWaitCtx,7	; check for char at keyboard
   6541 00D8F7                             .0004:
   6542 00D8F7 A2 00 00                     	LDX		#0
   6543 00D8FA                             .0006:
   6544 00D8FA E8                           	INX
   6545 00D8FB E0 D0 07                     	CPX		#2000
   6546 00D8FE D0 FA                        	BNE		.0006
   6547 00D900 42 5B A5 04                  	LDA		ZS:TickCount
   6548 00D904 29 03 00                     	AND		#$3
   6549 00D907 D0 E9                        	BNE		.0002
   6550 00D909 20 0A D4                     	JSR		InvBomb
   6551 00D90C 20 F2 D6                     	JSR		RenderInvaders
   6552 00D90F 20 8A D4                     	JSR		RenderBombs
   6553 00D912 20 53 D4                     	JSR		MoveBombs
   6554 00D915 42 5B A5 04                  	LDA		ZS:TickCount
   6555 00D919 29 0F 00                     	AND		#$F
   6556 00D91C D0 D4                        	BNE		.0002
   6557 00D91E 20 29 D6                     	JSR		IsAllDestroyed
   6558 00D921 D0 B9                        	BNE		.0001
   6559 00D923 20 92 D5                     	JSR		Move
   6560 00D926 F0 B4                        	BEQ		.0001				; Can't move, re-initialize
   6561 00D928 80 C8                        	BRA		.0002
   6562 00D92A                             .0005:
   6563 00D92A 85 6A                        	STA		inv_tick
   6564 00D92C 80 C4                        	BRA		.0002
   6565 00D92E                             .0003:
   6566 00D92E C9 03 00                     	CMP		#3
   6567 00D931 D0 C4                        	BNE		.0004
   6568 00D933 42 5B 9C 68 78               	STZ		ZS:do_invaders
   6569 00D938 42 60                        	RTT
   6570 00D93A 80 A0                        	BRA		.0001
                                           
   6572 00D93C                             InvaderRow:
   6573 00D93C 00 00                        	.word	0
   6574 00D93E 00 00                        	.word	0
   6575 00D940 00 00                        	.word	0
   6576 00D942 00 00                        	.word	0
   6577 00D944 00 00                        	.word	0
   6578 00D946 00 00                        	.word	0
   6579 00D948 00 00                        	.word	0
   6580 00D94A 00 00                        	.word	0
                                           
   6582 00D94C 01 00                        	.word	1
   6583 00D94E 01 00                        	.word	1
   6584 00D950 01 00                        	.word	1
   6585 00D952 01 00                        	.word	1
   6586 00D954 01 00                        	.word	1
   6587 00D956 01 00                        	.word	1
   6588 00D958 01 00                        	.word	1
   6589 00D95A 01 00                        	.word	1
                                           
   6591 00D95C 02 00                        	.word	2
   6592 00D95E 02 00                        	.word	2
   6593 00D960 02 00                        	.word	2
   6594 00D962 02 00                        	.word	2
   6595 00D964 02 00                        	.word	2
   6596 00D966 02 00                        	.word	2
   6597 00D968 02 00                        	.word	2
   6598 00D96A 02 00                        	.word	2
                                           
   6600 00D96C 03 00                        	.word	3
   6601 00D96E 03 00                        	.word	3
   6602 00D970 03 00                        	.word	3
   6603 00D972 03 00                        	.word	3
   6604 00D974 03 00                        	.word	3
   6605 00D976 03 00                        	.word	3
   6606 00D978 03 00                        	.word	3
   6607 00D97A 03 00                        	.word	3
                                           
   6609 00D97C 04 00                        	.word	4
   6610 00D97E 04 00                        	.word	4
   6611 00D980 04 00                        	.word	4
   6612 00D982 04 00                        	.word	4
   6613 00D984 04 00                        	.word	4
   6614 00D986 04 00                        	.word	4
   6615 00D988 04 00                        	.word	4
   6616 00D98A 04 00                        	.word	4
                                           
   6618 00D98C                             InvaderCol:
   6619 00D98C 00 00                        	.word	0
   6620 00D98E 01 00                        	.word	1
   6621 00D990 02 00                        	.word	2
   6622 00D992 03 00                        	.word	3
   6623 00D994 04 00                        	.word	4
   6624 00D996 05 00                        	.word	5
   6625 00D998 06 00                        	.word	6
   6626 00D99A 07 00                        	.word	7
                                           
   6628 00D99C 00 00                        	.word	0
   6629 00D99E 01 00                        	.word	1
   6630 00D9A0 02 00                        	.word	2
   6631 00D9A2 03 00                        	.word	3
   6632 00D9A4 04 00                        	.word	4
   6633 00D9A6 05 00                        	.word	5
   6634 00D9A8 06 00                        	.word	6
   6635 00D9AA 07 00                        	.word	7
                                           
   6637 00D9AC 00 00                        	.word	0
   6638 00D9AE 01 00                        	.word	1
   6639 00D9B0 02 00                        	.word	2
   6640 00D9B2 03 00                        	.word	3
   6641 00D9B4 04 00                        	.word	4
   6642 00D9B6 05 00                        	.word	5
   6643 00D9B8 06 00                        	.word	6
   6644 00D9BA 07 00                        	.word	7
                                           
   6646 00D9BC 00 00                        	.word	0
   6647 00D9BE 01 00                        	.word	1
   6648 00D9C0 02 00                        	.word	2
   6649 00D9C2 03 00                        	.word	3
   6650 00D9C4 04 00                        	.word	4
   6651 00D9C6 05 00                        	.word	5
   6652 00D9C8 06 00                        	.word	6
   6653 00D9CA 07 00                        	.word	7
                                           
   6655 00D9CC 00 00                        	.word	0
   6656 00D9CE 01 00                        	.word	1
   6657 00D9D0 02 00                        	.word	2
   6658 00D9D2 03 00                        	.word	3
   6659 00D9D4 04 00                        	.word	4
   6660 00D9D6 05 00                        	.word	5
   6661 00D9D8 06 00                        	.word	6
   6662 00D9DA 07 00                        	.word	7
                                           
                                           ; Starting Y co-ordinate for each invader
                                           
   6666 00D9DC                             StartY:
   6667 00D9DC 03 00                        	.word	3
   6668 00D9DE 03 00                        	.word	3
   6669 00D9E0 03 00                        	.word	3
   6670 00D9E2 03 00                        	.word	3
   6671 00D9E4 03 00                        	.word	3
   6672 00D9E6 03 00                        	.word	3
   6673 00D9E8 03 00                        	.word	3
   6674 00D9EA 03 00                        	.word	3
                                           
   6676 00D9EC 06 00                        	.word	6
   6677 00D9EE 06 00                        	.word	6
   6678 00D9F0 06 00                        	.word	6
   6679 00D9F2 06 00                        	.word	6
   6680 00D9F4 06 00                        	.word	6
   6681 00D9F6 06 00                        	.word	6
   6682 00D9F8 06 00                        	.word	6
   6683 00D9FA 06 00                        	.word	6
                                           
   6685 00D9FC 09 00                        	.word	9
   6686 00D9FE 09 00                        	.word	9
   6687 00DA00 09 00                        	.word	9
   6688 00DA02 09 00                        	.word	9
   6689 00DA04 09 00                        	.word	9
   6690 00DA06 09 00                        	.word	9
   6691 00DA08 09 00                        	.word	9
   6692 00DA0A 09 00                        	.word	9
                                           
   6694 00DA0C 0C 00                        	.word	12
   6695 00DA0E 0C 00                        	.word	12
   6696 00DA10 0C 00                        	.word	12
   6697 00DA12 0C 00                        	.word	12
   6698 00DA14 0C 00                        	.word	12
   6699 00DA16 0C 00                        	.word	12
   6700 00DA18 0C 00                        	.word	12
   6701 00DA1A 0C 00                        	.word	12
                                           
   6703 00DA1C 0F 00                        	.word	15
   6704 00DA1E 0F 00                        	.word	15
   6705 00DA20 0F 00                        	.word	15
   6706 00DA22 0F 00                        	.word	15
   6707 00DA24 0F 00                        	.word	15
   6708 00DA26 0F 00                        	.word	15
   6709 00DA28 0F 00                        	.word	15
   6710 00DA2A 0F 00                        	.word	15
                                           
                                           ; Starting X co-ordinate for each invader
                                           
   6714 00DA2C                             StartX:
   6715 00DA2C 01 00                        	.word	1
   6716 00DA2E 05 00                        	.word	5
   6717 00DA30 09 00                        	.word	9
   6718 00DA32 0D 00                        	.word	13
   6719 00DA34 11 00                        	.word	17
   6720 00DA36 15 00                        	.word	21
   6721 00DA38 19 00                        	.word	25
   6722 00DA3A 1D 00                        	.word	29
                                           
   6724 00DA3C 01 00                        	.word	1
   6725 00DA3E 05 00                        	.word	5
   6726 00DA40 09 00                        	.word	9
   6727 00DA42 0D 00                        	.word	13
   6728 00DA44 11 00                        	.word	17
   6729 00DA46 15 00                        	.word	21
   6730 00DA48 19 00                        	.word	25
   6731 00DA4A 1D 00                        	.word	29
                                           
   6733 00DA4C 01 00                        	.word	1
   6734 00DA4E 05 00                        	.word	5
   6735 00DA50 09 00                        	.word	9
   6736 00DA52 0D 00                        	.word	13
   6737 00DA54 11 00                        	.word	17
   6738 00DA56 15 00                        	.word	21
   6739 00DA58 19 00                        	.word	25
   6740 00DA5A 1D 00                        	.word	29
                                           
   6742 00DA5C 01 00                        	.word	1
   6743 00DA5E 05 00                        	.word	5
   6744 00DA60 09 00                        	.word	9
   6745 00DA62 0D 00                        	.word	13
   6746 00DA64 11 00                        	.word	17
   6747 00DA66 15 00                        	.word	21
   6748 00DA68 19 00                        	.word	25
   6749 00DA6A 1D 00                        	.word	29
                                           
   6751 00DA6C 01 00                        	.word	1
   6752 00DA6E 05 00                        	.word	5
   6753 00DA70 09 00                        	.word	9
   6754 00DA72 0D 00                        	.word	13
   6755 00DA74 11 00                        	.word	17
   6756 00DA76 15 00                        	.word	21
   6757 00DA78 19 00                        	.word	25
   6758 00DA7A 1D 00                        	.word	29
                                           
   6760 00DA7C                             InvaderType:
   6761 00DA7C 01 00                        	.word	1
   6762 00DA7E 01 00                        	.word	1
   6763 00DA80 01 00                        	.word	1
   6764 00DA82 01 00                        	.word	1
   6765 00DA84 01 00                        	.word	1
   6766 00DA86 01 00                        	.word	1
   6767 00DA88 01 00                        	.word	1
   6768 00DA8A 01 00                        	.word	1
                                           
   6770 00DA8C 02 00                        	.word	2
   6771 00DA8E 02 00                        	.word	2
   6772 00DA90 02 00                        	.word	2
   6773 00DA92 02 00                        	.word	2
   6774 00DA94 02 00                        	.word	2
   6775 00DA96 02 00                        	.word	2
   6776 00DA98 02 00                        	.word	2
   6777 00DA9A 02 00                        	.word	2
                                           
   6779 00DA9C 02 00                        	.word	2
   6780 00DA9E 02 00                        	.word	2
   6781 00DAA0 02 00                        	.word	2
   6782 00DAA2 02 00                        	.word	2
   6783 00DAA4 02 00                        	.word	2
   6784 00DAA6 02 00                        	.word	2
   6785 00DAA8 02 00                        	.word	2
   6786 00DAAA 02 00                        	.word	2
                                           
   6788 00DAAC 03 00                        	.word	3
   6789 00DAAE 03 00                        	.word	3
   6790 00DAB0 03 00                        	.word	3
   6791 00DAB2 03 00                        	.word	3
   6792 00DAB4 03 00                        	.word	3
   6793 00DAB6 03 00                        	.word	3
   6794 00DAB8 03 00                        	.word	3
   6795 00DABA 03 00                        	.word	3
                                           
   6797 00DABC 03 00                        	.word	3
   6798 00DABE 03 00                        	.word	3
   6799 00DAC0 03 00                        	.word	3
   6800 00DAC2 03 00                        	.word	3
   6801 00DAC4 03 00                        	.word	3
   6802 00DAC6 03 00                        	.word	3
   6803 00DAC8 03 00                        	.word	3
   6804 00DACA 03 00                        	.word	3
                                           			
Finitron FT832 assembler   version 1.4   Sat Nov 21 03:52:07 2015     Page 1
FTBios816.asm


                                           .include "invaders.asm"
                                           
                                           ;	cpu		W65C816S
                                           	cpu		FT832
   6809 00DACC FF FF FF FF FF FF FF FF      	.org	$E000
   6809 00DAD4 FF FF FF FF FF FF FF FF    
   6809 00DADC FF FF FF FF FF FF FF FF    
   6809 00DAE4 FF FF FF FF FF FF FF FF    
   6809 00DAEC FF FF FF FF FF FF FF FF    
   6809 00DAF4 FF FF FF FF FF FF FF FF    
   6809 00DAFC FF FF FF FF FF FF FF FF    
   6809 00DB04 FF FF FF FF FF FF FF FF    
   6809 00DB0C FF FF FF FF FF FF FF FF    
   6809 00DB14 FF FF FF FF FF FF FF FF    
   6809 00DB1C FF FF FF FF FF FF FF FF    
   6809 00DB24 FF FF FF FF FF FF FF FF    
   6809 00DB2C FF FF FF FF FF FF FF FF    
   6809 00DB34 FF FF FF FF FF FF FF FF    
   6809 00DB3C FF FF FF FF FF FF FF FF    
   6809 00DB44 FF FF FF FF FF FF FF FF    
   6809 00DB4C FF FF FF FF FF FF FF FF    
   6809 00DB54 FF FF FF FF FF FF FF FF    
   6809 00DB5C FF FF FF FF FF FF FF FF    
   6809 00DB64 FF FF FF FF FF FF FF FF    
   6809 00DB6C FF FF FF FF FF FF FF FF    
   6809 00DB74 FF FF FF FF FF FF FF FF    
   6809 00DB7C FF FF FF FF FF FF FF FF    
   6809 00DB84 FF FF FF FF FF FF FF FF    
   6809 00DB8C FF FF FF FF FF FF FF FF    
   6809 00DB94 FF FF FF FF FF FF FF FF    
   6809 00DB9C FF FF FF FF FF FF FF FF    
   6809 00DBA4 FF FF FF FF FF FF FF FF    
   6809 00DBAC FF FF FF FF FF FF FF FF    
   6809 00DBB4 FF FF FF FF FF FF FF FF    
   6809 00DBBC FF FF FF FF FF FF FF FF    
   6809 00DBC4 FF FF FF FF FF FF FF FF    
   6809 00DBCC FF FF FF FF FF FF FF FF    
   6809 00DBD4 FF FF FF FF FF FF FF FF    
   6809 00DBDC FF FF FF FF FF FF FF FF    
   6809 00DBE4 FF FF FF FF FF FF FF FF    
   6809 00DBEC FF FF FF FF FF FF FF FF    
   6809 00DBF4 FF FF FF FF FF FF FF FF    
   6809 00DBFC FF FF FF FF FF FF FF FF    
   6809 00DC04 FF FF FF FF FF FF FF FF    
   6809 00DC0C FF FF FF FF FF FF FF FF    
   6809 00DC14 FF FF FF FF FF FF FF FF    
   6809 00DC1C FF FF FF FF FF FF FF FF    
   6809 00DC24 FF FF FF FF FF FF FF FF    
   6809 00DC2C FF FF FF FF FF FF FF FF    
   6809 00DC34 FF FF FF FF FF FF FF FF    
   6809 00DC3C FF FF FF FF FF FF FF FF    
   6809 00DC44 FF FF FF FF FF FF FF FF    
   6809 00DC4C FF FF FF FF FF FF FF FF    
   6809 00DC54 FF FF FF FF FF FF FF FF    
   6809 00DC5C FF FF FF FF FF FF FF FF    
   6809 00DC64 FF FF FF FF FF FF FF FF    
   6809 00DC6C FF FF FF FF FF FF FF FF    
   6809 00DC74 FF FF FF FF FF FF FF FF    
   6809 00DC7C FF FF FF FF FF FF FF FF    
   6809 00DC84 FF FF FF FF FF FF FF FF    
   6809 00DC8C FF FF FF FF FF FF FF FF    
   6809 00DC94 FF FF FF FF FF FF FF FF    
   6809 00DC9C FF FF FF FF FF FF FF FF    
   6809 00DCA4 FF FF FF FF FF FF FF FF    
   6809 00DCAC FF FF FF FF FF FF FF FF    
   6809 00DCB4 FF FF FF FF FF FF FF FF    
   6809 00DCBC FF FF FF FF FF FF FF FF    
   6809 00DCC4 FF FF FF FF FF FF FF FF    
   6809 00DCCC FF FF FF FF FF FF FF FF    
   6809 00DCD4 FF FF FF FF FF FF FF FF    
   6809 00DCDC FF FF FF FF FF FF FF FF    
   6809 00DCE4 FF FF FF FF FF FF FF FF    
   6809 00DCEC FF FF FF FF FF FF FF FF    
   6809 00DCF4 FF FF FF FF FF FF FF FF    
   6809 00DCFC FF FF FF FF FF FF FF FF    
   6809 00DD04 FF FF FF FF FF FF FF FF    
   6809 00DD0C FF FF FF FF FF FF FF FF    
   6809 00DD14 FF FF FF FF FF FF FF FF    
   6809 00DD1C FF FF FF FF FF FF FF FF    
   6809 00DD24 FF FF FF FF FF FF FF FF    
   6809 00DD2C FF FF FF FF FF FF FF FF    
   6809 00DD34 FF FF FF FF FF FF FF FF    
   6809 00DD3C FF FF FF FF FF FF FF FF    
   6809 00DD44 FF FF FF FF FF FF FF FF    
   6809 00DD4C FF FF FF FF FF FF FF FF    
   6809 00DD54 FF FF FF FF FF FF FF FF    
   6809 00DD5C FF FF FF FF FF FF FF FF    
   6809 00DD64 FF FF FF FF FF FF FF FF    
   6809 00DD6C FF FF FF FF FF FF FF FF    
   6809 00DD74 FF FF FF FF FF FF FF FF    
   6809 00DD7C FF FF FF FF FF FF FF FF    
   6809 00DD84 FF FF FF FF FF FF FF FF    
   6809 00DD8C FF FF FF FF FF FF FF FF    
   6809 00DD94 FF FF FF FF FF FF FF FF    
   6809 00DD9C FF FF FF FF FF FF FF FF    
   6809 00DDA4 FF FF FF FF FF FF FF FF    
   6809 00DDAC FF FF FF FF FF FF FF FF    
   6809 00DDB4 FF FF FF FF FF FF FF FF    
   6809 00DDBC FF FF FF FF FF FF FF FF    
   6809 00DDC4 FF FF FF FF FF FF FF FF    
   6809 00DDCC FF FF FF FF FF FF FF FF    
   6809 00DDD4 FF FF FF FF FF FF FF FF    
   6809 00DDDC FF FF FF FF FF FF FF FF    
   6809 00DDE4 FF FF FF FF FF FF FF FF    
   6809 00DDEC FF FF FF FF FF FF FF FF    
   6809 00DDF4 FF FF FF FF FF FF FF FF    
   6809 00DDFC FF FF FF FF FF FF FF FF    
   6809 00DE04 FF FF FF FF FF FF FF FF    
   6809 00DE0C FF FF FF FF FF FF FF FF    
   6809 00DE14 FF FF FF FF FF FF FF FF    
   6809 00DE1C FF FF FF FF FF FF FF FF    
   6809 00DE24 FF FF FF FF FF FF FF FF    
   6809 00DE2C FF FF FF FF FF FF FF FF    
   6809 00DE34 FF FF FF FF FF FF FF FF    
   6809 00DE3C FF FF FF FF FF FF FF FF    
   6809 00DE44 FF FF FF FF FF FF FF FF    
   6809 00DE4C FF FF FF FF FF FF FF FF    
   6809 00DE54 FF FF FF FF FF FF FF FF    
   6809 00DE5C FF FF FF FF FF FF FF FF    
   6809 00DE64 FF FF FF FF FF FF FF FF    
   6809 00DE6C FF FF FF FF FF FF FF FF    
   6809 00DE74 FF FF FF FF FF FF FF FF    
   6809 00DE7C FF FF FF FF FF FF FF FF    
   6809 00DE84 FF FF FF FF FF FF FF FF    
   6809 00DE8C FF FF FF FF FF FF FF FF    
   6809 00DE94 FF FF FF FF FF FF FF FF    
   6809 00DE9C FF FF FF FF FF FF FF FF    
   6809 00DEA4 FF FF FF FF FF FF FF FF    
   6809 00DEAC FF FF FF FF FF FF FF FF    
   6809 00DEB4 FF FF FF FF FF FF FF FF    
   6809 00DEBC FF FF FF FF FF FF FF FF    
   6809 00DEC4 FF FF FF FF FF FF FF FF    
   6809 00DECC FF FF FF FF FF FF FF FF    
   6809 00DED4 FF FF FF FF FF FF FF FF    
   6809 00DEDC FF FF FF FF FF FF FF FF    
   6809 00DEE4 FF FF FF FF FF FF FF FF    
   6809 00DEEC FF FF FF FF FF FF FF FF    
   6809 00DEF4 FF FF FF FF FF FF FF FF    
   6809 00DEFC FF FF FF FF FF FF FF FF    
   6809 00DF04 FF FF FF FF FF FF FF FF    
   6809 00DF0C FF FF FF FF FF FF FF FF    
   6809 00DF14 FF FF FF FF FF FF FF FF    
   6809 00DF1C FF FF FF FF FF FF FF FF    
   6809 00DF24 FF FF FF FF FF FF FF FF    
   6809 00DF2C FF FF FF FF FF FF FF FF    
   6809 00DF34 FF FF FF FF FF FF FF FF    
   6809 00DF3C FF FF FF FF FF FF FF FF    
   6809 00DF44 FF FF FF FF FF FF FF FF    
   6809 00DF4C FF FF FF FF FF FF FF FF    
   6809 00DF54 FF FF FF FF FF FF FF FF    
   6809 00DF5C FF FF FF FF FF FF FF FF    
   6809 00DF64 FF FF FF FF FF FF FF FF    
   6809 00DF6C FF FF FF FF FF FF FF FF    
   6809 00DF74 FF FF FF FF FF FF FF FF    
   6809 00DF7C FF FF FF FF FF FF FF FF    
   6809 00DF84 FF FF FF FF FF FF FF FF    
   6809 00DF8C FF FF FF FF FF FF FF FF    
   6809 00DF94 FF FF FF FF FF FF FF FF    
   6809 00DF9C FF FF FF FF FF FF FF FF    
   6809 00DFA4 FF FF FF FF FF FF FF FF    
   6809 00DFAC FF FF FF FF FF FF FF FF    
   6809 00DFB4 FF FF FF FF FF FF FF FF    
   6809 00DFBC FF FF FF FF FF FF FF FF    
   6809 00DFC4 FF FF FF FF FF FF FF FF    
   6809 00DFCC FF FF FF FF FF FF FF FF    
   6809 00DFD4 FF FF FF FF FF FF FF FF    
   6809 00DFDC FF FF FF FF FF FF FF FF    
   6809 00DFE4 FF FF FF FF FF FF FF FF    
   6809 00DFEC FF FF FF FF FF FF FF FF    
   6809 00DFF4 FF FF FF FF FF FF FF FF    
   6809 00DFFC FF FF FF FF                
                                           
   6811 00E000                             start:
   6812 00E000 78                           	SEI
   6813 00E001 D8                           	CLD
                                           ;	CLV					; overflow low
                                           ;	SEC					; carry high
                                           ;	XCE					; sets 32 bit mode, 32 bit registers
                                           ;	REP		#$30		; 32 bit registers
                                           ;	MEM		32
                                           ;	NDX		32
                                           ;	LDA		#$3FFF
                                           ;	TAS
                                           ;
   6823 00E002 18                           	CLC					; switch to '816 mode
   6824 00E003 2C 00 E0                     	BIT		start		; set overflow bit
   6825 00E006 FB                           	XCE
   6826 00E007 C2 30                        	REP		#$30		; set 16 bit regs & mem
                                           	NDX 	16
                                           	MEM		16
   6829 00E009 A9 FF 3F                     	LDA		#$3FFF		; set top of stack
   6830 00E00C 1B                           	TAS
                                           
                                           	; setup the programmable address decodes
   6833 00E00D A9 70 00                     	LDA		#$0070		; program chip selects for I/O
   6834 00E010 8D 00 B0                     	STA		PCS0		; at $007000
   6835 00E013 A9 71 00                     	LDA		#$0071
   6836 00E016 8D 02 B0                     	STA		PCS1
                                           ;	LDA		#$FEA1		; select $FEA1xx I/O
                                           ;	STA		PCS3
   6839 00E019 A9 00 00                     	LDA		#$0000		; select zero page ram
   6840 00E01C 8D 0A B0                     	STA		PCS5
                                           
                                           	; Setup the counters
   6843 00E01F E2 30                        	SEP		#$30		; set 8 bit regs
                                           	NDX		8			; tell the assembler
                                           	MEM		8
                                           	; Counter #0 is setup as a free running tick count
   6847 00E021 A9 FF                        	LDA		#$FF		; set limit to $FFFFFF
   6848 00E023 8D 10 B0                     	STA		CTR0_LMT
   6849 00E026 8D 11 B0                     	STA		CTR0_LMT+1
   6850 00E029 8D 12 B0                     	STA		CTR0_LMT+2
   6851 00E02C A9 14                        	LDA		#$14		; count up, on mpu clock
   6852 00E02E 85 03                        	STA		CTR0_CTRL
                                           	; Counter #1 is set to interrupt at a 100Hz rate
   6854 00E030 A9 94                        	LDA		#$94		; divide by 95794 (for 100Hz)
   6855 00E032 85 04                        	STA		CTR1_LMT
   6856 00E034 A9 57                        	LDA		#$57
   6857 00E036 85 05                        	STA		CTR1_LMT+1
   6858 00E038 A9 09                        	LDA		#$09
   6859 00E03A 85 06                        	STA		CTR1_LMT+2
   6860 00E03C A9 05                        	LDA		#$05		; count down, on mpu clock, irq disenabled
   6861 00E03E 85 07                        	STA		CTR1_CTRL
                                           	; Counter #2 isn't setup
                                           
   6864 00E040 C2 30                        	REP		#$30		; set 16 bit regs & mem
                                           	NDX 	16
                                           	MEM		16
                                           
                                           	; Setup the task registers
   6869 00E042 A0 06 00                     	LDY		#6			; # tasks to setup
   6870 00E045 A2 01 00                     	LDX		#1
   6871 00E048                             .0001:
   6872 00E048 42 4C 01 F0 00 00            	LDT		TaskStartTbl,X
   6873 00E04E E8                           	INX
   6874 00E04F 88                           	DEY
   6875 00E050 D0 F6                        	BNE		.0001
                                           
   6877 00E052 64 B4                        	STZ		running_task
                                           
   6879 00E054 A9 96 EF                     	LDA		#BrkRout1
   6880 00E057 8D 02 01                     	STA		$0102
                                           
   6882 00E05A 64 04                        	STZ		TickCount
   6883 00E05C 64 06                        	STZ		TickCount+2
   6884 00E05E                             Task0:
   6885 00E05E 58                           	CLI
   6886 00E05F                             .0001:
   6887 00E05F A9 D2 E5                     	LDA		#DisplayChar
   6888 00E062 8D F0 03                     	STA		OutputVec
   6889 00E065 AD F0 03                     	LDA		OutputVec
   6890 00E068 C9 D2 E5                     	CMP		#DisplayChar
   6891 00E06B D0 F2                        	BNE		.0001
   6892 00E06D A9 01 00                     	LDA		#$01
   6893 00E070 8D 00 70                     	STA		$7000
   6894 00E073 A9 00 BF                     	LDA		#$BF00
   6895 00E076 85 36                        	STA		NormAttr
   6896 00E078 20 FB E7                     	JSR		ClearScreen
   6897 00E07B 20 8D E7                     	JSR		HomeCursor
   6898 00E07E A9 02 00                     	LDA		#$02
   6899 00E081 8D 00 70                     	STA		$7000
   6900 00E084 F4 42 E5                     	PEA		msgStarting
   6901 00E087 20 BC E7                     	JSR		DisplayString
   6902 00E08A 68                           	PLA
   6903 00E08B A9 00 00                     	LDA		#0
   6904 00E08E 8F 00 A2 FE                  	STA		FAC1
   6905 00E092 8F 02 A2 FE                  	STA		FAC1+2
   6906 00E096 8F 04 A2 FE                  	STA		FAC1+4
   6907 00E09A 8F 06 A2 FE                  	STA		FAC1+6
   6908 00E09E 8F 08 A2 FE                  	STA		FAC1+8
   6909 00E0A2 8F 0A A2 FE                  	STA		FAC1+10
   6910 00E0A6 A9 D2 04                     	LDA		#1234
   6911 00E0A9 8F 00 A2 FE                  	STA		FAC1
   6912 00E0AD A9 05 00                     	LDA		#5			; FIX2FLT
   6913 00E0B0 20 13 D3                     	JSR 	FPCommandWait
   6914 00E0B3 20 00 D3                     	JSR		DivideByTen
   6915 00E0B6 20 DA D0                     	JSR		FAC1ToString
   6916 00E0B9 F4 A0 03                     	PEA		$3A0
   6917 00E0BC 20 BC E7                     	JSR		DisplayString
   6918 00E0BF 68                           	PLA
   6919 00E0C0 A9 20 00                     	LDA		#' '
   6920 00E0C3 20 B1 E7                     	JSR		OutChar
   6921 00E0C6 20 23 D3                     	JSR		DispFAC1
   6922 00E0C9 42 A0 07 00                  	FORK	#7			; fork a BIOS context
   6923 00E0CD 42 1A                        	TTA
   6924 00E0CF C9 07 00                     	CMP		#7
   6925 00E0D2 D0 02                        	BNE		.0002
   6926 00E0D4 42 60                        	RTT
   6927 00E0D6                             .0002:
   6928 00E0D6 42 A0 0B 00                  	FORK	#11
   6929 00E0DA 42 1A                        	TTA
   6930 00E0DC C9 0B 00                     	CMP		#11
   6931 00E0DF F0 FF 64 08                  	LBEQ	KeybdInit
                                           
   6933 00E0E3                             Mon1:
   6934 00E0E3                             .mon1:
   6935 00E0E3 20 A8 E7                     	JSR		OutCRLF
   6936 00E0E6 A9 24 00                     	LDA		#'$'
   6937 00E0E9                             .mon3:
   6938 00E0E9 20 B1 E7                     	JSR		OutChar
   6939 00E0EC 20 80 EA                     	JSR		KeybdGetCharWait
   6940 00E0EF 29 FF 00                     	AND		#$FF
                                           ;	CMP		#'.'
                                           ;	BEQ		.mon3
   6943 00E0F2 C9 0D 00                     	CMP		#CR
   6944 00E0F5 D0 F2                        	BNE		.mon3
   6945 00E0F7 A5 32                        	LDA		CursorY
   6946 00E0F9 0A                           	ASL
   6947 00E0FA AA                           	TAX
   6948 00E0FB BD C3 EF                     	LDA		LineTbl,X
   6949 00E0FE 0A                           	ASL
   6950 00E0FF AA                           	TAX
   6951 00E100                             .mon4:
   6952 00E100 20 E6 E4                     	JSR		IgnoreBlanks
   6953 00E103 20 5C E1                     	JSR		MonGetch
   6954 00E106 C9 24 00                     	CMP		#'$'
   6955 00E109 F0 F5                        	BEQ		.mon4
   6956 00E10B C9 53 00                     	CMP		#'S'
   6957 00E10E D0 03                        	BNE		.mon2
   6958 00E110 4C 00 C0                     	JMP		$C000		; invoke Supermon816
   6959 00E113                             .mon2:
   6960 00E113 C9 43 00                     	CMP		#'C'
   6961 00E116 D0 08                        	BNE		.mon5
   6962 00E118 20 FB E7                     	JSR		ClearScreen
   6963 00E11B 20 8D E7                     	JSR		HomeCursor
   6964 00E11E 80 C3                        	BRA		.mon1
   6965 00E120                             .mon5:
   6966 00E120 C9 4D 00                     	CMP		#'M'
   6967 00E123 F0 FF 94 02                  	LBEQ	doMemoryDump
   6968 00E127 C9 44 00                     	CMP		#'D'
   6969 00E12A F0 FF 38 03                  	LBEQ	doDisassemble
   6970 00E12E C9 3E 00                     	CMP		#'>'
   6971 00E131 F0 FF F6 02                  	LBEQ	doMemoryEdit
   6972 00E135 C9 4A 00                     	CMP		#'J'
   6973 00E138 F0 FF 7A 03                  	LBEQ	doJump
   6974 00E13C C9 54 00                     	CMP		#'T'
   6975 00E13F F0 FF 26 00                  	LBEQ	doTask2
   6976 00E143 C9 49 00                     	CMP		#'I'
   6977 00E146 F0 FF 26 00                  	LBEQ	doInvaders
   6978 00E14A C9 52 00                     	CMP		#'R'
   6979 00E14D F0 FF 2C 00                  	LBEQ	doRegs
   6980 00E151 80 90                        	BRA		Mon1
                                           
                                           ; Get a character from the screen, skipping over spaces and tabs
                                           ;
   6984 00E153                             MonGetNonSpace:
   6985 00E153                             .0001:
   6986 00E153 20 5C E1                     	JSR		MonGetch
   6987 00E156 C9 20 00                     	CMP		#' '
   6988 00E159 F0 F8                        	BEQ		.0001
   6989 00E15B 60                           	RTS
                                           
                                           ; Get a character from the screen.
                                           ;
   6993 00E15C                             MonGetch:
   6994 00E15C BF 00 00 FD                  	LDA		VIDBUF,X
   6995 00E160 E8                           	INX
   6996 00E161 E8                           	INX
   6997 00E162 29 FF 00                     	AND		#$FF
   6998 00E165 20 C6 E5                     	JSR		ScreenToAscii
   6999 00E168 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ;------------------------------------------------------------------------------
   7003 00E169                             doTask2:
   7004 00E169 42 A2 02 00                  	TSK		#2
   7005 00E16D 82 73 FF                     	BRL		Mon1
                                           
   7007 00E170                             doInvaders:
   7008 00E170 A9 FF FF                     	LDA		#$FFFF
   7009 00E173 8D 68 78                     	STA		do_invaders
   7010 00E176 42 A2 05 00                  	TSK		#5
                                           ;	FORK	#5
                                           ;	TTA
                                           ;	CMP		#5
                                           ;	LBEQ	InvadersTask
   7015 00E17A 82 66 FF                     	BRL		Mon1
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Display Registers
                                           ; R<xx>		xx = context register to display
                                           ; Update Registers
                                           ; R.<reg> <val>
                                           ;	reg = CS PB PC A X Y SP SR DS DB or DP
                                           ;------------------------------------------------------------------------------
                                           
   7025 00E17D                             doRegs:
   7026 00E17D 20 5C E1                     	JSR		MonGetch
   7027 00E180 C9 2E 00                     	CMP		#'.'
   7028 00E183 D0 FF 13 01                  	LBNE	.0004
   7029 00E187 20 5C E1                     	JSR		MonGetch
   7030 00E18A C9 43 00                     	CMP		#'C'
   7031 00E18D D0 26                        	BNE		.0005
   7032 00E18F 20 5C E1                     	JSR		MonGetch
   7033 00E192 C9 53 00                     	CMP		#'S'
   7034 00E195 D0 FF 4A FF                  	LBNE	Mon1
   7035 00E199 20 E6 E4                     	JSR		IgnoreBlanks
   7036 00E19C 20 A4 E8                     	JSR		GetHexNumber
   7037 00E19F A5 0C                        	LDA		NumWorkArea
   7038 00E1A1 85 80                        	STA		reg_cs
   7039 00E1A3 A5 0E                        	LDA		NumWorkArea+2
   7040 00E1A5 85 82                        	STA		reg_cs+2
   7041 00E1A7                             .buildrec
   7042 00E1A7 20 51 E3                     	JSR		BuildRec
   7043 00E1AA A6 BA                        	LDX		WorkTR
   7044 00E1AC 42 6C 00 01 00 00            	LDT		ldtrec
   7045 00E1B2 82 2E FF                     	BRL		Mon1
   7046 00E1B5                             .0005:
   7047 00E1B5 C9 50 00                     	CMP		#'P'
   7048 00E1B8 D0 27                        	BNE		.0006
   7049 00E1BA 20 5C E1                     	JSR		MonGetch
   7050 00E1BD C9 42 00                     	CMP		#'B'
   7051 00E1C0 D0 0C                        	BNE		.0007
   7052 00E1C2 20 E6 E4                     	JSR		IgnoreBlanks
   7053 00E1C5 20 A4 E8                     	JSR		GetHexNumber
   7054 00E1C8 A5 0E                        	LDA		NumWorkArea+2
   7055 00E1CA 85 8A                        	STA		reg_pc+2
   7056 00E1CC 80 D9                        	BRA		.buildrec
   7057 00E1CE                             .0007:
   7058 00E1CE C9 43 00                     	CMP		#'C'
   7059 00E1D1 D0 FF 0E FF                  	LBNE	Mon1
   7060 00E1D5 20 E6 E4                     	JSR		IgnoreBlanks
   7061 00E1D8 20 A4 E8                     	JSR		GetHexNumber
   7062 00E1DB A5 0C                        	LDA		NumWorkArea
   7063 00E1DD 85 88                        	STA		reg_pc
   7064 00E1DF 80 C6                        	BRA		.buildrec
   7065 00E1E1                             .0006:
   7066 00E1E1 C9 41 00                     	CMP		#'A'
   7067 00E1E4 D0 10                        	BNE		.0008
   7068 00E1E6 20 E6 E4                     	JSR		IgnoreBlanks
   7069 00E1E9 20 A4 E8                     	JSR		GetHexNumber
   7070 00E1EC A5 0C                        	LDA		NumWorkArea
   7071 00E1EE 85 8C                        	STA		reg_a
   7072 00E1F0 A5 0E                        	LDA		NumWorkArea+2
   7073 00E1F2 85 8E                        	STA		reg_a+2
   7074 00E1F4 80 B1                        	BRA		.buildrec
   7075 00E1F6                             .0008:
   7076 00E1F6 C9 58 00                     	CMP		#'X'
   7077 00E1F9 D0 11                        	BNE		.0009
   7078 00E1FB 20 E6 E4                     	JSR		IgnoreBlanks
   7079 00E1FE 20 A4 E8                     	JSR		GetHexNumber
   7080 00E201 A5 0C                        	LDA		NumWorkArea
   7081 00E203 85 90                        	STA		reg_x
   7082 00E205 A5 0E                        	LDA		NumWorkArea+2
   7083 00E207 85 92                        	STA		reg_x+2
   7084 00E209 82 9B FF                     	BRL		.buildrec
   7085 00E20C                             .0009:
   7086 00E20C C9 59 00                     	CMP		#'Y'
   7087 00E20F D0 11                        	BNE		.0010
   7088 00E211 20 E6 E4                     	JSR		IgnoreBlanks
   7089 00E214 20 A4 E8                     	JSR		GetHexNumber
   7090 00E217 A5 0C                        	LDA		NumWorkArea
   7091 00E219 85 94                        	STA		reg_y
   7092 00E21B A5 0E                        	LDA		NumWorkArea+2
   7093 00E21D 85 96                        	STA		reg_y+2
   7094 00E21F 82 85 FF                     	BRL		.buildrec
   7095 00E222                             .0010:
   7096 00E222 C9 53 00                     	CMP		#'S'
   7097 00E225 D0 2D                        	BNE		.0011
   7098 00E227 20 5C E1                     	JSR		MonGetch
   7099 00E22A C9 50 00                     	CMP		#'P'
   7100 00E22D D0 11                        	BNE		.0015
   7101 00E22F 20 E6 E4                     	JSR		IgnoreBlanks
   7102 00E232 20 A4 E8                     	JSR		GetHexNumber
   7103 00E235 A5 0C                        	LDA		NumWorkArea
   7104 00E237 85 98                        	STA		reg_sp
   7105 00E239 A5 0E                        	LDA		NumWorkArea+2
   7106 00E23B 85 9A                        	STA		reg_sp+2
   7107 00E23D 82 67 FF                     	BRL		.buildrec
   7108 00E240                             .0015:
   7109 00E240 C9 52 00                     	CMP		#'R'
   7110 00E243 D0 FF 9C FE                  	LBNE	Mon1
   7111 00E247 20 E6 E4                     	JSR		IgnoreBlanks
   7112 00E24A 20 A4 E8                     	JSR		GetHexNumber
   7113 00E24D A5 0C                        	LDA		NumWorkArea
   7114 00E24F 85 9C                        	STA		reg_sr
   7115 00E251 82 53 FF                     	BRL		.buildrec
   7116 00E254                             .0011:
   7117 00E254 C9 44 00                     	CMP		#'D'
   7118 00E257 D0 FF 88 FE                  	LBNE	Mon1
   7119 00E25B 20 5C E1                     	JSR		MonGetch
   7120 00E25E C9 53 00                     	CMP		#'S'
   7121 00E261 D0 11                        	BNE		.0012
   7122 00E263 20 E6 E4                     	JSR		IgnoreBlanks
   7123 00E266 20 A4 E8                     	JSR		GetHexNumber
   7124 00E269 A5 0C                        	LDA		NumWorkArea
   7125 00E26B 85 84                        	STA		reg_ds
   7126 00E26D A5 0E                        	LDA		NumWorkArea+2
   7127 00E26F 85 86                        	STA		reg_ds+2
   7128 00E271 82 33 FF                     	BRL		.buildrec
   7129 00E274                             .0012:
   7130 00E274 C9 42 00                     	CMP		#'B'
   7131 00E277 D0 0D                        	BNE		.0013
   7132 00E279 20 E6 E4                     	JSR		IgnoreBlanks
   7133 00E27C 20 A4 E8                     	JSR		GetHexNumber
   7134 00E27F A5 0C                        	LDA		NumWorkArea
   7135 00E281 85 A0                        	STA		reg_db
   7136 00E283 82 21 FF                     	BRL		.buildrec
   7137 00E286                             .0013:
   7138 00E286 C9 50 00                     	CMP		#'P'
   7139 00E289 D0 FF 56 FE                  	LBNE	Mon1
   7140 00E28D 20 E6 E4                     	JSR		IgnoreBlanks
   7141 00E290 20 A4 E8                     	JSR		GetHexNumber
   7142 00E293 A5 0C                        	LDA		NumWorkArea
   7143 00E295 85 A4                        	STA		reg_dp
   7144 00E297 82 0D FF                     	BRL		.buildrec
                                           
   7146 00E29A                             .0004:
   7147 00E29A CA                           	DEX
   7148 00E29B CA                           	DEX
                                           ;	JSR		IgnoreBlanks
   7150 00E29C 20 A4 E8                     	JSR		GetHexNumber
   7151 00E29F C0 00 00                     	CPY		#0
   7152 00E2A2 F0 FF 3D FE                  	LBEQ	Mon1
   7153 00E2A6 A5 0C                        	LDA		NumWorkArea
   7154 00E2A8 85 BA                        	STA		WorkTR
   7155 00E2AA 20 B0 E2                     	JSR		DispRegs
   7156 00E2AD 82 33 FE                     	BRL		Mon1
                                           
   7158 00E2B0                             DispRegs:
   7159 00E2B0 F4 E1 F0                     	PEA		msgRegs
   7160 00E2B3 20 BC E7                     	JSR		DisplayString
   7161 00E2B6 68                           	PLA
   7162 00E2B7 20 70 E8                     	JSR		space
                                           
   7164 00E2BA A5 BA                        	LDA		WorkTR
   7165 00E2BC 0A                           	ASL
   7166 00E2BD 0A                           	ASL
   7167 00E2BE 0A                           	ASL
   7168 00E2BF 0A                           	ASL
   7169 00E2C0 AA                           	TAX
                                           
   7171 00E2C1 A0 00 00                     	LDY		#0
   7172 00E2C4                             .0001:
   7173 00E2C4 42 4A                        	INF
   7174 00E2C6 E8                           	INX
   7175 00E2C7 99 80 00                     	STA		reg_cs,Y
   7176 00E2CA 42 EB                        	XBAW
   7177 00E2CC 99 82 00                     	STA		reg_cs+2,Y
   7178 00E2CF 42 C8                        	INY4
   7179 00E2D1 C0 2C 00                     	CPY		#44
   7180 00E2D4 D0 EE                        	BNE		.0001
                                           
                                           	; Display CS
   7183 00E2D6 A5 82                        	LDA		reg_cs+2
   7184 00E2D8 20 49 E8                     	JSR		DispWord
   7185 00E2DB A5 80                        	LDA		reg_cs
   7186 00E2DD 20 49 E8                     	JSR		DispWord
   7187 00E2E0 A9 3A 00                     	LDA		#':'
   7188 00E2E3 20 B1 E7                     	JSR		OutChar
                                           
                                           	; Display PB PC
   7191 00E2E6 A5 8A                        	LDA		reg_cs+10
   7192 00E2E8 20 4E E8                     	JSR		DispByte
   7193 00E2EB A5 88                        	LDA		reg_cs+8
   7194 00E2ED 20 49 E8                     	JSR		DispWord
   7195 00E2F0 20 70 E8                     	JSR		space
                                           
                                           	; Display SRX,SR
   7198 00E2F3 A5 9C                        	LDA		reg_cs+28
   7199 00E2F5 A2 10 00                     	LDX		#16
   7200 00E2F8                             .0003:
   7201 00E2F8 0A                           	ASL
   7202 00E2F9 48                           	PHA
   7203 00E2FA A9 30 00                     	LDA		#'0'
   7204 00E2FD 69 00 00                     	ADC		#0
   7205 00E300 20 57 E8                     	JSR		DispNybble
   7206 00E303 68                           	PLA
   7207 00E304 CA                           	DEX
   7208 00E305 D0 F1                        	BNE		.0003
   7209 00E307 20 70 E8                     	JSR		space
                                           
   7211 00E30A A2 0C 00                     	LDX		#12
   7212 00E30D                             .0002
                                           	; display Acc,.X,.Y,.SP
   7214 00E30D B5 82                        	LDA		reg_cs+2,X
   7215 00E30F 20 49 E8                     	JSR		DispWord
   7216 00E312 B5 80                        	LDA		reg_cs,X
   7217 00E314 20 49 E8                     	JSR		DispWord
   7218 00E317 20 70 E8                     	JSR		space
   7219 00E31A 42 E8                        	INX4
   7220 00E31C E0 1C 00                     	CPX		#28
   7221 00E31F D0 EC                        	BNE		.0002
                                           
   7223 00E321 F4 45 F1                     	PEA		msgRegs2
   7224 00E324 20 BC E7                     	JSR		DisplayString
   7225 00E327 68                           	PLA
   7226 00E328 20 70 E8                     	JSR		space
                                           
                                           	; Display DS
   7229 00E32B A5 86                        	LDA		reg_cs+6
   7230 00E32D 20 49 E8                     	JSR		DispWord
   7231 00E330 A5 84                        	LDA		reg_cs+4
   7232 00E332 20 49 E8                     	JSR		DispWord
   7233 00E335 20 70 E8                     	JSR		space
                                           
                                           	; Display DB
   7236 00E338 A5 A0                        	LDA		reg_cs+32
   7237 00E33A 20 4E E8                     	JSR		DispByte
   7238 00E33D 20 70 E8                     	JSR		space
                                           
                                           	; Display DPR
   7241 00E340 A5 A4                        	LDA		reg_cs+36
   7242 00E342 20 49 E8                     	JSR		DispWord
   7243 00E345 20 70 E8                     	JSR		space
                                           
                                           	; Display back link
   7246 00E348 A5 A8                        	LDA		reg_cs+40
   7247 00E34A 20 49 E8                     	JSR		DispWord
                                           
   7249 00E34D 20 A8 E7                     	JSR		OutCRLF
   7250 00E350 60                           	RTS
                                           
                                           ; Build a startup record from the register values so that a context reg
                                           ; may be loaded
                                           
   7255 00E351                             BuildRec:
   7256 00E351 A5 80                        	LDA		reg_cs
   7257 00E353 8D 00 01                     	STA		ldtrec
   7258 00E356 A5 82                        	LDA		reg_cs+2
   7259 00E358 8D 02 01                     	STA		ldtrec+2
   7260 00E35B A5 84                        	LDA		reg_ds
   7261 00E35D 8D 04 01                     	STA		ldtrec+4
   7262 00E360 A5 86                        	LDA		reg_ds+2
   7263 00E362 8D 06 01                     	STA		ldtrec+6
   7264 00E365 A5 88                        	LDA		reg_pc
   7265 00E367 8D 08 01                     	STA		ldtrec+8
   7266 00E36A A5 8A                        	LDA		reg_pc+2
   7267 00E36C 29 FF 00                     	AND		#$FF
   7268 00E36F E2 30                        	SEP		#$30		; 8 bit regs
                                           	MEM		8
   7270 00E371 EB                           	XBA
   7271 00E372 A5 8C                        	LDA		reg_a
   7272 00E374 EB                           	XBA
   7273 00E375 C2 30                        	REP		#$30
                                           	MEM		16
   7275 00E377 8D 0A 01                     	STA		ldtrec+10
   7276 00E37A A5 8D                        	LDA		reg_a+1
   7277 00E37C 8D 0C 01                     	STA		ldtrec+12
   7278 00E37F A5 8F                        	LDA		reg_a+3
   7279 00E381 8D 0E 01                     	STA		ldtrec+14
   7280 00E384 A5 91                        	LDA		reg_x+1
   7281 00E386 8D 10 01                     	STA		ldtrec+16
   7282 00E389 A5 93                        	LDA		reg_x+3
   7283 00E38B 8D 12 01                     	STA		ldtrec+18
   7284 00E38E A5 95                        	LDA		reg_y+1
   7285 00E390 8D 14 01                     	STA		ldtrec+20
   7286 00E393 A5 97                        	LDA		reg_y+3
   7287 00E395 8D 16 01                     	STA		ldtrec+22
   7288 00E398 A5 99                        	LDA		reg_sp+1
   7289 00E39A 8D 18 01                     	STA		ldtrec+24
   7290 00E39D A5 9B                        	LDA		reg_sp+3
   7291 00E39F 8D 1A 01                     	STA		ldtrec+26
   7292 00E3A2 E2 30                        	SEP		#$30
   7293 00E3A4 A5 9D                        	LDA		reg_sr+1
   7294 00E3A6 8D 1C 01                     	STA		ldtrec+28
   7295 00E3A9 A5 A0                        	LDA		reg_db
   7296 00E3AB 8D 1D 01                     	STA		ldtrec+29
   7297 00E3AE A5 A4                        	LDA		reg_dp
   7298 00E3B0 8D 1E 01                     	STA		ldtrec+30
   7299 00E3B3 A5 A5                        	LDA		reg_dp+1
   7300 00E3B5 8D 1F 01                     	STA		ldtrec+31
   7301 00E3B8 C2 30                        	REP		#$30
   7302 00E3BA 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Dump memory.
                                           ;------------------------------------------------------------------------------
                                           
   7308 00E3BB                             doMemoryDump:
   7309 00E3BB 20 E6 E4                     	JSR		IgnoreBlanks
   7310 00E3BE 20 79 E8                     	JSR		GetRange
   7311 00E3C1 20 A8 E7                     	JSR		OutCRLF
   7312 00E3C4                             .0007:
   7313 00E3C4 A9 3E 00                     	LDA		#'>'
   7314 00E3C7 20 B1 E7                     	JSR		OutChar
   7315 00E3CA 20 D6 E4                     	JSR		DispRangeStart
   7316 00E3CD A0 00 00                     	LDY		#0
   7317 00E3D0                             .0001:
   7318 00E3D0 42 B7 20                     	LDA		{RangeStart},Y
   7319 00E3D3 20 4E E8                     	JSR		DispByte
   7320 00E3D6 A9 20 00                     	LDA		#' '
   7321 00E3D9 20 B1 E7                     	JSR		OutChar
   7322 00E3DC C8                           	INY
   7323 00E3DD C0 08 00                     	CPY		#8
   7324 00E3E0 D0 EE                        	BNE		.0001
   7325 00E3E2 A0 00 00                     	LDY 	#0
   7326 00E3E5                             .0005:
   7327 00E3E5 42 B7 20                     	LDA		{RangeStart},Y
   7328 00E3E8 C9 00 00                     	CMP		#$' '
   7329 00E3EB B0 05                        	BCS		.0002
   7330 00E3ED                             .0004:
   7331 00E3ED A9 2E 00                     	LDA		#'.'
   7332 00E3F0 80 05                        	BRA		.0003
   7333 00E3F2                             .0002:
   7334 00E3F2 C9 7F 00                     	CMP		#$7f
   7335 00E3F5 90 F6                        	BCC		.0004
   7336 00E3F7                             .0003:
   7337 00E3F7 20 B1 E7                     	JSR		OutChar
   7338 00E3FA C8                           	INY
   7339 00E3FB C0 08 00                     	CPY		#8
   7340 00E3FE D0 E5                        	BNE		.0005
   7341 00E400 20 A8 E7                     	JSR		OutCRLF
   7342 00E403 18                           	CLC
   7343 00E404 A5 20                        	LDA		RangeStart
   7344 00E406 69 08 00                     	ADC		#8
   7345 00E409 85 20                        	STA		RangeStart
   7346 00E40B 90 02                        	BCC		.0006
   7347 00E40D E6 22                        	INC		RangeStart+2
   7348 00E40F                             .0006:
   7349 00E40F 38                           	SEC
   7350 00E410 A5 24                        	LDA		RangeEnd
   7351 00E412 E5 20                        	SBC		RangeStart
   7352 00E414 A5 26                        	LDA		RangeEnd+2
   7353 00E416 E5 22                        	SBC		RangeStart+2
   7354 00E418 08                           	PHP
   7355 00E419 20 75 EA                     	JSR		KeybdGetCharNoWait
   7356 00E41C C9 03 00                     	CMP		#CTRLC
   7357 00E41F F0 06                        	BEQ		.0009
   7358 00E421 28                           	PLP
   7359 00E422 10 A0                        	BPL		.0007
   7360 00E424                             .0008:
   7361 00E424 4C E3 E0                     	JMP		Mon1
   7362 00E427                             .0009:
   7363 00E427 28                           	PLP
   7364 00E428 4C E3 E0                     	JMP		Mon1
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Edit memory.
                                           ; ><memory address> <val1> <val2> ... <val8>
                                           ;------------------------------------------------------------------------------
                                           
   7371 00E42B                             doMemoryEdit:
   7372 00E42B 20 E6 E4                     	JSR		IgnoreBlanks
   7373 00E42E 20 A4 E8                     	JSR		GetHexNumber
   7374 00E431 C0 00 00                     	CPY		#0
   7375 00E434 F0 FF AB FC                  	LBEQ	Mon1
   7376 00E438 A5 0C                        	LDA		NumWorkArea
   7377 00E43A 85 20                        	STA		RangeStart
   7378 00E43C A5 0E                        	LDA		NumWorkArea+2
   7379 00E43E 85 22                        	STA		RangeStart+2
   7380 00E440 A0 00 00                     	LDY		#0
   7381 00E443                             .0001:
   7382 00E443 5A                           	PHY
   7383 00E444 20 E6 E4                     	JSR		IgnoreBlanks
   7384 00E447 20 A4 E8                     	JSR		GetHexNumber
   7385 00E44A C0 00 00                     	CPY		#0
   7386 00E44D F0 13                        	BEQ		.0002
   7387 00E44F 7A                           	PLY
   7388 00E450 E2 20                        	SEP		#$20
   7389 00E452 A5 0C                        	LDA		NumWorkArea
   7390 00E454 42 97 20                     	STA		{RangeStart},Y
   7391 00E457 C2 20                        	REP		#$20
   7392 00E459 C8                           	INY
   7393 00E45A C0 08 00                     	CPY		#8
   7394 00E45D D0 E4                        	BNE		.0001
   7395 00E45F 82 81 FC                     	BRL		Mon1
   7396 00E462                             .0002:
   7397 00E462 7A                           	PLY
   7398 00E463 82 7D FC                     	BRL		Mon1
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Disassemble code
                                           ;------------------------------------------------------------------------------
                                           
   7404 00E466                             doDisassemble:
   7405 00E466 20 5C E1                     	JSR		MonGetch
   7406 00E469 C9 4D 00                     	CMP		#'M'
   7407 00E46C F0 11                        	BEQ		.0002
   7408 00E46E                             .0004:
   7409 00E46E C9 4E 00                     	CMP		#'N'
   7410 00E471 D0 1B                        	BNE		.0003
   7411 00E473 E2 20                        	SEP		#$20
                                           	MEM		8
   7413 00E475 A5 BC                        	LDA		$BC
   7414 00E477 09 40                        	ORA		#$40
   7415 00E479 85 BC                        	STA		$BC
   7416 00E47B C2 20                        	REP		#$20
   7417 00E47D 80 11                        	BRA		.0005
   7418 00E47F                             .0002:
   7419 00E47F E2 20                        	SEP		#$20
   7420 00E481 A5 BC                        	LDA		$BC
   7421 00E483 09 80                        	ORA		#$80
   7422 00E485 85 BC                        	STA		$BC
   7423 00E487 C2 20                        	REP		#$20
   7424 00E489 20 5C E1                     	JSR		MonGetch
   7425 00E48C 80 E0                        	BRA		.0004
                                           	MEM		16
   7427 00E48E                             .0003:
   7428 00E48E CA                           	DEX
   7429 00E48F CA                           	DEX
   7430 00E490                             .0005:
   7431 00E490 20 E6 E4                     	JSR		IgnoreBlanks
   7432 00E493 20 79 E8                     	JSR		GetRange
   7433 00E496 A5 20                        	LDA		RangeStart
   7434 00E498 85 8F                        	STA		$8F				; addra
   7435 00E49A A5 21                        	LDA		RangeStart+1
   7436 00E49C 85 90                        	STA		$90
   7437 00E49E 20 A8 E7                     	JSR		OutCRLF
   7438 00E4A1 A0 14 00                     	LDY		#20
   7439 00E4A4                             .0001:
   7440 00E4A4 5A                           	PHY
   7441 00E4A5 E2 30                        	SEP		#$30
   7442 00E4A7 20 6F C6                     	JSR		dpycod
   7443 00E4AA C2 30                        	REP		#$30
   7444 00E4AC 20 A8 E7                     	JSR		OutCRLF
   7445 00E4AF 7A                           	PLY
   7446 00E4B0 88                           	DEY
   7447 00E4B1 D0 F1                        	BNE		.0001
   7448 00E4B3 4C E3 E0                     	JMP		Mon1
                                           
                                           ;$BC flimflag
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Jump to subroutine
                                           ;------------------------------------------------------------------------------
                                           
   7456 00E4B6                             doJump:
   7457 00E4B6 20 E6 E4                     	JSR		IgnoreBlanks
   7458 00E4B9 20 A4 E8                     	JSR		GetHexNumber
   7459 00E4BC C0 00 00                     	CPY		#0
   7460 00E4BF F0 FF 20 FC                  	LBEQ	Mon1
   7461 00E4C3 A9 5C 00                     	LDA		#$5C			; JML opcode
   7462 00E4C6 85 23                        	STA		RangeEnd-1
   7463 00E4C8 A5 0C                        	LDA		NumWorkArea
   7464 00E4CA 85 24                        	STA		RangeEnd
   7465 00E4CC A5 0D                        	LDA		NumWorkArea+1
   7466 00E4CE 85 25                        	STA		RangeEnd+1
   7467 00E4D0 22 24 00                     	JSL		RangeEnd
   7468 00E4D3 82 0D FC                     	BRL		Mon1
                                           
   7470 00E4D6                             DispRangeStart:
   7471 00E4D6 A5 21                        	LDA		RangeStart+1
   7472 00E4D8 20 49 E8                     	JSR		DispWord
   7473 00E4DB A5 20                        	LDA		RangeStart
   7474 00E4DD 20 4E E8                     	JSR		DispByte
   7475 00E4E0 A9 20 00                     	LDA		#' '
   7476 00E4E3 4C B1 E7                     	JMP		OutChar
                                           	
                                           ; Skip over blanks in the input
                                           ;------------------------------------------------------------------------------
                                           
   7481 00E4E6                             IgnoreBlanks:
   7482 00E4E6                             .0001:
   7483 00E4E6 20 5C E1                     	JSR		MonGetch
   7484 00E4E9 C9 20 00                     	CMP		#' '
   7485 00E4EC F0 F8                        	BEQ		.0001
   7486 00E4EE CA                           	DEX
   7487 00E4EF CA                           	DEX
   7488 00E4F0 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ; BIOSInput allows full screen editing of text until a carriage return is keyed
                                           ; at which point the line the cursor is on is copied to a buffer. The buffer
                                           ; must be at least TEXTCOLS characters in size.
                                           ;------------------------------------------------------------------------------
                                           ;
   7496 00E4F1                             BIOSInput:
   7497 00E4F1                             .bin1:
   7498 00E4F1 20 80 EA                     	JSR		KeybdGetCharWait
   7499 00E4F4 29 FF 00                     	AND		#$FF
   7500 00E4F7 C9 0D 00                     	CMP		#CR
   7501 00E4FA F0 05                        	BEQ		.bin2
   7502 00E4FC 20 B1 E7                     	JSR		OutChar
   7503 00E4FF 80 F0                        	BRA		.bin1
   7504 00E501                             .bin2:
   7505 00E501 A5 30                        	LDA		CursorX
   7506 00E503 F0 1A                        	BEQ		.bin4
   7507 00E505 A5 34                        	LDA		VideoPos	; get current video position
   7508 00E507 38                           	SEC
   7509 00E508 E5 30                        	SBC		CursorX		; go back to the start of the line
   7510 00E50A 0A                           	ASL
   7511 00E50B AA                           	TAX
   7512 00E50C                             .bin3:
   7513 00E50C BF 00 00 FD                  	LDA		VIDBUF,X
   7514 00E510 29 FF 00                     	AND		#$FF
   7515 00E513 93 03                        	STA		(3,s),Y
   7516 00E515 E8                           	INX
   7517 00E516 E8                           	INX
   7518 00E517 C8                           	INY
   7519 00E518 C6 30                        	DEC		CursorX
   7520 00E51A D0 F0                        	BNE		.bin3
   7521 00E51C A9 00 00                     	LDA		#0
   7522 00E51F                             .bin4:
   7523 00E51F 93 03                        	STA		(3,s),Y	; NULL terminate buffer
   7524 00E521 60                           	RTS
                                           
   7526 00E522                             .st0003:
   7527 00E522 AF 10 A1 FE                  	LDA		KEYBD
   7528 00E526 10 FA                        	BPL		.st0003
   7529 00E528 48                           	PHA					; save off the char (we need to trash acc)
   7530 00E529 AF 14 A1 FE                  	LDA		KEYBD+4		; clear keyboard strobe (must be a read operation)
   7531 00E52D 68                           	PLA					; restore char
   7532 00E52E 20 D2 E5                     	JSR		DisplayChar
   7533 00E531 80 EF                        	BRA		.st0003
   7534 00E533 A0 00 00                     	ldy		#$0000
   7535 00E536                             .st0001:
   7536 00E536 A2 00 00                     	ldx		#$0000
   7537 00E539                             .st0002:
   7538 00E539 E8                           	inx
   7539 00E53A D0 FD                        	bne		.st0002
   7540 00E53C 20 5F E5                     	jsr		echo_switch
   7541 00E53F C8                           	iny
   7542 00E540 80 F4                        	bra		.st0001
                                           
   7544 00E542                             msgStarting:
   7545 00E542 46 54 38 33 32 20 54 65      	.byte	"FT832 Test System Starting",CR,LF,0
   7545 00E54A 73 74 20 53 79 73 74 65    
   7545 00E552 6D 20 53 74 61 72 74 69    
   7545 00E55A 6E 67 0D 0A 00             
                                           
   7547 00E55F                             echo_switch:
   7548 00E55F AD 00 71                     	lda		$7100
   7549 00E562 8D 00 70                     	sta		$7000
   7550 00E565 60                           	rts
                                           
                                           ;------------------------------------------------------------------------------
                                           ; On entry to the SSM task the .A register will be set to the task number
                                           ; being single stepped. The .X register will contain the address of the
                                           ; next instruction to execute.
                                           ;------------------------------------------------------------------------------
                                           
   7558 00E566                             SSMTask:
   7559 00E566 85 BA                        	STA		WorkTR
   7560 00E568 20 B0 E2                     	JSR		DispRegs
   7561 00E56B                             .0004:
   7562 00E56B A9 53 00                     	LDA		#'S'
   7563 00E56E 20 B1 E7                     	JSR		OutChar
   7564 00E571 20 B1 E7                     	JSR		OutChar
   7565 00E574 A9 4D 00                     	LDA		#'M'
   7566 00E577 20 B1 E7                     	JSR		OutChar
   7567 00E57A A9 3E 00                     	LDA		#'>'
   7568 00E57D 20 B1 E7                     	JSR		OutChar
   7569 00E580 20 80 EA                     	JSR		KeybdGetCharWait
   7570 00E583 29 FF 00                     	AND		#$FF
   7571 00E586 C9 53 00                     	CMP		#'S'		; step
   7572 00E589 D0 04                        	BNE		.0001
   7573 00E58B                             .0002:
   7574 00E58B 42 60                        	RTT
   7575 00E58D 80 D7                        	BRA		SSMTask
   7576 00E58F                             .0001:
   7577 00E58F C9 58 00                     	CMP		#'X'
   7578 00E592 D0 F7                        	BNE		.0002
   7579 00E594 A5 9C                        	LDA		reg_sr
   7580 00E596 29 FF FD                     	AND		#$FDFF
   7581 00E599 85 9C                        	STA		reg_sr
   7582 00E59B 20 51 E3                     	JSR		BuildRec
   7583 00E59E A6 BA                        	LDX		WorkTR
   7584 00E5A0 42 6C 00 01 00 00            	LDT		ldtrec
   7585 00E5A6 42 60                        	RTT
   7586 00E5A8 80 BC                        	BRA		SSMTask
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Convert Ascii character to screen character.
                                           ;------------------------------------------------------------------------------
                                           
   7592 00E5AA                             AsciiToScreen:
   7593 00E5AA 29 FF 00                     	AND		#$FF
   7594 00E5AD 89 20 00                     	BIT		#%00100000	; if bit 5 isn't set
   7595 00E5B0 F0 08                        	BEQ		.00001
   7596 00E5B2 89 40 00                     	BIT		#%01000000	; or bit 6 isn't set
   7597 00E5B5 F0 03                        	BEQ		.00001
   7598 00E5B7 29 9F 00                     	AND		#%10011111
   7599 00E5BA                             .00001:
   7600 00E5BA 60                           	rts
                                           
                                           	MEM		8
   7603 00E5BB                             AsciiToScreen8:
   7604 00E5BB 89 20                        	BIT		#%00100000	; if bit 5 isn't set
   7605 00E5BD F0 06                        	BEQ		.00001
   7606 00E5BF 89 40                        	BIT		#%01000000	; or bit 6 isn't set
   7607 00E5C1 F0 02                        	BEQ		.00001
   7608 00E5C3 29 9F                        	AND		#%10011111
   7609 00E5C5                             .00001:
   7610 00E5C5 60                           	rts
                                           
                                           	MEM		16
                                           ;------------------------------------------------------------------------------
                                           ; Convert screen character to ascii character
                                           ;------------------------------------------------------------------------------
                                           ;
   7617 00E5C6                             ScreenToAscii:
   7618 00E5C6 29 FF 00                     	AND		#$FF
   7619 00E5C9 C9 1B 00                     	CMP		#26+1
   7620 00E5CC B0 03                        	BCS		.0001
   7621 00E5CE 69 60 00                     	ADC		#$60
   7622 00E5D1                             .0001:
   7623 00E5D1 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Display a character on the screen device
                                           ;------------------------------------------------------------------------------
                                           ;
   7629 00E5D2                             DisplayChar:
   7630 00E5D2 29 FF 00                     	AND		#$0FF
   7631 00E5D5 24 3C                        	BIT		EscState
   7632 00E5D7 30 FF 8A 00                  	LBMI	processEsc
   7633 00E5DB C9 08 00                     	CMP		#BS
   7634 00E5DE F0 FF 33 01                  	LBEQ	doBackSpace
   7635 00E5E2 C9 91 00                     	CMP		#$91			; cursor right
   7636 00E5E5 F0 FF 7D 01                  	LBEQ	doCursorRight
   7637 00E5E9 C9 93 00                     	CMP		#$93			; cursor left
   7638 00E5EC F0 FF 82 01                  	LBEQ	doCursorLeft
   7639 00E5F0 C9 90 00                     	CMP		#$90			; cursor up
   7640 00E5F3 F0 FF 82 01                  	LBEQ	doCursorUp
   7641 00E5F7 C9 92 00                     	CMP		#$92			; cursor down
   7642 00E5FA F0 FF 82 01                  	LBEQ	doCursorDown
   7643 00E5FE C9 99 00                     	CMP		#$99			; delete
   7644 00E601 F0 FF 37 01                  	LBEQ	doDelete
   7645 00E605 C9 0D 00                     	CMP		#CR
   7646 00E608 F0 47                        	BEQ		doCR
   7647 00E60A C9 0A 00                     	CMP		#LF
   7648 00E60D F0 47                        	BEQ		doLF
   7649 00E60F C9 94 00                     	CMP		#$94
   7650 00E612 F0 FF 48 01                  	LBEQ	doCursorHome	; cursor home
   7651 00E616 C9 1B 00                     	CMP		#ESC
   7652 00E619 D0 05                        	BNE		.0003
   7653 00E61B 64 3C                        	STZ		EscState		; put a -1 in the escape state
   7654 00E61D C6 3C                        	DEC		EscState
   7655 00E61F 60                           	RTS
   7656 00E620                             .0003:
   7657 00E620 20 AA E5                     	JSR		AsciiToScreen
   7658 00E623 05 36                        	ORA		NormAttr
   7659 00E625 48                           	PHA
   7660 00E626 A5 34                        	LDA		VideoPos
   7661 00E628 0A                           	ASL
   7662 00E629 AA                           	TAX
   7663 00E62A 68                           	PLA
   7664 00E62B 9F 00 00 FD                  	STA		VIDBUF,X
   7665 00E62F A5 30                        	LDA		CursorX
   7666 00E631 1A                           	INA
   7667 00E632 C9 54 00                     	CMP		#TEXTCOLS
   7668 00E635 D0 15                        	BNE		.0001
   7669 00E637 64 30                        	STZ		CursorX
   7670 00E639 A5 32                        	LDA		CursorY
   7671 00E63B C9 1E 00                     	CMP		#TEXTROWS-1
   7672 00E63E F0 06                        	BEQ		.0002
   7673 00E640 1A                           	INA
   7674 00E641 85 32                        	STA		CursorY
   7675 00E643 82 4E 01                     	BRL		SyncVideoPos
   7676 00E646                             .0002:
   7677 00E646 20 94 E7                     	JSR		SyncVideoPos
   7678 00E649 82 C7 01                     	BRL		ScrollUp
   7679 00E64C                             .0001:
   7680 00E64C 85 30                        	STA		CursorX
   7681 00E64E 82 43 01                     	BRL		SyncVideoPos
   7682 00E651                             doCR:
   7683 00E651 64 30                        	STZ		CursorX
   7684 00E653 82 3E 01                     	BRL		SyncVideoPos
   7685 00E656                             doLF:
   7686 00E656 A5 32                        	LDA		CursorY
   7687 00E658 C9 1E 00                     	CMP		#TEXTROWS-1
   7688 00E65B F0 FF B4 01                  	LBEQ	ScrollUp
   7689 00E65F 1A                           	INA
   7690 00E660 85 32                        	STA		CursorY
   7691 00E662 82 2F 01                     	BRL		SyncVideoPos
                                           
   7693 00E665                             processEsc:
   7694 00E665 A6 3C                        	LDX		EscState
   7695 00E667 E0 FF FF                     	CPX		#-1
   7696 00E66A D0 44                        	BNE		.0006
   7697 00E66C C9 54 00                     	CMP		#'T'	; clear to EOL
   7698 00E66F D0 1C                        	BNE		.0003
   7699 00E671 A5 34                        	LDA		VideoPos
   7700 00E673 0A                           	ASL
   7701 00E674 AA                           	TAX
   7702 00E675 A4 30                        	LDY		CursorX
   7703 00E677                             .0001:
   7704 00E677 C0 53 00                     	CPY		#TEXTCOLS-1
   7705 00E67A F0 0E                        	BEQ		.0002
   7706 00E67C A9 20 00                     	LDA		#' '
   7707 00E67F 05 36                        	ORA		NormAttr
   7708 00E681 9F 00 00 FD                  	STA		VIDBUF,X
   7709 00E685 E8                           	INX
   7710 00E686 E8                           	INX
   7711 00E687 C8                           	INY
   7712 00E688 D0 ED                        	BNE		.0001
   7713 00E68A                             .0002:
   7714 00E68A 64 3C                        	STZ		EscState
   7715 00E68C 60                           	RTS
   7716 00E68D                             .0003:
   7717 00E68D C9 57 00                     	CMP		#'W'
   7718 00E690 D0 05                        	BNE		.0004
   7719 00E692 64 3C                        	STZ		EscState
   7720 00E694 82 A5 00                     	BRL		doDelete
   7721 00E697                             .0004:
   7722 00E697 C9 60 00                     	CMP		#'`'
   7723 00E69A D0 06                        	BNE		.0005
   7724 00E69C A9 FE FF                     	LDA		#-2
   7725 00E69F 85 3C                        	STA		EscState
   7726 00E6A1 60                           	RTS
   7727 00E6A2                             .0005:
   7728 00E6A2 C9 28 00                     	CMP		#'('
   7729 00E6A5 D0 06                        	BNE		.0008
   7730 00E6A7 A9 FD FF                     	LDA		#-3
   7731 00E6AA 85 3C                        	STA		EscState
   7732 00E6AC 60                           	RTS
   7733 00E6AD                             .0008:
   7734 00E6AD 64 3C                        	STZ		EscState
   7735 00E6AF 60                           	RTS
   7736 00E6B0                             .0006:
   7737 00E6B0 E0 FE FF                     	CPX		#-2
   7738 00E6B3 D0 11                        	BNE		.0007
   7739 00E6B5 64 3C                        	STZ		EscState
   7740 00E6B7 C9 31 00                     	CMP		#'1'
   7741 00E6BA F0 FF 29 01                  	LBEQ	CursorOn
   7742 00E6BE C9 30 00                     	CMP		#'0'
   7743 00E6C1 F0 FF 2C 01                  	LBEQ	CursorOff
   7744 00E6C5 60                           	RTS
   7745 00E6C6                             .0007:
   7746 00E6C6 E0 FD FF                     	CPX		#-3
   7747 00E6C9 D0 0B                        	BNE		.0009
   7748 00E6CB C9 1B 00                     	CMP		#ESC
   7749 00E6CE D0 DD                        	BNE		.0008
   7750 00E6D0 A9 FC FF                     	LDA		#-4
   7751 00E6D3 85 3C                        	STA		EscState
   7752 00E6D5 60                           	RTS
   7753 00E6D6                             .0009:
   7754 00E6D6 E0 FC FF                     	CPX		#-4
   7755 00E6D9 D0 0B                        	BNE		.0010
   7756 00E6DB C9 47 00                     	CMP		#'G'
   7757 00E6DE D0 CD                        	BNE		.0008
   7758 00E6E0 A9 FB FF                     	LDA		#-5
   7759 00E6E3 85 3C                        	STA		EscState
   7760 00E6E5 60                           	RTS
   7761 00E6E6                             .0010:
   7762 00E6E6 E0 FB FF                     	CPX		#-5
   7763 00E6E9 D0 C2                        	BNE		.0008
   7764 00E6EB 64 3C                        	STZ		EscState
   7765 00E6ED C9 34 00                     	CMP		#'4'
   7766 00E6F0 D0 12                        	BNE		.0011
   7767 00E6F2 A5 36                        	LDA		NormAttr
                                           	; Swap the high nybbles of the attribute
   7769 00E6F4 EB                           	XBA				
   7770 00E6F5 E2 30                        	SEP		#$30		; set 8 bit regs
                                           	NDX		8			; tell the assembler
                                           	MEM		8
   7773 00E6F7 2A                           	ROL
   7774 00E6F8 2A                           	ROL
   7775 00E6F9 2A                           	ROL
   7776 00E6FA 2A                           	ROL
   7777 00E6FB C2 30                        	REP		#$30		; set 16 bit regs
                                           	NDX		16			; tell the assembler
                                           	MEM		16
   7780 00E6FD EB                           	XBA
   7781 00E6FE 29 00 FF                     	AND		#$FF00
   7782 00E701 85 36                        	STA		NormAttr
   7783 00E703 60                           	RTS
   7784 00E704                             .0011:
   7785 00E704 C9 30 00                     	CMP		#'0'
   7786 00E707 D0 06                        	BNE		.0012
   7787 00E709 A9 00 BF                     	LDA		#$BF00		; Light Grey on Dark Grey
   7788 00E70C 85 36                        	STA		NormAttr
   7789 00E70E 60                           	RTS
   7790 00E70F                             .0012:
   7791 00E70F A9 00 BF                     	LDA		#$BF00		; Light Grey on Dark Grey
   7792 00E712 85 36                        	STA		NormAttr
   7793 00E714 60                           	RTS
                                           
   7795 00E715                             doBackSpace:
   7796 00E715 A4 30                        	LDY		CursorX
   7797 00E717 F0 22                        	BEQ		.0001		; Can't backspace anymore
   7798 00E719 A5 34                        	LDA		VideoPos
   7799 00E71B 0A                           	ASL
   7800 00E71C AA                           	TAX
   7801 00E71D                             .0002:
   7802 00E71D BF 00 00 FD                  	LDA		VIDBUF,X
   7803 00E721 9F FE FF FC                  	STA		VIDBUF-2,X
   7804 00E725 E8                           	INX
   7805 00E726 E8                           	INX
   7806 00E727 C8                           	INY
   7807 00E728 C0 54 00                     	CPY		#TEXTCOLS
   7808 00E72B D0 F0                        	BNE		.0002
   7809 00E72D                             .0003:
   7810 00E72D A9 20 00                     	LDA		#' '
   7811 00E730 05 36                        	ORA		NormAttr
   7812 00E732 9F 00 00 FD                  	STA		VIDBUF,X
   7813 00E736 C6 30                        	DEC		CursorX
   7814 00E738 82 59 00                     	BRL		SyncVideoPos
   7815 00E73B                             .0001:
   7816 00E73B 60                           	RTS
                                           
                                           ; Deleting a character does not change the video position so there's no need
                                           ; to resynchronize it.
                                           
   7821 00E73C                             doDelete:
   7822 00E73C A4 30                        	LDY		CursorX
   7823 00E73E A5 34                        	LDA		VideoPos
   7824 00E740 0A                           	ASL
   7825 00E741 AA                           	TAX
   7826 00E742                             .0002:
   7827 00E742 C0 53 00                     	CPY		#TEXTCOLS-1
   7828 00E745 F0 0D                        	BEQ		.0001
   7829 00E747 BF 02 00 FD                  	LDA		VIDBUF+2,X
   7830 00E74B 9F 00 00 FD                  	STA		VIDBUF,X
   7831 00E74F E8                           	INX
   7832 00E750 E8                           	INX
   7833 00E751 C8                           	INY
   7834 00E752 80 EE                        	BRA		.0002
   7835 00E754                             .0001:
   7836 00E754 A9 20 00                     	LDA		#' '
   7837 00E757 05 36                        	ORA		NormAttr
   7838 00E759 9F 00 00 FD                  	STA		VIDBUF,X
   7839 00E75D 60                           	RTS
                                           
   7841 00E75E                             doCursorHome:
   7842 00E75E A5 30                        	LDA		CursorX
   7843 00E760 F0 26                        	BEQ		doCursor1
   7844 00E762 64 30                        	STZ		CursorX
   7845 00E764 80 2E                        	BRA		SyncVideoPos
   7846 00E766                             doCursorRight:
   7847 00E766 A5 30                        	LDA		CursorX
   7848 00E768 C9 53 00                     	CMP		#TEXTCOLS-1
   7849 00E76B F0 1F                        	BEQ		doRTS
   7850 00E76D 1A                           	INA
   7851 00E76E                             doCursor2:
   7852 00E76E 85 30                        	STA		CursorX
   7853 00E770 80 22                        	BRA		SyncVideoPos
   7854 00E772                             doCursorLeft:
   7855 00E772 A5 30                        	LDA		CursorX
   7856 00E774 F0 16                        	BEQ		doRTS
   7857 00E776 3A                           	DEA
   7858 00E777 80 F5                        	BRA		doCursor2
   7859 00E779                             doCursorUp:
   7860 00E779 A5 32                        	LDA		CursorY
   7861 00E77B F0 0F                        	BEQ		doRTS
   7862 00E77D 3A                           	DEA
   7863 00E77E 80 08                        	BRA		doCursor1
   7864 00E780                             doCursorDown:
   7865 00E780 A5 32                        	LDA		CursorY
   7866 00E782 C9 1E 00                     	CMP		#TEXTROWS-1
   7867 00E785 F0 05                        	BEQ		doRTS
   7868 00E787 1A                           	INA
   7869 00E788                             doCursor1:
   7870 00E788 85 32                        	STA		CursorY
   7871 00E78A 80 08                        	BRA		SyncVideoPos
   7872 00E78C                             doRTS:
   7873 00E78C 60                           	RTS
                                           
   7875 00E78D                             HomeCursor:
   7876 00E78D A9 00 00                     	LDA		#0
   7877 00E790 64 30                        	STZ		CursorX
   7878 00E792 64 32                        	STZ		CursorY
                                           
                                           ; Synchronize the absolute video position with the cursor co-ordinates.
                                           ;
   7882 00E794                             SyncVideoPos:
   7883 00E794 A5 32                        	LDA		CursorY
   7884 00E796 8D 00 70                     	STA		$7000
   7885 00E799 0A                           	ASL
   7886 00E79A AA                           	TAX
   7887 00E79B BD C3 EF                     	LDA		LineTbl,X
   7888 00E79E 18                           	CLC
   7889 00E79F 65 30                        	ADC		CursorX
   7890 00E7A1 85 34                        	STA		VideoPos
   7891 00E7A3 8F 0D A0 FE                  	STA		VIDREGS+13		; Update the position in the text controller
   7892 00E7A7 60                           	RTS
                                           
   7894 00E7A8                             OutCRLF:
   7895 00E7A8 A9 0D 00                     	LDA		#CR
   7896 00E7AB 20 B1 E7                     	JSR		OutChar
   7897 00E7AE A9 0A 00                     	LDA		#LF
                                           
   7899 00E7B1                             OutChar:
   7900 00E7B1 DA                           	PHX
   7901 00E7B2 5A                           	PHY
   7902 00E7B3 A2 00 00                     	LDX		#0
   7903 00E7B6 FC F0 03                     	JSR		(OutputVec,x)
   7904 00E7B9 7A                           	PLY
   7905 00E7BA FA                           	PLX
   7906 00E7BB 60                           	RTS
                                           
   7908 00E7BC                             DisplayString:
                                           ;	PLA							; pop return address
                                           ;	PLX							; get string address parameter
                                           ;	PHA							; push return address
   7912 00E7BC 08                           	PHP							; push reg settings
   7913 00E7BD E2 20                        	SEP		#$20				; ACC = 8 bit
                                           	MEM		8
                                           ;	STX		StringPos
   7916 00E7BF A0 00 00                     	LDY		#0
   7917 00E7C2                             .0002:
   7918 00E7C2 B3 04                        	LDA		(4,S),Y
   7919 00E7C4 F0 06                        	BEQ		.0001
   7920 00E7C6 20 E3 EE                     	JSR		SuperPutch
   7921 00E7C9 C8                           	INY
   7922 00E7CA 80 F6                        	BRA		.0002
   7923 00E7CC                             .0001:
   7924 00E7CC 28                           	PLP							; restore regs settings
                                           ;	REP		#$20				; ACC 16 bits
                                           	MEM		16
   7927 00E7CD 60                           	RTS
                                           
   7929 00E7CE                             DisplayString2:
   7930 00E7CE 68                           	PLA							; pop return address
   7931 00E7CF FA                           	PLX							; get string address parameter
   7932 00E7D0 48                           	PHA							; push return address
   7933 00E7D1 E2 20                        	SEP		#$20				; ACC = 8 bit
   7934 00E7D3 86 38                        	STX		StringPos
   7935 00E7D5 A0 00 00                     	LDY		#0
   7936 00E7D8 A2 32 00                     	LDX		#50
   7937 00E7DB                             .0002:
   7938 00E7DB B1 38                        	LDA		(StringPos),Y
   7939 00E7DD 20 E3 EE                     	JSR		SuperPutch
   7940 00E7E0 C8                           	INY
   7941 00E7E1 CA                           	DEX
   7942 00E7E2 D0 F7                        	BNE		.0002
   7943 00E7E4                             .0001:
   7944 00E7E4 C2 20                        	REP		#$20				; ACC 16 bits
   7945 00E7E6 60                           	RTS
                                           
   7947 00E7E7                             CursorOn:
   7948 00E7E7 48                           	PHA
   7949 00E7E8 A9 60 1F                     	LDA		#$1F60
   7950 00E7EB 8F 09 A0 FE                  	STA		VIDREGS+9
   7951 00E7EF 68                           	PLA
   7952 00E7F0 60                           	RTS
                                           
   7954 00E7F1                             CursorOff:
   7955 00E7F1 48                           	PHA
   7956 00E7F2 A9 20 00                     	LDA		#$0020
   7957 00E7F5 8F 09 A0 FE                  	STA		VIDREGS+9
   7958 00E7F9 68                           	PLA
   7959 00E7FA 60                           	RTS
                                           
   7961 00E7FB                             ClearScreen:
   7962 00E7FB A0 2C 0A                     	LDY		#TEXTROWS*TEXTCOLS
   7963 00E7FE A2 00 00                     	LDX		#$00
   7964 00E801 A9 20 00                     	LDA		#' '
   7965 00E804 20 AA E5                     	JSR		AsciiToScreen
   7966 00E807 05 36                        	ORA		NormAttr
   7967 00E809                             .0001:
   7968 00E809 9F 00 00 FD                  	STA		VIDBUF,X
   7969 00E80D E8                           	INX
   7970 00E80E E8                           	INX
   7971 00E80F 88                           	DEY
   7972 00E810 D0 F7                        	BNE		.0001
   7973 00E812 60                           	RTS
                                           
   7975 00E813                             ScrollUp:
   7976 00E813 A2 00 00                     	LDX		#0
   7977 00E816 A0 2C 0A                     	LDY 	#TEXTROWS*TEXTCOLS
   7978 00E819                             .0001:
   7979 00E819 BF A8 00 FD                  	LDA		VIDBUF+TEXTCOLS*2,X
   7980 00E81D 9F 00 00 FD                  	STA		VIDBUF,X
   7981 00E821 E8                           	INX
   7982 00E822 E8                           	INX
   7983 00E823 88                           	DEY
   7984 00E824 D0 F3                        	BNE		.0001
   7985 00E826 A9 1E 00                     	LDA		#TEXTROWS-1
                                           
   7987 00E829                             BlankLine:
   7988 00E829 0A                           	ASL
   7989 00E82A AA                           	TAX
   7990 00E82B BD C3 EF                     	LDA		LineTbl,X
   7991 00E82E 0A                           	ASL
   7992 00E82F AA                           	TAX
   7993 00E830 A0 54 00                     	LDY		#TEXTCOLS
   7994 00E833 A5 36                        	LDA		NormAttr
   7995 00E835 09 20 00                     	ORA		#$20
   7996 00E838                             .0001:
   7997 00E838 9F 00 00 FD                  	STA		VIDBUF,X
   7998 00E83C E8                           	INX
   7999 00E83D E8                           	INX
   8000 00E83E 88                           	DEY
   8001 00E83F D0 F7                        	BNE		.0001
   8002 00E841 60                           	RTS
                                           
   8004 00E842                             DispDWord:
   8005 00E842 42 EB                        	XBAW
   8006 00E844 20 49 E8                     	JSR		DispWord
   8007 00E847 42 EB                        	XBAW
   8008 00E849                             DispWord:
   8009 00E849 EB                           	XBA
   8010 00E84A 20 4E E8                     	JSR		DispByte
   8011 00E84D EB                           	XBA
   8012 00E84E                             DispByte:
   8013 00E84E 48                           	PHA
   8014 00E84F 4A                           	LSR
   8015 00E850 4A                           	LSR
   8016 00E851 4A                           	LSR
   8017 00E852 4A                           	LSR
   8018 00E853 20 57 E8                     	JSR		DispNybble
   8019 00E856 68                           	PLA
   8020 00E857                             DispNybble:
   8021 00E857 48                           	PHA
   8022 00E858 29 0F 00                     	AND		#$0F
   8023 00E85B C9 0A 00                     	CMP		#10
   8024 00E85E 90 08                        	BCC		.0001
   8025 00E860 69 36 00                     	ADC		#'A'-11			; -11 cause the carry is set
   8026 00E863 20 B1 E7                     	JSR		OutChar
   8027 00E866 68                           	PLA
   8028 00E867 60                           	RTS
   8029 00E868                             .0001:
   8030 00E868 09 30 00                     	ORA		#'0'
   8031 00E86B 20 B1 E7                     	JSR		OutChar
   8032 00E86E 68                           	PLA
   8033 00E86F 60                           	RTS
                                           
   8035 00E870                             space:
   8036 00E870 48                           	PHA
   8037 00E871 A9 20 00                     	LDA		#' '
   8038 00E874 20 B1 E7                     	JSR		OutChar
   8039 00E877 68                           	PLA
   8040 00E878 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Get a range (two hex numbers)
                                           ;------------------------------------------------------------------------------
                                           
   8046 00E879                             GetRange:
   8047 00E879 20 E6 E4                     	JSR		IgnoreBlanks
   8048 00E87C 20 A4 E8                     	JSR		GetHexNumber
   8049 00E87F C0 00 00                     	CPY		#0
   8050 00E882 F0 1F                        	BEQ		.0001
   8051 00E884 A5 0C                        	LDA		NumWorkArea
   8052 00E886 85 20                        	STA		RangeStart
   8053 00E888 85 24                        	STA		RangeEnd
   8054 00E88A A5 0E                        	LDA		NumWorkArea+2
   8055 00E88C 85 22                        	STA		RangeStart+2
   8056 00E88E 85 26                        	STA		RangeEnd+2
   8057 00E890 20 E6 E4                     	JSR		IgnoreBlanks
   8058 00E893 20 A4 E8                     	JSR		GetHexNumber
   8059 00E896 C0 00 00                     	CPY		#0
   8060 00E899 F0 08                        	BEQ		.0001
   8061 00E89B A5 0C                        	LDA		NumWorkArea
   8062 00E89D 85 24                        	STA		RangeEnd
   8063 00E89F A5 0E                        	LDA		NumWorkArea+2
   8064 00E8A1 85 26                        	STA		RangeEnd+2
   8065 00E8A3                             .0001:
   8066 00E8A3 60                           	RTS
                                           	
                                           ; Get a hexidecimal number. Maximum of six digits.
                                           ; .X = text pointer (updated)
                                           ;------------------------------------------------------------------------------
                                           ;
   8072 00E8A4                             GetHexNumber:
   8073 00E8A4 A0 00 00                     	LDY		#0					; maximum of eight digits
   8074 00E8A7 64 0C                        	STZ		NumWorkArea
   8075 00E8A9 64 0E                        	STZ		NumWorkArea+2
   8076 00E8AB                             gthxn2:
   8077 00E8AB 20 5C E1                     	JSR		MonGetch
   8078 00E8AE 20 D1 E8                     	JSR		AsciiToHexNybble
   8079 00E8B1 30 1B                        	BMI		gthxn1
   8080 00E8B3 06 0C                        	ASL		NumWorkArea
   8081 00E8B5 26 0E                        	ROL		NumWorkArea+2
   8082 00E8B7 06 0C                        	ASL		NumWorkArea
   8083 00E8B9 26 0E                        	ROL		NumWorkArea+2
   8084 00E8BB 06 0C                        	ASL		NumWorkArea
   8085 00E8BD 26 0E                        	ROL		NumWorkArea+2
   8086 00E8BF 06 0C                        	ASL		NumWorkArea
   8087 00E8C1 26 0E                        	ROL		NumWorkArea+2
   8088 00E8C3 05 0C                        	ORA		NumWorkArea
   8089 00E8C5 85 0C                        	STA		NumWorkArea
   8090 00E8C7 C8                           	INY
   8091 00E8C8 C0 08 00                     	CPY		#8
   8092 00E8CB D0 DE                        	BNE		gthxn2
   8093 00E8CD 60                           	RTS
   8094 00E8CE                             gthxn1:
   8095 00E8CE CA                           	DEX
   8096 00E8CF CA                           	DEX
   8097 00E8D0 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Convert ASCII character in the range '0' to '9', 'a' to 'f' or 'A' to 'F'
                                           ; to a hex nybble.
                                           ;------------------------------------------------------------------------------
                                           ;
   8104 00E8D1                             AsciiToHexNybble:
   8105 00E8D1 C9 30 00                     	CMP		#'0'
   8106 00E8D4 90 30                        	BCC		gthx3
   8107 00E8D6 C9 3A 00                     	CMP		#'9'+1
   8108 00E8D9 B0 05                        	BCS		gthx5
   8109 00E8DB 38                           	SEC
   8110 00E8DC E9 30 00                     	SBC		#'0'
   8111 00E8DF 60                           	RTS
   8112 00E8E0                             gthx5:
   8113 00E8E0 C9 41 00                     	CMP		#'A'
   8114 00E8E3 90 21                        	BCC		gthx3
   8115 00E8E5 C9 47 00                     	CMP		#'F'+1
   8116 00E8E8 B0 09                        	BCS		gthx6
   8117 00E8EA 38                           	SEC
   8118 00E8EB E9 41 00                     	SBC		#'A'
   8119 00E8EE 18                           	CLC
   8120 00E8EF 69 0A 00                     	ADC		#10
   8121 00E8F2 60                           	RTS
   8122 00E8F3                             gthx6:
   8123 00E8F3 C9 61 00                     	CMP		#'a'
   8124 00E8F6 90 0E                        	BCC		gthx3
   8125 00E8F8 C9 7B 00                     	CMP		#'z'+1
   8126 00E8FB B0 09                        	BCS		gthx3
   8127 00E8FD 38                           	SEC
   8128 00E8FE E9 61 00                     	SBC		#'a'
   8129 00E901 18                           	CLC
   8130 00E902 69 0A 00                     	ADC		#10
   8131 00E905 60                           	RTS
   8132 00E906                             gthx3:
   8133 00E906 A9 FF FF                     	LDA		#-1		; not a hex number
   8134 00E909 60                           	RTS
                                           
   8136 00E90A                             AsciiToDecNybble:
   8137 00E90A C9 30 00                     	CMP		#'0'
   8138 00E90D 90 0A                        	BCC		gtdc3
   8139 00E90F C9 3A 00                     	CMP		#'9'+1
   8140 00E912 B0 05                        	BCS		gtdc3
   8141 00E914 38                           	SEC
   8142 00E915 E9 30 00                     	SBC		#'0'
   8143 00E918 60                           	RTS
   8144 00E919                             gtdc3:
   8145 00E919 A9 FF FF                     	LDA		#-1
   8146 00E91C 60                           	RTS
                                           
   8148 00E91D                             getcharNoWait:
   8149 00E91D A9 01 00                     	LDA		#1
   8150 00E920 42 5B 85 B8                  	STA		ZS:keybd_cmd
   8151 00E924 42 A2 06 00                  	TSK		#6
   8152 00E928 42 5B A5 B6                  	LDA		ZS:keybd_char
   8153 00E92C 10 02                        	BPL		.0001
   8154 00E92E 38                           	SEC
   8155 00E92F 60                           	RTS
   8156 00E930                             .0001:
   8157 00E930 18                           	CLC
   8158 00E931 60                           	RTS
                                           
   8160 00E932                             getcharWait:
   8161 00E932 A9 02 00                     	LDA		#2
   8162 00E935 42 5B 85 B8                  	STA		ZS:keybd_cmd
   8163 00E939 42 A2 06 00                  	TSK		#6
   8164 00E93D 42 5B A5 B6                  	LDA		ZS:keybd_char
   8165 00E941 10 02                        	BPL		.0001
   8166 00E943 38                           	SEC
   8167 00E944 60                           	RTS
   8168 00E945                             .0001:
   8169 00E945 18                           	CLC
   8170 00E946 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ;------------------------------------------------------------------------------
                                           ; Keyboard processing routines follow.
                                           ;------------------------------------------------------------------------------
                                           ;------------------------------------------------------------------------------
                                           
   8178 00E947                             KeybdInit:
   8179 00E947 A9 00 20                     	LDA		#$2000
   8180 00E94A 1B                           	TAS
   8181 00E94B 64 B8                        	STZ		keybd_cmd
   8182 00E94D E2 30                        	SEP		#$30
                                           	MEM		8
                                           	NDX		8
   8185 00E94F 64 08                        	STZ		KeyState1
   8186 00E951 64 09                        	STZ		KeyState2
   8187 00E953 A0 05                        	LDY		#$5
   8188 00E955                             .0001:
   8189 00E955 20 F1 E9                     	JSR		KeybdRecvByte	; Look for $AA
   8190 00E958 90 04                        	BCC		.0002
   8191 00E95A C9 AA                        	CMP		#$AA			;
   8192 00E95C F0 25                        	BEQ		.config
   8193 00E95E                             .0002:
   8194 00E95E 20 42 EA                     	JSR		Wait10ms
   8195 00E961 A9 FF                        	LDA		#$FF			; send reset code to keyboard
   8196 00E963 8F 11 A1 FE                  	STA		KEYBD+1			; write to status reg to clear TX state
   8197 00E967 20 42 EA                     	JSR		Wait10ms
   8198 00E96A A9 FF                        	LDA		#$FF
   8199 00E96C 8F 10 A1 FE                  	STA		KEYBD			; now write to transmit register
   8200 00E970 20 2B EA                     	JSR		KeybdWaitTx		; wait until no longer busy
   8201 00E973 20 F1 E9                     	JSR		KeybdRecvByte	; look for an ACK ($FA)
   8202 00E976 C9 FA                        	CMP		#$FA
   8203 00E978 20 F1 E9                     	JSR		KeybdRecvByte
   8204 00E97B C9 FC                        	CMP		#$FC			; reset error ?
   8205 00E97D F0 18                        	BEQ		.tryAgain
   8206 00E97F C9 AA                        	CMP		#$AA			; reset complete okay ?
   8207 00E981 D0 14                        	BNE		.tryAgain
   8208 00E983                             .config:
   8209 00E983 A9 F0                        	LDA		#$F0			; send scan code select
   8210 00E985 8F 10 A1 FE                  	STA		KEYBD
   8211 00E989 20 2B EA                     	JSR		KeybdWaitTx
   8212 00E98C 90 09                        	BCC		.tryAgain
   8213 00E98E 20 F1 E9                     	JSR		KeybdRecvByte	; wait for response from keyboard
   8214 00E991 90 04                        	BCC		.tryAgain
   8215 00E993 C9 FA                        	CMP		#$FA
   8216 00E995 F0 10                        	BEQ		.0004
   8217 00E997                             .tryAgain:
   8218 00E997 88                           	DEY
   8219 00E998 D0 BB                        	BNE		.0001
   8220 00E99A                             .keybdErr:
   8221 00E99A C2 30                        	REP		#$30
   8222 00E99C F4 52 EA                     	PEA		msgKeybdNR
   8223 00E99F 20 BC E7                     	JSR		DisplayString
   8224 00E9A2 68                           	PLA
   8225 00E9A3 42 60                        	RTT
   8226 00E9A5 80 11                        	BRA		KeybdService
   8227 00E9A7                             .0004:
   8228 00E9A7 A9 02                        	LDA		#2				; select scan code set #2
   8229 00E9A9 8F 10 A1 FE                  	STA		KEYBD
   8230 00E9AD 20 2B EA                     	JSR		KeybdWaitTx
   8231 00E9B0 90 E5                        	BCC		.tryAgain
   8232 00E9B2 C2 30                        	REP		#$30
   8233 00E9B4 42 60                        	RTT
   8234 00E9B6 80 00                        	BRA		KeybdService
                                           
   8236 00E9B8                             KeybdService:
   8237 00E9B8 C2 30                        	REP		#$30
                                           	MEM		16
                                           	NDX		16
   8240 00E9BA A9 00 20                     	LDA		#$2000
   8241 00E9BD 1B                           	TAS
   8242 00E9BE A5 B8                        	LDA		keybd_cmd
   8243 00E9C0 C9 01 00                     	CMP		#1
   8244 00E9C3 D0 18                        	BNE		.0001
   8245 00E9C5 20 75 EA                     	JSR		KeybdGetCharNoWait
   8246 00E9C8 B0 08                        	BCS		.nokey
   8247 00E9CA 64 B8                        	STZ		keybd_cmd
   8248 00E9CC 85 B6                        	STA		keybd_char
   8249 00E9CE 42 60                        	RTT
   8250 00E9D0 80 E6                        	BRA		KeybdService
   8251 00E9D2                             .nokey
   8252 00E9D2 A9 FF FF                     	LDA		#-1
   8253 00E9D5 64 B8                        	STZ		keybd_cmd
   8254 00E9D7 85 B6                        	STA		keybd_char
   8255 00E9D9 42 60                        	RTT
   8256 00E9DB 80 DB                        	BRA		KeybdService
   8257 00E9DD                             .0001:
   8258 00E9DD C9 02 00                     	CMP		#2
   8259 00E9E0 D0 0B                        	BNE		.0002
   8260 00E9E2 20 80 EA                     	JSR		KeybdGetCharWait
   8261 00E9E5 64 B8                        	STZ		keybd_cmd
   8262 00E9E7 85 B6                        	STA		keybd_char
   8263 00E9E9 42 60                        	RTT
   8264 00E9EB 80 CB                        	BRA		KeybdService
   8265 00E9ED                             .0002:
   8266 00E9ED 42 60                        	RTT
   8267 00E9EF 80 C7                        	BRA		KeybdService
                                           
                                           	MEM		8
                                           	NDX		8
                                           ; Recieve a byte from the keyboard, used after a command is sent to the
                                           ; keyboard in order to wait for a response.
                                           ;
   8274 00E9F1                             KeybdRecvByte:
   8275 00E9F1 5A                           	PHY
   8276 00E9F2 A0 64                        	LDY		#100			; wait up to 1s
   8277 00E9F4                             .0003:
   8278 00E9F4 AF 11 A1 FE                  	LDA		KEYBD+1			; wait for response from keyboard
   8279 00E9F8 89 80                        	BIT		#$80			; is input buffer full ?
   8280 00E9FA D0 09                        	BNE		.0004			; yes, branch
   8281 00E9FC 20 42 EA                     	JSR		Wait10ms		; wait a bit
   8282 00E9FF 88                           	DEY
   8283 00EA00 D0 F2                        	BNE		.0003			; go back and try again
   8284 00EA02 7A                           	PLY						; timeout
   8285 00EA03 18                           	CLC						; carry clear = no code
   8286 00EA04 60                           	RTS
   8287 00EA05                             .0004:
   8288 00EA05 AF 10 A1 FE                  	LDA		KEYBD			;
   8289 00EA09 48                           	PHA
   8290 00EA0A A9 00                        	LDA		#0				; clear recieve state
   8291 00EA0C 8F 11 A1 FE                  	STA		KEYBD+1
   8292 00EA10 68                           	PLA
   8293 00EA11 7A                           	PLY
   8294 00EA12 38                           	SEC						; carry set = code available
   8295 00EA13 60                           	RTS
                                           
                                           ; Wait until the keyboard status is non-busy
                                           ; Returns .CF = 1 if successful, .CF=0 timeout
                                           ;
   8300 00EA14                             KeybdWaitBusy:
   8301 00EA14 5A                           	PHY
   8302 00EA15 A0 64                        	LDY		#100			; wait a max of 1s
   8303 00EA17                             .0001:
   8304 00EA17 AF 11 A1 FE                  	LDA		KEYBD+1
   8305 00EA1B 89 01                        	BIT		#1
   8306 00EA1D F0 09                        	BEQ		.0002
   8307 00EA1F 20 42 EA                     	JSR		Wait10ms
   8308 00EA22 88                           	DEY
   8309 00EA23 D0 F2                        	BNE		.0001
   8310 00EA25 7A                           	PLY
   8311 00EA26 18                           	CLC
   8312 00EA27 60                           	RTS
   8313 00EA28                             .0002:
   8314 00EA28 7A                           	PLY
   8315 00EA29 38                           	SEC
   8316 00EA2A 60                           	RTS
                                           
                                           ; Wait until the keyboard transmit is complete
                                           ; Returns .CF = 1 if successful, .CF=0 timeout
                                           ;
   8321 00EA2B                             KeybdWaitTx:
   8322 00EA2B 5A                           	PHY
   8323 00EA2C A0 64                        	LDY		#100			; wait a max of 1s
   8324 00EA2E                             .0001:
   8325 00EA2E AF 11 A1 FE                  	LDA		KEYBD+1
   8326 00EA32 89 40                        	BIT		#$40			; check for transmit complete bit
   8327 00EA34 D0 09                        	BNE		.0002			; branch if bit set
   8328 00EA36 20 42 EA                     	JSR		Wait10ms		; delay a little bit
   8329 00EA39 88                           	DEY						; go back and try again
   8330 00EA3A D0 F2                        	BNE		.0001
   8331 00EA3C 7A                           	PLY						; timed out
   8332 00EA3D 18                           	CLC						; return carry clear
   8333 00EA3E 60                           	RTS
   8334 00EA3F                             .0002:
   8335 00EA3F 7A                           	PLY						; wait complete, return 
   8336 00EA40 38                           	SEC						; carry set
   8337 00EA41 60                           	RTS
                                           
                                           ; Wait approximately 10ms. Used by keyboard routines. Makes use of the free
                                           ; running counter #0.
                                           ; .A = trashed (=-5)
                                           ;
   8343 00EA42                             Wait10ms:
   8344 00EA42 DA                           	PHX				; save .X
   8345 00EA43 A5 12                        	LDA		CNT0H	; get starting count
   8346 00EA45 AA                           	TAX				; save it off in .X
   8347 00EA46                             .0002:
   8348 00EA46 38                           	SEC				; compare to current counter value
   8349 00EA47 E5 12                        	SBC		CNT0H
   8350 00EA49 10 05                        	BPL		.0001	; teh result should be -ve, unless counter overflowed.
   8351 00EA4B C9 FB                        	CMP		#-5		; 5 ticks pass ? 
   8352 00EA4D 8A                           	TXA				; prepare for next check, get startcount in .A
   8353 00EA4E B0 F6                        	BCS		.0002	; go back if less than 5 ticks
   8354 00EA50                             .0001:
   8355 00EA50 FA                           	PLX				; restore .X
   8356 00EA51 60                           	RTS
                                           
                                           	MEM		16
                                           	NDX		16
                                           
   8361 00EA52                             msgKeybdNR:
   8362 00EA52 0D 0A 4B 65 79 62 6F 61      	.byte	CR,LF,"Keyboard not responding.",CR,LF,0
   8362 00EA5A 72 64 20 6E 6F 74 20 72    
   8362 00EA62 65 73 70 6F 6E 64 69 6E    
   8362 00EA6A 67 2E 0D 0A 00             
                                           
                                           	cpu		FT832
                                           
   8366 00EA6F                             KeybdGetCharNoWaitCtx:
   8367 00EA6F 20 75 EA                     	JSR		KeybdGetCharNoWait
   8368 00EA72 40 42 00                     	RTC		#0
   8369 00EA75                             	
   8370 00EA75 08                           	PHP
   8371 00EA76 E2 20                        	SEP		#$20
   8372 00EA78 C2 10                        	REP		#$10
                                           	MEM		8
                                           	NDX		16
   8375 00EA7A A9 00                        	LDA		#0
   8376 00EA7C 85 0B                        	STA		KeybdWaitFlag
   8377 00EA7E 80 10                        	BRA		KeybdGetChar1
                                           
   8379 00EA80                             KeybdGetCharWait:
   8380 00EA80 08                           	PHP
   8381 00EA81 E2 20                        	SEP		#$20
   8382 00EA83 C2 10                        	REP		#$10
                                           	MEM		8
                                           	NDX		16
   8385 00EA85 A9 FF                        	LDA		#$FF
   8386 00EA87 85 0B                        	STA		KeybdWaitFlag
   8387 00EA89 80 05                        	BRA		KeybdGetChar1
                                           
                                           ; Wait for a keyboard character to be available
                                           ; Returns (CF=1) if no key available
                                           ; Return key (CF=0) if key is available
                                           ;
                                           ;
   8394 00EA8B                             KeybdGetChar:
   8395 00EA8B 08                           	PHP
   8396 00EA8C E2 20                        	SEP		#$20		; 8 bit acc
   8397 00EA8E C2 10                        	REP		#$10
                                           	MEM		8
                                           	NDX		16
   8400 00EA90                             KeybdGetChar1:
   8401 00EA90 DA                           	PHX
   8402 00EA91 EB                           	XBA					; force .B to zero for TAX
   8403 00EA92 A9 00                        	LDA		#0
   8404 00EA94 EB                           	XBA
   8405 00EA95                             .0002:
   8406 00EA95                             .0003:
   8407 00EA95 AF 11 A1 FE                  	LDA		KEYBD+1		; check MSB of keyboard status reg.
   8408 00EA99 0A                           	ASL
   8409 00EA9A B0 08                        	BCS		.0006		; branch if keystroke ready
   8410 00EA9C 24 0B                        	BIT		KeybdWaitFlag
   8411 00EA9E 30 F5                        	BMI		.0003
   8412 00EAA0 FA                           	PLX
   8413 00EAA1 28                           	PLP
   8414 00EAA2 38                           	SEC
   8415 00EAA3 60                           	RTS
   8416 00EAA4                             .0006:
   8417 00EAA4 AF 10 A1 FE                  	LDA		KEYBD		; get scan code value
   8418 00EAA8 48                           	PHA
   8419 00EAA9 A9 00                        	LDA		#0			; write a zero to the status reg
   8420 00EAAB 8F 11 A1 FE                  	STA		KEYBD+1		; to clear recieve register
   8421 00EAAF 68                           	PLA
   8422 00EAB0                             .0001:
   8423 00EAB0 C9 F0                        	CMP		#SC_KEYUP	; keyup scan code ?
   8424 00EAB2 F0 FF 69 00                  	LBEQ	.doKeyup	; 
   8425 00EAB6 C9 E0                        	CMP		#SC_EXTEND	; extended scan code ?
   8426 00EAB8 F0 FF 6A 00                  	LBEQ	.doExtend
   8427 00EABC C9 14                        	CMP		#$14		; control ?
   8428 00EABE F0 FF 6D 00                  	LBEQ	.doCtrl
   8429 00EAC2 C9 12                        	CMP		#$12		; left shift
   8430 00EAC4 F0 FF 77 00                  	LBEQ	.doShift
   8431 00EAC8 C9 59                        	CMP		#$59		; right shift
   8432 00EACA F0 FF 71 00                  	LBEQ	.doShift
   8433 00EACE C9 77                        	CMP		#SC_NUMLOCK
   8434 00EAD0 F0 FF 7B 00                  	LBEQ	.doNumLock
   8435 00EAD4 C9 58                        	CMP		#SC_CAPSLOCK
   8436 00EAD6 F0 FF 81 00                  	LBEQ	.doCapsLock
   8437 00EADA C9 7E                        	CMP		#SC_SCROLLLOCK
   8438 00EADC F0 FF 87 00                  	LBEQ	.doScrollLock
   8439 00EAE0 46 08                        	LSR		KeyState1
   8440 00EAE2 B0 B1                        	BCS		.0003
   8441 00EAE4 AA                           	TAX
   8442 00EAE5 A9 80                        	LDA		#$80
   8443 00EAE7 24 09                        	BIT		KeyState2	; Is extended code ?
   8444 00EAE9 F0 11                        	BEQ		.0010
   8445 00EAEB A9 7F                        	LDA		#$7F
   8446 00EAED 25 09                        	AND		KeyState2
   8447 00EAEF 85 09                        	STA		KeyState2
   8448 00EAF1 46 08                        	LSR		KeyState1	; clear keyup
   8449 00EAF3 8A                           	TXA
   8450 00EAF4 29 7F                        	AND		#$7F
   8451 00EAF6 AA                           	TAX
   8452 00EAF7 BD 52 EE                     	LDA		keybdExtendedCodes,X
   8453 00EAFA 80 1D                        	BRA		.0008
   8454 00EAFC                             .0010:
   8455 00EAFC A9 04                        	LDA		#4
   8456 00EAFE 24 09                        	BIT		KeyState2	; Is Cntrl down ?
   8457 00EB00 F0 09                        	BEQ		.0009
   8458 00EB02 8A                           	TXA
   8459 00EB03 29 7F                        	AND		#$7F		; table is 128 chars
   8460 00EB05 AA                           	TAX
   8461 00EB06 BD D2 ED                     	LDA		keybdControlCodes,X
   8462 00EB09 80 0E                        	BRA		.0008
   8463 00EB0B                             .0009:
   8464 00EB0B A9 01                        	LDA		#$1			; Is shift down ?
   8465 00EB0D 24 09                        	BIT		KeyState2
   8466 00EB0F F0 05                        	BEQ		.0007
   8467 00EB11 BD D2 EC                     	LDA		shiftedScanCodes,X
   8468 00EB14 80 03                        	BRA		.0008
   8469 00EB16                             .0007:
   8470 00EB16 BD D2 EB                     	LDA		unshiftedScanCodes,X
   8471 00EB19                             .0008:
   8472 00EB19 C2 20                        	REP		#$20
                                           	MEM		16
   8474 00EB1B FA                           	PLX
   8475 00EB1C 28                           	PLP
   8476 00EB1D 18                           	CLC
   8477 00EB1E 60                           	RTS
                                           	MEM		8
   8479 00EB1F                             .doKeyup:
   8480 00EB1F A9 01                        	LDA		#1
   8481 00EB21 04 08                        	TSB		KeyState1
   8482 00EB23 82 6F FF                     	BRL		.0003
   8483 00EB26                             .doExtend:				; set extended key flag
   8484 00EB26 A5 09                        	LDA		KeyState2
   8485 00EB28 09 80                        	ORA		#$80
   8486 00EB2A 85 09                        	STA		KeyState2
   8487 00EB2C 82 66 FF                     	BRL		.0003
   8488 00EB2F                             .doCtrl:
   8489 00EB2F A9 04                        	LDA		#4
   8490 00EB31 46 08                        	LSR		KeyState1	; check key up/down	
   8491 00EB33 90 05                        	BCC		.0004		; keydown = carry clear
   8492 00EB35 14 09                        	TRB		KeyState2
   8493 00EB37 82 5B FF                     	BRL		.0003
   8494 00EB3A                             .0004:
   8495 00EB3A 04 09                        	TSB		KeyState2	; set control active bit
   8496 00EB3C 82 56 FF                     	BRL		.0003
   8497 00EB3F                             .doShift:
   8498 00EB3F A9 01                        	LDA		#1
   8499 00EB41 46 08                        	LSR		KeyState1	; check key up/down	
   8500 00EB43 90 05                        	BCC		.0005
   8501 00EB45 14 09                        	TRB		KeyState2
   8502 00EB47 82 4B FF                     	BRL		.0003
   8503 00EB4A                             .0005:
   8504 00EB4A 04 09                        	TSB		KeyState2
   8505 00EB4C 82 46 FF                     	BRL		.0003
   8506 00EB4F                             .doNumLock:
   8507 00EB4F A5 09                        	LDA		KeyState2
   8508 00EB51 49 10                        	EOR		#16
   8509 00EB53 85 09                        	STA		KeyState2
   8510 00EB55 20 73 EB                     	JSR		KeybdSetLEDStatus
   8511 00EB58 82 3A FF                     	BRL		.0003
   8512 00EB5B                             .doCapsLock:
   8513 00EB5B A5 09                        	LDA		KeyState2
   8514 00EB5D 49 20                        	EOR		#32
   8515 00EB5F 85 09                        	STA		KeyState2
   8516 00EB61 20 73 EB                     	JSR		KeybdSetLEDStatus
   8517 00EB64 82 2E FF                     	BRL		.0003
   8518 00EB67                             .doScrollLock:
   8519 00EB67 A5 09                        	LDA		KeyState2
   8520 00EB69 49 40                        	EOR		#64
   8521 00EB6B 85 09                        	STA		KeyState2
   8522 00EB6D 20 73 EB                     	JSR		KeybdSetLEDStatus
   8523 00EB70 82 22 FF                     	BRL		.0003
                                           
   8525 00EB73                             KeybdSetLEDStatus:
   8526 00EB73 42 0B                        	PHDS				; save off DS
   8527 00EB75 F4 00 00                     	PEA		0			; set DS to zero
   8528 00EB78 F4 00 00                     	PEA		0			; set DS to zero
   8529 00EB7B 42 2B                        	PLDS
   8530 00EB7D A9 00                        	LDA		#0
   8531 00EB7F 85 0A                        	STA		KeybdLEDs
   8532 00EB81 A9 10                        	LDA		#16
   8533 00EB83 24 09                        	BIT		KeyState2
   8534 00EB85 F0 06                        	BEQ		.0002
   8535 00EB87 A5 0A                        	LDA		KeybdLEDs	; set bit 1 for Num lock, 0 for scrolllock , 2 for caps lock
   8536 00EB89 09 02                        	ORA		#$2
   8537 00EB8B 85 0A                        	STA		KeybdLEDs
   8538 00EB8D                             .0002:
   8539 00EB8D A9 20                        	LDA		#32
   8540 00EB8F 24 09                        	BIT		KeyState2
   8541 00EB91 F0 06                        	BEQ		.0003
   8542 00EB93 A5 0A                        	LDA		KeybdLEDs
   8543 00EB95 09 04                        	ORA		#$4
   8544 00EB97 85 0A                        	STA		KeybdLEDs
   8545 00EB99                             .0003:
   8546 00EB99 A9 40                        	LDA		#64
   8547 00EB9B 24 09                        	BIT		KeyState2
   8548 00EB9D F0 06                        	BEQ		.0004
   8549 00EB9F A5 0A                        	LDA		KeybdLEDs
   8550 00EBA1 09 01                        	ORA		#1
   8551 00EBA3 85 0A                        	STA		KeybdLEDs
   8552 00EBA5                             .0004:
   8553 00EBA5 A9 ED                        	LDA		#$ED		; set status LEDs command
   8554 00EBA7 8F 10 A1 FE                  	STA		KEYBD
   8555 00EBAB 20 2B EA                     	JSR		KeybdWaitTx
   8556 00EBAE 20 F1 E9                     	JSR		KeybdRecvByte
   8557 00EBB1 90 0E                        	BCC		.0001
   8558 00EBB3 C9 FA                        	CMP		#$FA
   8559 00EBB5 A5 0A                        	LDA		KeybdLEDs
   8560 00EBB7 8F 10 A1 FE                  	STA		KEYBD
   8561 00EBBB 20 2B EA                     	JSR		KeybdWaitTx
   8562 00EBBE 20 F1 E9                     	JSR		KeybdRecvByte	; wait for $FA byte
   8563 00EBC1                             .0001:
   8564 00EBC1 42 2B                        	PLDS				; recover DS
   8565 00EBC3 60                           	RTS
                                           
                                           	MEM		16
                                           
   8569 00EBC4 10 D3                        	BPL		.0003
   8570 00EBC6 48                           	PHA					; save off the char (we need to trash acc)
   8571 00EBC7 AF 14 A1 FE                  	LDA		KEYBD+4		; clear keyboard strobe (must be a read operation)
   8572 00EBCB 68                           	PLA					; restore char
   8573 00EBCC 89 00 08                     	BIT		#$800		; Is it a keyup code ?
   8574 00EBCF D0 C8                        	BNE		.0003
   8575 00EBD1 60                           	RTS
                                           
                                           
                                           
                                           	;--------------------------------------------------------------------------
                                           	; PS2 scan codes to ascii conversion tables.
                                           	;--------------------------------------------------------------------------
                                           	;
   8583 00EBD2                             unshiftedScanCodes:
   8584 00EBD2 2E A9 2E A5 A3 A1 A2 AC      	.byte	$2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
                                         
   8585 00EBDA 2E AA A8 A6 A4 09 60 2E      	.byte	$2e,$aa,$a8,$a6,$a4,$09,$60,$2e
                                         
   8586 00EBE2 2E 2E 2E 2E 2E 71 31 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$71,$31,$2e
                                         
   8587 00EBEA 2E 2E 7A 73 61 77 32 2E      	.byte	$2e,$2e,$7a,$73,$61,$77,$32,$2e
                                         
   8588 00EBF2 2E 63 78 64 65 34 33 2E      	.byte	$2e,$63,$78,$64,$65,$34,$33,$2e
                                         
   8589 00EBFA 2E 20 76 66 74 72 35 2E      	.byte	$2e,$20,$76,$66,$74,$72,$35,$2e
                                         
   8590 00EC02 2E 6E 62 68 67 79 36 2E      	.byte	$2e,$6e,$62,$68,$67,$79,$36,$2e
                                         
   8591 00EC0A 2E 2E 6D 6A 75 37 38 2E      	.byte	$2e,$2e,$6d,$6a,$75,$37,$38,$2e
                                         
   8592 00EC12 2E 2C 6B 69 6F 30 39 2E      	.byte	$2e,$2c,$6b,$69,$6f,$30,$39,$2e
                                         
   8593 00EC1A 2E 2E 2F 6C 3B 70 2D 2E      	.byte	$2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
                                         
   8594 00EC22 2E 2E 27 2E 5B 3D 2E 2E      	.byte	$2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
                                         
   8595 00EC2A AD 2E 0D 5D 2E 5C 2E 2E      	.byte	$ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
                                         
   8596 00EC32 2E 2E 2E 2E 2E 2E 08 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                         
   8597 00EC3A 2E 95 2E 93 94 2E 2E 2E      	.byte	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
                                         
   8598 00EC42 98 7F 92 2E 91 90 1B AF      	.byte	$98,$7f,$92,$2e,$91,$90,$1b,$af
                                         
   8599 00EC4A AB 2E 97 2E 2E 96 AE 2E      	.byte	$ab,$2e,$97,$2e,$2e,$96,$ae,$2e
                                         
                                           
   8601 00EC52 2E 2E 2E A7 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
                                         
   8602 00EC5A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8603 00EC62 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8604 00EC6A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8605 00EC72 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8606 00EC7A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8607 00EC82 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8608 00EC8A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8609 00EC92 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8610 00EC9A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8611 00ECA2 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8612 00ECAA 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8613 00ECB2 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8614 00ECBA 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8615 00ECC2 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8616 00ECCA 2E 2E FA 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
                                         
                                           
   8618 00ECD2                             shiftedScanCodes:
   8619 00ECD2 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8620 00ECDA 2E 2E 2E 2E 2E 09 7E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
                                         
   8621 00ECE2 2E 2E 2E 2E 2E 51 21 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$51,$21,$2e
                                         
   8622 00ECEA 2E 2E 5A 53 41 57 40 2E      	.byte	$2e,$2e,$5a,$53,$41,$57,$40,$2e
                                         
   8623 00ECF2 2E 43 58 44 45 24 23 2E      	.byte	$2e,$43,$58,$44,$45,$24,$23,$2e
                                         
   8624 00ECFA 2E 20 56 46 54 52 25 2E      	.byte	$2e,$20,$56,$46,$54,$52,$25,$2e
                                         
   8625 00ED02 2E 4E 42 48 47 59 5E 2E      	.byte	$2e,$4e,$42,$48,$47,$59,$5e,$2e
                                         
   8626 00ED0A 2E 2E 4D 4A 55 26 2A 2E      	.byte	$2e,$2e,$4d,$4a,$55,$26,$2a,$2e
                                         
   8627 00ED12 2E 3C 4B 49 4F 29 28 2E      	.byte	$2e,$3c,$4b,$49,$4f,$29,$28,$2e
                                         
   8628 00ED1A 2E 3E 3F 4C 3A 50 5F 2E      	.byte	$2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
                                         
   8629 00ED22 2E 2E 22 2E 7B 2B 2E 2E      	.byte	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
                                         
   8630 00ED2A 2E 2E 0D 7D 2E 7C 2E 2E      	.byte	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
                                         
   8631 00ED32 2E 2E 2E 2E 2E 2E 08 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                         
   8632 00ED3A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8633 00ED42 2E 7F 2E 2E 2E 2E 1B 2E      	.byte	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
                                         
   8634 00ED4A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
                                           
   8636 00ED52 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8637 00ED5A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8638 00ED62 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8639 00ED6A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8640 00ED72 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8641 00ED7A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8642 00ED82 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8643 00ED8A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8644 00ED92 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8645 00ED9A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8646 00EDA2 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8647 00EDAA 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8648 00EDB2 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8649 00EDBA 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8650 00EDC2 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8651 00EDCA 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
                                           
                                           ; control
   8654 00EDD2                             keybdControlCodes:
   8655 00EDD2 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8656 00EDDA 2E 2E 2E 2E 2E 09 7E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
                                         
   8657 00EDE2 2E 2E 2E 2E 2E 11 21 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$11,$21,$2e
                                         
   8658 00EDEA 2E 2E 1A 13 01 17 40 2E      	.byte	$2e,$2e,$1a,$13,$01,$17,$40,$2e
                                         
   8659 00EDF2 2E 03 18 04 05 24 23 2E      	.byte	$2e,$03,$18,$04,$05,$24,$23,$2e
                                         
   8660 00EDFA 2E 20 16 06 14 12 25 2E      	.byte	$2e,$20,$16,$06,$14,$12,$25,$2e
                                         
   8661 00EE02 2E 0E 02 08 07 19 5E 2E      	.byte	$2e,$0e,$02,$08,$07,$19,$5e,$2e
                                         
   8662 00EE0A 2E 2E 0D 0A 15 26 2A 2E      	.byte	$2e,$2e,$0d,$0a,$15,$26,$2a,$2e
                                         
   8663 00EE12 2E 3C 0B 09 0F 29 28 2E      	.byte	$2e,$3c,$0b,$09,$0f,$29,$28,$2e
                                         
   8664 00EE1A 2E 3E 3F 0C 3A 10 5F 2E      	.byte	$2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
                                         
   8665 00EE22 2E 2E 22 2E 7B 2B 2E 2E      	.byte	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
                                         
   8666 00EE2A 2E 2E 0D 7D 2E 7C 2E 2E      	.byte	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
                                         
   8667 00EE32 2E 2E 2E 2E 2E 2E 08 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                         
   8668 00EE3A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8669 00EE42 2E 7F 2E 2E 2E 2E 1B 2E      	.byte	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
                                         
   8670 00EE4A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
                                           
   8672 00EE52                             keybdExtendedCodes:
   8673 00EE52 2E 2E 2E 2E A3 A1 A2 2E      	.byte	$2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
                                         
   8674 00EE5A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8675 00EE62 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8676 00EE6A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8677 00EE72 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8678 00EE7A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8679 00EE82 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8680 00EE8A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8681 00EE92 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8682 00EE9A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8683 00EEA2 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8684 00EEAA 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8685 00EEB2 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8686 00EEBA 2E 95 2E 93 94 2E 2E 2E      	.byte	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
                                         
   8687 00EEC2 98 99 92 2E 91 90 2E 2E      	.byte	$98,$99,$92,$2e,$91,$90,$2e,$2e
                                         
   8688 00EECA 2E 2E 97 2E 2E 96 2E 2E      	.byte	$2e,$2e,$97,$2e,$2e,$96,$2e,$2e
                                         
                                           
                                           ; Get char routine for Supermon
                                           ; This routine might be called with 8 bit regs.
                                           ;
   8693 00EED2                             SuperGetch:
   8694 00EED2 08                           	PHP
   8695 00EED3 C2 30                        	REP		#$30
                                           	MEM		16
                                           	NDX		16
   8698 00EED5 20 75 EA                     	JSR		KeybdGetCharNoWait
   8699 00EED8 29 FF 00                     	AND		#$FF
   8700 00EEDB B0 03                        	BCS		.0001
   8701 00EEDD 28                           	PLP		; to restore reg size
   8702 00EEDE 18                           	CLC
   8703 00EEDF 60                           	RTS
   8704 00EEE0                             .0001:
   8705 00EEE0 28                           	PLP
   8706 00EEE1 38                           	SEC
   8707 00EEE2 60                           	RTS
                                           
                                           ; Put char routine for Supermon
                                           ; This routine might be called with 8 bit regs.
                                           ;
   8712 00EEE3                             SuperPutch:
   8713 00EEE3 08                           	PHP
   8714 00EEE4 C2 30                        	REP		#$30	; 16 bit regs
                                           	MEM		16
                                           	NDX		16
   8717 00EEE6 48                           	PHA
   8718 00EEE7 DA                           	PHX
   8719 00EEE8 5A                           	PHY
   8720 00EEE9 20 B1 E7                     	JSR		OutChar
   8721 00EEEC 7A                           	PLY
   8722 00EEED FA                           	PLX
   8723 00EEEE 68                           	PLA
   8724 00EEEF 28                           	PLP
   8725 00EEF0 60                           	RTS
                                           
   8727 00EEF1                             warm_start:
   8728 00EEF1 A9 FF 3F                     	LDA		#$3FFF
   8729 00EEF4 1B                           	TAS
   8730 00EEF5 20 E7 E7                     	JSR		CursorOn
   8731 00EEF8 82 E8 F1                     	BRL		Mon1
                                           
                                           	cpu		FT832
   8734 00EEFB                             ICacheIL832:
   8735 00EEFB 42 E0 01                     	CACHE	#1			; 1= invalidate instruction line identified by accumulator
   8736 00EEFE 60                           	RTS
                                           
   8738 00EEFF                             ByteIRQRout:
   8739 00EEFF 40                           	RTI
                                           
   8741 00EF00                             IRQRout:
   8742 00EF00 42 A2 01 00                  	TSK		#1			; switch to the interrupt handling task
   8743 00EF04 40                           	RTI
                                           
   8745 00EF05 C2 30                        	REP		#$30
                                           	NDX		16
                                           	MEM		16
   8748 00EF07 48                           	PHA
   8749 00EF08 20 0D EF                     	JSR		Task1
   8750 00EF0B 68                           	PLA
   8751 00EF0C 40                           	RTI
                                           
   8753 00EF0D                             Task1:
   8754 00EF0D C2 30                        	REP		#$30
                                           	NDX		16
                                           	MEM		16
   8757 00EF0F AD 1F F0                     	LDA		$F01F		; check if counter expired
   8758 00EF12 89 02 00                     	BIT		#2
   8759 00EF15 F0 10                        	BEQ		.0001
   8760 00EF17 A5 04                        	LDA		TickCount	; increment the tick count
   8761 00EF19 1A                           	INA
   8762 00EF1A 85 04                        	STA		TickCount
   8763 00EF1C 8F A4 00 FD                  	STA		$FD00A4		; update on-screen IRQ live indicator
   8764 00EF20 E2 30                        	SEP		#$30
                                           	NDX		8
                                           	MEM		8
   8767 00EF22 A9 05                        	LDA		#$05		; count down, on mpu clock, irq enabled (clears irq)
   8768 00EF24 8D 17 F0                     	STA		$F017
   8769 00EF27                             .0001:
   8770 00EF27 C2 30                        	REP		#$30
                                           	NDX		16
                                           	MEM		16
                                           ;	BIT		do_invaders
                                           ;	BPL		.0002
                                           ;	TSK		#5
   8776 00EF29                             .0002:
   8777 00EF29 42 60                        	RTT					; go back to interrupted task
   8778 00EF2B 80 E0                        	BRA		Task1		; the next time task1 is run it will start here
                                           
                                           ; IRQ handler task - 32 bit
                                           ;
   8782 00EF2D                             IRQTask:
   8783 00EF2D 42 E2 20 02                  	SEP		#$220		; eight bit accumulator, 32 bit indexes
   8784 00EF31 42 C2 10 01                  	REP		#$110
                                           	MEM		8
                                           	NDX		32
   8787 00EF35                             IRQTask1:
   8788 00EF35 AD 1F F0                     	LDA		$F01F		; check if counter expired
   8789 00EF38 89 02                        	BIT		#2
   8790 00EF3A F0 12                        	BEQ		.0001
   8791 00EF3C A6 04                        	LDX		TickCount	; increment the tick count
   8792 00EF3E E8                           	INX
   8793 00EF3F 86 04                        	STX		TickCount
   8794 00EF41 42 AB 42 8E A2 00 FD 00      	STX.H	$FD00A2		; update on-screen IRQ live indicator
                                         
   8795 00EF49 A9 05                        	LDA		#$05		; count down, on mpu clock, irq enabled (clears irq)
   8796 00EF4B 8D 17 F0                     	STA		$F017
   8797 00EF4E                             .0001:
                                           ;	BIT		do_invaders
                                           ;	BPL		.0002
                                           ;	TSK		#5
   8801 00EF4E                             .0002:
   8802 00EF4E 42 60                        	RTT					; go back to interrupted task
   8803 00EF50 80 E3                        	BRA		IRQTask1	; the next time task is run it will start here
                                           
                                           ; This little task sample runs in native 32 bit mode and displays
                                           ; "Hello World!" on the screen.
                                           
                                           	CPU		FT832
                                           	MEM		8
                                           	NDX		32
                                           
   8812 00EF52                             Task2:
   8813 00EF52 A2 F8 01 00 00               	LDX		#84*2*3
   8814 00EF57                             .0003:
   8815 00EF57 A0 00 00 00 00               	LDY		#0
   8816 00EF5C                             .0002:
   8817 00EF5C B9 71 EF                     	LDA		msgHelloWorld,Y
   8818 00EF5F F0 0C                        	BEQ		.0001
   8819 00EF61 20 BB E5                     	JSR		AsciiToScreen8
   8820 00EF64 9F 00 00 FD                  	STA		VIDBUF,X
   8821 00EF68 E8                           	INX
   8822 00EF69 E8                           	INX
   8823 00EF6A C8                           	INY
   8824 00EF6B 80 EF                        	BRA		.0002
   8825 00EF6D                             .0001:
   8826 00EF6D 42 60                        	RTT
   8827 00EF6F 80 E6                        	BRA		.0003
                                           
   8829 00EF71                             msgHelloWorld:
   8830 00EF71 0D 0A 48 65 6C 6C 6F 20      	.byte	CR,LF,"Hello World!",CR,LF,0
   8830 00EF79 57 6F 72 6C 64 21 0D 0A    
   8830 00EF81 00                         
                                           
                                           	NDX		16
                                           	MEM		16
                                           
   8835 00EF82                             BrkTask:
   8836 00EF82 42 EE 00 00 D0 FF            	INC		$FFD00000
   8837 00EF88 42 60                        	RTT
   8838 00EF8A 80 F6                        	BRA		BrkTask
                                           
                                           ; The following store sequence for the benefit of Supermon816
                                           ;
   8842 00EF8C                             BrkRout:
   8843 00EF8C 0B                           	PHD
   8844 00EF8D 8B                           	PHB
   8845 00EF8E C2 30                        	REP		#$30
   8846 00EF90 48                           	PHA
   8847 00EF91 DA                           	PHX
   8848 00EF92 5A                           	PHY
   8849 00EF93 6C 02 01                     	JMP		($0102)		; This jump normally points to BrkRout1
   8850 00EF96                             BrkRout1:
   8851 00EF96 C2 30                        	REP		#$30
   8852 00EF98 7A                           	PLY
   8853 00EF99 FA                           	PLX
   8854 00EF9A 68                           	PLA
   8855 00EF9B AB                           	PLB
   8856 00EF9C 2B                           	PLD
   8857 00EF9D E2 20                        	SEP		#$20
   8858 00EF9F 68                           	PLA
   8859 00EFA0 C2 30                        	REP		#$30
   8860 00EFA2 68                           	PLA
   8861 00EFA3 20 49 E8                     	JSR		DispWord
   8862 00EFA6 A2 00 00                     	LDX		#0
   8863 00EFA9 A0 40 00                     	LDY		#64
   8864 00EFAC                             .0001:
   8865 00EFAC 42 F0                        	.word	$f042		; pchist
   8866 00EFAE 20 49 E8                     	JSR		DispWord
   8867 00EFB1 A9 20 00                     	LDA		#' '
   8868 00EFB4 20 B1 E7                     	JSR		OutChar
   8869 00EFB7 E8                           	INX
   8870 00EFB8 88                           	DEY
   8871 00EFB9 D0 F1                        	BNE		.0001
   8872 00EFBB A9 FF FF                     	LDA		#$FFFF
   8873 00EFBE 8D 00 70                     	STA		$7000
   8874 00EFC1                             Hung:
   8875 00EFC1 80 FE                        	BRA		Hung
                                           
                                           	;--------------------------------------------------------
                                           	;--------------------------------------------------------
                                           	; I/O page is located at $F0xx
                                           	;--------------------------------------------------------
                                           	;--------------------------------------------------------	
                                           	;org		$F100
                                           
   8884 00EFC3                             LineTbl:
   8885 00EFC3 00 00                        	.WORD	0
   8886 00EFC5 54 00                        	.WORD	TEXTCOLS
   8887 00EFC7 A8 00                        	.WORD	TEXTCOLS*2
   8888 00EFC9 FC 00                        	.WORD	TEXTCOLS*3
   8889 00EFCB 50 01                        	.WORD	TEXTCOLS*4
   8890 00EFCD A4 01                        	.WORD	TEXTCOLS*5
   8891 00EFCF F8 01                        	.WORD	TEXTCOLS*6
   8892 00EFD1 4C 02                        	.WORD	TEXTCOLS*7
   8893 00EFD3 A0 02                        	.WORD	TEXTCOLS*8
   8894 00EFD5 F4 02                        	.WORD	TEXTCOLS*9
   8895 00EFD7 48 03                        	.WORD	TEXTCOLS*10
   8896 00EFD9 9C 03                        	.WORD	TEXTCOLS*11
   8897 00EFDB F0 03                        	.WORD	TEXTCOLS*12
   8898 00EFDD 44 04                        	.WORD	TEXTCOLS*13
   8899 00EFDF 98 04                        	.WORD	TEXTCOLS*14
   8900 00EFE1 EC 04                        	.WORD	TEXTCOLS*15
   8901 00EFE3 40 05                        	.WORD	TEXTCOLS*16
   8902 00EFE5 94 05                        	.WORD	TEXTCOLS*17
   8903 00EFE7 E8 05                        	.WORD	TEXTCOLS*18
   8904 00EFE9 3C 06                        	.WORD	TEXTCOLS*19
   8905 00EFEB 90 06                        	.WORD	TEXTCOLS*20
   8906 00EFED E4 06                        	.WORD	TEXTCOLS*21
   8907 00EFEF 38 07                        	.WORD	TEXTCOLS*22
   8908 00EFF1 8C 07                        	.WORD	TEXTCOLS*23
   8909 00EFF3 E0 07                        	.WORD	TEXTCOLS*24
   8910 00EFF5 34 08                        	.WORD	TEXTCOLS*25
   8911 00EFF7 88 08                        	.WORD	TEXTCOLS*26
   8912 00EFF9 DC 08                        	.WORD	TEXTCOLS*27
   8913 00EFFB 30 09                        	.WORD	TEXTCOLS*28
   8914 00EFFD 84 09                        	.WORD	TEXTCOLS*29
   8915 00EFFF D8 09                        	.WORD	TEXTCOLS*30
                                           
   8917 00F001                             TaskStartTbl:
   8918 00F001 00 00                        	.WORD	0			; CS
   8919 00F003 00 00                        	.WORD	0
   8920 00F005 00 00                        	.WORD	0			; DS
   8921 00F007 00 00                        	.WORD	0
   8922 00F009 5E E0                        	.WORD	Task0		; PC
   8923 00F00B 00                           	.BYTE	Task0>>16
   8924 00F00C 00 00                        	.WORD	0			; acc
   8925 00F00E 00 00                        	.WORD	0
   8926 00F010 00 00                        	.WORD	0			; x
   8927 00F012 00 00                        	.WORD	0
   8928 00F014 00 00                        	.WORD	0			; y
   8929 00F016 00 00                        	.WORD	0
   8930 00F018 FF 3F                        	.WORD	$3FFF		; sp
   8931 00F01A 00 00                        	.WORD	0
   8932 00F01C 04                           	.BYTE	4			; SR
   8933 00F01D 01                           	.BYTE	1			; SR extension
   8934 00F01E 00                           	.BYTE	0			; DB
   8935 00F01F 00 00                        	.WORD	0			; DPR
                                           
   8937 00F021 00 00                        	.WORD	0			; CS
   8938 00F023 00 00                        	.WORD	0
   8939 00F025 00 00                        	.WORD	0			; DS
   8940 00F027 00 00                        	.WORD	0
   8941 00F029 0D EF                        	.WORD	Task1		; PC
   8942 00F02B 00                           	.BYTE	Task1>>16
   8943 00F02C 00 00                        	.WORD	0			; acc
   8944 00F02E 00 00                        	.WORD	0
   8945 00F030 00 00                        	.WORD	0			; x
   8946 00F032 00 00                        	.WORD	0
   8947 00F034 00 00                        	.WORD	0			; y
   8948 00F036 00 00                        	.WORD	0
   8949 00F038 FF 3B                        	.WORD	$3BFF		; sp
   8950 00F03A 00 00                        	.WORD	0
   8951 00F03C 04                           	.BYTE	4			; SR
   8952 00F03D 01                           	.BYTE	1			; SR extension
   8953 00F03E 00                           	.BYTE	0			; DB
   8954 00F03F 00 00                        	.WORD	0			; DPR
                                           
   8956 00F041 00 00                        	.WORD	0			; CS
   8957 00F043 00 00                        	.WORD	0
   8958 00F045 00 00                        	.WORD	0			; DS
   8959 00F047 00 00                        	.WORD	0
   8960 00F049 52 EF                        	.WORD	Task2		; PC
   8961 00F04B 00                           	.BYTE	Task2>>16
   8962 00F04C 00 00                        	.WORD	0			; acc
   8963 00F04E 00 00                        	.WORD	0
   8964 00F050 00 00                        	.WORD	0			; x
   8965 00F052 00 00                        	.WORD	0
   8966 00F054 00 00                        	.WORD	0			; y
   8967 00F056 00 00                        	.WORD	0
   8968 00F058 FF 37                        	.WORD	$37FF		; sp
   8969 00F05A 00 00                        	.WORD	0
   8970 00F05C 20                           	.BYTE	$20			; SR			; eight bit mem
   8971 00F05D 02                           	.BYTE	2			; SR extension
   8972 00F05E 00                           	.BYTE	0			; DB
   8973 00F05F 00 00                        	.WORD	0			; DPR
                                           
   8975 00F061 00 00                        	.WORD	0			; CS
   8976 00F063 00 00                        	.WORD	0
   8977 00F065 00 00                        	.WORD	0			; DS
   8978 00F067 00 00                        	.WORD	0
   8979 00F069 66 E5                        	.WORD	SSMTask		; PC
   8980 00F06B 00                           	.BYTE	SSMTask>>16
   8981 00F06C 00 00                        	.WORD	0			; acc
   8982 00F06E 00 00                        	.WORD	0
   8983 00F070 00 00                        	.WORD	0			; x
   8984 00F072 00 00                        	.WORD	0
   8985 00F074 00 00                        	.WORD	0			; y
   8986 00F076 00 00                        	.WORD	0
   8987 00F078 FF 33                        	.WORD	$33FF		; sp
   8988 00F07A 00 00                        	.WORD	0
   8989 00F07C 04                           	.BYTE	$4			; SR	16 bit regs, mask interrupts
   8990 00F07D 01                           	.BYTE	1			; SR extension - 816 mode
   8991 00F07E 00                           	.BYTE	0			; DB
   8992 00F07F 00 00                        	.WORD	0			; DPR
                                           
   8994 00F081 00 00                        	.WORD	0			; CS
   8995 00F083 00 00                        	.WORD	0
   8996 00F085 00 00                        	.WORD	0			; DS
   8997 00F087 00 00                        	.WORD	0
   8998 00F089 82 EF                        	.WORD	BrkTask		; PC
   8999 00F08B 00                           	.BYTE	BrkTask>>16
   9000 00F08C 00 00                        	.WORD	0			; acc
   9001 00F08E 00 00                        	.WORD	0
   9002 00F090 00 00                        	.WORD	0			; x
   9003 00F092 00 00                        	.WORD	0
   9004 00F094 00 00                        	.WORD	0			; y
   9005 00F096 00 00                        	.WORD	0
   9006 00F098 FF 2F                        	.WORD	$2FFF		; sp
   9007 00F09A 00 00                        	.WORD	0
   9008 00F09C 00                           	.BYTE	0			; SR
   9009 00F09D 01                           	.BYTE	1			; SR extension
   9010 00F09E 00                           	.BYTE	0			; DB
   9011 00F09F 00 00                        	.WORD	0			; DPR
                                           
                                           	; task #5
                                           	; DS is placed at $7800
   9015 00F0A1 00 00                        	.WORD	0			; CS
   9016 00F0A3 00 00                        	.WORD	0
   9017 00F0A5 78 1E                        	.WORD	7800		; DS
   9018 00F0A7 00 00                        	.WORD	0
   9019 00F0A9 DC D8                        	.WORD	InvadersTask	; PC
   9020 00F0AB 00                           	.BYTE	InvadersTask>>16
   9021 00F0AC 00 00                        	.WORD	0			; acc
   9022 00F0AE 00 00                        	.WORD	0
   9023 00F0B0 00 00                        	.WORD	0			; x
   9024 00F0B2 00 00                        	.WORD	0
   9025 00F0B4 00 00                        	.WORD	0			; y
   9026 00F0B6 00 00                        	.WORD	0
   9027 00F0B8 FF 2B                        	.WORD	$2BFF		; sp
   9028 00F0BA 00 00                        	.WORD	0
   9029 00F0BC 00                           	.BYTE	0			; SR
   9030 00F0BD 01                           	.BYTE	1			; SR extension
   9031 00F0BE 00                           	.BYTE	0			; DB
   9032 00F0BF 00 00                        	.WORD	0			; DPR
                                           
   9034 00F0C1 00 00                        	.WORD	0			; CS
   9035 00F0C3 00 00                        	.WORD	0
   9036 00F0C5 00 00                        	.WORD	0			; DS
   9037 00F0C7 00 00                        	.WORD	0
   9038 00F0C9 2D EF                        	.WORD	IRQTask		; PC
   9039 00F0CB 00                           	.BYTE	IRQTask>>16
   9040 00F0CC 00 00                        	.WORD	0			; acc
   9041 00F0CE 00 00                        	.WORD	0
   9042 00F0D0 00 00                        	.WORD	0			; x
   9043 00F0D2 00 00                        	.WORD	0
   9044 00F0D4 00 00                        	.WORD	0			; y
   9045 00F0D6 00 00                        	.WORD	0
   9046 00F0D8 FF 27                        	.WORD	$27FF		; sp
   9047 00F0DA 00 00                        	.WORD	0
   9048 00F0DC 24                           	.BYTE	$24			; SR	8 bit acc, mask interrupts
   9049 00F0DD 02                           	.BYTE	2			; SR extension - 832 mode
   9050 00F0DE 00                           	.BYTE	0			; DB
   9051 00F0DF 00 00                        	.WORD	0			; DPR
                                           
   9053 00F0E1                             msgRegs:
   9054 00F0E1 0D 0A                        	.byte	CR,LF
   9055 00F0E3 20 20 20 20 20 20 20 20          .byte   "                 xxxsxi31",CR,LF
   9055 00F0EB 20 20 20 20 20 20 20 20    
   9055 00F0F3 20 78 78 78 73 78 69 33    
   9055 00F0FB 31 0D 0A                   
   9056 00F0FE 20 20 20 20 43 53 20 20          .byte   "    CS    PB PC  xxxsxn26NVmxDIZC    .A       .X       .Y       SP  ",CR,LF,0
   9056 00F106 20 20 50 42 20 50 43 20    
   9056 00F10E 20 78 78 78 73 78 6E 32    
   9056 00F116 36 4E 56 6D 78 44 49 5A    
   9056 00F11E 43 20 20 20 20 2E 41 20    
   9056 00F126 20 20 20 20 20 20 2E 58    
   9056 00F12E 20 20 20 20 20 20 20 2E    
   9056 00F136 59 20 20 20 20 20 20 20    
   9056 00F13E 53 50 20 20 0D 0A 00       
   9057 00F145                             msgRegs2:
   9058 00F145 0D 0A                        	.byte	CR,LF
   9059 00F147 20 20 20 20 44 53 20 20      	.byte	"    DS    DB  DP   BL",CR,LF,0
   9059 00F14F 20 20 44 42 20 20 44 50    
   9059 00F157 20 20 20 42 4C 0D 0A 00    
                                         
                                           
                                           	cpu		FT832
                                           	MEM		32
                                           	NDX		32
   9064 00F15F A9 78 56 34 12               	LDA		#$12345678
   9065 00F164 A2 32 54 76 98               	LDX		#$98765432
   9066 00F169 42 8B 42 97 23               	STA.B	{$23},Y
   9067 00F16E 42 BB 42 BC 56 55 45 44      	LDY.UH	$44455556,X
                                         
   9068 00F176 42 1B 42 AB 42 BD 56 55      	LDA.H	CS:$44455556,X
   9068 00F17E 45 44                      
   9069 00F180 42 3B 88 88 88 88 42 9B      	LDA.UB	SEG $88888888:$1234,Y
   9069 00F188 B9 34 12                   
   9070 00F18B 42 20 00 E0 00 00 00 00      	JSF	    $0000:start
   9070 00F193 00                         
   9071 00F194 42 6B                        	RTF
   9072 00F196 42 A2 02 00                  	TSK		#2
   9073 00F19A 42 3A                        	TSK
   9074 00F19C 42 4C 00 00 01 00            	LDT		$10000,X
                                           
   9076 00F1A2 FF FF FF FF FF FF FF FF      	.org	$F400
   9076 00F1AA FF FF FF FF FF FF FF FF    
   9076 00F1B2 FF FF FF FF FF FF FF FF    
   9076 00F1BA FF FF FF FF FF FF FF FF    
   9076 00F1C2 FF FF FF FF FF FF FF FF    
   9076 00F1CA FF FF FF FF FF FF FF FF    
   9076 00F1D2 FF FF FF FF FF FF FF FF    
   9076 00F1DA FF FF FF FF FF FF FF FF    
   9076 00F1E2 FF FF FF FF FF FF FF FF    
   9076 00F1EA FF FF FF FF FF FF FF FF    
   9076 00F1F2 FF FF FF FF FF FF FF FF    
   9076 00F1FA FF FF FF FF FF FF FF FF    
   9076 00F202 FF FF FF FF FF FF FF FF    
   9076 00F20A FF FF FF FF FF FF FF FF    
   9076 00F212 FF FF FF FF FF FF FF FF    
   9076 00F21A FF FF FF FF FF FF FF FF    
   9076 00F222 FF FF FF FF FF FF FF FF    
   9076 00F22A FF FF FF FF FF FF FF FF    
   9076 00F232 FF FF FF FF FF FF FF FF    
   9076 00F23A FF FF FF FF FF FF FF FF    
   9076 00F242 FF FF FF FF FF FF FF FF    
   9076 00F24A FF FF FF FF FF FF FF FF    
   9076 00F252 FF FF FF FF FF FF FF FF    
   9076 00F25A FF FF FF FF FF FF FF FF    
   9076 00F262 FF FF FF FF FF FF FF FF    
   9076 00F26A FF FF FF FF FF FF FF FF    
   9076 00F272 FF FF FF FF FF FF FF FF    
   9076 00F27A FF FF FF FF FF FF FF FF    
   9076 00F282 FF FF FF FF FF FF FF FF    
   9076 00F28A FF FF FF FF FF FF FF FF    
   9076 00F292 FF FF FF FF FF FF FF FF    
   9076 00F29A FF FF FF FF FF FF FF FF    
   9076 00F2A2 FF FF FF FF FF FF FF FF    
   9076 00F2AA FF FF FF FF FF FF FF FF    
   9076 00F2B2 FF FF FF FF FF FF FF FF    
   9076 00F2BA FF FF FF FF FF FF FF FF    
   9076 00F2C2 FF FF FF FF FF FF FF FF    
   9076 00F2CA FF FF FF FF FF FF FF FF    
   9076 00F2D2 FF FF FF FF FF FF FF FF    
   9076 00F2DA FF FF FF FF FF FF FF FF    
   9076 00F2E2 FF FF FF FF FF FF FF FF    
   9076 00F2EA FF FF FF FF FF FF FF FF    
   9076 00F2F2 FF FF FF FF FF FF FF FF    
   9076 00F2FA FF FF FF FF FF FF FF FF    
   9076 00F302 FF FF FF FF FF FF FF FF    
   9076 00F30A FF FF FF FF FF FF FF FF    
   9076 00F312 FF FF FF FF FF FF FF FF    
   9076 00F31A FF FF FF FF FF FF FF FF    
   9076 00F322 FF FF FF FF FF FF FF FF    
   9076 00F32A FF FF FF FF FF FF FF FF    
   9076 00F332 FF FF FF FF FF FF FF FF    
   9076 00F33A FF FF FF FF FF FF FF FF    
   9076 00F342 FF FF FF FF FF FF FF FF    
   9076 00F34A FF FF FF FF FF FF FF FF    
   9076 00F352 FF FF FF FF FF FF FF FF    
   9076 00F35A FF FF FF FF FF FF FF FF    
   9076 00F362 FF FF FF FF FF FF FF FF    
   9076 00F36A FF FF FF FF FF FF FF FF    
   9076 00F372 FF FF FF FF FF FF FF FF    
   9076 00F37A FF FF FF FF FF FF FF FF    
   9076 00F382 FF FF FF FF FF FF FF FF    
   9076 00F38A FF FF FF FF FF FF FF FF    
   9076 00F392 FF FF FF FF FF FF FF FF    
   9076 00F39A FF FF FF FF FF FF FF FF    
   9076 00F3A2 FF FF FF FF FF FF FF FF    
   9076 00F3AA FF FF FF FF FF FF FF FF    
   9076 00F3B2 FF FF FF FF FF FF FF FF    
   9076 00F3BA FF FF FF FF FF FF FF FF    
   9076 00F3C2 FF FF FF FF FF FF FF FF    
   9076 00F3CA FF FF FF FF FF FF FF FF    
   9076 00F3D2 FF FF FF FF FF FF FF FF    
   9076 00F3DA FF FF FF FF FF FF FF FF    
   9076 00F3E2 FF FF FF FF FF FF FF FF    
   9076 00F3EA FF FF FF FF FF FF FF FF    
   9076 00F3F2 FF FF FF FF FF FF FF FF    
   9076 00F3FA FF FF FF FF FF FF          
   9077 00F400 4C D2 EE                     	JMP		SuperGetch
   9078 00F403 4C F1 EE                     	JMP		warm_start
   9079 00F406 4C E3 EE                     	JMP		SuperPutch
   9080 00F409 4C F1 E4                     	JMP		BIOSInput
                                           
   9082 00F40C FF FF FF FF FF FF FF FF      	.org 	$FFD6
   9082 00F414 FF FF FF FF FF FF FF FF    
   9082 00F41C FF FF FF FF FF FF FF FF    
   9082 00F424 FF FF FF FF FF FF FF FF    
   9082 00F42C FF FF FF FF FF FF FF FF    
   9082 00F434 FF FF FF FF FF FF FF FF    
   9082 00F43C FF FF FF FF FF FF FF FF    
   9082 00F444 FF FF FF FF FF FF FF FF    
   9082 00F44C FF FF FF FF FF FF FF FF    
   9082 00F454 FF FF FF FF FF FF FF FF    
   9082 00F45C FF FF FF FF FF FF FF FF    
   9082 00F464 FF FF FF FF FF FF FF FF    
   9082 00F46C FF FF FF FF FF FF FF FF    
   9082 00F474 FF FF FF FF FF FF FF FF    
   9082 00F47C FF FF FF FF FF FF FF FF    
   9082 00F484 FF FF FF FF FF FF FF FF    
   9082 00F48C FF FF FF FF FF FF FF FF    
   9082 00F494 FF FF FF FF FF FF FF FF    
   9082 00F49C FF FF FF FF FF FF FF FF    
   9082 00F4A4 FF FF FF FF FF FF FF FF    
   9082 00F4AC FF FF FF FF FF FF FF FF    
   9082 00F4B4 FF FF FF FF FF FF FF FF    
   9082 00F4BC FF FF FF FF FF FF FF FF    
   9082 00F4C4 FF FF FF FF FF FF FF FF    
   9082 00F4CC FF FF FF FF FF FF FF FF    
   9082 00F4D4 FF FF FF FF FF FF FF FF    
   9082 00F4DC FF FF FF FF FF FF FF FF    
   9082 00F4E4 FF FF FF FF FF FF FF FF    
   9082 00F4EC FF FF FF FF FF FF FF FF    
   9082 00F4F4 FF FF FF FF FF FF FF FF    
   9082 00F4FC FF FF FF FF FF FF FF FF    
   9082 00F504 FF FF FF FF FF FF FF FF    
   9082 00F50C FF FF FF FF FF FF FF FF    
   9082 00F514 FF FF FF FF FF FF FF FF    
   9082 00F51C FF FF FF FF FF FF FF FF    
   9082 00F524 FF FF FF FF FF FF FF FF    
   9082 00F52C FF FF FF FF FF FF FF FF    
   9082 00F534 FF FF FF FF FF FF FF FF    
   9082 00F53C FF FF FF FF FF FF FF FF    
   9082 00F544 FF FF FF FF FF FF FF FF    
   9082 00F54C FF FF FF FF FF FF FF FF    
   9082 00F554 FF FF FF FF FF FF FF FF    
   9082 00F55C FF FF FF FF FF FF FF FF    
   9082 00F564 FF FF FF FF FF FF FF FF    
   9082 00F56C FF FF FF FF FF FF FF FF    
   9082 00F574 FF FF FF FF FF FF FF FF    
   9082 00F57C FF FF FF FF FF FF FF FF    
   9082 00F584 FF FF FF FF FF FF FF FF    
   9082 00F58C FF FF FF FF FF FF FF FF    
   9082 00F594 FF FF FF FF FF FF FF FF    
   9082 00F59C FF FF FF FF FF FF FF FF    
   9082 00F5A4 FF FF FF FF FF FF FF FF    
   9082 00F5AC FF FF FF FF FF FF FF FF    
   9082 00F5B4 FF FF FF FF FF FF FF FF    
   9082 00F5BC FF FF FF FF FF FF FF FF    
   9082 00F5C4 FF FF FF FF FF FF FF FF    
   9082 00F5CC FF FF FF FF FF FF FF FF    
   9082 00F5D4 FF FF FF FF FF FF FF FF    
   9082 00F5DC FF FF FF FF FF FF FF FF    
   9082 00F5E4 FF FF FF FF FF FF FF FF    
   9082 00F5EC FF FF FF FF FF FF FF FF    
   9082 00F5F4 FF FF FF FF FF FF FF FF    
   9082 00F5FC FF FF FF FF FF FF FF FF    
   9082 00F604 FF FF FF FF FF FF FF FF    
   9082 00F60C FF FF FF FF FF FF FF FF    
   9082 00F614 FF FF FF FF FF FF FF FF    
   9082 00F61C FF FF FF FF FF FF FF FF    
   9082 00F624 FF FF FF FF FF FF FF FF    
   9082 00F62C FF FF FF FF FF FF FF FF    
   9082 00F634 FF FF FF FF FF FF FF FF    
   9082 00F63C FF FF FF FF FF FF FF FF    
   9082 00F644 FF FF FF FF FF FF FF FF    
   9082 00F64C FF FF FF FF FF FF FF FF    
   9082 00F654 FF FF FF FF FF FF FF FF    
   9082 00F65C FF FF FF FF FF FF FF FF    
   9082 00F664 FF FF FF FF FF FF FF FF    
   9082 00F66C FF FF FF FF FF FF FF FF    
   9082 00F674 FF FF FF FF FF FF FF FF    
   9082 00F67C FF FF FF FF FF FF FF FF    
   9082 00F684 FF FF FF FF FF FF FF FF    
   9082 00F68C FF FF FF FF FF FF FF FF    
   9082 00F694 FF FF FF FF FF FF FF FF    
   9082 00F69C FF FF FF FF FF FF FF FF    
   9082 00F6A4 FF FF FF FF FF FF FF FF    
   9082 00F6AC FF FF FF FF FF FF FF FF    
   9082 00F6B4 FF FF FF FF FF FF FF FF    
   9082 00F6BC FF FF FF FF FF FF FF FF    
   9082 00F6C4 FF FF FF FF FF FF FF FF    
   9082 00F6CC FF FF FF FF FF FF FF FF    
   9082 00F6D4 FF FF FF FF FF FF FF FF    
   9082 00F6DC FF FF FF FF FF FF FF FF    
   9082 00F6E4 FF FF FF FF FF FF FF FF    
   9082 00F6EC FF FF FF FF FF FF FF FF    
   9082 00F6F4 FF FF FF FF FF FF FF FF    
   9082 00F6FC FF FF FF FF FF FF FF FF    
   9082 00F704 FF FF FF FF FF FF FF FF    
   9082 00F70C FF FF FF FF FF FF FF FF    
   9082 00F714 FF FF FF FF FF FF FF FF    
   9082 00F71C FF FF FF FF FF FF FF FF    
   9082 00F724 FF FF FF FF FF FF FF FF    
   9082 00F72C FF FF FF FF FF FF FF FF    
   9082 00F734 FF FF FF FF FF FF FF FF    
   9082 00F73C FF FF FF FF FF FF FF FF    
   9082 00F744 FF FF FF FF FF FF FF FF    
   9082 00F74C FF FF FF FF FF FF FF FF    
   9082 00F754 FF FF FF FF FF FF FF FF    
   9082 00F75C FF FF FF FF FF FF FF FF    
   9082 00F764 FF FF FF FF FF FF FF FF    
   9082 00F76C FF FF FF FF FF FF FF FF    
   9082 00F774 FF FF FF FF FF FF FF FF    
   9082 00F77C FF FF FF FF FF FF FF FF    
   9082 00F784 FF FF FF FF FF FF FF FF    
   9082 00F78C FF FF FF FF FF FF FF FF    
   9082 00F794 FF FF FF FF FF FF FF FF    
   9082 00F79C FF FF FF FF FF FF FF FF    
   9082 00F7A4 FF FF FF FF FF FF FF FF    
   9082 00F7AC FF FF FF FF FF FF FF FF    
   9082 00F7B4 FF FF FF FF FF FF FF FF    
   9082 00F7BC FF FF FF FF FF FF FF FF    
   9082 00F7C4 FF FF FF FF FF FF FF FF    
   9082 00F7CC FF FF FF FF FF FF FF FF    
   9082 00F7D4 FF FF FF FF FF FF FF FF    
   9082 00F7DC FF FF FF FF FF FF FF FF    
   9082 00F7E4 FF FF FF FF FF FF FF FF    
   9082 00F7EC FF FF FF FF FF FF FF FF    
   9082 00F7F4 FF FF FF FF FF FF FF FF    
   9082 00F7FC FF FF FF FF FF FF FF FF    
   9082 00F804 FF FF FF FF FF FF FF FF    
   9082 00F80C FF FF FF FF FF FF FF FF    
   9082 00F814 FF FF FF FF FF FF FF FF    
   9082 00F81C FF FF FF FF FF FF FF FF    
   9082 00F824 FF FF FF FF FF FF FF FF    
   9082 00F82C FF FF FF FF FF FF FF FF    
   9082 00F834 FF FF FF FF FF FF FF FF    
   9082 00F83C FF FF FF FF FF FF FF FF    
   9082 00F844 FF FF FF FF FF FF FF FF    
   9082 00F84C FF FF FF FF FF FF FF FF    
   9082 00F854 FF FF FF FF FF FF FF FF    
   9082 00F85C FF FF FF FF FF FF FF FF    
   9082 00F864 FF FF FF FF FF FF FF FF    
   9082 00F86C FF FF FF FF FF FF FF FF    
   9082 00F874 FF FF FF FF FF FF FF FF    
   9082 00F87C FF FF FF FF FF FF FF FF    
   9082 00F884 FF FF FF FF FF FF FF FF    
   9082 00F88C FF FF FF FF FF FF FF FF    
   9082 00F894 FF FF FF FF FF FF FF FF    
   9082 00F89C FF FF FF FF FF FF FF FF    
   9082 00F8A4 FF FF FF FF FF FF FF FF    
   9082 00F8AC FF FF FF FF FF FF FF FF    
   9082 00F8B4 FF FF FF FF FF FF FF FF    
   9082 00F8BC FF FF FF FF FF FF FF FF    
   9082 00F8C4 FF FF FF FF FF FF FF FF    
   9082 00F8CC FF FF FF FF FF FF FF FF    
   9082 00F8D4 FF FF FF FF FF FF FF FF    
   9082 00F8DC FF FF FF FF FF FF FF FF    
   9082 00F8E4 FF FF FF FF FF FF FF FF    
   9082 00F8EC FF FF FF FF FF FF FF FF    
   9082 00F8F4 FF FF FF FF FF FF FF FF    
   9082 00F8FC FF FF FF FF FF FF FF FF    
   9082 00F904 FF FF FF FF FF FF FF FF    
   9082 00F90C FF FF FF FF FF FF FF FF    
   9082 00F914 FF FF FF FF FF FF FF FF    
   9082 00F91C FF FF FF FF FF FF FF FF    
   9082 00F924 FF FF FF FF FF FF FF FF    
   9082 00F92C FF FF FF FF FF FF FF FF    
   9082 00F934 FF FF FF FF FF FF FF FF    
   9082 00F93C FF FF FF FF FF FF FF FF    
   9082 00F944 FF FF FF FF FF FF FF FF    
   9082 00F94C FF FF FF FF FF FF FF FF    
   9082 00F954 FF FF FF FF FF FF FF FF    
   9082 00F95C FF FF FF FF FF FF FF FF    
   9082 00F964 FF FF FF FF FF FF FF FF    
   9082 00F96C FF FF FF FF FF FF FF FF    
   9082 00F974 FF FF FF FF FF FF FF FF    
   9082 00F97C FF FF FF FF FF FF FF FF    
   9082 00F984 FF FF FF FF FF FF FF FF    
   9082 00F98C FF FF FF FF FF FF FF FF    
   9082 00F994 FF FF FF FF FF FF FF FF    
   9082 00F99C FF FF FF FF FF FF FF FF    
   9082 00F9A4 FF FF FF FF FF FF FF FF    
   9082 00F9AC FF FF FF FF FF FF FF FF    
   9082 00F9B4 FF FF FF FF FF FF FF FF    
   9082 00F9BC FF FF FF FF FF FF FF FF    
   9082 00F9C4 FF FF FF FF FF FF FF FF    
   9082 00F9CC FF FF FF FF FF FF FF FF    
   9082 00F9D4 FF FF FF FF FF FF FF FF    
   9082 00F9DC FF FF FF FF FF FF FF FF    
   9082 00F9E4 FF FF FF FF FF FF FF FF    
   9082 00F9EC FF FF FF FF FF FF FF FF    
   9082 00F9F4 FF FF FF FF FF FF FF FF    
   9082 00F9FC FF FF FF FF FF FF FF FF    
   9082 00FA04 FF FF FF FF FF FF FF FF    
   9082 00FA0C FF FF FF FF FF FF FF FF    
   9082 00FA14 FF FF FF FF FF FF FF FF    
   9082 00FA1C FF FF FF FF FF FF FF FF    
   9082 00FA24 FF FF FF FF FF FF FF FF    
   9082 00FA2C FF FF FF FF FF FF FF FF    
   9082 00FA34 FF FF FF FF FF FF FF FF    
   9082 00FA3C FF FF FF FF FF FF FF FF    
   9082 00FA44 FF FF FF FF FF FF FF FF    
   9082 00FA4C FF FF FF FF FF FF FF FF    
   9082 00FA54 FF FF FF FF FF FF FF FF    
   9082 00FA5C FF FF FF FF FF FF FF FF    
   9082 00FA64 FF FF FF FF FF FF FF FF    
   9082 00FA6C FF FF FF FF FF FF FF FF    
   9082 00FA74 FF FF FF FF FF FF FF FF    
   9082 00FA7C FF FF FF FF FF FF FF FF    
   9082 00FA84 FF FF FF FF FF FF FF FF    
   9082 00FA8C FF FF FF FF FF FF FF FF    
   9082 00FA94 FF FF FF FF FF FF FF FF    
   9082 00FA9C FF FF FF FF FF FF FF FF    
   9082 00FAA4 FF FF FF FF FF FF FF FF    
   9082 00FAAC FF FF FF FF FF FF FF FF    
   9082 00FAB4 FF FF FF FF FF FF FF FF    
   9082 00FABC FF FF FF FF FF FF FF FF    
   9082 00FAC4 FF FF FF FF FF FF FF FF    
   9082 00FACC FF FF FF FF FF FF FF FF    
   9082 00FAD4 FF FF FF FF FF FF FF FF    
   9082 00FADC FF FF FF FF FF FF FF FF    
   9082 00FAE4 FF FF FF FF FF FF FF FF    
   9082 00FAEC FF FF FF FF FF FF FF FF    
   9082 00FAF4 FF FF FF FF FF FF FF FF    
   9082 00FAFC FF FF FF FF FF FF FF FF    
   9082 00FB04 FF FF FF FF FF FF FF FF    
   9082 00FB0C FF FF FF FF FF FF FF FF    
   9082 00FB14 FF FF FF FF FF FF FF FF    
   9082 00FB1C FF FF FF FF FF FF FF FF    
   9082 00FB24 FF FF FF FF FF FF FF FF    
   9082 00FB2C FF FF FF FF FF FF FF FF    
   9082 00FB34 FF FF FF FF FF FF FF FF    
   9082 00FB3C FF FF FF FF FF FF FF FF    
   9082 00FB44 FF FF FF FF FF FF FF FF    
   9082 00FB4C FF FF FF FF FF FF FF FF    
   9082 00FB54 FF FF FF FF FF FF FF FF    
   9082 00FB5C FF FF FF FF FF FF FF FF    
   9082 00FB64 FF FF FF FF FF FF FF FF    
   9082 00FB6C FF FF FF FF FF FF FF FF    
   9082 00FB74 FF FF FF FF FF FF FF FF    
   9082 00FB7C FF FF FF FF FF FF FF FF    
   9082 00FB84 FF FF FF FF FF FF FF FF    
   9082 00FB8C FF FF FF FF FF FF FF FF    
   9082 00FB94 FF FF FF FF FF FF FF FF    
   9082 00FB9C FF FF FF FF FF FF FF FF    
   9082 00FBA4 FF FF FF FF FF FF FF FF    
   9082 00FBAC FF FF FF FF FF FF FF FF    
   9082 00FBB4 FF FF FF FF FF FF FF FF    
   9082 00FBBC FF FF FF FF FF FF FF FF    
   9082 00FBC4 FF FF FF FF FF FF FF FF    
   9082 00FBCC FF FF FF FF FF FF FF FF    
   9082 00FBD4 FF FF FF FF FF FF FF FF    
   9082 00FBDC FF FF FF FF FF FF FF FF    
   9082 00FBE4 FF FF FF FF FF FF FF FF    
   9082 00FBEC FF FF FF FF FF FF FF FF    
   9082 00FBF4 FF FF FF FF FF FF FF FF    
   9082 00FBFC FF FF FF FF FF FF FF FF    
   9082 00FC04 FF FF FF FF FF FF FF FF    
   9082 00FC0C FF FF FF FF FF FF FF FF    
   9082 00FC14 FF FF FF FF FF FF FF FF    
   9082 00FC1C FF FF FF FF FF FF FF FF    
   9082 00FC24 FF FF FF FF FF FF FF FF    
   9082 00FC2C FF FF FF FF FF FF FF FF    
   9082 00FC34 FF FF FF FF FF FF FF FF    
   9082 00FC3C FF FF FF FF FF FF FF FF    
   9082 00FC44 FF FF FF FF FF FF FF FF    
   9082 00FC4C FF FF FF FF FF FF FF FF    
   9082 00FC54 FF FF FF FF FF FF FF FF    
   9082 00FC5C FF FF FF FF FF FF FF FF    
   9082 00FC64 FF FF FF FF FF FF FF FF    
   9082 00FC6C FF FF FF FF FF FF FF FF    
   9082 00FC74 FF FF FF FF FF FF FF FF    
   9082 00FC7C FF FF FF FF FF FF FF FF    
   9082 00FC84 FF FF FF FF FF FF FF FF    
   9082 00FC8C FF FF FF FF FF FF FF FF    
   9082 00FC94 FF FF FF FF FF FF FF FF    
   9082 00FC9C FF FF FF FF FF FF FF FF    
   9082 00FCA4 FF FF FF FF FF FF FF FF    
   9082 00FCAC FF FF FF FF FF FF FF FF    
   9082 00FCB4 FF FF FF FF FF FF FF FF    
   9082 00FCBC FF FF FF FF FF FF FF FF    
   9082 00FCC4 FF FF FF FF FF FF FF FF    
   9082 00FCCC FF FF FF FF FF FF FF FF    
   9082 00FCD4 FF FF FF FF FF FF FF FF    
   9082 00FCDC FF FF FF FF FF FF FF FF    
   9082 00FCE4 FF FF FF FF FF FF FF FF    
   9082 00FCEC FF FF FF FF FF FF FF FF    
   9082 00FCF4 FF FF FF FF FF FF FF FF    
   9082 00FCFC FF FF FF FF FF FF FF FF    
   9082 00FD04 FF FF FF FF FF FF FF FF    
   9082 00FD0C FF FF FF FF FF FF FF FF    
   9082 00FD14 FF FF FF FF FF FF FF FF    
   9082 00FD1C FF FF FF FF FF FF FF FF    
   9082 00FD24 FF FF FF FF FF FF FF FF    
   9082 00FD2C FF FF FF FF FF FF FF FF    
   9082 00FD34 FF FF FF FF FF FF FF FF    
   9082 00FD3C FF FF FF FF FF FF FF FF    
   9082 00FD44 FF FF FF FF FF FF FF FF    
   9082 00FD4C FF FF FF FF FF FF FF FF    
   9082 00FD54 FF FF FF FF FF FF FF FF    
   9082 00FD5C FF FF FF FF FF FF FF FF    
   9082 00FD64 FF FF FF FF FF FF FF FF    
   9082 00FD6C FF FF FF FF FF FF FF FF    
   9082 00FD74 FF FF FF FF FF FF FF FF    
   9082 00FD7C FF FF FF FF FF FF FF FF    
   9082 00FD84 FF FF FF FF FF FF FF FF    
   9082 00FD8C FF FF FF FF FF FF FF FF    
   9082 00FD94 FF FF FF FF FF FF FF FF    
   9082 00FD9C FF FF FF FF FF FF FF FF    
   9082 00FDA4 FF FF FF FF FF FF FF FF    
   9082 00FDAC FF FF FF FF FF FF FF FF    
   9082 00FDB4 FF FF FF FF FF FF FF FF    
   9082 00FDBC FF FF FF FF FF FF FF FF    
   9082 00FDC4 FF FF FF FF FF FF FF FF    
   9082 00FDCC FF FF FF FF FF FF FF FF    
   9082 00FDD4 FF FF FF FF FF FF FF FF    
   9082 00FDDC FF FF FF FF FF FF FF FF    
   9082 00FDE4 FF FF FF FF FF FF FF FF    
   9082 00FDEC FF FF FF FF FF FF FF FF    
   9082 00FDF4 FF FF FF FF FF FF FF FF    
   9082 00FDFC FF FF FF FF FF FF FF FF    
   9082 00FE04 FF FF FF FF FF FF FF FF    
   9082 00FE0C FF FF FF FF FF FF FF FF    
   9082 00FE14 FF FF FF FF FF FF FF FF    
   9082 00FE1C FF FF FF FF FF FF FF FF    
   9082 00FE24 FF FF FF FF FF FF FF FF    
   9082 00FE2C FF FF FF FF FF FF FF FF    
   9082 00FE34 FF FF FF FF FF FF FF FF    
   9082 00FE3C FF FF FF FF FF FF FF FF    
   9082 00FE44 FF FF FF FF FF FF FF FF    
   9082 00FE4C FF FF FF FF FF FF FF FF    
   9082 00FE54 FF FF FF FF FF FF FF FF    
   9082 00FE5C FF FF FF FF FF FF FF FF    
   9082 00FE64 FF FF FF FF FF FF FF FF    
   9082 00FE6C FF FF FF FF FF FF FF FF    
   9082 00FE74 FF FF FF FF FF FF FF FF    
   9082 00FE7C FF FF FF FF FF FF FF FF    
   9082 00FE84 FF FF FF FF FF FF FF FF    
   9082 00FE8C FF FF FF FF FF FF FF FF    
   9082 00FE94 FF FF FF FF FF FF FF FF    
   9082 00FE9C FF FF FF FF FF FF FF FF    
   9082 00FEA4 FF FF FF FF FF FF FF FF    
   9082 00FEAC FF FF FF FF FF FF FF FF    
   9082 00FEB4 FF FF FF FF FF FF FF FF    
   9082 00FEBC FF FF FF FF FF FF FF FF    
   9082 00FEC4 FF FF FF FF FF FF FF FF    
   9082 00FECC FF FF FF FF FF FF FF FF    
   9082 00FED4 FF FF FF FF FF FF FF FF    
   9082 00FEDC FF FF FF FF FF FF FF FF    
   9082 00FEE4 FF FF FF FF FF FF FF FF    
   9082 00FEEC FF FF FF FF FF FF FF FF    
   9082 00FEF4 FF FF FF FF FF FF FF FF    
   9082 00FEFC FF FF FF FF FF FF FF FF    
   9082 00FF04 FF FF FF FF FF FF FF FF    
   9082 00FF0C FF FF FF FF FF FF FF FF    
   9082 00FF14 FF FF FF FF FF FF FF FF    
   9082 00FF1C FF FF FF FF FF FF FF FF    
   9082 00FF24 FF FF FF FF FF FF FF FF    
   9082 00FF2C FF FF FF FF FF FF FF FF    
   9082 00FF34 FF FF FF FF FF FF FF FF    
   9082 00FF3C FF FF FF FF FF FF FF FF    
   9082 00FF44 FF FF FF FF FF FF FF FF    
   9082 00FF4C FF FF FF FF FF FF FF FF    
   9082 00FF54 FF FF FF FF FF FF FF FF    
   9082 00FF5C FF FF FF FF FF FF FF FF    
   9082 00FF64 FF FF FF FF FF FF FF FF    
   9082 00FF6C FF FF FF FF FF FF FF FF    
   9082 00FF74 FF FF FF FF FF FF FF FF    
   9082 00FF7C FF FF FF FF FF FF FF FF    
   9082 00FF84 FF FF FF FF FF FF FF FF    
   9082 00FF8C FF FF FF FF FF FF FF FF    
   9082 00FF94 FF FF FF FF FF FF FF FF    
   9082 00FF9C FF FF FF FF FF FF FF FF    
   9082 00FFA4 FF FF FF FF FF FF FF FF    
   9082 00FFAC FF FF FF FF FF FF FF FF    
   9082 00FFB4 FF FF FF FF FF FF FF FF    
   9082 00FFBC FF FF FF FF FF FF FF FF    
   9082 00FFC4 FF FF FF FF FF FF FF FF    
   9082 00FFCC FF FF FF FF FF FF FF FF    
   9082 00FFD4 FF FF                      
   9083 00FFD6 04 00                        	dw		4			; task #4
                                           
   9085 00FFD8 FF FF FF FF FF FF            	.org	$FFDE
   9086 00FFDE 06 00                        	dw		6			; task #6
                                           
   9088 00FFE0 FF FF FF FF FF FF            	.org 	$FFE6
   9089 00FFE6 8C EF                        	dw		BrkRout
                                           
   9091 00FFE8 FF FF FF FF FF FF            	.org	$FFEE		; IRQ vector
   9092 00FFEE 00 EF                        	dw		IRQRout
                                           
   9094 00FFF0 FF FF FF FF FF FF FF FF      	.org	$FFFC
   9094 00FFF8 FF FF FF FF                
   9095 00FFFC 00 E0                        	dw		$E000
                                           
                                           	.org	$FFFE
   9098 00FFFE FF EE                        	dw		ByteIRQRout

Checksum=2FA87261

Number of instructions processed: 3709
Number of opcode bytes: 8121
Bytes per instruction: 2.189539 (17.516312 bits)
Clock cycle count: 5036
Clocks per instruction: 1.357778

The above statistics are only estimates.

	The CPI assumes data memory access requires two clock cycles and instruction
	access is single cycle. The actual CPI may be higher if there are memory wait 
	states, or lower if data is found in the cache.
