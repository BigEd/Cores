Finitron FT832 assembler   version 1.4   Sat Nov 21 21:34:42 2015     Page 1
FTBios816.asm

                                        ; ============================================================================
                                        ; FTBios816.asm
                                        ;        __
                                        ;   \\__/ o\    (C) 2014  Robert Finch, Stratford
                                        ;    \  __ /    All rights reserved.
                                        ;     \/_//     robfinch<remove>@finitron.ca
                                        ;       ||
                                        ;  
                                        ;
                                        ; This source file is free software: you can redistribute it and/or modify 
                                        ; it under the terms of the GNU Lesser General Public License as published 
                                        ; by the Free Software Foundation, either version 3 of the License, or     
                                        ; (at your option) any later version.                                      
                                        ;                                                                          
                                        ; This source file is distributed in the hope that it will be useful,      
                                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                                        ; GNU General Public License for more details.                             
                                        ;                                                                          
                                        ; You should have received a copy of the GNU General Public License        
                                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                                        ;                                                                          
                                        ; ============================================================================
                                        ;
     25 = 000000000000000D                            CR			EQU		13
     26 = 000000000000000A                            LF			EQU		10
     27 = 000000000000001B                            ESC			EQU		$1B
     28 = 0000000000000008                            BS			EQU		8
     29 = 0000000000000003                            CTRLC		EQU		3
                                        
     31 = 0000000000000012                            SC_LSHIFT	EQU		$12
     32 = 0000000000000059                            SC_RSHIFT	EQU		$59
     33 = 00000000000000F0                            SC_KEYUP	EQU		$F0
     34 = 00000000000000E0                            SC_EXTEND	EQU		$E0
     35 = 0000000000000014                            SC_CTRL		EQU		$14
     36 = 0000000000000011                            SC_ALT		EQU		$11
     37 = 0000000000000071                            SC_DEL		EQU		$71		; extend
     38 = 0000000000000058                            SC_LCTRL	EQU		$58
     39 = 0000000000000077                            SC_NUMLOCK	EQU		$77
     40 = 000000000000007E                            SC_SCROLLLOCK	EQU	$7E
     41 = 0000000000000058                            SC_CAPSLOCK	EQU		$58
                                        
     43 = 000000000000001F                            TEXTROWS	EQU		31
     44 = 0000000000000054                            TEXTCOLS	EQU		84
                                        
     46 = 0000000000000004                            TickCount	EQU		$4
     47 = 0000000000000008                            KeyState1	EQU		$8
     48 = 0000000000000009                            KeyState2	EQU		$9
     49 = 000000000000000A                            KeybdLEDs	EQU		$A
     50 = 000000000000000B                            KeybdWaitFlag	EQU	$B
     51 = 000000000000000C                            NumWorkArea	EQU		$C
                                        
                                        ; Range $10 to $1F reserved for hardware counters
     54 = 0000000000000010                            CNT0L		EQU		$10
     55 = 0000000000000011                            CNT0M		EQU		$11
     56 = 0000000000000012                            CNT0H		EQU		$12
     57 = 0000000000000020                            RangeStart	EQU		$20
     58 = 0000000000000024                            RangeEnd	EQU		$24
     59 = 0000000000000030                            CursorX		EQU		$30
     60 = 0000000000000032                            CursorY		EQU		$32
     61 = 0000000000000034                            VideoPos	EQU		$34
     62 = 0000000000000036                            NormAttr	EQU		$36
     63 = 0000000000000038                            StringPos	EQU		$38
     64 = 000000000000003C                            EscState	EQU		$3C
                                        
     66 = 0000000000000080                            reg_cs		EQU		$80
     67 = 00000084                      reg_ds		EQU		reg_cs + 4
     68 = 00000088                      reg_pc		EQU		reg_ds + 4
     69 = 0000008C                      reg_a		EQU		reg_pc + 4
     70 = 00000090                      reg_x		EQU		reg_a + 4
     71 = 00000094                      reg_y		EQU		reg_x + 4
     72 = 00000098                      reg_sp		EQU		reg_y + 4
     73 = 0000009C                      reg_sr		EQU		reg_sp + 4
     74 = 000000A0                      reg_db		EQU		reg_sr + 4
     75 = 000000A4                      reg_dp		EQU		reg_db + 4
     76 = 000000A8                      reg_bl		EQU		reg_dp + 4
                                        
     78 = 0000000000000080                            cs_save		EQU		$80
     79 = 0000000000000084                            ds_save		EQU		$84
     80 = 0000000000000088                            pc_save		EQU		$88
     81 = 000000000000008C                            pb_save		EQU		$8C
     82 = 0000000000000090                            acc_save	EQU		$90
     83 = 0000000000000094                            x_save		EQU		$94
     84 = 0000000000000098                            y_save		EQU		$98
     85 = 000000000000009C                            sp_save		EQU		$9C
     86 = 00000000000000A0                            sr_save		EQU		$A0
     87 = 00000000000000A4                            srx_save	EQU		$A4
     88 = 00000000000000A8                            db_save		EQU		$A8
     89 = 00000000000000AC                            dpr_save	EQU		$AC
                                        
     91 = 00000000000000B4                            running_task	EQU		$B4
                                        
     93 = 00000000000000B6                            keybd_char	EQU		$B6
     94 = 00000000000000B8                            keybd_cmd	EQU		$B8
     95 = 00000000000000BA                            WorkTR		EQU		$BA
     96 = 0000000000000100                            ldtrec		EQU		$100
                                        
     98 = 00000000000003F0                            OutputVec	EQU		$03F0
                                        
    100 = 000000000000B000                            PCS0		EQU		$B000
    101 = 0000B002                      PCS1		EQU		PCS0 + 2
    102 = 0000B004                      PCS2		EQU		PCS1 + 2
    103 = 0000B006                      PCS3		EQU		PCS2 + 2
    104 = 0000B008                      PCS4	    EQU		PCS3 + 2
    105 = 0000B00A                      PCS5		EQU		PCS4 + 2
    106 = 0000B010                      CTR0_LMT	EQU		PCS0 + 16
    107 = 0000B013                      CTR0_CTRL	EQU		CTR0_LMT + 3
    108 = 0000B014                      CTR1_LMT	EQU		CTR0_CTRL + 1
    109 = 0000B017                      CTR1_CTRL	EQU		CTR1_LMT + 3
    110 = 000000000000B01F                            MPU_IRQ_STATUS	EQU		$B01F
                                        
    112 = 0000000000FD0000                            VIDBUF		EQU		$FD0000
    113 = 0000000000FEA000                            VIDREGS		EQU		$FEA000
    114 = 0000000000FEA100                            PRNG		EQU		$FEA100
    115 = 0000000000FEA110                            KEYBD		EQU		$FEA110
    116 = 0000000000FEA200                            FAC1		EQU		$FEA200
                                        
    118 = 0000000000007868                            do_invaders			EQU		$7868
                                        
Finitron FT832 assembler   version 1.4   Sat Nov 21 21:34:42 2015     Page 1
supermon832.asm

                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;	.opt proc65c02,caseinsensitive
                                        	cpu	W65C02
                                        ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                                        ;*                                                                                 *
                                        ;*      SUPERMON 816 MACHINE LANGUAGE MONITOR FOR THE W65C816S MICROPROCESSOR      *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;*      Copyright ©1991-2014 by BCS Technology Limited.  All rights reserved.      *
                                        ;*                                                                                 *
                                        ;* Permission is hereby granted to use, copy, modify and distribute this software, *
                                        ;* provided this copyright notice remains in the source code and  proper  attribu- *
                                        ;* tion is given.  Redistribution, regardless of form, must be at no charge to the *
                                        ;* end  user.  This code or any part thereof, including any derivation, MAY NOT be *
                                        ;* incorporated into any package intended for sale,  unless written permission has * 
                                        ;* been given by the copyright holder.                                             *
                                        ;*                                                                                 *
                                        ;* THERE IS NO WARRANTY OF ANY KIND WITH THIS SOFTWARE.  The user assumes all risk *
                                        ;* in connection with the incorporation of this software into any system.          *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;* Supermon 816 is a salute to Jim Butterfield, who passed away on June 29, 2007.  *
                                        ;*                                                                                 *
                                        ;* Jim, who was the unofficial  spokesman for  Commodore  International during the *  
                                        ;* heyday of the company's 8 bit supremacy, scratch-developed the Supermon machine *
                                        ;* language monitor for the PET & CBM computers.   When the best-selling Commodore *
                                        ;* 64 was introduced, Jim adapted his software to the new machine & gave the adap- *
                                        ;* tation the name Supermon 64.   Commodore  subsequently  integrated a customized *
                                        ;* version of Supermon 64 into the C-128 to act as the resident M/L monitor.       *
                                        ;*                                                                                 *
                                        ;* Although Supermon 816 is not an adaptation of Supermon 64,  it was  decided  to *
                                        ;* keep the Supermon name alive, since Supermon 816's general operation & user in- *
                                        ;* terface is similar to that of Supermon 64.   Supermon 816 is 100 percent native *
                                        ;* mode 65C816 code & was developed from a blank canvas.                           *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;* This version customized for the RTF65002 test system                            *
                                        ;* Finitron.ca                                                                     *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;* Supermon 816 is a full featured monitor and supports the following operations:  *
                                        ;*                                                                                 *
                                        ;*     A — Assemble code                                                           *
                                        ;*     C — Compare memory regions                                                  *
                                        ;*     D — Disassemble code                                                        *
                                        ;*     F — Fill memory region (cannot span banks)                                  *
                                        ;*     G — Execute code (stops at BRK)                                             *
                                        ;*     H — Search (hunt) memory region                                             *
                                        ;*     J — Execute code as a subroutine (stops at BRK or RTS)                      *
                                        ;*     M — Dump & display memory range                                             *
                                        ;*     R — Dump & display 65C816 registers                                         *
                                        ;*     T — Copy (transfer) memory region                                           *
                                        ;*     X — Exit Supermon 816 & return to operating environment                     *
                                        ;*     > — Modify up to 32 bytes of memory                                         *
                                        ;*     ; — Modify 65C816 registers                                                 *
                                        ;*                                                                                 *
                                        ;* Supermon 816 accepts binary (%), octal (@), decimal (+) and hexadecimal ($) as  *
                                        ;* input for numeric parameters.  Additionally, the H and > operations accept an   *
                                        ;* ASCII string in place of numeric values by preceding the string with ', e.g.:   *
                                        ;*                                                                                 *
                                        ;*     h 042000 042FFF 'BCS Technology Limited                                     *
                                        ;*                                                                                 *
                                        ;* If no radix symbol is entered hex is assumed.                                   *
                                        ;*                                                                                 *
                                        ;* Numeric conversion is also available.  For example, typing:                     *
                                        ;*                                                                                 *
                                        ;*     +1234567 <CR>                                                               *
                                        ;*                                                                                 *
                                        ;* will display:                                                                   *
                                        ;*                                                                                 *
                                        ;*         $12D687                                                                 *
                                        ;*         +1234567                                                                *
                                        ;*         @04553207                                                               *
                                        ;*         %100101101011010000111                                                  *
                                        ;*                                                                                 *
                                        ;* In the above example, <CR> means the console keyboard's return or enter key.    *
                                        ;*                                                                                 *
                                        ;* All numeric values are internally processed as 32 bit unsigned integers.  Addr- *
                                        ;* esses may be entered as 8, 16 or 24 bit values.  During instruction assembly,   *
                                        ;* immediate mode operands may be forced to 16 bits by preceding the operand with  *
                                        ;* an exclamation point if the instruction can accept a 16 bit operand, e.g.:      *
                                        ;*                                                                                 *
                                        ;*     a 1f2000 lda !#4                                                            *
                                        ;*                                                                                 *
                                        ;* The above will assemble as:                                                     *
                                        ;*                                                                                 *
                                        ;*     A 1F2000  A9 04 00     LDA #$0004                                           *
                                        ;*                                                                                 *
                                        ;* Entering:                                                                       *
                                        ;*                                                                                 *
                                        ;*     a 1f2000 ldx !#+157                                                         *
                                        ;*                                                                                 *
                                        ;* will assemble as:                                                               *
                                        ;*                                                                                 *
                                        ;*     A 1F2000  A2 9D 00     LDX #$009D                                           *
                                        ;*                                                                                 *
                                        ;* Absent the ! in the operand field, the above would have been assembled as:      *
                                        ;*                                                                                 *
                                        ;*     A 1F2000  A2 9D        LDX #$9D                                             *
                                        ;*                                                                                 *
                                        ;* If an immediate mode operand is greater than $FF assembly of a 16 bit operand   *
                                        ;* is implied.                                                                     *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;* A Note on the PEA & PEI Instructions                                            *
                                        ;* ————————————————————————————————————                                            *
                                        ;*                                                                                 *
                                        ;* The Eyes and Lichty programming manual uses the following syntax for the PEA    *
                                        ;* and PEI instructions:                                                           *
                                        ;*                                                                                 *
                                        ;*     PEA <operand>                                                               *
                                        ;*     PEI (<operand>)                                                             *
                                        ;*                                                                                 *
                                        ;* The WDC data sheet that was published at the time of the 65C816's release in    *
                                        ;* 1984 does not indicate a recommended or preferred syntax for any of the above   *
                                        ;* instructions.  PEA pushes its operand to the stack and hence operates like any  *
                                        ;* other immediate mode instruction, in that the operand is the data (however, PEA *
                                        ;* doesn't affect the status register).  Similarly, PEI pushes the 16 bit value    *
                                        ;* stored at <operand> and <operand>+1, and hence operates like any other direct   *
                                        ;* (zero) page instruction, again without affecting the status register.           *
                                        ;*                                                                                 *
                                        ;* BCS Technology Limited is of the opinion that the developer of the ORCA/M as-   *
                                        ;* sembler, which is the assembler referred to in the Eyes and Lichty manual, mis- *
                                        ;* understood how PEA and PEI behave during runtime, and hence chose an incorrect  *
                                        ;* syntax for these two instructions.  This error was subsequently carried forward *
                                        ;* by Eyes and Lichty.                                                             *
                                        ;*                                                                                 *
                                        ;* Supermon 816's assembler uses the following syntax for PEA and PEI:             *
                                        ;*                                                                                 *
                                        ;*     PEA #<operand>                                                              *
                                        ;*     PEI <operand>                                                               *
                                        ;*                                                                                 *
                                        ;* The operand for PEA is treated as a 16 bit value, even if entered as an 8 bit   *
                                        ;* value.  The operand for PEI must be 8 bits.                                     *
                                        ;*                                                                                 *
                                        ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                                        ;
                                        ;	* * * * * * * * * * * *
                                        ;	* VERSION INFORMATION *
                                        ;	* * * * * * * * * * * *
                                        ;
                                        softvers .macro                ;software version — change with each revision...
                                                 .byte "1"             ;major
                                                 .byte "."
                                                 .byte "0"             ;minor
                                                 .byte "."
                                                 .byte "0"             ;revision
                                                 .endm
                                        ;
                                        ;REVISION TABLE
                                        ;
                                        ;Ver  Rev Date    Description
                                        ;———————————————————————————————————————————————————————————————————————————————
                                        ;1.0  2013/11/01  A) Original derived from the POC V1.1 single-board computer
                                        ;                    firmware.
                                        ;     2013/11/04  A) Fixed a problem where the B-accumulator wasn't always being
                                        ;                    be copied to shadow storage after return from execution of
                                        ;                    a J command.
                                        ;———————————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;
                                        ;	        COMMENT ABBREVIATIONS
                                        ;	————————————————————————————————————————————————————
                                        ;	  BCD   binary-coded decimal
                                        ;	   DP   direct page or page zero
                                        ;	  EOF   end-of-field
                                        ;	  EOI   end-of-input
                                        ;	  LSB   least significant byte/bit
                                        ;	  LSD   least significant digit
                                        ;	  LSN   least significant nybble
                                        ;	  LSW   least significant word
                                        ;	  MPU   microprocessor
                                        ;	  MSB   most significant byte/bit
                                        ;	  MSD   most significant digit
                                        ;	  MSN   most significant nybble
                                        ;	  MSW   most-significant word
                                        ;	  RAM   random access memory
                                        ;	   WS   whitespace, i.e., blanks & horizontal tabs
                                        ;	————————————————————————————————————————————————————
                                        ;	A word is defined as 16 bits.
                                        ;
                                        ;	   MPU REGISTER SYMBOLS
                                        ;	——————————————————————————
                                        ;	   .A   accumulator LSB
                                        ;	   .B   accumulator MSB
                                        ;	   .C   16 bit accumulator
                                        ;	   .X   X-index
                                        ;	   .Y   Y-index
                                        ;      DS   data segment
                                        ;	   DB   data bank
                                        ;	   DP   direct page
                                        ;      CS   code segment
                                        ;	   PB   program bank
                                        ;	   PC   program counter
                                        ;	   SP   stack pointer
                                        ;	   SR   MPU status
                                        ;      SRX  status extension
                                        ;	————————————————————————————
                                        ;
                                        ;	  MPU STATUS REGISTER SYMBOLS
                                        ;	———————————————————————————————
                                        ;	    C   carry
                                        ;	    D   decimal mode
                                        ;	    I   maskable interrupts
                                        ;	    m   accumulator/memory size
                                        ;	    N   result negative
                                        ;	    V   sign overflow
                                        ;	    x   index registers size
                                        ;	    Z   result zero
                                        ;
                                        ;      16   16 bit emulation flag
                                        ;      32   32 bit emulation flag
                                        ;	———————————————————————————————
                                        ;
                                        ;================================================================================
                                        ;
                                        ;SYSTEM INTERFACE DEFINITIONS
                                        ;
                                        ;	——————————————————————————————————————————————————————————————————
                                        ;	This section defines the interface between Supermon 816 & the host
                                        ;	system.   Change these definitions to suit your system, but do not
                                        ;	change any label names.  All definitions must have valid values in
                                        ;	order to assemble Supermon 816.
                                        ;	——————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————
    341 = 000000000000C000                            _origin_ =$00C000              ;assembly address...
                                        ;
                                        ;	Set _ORIGIN_ to Supermon 816's desired assembly address.
                                        ;	————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    347 = 000000000000F403                            vecexit  =$00F403              ;exit to environment address...
                                        ;
                                        ;	Set VECEXIT to where Supermon 816 should go when it exits.  Supermon 816
                                        ;	will do a JML (long jump) to this address, which means VECEXIT must be a
                                        ;	24 bit address.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    355 = 0000000000000102                            vecbrki  =$0102                ;BRK handler indirect vector...
    356 = 0000000000000105                            vecbrkia =$0105                ;system indirect BRK vector
                                        ;
                                        ;	Supermon 816 will modify this vector so that execution of a BRK instruc-
                                        ;	tion is intercepted & the registers  are  captured.   Your BRK front end
                                        ;	should jump through this vector after pushing the registers as follows:
                                        ;
                                        ;	         phb                   ;save DB
                                        ;	         phd                   ;save DP
                                        ;	         rep #%00110000        ;16 bit registers
                                        ;	         pha
                                        ;	         phx
                                        ;	         phy
                                        ;	         jmp (vecbrki)         ;indirect vector
                                        ;
                                        ;	When a G or J command is issued, the above sequence will be reversed be-
                                        ;	fore a jump is made to the code to be executed.  Upon exit from Supermon
                                        ;	816, the original address at VECBRKI will be restored.
                                        ;
                                        ;	If your BRK front end doesn't conform to the above you will have to mod-
                                        ;	ify Supermon 816 to accommodate the differences.  The most likely needed
                                        ;	changes will be in the order in which registers are pushed to the stack.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    380 = 0000000000003FFF                            hwstack  =$3fff                ;top of hardware stack...
                                        ;
                                        ;	Supermon 816 initializes the stack pointer to this address when the cold
                                        ;	start at MONCOLD is called to enter the monitor.  The stack pointer will
                                        ;	be undisturbed when entry into Supermon 816 is through JMONBRK (see jump
                                        ;	table definitions).
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    389 = 0000000000000080                            zeropage =$80                  ;Supermon 816's direct page...
                                        ;
                                        ;	Supermon 816 uses direct page starting at this address.  Be sure that no
                                        ;	conflict occurs with other software.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    396 = 000000000000F400                            getcha   =$F400                ;get keystroke from console...
                                        ;
                                        ;	GETCHA refers to an operating system API call that returns a keystroke
                                        ;	in the 8 bit accumulator.  Supermon 816  assumes that GETCHA is a non-
                                        ;	blocking subroutine & returns with carry clear to indicate that a key-
                                        ;	stroke is in .A, or with carry set to indicate that no keystroke was
                                        ;	available.  GETCHA will be called with a JSR instruction.
                                        ;
                                        ;	Supermon 816 expects .X & .Y to be preserved upon return from GETCHA.
                                        ;	You may have to modify Supermon 816 at all calls to GETCHA if your "get
                                        ;	keystroke" routine works differently than described.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    410 = 000000000000F406                            putcha   =$F406                ;print character on console...
                                        ;
                                        ;	PUTCHA refers to an operating system API call that prints a character to
                                        ;	the console screen.  The character to be printed will be in .A, which
                                        ;	will be set to 8-bit width.  Supermon 816 assumes that PUTCHA will block
                                        ;	until the character can be processed.  PUTCHA will be called with a JSR
                                        ;	instructions.
                                        ;
                                        ;	Supermon 816 expects .X & .Y to be preserved upon return from PUTCHA.
                                        ;	You may have to modify Supermon 816 at all calls to PUTCHA if your "put
                                        ;	character" routine works differently than described.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    424 = 0000000000000003                            stopkey  =$03                  ;display abort key...
                                        ;
                                        ;	Supermon 816 will poll for a "stop key" during display operations, such
                                        ;	as code disassembly & memory dumps, so as to abort further processing &
                                        ;	return to the command prompt.  STOPKEY must be defined with the ASCII
                                        ;	value that the "stop key" will emit when typed.  The polling is via a
                                        ;	call to GETCHA (described above).  The default STOPKEY definition of $03
                                        ;	is for ASCII <ETX> or [Ctrl-C].
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
    434 = 0000000000000200                            ibuffer  =$000200               ;input buffer &...
    435 = 00000251                      auxbuf   =ibuffer+s_ibuf+1 ;auxiliary buffer...
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	Supermon 816 will use the above definitions for input buffers.  These
                                        ;	buffers may be located anywhere in RAM that is convenient.  The buffers
                                        ;	are stateless, which means that unless Supermon 816 has control of your
                                        ;	system, they may be overwritten without consequence.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;================================================================================
                                        ;
                                        ;W65C816S INSTRUCTION SYNTHESIS MACROS —— !!!!! DO NOT EDIT !!!!!
                                        ;
                                        _asm24_  .macro .ad
                                                 .byte <.ad,>.ad,.ad >> 16
                                                 .endm
                                        ;
                                        brl      .macro .ad
                                        .ba      =*+3
                                                 .byte $82
                                                 .word .ad-.ba
                                                 .endm
                                        ;
                                        ; jml is supported for the RTF65002 in 65c02 mode. And the opcode is supported
                                        ; by the assembler.
                                        ;jml      .macro .ad
                                        ; ;        .byte $5c
                                        ;         _asm24_ .ad
                                        ;         .endm
                                        ;
                                        mvn      .macro .s,.d
                                                 .byte $54,.d,.s
                                                 .endm
                                        ;
                                        mvp      .macro .s,.d
                                                 .byte $44,.d,.s
                                                 .endm
                                        ;
                                        pea      .macro .op
                                                 .byte $f4
                                                 .word .op
                                                 .endm
                                        ;
                                        phb      .macro
                                                 .byte $8b
                                                 .endm
                                        ;
                                        phk      .macro
                                                 .byte $4b
                                                 .endm
                                        ;
                                        plb      .macro
                                                 .byte $ab
                                                 .endm
                                        ;
                                        rep      .macro .op
                                                 .byte $c2,.op
                                                 .endm
                                        ;
                                        sep      .macro .op
                                                 .byte $e2,.op
                                                 .endm
                                        ;
                                        tcd      .macro
                                                 .byte $5b
                                                 .endm
                                        ;
                                        tcs      .macro
                                                 .byte $1b
                                                 .endm
                                        ;
                                        tdc      .macro
                                                 .byte $7b
                                                 .endm
                                        ;
                                        tsc      .macro
                                                 .byte $3b
                                                 .endm
                                        ;
                                        txy      .macro
                                                 .byte $9b
                                                 .endm
                                        ;
                                        tyx      .macro
                                                 .byte $bb
                                                 .endm
                                        ;
                                        wai      .macro
                                                 .byte $cb
                                                 .endm
                                        ;
                                        xba      .macro
                                                 .byte $eb
                                                 .endm
                                        ;
                                        adcw     .macro .op
                                                 adc #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        andw     .macro .op
                                                 and #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        bitw     .macro .op
                                                 bit #<.op
                                                 .byte >.op
                                                 .endm
                                        ;         
                                        cmpw     .macro .op
                                                 cmp #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        cpxw     .macro .op
                                                 cpx #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        cpyw     .macro .op
                                                 cpy #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        eorw     .macro .op
                                                 eor #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        ldaw     .macro .op
                                                 lda #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        ldxw     .macro .op
                                                 ldx #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        ldyw     .macro .op
                                                 ldy #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        oraw     .macro .op
                                                 ora #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        sbcw     .macro .op
                                                 sbc #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        ldalx    .macro .ad
                                                 .byte $+         .byte a_esc,"("
                                     +            .byte a_esc,"G4"
                                        
                                     +            .byte <.ad,>.ad,.ad >> 16
                                        
                                                 .endm
                                        ;
                                        adcil    .macro .ad
                                                 .byte $67,.ad
                                                 .endm
                                        ;
                                        adcily   .macro .ad
                                                 .byte $77,.ad
                                                 .endm
                                        ;
                                        andil    .macro .ad
                                                 .byte $27,.ad
                                                 .endm
                                        ;
                                        andily   .macro .ad
                                                 .byte $37,.ad
                                                 .endm
                                        ;
                                        cmpil    .macro .ad
                                                 .byte $c7,.ad
                                                 .endm
                                        ;
                                        cmpily   .macro .ad
                                                 .byte $d7,.ad
                                                 .endm
                                        ;
                                        eoril    .macro .ad
                                                 .byte $47,.ad
                                                 .endm
                                        ;
                                        eorily   .macro .ad
                                                 .byte $57,.ad
                                                 .endm
                                        ;
                                        ldail    .macro .ad
                                                 .byte $a7,.ad
                                                 .endm
                                        ;
                                        ldaily   .macro .ad
                                                 .byte $b7,.ad
                                                 .endm
                                        ;
                                        orail    .macro .ad
                                                 .byte $07,.ad
                                                 .endm
                                        ;
                                        oraily   .macro .ad
                                                 .byte $17,.ad
                                                 .endm
                                        ;
                                        sbcil    .macro .ad
                                                 .byte $e7,.ad
                                                 .endm
                                        ;
                                        sbcily   .macro .ad
                                                 .byte $f7,.ad
                                                 .endm
                                        ;
                                        stail    .macro .ad
                                                 .byte $87,.ad
                                                 .endm
                                        ;
                                        staily   .macro .ad
                                                 .byte $97,.ad
                                                 .endm
                                        ;
                                        adcs     .macro .of
                                                 .byte $63,.of
                                                 .endm
                                        ;
                                        adcsi    .macro .of
                                                 .byte $73,.of
                                                 .endm
                                        ;
                                        ands     .macro .of
                                                 .byte $23,.of
                                                 .endm
                                        ;
                                        andsi    .macro .of
                                                 .byte $33,.of
                                                 .endm
                                        ;
                                        cmps     .macro .of
                                                 .byte $c3,.of
                                                 .endm
                                        ;
                                        cmpsi    .macro .of
                                                 .byte $d3,.of
                                                 .endm
                                        ;
                                        eors     .macro .of
                                                 .byte $43,.of
                                                 .endm
                                        ;
                                        eorsi    .macro .of
                                                 .byte $53,.of
                                                 .endm
                                        ;
                                        ldas     .macro .of
                                                 .byte $a3,.of
                                                 .endm
                                        ;
                                        ldasi    .macro .of
                                                 .byte $b3,.of
                                                 .endm
                                        ;
                                        oras     .macro .of
                                                 .byte $03,.of
                                                 .endm
                                        ;
                                        orasi    .macro .of
                                                 .byte $13,.of
                                                 .endm
                                        ;
                                        sbcs     .macro .of
                                                 .byte $e3,.of
                                                 .endm
                                        ;
                                        sbcsi    .macro .of
                                                 .byte $f3,.of
                                                 .endm
                                        ;
                                        stas     .macro .of
                                                 .byte $83,.of
                                                 .endm
                                        ;
                                        stasi    .macro .of
                                                 .byte $93,.of
                                                 .endm
                                        ;
                                        longa    .macro
                                                 .byte $c2,$20
                                                 .endm
                                        ;
                                        longr    .macro
                                                 .byte $c2,$30
                                                 .endm
                                        ;
                                        longx    .macro
                                                 .byte $c2,$10
                                                 .endm
                                        ;
                                        shorta   .macro
                                                 .byte $e2,$20
                                                 .endm
                                        ;
                                        shorti   .macro
                                                 .byte $e2,$10
                                                 .endm
                                        ;
                                        shortr   .macro
                                                 .byte $e2,$30
                                                 .endm
                                        ;
                                        shortx   .macro
                                                 .byte $e2,$10
                                                 .endm
                                        ;
                                        ;================================================================================
                                        ;
                                        ;CONSOLE DISPLAY CONTROL MACROS
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	The following macros execute terminal  control procedures  that  perform
                                        ;	such tasks as clearing the screen,  switching  between  normal & reverse
                                        ;	video, etc.  These macros are for WYSE 60 & compatible displays, such as
                                        ;	the WYSE 150, WYSE 160, WYSE 325 & WYSE GPT.   Only the functions needed
                                        ;	by Supermon 816 are included.
                                        ;
                                        ;	If your console is not WYSE 60 compatible, you will need to  edit  these
                                        ;	macros as required to control your particular console or terminal.  Note
                                        ;	that in some cases one macro may call another.  Exercise caution in your
                                        ;	edits to avoid introducing display bugs.
                                        ;
                                        ;	If your console display cannot execute one of these procedures,  such as
                                        ;	'CL' (clear to end of line), you will have to develop an alternative.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;
                                        ;	clearing data...
                                        ;
                                        bs       .macro                ;destructive backspace
                                                 .byte a_bs
                                     +            .byte a_esc,"W"
                                        
                                                 .endm
                                        ;
                                        cl       .macro                ;clear to end of line 
                                                 .byte a_esc,"T"
                                                 .endm
                                        ;
                                        ;
                                        ;	cursor control...
                                        ;
                                        cn       .macro                ;cursor on
                                                 .byte a_esc,"`1"
                                                 .endm
                                        ;
                                        co       .macro                ;cursor off
                                                 .byte a_esc,"`0"
                                                 .endm
                                        ;
                                        cr       .macro                ;carriage return
                                                 .byte a_cr
                                                 .endm
                                        ;
                                        lf       .macro                ;carriage return/line feed
                                     +            .byte a_cr
                                        
                                                 .byte a_lf
                                                 .endm
                                        ;
                                        ;
                                        ;	display attributes...
                                        ;
                                        bf       .macro                ;reverse foreground
                                                 .byte a_esc,"("
                                                 .byte a_esc,"G4"
                                                 .endm
                                        ;
                                        er       .macro                ;enable normal foreground
                                                 .byte a_esc,"("
                                                 .byte a_esc,"G0"
                                                 .endm
                                        ;
                                        sf       .macro                ;set foreground
                                                 .byte a_esc,"("
                                                 .byte a_esc,"G0"
                                                 .endm
                                        ;
                                        ;
                                        ;	display editing...
                                        ;
                                        dcuc     .macro                ;delete char under cursor
                                                 .byte a_esc,"W"
                                                 .endm
                                        ;
                                        ;
                                        ;	miscellaneous control...
                                        ;
                                        rb       .macro                ;ring "bell"
                                                 .byte a_bel
                                                 .endm
                                        ;
                                        ;================================================================================
                                        ;
                                        ;ASCII CONTROL DEFINITIONS (menmonic order)
                                        ;
    844 = 0000000000000007                            a_bel    =$07                  ;<BEL> alert/ring bell
    845 = 0000000000000008                            a_bs     =$08                  ;<BS>  backspace
    846 = 000000000000000D                            a_cr     =$0d                  ;<CR>  carriage return
    847 = 000000000000007F                            a_del    =$7f                  ;<DEL> delete
    848 = 000000000000001B                            a_esc    =$1b                  ;<ESC> escape
    849 = 0000000000000009                            a_ht     =$09                  ;<HT>  horizontal tabulation
    850 = 000000000000000A                            a_lf     =$0a                  ;<LF>  linefeed
                                        ;
                                        ;
                                        ;	miscellaneous (description order)...
                                        ;
    855 = 20                            a_blank  =' '                  ;blank (whitespace)
    856 = 7A                            a_asclch ='z'                  ;end of lowercase ASCII
    857 = 000000000000005F                            a_lctouc =$5f                  ;LC to UC conversion mask
    858 = 61                            a_asclcl ='a'                  ;start of lowercase ASCII
                                        ;
                                        ;================================================================================
                                        ;
                                        ;GLOBAL ATOMIC CONSTANTS
                                        ;
                                        ;
                                        ;	data type sizes...
                                        ;
    867 = 0000000000000001                            s_byte   =1                    ;byte
    868 = 0000000000000002                            s_word   =2                    ;word (16 bits)
    869 = 0000000000000003                            s_xword  =3                    ;extended word (24 bits)
    870 = 0000000000000004                            s_dword  =4                    ;double word (32 bits)
    871 = 0000000000000100                            s_rampag =$0100                ;65xx RAM page
                                        ;
                                        ;
                                        ;	data type sizes in bits...
                                        ;
    876 = 0000000000000008                            s_bibyte =8                    ;byte
    877 = 0000000000000004                            s_bnybbl =4                    ;nybble
                                        ;
                                        ;
                                        ;	miscellaneous...
                                        ;
    882 = 000000000000002C                            bitabs   =$2c                  ;absolute BIT opcode
    883 = 0000000000000024                            bitzp    =$24                  ;zero page BIT opcode
                                        ;
                                        ;================================================================================
                                        ;
                                        ;W65C816S NATIVE MODE STATUS REGISTER DEFINITIONS
                                        ;
    889 = 00000001                      s_mpudbx =s_byte               ;data bank size
    890 = 00000002                      s_mpudpx =s_word               ;direct page size
    891 = 00000001                      s_mpupbx =s_byte               ;program bank size
    892 = 00000002                      s_mpupcx =s_word               ;program counter size
    893 = 00000002                      s_mpuspx =s_word               ;stack pointer size
    894 = 00000001                      s_mpusrx =s_byte               ;status size
                                        ;
                                        ;
                                        ;	status register flags...
                                        ;
    899 = 0000000000000001                            sr_car   =%00000001            ;C
    900 = 00000002                      sr_zer   =sr_car << 1          ;Z
    901 = 00000004                      sr_irq   =sr_zer << 1          ;I
    902 = 00000008                      sr_bdm   =sr_irq << 1          ;D
    903 = 00000010                      sr_ixw   =sr_bdm << 1          ;x
    904 = 00000020                      sr_amw   =sr_ixw << 1          ;m
    905 = 00000040                      sr_ovl   =sr_amw << 1          ;V
    906 = 00000080                      sr_neg   =sr_ovl << 1          ;N
    907 = 00000100                      sr_16	 =sr_neg << 1
    908 = 00000200                      sr_32    =sr_16 << 1
                                        ;
                                        ;	NVmxDIZC
                                        ;	xxxxxxxx
                                        ;	||||||||
                                        ;	|||||||+———> 1 = carry set/generated
                                        ;	||||||+————> 1 = result = zero
                                        ;	|||||+—————> 1 = IRQs ignored
                                        ;	||||+——————> 0 = binary arithmetic mode
                                        ;	||||         1 = decimal arithmetic mode
                                        ;	|||+———————> 0 = 16 bit index
                                        ;	|||          1 = 8 bit index
                                        ;	||+————————> 0 = 16 bit .A & memory
                                        ;	||           1 = 8 bit .A & memory
                                        ;	|+—————————> 1 = sign overflow
                                        ;	+——————————> 1 = result = negative
                                        ;
                                        ;================================================================================
                                        ;
                                        ;"SIZE-OF" CONSTANTS
                                        ;
    929 = 00000003                      s_addr   =s_xword              ;24 bit address
    930 = 0000000000000020                            s_auxbuf =32                   ;auxiliary buffer
    931 = 0000000000000050                            s_ibuf   =80                   ;input buffer
    932 = 0000000000000003                            s_mnemon =3                    ;MPU ASCII mnemonic
    933 = 0000000000000002                            s_mnepck =2                    ;MPU encoded mnemonic
    934 = 0000000000000003                            s_mvinst =3                    ;MVN/MVP instruction
    935 = 00000001                      s_opcode =s_byte               ;MPU opcode
    936 = 00000003                      s_oper   =s_xword              ;operand
    937 = 00000004                      s_pfac   =s_dword              ;primary math accumulator
    938 = 00000006                      s_sfac   =s_dword+s_word       ;secondary math accumulators
                                        ;
                                        ;================================================================================
                                        ;
                                        ;"NUMBER-OF" CONSTANTS
                                        ;
    944 = 0000000000000015                            n_dbytes =21                   ;default disassembly bytes
    945 = 0000000000000008                            n_dump   =8                    ;bytes per memory dump line
    946 = 000000FF                      n_mbytes =s_rampag-1           ;default memory dump bytes
    947 = 0000000000000008                            n_hccols =8                    ;compare/hunt display columns
    948 = 00000009                      n_opcols =3*s_oper             ;disassembly operand columns
    949 = 0000000000000004                            n_opslsr =4                    ;LSRs to extract instruction size
    950 = 0000000000000005                            n_shfenc =5                    ;shifts to encode/decode mnemonic
                                        ;
                                        ;================================================================================
                                        ;
                                        ;NUMERIC CONVERSION CONSTANTS
                                        ;
    956 = 0000000000000006                            a_hexdec ='A'-'9'-2            ;hex to decimal difference
    957 = 25                            c_bin    ='%'                  ;binary prefix
    958 = 2B                            c_dec    ='+'                  ;decimal prefix
    959 = 24                            c_hex    ='$'                  ;hexadecimal prefix
    960 = 40                            c_oct    ='@'                  ;octal prefix
    961 = 66                            k_hex    ='f'                  ;hex ASCII conversion
    962 = 00000020                      m_bits   =s_pfac*s_bibyte      ;operand bit size
    963 = 00000030                      m_cbits  =s_sfac*s_bibyte      ;workspace bit size
    964 = 000000000000000F                            bcdumask =%00001111            ;isolate BCD units mask
    965 = 0000000000000030                            btoamask =%00110000            ;binary to ASCII mask
                                        ;
                                        ;================================================================================
                                        ;
                                        ;ASSEMBLER/DISASSEMBLER CONSTANTS
                                        ;
    971 = 3F                            a_mnecvt ='?'                  ;encoded mnemonic conversion base
    972 = 000000000000001F                            aimmaska =%00011111            ;.A immediate opcode test #1
    973 = 0000000000000009                            aimmaskb =%00001001            ;.A immediate opcode test #2
    974 = 41                            asmprfx  ='A'                  ;assemble code prefix
    975 = 0000000000000009                            ascprmct =9                    ;assembler prompt "size-of"
    976 = 2E                            disprfx  ='.'                  ;disassemble code prefix
    977 = 00000000000000C0                            flimmask =%11000000            ;force long immediate flag
    978 = 0000000000000054                            opc_mvn  =$54                  ;MVN opcode
    979 = 0000000000000044                            opc_mvp  =$44                  ;MVP opcode
    980 = 00000000000000C2                            opc_rep  =$c2                  ;REP opcode
    981 = 00000000000000E2                            opc_sep  =$e2                  ;SEP opcode
    982 = 00000030                      pfmxmask =sr_amw | sr_ixw      ;MPU m & x flag bits mask
                                        ;
                                        ;
                                        ;	assembler prompt buffer offsets...
                                        ;
    987 = 00000002                      apadrbkh =s_word               ;instruction address bank MSN
    988 = 00000003                      apadrbkl =apadrbkh+s_byte      ;instruction address bank LSN
    989 = 00000004                      apadrmbh =apadrbkl+s_byte      ;instruction address MSB MSN
    990 = 00000005                      apadrmbl =apadrmbh+s_byte      ;instruction address MSB LSN
    991 = 00000006                      apadrlbh =apadrmbl+s_byte      ;instruction address LSB MSN
    992 = 00000007                      apadrlbl =apadrlbh+s_byte      ;instruction address LSB LSN
                                        ;
                                        ;
                                        ;	addressing mode preamble symbols...
                                        ;
    997 = 21                            amp_flim ='!'                  ;force long immediate
    998 = 23                            amp_imm  ='#'                  ;immediate
    999 = 28                            amp_ind  ='('                  ;indirect
   1000 = 5B                            amp_indl ='['                  ;indirect long
                                        ;
                                        ;
                                        ;	addressing mode symbolic translation indices...
                                        ;
   1005 = 0000000000000000                            am_nam   =%0000                ;(0)  no symbol
   1006 = 0000000000000001                            am_imm   =%0001                ;(1)  #
   1007 = 0000000000000002                            am_adrx  =%0010                ;(2)  dp,X or addr,X
   1008 = 0000000000000003                            am_adry  =%0011                ;(3)  dp,Y or addr,Y
   1009 = 0000000000000004                            am_ind   =%0100                ;(4)  (dp) or (addr)
   1010 = 0000000000000005                            am_indl  =%0101                ;(5)  [dp] or [addr]
   1011 = 0000000000000006                            am_indly =%0110                ;(6)  [dp],Y
   1012 = 0000000000000007                            am_indx  =%0111                ;(7)  (dp,X) or (addr,X)
   1013 = 0000000000000008                            am_indy  =%1000                ;(8)  (dp),Y
   1014 = 0000000000000009                            am_stk   =%1001                ;(9)  offset,S
   1015 = 000000000000000A                            am_stky  =%1010                ;(10) (offset,S),Y
   1016 = 000000000000000B                            am_move  =%1011                ;(11) MVN/MVP sbnk,dbnk
                                        ;
                                        ;
                                        ;	operand size translation indices...
                                        ;
   1021 = 0000000000000000                            ops0     =%0000 << 4           ;no operand
   1022 = 0000000000000010                            ops1     =%0001 << 4           ;8 bit operand
   1023 = 0000000000000020                            ops2     =%0010 << 4           ;16 bit operand
   1024 = 0000000000000030                            ops3     =%0011 << 4           ;24 bit operand
   1025 = 0000000000000050                            bop1     =%0101 << 4           ;8 bit relative branch
   1026 = 0000000000000060                            bop2     =%0110 << 4           ;16 bit relative branch
   1027 = 0000000000000090                            vops     =%1001 << 4           ;8 or 16 bit operand
                                        ;
                                        ;
                                        ;	operand size & addressing mode extraction masks...
                                        ;
   1032 = 000000000000000F                            amodmask =%00001111            ;addressing mode index
   1033 = 0000000000000030                            opsmask  =%00110000            ;operand size
   1034 = 00000000000000C0                            vopsmask =%11000000            ;BOPx & VOPS flag bits
                                        ;
                                        ;
                                        ;	instruction mnemonic encoding...
                                        ;
   1039 = 0000000000002144                            mne_adc  =$2144                ;ADC
   1040 = 0000000000002BC4                            mne_and  =$2bc4                ;AND
   1041 = 0000000000006D04                            mne_asl  =$6d04                ;ASL
   1042 = 0000000000002106                            mne_bcc  =$2106                ;BCC
   1043 = 000000000000A106                            mne_bcs  =$a106                ;BCS
   1044 = 0000000000009186                            mne_beq  =$9186                ;BEQ
   1045 = 000000000000AA86                            mne_bit  =$aa86                ;BIT
   1046 = 0000000000005386                            mne_bmi  =$5386                ;BMI
   1047 = 00000000000033C6                            mne_bne  =$33c6                ;BNE
   1048 = 0000000000006C46                            mne_bpl  =$6c46                ;BPL
   1049 = 00000000000014C6                            mne_bra  =$14c6                ;BRA
   1050 = 00000000000064C6                            mne_brk  =$64c6                ;BRK
   1051 = 0000000000006CC6                            mne_brl  =$6cc6                ;BRL
   1052 = 00000000000025C6                            mne_bvc  =$25c6                ;BVC
   1053 = 000000000000A5C6                            mne_bvs  =$a5c6                ;BVS
   1054 = 0000000000002348                            mne_clc  =$2348                ;CLC
   1055 = 0000000000002B48                            mne_cld  =$2b48                ;CLD
   1056 = 0000000000005348                            mne_cli  =$5348                ;CLI
   1057 = 000000000000BB48                            mne_clv  =$bb48                ;CLV
   1058 = 0000000000008B88                            mne_cmp  =$8b88                ;CMP
   1059 = 0000000000008C08                            mne_cop  =$8c08                ;COP
   1060 = 000000000000CC48                            mne_cpx  =$cc48                ;CPX
   1061 = 000000000000D448                            mne_cpy  =$d448                ;CPY
   1062 = 000000000000218A                            mne_dec  =$218a                ;DEC
   1063 = 000000000000C98A                            mne_dex  =$c98a                ;DEX
   1064 = 000000000000D18A                            mne_dey  =$d18a                ;DEY
   1065 = 0000000000009C0C                            mne_eor  =$9c0c                ;EOR
   1066 = 00000000000023D4                            mne_inc  =$23d4                ;INC
   1067 = 000000000000CBD4                            mne_inx  =$cbd4                ;INX
   1068 = 000000000000D3D4                            mne_iny  =$d3d4                ;INY
   1069 = 0000000000006B96                            mne_jml  =$6b96                ;JML
   1070 = 0000000000008B96                            mne_jmp  =$8b96                ;JMP
   1071 = 0000000000006D16                            mne_jsl  =$6d16                ;JSL
   1072 = 0000000000009D16                            mne_jsr  =$9d16                ;JSR
   1073 = 000000000000115A                            mne_lda  =$115a                ;LDA
   1074 = 000000000000C95A                            mne_ldx  =$c95a                ;LDX
   1075 = 000000000000D15A                            mne_ldy  =$d15a                ;LDY
   1076 = 0000000000009D1A                            mne_lsr  =$9d1a                ;LSR
   1077 = 0000000000007DDC                            mne_mvn  =$7ddc                ;MVN
   1078 = 0000000000008DDC                            mne_mvp  =$8ddc                ;MVP
   1079 = 0000000000008C1E                            mne_nop  =$8c1e                ;NOP
   1080 = 00000000000014E0                            mne_ora  =$14e0                ;ORA
   1081 = 00000000000011A2                            mne_pea  =$11a2                ;PEA
   1082 = 00000000000051A2                            mne_pei  =$51a2                ;PEI
   1083 = 00000000000099A2                            mne_per  =$99a2                ;PER
   1084 = 0000000000001262                            mne_pha  =$1262                ;PHA
   1085 = 0000000000001A62                            mne_phb  =$1a62                ;PHB
   1086 = 0000000000002A62                            mne_phd  =$2a62                ;PHD
   1087 = 0000000000006262                            mne_phk  =$6262                ;PHK
   1088 = 0000000000008A62                            mne_php  =$8a62                ;PHP
   1089 = 000000000000CA62                            mne_phx  =$ca62                ;PHX
   1090 = 000000000000D262                            mne_phy  =$d262                ;PHY
   1091 = 0000000000001362                            mne_pla  =$1362                ;PLA
   1092 = 0000000000001B62                            mne_plb  =$1b62                ;PLB
   1093 = 0000000000002B62                            mne_pld  =$2b62                ;PLD
   1094 = 0000000000008B62                            mne_plp  =$8b62                ;PLP
   1095 = 000000000000CB62                            mne_plx  =$cb62                ;PLX
   1096 = 000000000000D362                            mne_ply  =$d362                ;PLY
   1097 = 00000000000089A6                            mne_rep  =$89a6                ;REP
   1098 = 0000000000006C26                            mne_rol  =$6c26                ;ROL
   1099 = 0000000000009C26                            mne_ror  =$9c26                ;ROR
   1100 = 0000000000005566                            mne_rti  =$5566                ;RTI
   1101 = 0000000000006D66                            mne_rtl  =$6d66                ;RTL
   1102 = 000000000000A566                            mne_rts  =$a566                ;RTS
   1103 = 00000000000020E8                            mne_sbc  =$20e8                ;SBC
   1104 = 00000000000021A8                            mne_sec  =$21a8                ;SEC
   1105 = 00000000000029A8                            mne_sed  =$29a8                ;SED
   1106 = 00000000000051A8                            mne_sei  =$51a8                ;SEI
   1107 = 00000000000089A8                            mne_sep  =$89a8                ;SEP
   1108 = 0000000000001568                            mne_sta  =$1568                ;STA
   1109 = 0000000000008D68                            mne_stp  =$8d68                ;STP
   1110 = 000000000000CD68                            mne_stx  =$cd68                ;STX
   1111 = 000000000000D568                            mne_sty  =$d568                ;STY
   1112 = 000000000000DD68                            mne_stz  =$dd68                ;STZ
   1113 = 000000000000C8AA                            mne_tax  =$c8aa                ;TAX
   1114 = 000000000000D0AA                            mne_tay  =$d0aa                ;TAY
   1115 = 000000000000292A                            mne_tcd  =$292a                ;TCD
   1116 = 000000000000A12A                            mne_tcs  =$a12a                ;TCS
   1117 = 000000000000216A                            mne_tdc  =$216a                ;TDC
   1118 = 0000000000001CEA                            mne_trb  =$1cea                ;TRB
   1119 = 0000000000001D2A                            mne_tsb  =$1d2a                ;TSB
   1120 = 000000000000252A                            mne_tsc  =$252a                ;TSC
   1121 = 000000000000CD2A                            mne_tsx  =$cd2a                ;TSX
   1122 = 000000000000166A                            mne_txa  =$166a                ;TXA
   1123 = 000000000000A66A                            mne_txs  =$a66a                ;TXS
   1124 = 000000000000D66A                            mne_txy  =$d66a                ;TXY
   1125 = 00000000000016AA                            mne_tya  =$16aa                ;TYA
   1126 = 000000000000CEAA                            mne_tyx  =$ceaa                ;TYX
   1127 = 00000000000050B0                            mne_wai  =$50b0                ;WAI
   1128 = 0000000000007170                            mne_wdm  =$7170                ;WDM
   1129 = 00000000000010F2                            mne_xba  =$10f2                ;XBA
   1130 = 0000000000003132                            mne_xce  =$3132                ;XCE
                                        ;
                                        ;
                                        ;	encoded instruction mnemonic indices...
                                        ;
   1135 = 0000000000000010                            mne_adcx =16                   ;ADC
   1136 = 000000000000001D                            mne_andx =29                   ;AND
   1137 = 000000000000002C                            mne_aslx =44                   ;ASL
   1138 = 000000000000000F                            mne_bccx =15                   ;BCC
   1139 = 0000000000000041                            mne_bcsx =65                   ;BCS
   1140 = 000000000000003B                            mne_beqx =59                   ;BEQ
   1141 = 0000000000000046                            mne_bitx =70                   ;BIT
   1142 = 0000000000000024                            mne_bmix =36                   ;BMI
   1143 = 000000000000001F                            mne_bnex =31                   ;BNE
   1144 = 000000000000002A                            mne_bplx =42                   ;BPL
   1145 = 0000000000000005                            mne_brax =5                    ;BRA
   1146 = 0000000000000027                            mne_brkx =39                   ;BRK
   1147 = 000000000000002B                            mne_brlx =43                   ;BRL
   1148 = 0000000000000017                            mne_bvcx =23                   ;BVC
   1149 = 0000000000000044                            mne_bvsx =68                   ;BVS
   1150 = 0000000000000014                            mne_clcx =20                   ;CLC
   1151 = 000000000000001B                            mne_cldx =27                   ;CLD
   1152 = 0000000000000023                            mne_clix =35                   ;CLI
   1153 = 0000000000000047                            mne_clvx =71                   ;CLV
   1154 = 0000000000000035                            mne_cmpx =53                   ;CMP
   1155 = 0000000000000037                            mne_copx =55                   ;COP
   1156 = 000000000000004E                            mne_cpxx =78                   ;CPX
   1157 = 0000000000000058                            mne_cpyx =88                   ;CPY
   1158 = 0000000000000012                            mne_decx =18                   ;DEC
   1159 = 000000000000004A                            mne_dexx =74                   ;DEX
   1160 = 0000000000000054                            mne_deyx =84                   ;DEY
   1161 = 000000000000003D                            mne_eorx =61                   ;EOR
   1162 = 0000000000000015                            mne_incx =21                   ;INC
   1163 = 000000000000004D                            mne_inxx =77                   ;INX
   1164 = 0000000000000057                            mne_inyx =87                   ;INY
   1165 = 0000000000000028                            mne_jmlx =40                   ;JML
   1166 = 0000000000000036                            mne_jmpx =54                   ;JMP
   1167 = 000000000000002D                            mne_jslx =45                   ;JSL
   1168 = 000000000000003F                            mne_jsrx =63                   ;JSR
   1169 = 0000000000000001                            mne_ldax =1                    ;LDA
   1170 = 0000000000000049                            mne_ldxx =73                   ;LDX
   1171 = 0000000000000053                            mne_ldyx =83                   ;LDY
   1172 = 0000000000000040                            mne_lsrx =64                   ;LSR
   1173 = 0000000000000030                            mne_mvnx =48                   ;MVN
   1174 = 000000000000003A                            mne_mvpx =58                   ;MVP
   1175 = 0000000000000038                            mne_nopx =56                   ;NOP
   1176 = 0000000000000006                            mne_orax =6                    ;ORA
   1177 = 0000000000000002                            mne_peax =2                    ;PEA
   1178 = 0000000000000021                            mne_peix =33                   ;PEI
   1179 = 000000000000003C                            mne_perx =60                   ;PER
   1180 = 0000000000000003                            mne_phax =3                    ;PHA
   1181 = 000000000000000A                            mne_phbx =10                   ;PHB
   1182 = 000000000000001A                            mne_phdx =26                   ;PHD
   1183 = 0000000000000026                            mne_phkx =38                   ;PHK
   1184 = 0000000000000033                            mne_phpx =51                   ;PHP
   1185 = 000000000000004B                            mne_phxx =75                   ;PHX
   1186 = 0000000000000055                            mne_phyx =85                   ;PHY
   1187 = 0000000000000004                            mne_plax =4                    ;PLA
   1188 = 000000000000000B                            mne_plbx =11                   ;PLB
   1189 = 000000000000001C                            mne_pldx =28                   ;PLD
   1190 = 0000000000000034                            mne_plpx =52                   ;PLP
   1191 = 000000000000004C                            mne_plxx =76                   ;PLX
   1192 = 0000000000000056                            mne_plyx =86                   ;PLY
   1193 = 0000000000000031                            mne_repx =49                   ;REP
   1194 = 0000000000000029                            mne_rolx =41                   ;ROL
   1195 = 000000000000003E                            mne_rorx =62                   ;ROR
   1196 = 0000000000000025                            mne_rtix =37                   ;RTI
   1197 = 000000000000002E                            mne_rtlx =46                   ;RTL
   1198 = 0000000000000043                            mne_rtsx =67                   ;RTS
   1199 = 000000000000000E                            mne_sbcx =14                   ;SBC
   1200 = 0000000000000013                            mne_secx =19                   ;SEC
   1201 = 0000000000000019                            mne_sedx =25                   ;SED
   1202 = 0000000000000022                            mne_seix =34                   ;SEI
   1203 = 0000000000000032                            mne_sepx =50                   ;SEP
   1204 = 0000000000000007                            mne_stax =7                    ;STA
   1205 = 0000000000000039                            mne_stpx =57                   ;STP
   1206 = 0000000000000050                            mne_stxx =80                   ;STX
   1207 = 0000000000000059                            mne_styx =89                   ;STY
   1208 = 000000000000005B                            mne_stzx =91                   ;STZ
   1209 = 0000000000000048                            mne_taxx =72                   ;TAX
   1210 = 0000000000000052                            mne_tayx =82                   ;TAY
   1211 = 0000000000000018                            mne_tcdx =24                   ;TCD
   1212 = 0000000000000042                            mne_tcsx =66                   ;TCS
   1213 = 0000000000000011                            mne_tdcx =17                   ;TDC
   1214 = 000000000000000C                            mne_trbx =12                   ;TRB
   1215 = 000000000000000D                            mne_tsbx =13                   ;TSB
   1216 = 0000000000000016                            mne_tscx =22                   ;TSC
   1217 = 000000000000004F                            mne_tsxx =79                   ;TSX
   1218 = 0000000000000008                            mne_txax =8                    ;TXA
   1219 = 0000000000000045                            mne_txsx =69                   ;TXS
   1220 = 000000000000005A                            mne_txyx =90                   ;TXY
   1221 = 0000000000000009                            mne_tyax =9                    ;TYA
   1222 = 0000000000000051                            mne_tyxx =81                   ;TYX
   1223 = 0000000000000020                            mne_waix =32                   ;WAI
   1224 = 000000000000002F                            mne_wdmx =47                   ;WDM
   1225 = 0000000000000000                            mne_xbax =0                    ;XBA
   1226 = 000000000000001E                            mne_xcex =30                   ;XCE
                                        ;
                                        ;================================================================================
                                        ;
                                        ;MISCELLANEOUS CONSTANTS
                                        ;
   1232 = 0000000000000004                            halftab  =4                    ;1/2 tabulation spacing
   1233 = 3E                            memprfx  ='>'                  ;memory dump prefix
   1234 = 3A                            memsepch =':'                  ;memory dump separator
   1235 = 2E                            memsubch ='.'                  ;memory dump non-print char
   1236 = 0000000000000030                            srinit   =%00110000            ;SR initialization value
                                        ;
                                        ;================================================================================
                                        ;
                                        ;DIRECT PAGE STORAGE
                                        ;
   1242 = 00000080                      reg_csx  =zeropage			;CS
   1243 = 00000084                      reg_dsx  =reg_csx + 4		;DS
   1244 = 00000088                      reg_pcx  =reg_dsx + 4	    ;PC
   1245 = 0000008A                      reg_pbx  =reg_pcx + 2       ;PB
   1246 = 0000008B                      reg_ax   =reg_pbx + 1       ;.C
   1247 = 0000008F                      reg_xx   =reg_ax + 4        ;.X
   1248 = 00000093                      reg_yx   =reg_xx + 4        ;.Y
   1249 = 00000097                      reg_spx  =reg_yx + 4        ;SP
   1250 = 0000009B                      reg_srx  =reg_spx + 4       ;SR
   1251 = 0000009C                      reg_srxx =reg_srx + 1       ;SRX
   1252 = 0000009D                      reg_dbx  =reg_srxx + 1      ;DB
   1253 = 0000009E                      reg_dpx  =reg_dbx + 1       ;DP
                                        ;
                                        ;
                                        ;	general workspace...
                                        ;
   1258 = 000000A2                      addra    =reg_dpx+4            ;address #1
   1259 = 000000A6                      addrb    =addra+4              ;address #2
   1260 = 000000A9                      faca     =addrb+s_addr         ;primary accumulator
   1261 = 000000AD                      facax    =faca+s_pfac          ;extended primary accumulator
   1262 = 000000B1                      facb     =facax+s_pfac         ;secondary accumulator
   1263 = 000000B7                      facc     =facb+s_sfac          ;tertiary accumulator
   1264 = 000000BD                      operand  =facc+s_sfac          ;instruction operand
   1265 = 000000C0                      auxbufix =operand+s_oper       ;auxiliary buffer index
   1266 = 000000C1                      ibufidx  =auxbufix+s_byte      ;input buffer index
   1267 = 000000C2                      bitsdig  =ibufidx+s_byte       ;bits per numeral
   1268 = 000000C3                      numeral  =bitsdig+s_byte       ;numeral buffer
   1269 = 000000C4                      radix    =numeral+s_byte       ;radix index
   1270 = 000000C5                      admodidx =radix+s_byte         ;addressing mode index
   1271 = 000000C6                      charcnt  =admodidx+s_byte      ;character counter
   1272 = 000000C8                      instsize =charcnt+s_word       ;instruction size
   1273 = 000000CA                      mnepck   =instsize+s_word      ;encoded mnemonic
   1274 = 000000CC                      opcode   =mnepck+s_mnepck      ;current opcode
   1275 = 000000CD                      status   =opcode+s_byte        ;I/O status flag
   1276 = 000000CE                      xrtemp   =status+s_byte        ;temp .X storage
   1277 = 000000CF                      eopsize  =xrtemp+s_byte        ;entered operand size
   1278 = 000000D0                      flimflag =eopsize+s_byte       ;forced long immediate...
                                        ;
                                        ;	xx000000
                                        ;	||
                                        ;	|+—————————> 0: .X/.Y = 8 bits
                                        ;	|            1: .X/.Y = 18 bits
                                        ;	+——————————> 0: .A = 8 bits
                                        ;	             1: .A = 16 bits
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	During assembly, FLIMFLAG indicates the operand size used with an immed-
                                        ;	iate mode instruction, thus causing the following disassembly to display
                                        ;	the assembled  operand size.   During disassembly,  FLIMFLAG will mirror
                                        ;	the effect of the most recent REP or SEP instruction.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
   1294 = 000000D1                      iopsize  =flimflag+s_byte      ;operand size
   1295 = 000000D2                      range    =iopsize+s_byte       ;allowable radix range
   1296 = 000000D3                      vopsflag =range+s_byte         ;VOPS & ROPS mode bits
                                        ;
                                        ;
                                        ;	copy/fill workspace (overlaps some of the above)...
                                        ;
   1301 = 000000D4                      mcftwork =vopsflag+s_byte	;faca                 ;start of copy/fill code
   1302 = 000000D5                      mcftopc  =mcftwork+s_byte      ;instruction opcode
   1303 = 000000D6                      mcftbnk  =mcftopc+s_byte       ;banks
                                        ;
                                        ;================================================================================
                                        ;
                                        ;SUPERMON 816 JUMP TABLE
                                        ;
                                                 org	_origin_
                                        ;
                                           		 CPU	W65C816S
                                           		 MEM	16
                                           		 NDX	16
   1315 00C000 A9 D0 00                     		 LDA	#$D0
   1316 00C003 8D 00 70                     		 STA	$7000
                                           		 MEM	8
                                           		 NDX	8
                                        		 CPU	W65C02
   1320 C006 80 02                      JMON     bra mon               ;cold start entry
   1321 C008 80 4F                      JMONBRK  bra monbrk            ;software interrupt intercept
                                        ;
                                        ;================================================================================
                                        ;
                                        ;mon: SUPERMON 816 COLD START
                                        ;
   1327 C00A C2 20                      mon +         .byte $c2,$20
                                        
   1328 C00C AD 02 01                             lda vecbrki           ;BRK vector
   1329 C00F C9 59                    +            cmp #<monbrk
   1329 C011 C0                       +            .byte >monbrk
                                        ;pointing at monitor?
   1330 C012 D0 03                                bne .2            ;yes, ignore cold start
   1331 C014 4C A4 C0                             jmp	monreg			; got a branch out of range here when debugging code
                                        								; was included
   1333 C017                            .2
                                        ;
   1335 C017 8D 05 01                             sta vecbrkia          ;save vector for exit
   1336 C01A A9 AB                       		 LDA	#$AB
   1337 C01C 00                          		 .byte	$00
   1338 C01D 8D 00 70                    		 STA	$7000
   1339 C020 A9 59                    +            lda #<monbrk
   1339 C022 C0                       +            .byte >monbrk
                                        ;Supermon 816 intercepts...
   1340 C023 8D 02 01                             sta vecbrki           ;BRK handler
   1341 C026 E2 30                    +            .byte $e2,$30
                                                        ;8 bit registers
   1342 C028 A2 49                                ldx #vopsflag-reg_pbx
                                        ;
   1344 C02A 74 8A                      .0000010 stz reg_pbx,x         ;clear DP storage
   1345 C02C CA                                   dex
   1346 C02D 10 FB                                bpl .0000010
                                        ;
   1348 C02F A9 AC                       		 LDA	#$AC
   1349 C031 8D 00 70                    		 STA	$7000
   1350 C034 A9 30                                lda #srinit
   1351 C036 85 9B                                sta reg_srx           ;status register
   1352 C038 C2 20                    +            .byte $c2,$20
                                                         ;16 bit .A
   1353 C03A A9 FF                    +            lda #<hwstack
   1353 C03C 3F                       +            .byte >hwstack
                                        ;top of hardware stack
   1354 C03D 1B                       +            .byte $1b
                                                           ;set SP
   1355 C03E 7B                       +            .byte $7b
                                                           ;get & save...
   1356 C03F 85 9E                                sta reg_dpx           ;DP register
   1357 C041 A9 AD                       		 LDA	#$AD
   1358 C043 00                          		 .byte	$00
   1359 C044 8D 00 70                    		 STA	$7000
   1360 C047 A9 00                    +            lda #<0
   1360 C049 00                       +            .byte >0
                                        
   1361 C04A E2 20                    +            .byte $e2,$20
                                        
   1362 C04C 4B                       +            .byte $4b
                                        
   1363 C04D 68                                   pla                   ;capture PB &...
   1364 C04E 85 8A                                sta reg_pbx           ;set
   1365 C050 8B                       +            .byte $8b
                                        
   1366 C051 68                                   pla                   ;capture DB &...
   1367 C052 85 9D                                sta reg_dbx           ;set
   1368 C054 F4                       +            .byte $f4
   1368 C055 2C D0                    +            .word mm_entry
                                        ;"...ready..."
   1369 C057 80 2E                                bra moncom
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monbrk: SOFTWARE INTERRUPT INTERCEPT
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	This is the entry point taken when a BRK instruction is executed.  It is
                                        ;	assumed that the BRK  handler has pushed the registers to the stack that
                                        ;	are not automatically pushed by the MPU in response to BRK.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
   1381 C059 58                         monbrk   cli                   ;reenable IRQs
   1382 C05A                            		 phcs
   1383 C05A 68                          		 pla
   1384 C05B 85 80                       		 sta reg_csx
   1385 C05D 68                          		 pla
   1386 C05E 85 82                       		 sta reg_csx+2
   1387 C060                            		 phds
   1388 C060 68                          		 pla
   1389 C061 85 84                       		 sta reg_dsx
   1390 C063 68                          		 pla
   1391 C064 85 86                       		 sta reg_dsx+2
   1392 C066 7A                                   ply                   ;recover registers
   1393 C067 FA                                   plx
   1394 C068 68                                   pla
   1395 C069 C2 30                    +            .byte $c2,$30
                                                         ;store 16 bit registers
   1396 C06B 85 8B                                sta reg_ax            ;.A
   1397 C06D 86 8F                                stx reg_xx            ;.X
   1398 C06F 84 93                                sty reg_yx            ;.Y
   1399 C071 E2 10                    +            .byte $e2,$10
                                                        ;8 bit index registers
   1400 C073 68                                   pla                   ;get DP &...
   1401 C074 85 9E                                sta reg_dpx           ;store
   1402 C076 FA                                   plx                   ;get DB &...
   1403 C077 86 9D                                stx reg_dbx           ;store
   1404 C079 FA                                   plx                   ;get SR &...
   1405 C07A 86 9B                                stx reg_srx           ;store
   1406 C07C 68                                   pla                   ;get PC &...
   1407 C07D 85 88                                sta reg_pcx           ;store
   1408 C07F E2 20                    +            .byte $e2,$20
                                        
   1409 C081 68                                   pla                   ;get PB &...
   1410 C082 85 8A                                sta reg_pbx           ;store
   1411 C084 F4                       +            .byte $f4
   1411 C085 21 D0                    +            .word mm_brk
                                        ;"*BRK"
                                        ;
                                        ;================================================================================
                                        ;
                                        ;moncom: COMMON ENTRY POINT
                                        ;
                                        ;	——————————————————————————————————————
                                        ;	DO NOT directly call this entry point!
                                        ;	——————————————————————————————————————
                                        ;
   1421 C087                            moncom   
   1422 C087 A9 AE                       		 LDA	#$AE
   1423 C089 8D 00 70                    		 STA	$7000
   1424 C08C 20 1D C8                    		 jsr sprint            ;print heading
   1425 C08F A9 AF                       		 LDA	#$AF
   1426 C091 8D 00 70                    		 STA	$7000
   1427 C094 C2 20                    +            .byte $c2,$20
                                        
   1428 C096 3B                       +            .byte $3b
                                                           ;get SP &...
   1429 C097 85 97                                sta reg_spx           ;store
   1430 C099 A9 B0                       		 LDA	#$B0
   1431 C09B 00                          		 .byte	$00
   1432 C09C 8D 00 70                    		 STA	$7000
   1433 C09F C2 FF                    +            .byte $c2,%11111111
                                        ;clear SR &...
   1434 C0A1 E2 30                    +            .byte $e2,srinit
                                        ;set default state
   1435 C0A3 38                                   sec                   ;see next
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monreg: DISPLAY MPU REGISTERS
                                        ;
                                        ;	—————————
                                        ;	syntax: R
                                        ;	—————————
                                        ;
   1445 C0A4 B0 03                      monreg   bcs .0000010          ;okay to proceed
                                        ;
   1447 C0A6 4C 88 C1                             jmp monerr            ;error if called with a parm
                                        ;
   1449 C0A9 F4                         .0000010 +         .byte $f4
   1449 C0AA 57 D0                    +            .word mm_regs
                                        
   1450 C0AC 20 1D C8                             jsr sprint            ;display heading
                                        ;
                                        ;
                                        ;	display program bank & counter...
                                        ;
   1455 C0AF C2 20                    +            .byte $c2,$20
                                        
   1456 C0B1 A5 82                       		 lda	reg_csx+2
   1457 C0B3 E2 20                    +            .byte $e2,$20
                                        
   1458 C0B5 20 E1 C7                    		 jsr	dpyhexw
   1459 C0B8 C2 20                    +            .byte $c2,$20
                                        
   1460 C0BA A5 80                       		 lda	reg_csx
   1461 C0BC E2 20                    +            .byte $e2,$20
                                        
   1462 C0BE 20 E1 C7                    		 jsr    dpyhexw
   1463 C0C1 E2 20                    +            .byte $e2,$20
                                        
   1464 C0C3 20 18 C8                             jsr printspc          ;inter-field space
   1465 C0C6 A5 8A                                lda reg_pbx           ;PB
   1466 C0C8 20 F1 C7                             jsr dpyhex            ;display as hex ASCII
   1467 C0CB 20 18 C8                             jsr printspc          ;inter-field space
   1468 C0CE C2 20                    +            .byte $c2,$20
                                        
   1469 C0D0 A5 88                                lda reg_pcx
   1470 C0D2 E2 20                    +            .byte $e2,$20
                                        
   1471 C0D4 20 E1 C7                             jsr dpyhexw           ;display PC
   1472 C0D7 A2 02                                ldx #2
   1473 C0D9 20 FB C7                             jsr multspc           ;inter-field spacing
                                        ;
                                        ;
                                        ;	display SR in bitwise fashion...
                                        ;
   1478 C0DC A5 9C                       		 lda reg_srxx
   1479 C0DE 4A                          		 lsr
   1480 C0DF 4A                          		 lsr
   1481 C0E0 69 30                       		 adc #'0'
   1482 C0E2 20 06 F4                    		 jsr putcha
   1483 C0E5 A5 9C                       		 lda reg_srxx
   1484 C0E7 4A                          		 lsr
   1485 C0E8 69 30                       		 adc #'0'
   1486 C0EA 20 06 F4                    		 jsr putcha
                                        
   1488 C0ED A6 9B                                ldx reg_srx           ;SR
   1489 C0EF A0 08                                ldy #s_bibyte         ;bits in a byte
                                        ;
   1491 C0F1 8A                         .0000020 txa                   ;remaining SR bits
   1492 C0F2 0A                                   asl                   ;grab one of them
   1493 C0F3 AA                                   tax                   ;save remainder
   1494 C0F4 A9 30                                lda #'0'              ;a clear bit but...
   1495 C0F6 69 00                                adc #0                ;adjust if set &...
   1496 C0F8 20 06 F4                             jsr putcha            ;print
   1497 C0FB 88                                   dey                   ;bit processed
   1498 C0FC D0 F3                                bne .0000020          ;do another
                                        ;
                                        ;
                                        ;	display .C, .X, .Y, SP & DP...
                                        ;
   1503 C0FE 20 18 C8                   .0000030 jsr printspc          ;spacing
   1504 C101 C2 20                    +            .byte $c2,$20
                                        
   1505 C103 B9 8D 00                             lda reg_ax+2,y        ;get register value
   1506 C106 E2 20                    +            .byte $e2,$20
                                        
   1507 C108 20 E1 C7                             jsr dpyhexw           ;convert & display
   1508 C10B C2 20                    +            .byte $c2,$20
                                        
   1509 C10D B9 8B 00                             lda reg_ax,y          ;get register value
   1510 C110 E2 20                    +            .byte $e2,$20
                                        
   1511 C112 20 E1 C7                             jsr dpyhexw           ;convert & display
                                        ;         .rept s_word
   1513 C115 C8                                     iny
   1514 C116 C8                                     iny
                                        ;         .endr
                                        ;         .rept s_word
   1517 C117 C8                                     iny
   1518 C118 C8                                     iny
                                        ;         .endr
   1520 C119 C0 0F                                cpy #reg_spx-reg_ax+3
   1521 C11B 90 E1                                bcc .0000030          ;next
                                        ;
                                        ;
                                        ;	display DS DB...
                                        ;
   1526 C11D F4                       +            .byte $f4
   1526 C11E B7 D0                    +            .word mm_regs2
                                        
   1527 C120 20 1D C8                    		 jsr sprint
   1528 C123 C2 20                    +            .byte $c2,$20
                                        
   1529 C125 A5 86                                lda reg_dsx+2         ;get DS &...
   1530 C127 E2 20                    +            .byte $e2,$20
                                        
   1531 C129 20 E1 C7                             jsr dpyhexw           ;convert & display
   1532 C12C C2 20                    +            .byte $c2,$20
                                        
   1533 C12E A5 84                                lda reg_dsx           ;get DS &...
   1534 C130 E2 20                    +            .byte $e2,$20
                                        
   1535 C132 20 E1 C7                             jsr dpyhexw           ;convert & display
   1536 C135 20 18 C8                             jsr printspc          ;more spacing
   1537 C138 A5 9D                                lda reg_dbx           ;get DB &...
   1538 C13A 20 F1 C7                             jsr dpyhex            ;display it
   1539 C13D 20 18 C8                             jsr printspc          ;more spacing
   1540 C140 C2 20                    +            .byte $c2,$20
                                        
   1541 C142 A5 9E                                lda reg_dpx           ;get DPR &...
   1542 C144 E2 20                    +            .byte $e2,$20
                                        
   1543 C146 20 E1 C7                             jsr dpyhexw           ;convert & display
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monce: COMMAND EXECUTIVE
                                        ;	
   1549 C149 E2 20                      monce +         .byte $e2,$20
                                        
   1550 C14B A9 00                                lda #0                ;default buffer index
                                        ;
   1552 C14D E2 30                      moncea +         .byte $e2,$30
                                                        ;alternate entry point
   1553 C14F 85 C1                                sta ibufidx           ;(re)set buffer index
   1554 C151 F4                       +            .byte $f4
   1554 C152 4E D0                    +            .word mm_prmpt
                                        
   1555 C154 20 1D C8                             jsr sprint            ;display input prompt
   1556 C157 20 3D CC                             jsr input             ;await some input
                                        ;
   1558 C15A                            .0000010:
   1559 C15A 20 9B CC                    		jsr getcharc          ;read from buffer
   1560 C15D F0 EA                                beq monce             ;terminator, just loop
                                        ;
   1562 C15F C9 20                                cmp #a_blank
   1563 C161 F0 F7                                beq .0000010          ;strip leading blanks
                                        ;
   1565 C163 A2 0C                                ldx #n_mpctab-1       ;number of primary commands
                                        ;
   1567 C165 DD B8 CC                   .0000020 cmp mpctab,x          ;search primary command list
   1568 C168 D0 0E                                bne .0000030
                                        ;
   1570 C16A 8A                                   txa                   ;get index
   1571 C16B 0A                                   asl                   ;double for offset
   1572 C16C AA                                   tax
   1573 C16D C2 20                    +            .byte $c2,$20
                                        
   1574 C16F BD C5 CC                             lda mpcextab,x        ;command address -1
   1575 C172 48                                   pha                   ;prime the stack
   1576 C173 E2 20                    +            .byte $e2,$20
                                        
   1577 C175 4C E1 CA                             jmp getparm           ;evaluate parm & execute command
                                        ;
   1579 C178 CA                         .0000030 dex
   1580 C179 10 EA                                bpl .0000020          ;continue searching primary commands
                                        ;
   1582 C17B A2 03                                ldx #n_radix-1        ;number of radices
                                        ;
   1584 C17D DD F3 CC                   .0000040 cmp radxtab,x         ;search conversion command list
   1585 C180 D0 03                                bne .0000050
                                        ;
   1587 C182 4C D0 C5                             jmp monenv            ;convert & display parameter
                                        ;
   1589 C185 CA                         .0000050 dex
   1590 C186 10 F5                                bpl .0000040
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monerr: COMMON ERROR HANDLER
                                        ;
   1596 C188 E2 30                      monerr +         .byte $e2,$30
                                                        ;8 bit registers
                                        ;
   1598 C18A 20 C8 C7                   monerraa jsr dpyerr            ;indicate an error &...
   1599 C18D 80 BA                                bra monce             ;return to input loop
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monasc: ASSEMBLE CODE
                                        ;
                                        ;	———————————————————————————————————————————————————————————————————————
                                        ;	syntax: A <addr> <mnemonic> [<argument>]
                                        ;
                                        ;	After a line of code has been successfully assembled it will be disass-
                                        ;	embled & displayed,  & the monitor will prompt with the next address to
                                        ;	which code may be assembled.
                                        ;	———————————————————————————————————————————————————————————————————————
                                        ;
   1613 C18F 90 03                      monasc   bcc .0000020          ;assembly address entered
                                        ;
   1615 C191 4C 88 C1                   .0000010 jmp monerr            ;terminate w/error
                                        ;
                                        ;
                                        ;	evaluate assembly address...
                                        ;
   1620 C194 20 CD CA                   .0000020 jsr facasize          ;check address...
   1621 C197 C9 04                                cmp #s_dword          ;range
   1622 C199 B0 F6                                bcs .0000010          ;out of range — error
                                        ;
   1624 C19B 20 AF CA                             jsr facaddra          ;store assembly address
                                        ;
                                        ;
                                        ;	initialize workspace...
                                        ;
   1629 C19E A2 1F                                ldx #s_auxbuf-s_byte
                                        ;
   1631 C1A0 9E 51 02                   .0000030 stz auxbuf,x          ;clear addressing mode buffer
   1632 C1A3 CA                                   dex
   1633 C1A4 D0 FA                                bne .0000030
                                        ;
   1635 C1A6 A9 20                                lda #a_blank
   1636 C1A8 8D 51 02                             sta auxbuf            ;preamble placeholder
   1637 C1AB 20 1C CA                             jsr clroper           ;clear operand
   1638 C1AE 64 C0                                stz auxbufix          ;reset addressing mode index
   1639 C1B0 64 D0                                stz flimflag          ;clear forced long immediate
   1640 C1B2 64 CA                                stz mnepck            ;clear encoded...
   1641 C1B4 64 CB                                stz mnepck+s_byte     ;mnemonic workspace
   1642 C1B6 64 D3                                stz vopsflag          ;clear 8/16 or relative flag
                                        ;
                                        ;
                                        ;	encode mnemonic...
                                        ;
   1647 C1B8 A0 03                                ldy #s_mnemon         ;expected mnemonic size
                                        ;
   1649 C1BA 20 2E CC                   .0000040 jsr getcharw          ;get from buffer wo/whitespace
   1650 C1BD D0 0A                                bne .0000060          ;gotten
                                        ;
   1652 C1BF C0 03                                cpy #s_mnemon         ;any input at all?
   1653 C1C1 90 03                                bcc .0000050          ;yes
                                        ;
   1655 C1C3 4C 49 C1                             jmp monce             ;no, abort further assembly
                                        ;
   1657 C1C6 4C 66 C3                   .0000050 jmp monasc10          ;incomplete mnemonic — error
                                        ;
   1659 C1C9 38                         .0000060 sec
   1660 C1CA E9 3F                                sbc #a_mnecvt         ;ASCII to binary factor
   1661 C1CC A2 05                                ldx #n_shfenc         ;shifts required to encode
                                        ;
   1663 C1CE 4A                         .0000070 lsr                   ;shift out a bit...
   1664 C1CF 66 CB                                ror mnepck+s_byte     ;into...
   1665 C1D1 66 CA                                ror mnepck            ;encoded mnemonic
   1666 C1D3 CA                                   dex
   1667 C1D4 D0 F8                                bne .0000070          ;next bit
                                        ;
   1669 C1D6 88                                   dey
   1670 C1D7 D0 E1                                bne .0000040          ;get next char
                                        ;
                                        ;
                                        ;	test for copy instruction...
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	The MVN & MVP instructions accept two operands & hence have an irregular
                                        ;	syntax.  Therefore, special handling is necessary to assemble either of
                                        ;	these instructions.
                                        ;
                                        ;	The official WDC syntax has the programmer entering a pair of 24 bit ad-
                                        ;	dresses as operands, with the assembler isolating bits 16-23 to	use as
                                        ;	operands.  This formality has been dispensed with in this monitor & the
                                        ;	operands are expected to be 8 bit bank values.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
   1685 C1D9 C2 20                    +            .byte $c2,$20
                                                         ;16 bit load
   1686 C1DB A5 CA                                lda mnepck            ;packed menmonic
   1687 C1DD A2 54                                ldx #opc_mvn          ;MVN opcode
   1688 C1DF C9 DC                    +            cmp #<mne_mvn
   1688 C1E1 7D                       +            .byte >mne_mvn
                                        ;is it MVN?
   1689 C1E2 F0 07                                beq monasc01          ;yes
                                        ;
   1691 C1E4 A2 44                                ldx #opc_mvp          ;MVP opcode
   1692 C1E6 C9 DC                    +            cmp #<mne_mvp
   1692 C1E8 8D                       +            .byte >mne_mvp
                                        ;is it MVP?
   1693 C1E9 D0 30                                bne monasc02          ;no
                                        ;
                                        ;
                                        ;	assemble copy instruction...
                                        ;
   1698 C1EB 86 CC                      monasc01 stx opcode            ;store relevant opcode
   1699 C1ED E2 20                    +            .byte $e2,$20
                                        
   1700 C1EF 20 3D CB                             jsr instdata          ;get instruction data
   1701 C1F2 86 CF                                stx eopsize           ;effective operand size
   1702 C1F4 E8                                   inx
   1703 C1F5 86 C8                                stx instsize          ;instruction size
   1704 C1F7 A2 01                                ldx #s_oper-s_word    ;operand index
   1705 C1F9 86 CE                                stx xrtemp            ;set it
                                        ;
   1707 C1FB 20 36 C8                   .0000010 jsr ascbin            ;evaluate bank number
   1708 C1FE B0 50                                bcs monasc04          ;conversion error
                                        ;
   1710 C200 F0 4E                                beq monasc04          ;nothing returned — error
                                        ;
   1712 C202 20 CD CA                             jsr facasize          ;bank must be...
   1713 C205 C9 02                                cmp #s_word           ;8 bits
   1714 C207 B0 47                                bcs monasc04          ;it isn't — error
                                        ;
   1716 C209 A5 A9                                lda faca              ;bank
   1717 C20B A6 CE                                ldx xrtemp            ;operand index
   1718 C20D 95 BD                                sta operand,x         ;store
   1719 C20F C6 CE                                dec xrtemp            ;index=index-1
   1720 C211 10 E8                                bpl .0000010          ;get destination bank
                                        ;
   1722 C213 20 CE CB                             jsr getcharr          ;should be no more input
   1723 C216 D0 38                                bne monasc04          ;there is — error
                                        ;
   1725 C218 4C 16 C3                             jmp monasc08          ;finish MVN/MVP assembly 
                                        ;
                                        ;
                                        ;	continue with normal assembly...
                                        ;
   1730 C21B E2 20                      monasc02 +         .byte $e2,$20
                                                        ;back to 8 bits
                                        ;
   1732 C21D 20 2E CC                   monasc03 jsr getcharw          ;get next char
   1733 C220 F0 3D                                beq monasc06          ;EOI, no argument
                                        ;
   1735 C222 C9 21                                cmp #amp_flim
   1736 C224 D0 0A                                bne .0000010          ;no forced long immediate
                                        ;
   1738 C226 A5 D0                                lda flimflag          ;FLIM already set?
   1739 C228 D0 26                                bne monasc04          ;yes — error
                                        ;
   1741 C22A A9 C0                                lda #flimmask
   1742 C22C 85 D0                                sta flimflag          ;set flag &...
   1743 C22E 80 ED                                bra monasc03          ;get next char
                                        ;
   1745 C230 C9 23                      .0000010 cmp #amp_imm          ;immediate mode?
   1746 C232 F0 08                                beq .0000020          ;yes
                                        ;
   1748 C234 C9 28                                cmp #amp_ind          ;indirect mode?
   1749 C236 F0 04                                beq .0000020          ;yes
                                        ;
   1751 C238 C9 5B                                cmp #amp_indl         ;indirect long mode?
   1752 C23A D0 07                                bne .0000030          ;no
                                        ;
   1754 C23C 8D 51 02                   .0000020 sta auxbuf            ;set addressing mode preamble
   1755 C23F E6 C0                                inc auxbufix          ;bump aux buffer index &...
   1756 C241 80 02                                bra .0000040          ;evaluate operand
                                        ;
   1758 C243 C6 C1                      .0000030 dec ibufidx           ;position back to char
                                        ;
   1760 C245 20 36 C8                   .0000040 jsr ascbin            ;evaluate operand
   1761 C248 D0 09                                bne monasc05          ;evaluated
                                        ;
   1763 C24A B0 04                                bcs monasc04          ;conversion error
                                        ;
   1765 C24C A5 C0                                lda auxbufix          ;no operand...any preamble?
   1766 C24E F0 0F                                beq monasc06          ;no, syntax is okay so far
                                        ;
   1768 C250 4C 66 C3                   monasc04 jmp monasc10          ;abort w/error
                                        ;
   1770 C253 20 CD CA                   monasc05 jsr facasize          ;size operand
   1771 C256 C9 04                                cmp #s_dword          ;max is 24 bits
   1772 C258 B0 F6                                bcs monasc04          ;too big
                                        ;
   1774 C25A 85 CF                                sta eopsize           ;save operand size
   1775 C25C 20 C3 CA                             jsr facaoper          ;store operand
                                        ;
   1777 C25F C6 C1                      monasc06 dec ibufidx           ;back to last char
   1778 C261 A6 C0                                ldx auxbufix          ;mode buffer index
   1779 C263 D0 01                                bne .0000010          ;preamble in buffer
                                        ;
   1781 C265 E8                                   inx                   ;step past preamble position
                                        ;
   1783 C266 20 9B CC                   .0000010 jsr getcharc          ;get a char w/forced UC
   1784 C269 F0 0A                                beq .0000030          ;EOI
                                        ;
   1786 C26B E0 20                                cpx #s_auxbuf         ;mode buffer full?
   1787 C26D B0 E1                                bcs monasc04          ;yes, too much input
                                        ;
   1789 C26F 9D 51 02                   .0000020 sta auxbuf,x          ;store for comparison
   1790 C272 E8                                   inx
   1791 C273 D0 F1                                bne .0000010
                                        ;
                                        ;
                                        ;	evaluate mnemonic...
                                        ;
   1796 C275 A2 5B                      .0000030 ldx #n_mnemon-1       ;starting mnemonic index
                                        ;
   1798 C277 8A                         monasc07 txa                   ;convert index...
   1799 C278 0A                                   asl                   ;to offset
   1800 C279 A8                                   tay                   ;now mnemonic table index
   1801 C27A C2 20                    +            .byte $c2,$20
                                                         ;16 bit compare
   1802 C27C B9 00 CD                             lda mnetab,y          ;get mnemonic from table
   1803 C27F C5 CA                                cmp mnepck            ;compare to entered mnemonic
   1804 C281 E2 20                    +            .byte $e2,$20
                                                        ;back to 8 bits
   1805 C283 F0 05                                beq .0000020          ;match
                                        ;
   1807 C285 CA                         .0000010 dex                   ;try next mnemonic
   1808 C286 30 C8                                bmi monasc04          ;unknown mnemonic — error
                                        ;
   1810 C288 80 ED                                bra monasc07          ;keep going
                                        ;
   1812 C28A 86 CA                      .0000020 stx mnepck            ;save mnemonic index
   1813 C28C 8A                                   txa
   1814 C28D A2 00                                ldx #0                ;trial opcode
                                        ;
   1816 C28F DD B8 CD                   .0000030 cmp mnetabix,x        ;search index table...
   1817 C292 F0 05                                beq .0000050          ;for a match
                                        ;
   1819 C294 E8                         .0000040 inx                   ;keep going until we...
   1820 C295 D0 F8                                bne .0000030          ;search entire table
                                        ;
   1822 C297 80 B7                                bra monasc04          ;this shouldn't happen!
                                        ;
                                        ;	—————————————————————————————————————————————————————————————————————
                                        ;	If the mnemonic index table search fails then there is a coding error
                                        ;	somewhere, as every entry in the mnemonic table is supposed to have a
                                        ;	matching cardinal index.
                                        ;	—————————————————————————————————————————————————————————————————————
                                        ;
                                        ;
                                        ;	evaluate addressing mode...
                                        ;
   1833 C299 86 CC                      .0000050 stx opcode            ;save trial opcode
   1834 C29B 20 3D CB                             jsr instdata          ;get related instruction data
   1835 C29E 85 D3                                sta vopsflag          ;save 8/16 or relative flag
   1836 C2A0 86 D1                                stx iopsize           ;operand size
   1837 C2A2 E8                                   inx
   1838 C2A3 86 C8                                stx instsize          ;instruction size
   1839 C2A5 A6 CC                                ldx opcode            ;recover trial opcode
   1840 C2A7 98                                   tya                   ;addressing mode
   1841 C2A8 0A                                   asl                   ;create table index
   1842 C2A9 A8                                   tay
   1843 C2AA C2 20                    +            .byte $c2,$20
                                        
   1844 C2AC B9 BC CF                             lda ms_lutab,y        ;mode lookup table
   1845 C2AF 85 A6                                sta addrb             ;set pointer
   1846 C2B1 E2 20                    +            .byte $e2,$20
                                        
   1847 C2B3 A0 00                                ldy #0
                                        ;
   1849 C2B5 B1 A6                      .0000060 lda (addrb),y         ;table addressing mode
   1850 C2B7 D9 51 02                             cmp auxbuf,y          ;entered addressing mode
   1851 C2BA F0 04                                beq .0000080          ;okay so far
                                        ;
   1853 C2BC A5 CA                      .0000070 lda mnepck            ;reload mnemonic index        
   1854 C2BE 80 D4                                bra .0000040          ;wrong opcode for addresing mode
                                        ;
   1856 C2C0 09 00                      .0000080 ora #0                ;last char the terminator?
   1857 C2C2 F0 03                                beq .0000090          ;yes, evaluate operand
                                        ;
   1859 C2C4 C8                                   iny
   1860 C2C5 80 EE                                bra .0000060          ;keep testing
                                        ;
                                        ;
                                        ;	evaluate operand...
                                        ;
   1865 C2C7 A5 CF                      .0000090 lda eopsize           ;entered operand size
   1866 C2C9 D0 06                                bne .0000100          ;non-zero
                                        ;
   1868 C2CB 05 D1                                ora iopsize           ;instruction operand size
   1869 C2CD D0 ED                                bne .0000070          ;wrong opcode — keep trying
                                        ;
   1871 C2CF 80 45                                bra monasc08          ;assemble instruction
                                        ;
   1873 C2D1 24 D3                      .0000100 bit vopsflag          ;is this a branch?
   1874 C2D3 70 3A                                bvs .0000160          ;yes, evaluate
                                        ;
   1876 C2D5 A5 D1                                lda iopsize           ;instruction operand size
   1877 C2D7 24 D3                                bit vopsflag          ;variable size operand allowed?
   1878 C2D9 30 15                                bmi .0000130          ;yes
                                        ;
   1880 C2DB 24 D0                                bit flimflag          ;was forced immediate set?
   1881 C2DD 10 03                                bpl .0000110          ;no
                                        ;         
   1883 C2DF 4C 66 C3                             jmp monasc10          ;yes — error
                                        ;
   1885 C2E2 C5 CF                      .0000110 cmp eopsize           ;entered operand size
   1886 C2E4 90 D6                                bcc .0000070          ;operand too big
                                        ;
   1888 C2E6 85 CF                                sta eopsize           ;new operand size
   1889 C2E8 80 2C                                bra monasc08          ;assemble, otherwise...
                                        ;
   1891 C2EA C5 CF                      .0000120 cmp eopsize           ;exact size match required
   1892 C2EC D0 CE                                bne .0000070          ;mismatch — wrong opcode
                                        ;
   1894 C2EE 80 26                                bra monasc08          ;assemble
                                        ;
                                        ;
                                        ;	process variable size immediate mode operand...
                                        ;
   1899 C2F0 A6 CF                      .0000130 ldx eopsize           ;entered operand size
   1900 C2F2 E0 03                                cpx #s_xword          ;check size
   1901 C2F4 B0 70                                bcs monasc10          ;too big — error
                                        ;
   1903 C2F6 24 D0                                bit flimflag          ;forced long immediate?
   1904 C2F8 10 06                                bpl .0000140          ;no
                                        ;
   1906 C2FA A2 02                                ldx #s_word           ;promote operand size to...
   1907 C2FC 86 CF                                stx eopsize           ;16 bits
   1908 C2FE 80 08                                bra .0000150
                                        ;
   1910 C300 E0 02                      .0000140 cpx #s_word           ;16 bits?
   1911 C302 D0 04                                bne .0000150          ;no
                                        ;
   1913 C304 A0 C0                                ldy #flimmask         ;yes so force long...
   1914 C306 84 D0                                sty flimflag          ;immediate disassembly
                                        ;
   1916 C308 1A                         .0000150 ina                   ;new instruction operand size
   1917 C309 C5 CF                                cmp eopsize           ;compare against operand size
   1918 C30B 90 AF                                bcc .0000070          ;mismatch — can't assemble
                                        ;
   1920 C30D 80 07                                bra monasc08          ;okay, assemble
                                        ;
                                        ;
                                        ;	process relative branch...
                                        ;
   1925 C30F 20 89 CB                   .0000160 jsr targoff           ;compute branch offset
   1926 C312 B0 52                                bcs monasc10          ;branch out of range
                                        ;
   1928 C314 85 CF                                sta eopsize           ;effective operand size
                                        ;
                                        ;
                                        ;	assemble instruction...
                                        ;
   1933 C316 A5 CC                      monasc08 lda opcode            ;opcode
   1934 C318 87 A2                    +            .byte $87,addra
                                        ;store at assembly address
   1935 C31A A6 CF                                ldx eopsize           ;any operand to process?
   1936 C31C F0 09                                beq .0000020          ;no
                                        ;
   1938 C31E 9B                       +            .byte $9b
                                                           ;also storage offset
                                        ;
   1940 C31F CA                         .0000010 dex
   1941 C320 B5 BD                                lda operand,x         ;get operand byte &...
   1942 C322 97 A2                    +            .byte $97,addra
                                        ;poke into memory
   1943 C324 88                                   dey
   1944 C325 D0 F8                                bne .0000010          ;next
                                        ;
   1946 C327 A9 0D                      .0000020 lda #a_cr
   1947 C329 20 06 F4                             jsr putcha            ;return to left margin
   1948 C32C A9 41                                lda #asmprfx          ;assembly prefix
   1949 C32E 20 71 C6                             jsr dpycodaa          ;disassemble & display
                                        ;
                                        ;
                                        ;	prompt for next instruction...
                                        ;
   1954 C331 A9 20                      monasc09 lda #a_blank
   1955 C333 A2 08                                ldx #ascprmct-1
                                        ;
   1957 C335 9D 00 02                   .0000010 sta ibuffer,x         ;prepare buffer for...
   1958 C338 CA                                   dex                   ;next instruction
   1959 C339 10 FA                                bpl .0000010
                                        ;
   1961 C33B A9 41                                lda #asmprfx          ;assemble code...
   1962 C33D 8D 00 02                             sta ibuffer           ;prompt prefix
   1963 C340 A5 A4                                lda addra+s_word      ;next instruction address bank
   1964 C342 20 88 C9                             jsr binhex            ;convert to ASCII
   1965 C345 8D 02 02                             sta ibuffer+apadrbkh  ;store MSN in buffer
   1966 C348 8E 03 02                             stx ibuffer+apadrbkl  ;store LSN in buffer
   1967 C34B A5 A3                                lda addra+s_byte      ;next instruction address MSB
   1968 C34D 20 88 C9                             jsr binhex
   1969 C350 8D 04 02                             sta ibuffer+apadrmbh
   1970 C353 8E 05 02                             stx ibuffer+apadrmbl
   1971 C356 A5 A2                                lda addra             ;next instruction address LSB
   1972 C358 20 88 C9                             jsr binhex
   1973 C35B 8D 06 02                             sta ibuffer+apadrlbh
   1974 C35E 8E 07 02                             stx ibuffer+apadrlbl
   1975 C361 A9 09                                lda #ascprmct         ;effective input count
   1976 C363 4C 4D C1                             jmp moncea            ;reenter input loop
                                        ;
                                        ;
                                        ;	process assembly error...
                                        ;
   1981 C366 20 C8 C7                   monasc10 jsr dpyerr            ;indicate error &...
   1982 C369 80 C6                                bra monasc09          ;prompt w/same assembly address
                                        ;
                                        ;================================================================================
                                        ;
                                        ;mondsc: DISASSEMBLE CODE
                                        ;
                                        ;	—————————————————————————————
                                        ;	syntax: D [<addr1> [<addr2>]]
                                        ;	—————————————————————————————
                                        ;
   1992 C36B B0 11                      mondsc   bcs .0000010          ;no parameters
                                        ;
   1994 C36D 64 D0                                stz flimflag          ;reset to 8 bit mode
   1995 C36F 20 CD CA                             jsr facasize          ;check starting...
   1996 C372 C9 04                                cmp #s_dword          ;address
   1997 C374 B0 46                                bcs .0000050          ;out of range — error
                                        ;
   1999 C376 20 AF CA                             jsr facaddra          ;copy starting address
   2000 C379 20 E1 CA                             jsr getparm           ;get ending address
   2001 C37C 90 17                                bcc .0000020          ;gotten
                                        ;
   2003 C37E 20 9B C9                   .0000010 jsr clrfaca           ;clear accumulator
   2004 C381 C2 20                    +            .byte $c2,$20
                                        
   2005 C383 18                                   clc
   2006 C384 A5 A2                                lda addra             ;starting address
   2007 C386 69 15                    +            adc #<n_dbytes
   2007 C388 00                       +            .byte >n_dbytes
                                        ;default bytes
   2008 C389 85 A9                                sta faca              ;effective ending address
   2009 C38B E2 20                    +            .byte $e2,$20
                                        
   2010 C38D A5 A4                                lda addra+s_word      ;starting bank
   2011 C38F 69 00                                adc #0
   2012 C391 85 AB                                sta faca+s_word       ;effective ending bank
   2013 C393 B0 27                                bcs .0000050          ;end address > $FFFFFF
                                        ;
   2015 C395 20 CD CA                   .0000020 jsr facasize          ;check ending...
   2016 C398 C9 04                                cmp #s_dword          ;address
   2017 C39A B0 20                                bcs .0000050          ;out of range — error
                                        ;
   2019 C39C 20 B9 CA                             jsr facaddrb          ;set ending address
   2020 C39F 20 E1 CA                             jsr getparm           ;check for excess input
   2021 C3A2 90 18                                bcc .0000050          ;present — error
                                        ;
   2023 C3A4 20 07 CA                             jsr calccnt           ;calculate bytes
   2024 C3A7 90 13                                bcc .0000050          ;end < start
                                        ;
   2026 C3A9 20 AD CC                   .0000030 jsr teststop          ;test for display stop
   2027 C3AC B0 0B                                bcs .0000040          ;stopped
                                        ;
   2029 C3AE 20 08 C8                             jsr newline           ;next line
   2030 C3B1 20 6F C6                             jsr dpycod            ;disassemble & display
   2031 C3B4 20 65 CA                             jsr decdcnt           ;decrement byte count
   2032 C3B7 90 F0                                bcc .0000030          ;not done
                                        ;
   2034 C3B9 4C 49 C1                   .0000040 jmp monce             ;back to main loop
                                        ;
   2036 C3BC 4C 88 C1                   .0000050 jmp monerr            ;address range error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monjmp: EXECUTE CODE
                                        ;
                                        ;	—————————————————————————————————————————————————————————————
                                        ;	syntax: G [<addr>]
                                        ;
                                        ;	If no address is specified, the current values in the PB & PC
                                        ;	shadow registers are used.
                                        ;	—————————————————————————————————————————————————————————————
                                        ;
   2049 C3BF 20 72 CB                   monjmp   jsr setxaddr          ;set execution address
   2050 C3C2 B0 29                                bcs monjmpab          ;out of range — error
                                        ;
   2052 C3C4 20 E1 CA                             jsr getparm           ;check for excess input
   2053 C3C7 90 24                                bcc monjmpab          ;too much input — error
                                        ;
   2055 C3C9 C2 20                    +            .byte $c2,$20
                                                         ;16 bit .A
   2056 C3CB A5 97                                lda reg_spx
   2057 C3CD 1B                       +            .byte $1b
                                                           ;restore SP
                                        ;
   2059 C3CE E2 20                      monjmpaa +         .byte $e2,$20
                                        
   2060 C3D0 A5 8A                                lda reg_pbx
   2061 C3D2 48                                   pha                   ;restore PB
   2062 C3D3 C2 20                    +            .byte $c2,$20
                                        
   2063 C3D5 A5 88                                lda reg_pcx
   2064 C3D7 48                                   pha                   ;restore PC
   2065 C3D8 E2 20                    +            .byte $e2,$20
                                        
   2066 C3DA A5 9B                                lda reg_srx
   2067 C3DC 48                                   pha                   ;restore SR
   2068 C3DD A5 9D                                lda reg_dbx
   2069 C3DF 48                                   pha
   2070 C3E0 AB                       +            .byte $ab
                                                           ;restore DB
   2071 C3E1 C2 30                    +            .byte $c2,$30
                                        
   2072 C3E3 A5 9E                                lda reg_dpx
   2073 C3E5 5B                       +            .byte $5b
                                                           ;restore DP
   2074 C3E6 A5 8B                                lda reg_ax            ;restore .C
   2075 C3E8 A6 8F                                ldx reg_xx            ;restore .X
   2076 C3EA A4 93                                ldy reg_yx            ;restore .Y
   2077 C3EC 40                                   rti                   ;execute code
                                        ;
   2079 C3ED 4C 88 C1                   monjmpab jmp monerr            ;error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monjsr: EXECUTE CODE AS SUBROUTINE
                                        ;
                                        ;	————————————————————————————————————————————————————————————
                                        ;	syntax: J [<addr>]
                                        ;
                                        ;	If no address is specified the current values in the PB & PC
                                        ;	shadow registers are used.   An RTS at the end of the called
                                        ;	subroutine will return control to the monitor  provided  the
                                        ;	stack remains in balance.
                                        ;	————————————————————————————————————————————————————————————
                                        ;
   2094 C3F0 20 72 CB                   monjsr   jsr setxaddr          ;set execution address
   2095 C3F3 B0 F8                                bcs monjmpab          ;out of range — error
                                        ;
   2097 C3F5 20 E1 CA                             jsr getparm           ;check for excess input
   2098 C3F8 90 F3                                bcc monjmpab          ;too much input — error
                                        ;
   2100 C3FA C2 20                    +            .byte $c2,$20
                                        
   2101 C3FC A5 97                                lda reg_spx
   2102 C3FE 1B                       +            .byte $1b
                                                           ;restore SP &...
   2103 C3FF 20 CE C3                             jsr monjmpaa          ;call subroutine
   2104 C402 08                                   php                   ;push SR
   2105 C403 C2 30                    +            .byte $c2,$30
                                        
   2106 C405 85 8B                                sta reg_ax            ;save...
   2107 C407 86 8F                                stx reg_xx            ;register...
   2108 C409 84 93                                sty reg_yx            ;returns
   2109 C40B E2 10                    +            .byte $e2,$10
                                                        ;8 bit .X & .Y
   2110 C40D FA                                   plx                   ;get & save...
   2111 C40E 86 9B                                stx reg_srx           ;return SR
   2112 C410 3B                       +            .byte $3b
                                                           ;get & save...
   2113 C411 85 97                                sta reg_spx           ;return SP
   2114 C413 7B                       +            .byte $7b
                                                           ;get & save...
   2115 C414 85 9E                                sta reg_dpx           ;DP pointer
   2116 C416 E2 20                    +            .byte $e2,$20
                                                        ;8 bit .A
   2117 C418 4B                       +            .byte $4b
                                                           ;get &...
   2118 C419 68                                   pla                   ;save...
   2119 C41A 85 8A                                sta reg_pbx           ;return PB
   2120 C41C 8B                       +            .byte $8b
                                                           ;get &...
   2121 C41D 68                                   pla                   ;save...
   2122 C41E 85 9D                                sta reg_dbx           ;return DB
   2123 C420 F4                       +            .byte $f4
   2123 C421 CF D0                    +            .word mm_rts
                                        ;"*RET"
   2124 C423 4C 87 C0                             jmp moncom            ;return to monitor
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monchm: CHANGE and/or DUMP MEMORY
                                        ;
                                        ;	————————————————————————————————————————————
                                        ;	syntax: > [<addr> <operand> [<operand>]...]
                                        ;
                                        ;	> <addr> without operands will dump 16 bytes
                                        ;	of memory, starting at <addr>.
                                        ;	————————————————————————————————————————————
                                        ;
   2137 C426 B0 23                      monchm   bcs .0000030          ;no address given — quit
                                        ;
   2139 C428 20 CD CA                             jsr facasize          ;size address
   2140 C42B C9 04                                cmp #s_dword
   2141 C42D B0 1F                                bcs .0000040          ;address out of range — error
                                        ;
   2143 C42F 20 AF CA                             jsr facaddra          ;set starting address
   2144 C432 20 E2 CB                             jsr getpat            ;evaluate change pattern
   2145 C435 90 04                                bcc .0000010          ;entered
                                        ;
   2147 C437 10 0C                                bpl .0000020          ;not entered
                                        ;
   2149 C439 80 13                                bra .0000040          ;evaluation error
                                        ;
   2151 C43B 88                         .0000010 dey                   ;next byte
   2152 C43C 30 07                                bmi .0000020          ;done
                                        ;
   2154 C43E B9 51 02                             lda auxbuf,y          ;write pattern...
   2155 C441 97 A2                    +            .byte $97,addra
                                        ;to memory
   2156 C443 80 F6                                bra .0000010          ;next
                                        ;
   2158 C445 20 08 C8                   .0000020 jsr newline           ;next line
   2159 C448 20 85 C7                             jsr dpymem            ;regurgitate changes
                                        ;
   2161 C44B 4C 49 C1                   .0000030 jmp monce             ;back to command loop
                                        ;
   2163 C44E 4C 88 C1                   .0000040 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;moncmp: COMPARE MEMORY
                                        ;
                                        ;	—————————————————————————————
                                        ;	syntax: C <start> <end> <ref>
                                        ;	—————————————————————————————
                                        ;
   2173 C451 B0 26                      moncmp   bcs .0000030          ;start not given — quit
                                        ;
   2175 C453 20 89 CA                             jsr enddest           ;get end & reference addresses
   2176 C456 B0 24                                bcs .0000040          ;range or other error
                                        ;
   2178 C458 64 CE                                stz xrtemp            ;column counter
                                        ;
   2180 C45A 20 AD CC                   .0000010 jsr teststop          ;check for stop
   2181 C45D B0 1A                                bcs .0000030          ;abort
                                        ;
   2183 C45F A7 A2                    +            .byte $a7,addra
                                        ;get from reference location
   2184 C461 C7 BD                    +            .byte $c7,operand
                                        ;test against compare location
   2185 C463 F0 03                                beq .0000020          ;match, don't display address
                                        ;
   2187 C465 20 57 C6                             jsr dpycaddr          ;display current location
                                        ;
   2189 C468 20 09 CB                   .0000020 jsr nxtaddra          ;next reference location
   2190 C46B B0 0C                                bcs .0000030          ;done
                                        ;
   2192 C46D C2 20                    +            .byte $c2,$20
                                        
   2193 C46F E6 BD                                inc operand           ;bump bits 0-15
   2194 C471 E2 20                    +            .byte $e2,$20
                                        
   2195 C473 D0 E5                                bne .0000010
                                        ;
   2197 C475 E6 BF                                inc operand+s_word    ;bump bits 16-23
   2198 C477 80 E1                                bra .0000010
                                        ;
   2200 C479 4C 49 C1                   .0000030 jmp monce             ;return to command exec
                                        ;
   2202 C47C 4C 88 C1                   .0000040 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;moncpy: COPY (transfer) MEMORY
                                        ;
                                        ;	————————————————————————————————
                                        ;	syntax: T <start> <end> <target>
                                        ;	————————————————————————————————
                                        ;
   2212 C47F B0 49                      moncpy   bcs .0000040          ;start not given — quit
                                        ;
   2214 C481 20 89 CA                             jsr enddest           ;get end & target addresses
   2215 C484 B0 47                                bcs .0000050          ;range or other error
                                        ;
   2217 C486 C2 20                    +            .byte $c2,$20
                                        
   2218 C488 38                                   sec
   2219 C489 A5 A6                                lda addrb             ;ending address
   2220 C48B E5 A2                                sbc addra             ;starting address
   2221 C48D 90 3E                                bcc .0000050          ;start > end — error
                                        ;
   2223 C48F 85 B1                                sta facb              ;bytes to copy
   2224 C491 E2 20                    +            .byte $e2,$20
                                        
   2225 C493 C2 10                    +            .byte $c2,$10
                                        
   2226 C495 A5 BF                                lda operand+s_word    ;target bank
   2227 C497 A4 BD                                ldy operand           ;target address
   2228 C499 C5 A4                                cmp addra+s_word      ;source bank
   2229 C49B C2 20                    +            .byte $c2,$20
                                        
   2230 C49D D0 1C                                bne .0000020          ;can use forward copy
                                        ;
   2232 C49F C4 A2                                cpy addra             ;source address
   2233 C4A1 90 18                                bcc .0000020          ;can use forward copy
                                        ;
   2235 C4A3 D0 02                                bne .0000010          ;must use reverse copy
                                        ;
   2237 C4A5 80 26                                bra .0000050          ;copy in place — error
                                        ;
   2239 C4A7 A5 B1                      .0000010 lda facb              ;get bytes to copy
   2240 C4A9 48                                   pha                   ;protect
   2241 C4AA 20 93 CC                             jsr lodbnk            ;load banks
   2242 C4AD 20 2F CA                             jsr cprvsup           ;do reverse copy setup
   2243 C4B0 68                                   pla                   ;get bytes to copy
   2244 C4B1 AA                                   tax                   ;save a copy
   2245 C4B2 18                                   clc
   2246 C4B3 65 BD                                adc operand           ;change target to...
   2247 C4B5 A8                                   tay                   ;target end
   2248 C4B6 8A                                   txa                   ;recover bytes to copy
   2249 C4B7 A6 A6                                ldx addrb             ;source end
   2250 C4B9 80 0C                                bra .0000030
                                        ;
   2252 C4BB A5 B1                      .0000020 lda facb              ;get bytes to copy
   2253 C4BD 48                                   pha                   ;protect
   2254 C4BE 20 93 CC                             jsr lodbnk            ;load banks
   2255 C4C1 20 28 CA                             jsr cpfwsup           ;do forward copy setup
   2256 C4C4 68                                   pla                   ;get bytes to copy
   2257 C4C5 A6 A2                                ldx addra             ;source start
                                        ;
   2259 C4C7 4C D4 00                   .0000030 jmp mcftwork          ;copy memory
                                        ;
   2261 C4CA 4C 49 C1                   .0000040 jmp monce             ;back to executive
                                        ;
   2263 C4CD 4C 88 C1                   .0000050 jmp monerr            ;error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;mondmp: DISPLAY MEMORY RANGE
                                        ;
                                        ;	—————————————————————————————
                                        ;	syntax: M [<addr1> [<addr2>]]
                                        ;	—————————————————————————————
                                        ;
   2273 C4D0 B0 0F                      mondmp   bcs .0000010          ;no parameters
                                        ;
   2275 C4D2 20 CD CA                             jsr facasize          ;check address...
   2276 C4D5 C9 04                                cmp #s_dword          ;range
   2277 C4D7 B0 46                                bcs .0000050          ;address out of range
                                        ;
   2279 C4D9 20 AF CA                             jsr facaddra          ;copy starting address
   2280 C4DC 20 E1 CA                             jsr getparm           ;get ending address
   2281 C4DF 90 17                                bcc .0000020          ;gotten
                                        ;
   2283 C4E1 20 9B C9                   .0000010 jsr clrfaca           ;clear accumulator
   2284 C4E4 C2 20                    +            .byte $c2,$20
                                        
   2285 C4E6 18                                   clc
   2286 C4E7 A5 A2                                lda addra             ;starting address
   2287 C4E9 69 FF                    +            adc #<n_mbytes
   2287 C4EB 00                       +            .byte >n_mbytes
                                        ;default bytes
   2288 C4EC 85 A9                                sta faca              ;effective ending address
   2289 C4EE E2 20                    +            .byte $e2,$20
                                        
   2290 C4F0 A5 A4                                lda addra+s_word      ;starting bank
   2291 C4F2 69 00                                adc #0
   2292 C4F4 85 AB                                sta faca+s_word       ;effective ending bank
   2293 C4F6 B0 27                                bcs .0000050          ;end address > $FFFFFF
                                        ;
   2295 C4F8 20 CD CA                   .0000020 jsr facasize          ;check ending address...
   2296 C4FB C9 04                                cmp #s_dword          ;range
   2297 C4FD B0 20                                bcs .0000050          ;out of range — error
                                        ;
   2299 C4FF 20 B9 CA                             jsr facaddrb          ;copy ending address
   2300 C502 20 E1 CA                             jsr getparm           ;check for excess input
   2301 C505 90 18                                bcc .0000050          ;error
                                        ;
   2303 C507 20 07 CA                             jsr calccnt           ;calculate bytes to dump
   2304 C50A 90 13                                bcc .0000050          ;end < start
                                        ;
   2306 C50C 20 AD CC                   .0000030 jsr teststop          ;test for display stop
   2307 C50F B0 0B                                bcs .0000040          ;stopped
                                        ;
   2309 C511 20 08 C8                             jsr newline           ;next line
   2310 C514 20 85 C7                             jsr dpymem            ;display
   2311 C517 20 65 CA                             jsr decdcnt           ;decrement byte count
   2312 C51A 90 F0                                bcc .0000030          ;not done
                                        ;
   2314 C51C 4C 49 C1                   .0000040 jmp monce             ;back to main loop
                                        ;
   2316 C51F 4C 88 C1                   .0000050 jmp monerr            ;address range error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monfil: FILL MEMORY
                                        ;
                                        ;	—————————————————————————————————————————
                                        ;	syntax: F <start> <end> <fill>
                                        ;
                                        ;	<start> & <end> must be in the same bank.
                                        ;	—————————————————————————————————————————
                                        ;
   2328 C522 B0 5E                      monfil   bcs .0000010          ;start not given — quit
                                        ;
   2330 C524 20 CD CA                             jsr facasize          ;check size
   2331 C527 C9 04                                cmp #s_dword
   2332 C529 B0 5A                                bcs .0000020          ;out of range — error...
                                        ;
   2334 C52B 20 AF CA                             jsr facaddra          ;store start
   2335 C52E 20 E1 CA                             jsr getparm           ;evaluate end
   2336 C531 B0 52                                bcs .0000020          ;not entered — error
                                        ;
   2338 C533 20 CD CA                             jsr facasize          ;check size
   2339 C536 C9 04                                cmp #s_dword
   2340 C538 B0 4B                                bcs .0000020          ;out of range — error
                                        ;
   2342 C53A A5 AB                                lda faca+s_word       ;end bank
   2343 C53C C5 A4                                cmp addra+s_word      ;start bank
   2344 C53E D0 45                                bne .0000020          ;not same — error
                                        ;
   2346 C540 20 B9 CA                             jsr facaddrb          ;store <end>
   2347 C543 C2 20                    +            .byte $c2,$20
                                        
   2348 C545 38                                   sec
   2349 C546 A5 A6                                lda addrb             ;ending address
   2350 C548 E5 A2                                sbc addra             ;starting address
   2351 C54A 90 39                                bcc .0000020          ;start > end — error
                                        ;
   2353 C54C 85 B1                                sta facb              ;bytes to copy
   2354 C54E E2 20                    +            .byte $e2,$20
                                        
   2355 C550 20 E1 CA                             jsr getparm           ;evaluate <fill>
   2356 C553 B0 30                                bcs .0000020          ;not entered — error
                                        ;
   2358 C555 20 CD CA                             jsr facasize          ;<fill> should be...
   2359 C558 C9 02                                cmp #s_word           ;8 bits
   2360 C55A B0 29                                bcs .0000020          ;it isn't — error
                                        ;
   2362 C55C 20 C3 CA                             jsr facaoper          ;store <fill>
   2363 C55F 20 E1 CA                             jsr getparm           ;should be no more parameters
   2364 C562 90 21                                bcc .0000020          ;there are — error
                                        ;
   2366 C564 A5 BD                                lda operand           ;<fill>
   2367 C566 87 A2                    +            .byte $87,addra
                                        ;fill 1st location
   2368 C568 C2 30                    +            .byte $c2,$30
                                                         ;16 bit operations
   2369 C56A A5 B1                                lda facb              ;
   2370 C56C F0 14                                beq .0000010          ;only 1 location — finished
                                        ;
   2372 C56E 3A                                   dea                   ;zero align &...
   2373 C56F 48                                   pha                   ;protect
   2374 C570 E2 20                    +            .byte $e2,$20
                                        
   2375 C572 A5 A4                                lda addra+s_word      ;start bank
   2376 C574 EB                       +            .byte $eb
                                        
   2377 C575 A5 A8                                lda addrb+s_word      ;end bank
   2378 C577 20 28 CA                             jsr cpfwsup           ;do forward copy setup
   2379 C57A 68                                   pla                   ;recover fill count
   2380 C57B A6 A2                                ldx addra             ;fill-from starting location
   2381 C57D 9B                       +            .byte $9b
                                        
   2382 C57E C8                                   iny                   ;fill-to starting location
   2383 C57F 4C D4 00                             jmp mcftwork          ;fill memory
                                        ;
   2385 C582 4C 49 C1                   .0000010 jmp monce             ;goto command executive
                                        ;
   2387 C585 4C 88 C1                   .0000020 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monhnt: SEARCH (hunt) MEMORY
                                        ;
                                        ;	———————————————————————————————————
                                        ;	syntax: H <addr1> <addr2> <pattern>
                                        ;	———————————————————————————————————
                                        ;
   2397 C588 B0 40                      monhnt   bcs .0000050          ;no start address
                                        ;
   2399 C58A 20 CD CA                             jsr facasize          ;size starting address
   2400 C58D C9 04                                cmp #s_dword
   2401 C58F B0 3C                                bcs .0000060          ;address out of range — error
                                        ;
   2403 C591 20 AF CA                             jsr facaddra          ;store starting address
   2404 C594 20 E1 CA                             jsr getparm           ;evaluate ending address
   2405 C597 B0 34                                bcs .0000060          ;no address — error
                                        ;
   2407 C599 20 CD CA                             jsr facasize          ;size ending address
   2408 C59C C9 04                                cmp #s_dword
   2409 C59E B0 2D                                bcs .0000060          ;address out of range — error
                                        ;
   2411 C5A0 20 B9 CA                             jsr facaddrb          ;store ending address
   2412 C5A3 20 07 CA                             jsr calccnt           ;calculate byte range
   2413 C5A6 90 25                                bcc .0000060          ;end < start
                                        ;
   2415 C5A8 20 E2 CB                             jsr getpat            ;evaluate search pattern
   2416 C5AB B0 20                                bcs .0000060          ;error
                                        ;
   2418 C5AD 64 CE                                stz xrtemp            ;clear column counter
                                        ;
   2420 C5AF 20 AD CC                   .0000010 jsr teststop          ;check for stop
   2421 C5B2 B0 16                                bcs .0000050          ;abort
                                        ;
   2423 C5B4 A4 C0                                ldy auxbufix          ;pattern index
                                        ;
   2425 C5B6 88                         .0000020 dey
   2426 C5B7 30 09                                bmi .0000030          ;pattern match
                                        ;
   2428 C5B9 B7 A2                    +            .byte $b7,addra
                                        ;get from memory
   2429 C5BB D9 51 02                             cmp auxbuf,y          ;test against pattern
   2430 C5BE D0 05                                bne .0000040          ;mismatch, next location
                                        ;
   2432 C5C0 F0 F4                                beq .0000020          ;match, keep testing
                                        ;
   2434 C5C2 20 57 C6                   .0000030 jsr dpycaddr          ;display current location
                                        ;
   2436 C5C5 20 09 CB                   .0000040 jsr nxtaddra          ;next location
   2437 C5C8 90 E5                                bcc .0000010          ;not done
                                        ;
   2439 C5CA 4C 49 C1                   .0000050 jmp monce             ;back to executive
                                        ;
   2441 C5CD 4C 88 C1                   .0000060 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monenv: CONVERT NUMERIC VALUE
                                        ;
                                        ;	——————————————————————
                                        ;	syntax: <radix><value>
                                        ;	——————————————————————
                                        ;
   2451 C5D0 20 DF CA                   monenv   jsr getparmr          ;reread & evaluate parameter
   2452 C5D3 B0 26                                bcs .0000020          ;none entered
                                        ;
   2454 C5D5 A2 00                                ldx #0                ;radix index
   2455 C5D7 A0 04                                ldy #n_radix          ;number of radices
                                        ;
   2457 C5D9 5A                         .0000010 phy                   ;save counter
   2458 C5DA DA                                   phx                   ;save radix index
   2459 C5DB 20 08 C8                             jsr newline           ;next line &...
   2460 C5DE 20 7B C7                             jsr clearlin          ;clear it
   2461 C5E1 A9 20                                lda #a_blank
   2462 C5E3 A2 04                                ldx #halftab
   2463 C5E5 20 FB C7                             jsr multspc           ;indent 1/2 tab
   2464 C5E8 FA                                   plx                   ;get radix index but...
   2465 C5E9 DA                                   phx                   ;put it back
   2466 C5EA BD F3 CC                             lda radxtab,x         ;get radix
   2467 C5ED 20 F4 C8                             jsr binasc            ;convert to ASCII
   2468 C5F0 5A                                   phy                   ;string address MSB
   2469 C5F1 DA                                   phx                   ;string address LSB
   2470 C5F2 20 1D C8                             jsr sprint            ;print
   2471 C5F5 FA                                   plx                   ;get index again
   2472 C5F6 7A                                   ply                   ;get counter
   2473 C5F7 E8                                   inx
   2474 C5F8 88                                   dey
   2475 C5F9 D0 DE                                bne .0000010          ;no
                                        
   2477 C5FB 4C 49 C1                   .0000020 jmp monce             ;back to command exec
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monchr: CHANGE REGISTERS
                                        ;
                                        ;	——————————————————————————————————————————————————————
                                        ;	syntax: ; [PB [PC [.S [.C [.X [.Y [SP [DP [DB]]]]]]]]]
                                        ;
                                        ;	; with no parameters is the same as the R command.
                                        ;	——————————————————————————————————————————————————————
                                        ;
   2489 C5FE B0 33                      monchr   bcs .0000040          ;dump registers & quit
                                        ;
   2491 C600 A0 00                                ldy #0                ;register counter
   2492 C602 84 B7                                sty facc              ;initialize register index
                                        ;
   2494 C604 20 CD CA                   .0000010 jsr facasize          ;get parameter size
   2495 C607 D9 F7 CC                             cmp rcvltab,y         ;check against size table
   2496 C60A B0 2A                                bcs .0000050          ;out of range
                                        ;
   2498 C60C B9 F7 CC                             lda rcvltab,y         ;determine number of bytes...
   2499 C60F C9 03                                cmp #s_word+1         ;to store
   2500 C611 66 B8                                ror facc+s_byte       ;condition flag
   2501 C613 10 02                                bpl .0000020          ;8 bit register size
                                        ;
   2503 C615 C2 20                    +            .byte $c2,$20
                                                         ;16 bit register size
                                        ;
   2505 C617 A6 B7                      .0000020 ldx facc              ;get register index
   2506 C619 A5 A9                                lda faca              ;get parm
   2507 C61B 95 8A                                sta reg_pbx,x         ;put in shadow storage
   2508 C61D E2 20                    +            .byte $e2,$20
                                        
   2509 C61F 06 B8                                asl facc+s_byte       ;mode flag to carry
   2510 C621 8A                                   txa                   ;register index
   2511 C622 69 01                                adc #s_byte           ;at least 1 byte stored
   2512 C624 85 B7                                sta facc              ;save new index
   2513 C626 20 E1 CA                             jsr getparm           ;get a parameter
   2514 C629 B0 08                                bcs .0000040          ;EOI
                                        ;
   2516 C62B C8                                   iny                   ;bump register count
   2517 C62C C0 09                                cpy #n_regchv         ;all registers processed?
   2518 C62E D0 D4                                bne .0000010          ;no, keep going
                                        ;
   2520 C630 20 14 C8                   .0000030 jsr alert             ;excessive input
                                        ;
   2522 C633 4C A4 C0                   .0000040 jmp monreg            ;display changes
                                        ;
   2524 C636 4C 88 C1                   .0000050 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monxit: EXIT TO OPERATING ENVIRONMENT
                                        ;
                                        ;	—————————
                                        ;	syntax: X
                                        ;	—————————
                                        ;
   2534 C639 90 19                      monxit   bcc .0000020          ;no parameters allowed
                                        ;
   2536 C63B C2 20                    +            .byte $c2,$20
                                        
   2537 C63D AD 02 01                             lda vecbrki           ;BRK indirect vector
   2538 C640 C9 59                    +            cmp #<monbrk
   2538 C642 C0                       +            .byte >monbrk
                                        ;we intercept it?
   2539 C643 D0 09                                bne .0000010          ;no, don't change it
                                        ;
   2541 C645 AD 05 01                             lda vecbrkia          ;old vector
   2542 C648 8D 02 01                             sta vecbrki           ;restore it
   2543 C64B 9C 05 01                             stz vecbrkia          ;invalidate old vector
                                        ;         
   2545 C64E E2 30                      .0000010 +         .byte $e2,$30
                                        
   2546 C650 5C 03 F4 00                          jml vecexit           ;long jump to exit
                                        ;
   2548 C654 4C 88 C1                   .0000020 jmp monerr            ;goto error handler
                                        ;
                                        ; * * * * * * * * * * * * * * * * * * * * * * * *
                                        ; * * * * * * * * * * * * * * * * * * * * * * * *
                                        ; * *                                         * *
                                        ; * * S T A R T   o f   S U B R O U T I N E S * *
                                        ; * *                                         * *
                                        ; * * * * * * * * * * * * * * * * * * * * * * * *
                                        ; * * * * * * * * * * * * * * * * * * * * * * * *
                                        ;
                                        ;dpycaddr: DISPLAY CURRENT ADDRESS IN COLUMNS
                                        ;
   2560 C657 A6 CE                      dpycaddr ldx xrtemp            ;column count
   2561 C659 D0 05                                bne .0000010          ;not at right side
                                        ;
   2563 C65B 20 08 C8                             jsr newline           ;next row
   2564 C65E A2 08                                ldx #n_hccols         ;max columns
                                        ;
   2566 C660 E0 08                      .0000010 cpx #n_hccols         ;max columns
   2567 C662 F0 05                                beq .0000020          ;at left margin
                                        ;
   2569 C664 A9 09                                lda #a_ht
   2570 C666 20 06 F4                             jsr putcha            ;tab a column
                                        ;
   2572 C669 CA                         .0000020 dex                   ;one less column
   2573 C66A 86 CE                                stx xrtemp            ;save column counter
   2574 C66C 4C D4 C7                             jmp prntladr          ;print reference address
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpycod: DISASSEMBLE & DISPLAY CODE
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	This function disassembles & displays the machine code at  the  location
                                        ;	pointed to by ADDRA.  Upon return, ADDRA will point to the opcode of the
                                        ;	next instruction.   The entry point at DPYCODAA  should be called with a
                                        ;	disassembly prefix character loaded in .A.   If entered  at  DPYCOD, the
                                        ;	default character will be display at the beginning of each  disassembled
                                        ;	instruction.
                                        ;
                                        ;	The disassembly of immediate mode instructions that can take an 8 or  16
                                        ;	bit operand is affected by the bit pattern that is  stored  in  FLIMFLAG
                                        ;	upon entry to this function:
                                        ;
                                        ;	    FLIMFLAG: xx000000
                                        ;	              ||
                                        ;	              |+—————————> 0:  8 bit .X or .Y operand
                                        ;	              |            1: 16 bit .X or .Y operand
                                        ;	              +——————————> 0:  8 bit .A or BIT # operand
                                        ;	                           1: 16 bit .A or BIT # operand
                                        ;
                                        ;	FLIMFLAG is conditioned according to the operand of  the  most  recently
                                        ;	disassembled REP or SEP instruction.   Hence repetitive  calls  to  this
                                        ;	subroutine will usually result in the correct disassembly of 16 bit imm-
                                        ;	ediate mode instructions.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
   2605 C66F A9 2E                       public dpycod   lda #disprfx          ;default prefix
                                        ;
                                        ;
                                        ;	alternate prefix display entry point...
                                        ;
   2610 C671 20 06 F4                   dpycodaa jsr putcha            ;print prefix
   2611 C674 20 18 C8                             jsr printspc          ;space
   2612 C677 20 D4 C7                             jsr prntladr          ;print long address
   2613 C67A 20 18 C8                             jsr printspc          ;space to opcode field
   2614 C67D 20 DB CA                             jsr getbyte           ;get opcode
   2615 C680 85 CC                                sta opcode            ;save &...
   2616 C682 20 0D C8                             jsr printbyt          ;display as hex
                                        ;
                                        ;
                                        ;	decode menmonic & addressing info...
                                        ;
   2621 C685 A6 CC                                ldx opcode            ;current mnemonic
   2622 C687 BD B8 CD                             lda mnetabix,x        ;get mnemonic index
   2623 C68A 0A                                   asl                   ;double for...
   2624 C68B A8                                   tay                   ;mnemonic table offset
   2625 C68C C2 20                    +            .byte $c2,$20
                                                         ;16 bit load
   2626 C68E B9 00 CD                             lda mnetab,y          ;copy encoded mnemonic to...
   2627 C691 85 CA                                sta mnepck            ;working storage
   2628 C693 E2 20                    +            .byte $e2,$20
                                                        ;back to 8 bits
   2629 C695 20 3D CB                             jsr instdata          ;extract mode & size data
   2630 C698 85 D3                                sta vopsflag          ;save mode flags
   2631 C69A 84 C5                                sty admodidx          ;save mode index
   2632 C69C 0A                                   asl                   ;variable immediate instruction?
   2633 C69D 90 1F                                bcc dpycod01          ;no, effective operand size in .X
                                        ;
                                        ;
                                        ;	determine immediate mode operand size...
                                        ;
   2638 C69F A5 CC                                lda opcode            ;current opcode
   2639 C6A1 24 D0                                bit flimflag          ;operand display mode
   2640 C6A3 10 08                                bpl .0000010          ;8 bit .A & BIT immediate mode
                                        ;
   2642 C6A5 29 1F                                and #aimmaska         ;determine if...
   2643 C6A7 C9 09                                cmp #aimmaskb         ;.A or BIT immediate
   2644 C6A9 F0 10                                beq .0000030          ;display 16 bit operand
                                        ;
   2646 C6AB A5 CC                                lda opcode            ;not .A or BIT immediate
                                        ;
   2648 C6AD 50 0F                      .0000010 bvc dpycod01          ;8 bit .X/.Y immediate mode
                                        ;
   2650 C6AF A0 03                                ldy #n_vopidx-1       ;opcodes to test
                                        ;
   2652 C6B1 D9 B8 CF                   .0000020 cmp vopidx,y          ;looking for LDX #, CPY #, etc.
   2653 C6B4 F0 07                                beq .0000040          ;disassemble a 16 bit operand
                                        ;
   2655 C6B6 88                                   dey
   2656 C6B7 10 F8                                bpl .0000020          ;keep trying
                                        ;
   2658 C6B9 80 03                                bra dpycod01          ;not .X or .Y immediate
                                        ;
   2660 C6BB A5 CC                      .0000030 lda opcode            ;reload
                                        ;
   2662 C6BD E8                         .0000040 inx                   ;16 bit operand
                                        ;
                                        ;
                                        ;	get & display operand bytes...
                                        ;
   2667 C6BE 86 D1                      dpycod01 stx iopsize           ;operand size...
   2668 C6C0 E8                                   inx                   ;plus opcode becomes...
   2669 C6C1 86 C8                                stx instsize          ;instruction size
   2670 C6C3 86 C6                                stx charcnt           ;total bytes to process
   2671 C6C5 A9 0B                                lda #n_opcols+2       ;total operand columns plus WS
   2672 C6C7 85 CE                                sta xrtemp            ;initialize counter
   2673 C6C9 20 1C CA                             jsr clroper           ;clear operand
   2674 C6CC A4 D1                                ldy iopsize           ;operand size
   2675 C6CE F0 16                                beq .0000020          ;no operand
                                        ;
   2677 C6D0 A2 00                                ldx #0                ;operand index
                                        ;
   2679 C6D2 20 DB CA                   .0000010 jsr getbyte           ;get operand byte
   2680 C6D5 95 BD                                sta operand,x         ;save
   2681 C6D7 DA                                   phx                   ;protect operand index
   2682 C6D8 20 0D C8                             jsr printbyt          ;print operand byte
   2683 C6DB C6 CE                                dec xrtemp            ;3 columns used, 2 for...
   2684 C6DD C6 CE                                dec xrtemp            ;operand nybbles &...
   2685 C6DF C6 CE                                dec xrtemp            ;1 for whitespace
   2686 C6E1 FA                                   plx                   ;get operand index
   2687 C6E2 E8                                   inx                   ;bump it
   2688 C6E3 88                                   dey
   2689 C6E4 D0 EC                                bne .0000010          ;next
                                        ;
   2691 C6E6 A6 CE                      .0000020 ldx xrtemp            ;operand columns remaining
   2692 C6E8 20 FB C7                             jsr multspc           ;space to mnemonic field
                                        ;
                                        ;
                                        ;	display mnemonic...
                                        ;
   2697 C6EB A0 03                                ldy #s_mnemon         ;size of ASCII mnemonic
                                        ;
   2699 C6ED A9 00                      .0000030 lda #0                ;initialize char
   2700 C6EF A2 05                                ldx #n_shfenc         ;shifts to execute
                                        ;
   2702 C6F1 06 CA                      .0000040 asl mnepck            ;shift encoded mnemonic
   2703 C6F3 26 CB                                rol mnepck+s_byte
   2704 C6F5 2A                                   rol
   2705 C6F6 CA                                   dex
   2706 C6F7 D0 F8                                bne .0000040
                                        ;
   2708 C6F9 69 3F                                adc #a_mnecvt         ;convert to ASCII &...
   2709 C6FB 48                                   pha                   ;stash
   2710 C6FC 88                                   dey
   2711 C6FD D0 EE                                bne .0000030          ;continue with mnemonic
                                        ;
   2713 C6FF A0 03                                ldy #s_mnemon
                                        ;
   2715 C701 68                         .0000050 pla                   ;get mnenmonic byte
   2716 C702 20 06 F4                             jsr putcha            ;print it
   2717 C705 88                                   dey
   2718 C706 D0 F9                                bne .0000050
                                        ;
                                        ;
                                        ;	display operand...
                                        ;
   2723 C708 A5 D1                                lda iopsize           ;operand size
   2724 C70A F0 6F                                beq clearlin          ;zero, disassembly finished
                                        ;
   2726 C70C 20 18 C8                             jsr printspc          ;space to operand field
   2727 C70F 24 D3                                bit vopsflag          ;check mode flags
   2728 C711 50 08                                bvc dpycod02          ;not a branch
                                        ;
   2730 C713 20 53 CB                             jsr offtarg           ;compute branch target
   2731 C716 A6 C8                                ldx instsize          ;effective instruction size
   2732 C718 CA                                   dex
   2733 C719 86 D1                                stx iopsize           ;effective operand size
                                        ;
   2735 C71B 64 D3                      dpycod02 stz vopsflag          ;clear
   2736 C71D A5 C5                                lda admodidx          ;instruction addressing mode
   2737 C71F C9 0B                                cmp #am_move          ;block move instruction?
   2738 C721 D0 02                                bne .0000010          ;no
                                        ;
   2740 C723 66 D3                                ror vopsflag          ;yes
                                        ;
   2742 C725 0A                         .0000010 asl                   ;convert addressing mode to...
   2743 C726 AA                                   tax                   ;symbology table index
   2744 C727 C2 20                    +            .byte $c2,$20
                                                         ;do a 16 bit load
   2745 C729 BD BC CF                             lda ms_lutab,x        ;addressing symbol pointer
   2746 C72C 48                                   pha
   2747 C72D E2 20                    +            .byte $e2,$20
                                                        ;back to 8 bit loads
   2748 C72F A0 00                                ldy #0
   2749 C731 B3 01                    +            .byte $b3,1
                                        ;get 1st char
   2750 C733 C9 20                                cmp #a_blank
   2751 C735 F0 03                                beq .0000020          ;no addresing mode preamble
                                        ;
   2753 C737 20 06 F4                             jsr putcha            ;print preamble
                                        ;
   2755 C73A A9 24                      .0000020 lda #c_hex
   2756 C73C 20 06 F4                             jsr putcha            ;operand displayed as hex
   2757 C73F A4 D1                                ldy iopsize           ;operand size = index
                                        ;
   2759 C741 88                         .0000030 dey
   2760 C742 30 16                                bmi .0000040          ;done with operand
                                        ;
   2762 C744 B9 BD 00                             lda operand,y         ;get operand byte
   2763 C747 20 F1 C7                             jsr dpyhex            ;print operand byte
   2764 C74A 24 D3                                bit vopsflag          ;block move?
   2765 C74C 10 F3                                bpl .0000030          ;no
                                        ;
   2767 C74E 64 D3                                stz vopsflag          ;reset
   2768 C750 5A                                   phy                   ;protect operand index
   2769 C751 F4                       +            .byte $f4
   2769 C752 F5 CF                    +            .word ms_move
                                        
   2770 C754 20 1D C8                             jsr sprint            ;display MVN/MVP operand separator
   2771 C757 7A                                   ply                   ;recover operand index again
   2772 C758 80 E7                                bra .0000030          ;continue
                                        ;
   2774 C75A FA                         .0000040 plx                   ;symbology LSB
   2775 C75B 7A                                   ply                   ;symbology MSB
   2776 C75C E8                                   inx                   ;move past preamble
   2777 C75D D0 01                                bne .0000050
                                        ;
   2779 C75F C8                                   iny
                                        ;
   2781 C760 5A                         .0000050 phy
   2782 C761 DA                                   phx
   2783 C762 20 1D C8                             jsr sprint            ;print postamble, if any
                                        ;
                                        ;
                                        ;	condition immediate mode display format...
                                        ;
   2788 C765 A5 BD                      dpycod03 lda operand           ;operand LSB
   2789 C767 29 30                                and #pfmxmask         ;isolate M & X bits
   2790 C769 0A                                   asl                   ;shift to match...
   2791 C76A 0A                                   asl                   ;FLIMFLAG alignment
   2792 C76B A6 CC                                ldx opcode            ;current instruction
   2793 C76D E0 C2                                cpx #opc_rep          ;was it REP?
   2794 C76F D0 04                                bne .0000010          ;no
                                        ;
   2796 C771 04 D0                                tsb flimflag          ;set flag bits as required
   2797 C773 80 06                                bra clearlin
                                        ;
   2799 C775 E0 E2                      .0000010 cpx #opc_sep          ;was it SEP?
   2800 C777 D0 02                                bne clearlin          ;no, just exit
                                        ;
   2802 C779 14 D0                                trb flimflag          ;clear flag bits as required
                                        ;
                                        ;================================================================================
                                        ;
                                        ;clearlin: CLEAR DISPLAY LINE
                                        ;
   2808 C77B F4                         clearlin +         .byte $f4
   2808 C77C 0D D0                    +            .word dc_cl
                                        
   2809 C77E 80 4B                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpyibuf: DISPLAY MONITOR INPUT BUFFER CONTENTS
                                        ;
   2815 C780 F4                         dpyibuf +         .byte $f4
   2815 C781 00 02                    +            .word ibuffer
                                        
   2816 C783 80 46                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpymem: DISPLAY MEMORY
                                        ;
                                        ;	————————————————————————————————————————————————————————————
                                        ;	This function displays 16 bytes of memory as hex values & as
                                        ;	ASCII equivalents.  The starting address for the display is
                                        ;	in ADDRA & is expected to be a 24 bit address.  Upon return,
                                        ;	ADDRA will point to the start of the next 16 bytes.
                                        ;	————————————————————————————————————————————————————————————
                                        ;
   2829 C785 E2 30                      dpymem +         .byte $e2,$30
                                        
   2830 C787 64 C6                                stz charcnt           ;reset
   2831 C789 A9 3E                                lda #memprfx
   2832 C78B 20 06 F4                             jsr putcha            ;display prefix
   2833 C78E 20 D4 C7                             jsr prntladr          ;print 24 bit address
   2834 C791 A2 00                                ldx #0                ;string buffer index
   2835 C793 A0 08                                ldy #n_dump           ;bytes per line
                                        ;
   2837 C795 20 DB CA                   .0000010 jsr getbyte           ;get from RAM, also...
   2838 C798 48                                   pha                   ;save for decoding
   2839 C799 DA                                   phx                   ;save string index
   2840 C79A 20 0D C8                             jsr printbyt          ;display as hex ASCII
   2841 C79D E6 C6                                inc charcnt           ;bytes displayed +1
   2842 C79F FA                                   plx                   ;recover string index &...
   2843 C7A0 68                                   pla                   ;byte
   2844 C7A1 C9 20                                cmp #a_blank          ;printable?
   2845 C7A3 90 04                                bcc .0000020          ;no
                                        ;
   2847 C7A5 C9 7F                                cmp #a_del
   2848 C7A7 90 02                                bcc .0000030          ;is printable
                                        ;
   2850 C7A9 A9 2E                      .0000020 lda #memsubch         ;substitute character
                                        ;
   2852 C7AB 9D 00 02                   .0000030 sta ibuffer,x         ;save char
   2853 C7AE E8                                   inx                   ;bump index
   2854 C7AF 88                                   dey                   ;byte count -= 1
   2855 C7B0 D0 E3                                bne .0000010          ;not done
                                        ;
   2857 C7B2 9E 00 02                             stz ibuffer,x         ;terminate ASCII string
   2858 C7B5 A9 3A                                lda #memsepch
   2859 C7B7 20 06 F4                             jsr putcha            ;separate ASCII from bytes
   2860 C7BA F4                       +            .byte $f4
   2860 C7BB 03 D0                    +            .word dc_bf
                                        
   2861 C7BD 20 1D C8                             jsr sprint            ;select reverse video
   2862 C7C0 20 80 C7                             jsr dpyibuf           ;display ASCII equivalents
   2863 C7C3 F4                       +            .byte $f4
   2863 C7C4 18 D0                    +            .word dc_er
                                        ;normal video
   2864 C7C6 80 03                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpyerr: DISPLAY ERROR SIGNAL
                                        ;
   2870 C7C8 F4                         dpyerr +         .byte $f4
   2870 C7C9 45 D0                    +            .word mm_err
                                        ;"*ERR"
                                        ;
   2872 C7CB 20 1D C8                   dpyerraa jsr sprint
   2873 C7CE 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;gendbs: GENERATE DESTRUCTIVE BACKSPACE
                                        ;
   2879 C7CF F4                         gendbs +         .byte $f4
   2879 C7D0 09 D0                    +            .word dc_bs
                                        ;destructive backspace
   2880 C7D2 80 F7                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;prntladr: PRINT 24 BIT CURRENT ADDRESS
                                        ;
   2886 C7D4 08                         prntladr php                   ;protect register sizes
   2887 C7D5 E2 20                    +            .byte $e2,$20
                                        
   2888 C7D7 A5 A4                                lda addra+s_word      ;get bank byte &...
   2889 C7D9 20 F1 C7                             jsr dpyhex            ;display it
   2890 C7DC C2 20                    +            .byte $c2,$20
                                        
   2891 C7DE A5 A2                                lda addra             ;get 16 bit address
   2892 C7E0 28                                   plp                   ;restore register sizes
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpyhexw: DISPLAY BINARY WORD AS HEX ASCII
                                        ;
                                        ;	————————————————————————————————————
                                        ;	Preparatory Ops: .C: word to display
                                        ;
                                        ;	Returned Values: .C: used
                                        ;	                 .X: used
                                        ;	                 .Y: entry value
                                        ;	————————————————————————————————————
                                        ;
   2906 C7E1 08                         dpyhexw  php                   ;save register sizes
   2907 C7E2 C2 20                    +            .byte $c2,$20
                                        
   2908 C7E4 48                                   pha                   ;protect value
   2909 C7E5 E2 20                    +            .byte $e2,$20
                                        
   2910 C7E7 EB                       +            .byte $eb
                                                           ;get MSB &...
   2911 C7E8 20 F1 C7                             jsr dpyhex            ;display
   2912 C7EB C2 20                    +            .byte $c2,$20
                                        
   2913 C7ED 68                                   pla                   ;recover value
   2914 C7EE E2 20                    +            .byte $e2,$20
                                                        ;only LSB visible
   2915 C7F0 28                                   plp                   ;reset register sizes
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpyhex: DISPLAY BINARY BYTE AS HEX ASCII
                                        ;
                                        ;	————————————————————————————————————
                                        ;	Preparatory Ops: .A: byte to display
                                        ;
                                        ;	Returned Values: .A: used
                                        ;	                 .X: used
                                        ;	                 .Y: entry value
                                        ;	————————————————————————————————————
                                        ;
   2929 C7F1 20 88 C9                   dpyhex   jsr binhex            ;convert to hex ASCII
   2930 C7F4 20 06 F4                             jsr putcha            ;print MSN
   2931 C7F7 8A                                   txa
   2932 C7F8 4C 06 F4                             jmp putcha            ;print LSN
                                        ;
                                        ;================================================================================
                                        ;
                                        ;multspc: PRINT MULTIPLE BLANKS
                                        ;
                                        ;	————————————————————————————————————————————————
                                        ;	Preparatory Ops : .X: number of blanks to print
                                        ;
                                        ;	Register Returns: none
                                        ;
                                        ;	Calling Example : ldx #3
                                        ;	                  jsr multspc    ;print 3 spaces
                                        ;
                                        ;	Notes: This sub will print 1 blank if .X=0.
                                        ;	————————————————————————————————————————————————
                                        ;
   2949 C7FB 8A                         multspc  txa
   2950 C7FC D0 01                                bne .0000010          ;blank count specified
                                        ;
   2952 C7FE E8                                   inx                   ;default to 1 blank
                                        ;
   2954 C7FF A9 20                      .0000010 lda #a_blank
                                        ;
   2956 C801 20 06 F4                   .0000020 jsr putcha
   2957 C804 CA                                   dex
   2958 C805 D0 FA                                bne .0000020
                                        ;
   2960 C807 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;newline: PRINT NEWLINE (CRLF)
                                        ;
   2966 C808 F4                         newline +         .byte $f4
   2966 C809 1E D0                    +            .word dc_lf
                                        
   2967 C80B 80 BE                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;printbyt: PRINT A BYTE WITH LEADING SPACE
                                        ;
   2973 C80D 48                         printbyt pha                   ;protect byte
   2974 C80E 20 18 C8                             jsr printspc          ;print leading space
   2975 C811 68                                   pla                   ;restore &...
   2976 C812 80 DD                                bra dpyhex            ;print byte
                                        ;         
                                        ;================================================================================
                                        ;
                                        ;alert: ALERT USER w/TERMINAL BELL
                                        ;
   2982 C814 A9 07                      alert    lda #a_bel
   2983 C816 80 02                                bra printcmn
                                        ;
                                        ;================================================================================
                                        ;
                                        ;printspc: PRINT A SPACE
                                        ;
   2989 C818 A9 20                      printspc lda #a_blank
                                        ;
   2991 C81A 4C 06 F4                   printcmn jmp putcha
                                        ;
                                        ;================================================================================
                                        ;
                                        ;sprint: PRINT NULL-TERMINATED CHARACTER STRING
                                        ;
                                        ;	—————————————————————————————————————————————————————————
                                        ;	Preparatory Ops : SP+1: string address LSB
                                        ;	                  SP+2: string address MSB
                                        ;
                                        ;	Register Returns: .A: used
                                        ;	                  .B: entry value
                                        ;	                  .X: used
                                        ;	                  .Y: used
                                        ;
                                        ;	MPU Flags: NVmxDIZC
                                        ;	           ||||||||
                                        ;	           |||||||+———> 0: okay
                                        ;	           |||||||      1: string too long (1)
                                        ;	           ||||+++————> not defined
                                        ;	           |||+———————> 1
                                        ;	           ||+————————> 1
                                        ;	           ++—————————> not defined
                                        ;
                                        ;	Example: PER STRING
                                        ;	         JSR SPRINT
                                        ;	         BCS TOOLONG
                                        ;
                                        ;	Notes: 1) Maximum permissible string length including the
                                        ;	          terminator is 32,767 bytes.
                                        ;	       2) All registers are forced to 8 bits.
                                        ;	       3) DO NOT JUMP OR BRANCH INTO THIS FUNCTION!
                                        ;	—————————————————————————————————————————————————————————
                                        ;
   3025 C81D E2 20                      sprint +         .byte $e2,$20
                                                        ;8 bit accumulator
   3026 C81F C2 10                    +            .byte $c2,$10
                                                         ;16 bit index
                                        ;
                                        ;—————————————————————————————————————————————————————————
   3178 = 0000000000000001                            .reetaddr =1                    ;return address
                                        
   3180 = 00000003                      .src     =.reetaddr+s_word      ;string address stack offset
                                        
                                        ;—————————————————————————————————————————————————————————
                                        ;
   3035 C821 A0 00                    +            ldy #<0
   3035 C823 00                       +            .byte >0
                                        
   3036 C824 18                                   clc                   ;no initial error
                                        ;
   3038 C825 B3 03                      .0000010 +         .byte $b3,.src
                                        ;get a byte
   3039 C827 F0 07                                beq .0000020          ;done
                                        ;
   3041 C829 20 06 F4                             jsr putcha            ;write to console port
   3042 C82C C8                                   iny
   3043 C82D 10 F6                                bpl .0000010          ;next
                                        ;
   3045 C82F 38                                   sec                   ;string too long
                                        ;
   3047 C830 FA                         .0000020 plx                   ;pull RTS address
   3048 C831 7A                                   ply                   ;clear string pointer
   3049 C832 DA                                   phx                   ;replace RTS
   3050 C833 E2 10                    +            .byte $e2,$10
                                        
   3051 C835 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;ascbin: CONVERT NULL-TERMINATED ASCII NUMBER STRING TO BINARY
                                        ;
                                        ;	———————————————————————————————————————————————————
                                        ;	Preparatory Ops: ASCII number string in IBUFFER
                                        ;
                                        ;	Returned Values: FACA: converted parameter
                                        ;	                   .A: used
                                        ;	                   .X: used
                                        ;	                   .Y: used
                                        ;	                   .C: 1 = conversion error
                                        ;	                   .Z: 1 = nothing to convert
                                        ;
                                        ;	Notes: 1) Conversion stops when a non-numeric char-
                                        ;	          acter is encountered.
                                        ;	       2) Radix symbols are as follows:
                                        ;
                                        ;	          % binary
                                        ;	          @ octal
                                        ;	          + decimal
                                        ;	          $ hexadecimal
                                        ;
                                        ;	          Hex is the default if no radix is speci-
                                        ;	          fied in the 1st character of the string.
                                        ;	———————————————————————————————————————————————————
                                        ;
   3080 C836 E2 30                      ascbin +         .byte $e2,$30
                                        
   3081 C838 20 9B C9                             jsr clrfaca           ;clear accumulator
   3082 C83B 64 C6                                stz charcnt           ;zero char count
   3083 C83D 64 C4                                stz radix             ;initialize
                                        ;
                                        ;
                                        ;	process radix if present...
                                        ;
   3088 C83F 20 2E CC                             jsr getcharw          ;get next non-WS char
   3089 C842 D0 02                                bne .0000010          ;got something
                                        ;
   3091 C844 18                                   clc                   ;no more input
   3092 C845 60                                   rts
                                        ;
   3094 C846 A2 03                      .0000010 ldx #n_radix-1        ;number of radices
                                        ;
   3096 C848 DD F3 CC                   .0000020 cmp radxtab,x         ;recognized radix?
   3097 C84B F0 06                                beq .0000030          ;yes
                                        ;
   3099 C84D CA                                   dex
   3100 C84E 10 F8                                bpl .0000020          ;try next
                                        ;
   3102 C850 C6 C1                                dec ibufidx           ;reposition to previous char
   3103 C852 E8                                   inx                   ;not recognized, assume hex
                                        ;
   3105 C853 C9 2B                      .0000030 cmp #c_dec            ;decimal radix?
   3106 C855 D0 02                                bne .0000040          ;not decimal
                                        ;
   3108 C857 66 C4                                ror radix             ;flag decimal conversion
                                        ;
   3110 C859 BD DF CC                   .0000040 lda basetab,x         ;number bases table
   3111 C85C 85 D2                                sta range             ;set valid numeral range
   3112 C85E BD E3 CC                             lda bitsdtab,x        ;get bits per digit
   3113 C861 85 C2                                sta bitsdig           ;store
                                        ;
                                        ;
                                        ;	process numerals...
                                        ;
   3118 C863 20 D0 CB                   ascbin01 jsr getchar           ;get next char
   3119 C866 F0 70                                beq ascbin03          ;EOI
                                        ;
   3121 C868 C9 20                                cmp #' '
   3122 C86A F0 6C                                beq ascbin03          ;blank — EOF
                                        ;
   3124 C86C C9 2C                                cmp #','
   3125 C86E F0 68                                beq ascbin03          ;comma — EOF
                                        ;
   3127 C870 C9 09                                cmp #a_ht
   3128 C872 F0 64                                beq ascbin03          ;tab — EOF
                                        ;
   3130 C874 20 F5 C9                             jsr nybtobin          ;change to binary
   3131 C877 B0 60                                bcs ascbin04          ;not a recognized numeral
                                        ;
   3133 C879 C5 D2                                cmp range             ;check range
   3134 C87B B0 5C                                bcs ascbin04          ;not valid for base
                                        ;
   3136 C87D 85 C3                                sta numeral           ;save processed numeral
   3137 C87F E6 C6                                inc charcnt           ;bump numeral count
   3138 C881 24 C4                                bit radix             ;working in base 10?
   3139 C883 10 15                                bpl .0000030          ;no
                                        ;
                                        ;
                                        ;	compute N*2 for decimal conversion...
                                        ;
   3144 C885 A2 00                                ldx #0                ;accumulator index
   3145 C887 A0 02                                ldy #s_pfac/2         ;iterations
   3146 C889 C2 20                    +            .byte $c2,$20
                                        
   3147 C88B 18                                   clc
                                        ;
   3149 C88C B5 A9                      .0000020 lda faca,x            ;N
   3150 C88E 2A                                   rol                   ;N=N*2
   3151 C88F 95 B1                                sta facb,x
   3152 C891 E8                                   inx
   3153 C892 E8                                   inx
   3154 C893 88                                   dey
   3155 C894 D0 F6                                bne .0000020
                                        ;
   3157 C896 B0 41                                bcs ascbin04          ;overflow — error
                                        ;
   3159 C898 E2 20                    +            .byte $e2,$20
                                        
                                        ;
                                        ;
                                        ;	compute N*base for binary, octal or hex...
                                        ;	or N*8 for decimal...
                                        ;
   3165 C89A A6 C2                      .0000030 ldx bitsdig           ;bits per digit
   3166 C89C C2 20                    +            .byte $c2,$20
                                                         ;16 bit shifts
                                        ;
   3168 C89E 06 A9                      .0000040 asl faca
   3169 C8A0 26 AB                                rol faca+s_word
   3170 C8A2 B0 35                                bcs ascbin04          ;overflow — error
                                        ;
   3172 C8A4 CA                                   dex
   3173 C8A5 D0 F7                                bne .0000040          ;next shift
                                        ;
   3175 C8A7 E2 20                    +            .byte $e2,$20
                                                        ;back to 8 bits
   3176 C8A9 24 C4                                bit radix             ;check base
   3177 C8AB 10 13                                bpl ascbin02          ;not decimal
                                        ;
                                        ;
                                        ;	compute N*10 for decimal (N*8 + N*2)...
                                        ;
   3182 C8AD A0 04                                ldy #s_pfac
   3183 C8AF C2 20                    +            .byte $c2,$20
                                        
                                        ;
   3185 C8B1 B5 A9                      .0000050 lda faca,x            ;N*8
   3186 C8B3 75 B1                                adc facb,x            ;N*2
   3187 C8B5 95 A9                                sta faca,x            ;now N*10
   3188 C8B7 E8                                   inx
   3189 C8B8 E8                                   inx
   3190 C8B9 88                                   dey
   3191 C8BA D0 F5                                bne .0000050
                                        ;
   3193 C8BC B0 1B                                bcs ascbin04          ;overflow — error
                                        ;
   3195 C8BE E2 20                    +            .byte $e2,$20
                                        
                                        ;
                                        ;
                                        ;	add current numeral to partial result...
                                        ;
   3200 C8C0 A5 A9                      ascbin02 lda faca              ;N
   3201 C8C2 65 C3                                adc numeral           ;N=N+D
   3202 C8C4 85 A9                                sta faca
   3203 C8C6 A2 01                                ldx #1
   3204 C8C8 A0 03                                ldy #s_pfac-1
                                        ;
   3206 C8CA B5 A9                      .0000010 lda faca,x
   3207 C8CC 69 00                                adc #0                ;account for carry
   3208 C8CE 95 A9                                sta faca,x
   3209 C8D0 E8                                   inx
   3210 C8D1 88                                   dey
   3211 C8D2 D0 F6                                bne .0000010
                                        ;
   3213 C8D4 90 8D                                bcc ascbin01          ;next if no overflow
                                        ;
   3215 C8D6 B0 01                                bcs ascbin04          ;overflow — error
                                        ;
                                        ;
                                        ;	finish up...
                                        ;
   3220 C8D8 18                         ascbin03 clc                   ;no error
                                        ;
   3222 C8D9 E2 20                      ascbin04 +         .byte $e2,$20
                                                        ;reset if necessary
   3223 C8DB A5 C6                                lda charcnt           ;load char count
   3224 C8DD 60                                   rts                   ;done
                                        ;
                                        ;================================================================================
                                        ;
                                        ;bcdasc: CONVERT BCD DIGIT TO ASCII
                                        ;
                                        ;	———————————————————————————————————————
                                        ;	Preparatory Ops: .A: BCD digit, $00-$99
                                        ;
                                        ;	Returned Values: .A: ASCII MSD
                                        ;	                 .X: ASCII LSD
                                        ;	                 .Y: entry value
                                        ;	———————————————————————————————————————
                                        ;
   3238 C8DE 20 EA C8                   bcdasc   jsr bintonyb          ;extract nybbles
   3239 C8E1 48                                   pha                   ;save tens
   3240 C8E2 8A                                   txa                 
   3241 C8E3 09 30                                ora #btoamask         ;change units to ASCII
   3242 C8E5 AA                                   tax                   ;store
   3243 C8E6 68                                   pla                   ;get tens
   3244 C8E7 09 30                                ora #btoamask         ;change to ASCII
   3245 C8E9 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;bintonyb: EXTRACT BINARY NYBBLES
                                        ;
                                        ;	—————————————————————————————————
                                        ;	Preparatory Ops: .A: binary value
                                        ;
                                        ;	Returned Values: .A: MSN
                                        ;	                 .X: LSN
                                        ;	                 .Y: entry value
                                        ;	—————————————————————————————————
                                        ;
   3259 C8EA 48                         bintonyb pha                   ;save
   3260 C8EB 29 0F                                and #bcdumask         ;extract LSN
   3261 C8ED AA                                   tax                   ;save it
   3262 C8EE 68                                   pla
                                        ;         .rept s_bnybbl        ;extract MSN
   3264 C8EF 4A                                     lsr
   3265 C8F0 4A                                     lsr
   3266 C8F1 4A                                     lsr
   3267 C8F2 4A                                     lsr
                                        ;         .endr
   3269 C8F3 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;binasc: CONVERT 32-BIT BINARY TO NULL-TERMINATED ASCII NUMBER STRING
                                        ;
                                        ;	——————————————————————————————————————————————————————
                                        ;	Preparatory Ops: FACA: 32-bit operand
                                        ;	                   .A: radix character, w/bit 7 set to
                                        ;	                       suppress radix symbol in the
                                        ;	                       conversion string
                                        ;
                                        ;	Returned Values: ibuffer: conversion string
                                        ;	                      .A: string length
                                        ;	                      .X: string address LSB
                                        ;	                      .Y: string address MSB
                                        ;
                                        ;	Execution Notes: ibufidx & instsize are overwritten.
                                        ;	——————————————————————————————————————————————————————
                                        ;
   3289 C8F4 64 C1                      binasc   stz ibufidx           ;initialize string index
   3290 C8F6 64 C8                                stz instsize          ;clear format flag
                                        ;
                                        ;
                                        ;	evaluate radix...
                                        ;
   3295 C8F8 0A                                   asl                   ;extract format flag &...
   3296 C8F9 66 C8                                ror instsize          ;save it
   3297 C8FB 4A                                   lsr                   ;extract radix character
   3298 C8FC A2 03                                ldx #n_radix-1        ;total radices
                                        ;
   3300 C8FE DD F3 CC                   .0000010 cmp radxtab,x         ;recognized radix?
   3301 C901 F0 04                                beq .0000020          ;yes
                                        ;
   3303 C903 CA                                   dex
   3304 C904 10 F8                                bpl .0000010          ;try next
                                        ;
   3306 C906 E8                                   inx                   ;assume hex
                                        ;
   3308 C907 86 C4                      .0000020 stx radix             ;save radix index for later
   3309 C909 24 C8                                bit instsize
   3310 C90B 30 08                                bmi .0000030          ;no radix symbol wanted
                                        ;
   3312 C90D BD F3 CC                             lda radxtab,x         ;radix table
   3313 C910 8D 00 02                             sta ibuffer           ;prepend to string
   3314 C913 E6 C1                                inc ibufidx           ;bump string index
                                        ;
   3316 C915 C9 2B                      .0000030 cmp #c_dec            ;converting to decimal?
   3317 C917 D0 07                                bne .0000040          ;no
                                        ;
   3319 C919 20 AD C9                             jsr facabcd           ;convert operand to BCD
   3320 C91C A9 00                                lda #0
   3321 C91E 80 17                                bra .0000070          ;skip binary stuff
                                        ;
                                        ;
                                        ;	prepare for binary, octal or hex conversion...
                                        ;
   3326 C920 A2 00                      .0000040 ldx #0                ;operand index
   3327 C922 A0 05                                ldy #s_sfac-1         ;workspace index
                                        ;
   3329 C924 B5 A9                      .0000050 lda faca,x            ;copy operand to...
   3330 C926 99 B1 00                             sta facb,y            ;workspace in...
   3331 C929 88                                   dey                   ;big-endian order
   3332 C92A E8                                   inx
   3333 C92B E0 04                                cpx #s_pfac
   3334 C92D D0 F5                                bne .0000050
                                        ;
   3336 C92F A9 00                                lda #0
   3337 C931 BB                       +            .byte $bb
                                        
                                        ;
   3339 C932 95 B1                      .0000060 sta facb,x            ;pad workspace
   3340 C934 CA                                   dex
   3341 C935 10 FB                                bpl .0000060
                                        ;
                                        ;
                                        ;	set up conversion parameters...
                                        ;
   3346 C937 85 B7                      .0000070 sta facc              ;initialize byte counter
   3347 C939 A4 C4                                ldy radix             ;radix index
   3348 C93B B9 EF CC                             lda numstab,y         ;numerals in string
   3349 C93E 85 B8                                sta facc+s_byte       ;set remaining numeral count
   3350 C940 B9 E7 CC                             lda bitsntab,y        ;bits per numeral
   3351 C943 85 B9                                sta facc+s_word       ;set
   3352 C945 B9 EB CC                             lda lzsttab,y         ;leading zero threshold
   3353 C948 85 BA                                sta facc+s_xword      ;set
                                        ;
                                        ;
                                        ;	generate conversion string...
                                        ;
   3358 C94A A9 00                      .0000080 lda #0
   3359 C94C A4 B9                                ldy facc+s_word       ;bits per numeral
                                        ;
   3361 C94E A2 05                      .0000090 ldx #s_sfac-1         ;workspace size
   3362 C950 18                                   clc                   ;avoid starting carry
                                        ;
   3364 C951 36 B1                      .0000100 rol facb,x            ;shift out a bit...
   3365 C953 CA                                   dex                   ;from the operand or...
   3366 C954 10 FB                                bpl .0000100          ;BCD conversion result
                                        ;
   3368 C956 2A                                   rol                   ;bit to .A
   3369 C957 88                                   dey
   3370 C958 D0 F4                                bne .0000090          ;more bits to grab
                                        ;
   3372 C95A A8                                   tay                   ;if numeral isn't zero...
   3373 C95B D0 0A                                bne .0000110          ;skip leading zero tests
                                        ;
   3375 C95D A6 B8                                ldx facc+s_byte       ;remaining numerals
   3376 C95F E4 BA                                cpx facc+s_xword      ;leading zero threshold
   3377 C961 90 04                                bcc .0000110          ;below it, must convert
                                        ;
   3379 C963 A6 B7                                ldx facc              ;processed byte count
   3380 C965 F0 11                                beq .0000130          ;discard leading zero
                                        ;
   3382 C967 C9 0A                      .0000110 cmp #10               ;check range
   3383 C969 90 02                                bcc .0000120          ;is 0-9
                                        ;
   3385 C96B 69 06                                adc #a_hexdec         ;apply hex adjust
                                        ;
   3387 C96D 69 30                      .0000120 adc #'0'              ;change to ASCII
   3388 C96F A4 C1                                ldy ibufidx           ;string index
   3389 C971 99 00 02                             sta ibuffer,y         ;save numeral in buffer
   3390 C974 E6 C1                                inc ibufidx           ;next buffer position
   3391 C976 E6 B7                                inc facc              ;bytes=bytes+1
                                        ;
   3393 C978 C6 B8                      .0000130 dec facc+s_byte       ;numerals=numerals-1
   3394 C97A D0 CE                                bne .0000080          ;not done
                                        ;
                                        ;
                                        ;	terminate string & exit...
                                        ;
   3399 C97C A6 C1                                ldx ibufidx           ;printable string length
   3400 C97E 9E 00 02                             stz ibuffer,x         ;terminate string
   3401 C981 8A                                   txa
   3402 C982 A2 00                                ldx #<ibuffer         ;converted string
   3403 C984 A0 02                                ldy #>ibuffer
   3404 C986 18                                   clc                   ;all okay
   3405 C987 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;binhex: CONVERT BINARY BYTE TO HEX ASCII CHARS
                                        ;
                                        ;	————————————————————————————————————————————
                                        ;	Preparatory Ops: .A: byte to convert
                                        ;
                                        ;	Returned Values: .A: MSN ASCII char
                                        ;	                 .X: LSN ASCII char
                                        ;	                 .Y: entry value
                                        ;	————————————————————————————————————————————
                                        ;
   3419 C988 20 EA C8                   binhex   jsr bintonyb          ;generate binary values
   3420 C98B 48                                   pha                   ;save MSN
   3421 C98C 8A                                   txa
   3422 C98D 20 92 C9                             jsr .0000010          ;generate ASCII LSN
   3423 C990 AA                                   tax                   ;save
   3424 C991 68                                   pla                   ;get input
                                        ;
                                        ;
                                        ;	convert nybble to hex ASCII equivalent...
                                        ;
   3429 C992 C9 0A                      .0000010 cmp #10
   3430 C994 90 02                                bcc .0000020          ;in decimal range
                                        ;
   3432 C996 69 66                                adc #k_hex            ;hex compensate
                                        ;         
   3434 C998 49 30                      .0000020 eor #'0'              ;finalize nybble
   3435 C99A 60                                   rts                   ;done
                                        ;
                                        ;================================================================================
                                        ;
                                        ;clrfaca: CLEAR FLOATING ACCUMULATOR A
                                        ;
   3441 C99B 08                         clrfaca  php
   3442 C99C C2 20                    +            .byte $c2,$20
                                        
   3443 C99E 64 A9                                stz faca
   3444 C9A0 64 AB                                stz faca+s_word
   3445 C9A2 28                                   plp
   3446 C9A3 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;clrfacb: CLEAR FLOATING ACCUMULATOR B
                                        ;
   3452 C9A4 08                         clrfacb  php
   3453 C9A5 C2 20                    +            .byte $c2,$20
                                        
   3454 C9A7 64 B1                                stz facb
   3455 C9A9 64 B3                                stz facb+s_word
   3456 C9AB 28                                   plp
   3457 C9AC 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facabcd: CONVERT FACA INTO BCD
                                        ;
   3463 C9AD A2 03                      facabcd  ldx #s_pfac-1         ;primary accumulator size -1
                                        ;
   3465 C9AF B5 A9                      .0000010 lda faca,x            ;value to be converted
   3466 C9B1 48                                   pha                   ;preserve
   3467 C9B2 CA                                   dex
   3468 C9B3 10 FA                                bpl .0000010          ;next
                                        ;
   3470 C9B5 A2 05                                ldx #s_sfac-1         ;workspace size
                                        ;
   3472 C9B7 74 B1                      .0000020 stz facb,x            ;clear final result
   3473 C9B9 74 B7                                stz facc,x            ;clear scratchpad
   3474 C9BB CA                                   dex
   3475 C9BC 10 F9                                bpl .0000020
                                        ;
   3477 C9BE E6 BC                                inc facc+s_sfac-s_byte
   3478 C9C0 F8                                   sed                   ;select decimal mode
   3479 C9C1 A0 1F                                ldy #m_bits-1         ;bits to convert -1
                                        ;
   3481 C9C3 A2 03                      .0000030 ldx #s_pfac-1         ;operand size
   3482 C9C5 18                                   clc                   ;no carry at start
                                        ;
   3484 C9C6 76 A9                      .0000040 ror faca,x            ;grab LS bit in operand
   3485 C9C8 CA                                   dex
   3486 C9C9 10 FB                                bpl .0000040
                                        ;
   3488 C9CB 90 0D                                bcc .0000060          ;LS bit clear
                                        ;
   3490 C9CD 18                                   clc
   3491 C9CE A2 05                                ldx #s_sfac-1
                                        ;
   3493 C9D0 B5 B1                      .0000050 lda facb,x            ;partial result
   3494 C9D2 75 B7                                adc facc,x            ;scratchpad
   3495 C9D4 95 B1                                sta facb,x            ;new partial result
   3496 C9D6 CA                                   dex
   3497 C9D7 10 F7                                bpl .0000050
                                        ;
   3499 C9D9 18                                   clc
                                        ;
   3501 C9DA A2 05                      .0000060 ldx #s_sfac-1
                                        ;
   3503 C9DC B5 B7                      .0000070 lda facc,x            ;scratchpad
   3504 C9DE 75 B7                                adc facc,x            ;double &...
   3505 C9E0 95 B7                                sta facc,x            ;save
   3506 C9E2 CA                                   dex
   3507 C9E3 10 F7                                bpl .0000070
                                        ;
   3509 C9E5 88                                   dey
   3510 C9E6 10 DB                                bpl .0000030          ;next operand bit
                                        ;
   3512 C9E8 D8                                   cld
   3513 C9E9 A2 00                                ldx #0
   3514 C9EB A0 04                                ldy #s_pfac
                                        ;
   3516 C9ED 68                         .0000080 pla                   ;operand
   3517 C9EE 95 A9                                sta faca,x            ;restore
   3518 C9F0 E8                                   inx
   3519 C9F1 88                                   dey
   3520 C9F2 D0 F9                                bne .0000080          ;next
                                        ;
   3522 C9F4 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;nybtobin: CONVERT ASCII NYBBLE TO BINARY
                                        ;
   3528 C9F5 20 A0 CC                   nybtobin jsr toupper           ;convert case if necessary
   3529 C9F8 38                                   sec
   3530 C9F9 E9 30                                sbc #'0'              ;change to binary
   3531 C9FB 90 08                                bcc .0000020          ;not a numeral — error
                                        ;
   3533 C9FD C9 0A                                cmp #10
   3534 C9FF 90 03                                bcc .0000010          ;numeral is 0-9
                                        ;
   3536 CA01 E9 07                                sbc #a_hexdec+1       ;10-15 ——> A-F
   3537 CA03 18                                   clc                   ;no conversion error
                                        ;
   3539 CA04 60                         .0000010 rts
                                        ;
   3541 CA05 38                         .0000020 sec                   ;conversion error
   3542 CA06 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;calccnt: COMPUTE BYTE COUNT FROM ADDRESS RANGE
                                        ;
   3548 CA07 20 A4 C9                   calccnt  jsr clrfacb           ;clear accumulator
   3549 CA0A C2 20                    +            .byte $c2,$20
                                        
   3550 CA0C 38                                   sec
   3551 CA0D A5 A6                                lda addrb             ;ending address
   3552 CA0F E5 A2                                sbc addra             ;starting address
   3553 CA11 85 B1                                sta facb              ;byte count
   3554 CA13 E2 20                    +            .byte $e2,$20
                                        
   3555 CA15 A5 A8                                lda addrb+s_word      ;handle banks
   3556 CA17 E5 A4                                sbc addra+s_word
   3557 CA19 85 B3                                sta facb+s_word
   3558 CA1B 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;clroper: CLEAR OPERAND
                                        ;
   3564 CA1C DA                         clroper  phx
   3565 CA1D A2 02                                ldx #s_oper-1
                                        ;
   3567 CA1F 74 BD                      .0000010 stz operand,x
   3568 CA21 CA                                   dex
   3569 CA22 10 FB                                bpl .0000010
                                        ;
   3571 CA24 64 CF                                stz eopsize
   3572 CA26 FA                                   plx
   3573 CA27 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;cpfwsup: FOWARD COPY MEMORY SETUP
                                        ;
   3579 CA28 C2 30                      cpfwsup +         .byte $c2,$30
                                        
   3580 CA2A A2 54                    +            ldx #<opc_mvn
   3580 CA2C 00                       +            .byte >opc_mvn
                                        ;"move next" opcode
   3581 CA2D 80 05                                bra cpsup
                                        ;         
                                        ;================================================================================
                                        ;
                                        ;cprvsup: REVERSE COPY MEMORY SETUP
                                        ;
   3587 CA2F C2 30                      cprvsup +         .byte $c2,$30
                                        
   3588 CA31 A2 44                    +            ldx #<opc_mvp
   3588 CA33 00                       +            .byte >opc_mvp
                                        ;"move previous" opcode
                                        ;         
                                        ;================================================================================
                                        ;
                                        ;cpsup: COPY MEMORY SETUP
                                        ;
   3594 CA34 48                         cpsup    pha                   ;save banks
   3595 CA35 8A                                   txa                   ;protect...
   3596 CA36 EB                       +            .byte $eb
                                                           ;opcode
   3597 CA37 E2 20                    +            .byte $e2,$20
                                        
   3598 CA39 A2 08                    +            ldx #<(cpcodeee-cpcode-1)
   3598 CA3B 00                       +            .byte >(cpcodeee-cpcode-1)
                                        
                                        ;
   3600 CA3C BF                         .0000010 +         .byte $bf
   3600 CA3D 5C CA 00                 +   +         .byte <cpcode,>cpcode,cpcode >> 16
                                     +   
                                        ;transfer copy code to...
   3601 CA40 95 D4                                sta mcftwork,x        ;to workspace
   3602 CA42 CA                                   dex
   3603 CA43 10 F7                                bpl .0000010
                                        ;
   3605 CA45 EB                       +            .byte $eb
                                                           ;recover opcode &...
   3606 CA46 85 D5                                sta mcftopc           ;set it
   3607 CA48 C2 20                    +            .byte $c2,$20
                                        
   3608 CA4A 68                                   pla                   ;get banks &...
   3609 CA4B 85 D6                                sta mcftbnk           ;set them
                                         
                                        ; We just dynamically created a routine, so the cache (if one is present) has
                                        ; to be invalidated. Otherwise the processor could execute dead code from the
                                        ; cache. Two lines are invalidated in case the code crosses a line boundary.
                                        ;
                                        ;	acc = 16 bit address to invalidate
                                        ;
                                        ; If there is no cache in the processor then these lines can be deleted.
                                        ;-------------------------------------------------------------------------------
                                           		 CPU	FT832
                                           		 MEM	16
   3621 00CA4D 48                                    pha
   3622 00CA4E A9 D4 00                              lda	#mcftwork
   3623 00CA51 42 E0 01                     		 cache	#1				; 1= invalidate line identified by address in acc
   3624 00CA54 A9 E4 00                              lda	#mcftwork+16
   3625 00CA57 42 E0 01                     		 cache	#1
   3626 00CA5A 68                                    pla
                                        		 CPU	W65C02
   3628 CA5B                            		 MEM	8
                                        ;---------------------------------------------
   3630 CA5B 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;cpcode: COPY MEMORY CODE
                                        ;
                                        ;	———————————————————————————————————————————
                                        ;	This code is transfered to workspace when a
                                        ;	copy or fill operation is to be performed.
                                        ;	———————————————————————————————————————————
                                        ;
   3641 CA5C 8B                         cpcode +         .byte $8b
                                                           ;must preserve data bank
                                        ;         .rept s_mvinst
   3643 CA5D EA                                     nop                 ;placeholder
   3644 CA5E EA                                     nop
   3645 CA5F EA                                     nop
                                        ;         .endr
   3647 CA60 AB                       +            .byte $ab
                                                           ;restore data bank
   3648 CA61 5C 49 C1 00                          jml monce             ;return to command executive
   3832 = 0000CA65                      cpcodeee =*                    ;placeholder — do not delete
                                        ;
                                        ;================================================================================
                                        ;
                                        ;decdcnt: DECREMENT DUMP COUNT
                                        ;
                                        ;	———————————————————————————————————————————
                                        ;	Preparatory Ops: bytes to process in FACB
                                        ;	                 bytes processed in CHARCNT
                                        ;
                                        ;	Returned Values: .A: used
                                        ;	                 .X: entry value
                                        ;	                 .Y: entry value
                                        ;	                 .C: 1 = count = zero
                                        ;	———————————————————————————————————————————
                                        ;
   3665 CA65 E2 20                      decdcnt +         .byte $e2,$20
                                        
   3666 CA67 A9 00                                lda #0
   3667 CA69 EB                       +            .byte $eb
                                                           ;clear .B
   3668 CA6A A5 B3                                lda facb+s_word       ;count MSW
   3669 CA6C C2 20                    +            .byte $c2,$20
                                        
   3670 CA6E 38                                   sec
   3671 CA6F 05 B1                                ora facb              ;count LSW
   3672 CA71 F0 13                                beq .0000020          ;zero, just exit
                                        ;
   3674 CA73 A5 B1                                lda facb
   3675 CA75 E5 C6                                sbc charcnt           ;bytes processed
   3676 CA77 85 B1                                sta facb
   3677 CA79 E2 20                    +            .byte $e2,$20
                                        
   3678 CA7B A5 B3                                lda facb+s_word
   3679 CA7D E9 00                                sbc #0                ;handle borrow
   3680 CA7F 90 04                                bcc .0000010          ;underflow
                                        ;
   3682 CA81 85 B3                                sta facb+s_word
   3683 CA83 18                                   clc                   ;count > 0
   3684 CA84 60                                   rts
                                        ;
   3686 CA85 38                         .0000010 sec
                                        ;
   3688 CA86 E2 20                      .0000020 +         .byte $e2,$20
                                        
   3689 CA88 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;enddest: GET 2ND & 3RD ADDRESSES FOR COMPARE & TRANSFER
                                        ;
   3695 CA89 20 CD CA                   enddest  jsr facasize          ;check start...
   3696 CA8C C9 04                                cmp #s_dword          ;for range
   3697 CA8E B0 1E                                bcs .0000010          ;out of range — error
                                        ;
   3699 CA90 20 AF CA                             jsr facaddra          ;store start
   3700 CA93 20 E1 CA                             jsr getparm           ;get end
   3701 CA96 B0 16                                bcs .0000010          ;not entered — error
                                        ;
   3703 CA98 20 CD CA                             jsr facasize          ;check end...
   3704 CA9B C9 04                                cmp #s_dword          ;for range
   3705 CA9D B0 0F                                bcs .0000010          ;out of range — error
                                        ;
   3707 CA9F 20 B9 CA                             jsr facaddrb          ;store end
   3708 CAA2 20 E1 CA                             jsr getparm           ;get destination
   3709 CAA5 B0 07                                bcs .0000010          ;not entered — error
                                        ;
   3711 CAA7 20 CD CA                             jsr facasize          ;check destination...
   3712 CAAA C9 04                                cmp #s_dword          ;for range
   3713 CAAC 90 15                                bcc facaoper          ;store dest address
                                        ;
   3715 CAAE 60                         .0000010 rts                   ;exit w/error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facaddra: COPY FACA TO ADDRA
                                        ;
   3721 CAAF A2 02                      facaddra ldx #s_xword-1
                                        ;
   3723 CAB1 B5 A9                      .0000010 lda faca,x
   3724 CAB3 95 A2                                sta addra,x
   3725 CAB5 CA                                   dex
   3726 CAB6 10 F9                                bpl .0000010
                                        ;
   3728 CAB8 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facaddrb: COPY FACA TO ADDRB
                                        ;
   3734 CAB9 A2 02                      facaddrb ldx #s_xword-1
                                        ;
   3736 CABB B5 A9                      .0000010 lda faca,x
   3737 CABD 95 A6                                sta addrb,x
   3738 CABF CA                                   dex
   3739 CAC0 10 F9                                bpl .0000010
                                        ;
   3741 CAC2 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facaoper: COPY FACA TO OPERAND
                                        ;
   3747 CAC3 A2 02                      facaoper ldx #s_oper-1
                                        ;
   3749 CAC5 B5 A9                      .0000010 lda faca,x
   3750 CAC7 95 BD                                sta operand,x
   3751 CAC9 CA                                   dex
   3752 CACA 10 F9                                bpl .0000010
                                        ;
   3754 CACC 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facasize: REPORT OPERAND SIZE IN FACA
                                        ;
                                        ;	——————————————————————————————————————————
                                        ;	Preparatory Ops: operand in FACA
                                        ;
                                        ;	Returned Values: .A: s_byte  (1)
                                        ;	                     s_word  (2)
                                        ;	                     s_xword (3)
                                        ;	                     s_dword (4)
                                        ;
                                        ;	Notes: 1) This function will always report
                                        ;	          a non-zero result.
                                        ;	——————————————————————————————————————————
                                        ;
   3772 CACD E2 30                      facasize +         .byte $e2,$30
                                        
   3773 CACF A2 03                                ldx #s_dword-1
                                        ;
   3775 CAD1 B5 A9                      .0000010 lda faca,x            ;get byte
   3776 CAD3 D0 03                                bne .0000020          ;done
                                        ;
   3778 CAD5 CA                                   dex
   3779 CAD6 D0 F9                                bne .0000010          ;next byte
                                        ;
   3781 CAD8 E8                         .0000020 inx                   ;count=index+1
   3782 CAD9 8A                                   txa
   3783 CADA 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getbyte: GET A BYTE FROM MEMORY
                                        ;
   3789 CADB A7 A2                      getbyte +         .byte $a7,addra
                                        ;get a byte
   3790 CADD 80 3F                                bra incaddra          ;bump address
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getparm: GET A PARAMETER
                                        ;
                                        ;	—————————————————————————————————————————————————
                                        ;	Preparatory Ops: null-terminated input in IBUFFER
                                        ;
                                        ;	Returned Values: .A: chars in converted parameter
                                        ;	                 .X: used
                                        ;	                 .Y: entry value
                                        ;	                 .C: 1 = no parameter entered
                                        ;	—————————————————————————————————————————————————
                                        ;
   3805 CADF C6 C1                      getparmr dec ibufidx           ;reread previous char
                                        ;
   3807 CAE1 5A                         getparm  phy                   ;preserve
   3808 CAE2 20 36 C8                             jsr ascbin            ;convert parameter to binary
   3809 CAE5 B0 1C                                bcs .0000040          ;conversion error
                                        ;
   3811 CAE7 20 CE CB                             jsr getcharr          ;reread last char
   3812 CAEA D0 08                                bne .0000010          ;not end-of-input
                                        ;
   3814 CAEC C6 C1                                dec ibufidx           ;reindex to terminator
   3815 CAEE A5 C6                                lda charcnt           ;get chars processed so far
   3816 CAF0 F0 0C                                beq .0000030          ;none
                                        ;
   3818 CAF2 D0 08                                bne .0000020          ;some
                                        ;
   3820 CAF4 C9 20                      .0000010 cmp #a_blank          ;recognized delimiter
   3821 CAF6 F0 04                                beq .0000020          ;end of parameter
                                        ;
   3823 CAF8 C9 2C                                cmp #','              ;recognized delimiter
   3824 CAFA D0 07                                bne .0000040          ;unknown delimter
                                        ;
   3826 CAFC 18                         .0000020 clc
   3827 CAFD 24                                   .byte bitzp           ;skip SEC below
                                        ;
   3829 CAFE 38                         .0000030 sec
   3830 CAFF 7A                                   ply                   ;restore
   3831 CB00 A5 C6                                lda charcnt           ;get count
   3832 CB02 60                                   rts                   ;done
                                        ;
   3834 CB03                            .0000040 
                                        ;.rept 3               ;clean up stack
   3836 CB03 68                          			pla
   3837 CB04 68                          			pla
   3838 CB05 68                                     pla
                                        ;        .endr
   3840 CB06 4C 88 C1                             jmp monerr            ;abort w/error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;nxtaddra: TEST & INCREMENT WORKING ADDRESS 'A'
                                        ;
                                        ;	——————————————————————————————————————————————————
                                        ;	Calling syntax: JSR NXTADDRA
                                        ;
                                        ;	Exit registers: .A: used
                                        ;	                .B: used
                                        ;	                .X: entry value
                                        ;	                .Y: entry value
                                        ;	                DB: entry value
                                        ;	                DP: entry value
                                        ;	                PB: entry value
                                        ;	                SR: NVmxDIZC
                                        ;	                    ||||||||
                                        ;	                    |||||||+———> 0: ADDRA < ADDRB
                                        ;	                    |||||||      1: ADDRA >= ADDRB
                                        ;	                    ||||||+————> undefined
                                        ;	                    |||+++—————> entry value
                                        ;	                    ||+————————> 1
                                        ;	                    ++—————————> undefined
                                        ;	——————————————————————————————————————————————————
                                        ;
   3866 CB09 E2 20                      nxtaddra +         .byte $e2,$20
                                        
   3867 CB0B A5 A4                                lda addra+s_word      ;bits 16-23
   3868 CB0D C5 A8                                cmp addrb+s_word
   3869 CB0F 90 0D                                bcc incaddra          ;increment
                                        ;
   3871 CB11 D0 0A                                bne .0000010          ;don't increment
                                        ;
   3873 CB13 C2 20                    +            .byte $c2,$20
                                        
   3874 CB15 A5 A2                                lda addra             ;bits 0-15
   3875 CB17 C5 A6                                cmp addrb             ;condition flags
   3876 CB19 E2 20                    +            .byte $e2,$20
                                        
   3877 CB1B 90 01                                bcc incaddra          ;increment
                                        ;
   3879 CB1D 60                         .0000010 rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;incaddra: INCREMENT WORKING ADDRESS 'A'
                                        ;
                                        ;	——————————————————————————————————————————————————
                                        ;	Calling syntax: JSR INCADDRA
                                        ;
                                        ;	Exit registers: .A: entry value
                                        ;	                .B: entry value
                                        ;	                .X: entry value
                                        ;	                .Y: entry value
                                        ;	                DB: entry value
                                        ;	                DP: entry value
                                        ;	                PB: entry value
                                        ;	                SR: NVmxDIZC
                                        ;	                    ||||||||
                                        ;	                    ++++++++———> entry value
                                        ;	——————————————————————————————————————————————————
                                        ;
   3900 CB1E 08                         incaddra php
   3901 CB1F C2 20                    +            .byte $c2,$20
                                        
   3902 CB21 E6 A2                                inc addra             ;bump bits 0-15
   3903 CB23 D0 04                                bne .0000010
                                        ;
   3905 CB25 E2 20                    +            .byte $e2,$20
                                        
   3906 CB27 E6 A4                                inc addra+s_word      ;bump bits 16-23
                                        ;
   3908 CB29 28                         .0000010 plp
   3909 CB2A 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;incoper: INCREMENT OPERAND ADDRESS
                                        ;
   3915 CB2B 18                         incoper  clc
   3916 CB2C 08                                   php
   3917 CB2D C2 30                    +            .byte $c2,$30
                                        
   3918 CB2F 48                                   pha
   3919 CB30 E6 BD                                inc operand           ;handle base address
   3920 CB32 D0 06                                bne .0000010
                                        ;              
   3922 CB34 E2 20                    +            .byte $e2,$20
                                        
   3923 CB36 E6 BF                                inc operand+s_word    ;handle bank
   3924 CB38 C2 20                    +            .byte $c2,$20
                                        
                                        ;
   3926 CB3A 68                         .0000010 pla
   3927 CB3B 28                                   plp
   3928 CB3C 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;instdata: GET INSTRUCTION SIZE & ADDRESSING MODE DATA
                                        ;
                                        ;	——————————————————————————————————
                                        ;	Preparatory Ops: .X: 65C816 opcode
                                        ;
                                        ;	Returned Values: .A: mode flags
                                        ;	                 .X: operand size
                                        ;	                 .Y: mode index
                                        ;	——————————————————————————————————
                                        ;
   3942 CB3D E2 30                      instdata +         .byte $e2,$30
                                        
   3943 CB3F BD B8 CE                             lda mnetabam,x        ;addressing mode data
   3944 CB42 48                                   pha                   ;save mode flag bits
   3945 CB43 48                                   pha                   ;save size data
   3946 CB44 29 0F                                and #amodmask         ;extract mode index &...
   3947 CB46 A8                                   tay                   ;save
   3948 CB47 68                                   pla                   ;recover data
   3949 CB48 29 30                                and #opsmask          ;mask mode fields &...
                                        ;         .rept n_opslsr        ;extract operand size
   3951 CB4A 4A                                     lsr
   3952 CB4B 4A                                     lsr
   3953 CB4C 4A                                     lsr
   3954 CB4D 4A                                     lsr
                                        ;         .endr
   3956 CB4E AA                                   tax                   ;operand size
   3957 CB4F 68                                   pla                   ;recover mode flags
   3958 CB50 29 C0                                and #vopsmask         ;discard mode & size fields
   3959 CB52 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;offtarg: CONVERT BRANCH OFFSET TO TARGET ADDRESS
                                        ;
                                        ;	———————————————————————————————————————————————
                                        ;	Preparatory Ops:    ADDRA: base address
                                        ;	                 INSTSIZE: instruction size
                                        ;	                  OPERAND: offset
                                        ;
                                        ;	Returned Values:  OPERAND: target address (L/H)
                                        ;	                       .A: used
                                        ;	                       .X: entry value
                                        ;                              .Y: entry value
                                        ;	———————————————————————————————————————————————
                                        ;
   3976 CB53 C2 20                      offtarg +         .byte $c2,$20
                                        
   3977 CB55 A5 A2                                lda addra             ;base address
   3978 CB57 E2 20                    +            .byte $e2,$20
                                        
   3979 CB59 46 C8                                lsr instsize          ;bit 0 will be set if...
   3980 CB5B B0 07                                bcs .0000010          ;a long branch
                                        ;
   3982 CB5D 24 BD                                bit operand           ;short forward or backward?
   3983 CB5F 10 03                                bpl .0000010          ;forward
                                        ;
   3985 CB61 EB                       +            .byte $eb
                                                           ;expose address MSB
   3986 CB62 3A                                   dea                   ;back a page
   3987 CB63 EB                       +            .byte $eb
                                                           ;expose address LSB
                                        ;
   3989 CB64 C2 20                      .0000010 +         .byte $c2,$20
                                        
   3990 CB66 18                                   clc
   3991 CB67 65 BD                                adc operand           ;calculate target address
   3992 CB69 85 BD                                sta operand           ;new operand
   3993 CB6B E2 20                    +            .byte $e2,$20
                                        
   3994 CB6D A9 03                                lda #s_xword
   3995 CB6F 85 C8                                sta instsize          ;effective instruction size
   3996 CB71 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;setxaddr: SET EXECUTION ADDRESS
                                        ;
   4002 CB72 B0 13                      setxaddr bcs .0000010          ;no address given
                                        ;
   4004 CB74 20 CD CA                             jsr facasize          ;check address...
   4005 CB77 C9 04                                cmp #s_dword          ;range
   4006 CB79 B0 0D                                bcs .0000020          ;out of range
                                        ;
   4008 CB7B C2 20                    +            .byte $c2,$20
                                        
   4009 CB7D A5 A9                                lda faca              ;execution address
   4010 CB7F 85 88                                sta reg_pcx           ;set new PC value
   4011 CB81 E2 20                    +            .byte $e2,$20
                                        
   4012 CB83 A5 AB                                lda faca+s_word
   4013 CB85 85 8A                                sta reg_pbx           ;set new PB value
                                        ;
   4015 CB87 18                         .0000010 clc                   ;no error
                                        ;
   4017 CB88 60                         .0000020 rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;targoff: CONVERT BRANCH TARGET ADDRESS TO BRANCH OFFSET                   
                                        ;
                                        ;	—————————————————————————————————————————————————
                                        ;	Preparatory Ops:   ADDRA: instruction address
                                        ;	                 OPERAND: target address
                                        ;
                                        ;	Returned Values: OPERAND: computed offset
                                        ;	                      .A: effective operand size
                                        ;	                      .X: entry value
                                        ;                             .Y: entry value
                                        ;	                      .C: 1 = branch out of range
                                        ;
                                        ;	Execution notes: ADDRB is set to the branch base
                                        ;	                 address.
                                        ;	—————————————————————————————————————————————————
                                        ;
   4037 CB89 64 C9                      targoff  stz instsize+s_byte   ;always zero
   4038 CB8B A5 C8                                lda instsize          ;instruction size will tell...
   4039 CB8D 4A                                   lsr                   ;if long or short branch
                                        ;
                                        ;—————————————————————————————————————————————————
   4249 = 000000BC                      .btype   =facc+5               ;branch type flag
                                        ;—————————————————————————————————————————————————
                                        ;
   4045 CB8E 66 BC                                ror .btype            ;set branch type...
                                        ;
                                        ;	x0000000
                                        ;	|
                                        ;	+——————————> 0: short
                                        ;	             1: long
                                        ;
   4052 CB90 C2 20                    +            .byte $c2,$20
                                        
   4053 CB92 18                                   clc
   4054 CB93 A5 A2                                lda addra             ;instruction address
   4055 CB95 65 C8                                adc instsize          ;instruction size
   4056 CB97 85 A6                                sta addrb             ;base address
   4057 CB99 38                                   sec
   4058 CB9A A5 BD                                lda operand           ;target address
   4059 CB9C E5 A6                                sbc addrb             ;base address
   4060 CB9E 85 BD                                sta operand           ;offset
   4061 CBA0 E2 20                    +            .byte $e2,$20
                                        
   4062 CBA2 90 15                                bcc .0000040          ;backward branch
                                        ;
   4064 CBA4 24 BC                                bit .btype            ;check branch range
   4065 CBA6 30 0A                                bmi .0000020          ;long
                                        ;
                                        ;
                                        ;	process short forward branch...
                                        ;
   4070 CBA8 EB                       +            .byte $eb
                                                           ;offset MSB should be zero
   4071 CBA9 D0 21                                bne .0000060          ;it isn't — out of range
                                        ;
   4073 CBAB EB                       +            .byte $eb
                                                           ;offset LSB should be $00-$7F
   4074 CBAC 30 1E                                bmi .0000060          ;it isn't — out of range
                                        ;
   4076 CBAE A9 01                      .0000010 lda #s_byte           ;final instruction size
   4077 CBB0 18                                   clc                   ;branch in range
   4078 CBB1 60                                   rts
                                        ;
                                        ;
                                        ;	process long forward branch...
                                        ;
   4083 CBB2 EB                         .0000020 +         .byte $eb
                                                           ;offset MSB should be positive
   4084 CBB3 30 17                                bmi .0000060          ;it isn't — branch out of range
                                        ;
   4086 CBB5 A9 02                      .0000030 lda #s_word
   4087 CBB7 18                                   clc
   4088 CBB8 60                                   rts
                                        ;
                                        ;
                                        ;	process backward branch...
                                        ;
   4093 CBB9 24 BC                      .0000040 bit .btype            ;long or short?
   4094 CBBB 30 0C                                bmi .0000050          ;long
                                        ;
                                        ;
                                        ;	process short backward branch...
                                        ;
   4099 CBBD EB                       +            .byte $eb
                                                           ;offset MSB should be negative
   4100 CBBE 10 0C                                bpl .0000060          ;it isn't — out of range
                                        ;
   4102 CBC0 49 FF                                eor #%11111111        ;complement offset MSB 2s 
   4103 CBC2 D0 08                                bne .0000060          ;out of range
                                        ;
   4105 CBC4 EB                       +            .byte $eb
                                                           ;offset LSB should be $80-$FF
   4106 CBC5 30 E7                                bmi .0000010          ;it is — branch in range
                                        ;
   4108 CBC7 80 03                                bra .0000060          ;branch out of range
                                        ;
                                        ;
                                        ;	process long backward branch...
                                        ;
   4113 CBC9 EB                         .0000050 +         .byte $eb
                                                           ;offset MSB should be negative
   4114 CBCA 30 E9                                bmi .0000030          ;it is — branch in range
                                        ;
   4116 CBCC 38                         .0000060 sec                   ;range error
   4117 CBCD 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getcharr: GET PREVIOUS INPUT BUFFER CHARACTER
                                        ;
   4123 CBCE C6 C1                      getcharr dec ibufidx           ;move back a char
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getchar: GET A CHARACTER FROM INPUT BUFFER
                                        ;
                                        ;	——————————————————————————————————————————————
                                        ;	Preparatory Ops : none
                                        ;
                                        ;	Register Returns: .A: character or <NUL>
                                        ;	                  .B: entry value
                                        ;	                  .X: entry value
                                        ;	                  .Y: entry value
                                        ;
                                        ;	MPU Flags: NVmxDIZC
                                        ;	           ||||||||
                                        ;	           |||||||+———> entry value
                                        ;	           ||||||+————> 1: <NUL> gotten
                                        ;	           |||||+—————> entry value
                                        ;	           ||||+——————> entry value
                                        ;	           |||+———————> entry value
                                        ;	           ||+————————> entry value
                                        ;	           |+—————————> not defined
                                        ;	           +——————————> not defined
                                        ;	——————————————————————————————————————————————
                                        ;
   4149 CBD0 DA                         getchar  phx
   4150 CBD1 5A                                   phy
   4151 CBD2 08                                   php                   ;save register sizes
   4152 CBD3 E2 30                    +            .byte $e2,$30
                                                        ;force 8 bits
   4153 CBD5 A6 C1                                ldx ibufidx           ;buffer index
   4154 CBD7 BD 00 02                             lda ibuffer,x         ;get char
   4155 CBDA E6 C1                                inc ibufidx           ;bump index
   4156 CBDC 28                                   plp                   ;restore register widths
   4157 CBDD 7A                                   ply
   4158 CBDE FA                                   plx
                                        ; Changed the following to XBA instruction which seems to work as well.
                                        ; XBA doesn't access the stack memory saving a data memory access,
                                        ; and hence is faster.
   4162 CBDF EB                       +            .byte $eb
                                        		;	pha                   ;condition...
   4163 CBE0 EB                       +            .byte $eb
                                        		;   pla                   ;.Z
   4164 CBE1 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getpat: GET PATTERN FOR MEMORY CHANGE or SEARCH
                                        ;
                                        ;	—————————————————————————————————————————————————————
                                        ;	Preparatory Ops: Null-terminated pattern in IBUFFER.
                                        ;
                                        ;	Returned Values: .A: used
                                        ;	                 .X: used
                                        ;	                 .Y: pattern length if entered
                                        ;	                 .C: 0 = pattern valid
                                        ;	                     1 = exception:
                                        ;	                 .N  0 = no pattern entered
                                        ;	                     1 = evaluation error
                                        ;
                                        ;	Notes: 1) If pattern is preceded by "'" the following
                                        ;	          characters are interpreted as ASCII.
                                        ;	       2) A maximum of 32 bytes or characters is
                                        ;	          accepted.  Excess input will be discarded.
                                        ;	—————————————————————————————————————————————————————
                                        ;
   4187 CBE2 64 CD                      getpat   stz status            ;clear pattern type indicator
   4188 CBE4 A0 00                                ldy #0                ;pattern index
   4189 CBE6 20 CE CB                             jsr getcharr          ;get last char
   4190 CBE9 F0 3C                                beq .0000070          ;EOS
                                        ;
   4192 CBEB A6 C1                                ldx ibufidx           ;current buffer index
   4193 CBED 20 2E CC                             jsr getcharw          ;get next
   4194 CBF0 F0 35                                beq .0000070          ;EOS
                                        ;
   4196 CBF2 C9 27                                cmp #''''			; *** watch syntax here, the following line of code was omitted when only ''' was present
   4197 CBF4 D0 04                                bne .0000010          ;not ASCII input
                                        ;
   4199 CBF6 66 CD                                ror status            ;condition flag
   4200 CBF8 80 12                                bra .0000030          ;balance of input is ASCII
                                        ;
   4202 CBFA 86 C1                      .0000010 stx ibufidx           ;restore buffer index
                                        ;
   4204 CBFC 20 E1 CA                   .0000020 jsr getparm           ;evaluate numeric pattern
   4205 CBFF B0 21                                bcs .0000060          ;done w/pattern
                                        ;
   4207 CC01 20 CD CA                             jsr facasize          ;size
   4208 CC04 C9 02                                cmp #s_word
   4209 CC06 B0 1F                                bcs .0000070          ;not a byte — error
                                        ;
   4211 CC08 A5 A9                                lda faca              ;get byte &...
   4212 CC0A 80 05                                bra .0000040          ;store
                                        ;
   4214 CC0C 20 D0 CB                   .0000030 jsr getchar           ;get ASCII char
   4215 CC0F F0 11                                beq .0000060          ;done w/pattern
                                        ;
   4217 CC11 C0 20                      .0000040 cpy #s_auxbuf         ;pattern buffer full?
   4218 CC13 F0 0A                                beq .0000050          ;yes
                                        ;
   4220 CC15 99 51 02                             sta auxbuf,y          ;store pattern
   4221 CC18 C8                                   iny
   4222 CC19 24 CD                                bit status
   4223 CC1B 10 DF                                bpl .0000020          ;get next numeric value
                                        ;
   4225 CC1D 80 ED                                bra .0000030          ;get next ASCII char
                                        ;
   4227 CC1F 20 14 C8                   .0000050 jsr alert             ;excess input
                                        ;
   4229 CC22 84 C0                      .0000060 sty auxbufix          ;save pattern size
   4230 CC24 98                                   tya                   ;condition .Z
   4231 CC25 18                                   clc                   ;pattern valid
   4232 CC26 60                                   rts
                                        ;
                                        ;
                                        ;	no pattern entered...
                                        ;
   4237 CC27 C2 80                      .0000070 +         .byte $c2,%10000000
                                        
   4238 CC29 38                                   sec
   4239 CC2A 60                                   rts
                                        ;
                                        ;
                                        ;	evaluation error...
                                        ;
   4244 CC2B E2 81                      .0000080 +         .byte $e2,%10000001
                                        
   4245 CC2D 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getcharw: GET FROM INPUT BUFFER, DISCARDING WHITESPACE
                                        ;
                                        ;	——————————————————————————————————————————————————
                                        ;	Preparatory Ops: Null-terminated input in IBUFFER.
                                        ;
                                        ;	Returned Values: .A: char or null
                                        ;	                 .X: entry value
                                        ;	                 .Y: entry value
                                        ;	                 .Z: 1 = null terminator detected
                                        ;
                                        ;	Notes: Whitespace is defined as a blank ($20) or a
                                        ;	       horizontal tab ($09).
                                        ;	——————————————————————————————————————————————————
                                        ;
   4263 CC2E 20 D0 CB                   getcharw jsr getchar           ;get from buffer
   4264 CC31 F0 08                                beq .0000010          ;EOI
                                        ;
   4266 CC33 C9 20                                cmp #' '
   4267 CC35 F0 F7                                beq getcharw          ;discard whitespace
                                        ;
   4269 CC37 C9 09                                cmp #a_ht             ;also whitespace
   4270 CC39 F0 F3                                beq getcharw
                                        ;
   4272 CC3B 18                         .0000010 clc
   4273 CC3C 60                                   rts  
                                        ;
                                        ;================================================================================
                                        ;
                                        ;input: INTERACTIVE INPUT FROM CONSOLE CHANNEL
                                        ;
                                        ;	———————————————————————————————————————————————————————————
                                        ;	Preparatory Ops: Zero IBUFIDX or load IBUFFER with default
                                        ;	                 input & set IBUFIDX to the number of chars
                                        ;	                 loaded into the buffer.
                                        ;
                                        ;	Returned Values: .A: used
                                        ;	                 .X: characters entered
                                        ;	                 .Y: used
                                        ;
                                        ;	Example: STZ IBUFIDX
                                        ;	         JSR INPUT
                                        ;
                                        ;	Notes: Input is collected in IBUFFER & is null-terminated.
                                        ;	       IBUFIDX is reset to zero upon exit.
                                        ;	———————————————————————————————————————————————————————————
                                        ;
   4295 CC3D                            input:
   4296 CC3D A6 C1                       	    ldx ibufidx
   4297 CC3F 9E 00 02                             stz ibuffer,x         ;be sure buffer is terminated
   4298 CC42 20 80 C7                             jsr dpyibuf           ;print default input if any
   4299 CC45 F4                       +            .byte $f4
   4299 CC46 10 D0                    +            .word dc_cn
                                        
   4300 CC48 20 1D C8                             jsr sprint            ;enable cursor
   4301 CC4B A6 C1                                ldx ibufidx           ;starting buffer index
                                        ;
                                        ;
                                        ;	main input loop...
                                        ;
   4306 CC4D 20 00 F4                   .0000010 jsr getcha            ;poll for input
   4307 CC50 90 02                                bcc .0000020          ;got something
                                        ;
                                        ;         jsr	$F409          ;wait 'til any IRQ &... (Reschedule tasks)
   4310 CC52 80 F9                                bra .0000010          ;try again
                                        ;
   4312 CC54                            .0000020
   4313 CC54 C9 7F                       		cmp #a_del            ;above ASCII range?
   4314 CC56 B0 F5                                bcs .0000010          ;yes, ignore
                                        ;
   4316 CC58 C9 09                                cmp #a_ht             ;horizontal tab?
   4317 CC5A D0 02                                bne .0000030          ;no
                                        ;
   4319 CC5C A9 20                                lda #a_blank          ;replace <HT> w/blank
                                        ;
   4321 CC5E C9 20                      .0000030 cmp #a_blank          ;control char?
   4322 CC60 90 10                                bcc .0000050          ;yes
                                        ;
                                        ;
                                        ;	process QWERTY character...
                                        ;
   4327 CC62 E0 50                                cpx #s_ibuf           ;room in buffer?
   4328 CC64 B0 05                                bcs .0000040          ;no
                                        ;
   4330 CC66 9D 00 02                             sta ibuffer,x         ;store char
   4331 CC69 E8                                   inx                   ;bump index
   4332 CC6A 2C                                   .byte bitabs          ;echo char
                                        ;
   4334 CC6B A9 07                      .0000040 lda #a_bel            ;alert user
   4335 CC6D 20 06 F4                             jsr putcha
   4336 CC70 80 DB                                bra .0000010          ;get some more
                                        ;
                                        ;
                                        ;	process carriage return...
                                        ;
   4341 CC72 C9 0D                      .0000050 cmp #a_cr             ;carriage return?
   4342 CC74 D0 0E                                bne .0000060          ;no
                                        ;
   4344 CC76 DA                                   phx                   ;protect input count
   4345 CC77 F4                       +            .byte $f4
   4345 CC78 14 D0                    +            .word dc_co
                                        
   4346 CC7A 20 1D C8                             jsr sprint            ;cursor off
   4347 CC7D FA                                   plx                   ;recover input count
   4348 CC7E 9E 00 02                             stz ibuffer,x         ;terminate input &...
   4349 CC81 64 C1                                stz ibufidx           ;reset buffer index
   4350 CC83 60                                   rts                   ;done
                                        ;
                                        ;
                                        ;	process backspace...
                                        ;
   4355 CC84 C9 08                      .0000060 cmp #a_bs             ;backspace?
   4356 CC86 D0 C5                                bne .0000010          ;no
                                        ;
   4358 CC88 8A                                   txa
   4359 CC89 F0 C2                                beq .0000010          ;no input, ignore <BS>
                                        ;
   4361 CC8B CA                                   dex                   ;1 less char
   4362 CC8C DA                                   phx                   ;preserve count
   4363 CC8D 20 CF C7                             jsr gendbs            ;destructive backspace
   4364 CC90 FA                                   plx                   ;restore count
   4365 CC91 80 BA                                bra .0000010          ;get more input
                                        ;
                                        ;================================================================================
                                        ;
                                        ;lodbnk: LOAD SOURCE & DESTINATION BANKS
                                        ;
   4371 CC93 E2 20                      lodbnk +         .byte $e2,$20
                                        
   4372 CC95 A5 BF                                lda operand+s_word    ;destination bank
   4373 CC97 EB                       +            .byte $eb
                                                           ;make it MSB
   4374 CC98 A5 A4                                lda addra+s_word      ;source bank is LSB
   4375 CC9A 60                                   rts
                                        ;         
                                        ;================================================================================
                                        ;
                                        ;getcharc: GET A CHARACTER FROM INPUT BUFFER & CONVERT CASE
                                        ;
                                        ;	——————————————————————————————————————————————————
                                        ;	Preparatory Ops: Null-terminated input in IBUFFER.
                                        ;
                                        ;	Returned Values: .A: char or null
                                        ;	                 .X: entry value
                                        ;	                 .Y: entry value
                                        ;	                 .Z: 1 = null terminator detected
                                        ;	——————————————————————————————————————————————————
                                        ;
   4390 CC9B 20 D0 CB                   getcharc jsr getchar           ;get from buffer
   4391 CC9E F0 0C                                beq touppera          ;just return
                                        ;
                                        ;================================================================================
                                        ;
                                        ;toupper: FORCE CHARACTER TO UPPER CASE
                                        ;
                                        ;	————————————————————————————————————————————————
                                        ;	Preparatory Ops : .A: character to convert
                                        ;
                                        ;	Register Returns: .A: converted character
                                        ;	                  .B: entry value
                                        ;	                  .X: entry value
                                        ;	                  .Y: entry value
                                        ;
                                        ;	MPU Flags: no change
                                        ;
                                        ;	Notes: 1) This subroutine has no effect on char-
                                        ;	          acters that are not alpha.
                                        ;	————————————————————————————————————————————————
                                        ;
   4411 CCA0 08                         toupper  php                   ;protect flags
   4412 CCA1 C9 61                                cmp #a_asclcl         ;check char range
   4413 CCA3 90 06                                bcc .0000010          ;not LC alpha
                                        ;
   4415 CCA5 C9 7B                                cmp #a_asclch+s_byte
   4416 CCA7 B0 02                                bcs .0000010          ;not LC alpha
                                        ;
   4418 CCA9 29 5F                                and #a_lctouc         ;force to UC
                                        ;
   4420 CCAB 28                         .0000010 plp                   ;restore flags
                                        ;
   4422 CCAC 60                         touppera rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;teststop: TEST FOR STOP KEY
                                        ;
                                        ;	——————————————————————————————————————————————
                                        ;	Preparatory Ops: none
                                        ;
                                        ;	Returned Values: .A: detected keypress, if any
                                        ;	                 .X: entry value
                                        ;	                 .Y: entry value
                                        ;
                                        ;	MPU Flags: NVmxDIZC
                                        ;	           ||||||||
                                        ;	           |||||||+———> 0: normal key detected
                                        ;	           |||||||      1: <STOP> detected
                                        ;	           +++++++————> not defined
                                        ;
                                        ;	Example: jsr teststop
                                        ;	         bcs stopped
                                        ;
                                        ;	Notes: The symbol STOPKEY defines the ASCII
                                        ;	       value of the "stop key."
                                        ;	——————————————————————————————————————————————
                                        ;
   4448 CCAD 20 00 F4                   teststop jsr getcha            ;poll console
   4449 CCB0 B0 04                                bcs .0000010          ;no input
                                        ;
   4451 CCB2 C9 03                                cmp #stopkey          ;stop key pressed?
   4452 CCB4 F0 01                                beq .0000020          ;yes
                                        ;
   4454 CCB6 18                         .0000010 clc
                                        ;
   4456 CCB7 60                         .0000020 rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;COMMAND PROCESSING DATA TABLES
                                        ;
                                        ;
                                        ;	monitor commands...
                                        ;
   4465 CCB8 41                         mpctab   .byte "A"             ;assemble code
   4466 CCB9 43                                   .byte "C"             ;compare memory ranges
   4467 CCBA 44                                   .byte "D"             ;disassemble code
   4468 CCBB 46                                   .byte "F"             ;fill memory
   4469 CCBC 47                                   .byte "G"             ;execute code
   4470 CCBD 48                                   .byte "H"             ;search memory
   4471 CCBE 4A                                   .byte "J"             ;execute code as subroutine
   4472 CCBF 4D                                   .byte "M"             ;dump memory range
   4473 CCC0 52                                   .byte "R"             ;dump registers
   4474 CCC1 54                                   .byte "T"             ;copy memory range
   4475 CCC2 58                                   .byte "X"             ;exit from monitor
   4476 CCC3 3E                                   .byte ">"             ;change memory
   4477 CCC4 3B                                   .byte ";"             ;change registers
   4704 = 0000000D                      n_mpctab =*-mpctab             ;entries in above table
                                        ;
                                        ;
                                        ;	monitor command jump table...
                                        ;
   4483 CCC5 8E C1                      mpcextab .word monasc-s_byte   ; A  assemble code
   4484 CCC7 50 C4                                .word moncmp-s_byte   ; C  compare memory ranges
   4485 CCC9 6A C3                                .word mondsc-s_byte   ; D  disassemble code
   4486 CCCB 21 C5                                .word monfil-s_byte   ; F  fill memory
   4487 CCCD BE C3                                .word monjmp-s_byte   ; G  execute code
   4488 CCCF 87 C5                                .word monhnt-s_byte   ; H  search memory
   4489 CCD1 EF C3                                .word monjsr-s_byte   ; J  execute code as subroutine
   4490 CCD3 CF C4                                .word mondmp-s_byte   ; M  dump memory range
   4491 CCD5 A3 C0                                .word monreg-s_byte   ; R  dump registers
   4492 CCD7 7E C4                                .word moncpy-s_byte   ; T  copy memory range
   4493 CCD9 38 C6                                .word monxit-s_byte   ; X  exit from monitor
   4494 CCDB 25 C4                                .word monchm-s_byte   ; >  change memory
   4495 CCDD FD C5                                .word monchr-s_byte   ; ;  change registers
                                        ;
                                        ;
                                        ;	number conversion...
                                        ;        
   4500 CCDF 10 0A 08 02                basetab  .byte 16,10,8,2       ;supported number bases
   4501 CCE3 04 03 03 01                bitsdtab .byte 4,3,3,1         ;bits per binary digit
   4502 CCE7 04 04 03 01                bitsntab .byte 4,4,3,1         ;bits per ASCII character
   4503 CCEB 03 02 09 02                lzsttab  .byte 3,2,9,2         ;leading zero suppression thresholds
   4504 CCEF 0C 0C 10 30                numstab  .byte 12,12,16,48     ;bin to ASCII conversion numerals
   4505 CCF3 24                         radxtab  .byte c_hex           ;hexadecimal radix
   4506 CCF4 2B                                   .byte c_dec           ;decimal radix
   4507 CCF5 40                                   .byte c_oct           ;octal radix
   4508 CCF6 25                                   .byte c_bin           ;binary radix
   4735 = 00000004                      n_radix  =*-radxtab            ;number of recognized radices
                                        ;
                                        ;
                                        ;	shadow MPU register sizes...
                                        ;
   4514 CCF7 02                         rcvltab  .byte s_mpupbx+s_byte ; PB
   4515 CCF8 03                                   .byte s_mpupcx+s_byte ; PC
   4516 CCF9 02                                   .byte s_mpusrx+s_byte ; SR
   4517 CCFA 03                                   .byte s_word+s_byte   ; .C
   4518 CCFB 03                                   .byte s_word+s_byte   ; .X
   4519 CCFC 03                                   .byte s_word+s_byte   ; .Y
   4520 CCFD 03                                   .byte s_mpuspx+s_byte ; SP
   4521 CCFE 03                                   .byte s_mpudpx+s_byte ; DP
   4522 CCFF 02                                   .byte s_mpudbx+s_byte ; DB
   4749 = 00000009                      n_regchv =*-rcvltab            ;total shadow registers
                                        ;
                                        ;================================================================================
                                        ;
                                        ;ASSEMBLER/DISASSEMBLER DATA TABLES
                                        ;
                                        ;
                                        ;	numerically sorted & encoded W65C816S mnemonics...
                                        ;
   4532 CD00 F2 10                      mnetab   .word mne_xba         ;  0 — XBA
   4533 CD02 5A 11                                .word mne_lda         ;  1 — LDA
   4534 CD04 A2 11                                .word mne_pea         ;  2 — PEA
   4535 CD06 62 12                                .word mne_pha         ;  3 — PHA
   4536 CD08 62 13                                .word mne_pla         ;  4 — PLA
   4537 CD0A C6 14                                .word mne_bra         ;  5 — BRA
   4538 CD0C E0 14                                .word mne_ora         ;  6 — ORA
   4539 CD0E 68 15                                .word mne_sta         ;  7 — STA
   4540 CD10 6A 16                                .word mne_txa         ;  8 — TXA
   4541 CD12 AA 16                                .word mne_tya         ;  9 — TYA
   4542 CD14 62 1A                                .word mne_phb         ; 10 — PHB
   4543 CD16 62 1B                                .word mne_plb         ; 11 — PLB
   4544 CD18 EA 1C                                .word mne_trb         ; 12 — TRB
   4545 CD1A 2A 1D                                .word mne_tsb         ; 13 — TSB
   4546 CD1C E8 20                                .word mne_sbc         ; 14 — SBC
   4547 CD1E 06 21                                .word mne_bcc         ; 15 — BCC
   4548 CD20 44 21                                .word mne_adc         ; 16 — ADC
   4549 CD22 6A 21                                .word mne_tdc         ; 17 — TDC
   4550 CD24 8A 21                                .word mne_dec         ; 18 — DEC
   4551 CD26 A8 21                                .word mne_sec         ; 19 — SEC
   4552 CD28 48 23                                .word mne_clc         ; 20 — CLC
   4553 CD2A D4 23                                .word mne_inc         ; 21 — INC
   4554 CD2C 2A 25                                .word mne_tsc         ; 22 — TSC
   4555 CD2E C6 25                                .word mne_bvc         ; 23 — BVC
   4556 CD30 2A 29                                .word mne_tcd         ; 24 — TCD
   4557 CD32 A8 29                                .word mne_sed         ; 25 — SED
   4558 CD34 62 2A                                .word mne_phd         ; 26 — PHD
   4559 CD36 48 2B                                .word mne_cld         ; 27 — CLD
   4560 CD38 62 2B                                .word mne_pld         ; 28 — PLD
   4561 CD3A C4 2B                                .word mne_and         ; 29 — AND
   4562 CD3C 32 31                                .word mne_xce         ; 30 — XCE
   4563 CD3E C6 33                                .word mne_bne         ; 31 — BNE
   4564 CD40 B0 50                                .word mne_wai         ; 32 — WAI
   4565 CD42 A2 51                                .word mne_pei         ; 33 — PEI
   4566 CD44 A8 51                                .word mne_sei         ; 34 — SEI
   4567 CD46 48 53                                .word mne_cli         ; 35 — CLI
   4568 CD48 86 53                                .word mne_bmi         ; 36 — BMI
   4569 CD4A 66 55                                .word mne_rti         ; 37 — RTI
   4570 CD4C 62 62                                .word mne_phk         ; 38 — PHK
   4571 CD4E C6 64                                .word mne_brk         ; 39 — BRK
   4572 CD50 96 6B                                .word mne_jml         ; 40 — JML
   4573 CD52 26 6C                                .word mne_rol         ; 41 — ROL
   4574 CD54 46 6C                                .word mne_bpl         ; 42 — BPL
   4575 CD56 C6 6C                                .word mne_brl         ; 43 — BRL
   4576 CD58 04 6D                                .word mne_asl         ; 44 — ASL
   4577 CD5A 16 6D                                .word mne_jsl         ; 45 — JSL
   4578 CD5C 66 6D                                .word mne_rtl         ; 46 — RTL
   4579 CD5E 70 71                                .word mne_wdm         ; 47 — WDM
   4580 CD60 DC 7D                                .word mne_mvn         ; 48 — MVN
   4581 CD62 A6 89                                .word mne_rep         ; 49 — REP
   4582 CD64 A8 89                                .word mne_sep         ; 50 — SEP
   4583 CD66 62 8A                                .word mne_php         ; 51 — PHP
   4584 CD68 62 8B                                .word mne_plp         ; 52 — PLP
   4585 CD6A 88 8B                                .word mne_cmp         ; 53 — CMP
   4586 CD6C 96 8B                                .word mne_jmp         ; 54 — JMP
   4587 CD6E 08 8C                                .word mne_cop         ; 55 — COP
   4588 CD70 1E 8C                                .word mne_nop         ; 56 — NOP
   4589 CD72 68 8D                                .word mne_stp         ; 57 — STP
   4590 CD74 DC 8D                                .word mne_mvp         ; 58 — MVP
   4591 CD76 86 91                                .word mne_beq         ; 59 — BEQ
   4592 CD78 A2 99                                .word mne_per         ; 60 — PER
   4593 CD7A 0C 9C                                .word mne_eor         ; 61 — EOR
   4594 CD7C 26 9C                                .word mne_ror         ; 62 — ROR
   4595 CD7E 16 9D                                .word mne_jsr         ; 63 — JSR
   4596 CD80 1A 9D                                .word mne_lsr         ; 64 — LSR
   4597 CD82 06 A1                                .word mne_bcs         ; 65 — BCS
   4598 CD84 2A A1                                .word mne_tcs         ; 66 — TCS
   4599 CD86 66 A5                                .word mne_rts         ; 67 — RTS
   4600 CD88 C6 A5                                .word mne_bvs         ; 68 — BVS
   4601 CD8A 6A A6                                .word mne_txs         ; 69 — TXS
   4602 CD8C 86 AA                                .word mne_bit         ; 70 — BIT
   4603 CD8E 48 BB                                .word mne_clv         ; 71 — CLV
   4604 CD90 AA C8                                .word mne_tax         ; 72 — TAX
   4605 CD92 5A C9                                .word mne_ldx         ; 73 — LDX
   4606 CD94 8A C9                                .word mne_dex         ; 74 — DEX
   4607 CD96 62 CA                                .word mne_phx         ; 75 — PHX
   4608 CD98 62 CB                                .word mne_plx         ; 76 — PLX
   4609 CD9A D4 CB                                .word mne_inx         ; 77 — INX
   4610 CD9C 48 CC                                .word mne_cpx         ; 78 — CPX
   4611 CD9E 2A CD                                .word mne_tsx         ; 79 — TSX
   4612 CDA0 68 CD                                .word mne_stx         ; 80 — STX
   4613 CDA2 AA CE                                .word mne_tyx         ; 81 — TYX
   4614 CDA4 AA D0                                .word mne_tay         ; 82 — TAY
   4615 CDA6 5A D1                                .word mne_ldy         ; 83 — LDY
   4616 CDA8 8A D1                                .word mne_dey         ; 84 — DEY
   4617 CDAA 62 D2                                .word mne_phy         ; 85 — PHY
   4618 CDAC 62 D3                                .word mne_ply         ; 86 — PLY
   4619 CDAE D4 D3                                .word mne_iny         ; 87 — INY
   4620 CDB0 48 D4                                .word mne_cpy         ; 88 — CPY
   4621 CDB2 68 D5                                .word mne_sty         ; 89 — STY
   4622 CDB4 6A D6                                .word mne_txy         ; 90 — TXY
   4623 CDB6 68 DD                                .word mne_stz         ; 91 — STZ
                                        ;
   4851 = 000000B8                      s_mnetab =*-mnetab             ;mnemonic table size
   4852 = 0000005C                      n_mnemon =s_mnetab/s_word      ;total mnemonics
                                        ;
                                        ;
                                        ;	mnemonic lookup indices in opcode order...
                                        ;
   4631 CDB8 27                         mnetabix .byte mne_brkx        ; $00  BRK
   4632 CDB9 06                                   .byte mne_orax        ; $01  ORA (dp,X)
   4633 CDBA 37                                   .byte mne_copx        ; $02  COP
   4634 CDBB 06                                   .byte mne_orax        ; $03  ORA offset,S
   4635 CDBC 0D                                   .byte mne_tsbx        ; $04  TSB dp
   4636 CDBD 06                                   .byte mne_orax        ; $05  ORA dp
   4637 CDBE 2C                                   .byte mne_aslx        ; $06  ASL dp
   4638 CDBF 06                                   .byte mne_orax        ; $07  ORA [dp]
   4639 CDC0 33                                   .byte mne_phpx        ; $08  PHP
   4640 CDC1 06                                   .byte mne_orax        ; $09  ORA #
   4641 CDC2 2C                                   .byte mne_aslx        ; $0A  ASL A
   4642 CDC3 1A                                   .byte mne_phdx        ; $0B  PHD
   4643 CDC4 0D                                   .byte mne_tsbx        ; $0C  TSB abs
   4644 CDC5 06                                   .byte mne_orax        ; $0D  ORA abs
   4645 CDC6 2C                                   .byte mne_aslx        ; $0E  ASL abs
   4646 CDC7 06                                   .byte mne_orax        ; $0F  ORA absl
                                        ;
   4648 CDC8 2A                                   .byte mne_bplx        ; $10  BPL abs
   4649 CDC9 06                                   .byte mne_orax        ; $11  ORA (dp),Y
   4650 CDCA 06                                   .byte mne_orax        ; $12  ORA (dp)
   4651 CDCB 06                                   .byte mne_orax        ; $13  ORA (offset,S),Y
   4652 CDCC 0C                                   .byte mne_trbx        ; $14  TRB dp
   4653 CDCD 06                                   .byte mne_orax        ; $15  ORA dp,X
   4654 CDCE 2C                                   .byte mne_aslx        ; $16  ASL dp,X
   4655 CDCF 06                                   .byte mne_orax        ; $17  ORA [dp],Y
   4656 CDD0 14                                   .byte mne_clcx        ; $18  CLC
   4657 CDD1 06                                   .byte mne_orax        ; $19  ORA abs
   4658 CDD2 15                                   .byte mne_incx        ; $1A  INC A
   4659 CDD3 42                                   .byte mne_tcsx        ; $1B  TCS
   4660 CDD4 0C                                   .byte mne_trbx        ; $1C  TRB abs
   4661 CDD5 06                                   .byte mne_orax        ; $1D  ORA abs,X
   4662 CDD6 2C                                   .byte mne_aslx        ; $1E  ASL abs,X
   4663 CDD7 06                                   .byte mne_orax        ; $1F  ORA absl,X
                                        ;
   4665 CDD8 3F                                   .byte mne_jsrx        ; $20  JSR abs
   4666 CDD9 1D                                   .byte mne_andx        ; $21  AND (dp,X)
   4667 CDDA 2D                                   .byte mne_jslx        ; $22  JSL absl
   4668 CDDB 1D                                   .byte mne_andx        ; $23  AND offset,S
   4669 CDDC 46                                   .byte mne_bitx        ; $24  BIT dp
   4670 CDDD 1D                                   .byte mne_andx        ; $25  AND dp
   4671 CDDE 29                                   .byte mne_rolx        ; $26  ROL dp
   4672 CDDF 1D                                   .byte mne_andx        ; $27  AND [dp]
   4673 CDE0 34                                   .byte mne_plpx        ; $28  PLP
   4674 CDE1 1D                                   .byte mne_andx        ; $29  AND #
   4675 CDE2 29                                   .byte mne_rolx        ; $2A  ROL A
   4676 CDE3 1C                                   .byte mne_pldx        ; $2B  PLD
   4677 CDE4 46                                   .byte mne_bitx        ; $2C  BIT abs
   4678 CDE5 1D                                   .byte mne_andx        ; $2D  AND abs
   4679 CDE6 29                                   .byte mne_rolx        ; $2E  ROL abs
   4680 CDE7 1D                                   .byte mne_andx        ; $2F  AND absl
                                        ;
   4682 CDE8 24                                   .byte mne_bmix        ; $30  BMI abs
   4683 CDE9 1D                                   .byte mne_andx        ; $31  AND (dp),Y
   4684 CDEA 1D                                   .byte mne_andx        ; $32  AND (dp)
   4685 CDEB 1D                                   .byte mne_andx        ; $33  AND (offset,S),Y
   4686 CDEC 46                                   .byte mne_bitx        ; $34  BIT dp,X
   4687 CDED 1D                                   .byte mne_andx        ; $35  AND dp,X
   4688 CDEE 29                                   .byte mne_rolx        ; $36  ROL dp,X
   4689 CDEF 1D                                   .byte mne_andx        ; $37  AND [dp],Y
   4690 CDF0 13                                   .byte mne_secx        ; $38  SEC
   4691 CDF1 1D                                   .byte mne_andx        ; $39  AND abs,Y
   4692 CDF2 12                                   .byte mne_decx        ; $3A  DEC A
   4693 CDF3 16                                   .byte mne_tscx        ; $3B  TSC
   4694 CDF4 46                                   .byte mne_bitx        ; $3C  BIT abs,X
   4695 CDF5 1D                                   .byte mne_andx        ; $3D  AND abs,X
   4696 CDF6 29                                   .byte mne_rolx        ; $3E  ROL abs,X
   4697 CDF7 1D                                   .byte mne_andx        ; $3F  AND absl,X
                                        ;
   4699 CDF8 25                                   .byte mne_rtix        ; $40  RTI
   4700 CDF9 3D                                   .byte mne_eorx        ; $41  EOR (dp,X)
   4701 CDFA 2F                                   .byte mne_wdmx        ; $42  WDM
   4702 CDFB 3D                                   .byte mne_eorx        ; $43  EOR offset,S
   4703 CDFC 3A                                   .byte mne_mvpx        ; $44  MVP sb,db
   4704 CDFD 3D                                   .byte mne_eorx        ; $45  EOR dp
   4705 CDFE 40                                   .byte mne_lsrx        ; $46  LSR dp
   4706 CDFF 3D                                   .byte mne_eorx        ; $47  EOR [dp]
   4707 CE00 03                                   .byte mne_phax        ; $48  PHA
   4708 CE01 3D                                   .byte mne_eorx        ; $49  EOR #
   4709 CE02 40                                   .byte mne_lsrx        ; $4A  LSR A
   4710 CE03 26                                   .byte mne_phkx        ; $4B  PHK
   4711 CE04 36                                   .byte mne_jmpx        ; $4C  JMP abs
   4712 CE05 3D                                   .byte mne_eorx        ; $4D  EOR abs
   4713 CE06 40                                   .byte mne_lsrx        ; $4E  LSR abs
   4714 CE07 3D                                   .byte mne_eorx        ; $4F  EOR absl
                                        ;
   4716 CE08 17                                   .byte mne_bvcx        ; $50  BVC abs
   4717 CE09 3D                                   .byte mne_eorx        ; $51  EOR (dp),Y
   4718 CE0A 3D                                   .byte mne_eorx        ; $52  EOR (dp)
   4719 CE0B 3D                                   .byte mne_eorx        ; $53  EOR (offset,S),Y
   4720 CE0C 30                                   .byte mne_mvnx        ; $54  MVN sb,db
   4721 CE0D 3D                                   .byte mne_eorx        ; $55  EOR dp,X
   4722 CE0E 40                                   .byte mne_lsrx        ; $56  LSR dp,X
   4723 CE0F 3D                                   .byte mne_eorx        ; $57  EOR [dp],Y
   4724 CE10 23                                   .byte mne_clix        ; $58  CLI
   4725 CE11 3D                                   .byte mne_eorx        ; $59  EOR abs,Y
   4726 CE12 55                                   .byte mne_phyx        ; $5A  PHY
   4727 CE13 18                                   .byte mne_tcdx        ; $5B  TCD
   4728 CE14 28                                   .byte mne_jmlx        ; $5C  JML absl
   4729 CE15 3D                                   .byte mne_eorx        ; $5D  EOR abs,X
   4730 CE16 40                                   .byte mne_lsrx        ; $5E  LSR abs,X
   4731 CE17 3D                                   .byte mne_eorx        ; $5F  EOR absl,X
                                        ;
   4733 CE18 43                                   .byte mne_rtsx        ; $60  RTS
   4734 CE19 10                                   .byte mne_adcx        ; $61  ADC (dp,X)
   4735 CE1A 3C                                   .byte mne_perx        ; $62  PER
   4736 CE1B 10                                   .byte mne_adcx        ; $63  ADC offset,S
   4737 CE1C 5B                                   .byte mne_stzx        ; $64  STZ dp
   4738 CE1D 10                                   .byte mne_adcx        ; $65  ADC dp
   4739 CE1E 3E                                   .byte mne_rorx        ; $66  ROR dp
   4740 CE1F 10                                   .byte mne_adcx        ; $67  ADC [dp]
   4741 CE20 04                                   .byte mne_plax        ; $68  PLA
   4742 CE21 10                                   .byte mne_adcx        ; $69  ADC #
   4743 CE22 3E                                   .byte mne_rorx        ; $6A  ROR A
   4744 CE23 2E                                   .byte mne_rtlx        ; $6B  RTL
   4745 CE24 36                                   .byte mne_jmpx        ; $6C  JMP (abs)
   4746 CE25 10                                   .byte mne_adcx        ; $6D  ADC abs
   4747 CE26 3E                                   .byte mne_rorx        ; $6E  ROR abs
   4748 CE27 10                                   .byte mne_adcx        ; $6F  ADC absl
                                        ;
   4750 CE28 44                                   .byte mne_bvsx        ; $70  BVS abs
   4751 CE29 10                                   .byte mne_adcx        ; $71  ADC (dp),Y
   4752 CE2A 10                                   .byte mne_adcx        ; $72  ADC (dp)
   4753 CE2B 10                                   .byte mne_adcx        ; $73  ADC (offset,S),Y
   4754 CE2C 5B                                   .byte mne_stzx        ; $74  STZ dp,X
   4755 CE2D 10                                   .byte mne_adcx        ; $75  ADC dp,X
   4756 CE2E 3E                                   .byte mne_rorx        ; $76  ROR dp,X
   4757 CE2F 10                                   .byte mne_adcx        ; $77  ADC [dp],Y
   4758 CE30 22                                   .byte mne_seix        ; $78  SEI
   4759 CE31 10                                   .byte mne_adcx        ; $79  ADC abs,Y
   4760 CE32 56                                   .byte mne_plyx        ; $7A  PLY
   4761 CE33 11                                   .byte mne_tdcx        ; $7B  TDC
   4762 CE34 36                                   .byte mne_jmpx        ; $7C  JMP (abs,X)
   4763 CE35 10                                   .byte mne_adcx        ; $7D  ADC abs,X
   4764 CE36 3E                                   .byte mne_rorx        ; $7E  ROR abs,X
   4765 CE37 10                                   .byte mne_adcx        ; $7F  ADC absl,X
                                        ;
   4767 CE38 05                                   .byte mne_brax        ; $80  BRA abs
   4768 CE39 07                                   .byte mne_stax        ; $81  STA (dp,X)
   4769 CE3A 2B                                   .byte mne_brlx        ; $82  BRL abs
   4770 CE3B 07                                   .byte mne_stax        ; $83  STA offset,S
   4771 CE3C 59                                   .byte mne_styx        ; $84  STY dp
   4772 CE3D 07                                   .byte mne_stax        ; $85  STA dp
   4773 CE3E 50                                   .byte mne_stxx        ; $86  STX dp
   4774 CE3F 07                                   .byte mne_stax        ; $87  STA [dp]
   4775 CE40 54                                   .byte mne_deyx        ; $88  DEY
   4776 CE41 46                                   .byte mne_bitx        ; $89  BIT #
   4777 CE42 08                                   .byte mne_txax        ; $8A  TXA
   4778 CE43 0A                                   .byte mne_phbx        ; $8B  PHB
   4779 CE44 59                                   .byte mne_styx        ; $8C  STY abs
   4780 CE45 07                                   .byte mne_stax        ; $8D  STA abs
   4781 CE46 50                                   .byte mne_stxx        ; $8E  STX abs
   4782 CE47 07                                   .byte mne_stax        ; $8F  STA absl
                                        ;
   4784 CE48 0F                                   .byte mne_bccx        ; $90  BCC abs
   4785 CE49 07                                   .byte mne_stax        ; $91  STA (dp),Y
   4786 CE4A 07                                   .byte mne_stax        ; $92  STA (dp)
   4787 CE4B 07                                   .byte mne_stax        ; $93  STA (offset,S),Y
   4788 CE4C 59                                   .byte mne_styx        ; $94  STY dp,X
   4789 CE4D 07                                   .byte mne_stax        ; $95  STA dp,X
   4790 CE4E 50                                   .byte mne_stxx        ; $96  STX dp,Y
   4791 CE4F 07                                   .byte mne_stax        ; $97  STA [dp],Y
   4792 CE50 09                                   .byte mne_tyax        ; $98  TYA
   4793 CE51 07                                   .byte mne_stax        ; $99  STA abs,Y
   4794 CE52 45                                   .byte mne_txsx        ; $9A  TXS
   4795 CE53 5A                                   .byte mne_txyx        ; $9B  TXY
   4796 CE54 5B                                   .byte mne_stzx        ; $9C  STZ abs
   4797 CE55 07                                   .byte mne_stax        ; $9D  STA abs,X
   4798 CE56 5B                                   .byte mne_stzx        ; $9E  STZ abs,X
   4799 CE57 07                                   .byte mne_stax        ; $9F  STA absl,X
                                        ;
   4801 CE58 53                                   .byte mne_ldyx        ; $A0  LDY #
   4802 CE59 01                                   .byte mne_ldax        ; $A1  LDA (dp,X)
   4803 CE5A 49                                   .byte mne_ldxx        ; $A2  LDX #
   4804 CE5B 01                                   .byte mne_ldax        ; $A3  LDA offset,S
   4805 CE5C 53                                   .byte mne_ldyx        ; $A4  LDY dp
   4806 CE5D 01                                   .byte mne_ldax        ; $A5  LDA dp
   4807 CE5E 49                                   .byte mne_ldxx        ; $A6  LDX dp
   4808 CE5F 01                                   .byte mne_ldax        ; $A7  LDA [dp]
   4809 CE60 52                                   .byte mne_tayx        ; $A8  TAY
   4810 CE61 01                                   .byte mne_ldax        ; $A9  LDA #
   4811 CE62 48                                   .byte mne_taxx        ; $AA  TAX
   4812 CE63 0B                                   .byte mne_plbx        ; $AB  PLB
   4813 CE64 53                                   .byte mne_ldyx        ; $AC  LDY abs
   4814 CE65 01                                   .byte mne_ldax        ; $AD  LDA abs
   4815 CE66 49                                   .byte mne_ldxx        ; $AE  LDX abs
   4816 CE67 01                                   .byte mne_ldax        ; $AF  LDA absl
                                        ;
   4818 CE68 41                                   .byte mne_bcsx        ; $B0  BCS abs
   4819 CE69 01                                   .byte mne_ldax        ; $B1  LDA (dp),Y
   4820 CE6A 01                                   .byte mne_ldax        ; $B2  LDA (dp)
   4821 CE6B 01                                   .byte mne_ldax        ; $B3  LDA (offset,S),Y
   4822 CE6C 53                                   .byte mne_ldyx        ; $B4  LDY dp,X
   4823 CE6D 01                                   .byte mne_ldax        ; $B5  LDA dp,X
   4824 CE6E 49                                   .byte mne_ldxx        ; $B6  LDX dp,Y
   4825 CE6F 01                                   .byte mne_ldax        ; $B7  LDA [dp],Y
   4826 CE70 47                                   .byte mne_clvx        ; $B8  CLV
   4827 CE71 01                                   .byte mne_ldax        ; $B9  LDA abs,Y
   4828 CE72 4F                                   .byte mne_tsxx        ; $BA  TSX
   4829 CE73 51                                   .byte mne_tyxx        ; $BB  TYX
   4830 CE74 53                                   .byte mne_ldyx        ; $BC  LDY abs,X
   4831 CE75 01                                   .byte mne_ldax        ; $BD  LDA abs,X
   4832 CE76 49                                   .byte mne_ldxx        ; $BE  LDX abs,Y
   4833 CE77 01                                   .byte mne_ldax        ; $BF  LDA absl,X
                                        ;
   4835 CE78 58                                   .byte mne_cpyx        ; $C0  CPY #
   4836 CE79 35                                   .byte mne_cmpx        ; $C1  CMP (dp,X)
   4837 CE7A 31                                   .byte mne_repx        ; $C2  REP #
   4838 CE7B 35                                   .byte mne_cmpx        ; $C3  CMP offset,S
   4839 CE7C 58                                   .byte mne_cpyx        ; $C4  CPY dp
   4840 CE7D 35                                   .byte mne_cmpx        ; $C5  CMP dp
   4841 CE7E 12                                   .byte mne_decx        ; $C6  DEC dp
   4842 CE7F 35                                   .byte mne_cmpx        ; $C7  CMP [dp]
   4843 CE80 57                                   .byte mne_inyx        ; $C8  INY
   4844 CE81 35                                   .byte mne_cmpx        ; $C9  CMP #
   4845 CE82 4A                                   .byte mne_dexx        ; $CA  DEX
   4846 CE83 20                                   .byte mne_waix        ; $CB  WAI
   4847 CE84 58                                   .byte mne_cpyx        ; $CC  CPY abs
   4848 CE85 35                                   .byte mne_cmpx        ; $CD  CMP abs
   4849 CE86 12                                   .byte mne_decx        ; $CE  DEC abs
   4850 CE87 35                                   .byte mne_cmpx        ; $CF  CMP absl
                                        ;
   4852 CE88 1F                                   .byte mne_bnex        ; $D0  BNE abs
   4853 CE89 35                                   .byte mne_cmpx        ; $D1  CMP (dp),Y
   4854 CE8A 35                                   .byte mne_cmpx        ; $D2  CMP (dp)
   4855 CE8B 35                                   .byte mne_cmpx        ; $D3  CMP (offset,S),Y
   4856 CE8C 21                                   .byte mne_peix        ; $D4  PEI dp
   4857 CE8D 35                                   .byte mne_cmpx        ; $D5  CMP dp,X
   4858 CE8E 12                                   .byte mne_decx        ; $D6  DEC dp,X
   4859 CE8F 35                                   .byte mne_cmpx        ; $D7  CMP [dp],Y
   4860 CE90 1B                                   .byte mne_cldx        ; $D8  CLD
   4861 CE91 35                                   .byte mne_cmpx        ; $D9  CMP abs,Y
   4862 CE92 4B                                   .byte mne_phxx        ; $DA  PHX
   4863 CE93 39                                   .byte mne_stpx        ; $DB  STP
   4864 CE94 36                                   .byte mne_jmpx        ; $DC  JMP [abs]
   4865 CE95 35                                   .byte mne_cmpx        ; $DD  CMP abs,X
   4866 CE96 12                                   .byte mne_decx        ; $DE  DEC abs,X
   4867 CE97 35                                   .byte mne_cmpx        ; $DF  CMP absl,X
                                        ;
   4869 CE98 4E                                   .byte mne_cpxx        ; $E0  CPX #
   4870 CE99 0E                                   .byte mne_sbcx        ; $E1  SBC (dp,X)
   4871 CE9A 32                                   .byte mne_sepx        ; $E2  SEP #
   4872 CE9B 0E                                   .byte mne_sbcx        ; $E3  SBC offset,S
   4873 CE9C 4E                                   .byte mne_cpxx        ; $E4  CPX dp
   4874 CE9D 0E                                   .byte mne_sbcx        ; $E5  SBC dp
   4875 CE9E 15                                   .byte mne_incx        ; $E6  INC dp
   4876 CE9F 0E                                   .byte mne_sbcx        ; $E7  SBC [dp]
   4877 CEA0 4D                                   .byte mne_inxx        ; $E8  INX
   4878 CEA1 0E                                   .byte mne_sbcx        ; $E9  SBC #
   4879 CEA2 38                                   .byte mne_nopx        ; $EA  NOP
   4880 CEA3 00                                   .byte mne_xbax        ; $EB  XBA
   4881 CEA4 4E                                   .byte mne_cpxx        ; $EC  CPX abs
   4882 CEA5 0E                                   .byte mne_sbcx        ; $ED  SBC abs
   4883 CEA6 15                                   .byte mne_incx        ; $EE  INC abs
   4884 CEA7 0E                                   .byte mne_sbcx        ; $EF  SBC absl
                                        ;
   4886 CEA8 3B                                   .byte mne_beqx        ; $F0  BEQ abs
   4887 CEA9 0E                                   .byte mne_sbcx        ; $F1  SBC (dp),Y
   4888 CEAA 0E                                   .byte mne_sbcx        ; $F2  SBC (dp)
   4889 CEAB 0E                                   .byte mne_sbcx        ; $F3  SBC (offset,S),Y
   4890 CEAC 02                                   .byte mne_peax        ; $F4  PEA #
   4891 CEAD 0E                                   .byte mne_sbcx        ; $F5  SBC dp,X
   4892 CEAE 15                                   .byte mne_incx        ; $F6  INC dp,X
   4893 CEAF 0E                                   .byte mne_sbcx        ; $F7  SBC [dp],Y
   4894 CEB0 19                                   .byte mne_sedx        ; $F8  SED
   4895 CEB1 0E                                   .byte mne_sbcx        ; $F9  SBC abs,Y
   4896 CEB2 4C                                   .byte mne_plxx        ; $FA  PLX
   4897 CEB3 1E                                   .byte mne_xcex        ; $FB  XCE
   4898 CEB4 3F                                   .byte mne_jsrx        ; $FC  JSR (abs,X)
   4899 CEB5 0E                                   .byte mne_sbcx        ; $FD  SBC abs,X
   4900 CEB6 15                                   .byte mne_incx        ; $FE  INC abs,X
   4901 CEB7 0E                                   .byte mne_sbcx        ; $FF  SBC absl,X
                                        ;
                                        ;
                                        ;	instruction addressing modes & sizes in opcode order...
                                        ;
                                        ;	    xxxxxxxx
                                        ;	    ||||||||
                                        ;	    ||||++++———> Addressing Mode
                                        ;	    ||||         ——————————————————————————————————
                                        ;	    ||||          0000  dp, abs, absl, implied or A
                                        ;	    ||||          0001  #
                                        ;	    ||||          0010  dp,X, abs,X or absl,X
                                        ;	    ||||          0011  dp,Y or abs,Y
                                        ;	    ||||          0100  (dp) or (abs)
                                        ;	    ||||          0101  [dp] or [abs]
                                        ;	    ||||          0110  [dp],Y
                                        ;	    ||||          0111  (dp,X) or (abs,X)
                                        ;	    ||||          1000  (dp),Y
                                        ;	    ||||          1001  offset,S
                                        ;	    ||||          1010  (offset,S),Y
                                        ;	    ||||          1011  sbnk,dbnk (MVN or MVP)
                                        ;	    ||||          —-—-—-—-—-—-—-—-—-—-—-—-—-—-—-—-—
                                        ;	    ||||           #    = immediate
                                        ;	    ||||           A    = accumulator
                                        ;	    ||||           abs  = absolute
                                        ;	    ||||           absl = absolute long
                                        ;	    ||||           dbnk = destination bank
                                        ;	    ||||           dp   = direct (zero) page
                                        ;	    ||||           S    = stack relative
                                        ;	    ||||           sbnk = source bank
                                        ;	    ||||         ——————————————————————————————————
                                        ;	    ||||
                                        ;	    ||++———————> binary-encoded operand size
                                        ;	    |+—————————> 1: relative branch instruction
                                        ;	    +——————————> 1: variable operand size...
                                        ;
                                        ;	    —————————————————————————————————————————————————————————————
                                        ;	    Variable operand size refers to an immediate mode instruction
                                        ;	    that can accept either an 8 or 16 bit operand.  During instr-
                                        ;	    uction assembly, an 8 bit operand can be forced to 16 bits by
                                        ;	    preceding the operand field with !,  e.g.,  LDA !#$01,  which
                                        ;	    will assemble as $A9 $01 $00.
                                        ;	    —————————————————————————————————————————————————————————————
                                        ;
   4945 CEB8 00                         mnetabam .byte ops0 | am_nam   ; $00  BRK
   4946 CEB9 17                                   .byte ops1 | am_indx  ; $01  ORA (dp,X)
   4947 CEBA 10                                   .byte ops1 | am_nam   ; $02  COP
   4948 CEBB 19                                   .byte ops1 | am_stk   ; $03  ORA offset,S
   4949 CEBC 10                                   .byte ops1 | am_nam   ; $04  TSB dp
   4950 CEBD 10                                   .byte ops1 | am_nam   ; $05  ORA dp
   4951 CEBE 10                                   .byte ops1 | am_nam   ; $06  ASL dp
   4952 CEBF 15                                   .byte ops1 | am_indl  ; $07  ORA [dp]
   4953 CEC0 00                                   .byte ops0 | am_nam   ; $08  PHP
   4954 CEC1 91                                   .byte vops | am_imm   ; $09  ORA #
   4955 CEC2 00                                   .byte ops0 | am_nam   ; $0A  ASL A
   4956 CEC3 00                                   .byte ops0 | am_nam   ; $0B  PHD
   4957 CEC4 20                                   .byte ops2 | am_nam   ; $0C  TSB abs
   4958 CEC5 20                                   .byte ops2 | am_nam   ; $0D  ORA abs
   4959 CEC6 20                                   .byte ops2 | am_nam   ; $0E  ASL abs
   4960 CEC7 30                                   .byte ops3 | am_nam   ; $0F  ORA absl
                                        ;
   4962 CEC8 50                                   .byte bop1 | am_nam   ; $10  BPL abs
   4963 CEC9 18                                   .byte ops1 | am_indy  ; $11  ORA (dp),Y
   4964 CECA 14                                   .byte ops1 | am_ind   ; $12  ORA (dp)
   4965 CECB 1A                                   .byte ops1 | am_stky  ; $13  ORA (offset,S),Y
   4966 CECC 10                                   .byte ops1 | am_nam   ; $14  TRB dp
   4967 CECD 12                                   .byte ops1 | am_adrx  ; $15  ORA dp,X
   4968 CECE 12                                   .byte ops1 | am_adrx  ; $16  ASL dp,X
   4969 CECF 16                                   .byte ops1 | am_indly ; $17  ORA [dp],Y
   4970 CED0 00                                   .byte ops0 | am_nam   ; $18  CLC
   4971 CED1 20                                   .byte ops2 | am_nam   ; $19  ORA abs
   4972 CED2 00                                   .byte ops0 | am_nam   ; $1A  INC A
   4973 CED3 00                                   .byte ops0 | am_nam   ; $1B  TCS
   4974 CED4 20                                   .byte ops2 | am_nam   ; $1C  TRB abs
   4975 CED5 22                                   .byte ops2 | am_adrx  ; $1D  ORA abs,X
   4976 CED6 22                                   .byte ops2 | am_adrx  ; $1E  ASL abs,X
   4977 CED7 32                                   .byte ops3 | am_adrx  ; $1F  ORA absl,X
                                        ;
   4979 CED8 20                                   .byte ops2 | am_nam   ; $20  JSR abs
   4980 CED9 17                                   .byte ops1 | am_indx  ; $21  AND (dp,X)
   4981 CEDA 30                                   .byte ops3 | am_nam   ; $22  JSL absl
   4982 CEDB 19                                   .byte ops1 | am_stk   ; $23  AND offset,S
   4983 CEDC 10                                   .byte ops1 | am_nam   ; $24  BIT dp
   4984 CEDD 10                                   .byte ops1 | am_nam   ; $25  AND dp
   4985 CEDE 10                                   .byte ops1 | am_nam   ; $26  ROL dp
   4986 CEDF 15                                   .byte ops1 | am_indl  ; $27  AND [dp]
   4987 CEE0 00                                   .byte ops0 | am_nam   ; $28  PLP
   4988 CEE1 91                                   .byte vops | am_imm   ; $29  AND #
   4989 CEE2 00                                   .byte ops0 | am_nam   ; $2A  ROL A
   4990 CEE3 00                                   .byte ops0 | am_nam   ; $2B  PLD
   4991 CEE4 20                                   .byte ops2 | am_nam   ; $2C  BIT abs
   4992 CEE5 20                                   .byte ops2 | am_nam   ; $2D  AND abs
   4993 CEE6 20                                   .byte ops2 | am_nam   ; $2E  ROL abs
   4994 CEE7 30                                   .byte ops3 | am_nam   ; $2F  AND absl
                                        ;
   4996 CEE8 50                                   .byte bop1 | am_nam   ; $30  BMI abs
   4997 CEE9 18                                   .byte ops1 | am_indy  ; $31  AND (dp),Y
   4998 CEEA 14                                   .byte ops1 | am_ind   ; $32  AND (dp)
   4999 CEEB 1A                                   .byte ops1 | am_stky  ; $33  AND (offset,S),Y
   5000 CEEC 12                                   .byte ops1 | am_adrx  ; $34  BIT dp,X
   5001 CEED 12                                   .byte ops1 | am_adrx  ; $35  AND dp,X
   5002 CEEE 12                                   .byte ops1 | am_adrx  ; $36  ROL dp,X
   5003 CEEF 16                                   .byte ops1 | am_indly ; $37  AND [dp],Y
   5004 CEF0 00                                   .byte ops0 | am_nam   ; $38  SEC
   5005 CEF1 23                                   .byte ops2 | am_adry  ; $39  AND abs,Y
   5006 CEF2 00                                   .byte ops0 | am_nam   ; $3A  DEC A
   5007 CEF3 00                                   .byte ops0 | am_nam   ; $3B  TSC
   5008 CEF4 22                                   .byte ops2 | am_adrx  ; $3C  BIT abs,X
   5009 CEF5 22                                   .byte ops2 | am_adrx  ; $3D  AND abs,X
   5010 CEF6 22                                   .byte ops2 | am_adrx  ; $3E  ROL abs,X
   5011 CEF7 32                                   .byte ops3 | am_adrx  ; $3F  AND absl,X
                                        ;
   5013 CEF8 00                                   .byte ops0 | am_nam   ; $40  RTI
   5014 CEF9 17                                   .byte ops1 | am_indx  ; $41  EOR (dp,X)
   5015 CEFA 00                                   .byte ops0 | am_nam   ; $42  WDM
   5016 CEFB 19                                   .byte ops1 | am_stk   ; $43  EOR offset,S
   5017 CEFC 2B                                   .byte ops2 | am_move  ; $44  MVP sb,db
   5018 CEFD 10                                   .byte ops1 | am_nam   ; $45  EOR dp
   5019 CEFE 10                                   .byte ops1 | am_nam   ; $46  LSR dp
   5020 CEFF 15                                   .byte ops1 | am_indl  ; $47  EOR [dp]
   5021 CF00 00                                   .byte ops0 | am_nam   ; $48  PHA
   5022 CF01 91                                   .byte vops | am_imm   ; $49  EOR #
   5023 CF02 00                                   .byte ops0 | am_nam   ; $4A  LSR A
   5024 CF03 00                                   .byte ops0 | am_nam   ; $4B  PHK
   5025 CF04 20                                   .byte ops2 | am_nam   ; $4C  JMP abs
   5026 CF05 20                                   .byte ops2 | am_nam   ; $4D  EOR abs
   5027 CF06 20                                   .byte ops2 | am_nam   ; $4E  LSR abs
   5028 CF07 30                                   .byte ops3 | am_nam   ; $4F  EOR absl
                                        ;
   5030 CF08 50                                   .byte bop1 | am_nam   ; $50  BVC abs
   5031 CF09 18                                   .byte ops1 | am_indy  ; $51  EOR (dp),Y
   5032 CF0A 14                                   .byte ops1 | am_ind   ; $52  EOR (dp)
   5033 CF0B 1A                                   .byte ops1 | am_stky  ; $53  EOR (offset,S),Y
   5034 CF0C 2B                                   .byte ops2 | am_move  ; $54  MVN sb,db
   5035 CF0D 12                                   .byte ops1 | am_adrx  ; $55  EOR dp,X
   5036 CF0E 12                                   .byte ops1 | am_adrx  ; $56  LSR dp,X
   5037 CF0F 16                                   .byte ops1 | am_indly ; $57  EOR [dp],Y
   5038 CF10 00                                   .byte ops0 | am_nam   ; $58  CLI
   5039 CF11 23                                   .byte ops2 | am_adry  ; $59  EOR abs,Y
   5040 CF12 00                                   .byte ops0 | am_nam   ; $5A  PHY
   5041 CF13 00                                   .byte ops0 | am_nam   ; $5B  TCD
   5042 CF14 30                                   .byte ops3 | am_nam   ; $5C  JML absl
   5043 CF15 22                                   .byte ops2 | am_adrx  ; $5D  EOR abs,X
   5044 CF16 22                                   .byte ops2 | am_adrx  ; $5E  LSR abs,X
   5045 CF17 32                                   .byte ops3 | am_adrx  ; $5F  EOR absl,X
                                        ;
   5047 CF18 00                                   .byte ops0 | am_nam   ; $60  RTS
   5048 CF19 17                                   .byte ops1 | am_indx  ; $61  ADC (dp,X)
   5049 CF1A 60                                   .byte bop2 | am_nam   ; $62  PER
   5050 CF1B 19                                   .byte ops1 | am_stk   ; $63  ADC offset,S
   5051 CF1C 10                                   .byte ops1 | am_nam   ; $64  STZ dp
   5052 CF1D 10                                   .byte ops1 | am_nam   ; $65  ADC dp
   5053 CF1E 10                                   .byte ops1 | am_nam   ; $66  ROR dp
   5054 CF1F 15                                   .byte ops1 | am_indl  ; $67  ADC [dp]
   5055 CF20 00                                   .byte ops0 | am_nam   ; $68  PLA
   5056 CF21 91                                   .byte vops | am_imm   ; $69  ADC #
   5057 CF22 00                                   .byte ops0 | am_nam   ; $6A  ROR A
   5058 CF23 00                                   .byte ops0 | am_nam   ; $6B  RTL
   5059 CF24 24                                   .byte ops2 | am_ind   ; $6C  JMP (abs)
   5060 CF25 20                                   .byte ops2 | am_nam   ; $6D  ADC abs
   5061 CF26 20                                   .byte ops2 | am_nam   ; $6E  ROR abs
   5062 CF27 30                                   .byte ops3 | am_nam   ; $6F  ADC absl
                                        ;
   5064 CF28 50                                   .byte bop1 | am_nam   ; $70  BVS abs
   5065 CF29 18                                   .byte ops1 | am_indy  ; $71  ADC (dp),Y
   5066 CF2A 14                                   .byte ops1 | am_ind   ; $72  ADC (dp)
   5067 CF2B 1A                                   .byte ops1 | am_stky  ; $73  ADC (offset,S),Y
   5068 CF2C 12                                   .byte ops1 | am_adrx  ; $74  STZ dp,X
   5069 CF2D 12                                   .byte ops1 | am_adrx  ; $75  ADC dp,X
   5070 CF2E 12                                   .byte ops1 | am_adrx  ; $76  ROR dp,X
   5071 CF2F 16                                   .byte ops1 | am_indly ; $77  ADC [dp],Y
   5072 CF30 00                                   .byte ops0 | am_nam   ; $78  SEI
   5073 CF31 23                                   .byte ops2 | am_adry  ; $79  ADC abs,Y
   5074 CF32 00                                   .byte ops0 | am_nam   ; $7A  PLY
   5075 CF33 00                                   .byte ops0 | am_nam   ; $7B  TDC
   5076 CF34 27                                   .byte ops2 | am_indx  ; $7C  JMP (abs,X)
   5077 CF35 22                                   .byte ops2 | am_adrx  ; $7D  ADC abs,X
   5078 CF36 22                                   .byte ops2 | am_adrx  ; $7E  ROR abs,X
   5079 CF37 32                                   .byte ops3 | am_adrx  ; $7F  ADC absl,X
                                        ;
   5081 CF38 50                                   .byte bop1 | am_nam   ; $80  BRA abs
   5082 CF39 17                                   .byte ops1 | am_indx  ; $81  STA (dp,X)
   5083 CF3A 60                                   .byte bop2 | am_nam   ; $82  BRL abs
   5084 CF3B 19                                   .byte ops1 | am_stk   ; $83  STA offset,S
   5085 CF3C 10                                   .byte ops1 | am_nam   ; $84  STY dp
   5086 CF3D 10                                   .byte ops1 | am_nam   ; $85  STA dp
   5087 CF3E 10                                   .byte ops1 | am_nam   ; $86  STX dp
   5088 CF3F 15                                   .byte ops1 | am_indl  ; $87  STA [dp]
   5089 CF40 00                                   .byte ops0 | am_nam   ; $88  DEY
   5090 CF41 91                                   .byte vops | am_imm   ; $89  BIT #
   5091 CF42 00                                   .byte ops0 | am_nam   ; $8A  TXA
   5092 CF43 00                                   .byte ops0 | am_nam   ; $8B  PHB
   5093 CF44 20                                   .byte ops2 | am_nam   ; $8C  STY abs
   5094 CF45 20                                   .byte ops2 | am_nam   ; $8D  STA abs
   5095 CF46 20                                   .byte ops2 | am_nam   ; $8E  STX abs
   5096 CF47 30                                   .byte ops3 | am_nam   ; $8F  STA absl
                                        ;
   5098 CF48 50                                   .byte bop1 | am_nam   ; $90  BCC abs
   5099 CF49 18                                   .byte ops1 | am_indy  ; $91  STA (dp),Y
   5100 CF4A 14                                   .byte ops1 | am_ind   ; $92  STA (dp)
   5101 CF4B 1A                                   .byte ops1 | am_stky  ; $93  STA (offset,S),Y
   5102 CF4C 12                                   .byte ops1 | am_adrx  ; $94  STY dp,X
   5103 CF4D 12                                   .byte ops1 | am_adrx  ; $95  STA dp,X
   5104 CF4E 13                                   .byte ops1 | am_adry  ; $96  STX dp,Y
   5105 CF4F 16                                   .byte ops1 | am_indly ; $97  STA [dp],Y
   5106 CF50 00                                   .byte ops0 | am_nam   ; $98  TYA
   5107 CF51 23                                   .byte ops2 | am_adry  ; $99  STA abs,Y
   5108 CF52 00                                   .byte ops0 | am_nam   ; $9A  TXS
   5109 CF53 00                                   .byte ops0 | am_nam   ; $9B  TXY
   5110 CF54 20                                   .byte ops2 | am_nam   ; $9C  STZ abs
   5111 CF55 22                                   .byte ops2 | am_adrx  ; $9D  STA abs,X
   5112 CF56 22                                   .byte ops2 | am_adrx  ; $9E  STZ abs,X
   5113 CF57 32                                   .byte ops3 | am_adrx  ; $9F  STA absl,X
                                        ;
   5115 CF58 91                                   .byte vops | am_imm   ; $A0  LDY #
   5116 CF59 17                                   .byte ops1 | am_indx  ; $A1  LDA (dp,X)
   5117 CF5A 91                                   .byte vops | am_imm   ; $A2  LDX #
   5118 CF5B 19                                   .byte ops1 | am_stk   ; $A3  LDA offset,S
   5119 CF5C 10                                   .byte ops1 | am_nam   ; $A4  LDY dp
   5120 CF5D 10                                   .byte ops1 | am_nam   ; $A5  LDA dp
   5121 CF5E 10                                   .byte ops1 | am_nam   ; $A6  LDX dp
   5122 CF5F 15                                   .byte ops1 | am_indl  ; $A7  LDA [dp]
   5123 CF60 00                                   .byte ops0 | am_nam   ; $A8  TAY
   5124 CF61 91                                   .byte vops | am_imm   ; $A9  LDA #
   5125 CF62 00                                   .byte ops0 | am_nam   ; $AA  TAX
   5126 CF63 00                                   .byte ops0 | am_nam   ; $AB  PLB
   5127 CF64 20                                   .byte ops2 | am_nam   ; $AC  LDY abs
   5128 CF65 20                                   .byte ops2 | am_nam   ; $AD  LDA abs
   5129 CF66 20                                   .byte ops2 | am_nam   ; $AE  LDX abs
   5130 CF67 30                                   .byte ops3 | am_nam   ; $AF  LDA absl
                                        ;
   5132 CF68 50                                   .byte bop1 | am_nam   ; $B0  BCS abs
   5133 CF69 18                                   .byte ops1 | am_indy  ; $B1  LDA (dp),Y
   5134 CF6A 14                                   .byte ops1 | am_ind   ; $B2  LDA (dp)
   5135 CF6B 1A                                   .byte ops1 | am_stky  ; $B3  LDA (offset,S),Y
   5136 CF6C 12                                   .byte ops1 | am_adrx  ; $B4  LDY dp,X
   5137 CF6D 12                                   .byte ops1 | am_adrx  ; $B5  LDA dp,X
   5138 CF6E 13                                   .byte ops1 | am_adry  ; $B6  LDX dp,Y
   5139 CF6F 16                                   .byte ops1 | am_indly ; $B7  LDA [dp],Y
   5140 CF70 00                                   .byte ops0 | am_nam   ; $B8  CLV
   5141 CF71 23                                   .byte ops2 | am_adry  ; $B9  LDA abs,Y
   5142 CF72 00                                   .byte ops0 | am_nam   ; $BA  TSX
   5143 CF73 00                                   .byte ops0 | am_nam   ; $BB  TYX
   5144 CF74 22                                   .byte ops2 | am_adrx  ; $BC  LDY abs,X
   5145 CF75 22                                   .byte ops2 | am_adrx  ; $BD  LDA abs,X
   5146 CF76 23                                   .byte ops2 | am_adry  ; $BE  LDX abs,Y
   5147 CF77 32                                   .byte ops3 | am_adrx  ; $BF  LDA absl,X
                                        ;
   5149 CF78 91                                   .byte vops | am_imm   ; $C0  CPY #
   5150 CF79 17                                   .byte ops1 | am_indx  ; $C1  CMP (dp,X)
   5151 CF7A 11                                   .byte ops1 | am_imm   ; $C2  REP #
   5152 CF7B 19                                   .byte ops1 | am_stk   ; $C3  CMP offset,S
   5153 CF7C 10                                   .byte ops1 | am_nam   ; $C4  CPY dp
   5154 CF7D 10                                   .byte ops1 | am_nam   ; $C5  CMP dp
   5155 CF7E 10                                   .byte ops1 | am_nam   ; $C6  DEC dp
   5156 CF7F 15                                   .byte ops1 | am_indl  ; $C7  CMP [dp]
   5157 CF80 00                                   .byte ops0 | am_nam   ; $C8  INY
   5158 CF81 91                                   .byte vops | am_imm   ; $C9  CMP #
   5159 CF82 00                                   .byte ops0 | am_nam   ; $CA  DEX
   5160 CF83 00                                   .byte ops0 | am_nam   ; $CB  WAI
   5161 CF84 20                                   .byte ops2 | am_nam   ; $CC  CPY abs
   5162 CF85 20                                   .byte ops2 | am_nam   ; $CD  CMP abs
   5163 CF86 20                                   .byte ops2 | am_nam   ; $CE  DEC abs
   5164 CF87 30                                   .byte ops3 | am_nam   ; $CF  CMP absl
                                        ;
   5166 CF88 50                                   .byte bop1 | am_nam   ; $D0  BNE abs
   5167 CF89 18                                   .byte ops1 | am_indy  ; $D1  CMP (dp),Y
   5168 CF8A 14                                   .byte ops1 | am_ind   ; $D2  CMP (dp)
   5169 CF8B 1A                                   .byte ops1 | am_stky  ; $D3  CMP (offset,S),Y
   5170 CF8C 10                                   .byte ops1 | am_nam   ; $D4  PEI dp
   5171 CF8D 12                                   .byte ops1 | am_adrx  ; $D5  CMP dp,X
   5172 CF8E 12                                   .byte ops1 | am_adrx  ; $D6  DEC dp,X
   5173 CF8F 16                                   .byte ops1 | am_indly ; $D7  CMP [dp],Y
   5174 CF90 00                                   .byte ops0 | am_nam   ; $D8  CLD
   5175 CF91 23                                   .byte ops2 | am_adry  ; $D9  CMP abs,Y
   5176 CF92 00                                   .byte ops0 | am_nam   ; $DA  PHX
   5177 CF93 00                                   .byte ops0 | am_nam   ; $DB  STP
   5178 CF94 25                                   .byte ops2 | am_indl  ; $DC  JMP [abs]
   5179 CF95 22                                   .byte ops2 | am_adrx  ; $DD  CMP abs,X
   5180 CF96 22                                   .byte ops2 | am_adrx  ; $DE  DEC abs,X
   5181 CF97 32                                   .byte ops3 | am_adrx  ; $DF  CMP absl,X
                                        ;
   5183 CF98 91                                   .byte vops | am_imm   ; $E0  CPX #
   5184 CF99 17                                   .byte ops1 | am_indx  ; $E1  SBC (dp,X)
   5185 CF9A 11                                   .byte ops1 | am_imm   ; $E2  SEP #
   5186 CF9B 19                                   .byte ops1 | am_stk   ; $E3  SBC offset,S
   5187 CF9C 10                                   .byte ops1 | am_nam   ; $E4  CPX dp
   5188 CF9D 10                                   .byte ops1 | am_nam   ; $E5  SBC dp
   5189 CF9E 10                                   .byte ops1 | am_nam   ; $E6  INC dp
   5190 CF9F 15                                   .byte ops1 | am_indl  ; $E7  SBC [dp]
   5191 CFA0 00                                   .byte ops0 | am_nam   ; $E8  INX
   5192 CFA1 91                                   .byte vops | am_imm   ; $E9  SBC #
   5193 CFA2 00                                   .byte ops0 | am_nam   ; $EA  NOP
   5194 CFA3 00                                   .byte ops0 | am_nam   ; $EB  XBA
   5195 CFA4 20                                   .byte ops2 | am_nam   ; $EC  CPX abs
   5196 CFA5 20                                   .byte ops2 | am_nam   ; $ED  SBC abs
   5197 CFA6 20                                   .byte ops2 | am_nam   ; $EE  INC abs
   5198 CFA7 30                                   .byte ops3 | am_nam   ; $EF  SBC absl
                                        ;
   5200 CFA8 50                                   .byte bop1 | am_nam   ; $F0  BEQ abs
   5201 CFA9 18                                   .byte ops1 | am_indy  ; $F1  SBC (dp),Y
   5202 CFAA 14                                   .byte ops1 | am_ind   ; $F2  SBC (dp)
   5203 CFAB 1A                                   .byte ops1 | am_stky  ; $F3  SBC (offset,S),Y
   5204 CFAC 21                                   .byte ops2 | am_imm   ; $F4  PEA #
   5205 CFAD 12                                   .byte ops1 | am_adrx  ; $F5  SBC dp,X
   5206 CFAE 12                                   .byte ops1 | am_adrx  ; $F6  INC dp,X
   5207 CFAF 16                                   .byte ops1 | am_indly ; $F7  SBC [dp],Y
   5208 CFB0 00                                   .byte ops0 | am_nam   ; $F8  SED
   5209 CFB1 23                                   .byte ops2 | am_adry  ; $F9  SBC abs,Y
   5210 CFB2 00                                   .byte ops0 | am_nam   ; $FA  PLX
   5211 CFB3 00                                   .byte ops0 | am_nam   ; $FB  XCE
   5212 CFB4 27                                   .byte ops2 | am_indx  ; $FC  JSR (abs,X)
   5213 CFB5 22                                   .byte ops2 | am_adrx  ; $FD  SBC abs,X
   5214 CFB6 22                                   .byte ops2 | am_adrx  ; $FE  INC abs,X
   5215 CFB7 32                                   .byte ops3 | am_adrx  ; $FF  SBC absl,X
                                        ;
                                        ;
                                        ;	.X & .Y immediate mode opcodes...
                                        ;
   5220 CFB8 A0                         vopidx   .byte $a0             ;LDY #
   5221 CFB9 A2                                   .byte $a2             ;LDX #
   5222 CFBA C0                                   .byte $c0             ;CPY #
   5223 CFBB E0                                   .byte $e0             ;CPX #
   5450 = 00000004                      n_vopidx =*-vopidx             ;number of opcodes
                                        ;
                                        ;
                                        ;	addressing mode symbology lookup...
                                        ;
   5229 CFBC D4 CF                      ms_lutab .word ms_nam          ;(0000)  no symbol
   5230 CFBE DE CF                                .word ms_imm          ;(0001)  #
   5231 CFC0 D6 CF                                .word ms_addrx        ;(0010)  dp,X or abs,X
   5232 CFC2 DA CF                                .word ms_addry        ;(0011)  dp,Y or abs,Y
   5233 CFC4 E0 CF                                .word ms_ind          ;(0100)  (dp) or (abs)
   5234 CFC6 E3 CF                                .word ms_indl         ;(0101)  [dp] or [abs]
   5235 CFC8 E6 CF                                .word ms_indly        ;(0110)  [dp],Y
   5236 CFCA EB CF                                .word ms_indx         ;(0111)  (dp,X) or (abs,X)
   5237 CFCC F0 CF                                .word ms_indy         ;(1000)  (dp),Y
   5238 CFCE F8 CF                                .word ms_stk          ;(1001)  offset,S
   5239 CFD0 FC CF                                .word ms_stky         ;(1010) (offset,S),Y
   5240 CFD2 D4 CF                                .word ms_nam          ;(1011) sbnk,dbnk
                                        ;
                                        ;
                                        ;	addressing mode symbology strings...
                                        ;
   5245 CFD4 20 00                      ms_nam   .byte " ",0           ;no symbol
   5246 CFD6 20 2C 58 00                ms_addrx .byte " ,X",0         ;dp,X or addr,X
   5247 CFDA 20 2C 59 00                ms_addry .byte " ,Y",0         ;dp,Y or addr,Y
   5248 CFDE 23 00                      ms_imm   .byte "#",0           ;immediate
   5249 CFE0 28 29 00                   ms_ind   .byte "()",0          ;(dp) or (abs)
   5250 CFE3 5B 5D 00                   ms_indl  .byte "[]",0          ;[dp] or [abs]
   5251 CFE6 5B 5D 2C 59 00             ms_indly .byte "[],Y",0        ;[dp],Y
   5252 CFEB 28 2C 58 29 00             ms_indx  .byte "(,X)",0        ;(dp,X) or (abs,X)
   5253 CFF0 28 29 2C 59 00             ms_indy  .byte "(),Y",0        ;(dp),Y
   5254 CFF5 2C 24 00                   ms_move  .byte ",$",0          ;MVN/MVP sbnk,dbnk
   5255 CFF8 20 2C 53 00                ms_stk   .byte " ,S",0         ;offset,S
   5256 CFFC 28 2C 53 29 2C 59 00       ms_stky  .byte "(,S),Y",0      ;(offset,S),Y
                                        ;
                                        ;================================================================================
                                        ;
                                        ;CONSOLE DISPLAY CONTROL STRINGS
                                        ;
   5262 D003 1B 28                      dc_bf +         .byte a_esc,"("
   5262 D005 1B 47 34                 +            .byte a_esc,"G4"
                                                            ;enable reverse foreground
   5263 D008 00                                   .byte 0
                                        ;
   5265 D009 08                         dc_bs +         .byte a_bs
   5265 D00A 1B 57                    +   +         .byte a_esc,"W"
                                        
                                                            ;destructive backspace
   5267 D00C 00                                   .byte 0
                                        ;
   5269 D00D 1B 54                      dc_cl +         .byte a_esc,"T"
                                                            ;clear to end of line 
   5270 D00F 00                                   .byte 0
                                        ;
   5272 D010 1B 60 31                   dc_cn +         .byte a_esc,"`1"
                                                            ;cursor on
   5273 D013 00                                   .byte 0
                                        ;
   5275 D014 1B 60 30                   dc_co +         .byte a_esc,"`0"
                                                            ;cursor off
   5276 D017 00                                   .byte 0
                                        ;
   5278 D018 1B 28                      dc_er +         .byte a_esc,"("
   5278 D01A 1B 47 30                 +            .byte a_esc,"G0"
                                                            ;enable normal foreground
   5279 D01D 00                                   .byte 0
                                        ;
   5281 D01E 0D                         dc_lf ++         .byte a_cr
                                     +   
   5281 D01F 0A                       +            .byte a_lf
                                                            ;newline
   5282 D020 00                                   .byte 0
                                        ;
                                        ;================================================================================
                                        ;
                                        ;TEXT STRINGS
                                        ;
   5288 D021 07                         mm_brk +         .byte a_bel
                                        
   5289 D022 0D                       +   +         .byte a_cr
                                     +   
   5289 D023 0A                       +            .byte a_lf
                                        
   5290 D024 2A 2A 42 52 4B                       .byte "**BRK"
   5291 D029 0D                       +   +         .byte a_cr
                                     +   
   5291 D02A 0A                       +            .byte a_lf
                                        
   5292 D02B 00                                   .byte 0
                                        ;
   5294 D02C 0D                         mm_entry ++         .byte a_cr
                                     +   
   5294 D02D 0A                       +            .byte a_lf
                                        
   5295 D02E 0A 53 75 70 65 72 6D 6F              .byte a_lf,"Supermon 832 "
   5295 D036 6E 20 38 33 32 20         
   5296 D03C 31                       +            .byte "1"
   5296 D03D 2E                       +            .byte "."
   5296 D03E 30                       +            .byte "0"
   5296 D03F 2E                       +            .byte "."
   5296 D040 30                       +            .byte "0"
                                        
   5297 D041 20                                   .byte " "
   5298 D042 0D                       +   +         .byte a_cr
                                     +   
   5298 D043 0A                       +            .byte a_lf
                                        
   5299 D044 00                                   .byte 0
                                        ;
   5301 D045 20 2A 2A 45 52 52 20 20    mm_err   .byte " **ERR  ",0
   5301 D04D 00                        
                                        ;
   5303 D04E 0D                         mm_prmpt ++         .byte a_cr
                                     +   
   5303 D04F 0A                       +            .byte a_lf
                                        
   5304 D050 1B 28                    +            .byte a_esc,"("
   5304 D052 1B 47 30                 +            .byte a_esc,"G0"
                                        
   5305 D055 2E 00                                .byte ".",0
                                        ;
   5307 D057 0D                         mm_regs ++         .byte a_cr
                                     +   
   5307 D058 0A                       +            .byte a_lf
                                        
   5308 D059 20 20 20 20 20 20 20 20              .byte "                    31"
   5308 D061 20 20 20 20 20 20 20 20   
   5308 D069 20 20 20 20 33 31         
   5309 D06F 0D                       +   +         .byte a_cr
                                     +   
   5309 D070 0A                       +            .byte a_lf
                                        
   5310 D071 20 20 20 20 20 43 53 20              .byte "     CS    PB  PC   26NVmxDIZC    .A       .X       .Y       SP  "
   5310 D079 20 20 20 50 42 20 20 50   
   5310 D081 43 20 20 20 32 36 4E 56   
   5310 D089 6D 78 44 49 5A 43 20 20   
   5310 D091 20 20 2E 41 20 20 20 20   
   5310 D099 20 20 20 2E 58 20 20 20   
   5310 D0A1 20 20 20 20 2E 59 20 20   
   5310 D0A9 20 20 20 20 20 53 50 20   
   5310 D0B1 20                        
   5311 D0B2 0D                       +   +         .byte a_cr
                                     +   
   5311 D0B3 0A                       +            .byte a_lf
                                        
   5312 D0B4 3B 20 00                             .byte "; ",0
   5313 D0B7 0D                         mm_regs2 ++         .byte a_cr
                                     +   
   5313 D0B8 0A                       +            .byte a_lf
                                        
   5314 D0B9 20 20 20 20 20 44 53 20              .byte "     DS    DP  DB"
   5314 D0C1 20 20 20 44 50 20 20 44   
   5314 D0C9 42                        
   5315 D0CA 0D                       +   +         .byte a_cr
                                     +   
   5315 D0CB 0A                       +            .byte a_lf
                                        
   5316 D0CC 3B 20 00                             .byte "; ",0
                                        ;
   5318 D0CF 07                         mm_rts +         .byte a_bel
                                        
   5319 D0D0 0D                       +   +         .byte a_cr
                                     +   
   5319 D0D1 0A                       +            .byte a_lf
                                        
   5320 D0D2 2A 2A 52 54 53                       .byte "**RTS"
   5321 D0D7 0D                       +   +         .byte a_cr
                                     +   
   5321 D0D8 0A                       +            .byte a_lf
                                        
   5322 D0D9 00                                   .byte 0
                                        ;
                                        ;================================================================================
                                        ;
                                        ;VECTOR STORAGE
                                        ;
                                        ;
   5626 = 0000D0DA                      _txtend_ =*                     ;end of program text
                                        ;
                                        ;================================================================================
                                        	;.end
Finitron FT832 assembler   version 1.4   Sat Nov 21 21:34:43 2015     Page 1
FTBios816.asm


                                        .include "supermon832.asm"
Finitron FT832 assembler   version 1.4   Sat Nov 21 21:34:43 2015     Page 1
FAC1ToString.asm

                                        ; ============================================================================
                                        ; FAC1ToString.asm
                                        ;        __
                                        ;   \\__/ o\    (C) 2014  Robert Finch, Stratford
                                        ;    \  __ /    All rights reserved.
                                        ;     \/_//     robfinch<remove>@finitron.ca
                                        ;       ||
                                        ;  
                                        ;
                                        ; This source file is free software: you can redistribute it and/or modify 
                                        ; it under the terms of the GNU Lesser General Public License as published 
                                        ; by the Free Software Foundation, either version 3 of the License, or     
                                        ; (at your option) any later version.                                      
                                        ;                                                                          
                                        ; This source file is distributed in the hope that it will be useful,      
                                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                                        ; GNU General Public License for more details.                             
                                        ;                                                                          
                                        ; You should have received a copy of the GNU General Public License        
                                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                                        ;                                                                          
                                        ; ============================================================================
                                        ;
                                        ; This code is a heavily modified version of the floating point to string
                                        ; conversion routine which is a part of Lee Davison's EhBASIC.
                                        ;
   5658 = 0000000000000095                            Cvaral		= $95		; current var address low byte
   5659 = 00000096                      Cvarah		= Cvaral+1	; current var address high byte
   5660 = 00000000000000A8                            numexp		= $A8		; string to float number exponent count
   5661 = 00000000000000AA                            expcnt		= $AA		; string to float exponent count
   5662 = 00000000000000BA                            Sendl			= $BA	; BASIC pointer temp low byte
   5663 = 00000000000000BB                            Sendh			= $BB	; BASIC pointer temp low byte
                                        
   5665 = 00000000000003A0                            Decss		= $3A0		; number to decimal string start
   5666 = 000003A1                      Decssp1		= Decss+1	; number to decimal string start
   5667 = 0000000000000001                            FP_ADD		EQU		1
   5668 = 0000000000000002                            FP_SUB		EQU		2
   5669 = 0000000000000003                            FP_MUL		EQU		3
   5670 = 0000000000000004                            FP_DIV		EQU		4
   5671 = 0000000000000005                            FP_FIX2FLT	EQU		5
   5672 = 0000000000000006                            FP_FLT2FIX	EQU		6
   5673 = 0000000000000007                            FP_ABS		EQU		7
   5674 = 0000000000000010                            FP_NEG		EQU		16
   5675 = 0000000000000011                            FP_SWAP		EQU		17
   5676 = 0000000000000083                            FIXED_MUL	EQU		$83
   5677 = 0000000000000081                            FIXED_ADD	EQU		$81
   5678 = 0000000000000082                            FIXED_SUB	EQU		$82
                                        ;parameter FIXED_DIV = 8'h84;
                                        ;parameter FIXED_ABS = 8'h87;
                                        ;parameter FIXED_NEG = 8'h90;
   5682 = 0000000000FEA20E                            FP_CMDREG	EQU		$FEA20E
   5683 = 0000000000FEA20E                            FP_STATREG	EQU		$FEA20E
   5684 = 0000000000FEA200                            FAC1		EQU		$FEA200
   5685 = 0000000000FEA200                            FAC1_5		EQU		$FEA200
   5686 = 0000000000FEA202                            FAC1_4		EQU		$FEA202
   5687 = 0000000000FEA204                            FAC1_3		EQU		$FEA204
   5688 = 0000000000FEA206                            FAC1_2		EQU		$FEA206
   5689 = 0000000000FEA208                            FAC1_1		EQU		$FEA208
   5690 = 0000000000FEA208                            FAC1_msw	EQU		$FEA208
   5691 = 0000000000FEA20A                            FAC1_e		EQU		$FEA20A
   5692 = 0000000000FEA210                            FAC2		EQU		$FEA210
                                        
                                           	CPU		W65C816S
                                           	NDX		16
                                           	MEM		16
                                           	
                                           public FAC1ToString:
                                           
                                           ; The first chunk of code determines if the number is positive or negative
                                           ; and spits out the appropriate sign. Next it takes the absolute value of
                                           ; the accumulator so following code only has to deal with positive numbers.
                                           
   5407 00D0DA A0 00 00                     	LDY	#$00			; set index = 1
   5408 00D0DD AF 08 A2 FE                  	LDA	FAC1_msw		; test FAC1 sign (b15) (Can't use BIT)
   5409 00D0E1 10 0E                        	BPL	.0002		; branch if +ve
   5410 00D0E3 A9 2D 00                     	LDA	#'-'			; else character = "-"
   5411 00D0E6 99 A0 03                     	STA	Decss,Y		; save leading character (" " or "-")
   5412 00D0E9 A9 10 00                     	LDA	#FP_NEG		; make the FAC positive
   5413 00D0EC 20 13 D3                     	JSR	FPCommandWait
   5414 00D0EF 80 06                        	BRA	.0001
   5415 00D0F1                             .0002:
   5416 00D0F1 A9 20 00                     	LDA	#$20			; character = " " (assume +ve)
   5417 00D0F4 99 A0 03                     	STA	Decss,Y
   5418 00D0F7                             .0001:
   5419 00D0F7 84 BA                        	STY	Sendl			; save index
                                           
                                           ; This little bit of code check for a zero exponent which indicates a
                                           ; value of zero.
                                           
   5424 00D0F9 AF 0A A2 FE                  	LDA	FAC1_e		; get FAC1 exponent
   5425 00D0FD AA                           	TAX
   5426 00D0FE D0 06                        	BNE	LAB_2989		; branch if FAC1<>0
                                           					; exponent was $00 so FAC1 is 0
   5428 00D100 A9 30 00                     	LDA	#'0'			; set character = "0"
   5429 00D103 82 93 01                     	BRL	LAB_2A89		; save last character, [EOT] and exit
                                           
                                           ; This loop attempts to make small values more significant, so that there are
                                           ; fewer leading zeros in the value. (The exponent is decremented so that it
                                           ; corresponds). Because of the potential for extremely small values looping is
                                           ; limited. The problem is the 16 bit exponent can allow for much smaller
                                           ; values than an 8 bit exponent would and we don't want to loop for thousands
                                           ; of iterations in order to display a value that's almost zero.
                                           
                                           					; FAC1 is some non zero value
   5439 00D106                             LAB_2989
   5440 00D106 84 BA                        	STY	Sendl			; save off .Y
   5441 00D108 A0 67 06                     	LDY #1639			; max number of retries
   5442 00D10B A9 00 00                     	LDA	#$00			; clear (number exponent count)
   5443 00D10E 85 A8                        	STA numexp
   5444 00D110                             LOOP_MBMILLION:
   5445 00D110 E0 00 80                     	CPX	#$8000			; compare FAC1 exponent with $8000 (>1.00000)
   5446 00D113 B0 1A                        	BCS	LAB_299A		; branch if FAC1=>1
                                           					; FAC1<1
   5448 00D115 F4 54 D3                     	PEA	A_MILLION		; multiply FAC * 1,000,000
   5449 00D118 20 C8 D2                     	JSR	LOAD_FAC2		; 
   5450 00D11B 68                           	PLA					; get rid of parameter
   5451 00D11C 20 C2 D2                     	JSR	FMUL
   5452 00D11F A5 A8                        	LDA numexp
   5453 00D121 38                           	SEC
   5454 00D122 E9 06 00                     	SBC	#6				; set number exponent count (-6)
   5455 00D125 85 A8                        	STA numexp
   5456 00D127 AF 0A A2 FE                  	LDA FAC1_e
   5457 00D12B AA                           	TAX
   5458 00D12C 88                           	DEY
   5459 00D12D 10 E1                        	BPL	LOOP_MBMILLION
                                           
   5461 00D12F                             LAB_299A
   5462 00D12F A4 BA                        	LDY	Sendl		; get back .Y
                                           
                                           ; These two loops coerce the value of the FAC to be between 100,000 and
                                           ; 1,000,000. This gives a maximum of six digits before the decimal point
                                           ; in scientific notation.
                                           
                                           ; This loop divides by 10 until the value in the FAC is less than 1,000,000
                                           ;
   5470 00D131                             LOOP_DB10:
   5471 00D131 F4 6C D3                     	PEA	MAX_BEFORE_SCI	; set pointer low byte to 999999.4375 (max before sci note)
   5472 00D134 20 C8 D2                     	JSR	LOAD_FAC2		; compare FAC1 with (AY)
   5473 00D137 68                           	PLA					; get rid of parameter
   5474 00D138 AF 0E A2 FE                  	LDA FP_CMDREG
   5475 00D13C 89 08 00                     	BIT	#$08			; test equals bit
   5476 00D13F D0 28                        	BNE	LAB_29C3		; exit if FAC1 = (AY)
   5477 00D141 89 04 00                     	BIT	#$04			; test greater than bit
   5478 00D144 F0 07                        	BEQ	LOOP_MB10		; go do *10 if FAC1 < (AY)
                                           
   5480 00D146                             LAB_29B9
   5481 00D146 20 00 D3                     	JSR	DivideByTen		; divide by 10
   5482 00D149 E6 A8                        	INC	numexp			; increment number exponent count
   5483 00D14B 80 E4                        	BRA	LOOP_DB10		; go test again (branch always)
                                           
                                           ; This loop multiplies the value by 10 until it's greater than
                                           ; 100,000.
                                           					; FAC1 < (AY)
   5488 00D14D                             LOOP_MB10
   5489 00D14D F4 84 D3                     	PEA CONST_9375		; set pointer to 99999.9375
   5490 00D150 20 C8 D2                     	JSR	LOAD_FAC2		; compare FAC1 with (AY)
   5491 00D153 68                           	PLA					; get rid of parameter
   5492 00D154 AF 0E A2 FE                  	LDA FP_CMDREG
   5493 00D158 89 08 00                     	BIT #$08
   5494 00D15B D0 05                        	BNE	LAB_29B2		; branch if FAC1 = (AY) (allow decimal places)
   5495 00D15D 89 04 00                     	BIT #$04
   5496 00D160 D0 07                        	BNE	LAB_29C0		; branch if FAC1 > (AY) (no decimal places)
                                           					; FAC1 <= (AY)
   5498 00D162                             LAB_29B2
   5499 00D162 20 F3 D2                     	JSR	MultiplyByTen	; multiply by 10
   5500 00D165 C6 A8                        	DEC	numexp		; decrement number exponent count
   5501 00D167 80 E4                        	BRA	LOOP_MB10		; go test again (branch always)
                                           
                                           ; now we have just the digits to do
                                           
   5505 00D169                             LAB_29C0
                                           ;	JSR	AddPoint5		; add 0.5 to FAC1 (round FAC1)
   5507 00D169                             LAB_29C3
                                           ;	JSR	FloatToFixed	; convert FAC1 floating-to-fixed
   5509 00D169 A2 01 00                     	LDX	#$01			; set default digits before dp = 1
   5510 00D16C A5 A8                        	LDA	numexp		; get number exponent count
   5511 00D16E 18                           	CLC				; clear carry for add
   5512 00D16F 69 07 00                     	ADC	#$07			; up to 6 digits before point
   5513 00D172 30 0A                        	BMI	LAB_29D8		; if -ve then 1 digit before dp
                                           
   5515 00D174 C9 08 00                     	CMP	#$08			; A>=8 if n>=1E6
   5516 00D177 B0 06                        	BCS	LAB_29D9		; branch if >= $08
                                           
                                           					; carry is clear
   5519 00D179 AA                           	TAX				; copy to A
   5520 00D17A CA                           	DEX				; take 1 from digit count
   5521 00D17B A9 02 00                     	LDA	#$02			;.set exponent adjust
                                           
   5523 00D17E                             LAB_29D8
   5524 00D17E 38                           	SEC				; set carry for subtract
   5525 00D17F                             LAB_29D9
   5526 00D17F E9 02 00                     	SBC	#$02			; -2
   5527 00D182 85 AA                        	STA	expcnt		;.save exponent adjust
   5528 00D184 86 A8                        	STX	numexp		; save digits before dp count
   5529 00D186 8A                           	TXA				; copy to A
   5530 00D187 F0 02                        	BEQ	LAB_29E4		; branch if no digits before dp
                                           
   5532 00D189 10 15                        	BPL	LAB_29F7		; branch if digits before dp
                                           
   5534 00D18B                             LAB_29E4
   5535 00D18B A4 BA                        	LDY	Sendl			; get output string index
   5536 00D18D A9 2E 00                     	LDA	#'.'			; character "."
   5537 00D190 C8                           	INY				; increment index
   5538 00D191 99 A0 03                     	STA	Decss,Y		; save to output string
   5539 00D194 8A                           	TXA				;.
   5540 00D195 F0 07                        	BEQ	LAB_29F5		;.
                                           
   5542 00D197 A9 30 00                     	LDA	#'0'			; character "0"
   5543 00D19A C8                           	INY				; increment index
   5544 00D19B 99 A0 03                     	STA	Decss,Y		; save to output string
   5545 00D19E                             LAB_29F5
   5546 00D19E 84 BA                        	STY	Sendl			; save output string index
                                           
   5548 00D1A0                             LAB_29F7
   5549 00D1A0 A2 30 00                     	LDX	#'0'			; holds onto the digit value
                                           
                                           ; Now loop subtracting 100,000 as many times as we can. The value was coerced
                                           ; to be between 100,000 and 1,000,000. Count the number of times subtraction
                                           ; can be done successfully.
                                           ;
   5555 00D1A3                             LAB_29FB
   5556 00D1A3 F4 60 D3                     	PEA CONST_100000
   5557 00D1A6 20 C8 D2                     	JSR LOAD_FAC2	; load FAC2 with 100,000
   5558 00D1A9 68                           	PLA				; get rid of parameter
   5559 00D1AA AF 0E A2 FE                  	LDA FP_STATREG
   5560 00D1AE 89 04 00                     	BIT #$04		; Is FAC1 > 100,000 ?
   5561 00D1B1 F0 0F                        	BEQ	.0005		; branch if not
   5562 00D1B3 A9 11 00                     	LDA #FP_SWAP	; subtract is FAC2-FAC1!
   5563 00D1B6 20 13 D3                     	JSR FPCommandWait;
   5564 00D1B9 A9 02 00                     	LDA #FP_SUB		; subtract 100,000 from the mantissa.
   5565 00D1BC 20 13 D3                     	JSR FPCommandWait
   5566 00D1BF E8                           	INX				; increment the value of the digit
   5567 00D1C0 80 E1                        	BRA	LAB_29FB	; try again
   5568 00D1C2                             .0005:
   5569 00D1C2 8A                           	TXA
   5570 00D1C3 A4 BA                        	LDY	Sendl			; get output string index
   5571 00D1C5 C8                           	INY				; increment output string index
   5572 00D1C6 8A                           	TXA
   5573 00D1C7 99 A0 03                     	STA	Decss,Y		; save to output string
   5574 00D1CA C6 A8                        	DEC	numexp		; decrement # of characters before the dp
   5575 00D1CC D0 07                        	BNE	LAB_2A3B		; branch if still characters to do
                                           				; else output the point
   5577 00D1CE A9 2E 00                     	LDA	#'.'			; character "."
   5578 00D1D1 C8                           	INY				; increment output string index
   5579 00D1D2 99 A0 03                     	STA	Decss,Y		; save to output string
   5580 00D1D5                             LAB_2A3B
   5581 00D1D5 84 BA                        	STY	Sendl		; save output string index
                                           	; We subtracted until the value was < 100,000 so multiply the
                                           	; remainder upwards to get the next digit.
   5584 00D1D7 20 F3 D2                     	JSR	MultiplyByTen	; If not, multiply by 10
   5585 00D1DA C0 1B 00                     	CPY #27			; converted (+/- . incl)
   5586 00D1DD 90 C1                        	BCC	LAB_29F7
                                           					; now remove trailing zeroes
   5588 00D1DF                             .RemoveTrailingZeros
   5589 00D1DF B9 A0 03                     	LDA	Decss,Y		; get character from output string
   5590 00D1E2 29 FF 00                     	AND	#$FF		; mask to a byte
   5591 00D1E5 88                           	DEY				; decrement output string index
   5592 00D1E6 C9 30 00                     	CMP	#'0'			; compare with "0"
   5593 00D1E9 F0 F4                        	BEQ	.RemoveTrailingZeros	; loop until non "0" character found
                                           
   5595 00D1EB C9 2E 00                     	CMP	#'.'			; compare with "."
   5596 00D1EE F0 01                        	BEQ	LAB_2A58		; branch if was dp
                                           
                                           					; restore last character
   5599 00D1F0 C8                           	INY				; increment output string index
   5600 00D1F1                             LAB_2A58
   5601 00D1F1 A9 2B 00                     	LDA	#'+'			; character "+"
   5602 00D1F4 A6 AA                        	LDX	expcnt		; get exponent count
   5603 00D1F6 F0 FF A2 00                  	LBEQ	LAB_2A8C		; if zero go set null terminator and exit
                                           
                                           					; exponent isn't zero so write exponent
   5606 00D1FA 10 0A                        	BPL	LAB_2A68		; branch if exponent count +ve
                                           
   5608 00D1FC A9 00 00                     	LDA	#$00			; clear A
   5609 00D1FF 38                           	SEC				; set carry for subtract
   5610 00D200 E5 AA                        	SBC	expcnt		; subtract exponent count adjust (convert -ve to +ve)
   5611 00D202 AA                           	TAX				; copy exponent count to X
   5612 00D203 A9 2D 00                     	LDA	#'-'			; character "-"
                                           
                                           ; We must keep moving forwards through the string because the acc is storing
                                           ; two bytes.
                                           
   5617 00D206                             LAB_2A68
   5618 00D206 48                           	PHA
   5619 00D207 A9 45 00                     	LDA	#'E'			; character "E"
   5620 00D20A 99 A1 03                     	STA	Decss+1,Y		; save exponent sign to output string
   5621 00D20D 68                           	PLA
   5622 00D20E 99 A2 03                     	STA	Decss+2,Y		; save to output string
   5623 00D211 8A                           	TXA				; get exponent count back
                                           
                                           ; do highest exponent digit
   5626 00D212 64 BA                        	STZ Sendl
   5627 00D214 A2 2F 00                     	LDX	#'0'-1		; one less than "0" character
   5628 00D217 38                           	SEC				; set carry for subtract
   5629 00D218 E8                          .0001:				
   5630 00D219 E9 10 27                     	SBC	#10000
   5631 00D21C B0 FA                        	BCS .0001
   5632 00D21E 69 10 27                     	ADC #10000
   5633 00D221 E0 30 00                     	CPX #'0'
   5634 00D224 F0 09                        	BEQ .0005
   5635 00D226 E6 BA                        	INC Sendl
   5636 00D228 48                           	PHA
   5637 00D229 8A                           	TXA
   5638 00D22A 99 A3 03                     	STA Decss+3,Y
   5639 00D22D 68                           	PLA
   5640 00D22E C8                           	INY
                                           ; do the next exponent digit
   5642 00D22F                             .0005:
   5643 00D22F A2 2F 00                     	LDX #'0'-1
   5644 00D232 38                           	SEC
   5645 00D233                             .0002:
   5646 00D233 E8                           	INX
   5647 00D234 E9 E8 03                     	SBC #1000
   5648 00D237 B0 FA                        	BCS .0002
   5649 00D239 69 E8 03                     	ADC #1000
   5650 00D23C 46 BA                        	LSR Sendl
   5651 00D23E B0 05                        	BCS .00010
   5652 00D240 E0 30 00                     	CPX #'0'
   5653 00D243 F0 09                        	BEQ .0006
   5654 00D245                             .00010:
   5655 00D245 E6 BA                        	INC Sendl
   5656 00D247 48                           	PHA
   5657 00D248 8A                           	TXA
   5658 00D249 99 A3 03                     	STA Decss+3,Y
   5659 00D24C 68                           	PLA
   5660 00D24D C8                           	INY
                                           ; and the next
   5662 00D24E                             .0006:
   5663 00D24E A2 2F 00                     	LDX	#'0'-1
   5664 00D251 38                           	SEC
   5665 00D252                             .0003:
   5666 00D252 E8                           	INX
   5667 00D253 E9 64 00                     	SBC #100
   5668 00D256 B0 FA                        	BCS .0003
   5669 00D258 69 64 00                     	ADC #100
   5670 00D25B 46 BA                        	LSR Sendl
   5671 00D25D B0 05                        	BCS .00011
   5672 00D25F E0 30 00                     	CPX #'0'
   5673 00D262 F0 09                        	BEQ .0007
   5674 00D264                             .00011:
   5675 00D264 E6 BA                        	INC Sendl
   5676 00D266 48                           	PHA
   5677 00D267 8A                           	TXA
   5678 00D268 99 A3 03                     	STA Decss+3,Y
   5679 00D26B 68                           	PLA
   5680 00D26C C8                           	INY
                                           
   5682 00D26D                             .0007:
   5683 00D26D A2 2F 00                     	LDX #'0'-1
   5684 00D270 38                           	SEC
   5685 00D271                             .0004:
   5686 00D271 E8                           	INX
   5687 00D272 E9 0A 00                     	SBC #10
   5688 00D275 B0 FA                        	BCS .0004
   5689 00D277 69 0A 00                     	ADC #10
   5690 00D27A 46 BA                        	LSR Sendl
   5691 00D27C B0 05                        	BCS .00012
   5692 00D27E E0 30 00                     	CPX #'0'
   5693 00D281 F0 09                        	BEQ .0008
   5694 00D283                             .00012:
   5695 00D283 E6 BA                        	INC Sendl
   5696 00D285 48                           	PHA
   5697 00D286 8A                           	TXA
   5698 00D287 99 A3 03                     	STA Decss+3,Y
   5699 00D28A 68                           	PLA
   5700 00D28B C8                           	INY
                                           
   5702 00D28C                             .0008:
   5703 00D28C 69 30 00                     	ADC #'0'
   5704 00D28F 99 A3 03                     	STA Decss+3,Y
   5705 00D292 A9 00 00                     	LDA	#$00			; set null terminator
   5706 00D295 99 A4 03                     	STA	Decss+4,Y		; save to output string
   5707 00D298 60                           	RTS					; go set string pointer (AY) and exit (branch always)
                                           
   5709 00D299                             LAB_2A89
   5710 00D299 99 A0 03                     	STA	Decss,Y		; save last character to output string
                                           					; set null terminator and exit
   5712 00D29C                             LAB_2A8C
   5713 00D29C A9 00 00                     	LDA	#$00			; set null terminator
   5714 00D29F 99 A1 03                     	STA	Decss+1,Y		; save after last character
                                           
   5716 00D2A2                             LAB_2A91
                                           ;	LDA	#<Decssp1		; set result string low pointer
                                           ;	LDY	#>Decssp1		; set result string high pointer
   5719 00D2A2 60                           	RTS
                                           
   5721 00D2A3                             LAB_25FB:
   5722 00D2A3 A9 11 00                     	LDA		#FP_SWAP
   5723 00D2A6 20 13 D3                     	JSR		FPCommandWait
   5724 00D2A9 A0 00 00                     	LDY		#0
   5725 00D2AC BB                           	TYX
   5726 00D2AD                             .0002:
   5727 00D2AD B3 03                        	LDA		(3,S),Y
   5728 00D2AF 9F 00 A2 FE                  	STA		FAC1,X
   5729 00D2B3 C8                           	INY
   5730 00D2B4 C8                           	INY
   5731 00D2B5 E8                           	INX
   5732 00D2B6 E8                           	INX
   5733 00D2B7 E0 0C 00                     	CPX		#12
   5734 00D2BA D0 F1                        	BNE		.0002
   5735 00D2BC A9 05 00                     	LDA		#FP_FIX2FLT
   5736 00D2BF 20 13 D3                     	JSR		FPCommandWait
   5737 00D2C2                             FMUL:
   5738 00D2C2 A9 03 00                     	LDA		#FP_MUL
   5739 00D2C5 4C 13 D3                     	JMP		FPCommandWait
   5740 00D2C8                             	
   5741 00D2C8 DA                           	PHX
   5742 00D2C9 5A                           	PHY
   5743 00D2CA A0 00 00                     	LDY		#0
   5744 00D2CD BB                           	TYX
   5745 00D2CE                             .0002:
   5746 00D2CE B3 07                        	LDA		(7,s),Y
   5747 00D2D0 9F 10 A2 FE                  	STA		FAC2,X
   5748 00D2D4 C8                           	INY
   5749 00D2D5 C8                           	INY
   5750 00D2D6 E8                           	INX
   5751 00D2D7 E8                           	INX
   5752 00D2D8 E0 0C 00                     	CPX		#12
   5753 00D2DB D0 F1                        	BNE		.0002
   5754 00D2DD 7A                           	PLY
   5755 00D2DE FA                           	PLX
   5756 00D2DF 60                           	RTS
   5757 00D2E0                             	
   5758 00D2E0 A9 06 00                     	LDA		#FP_FLT2FIX
   5759 00D2E3 4C 13 D3                     	JMP		FPCommandWait
   5760 00D2E6                             	
   5761 00D2E6 F4 90 D3                     	PEA		CONST_POINT5
   5762 00D2E9 20 C8 D2                     	JSR		LOAD_FAC2
   5763 00D2EC 68                           	PLA
   5764 00D2ED A9 01 00                     	LDA		#FP_ADD
   5765 00D2F0 4C 13 D3                     	JMP		FPCommandWait
   5766 00D2F3                             	
   5767 00D2F3 F4 78 D3                     	PEA		TEN_AS_FLOAT
   5768 00D2F6 20 C8 D2                     	JSR		LOAD_FAC2
   5769 00D2F9 68                           	PLA
   5770 00D2FA A9 03 00                     	LDA		#FP_MUL
   5771 00D2FD 4C 13 D3                     	JMP		FPCommandWait
                                           	
   5773 00D300 F4 78 D3                     	PEA		TEN_AS_FLOAT
   5774 00D303 20 C8 D2                     	JSR		LOAD_FAC2
   5775 00D306 68                           	PLA
   5776 00D307 20 10 D3                     	JSR		SwapFACs
   5777 00D30A A9 04 00                     	LDA		#FP_DIV
   5778 00D30D 4C 13 D3                     	JMP		FPCommandWait
   5779 00D310                             	
   5780 00D310 A9 11 00                     	LDA		#FP_SWAP
                                           
                                           ; Issue a command to the FP unit and wait for it to complete
                                           ;
                                           public FPCommandWait:
   5785 00D313 48                           	PHA
   5786 00D314                             .0001:
   5787 00D314 AF 0E A2 FE                  	LDA		FP_STATREG	; get the status register
   5788 00D318 89 80 00                     	BIT		#$80		; check for busy bit
   5789 00D31B D0 F7                        	BNE		.0001		; if busy go back
   5790 00D31D 68                           	PLA					; to pop acc
   5791 00D31E 8F 0E A2 FE                  	STA		FP_CMDREG	; store the command
   5792 00D322 60                           	RTS
                                           
                                           ; Display the FAC1 as a hex number
                                           ;
                                           public DispFAC1:
   5797 00D323 AF 0A A2 FE                  	LDA FAC1_e
   5798 00D327 20 B6 E8                     	JSR DispWord
   5799 00D32A AF 08 A2 FE                  	LDA	FAC1_1
   5800 00D32E 20 B6 E8                     	JSR	DispWord
   5801 00D331 AF 06 A2 FE                  	LDA FAC1_2
   5802 00D335 20 B6 E8                     	JSR	DispWord
   5803 00D338 AF 04 A2 FE                  	LDA FAC1_3
   5804 00D33C 20 B6 E8                     	JSR DispWord
   5805 00D33F AF 02 A2 FE                  	LDA FAC1_4
   5806 00D343 20 B6 E8                     	JSR DispWord
   5807 00D346 AF 00 A2 FE                  	LDA FAC1_5
   5808 00D34A 20 B6 E8                     	JSR DispWord
   5809 00D34D A9 20 00                     	LDA #' '
   5810 00D350 20 1C E8                     	JSR OutChar
   5811 00D353 60                           	RTS
                                           ;
                                           ; 1,000,000 as a floating point number
                                           ;
   5815 00D354                             A_MILLION:	; $F4240
   5816 00D354 00 00                        	dw		$0000
   5817 00D356 00 00                        	dw		$0000
   5818 00D358 00 00                        	dw		$0000
   5819 00D35A 00 00                        	dW		$0000
   5820 00D35C 12 7A                        	dw		$7A12
   5821 00D35E 13 80                        	dw		$8013
                                           
   5823 00D360                             CONST_100000:
                                           	;186A0
   5825 00D360 00 00                        	dw		$0000
   5826 00D362 00 00                        	dw		$0000
   5827 00D364 00 00                        	dw		$0000
   5828 00D366 00 00                        	dw		$0000
   5829 00D368 A8 61                        	dw		$61A8
   5830 00D36A 10 80                        	dw		$8010
                                           ; The constant 999999.4375 as hex
                                           ; 01.11_1010_0001_0001_1111_1011_1000_00000000000000000000000000
   5833 00D36C                             MAX_BEFORE_SCI:
   5834 00D36C 00 00                        	dw  $0000
   5835 00D36E 00 00                        	dw  $0000
   5836 00D370 00 00                        	dw	$0000
   5837 00D372 80 FB                        	dw	$FB80
   5838 00D374 11 7A                        	dw	$7A11
   5839 00D376 13 80                        	dw	$8013
                                           
   5841 00D378                             TEN_AS_FLOAT:
   5842 00D378 00 00                        	dw	$0000
   5843 00D37A 00 00                        	dw	$0000
   5844 00D37C 00 00                        	dw	$0000
   5845 00D37E 00 00                        	dw	$0000
   5846 00D380 00 50                        	dw	$5000
   5847 00D382 03 80                        	dw	$8003
                                           
                                           ; 99999.9375
                                           ; 01.10_0001_1010_0111_1111_1100_000000000000000000000000000000
                                           ;
   5852 00D384                             CONST_9375:
   5853 00D384 00 00                        	dw	$0000
   5854 00D386 00 00                        	dw	$0000
   5855 00D388 00 00                        	dw	$0000
   5856 00D38A 00 FC                        	dw	$FC00
   5857 00D38C A7 61                        	dw	$61A7
   5858 00D38E 10 80                        	dw	$8010
                                           
                                           ; 0.5
   5861 00D390                             CONST_POINT5:
   5862 00D390 00 00                        	dw	$0000
   5863 00D392 00 00                        	dw	$0000
   5864 00D394 00 00                        	dw	$0000
   5865 00D396 00 00                        	dw	$0000
   5866 00D398 00 40                        	dw	$4000
   5867 00D39A FF 7F                        	dw	$7FFF
                                           
                                           ; This table is used in converting numbers to ASCII.
                                           
   5871 00D39C                             LAB_2A9A
   6169 = 0000D39D                         LAB_2A9B = LAB_2A9A+1
   6170 = 0000D39E                         LAB_2A9C = LAB_2A9B+1
                                           ;	.word	$FFFF,$F21F,$494C,$589C,$0000
                                           ;	.word	$0000,$0163,$4578,$5D8A,$0000
                                           ;	.word	$FFFF,$FFDC,$790D,$903F,$0000
                                           ;	.word	$0000,$0003,$8D7E,$A4C6,$8000
                                           ;	.word	$FFFF,$FFFF,$A50C,$EF85,$C000
                                           ;	.word	$0000,$0000,$0918,$4E72,$A000
                                           ;	.word	$FFFF,$FFFF,$FF17,$2B5A,$F000
                                           ;	.word	$0000,$0000,$0017,$4876,$E800
                                           ;	.word	$FFFF,$FFFF,$FFFD,$ABF4,$1C00
                                           ;	.word	$0000,$0000,$0000,$3B9A,$CA00
                                           ;	.word	$FFFF,$FFFF,$FFFF,$FF67,$6980
                                           ;	.word	$0000,$0000,$0000,$05F5,$E100		; 100000000
                                           ;	.word	$0000,$0000,$0098,$9680		; 10000000
                                           ;	.word   $4240,$000F,$0000,$0000,$0000,$804E		; 1000000
   5888 00D39C A0 86 01 00 00 00 00 00      	.word	$86A0,$0001,$0000,$0000,$0000,$804E		; 100000
   5888 00D3A4 00 00 4E 80                
   5889 00D3A8 10 27 00 00 00 00 00 00      	.word	$2710,$0000,$0000,$0000,$0000,$804E		; 10000
   5889 00D3B0 00 00 4E 80                
   5890 00D3B4 E8 03 00 00 00 00 00 00      	.word	$03E8,$0000,$0000,$0000,$0000,$804E		; 1000
   5890 00D3BC 00 00 4E 80                
   5891 00D3C0 64 00 00 00 00 00 00 00      	.word	$0064,$0000,$0000,$0000,$0000,$804E		; 100
   5891 00D3C8 00 00 4E 80                
   5892 00D3CC                             FIXED10:
   5893 00D3CC 0A 00 00 00 00 00 00 00      	.word	$000A,$0000,$0000,$0000,$0000,$804E		; 10
   5893 00D3D4 00 00 4E 80                
   5894 00D3D8 01 00 00 00 00 00 00 00      	.word	$0001,$0000,$0000,$0000,$0000,$804E		; 1
   5894 00D3E0 00 00 4E 80                
                                           
                                           		 MEM	16
                                           		 NDX	16
Finitron FT832 assembler   version 1.4   Sat Nov 21 21:34:43 2015     Page 1
FTBios816.asm


                                           .include "FAC1ToString.asm"
Finitron FT832 assembler   version 1.4   Sat Nov 21 21:34:43 2015     Page 1
invaders.asm

                                           	CPU		FT832
                                           
   6204 = 0000000000FEA100                               PRNG		EQU		$FEA100
   6205 = 0000000000FEA108                               PRNG_NUM	EQU		$FEA108
   6206 = 0000000000FEA10E                               PRNG_ADV	EQU		$FEA10E
   6207 = 0000000000000001                               MAN_EXPLODING	EQU		1
                                           
                                           ; which invaders are still active (not destroyed)
                                           ; These var addresses are segment offsets into seg $7800
   6211 = 0000000000000000                               active				EQU		$00
   6212 = 000000000000005E                               left_right			EQU		$5E
   6213 = 0000000000000060                               rightmost_column	EQU		$60
   6214 = 0000000000000062                               leftmost_column		EQU		$62
   6215 = 0000000000000064                               bottom_row			EQU		$64
   6216 = 0000000000000066                               top_row				EQU		$66
   6217 = 000000000000006A                               inv_tick			EQU		$6A
   6218 = 000000000000006C                               inv_tick2			EQU		$6C
   6219 = 000000000000006E                               manX				EQU		$6E
   6220 = 0000000000000070                               manY				EQU		$70
   6221 = 0000000000000072                               manState			EQU		$72
   6222 = 0000000000000100                               InvadersX			EQU		$100
   6223 = 0000000000000200                               InvadersY			EQU		$200
   6224 = 0000000000000300                               min_right			EQU		$300
   6225 = 0000000000000310                               max_left			EQU		$310
   6226 = 0000000000000320                               bombX				EQU		$320
   6227 = 0000000000000330                               bombY				EQU		$330
   6228 = 0000000000000400                               inv_state			EQU		$400
                                           
                                           ; This var is shared, must be referenced ZS:
   6231 = 0000000000007868                               do_invaders			EQU		$7868
                                           
                                           	; minimum right +         .byte a_esc,"`0"
                                           -ordinate for each column of invaders
   5932 00D3E4                             st_min_right:
   5933 00D3E4 01 00                        	.word	1
   5934 00D3E6 05 00                        	.word	5
   5935 00D3E8 09 00                        	.word	9
   5936 00D3EA 0D 00                        	.word	13
   5937 00D3EC 11 00                        	.word	17
   5938 00D3EE 15 00                        	.word	21
   5939 00D3F0 19 00                        	.word	25
   5940 00D3F2 1D 00                        	.word	29
                                           
                                           	; maximum left +         .byte a_esc,"`0"
                                           -ordinate for each column of invaders
   5944 00D3F4 34 00                        	.word	52
   5945 00D3F6 38 00                        	.word	56
   5946 00D3F8 3C 00                        	.word	60
   5947 00D3FA 40 00                        	.word	64
   5948 00D3FC 44 00                        	.word	68
   5949 00D3FE 48 00                        	.word	72
   5950 00D400 4C 00                        	.word	76
   5951 00D402 50 00                        	.word	80
                                           
   5953 00D404 00 00                        	.word	0		; rightmost column
   5954 00D406 07 00                        	.word	7		; lefmost column
   5955 00D408 01 00                        	.word	1		; dx
                                           
                                           	MEM		16
                                           	NDX		16
                                           
                                           	code
                                           
   5962 00D40A                             InvBomb:
   5963 00D40A A2 00 00                     	LDX		#0
   5964 00D40D                             .0001:
   5965 00D40D B5 00                        	LDA		active,X
   5966 00D40F F0 27                        	BEQ		.0002
   5967 00D411 20 E9 D4                     	JSR		CanDropBomb
   5968 00D414 F0 22                        	BEQ		.0002
   5969 00D416 42 5B AF 08 A1 FE            	LDA		ZS:PRNG_NUM
   5970 00D41C 42 5B 8F 0E A1 FE            	STA		ZS:PRNG_ADV
   5971 00D422 29 63 00                     	AND		#$63
   5972 00D425 D0 11                        	BNE		.0002
   5973 00D427 20 40 D4                     	JSR		FindEmptyBomb
   5974 00D42A 30 13                        	BMI		.0003
   5975 00D42C BD 00 01                     	LDA		InvadersX,X
   5976 00D42F 99 20 03                     	STA		bombX,Y
   5977 00D432 BD 00 02                     	LDA		InvadersY,X
   5978 00D435 99 30 03                     	STA		bombY,Y
   5979 00D438                             .0002:
   5980 00D438 E8                           	INX
   5981 00D439 E8                           	INX
   5982 00D43A E0 50 00                     	CPX		#80
   5983 00D43D 30 CE                        	BMI		.0001
   5984 00D43F                             .0003:
   5985 00D43F 60                           	RTS
                                           
   5987 00D440                             FindEmptyBomb:
   5988 00D440 A0 00 00                     	LDY		#0
   5989 00D443                             .0001:
   5990 00D443 B9 20 03                     	LDA		bombX,Y
   5991 00D446 F0 0A                        	BEQ		.0002
   5992 00D448 C8                           	INY
   5993 00D449 C8                           	INY
   5994 00D44A C0 10 00                     	CPY		#16
   5995 00D44D 30 F4                        	BMI		.0001
   5996 00D44F A0 FF FF                     	LDY		#-1
   5997 00D452                             .0002:
   5998 00D452 60                           	RTS
                                           
   6000 00D453                             MoveBombs:
   6001 00D453 A2 00 00                     	LDX		#0
   6002 00D456                             .0002:
   6003 00D456 BD 20 03                     	LDA		bombX,X
   6004 00D459 F0 14                        	BEQ		.0001
   6005 00D45B BD 30 03                     	LDA		bombY,X
   6006 00D45E C9 1E 00                     	CMP		#30			; has the bomb fallen all the way to the ground ?
   6007 00D461 10 06                        	BPL		.0003		; if yes, reset bomb
   6008 00D463 1A                           	INA
   6009 00D464 9D 30 03                     	STA		bombY,X
   6010 00D467 80 06                        	BRA		.0001
   6011 00D469                             .0003:
   6012 00D469 9E 20 03                     	STZ		bombX,X
   6013 00D46C 9E 30 03                     	STZ		bombY,X
   6014 00D46F                             .0001:
   6015 00D46F E8                           	INX
   6016 00D470 E8                           	INX
   6017 00D471 E0 10 00                     	CPX		#16
   6018 00D474 30 E0                        	BMI		.0002
   6019 00D476 60                           	RTS
                                           
   6021 00D477                             GetBombOffset:
   6022 00D477 B9 30 03                     	LDA		bombY,Y
   6023 00D47A 0A                           	ASL
   6024 00D47B AA                           	TAX
   6025 00D47C 42 5B BD 35 F0               	LDA		ZS:LineTbl,X
   6026 00D481 18                           	CLC
   6027 00D482 79 20 03                     	ADC		bombX,Y
   6028 00D485 79 20 03                     	ADC		bombX,Y
   6029 00D488 AA                           	TAX
   6030 00D489 60                           	RTS
                                           
   6032 00D48A                             RenderBombs:
   6033 00D48A A0 00 00                     	LDY		#0
   6034 00D48D                             .0001:
   6035 00D48D B9 30 03                     	LDA		bombY,Y
   6036 00D490 F0 0C                        	BEQ		.0002
   6037 00D492 20 77 D4                     	JSR		GetBombOffset
   6038 00D495 A9 24 00                     	LDA		#'$'
   6039 00D498 42 5B 9F 00 00 FD            	STA		ZS:VIDBUF,X
   6040 00D49E                             .0002:
   6041 00D49E C8                           	INY
   6042 00D49F C8                           	INY
   6043 00D4A0 C0 10 00                     	CPY		#16
   6044 00D4A3 30 E8                        	BMI		.0001
   6045 00D4A5 60                           	RTS
                                           
   6047 00D4A6                             TestBombsIntercept:
   6048 00D4A6 A0 00 00                     	LDY		#0
   6049 00D4A9                             .0001:
   6050 00D4A9 20 B4 D4                     	JSR		TestBombIntercept
   6051 00D4AC C8                           	INY
   6052 00D4AD C8                           	INY
   6053 00D4AE C0 10 00                     	CPY		#16
   6054 00D4B1 30 F6                        	BMI		.0001
   6055 00D4B3 60                           	RTS
                                           
   6057 00D4B4                             TestBombIntercept:
   6058 00D4B4 20 77 D4                     	JSR		GetBombOffset
   6059 00D4B7 42 5B BF 00 00 FD            	LDA		ZS:VIDBUF,X
   6060 00D4BD C9 20 00                     	CMP		#' '
   6061 00D4C0 F0 1D                        	BEQ		.0001
   6062 00D4C2 B9 30 03                     	LDA		bombY,Y
   6063 00D4C5 C9 1D 00                     	CMP		#29
   6064 00D4C8 D0 16                        	BNE		.0002
   6065 00D4CA B9 20 03                     	LDA		bombX,Y
   6066 00D4CD D9 6E 00                     	CMP		manX,Y
   6067 00D4D0 D0 05                        	BNE		.0003
   6068 00D4D2 A9 01 00                     	LDA		#MAN_EXPLODING
   6069 00D4D5 85 72                        	STA		manState
   6070 00D4D7                             .0003:
   6071 00D4D7 BB                           	TYX
   6072 00D4D8 9E 30 03                     	STZ		bombY,X
   6073 00D4DB 9E 20 03                     	STZ		bombX,X
   6074 00D4DE 60                           	RTS
   6075 00D4DF                             .0001:
   6076 00D4DF 60                           	RTS
   6077 00D4E0                             .0002:
   6078 00D4E0 A9 20 00                     	LDA		#' '
   6079 00D4E3 9F 00 00 FD                  	STA		VIDBUF,X
   6080 00D4E7 80 EE                        	BRA		.0003
                                           
                                           ; An invader can drop a bomb only if there are no invaders underneath it.
                                           
   6084 00D4E9                             CanDropBomb:
   6085 00D4E9 E0 0F 00                     	CPX		#15
   6086 00D4EC 10 0C                        	BGE		.0001
   6087 00D4EE B5 10                        	LDA		active+16,X
   6088 00D4F0 15 20                        	ORA		active+32,X
   6089 00D4F2 15 30                        	ORA		active+48,X
   6090 00D4F4 15 40                        	ORA		active+64,X
   6091 00D4F6 49 01 00                     	EOR		#1
   6092 00D4F9 60                           	RTS
   6093 00D4FA                             .0001:
   6094 00D4FA E0 1F 00                     	CPX		#31
   6095 00D4FD 10 0A                        	BGE		.0002
   6096 00D4FF B5 10                        	LDA		active+16,X
   6097 00D501 15 20                        	ORA		active+32,X
   6098 00D503 15 30                        	ORA		active+48,X
   6099 00D505 49 01 00                     	EOR		#1
   6100 00D508 60                           	RTS
   6101 00D509                             .0002:
   6102 00D509 E0 2F 00                     	CPX		#47
   6103 00D50C 10 08                        	BGE		.0003
   6104 00D50E B5 10                        	LDA		active+16,X
   6105 00D510 15 20                        	ORA		active+32,X
   6106 00D512 49 01 00                     	EOR		#1
   6107 00D515 60                           	RTS
   6108 00D516                             .0003:
   6109 00D516 E0 3F 00                     	CPX		#63
   6110 00D519 10 06                        	BGE		.0004
   6111 00D51B B5 10                        	LDA		active+16,X
   6112 00D51D 49 01 00                     	EOR		#1
   6113 00D520 60                           	RTS
   6114 00D521                             .0004:
   6115 00D521 A9 01 00                     	LDA		#1
   6116 00D524 60                           	RTS
                                           
                                           
                                           ; Test if it's possible to move to the left anymore.
                                           ;
   6121 00D525                             CanMoveLeft:
   6122 00D525 A5 62                        	LDA		leftmost_column
   6123 00D527 0A                           	ASL
   6124 00D528 AA                           	TAX
   6125 00D529 BD 10 03                     	LDA		max_left,X
   6126 00D52C DD 00 01                     	CMP		InvadersX,X
   6127 00D52F 30 04                        	BMI		.0001
   6128 00D531 A9 00 00                     	LDA		#0
   6129 00D534 60                           	RTS
   6130 00D535                             .0001:
   6131 00D535 A9 01 00                     	LDA		#1
   6132 00D538 60                           	RTS
                                           
                                           ; Test if it's possible to move to the right anymore.
                                           ;
   6136 00D539                             CanMoveRight:
   6137 00D539 A5 60                        	LDA		rightmost_column
   6138 00D53B 0A                           	ASL
   6139 00D53C AA                           	TAX
   6140 00D53D BD 00 03                     	LDA		min_right,X
   6141 00D540 DD 00 01                     	CMP		InvadersX,X
   6142 00D543 10 04                        	BPL		.0001
   6143 00D545 A9 00 00                     	LDA		#0
   6144 00D548 60                           	RTS
   6145 00D549                             .0001:
   6146 00D549 A9 01 00                     	LDA		#1
   6147 00D54C 60                           	RTS
                                           
                                           ; Test if it's possible to move down anymore
                                           ;
   6151 00D54D                             CanMoveDown:
   6152 00D54D A5 64                        	LDA		bottom_row
   6153 00D54F 0A                           	ASL
   6154 00D550 0A                           	ASL
   6155 00D551 0A                           	ASL
   6156 00D552 0A                           	ASL
   6157 00D553 AA                           	TAX
   6158 00D554 BD 00 02                     	LDA		InvadersY,X
   6159 00D557 C9 1E 00                     	CMP		#30
   6160 00D55A 30 04                        	BMI		.0001
   6161 00D55C A9 00 00                     	LDA		#0
   6162 00D55F 60                           	RTS
   6163 00D560                             .0001:
   6164 00D560 A9 01 00                     	LDA		#1
   6165 00D563 60                           	RTS
                                           
                                           ; Move all the invaders to the left
                                           ; Means incrementing the X co-ordinate
                                           ;
   6170 00D564                             MoveLeft:
   6171 00D564 A2 00 00                     	LDX		#00
   6172 00D567                             .0002:
   6173 00D567 FE 00 01                     	INC		InvadersX,X
   6174 00D56A E8                           	INX
   6175 00D56B E8                           	INX
   6176 00D56C E0 50 00                     	CPX		#80
   6177 00D56F D0 F6                        	BNE		.0002
   6178 00D571 60                           	RTS
                                           
                                           ; Move all the invaders to the right.
                                           ; means decrementing the X co-ordinate
                                           ;
   6183 00D572                             MoveRight:
   6184 00D572 A2 00 00                     	LDX		#0
   6185 00D575                             .0002:
   6186 00D575 DE 00 01                     	DEC		InvadersX,X
   6187 00D578 E8                           	INX
   6188 00D579 E8                           	INX
   6189 00D57A E0 50 00                     	CPX		#80
   6190 00D57D D0 F6                        	BNE		.0002
   6191 00D57F 60                           	RTS
                                           
                                           ; Move all the invaders down a row.
                                           ; Means incrementing the Y co-ordinate
                                           ;
   6196 00D580                             MoveDown:
   6197 00D580 A2 00 00                     	LDX		#00
   6198 00D583                             .0002:
   6199 00D583 FE 00 02                     	INC		InvadersY,X
   6200 00D586 E8                           	INX
   6201 00D587 E8                           	INX
   6202 00D588 E0 50 00                     	CPX		#80
   6203 00D58B D0 F6                        	BNE		.0002
   6204 00D58D 60                           	RTS
                                           
                                           ; Move the invaders
                                           ; Retuns
                                           ; .A = 1 if it was possible to do a move, 0 otherwise
                                           ;
   6210 00D58E                             Move:
   6211 00D58E 24 5E                        	BIT		left_right
   6212 00D590 30 0A                        	BMI		.0002
   6213 00D592 20 25 D5                     	JSR		CanMoveLeft
   6214 00D595 F0 0F                        	BEQ		.0001
   6215 00D597 20 64 D5                     	JSR		MoveLeft
   6216 00D59A 80 19                        	BRA		.0003
   6217 00D59C                             .0002:
   6218 00D59C 20 39 D5                     	JSR		CanMoveRight
   6219 00D59F F0 05                        	BEQ		.0001
   6220 00D5A1 20 72 D5                     	JSR		MoveRight
   6221 00D5A4 80 0F                        	BRA		.0003
   6222 00D5A6                             .0001:
   6223 00D5A6 20 4D D5                     	JSR		CanMoveDown
   6224 00D5A9 F0 0E                        	BEQ		.0004
   6225 00D5AB A5 5E                        	LDA		left_right
   6226 00D5AD 49 FF FF                     	EOR		#$FFFF
   6227 00D5B0 85 5E                        	STA		left_right
   6228 00D5B2 20 80 D5                     	JSR		MoveDown
   6229 00D5B5                             .0003:
   6230 00D5B5 A9 01 00                     	LDA		#1
   6231 00D5B8 60                           	RTS
   6232 00D5B9                             .0004:
   6233 00D5B9 A9 00 00                     	LDA		#0
   6234 00D5BC 60                           	RTS
                                           
   6236 00D5BD                             Initialize:
   6237 00D5BD 64 60                        	STZ		rightmost_column
   6238 00D5BF A9 07 00                     	LDA		#7
   6239 00D5C2 85 62                        	STA		leftmost_column
   6240 00D5C4 64 66                        	STZ		top_row
   6241 00D5C6 A9 04 00                     	LDA		#4
   6242 00D5C9 85 64                        	STA		bottom_row
   6243 00D5CB 64 5E                        	STZ		left_right
   6244 00D5CD 20 15 D6                     	JSR		ActivateAllInvaders
   6245 00D5D0 A2 00 00                     	LDX		#0
   6246 00D5D3                             .0001:
   6247 00D5D3 42 1B BD 28 DA               	LDA		CS:StartX,X
   6248 00D5D8 9D 00 01                     	STA		InvadersX,X
   6249 00D5DB 42 1B BD D8 D9               	LDA		CS:StartY,X
   6250 00D5E0 9D 00 02                     	STA		InvadersY,X
   6251 00D5E3 E8                           	INX
   6252 00D5E4 E8                           	INX
   6253 00D5E5 E0 50 00                     	CPX		#80
   6254 00D5E8 30 E9                        	BMI		.0001
   6255 00D5EA A2 00 00                     	LDX		#0
   6256 00D5ED                             .0002:
   6257 00D5ED 42 1B BD E4 D3               	LDA		CS:st_min_right,X
   6258 00D5F2 9D 00 03                     	STA		min_right,X
   6259 00D5F5 E8                           	INX
   6260 00D5F6 E8                           	INX
   6261 00D5F7 E0 20 00                     	CPX		#32
   6262 00D5FA 30 F1                        	BMI		.0002
                                           	; Initialize Bombs
   6264 00D5FC A2 00 00                     	LDX		#0
   6265 00D5FF                             .0003:
   6266 00D5FF 9E 20 03                     	STZ		bombX,X
   6267 00D602 9E 30 03                     	STZ		bombY,X
   6268 00D605 E8                           	INX
   6269 00D606 E8                           	INX
   6270 00D607 E0 10 00                     	CPX		#16
   6271 00D60A 30 F3                        	BMI		.0003
   6272 00D60C A9 FE FF                     	LDA		#$FFFE
   6273 00D60F 42 5B 8D 68 78               	STA		ZS:do_invaders
   6274 00D614 60                           	RTS
                                           
   6276 00D615                             ActivateAllInvaders:
   6277 00D615 A2 00 00                     	LDX		#0
   6278 00D618 A9 01 00                     	LDA		#1
   6279 00D61B                             .0001:
   6280 00D61B 95 00                        	STA		active,X
   6281 00D61D E8                           	INX
   6282 00D61E E8                           	INX
   6283 00D61F E0 50 00                     	CPX		#80
   6284 00D622 D0 F7                        	BNE		.0001
   6285 00D624 60                           	RTS
                                           
   6287 00D625                             IsAllDestroyed:
   6288 00D625 20 AD D6                     	JSR		IsRightmostColumnDestroyed
   6289 00D628 F0 2C                        	BEQ		.0001
   6290 00D62A E6 60                        	INC		rightmost_column
   6291 00D62C AD 0C 03                     	LDA		min_right+12
   6292 00D62F 8D 0E 03                     	STA		min_right+14
   6293 00D632 AD 0A 03                     	LDA		min_right+10
   6294 00D635 8D 0C 03                     	STA		min_right+12
   6295 00D638 AD 08 03                     	LDA		min_right+8
   6296 00D63B 8D 0A 03                     	STA		min_right+10
   6297 00D63E AD 06 03                     	LDA		min_right+6
   6298 00D641 8D 08 03                     	STA		min_right+8
   6299 00D644 AD 04 03                     	LDA		min_right+4
   6300 00D647 8D 06 03                     	STA		min_right+6
   6301 00D64A AD 02 03                     	LDA		min_right+2
   6302 00D64D 8D 04 03                     	STA		min_right+4
   6303 00D650 AD 00 03                     	LDA		min_right
   6304 00D653 8D 02 03                     	STA		min_right+2
   6305 00D656                             .0001:
   6306 00D656 20 A9 D6                     	JSR		IsLeftmostColumnDestroyed
   6307 00D659 F0 2C                        	BEQ		.0002
   6308 00D65B C6 62                        	DEC		leftmost_column
   6309 00D65D AD 12 03                     	LDA		max_left+2
   6310 00D660 8D 10 03                     	STA		max_left
   6311 00D663 AD 14 03                     	LDA		max_left+4
   6312 00D666 8D 12 03                     	STA		max_left+2
   6313 00D669 AD 16 03                     	LDA		max_left+6
   6314 00D66C 8D 14 03                     	STA		max_left+4
   6315 00D66F AD 18 03                     	LDA		max_left+8
   6316 00D672 8D 16 03                     	STA		max_left+6
   6317 00D675 AD 1A 03                     	LDA		max_left+10
   6318 00D678 8D 18 03                     	STA		max_left+8
   6319 00D67B AD 1C 03                     	LDA		max_left+12
   6320 00D67E 8D 1A 03                     	STA		max_left+10
   6321 00D681 AD 1E 03                     	LDA		max_left+14
   6322 00D684 8D 1C 03                     	STA		max_left+12
   6323 00D687                             .0002:
   6324 00D687 A5 62                        	LDA		leftmost_column
   6325 00D689 C5 60                        	CMP		rightmost_column
   6326 00D68B 30 18                        	BMI		.allDestroyed
   6327 00D68D 20 C9 D6                     	JSR		IsBottomRowDestroyed
   6328 00D690 F0 02                        	BEQ		.0003
   6329 00D692 C6 64                        	DEC		bottom_row
   6330 00D694                             .0003:
   6331 00D694 20 C5 D6                     	JSR		IsTopRowDestroyed
   6332 00D697 F0 02                        	BEQ		.0004
   6333 00D699 E6 66                        	INC		top_row
   6334 00D69B                             .0004:
   6335 00D69B A5 64                        	LDA		bottom_row
   6336 00D69D C5 66                        	CMP		top_row
   6337 00D69F 30 04                        	BMI		.allDestroyed
   6338 00D6A1 A9 00 00                     	LDA		#0
   6339 00D6A4 60                           	RTS
   6340 00D6A5                             .allDestroyed:
   6341 00D6A5 A9 01 00                     	LDA		#1
   6342 00D6A8 60                           	RTS
                                           
                                           
   6345 00D6A9                             IsLeftmostColumnDestroyed:
   6346 00D6A9 A5 62                        	LDA		leftmost_column
   6347 00D6AB 80 02                        	BRA		IsColumnDestroyed
   6348 00D6AD                             IsRightmostColumnDestroyed:
   6349 00D6AD A5 60                        	LDA		rightmost_column
   6350 00D6AF                             IsColumnDestroyed:
   6351 00D6AF 0A                           	ASL
   6352 00D6B0 AA                           	TAX
   6353 00D6B1 B5 00                        	LDA		active,X
   6354 00D6B3 15 10                        	ORA		active+16,X
   6355 00D6B5 15 20                        	ORA		active+32,X
   6356 00D6B7 15 30                        	ORA		active+48,X
   6357 00D6B9 15 40                        	ORA		active+64,X
   6358 00D6BB 15 50                        	ORA		active+80,X
   6359 00D6BD 15 60                        	ORA		active+96,X
   6360 00D6BF 15 70                        	ORA		active+112,X
   6361 00D6C1 49 01 00                     	EOR		#1
   6362 00D6C4 60                           	RTS
                                           
   6364 00D6C5                             IsTopRowDestroyed:
   6365 00D6C5 A5 66                        	LDA		top_row
   6366 00D6C7 80 02                        	BRA		IsRowDestroyed
   6367 00D6C9                             IsBottomRowDestroyed:
   6368 00D6C9 A5 64                        	LDA		bottom_row
   6369 00D6CB                             IsRowDestroyed:
   6370 00D6CB 0A                           	ASL
   6371 00D6CC 0A                           	ASL
   6372 00D6CD 0A                           	ASL
   6373 00D6CE 0A                           	ASL
   6374 00D6CF B5 00                        	LDA		active,X
   6375 00D6D1 15 02                        	ORA		active+2,X
   6376 00D6D3 15 04                        	ORA		active+4,X
   6377 00D6D5 15 06                        	ORA		active+6,X
   6378 00D6D7 15 08                        	ORA		active+8,X
   6379 00D6D9 15 0A                        	ORA		active+10,X
   6380 00D6DB 15 0C                        	ORA		active+12,X
   6381 00D6DD 15 0E                        	ORA		active+14,X
   6382 00D6DF 49 01 00                     	EOR		#1
   6383 00D6E2 60                           	RTS
                                           
                                           ; TickCount counts 1/100 of a second. We want to animate the graphics at a much
                                           ; slower rate, so we use bit 6 of the tick count to indicate when to animate.
                                           ;
   6388 00D6E3                             ShiftTick:
   6389 00D6E3 42 5B A5 04                  	LDA		ZS:TickCount
   6390 00D6E7 4A                           	LSR
   6391 00D6E8 4A                           	LSR
   6392 00D6E9 4A                           	LSR
   6393 00D6EA 4A                           	LSR
   6394 00D6EB 4A                           	LSR
   6395 00D6EC 4A                           	LSR
   6396 00D6ED 60                           	RTS
                                           
   6398 00D6EE                             RenderInvaders:
                                           	; First, clear the screen
   6400 00D6EE A2 00 00                     	LDX		#0
   6401 00D6F1 A9 20 00                     	LDA		#' '
   6402 00D6F4 09 00 BF                     	ORA		#$BF00
   6403 00D6F7                             .0003:
   6404 00D6F7 42 5B 9F 00 00 FD            	STA		ZS:VIDBUF,X
   6405 00D6FD E8                           	INX
   6406 00D6FE E8                           	INX
   6407 00D6FF E0 58 14                     	CPX		#84*31*2
   6408 00D702 30 F3                        	BMI		.0003
   6409 00D704 A2 00 00                     	LDX		#0
   6410 00D707                             .0002:
   6411 00D707 C2 30                        	REP		#$30
                                           	MEM		16
                                           	NDX		16
   6414 00D709 B5 00                        	LDA		active,X
   6415 00D70B F0 FF BD 01                  	LBEQ	.0001
   6416 00D70F BD 00 04                     	LDA		inv_state,X
   6417 00D712 BD 00 02                     	LDA		InvadersY,X
   6418 00D715 0A                           	ASL
   6419 00D716 A8                           	TAY
   6420 00D717 42 5B B9 35 F0               	LDA		ZS:LineTbl,Y
   6421 00D71C 18                           	CLC
   6422 00D71D 7D 00 01                     	ADC		InvadersX,X
   6423 00D720 18                           	CLC
   6424 00D721 7D 00 01                     	ADC		InvadersX,X
   6425 00D724 A8                           	TAY
   6426 00D725 E2 20                        	SEP		#$20			; eight bit acc
                                           	MEM		8
   6428 00D727 42 1B BD 78 DA               	LDA		CS:InvaderType,X
   6429 00D72C C9 01                        	CMP		#1
   6430 00D72E D0 46                        	BNE		.0004
   6431 00D730 A9 E9                        	LDA		#233
   6432 00D732 42 5B 42 99 00 00 FD 00      	STA		ZS:VIDBUF,Y
                                         
   6433 00D73A A9 F2                        	LDA		#242
   6434 00D73C 42 5B 42 99 02 00 FD 00      	STA		ZS:VIDBUF+2,Y
                                         
   6435 00D744 A9 DF                        	LDA		#223
   6436 00D746 42 5B 42 99 04 00 FD 00      	STA		ZS:VIDBUF+4,Y
                                         
   6437 00D74E 20 E3 D6                     	JSR		ShiftTick
   6438 00D751 90 04                        	BCC		.0005
   6439 00D753 A9 58                        	LDA		#'X'
   6440 00D755 80 02                        	BRA		.0006
   6441 00D757                             .0005:
   6442 00D757 A9 56                        	LDA		#'V'
   6443 00D759                             .0006:
   6444 00D759 42 5B 42 99 54 00 FD 00      	STA		ZS:VIDBUF+84,Y
                                         
   6445 00D761 42 5B 42 99 58 00 FD 00      	STA		ZS:VIDBUF+88,Y
                                         
   6446 00D769 A9 20                        	LDA		#' '
   6447 00D76B 42 5B 42 99 56 00 FD 00      	STA		ZS:VIDBUF+86,Y
                                         
   6448 00D773 82 E4 00                     	BRL		.0007
   6449 00D776                             .0004:
   6450 00D776 C9 02                        	CMP		#2
   6451 00D778 D0 FF 83 00                  	LBNE	.0008
   6452 00D77C 20 E3 D6                     	JSR		ShiftTick
   6453 00D77F 90 3F                        	BCC		.0009
   6454 00D781 A9 FC                        	LDA		#252
   6455 00D783 42 5B 42 99 00 00 FD 00      	STA		ZS:VIDBUF,Y
                                         
   6456 00D78B A9 99                        	LDA		#153
   6457 00D78D 42 5B 42 99 02 00 FD 00      	STA		ZS:VIDBUF+2,Y
                                         
   6458 00D795 A9 FE                        	LDA		#254
   6459 00D797 42 5B 42 99 04 00 FD 00      	STA		ZS:VIDBUF+4,Y
                                         
   6460 00D79F A9 E2                        	LDA		#226
   6461 00D7A1 42 5B 42 99 54 00 FD 00      	STA		ZS:VIDBUF+84,Y
                                         
   6462 00D7A9 A9 62                        	LDA		#98
   6463 00D7AB 42 5B 42 99 56 00 FD 00      	STA		ZS:VIDBUF+86,Y
                                         
   6464 00D7B3 A9 E2                        	LDA		#226
   6465 00D7B5 42 5B 42 99 58 00 FD 00      	STA		ZS:VIDBUF+88,Y
                                         
   6466 00D7BD 82 9A 00                     	BRL		.0007
   6467 00D7C0                             .0009:
   6468 00D7C0 A9 62                        	LDA		#98
   6469 00D7C2 42 5B 42 99 00 00 FD 00      	STA		ZS:VIDBUF,Y
                                         
   6470 00D7CA A9 99                        	LDA		#153
   6471 00D7CC 42 5B 42 99 02 00 FD 00      	STA		ZS:VIDBUF+2,Y
                                         
   6472 00D7D4 A9 62                        	LDA		#98
   6473 00D7D6 42 5B 42 99 04 00 FD 00      	STA		ZS:VIDBUF+4,Y
                                         
   6474 00D7DE A9 EC                        	LDA		#236
   6475 00D7E0 42 5B 42 99 54 00 FD 00      	STA		ZS:VIDBUF+84,Y
                                         
   6476 00D7E8 A9 62                        	LDA		#98
   6477 00D7EA 42 5B 42 99 56 00 FD 00      	STA		ZS:VIDBUF+86,Y
                                         
   6478 00D7F2 A9 FB                        	LDA		#251
   6479 00D7F4 42 5B 42 99 58 00 FD 00      	STA		ZS:VIDBUF+88,Y
                                         
   6480 00D7FC 82 5B 00                     	BRL		.0007
   6481 00D7FF                             .0008:
   6482 00D7FF A9 FF                        	LDA		#255
   6483 00D801 42 5B 42 99 00 00 FD 00      	STA		ZS:VIDBUF,Y
                                         
   6484 00D809 A9 F8                        	LDA		#248
   6485 00D80B 42 5B 42 99 02 00 FD 00      	STA		ZS:VIDBUF+2,Y
                                         
   6486 00D813 A9 7F                        	LDA		#127
   6487 00D815 42 5B 99 0E D8               	STA		ZS:VIDBUf+4,Y
   6488 00D81A 20 E3 D6                     	JSR		ShiftTick
   6489 00D81D 90 20                        	BCC		.0010
   6490 00D81F A9 FF                        	LDA		#255
   6491 00D821 42 5B 42 99 54 00 FD 00      	STA		ZS:VIDBUF+84,Y
                                         
   6492 00D829 A9 F9                        	LDA		#249
   6493 00D82B 42 5B 42 99 56 00 FD 00      	STA		ZS:VIDBUF+86,Y
                                         
   6494 00D833 A9 7F                        	LDA		#127
   6495 00D835 42 5B 42 99 58 00 FD 00      	STA		ZS:VIDBUF+88,Y
                                         
   6496 00D83D 80 1B                        	BRA		.0007
   6497 00D83F                             .0010:
   6498 00D83F A9 E1                        	LDA		#225
   6499 00D841 42 5B 99 5E D8               	STA		ZS:VIDBUf+84,Y
   6500 00D846 A9 F9                        	LDA		#249
   6501 00D848 42 5B 42 99 56 00 FD 00      	STA		ZS:VIDBUF+86,Y
                                         
   6502 00D850 A9 60                        	LDA		#96
   6503 00D852 42 5B 42 99 58 00 FD 00      	STA		ZS:VIDBUF+88,Y
                                         
   6504 00D85A                             .0007:
                                           	; Surround the alien with spaces
   6506 00D85A A9 20                        	LDA		#' '
   6507 00D85C 42 5B 42 99 AA FF FC 00      	STA		ZS:VIDBUF-86,Y
                                         
   6508 00D864 42 5B 42 99 AC FF FC 00      	STA		ZS:VIDBUF-84,Y
                                         
   6509 00D86C 42 5B 42 99 AE FF FC 00      	STA		ZS:VIDBUF-82,Y
                                         
   6510 00D874 42 5B 42 99 B0 FF FC 00      	STA		ZS:VIDBUF-80,Y
                                         
   6511 00D87C 42 5B 42 99 B2 FF FC 00      	STA		ZS:VIDBUF-78,Y
                                         
   6512 00D884 42 5B 42 99 FE FF FC 00      	STA		ZS:VIDBUF-2,Y
                                         
   6513 00D88C 42 5B 42 99 06 00 FD 00      	STA		ZS:VIDBUF+6,Y
                                         
   6514 00D894 42 5B 42 99 52 00 FD 00      	STA		ZS:VIDBUF+82,Y
                                         
   6515 00D89C 42 5B 42 99 5A 00 FD 00      	STA		ZS:VIDBUF+90,Y
                                         
   6516 00D8A4 42 5B 42 99 A6 00 FD 00      	STA		ZS:VIDBUF+166,Y
                                         
   6517 00D8AC 42 5B 42 99 A8 00 FD 00      	STA		ZS:VIDBUF+168,Y
                                         
   6518 00D8B4 42 5B 42 99 AA 00 FD 00      	STA		ZS:VIDBUF+170,Y
                                         
   6519 00D8BC 42 5B 42 99 AC 00 FD 00      	STA		ZS:VIDBUF+172,Y
                                         
   6520 00D8C4 42 5B 42 99 AE 00 FD 00      	STA		ZS:VIDBUF+174,Y
                                         
   6521 00D8CC                             .0001:
   6522 00D8CC E8                           	INX
   6523 00D8CD E8                           	INX
   6524 00D8CE E0 50 00                     	CPX		#80
   6525 00D8D1 D0 FF 32 FE                  	LBNE	.0002
   6526 00D8D5 C2 20                        	REP		#$20
                                           	MEM		16
   6528 00D8D7 60                           	RTS
                                           
                                           public InvadersTask:
   6531 00D8D8                             .0001:
   6532 00D8D8 F4 00 00                     	PEA		0				; set data segment to $7800
   6533 00D8DB F4 00 78                     	PEA		$7800
   6534 00D8DE 42 2B                        	PLDS
   6535 00D8E0 A9 FF 2B                     	LDA		#$2BFF			; set stack to $2BFF
   6536 00D8E3 1B                           	TAS
   6537 00D8E4 20 BD D5                     	JSR		Initialize
   6538 00D8E7 42 E2 00 10                  	SEP		#$1000			; turn on single step mode
   6539 00D8EB 20 EE D6                     	JSR		RenderInvaders
   6540 00D8EE                             .0002:
   6541 00D8EE 42 20 DB EA 07               	JCR 	KeybdGetCharNoWaitCtx,7	; check for char at keyboard
   6542 00D8F3                             .0004:
   6543 00D8F3 A2 00 00                     	LDX		#0
   6544 00D8F6                             .0006:
   6545 00D8F6 E8                           	INX
   6546 00D8F7 E0 D0 07                     	CPX		#2000
   6547 00D8FA D0 FA                        	BNE		.0006
   6548 00D8FC 42 5B A5 04                  	LDA		ZS:TickCount
   6549 00D900 29 03 00                     	AND		#$3
   6550 00D903 D0 E9                        	BNE		.0002
   6551 00D905 20 0A D4                     	JSR		InvBomb
   6552 00D908 20 EE D6                     	JSR		RenderInvaders
   6553 00D90B 20 8A D4                     	JSR		RenderBombs
   6554 00D90E 20 53 D4                     	JSR		MoveBombs
   6555 00D911 42 5B A5 04                  	LDA		ZS:TickCount
   6556 00D915 29 0F 00                     	AND		#$F
   6557 00D918 D0 D4                        	BNE		.0002
   6558 00D91A 20 25 D6                     	JSR		IsAllDestroyed
   6559 00D91D D0 B9                        	BNE		.0001
   6560 00D91F 20 8E D5                     	JSR		Move
   6561 00D922 F0 B4                        	BEQ		.0001				; Can't move, re-initialize
   6562 00D924 80 C8                        	BRA		.0002
   6563 00D926                             .0005:
   6564 00D926 85 6A                        	STA		inv_tick
   6565 00D928 80 C4                        	BRA		.0002
   6566 00D92A                             .0003:
   6567 00D92A C9 03 00                     	CMP		#3
   6568 00D92D D0 C4                        	BNE		.0004
   6569 00D92F 42 5B 9C 68 78               	STZ		ZS:do_invaders
   6570 00D934 42 60                        	RTT
   6571 00D936 80 A0                        	BRA		.0001
                                           
   6573 00D938                             InvaderRow:
   6574 00D938 00 00                        	.word	0
   6575 00D93A 00 00                        	.word	0
   6576 00D93C 00 00                        	.word	0
   6577 00D93E 00 00                        	.word	0
   6578 00D940 00 00                        	.word	0
   6579 00D942 00 00                        	.word	0
   6580 00D944 00 00                        	.word	0
   6581 00D946 00 00                        	.word	0
                                           
   6583 00D948 01 00                        	.word	1
   6584 00D94A 01 00                        	.word	1
   6585 00D94C 01 00                        	.word	1
   6586 00D94E 01 00                        	.word	1
   6587 00D950 01 00                        	.word	1
   6588 00D952 01 00                        	.word	1
   6589 00D954 01 00                        	.word	1
   6590 00D956 01 00                        	.word	1
                                           
   6592 00D958 02 00                        	.word	2
   6593 00D95A 02 00                        	.word	2
   6594 00D95C 02 00                        	.word	2
   6595 00D95E 02 00                        	.word	2
   6596 00D960 02 00                        	.word	2
   6597 00D962 02 00                        	.word	2
   6598 00D964 02 00                        	.word	2
   6599 00D966 02 00                        	.word	2
                                           
   6601 00D968 03 00                        	.word	3
   6602 00D96A 03 00                        	.word	3
   6603 00D96C 03 00                        	.word	3
   6604 00D96E 03 00                        	.word	3
   6605 00D970 03 00                        	.word	3
   6606 00D972 03 00                        	.word	3
   6607 00D974 03 00                        	.word	3
   6608 00D976 03 00                        	.word	3
                                           
   6610 00D978 04 00                        	.word	4
   6611 00D97A 04 00                        	.word	4
   6612 00D97C 04 00                        	.word	4
   6613 00D97E 04 00                        	.word	4
   6614 00D980 04 00                        	.word	4
   6615 00D982 04 00                        	.word	4
   6616 00D984 04 00                        	.word	4
   6617 00D986 04 00                        	.word	4
                                           
   6619 00D988                             InvaderCol:
   6620 00D988 00 00                        	.word	0
   6621 00D98A 01 00                        	.word	1
   6622 00D98C 02 00                        	.word	2
   6623 00D98E 03 00                        	.word	3
   6624 00D990 04 00                        	.word	4
   6625 00D992 05 00                        	.word	5
   6626 00D994 06 00                        	.word	6
   6627 00D996 07 00                        	.word	7
                                           
   6629 00D998 00 00                        	.word	0
   6630 00D99A 01 00                        	.word	1
   6631 00D99C 02 00                        	.word	2
   6632 00D99E 03 00                        	.word	3
   6633 00D9A0 04 00                        	.word	4
   6634 00D9A2 05 00                        	.word	5
   6635 00D9A4 06 00                        	.word	6
   6636 00D9A6 07 00                        	.word	7
                                           
   6638 00D9A8 00 00                        	.word	0
   6639 00D9AA 01 00                        	.word	1
   6640 00D9AC 02 00                        	.word	2
   6641 00D9AE 03 00                        	.word	3
   6642 00D9B0 04 00                        	.word	4
   6643 00D9B2 05 00                        	.word	5
   6644 00D9B4 06 00                        	.word	6
   6645 00D9B6 07 00                        	.word	7
                                           
   6647 00D9B8 00 00                        	.word	0
   6648 00D9BA 01 00                        	.word	1
   6649 00D9BC 02 00                        	.word	2
   6650 00D9BE 03 00                        	.word	3
   6651 00D9C0 04 00                        	.word	4
   6652 00D9C2 05 00                        	.word	5
   6653 00D9C4 06 00                        	.word	6
   6654 00D9C6 07 00                        	.word	7
                                           
   6656 00D9C8 00 00                        	.word	0
   6657 00D9CA 01 00                        	.word	1
   6658 00D9CC 02 00                        	.word	2
   6659 00D9CE 03 00                        	.word	3
   6660 00D9D0 04 00                        	.word	4
   6661 00D9D2 05 00                        	.word	5
   6662 00D9D4 06 00                        	.word	6
   6663 00D9D6 07 00                        	.word	7
                                           
                                           ; Starting Y co-ordinate for each invader
                                           
   6667 00D9D8                             StartY:
   6668 00D9D8 03 00                        	.word	3
   6669 00D9DA 03 00                        	.word	3
   6670 00D9DC 03 00                        	.word	3
   6671 00D9DE 03 00                        	.word	3
   6672 00D9E0 03 00                        	.word	3
   6673 00D9E2 03 00                        	.word	3
   6674 00D9E4 03 00                        	.word	3
   6675 00D9E6 03 00                        	.word	3
                                           
   6677 00D9E8 06 00                        	.word	6
   6678 00D9EA 06 00                        	.word	6
   6679 00D9EC 06 00                        	.word	6
   6680 00D9EE 06 00                        	.word	6
   6681 00D9F0 06 00                        	.word	6
   6682 00D9F2 06 00                        	.word	6
   6683 00D9F4 06 00                        	.word	6
   6684 00D9F6 06 00                        	.word	6
                                           
   6686 00D9F8 09 00                        	.word	9
   6687 00D9FA 09 00                        	.word	9
   6688 00D9FC 09 00                        	.word	9
   6689 00D9FE 09 00                        	.word	9
   6690 00DA00 09 00                        	.word	9
   6691 00DA02 09 00                        	.word	9
   6692 00DA04 09 00                        	.word	9
   6693 00DA06 09 00                        	.word	9
                                           
   6695 00DA08 0C 00                        	.word	12
   6696 00DA0A 0C 00                        	.word	12
   6697 00DA0C 0C 00                        	.word	12
   6698 00DA0E 0C 00                        	.word	12
   6699 00DA10 0C 00                        	.word	12
   6700 00DA12 0C 00                        	.word	12
   6701 00DA14 0C 00                        	.word	12
   6702 00DA16 0C 00                        	.word	12
                                           
   6704 00DA18 0F 00                        	.word	15
   6705 00DA1A 0F 00                        	.word	15
   6706 00DA1C 0F 00                        	.word	15
   6707 00DA1E 0F 00                        	.word	15
   6708 00DA20 0F 00                        	.word	15
   6709 00DA22 0F 00                        	.word	15
   6710 00DA24 0F 00                        	.word	15
   6711 00DA26 0F 00                        	.word	15
                                           
                                           ; Starting X co-ordinate for each invader
                                           
   6715 00DA28                             StartX:
   6716 00DA28 01 00                        	.word	1
   6717 00DA2A 05 00                        	.word	5
   6718 00DA2C 09 00                        	.word	9
   6719 00DA2E 0D 00                        	.word	13
   6720 00DA30 11 00                        	.word	17
   6721 00DA32 15 00                        	.word	21
   6722 00DA34 19 00                        	.word	25
   6723 00DA36 1D 00                        	.word	29
                                           
   6725 00DA38 01 00                        	.word	1
   6726 00DA3A 05 00                        	.word	5
   6727 00DA3C 09 00                        	.word	9
   6728 00DA3E 0D 00                        	.word	13
   6729 00DA40 11 00                        	.word	17
   6730 00DA42 15 00                        	.word	21
   6731 00DA44 19 00                        	.word	25
   6732 00DA46 1D 00                        	.word	29
                                           
   6734 00DA48 01 00                        	.word	1
   6735 00DA4A 05 00                        	.word	5
   6736 00DA4C 09 00                        	.word	9
   6737 00DA4E 0D 00                        	.word	13
   6738 00DA50 11 00                        	.word	17
   6739 00DA52 15 00                        	.word	21
   6740 00DA54 19 00                        	.word	25
   6741 00DA56 1D 00                        	.word	29
                                           
   6743 00DA58 01 00                        	.word	1
   6744 00DA5A 05 00                        	.word	5
   6745 00DA5C 09 00                        	.word	9
   6746 00DA5E 0D 00                        	.word	13
   6747 00DA60 11 00                        	.word	17
   6748 00DA62 15 00                        	.word	21
   6749 00DA64 19 00                        	.word	25
   6750 00DA66 1D 00                        	.word	29
                                           
   6752 00DA68 01 00                        	.word	1
   6753 00DA6A 05 00                        	.word	5
   6754 00DA6C 09 00                        	.word	9
   6755 00DA6E 0D 00                        	.word	13
   6756 00DA70 11 00                        	.word	17
   6757 00DA72 15 00                        	.word	21
   6758 00DA74 19 00                        	.word	25
   6759 00DA76 1D 00                        	.word	29
                                           
   6761 00DA78                             InvaderType:
   6762 00DA78 01 00                        	.word	1
   6763 00DA7A 01 00                        	.word	1
   6764 00DA7C 01 00                        	.word	1
   6765 00DA7E 01 00                        	.word	1
   6766 00DA80 01 00                        	.word	1
   6767 00DA82 01 00                        	.word	1
   6768 00DA84 01 00                        	.word	1
   6769 00DA86 01 00                        	.word	1
                                           
   6771 00DA88 02 00                        	.word	2
   6772 00DA8A 02 00                        	.word	2
   6773 00DA8C 02 00                        	.word	2
   6774 00DA8E 02 00                        	.word	2
   6775 00DA90 02 00                        	.word	2
   6776 00DA92 02 00                        	.word	2
   6777 00DA94 02 00                        	.word	2
   6778 00DA96 02 00                        	.word	2
                                           
   6780 00DA98 02 00                        	.word	2
   6781 00DA9A 02 00                        	.word	2
   6782 00DA9C 02 00                        	.word	2
   6783 00DA9E 02 00                        	.word	2
   6784 00DAA0 02 00                        	.word	2
   6785 00DAA2 02 00                        	.word	2
   6786 00DAA4 02 00                        	.word	2
   6787 00DAA6 02 00                        	.word	2
                                           
   6789 00DAA8 03 00                        	.word	3
   6790 00DAAA 03 00                        	.word	3
   6791 00DAAC 03 00                        	.word	3
   6792 00DAAE 03 00                        	.word	3
   6793 00DAB0 03 00                        	.word	3
   6794 00DAB2 03 00                        	.word	3
   6795 00DAB4 03 00                        	.word	3
   6796 00DAB6 03 00                        	.word	3
                                           
   6798 00DAB8 03 00                        	.word	3
   6799 00DABA 03 00                        	.word	3
   6800 00DABC 03 00                        	.word	3
   6801 00DABE 03 00                        	.word	3
   6802 00DAC0 03 00                        	.word	3
   6803 00DAC2 03 00                        	.word	3
   6804 00DAC4 03 00                        	.word	3
   6805 00DAC6 03 00                        	.word	3
                                           			
Finitron FT832 assembler   version 1.4   Sat Nov 21 21:34:43 2015     Page 1
FTBios816.asm


                                           .include "invaders.asm"
                                           
                                           ;	cpu		W65C816S
                                           	cpu		FT832
   6810 00DAC8 FF FF FF FF FF FF FF FF      	.org	$E000
   6810 00DAD0 FF FF FF FF FF FF FF FF    
   6810 00DAD8 FF FF FF FF FF FF FF FF    
   6810 00DAE0 FF FF FF FF FF FF FF FF    
   6810 00DAE8 FF FF FF FF FF FF FF FF    
   6810 00DAF0 FF FF FF FF FF FF FF FF    
   6810 00DAF8 FF FF FF FF FF FF FF FF    
   6810 00DB00 FF FF FF FF FF FF FF FF    
   6810 00DB08 FF FF FF FF FF FF FF FF    
   6810 00DB10 FF FF FF FF FF FF FF FF    
   6810 00DB18 FF FF FF FF FF FF FF FF    
   6810 00DB20 FF FF FF FF FF FF FF FF    
   6810 00DB28 FF FF FF FF FF FF FF FF    
   6810 00DB30 FF FF FF FF FF FF FF FF    
   6810 00DB38 FF FF FF FF FF FF FF FF    
   6810 00DB40 FF FF FF FF FF FF FF FF    
   6810 00DB48 FF FF FF FF FF FF FF FF    
   6810 00DB50 FF FF FF FF FF FF FF FF    
   6810 00DB58 FF FF FF FF FF FF FF FF    
   6810 00DB60 FF FF FF FF FF FF FF FF    
   6810 00DB68 FF FF FF FF FF FF FF FF    
   6810 00DB70 FF FF FF FF FF FF FF FF    
   6810 00DB78 FF FF FF FF FF FF FF FF    
   6810 00DB80 FF FF FF FF FF FF FF FF    
   6810 00DB88 FF FF FF FF FF FF FF FF    
   6810 00DB90 FF FF FF FF FF FF FF FF    
   6810 00DB98 FF FF FF FF FF FF FF FF    
   6810 00DBA0 FF FF FF FF FF FF FF FF    
   6810 00DBA8 FF FF FF FF FF FF FF FF    
   6810 00DBB0 FF FF FF FF FF FF FF FF    
   6810 00DBB8 FF FF FF FF FF FF FF FF    
   6810 00DBC0 FF FF FF FF FF FF FF FF    
   6810 00DBC8 FF FF FF FF FF FF FF FF    
   6810 00DBD0 FF FF FF FF FF FF FF FF    
   6810 00DBD8 FF FF FF FF FF FF FF FF    
   6810 00DBE0 FF FF FF FF FF FF FF FF    
   6810 00DBE8 FF FF FF FF FF FF FF FF    
   6810 00DBF0 FF FF FF FF FF FF FF FF    
   6810 00DBF8 FF FF FF FF FF FF FF FF    
   6810 00DC00 FF FF FF FF FF FF FF FF    
   6810 00DC08 FF FF FF FF FF FF FF FF    
   6810 00DC10 FF FF FF FF FF FF FF FF    
   6810 00DC18 FF FF FF FF FF FF FF FF    
   6810 00DC20 FF FF FF FF FF FF FF FF    
   6810 00DC28 FF FF FF FF FF FF FF FF    
   6810 00DC30 FF FF FF FF FF FF FF FF    
   6810 00DC38 FF FF FF FF FF FF FF FF    
   6810 00DC40 FF FF FF FF FF FF FF FF    
   6810 00DC48 FF FF FF FF FF FF FF FF    
   6810 00DC50 FF FF FF FF FF FF FF FF    
   6810 00DC58 FF FF FF FF FF FF FF FF    
   6810 00DC60 FF FF FF FF FF FF FF FF    
   6810 00DC68 FF FF FF FF FF FF FF FF    
   6810 00DC70 FF FF FF FF FF FF FF FF    
   6810 00DC78 FF FF FF FF FF FF FF FF    
   6810 00DC80 FF FF FF FF FF FF FF FF    
   6810 00DC88 FF FF FF FF FF FF FF FF    
   6810 00DC90 FF FF FF FF FF FF FF FF    
   6810 00DC98 FF FF FF FF FF FF FF FF    
   6810 00DCA0 FF FF FF FF FF FF FF FF    
   6810 00DCA8 FF FF FF FF FF FF FF FF    
   6810 00DCB0 FF FF FF FF FF FF FF FF    
   6810 00DCB8 FF FF FF FF FF FF FF FF    
   6810 00DCC0 FF FF FF FF FF FF FF FF    
   6810 00DCC8 FF FF FF FF FF FF FF FF    
   6810 00DCD0 FF FF FF FF FF FF FF FF    
   6810 00DCD8 FF FF FF FF FF FF FF FF    
   6810 00DCE0 FF FF FF FF FF FF FF FF    
   6810 00DCE8 FF FF FF FF FF FF FF FF    
   6810 00DCF0 FF FF FF FF FF FF FF FF    
   6810 00DCF8 FF FF FF FF FF FF FF FF    
   6810 00DD00 FF FF FF FF FF FF FF FF    
   6810 00DD08 FF FF FF FF FF FF FF FF    
   6810 00DD10 FF FF FF FF FF FF FF FF    
   6810 00DD18 FF FF FF FF FF FF FF FF    
   6810 00DD20 FF FF FF FF FF FF FF FF    
   6810 00DD28 FF FF FF FF FF FF FF FF    
   6810 00DD30 FF FF FF FF FF FF FF FF    
   6810 00DD38 FF FF FF FF FF FF FF FF    
   6810 00DD40 FF FF FF FF FF FF FF FF    
   6810 00DD48 FF FF FF FF FF FF FF FF    
   6810 00DD50 FF FF FF FF FF FF FF FF    
   6810 00DD58 FF FF FF FF FF FF FF FF    
   6810 00DD60 FF FF FF FF FF FF FF FF    
   6810 00DD68 FF FF FF FF FF FF FF FF    
   6810 00DD70 FF FF FF FF FF FF FF FF    
   6810 00DD78 FF FF FF FF FF FF FF FF    
   6810 00DD80 FF FF FF FF FF FF FF FF    
   6810 00DD88 FF FF FF FF FF FF FF FF    
   6810 00DD90 FF FF FF FF FF FF FF FF    
   6810 00DD98 FF FF FF FF FF FF FF FF    
   6810 00DDA0 FF FF FF FF FF FF FF FF    
   6810 00DDA8 FF FF FF FF FF FF FF FF    
   6810 00DDB0 FF FF FF FF FF FF FF FF    
   6810 00DDB8 FF FF FF FF FF FF FF FF    
   6810 00DDC0 FF FF FF FF FF FF FF FF    
   6810 00DDC8 FF FF FF FF FF FF FF FF    
   6810 00DDD0 FF FF FF FF FF FF FF FF    
   6810 00DDD8 FF FF FF FF FF FF FF FF    
   6810 00DDE0 FF FF FF FF FF FF FF FF    
   6810 00DDE8 FF FF FF FF FF FF FF FF    
   6810 00DDF0 FF FF FF FF FF FF FF FF    
   6810 00DDF8 FF FF FF FF FF FF FF FF    
   6810 00DE00 FF FF FF FF FF FF FF FF    
   6810 00DE08 FF FF FF FF FF FF FF FF    
   6810 00DE10 FF FF FF FF FF FF FF FF    
   6810 00DE18 FF FF FF FF FF FF FF FF    
   6810 00DE20 FF FF FF FF FF FF FF FF    
   6810 00DE28 FF FF FF FF FF FF FF FF    
   6810 00DE30 FF FF FF FF FF FF FF FF    
   6810 00DE38 FF FF FF FF FF FF FF FF    
   6810 00DE40 FF FF FF FF FF FF FF FF    
   6810 00DE48 FF FF FF FF FF FF FF FF    
   6810 00DE50 FF FF FF FF FF FF FF FF    
   6810 00DE58 FF FF FF FF FF FF FF FF    
   6810 00DE60 FF FF FF FF FF FF FF FF    
   6810 00DE68 FF FF FF FF FF FF FF FF    
   6810 00DE70 FF FF FF FF FF FF FF FF    
   6810 00DE78 FF FF FF FF FF FF FF FF    
   6810 00DE80 FF FF FF FF FF FF FF FF    
   6810 00DE88 FF FF FF FF FF FF FF FF    
   6810 00DE90 FF FF FF FF FF FF FF FF    
   6810 00DE98 FF FF FF FF FF FF FF FF    
   6810 00DEA0 FF FF FF FF FF FF FF FF    
   6810 00DEA8 FF FF FF FF FF FF FF FF    
   6810 00DEB0 FF FF FF FF FF FF FF FF    
   6810 00DEB8 FF FF FF FF FF FF FF FF    
   6810 00DEC0 FF FF FF FF FF FF FF FF    
   6810 00DEC8 FF FF FF FF FF FF FF FF    
   6810 00DED0 FF FF FF FF FF FF FF FF    
   6810 00DED8 FF FF FF FF FF FF FF FF    
   6810 00DEE0 FF FF FF FF FF FF FF FF    
   6810 00DEE8 FF FF FF FF FF FF FF FF    
   6810 00DEF0 FF FF FF FF FF FF FF FF    
   6810 00DEF8 FF FF FF FF FF FF FF FF    
   6810 00DF00 FF FF FF FF FF FF FF FF    
   6810 00DF08 FF FF FF FF FF FF FF FF    
   6810 00DF10 FF FF FF FF FF FF FF FF    
   6810 00DF18 FF FF FF FF FF FF FF FF    
   6810 00DF20 FF FF FF FF FF FF FF FF    
   6810 00DF28 FF FF FF FF FF FF FF FF    
   6810 00DF30 FF FF FF FF FF FF FF FF    
   6810 00DF38 FF FF FF FF FF FF FF FF    
   6810 00DF40 FF FF FF FF FF FF FF FF    
   6810 00DF48 FF FF FF FF FF FF FF FF    
   6810 00DF50 FF FF FF FF FF FF FF FF    
   6810 00DF58 FF FF FF FF FF FF FF FF    
   6810 00DF60 FF FF FF FF FF FF FF FF    
   6810 00DF68 FF FF FF FF FF FF FF FF    
   6810 00DF70 FF FF FF FF FF FF FF FF    
   6810 00DF78 FF FF FF FF FF FF FF FF    
   6810 00DF80 FF FF FF FF FF FF FF FF    
   6810 00DF88 FF FF FF FF FF FF FF FF    
   6810 00DF90 FF FF FF FF FF FF FF FF    
   6810 00DF98 FF FF FF FF FF FF FF FF    
   6810 00DFA0 FF FF FF FF FF FF FF FF    
   6810 00DFA8 FF FF FF FF FF FF FF FF    
   6810 00DFB0 FF FF FF FF FF FF FF FF    
   6810 00DFB8 FF FF FF FF FF FF FF FF    
   6810 00DFC0 FF FF FF FF FF FF FF FF    
   6810 00DFC8 FF FF FF FF FF FF FF FF    
   6810 00DFD0 FF FF FF FF FF FF FF FF    
   6810 00DFD8 FF FF FF FF FF FF FF FF    
   6810 00DFE0 FF FF FF FF FF FF FF FF    
   6810 00DFE8 FF FF FF FF FF FF FF FF    
   6810 00DFF0 FF FF FF FF FF FF FF FF    
   6810 00DFF8 FF FF FF FF FF FF FF FF    
                                         
                                           
   6812 00E000                             start:
   6813 00E000 78                           	SEI
   6814 00E001 D8                           	CLD
                                           ;	CLV					; overflow low
                                           ;	SEC					; carry high
                                           ;	XCE					; sets 32 bit mode, 32 bit registers
                                           ;	REP		#$30		; 32 bit registers
                                           ;	MEM		32
                                           ;	NDX		32
                                           ;	LDA		#$3FFF
                                           ;	TAS
                                           ;
   6824 00E002 18                           	CLC					; switch to '816 mode
   6825 00E003 2C 00 E0                     	BIT		start		; set overflow bit
   6826 00E006 FB                           	XCE
   6827 00E007 C2 30                        	REP		#$30		; set 16 bit regs & mem
                                           	NDX 	16
                                           	MEM		16
   6830 00E009 A9 FF 3F                     	LDA		#$3FFF		; set top of stack
   6831 00E00C 1B                           	TAS
                                           
                                           	; setup the programmable address decodes
   6834 00E00D A9 70 00                     	LDA		#$0070		; program chip selects for I/O
   6835 00E010 8D 00 B0                     	STA		PCS0		; at $007000
   6836 00E013 A9 71 00                     	LDA		#$0071
   6837 00E016 8D 02 B0                     	STA		PCS1
                                           ;	LDA		#$FEA1		; select $FEA1xx I/O
                                           ;	STA		PCS3
   6840 00E019 A9 00 00                     	LDA		#$0000		; select zero page ram
   6841 00E01C 8D 0A B0                     	STA		PCS5
                                           
                                           	; Setup the counters
   6844 00E01F E2 30                        	SEP		#$30		; set 8 bit regs
                                           	NDX		8			; tell the assembler
                                           	MEM		8
                                           	; Counter #0 is setup as a free running tick count
   6848 00E021 A9 FF                        	LDA		#$FF		; set limit to $FFFFFF
   6849 00E023 8D 10 B0                     	STA		CTR0_LMT
   6850 00E026 8D 11 B0                     	STA		CTR0_LMT+1
   6851 00E029 8D 12 B0                     	STA		CTR0_LMT+2
   6852 00E02C A9 14                        	LDA		#$14		; count up, on mpu clock
   6853 00E02E 8D 13 B0                     	STA		CTR0_CTRL
                                           	; Counter #1 is set to interrupt at a 100Hz rate
   6855 00E031 A9 94                        	LDA		#$94		; divide by 95794 (for 100Hz)
   6856 00E033 8D 14 B0                     	STA		CTR1_LMT
   6857 00E036 A9 57                        	LDA		#$57
   6858 00E038 8D 15 B0                     	STA		CTR1_LMT+1
   6859 00E03B A9 09                        	LDA		#$09
   6860 00E03D 8D 16 B0                     	STA		CTR1_LMT+2
   6861 00E040 A9 05                        	LDA		#$05		; count down, on mpu clock, irq disenabled
   6862 00E042 8D 17 B0                     	STA		CTR1_CTRL
                                           	; Counter #2 isn't setup
                                           
   6865 00E045 C2 30                        	REP		#$30		; set 16 bit regs & mem
                                           	NDX 	16
                                           	MEM		16
                                           
                                           ;	FORK	#7			; fork a BIOS context
                                           ;	TTA
                                           ;	CMP		#7
                                           ;	BNE		.0002
                                           ;	RTT
                                           ;.0002:
                                           	; Setup the task registers
   6876 00E047 A0 06 00                     	LDY		#6			; # tasks to setup
   6877 00E04A A2 01 00                     	LDX		#1
   6878 00E04D                             .0001:
   6879 00E04D 42 4C 73 F0 00 00            	LDT		TaskStartTbl,X
   6880 00E053 E8                           	INX
   6881 00E054 88                           	DEY
   6882 00E055 D0 F6                        	BNE		.0001
                                           
   6884 00E057 64 B4                        	STZ		running_task
                                           
   6886 00E059 A9 08 F0                     	LDA		#BrkRout1
   6887 00E05C 8D 02 01                     	STA		$0102
                                           
   6889 00E05F 64 04                        	STZ		TickCount
   6890 00E061 64 06                        	STZ		TickCount+2
   6891 00E063                             Task0:
   6892 00E063 58                           	CLI
   6893 00E064                             .0001:
   6894 00E064 A9 3D E6                     	LDA		#DisplayChar
   6895 00E067 8D F0 03                     	STA		OutputVec
   6896 00E06A AD F0 03                     	LDA		OutputVec
   6897 00E06D C9 3D E6                     	CMP		#DisplayChar
   6898 00E070 D0 F2                        	BNE		.0001
   6899 00E072 A9 01 00                     	LDA		#$01
   6900 00E075 8D 00 70                     	STA		$7000
   6901 00E078 A9 00 BF                     	LDA		#$BF00
   6902 00E07B 85 36                        	STA		NormAttr
   6903 00E07D 20 68 E8                     	JSR		ClearScreen
   6904 00E080 20 F8 E7                     	JSR		HomeCursor
   6905 00E083 A9 02 00                     	LDA		#$02
   6906 00E086 8D 00 70                     	STA		$7000
   6907 00E089 F4 AD E5                     	PEA		msgStarting
   6908 00E08C 20 27 E8                     	JSR		DisplayString
   6909 00E08F A9 00 00                     	LDA		#0
   6910 00E092 8F 00 A2 FE                  	STA		FAC1
   6911 00E096 8F 02 A2 FE                  	STA		FAC1+2
   6912 00E09A 8F 04 A2 FE                  	STA		FAC1+4
   6913 00E09E 8F 06 A2 FE                  	STA		FAC1+6
   6914 00E0A2 8F 08 A2 FE                  	STA		FAC1+8
   6915 00E0A6 8F 0A A2 FE                  	STA		FAC1+10
   6916 00E0AA A9 D2 04                     	LDA		#1234
   6917 00E0AD 8F 00 A2 FE                  	STA		FAC1
   6918 00E0B1 A9 05 00                     	LDA		#5			; FIX2FLT
   6919 00E0B4 20 13 D3                     	JSR 	FPCommandWait
   6920 00E0B7 20 00 D3                     	JSR		DivideByTen
   6921 00E0BA 20 DA D0                     	JSR		FAC1ToString
   6922 00E0BD F4 A0 03                     	PEA		$3A0
   6923 00E0C0 20 27 E8                     	JSR		DisplayString
   6924 00E0C3 A9 20 00                     	LDA		#' '
   6925 00E0C6 20 1C E8                     	JSR		OutChar
   6926 00E0C9 20 23 D3                     	JSR		DispFAC1
   6927 00E0CC 78                           	SEI
   6928 00E0CD 42 A0 07 00                  	FORK	#7			; fork a BIOS context
   6929 00E0D1 42 1A                        	TTA
   6930 00E0D3 C9 07 00                     	CMP		#7
   6931 00E0D6 D0 02                        	BNE		.0002
   6932 00E0D8 42 60                        	RTT
   6933 00E0DA                             .0002:
   6934 00E0DA 42 A0 0B 00                  	FORK	#11
   6935 00E0DE 42 1A                        	TTA
   6936 00E0E0 C9 0B 00                     	CMP		#11
   6937 00E0E3 F0 FF CD 08                  	LBEQ	KeybdInit
   6938 00E0E7 58                           	CLI
                                           
   6940 00E0E8                             Mon1:
   6941 00E0E8                             .mon1:
   6942 00E0E8 20 13 E8                     	JSR		OutCRLF
   6943 00E0EB A9 24 00                     	LDA		#'$'
   6944 00E0EE                             .mon3:
   6945 00E0EE 20 1C E8                     	JSR		OutChar
   6946 00E0F1 20 EC EA                     	JSR		KeybdGetCharWait
   6947 00E0F4 29 FF 00                     	AND		#$FF
                                           ;	CMP		#'.'
                                           ;	BEQ		.mon3
   6950 00E0F7 C9 0D 00                     	CMP		#CR
   6951 00E0FA D0 F2                        	BNE		.mon3
   6952 00E0FC A5 32                        	LDA		CursorY
   6953 00E0FE 0A                           	ASL
   6954 00E0FF AA                           	TAX
   6955 00E100 BD 35 F0                     	LDA		LineTbl,X
   6956 00E103 0A                           	ASL
   6957 00E104 AA                           	TAX
   6958 00E105                             .mon4:
   6959 00E105 20 51 E5                     	JSR		IgnoreBlanks
   6960 00E108 20 68 E1                     	JSR		MonGetch
   6961 00E10B C9 24 00                     	CMP		#'$'
   6962 00E10E F0 F5                        	BEQ		.mon4
   6963 00E110 C9 53 00                     	CMP		#'S'
   6964 00E113 D0 03                        	BNE		.mon2
   6965 00E115 4C 00 C0                     	JMP		$C000		; invoke Supermon816
   6966 00E118                             .mon2:
   6967 00E118 C9 43 00                     	CMP		#'C'
   6968 00E11B D0 08                        	BNE		.mon5
   6969 00E11D 20 68 E8                     	JSR		ClearScreen
   6970 00E120 20 F8 E7                     	JSR		HomeCursor
   6971 00E123 80 C3                        	BRA		.mon1
   6972 00E125                             .mon5:
   6973 00E125 C9 4D 00                     	CMP		#'M'
   6974 00E128 F0 FF A2 02                  	LBEQ	doMemoryDump
   6975 00E12C C9 44 00                     	CMP		#'D'
   6976 00E12F F0 FF 9E 03                  	LBEQ	doDisassemble
   6977 00E133 C9 3E 00                     	CMP		#'>'
   6978 00E136 F0 FF 06 03                  	LBEQ	doMemoryEdit
   6979 00E13A C9 46 00                     	CMP		#'F'
   6980 00E13D F0 FF 3A 03                  	LBEQ	doFill
   6981 00E141 C9 4A 00                     	CMP		#'J'
   6982 00E144 F0 FF D9 03                  	LBEQ	doJump
   6983 00E148 C9 54 00                     	CMP		#'T'
   6984 00E14B F0 FF 2F 00                  	LBEQ	doTask2
   6985 00E14F C9 49 00                     	CMP		#'I'
   6986 00E152 F0 FF 2F 00                  	LBEQ	doInvaders
   6987 00E156 C9 52 00                     	CMP		#'R'
   6988 00E159 F0 FF 35 00                  	LBEQ	doRegs
   6989 00E15D 80 89                        	BRA		Mon1
                                           
                                           ; Get a character from the screen, skipping over spaces and tabs
                                           ;
   6993 00E15F                             MonGetNonSpace:
   6994 00E15F                             .0001:
   6995 00E15F 20 68 E1                     	JSR		MonGetch
   6996 00E162 C9 20 00                     	CMP		#' '
   6997 00E165 F0 F8                        	BEQ		.0001
   6998 00E167 60                           	RTS
                                           
                                           ; Get a character from the screen.
                                           ;
   7002 00E168                             MonGetch:
   7003 00E168 BF 00 00 FD                  	LDA		VIDBUF,X
   7004 00E16C E8                           	INX
   7005 00E16D E8                           	INX
   7006 00E16E 29 FF 00                     	AND		#$FF
   7007 00E171 20 31 E6                     	JSR		ScreenToAscii
   7008 00E174 60                           	RTS
                                           
   7010 00E175                             MonErr:
   7011 00E175 F4 D1 F1                     	PEA		msgErr
   7012 00E178 20 27 E8                     	JSR		DisplayString
   7013 00E17B 82 6A FF                     	BRL		Mon1
                                           
                                           ;------------------------------------------------------------------------------
                                           ;------------------------------------------------------------------------------
   7017 00E17E                             doTask2:
   7018 00E17E 42 A2 02 00                  	TSK		#2
   7019 00E182 82 63 FF                     	BRL		Mon1
                                           
   7021 00E185                             doInvaders:
   7022 00E185 A9 FF FF                     	LDA		#$FFFF
   7023 00E188 8D 68 78                     	STA		do_invaders
   7024 00E18B 42 A2 05 00                  	TSK		#5
                                           ;	FORK	#5
                                           ;	TTA
                                           ;	CMP		#5
                                           ;	LBEQ	InvadersTask
   7029 00E18F 82 56 FF                     	BRL		Mon1
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Display Registers
                                           ; R<xx>		xx = context register to display
                                           ; Update Registers
                                           ; R.<reg> <val>
                                           ;	reg = CS PB PC A X Y SP SR DS DB or DP
                                           ;------------------------------------------------------------------------------
                                           
   7039 00E192                             doRegs:
   7040 00E192 20 68 E1                     	JSR		MonGetch
   7041 00E195 C9 2E 00                     	CMP		#'.'
   7042 00E198 D0 FF 13 01                  	LBNE	.0004
   7043 00E19C 20 68 E1                     	JSR		MonGetch
   7044 00E19F C9 43 00                     	CMP		#'C'
   7045 00E1A2 D0 26                        	BNE		.0005
   7046 00E1A4 20 68 E1                     	JSR		MonGetch
   7047 00E1A7 C9 53 00                     	CMP		#'S'
   7048 00E1AA D0 FF 3A FF                  	LBNE	Mon1
   7049 00E1AE 20 51 E5                     	JSR		IgnoreBlanks
   7050 00E1B1 20 11 E9                     	JSR		GetHexNumber
   7051 00E1B4 A5 0C                        	LDA		NumWorkArea
   7052 00E1B6 85 80                        	STA		reg_cs
   7053 00E1B8 A5 0E                        	LDA		NumWorkArea+2
   7054 00E1BA 85 82                        	STA		reg_cs+2
   7055 00E1BC                             .buildrec
   7056 00E1BC 20 64 E3                     	JSR		BuildRec
   7057 00E1BF A6 BA                        	LDX		WorkTR
   7058 00E1C1 42 6C 00 01 00 00            	LDT		ldtrec
   7059 00E1C7 82 1E FF                     	BRL		Mon1
   7060 00E1CA                             .0005:
   7061 00E1CA C9 50 00                     	CMP		#'P'
   7062 00E1CD D0 27                        	BNE		.0006
   7063 00E1CF 20 68 E1                     	JSR		MonGetch
   7064 00E1D2 C9 42 00                     	CMP		#'B'
   7065 00E1D5 D0 0C                        	BNE		.0007
   7066 00E1D7 20 51 E5                     	JSR		IgnoreBlanks
   7067 00E1DA 20 11 E9                     	JSR		GetHexNumber
   7068 00E1DD A5 0E                        	LDA		NumWorkArea+2
   7069 00E1DF 85 8A                        	STA		reg_pc+2
   7070 00E1E1 80 D9                        	BRA		.buildrec
   7071 00E1E3                             .0007:
   7072 00E1E3 C9 43 00                     	CMP		#'C'
   7073 00E1E6 D0 FF FE FE                  	LBNE	Mon1
   7074 00E1EA 20 51 E5                     	JSR		IgnoreBlanks
   7075 00E1ED 20 11 E9                     	JSR		GetHexNumber
   7076 00E1F0 A5 0C                        	LDA		NumWorkArea
   7077 00E1F2 85 88                        	STA		reg_pc
   7078 00E1F4 80 C6                        	BRA		.buildrec
   7079 00E1F6                             .0006:
   7080 00E1F6 C9 41 00                     	CMP		#'A'
   7081 00E1F9 D0 10                        	BNE		.0008
   7082 00E1FB 20 51 E5                     	JSR		IgnoreBlanks
   7083 00E1FE 20 11 E9                     	JSR		GetHexNumber
   7084 00E201 A5 0C                        	LDA		NumWorkArea
   7085 00E203 85 8C                        	STA		reg_a
   7086 00E205 A5 0E                        	LDA		NumWorkArea+2
   7087 00E207 85 8E                        	STA		reg_a+2
   7088 00E209 80 B1                        	BRA		.buildrec
   7089 00E20B                             .0008:
   7090 00E20B C9 58 00                     	CMP		#'X'
   7091 00E20E D0 11                        	BNE		.0009
   7092 00E210 20 51 E5                     	JSR		IgnoreBlanks
   7093 00E213 20 11 E9                     	JSR		GetHexNumber
   7094 00E216 A5 0C                        	LDA		NumWorkArea
   7095 00E218 85 90                        	STA		reg_x
   7096 00E21A A5 0E                        	LDA		NumWorkArea+2
   7097 00E21C 85 92                        	STA		reg_x+2
   7098 00E21E 82 9B FF                     	BRL		.buildrec
   7099 00E221                             .0009:
   7100 00E221 C9 59 00                     	CMP		#'Y'
   7101 00E224 D0 11                        	BNE		.0010
   7102 00E226 20 51 E5                     	JSR		IgnoreBlanks
   7103 00E229 20 11 E9                     	JSR		GetHexNumber
   7104 00E22C A5 0C                        	LDA		NumWorkArea
   7105 00E22E 85 94                        	STA		reg_y
   7106 00E230 A5 0E                        	LDA		NumWorkArea+2
   7107 00E232 85 96                        	STA		reg_y+2
   7108 00E234 82 85 FF                     	BRL		.buildrec
   7109 00E237                             .0010:
   7110 00E237 C9 53 00                     	CMP		#'S'
   7111 00E23A D0 2D                        	BNE		.0011
   7112 00E23C 20 68 E1                     	JSR		MonGetch
   7113 00E23F C9 50 00                     	CMP		#'P'
   7114 00E242 D0 11                        	BNE		.0015
   7115 00E244 20 51 E5                     	JSR		IgnoreBlanks
   7116 00E247 20 11 E9                     	JSR		GetHexNumber
   7117 00E24A A5 0C                        	LDA		NumWorkArea
   7118 00E24C 85 98                        	STA		reg_sp
   7119 00E24E A5 0E                        	LDA		NumWorkArea+2
   7120 00E250 85 9A                        	STA		reg_sp+2
   7121 00E252 82 67 FF                     	BRL		.buildrec
   7122 00E255                             .0015:
   7123 00E255 C9 52 00                     	CMP		#'R'
   7124 00E258 D0 FF 8C FE                  	LBNE	Mon1
   7125 00E25C 20 51 E5                     	JSR		IgnoreBlanks
   7126 00E25F 20 11 E9                     	JSR		GetHexNumber
   7127 00E262 A5 0C                        	LDA		NumWorkArea
   7128 00E264 85 9C                        	STA		reg_sr
   7129 00E266 82 53 FF                     	BRL		.buildrec
   7130 00E269                             .0011:
   7131 00E269 C9 44 00                     	CMP		#'D'
   7132 00E26C D0 FF 78 FE                  	LBNE	Mon1
   7133 00E270 20 68 E1                     	JSR		MonGetch
   7134 00E273 C9 53 00                     	CMP		#'S'
   7135 00E276 D0 11                        	BNE		.0012
   7136 00E278 20 51 E5                     	JSR		IgnoreBlanks
   7137 00E27B 20 11 E9                     	JSR		GetHexNumber
   7138 00E27E A5 0C                        	LDA		NumWorkArea
   7139 00E280 85 84                        	STA		reg_ds
   7140 00E282 A5 0E                        	LDA		NumWorkArea+2
   7141 00E284 85 86                        	STA		reg_ds+2
   7142 00E286 82 33 FF                     	BRL		.buildrec
   7143 00E289                             .0012:
   7144 00E289 C9 42 00                     	CMP		#'B'
   7145 00E28C D0 0D                        	BNE		.0013
   7146 00E28E 20 51 E5                     	JSR		IgnoreBlanks
   7147 00E291 20 11 E9                     	JSR		GetHexNumber
   7148 00E294 A5 0C                        	LDA		NumWorkArea
   7149 00E296 85 A0                        	STA		reg_db
   7150 00E298 82 21 FF                     	BRL		.buildrec
   7151 00E29B                             .0013:
   7152 00E29B C9 50 00                     	CMP		#'P'
   7153 00E29E D0 FF 46 FE                  	LBNE	Mon1
   7154 00E2A2 20 51 E5                     	JSR		IgnoreBlanks
   7155 00E2A5 20 11 E9                     	JSR		GetHexNumber
   7156 00E2A8 A5 0C                        	LDA		NumWorkArea
   7157 00E2AA 85 A4                        	STA		reg_dp
   7158 00E2AC 82 0D FF                     	BRL		.buildrec
                                           
   7160 00E2AF                             .0004:
   7161 00E2AF CA                           	DEX
   7162 00E2B0 CA                           	DEX
                                           ;	JSR		IgnoreBlanks
   7164 00E2B1 20 11 E9                     	JSR		GetHexNumber
   7165 00E2B4 C0 00 00                     	CPY		#0
   7166 00E2B7 F0 FF 2D FE                  	LBEQ	Mon1
   7167 00E2BB A5 0C                        	LDA		NumWorkArea
   7168 00E2BD 85 BA                        	STA		WorkTR
   7169 00E2BF 20 C5 E2                     	JSR		DispRegs
   7170 00E2C2 82 23 FE                     	BRL		Mon1
                                           
   7172 00E2C5                             DispRegs:
   7173 00E2C5 F4 53 F1                     	PEA		msgRegs
   7174 00E2C8 20 27 E8                     	JSR		DisplayString
   7175 00E2CB 20 DD E8                     	JSR		space
                                           
   7177 00E2CE A5 BA                        	LDA		WorkTR
   7178 00E2D0 0A                           	ASL
   7179 00E2D1 0A                           	ASL
   7180 00E2D2 0A                           	ASL
   7181 00E2D3 0A                           	ASL
   7182 00E2D4 AA                           	TAX
                                           
   7184 00E2D5 A0 00 00                     	LDY		#0
   7185 00E2D8                             .0001:
   7186 00E2D8 42 4A                        	INF
   7187 00E2DA E8                           	INX
   7188 00E2DB 99 80 00                     	STA		reg_cs,Y
   7189 00E2DE 42 EB                        	XBAW
   7190 00E2E0 99 82 00                     	STA		reg_cs+2,Y
   7191 00E2E3 42 C8                        	INY4
   7192 00E2E5 C0 2C 00                     	CPY		#44
   7193 00E2E8 D0 EE                        	BNE		.0001
                                           
                                           	; Display CS
   7196 00E2EA A5 82                        	LDA		reg_cs+2
   7197 00E2EC 20 B6 E8                     	JSR		DispWord
   7198 00E2EF A5 80                        	LDA		reg_cs
   7199 00E2F1 20 B6 E8                     	JSR		DispWord
   7200 00E2F4 A9 3A 00                     	LDA		#':'
   7201 00E2F7 20 1C E8                     	JSR		OutChar
                                           
                                           	; Display PB PC
   7204 00E2FA A5 8A                        	LDA		reg_cs+10
   7205 00E2FC 20 BB E8                     	JSR		DispByte
   7206 00E2FF A5 88                        	LDA		reg_cs+8
   7207 00E301 20 B6 E8                     	JSR		DispWord
   7208 00E304 20 DD E8                     	JSR		space
                                           
                                           	; Display SRX,SR
   7211 00E307 A5 9C                        	LDA		reg_cs+28
   7212 00E309 A2 10 00                     	LDX		#16
   7213 00E30C                             .0003:
   7214 00E30C 0A                           	ASL
   7215 00E30D 48                           	PHA
   7216 00E30E A9 30 00                     	LDA		#'0'
   7217 00E311 69 00 00                     	ADC		#0
   7218 00E314 20 C4 E8                     	JSR		DispNybble
   7219 00E317 68                           	PLA
   7220 00E318 CA                           	DEX
   7221 00E319 D0 F1                        	BNE		.0003
   7222 00E31B 20 DD E8                     	JSR		space
                                           
   7224 00E31E A2 0C 00                     	LDX		#12
   7225 00E321                             .0002
                                           	; display Acc,.X,.Y,.SP
   7227 00E321 B5 82                        	LDA		reg_cs+2,X
   7228 00E323 20 B6 E8                     	JSR		DispWord
   7229 00E326 B5 80                        	LDA		reg_cs,X
   7230 00E328 20 B6 E8                     	JSR		DispWord
   7231 00E32B 20 DD E8                     	JSR		space
   7232 00E32E 42 E8                        	INX4
   7233 00E330 E0 1C 00                     	CPX		#28
   7234 00E333 D0 EC                        	BNE		.0002
                                           
   7236 00E335 F4 B7 F1                     	PEA		msgRegs2
   7237 00E338 20 27 E8                     	JSR		DisplayString
   7238 00E33B 20 DD E8                     	JSR		space
                                           
                                           	; Display DS
   7241 00E33E A5 86                        	LDA		reg_cs+6
   7242 00E340 20 B6 E8                     	JSR		DispWord
   7243 00E343 A5 84                        	LDA		reg_cs+4
   7244 00E345 20 B6 E8                     	JSR		DispWord
   7245 00E348 20 DD E8                     	JSR		space
                                           
                                           	; Display DB
   7248 00E34B A5 A0                        	LDA		reg_cs+32
   7249 00E34D 20 BB E8                     	JSR		DispByte
   7250 00E350 20 DD E8                     	JSR		space
                                           
                                           	; Display DPR
   7253 00E353 A5 A4                        	LDA		reg_cs+36
   7254 00E355 20 B6 E8                     	JSR		DispWord
   7255 00E358 20 DD E8                     	JSR		space
                                           
                                           	; Display back link
   7258 00E35B A5 A8                        	LDA		reg_cs+40
   7259 00E35D 20 B6 E8                     	JSR		DispWord
                                           
   7261 00E360 20 13 E8                     	JSR		OutCRLF
   7262 00E363 60                           	RTS
                                           
                                           ; Build a startup record from the register values so that a context reg
                                           ; may be loaded
                                           
   7267 00E364                             BuildRec:
   7268 00E364 A5 80                        	LDA		reg_cs
   7269 00E366 8D 00 01                     	STA		ldtrec
   7270 00E369 A5 82                        	LDA		reg_cs+2
   7271 00E36B 8D 02 01                     	STA		ldtrec+2
   7272 00E36E A5 84                        	LDA		reg_ds
   7273 00E370 8D 04 01                     	STA		ldtrec+4
   7274 00E373 A5 86                        	LDA		reg_ds+2
   7275 00E375 8D 06 01                     	STA		ldtrec+6
   7276 00E378 A5 88                        	LDA		reg_pc
   7277 00E37A 8D 08 01                     	STA		ldtrec+8
   7278 00E37D A5 8A                        	LDA		reg_pc+2
   7279 00E37F 29 FF 00                     	AND		#$FF
   7280 00E382 E2 30                        	SEP		#$30		; 8 bit regs
                                           	MEM		8
   7282 00E384 EB                           	XBA
   7283 00E385 A5 8C                        	LDA		reg_a
   7284 00E387 EB                           	XBA
   7285 00E388 C2 30                        	REP		#$30
                                           	MEM		16
   7287 00E38A 8D 0A 01                     	STA		ldtrec+10
   7288 00E38D A5 8D                        	LDA		reg_a+1
   7289 00E38F 8D 0C 01                     	STA		ldtrec+12
   7290 00E392 A5 8F                        	LDA		reg_a+3
   7291 00E394 8D 0E 01                     	STA		ldtrec+14
   7292 00E397 A5 91                        	LDA		reg_x+1
   7293 00E399 8D 10 01                     	STA		ldtrec+16
   7294 00E39C A5 93                        	LDA		reg_x+3
   7295 00E39E 8D 12 01                     	STA		ldtrec+18
   7296 00E3A1 A5 95                        	LDA		reg_y+1
   7297 00E3A3 8D 14 01                     	STA		ldtrec+20
   7298 00E3A6 A5 97                        	LDA		reg_y+3
   7299 00E3A8 8D 16 01                     	STA		ldtrec+22
   7300 00E3AB A5 99                        	LDA		reg_sp+1
   7301 00E3AD 8D 18 01                     	STA		ldtrec+24
   7302 00E3B0 A5 9B                        	LDA		reg_sp+3
   7303 00E3B2 8D 1A 01                     	STA		ldtrec+26
   7304 00E3B5 E2 30                        	SEP		#$30
   7305 00E3B7 A5 9D                        	LDA		reg_sr+1
   7306 00E3B9 8D 1C 01                     	STA		ldtrec+28
   7307 00E3BC A5 A0                        	LDA		reg_db
   7308 00E3BE 8D 1D 01                     	STA		ldtrec+29
   7309 00E3C1 A5 A4                        	LDA		reg_dp
   7310 00E3C3 8D 1E 01                     	STA		ldtrec+30
   7311 00E3C6 A5 A5                        	LDA		reg_dp+1
   7312 00E3C8 8D 1F 01                     	STA		ldtrec+31
   7313 00E3CB C2 30                        	REP		#$30
   7314 00E3CD 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Dump memory.
                                           ;------------------------------------------------------------------------------
                                           
   7320 00E3CE                             doMemoryDump:
   7321 00E3CE 20 51 E5                     	JSR		IgnoreBlanks
   7322 00E3D1 20 E6 E8                     	JSR		GetRange
   7323 00E3D4 20 13 E8                     	JSR		OutCRLF
   7324 00E3D7                             .0007:
   7325 00E3D7 A9 3E 00                     	LDA		#'>'
   7326 00E3DA 20 1C E8                     	JSR		OutChar
   7327 00E3DD 20 41 E5                     	JSR		DispRangeStart
   7328 00E3E0 A0 00 00                     	LDY		#0
   7329 00E3E3                             .0001:
   7330 00E3E3 42 B7 20                     	LDA		{RangeStart},Y
   7331 00E3E6 20 BB E8                     	JSR		DispByte
   7332 00E3E9 A9 20 00                     	LDA		#' '
   7333 00E3EC 20 1C E8                     	JSR		OutChar
   7334 00E3EF C8                           	INY
   7335 00E3F0 C0 08 00                     	CPY		#8
   7336 00E3F3 D0 EE                        	BNE		.0001
   7337 00E3F5 A0 00 00                     	LDY 	#0
   7338 00E3F8                             .0005:
   7339 00E3F8 42 B7 20                     	LDA		{RangeStart},Y
   7340 00E3FB C9 00 00                     	CMP		#$' '
   7341 00E3FE B0 05                        	BCS		.0002
   7342 00E400                             .0004:
   7343 00E400 A9 2E 00                     	LDA		#'.'
   7344 00E403 80 05                        	BRA		.0003
   7345 00E405                             .0002:
   7346 00E405 C9 7F 00                     	CMP		#$7f
   7347 00E408 90 F6                        	BCC		.0004
   7348 00E40A                             .0003:
   7349 00E40A 20 1C E8                     	JSR		OutChar
   7350 00E40D C8                           	INY
   7351 00E40E C0 08 00                     	CPY		#8
   7352 00E411 D0 E5                        	BNE		.0005
   7353 00E413 20 13 E8                     	JSR		OutCRLF
   7354 00E416 18                           	CLC
   7355 00E417 A5 20                        	LDA		RangeStart
   7356 00E419 69 08 00                     	ADC		#8
   7357 00E41C 85 20                        	STA		RangeStart
   7358 00E41E 90 02                        	BCC		.0006
   7359 00E420 E6 22                        	INC		RangeStart+2
   7360 00E422                             .0006:
   7361 00E422 38                           	SEC
   7362 00E423 A5 24                        	LDA		RangeEnd
   7363 00E425 E5 20                        	SBC		RangeStart
   7364 00E427 A5 26                        	LDA		RangeEnd+2
   7365 00E429 E5 22                        	SBC		RangeStart+2
   7366 00E42B 08                           	PHP
   7367 00E42C 42 20 DB EA 07               	JCR		KeybdGetCharNoWaitCtx,7
   7368 00E431 C9 03 00                     	CMP		#CTRLC
   7369 00E434 F0 06                        	BEQ		.0009
   7370 00E436 28                           	PLP
   7371 00E437 10 9E                        	BPL		.0007
   7372 00E439                             .0008:
   7373 00E439 4C E8 E0                     	JMP		Mon1
   7374 00E43C                             .0009:
   7375 00E43C 28                           	PLP
   7376 00E43D 4C E8 E0                     	JMP		Mon1
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Edit memory.
                                           ; ><memory address> <val1> <val2> ... <val8>
                                           ;------------------------------------------------------------------------------
                                           
   7383 00E440                             doMemoryEdit:
   7384 00E440 20 51 E5                     	JSR		IgnoreBlanks
   7385 00E443 20 11 E9                     	JSR		GetHexNumber
   7386 00E446 C0 00 00                     	CPY		#0
   7387 00E449 F0 FF 9B FC                  	LBEQ	Mon1
   7388 00E44D A5 0C                        	LDA		NumWorkArea
   7389 00E44F 85 20                        	STA		RangeStart
   7390 00E451 A5 0E                        	LDA		NumWorkArea+2
   7391 00E453 85 22                        	STA		RangeStart+2
   7392 00E455 A0 00 00                     	LDY		#0
   7393 00E458                             .0001:
   7394 00E458 5A                           	PHY
   7395 00E459 20 51 E5                     	JSR		IgnoreBlanks
   7396 00E45C 20 11 E9                     	JSR		GetHexNumber
   7397 00E45F C0 00 00                     	CPY		#0
   7398 00E462 F0 13                        	BEQ		.0002
   7399 00E464 7A                           	PLY
   7400 00E465 E2 20                        	SEP		#$20
   7401 00E467 A5 0C                        	LDA		NumWorkArea
   7402 00E469 42 97 20                     	STA		{RangeStart},Y
   7403 00E46C C2 20                        	REP		#$20
   7404 00E46E C8                           	INY
   7405 00E46F C0 08 00                     	CPY		#8
   7406 00E472 D0 E4                        	BNE		.0001
   7407 00E474 82 71 FC                     	BRL		Mon1
   7408 00E477                             .0002:
   7409 00E477 7A                           	PLY
   7410 00E478 82 6D FC                     	BRL		Mon1
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Fill memory.
                                           ; $F <start address> <end address> <val1>
                                           ;------------------------------------------------------------------------------
                                           
   7417 00E47B                             doFill:
   7418 00E47B 20 51 E5                     	JSR		IgnoreBlanks
   7419 00E47E 20 11 E9                     	JSR		GetHexNumber
   7420 00E481 C0 00 00                     	CPY		#0
   7421 00E484 F0 FF ED FC                  	LBEQ	MonErr
   7422 00E488 A5 0C                        	LDA		NumWorkArea
   7423 00E48A 85 20                        	STA		RangeStart
   7424 00E48C A5 0E                        	LDA		NumWorkArea+2
   7425 00E48E 85 22                        	STA		RangeStart+2
   7426 00E490 20 51 E5                     	JSR		IgnoreBlanks
   7427 00E493 20 11 E9                     	JSR		GetHexNumber
   7428 00E496 C0 00 00                     	CPY		#0
   7429 00E499 F0 FF D8 FC                  	LBEQ	MonErr
   7430 00E49D A5 0C                        	LDA		NumWorkArea
   7431 00E49F 85 24                        	STA		RangeEnd
   7432 00E4A1 A5 0E                        	LDA		NumWorkArea+2
   7433 00E4A3 85 26                        	STA		RangeEnd+2
   7434 00E4A5 20 51 E5                     	JSR		IgnoreBlanks
   7435 00E4A8 20 11 E9                     	JSR		GetHexNumber
   7436 00E4AB C0 00 00                     	CPY		#0
   7437 00E4AE F0 FF C3 FC                  	LBEQ	MonErr
   7438 00E4B2 A6 0C                        	LDX		NumWorkArea
                                           	; Process in 32 bit mode
   7440 00E4B4 42 E2 00 02                  	SEP		#$200
   7441 00E4B8 42 C2 00 01                  	REP		#$100
   7442 00E4BC A5 24                        	LDA		RangeEnd
   7443 00E4BE 38                           	SEC
   7444 00E4BF E5 20                        	SBC		RangeStart
   7445 00E4C1 A4 20                        	LDY		RangeStart
   7446 00E4C3 42 44 00                     	FIL		$00
                                           	; Back to 16 bits mode
   7448 00E4C6 42 C2 00 02                  	REP		#$200
   7449 00E4CA 42 E2 00 01                  	SEP		#$100
   7450 00E4CE 82 17 FC                     	BRL		Mon1
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Disassemble code
                                           ;------------------------------------------------------------------------------
                                           
   7456 00E4D1                             doDisassemble:
   7457 00E4D1 20 68 E1                     	JSR		MonGetch
   7458 00E4D4 C9 4D 00                     	CMP		#'M'
   7459 00E4D7 F0 11                        	BEQ		.0002
   7460 00E4D9                             .0004:
   7461 00E4D9 C9 4E 00                     	CMP		#'N'
   7462 00E4DC D0 1B                        	BNE		.0003
   7463 00E4DE E2 20                        	SEP		#$20
                                           	MEM		8
   7465 00E4E0 A5 BC                        	LDA		$BC
   7466 00E4E2 09 40                        	ORA		#$40
   7467 00E4E4 85 BC                        	STA		$BC
   7468 00E4E6 C2 20                        	REP		#$20
   7469 00E4E8 80 11                        	BRA		.0005
   7470 00E4EA                             .0002:
   7471 00E4EA E2 20                        	SEP		#$20
   7472 00E4EC A5 BC                        	LDA		$BC
   7473 00E4EE 09 80                        	ORA		#$80
   7474 00E4F0 85 BC                        	STA		$BC
   7475 00E4F2 C2 20                        	REP		#$20
   7476 00E4F4 20 68 E1                     	JSR		MonGetch
   7477 00E4F7 80 E0                        	BRA		.0004
                                           	MEM		16
   7479 00E4F9                             .0003:
   7480 00E4F9 CA                           	DEX
   7481 00E4FA CA                           	DEX
   7482 00E4FB                             .0005:
   7483 00E4FB 20 51 E5                     	JSR		IgnoreBlanks
   7484 00E4FE 20 E6 E8                     	JSR		GetRange
   7485 00E501 A5 20                        	LDA		RangeStart
   7486 00E503 85 8F                        	STA		$8F				; addra
   7487 00E505 A5 21                        	LDA		RangeStart+1
   7488 00E507 85 90                        	STA		$90
   7489 00E509 20 13 E8                     	JSR		OutCRLF
   7490 00E50C A0 14 00                     	LDY		#20
   7491 00E50F                             .0001:
   7492 00E50F 5A                           	PHY
   7493 00E510 E2 30                        	SEP		#$30
   7494 00E512 20 6F C6                     	JSR		dpycod
   7495 00E515 C2 30                        	REP		#$30
   7496 00E517 20 13 E8                     	JSR		OutCRLF
   7497 00E51A 7A                           	PLY
   7498 00E51B 88                           	DEY
   7499 00E51C D0 F1                        	BNE		.0001
   7500 00E51E 4C E8 E0                     	JMP		Mon1
                                           
                                           ;$BC flimflag
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Jump to subroutine
                                           ;------------------------------------------------------------------------------
                                           
   7508 00E521                             doJump:
   7509 00E521 20 51 E5                     	JSR		IgnoreBlanks
   7510 00E524 20 11 E9                     	JSR		GetHexNumber
   7511 00E527 C0 00 00                     	CPY		#0
   7512 00E52A F0 FF BA FB                  	LBEQ	Mon1
   7513 00E52E A9 5C 00                     	LDA		#$5C			; JML opcode
   7514 00E531 85 23                        	STA		RangeEnd-1
   7515 00E533 A5 0C                        	LDA		NumWorkArea
   7516 00E535 85 24                        	STA		RangeEnd
   7517 00E537 A5 0D                        	LDA		NumWorkArea+1
   7518 00E539 85 25                        	STA		RangeEnd+1
   7519 00E53B 22 24 00                     	JSL		RangeEnd
   7520 00E53E 82 A7 FB                     	BRL		Mon1
                                           
   7522 00E541                             DispRangeStart:
   7523 00E541 A5 21                        	LDA		RangeStart+1
   7524 00E543 20 B6 E8                     	JSR		DispWord
   7525 00E546 A5 20                        	LDA		RangeStart
   7526 00E548 20 BB E8                     	JSR		DispByte
   7527 00E54B A9 20 00                     	LDA		#' '
   7528 00E54E 4C 1C E8                     	JMP		OutChar
                                           	
                                           ; Skip over blanks in the input
                                           ;------------------------------------------------------------------------------
                                           
   7533 00E551                             IgnoreBlanks:
   7534 00E551                             .0001:
   7535 00E551 20 68 E1                     	JSR		MonGetch
   7536 00E554 C9 20 00                     	CMP		#' '
   7537 00E557 F0 F8                        	BEQ		.0001
   7538 00E559 CA                           	DEX
   7539 00E55A CA                           	DEX
   7540 00E55B 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ; BIOSInput allows full screen editing of text until a carriage return is keyed
                                           ; at which point the line the cursor is on is copied to a buffer. The buffer
                                           ; must be at least TEXTCOLS characters in size.
                                           ;------------------------------------------------------------------------------
                                           ;
   7548 00E55C                             BIOSInput:
   7549 00E55C                             .bin1:
   7550 00E55C 20 EC EA                     	JSR		KeybdGetCharWait
   7551 00E55F 29 FF 00                     	AND		#$FF
   7552 00E562 C9 0D 00                     	CMP		#CR
   7553 00E565 F0 05                        	BEQ		.bin2
   7554 00E567 20 1C E8                     	JSR		OutChar
   7555 00E56A 80 F0                        	BRA		.bin1
   7556 00E56C                             .bin2:
   7557 00E56C A5 30                        	LDA		CursorX
   7558 00E56E F0 1A                        	BEQ		.bin4
   7559 00E570 A5 34                        	LDA		VideoPos	; get current video position
   7560 00E572 38                           	SEC
   7561 00E573 E5 30                        	SBC		CursorX		; go back to the start of the line
   7562 00E575 0A                           	ASL
   7563 00E576 AA                           	TAX
   7564 00E577                             .bin3:
   7565 00E577 BF 00 00 FD                  	LDA		VIDBUF,X
   7566 00E57B 29 FF 00                     	AND		#$FF
   7567 00E57E 93 03                        	STA		(3,s),Y
   7568 00E580 E8                           	INX
   7569 00E581 E8                           	INX
   7570 00E582 C8                           	INY
   7571 00E583 C6 30                        	DEC		CursorX
   7572 00E585 D0 F0                        	BNE		.bin3
   7573 00E587 A9 00 00                     	LDA		#0
   7574 00E58A                             .bin4:
   7575 00E58A 93 03                        	STA		(3,s),Y	; NULL terminate buffer
   7576 00E58C 60                           	RTS
                                           
   7578 00E58D                             .st0003:
   7579 00E58D AF 10 A1 FE                  	LDA		KEYBD
   7580 00E591 10 FA                        	BPL		.st0003
   7581 00E593 48                           	PHA					; save off the char (we need to trash acc)
   7582 00E594 AF 14 A1 FE                  	LDA		KEYBD+4		; clear keyboard strobe (must be a read operation)
   7583 00E598 68                           	PLA					; restore char
   7584 00E599 20 3D E6                     	JSR		DisplayChar
   7585 00E59C 80 EF                        	BRA		.st0003
   7586 00E59E A0 00 00                     	ldy		#$0000
   7587 00E5A1                             .st0001:
   7588 00E5A1 A2 00 00                     	ldx		#$0000
   7589 00E5A4                             .st0002:
   7590 00E5A4 E8                           	inx
   7591 00E5A5 D0 FD                        	bne		.st0002
   7592 00E5A7 20 CA E5                     	jsr		echo_switch
   7593 00E5AA C8                           	iny
   7594 00E5AB 80 F4                        	bra		.st0001
                                           
   7596 00E5AD                             msgStarting:
   7597 00E5AD 46 54 38 33 32 20 54 65      	.byte	"FT832 Test System Starting",CR,LF,0
   7597 00E5B5 73 74 20 53 79 73 74 65    
   7597 00E5BD 6D 20 53 74 61 72 74 69    
   7597 00E5C5 6E 67 0D 0A 00             
                                           
   7599 00E5CA                             echo_switch:
   7600 00E5CA AD 00 71                     	lda		$7100
   7601 00E5CD 8D 00 70                     	sta		$7000
   7602 00E5D0 60                           	rts
                                           
                                           ;------------------------------------------------------------------------------
                                           ; On entry to the SSM task the .A register will be set to the task number
                                           ; being single stepped. The .X register will contain the address of the
                                           ; next instruction to execute.
                                           ;------------------------------------------------------------------------------
                                           
   7610 00E5D1                             SSMTask:
   7611 00E5D1 85 BA                        	STA		WorkTR
   7612 00E5D3 20 C5 E2                     	JSR		DispRegs
   7613 00E5D6                             .0004:
   7614 00E5D6 A9 53 00                     	LDA		#'S'
   7615 00E5D9 20 1C E8                     	JSR		OutChar
   7616 00E5DC 20 1C E8                     	JSR		OutChar
   7617 00E5DF A9 4D 00                     	LDA		#'M'
   7618 00E5E2 20 1C E8                     	JSR		OutChar
   7619 00E5E5 A9 3E 00                     	LDA		#'>'
   7620 00E5E8 20 1C E8                     	JSR		OutChar
   7621 00E5EB 20 EC EA                     	JSR		KeybdGetCharWait
   7622 00E5EE 29 FF 00                     	AND		#$FF
   7623 00E5F1 C9 53 00                     	CMP		#'S'		; step
   7624 00E5F4 D0 04                        	BNE		.0001
   7625 00E5F6                             .0002:
   7626 00E5F6 42 60                        	RTT
   7627 00E5F8 80 D7                        	BRA		SSMTask
   7628 00E5FA                             .0001:
   7629 00E5FA C9 58 00                     	CMP		#'X'
   7630 00E5FD D0 F7                        	BNE		.0002
   7631 00E5FF A5 9C                        	LDA		reg_sr
   7632 00E601 29 FF FD                     	AND		#$FDFF
   7633 00E604 85 9C                        	STA		reg_sr
   7634 00E606 20 64 E3                     	JSR		BuildRec
   7635 00E609 A6 BA                        	LDX		WorkTR
   7636 00E60B 42 6C 00 01 00 00            	LDT		ldtrec
   7637 00E611 42 60                        	RTT
   7638 00E613 80 BC                        	BRA		SSMTask
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Convert Ascii character to screen character.
                                           ;------------------------------------------------------------------------------
                                           
   7644 00E615                             AsciiToScreen:
   7645 00E615 29 FF 00                     	AND		#$FF
   7646 00E618 89 20 00                     	BIT		#%00100000	; if bit 5 isn't set
   7647 00E61B F0 08                        	BEQ		.00001
   7648 00E61D 89 40 00                     	BIT		#%01000000	; or bit 6 isn't set
   7649 00E620 F0 03                        	BEQ		.00001
   7650 00E622 29 9F 00                     	AND		#%10011111
   7651 00E625                             .00001:
   7652 00E625 60                           	rts
                                           
                                           	MEM		8
   7655 00E626                             AsciiToScreen8:
   7656 00E626 89 20                        	BIT		#%00100000	; if bit 5 isn't set
   7657 00E628 F0 06                        	BEQ		.00001
   7658 00E62A 89 40                        	BIT		#%01000000	; or bit 6 isn't set
   7659 00E62C F0 02                        	BEQ		.00001
   7660 00E62E 29 9F                        	AND		#%10011111
   7661 00E630                             .00001:
   7662 00E630 60                           	rts
                                           
                                           	MEM		16
                                           ;------------------------------------------------------------------------------
                                           ; Convert screen character to ascii character
                                           ;------------------------------------------------------------------------------
                                           ;
   7669 00E631                             ScreenToAscii:
   7670 00E631 29 FF 00                     	AND		#$FF
   7671 00E634 C9 1B 00                     	CMP		#26+1
   7672 00E637 B0 03                        	BCS		.0001
   7673 00E639 69 60 00                     	ADC		#$60
   7674 00E63C                             .0001:
   7675 00E63C 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Display a character on the screen device
                                           ;------------------------------------------------------------------------------
                                           ;
   7681 00E63D                             DisplayChar:
   7682 00E63D 29 FF 00                     	AND		#$0FF
   7683 00E640 24 3C                        	BIT		EscState
   7684 00E642 30 FF 8A 00                  	LBMI	processEsc
   7685 00E646 C9 08 00                     	CMP		#BS
   7686 00E649 F0 FF 33 01                  	LBEQ	doBackSpace
   7687 00E64D C9 91 00                     	CMP		#$91			; cursor right
   7688 00E650 F0 FF 7D 01                  	LBEQ	doCursorRight
   7689 00E654 C9 93 00                     	CMP		#$93			; cursor left
   7690 00E657 F0 FF 82 01                  	LBEQ	doCursorLeft
   7691 00E65B C9 90 00                     	CMP		#$90			; cursor up
   7692 00E65E F0 FF 82 01                  	LBEQ	doCursorUp
   7693 00E662 C9 92 00                     	CMP		#$92			; cursor down
   7694 00E665 F0 FF 82 01                  	LBEQ	doCursorDown
   7695 00E669 C9 99 00                     	CMP		#$99			; delete
   7696 00E66C F0 FF 37 01                  	LBEQ	doDelete
   7697 00E670 C9 0D 00                     	CMP		#CR
   7698 00E673 F0 47                        	BEQ		doCR
   7699 00E675 C9 0A 00                     	CMP		#LF
   7700 00E678 F0 47                        	BEQ		doLF
   7701 00E67A C9 94 00                     	CMP		#$94
   7702 00E67D F0 FF 48 01                  	LBEQ	doCursorHome	; cursor home
   7703 00E681 C9 1B 00                     	CMP		#ESC
   7704 00E684 D0 05                        	BNE		.0003
   7705 00E686 64 3C                        	STZ		EscState		; put a -1 in the escape state
   7706 00E688 C6 3C                        	DEC		EscState
   7707 00E68A 60                           	RTS
   7708 00E68B                             .0003:
   7709 00E68B 20 15 E6                     	JSR		AsciiToScreen
   7710 00E68E 05 36                        	ORA		NormAttr
   7711 00E690 48                           	PHA
   7712 00E691 A5 34                        	LDA		VideoPos
   7713 00E693 0A                           	ASL
   7714 00E694 AA                           	TAX
   7715 00E695 68                           	PLA
   7716 00E696 9F 00 00 FD                  	STA		VIDBUF,X
   7717 00E69A A5 30                        	LDA		CursorX
   7718 00E69C 1A                           	INA
   7719 00E69D C9 54 00                     	CMP		#TEXTCOLS
   7720 00E6A0 D0 15                        	BNE		.0001
   7721 00E6A2 64 30                        	STZ		CursorX
   7722 00E6A4 A5 32                        	LDA		CursorY
   7723 00E6A6 C9 1E 00                     	CMP		#TEXTROWS-1
   7724 00E6A9 F0 06                        	BEQ		.0002
   7725 00E6AB 1A                           	INA
   7726 00E6AC 85 32                        	STA		CursorY
   7727 00E6AE 82 4E 01                     	BRL		SyncVideoPos
   7728 00E6B1                             .0002:
   7729 00E6B1 20 FF E7                     	JSR		SyncVideoPos
   7730 00E6B4 82 C9 01                     	BRL		ScrollUp
   7731 00E6B7                             .0001:
   7732 00E6B7 85 30                        	STA		CursorX
   7733 00E6B9 82 43 01                     	BRL		SyncVideoPos
   7734 00E6BC                             doCR:
   7735 00E6BC 64 30                        	STZ		CursorX
   7736 00E6BE 82 3E 01                     	BRL		SyncVideoPos
   7737 00E6C1                             doLF:
   7738 00E6C1 A5 32                        	LDA		CursorY
   7739 00E6C3 C9 1E 00                     	CMP		#TEXTROWS-1
   7740 00E6C6 F0 FF B6 01                  	LBEQ	ScrollUp
   7741 00E6CA 1A                           	INA
   7742 00E6CB 85 32                        	STA		CursorY
   7743 00E6CD 82 2F 01                     	BRL		SyncVideoPos
                                           
   7745 00E6D0                             processEsc:
   7746 00E6D0 A6 3C                        	LDX		EscState
   7747 00E6D2 E0 FF FF                     	CPX		#-1
   7748 00E6D5 D0 44                        	BNE		.0006
   7749 00E6D7 C9 54 00                     	CMP		#'T'	; clear to EOL
   7750 00E6DA D0 1C                        	BNE		.0003
   7751 00E6DC A5 34                        	LDA		VideoPos
   7752 00E6DE 0A                           	ASL
   7753 00E6DF AA                           	TAX
   7754 00E6E0 A4 30                        	LDY		CursorX
   7755 00E6E2                             .0001:
   7756 00E6E2 C0 53 00                     	CPY		#TEXTCOLS-1
   7757 00E6E5 F0 0E                        	BEQ		.0002
   7758 00E6E7 A9 20 00                     	LDA		#' '
   7759 00E6EA 05 36                        	ORA		NormAttr
   7760 00E6EC 9F 00 00 FD                  	STA		VIDBUF,X
   7761 00E6F0 E8                           	INX
   7762 00E6F1 E8                           	INX
   7763 00E6F2 C8                           	INY
   7764 00E6F3 D0 ED                        	BNE		.0001
   7765 00E6F5                             .0002:
   7766 00E6F5 64 3C                        	STZ		EscState
   7767 00E6F7 60                           	RTS
   7768 00E6F8                             .0003:
   7769 00E6F8 C9 57 00                     	CMP		#'W'
   7770 00E6FB D0 05                        	BNE		.0004
   7771 00E6FD 64 3C                        	STZ		EscState
   7772 00E6FF 82 A5 00                     	BRL		doDelete
   7773 00E702                             .0004:
   7774 00E702 C9 60 00                     	CMP		#'`'
   7775 00E705 D0 06                        	BNE		.0005
   7776 00E707 A9 FE FF                     	LDA		#-2
   7777 00E70A 85 3C                        	STA		EscState
   7778 00E70C 60                           	RTS
   7779 00E70D                             .0005:
   7780 00E70D C9 28 00                     	CMP		#'('
   7781 00E710 D0 06                        	BNE		.0008
   7782 00E712 A9 FD FF                     	LDA		#-3
   7783 00E715 85 3C                        	STA		EscState
   7784 00E717 60                           	RTS
   7785 00E718                             .0008:
   7786 00E718 64 3C                        	STZ		EscState
   7787 00E71A 60                           	RTS
   7788 00E71B                             .0006:
   7789 00E71B E0 FE FF                     	CPX		#-2
   7790 00E71E D0 11                        	BNE		.0007
   7791 00E720 64 3C                        	STZ		EscState
   7792 00E722 C9 31 00                     	CMP		#'1'
   7793 00E725 F0 FF 2B 01                  	LBEQ	CursorOn
   7794 00E729 C9 30 00                     	CMP		#'0'
   7795 00E72C F0 FF 2E 01                  	LBEQ	CursorOff
   7796 00E730 60                           	RTS
   7797 00E731                             .0007:
   7798 00E731 E0 FD FF                     	CPX		#-3
   7799 00E734 D0 0B                        	BNE		.0009
   7800 00E736 C9 1B 00                     	CMP		#ESC
   7801 00E739 D0 DD                        	BNE		.0008
   7802 00E73B A9 FC FF                     	LDA		#-4
   7803 00E73E 85 3C                        	STA		EscState
   7804 00E740 60                           	RTS
   7805 00E741                             .0009:
   7806 00E741 E0 FC FF                     	CPX		#-4
   7807 00E744 D0 0B                        	BNE		.0010
   7808 00E746 C9 47 00                     	CMP		#'G'
   7809 00E749 D0 CD                        	BNE		.0008
   7810 00E74B A9 FB FF                     	LDA		#-5
   7811 00E74E 85 3C                        	STA		EscState
   7812 00E750 60                           	RTS
   7813 00E751                             .0010:
   7814 00E751 E0 FB FF                     	CPX		#-5
   7815 00E754 D0 C2                        	BNE		.0008
   7816 00E756 64 3C                        	STZ		EscState
   7817 00E758 C9 34 00                     	CMP		#'4'
   7818 00E75B D0 12                        	BNE		.0011
   7819 00E75D A5 36                        	LDA		NormAttr
                                           	; Swap the high nybbles of the attribute
   7821 00E75F EB                           	XBA				
   7822 00E760 E2 30                        	SEP		#$30		; set 8 bit regs
                                           	NDX		8			; tell the assembler
                                           	MEM		8
   7825 00E762 2A                           	ROL
   7826 00E763 2A                           	ROL
   7827 00E764 2A                           	ROL
   7828 00E765 2A                           	ROL
   7829 00E766 C2 30                        	REP		#$30		; set 16 bit regs
                                           	NDX		16			; tell the assembler
                                           	MEM		16
   7832 00E768 EB                           	XBA
   7833 00E769 29 00 FF                     	AND		#$FF00
   7834 00E76C 85 36                        	STA		NormAttr
   7835 00E76E 60                           	RTS
   7836 00E76F                             .0011:
   7837 00E76F C9 30 00                     	CMP		#'0'
   7838 00E772 D0 06                        	BNE		.0012
   7839 00E774 A9 00 BF                     	LDA		#$BF00		; Light Grey on Dark Grey
   7840 00E777 85 36                        	STA		NormAttr
   7841 00E779 60                           	RTS
   7842 00E77A                             .0012:
   7843 00E77A A9 00 BF                     	LDA		#$BF00		; Light Grey on Dark Grey
   7844 00E77D 85 36                        	STA		NormAttr
   7845 00E77F 60                           	RTS
                                           
   7847 00E780                             doBackSpace:
   7848 00E780 A4 30                        	LDY		CursorX
   7849 00E782 F0 22                        	BEQ		.0001		; Can't backspace anymore
   7850 00E784 A5 34                        	LDA		VideoPos
   7851 00E786 0A                           	ASL
   7852 00E787 AA                           	TAX
   7853 00E788                             .0002:
   7854 00E788 BF 00 00 FD                  	LDA		VIDBUF,X
   7855 00E78C 9F FE FF FC                  	STA		VIDBUF-2,X
   7856 00E790 E8                           	INX
   7857 00E791 E8                           	INX
   7858 00E792 C8                           	INY
   7859 00E793 C0 54 00                     	CPY		#TEXTCOLS
   7860 00E796 D0 F0                        	BNE		.0002
   7861 00E798                             .0003:
   7862 00E798 A9 20 00                     	LDA		#' '
   7863 00E79B 05 36                        	ORA		NormAttr
   7864 00E79D 9F 00 00 FD                  	STA		VIDBUF,X
   7865 00E7A1 C6 30                        	DEC		CursorX
   7866 00E7A3 82 59 00                     	BRL		SyncVideoPos
   7867 00E7A6                             .0001:
   7868 00E7A6 60                           	RTS
                                           
                                           ; Deleting a character does not change the video position so there's no need
                                           ; to resynchronize it.
                                           
   7873 00E7A7                             doDelete:
   7874 00E7A7 A4 30                        	LDY		CursorX
   7875 00E7A9 A5 34                        	LDA		VideoPos
   7876 00E7AB 0A                           	ASL
   7877 00E7AC AA                           	TAX
   7878 00E7AD                             .0002:
   7879 00E7AD C0 53 00                     	CPY		#TEXTCOLS-1
   7880 00E7B0 F0 0D                        	BEQ		.0001
   7881 00E7B2 BF 02 00 FD                  	LDA		VIDBUF+2,X
   7882 00E7B6 9F 00 00 FD                  	STA		VIDBUF,X
   7883 00E7BA E8                           	INX
   7884 00E7BB E8                           	INX
   7885 00E7BC C8                           	INY
   7886 00E7BD 80 EE                        	BRA		.0002
   7887 00E7BF                             .0001:
   7888 00E7BF A9 20 00                     	LDA		#' '
   7889 00E7C2 05 36                        	ORA		NormAttr
   7890 00E7C4 9F 00 00 FD                  	STA		VIDBUF,X
   7891 00E7C8 60                           	RTS
                                           
   7893 00E7C9                             doCursorHome:
   7894 00E7C9 A5 30                        	LDA		CursorX
   7895 00E7CB F0 26                        	BEQ		doCursor1
   7896 00E7CD 64 30                        	STZ		CursorX
   7897 00E7CF 80 2E                        	BRA		SyncVideoPos
   7898 00E7D1                             doCursorRight:
   7899 00E7D1 A5 30                        	LDA		CursorX
   7900 00E7D3 C9 53 00                     	CMP		#TEXTCOLS-1
   7901 00E7D6 F0 1F                        	BEQ		doRTS
   7902 00E7D8 1A                           	INA
   7903 00E7D9                             doCursor2:
   7904 00E7D9 85 30                        	STA		CursorX
   7905 00E7DB 80 22                        	BRA		SyncVideoPos
   7906 00E7DD                             doCursorLeft:
   7907 00E7DD A5 30                        	LDA		CursorX
   7908 00E7DF F0 16                        	BEQ		doRTS
   7909 00E7E1 3A                           	DEA
   7910 00E7E2 80 F5                        	BRA		doCursor2
   7911 00E7E4                             doCursorUp:
   7912 00E7E4 A5 32                        	LDA		CursorY
   7913 00E7E6 F0 0F                        	BEQ		doRTS
   7914 00E7E8 3A                           	DEA
   7915 00E7E9 80 08                        	BRA		doCursor1
   7916 00E7EB                             doCursorDown:
   7917 00E7EB A5 32                        	LDA		CursorY
   7918 00E7ED C9 1E 00                     	CMP		#TEXTROWS-1
   7919 00E7F0 F0 05                        	BEQ		doRTS
   7920 00E7F2 1A                           	INA
   7921 00E7F3                             doCursor1:
   7922 00E7F3 85 32                        	STA		CursorY
   7923 00E7F5 80 08                        	BRA		SyncVideoPos
   7924 00E7F7                             doRTS:
   7925 00E7F7 60                           	RTS
                                           
   7927 00E7F8                             HomeCursor:
   7928 00E7F8 A9 00 00                     	LDA		#0
   7929 00E7FB 64 30                        	STZ		CursorX
   7930 00E7FD 64 32                        	STZ		CursorY
                                           
                                           ; Synchronize the absolute video position with the cursor co-ordinates.
                                           ;
   7934 00E7FF                             SyncVideoPos:
   7935 00E7FF A5 32                        	LDA		CursorY
   7936 00E801 8D 00 70                     	STA		$7000
   7937 00E804 0A                           	ASL
   7938 00E805 AA                           	TAX
   7939 00E806 BD 35 F0                     	LDA		LineTbl,X
   7940 00E809 18                           	CLC
   7941 00E80A 65 30                        	ADC		CursorX
   7942 00E80C 85 34                        	STA		VideoPos
   7943 00E80E 8F 0D A0 FE                  	STA		VIDREGS+13		; Update the position in the text controller
   7944 00E812 60                           	RTS
                                           
   7946 00E813                             OutCRLF:
   7947 00E813 A9 0D 00                     	LDA		#CR
   7948 00E816 20 1C E8                     	JSR		OutChar
   7949 00E819 A9 0A 00                     	LDA		#LF
                                           
   7951 00E81C                             OutChar:
   7952 00E81C DA                           	PHX
   7953 00E81D 5A                           	PHY
   7954 00E81E A2 00 00                     	LDX		#0
   7955 00E821 FC F0 03                     	JSR		(OutputVec,x)
   7956 00E824 7A                           	PLY
   7957 00E825 FA                           	PLX
   7958 00E826 60                           	RTS
                                           
   7960 00E827                             DisplayString:
                                           ;	PLA							; pop return address
                                           ;	PLX							; get string address parameter
                                           ;	PHA							; push return address
   7964 00E827 08                           	PHP							; push reg settings
   7965 00E828 E2 20                        	SEP		#$20				; ACC = 8 bit
                                           	MEM		8
                                           ;	STX		StringPos
   7968 00E82A A0 00 00                     	LDY		#0
   7969 00E82D                             .0002:
   7970 00E82D B3 04                        	LDA		(4,S),Y
   7971 00E82F F0 06                        	BEQ		.0001
   7972 00E831 20 4F EF                     	JSR		SuperPutch
   7973 00E834 C8                           	INY
   7974 00E835 80 F6                        	BRA		.0002
   7975 00E837                             .0001:
   7976 00E837 28                           	PLP							; restore regs settings
                                           ;	REP		#$20				; ACC 16 bits
                                           	MEM		16
   7979 00E838 42 C0 02                     	RTS		#2					; pop stack argument
                                           
   7981 00E83B                             DisplayString2:
   7982 00E83B 68                           	PLA							; pop return address
   7983 00E83C FA                           	PLX							; get string address parameter
   7984 00E83D 48                           	PHA							; push return address
   7985 00E83E E2 20                        	SEP		#$20				; ACC = 8 bit
   7986 00E840 86 38                        	STX		StringPos
   7987 00E842 A0 00 00                     	LDY		#0
   7988 00E845 A2 32 00                     	LDX		#50
   7989 00E848                             .0002:
   7990 00E848 B1 38                        	LDA		(StringPos),Y
   7991 00E84A 20 4F EF                     	JSR		SuperPutch
   7992 00E84D C8                           	INY
   7993 00E84E CA                           	DEX
   7994 00E84F D0 F7                        	BNE		.0002
   7995 00E851                             .0001:
   7996 00E851 C2 20                        	REP		#$20				; ACC 16 bits
   7997 00E853 60                           	RTS
                                           
   7999 00E854                             CursorOn:
   8000 00E854 48                           	PHA
   8001 00E855 A9 60 1F                     	LDA		#$1F60
   8002 00E858 8F 09 A0 FE                  	STA		VIDREGS+9
   8003 00E85C 68                           	PLA
   8004 00E85D 60                           	RTS
                                           
   8006 00E85E                             CursorOff:
   8007 00E85E 48                           	PHA
   8008 00E85F A9 20 00                     	LDA		#$0020
   8009 00E862 8F 09 A0 FE                  	STA		VIDREGS+9
   8010 00E866 68                           	PLA
   8011 00E867 60                           	RTS
                                           
   8013 00E868                             ClearScreen:
   8014 00E868 A0 2C 0A                     	LDY		#TEXTROWS*TEXTCOLS
   8015 00E86B A2 00 00                     	LDX		#$00
   8016 00E86E A9 20 00                     	LDA		#' '
   8017 00E871 20 15 E6                     	JSR		AsciiToScreen
   8018 00E874 05 36                        	ORA		NormAttr
   8019 00E876                             .0001:
   8020 00E876 9F 00 00 FD                  	STA		VIDBUF,X
   8021 00E87A E8                           	INX
   8022 00E87B E8                           	INX
   8023 00E87C 88                           	DEY
   8024 00E87D D0 F7                        	BNE		.0001
   8025 00E87F 60                           	RTS
                                           
   8027 00E880                             ScrollUp:
   8028 00E880 A2 00 00                     	LDX		#0
   8029 00E883 A0 2C 0A                     	LDY 	#TEXTROWS*TEXTCOLS
   8030 00E886                             .0001:
   8031 00E886 BF A8 00 FD                  	LDA		VIDBUF+TEXTCOLS*2,X
   8032 00E88A 9F 00 00 FD                  	STA		VIDBUF,X
   8033 00E88E E8                           	INX
   8034 00E88F E8                           	INX
   8035 00E890 88                           	DEY
   8036 00E891 D0 F3                        	BNE		.0001
   8037 00E893 A9 1E 00                     	LDA		#TEXTROWS-1
                                           
   8039 00E896                             BlankLine:
   8040 00E896 0A                           	ASL
   8041 00E897 AA                           	TAX
   8042 00E898 BD 35 F0                     	LDA		LineTbl,X
   8043 00E89B 0A                           	ASL
   8044 00E89C AA                           	TAX
   8045 00E89D A0 54 00                     	LDY		#TEXTCOLS
   8046 00E8A0 A5 36                        	LDA		NormAttr
   8047 00E8A2 09 20 00                     	ORA		#$20
   8048 00E8A5                             .0001:
   8049 00E8A5 9F 00 00 FD                  	STA		VIDBUF,X
   8050 00E8A9 E8                           	INX
   8051 00E8AA E8                           	INX
   8052 00E8AB 88                           	DEY
   8053 00E8AC D0 F7                        	BNE		.0001
   8054 00E8AE 60                           	RTS
                                           
   8056 00E8AF                             DispDWord:
   8057 00E8AF 42 EB                        	XBAW
   8058 00E8B1 20 B6 E8                     	JSR		DispWord
   8059 00E8B4 42 EB                        	XBAW
   8060 00E8B6                             DispWord:
   8061 00E8B6 EB                           	XBA
   8062 00E8B7 20 BB E8                     	JSR		DispByte
   8063 00E8BA EB                           	XBA
   8064 00E8BB                             DispByte:
   8065 00E8BB 48                           	PHA
   8066 00E8BC 4A                           	LSR
   8067 00E8BD 4A                           	LSR
   8068 00E8BE 4A                           	LSR
   8069 00E8BF 4A                           	LSR
   8070 00E8C0 20 C4 E8                     	JSR		DispNybble
   8071 00E8C3 68                           	PLA
   8072 00E8C4                             DispNybble:
   8073 00E8C4 48                           	PHA
   8074 00E8C5 29 0F 00                     	AND		#$0F
   8075 00E8C8 C9 0A 00                     	CMP		#10
   8076 00E8CB 90 08                        	BCC		.0001
   8077 00E8CD 69 36 00                     	ADC		#'A'-11			; -11 cause the carry is set
   8078 00E8D0 20 1C E8                     	JSR		OutChar
   8079 00E8D3 68                           	PLA
   8080 00E8D4 60                           	RTS
   8081 00E8D5                             .0001:
   8082 00E8D5 09 30 00                     	ORA		#'0'
   8083 00E8D8 20 1C E8                     	JSR		OutChar
   8084 00E8DB 68                           	PLA
   8085 00E8DC 60                           	RTS
                                           
   8087 00E8DD                             space:
   8088 00E8DD 48                           	PHA
   8089 00E8DE A9 20 00                     	LDA		#' '
   8090 00E8E1 20 1C E8                     	JSR		OutChar
   8091 00E8E4 68                           	PLA
   8092 00E8E5 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Get a range (two hex numbers)
                                           ;------------------------------------------------------------------------------
                                           
   8098 00E8E6                             GetRange:
   8099 00E8E6 20 51 E5                     	JSR		IgnoreBlanks
   8100 00E8E9 20 11 E9                     	JSR		GetHexNumber
   8101 00E8EC C0 00 00                     	CPY		#0
   8102 00E8EF F0 1F                        	BEQ		.0001
   8103 00E8F1 A5 0C                        	LDA		NumWorkArea
   8104 00E8F3 85 20                        	STA		RangeStart
   8105 00E8F5 85 24                        	STA		RangeEnd
   8106 00E8F7 A5 0E                        	LDA		NumWorkArea+2
   8107 00E8F9 85 22                        	STA		RangeStart+2
   8108 00E8FB 85 26                        	STA		RangeEnd+2
   8109 00E8FD 20 51 E5                     	JSR		IgnoreBlanks
   8110 00E900 20 11 E9                     	JSR		GetHexNumber
   8111 00E903 C0 00 00                     	CPY		#0
   8112 00E906 F0 08                        	BEQ		.0001
   8113 00E908 A5 0C                        	LDA		NumWorkArea
   8114 00E90A 85 24                        	STA		RangeEnd
   8115 00E90C A5 0E                        	LDA		NumWorkArea+2
   8116 00E90E 85 26                        	STA		RangeEnd+2
   8117 00E910                             .0001:
   8118 00E910 60                           	RTS
                                           	
                                           ; Get a hexidecimal number. Maximum of six digits.
                                           ; .X = text pointer (updated)
                                           ;------------------------------------------------------------------------------
                                           ;
   8124 00E911                             GetHexNumber:
   8125 00E911 A0 00 00                     	LDY		#0					; maximum of eight digits
   8126 00E914 64 0C                        	STZ		NumWorkArea
   8127 00E916 64 0E                        	STZ		NumWorkArea+2
   8128 00E918                             gthxn2:
   8129 00E918 20 68 E1                     	JSR		MonGetch
   8130 00E91B 20 3E E9                     	JSR		AsciiToHexNybble
   8131 00E91E 30 1B                        	BMI		gthxn1
   8132 00E920 06 0C                        	ASL		NumWorkArea
   8133 00E922 26 0E                        	ROL		NumWorkArea+2
   8134 00E924 06 0C                        	ASL		NumWorkArea
   8135 00E926 26 0E                        	ROL		NumWorkArea+2
   8136 00E928 06 0C                        	ASL		NumWorkArea
   8137 00E92A 26 0E                        	ROL		NumWorkArea+2
   8138 00E92C 06 0C                        	ASL		NumWorkArea
   8139 00E92E 26 0E                        	ROL		NumWorkArea+2
   8140 00E930 05 0C                        	ORA		NumWorkArea
   8141 00E932 85 0C                        	STA		NumWorkArea
   8142 00E934 C8                           	INY
   8143 00E935 C0 08 00                     	CPY		#8
   8144 00E938 D0 DE                        	BNE		gthxn2
   8145 00E93A 60                           	RTS
   8146 00E93B                             gthxn1:
   8147 00E93B CA                           	DEX
   8148 00E93C CA                           	DEX
   8149 00E93D 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Convert ASCII character in the range '0' to '9', 'a' to 'f' or 'A' to 'F'
                                           ; to a hex nybble.
                                           ;------------------------------------------------------------------------------
                                           ;
   8156 00E93E                             AsciiToHexNybble:
   8157 00E93E C9 30 00                     	CMP		#'0'
   8158 00E941 90 30                        	BCC		gthx3
   8159 00E943 C9 3A 00                     	CMP		#'9'+1
   8160 00E946 B0 05                        	BCS		gthx5
   8161 00E948 38                           	SEC
   8162 00E949 E9 30 00                     	SBC		#'0'
   8163 00E94C 60                           	RTS
   8164 00E94D                             gthx5:
   8165 00E94D C9 41 00                     	CMP		#'A'
   8166 00E950 90 21                        	BCC		gthx3
   8167 00E952 C9 47 00                     	CMP		#'F'+1
   8168 00E955 B0 09                        	BCS		gthx6
   8169 00E957 38                           	SEC
   8170 00E958 E9 41 00                     	SBC		#'A'
   8171 00E95B 18                           	CLC
   8172 00E95C 69 0A 00                     	ADC		#10
   8173 00E95F 60                           	RTS
   8174 00E960                             gthx6:
   8175 00E960 C9 61 00                     	CMP		#'a'
   8176 00E963 90 0E                        	BCC		gthx3
   8177 00E965 C9 7B 00                     	CMP		#'z'+1
   8178 00E968 B0 09                        	BCS		gthx3
   8179 00E96A 38                           	SEC
   8180 00E96B E9 61 00                     	SBC		#'a'
   8181 00E96E 18                           	CLC
   8182 00E96F 69 0A 00                     	ADC		#10
   8183 00E972 60                           	RTS
   8184 00E973                             gthx3:
   8185 00E973 A9 FF FF                     	LDA		#-1		; not a hex number
   8186 00E976 60                           	RTS
                                           
   8188 00E977                             AsciiToDecNybble:
   8189 00E977 C9 30 00                     	CMP		#'0'
   8190 00E97A 90 0A                        	BCC		gtdc3
   8191 00E97C C9 3A 00                     	CMP		#'9'+1
   8192 00E97F B0 05                        	BCS		gtdc3
   8193 00E981 38                           	SEC
   8194 00E982 E9 30 00                     	SBC		#'0'
   8195 00E985 60                           	RTS
   8196 00E986                             gtdc3:
   8197 00E986 A9 FF FF                     	LDA		#-1
   8198 00E989 60                           	RTS
                                           
   8200 00E98A                             getcharNoWait:
   8201 00E98A A9 01 00                     	LDA		#1
   8202 00E98D 42 5B 85 B8                  	STA		ZS:keybd_cmd
   8203 00E991 42 A2 06 00                  	TSK		#6
   8204 00E995 42 5B A5 B6                  	LDA		ZS:keybd_char
   8205 00E999 10 02                        	BPL		.0001
   8206 00E99B 38                           	SEC
   8207 00E99C 60                           	RTS
   8208 00E99D                             .0001:
   8209 00E99D 18                           	CLC
   8210 00E99E 60                           	RTS
                                           
   8212 00E99F                             getcharWait:
   8213 00E99F A9 02 00                     	LDA		#2
   8214 00E9A2 42 5B 85 B8                  	STA		ZS:keybd_cmd
   8215 00E9A6 42 A2 06 00                  	TSK		#6
   8216 00E9AA 42 5B A5 B6                  	LDA		ZS:keybd_char
   8217 00E9AE 10 02                        	BPL		.0001
   8218 00E9B0 38                           	SEC
   8219 00E9B1 60                           	RTS
   8220 00E9B2                             .0001:
   8221 00E9B2 18                           	CLC
   8222 00E9B3 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ;------------------------------------------------------------------------------
                                           ; Keyboard processing routines follow.
                                           ;------------------------------------------------------------------------------
                                           ;------------------------------------------------------------------------------
                                           
   8230 00E9B4                             KeybdInit:
   8231 00E9B4 A9 00 20                     	LDA		#$2000
   8232 00E9B7 1B                           	TAS
   8233 00E9B8 64 B8                        	STZ		keybd_cmd
   8234 00E9BA E2 30                        	SEP		#$30
                                           	MEM		8
                                           	NDX		8
   8237 00E9BC 64 08                        	STZ		KeyState1
   8238 00E9BE 64 09                        	STZ		KeyState2
   8239 00E9C0 A0 05                        	LDY		#$5
   8240 00E9C2                             .0001:
   8241 00E9C2 20 5D EA                     	JSR		KeybdRecvByte	; Look for $AA
   8242 00E9C5 90 04                        	BCC		.0002
   8243 00E9C7 C9 AA                        	CMP		#$AA			;
   8244 00E9C9 F0 25                        	BEQ		.config
   8245 00E9CB                             .0002:
   8246 00E9CB 20 AE EA                     	JSR		Wait10ms
   8247 00E9CE A9 FF                        	LDA		#$FF			; send reset code to keyboard
   8248 00E9D0 8F 11 A1 FE                  	STA		KEYBD+1			; write to status reg to clear TX state
   8249 00E9D4 20 AE EA                     	JSR		Wait10ms
   8250 00E9D7 A9 FF                        	LDA		#$FF
   8251 00E9D9 8F 10 A1 FE                  	STA		KEYBD			; now write to transmit register
   8252 00E9DD 20 97 EA                     	JSR		KeybdWaitTx		; wait until no longer busy
   8253 00E9E0 20 5D EA                     	JSR		KeybdRecvByte	; look for an ACK ($FA)
   8254 00E9E3 C9 FA                        	CMP		#$FA
   8255 00E9E5 20 5D EA                     	JSR		KeybdRecvByte
   8256 00E9E8 C9 FC                        	CMP		#$FC			; reset error ?
   8257 00E9EA F0 18                        	BEQ		.tryAgain
   8258 00E9EC C9 AA                        	CMP		#$AA			; reset complete okay ?
   8259 00E9EE D0 14                        	BNE		.tryAgain
   8260 00E9F0                             .config:
   8261 00E9F0 A9 F0                        	LDA		#$F0			; send scan code select
   8262 00E9F2 8F 10 A1 FE                  	STA		KEYBD
   8263 00E9F6 20 97 EA                     	JSR		KeybdWaitTx
   8264 00E9F9 90 09                        	BCC		.tryAgain
   8265 00E9FB 20 5D EA                     	JSR		KeybdRecvByte	; wait for response from keyboard
   8266 00E9FE 90 04                        	BCC		.tryAgain
   8267 00EA00 C9 FA                        	CMP		#$FA
   8268 00EA02 F0 0F                        	BEQ		.0004
   8269 00EA04                             .tryAgain:
   8270 00EA04 88                           	DEY
   8271 00EA05 D0 BB                        	BNE		.0001
   8272 00EA07                             .keybdErr:
   8273 00EA07 C2 30                        	REP		#$30
   8274 00EA09 F4 BE EA                     	PEA		msgKeybdNR
   8275 00EA0C 20 27 E8                     	JSR		DisplayString
   8276 00EA0F 42 60                        	RTT
   8277 00EA11 80 11                        	BRA		KeybdService
   8278 00EA13                             .0004:
   8279 00EA13 A9 02                        	LDA		#2				; select scan code set #2
   8280 00EA15 8F 10 A1 FE                  	STA		KEYBD
   8281 00EA19 20 97 EA                     	JSR		KeybdWaitTx
   8282 00EA1C 90 E6                        	BCC		.tryAgain
   8283 00EA1E C2 30                        	REP		#$30
   8284 00EA20 42 60                        	RTT
   8285 00EA22 80 00                        	BRA		KeybdService
                                           
   8287 00EA24                             KeybdService:
   8288 00EA24 C2 30                        	REP		#$30
                                           	MEM		16
                                           	NDX		16
   8291 00EA26 A9 00 20                     	LDA		#$2000
   8292 00EA29 1B                           	TAS
   8293 00EA2A A5 B8                        	LDA		keybd_cmd
   8294 00EA2C C9 01 00                     	CMP		#1
   8295 00EA2F D0 18                        	BNE		.0001
   8296 00EA31 20 E1 EA                     	JSR		KeybdGetCharNoWait
   8297 00EA34 B0 08                        	BCS		.nokey
   8298 00EA36 64 B8                        	STZ		keybd_cmd
   8299 00EA38 85 B6                        	STA		keybd_char
   8300 00EA3A 42 60                        	RTT
   8301 00EA3C 80 E6                        	BRA		KeybdService
   8302 00EA3E                             .nokey
   8303 00EA3E A9 FF FF                     	LDA		#-1
   8304 00EA41 64 B8                        	STZ		keybd_cmd
   8305 00EA43 85 B6                        	STA		keybd_char
   8306 00EA45 42 60                        	RTT
   8307 00EA47 80 DB                        	BRA		KeybdService
   8308 00EA49                             .0001:
   8309 00EA49 C9 02 00                     	CMP		#2
   8310 00EA4C D0 0B                        	BNE		.0002
   8311 00EA4E 20 EC EA                     	JSR		KeybdGetCharWait
   8312 00EA51 64 B8                        	STZ		keybd_cmd
   8313 00EA53 85 B6                        	STA		keybd_char
   8314 00EA55 42 60                        	RTT
   8315 00EA57 80 CB                        	BRA		KeybdService
   8316 00EA59                             .0002:
   8317 00EA59 42 60                        	RTT
   8318 00EA5B 80 C7                        	BRA		KeybdService
                                           
                                           	MEM		8
                                           	NDX		8
                                           ; Recieve a byte from the keyboard, used after a command is sent to the
                                           ; keyboard in order to wait for a response.
                                           ;
   8325 00EA5D                             KeybdRecvByte:
   8326 00EA5D 5A                           	PHY
   8327 00EA5E A0 64                        	LDY		#100			; wait up to 1s
   8328 00EA60                             .0003:
   8329 00EA60 AF 11 A1 FE                  	LDA		KEYBD+1			; wait for response from keyboard
   8330 00EA64 89 80                        	BIT		#$80			; is input buffer full ?
   8331 00EA66 D0 09                        	BNE		.0004			; yes, branch
   8332 00EA68 20 AE EA                     	JSR		Wait10ms		; wait a bit
   8333 00EA6B 88                           	DEY
   8334 00EA6C D0 F2                        	BNE		.0003			; go back and try again
   8335 00EA6E 7A                           	PLY						; timeout
   8336 00EA6F 18                           	CLC						; carry clear = no code
   8337 00EA70 60                           	RTS
   8338 00EA71                             .0004:
   8339 00EA71 AF 10 A1 FE                  	LDA		KEYBD			;
   8340 00EA75 48                           	PHA
   8341 00EA76 A9 00                        	LDA		#0				; clear recieve state
   8342 00EA78 8F 11 A1 FE                  	STA		KEYBD+1
   8343 00EA7C 68                           	PLA
   8344 00EA7D 7A                           	PLY
   8345 00EA7E 38                           	SEC						; carry set = code available
   8346 00EA7F 60                           	RTS
                                           
                                           ; Wait until the keyboard status is non-busy
                                           ; Returns .CF = 1 if successful, .CF=0 timeout
                                           ;
   8351 00EA80                             KeybdWaitBusy:
   8352 00EA80 5A                           	PHY
   8353 00EA81 A0 64                        	LDY		#100			; wait a max of 1s
   8354 00EA83                             .0001:
   8355 00EA83 AF 11 A1 FE                  	LDA		KEYBD+1
   8356 00EA87 89 01                        	BIT		#1
   8357 00EA89 F0 09                        	BEQ		.0002
   8358 00EA8B 20 AE EA                     	JSR		Wait10ms
   8359 00EA8E 88                           	DEY
   8360 00EA8F D0 F2                        	BNE		.0001
   8361 00EA91 7A                           	PLY
   8362 00EA92 18                           	CLC
   8363 00EA93 60                           	RTS
   8364 00EA94                             .0002:
   8365 00EA94 7A                           	PLY
   8366 00EA95 38                           	SEC
   8367 00EA96 60                           	RTS
                                           
                                           ; Wait until the keyboard transmit is complete
                                           ; Returns .CF = 1 if successful, .CF=0 timeout
                                           ;
   8372 00EA97                             KeybdWaitTx:
   8373 00EA97 5A                           	PHY
   8374 00EA98 A0 64                        	LDY		#100			; wait a max of 1s
   8375 00EA9A                             .0001:
   8376 00EA9A AF 11 A1 FE                  	LDA		KEYBD+1
   8377 00EA9E 89 40                        	BIT		#$40			; check for transmit complete bit
   8378 00EAA0 D0 09                        	BNE		.0002			; branch if bit set
   8379 00EAA2 20 AE EA                     	JSR		Wait10ms		; delay a little bit
   8380 00EAA5 88                           	DEY						; go back and try again
   8381 00EAA6 D0 F2                        	BNE		.0001
   8382 00EAA8 7A                           	PLY						; timed out
   8383 00EAA9 18                           	CLC						; return carry clear
   8384 00EAAA 60                           	RTS
   8385 00EAAB                             .0002:
   8386 00EAAB 7A                           	PLY						; wait complete, return 
   8387 00EAAC 38                           	SEC						; carry set
   8388 00EAAD 60                           	RTS
                                           
                                           ; Wait approximately 10ms. Used by keyboard routines. Makes use of the free
                                           ; running counter #0.
                                           ; .A = trashed (=-5)
                                           ;
   8394 00EAAE                             Wait10ms:
   8395 00EAAE DA                           	PHX				; save .X
   8396 00EAAF A5 12                        	LDA		CNT0H	; get starting count
   8397 00EAB1 AA                           	TAX				; save it off in .X
   8398 00EAB2                             .0002:
   8399 00EAB2 38                           	SEC				; compare to current counter value
   8400 00EAB3 E5 12                        	SBC		CNT0H
   8401 00EAB5 10 05                        	BPL		.0001	; teh result should be -ve, unless counter overflowed.
   8402 00EAB7 C9 FB                        	CMP		#-5		; 5 ticks pass ? 
   8403 00EAB9 8A                           	TXA				; prepare for next check, get startcount in .A
   8404 00EABA B0 F6                        	BCS		.0002	; go back if less than 5 ticks
   8405 00EABC                             .0001:
   8406 00EABC FA                           	PLX				; restore .X
   8407 00EABD 60                           	RTS
                                           
                                           	MEM		16
                                           	NDX		16
                                           
   8412 00EABE                             msgKeybdNR:
   8413 00EABE 0D 0A 4B 65 79 62 6F 61      	.byte	CR,LF,"Keyboard not responding.",CR,LF,0
   8413 00EAC6 72 64 20 6E 6F 74 20 72    
   8413 00EACE 65 73 70 6F 6E 64 69 6E    
   8413 00EAD6 67 2E 0D 0A 00             
                                           
                                           	cpu		FT832
                                           
   8417 00EADB                             KeybdGetCharNoWaitCtx:
   8418 00EADB 20 E1 EA                     	JSR		KeybdGetCharNoWait
   8419 00EADE 42 40 00                     	RTC		#0
   8420 00EAE1                             	
   8421 00EAE1 08                           	PHP
   8422 00EAE2 E2 20                        	SEP		#$20
   8423 00EAE4 C2 10                        	REP		#$10
                                           	MEM		8
                                           	NDX		16
   8426 00EAE6 A9 00                        	LDA		#0
   8427 00EAE8 85 0B                        	STA		KeybdWaitFlag
   8428 00EAEA 80 10                        	BRA		KeybdGetChar1
                                           
   8430 00EAEC                             KeybdGetCharWait:
   8431 00EAEC 08                           	PHP
   8432 00EAED E2 20                        	SEP		#$20
   8433 00EAEF C2 10                        	REP		#$10
                                           	MEM		8
                                           	NDX		16
   8436 00EAF1 A9 FF                        	LDA		#$FF
   8437 00EAF3 85 0B                        	STA		KeybdWaitFlag
   8438 00EAF5 80 05                        	BRA		KeybdGetChar1
                                           
                                           ; Wait for a keyboard character to be available
                                           ; Returns (CF=1) if no key available
                                           ; Return key (CF=0) if key is available
                                           ;
                                           ;
   8445 00EAF7                             KeybdGetChar:
   8446 00EAF7 08                           	PHP
   8447 00EAF8 E2 20                        	SEP		#$20		; 8 bit acc
   8448 00EAFA C2 10                        	REP		#$10
                                           	MEM		8
                                           	NDX		16
   8451 00EAFC                             KeybdGetChar1:
   8452 00EAFC DA                           	PHX
   8453 00EAFD EB                           	XBA					; force .B to zero for TAX
   8454 00EAFE A9 00                        	LDA		#0
   8455 00EB00 EB                           	XBA
   8456 00EB01                             .0002:
   8457 00EB01                             .0003:
   8458 00EB01 AF 11 A1 FE                  	LDA		KEYBD+1		; check MSB of keyboard status reg.
   8459 00EB05 0A                           	ASL
   8460 00EB06 B0 08                        	BCS		.0006		; branch if keystroke ready
   8461 00EB08 24 0B                        	BIT		KeybdWaitFlag
   8462 00EB0A 30 F5                        	BMI		.0003
   8463 00EB0C FA                           	PLX
   8464 00EB0D 28                           	PLP
   8465 00EB0E 38                           	SEC
   8466 00EB0F 60                           	RTS
   8467 00EB10                             .0006:
   8468 00EB10 AF 10 A1 FE                  	LDA		KEYBD		; get scan code value
   8469 00EB14 48                           	PHA
   8470 00EB15 A9 00                        	LDA		#0			; write a zero to the status reg
   8471 00EB17 8F 11 A1 FE                  	STA		KEYBD+1		; to clear recieve register
   8472 00EB1B 68                           	PLA
   8473 00EB1C                             .0001:
   8474 00EB1C C9 F0                        	CMP		#SC_KEYUP	; keyup scan code ?
   8475 00EB1E F0 FF 69 00                  	LBEQ	.doKeyup	; 
   8476 00EB22 C9 E0                        	CMP		#SC_EXTEND	; extended scan code ?
   8477 00EB24 F0 FF 6A 00                  	LBEQ	.doExtend
   8478 00EB28 C9 14                        	CMP		#$14		; control ?
   8479 00EB2A F0 FF 6D 00                  	LBEQ	.doCtrl
   8480 00EB2E C9 12                        	CMP		#$12		; left shift
   8481 00EB30 F0 FF 77 00                  	LBEQ	.doShift
   8482 00EB34 C9 59                        	CMP		#$59		; right shift
   8483 00EB36 F0 FF 71 00                  	LBEQ	.doShift
   8484 00EB3A C9 77                        	CMP		#SC_NUMLOCK
   8485 00EB3C F0 FF 7B 00                  	LBEQ	.doNumLock
   8486 00EB40 C9 58                        	CMP		#SC_CAPSLOCK
   8487 00EB42 F0 FF 81 00                  	LBEQ	.doCapsLock
   8488 00EB46 C9 7E                        	CMP		#SC_SCROLLLOCK
   8489 00EB48 F0 FF 87 00                  	LBEQ	.doScrollLock
   8490 00EB4C 46 08                        	LSR		KeyState1
   8491 00EB4E B0 B1                        	BCS		.0003
   8492 00EB50 AA                           	TAX
   8493 00EB51 A9 80                        	LDA		#$80
   8494 00EB53 24 09                        	BIT		KeyState2	; Is extended code ?
   8495 00EB55 F0 11                        	BEQ		.0010
   8496 00EB57 A9 7F                        	LDA		#$7F
   8497 00EB59 25 09                        	AND		KeyState2
   8498 00EB5B 85 09                        	STA		KeyState2
   8499 00EB5D 46 08                        	LSR		KeyState1	; clear keyup
   8500 00EB5F 8A                           	TXA
   8501 00EB60 29 7F                        	AND		#$7F
   8502 00EB62 AA                           	TAX
   8503 00EB63 BD BE EE                     	LDA		keybdExtendedCodes,X
   8504 00EB66 80 1D                        	BRA		.0008
   8505 00EB68                             .0010:
   8506 00EB68 A9 04                        	LDA		#4
   8507 00EB6A 24 09                        	BIT		KeyState2	; Is Cntrl down ?
   8508 00EB6C F0 09                        	BEQ		.0009
   8509 00EB6E 8A                           	TXA
   8510 00EB6F 29 7F                        	AND		#$7F		; table is 128 chars
   8511 00EB71 AA                           	TAX
   8512 00EB72 BD 3E EE                     	LDA		keybdControlCodes,X
   8513 00EB75 80 0E                        	BRA		.0008
   8514 00EB77                             .0009:
   8515 00EB77 A9 01                        	LDA		#$1			; Is shift down ?
   8516 00EB79 24 09                        	BIT		KeyState2
   8517 00EB7B F0 05                        	BEQ		.0007
   8518 00EB7D BD 3E ED                     	LDA		shiftedScanCodes,X
   8519 00EB80 80 03                        	BRA		.0008
   8520 00EB82                             .0007:
   8521 00EB82 BD 3E EC                     	LDA		unshiftedScanCodes,X
   8522 00EB85                             .0008:
   8523 00EB85 C2 20                        	REP		#$20
                                           	MEM		16
   8525 00EB87 FA                           	PLX
   8526 00EB88 28                           	PLP
   8527 00EB89 18                           	CLC
   8528 00EB8A 60                           	RTS
                                           	MEM		8
   8530 00EB8B                             .doKeyup:
   8531 00EB8B A9 01                        	LDA		#1
   8532 00EB8D 04 08                        	TSB		KeyState1
   8533 00EB8F 82 6F FF                     	BRL		.0003
   8534 00EB92                             .doExtend:				; set extended key flag
   8535 00EB92 A5 09                        	LDA		KeyState2
   8536 00EB94 09 80                        	ORA		#$80
   8537 00EB96 85 09                        	STA		KeyState2
   8538 00EB98 82 66 FF                     	BRL		.0003
   8539 00EB9B                             .doCtrl:
   8540 00EB9B A9 04                        	LDA		#4
   8541 00EB9D 46 08                        	LSR		KeyState1	; check key up/down	
   8542 00EB9F 90 05                        	BCC		.0004		; keydown = carry clear
   8543 00EBA1 14 09                        	TRB		KeyState2
   8544 00EBA3 82 5B FF                     	BRL		.0003
   8545 00EBA6                             .0004:
   8546 00EBA6 04 09                        	TSB		KeyState2	; set control active bit
   8547 00EBA8 82 56 FF                     	BRL		.0003
   8548 00EBAB                             .doShift:
   8549 00EBAB A9 01                        	LDA		#1
   8550 00EBAD 46 08                        	LSR		KeyState1	; check key up/down	
   8551 00EBAF 90 05                        	BCC		.0005
   8552 00EBB1 14 09                        	TRB		KeyState2
   8553 00EBB3 82 4B FF                     	BRL		.0003
   8554 00EBB6                             .0005:
   8555 00EBB6 04 09                        	TSB		KeyState2
   8556 00EBB8 82 46 FF                     	BRL		.0003
   8557 00EBBB                             .doNumLock:
   8558 00EBBB A5 09                        	LDA		KeyState2
   8559 00EBBD 49 10                        	EOR		#16
   8560 00EBBF 85 09                        	STA		KeyState2
   8561 00EBC1 20 DF EB                     	JSR		KeybdSetLEDStatus
   8562 00EBC4 82 3A FF                     	BRL		.0003
   8563 00EBC7                             .doCapsLock:
   8564 00EBC7 A5 09                        	LDA		KeyState2
   8565 00EBC9 49 20                        	EOR		#32
   8566 00EBCB 85 09                        	STA		KeyState2
   8567 00EBCD 20 DF EB                     	JSR		KeybdSetLEDStatus
   8568 00EBD0 82 2E FF                     	BRL		.0003
   8569 00EBD3                             .doScrollLock:
   8570 00EBD3 A5 09                        	LDA		KeyState2
   8571 00EBD5 49 40                        	EOR		#64
   8572 00EBD7 85 09                        	STA		KeyState2
   8573 00EBD9 20 DF EB                     	JSR		KeybdSetLEDStatus
   8574 00EBDC 82 22 FF                     	BRL		.0003
                                           
   8576 00EBDF                             KeybdSetLEDStatus:
   8577 00EBDF 42 0B                        	PHDS				; save off DS
   8578 00EBE1 F4 00 00                     	PEA		0			; set DS to zero
   8579 00EBE4 F4 00 00                     	PEA		0			; set DS to zero
   8580 00EBE7 42 2B                        	PLDS
   8581 00EBE9 A9 00                        	LDA		#0
   8582 00EBEB 85 0A                        	STA		KeybdLEDs
   8583 00EBED A9 10                        	LDA		#16
   8584 00EBEF 24 09                        	BIT		KeyState2
   8585 00EBF1 F0 06                        	BEQ		.0002
   8586 00EBF3 A5 0A                        	LDA		KeybdLEDs	; set bit 1 for Num lock, 0 for scrolllock , 2 for caps lock
   8587 00EBF5 09 02                        	ORA		#$2
   8588 00EBF7 85 0A                        	STA		KeybdLEDs
   8589 00EBF9                             .0002:
   8590 00EBF9 A9 20                        	LDA		#32
   8591 00EBFB 24 09                        	BIT		KeyState2
   8592 00EBFD F0 06                        	BEQ		.0003
   8593 00EBFF A5 0A                        	LDA		KeybdLEDs
   8594 00EC01 09 04                        	ORA		#$4
   8595 00EC03 85 0A                        	STA		KeybdLEDs
   8596 00EC05                             .0003:
   8597 00EC05 A9 40                        	LDA		#64
   8598 00EC07 24 09                        	BIT		KeyState2
   8599 00EC09 F0 06                        	BEQ		.0004
   8600 00EC0B A5 0A                        	LDA		KeybdLEDs
   8601 00EC0D 09 01                        	ORA		#1
   8602 00EC0F 85 0A                        	STA		KeybdLEDs
   8603 00EC11                             .0004:
   8604 00EC11 A9 ED                        	LDA		#$ED		; set status LEDs command
   8605 00EC13 8F 10 A1 FE                  	STA		KEYBD
   8606 00EC17 20 97 EA                     	JSR		KeybdWaitTx
   8607 00EC1A 20 5D EA                     	JSR		KeybdRecvByte
   8608 00EC1D 90 0E                        	BCC		.0001
   8609 00EC1F C9 FA                        	CMP		#$FA
   8610 00EC21 A5 0A                        	LDA		KeybdLEDs
   8611 00EC23 8F 10 A1 FE                  	STA		KEYBD
   8612 00EC27 20 97 EA                     	JSR		KeybdWaitTx
   8613 00EC2A 20 5D EA                     	JSR		KeybdRecvByte	; wait for $FA byte
   8614 00EC2D                             .0001:
   8615 00EC2D 42 2B                        	PLDS				; recover DS
   8616 00EC2F 60                           	RTS
                                           
                                           	MEM		16
                                           
   8620 00EC30 10 D3                        	BPL		.0003
   8621 00EC32 48                           	PHA					; save off the char (we need to trash acc)
   8622 00EC33 AF 14 A1 FE                  	LDA		KEYBD+4		; clear keyboard strobe (must be a read operation)
   8623 00EC37 68                           	PLA					; restore char
   8624 00EC38 89 00 08                     	BIT		#$800		; Is it a keyup code ?
   8625 00EC3B D0 C8                        	BNE		.0003
   8626 00EC3D 60                           	RTS
                                           
                                           
                                           
                                           	;--------------------------------------------------------------------------
                                           	; PS2 scan codes to ascii conversion tables.
                                           	;--------------------------------------------------------------------------
                                           	;
   8634 00EC3E                             unshiftedScanCodes:
   8635 00EC3E 2E A9 2E A5 A3 A1 A2 AC      	.byte	$2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
                                         
   8636 00EC46 2E AA A8 A6 A4 09 60 2E      	.byte	$2e,$aa,$a8,$a6,$a4,$09,$60,$2e
                                         
   8637 00EC4E 2E 2E 2E 2E 2E 71 31 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$71,$31,$2e
                                         
   8638 00EC56 2E 2E 7A 73 61 77 32 2E      	.byte	$2e,$2e,$7a,$73,$61,$77,$32,$2e
                                         
   8639 00EC5E 2E 63 78 64 65 34 33 2E      	.byte	$2e,$63,$78,$64,$65,$34,$33,$2e
                                         
   8640 00EC66 2E 20 76 66 74 72 35 2E      	.byte	$2e,$20,$76,$66,$74,$72,$35,$2e
                                         
   8641 00EC6E 2E 6E 62 68 67 79 36 2E      	.byte	$2e,$6e,$62,$68,$67,$79,$36,$2e
                                         
   8642 00EC76 2E 2E 6D 6A 75 37 38 2E      	.byte	$2e,$2e,$6d,$6a,$75,$37,$38,$2e
                                         
   8643 00EC7E 2E 2C 6B 69 6F 30 39 2E      	.byte	$2e,$2c,$6b,$69,$6f,$30,$39,$2e
                                         
   8644 00EC86 2E 2E 2F 6C 3B 70 2D 2E      	.byte	$2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
                                         
   8645 00EC8E 2E 2E 27 2E 5B 3D 2E 2E      	.byte	$2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
                                         
   8646 00EC96 AD 2E 0D 5D 2E 5C 2E 2E      	.byte	$ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
                                         
   8647 00EC9E 2E 2E 2E 2E 2E 2E 08 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                         
   8648 00ECA6 2E 95 2E 93 94 2E 2E 2E      	.byte	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
                                         
   8649 00ECAE 98 7F 92 2E 91 90 1B AF      	.byte	$98,$7f,$92,$2e,$91,$90,$1b,$af
                                         
   8650 00ECB6 AB 2E 97 2E 2E 96 AE 2E      	.byte	$ab,$2e,$97,$2e,$2e,$96,$ae,$2e
                                         
                                           
   8652 00ECBE 2E 2E 2E A7 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
                                         
   8653 00ECC6 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8654 00ECCE 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8655 00ECD6 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8656 00ECDE 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8657 00ECE6 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8658 00ECEE 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8659 00ECF6 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8660 00ECFE 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8661 00ED06 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8662 00ED0E 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8663 00ED16 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8664 00ED1E 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8665 00ED26 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8666 00ED2E 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8667 00ED36 2E 2E FA 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
                                         
                                           
   8669 00ED3E                             shiftedScanCodes:
   8670 00ED3E 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8671 00ED46 2E 2E 2E 2E 2E 09 7E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
                                         
   8672 00ED4E 2E 2E 2E 2E 2E 51 21 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$51,$21,$2e
                                         
   8673 00ED56 2E 2E 5A 53 41 57 40 2E      	.byte	$2e,$2e,$5a,$53,$41,$57,$40,$2e
                                         
   8674 00ED5E 2E 43 58 44 45 24 23 2E      	.byte	$2e,$43,$58,$44,$45,$24,$23,$2e
                                         
   8675 00ED66 2E 20 56 46 54 52 25 2E      	.byte	$2e,$20,$56,$46,$54,$52,$25,$2e
                                         
   8676 00ED6E 2E 4E 42 48 47 59 5E 2E      	.byte	$2e,$4e,$42,$48,$47,$59,$5e,$2e
                                         
   8677 00ED76 2E 2E 4D 4A 55 26 2A 2E      	.byte	$2e,$2e,$4d,$4a,$55,$26,$2a,$2e
                                         
   8678 00ED7E 2E 3C 4B 49 4F 29 28 2E      	.byte	$2e,$3c,$4b,$49,$4f,$29,$28,$2e
                                         
   8679 00ED86 2E 3E 3F 4C 3A 50 5F 2E      	.byte	$2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
                                         
   8680 00ED8E 2E 2E 22 2E 7B 2B 2E 2E      	.byte	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
                                         
   8681 00ED96 2E 2E 0D 7D 2E 7C 2E 2E      	.byte	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
                                         
   8682 00ED9E 2E 2E 2E 2E 2E 2E 08 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                         
   8683 00EDA6 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8684 00EDAE 2E 7F 2E 2E 2E 2E 1B 2E      	.byte	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
                                         
   8685 00EDB6 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
                                           
   8687 00EDBE 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8688 00EDC6 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8689 00EDCE 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8690 00EDD6 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8691 00EDDE 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8692 00EDE6 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8693 00EDEE 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8694 00EDF6 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8695 00EDFE 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8696 00EE06 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8697 00EE0E 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8698 00EE16 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8699 00EE1E 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8700 00EE26 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8701 00EE2E 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8702 00EE36 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
                                           
                                           ; control
   8705 00EE3E                             keybdControlCodes:
   8706 00EE3E 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8707 00EE46 2E 2E 2E 2E 2E 09 7E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
                                         
   8708 00EE4E 2E 2E 2E 2E 2E 11 21 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$11,$21,$2e
                                         
   8709 00EE56 2E 2E 1A 13 01 17 40 2E      	.byte	$2e,$2e,$1a,$13,$01,$17,$40,$2e
                                         
   8710 00EE5E 2E 03 18 04 05 24 23 2E      	.byte	$2e,$03,$18,$04,$05,$24,$23,$2e
                                         
   8711 00EE66 2E 20 16 06 14 12 25 2E      	.byte	$2e,$20,$16,$06,$14,$12,$25,$2e
                                         
   8712 00EE6E 2E 0E 02 08 07 19 5E 2E      	.byte	$2e,$0e,$02,$08,$07,$19,$5e,$2e
                                         
   8713 00EE76 2E 2E 0D 0A 15 26 2A 2E      	.byte	$2e,$2e,$0d,$0a,$15,$26,$2a,$2e
                                         
   8714 00EE7E 2E 3C 0B 09 0F 29 28 2E      	.byte	$2e,$3c,$0b,$09,$0f,$29,$28,$2e
                                         
   8715 00EE86 2E 3E 3F 0C 3A 10 5F 2E      	.byte	$2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
                                         
   8716 00EE8E 2E 2E 22 2E 7B 2B 2E 2E      	.byte	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
                                         
   8717 00EE96 2E 2E 0D 7D 2E 7C 2E 2E      	.byte	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
                                         
   8718 00EE9E 2E 2E 2E 2E 2E 2E 08 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                         
   8719 00EEA6 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8720 00EEAE 2E 7F 2E 2E 2E 2E 1B 2E      	.byte	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
                                         
   8721 00EEB6 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
                                           
   8723 00EEBE                             keybdExtendedCodes:
   8724 00EEBE 2E 2E 2E 2E A3 A1 A2 2E      	.byte	$2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
                                         
   8725 00EEC6 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8726 00EECE 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8727 00EED6 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8728 00EEDE 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8729 00EEE6 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8730 00EEEE 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8731 00EEF6 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8732 00EEFE 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8733 00EF06 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8734 00EF0E 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8735 00EF16 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8736 00EF1E 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8737 00EF26 2E 95 2E 93 94 2E 2E 2E      	.byte	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
                                         
   8738 00EF2E 98 99 92 2E 91 90 2E 2E      	.byte	$98,$99,$92,$2e,$91,$90,$2e,$2e
                                         
   8739 00EF36 2E 2E 97 2E 2E 96 2E 2E      	.byte	$2e,$2e,$97,$2e,$2e,$96,$2e,$2e
                                         
                                           
                                           ; Get char routine for Supermon
                                           ; This routine might be called with 8 bit regs.
                                           ;
   8744 00EF3E                             SuperGetch:
   8745 00EF3E 08                           	PHP
   8746 00EF3F C2 30                        	REP		#$30
                                           	MEM		16
                                           	NDX		16
   8749 00EF41 20 E1 EA                     	JSR		KeybdGetCharNoWait
   8750 00EF44 29 FF 00                     	AND		#$FF
   8751 00EF47 B0 03                        	BCS		.0001
   8752 00EF49 28                           	PLP		; to restore reg size
   8753 00EF4A 18                           	CLC
   8754 00EF4B 60                           	RTS
   8755 00EF4C                             .0001:
   8756 00EF4C 28                           	PLP
   8757 00EF4D 38                           	SEC
   8758 00EF4E 60                           	RTS
                                           
                                           ; Put char routine for Supermon
                                           ; This routine might be called with 8 bit regs.
                                           ;
   8763 00EF4F                             SuperPutch:
   8764 00EF4F 08                           	PHP
   8765 00EF50 C2 30                        	REP		#$30	; 16 bit regs
                                           	MEM		16
                                           	NDX		16
   8768 00EF52 48                           	PHA
   8769 00EF53 DA                           	PHX
   8770 00EF54 5A                           	PHY
   8771 00EF55 20 1C E8                     	JSR		OutChar
   8772 00EF58 7A                           	PLY
   8773 00EF59 FA                           	PLX
   8774 00EF5A 68                           	PLA
   8775 00EF5B 28                           	PLP
   8776 00EF5C 60                           	RTS
                                           
   8778 00EF5D                             warm_start:
   8779 00EF5D 42 E2 00 01                  	SEP		#$100		; 16 bit mode
   8780 00EF61 C2 30                        	REP		#$30		; 16 bit MEM,NDX
                                           	MEM		16
                                           	NDX		16
   8783 00EF63 A9 FF 3F                     	LDA		#$3FFF
   8784 00EF66 1B                           	TAS
   8785 00EF67 20 54 E8                     	JSR		CursorOn
   8786 00EF6A 82 7B F1                     	BRL		Mon1
                                           
                                           	cpu		FT832
   8789 00EF6D                             ICacheIL832:
   8790 00EF6D 42 E0 01                     	CACHE	#1			; 1= invalidate instruction line identified by accumulator
   8791 00EF70 60                           	RTS
                                           
   8793 00EF71                             ByteIRQRout:
   8794 00EF71 40                           	RTI
                                           
   8796 00EF72                             IRQRout:
   8797 00EF72 42 A2 01 00                  	TSK		#1			; switch to the interrupt handling task
   8798 00EF76 40                           	RTI
                                           
   8800 00EF77 C2 30                        	REP		#$30
                                           	NDX		16
                                           	MEM		16
   8803 00EF79 48                           	PHA
   8804 00EF7A 20 7F EF                     	JSR		Task1
   8805 00EF7D 68                           	PLA
   8806 00EF7E 40                           	RTI
                                           
   8808 00EF7F                             Task1:
   8809 00EF7F C2 30                        	REP		#$30
                                           	NDX		16
                                           	MEM		16
   8812 00EF81 AD 1F B0                     	LDA		MPU_IRQ_STATUS	; check if counter expired
   8813 00EF84 89 02 00                     	BIT		#2
   8814 00EF87 F0 10                        	BEQ		.0001
   8815 00EF89 A5 04                        	LDA		TickCount		; increment the tick count
   8816 00EF8B 1A                           	INA
   8817 00EF8C 85 04                        	STA		TickCount
   8818 00EF8E 8F A4 00 FD                  	STA		$FD00A4			; update on-screen IRQ live indicator
   8819 00EF92 E2 30                        	SEP		#$30
                                           	NDX		8
                                           	MEM		8
   8822 00EF94 A9 05                        	LDA		#$05			; count down, on mpu clock, irq enabled (clears irq)
   8823 00EF96 8D 17 B0                     	STA		CTR1_CTRL
   8824 00EF99                             .0001:
   8825 00EF99 C2 30                        	REP		#$30
                                           	NDX		16
                                           	MEM		16
                                           ;	BIT		do_invaders
                                           ;	BPL		.0002
                                           ;	TSK		#5
   8831 00EF9B                             .0002:
   8832 00EF9B 42 60                        	RTT					; go back to interrupted task
   8833 00EF9D 80 E0                        	BRA		Task1		; the next time task1 is run it will start here
                                           
                                           ; IRQ handler task - 32 bit
                                           ;
   8837 00EF9F                             IRQTask:
   8838 00EF9F 42 E2 20 02                  	SEP		#$220		; eight bit accumulator, 32 bit indexes
   8839 00EFA3 42 C2 10 01                  	REP		#$110
                                           	MEM		8
                                           	NDX		32
   8842 00EFA7                             IRQTask1:
   8843 00EFA7 AD 1F B0                     	LDA		MPU_IRQ_STATUS	; check if counter expired
   8844 00EFAA 89 02                        	BIT		#2
   8845 00EFAC F0 12                        	BEQ		.0001
   8846 00EFAE A6 04                        	LDX		TickCount		; increment the tick count
   8847 00EFB0 E8                           	INX
   8848 00EFB1 86 04                        	STX		TickCount
   8849 00EFB3 42 AB 42 8E A2 00 FD 00      	STX.H	$FD00A2			; update on-screen IRQ live indicator
                                         
   8850 00EFBB A9 05                        	LDA		#$05			; count down, on mpu clock, irq enabled (clears irq)
   8851 00EFBD 8D 17 B0                     	STA		CTR1_CTRL
   8852 00EFC0                             .0001:
                                           ;	BIT		do_invaders
                                           ;	BPL		.0002
                                           ;	TSK		#5
   8856 00EFC0                             .0002:
   8857 00EFC0 42 60                        	RTT					; go back to interrupted task
   8858 00EFC2 80 E3                        	BRA		IRQTask1	; the next time task is run it will start here
                                           
                                           ; This little task sample runs in native 32 bit mode and displays
                                           ; "Hello World!" on the screen.
                                           
                                           	CPU		FT832
                                           	MEM		8
                                           	NDX		32
                                           
   8867 00EFC4                             Task2:
   8868 00EFC4 A2 F8 01 00 00               	LDX		#84*2*3
   8869 00EFC9                             .0003:
   8870 00EFC9 A0 00 00 00 00               	LDY		#0
   8871 00EFCE                             .0002:
   8872 00EFCE B9 E3 EF                     	LDA		msgHelloWorld,Y
   8873 00EFD1 F0 0C                        	BEQ		.0001
   8874 00EFD3 20 26 E6                     	JSR		AsciiToScreen8
   8875 00EFD6 9F 00 00 FD                  	STA		VIDBUF,X
   8876 00EFDA E8                           	INX
   8877 00EFDB E8                           	INX
   8878 00EFDC C8                           	INY
   8879 00EFDD 80 EF                        	BRA		.0002
   8880 00EFDF                             .0001:
   8881 00EFDF 42 60                        	RTT
   8882 00EFE1 80 E6                        	BRA		.0003
                                           
   8884 00EFE3                             msgHelloWorld:
   8885 00EFE3 0D 0A 48 65 6C 6C 6F 20      	.byte	CR,LF,"Hello World!",CR,LF,0
   8885 00EFEB 57 6F 72 6C 64 21 0D 0A    
   8885 00EFF3 00                         
                                           
                                           	NDX		16
                                           	MEM		16
                                           
   8890 00EFF4                             BrkTask:
   8891 00EFF4 42 EE 00 00 D0 FF            	INC		$FFD00000
   8892 00EFFA 42 60                        	RTT
   8893 00EFFC 80 F6                        	BRA		BrkTask
                                           
                                           ; The following store sequence for the benefit of Supermon816
                                           ;
   8897 00EFFE                             BrkRout:
   8898 00EFFE 0B                           	PHD
   8899 00EFFF 8B                           	PHB
   8900 00F000 C2 30                        	REP		#$30
   8901 00F002 48                           	PHA
   8902 00F003 DA                           	PHX
   8903 00F004 5A                           	PHY
   8904 00F005 6C 02 01                     	JMP		($0102)		; This jump normally points to BrkRout1
   8905 00F008                             BrkRout1:
   8906 00F008 C2 30                        	REP		#$30
   8907 00F00A 7A                           	PLY
   8908 00F00B FA                           	PLX
   8909 00F00C 68                           	PLA
   8910 00F00D AB                           	PLB
   8911 00F00E 2B                           	PLD
   8912 00F00F E2 20                        	SEP		#$20
   8913 00F011 68                           	PLA
   8914 00F012 C2 30                        	REP		#$30
   8915 00F014 68                           	PLA
   8916 00F015 20 B6 E8                     	JSR		DispWord
   8917 00F018 A2 00 00                     	LDX		#0
   8918 00F01B A0 40 00                     	LDY		#64
   8919 00F01E                             .0001:
   8920 00F01E 42 F0                        	.word	$f042		; pchist
   8921 00F020 20 B6 E8                     	JSR		DispWord
   8922 00F023 A9 20 00                     	LDA		#' '
   8923 00F026 20 1C E8                     	JSR		OutChar
   8924 00F029 E8                           	INX
   8925 00F02A 88                           	DEY
   8926 00F02B D0 F1                        	BNE		.0001
   8927 00F02D A9 FF FF                     	LDA		#$FFFF
   8928 00F030 8D 00 70                     	STA		$7000
   8929 00F033                             Hung:
   8930 00F033 80 FE                        	BRA		Hung
                                           
                                           	;--------------------------------------------------------
                                           	;--------------------------------------------------------
                                           	; I/O page is located at $F0xx
                                           	;--------------------------------------------------------
                                           	;--------------------------------------------------------	
                                           	;org		$F100
                                           
   8939 00F035                             LineTbl:
   8940 00F035 00 00                        	.WORD	0
   8941 00F037 54 00                        	.WORD	TEXTCOLS
   8942 00F039 A8 00                        	.WORD	TEXTCOLS*2
   8943 00F03B FC 00                        	.WORD	TEXTCOLS*3
   8944 00F03D 50 01                        	.WORD	TEXTCOLS*4
   8945 00F03F A4 01                        	.WORD	TEXTCOLS*5
   8946 00F041 F8 01                        	.WORD	TEXTCOLS*6
   8947 00F043 4C 02                        	.WORD	TEXTCOLS*7
   8948 00F045 A0 02                        	.WORD	TEXTCOLS*8
   8949 00F047 F4 02                        	.WORD	TEXTCOLS*9
   8950 00F049 48 03                        	.WORD	TEXTCOLS*10
   8951 00F04B 9C 03                        	.WORD	TEXTCOLS*11
   8952 00F04D F0 03                        	.WORD	TEXTCOLS*12
   8953 00F04F 44 04                        	.WORD	TEXTCOLS*13
   8954 00F051 98 04                        	.WORD	TEXTCOLS*14
   8955 00F053 EC 04                        	.WORD	TEXTCOLS*15
   8956 00F055 40 05                        	.WORD	TEXTCOLS*16
   8957 00F057 94 05                        	.WORD	TEXTCOLS*17
   8958 00F059 E8 05                        	.WORD	TEXTCOLS*18
   8959 00F05B 3C 06                        	.WORD	TEXTCOLS*19
   8960 00F05D 90 06                        	.WORD	TEXTCOLS*20
   8961 00F05F E4 06                        	.WORD	TEXTCOLS*21
   8962 00F061 38 07                        	.WORD	TEXTCOLS*22
   8963 00F063 8C 07                        	.WORD	TEXTCOLS*23
   8964 00F065 E0 07                        	.WORD	TEXTCOLS*24
   8965 00F067 34 08                        	.WORD	TEXTCOLS*25
   8966 00F069 88 08                        	.WORD	TEXTCOLS*26
   8967 00F06B DC 08                        	.WORD	TEXTCOLS*27
   8968 00F06D 30 09                        	.WORD	TEXTCOLS*28
   8969 00F06F 84 09                        	.WORD	TEXTCOLS*29
   8970 00F071 D8 09                        	.WORD	TEXTCOLS*30
                                           
   8972 00F073                             TaskStartTbl:
   8973 00F073 00 00                        	.WORD	0			; CS
   8974 00F075 00 00                        	.WORD	0
   8975 00F077 00 00                        	.WORD	0			; DS
   8976 00F079 00 00                        	.WORD	0
   8977 00F07B 63 E0                        	.WORD	Task0		; PC
   8978 00F07D 00                           	.BYTE	Task0>>16
   8979 00F07E 00 00                        	.WORD	0			; acc
   8980 00F080 00 00                        	.WORD	0
   8981 00F082 00 00                        	.WORD	0			; x
   8982 00F084 00 00                        	.WORD	0
   8983 00F086 00 00                        	.WORD	0			; y
   8984 00F088 00 00                        	.WORD	0
   8985 00F08A FF 3F                        	.WORD	$3FFF		; sp
   8986 00F08C 00 00                        	.WORD	0
   8987 00F08E 04                           	.BYTE	4			; SR
   8988 00F08F 01                           	.BYTE	1			; SR extension
   8989 00F090 00                           	.BYTE	0			; DB
   8990 00F091 00 00                        	.WORD	0			; DPR
                                           
   8992 00F093 00 00                        	.WORD	0			; CS
   8993 00F095 00 00                        	.WORD	0
   8994 00F097 00 00                        	.WORD	0			; DS
   8995 00F099 00 00                        	.WORD	0
   8996 00F09B 7F EF                        	.WORD	Task1		; PC
   8997 00F09D 00                           	.BYTE	Task1>>16
   8998 00F09E 00 00                        	.WORD	0			; acc
   8999 00F0A0 00 00                        	.WORD	0
   9000 00F0A2 00 00                        	.WORD	0			; x
   9001 00F0A4 00 00                        	.WORD	0
   9002 00F0A6 00 00                        	.WORD	0			; y
   9003 00F0A8 00 00                        	.WORD	0
   9004 00F0AA FF 3B                        	.WORD	$3BFF		; sp
   9005 00F0AC 00 00                        	.WORD	0
   9006 00F0AE 04                           	.BYTE	4			; SR
   9007 00F0AF 01                           	.BYTE	1			; SR extension
   9008 00F0B0 00                           	.BYTE	0			; DB
   9009 00F0B1 00 00                        	.WORD	0			; DPR
                                           
   9011 00F0B3 00 00                        	.WORD	0			; CS
   9012 00F0B5 00 00                        	.WORD	0
   9013 00F0B7 00 00                        	.WORD	0			; DS
   9014 00F0B9 00 00                        	.WORD	0
   9015 00F0BB C4 EF                        	.WORD	Task2		; PC
   9016 00F0BD 00                           	.BYTE	Task2>>16
   9017 00F0BE 00 00                        	.WORD	0			; acc
   9018 00F0C0 00 00                        	.WORD	0
   9019 00F0C2 00 00                        	.WORD	0			; x
   9020 00F0C4 00 00                        	.WORD	0
   9021 00F0C6 00 00                        	.WORD	0			; y
   9022 00F0C8 00 00                        	.WORD	0
   9023 00F0CA FF 37                        	.WORD	$37FF		; sp
   9024 00F0CC 00 00                        	.WORD	0
   9025 00F0CE 20                           	.BYTE	$20			; SR			; eight bit mem
   9026 00F0CF 02                           	.BYTE	2			; SR extension
   9027 00F0D0 00                           	.BYTE	0			; DB
   9028 00F0D1 00 00                        	.WORD	0			; DPR
                                           
   9030 00F0D3 00 00                        	.WORD	0			; CS
   9031 00F0D5 00 00                        	.WORD	0
   9032 00F0D7 00 00                        	.WORD	0			; DS
   9033 00F0D9 00 00                        	.WORD	0
   9034 00F0DB D1 E5                        	.WORD	SSMTask		; PC
   9035 00F0DD 00                           	.BYTE	SSMTask>>16
   9036 00F0DE 00 00                        	.WORD	0			; acc
   9037 00F0E0 00 00                        	.WORD	0
   9038 00F0E2 00 00                        	.WORD	0			; x
   9039 00F0E4 00 00                        	.WORD	0
   9040 00F0E6 00 00                        	.WORD	0			; y
   9041 00F0E8 00 00                        	.WORD	0
   9042 00F0EA FF 33                        	.WORD	$33FF		; sp
   9043 00F0EC 00 00                        	.WORD	0
   9044 00F0EE 04                           	.BYTE	$4			; SR	16 bit regs, mask interrupts
   9045 00F0EF 01                           	.BYTE	1			; SR extension - 816 mode
   9046 00F0F0 00                           	.BYTE	0			; DB
   9047 00F0F1 00 00                        	.WORD	0			; DPR
                                           
   9049 00F0F3 00 00                        	.WORD	0			; CS
   9050 00F0F5 00 00                        	.WORD	0
   9051 00F0F7 00 00                        	.WORD	0			; DS
   9052 00F0F9 00 00                        	.WORD	0
   9053 00F0FB F4 EF                        	.WORD	BrkTask		; PC
   9054 00F0FD 00                           	.BYTE	BrkTask>>16
   9055 00F0FE 00 00                        	.WORD	0			; acc
   9056 00F100 00 00                        	.WORD	0
   9057 00F102 00 00                        	.WORD	0			; x
   9058 00F104 00 00                        	.WORD	0
   9059 00F106 00 00                        	.WORD	0			; y
   9060 00F108 00 00                        	.WORD	0
   9061 00F10A FF 2F                        	.WORD	$2FFF		; sp
   9062 00F10C 00 00                        	.WORD	0
   9063 00F10E 00                           	.BYTE	0			; SR
   9064 00F10F 01                           	.BYTE	1			; SR extension
   9065 00F110 00                           	.BYTE	0			; DB
   9066 00F111 00 00                        	.WORD	0			; DPR
                                           
                                           	; task #5
                                           	; DS is placed at $7800
   9070 00F113 00 00                        	.WORD	0			; CS
   9071 00F115 00 00                        	.WORD	0
   9072 00F117 78 1E                        	.WORD	7800		; DS
   9073 00F119 00 00                        	.WORD	0
   9074 00F11B D8 D8                        	.WORD	InvadersTask	; PC
   9075 00F11D 00                           	.BYTE	InvadersTask>>16
   9076 00F11E 00 00                        	.WORD	0			; acc
   9077 00F120 00 00                        	.WORD	0
   9078 00F122 00 00                        	.WORD	0			; x
   9079 00F124 00 00                        	.WORD	0
   9080 00F126 00 00                        	.WORD	0			; y
   9081 00F128 00 00                        	.WORD	0
   9082 00F12A FF 2B                        	.WORD	$2BFF		; sp
   9083 00F12C 00 00                        	.WORD	0
   9084 00F12E 00                           	.BYTE	0			; SR
   9085 00F12F 01                           	.BYTE	1			; SR extension
   9086 00F130 00                           	.BYTE	0			; DB
   9087 00F131 00 00                        	.WORD	0			; DPR
                                           
   9089 00F133 00 00                        	.WORD	0			; CS
   9090 00F135 00 00                        	.WORD	0
   9091 00F137 00 00                        	.WORD	0			; DS
   9092 00F139 00 00                        	.WORD	0
   9093 00F13B 9F EF                        	.WORD	IRQTask		; PC
   9094 00F13D 00                           	.BYTE	IRQTask>>16
   9095 00F13E 00 00                        	.WORD	0			; acc
   9096 00F140 00 00                        	.WORD	0
   9097 00F142 00 00                        	.WORD	0			; x
   9098 00F144 00 00                        	.WORD	0
   9099 00F146 00 00                        	.WORD	0			; y
   9100 00F148 00 00                        	.WORD	0
   9101 00F14A FF 27                        	.WORD	$27FF		; sp
   9102 00F14C 00 00                        	.WORD	0
   9103 00F14E 24                           	.BYTE	$24			; SR	8 bit acc, mask interrupts
   9104 00F14F 02                           	.BYTE	2			; SR extension - 832 mode
   9105 00F150 00                           	.BYTE	0			; DB
   9106 00F151 00 00                        	.WORD	0			; DPR
                                           
   9108 00F153                             msgRegs:
   9109 00F153 0D 0A                        	.byte	CR,LF
   9110 00F155 20 20 20 20 20 20 20 20          .byte   "                 xxxsxi31",CR,LF
   9110 00F15D 20 20 20 20 20 20 20 20    
   9110 00F165 20 78 78 78 73 78 69 33    
   9110 00F16D 31 0D 0A                   
   9111 00F170 20 20 20 20 43 53 20 20          .byte   "    CS    PB PC  xxxsxn26NVmxDIZC    .A       .X       .Y       SP  ",CR,LF,0
   9111 00F178 20 20 50 42 20 50 43 20    
   9111 00F180 20 78 78 78 73 78 6E 32    
   9111 00F188 36 4E 56 6D 78 44 49 5A    
   9111 00F190 43 20 20 20 20 2E 41 20    
   9111 00F198 20 20 20 20 20 20 2E 58    
   9111 00F1A0 20 20 20 20 20 20 20 2E    
   9111 00F1A8 59 20 20 20 20 20 20 20    
   9111 00F1B0 53 50 20 20 0D 0A 00       
   9112 00F1B7                             msgRegs2:
   9113 00F1B7 0D 0A                        	.byte	CR,LF
   9114 00F1B9 20 20 20 20 44 53 20 20      	.byte	"    DS    DB  DP   BL",CR,LF,0
   9114 00F1C1 20 20 44 42 20 20 44 50    
   9114 00F1C9 20 20 20 42 4C 0D 0A 00    
                                         
   9115 00F1D1                             msgErr:
   9116 00F1D1 2A 2A 2A 45 72 72 0D 0A      	.byte	"***Err",CR,LF,0
   9116 00F1D9 00                         
                                           
                                           	cpu		FT832
                                           	MEM		32
                                           	NDX		32
   9121 00F1DA A9 78 56 34 12               	LDA		#$12345678
   9122 00F1DF A2 32 54 76 98               	LDX		#$98765432
   9123 00F1E4 42 8B 42 97 23               	STA.B	{$23},Y
   9124 00F1E9 42 BB 42 BC 56 55 45 44      	LDY.UH	$44455556,X
                                         
   9125 00F1F1 42 1B 42 AB 42 BD 56 55      	LDA.H	CS:$44455556,X
   9125 00F1F9 45 44                      
   9126 00F1FB 42 3B 88 88 88 88 42 9B      	LDA.UB	SEG $88888888:$1234,Y
   9126 00F203 B9 34 12                   
   9127 00F206 42 20 00 E0 00 00 00 00      	JSF	    $0000:start
   9127 00F20E 00                         
   9128 00F20F 42 6B                        	RTF
   9129 00F211 42 A2 02 00                  	TSK		#2
   9130 00F215 42 3A                        	TSK
   9131 00F217 42 4C 00 00 01 00            	LDT		$10000,X
                                           
   9133 00F21D FF FF FF FF FF FF FF FF      	.org	$F400
   9133 00F225 FF FF FF FF FF FF FF FF    
   9133 00F22D FF FF FF FF FF FF FF FF    
   9133 00F235 FF FF FF FF FF FF FF FF    
   9133 00F23D FF FF FF FF FF FF FF FF    
   9133 00F245 FF FF FF FF FF FF FF FF    
   9133 00F24D FF FF FF FF FF FF FF FF    
   9133 00F255 FF FF FF FF FF FF FF FF    
   9133 00F25D FF FF FF FF FF FF FF FF    
   9133 00F265 FF FF FF FF FF FF FF FF    
   9133 00F26D FF FF FF FF FF FF FF FF    
   9133 00F275 FF FF FF FF FF FF FF FF    
   9133 00F27D FF FF FF FF FF FF FF FF    
   9133 00F285 FF FF FF FF FF FF FF FF    
   9133 00F28D FF FF FF FF FF FF FF FF    
   9133 00F295 FF FF FF FF FF FF FF FF    
   9133 00F29D FF FF FF FF FF FF FF FF    
   9133 00F2A5 FF FF FF FF FF FF FF FF    
   9133 00F2AD FF FF FF FF FF FF FF FF    
   9133 00F2B5 FF FF FF FF FF FF FF FF    
   9133 00F2BD FF FF FF FF FF FF FF FF    
   9133 00F2C5 FF FF FF FF FF FF FF FF    
   9133 00F2CD FF FF FF FF FF FF FF FF    
   9133 00F2D5 FF FF FF FF FF FF FF FF    
   9133 00F2DD FF FF FF FF FF FF FF FF    
   9133 00F2E5 FF FF FF FF FF FF FF FF    
   9133 00F2ED FF FF FF FF FF FF FF FF    
   9133 00F2F5 FF FF FF FF FF FF FF FF    
   9133 00F2FD FF FF FF FF FF FF FF FF    
   9133 00F305 FF FF FF FF FF FF FF FF    
   9133 00F30D FF FF FF FF FF FF FF FF    
   9133 00F315 FF FF FF FF FF FF FF FF    
   9133 00F31D FF FF FF FF FF FF FF FF    
   9133 00F325 FF FF FF FF FF FF FF FF    
   9133 00F32D FF FF FF FF FF FF FF FF    
   9133 00F335 FF FF FF FF FF FF FF FF    
   9133 00F33D FF FF FF FF FF FF FF FF    
   9133 00F345 FF FF FF FF FF FF FF FF    
   9133 00F34D FF FF FF FF FF FF FF FF    
   9133 00F355 FF FF FF FF FF FF FF FF    
   9133 00F35D FF FF FF FF FF FF FF FF    
   9133 00F365 FF FF FF FF FF FF FF FF    
   9133 00F36D FF FF FF FF FF FF FF FF    
   9133 00F375 FF FF FF FF FF FF FF FF    
   9133 00F37D FF FF FF FF FF FF FF FF    
   9133 00F385 FF FF FF FF FF FF FF FF    
   9133 00F38D FF FF FF FF FF FF FF FF    
   9133 00F395 FF FF FF FF FF FF FF FF    
   9133 00F39D FF FF FF FF FF FF FF FF    
   9133 00F3A5 FF FF FF FF FF FF FF FF    
   9133 00F3AD FF FF FF FF FF FF FF FF    
   9133 00F3B5 FF FF FF FF FF FF FF FF    
   9133 00F3BD FF FF FF FF FF FF FF FF    
   9133 00F3C5 FF FF FF FF FF FF FF FF    
   9133 00F3CD FF FF FF FF FF FF FF FF    
   9133 00F3D5 FF FF FF FF FF FF FF FF    
   9133 00F3DD FF FF FF FF FF FF FF FF    
   9133 00F3E5 FF FF FF FF FF FF FF FF    
   9133 00F3ED FF FF FF FF FF FF FF FF    
   9133 00F3F5 FF FF FF FF FF FF FF FF    
   9133 00F3FD FF FF FF                   
   9134 00F400 4C 3E EF                     	JMP		SuperGetch
   9135 00F403 4C 5D EF                     	JMP		warm_start
   9136 00F406 4C 4F EF                     	JMP		SuperPutch
   9137 00F409 4C 5C E5                     	JMP		BIOSInput
                                           
   9139 00F40C FF FF FF FF FF FF FF FF      	.org 	$FFD6
   9139 00F414 FF FF FF FF FF FF FF FF    
   9139 00F41C FF FF FF FF FF FF FF FF    
   9139 00F424 FF FF FF FF FF FF FF FF    
   9139 00F42C FF FF FF FF FF FF FF FF    
   9139 00F434 FF FF FF FF FF FF FF FF    
   9139 00F43C FF FF FF FF FF FF FF FF    
   9139 00F444 FF FF FF FF FF FF FF FF    
   9139 00F44C FF FF FF FF FF FF FF FF    
   9139 00F454 FF FF FF FF FF FF FF FF    
   9139 00F45C FF FF FF FF FF FF FF FF    
   9139 00F464 FF FF FF FF FF FF FF FF    
   9139 00F46C FF FF FF FF FF FF FF FF    
   9139 00F474 FF FF FF FF FF FF FF FF    
   9139 00F47C FF FF FF FF FF FF FF FF    
   9139 00F484 FF FF FF FF FF FF FF FF    
   9139 00F48C FF FF FF FF FF FF FF FF    
   9139 00F494 FF FF FF FF FF FF FF FF    
   9139 00F49C FF FF FF FF FF FF FF FF    
   9139 00F4A4 FF FF FF FF FF FF FF FF    
   9139 00F4AC FF FF FF FF FF FF FF FF    
   9139 00F4B4 FF FF FF FF FF FF FF FF    
   9139 00F4BC FF FF FF FF FF FF FF FF    
   9139 00F4C4 FF FF FF FF FF FF FF FF    
   9139 00F4CC FF FF FF FF FF FF FF FF    
   9139 00F4D4 FF FF FF FF FF FF FF FF    
   9139 00F4DC FF FF FF FF FF FF FF FF    
   9139 00F4E4 FF FF FF FF FF FF FF FF    
   9139 00F4EC FF FF FF FF FF FF FF FF    
   9139 00F4F4 FF FF FF FF FF FF FF FF    
   9139 00F4FC FF FF FF FF FF FF FF FF    
   9139 00F504 FF FF FF FF FF FF FF FF    
   9139 00F50C FF FF FF FF FF FF FF FF    
   9139 00F514 FF FF FF FF FF FF FF FF    
   9139 00F51C FF FF FF FF FF FF FF FF    
   9139 00F524 FF FF FF FF FF FF FF FF    
   9139 00F52C FF FF FF FF FF FF FF FF    
   9139 00F534 FF FF FF FF FF FF FF FF    
   9139 00F53C FF FF FF FF FF FF FF FF    
   9139 00F544 FF FF FF FF FF FF FF FF    
   9139 00F54C FF FF FF FF FF FF FF FF    
   9139 00F554 FF FF FF FF FF FF FF FF    
   9139 00F55C FF FF FF FF FF FF FF FF    
   9139 00F564 FF FF FF FF FF FF FF FF    
   9139 00F56C FF FF FF FF FF FF FF FF    
   9139 00F574 FF FF FF FF FF FF FF FF    
   9139 00F57C FF FF FF FF FF FF FF FF    
   9139 00F584 FF FF FF FF FF FF FF FF    
   9139 00F58C FF FF FF FF FF FF FF FF    
   9139 00F594 FF FF FF FF FF FF FF FF    
   9139 00F59C FF FF FF FF FF FF FF FF    
   9139 00F5A4 FF FF FF FF FF FF FF FF    
   9139 00F5AC FF FF FF FF FF FF FF FF    
   9139 00F5B4 FF FF FF FF FF FF FF FF    
   9139 00F5BC FF FF FF FF FF FF FF FF    
   9139 00F5C4 FF FF FF FF FF FF FF FF    
   9139 00F5CC FF FF FF FF FF FF FF FF    
   9139 00F5D4 FF FF FF FF FF FF FF FF    
   9139 00F5DC FF FF FF FF FF FF FF FF    
   9139 00F5E4 FF FF FF FF FF FF FF FF    
   9139 00F5EC FF FF FF FF FF FF FF FF    
   9139 00F5F4 FF FF FF FF FF FF FF FF    
   9139 00F5FC FF FF FF FF FF FF FF FF    
   9139 00F604 FF FF FF FF FF FF FF FF    
   9139 00F60C FF FF FF FF FF FF FF FF    
   9139 00F614 FF FF FF FF FF FF FF FF    
   9139 00F61C FF FF FF FF FF FF FF FF    
   9139 00F624 FF FF FF FF FF FF FF FF    
   9139 00F62C FF FF FF FF FF FF FF FF    
   9139 00F634 FF FF FF FF FF FF FF FF    
   9139 00F63C FF FF FF FF FF FF FF FF    
   9139 00F644 FF FF FF FF FF FF FF FF    
   9139 00F64C FF FF FF FF FF FF FF FF    
   9139 00F654 FF FF FF FF FF FF FF FF    
   9139 00F65C FF FF FF FF FF FF FF FF    
   9139 00F664 FF FF FF FF FF FF FF FF    
   9139 00F66C FF FF FF FF FF FF FF FF    
   9139 00F674 FF FF FF FF FF FF FF FF    
   9139 00F67C FF FF FF FF FF FF FF FF    
   9139 00F684 FF FF FF FF FF FF FF FF    
   9139 00F68C FF FF FF FF FF FF FF FF    
   9139 00F694 FF FF FF FF FF FF FF FF    
   9139 00F69C FF FF FF FF FF FF FF FF    
   9139 00F6A4 FF FF FF FF FF FF FF FF    
   9139 00F6AC FF FF FF FF FF FF FF FF    
   9139 00F6B4 FF FF FF FF FF FF FF FF    
   9139 00F6BC FF FF FF FF FF FF FF FF    
   9139 00F6C4 FF FF FF FF FF FF FF FF    
   9139 00F6CC FF FF FF FF FF FF FF FF    
   9139 00F6D4 FF FF FF FF FF FF FF FF    
   9139 00F6DC FF FF FF FF FF FF FF FF    
   9139 00F6E4 FF FF FF FF FF FF FF FF    
   9139 00F6EC FF FF FF FF FF FF FF FF    
   9139 00F6F4 FF FF FF FF FF FF FF FF    
   9139 00F6FC FF FF FF FF FF FF FF FF    
   9139 00F704 FF FF FF FF FF FF FF FF    
   9139 00F70C FF FF FF FF FF FF FF FF    
   9139 00F714 FF FF FF FF FF FF FF FF    
   9139 00F71C FF FF FF FF FF FF FF FF    
   9139 00F724 FF FF FF FF FF FF FF FF    
   9139 00F72C FF FF FF FF FF FF FF FF    
   9139 00F734 FF FF FF FF FF FF FF FF    
   9139 00F73C FF FF FF FF FF FF FF FF    
   9139 00F744 FF FF FF FF FF FF FF FF    
   9139 00F74C FF FF FF FF FF FF FF FF    
   9139 00F754 FF FF FF FF FF FF FF FF    
   9139 00F75C FF FF FF FF FF FF FF FF    
   9139 00F764 FF FF FF FF FF FF FF FF    
   9139 00F76C FF FF FF FF FF FF FF FF    
   9139 00F774 FF FF FF FF FF FF FF FF    
   9139 00F77C FF FF FF FF FF FF FF FF    
   9139 00F784 FF FF FF FF FF FF FF FF    
   9139 00F78C FF FF FF FF FF FF FF FF    
   9139 00F794 FF FF FF FF FF FF FF FF    
   9139 00F79C FF FF FF FF FF FF FF FF    
   9139 00F7A4 FF FF FF FF FF FF FF FF    
   9139 00F7AC FF FF FF FF FF FF FF FF    
   9139 00F7B4 FF FF FF FF FF FF FF FF    
   9139 00F7BC FF FF FF FF FF FF FF FF    
   9139 00F7C4 FF FF FF FF FF FF FF FF    
   9139 00F7CC FF FF FF FF FF FF FF FF    
   9139 00F7D4 FF FF FF FF FF FF FF FF    
   9139 00F7DC FF FF FF FF FF FF FF FF    
   9139 00F7E4 FF FF FF FF FF FF FF FF    
   9139 00F7EC FF FF FF FF FF FF FF FF    
   9139 00F7F4 FF FF FF FF FF FF FF FF    
   9139 00F7FC FF FF FF FF FF FF FF FF    
   9139 00F804 FF FF FF FF FF FF FF FF    
   9139 00F80C FF FF FF FF FF FF FF FF    
   9139 00F814 FF FF FF FF FF FF FF FF    
   9139 00F81C FF FF FF FF FF FF FF FF    
   9139 00F824 FF FF FF FF FF FF FF FF    
   9139 00F82C FF FF FF FF FF FF FF FF    
   9139 00F834 FF FF FF FF FF FF FF FF    
   9139 00F83C FF FF FF FF FF FF FF FF    
   9139 00F844 FF FF FF FF FF FF FF FF    
   9139 00F84C FF FF FF FF FF FF FF FF    
   9139 00F854 FF FF FF FF FF FF FF FF    
   9139 00F85C FF FF FF FF FF FF FF FF    
   9139 00F864 FF FF FF FF FF FF FF FF    
   9139 00F86C FF FF FF FF FF FF FF FF    
   9139 00F874 FF FF FF FF FF FF FF FF    
   9139 00F87C FF FF FF FF FF FF FF FF    
   9139 00F884 FF FF FF FF FF FF FF FF    
   9139 00F88C FF FF FF FF FF FF FF FF    
   9139 00F894 FF FF FF FF FF FF FF FF    
   9139 00F89C FF FF FF FF FF FF FF FF    
   9139 00F8A4 FF FF FF FF FF FF FF FF    
   9139 00F8AC FF FF FF FF FF FF FF FF    
   9139 00F8B4 FF FF FF FF FF FF FF FF    
   9139 00F8BC FF FF FF FF FF FF FF FF    
   9139 00F8C4 FF FF FF FF FF FF FF FF    
   9139 00F8CC FF FF FF FF FF FF FF FF    
   9139 00F8D4 FF FF FF FF FF FF FF FF    
   9139 00F8DC FF FF FF FF FF FF FF FF    
   9139 00F8E4 FF FF FF FF FF FF FF FF    
   9139 00F8EC FF FF FF FF FF FF FF FF    
   9139 00F8F4 FF FF FF FF FF FF FF FF    
   9139 00F8FC FF FF FF FF FF FF FF FF    
   9139 00F904 FF FF FF FF FF FF FF FF    
   9139 00F90C FF FF FF FF FF FF FF FF    
   9139 00F914 FF FF FF FF FF FF FF FF    
   9139 00F91C FF FF FF FF FF FF FF FF    
   9139 00F924 FF FF FF FF FF FF FF FF    
   9139 00F92C FF FF FF FF FF FF FF FF    
   9139 00F934 FF FF FF FF FF FF FF FF    
   9139 00F93C FF FF FF FF FF FF FF FF    
   9139 00F944 FF FF FF FF FF FF FF FF    
   9139 00F94C FF FF FF FF FF FF FF FF    
   9139 00F954 FF FF FF FF FF FF FF FF    
   9139 00F95C FF FF FF FF FF FF FF FF    
   9139 00F964 FF FF FF FF FF FF FF FF    
   9139 00F96C FF FF FF FF FF FF FF FF    
   9139 00F974 FF FF FF FF FF FF FF FF    
   9139 00F97C FF FF FF FF FF FF FF FF    
   9139 00F984 FF FF FF FF FF FF FF FF    
   9139 00F98C FF FF FF FF FF FF FF FF    
   9139 00F994 FF FF FF FF FF FF FF FF    
   9139 00F99C FF FF FF FF FF FF FF FF    
   9139 00F9A4 FF FF FF FF FF FF FF FF    
   9139 00F9AC FF FF FF FF FF FF FF FF    
   9139 00F9B4 FF FF FF FF FF FF FF FF    
   9139 00F9BC FF FF FF FF FF FF FF FF    
   9139 00F9C4 FF FF FF FF FF FF FF FF    
   9139 00F9CC FF FF FF FF FF FF FF FF    
   9139 00F9D4 FF FF FF FF FF FF FF FF    
   9139 00F9DC FF FF FF FF FF FF FF FF    
   9139 00F9E4 FF FF FF FF FF FF FF FF    
   9139 00F9EC FF FF FF FF FF FF FF FF    
   9139 00F9F4 FF FF FF FF FF FF FF FF    
   9139 00F9FC FF FF FF FF FF FF FF FF    
   9139 00FA04 FF FF FF FF FF FF FF FF    
   9139 00FA0C FF FF FF FF FF FF FF FF    
   9139 00FA14 FF FF FF FF FF FF FF FF    
   9139 00FA1C FF FF FF FF FF FF FF FF    
   9139 00FA24 FF FF FF FF FF FF FF FF    
   9139 00FA2C FF FF FF FF FF FF FF FF    
   9139 00FA34 FF FF FF FF FF FF FF FF    
   9139 00FA3C FF FF FF FF FF FF FF FF    
   9139 00FA44 FF FF FF FF FF FF FF FF    
   9139 00FA4C FF FF FF FF FF FF FF FF    
   9139 00FA54 FF FF FF FF FF FF FF FF    
   9139 00FA5C FF FF FF FF FF FF FF FF    
   9139 00FA64 FF FF FF FF FF FF FF FF    
   9139 00FA6C FF FF FF FF FF FF FF FF    
   9139 00FA74 FF FF FF FF FF FF FF FF    
   9139 00FA7C FF FF FF FF FF FF FF FF    
   9139 00FA84 FF FF FF FF FF FF FF FF    
   9139 00FA8C FF FF FF FF FF FF FF FF    
   9139 00FA94 FF FF FF FF FF FF FF FF    
   9139 00FA9C FF FF FF FF FF FF FF FF    
   9139 00FAA4 FF FF FF FF FF FF FF FF    
   9139 00FAAC FF FF FF FF FF FF FF FF    
   9139 00FAB4 FF FF FF FF FF FF FF FF    
   9139 00FABC FF FF FF FF FF FF FF FF    
   9139 00FAC4 FF FF FF FF FF FF FF FF    
   9139 00FACC FF FF FF FF FF FF FF FF    
   9139 00FAD4 FF FF FF FF FF FF FF FF    
   9139 00FADC FF FF FF FF FF FF FF FF    
   9139 00FAE4 FF FF FF FF FF FF FF FF    
   9139 00FAEC FF FF FF FF FF FF FF FF    
   9139 00FAF4 FF FF FF FF FF FF FF FF    
   9139 00FAFC FF FF FF FF FF FF FF FF    
   9139 00FB04 FF FF FF FF FF FF FF FF    
   9139 00FB0C FF FF FF FF FF FF FF FF    
   9139 00FB14 FF FF FF FF FF FF FF FF    
   9139 00FB1C FF FF FF FF FF FF FF FF    
   9139 00FB24 FF FF FF FF FF FF FF FF    
   9139 00FB2C FF FF FF FF FF FF FF FF    
   9139 00FB34 FF FF FF FF FF FF FF FF    
   9139 00FB3C FF FF FF FF FF FF FF FF    
   9139 00FB44 FF FF FF FF FF FF FF FF    
   9139 00FB4C FF FF FF FF FF FF FF FF    
   9139 00FB54 FF FF FF FF FF FF FF FF    
   9139 00FB5C FF FF FF FF FF FF FF FF    
   9139 00FB64 FF FF FF FF FF FF FF FF    
   9139 00FB6C FF FF FF FF FF FF FF FF    
   9139 00FB74 FF FF FF FF FF FF FF FF    
   9139 00FB7C FF FF FF FF FF FF FF FF    
   9139 00FB84 FF FF FF FF FF FF FF FF    
   9139 00FB8C FF FF FF FF FF FF FF FF    
   9139 00FB94 FF FF FF FF FF FF FF FF    
   9139 00FB9C FF FF FF FF FF FF FF FF    
   9139 00FBA4 FF FF FF FF FF FF FF FF    
   9139 00FBAC FF FF FF FF FF FF FF FF    
   9139 00FBB4 FF FF FF FF FF FF FF FF    
   9139 00FBBC FF FF FF FF FF FF FF FF    
   9139 00FBC4 FF FF FF FF FF FF FF FF    
   9139 00FBCC FF FF FF FF FF FF FF FF    
   9139 00FBD4 FF FF FF FF FF FF FF FF    
   9139 00FBDC FF FF FF FF FF FF FF FF    
   9139 00FBE4 FF FF FF FF FF FF FF FF    
   9139 00FBEC FF FF FF FF FF FF FF FF    
   9139 00FBF4 FF FF FF FF FF FF FF FF    
   9139 00FBFC FF FF FF FF FF FF FF FF    
   9139 00FC04 FF FF FF FF FF FF FF FF    
   9139 00FC0C FF FF FF FF FF FF FF FF    
   9139 00FC14 FF FF FF FF FF FF FF FF    
   9139 00FC1C FF FF FF FF FF FF FF FF    
   9139 00FC24 FF FF FF FF FF FF FF FF    
   9139 00FC2C FF FF FF FF FF FF FF FF    
   9139 00FC34 FF FF FF FF FF FF FF FF    
   9139 00FC3C FF FF FF FF FF FF FF FF    
   9139 00FC44 FF FF FF FF FF FF FF FF    
   9139 00FC4C FF FF FF FF FF FF FF FF    
   9139 00FC54 FF FF FF FF FF FF FF FF    
   9139 00FC5C FF FF FF FF FF FF FF FF    
   9139 00FC64 FF FF FF FF FF FF FF FF    
   9139 00FC6C FF FF FF FF FF FF FF FF    
   9139 00FC74 FF FF FF FF FF FF FF FF    
   9139 00FC7C FF FF FF FF FF FF FF FF    
   9139 00FC84 FF FF FF FF FF FF FF FF    
   9139 00FC8C FF FF FF FF FF FF FF FF    
   9139 00FC94 FF FF FF FF FF FF FF FF    
   9139 00FC9C FF FF FF FF FF FF FF FF    
   9139 00FCA4 FF FF FF FF FF FF FF FF    
   9139 00FCAC FF FF FF FF FF FF FF FF    
   9139 00FCB4 FF FF FF FF FF FF FF FF    
   9139 00FCBC FF FF FF FF FF FF FF FF    
   9139 00FCC4 FF FF FF FF FF FF FF FF    
   9139 00FCCC FF FF FF FF FF FF FF FF    
   9139 00FCD4 FF FF FF FF FF FF FF FF    
   9139 00FCDC FF FF FF FF FF FF FF FF    
   9139 00FCE4 FF FF FF FF FF FF FF FF    
   9139 00FCEC FF FF FF FF FF FF FF FF    
   9139 00FCF4 FF FF FF FF FF FF FF FF    
   9139 00FCFC FF FF FF FF FF FF FF FF    
   9139 00FD04 FF FF FF FF FF FF FF FF    
   9139 00FD0C FF FF FF FF FF FF FF FF    
   9139 00FD14 FF FF FF FF FF FF FF FF    
   9139 00FD1C FF FF FF FF FF FF FF FF    
   9139 00FD24 FF FF FF FF FF FF FF FF    
   9139 00FD2C FF FF FF FF FF FF FF FF    
   9139 00FD34 FF FF FF FF FF FF FF FF    
   9139 00FD3C FF FF FF FF FF FF FF FF    
   9139 00FD44 FF FF FF FF FF FF FF FF    
   9139 00FD4C FF FF FF FF FF FF FF FF    
   9139 00FD54 FF FF FF FF FF FF FF FF    
   9139 00FD5C FF FF FF FF FF FF FF FF    
   9139 00FD64 FF FF FF FF FF FF FF FF    
   9139 00FD6C FF FF FF FF FF FF FF FF    
   9139 00FD74 FF FF FF FF FF FF FF FF    
   9139 00FD7C FF FF FF FF FF FF FF FF    
   9139 00FD84 FF FF FF FF FF FF FF FF    
   9139 00FD8C FF FF FF FF FF FF FF FF    
   9139 00FD94 FF FF FF FF FF FF FF FF    
   9139 00FD9C FF FF FF FF FF FF FF FF    
   9139 00FDA4 FF FF FF FF FF FF FF FF    
   9139 00FDAC FF FF FF FF FF FF FF FF    
   9139 00FDB4 FF FF FF FF FF FF FF FF    
   9139 00FDBC FF FF FF FF FF FF FF FF    
   9139 00FDC4 FF FF FF FF FF FF FF FF    
   9139 00FDCC FF FF FF FF FF FF FF FF    
   9139 00FDD4 FF FF FF FF FF FF FF FF    
   9139 00FDDC FF FF FF FF FF FF FF FF    
   9139 00FDE4 FF FF FF FF FF FF FF FF    
   9139 00FDEC FF FF FF FF FF FF FF FF    
   9139 00FDF4 FF FF FF FF FF FF FF FF    
   9139 00FDFC FF FF FF FF FF FF FF FF    
   9139 00FE04 FF FF FF FF FF FF FF FF    
   9139 00FE0C FF FF FF FF FF FF FF FF    
   9139 00FE14 FF FF FF FF FF FF FF FF    
   9139 00FE1C FF FF FF FF FF FF FF FF    
   9139 00FE24 FF FF FF FF FF FF FF FF    
   9139 00FE2C FF FF FF FF FF FF FF FF    
   9139 00FE34 FF FF FF FF FF FF FF FF    
   9139 00FE3C FF FF FF FF FF FF FF FF    
   9139 00FE44 FF FF FF FF FF FF FF FF    
   9139 00FE4C FF FF FF FF FF FF FF FF    
   9139 00FE54 FF FF FF FF FF FF FF FF    
   9139 00FE5C FF FF FF FF FF FF FF FF    
   9139 00FE64 FF FF FF FF FF FF FF FF    
   9139 00FE6C FF FF FF FF FF FF FF FF    
   9139 00FE74 FF FF FF FF FF FF FF FF    
   9139 00FE7C FF FF FF FF FF FF FF FF    
   9139 00FE84 FF FF FF FF FF FF FF FF    
   9139 00FE8C FF FF FF FF FF FF FF FF    
   9139 00FE94 FF FF FF FF FF FF FF FF    
   9139 00FE9C FF FF FF FF FF FF FF FF    
   9139 00FEA4 FF FF FF FF FF FF FF FF    
   9139 00FEAC FF FF FF FF FF FF FF FF    
   9139 00FEB4 FF FF FF FF FF FF FF FF    
   9139 00FEBC FF FF FF FF FF FF FF FF    
   9139 00FEC4 FF FF FF FF FF FF FF FF    
   9139 00FECC FF FF FF FF FF FF FF FF    
   9139 00FED4 FF FF FF FF FF FF FF FF    
   9139 00FEDC FF FF FF FF FF FF FF FF    
   9139 00FEE4 FF FF FF FF FF FF FF FF    
   9139 00FEEC FF FF FF FF FF FF FF FF    
   9139 00FEF4 FF FF FF FF FF FF FF FF    
   9139 00FEFC FF FF FF FF FF FF FF FF    
   9139 00FF04 FF FF FF FF FF FF FF FF    
   9139 00FF0C FF FF FF FF FF FF FF FF    
   9139 00FF14 FF FF FF FF FF FF FF FF    
   9139 00FF1C FF FF FF FF FF FF FF FF    
   9139 00FF24 FF FF FF FF FF FF FF FF    
   9139 00FF2C FF FF FF FF FF FF FF FF    
   9139 00FF34 FF FF FF FF FF FF FF FF    
   9139 00FF3C FF FF FF FF FF FF FF FF    
   9139 00FF44 FF FF FF FF FF FF FF FF    
   9139 00FF4C FF FF FF FF FF FF FF FF    
   9139 00FF54 FF FF FF FF FF FF FF FF    
   9139 00FF5C FF FF FF FF FF FF FF FF    
   9139 00FF64 FF FF FF FF FF FF FF FF    
   9139 00FF6C FF FF FF FF FF FF FF FF    
   9139 00FF74 FF FF FF FF FF FF FF FF    
   9139 00FF7C FF FF FF FF FF FF FF FF    
   9139 00FF84 FF FF FF FF FF FF FF FF    
   9139 00FF8C FF FF FF FF FF FF FF FF    
   9139 00FF94 FF FF FF FF FF FF FF FF    
   9139 00FF9C FF FF FF FF FF FF FF FF    
   9139 00FFA4 FF FF FF FF FF FF FF FF    
   9139 00FFAC FF FF FF FF FF FF FF FF    
   9139 00FFB4 FF FF FF FF FF FF FF FF    
   9139 00FFBC FF FF FF FF FF FF FF FF    
   9139 00FFC4 FF FF FF FF FF FF FF FF    
   9139 00FFCC FF FF FF FF FF FF FF FF    
   9139 00FFD4 FF FF                      
   9140 00FFD6 04 00                        	dw		4			; task #4
                                           
   9142 00FFD8 FF FF FF FF FF FF            	.org	$FFDE
   9143 00FFDE 06 00                        	dw		6			; task #6
                                           
   9145 00FFE0 FF FF FF FF FF FF            	.org 	$FFE6
   9146 00FFE6 FE EF                        	dw		BrkRout
                                           
   9148 00FFE8 FF FF FF FF FF FF            	.org	$FFEE		; IRQ vector
   9149 00FFEE 72 EF                        	dw		IRQRout
                                           
   9151 00FFF0 FF FF FF FF FF FF FF FF      	.org	$FFFC
   9151 00FFF8 FF FF FF FF                
   9152 00FFFC 00 E0                        	dw		$E000
                                           
                                           	.org	$FFFE
   9155 00FFFE 71 EF                        	dw		ByteIRQRout

Checksum=4928E586

Number of instructions processed: 3746
Number of opcode bytes: 8231
Bytes per instruction: 2.197277 (17.578217 bits)
Clock cycle count: 5406
Clocks per instruction: 1.443139

The above statistics are only estimates.

	The CPI assumes data memory access requires two clock cycles and instruction
	access is single cycle. The actual CPI may be higher if there are memory wait 
	states, or lower if data is found in the cache.
