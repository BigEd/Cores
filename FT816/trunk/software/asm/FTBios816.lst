Finitron FT832 assembler   version 1.4   Wed Nov 18 20:01:03 2015     Page 1
FTBios816.asm

                                        ; ============================================================================
                                        ; FTBios816.asm
                                        ;        __
                                        ;   \\__/ o\    (C) 2014  Robert Finch, Stratford
                                        ;    \  __ /    All rights reserved.
                                        ;     \/_//     robfinch<remove>@finitron.ca
                                        ;       ||
                                        ;  
                                        ;
                                        ; This source file is free software: you can redistribute it and/or modify 
                                        ; it under the terms of the GNU Lesser General Public License as published 
                                        ; by the Free Software Foundation, either version 3 of the License, or     
                                        ; (at your option) any later version.                                      
                                        ;                                                                          
                                        ; This source file is distributed in the hope that it will be useful,      
                                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                                        ; GNU General Public License for more details.                             
                                        ;                                                                          
                                        ; You should have received a copy of the GNU General Public License        
                                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                                        ;                                                                          
                                        ; ============================================================================
                                        ;
     25 = 000000000000000D                            CR			EQU		13
     26 = 000000000000000A                            LF			EQU		10
     27 = 000000000000001B                            ESC			EQU		$1B
     28 = 0000000000000008                            BS			EQU		8
     29 = 0000000000000003                            CTRLC		EQU		3
                                        
     31 = 0000000000000012                            SC_LSHIFT	EQU		$12
     32 = 0000000000000059                            SC_RSHIFT	EQU		$59
     33 = 00000000000000F0                            SC_KEYUP	EQU		$F0
     34 = 00000000000000E0                            SC_EXTEND	EQU		$E0
     35 = 0000000000000014                            SC_CTRL		EQU		$14
     36 = 0000000000000011                            SC_ALT		EQU		$11
     37 = 0000000000000071                            SC_DEL		EQU		$71		; extend
     38 = 0000000000000058                            SC_LCTRL	EQU		$58
     39 = 0000000000000077                            SC_NUMLOCK	EQU		$77
     40 = 000000000000007E                            SC_SCROLLLOCK	EQU	$7E
     41 = 0000000000000058                            SC_CAPSLOCK	EQU		$58
                                        
     43 = 000000000000001F                            TEXTROWS	EQU		31
     44 = 0000000000000054                            TEXTCOLS	EQU		84
                                        
     46 = 0000000000000004                            TickCount	EQU		$4
     47 = 0000000000000008                            KeyState1	EQU		$8
     48 = 0000000000000009                            KeyState2	EQU		$9
     49 = 000000000000000A                            KeybdLEDs	EQU		$A
     50 = 000000000000000B                            KeybdWaitFlag	EQU	$B
     51 = 000000000000000C                            NumWorkArea	EQU		$C
                                        
                                        ; Range $10 to $1F reserved for hardware counters
     54 = 0000000000000010                            CNT0L		EQU		$10
     55 = 0000000000000011                            CNT0M		EQU		$11
     56 = 0000000000000012                            CNT0H		EQU		$12
     57 = 0000000000000020                            RangeStart	EQU		$20
     58 = 0000000000000024                            RangeEnd	EQU		$24
     59 = 0000000000000030                            CursorX		EQU		$30
     60 = 0000000000000032                            CursorY		EQU		$32
     61 = 0000000000000034                            VideoPos	EQU		$34
     62 = 0000000000000036                            NormAttr	EQU		$36
     63 = 0000000000000038                            StringPos	EQU		$38
     64 = 000000000000003C                            EscState	EQU		$3C
                                        
     66 = 0000000000000080                            cs_save		EQU		$80
     67 = 0000000000000084                            ds_save		EQU		$84
     68 = 0000000000000088                            pc_save		EQU		$88
     69 = 000000000000008A                            pb_save		EQU		$8A
     70 = 000000000000008B                            acc_save	EQU		$8B
     71 = 000000000000008F                            x_save		EQU		$8F
     72 = 0000000000000093                            y_save		EQU		$93
     73 = 0000000000000097                            sp_save		EQU		$97
     74 = 000000000000009B                            sr_save		EQU		$9B
     75 = 000000000000009C                            srx_save	EQU		$9C
     76 = 000000000000009D                            db_save		EQU		$9D
     77 = 000000000000009E                            dpr_save	EQU		$9E
                                        
     79 = 00000000000000A0                            running_task	EQU		$A0
                                        
     81 = 00000000000000A2                            keybd_char	EQU		$A2
     82 = 00000000000000A4                            keybd_cmd	EQU		$A4
                                        
     84 = 00000000000003F0                            OutputVec	EQU		$03F0
                                        
     86 = 0000000000FD0000                            VIDBUF		EQU		$FD0000
     87 = 0000000000FEA000                            VIDREGS		EQU		$FEA000
     88 = 0000000000FEA100                            PRNG		EQU		$FEA100
     89 = 0000000000FEA110                            KEYBD		EQU		$FEA110
     90 = 0000000000FEA200                            FAC1		EQU		$FEA200
                                        
     92 = 0000000000007868                            do_invaders			EQU		$7868
                                        
Finitron FT832 assembler   version 1.4   Wed Nov 18 20:01:03 2015     Page 1
supermon832.asm

                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;	.opt proc65c02,caseinsensitive
                                        	cpu	W65C02
                                        ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                                        ;*                                                                                 *
                                        ;*      SUPERMON 816 MACHINE LANGUAGE MONITOR FOR THE W65C816S MICROPROCESSOR      *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;*      Copyright ©1991-2014 by BCS Technology Limited.  All rights reserved.      *
                                        ;*                                                                                 *
                                        ;* Permission is hereby granted to use, copy, modify and distribute this software, *
                                        ;* provided this copyright notice remains in the source code and  proper  attribu- *
                                        ;* tion is given.  Redistribution, regardless of form, must be at no charge to the *
                                        ;* end  user.  This code or any part thereof, including any derivation, MAY NOT be *
                                        ;* incorporated into any package intended for sale,  unless written permission has * 
                                        ;* been given by the copyright holder.                                             *
                                        ;*                                                                                 *
                                        ;* THERE IS NO WARRANTY OF ANY KIND WITH THIS SOFTWARE.  The user assumes all risk *
                                        ;* in connection with the incorporation of this software into any system.          *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;* Supermon 816 is a salute to Jim Butterfield, who passed away on June 29, 2007.  *
                                        ;*                                                                                 *
                                        ;* Jim, who was the unofficial  spokesman for  Commodore  International during the *  
                                        ;* heyday of the company's 8 bit supremacy, scratch-developed the Supermon machine *
                                        ;* language monitor for the PET & CBM computers.   When the best-selling Commodore *
                                        ;* 64 was introduced, Jim adapted his software to the new machine & gave the adap- *
                                        ;* tation the name Supermon 64.   Commodore  subsequently  integrated a customized *
                                        ;* version of Supermon 64 into the C-128 to act as the resident M/L monitor.       *
                                        ;*                                                                                 *
                                        ;* Although Supermon 816 is not an adaptation of Supermon 64,  it was  decided  to *
                                        ;* keep the Supermon name alive, since Supermon 816's general operation & user in- *
                                        ;* terface is similar to that of Supermon 64.   Supermon 816 is 100 percent native *
                                        ;* mode 65C816 code & was developed from a blank canvas.                           *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;* This version customized for the RTF65002 test system                            *
                                        ;* Finitron.ca                                                                     *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;* Supermon 816 is a full featured monitor and supports the following operations:  *
                                        ;*                                                                                 *
                                        ;*     A — Assemble code                                                           *
                                        ;*     C — Compare memory regions                                                  *
                                        ;*     D — Disassemble code                                                        *
                                        ;*     F — Fill memory region (cannot span banks)                                  *
                                        ;*     G — Execute code (stops at BRK)                                             *
                                        ;*     H — Search (hunt) memory region                                             *
                                        ;*     J — Execute code as a subroutine (stops at BRK or RTS)                      *
                                        ;*     M — Dump & display memory range                                             *
                                        ;*     R — Dump & display 65C816 registers                                         *
                                        ;*     T — Copy (transfer) memory region                                           *
                                        ;*     X — Exit Supermon 816 & return to operating environment                     *
                                        ;*     > — Modify up to 32 bytes of memory                                         *
                                        ;*     ; — Modify 65C816 registers                                                 *
                                        ;*                                                                                 *
                                        ;* Supermon 816 accepts binary (%), octal (@), decimal (+) and hexadecimal ($) as  *
                                        ;* input for numeric parameters.  Additionally, the H and > operations accept an   *
                                        ;* ASCII string in place of numeric values by preceding the string with ', e.g.:   *
                                        ;*                                                                                 *
                                        ;*     h 042000 042FFF 'BCS Technology Limited                                     *
                                        ;*                                                                                 *
                                        ;* If no radix symbol is entered hex is assumed.                                   *
                                        ;*                                                                                 *
                                        ;* Numeric conversion is also available.  For example, typing:                     *
                                        ;*                                                                                 *
                                        ;*     +1234567 <CR>                                                               *
                                        ;*                                                                                 *
                                        ;* will display:                                                                   *
                                        ;*                                                                                 *
                                        ;*         $12D687                                                                 *
                                        ;*         +1234567                                                                *
                                        ;*         @04553207                                                               *
                                        ;*         %100101101011010000111                                                  *
                                        ;*                                                                                 *
                                        ;* In the above example, <CR> means the console keyboard's return or enter key.    *
                                        ;*                                                                                 *
                                        ;* All numeric values are internally processed as 32 bit unsigned integers.  Addr- *
                                        ;* esses may be entered as 8, 16 or 24 bit values.  During instruction assembly,   *
                                        ;* immediate mode operands may be forced to 16 bits by preceding the operand with  *
                                        ;* an exclamation point if the instruction can accept a 16 bit operand, e.g.:      *
                                        ;*                                                                                 *
                                        ;*     a 1f2000 lda !#4                                                            *
                                        ;*                                                                                 *
                                        ;* The above will assemble as:                                                     *
                                        ;*                                                                                 *
                                        ;*     A 1F2000  A9 04 00     LDA #$0004                                           *
                                        ;*                                                                                 *
                                        ;* Entering:                                                                       *
                                        ;*                                                                                 *
                                        ;*     a 1f2000 ldx !#+157                                                         *
                                        ;*                                                                                 *
                                        ;* will assemble as:                                                               *
                                        ;*                                                                                 *
                                        ;*     A 1F2000  A2 9D 00     LDX #$009D                                           *
                                        ;*                                                                                 *
                                        ;* Absent the ! in the operand field, the above would have been assembled as:      *
                                        ;*                                                                                 *
                                        ;*     A 1F2000  A2 9D        LDX #$9D                                             *
                                        ;*                                                                                 *
                                        ;* If an immediate mode operand is greater than $FF assembly of a 16 bit operand   *
                                        ;* is implied.                                                                     *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;* A Note on the PEA & PEI Instructions                                            *
                                        ;* ————————————————————————————————————                                            *
                                        ;*                                                                                 *
                                        ;* The Eyes and Lichty programming manual uses the following syntax for the PEA    *
                                        ;* and PEI instructions:                                                           *
                                        ;*                                                                                 *
                                        ;*     PEA <operand>                                                               *
                                        ;*     PEI (<operand>)                                                             *
                                        ;*                                                                                 *
                                        ;* The WDC data sheet that was published at the time of the 65C816's release in    *
                                        ;* 1984 does not indicate a recommended or preferred syntax for any of the above   *
                                        ;* instructions.  PEA pushes its operand to the stack and hence operates like any  *
                                        ;* other immediate mode instruction, in that the operand is the data (however, PEA *
                                        ;* doesn't affect the status register).  Similarly, PEI pushes the 16 bit value    *
                                        ;* stored at <operand> and <operand>+1, and hence operates like any other direct   *
                                        ;* (zero) page instruction, again without affecting the status register.           *
                                        ;*                                                                                 *
                                        ;* BCS Technology Limited is of the opinion that the developer of the ORCA/M as-   *
                                        ;* sembler, which is the assembler referred to in the Eyes and Lichty manual, mis- *
                                        ;* understood how PEA and PEI behave during runtime, and hence chose an incorrect  *
                                        ;* syntax for these two instructions.  This error was subsequently carried forward *
                                        ;* by Eyes and Lichty.                                                             *
                                        ;*                                                                                 *
                                        ;* Supermon 816's assembler uses the following syntax for PEA and PEI:             *
                                        ;*                                                                                 *
                                        ;*     PEA #<operand>                                                              *
                                        ;*     PEI <operand>                                                               *
                                        ;*                                                                                 *
                                        ;* The operand for PEA is treated as a 16 bit value, even if entered as an 8 bit   *
                                        ;* value.  The operand for PEI must be 8 bits.                                     *
                                        ;*                                                                                 *
                                        ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                                        ;
                                        ;	* * * * * * * * * * * *
                                        ;	* VERSION INFORMATION *
                                        ;	* * * * * * * * * * * *
                                        ;
                                        softvers .macro                ;software version — change with each revision...
                                                 .byte "1"             ;major
                                                 .byte "."
                                                 .byte "0"             ;minor
                                                 .byte "."
                                                 .byte "0"             ;revision
                                                 .endm
                                        ;
                                        ;REVISION TABLE
                                        ;
                                        ;Ver  Rev Date    Description
                                        ;———————————————————————————————————————————————————————————————————————————————
                                        ;1.0  2013/11/01  A) Original derived from the POC V1.1 single-board computer
                                        ;                    firmware.
                                        ;     2013/11/04  A) Fixed a problem where the B-accumulator wasn't always being
                                        ;                    be copied to shadow storage after return from execution of
                                        ;                    a J command.
                                        ;———————————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;
                                        ;	        COMMENT ABBREVIATIONS
                                        ;	————————————————————————————————————————————————————
                                        ;	  BCD   binary-coded decimal
                                        ;	   DP   direct page or page zero
                                        ;	  EOF   end-of-field
                                        ;	  EOI   end-of-input
                                        ;	  LSB   least significant byte/bit
                                        ;	  LSD   least significant digit
                                        ;	  LSN   least significant nybble
                                        ;	  LSW   least significant word
                                        ;	  MPU   microprocessor
                                        ;	  MSB   most significant byte/bit
                                        ;	  MSD   most significant digit
                                        ;	  MSN   most significant nybble
                                        ;	  MSW   most-significant word
                                        ;	  RAM   random access memory
                                        ;	   WS   whitespace, i.e., blanks & horizontal tabs
                                        ;	————————————————————————————————————————————————————
                                        ;	A word is defined as 16 bits.
                                        ;
                                        ;	   MPU REGISTER SYMBOLS
                                        ;	——————————————————————————
                                        ;	   .A   accumulator LSB
                                        ;	   .B   accumulator MSB
                                        ;	   .C   16 bit accumulator
                                        ;	   .X   X-index
                                        ;	   .Y   Y-index
                                        ;      DS   data segment
                                        ;	   DB   data bank
                                        ;	   DP   direct page
                                        ;      CS   code segment
                                        ;	   PB   program bank
                                        ;	   PC   program counter
                                        ;	   SP   stack pointer
                                        ;	   SR   MPU status
                                        ;      SRX  status extension
                                        ;	————————————————————————————
                                        ;
                                        ;	  MPU STATUS REGISTER SYMBOLS
                                        ;	———————————————————————————————
                                        ;	    C   carry
                                        ;	    D   decimal mode
                                        ;	    I   maskable interrupts
                                        ;	    m   accumulator/memory size
                                        ;	    N   result negative
                                        ;	    V   sign overflow
                                        ;	    x   index registers size
                                        ;	    Z   result zero
                                        ;
                                        ;      16   16 bit emulation flag
                                        ;      32   32 bit emulation flag
                                        ;	———————————————————————————————
                                        ;
                                        ;================================================================================
                                        ;
                                        ;SYSTEM INTERFACE DEFINITIONS
                                        ;
                                        ;	——————————————————————————————————————————————————————————————————
                                        ;	This section defines the interface between Supermon 816 & the host
                                        ;	system.   Change these definitions to suit your system, but do not
                                        ;	change any label names.  All definitions must have valid values in
                                        ;	order to assemble Supermon 816.
                                        ;	——————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————
    315 = 000000000000C000                            _origin_ =$00C000              ;assembly address...
                                        ;
                                        ;	Set _ORIGIN_ to Supermon 816's desired assembly address.
                                        ;	————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    321 = 000000000000F403                            vecexit  =$00F403              ;exit to environment address...
                                        ;
                                        ;	Set VECEXIT to where Supermon 816 should go when it exits.  Supermon 816
                                        ;	will do a JML (long jump) to this address, which means VECEXIT must be a
                                        ;	24 bit address.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    329 = 0000000000000102                            vecbrki  =$0102                ;BRK handler indirect vector...
    330 = 0000000000000105                            vecbrkia =$0105                ;system indirect BRK vector
                                        ;
                                        ;	Supermon 816 will modify this vector so that execution of a BRK instruc-
                                        ;	tion is intercepted & the registers  are  captured.   Your BRK front end
                                        ;	should jump through this vector after pushing the registers as follows:
                                        ;
                                        ;	         phb                   ;save DB
                                        ;	         phd                   ;save DP
                                        ;	         rep #%00110000        ;16 bit registers
                                        ;	         pha
                                        ;	         phx
                                        ;	         phy
                                        ;	         jmp (vecbrki)         ;indirect vector
                                        ;
                                        ;	When a G or J command is issued, the above sequence will be reversed be-
                                        ;	fore a jump is made to the code to be executed.  Upon exit from Supermon
                                        ;	816, the original address at VECBRKI will be restored.
                                        ;
                                        ;	If your BRK front end doesn't conform to the above you will have to mod-
                                        ;	ify Supermon 816 to accommodate the differences.  The most likely needed
                                        ;	changes will be in the order in which registers are pushed to the stack.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    354 = 0000000000003FFF                            hwstack  =$3fff                ;top of hardware stack...
                                        ;
                                        ;	Supermon 816 initializes the stack pointer to this address when the cold
                                        ;	start at MONCOLD is called to enter the monitor.  The stack pointer will
                                        ;	be undisturbed when entry into Supermon 816 is through JMONBRK (see jump
                                        ;	table definitions).
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    363 = 0000000000000080                            zeropage =$80                  ;Supermon 816's direct page...
                                        ;
                                        ;	Supermon 816 uses direct page starting at this address.  Be sure that no
                                        ;	conflict occurs with other software.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    370 = 000000000000F400                            getcha   =$F400                ;get keystroke from console...
                                        ;
                                        ;	GETCHA refers to an operating system API call that returns a keystroke
                                        ;	in the 8 bit accumulator.  Supermon 816  assumes that GETCHA is a non-
                                        ;	blocking subroutine & returns with carry clear to indicate that a key-
                                        ;	stroke is in .A, or with carry set to indicate that no keystroke was
                                        ;	available.  GETCHA will be called with a JSR instruction.
                                        ;
                                        ;	Supermon 816 expects .X & .Y to be preserved upon return from GETCHA.
                                        ;	You may have to modify Supermon 816 at all calls to GETCHA if your "get
                                        ;	keystroke" routine works differently than described.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    384 = 000000000000F406                            putcha   =$F406                ;print character on console...
                                        ;
                                        ;	PUTCHA refers to an operating system API call that prints a character to
                                        ;	the console screen.  The character to be printed will be in .A, which
                                        ;	will be set to 8-bit width.  Supermon 816 assumes that PUTCHA will block
                                        ;	until the character can be processed.  PUTCHA will be called with a JSR
                                        ;	instructions.
                                        ;
                                        ;	Supermon 816 expects .X & .Y to be preserved upon return from PUTCHA.
                                        ;	You may have to modify Supermon 816 at all calls to PUTCHA if your "put
                                        ;	character" routine works differently than described.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    398 = 0000000000000003                            stopkey  =$03                  ;display abort key...
                                        ;
                                        ;	Supermon 816 will poll for a "stop key" during display operations, such
                                        ;	as code disassembly & memory dumps, so as to abort further processing &
                                        ;	return to the command prompt.  STOPKEY must be defined with the ASCII
                                        ;	value that the "stop key" will emit when typed.  The polling is via a
                                        ;	call to GETCHA (described above).  The default STOPKEY definition of $03
                                        ;	is for ASCII <ETX> or [Ctrl-C].
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
    408 = 0000000000000200                            ibuffer  =$000200               ;input buffer &...
    409 = 00000251                      auxbuf   =ibuffer+s_ibuf+1 ;auxiliary buffer...
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	Supermon 816 will use the above definitions for input buffers.  These
                                        ;	buffers may be located anywhere in RAM that is convenient.  The buffers
                                        ;	are stateless, which means that unless Supermon 816 has control of your
                                        ;	system, they may be overwritten without consequence.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;================================================================================
                                        ;
                                        ;W65C816S INSTRUCTION SYNTHESIS MACROS —— !!!!! DO NOT EDIT !!!!!
                                        ;
                                        _asm24_  .macro .ad
                                                 .byte <.ad,>.ad,.ad >> 16
                                                 .endm
                                        ;
                                        brl      .macro .ad
                                        .ba      =*+3
                                                 .byte $82
                                                 .word .ad-.ba
                                                 .endm
                                        ;
                                        ; jml is supported for the RTF65002 in 65c02 mode. And the opcode is supported
                                        ; by the assembler.
                                        ;jml      .macro .ad
                                        ; ;        .byte $5c
                                        ;         _asm24_ .ad
                                        ;         .endm
                                        ;
                                        mvn      .macro .s,.d
                                                 .byte $54,.d,.s
                                                 .endm
                                        ;
                                        mvp      .macro .s,.d
                                                 .byte $44,.d,.s
                                                 .endm
                                        ;
                                        pea      .macro .op
                                                 .byte $f4
                                                 .word .op
                                                 .endm
                                        ;
                                        phb      .macro
                                                 .byte $8b
                                                 .endm
                                        ;
                                        phk      .macro
                                                 .byte $4b
                                                 .endm
                                        ;
                                        plb      .macro
                                                 .byte $ab
                                                 .endm
                                        ;
                                        rep      .macro .op
                                                 .byte $c2,.op
                                                 .endm
                                        ;
                                        sep      .macro .op
                                                 .byte $e2,.op
                                                 .endm
                                        ;
                                        tcd      .macro
                                                 .byte $5b
                                                 .endm
                                        ;
                                        tcs      .macro
                                                 .byte $1b
                                                 .endm
                                        ;
                                        tdc      .macro
                                                 .byte $7b
                                                 .endm
                                        ;
                                        tsc      .macro
                                                 .byte $3b
                                                 .endm
                                        ;
                                        txy      .macro
                                                 .byte $9b
                                                 .endm
                                        ;
                                        tyx      .macro
                                                 .byte $bb
                                                 .endm
                                        ;
                                        wai      .macro
                                                 .byte $cb
                                                 .endm
                                        ;
                                        xba      .macro
                                                 .byte $eb
                                                 .endm
                                        ;
                                        adcw     .macro .op
                                                 adc #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        andw     .macro .op
                                                 and #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        bitw     .macro .op
                                                 bit #<.op
                                                 .byte >.op
                                                 .endm
                                        ;         
                                        cmpw     .macro .op
                                                 cmp #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        cpxw     .macro .op
                                                 cpx #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        cpyw     .macro .op
                                                 cpy #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        eorw     .macro .op
                                                 eor #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        ldaw     .macro .op
                                                 lda #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        ldxw     .macro .op
                                                 ldx #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        ldyw     .macro .op
                                                 ldy #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        oraw     .macro .op
                                                 ora #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        sbcw     .macro .op
                                                 sbc #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        ldalx    .macro .ad
                                                 .byte $+         .byte a_esc,"("
                                     +            .byte a_esc,"G4"
                                        
                                     +            .byte <.ad,>.ad,.ad >> 16
                                        
                                                 .endm
                                        ;
                                        adcil    .macro .ad
                                                 .byte $67,.ad
                                                 .endm
                                        ;
                                        adcily   .macro .ad
                                                 .byte $77,.ad
                                                 .endm
                                        ;
                                        andil    .macro .ad
                                                 .byte $27,.ad
                                                 .endm
                                        ;
                                        andily   .macro .ad
                                                 .byte $37,.ad
                                                 .endm
                                        ;
                                        cmpil    .macro .ad
                                                 .byte $c7,.ad
                                                 .endm
                                        ;
                                        cmpily   .macro .ad
                                                 .byte $d7,.ad
                                                 .endm
                                        ;
                                        eoril    .macro .ad
                                                 .byte $47,.ad
                                                 .endm
                                        ;
                                        eorily   .macro .ad
                                                 .byte $57,.ad
                                                 .endm
                                        ;
                                        ldail    .macro .ad
                                                 .byte $a7,.ad
                                                 .endm
                                        ;
                                        ldaily   .macro .ad
                                                 .byte $b7,.ad
                                                 .endm
                                        ;
                                        orail    .macro .ad
                                                 .byte $07,.ad
                                                 .endm
                                        ;
                                        oraily   .macro .ad
                                                 .byte $17,.ad
                                                 .endm
                                        ;
                                        sbcil    .macro .ad
                                                 .byte $e7,.ad
                                                 .endm
                                        ;
                                        sbcily   .macro .ad
                                                 .byte $f7,.ad
                                                 .endm
                                        ;
                                        stail    .macro .ad
                                                 .byte $87,.ad
                                                 .endm
                                        ;
                                        staily   .macro .ad
                                                 .byte $97,.ad
                                                 .endm
                                        ;
                                        adcs     .macro .of
                                                 .byte $63,.of
                                                 .endm
                                        ;
                                        adcsi    .macro .of
                                                 .byte $73,.of
                                                 .endm
                                        ;
                                        ands     .macro .of
                                                 .byte $23,.of
                                                 .endm
                                        ;
                                        andsi    .macro .of
                                                 .byte $33,.of
                                                 .endm
                                        ;
                                        cmps     .macro .of
                                                 .byte $c3,.of
                                                 .endm
                                        ;
                                        cmpsi    .macro .of
                                                 .byte $d3,.of
                                                 .endm
                                        ;
                                        eors     .macro .of
                                                 .byte $43,.of
                                                 .endm
                                        ;
                                        eorsi    .macro .of
                                                 .byte $53,.of
                                                 .endm
                                        ;
                                        ldas     .macro .of
                                                 .byte $a3,.of
                                                 .endm
                                        ;
                                        ldasi    .macro .of
                                                 .byte $b3,.of
                                                 .endm
                                        ;
                                        oras     .macro .of
                                                 .byte $03,.of
                                                 .endm
                                        ;
                                        orasi    .macro .of
                                                 .byte $13,.of
                                                 .endm
                                        ;
                                        sbcs     .macro .of
                                                 .byte $e3,.of
                                                 .endm
                                        ;
                                        sbcsi    .macro .of
                                                 .byte $f3,.of
                                                 .endm
                                        ;
                                        stas     .macro .of
                                                 .byte $83,.of
                                                 .endm
                                        ;
                                        stasi    .macro .of
                                                 .byte $93,.of
                                                 .endm
                                        ;
                                        longa    .macro
                                                 .byte $c2,$20
                                                 .endm
                                        ;
                                        longr    .macro
                                                 .byte $c2,$30
                                                 .endm
                                        ;
                                        longx    .macro
                                                 .byte $c2,$10
                                                 .endm
                                        ;
                                        shorta   .macro
                                                 .byte $e2,$20
                                                 .endm
                                        ;
                                        shorti   .macro
                                                 .byte $e2,$10
                                                 .endm
                                        ;
                                        shortr   .macro
                                                 .byte $e2,$30
                                                 .endm
                                        ;
                                        shortx   .macro
                                                 .byte $e2,$10
                                                 .endm
                                        ;
                                        ;================================================================================
                                        ;
                                        ;CONSOLE DISPLAY CONTROL MACROS
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	The following macros execute terminal  control procedures  that  perform
                                        ;	such tasks as clearing the screen,  switching  between  normal & reverse
                                        ;	video, etc.  These macros are for WYSE 60 & compatible displays, such as
                                        ;	the WYSE 150, WYSE 160, WYSE 325 & WYSE GPT.   Only the functions needed
                                        ;	by Supermon 816 are included.
                                        ;
                                        ;	If your console is not WYSE 60 compatible, you will need to  edit  these
                                        ;	macros as required to control your particular console or terminal.  Note
                                        ;	that in some cases one macro may call another.  Exercise caution in your
                                        ;	edits to avoid introducing display bugs.
                                        ;
                                        ;	If your console display cannot execute one of these procedures,  such as
                                        ;	'CL' (clear to end of line), you will have to develop an alternative.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;
                                        ;	clearing data...
                                        ;
                                        bs       .macro                ;destructive backspace
                                                 .byte a_bs
                                     +            .byte a_esc,"W"
                                        
                                                 .endm
                                        ;
                                        cl       .macro                ;clear to end of line 
                                                 .byte a_esc,"T"
                                                 .endm
                                        ;
                                        ;
                                        ;	cursor control...
                                        ;
                                        cn       .macro                ;cursor on
                                                 .byte a_esc,"`1"
                                                 .endm
                                        ;
                                        co       .macro                ;cursor off
                                                 .byte a_esc,"`0"
                                                 .endm
                                        ;
                                        cr       .macro                ;carriage return
                                                 .byte a_cr
                                                 .endm
                                        ;
                                        lf       .macro                ;carriage return/line feed
                                     +            .byte a_cr
                                        
                                                 .byte a_lf
                                                 .endm
                                        ;
                                        ;
                                        ;	display attributes...
                                        ;
                                        bf       .macro                ;reverse foreground
                                                 .byte a_esc,"("
                                                 .byte a_esc,"G4"
                                                 .endm
                                        ;
                                        er       .macro                ;enable normal foreground
                                                 .byte a_esc,"("
                                                 .byte a_esc,"G0"
                                                 .endm
                                        ;
                                        sf       .macro                ;set foreground
                                                 .byte a_esc,"("
                                                 .byte a_esc,"G0"
                                                 .endm
                                        ;
                                        ;
                                        ;	display editing...
                                        ;
                                        dcuc     .macro                ;delete char under cursor
                                                 .byte a_esc,"W"
                                                 .endm
                                        ;
                                        ;
                                        ;	miscellaneous control...
                                        ;
                                        rb       .macro                ;ring "bell"
                                                 .byte a_bel
                                                 .endm
                                        ;
                                        ;================================================================================
                                        ;
                                        ;ASCII CONTROL DEFINITIONS (menmonic order)
                                        ;
    818 = 0000000000000007                            a_bel    =$07                  ;<BEL> alert/ring bell
    819 = 0000000000000008                            a_bs     =$08                  ;<BS>  backspace
    820 = 000000000000000D                            a_cr     =$0d                  ;<CR>  carriage return
    821 = 000000000000007F                            a_del    =$7f                  ;<DEL> delete
    822 = 000000000000001B                            a_esc    =$1b                  ;<ESC> escape
    823 = 0000000000000009                            a_ht     =$09                  ;<HT>  horizontal tabulation
    824 = 000000000000000A                            a_lf     =$0a                  ;<LF>  linefeed
                                        ;
                                        ;
                                        ;	miscellaneous (description order)...
                                        ;
    829 = 20                            a_blank  =' '                  ;blank (whitespace)
    830 = 7A                            a_asclch ='z'                  ;end of lowercase ASCII
    831 = 000000000000005F                            a_lctouc =$5f                  ;LC to UC conversion mask
    832 = 61                            a_asclcl ='a'                  ;start of lowercase ASCII
                                        ;
                                        ;================================================================================
                                        ;
                                        ;GLOBAL ATOMIC CONSTANTS
                                        ;
                                        ;
                                        ;	data type sizes...
                                        ;
    841 = 0000000000000001                            s_byte   =1                    ;byte
    842 = 0000000000000002                            s_word   =2                    ;word (16 bits)
    843 = 0000000000000003                            s_xword  =3                    ;extended word (24 bits)
    844 = 0000000000000004                            s_dword  =4                    ;double word (32 bits)
    845 = 0000000000000100                            s_rampag =$0100                ;65xx RAM page
                                        ;
                                        ;
                                        ;	data type sizes in bits...
                                        ;
    850 = 0000000000000008                            s_bibyte =8                    ;byte
    851 = 0000000000000004                            s_bnybbl =4                    ;nybble
                                        ;
                                        ;
                                        ;	miscellaneous...
                                        ;
    856 = 000000000000002C                            bitabs   =$2c                  ;absolute BIT opcode
    857 = 0000000000000024                            bitzp    =$24                  ;zero page BIT opcode
                                        ;
                                        ;================================================================================
                                        ;
                                        ;W65C816S NATIVE MODE STATUS REGISTER DEFINITIONS
                                        ;
    863 = 00000001                      s_mpudbx =s_byte               ;data bank size
    864 = 00000002                      s_mpudpx =s_word               ;direct page size
    865 = 00000001                      s_mpupbx =s_byte               ;program bank size
    866 = 00000002                      s_mpupcx =s_word               ;program counter size
    867 = 00000002                      s_mpuspx =s_word               ;stack pointer size
    868 = 00000001                      s_mpusrx =s_byte               ;status size
                                        ;
                                        ;
                                        ;	status register flags...
                                        ;
    873 = 0000000000000001                            sr_car   =%00000001            ;C
    874 = 00000002                      sr_zer   =sr_car << 1          ;Z
    875 = 00000004                      sr_irq   =sr_zer << 1          ;I
    876 = 00000008                      sr_bdm   =sr_irq << 1          ;D
    877 = 00000010                      sr_ixw   =sr_bdm << 1          ;x
    878 = 00000020                      sr_amw   =sr_ixw << 1          ;m
    879 = 00000040                      sr_ovl   =sr_amw << 1          ;V
    880 = 00000080                      sr_neg   =sr_ovl << 1          ;N
    881 = 00000100                      sr_16	 =sr_neg << 1
    882 = 00000200                      sr_32    =sr_16 << 1
                                        ;
                                        ;	NVmxDIZC
                                        ;	xxxxxxxx
                                        ;	||||||||
                                        ;	|||||||+———> 1 = carry set/generated
                                        ;	||||||+————> 1 = result = zero
                                        ;	|||||+—————> 1 = IRQs ignored
                                        ;	||||+——————> 0 = binary arithmetic mode
                                        ;	||||         1 = decimal arithmetic mode
                                        ;	|||+———————> 0 = 16 bit index
                                        ;	|||          1 = 8 bit index
                                        ;	||+————————> 0 = 16 bit .A & memory
                                        ;	||           1 = 8 bit .A & memory
                                        ;	|+—————————> 1 = sign overflow
                                        ;	+——————————> 1 = result = negative
                                        ;
                                        ;================================================================================
                                        ;
                                        ;"SIZE-OF" CONSTANTS
                                        ;
    903 = 00000003                      s_addr   =s_xword              ;24 bit address
    904 = 0000000000000020                            s_auxbuf =32                   ;auxiliary buffer
    905 = 0000000000000050                            s_ibuf   =80                   ;input buffer
    906 = 0000000000000003                            s_mnemon =3                    ;MPU ASCII mnemonic
    907 = 0000000000000002                            s_mnepck =2                    ;MPU encoded mnemonic
    908 = 0000000000000003                            s_mvinst =3                    ;MVN/MVP instruction
    909 = 00000001                      s_opcode =s_byte               ;MPU opcode
    910 = 00000003                      s_oper   =s_xword              ;operand
    911 = 00000004                      s_pfac   =s_dword              ;primary math accumulator
    912 = 00000006                      s_sfac   =s_dword+s_word       ;secondary math accumulators
                                        ;
                                        ;================================================================================
                                        ;
                                        ;"NUMBER-OF" CONSTANTS
                                        ;
    918 = 0000000000000015                            n_dbytes =21                   ;default disassembly bytes
    919 = 0000000000000008                            n_dump   =8                    ;bytes per memory dump line
    920 = 000000FF                      n_mbytes =s_rampag-1           ;default memory dump bytes
    921 = 0000000000000008                            n_hccols =8                    ;compare/hunt display columns
    922 = 00000009                      n_opcols =3*s_oper             ;disassembly operand columns
    923 = 0000000000000004                            n_opslsr =4                    ;LSRs to extract instruction size
    924 = 0000000000000005                            n_shfenc =5                    ;shifts to encode/decode mnemonic
                                        ;
                                        ;================================================================================
                                        ;
                                        ;NUMERIC CONVERSION CONSTANTS
                                        ;
    930 = 0000000000000006                            a_hexdec ='A'-'9'-2            ;hex to decimal difference
    931 = 25                            c_bin    ='%'                  ;binary prefix
    932 = 2B                            c_dec    ='+'                  ;decimal prefix
    933 = 24                            c_hex    ='$'                  ;hexadecimal prefix
    934 = 40                            c_oct    ='@'                  ;octal prefix
    935 = 66                            k_hex    ='f'                  ;hex ASCII conversion
    936 = 00000020                      m_bits   =s_pfac*s_bibyte      ;operand bit size
    937 = 00000030                      m_cbits  =s_sfac*s_bibyte      ;workspace bit size
    938 = 000000000000000F                            bcdumask =%00001111            ;isolate BCD units mask
    939 = 0000000000000030                            btoamask =%00110000            ;binary to ASCII mask
                                        ;
                                        ;================================================================================
                                        ;
                                        ;ASSEMBLER/DISASSEMBLER CONSTANTS
                                        ;
    945 = 3F                            a_mnecvt ='?'                  ;encoded mnemonic conversion base
    946 = 000000000000001F                            aimmaska =%00011111            ;.A immediate opcode test #1
    947 = 0000000000000009                            aimmaskb =%00001001            ;.A immediate opcode test #2
    948 = 41                            asmprfx  ='A'                  ;assemble code prefix
    949 = 0000000000000009                            ascprmct =9                    ;assembler prompt "size-of"
    950 = 2E                            disprfx  ='.'                  ;disassemble code prefix
    951 = 00000000000000C0                            flimmask =%11000000            ;force long immediate flag
    952 = 0000000000000054                            opc_mvn  =$54                  ;MVN opcode
    953 = 0000000000000044                            opc_mvp  =$44                  ;MVP opcode
    954 = 00000000000000C2                            opc_rep  =$c2                  ;REP opcode
    955 = 00000000000000E2                            opc_sep  =$e2                  ;SEP opcode
    956 = 00000030                      pfmxmask =sr_amw | sr_ixw      ;MPU m & x flag bits mask
                                        ;
                                        ;
                                        ;	assembler prompt buffer offsets...
                                        ;
    961 = 00000002                      apadrbkh =s_word               ;instruction address bank MSN
    962 = 00000003                      apadrbkl =apadrbkh+s_byte      ;instruction address bank LSN
    963 = 00000004                      apadrmbh =apadrbkl+s_byte      ;instruction address MSB MSN
    964 = 00000005                      apadrmbl =apadrmbh+s_byte      ;instruction address MSB LSN
    965 = 00000006                      apadrlbh =apadrmbl+s_byte      ;instruction address LSB MSN
    966 = 00000007                      apadrlbl =apadrlbh+s_byte      ;instruction address LSB LSN
                                        ;
                                        ;
                                        ;	addressing mode preamble symbols...
                                        ;
    971 = 21                            amp_flim ='!'                  ;force long immediate
    972 = 23                            amp_imm  ='#'                  ;immediate
    973 = 28                            amp_ind  ='('                  ;indirect
    974 = 5B                            amp_indl ='['                  ;indirect long
                                        ;
                                        ;
                                        ;	addressing mode symbolic translation indices...
                                        ;
    979 = 0000000000000000                            am_nam   =%0000                ;(0)  no symbol
    980 = 0000000000000001                            am_imm   =%0001                ;(1)  #
    981 = 0000000000000002                            am_adrx  =%0010                ;(2)  dp,X or addr,X
    982 = 0000000000000003                            am_adry  =%0011                ;(3)  dp,Y or addr,Y
    983 = 0000000000000004                            am_ind   =%0100                ;(4)  (dp) or (addr)
    984 = 0000000000000005                            am_indl  =%0101                ;(5)  [dp] or [addr]
    985 = 0000000000000006                            am_indly =%0110                ;(6)  [dp],Y
    986 = 0000000000000007                            am_indx  =%0111                ;(7)  (dp,X) or (addr,X)
    987 = 0000000000000008                            am_indy  =%1000                ;(8)  (dp),Y
    988 = 0000000000000009                            am_stk   =%1001                ;(9)  offset,S
    989 = 000000000000000A                            am_stky  =%1010                ;(10) (offset,S),Y
    990 = 000000000000000B                            am_move  =%1011                ;(11) MVN/MVP sbnk,dbnk
                                        ;
                                        ;
                                        ;	operand size translation indices...
                                        ;
    995 = 0000000000000000                            ops0     =%0000 << 4           ;no operand
    996 = 0000000000000010                            ops1     =%0001 << 4           ;8 bit operand
    997 = 0000000000000020                            ops2     =%0010 << 4           ;16 bit operand
    998 = 0000000000000030                            ops3     =%0011 << 4           ;24 bit operand
    999 = 0000000000000050                            bop1     =%0101 << 4           ;8 bit relative branch
   1000 = 0000000000000060                            bop2     =%0110 << 4           ;16 bit relative branch
   1001 = 0000000000000090                            vops     =%1001 << 4           ;8 or 16 bit operand
                                        ;
                                        ;
                                        ;	operand size & addressing mode extraction masks...
                                        ;
   1006 = 000000000000000F                            amodmask =%00001111            ;addressing mode index
   1007 = 0000000000000030                            opsmask  =%00110000            ;operand size
   1008 = 00000000000000C0                            vopsmask =%11000000            ;BOPx & VOPS flag bits
                                        ;
                                        ;
                                        ;	instruction mnemonic encoding...
                                        ;
   1013 = 0000000000002144                            mne_adc  =$2144                ;ADC
   1014 = 0000000000002BC4                            mne_and  =$2bc4                ;AND
   1015 = 0000000000006D04                            mne_asl  =$6d04                ;ASL
   1016 = 0000000000002106                            mne_bcc  =$2106                ;BCC
   1017 = 000000000000A106                            mne_bcs  =$a106                ;BCS
   1018 = 0000000000009186                            mne_beq  =$9186                ;BEQ
   1019 = 000000000000AA86                            mne_bit  =$aa86                ;BIT
   1020 = 0000000000005386                            mne_bmi  =$5386                ;BMI
   1021 = 00000000000033C6                            mne_bne  =$33c6                ;BNE
   1022 = 0000000000006C46                            mne_bpl  =$6c46                ;BPL
   1023 = 00000000000014C6                            mne_bra  =$14c6                ;BRA
   1024 = 00000000000064C6                            mne_brk  =$64c6                ;BRK
   1025 = 0000000000006CC6                            mne_brl  =$6cc6                ;BRL
   1026 = 00000000000025C6                            mne_bvc  =$25c6                ;BVC
   1027 = 000000000000A5C6                            mne_bvs  =$a5c6                ;BVS
   1028 = 0000000000002348                            mne_clc  =$2348                ;CLC
   1029 = 0000000000002B48                            mne_cld  =$2b48                ;CLD
   1030 = 0000000000005348                            mne_cli  =$5348                ;CLI
   1031 = 000000000000BB48                            mne_clv  =$bb48                ;CLV
   1032 = 0000000000008B88                            mne_cmp  =$8b88                ;CMP
   1033 = 0000000000008C08                            mne_cop  =$8c08                ;COP
   1034 = 000000000000CC48                            mne_cpx  =$cc48                ;CPX
   1035 = 000000000000D448                            mne_cpy  =$d448                ;CPY
   1036 = 000000000000218A                            mne_dec  =$218a                ;DEC
   1037 = 000000000000C98A                            mne_dex  =$c98a                ;DEX
   1038 = 000000000000D18A                            mne_dey  =$d18a                ;DEY
   1039 = 0000000000009C0C                            mne_eor  =$9c0c                ;EOR
   1040 = 00000000000023D4                            mne_inc  =$23d4                ;INC
   1041 = 000000000000CBD4                            mne_inx  =$cbd4                ;INX
   1042 = 000000000000D3D4                            mne_iny  =$d3d4                ;INY
   1043 = 0000000000006B96                            mne_jml  =$6b96                ;JML
   1044 = 0000000000008B96                            mne_jmp  =$8b96                ;JMP
   1045 = 0000000000006D16                            mne_jsl  =$6d16                ;JSL
   1046 = 0000000000009D16                            mne_jsr  =$9d16                ;JSR
   1047 = 000000000000115A                            mne_lda  =$115a                ;LDA
   1048 = 000000000000C95A                            mne_ldx  =$c95a                ;LDX
   1049 = 000000000000D15A                            mne_ldy  =$d15a                ;LDY
   1050 = 0000000000009D1A                            mne_lsr  =$9d1a                ;LSR
   1051 = 0000000000007DDC                            mne_mvn  =$7ddc                ;MVN
   1052 = 0000000000008DDC                            mne_mvp  =$8ddc                ;MVP
   1053 = 0000000000008C1E                            mne_nop  =$8c1e                ;NOP
   1054 = 00000000000014E0                            mne_ora  =$14e0                ;ORA
   1055 = 00000000000011A2                            mne_pea  =$11a2                ;PEA
   1056 = 00000000000051A2                            mne_pei  =$51a2                ;PEI
   1057 = 00000000000099A2                            mne_per  =$99a2                ;PER
   1058 = 0000000000001262                            mne_pha  =$1262                ;PHA
   1059 = 0000000000001A62                            mne_phb  =$1a62                ;PHB
   1060 = 0000000000002A62                            mne_phd  =$2a62                ;PHD
   1061 = 0000000000006262                            mne_phk  =$6262                ;PHK
   1062 = 0000000000008A62                            mne_php  =$8a62                ;PHP
   1063 = 000000000000CA62                            mne_phx  =$ca62                ;PHX
   1064 = 000000000000D262                            mne_phy  =$d262                ;PHY
   1065 = 0000000000001362                            mne_pla  =$1362                ;PLA
   1066 = 0000000000001B62                            mne_plb  =$1b62                ;PLB
   1067 = 0000000000002B62                            mne_pld  =$2b62                ;PLD
   1068 = 0000000000008B62                            mne_plp  =$8b62                ;PLP
   1069 = 000000000000CB62                            mne_plx  =$cb62                ;PLX
   1070 = 000000000000D362                            mne_ply  =$d362                ;PLY
   1071 = 00000000000089A6                            mne_rep  =$89a6                ;REP
   1072 = 0000000000006C26                            mne_rol  =$6c26                ;ROL
   1073 = 0000000000009C26                            mne_ror  =$9c26                ;ROR
   1074 = 0000000000005566                            mne_rti  =$5566                ;RTI
   1075 = 0000000000006D66                            mne_rtl  =$6d66                ;RTL
   1076 = 000000000000A566                            mne_rts  =$a566                ;RTS
   1077 = 00000000000020E8                            mne_sbc  =$20e8                ;SBC
   1078 = 00000000000021A8                            mne_sec  =$21a8                ;SEC
   1079 = 00000000000029A8                            mne_sed  =$29a8                ;SED
   1080 = 00000000000051A8                            mne_sei  =$51a8                ;SEI
   1081 = 00000000000089A8                            mne_sep  =$89a8                ;SEP
   1082 = 0000000000001568                            mne_sta  =$1568                ;STA
   1083 = 0000000000008D68                            mne_stp  =$8d68                ;STP
   1084 = 000000000000CD68                            mne_stx  =$cd68                ;STX
   1085 = 000000000000D568                            mne_sty  =$d568                ;STY
   1086 = 000000000000DD68                            mne_stz  =$dd68                ;STZ
   1087 = 000000000000C8AA                            mne_tax  =$c8aa                ;TAX
   1088 = 000000000000D0AA                            mne_tay  =$d0aa                ;TAY
   1089 = 000000000000292A                            mne_tcd  =$292a                ;TCD
   1090 = 000000000000A12A                            mne_tcs  =$a12a                ;TCS
   1091 = 000000000000216A                            mne_tdc  =$216a                ;TDC
   1092 = 0000000000001CEA                            mne_trb  =$1cea                ;TRB
   1093 = 0000000000001D2A                            mne_tsb  =$1d2a                ;TSB
   1094 = 000000000000252A                            mne_tsc  =$252a                ;TSC
   1095 = 000000000000CD2A                            mne_tsx  =$cd2a                ;TSX
   1096 = 000000000000166A                            mne_txa  =$166a                ;TXA
   1097 = 000000000000A66A                            mne_txs  =$a66a                ;TXS
   1098 = 000000000000D66A                            mne_txy  =$d66a                ;TXY
   1099 = 00000000000016AA                            mne_tya  =$16aa                ;TYA
   1100 = 000000000000CEAA                            mne_tyx  =$ceaa                ;TYX
   1101 = 00000000000050B0                            mne_wai  =$50b0                ;WAI
   1102 = 0000000000007170                            mne_wdm  =$7170                ;WDM
   1103 = 00000000000010F2                            mne_xba  =$10f2                ;XBA
   1104 = 0000000000003132                            mne_xce  =$3132                ;XCE
                                        ;
                                        ;
                                        ;	encoded instruction mnemonic indices...
                                        ;
   1109 = 0000000000000010                            mne_adcx =16                   ;ADC
   1110 = 000000000000001D                            mne_andx =29                   ;AND
   1111 = 000000000000002C                            mne_aslx =44                   ;ASL
   1112 = 000000000000000F                            mne_bccx =15                   ;BCC
   1113 = 0000000000000041                            mne_bcsx =65                   ;BCS
   1114 = 000000000000003B                            mne_beqx =59                   ;BEQ
   1115 = 0000000000000046                            mne_bitx =70                   ;BIT
   1116 = 0000000000000024                            mne_bmix =36                   ;BMI
   1117 = 000000000000001F                            mne_bnex =31                   ;BNE
   1118 = 000000000000002A                            mne_bplx =42                   ;BPL
   1119 = 0000000000000005                            mne_brax =5                    ;BRA
   1120 = 0000000000000027                            mne_brkx =39                   ;BRK
   1121 = 000000000000002B                            mne_brlx =43                   ;BRL
   1122 = 0000000000000017                            mne_bvcx =23                   ;BVC
   1123 = 0000000000000044                            mne_bvsx =68                   ;BVS
   1124 = 0000000000000014                            mne_clcx =20                   ;CLC
   1125 = 000000000000001B                            mne_cldx =27                   ;CLD
   1126 = 0000000000000023                            mne_clix =35                   ;CLI
   1127 = 0000000000000047                            mne_clvx =71                   ;CLV
   1128 = 0000000000000035                            mne_cmpx =53                   ;CMP
   1129 = 0000000000000037                            mne_copx =55                   ;COP
   1130 = 000000000000004E                            mne_cpxx =78                   ;CPX
   1131 = 0000000000000058                            mne_cpyx =88                   ;CPY
   1132 = 0000000000000012                            mne_decx =18                   ;DEC
   1133 = 000000000000004A                            mne_dexx =74                   ;DEX
   1134 = 0000000000000054                            mne_deyx =84                   ;DEY
   1135 = 000000000000003D                            mne_eorx =61                   ;EOR
   1136 = 0000000000000015                            mne_incx =21                   ;INC
   1137 = 000000000000004D                            mne_inxx =77                   ;INX
   1138 = 0000000000000057                            mne_inyx =87                   ;INY
   1139 = 0000000000000028                            mne_jmlx =40                   ;JML
   1140 = 0000000000000036                            mne_jmpx =54                   ;JMP
   1141 = 000000000000002D                            mne_jslx =45                   ;JSL
   1142 = 000000000000003F                            mne_jsrx =63                   ;JSR
   1143 = 0000000000000001                            mne_ldax =1                    ;LDA
   1144 = 0000000000000049                            mne_ldxx =73                   ;LDX
   1145 = 0000000000000053                            mne_ldyx =83                   ;LDY
   1146 = 0000000000000040                            mne_lsrx =64                   ;LSR
   1147 = 0000000000000030                            mne_mvnx =48                   ;MVN
   1148 = 000000000000003A                            mne_mvpx =58                   ;MVP
   1149 = 0000000000000038                            mne_nopx =56                   ;NOP
   1150 = 0000000000000006                            mne_orax =6                    ;ORA
   1151 = 0000000000000002                            mne_peax =2                    ;PEA
   1152 = 0000000000000021                            mne_peix =33                   ;PEI
   1153 = 000000000000003C                            mne_perx =60                   ;PER
   1154 = 0000000000000003                            mne_phax =3                    ;PHA
   1155 = 000000000000000A                            mne_phbx =10                   ;PHB
   1156 = 000000000000001A                            mne_phdx =26                   ;PHD
   1157 = 0000000000000026                            mne_phkx =38                   ;PHK
   1158 = 0000000000000033                            mne_phpx =51                   ;PHP
   1159 = 000000000000004B                            mne_phxx =75                   ;PHX
   1160 = 0000000000000055                            mne_phyx =85                   ;PHY
   1161 = 0000000000000004                            mne_plax =4                    ;PLA
   1162 = 000000000000000B                            mne_plbx =11                   ;PLB
   1163 = 000000000000001C                            mne_pldx =28                   ;PLD
   1164 = 0000000000000034                            mne_plpx =52                   ;PLP
   1165 = 000000000000004C                            mne_plxx =76                   ;PLX
   1166 = 0000000000000056                            mne_plyx =86                   ;PLY
   1167 = 0000000000000031                            mne_repx =49                   ;REP
   1168 = 0000000000000029                            mne_rolx =41                   ;ROL
   1169 = 000000000000003E                            mne_rorx =62                   ;ROR
   1170 = 0000000000000025                            mne_rtix =37                   ;RTI
   1171 = 000000000000002E                            mne_rtlx =46                   ;RTL
   1172 = 0000000000000043                            mne_rtsx =67                   ;RTS
   1173 = 000000000000000E                            mne_sbcx =14                   ;SBC
   1174 = 0000000000000013                            mne_secx =19                   ;SEC
   1175 = 0000000000000019                            mne_sedx =25                   ;SED
   1176 = 0000000000000022                            mne_seix =34                   ;SEI
   1177 = 0000000000000032                            mne_sepx =50                   ;SEP
   1178 = 0000000000000007                            mne_stax =7                    ;STA
   1179 = 0000000000000039                            mne_stpx =57                   ;STP
   1180 = 0000000000000050                            mne_stxx =80                   ;STX
   1181 = 0000000000000059                            mne_styx =89                   ;STY
   1182 = 000000000000005B                            mne_stzx =91                   ;STZ
   1183 = 0000000000000048                            mne_taxx =72                   ;TAX
   1184 = 0000000000000052                            mne_tayx =82                   ;TAY
   1185 = 0000000000000018                            mne_tcdx =24                   ;TCD
   1186 = 0000000000000042                            mne_tcsx =66                   ;TCS
   1187 = 0000000000000011                            mne_tdcx =17                   ;TDC
   1188 = 000000000000000C                            mne_trbx =12                   ;TRB
   1189 = 000000000000000D                            mne_tsbx =13                   ;TSB
   1190 = 0000000000000016                            mne_tscx =22                   ;TSC
   1191 = 000000000000004F                            mne_tsxx =79                   ;TSX
   1192 = 0000000000000008                            mne_txax =8                    ;TXA
   1193 = 0000000000000045                            mne_txsx =69                   ;TXS
   1194 = 000000000000005A                            mne_txyx =90                   ;TXY
   1195 = 0000000000000009                            mne_tyax =9                    ;TYA
   1196 = 0000000000000051                            mne_tyxx =81                   ;TYX
   1197 = 0000000000000020                            mne_waix =32                   ;WAI
   1198 = 000000000000002F                            mne_wdmx =47                   ;WDM
   1199 = 0000000000000000                            mne_xbax =0                    ;XBA
   1200 = 000000000000001E                            mne_xcex =30                   ;XCE
                                        ;
                                        ;================================================================================
                                        ;
                                        ;MISCELLANEOUS CONSTANTS
                                        ;
   1206 = 0000000000000004                            halftab  =4                    ;1/2 tabulation spacing
   1207 = 3E                            memprfx  ='>'                  ;memory dump prefix
   1208 = 3A                            memsepch =':'                  ;memory dump separator
   1209 = 2E                            memsubch ='.'                  ;memory dump non-print char
   1210 = 0000000000000030                            srinit   =%00110000            ;SR initialization value
                                        ;
                                        ;================================================================================
                                        ;
                                        ;DIRECT PAGE STORAGE
                                        ;
   1216 = 00000080                      reg_csx  =zeropage			;CS
   1217 = 00000084                      reg_dsx  =reg_csx + 4		;DS
   1218 = 00000088                      reg_pcx  =reg_dsx + 4	    ;PC
   1219 = 0000008A                      reg_pbx  =reg_pcx + 2       ;PB
   1220 = 0000008B                      reg_ax   =reg_pbx + 1       ;.C
   1221 = 0000008F                      reg_xx   =reg_ax + 4        ;.X
   1222 = 00000093                      reg_yx   =reg_xx + 4        ;.Y
   1223 = 00000097                      reg_spx  =reg_yx + 4        ;SP
   1224 = 0000009B                      reg_srx  =reg_spx + 4       ;SR
   1225 = 0000009C                      reg_srxx =reg_srx + 1       ;SRX
   1226 = 0000009D                      reg_dbx  =reg_srxx + 1      ;DB
   1227 = 0000009E                      reg_dpx  =reg_dbx + 1       ;DP
                                        ;
                                        ;
                                        ;	general workspace...
                                        ;
   1232 = 000000A2                      addra    =reg_dpx+4            ;address #1
   1233 = 000000A6                      addrb    =addra+4              ;address #2
   1234 = 000000A9                      faca     =addrb+s_addr         ;primary accumulator
   1235 = 000000AD                      facax    =faca+s_pfac          ;extended primary accumulator
   1236 = 000000B1                      facb     =facax+s_pfac         ;secondary accumulator
   1237 = 000000B7                      facc     =facb+s_sfac          ;tertiary accumulator
   1238 = 000000BD                      operand  =facc+s_sfac          ;instruction operand
   1239 = 000000C0                      auxbufix =operand+s_oper       ;auxiliary buffer index
   1240 = 000000C1                      ibufidx  =auxbufix+s_byte      ;input buffer index
   1241 = 000000C2                      bitsdig  =ibufidx+s_byte       ;bits per numeral
   1242 = 000000C3                      numeral  =bitsdig+s_byte       ;numeral buffer
   1243 = 000000C4                      radix    =numeral+s_byte       ;radix index
   1244 = 000000C5                      admodidx =radix+s_byte         ;addressing mode index
   1245 = 000000C6                      charcnt  =admodidx+s_byte      ;character counter
   1246 = 000000C8                      instsize =charcnt+s_word       ;instruction size
   1247 = 000000CA                      mnepck   =instsize+s_word      ;encoded mnemonic
   1248 = 000000CC                      opcode   =mnepck+s_mnepck      ;current opcode
   1249 = 000000CD                      status   =opcode+s_byte        ;I/O status flag
   1250 = 000000CE                      xrtemp   =status+s_byte        ;temp .X storage
   1251 = 000000CF                      eopsize  =xrtemp+s_byte        ;entered operand size
   1252 = 000000D0                      flimflag =eopsize+s_byte       ;forced long immediate...
                                        ;
                                        ;	xx000000
                                        ;	||
                                        ;	|+—————————> 0: .X/.Y = 8 bits
                                        ;	|            1: .X/.Y = 18 bits
                                        ;	+——————————> 0: .A = 8 bits
                                        ;	             1: .A = 16 bits
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	During assembly, FLIMFLAG indicates the operand size used with an immed-
                                        ;	iate mode instruction, thus causing the following disassembly to display
                                        ;	the assembled  operand size.   During disassembly,  FLIMFLAG will mirror
                                        ;	the effect of the most recent REP or SEP instruction.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
   1268 = 000000D1                      iopsize  =flimflag+s_byte      ;operand size
   1269 = 000000D2                      range    =iopsize+s_byte       ;allowable radix range
   1270 = 000000D3                      vopsflag =range+s_byte         ;VOPS & ROPS mode bits
                                        ;
                                        ;
                                        ;	copy/fill workspace (overlaps some of the above)...
                                        ;
   1275 = 000000D4                      mcftwork =vopsflag+s_byte	;faca                 ;start of copy/fill code
   1276 = 000000D5                      mcftopc  =mcftwork+s_byte      ;instruction opcode
   1277 = 000000D6                      mcftbnk  =mcftopc+s_byte       ;banks
                                        ;
                                        ;================================================================================
                                        ;
                                        ;SUPERMON 816 JUMP TABLE
                                        ;
                                                 org	_origin_
                                        ;
                                           		 CPU	W65C816S
                                           		 MEM	16
                                           		 NDX	16
   1289 00C000 A9 D0 00                     		 LDA	#$D0
   1290 00C003 8D 00 70                     		 STA	$7000
                                           		 MEM	8
                                           		 NDX	8
                                        		 CPU	W65C02
   1294 C006 80 02                      JMON     bra mon               ;cold start entry
   1295 C008 80 4F                      JMONBRK  bra monbrk            ;software interrupt intercept
                                        ;
                                        ;================================================================================
                                        ;
                                        ;mon: SUPERMON 816 COLD START
                                        ;
   1301 C00A C2 20                      mon +         .byte $c2,$20
                                        
   1302 C00C AD 02 01                             lda vecbrki           ;BRK vector
   1303 C00F C9 59                    +            cmp #<monbrk
   1303 C011 C0                       +            .byte >monbrk
                                        ;pointing at monitor?
   1304 C012 D0 03                                bne .2            ;yes, ignore cold start
   1305 C014 4C 98 C0                             jmp	monreg			; got a branch out of range here when debugging code
                                        								; was included
   1307 C017                            .2
                                        ;
   1309 C017 8D 05 01                             sta vecbrkia          ;save vector for exit
   1310 C01A A9 AB                       		 LDA	#$AB
   1311 C01C 00                          		 .byte	$00
   1312 C01D 8D 00 70                    		 STA	$7000
   1313 C020 A9 59                    +            lda #<monbrk
   1313 C022 C0                       +            .byte >monbrk
                                        ;Supermon 816 intercepts...
   1314 C023 8D 02 01                             sta vecbrki           ;BRK handler
   1315 C026 E2 30                    +            .byte $e2,$30
                                                        ;8 bit registers
   1316 C028 A2 49                                ldx #vopsflag-reg_pbx
                                        ;
   1318 C02A 74 8A                      .0000010 stz reg_pbx,x         ;clear DP storage
   1319 C02C CA                                   dex
   1320 C02D 10 FB                                bpl .0000010
                                        ;
   1322 C02F A9 AC                       		 LDA	#$AC
   1323 C031 8D 00 70                    		 STA	$7000
   1324 C034 A9 30                                lda #srinit
   1325 C036 85 9B                                sta reg_srx           ;status register
   1326 C038 C2 20                    +            .byte $c2,$20
                                                         ;16 bit .A
   1327 C03A A9 FF                    +            lda #<hwstack
   1327 C03C 3F                       +            .byte >hwstack
                                        ;top of hardware stack
   1328 C03D 1B                       +            .byte $1b
                                                           ;set SP
   1329 C03E 7B                       +            .byte $7b
                                                           ;get & save...
   1330 C03F 85 9E                                sta reg_dpx           ;DP register
   1331 C041 A9 AD                       		 LDA	#$AD
   1332 C043 00                          		 .byte	$00
   1333 C044 8D 00 70                    		 STA	$7000
   1334 C047 A9 00                    +            lda #<0
   1334 C049 00                       +            .byte >0
                                        
   1335 C04A E2 20                    +            .byte $e2,$20
                                        
   1336 C04C 4B                       +            .byte $4b
                                        
   1337 C04D 68                                   pla                   ;capture PB &...
   1338 C04E 85 8A                                sta reg_pbx           ;set
   1339 C050 8B                       +            .byte $8b
                                        
   1340 C051 68                                   pla                   ;capture DB &...
   1341 C052 85 9D                                sta reg_dbx           ;set
   1342 C054 F4                       +            .byte $f4
   1342 C055 20 D0                    +            .word mm_entry
                                        ;"...ready..."
   1343 C057 80 22                                bra moncom
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monbrk: SOFTWARE INTERRUPT INTERCEPT
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	This is the entry point taken when a BRK instruction is executed.  It is
                                        ;	assumed that the BRK  handler has pushed the registers to the stack that
                                        ;	are not automatically pushed by the MPU in response to BRK.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
   1355 C059 58                         monbrk   cli                   ;reenable IRQs
   1356 C05A 7A                                   ply                   ;recover registers
   1357 C05B FA                                   plx
   1358 C05C 68                                   pla
   1359 C05D C2 30                    +            .byte $c2,$30
                                                         ;store 16 bit registers
   1360 C05F 85 8B                                sta reg_ax            ;.A
   1361 C061 86 8F                                stx reg_xx            ;.X
   1362 C063 84 93                                sty reg_yx            ;.Y
   1363 C065 E2 10                    +            .byte $e2,$10
                                                        ;8 bit index registers
   1364 C067 68                                   pla                   ;get DP &...
   1365 C068 85 9E                                sta reg_dpx           ;store
   1366 C06A FA                                   plx                   ;get DB &...
   1367 C06B 86 9D                                stx reg_dbx           ;store
   1368 C06D FA                                   plx                   ;get SR &...
   1369 C06E 86 9B                                stx reg_srx           ;store
   1370 C070 68                                   pla                   ;get PC &...
   1371 C071 85 88                                sta reg_pcx           ;store
   1372 C073 E2 20                    +            .byte $e2,$20
                                        
   1373 C075 68                                   pla                   ;get PB &...
   1374 C076 85 8A                                sta reg_pbx           ;store
   1375 C078 F4                       +            .byte $f4
   1375 C079 15 D0                    +            .word mm_brk
                                        ;"*BRK"
                                        ;
                                        ;================================================================================
                                        ;
                                        ;moncom: COMMON ENTRY POINT
                                        ;
                                        ;	——————————————————————————————————————
                                        ;	DO NOT directly call this entry point!
                                        ;	——————————————————————————————————————
                                        ;
   1385 C07B                            moncom   
   1386 C07B A9 AE                       		 LDA	#$AE
   1387 C07D 8D 00 70                    		 STA	$7000
   1388 C080 20 11 C8                    		 jsr sprint            ;print heading
   1389 C083 A9 AF                       		 LDA	#$AF
   1390 C085 8D 00 70                    		 STA	$7000
   1391 C088 C2 20                    +            .byte $c2,$20
                                        
   1392 C08A 3B                       +            .byte $3b
                                                           ;get SP &...
   1393 C08B 85 97                                sta reg_spx           ;store
   1394 C08D A9 B0                       		 LDA	#$B0
   1395 C08F 00                          		 .byte	$00
   1396 C090 8D 00 70                    		 STA	$7000
   1397 C093 C2 FF                    +            .byte $c2,%11111111
                                        ;clear SR &...
   1398 C095 E2 30                    +            .byte $e2,srinit
                                        ;set default state
   1399 C097 38                                   sec                   ;see next
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monreg: DISPLAY MPU REGISTERS
                                        ;
                                        ;	—————————
                                        ;	syntax: R
                                        ;	—————————
                                        ;
   1409 C098 B0 03                      monreg   bcs .0000010          ;okay to proceed
                                        ;
   1411 C09A 4C 7C C1                             jmp monerr            ;error if called with a parm
                                        ;
   1413 C09D F4                         .0000010 +         .byte $f4
   1413 C09E 4B D0                    +            .word mm_regs
                                        
   1414 C0A0 20 11 C8                             jsr sprint            ;display heading
                                        ;
                                        ;
                                        ;	display program bank & counter...
                                        ;
   1419 C0A3 C2 20                    +            .byte $c2,$20
                                        
   1420 C0A5 A5 82                       		 lda	reg_csx+2
   1421 C0A7 E2 20                    +            .byte $e2,$20
                                        
   1422 C0A9 20 D5 C7                    		 jsr	dpyhexw
   1423 C0AC C2 20                    +            .byte $c2,$20
                                        
   1424 C0AE A5 80                       		 lda	reg_csx
   1425 C0B0 E2 20                    +            .byte $e2,$20
                                        
   1426 C0B2 20 D5 C7                    		 jsr    dpyhexw
   1427 C0B5 E2 20                    +            .byte $e2,$20
                                        
   1428 C0B7 20 0C C8                             jsr printspc          ;inter-field space
   1429 C0BA A5 8A                                lda reg_pbx           ;PB
   1430 C0BC 20 E5 C7                             jsr dpyhex            ;display as hex ASCII
   1431 C0BF 20 0C C8                             jsr printspc          ;inter-field space
   1432 C0C2 C2 20                    +            .byte $c2,$20
                                        
   1433 C0C4 A5 88                                lda reg_pcx
   1434 C0C6 E2 20                    +            .byte $e2,$20
                                        
   1435 C0C8 20 D5 C7                             jsr dpyhexw           ;display PC
   1436 C0CB A2 02                                ldx #2
   1437 C0CD 20 EF C7                             jsr multspc           ;inter-field spacing
                                        ;
                                        ;
                                        ;	display SR in bitwise fashion...
                                        ;
   1442 C0D0 A5 9C                       		 lda reg_srxx
   1443 C0D2 4A                          		 lsr
   1444 C0D3 4A                          		 lsr
   1445 C0D4 69 30                       		 adc #'0'
   1446 C0D6 20 06 F4                    		 jsr putcha
   1447 C0D9 A5 9C                       		 lda reg_srxx
   1448 C0DB 4A                          		 lsr
   1449 C0DC 69 30                       		 adc #'0'
   1450 C0DE 20 06 F4                    		 jsr putcha
                                        
   1452 C0E1 A6 9B                                ldx reg_srx           ;SR
   1453 C0E3 A0 08                                ldy #s_bibyte         ;bits in a byte
                                        ;
   1455 C0E5 8A                         .0000020 txa                   ;remaining SR bits
   1456 C0E6 0A                                   asl                   ;grab one of them
   1457 C0E7 AA                                   tax                   ;save remainder
   1458 C0E8 A9 30                                lda #'0'              ;a clear bit but...
   1459 C0EA 69 00                                adc #0                ;adjust if set &...
   1460 C0EC 20 06 F4                             jsr putcha            ;print
   1461 C0EF 88                                   dey                   ;bit processed
   1462 C0F0 D0 F3                                bne .0000020          ;do another
                                        ;
                                        ;
                                        ;	display .C, .X, .Y, SP & DP...
                                        ;
   1467 C0F2 20 0C C8                   .0000030 jsr printspc          ;spacing
   1468 C0F5 C2 20                    +            .byte $c2,$20
                                        
   1469 C0F7 B9 8D 00                             lda reg_ax+2,y        ;get register value
   1470 C0FA E2 20                    +            .byte $e2,$20
                                        
   1471 C0FC 20 D5 C7                             jsr dpyhexw           ;convert & display
   1472 C0FF C2 20                    +            .byte $c2,$20
                                        
   1473 C101 B9 8B 00                             lda reg_ax,y          ;get register value
   1474 C104 E2 20                    +            .byte $e2,$20
                                        
   1475 C106 20 D5 C7                             jsr dpyhexw           ;convert & display
                                        ;         .rept s_word
   1477 C109 C8                                     iny
   1478 C10A C8                                     iny
                                        ;         .endr
                                        ;         .rept s_word
   1481 C10B C8                                     iny
   1482 C10C C8                                     iny
                                        ;         .endr
   1484 C10D C0 0F                                cpy #reg_spx-reg_ax+3
   1485 C10F 90 E1                                bcc .0000030          ;next
                                        ;
                                        ;
                                        ;	display DS DB...
                                        ;
   1490 C111 F4                       +            .byte $f4
   1490 C112 AB D0                    +            .word mm_regs2
                                        
   1491 C114 20 11 C8                    		 jsr sprint
   1492 C117 C2 20                    +            .byte $c2,$20
                                        
   1493 C119 A5 86                                lda reg_dsx+2         ;get DS &...
   1494 C11B E2 20                    +            .byte $e2,$20
                                        
   1495 C11D 20 D5 C7                             jsr dpyhexw           ;convert & display
   1496 C120 C2 20                    +            .byte $c2,$20
                                        
   1497 C122 A5 84                                lda reg_dsx           ;get DS &...
   1498 C124 E2 20                    +            .byte $e2,$20
                                        
   1499 C126 20 D5 C7                             jsr dpyhexw           ;convert & display
   1500 C129 20 0C C8                             jsr printspc          ;more spacing
   1501 C12C A5 9D                                lda reg_dbx           ;get DB &...
   1502 C12E 20 E5 C7                             jsr dpyhex            ;display it
   1503 C131 20 0C C8                             jsr printspc          ;more spacing
   1504 C134 C2 20                    +            .byte $c2,$20
                                        
   1505 C136 A5 9E                                lda reg_dpx           ;get DPR &...
   1506 C138 E2 20                    +            .byte $e2,$20
                                        
   1507 C13A 20 D5 C7                             jsr dpyhexw           ;convert & display
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monce: COMMAND EXECUTIVE
                                        ;	
   1513 C13D E2 20                      monce +         .byte $e2,$20
                                        
   1514 C13F A9 00                                lda #0                ;default buffer index
                                        ;
   1516 C141 E2 30                      moncea +         .byte $e2,$30
                                                        ;alternate entry point
   1517 C143 85 C1                                sta ibufidx           ;(re)set buffer index
   1518 C145 F4                       +            .byte $f4
   1518 C146 42 D0                    +            .word mm_prmpt
                                        
   1519 C148 20 11 C8                             jsr sprint            ;display input prompt
   1520 C14B 20 31 CC                             jsr input             ;await some input
                                        ;
   1522 C14E                            .0000010:
   1523 C14E 20 8F CC                    		jsr getcharc          ;read from buffer
   1524 C151 F0 EA                                beq monce             ;terminator, just loop
                                        ;
   1526 C153 C9 20                                cmp #a_blank
   1527 C155 F0 F7                                beq .0000010          ;strip leading blanks
                                        ;
   1529 C157 A2 0C                                ldx #n_mpctab-1       ;number of primary commands
                                        ;
   1531 C159 DD AC CC                   .0000020 cmp mpctab,x          ;search primary command list
   1532 C15C D0 0E                                bne .0000030
                                        ;
   1534 C15E 8A                                   txa                   ;get index
   1535 C15F 0A                                   asl                   ;double for offset
   1536 C160 AA                                   tax
   1537 C161 C2 20                    +            .byte $c2,$20
                                        
   1538 C163 BD B9 CC                             lda mpcextab,x        ;command address -1
   1539 C166 48                                   pha                   ;prime the stack
   1540 C167 E2 20                    +            .byte $e2,$20
                                        
   1541 C169 4C D5 CA                             jmp getparm           ;evaluate parm & execute command
                                        ;
   1543 C16C CA                         .0000030 dex
   1544 C16D 10 EA                                bpl .0000020          ;continue searching primary commands
                                        ;
   1546 C16F A2 03                                ldx #n_radix-1        ;number of radices
                                        ;
   1548 C171 DD E7 CC                   .0000040 cmp radxtab,x         ;search conversion command list
   1549 C174 D0 03                                bne .0000050
                                        ;
   1551 C176 4C C4 C5                             jmp monenv            ;convert & display parameter
                                        ;
   1553 C179 CA                         .0000050 dex
   1554 C17A 10 F5                                bpl .0000040
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monerr: COMMON ERROR HANDLER
                                        ;
   1560 C17C E2 30                      monerr +         .byte $e2,$30
                                                        ;8 bit registers
                                        ;
   1562 C17E 20 BC C7                   monerraa jsr dpyerr            ;indicate an error &...
   1563 C181 80 BA                                bra monce             ;return to input loop
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monasc: ASSEMBLE CODE
                                        ;
                                        ;	———————————————————————————————————————————————————————————————————————
                                        ;	syntax: A <addr> <mnemonic> [<argument>]
                                        ;
                                        ;	After a line of code has been successfully assembled it will be disass-
                                        ;	embled & displayed,  & the monitor will prompt with the next address to
                                        ;	which code may be assembled.
                                        ;	———————————————————————————————————————————————————————————————————————
                                        ;
   1577 C183 90 03                      monasc   bcc .0000020          ;assembly address entered
                                        ;
   1579 C185 4C 7C C1                   .0000010 jmp monerr            ;terminate w/error
                                        ;
                                        ;
                                        ;	evaluate assembly address...
                                        ;
   1584 C188 20 C1 CA                   .0000020 jsr facasize          ;check address...
   1585 C18B C9 04                                cmp #s_dword          ;range
   1586 C18D B0 F6                                bcs .0000010          ;out of range — error
                                        ;
   1588 C18F 20 A3 CA                             jsr facaddra          ;store assembly address
                                        ;
                                        ;
                                        ;	initialize workspace...
                                        ;
   1593 C192 A2 1F                                ldx #s_auxbuf-s_byte
                                        ;
   1595 C194 9E 51 02                   .0000030 stz auxbuf,x          ;clear addressing mode buffer
   1596 C197 CA                                   dex
   1597 C198 D0 FA                                bne .0000030
                                        ;
   1599 C19A A9 20                                lda #a_blank
   1600 C19C 8D 51 02                             sta auxbuf            ;preamble placeholder
   1601 C19F 20 10 CA                             jsr clroper           ;clear operand
   1602 C1A2 64 C0                                stz auxbufix          ;reset addressing mode index
   1603 C1A4 64 D0                                stz flimflag          ;clear forced long immediate
   1604 C1A6 64 CA                                stz mnepck            ;clear encoded...
   1605 C1A8 64 CB                                stz mnepck+s_byte     ;mnemonic workspace
   1606 C1AA 64 D3                                stz vopsflag          ;clear 8/16 or relative flag
                                        ;
                                        ;
                                        ;	encode mnemonic...
                                        ;
   1611 C1AC A0 03                                ldy #s_mnemon         ;expected mnemonic size
                                        ;
   1613 C1AE 20 22 CC                   .0000040 jsr getcharw          ;get from buffer wo/whitespace
   1614 C1B1 D0 0A                                bne .0000060          ;gotten
                                        ;
   1616 C1B3 C0 03                                cpy #s_mnemon         ;any input at all?
   1617 C1B5 90 03                                bcc .0000050          ;yes
                                        ;
   1619 C1B7 4C 3D C1                             jmp monce             ;no, abort further assembly
                                        ;
   1621 C1BA 4C 5A C3                   .0000050 jmp monasc10          ;incomplete mnemonic — error
                                        ;
   1623 C1BD 38                         .0000060 sec
   1624 C1BE E9 3F                                sbc #a_mnecvt         ;ASCII to binary factor
   1625 C1C0 A2 05                                ldx #n_shfenc         ;shifts required to encode
                                        ;
   1627 C1C2 4A                         .0000070 lsr                   ;shift out a bit...
   1628 C1C3 66 CB                                ror mnepck+s_byte     ;into...
   1629 C1C5 66 CA                                ror mnepck            ;encoded mnemonic
   1630 C1C7 CA                                   dex
   1631 C1C8 D0 F8                                bne .0000070          ;next bit
                                        ;
   1633 C1CA 88                                   dey
   1634 C1CB D0 E1                                bne .0000040          ;get next char
                                        ;
                                        ;
                                        ;	test for copy instruction...
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	The MVN & MVP instructions accept two operands & hence have an irregular
                                        ;	syntax.  Therefore, special handling is necessary to assemble either of
                                        ;	these instructions.
                                        ;
                                        ;	The official WDC syntax has the programmer entering a pair of 24 bit ad-
                                        ;	dresses as operands, with the assembler isolating bits 16-23 to	use as
                                        ;	operands.  This formality has been dispensed with in this monitor & the
                                        ;	operands are expected to be 8 bit bank values.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
   1649 C1CD C2 20                    +            .byte $c2,$20
                                                         ;16 bit load
   1650 C1CF A5 CA                                lda mnepck            ;packed menmonic
   1651 C1D1 A2 54                                ldx #opc_mvn          ;MVN opcode
   1652 C1D3 C9 DC                    +            cmp #<mne_mvn
   1652 C1D5 7D                       +            .byte >mne_mvn
                                        ;is it MVN?
   1653 C1D6 F0 07                                beq monasc01          ;yes
                                        ;
   1655 C1D8 A2 44                                ldx #opc_mvp          ;MVP opcode
   1656 C1DA C9 DC                    +            cmp #<mne_mvp
   1656 C1DC 8D                       +            .byte >mne_mvp
                                        ;is it MVP?
   1657 C1DD D0 30                                bne monasc02          ;no
                                        ;
                                        ;
                                        ;	assemble copy instruction...
                                        ;
   1662 C1DF 86 CC                      monasc01 stx opcode            ;store relevant opcode
   1663 C1E1 E2 20                    +            .byte $e2,$20
                                        
   1664 C1E3 20 31 CB                             jsr instdata          ;get instruction data
   1665 C1E6 86 CF                                stx eopsize           ;effective operand size
   1666 C1E8 E8                                   inx
   1667 C1E9 86 C8                                stx instsize          ;instruction size
   1668 C1EB A2 01                                ldx #s_oper-s_word    ;operand index
   1669 C1ED 86 CE                                stx xrtemp            ;set it
                                        ;
   1671 C1EF 20 2A C8                   .0000010 jsr ascbin            ;evaluate bank number
   1672 C1F2 B0 50                                bcs monasc04          ;conversion error
                                        ;
   1674 C1F4 F0 4E                                beq monasc04          ;nothing returned — error
                                        ;
   1676 C1F6 20 C1 CA                             jsr facasize          ;bank must be...
   1677 C1F9 C9 02                                cmp #s_word           ;8 bits
   1678 C1FB B0 47                                bcs monasc04          ;it isn't — error
                                        ;
   1680 C1FD A5 A9                                lda faca              ;bank
   1681 C1FF A6 CE                                ldx xrtemp            ;operand index
   1682 C201 95 BD                                sta operand,x         ;store
   1683 C203 C6 CE                                dec xrtemp            ;index=index-1
   1684 C205 10 E8                                bpl .0000010          ;get destination bank
                                        ;
   1686 C207 20 C2 CB                             jsr getcharr          ;should be no more input
   1687 C20A D0 38                                bne monasc04          ;there is — error
                                        ;
   1689 C20C 4C 0A C3                             jmp monasc08          ;finish MVN/MVP assembly 
                                        ;
                                        ;
                                        ;	continue with normal assembly...
                                        ;
   1694 C20F E2 20                      monasc02 +         .byte $e2,$20
                                                        ;back to 8 bits
                                        ;
   1696 C211 20 22 CC                   monasc03 jsr getcharw          ;get next char
   1697 C214 F0 3D                                beq monasc06          ;EOI, no argument
                                        ;
   1699 C216 C9 21                                cmp #amp_flim
   1700 C218 D0 0A                                bne .0000010          ;no forced long immediate
                                        ;
   1702 C21A A5 D0                                lda flimflag          ;FLIM already set?
   1703 C21C D0 26                                bne monasc04          ;yes — error
                                        ;
   1705 C21E A9 C0                                lda #flimmask
   1706 C220 85 D0                                sta flimflag          ;set flag &...
   1707 C222 80 ED                                bra monasc03          ;get next char
                                        ;
   1709 C224 C9 23                      .0000010 cmp #amp_imm          ;immediate mode?
   1710 C226 F0 08                                beq .0000020          ;yes
                                        ;
   1712 C228 C9 28                                cmp #amp_ind          ;indirect mode?
   1713 C22A F0 04                                beq .0000020          ;yes
                                        ;
   1715 C22C C9 5B                                cmp #amp_indl         ;indirect long mode?
   1716 C22E D0 07                                bne .0000030          ;no
                                        ;
   1718 C230 8D 51 02                   .0000020 sta auxbuf            ;set addressing mode preamble
   1719 C233 E6 C0                                inc auxbufix          ;bump aux buffer index &...
   1720 C235 80 02                                bra .0000040          ;evaluate operand
                                        ;
   1722 C237 C6 C1                      .0000030 dec ibufidx           ;position back to char
                                        ;
   1724 C239 20 2A C8                   .0000040 jsr ascbin            ;evaluate operand
   1725 C23C D0 09                                bne monasc05          ;evaluated
                                        ;
   1727 C23E B0 04                                bcs monasc04          ;conversion error
                                        ;
   1729 C240 A5 C0                                lda auxbufix          ;no operand...any preamble?
   1730 C242 F0 0F                                beq monasc06          ;no, syntax is okay so far
                                        ;
   1732 C244 4C 5A C3                   monasc04 jmp monasc10          ;abort w/error
                                        ;
   1734 C247 20 C1 CA                   monasc05 jsr facasize          ;size operand
   1735 C24A C9 04                                cmp #s_dword          ;max is 24 bits
   1736 C24C B0 F6                                bcs monasc04          ;too big
                                        ;
   1738 C24E 85 CF                                sta eopsize           ;save operand size
   1739 C250 20 B7 CA                             jsr facaoper          ;store operand
                                        ;
   1741 C253 C6 C1                      monasc06 dec ibufidx           ;back to last char
   1742 C255 A6 C0                                ldx auxbufix          ;mode buffer index
   1743 C257 D0 01                                bne .0000010          ;preamble in buffer
                                        ;
   1745 C259 E8                                   inx                   ;step past preamble position
                                        ;
   1747 C25A 20 8F CC                   .0000010 jsr getcharc          ;get a char w/forced UC
   1748 C25D F0 0A                                beq .0000030          ;EOI
                                        ;
   1750 C25F E0 20                                cpx #s_auxbuf         ;mode buffer full?
   1751 C261 B0 E1                                bcs monasc04          ;yes, too much input
                                        ;
   1753 C263 9D 51 02                   .0000020 sta auxbuf,x          ;store for comparison
   1754 C266 E8                                   inx
   1755 C267 D0 F1                                bne .0000010
                                        ;
                                        ;
                                        ;	evaluate mnemonic...
                                        ;
   1760 C269 A2 5B                      .0000030 ldx #n_mnemon-1       ;starting mnemonic index
                                        ;
   1762 C26B 8A                         monasc07 txa                   ;convert index...
   1763 C26C 0A                                   asl                   ;to offset
   1764 C26D A8                                   tay                   ;now mnemonic table index
   1765 C26E C2 20                    +            .byte $c2,$20
                                                         ;16 bit compare
   1766 C270 B9 F4 CC                             lda mnetab,y          ;get mnemonic from table
   1767 C273 C5 CA                                cmp mnepck            ;compare to entered mnemonic
   1768 C275 E2 20                    +            .byte $e2,$20
                                                        ;back to 8 bits
   1769 C277 F0 05                                beq .0000020          ;match
                                        ;
   1771 C279 CA                         .0000010 dex                   ;try next mnemonic
   1772 C27A 30 C8                                bmi monasc04          ;unknown mnemonic — error
                                        ;
   1774 C27C 80 ED                                bra monasc07          ;keep going
                                        ;
   1776 C27E 86 CA                      .0000020 stx mnepck            ;save mnemonic index
   1777 C280 8A                                   txa
   1778 C281 A2 00                                ldx #0                ;trial opcode
                                        ;
   1780 C283 DD AC CD                   .0000030 cmp mnetabix,x        ;search index table...
   1781 C286 F0 05                                beq .0000050          ;for a match
                                        ;
   1783 C288 E8                         .0000040 inx                   ;keep going until we...
   1784 C289 D0 F8                                bne .0000030          ;search entire table
                                        ;
   1786 C28B 80 B7                                bra monasc04          ;this shouldn't happen!
                                        ;
                                        ;	—————————————————————————————————————————————————————————————————————
                                        ;	If the mnemonic index table search fails then there is a coding error
                                        ;	somewhere, as every entry in the mnemonic table is supposed to have a
                                        ;	matching cardinal index.
                                        ;	—————————————————————————————————————————————————————————————————————
                                        ;
                                        ;
                                        ;	evaluate addressing mode...
                                        ;
   1797 C28D 86 CC                      .0000050 stx opcode            ;save trial opcode
   1798 C28F 20 31 CB                             jsr instdata          ;get related instruction data
   1799 C292 85 D3                                sta vopsflag          ;save 8/16 or relative flag
   1800 C294 86 D1                                stx iopsize           ;operand size
   1801 C296 E8                                   inx
   1802 C297 86 C8                                stx instsize          ;instruction size
   1803 C299 A6 CC                                ldx opcode            ;recover trial opcode
   1804 C29B 98                                   tya                   ;addressing mode
   1805 C29C 0A                                   asl                   ;create table index
   1806 C29D A8                                   tay
   1807 C29E C2 20                    +            .byte $c2,$20
                                        
   1808 C2A0 B9 B0 CF                             lda ms_lutab,y        ;mode lookup table
   1809 C2A3 85 A6                                sta addrb             ;set pointer
   1810 C2A5 E2 20                    +            .byte $e2,$20
                                        
   1811 C2A7 A0 00                                ldy #0
                                        ;
   1813 C2A9 B1 A6                      .0000060 lda (addrb),y         ;table addressing mode
   1814 C2AB D9 51 02                             cmp auxbuf,y          ;entered addressing mode
   1815 C2AE F0 04                                beq .0000080          ;okay so far
                                        ;
   1817 C2B0 A5 CA                      .0000070 lda mnepck            ;reload mnemonic index        
   1818 C2B2 80 D4                                bra .0000040          ;wrong opcode for addresing mode
                                        ;
   1820 C2B4 09 00                      .0000080 ora #0                ;last char the terminator?
   1821 C2B6 F0 03                                beq .0000090          ;yes, evaluate operand
                                        ;
   1823 C2B8 C8                                   iny
   1824 C2B9 80 EE                                bra .0000060          ;keep testing
                                        ;
                                        ;
                                        ;	evaluate operand...
                                        ;
   1829 C2BB A5 CF                      .0000090 lda eopsize           ;entered operand size
   1830 C2BD D0 06                                bne .0000100          ;non-zero
                                        ;
   1832 C2BF 05 D1                                ora iopsize           ;instruction operand size
   1833 C2C1 D0 ED                                bne .0000070          ;wrong opcode — keep trying
                                        ;
   1835 C2C3 80 45                                bra monasc08          ;assemble instruction
                                        ;
   1837 C2C5 24 D3                      .0000100 bit vopsflag          ;is this a branch?
   1838 C2C7 70 3A                                bvs .0000160          ;yes, evaluate
                                        ;
   1840 C2C9 A5 D1                                lda iopsize           ;instruction operand size
   1841 C2CB 24 D3                                bit vopsflag          ;variable size operand allowed?
   1842 C2CD 30 15                                bmi .0000130          ;yes
                                        ;
   1844 C2CF 24 D0                                bit flimflag          ;was forced immediate set?
   1845 C2D1 10 03                                bpl .0000110          ;no
                                        ;         
   1847 C2D3 4C 5A C3                             jmp monasc10          ;yes — error
                                        ;
   1849 C2D6 C5 CF                      .0000110 cmp eopsize           ;entered operand size
   1850 C2D8 90 D6                                bcc .0000070          ;operand too big
                                        ;
   1852 C2DA 85 CF                                sta eopsize           ;new operand size
   1853 C2DC 80 2C                                bra monasc08          ;assemble, otherwise...
                                        ;
   1855 C2DE C5 CF                      .0000120 cmp eopsize           ;exact size match required
   1856 C2E0 D0 CE                                bne .0000070          ;mismatch — wrong opcode
                                        ;
   1858 C2E2 80 26                                bra monasc08          ;assemble
                                        ;
                                        ;
                                        ;	process variable size immediate mode operand...
                                        ;
   1863 C2E4 A6 CF                      .0000130 ldx eopsize           ;entered operand size
   1864 C2E6 E0 03                                cpx #s_xword          ;check size
   1865 C2E8 B0 70                                bcs monasc10          ;too big — error
                                        ;
   1867 C2EA 24 D0                                bit flimflag          ;forced long immediate?
   1868 C2EC 10 06                                bpl .0000140          ;no
                                        ;
   1870 C2EE A2 02                                ldx #s_word           ;promote operand size to...
   1871 C2F0 86 CF                                stx eopsize           ;16 bits
   1872 C2F2 80 08                                bra .0000150
                                        ;
   1874 C2F4 E0 02                      .0000140 cpx #s_word           ;16 bits?
   1875 C2F6 D0 04                                bne .0000150          ;no
                                        ;
   1877 C2F8 A0 C0                                ldy #flimmask         ;yes so force long...
   1878 C2FA 84 D0                                sty flimflag          ;immediate disassembly
                                        ;
   1880 C2FC 1A                         .0000150 ina                   ;new instruction operand size
   1881 C2FD C5 CF                                cmp eopsize           ;compare against operand size
   1882 C2FF 90 AF                                bcc .0000070          ;mismatch — can't assemble
                                        ;
   1884 C301 80 07                                bra monasc08          ;okay, assemble
                                        ;
                                        ;
                                        ;	process relative branch...
                                        ;
   1889 C303 20 7D CB                   .0000160 jsr targoff           ;compute branch offset
   1890 C306 B0 52                                bcs monasc10          ;branch out of range
                                        ;
   1892 C308 85 CF                                sta eopsize           ;effective operand size
                                        ;
                                        ;
                                        ;	assemble instruction...
                                        ;
   1897 C30A A5 CC                      monasc08 lda opcode            ;opcode
   1898 C30C 87 A2                    +            .byte $87,addra
                                        ;store at assembly address
   1899 C30E A6 CF                                ldx eopsize           ;any operand to process?
   1900 C310 F0 09                                beq .0000020          ;no
                                        ;
   1902 C312 9B                       +            .byte $9b
                                                           ;also storage offset
                                        ;
   1904 C313 CA                         .0000010 dex
   1905 C314 B5 BD                                lda operand,x         ;get operand byte &...
   1906 C316 97 A2                    +            .byte $97,addra
                                        ;poke into memory
   1907 C318 88                                   dey
   1908 C319 D0 F8                                bne .0000010          ;next
                                        ;
   1910 C31B A9 0D                      .0000020 lda #a_cr
   1911 C31D 20 06 F4                             jsr putcha            ;return to left margin
   1912 C320 A9 41                                lda #asmprfx          ;assembly prefix
   1913 C322 20 65 C6                             jsr dpycodaa          ;disassemble & display
                                        ;
                                        ;
                                        ;	prompt for next instruction...
                                        ;
   1918 C325 A9 20                      monasc09 lda #a_blank
   1919 C327 A2 08                                ldx #ascprmct-1
                                        ;
   1921 C329 9D 00 02                   .0000010 sta ibuffer,x         ;prepare buffer for...
   1922 C32C CA                                   dex                   ;next instruction
   1923 C32D 10 FA                                bpl .0000010
                                        ;
   1925 C32F A9 41                                lda #asmprfx          ;assemble code...
   1926 C331 8D 00 02                             sta ibuffer           ;prompt prefix
   1927 C334 A5 A4                                lda addra+s_word      ;next instruction address bank
   1928 C336 20 7C C9                             jsr binhex            ;convert to ASCII
   1929 C339 8D 02 02                             sta ibuffer+apadrbkh  ;store MSN in buffer
   1930 C33C 8E 03 02                             stx ibuffer+apadrbkl  ;store LSN in buffer
   1931 C33F A5 A3                                lda addra+s_byte      ;next instruction address MSB
   1932 C341 20 7C C9                             jsr binhex
   1933 C344 8D 04 02                             sta ibuffer+apadrmbh
   1934 C347 8E 05 02                             stx ibuffer+apadrmbl
   1935 C34A A5 A2                                lda addra             ;next instruction address LSB
   1936 C34C 20 7C C9                             jsr binhex
   1937 C34F 8D 06 02                             sta ibuffer+apadrlbh
   1938 C352 8E 07 02                             stx ibuffer+apadrlbl
   1939 C355 A9 09                                lda #ascprmct         ;effective input count
   1940 C357 4C 41 C1                             jmp moncea            ;reenter input loop
                                        ;
                                        ;
                                        ;	process assembly error...
                                        ;
   1945 C35A 20 BC C7                   monasc10 jsr dpyerr            ;indicate error &...
   1946 C35D 80 C6                                bra monasc09          ;prompt w/same assembly address
                                        ;
                                        ;================================================================================
                                        ;
                                        ;mondsc: DISASSEMBLE CODE
                                        ;
                                        ;	—————————————————————————————
                                        ;	syntax: D [<addr1> [<addr2>]]
                                        ;	—————————————————————————————
                                        ;
   1956 C35F B0 11                      mondsc   bcs .0000010          ;no parameters
                                        ;
   1958 C361 64 D0                                stz flimflag          ;reset to 8 bit mode
   1959 C363 20 C1 CA                             jsr facasize          ;check starting...
   1960 C366 C9 04                                cmp #s_dword          ;address
   1961 C368 B0 46                                bcs .0000050          ;out of range — error
                                        ;
   1963 C36A 20 A3 CA                             jsr facaddra          ;copy starting address
   1964 C36D 20 D5 CA                             jsr getparm           ;get ending address
   1965 C370 90 17                                bcc .0000020          ;gotten
                                        ;
   1967 C372 20 8F C9                   .0000010 jsr clrfaca           ;clear accumulator
   1968 C375 C2 20                    +            .byte $c2,$20
                                        
   1969 C377 18                                   clc
   1970 C378 A5 A2                                lda addra             ;starting address
   1971 C37A 69 15                    +            adc #<n_dbytes
   1971 C37C 00                       +            .byte >n_dbytes
                                        ;default bytes
   1972 C37D 85 A9                                sta faca              ;effective ending address
   1973 C37F E2 20                    +            .byte $e2,$20
                                        
   1974 C381 A5 A4                                lda addra+s_word      ;starting bank
   1975 C383 69 00                                adc #0
   1976 C385 85 AB                                sta faca+s_word       ;effective ending bank
   1977 C387 B0 27                                bcs .0000050          ;end address > $FFFFFF
                                        ;
   1979 C389 20 C1 CA                   .0000020 jsr facasize          ;check ending...
   1980 C38C C9 04                                cmp #s_dword          ;address
   1981 C38E B0 20                                bcs .0000050          ;out of range — error
                                        ;
   1983 C390 20 AD CA                             jsr facaddrb          ;set ending address
   1984 C393 20 D5 CA                             jsr getparm           ;check for excess input
   1985 C396 90 18                                bcc .0000050          ;present — error
                                        ;
   1987 C398 20 FB C9                             jsr calccnt           ;calculate bytes
   1988 C39B 90 13                                bcc .0000050          ;end < start
                                        ;
   1990 C39D 20 A1 CC                   .0000030 jsr teststop          ;test for display stop
   1991 C3A0 B0 0B                                bcs .0000040          ;stopped
                                        ;
   1993 C3A2 20 FC C7                             jsr newline           ;next line
   1994 C3A5 20 63 C6                             jsr dpycod            ;disassemble & display
   1995 C3A8 20 59 CA                             jsr decdcnt           ;decrement byte count
   1996 C3AB 90 F0                                bcc .0000030          ;not done
                                        ;
   1998 C3AD 4C 3D C1                   .0000040 jmp monce             ;back to main loop
                                        ;
   2000 C3B0 4C 7C C1                   .0000050 jmp monerr            ;address range error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monjmp: EXECUTE CODE
                                        ;
                                        ;	—————————————————————————————————————————————————————————————
                                        ;	syntax: G [<addr>]
                                        ;
                                        ;	If no address is specified, the current values in the PB & PC
                                        ;	shadow registers are used.
                                        ;	—————————————————————————————————————————————————————————————
                                        ;
   2013 C3B3 20 66 CB                   monjmp   jsr setxaddr          ;set execution address
   2014 C3B6 B0 29                                bcs monjmpab          ;out of range — error
                                        ;
   2016 C3B8 20 D5 CA                             jsr getparm           ;check for excess input
   2017 C3BB 90 24                                bcc monjmpab          ;too much input — error
                                        ;
   2019 C3BD C2 20                    +            .byte $c2,$20
                                                         ;16 bit .A
   2020 C3BF A5 97                                lda reg_spx
   2021 C3C1 1B                       +            .byte $1b
                                                           ;restore SP
                                        ;
   2023 C3C2 E2 20                      monjmpaa +         .byte $e2,$20
                                        
   2024 C3C4 A5 8A                                lda reg_pbx
   2025 C3C6 48                                   pha                   ;restore PB
   2026 C3C7 C2 20                    +            .byte $c2,$20
                                        
   2027 C3C9 A5 88                                lda reg_pcx
   2028 C3CB 48                                   pha                   ;restore PC
   2029 C3CC E2 20                    +            .byte $e2,$20
                                        
   2030 C3CE A5 9B                                lda reg_srx
   2031 C3D0 48                                   pha                   ;restore SR
   2032 C3D1 A5 9D                                lda reg_dbx
   2033 C3D3 48                                   pha
   2034 C3D4 AB                       +            .byte $ab
                                                           ;restore DB
   2035 C3D5 C2 30                    +            .byte $c2,$30
                                        
   2036 C3D7 A5 9E                                lda reg_dpx
   2037 C3D9 5B                       +            .byte $5b
                                                           ;restore DP
   2038 C3DA A5 8B                                lda reg_ax            ;restore .C
   2039 C3DC A6 8F                                ldx reg_xx            ;restore .X
   2040 C3DE A4 93                                ldy reg_yx            ;restore .Y
   2041 C3E0 40                                   rti                   ;execute code
                                        ;
   2043 C3E1 4C 7C C1                   monjmpab jmp monerr            ;error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monjsr: EXECUTE CODE AS SUBROUTINE
                                        ;
                                        ;	————————————————————————————————————————————————————————————
                                        ;	syntax: J [<addr>]
                                        ;
                                        ;	If no address is specified the current values in the PB & PC
                                        ;	shadow registers are used.   An RTS at the end of the called
                                        ;	subroutine will return control to the monitor  provided  the
                                        ;	stack remains in balance.
                                        ;	————————————————————————————————————————————————————————————
                                        ;
   2058 C3E4 20 66 CB                   monjsr   jsr setxaddr          ;set execution address
   2059 C3E7 B0 F8                                bcs monjmpab          ;out of range — error
                                        ;
   2061 C3E9 20 D5 CA                             jsr getparm           ;check for excess input
   2062 C3EC 90 F3                                bcc monjmpab          ;too much input — error
                                        ;
   2064 C3EE C2 20                    +            .byte $c2,$20
                                        
   2065 C3F0 A5 97                                lda reg_spx
   2066 C3F2 1B                       +            .byte $1b
                                                           ;restore SP &...
   2067 C3F3 20 C2 C3                             jsr monjmpaa          ;call subroutine
   2068 C3F6 08                                   php                   ;push SR
   2069 C3F7 C2 30                    +            .byte $c2,$30
                                        
   2070 C3F9 85 8B                                sta reg_ax            ;save...
   2071 C3FB 86 8F                                stx reg_xx            ;register...
   2072 C3FD 84 93                                sty reg_yx            ;returns
   2073 C3FF E2 10                    +            .byte $e2,$10
                                                        ;8 bit .X & .Y
   2074 C401 FA                                   plx                   ;get & save...
   2075 C402 86 9B                                stx reg_srx           ;return SR
   2076 C404 3B                       +            .byte $3b
                                                           ;get & save...
   2077 C405 85 97                                sta reg_spx           ;return SP
   2078 C407 7B                       +            .byte $7b
                                                           ;get & save...
   2079 C408 85 9E                                sta reg_dpx           ;DP pointer
   2080 C40A E2 20                    +            .byte $e2,$20
                                                        ;8 bit .A
   2081 C40C 4B                       +            .byte $4b
                                                           ;get &...
   2082 C40D 68                                   pla                   ;save...
   2083 C40E 85 8A                                sta reg_pbx           ;return PB
   2084 C410 8B                       +            .byte $8b
                                                           ;get &...
   2085 C411 68                                   pla                   ;save...
   2086 C412 85 9D                                sta reg_dbx           ;return DB
   2087 C414 F4                       +            .byte $f4
   2087 C415 C3 D0                    +            .word mm_rts
                                        ;"*RET"
   2088 C417 4C 7B C0                             jmp moncom            ;return to monitor
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monchm: CHANGE and/or DUMP MEMORY
                                        ;
                                        ;	————————————————————————————————————————————
                                        ;	syntax: > [<addr> <operand> [<operand>]...]
                                        ;
                                        ;	> <addr> without operands will dump 16 bytes
                                        ;	of memory, starting at <addr>.
                                        ;	————————————————————————————————————————————
                                        ;
   2101 C41A B0 23                      monchm   bcs .0000030          ;no address given — quit
                                        ;
   2103 C41C 20 C1 CA                             jsr facasize          ;size address
   2104 C41F C9 04                                cmp #s_dword
   2105 C421 B0 1F                                bcs .0000040          ;address out of range — error
                                        ;
   2107 C423 20 A3 CA                             jsr facaddra          ;set starting address
   2108 C426 20 D6 CB                             jsr getpat            ;evaluate change pattern
   2109 C429 90 04                                bcc .0000010          ;entered
                                        ;
   2111 C42B 10 0C                                bpl .0000020          ;not entered
                                        ;
   2113 C42D 80 13                                bra .0000040          ;evaluation error
                                        ;
   2115 C42F 88                         .0000010 dey                   ;next byte
   2116 C430 30 07                                bmi .0000020          ;done
                                        ;
   2118 C432 B9 51 02                             lda auxbuf,y          ;write pattern...
   2119 C435 97 A2                    +            .byte $97,addra
                                        ;to memory
   2120 C437 80 F6                                bra .0000010          ;next
                                        ;
   2122 C439 20 FC C7                   .0000020 jsr newline           ;next line
   2123 C43C 20 79 C7                             jsr dpymem            ;regurgitate changes
                                        ;
   2125 C43F 4C 3D C1                   .0000030 jmp monce             ;back to command loop
                                        ;
   2127 C442 4C 7C C1                   .0000040 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;moncmp: COMPARE MEMORY
                                        ;
                                        ;	—————————————————————————————
                                        ;	syntax: C <start> <end> <ref>
                                        ;	—————————————————————————————
                                        ;
   2137 C445 B0 26                      moncmp   bcs .0000030          ;start not given — quit
                                        ;
   2139 C447 20 7D CA                             jsr enddest           ;get end & reference addresses
   2140 C44A B0 24                                bcs .0000040          ;range or other error
                                        ;
   2142 C44C 64 CE                                stz xrtemp            ;column counter
                                        ;
   2144 C44E 20 A1 CC                   .0000010 jsr teststop          ;check for stop
   2145 C451 B0 1A                                bcs .0000030          ;abort
                                        ;
   2147 C453 A7 A2                    +            .byte $a7,addra
                                        ;get from reference location
   2148 C455 C7 BD                    +            .byte $c7,operand
                                        ;test against compare location
   2149 C457 F0 03                                beq .0000020          ;match, don't display address
                                        ;
   2151 C459 20 4B C6                             jsr dpycaddr          ;display current location
                                        ;
   2153 C45C 20 FD CA                   .0000020 jsr nxtaddra          ;next reference location
   2154 C45F B0 0C                                bcs .0000030          ;done
                                        ;
   2156 C461 C2 20                    +            .byte $c2,$20
                                        
   2157 C463 E6 BD                                inc operand           ;bump bits 0-15
   2158 C465 E2 20                    +            .byte $e2,$20
                                        
   2159 C467 D0 E5                                bne .0000010
                                        ;
   2161 C469 E6 BF                                inc operand+s_word    ;bump bits 16-23
   2162 C46B 80 E1                                bra .0000010
                                        ;
   2164 C46D 4C 3D C1                   .0000030 jmp monce             ;return to command exec
                                        ;
   2166 C470 4C 7C C1                   .0000040 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;moncpy: COPY (transfer) MEMORY
                                        ;
                                        ;	————————————————————————————————
                                        ;	syntax: T <start> <end> <target>
                                        ;	————————————————————————————————
                                        ;
   2176 C473 B0 49                      moncpy   bcs .0000040          ;start not given — quit
                                        ;
   2178 C475 20 7D CA                             jsr enddest           ;get end & target addresses
   2179 C478 B0 47                                bcs .0000050          ;range or other error
                                        ;
   2181 C47A C2 20                    +            .byte $c2,$20
                                        
   2182 C47C 38                                   sec
   2183 C47D A5 A6                                lda addrb             ;ending address
   2184 C47F E5 A2                                sbc addra             ;starting address
   2185 C481 90 3E                                bcc .0000050          ;start > end — error
                                        ;
   2187 C483 85 B1                                sta facb              ;bytes to copy
   2188 C485 E2 20                    +            .byte $e2,$20
                                        
   2189 C487 C2 10                    +            .byte $c2,$10
                                        
   2190 C489 A5 BF                                lda operand+s_word    ;target bank
   2191 C48B A4 BD                                ldy operand           ;target address
   2192 C48D C5 A4                                cmp addra+s_word      ;source bank
   2193 C48F C2 20                    +            .byte $c2,$20
                                        
   2194 C491 D0 1C                                bne .0000020          ;can use forward copy
                                        ;
   2196 C493 C4 A2                                cpy addra             ;source address
   2197 C495 90 18                                bcc .0000020          ;can use forward copy
                                        ;
   2199 C497 D0 02                                bne .0000010          ;must use reverse copy
                                        ;
   2201 C499 80 26                                bra .0000050          ;copy in place — error
                                        ;
   2203 C49B A5 B1                      .0000010 lda facb              ;get bytes to copy
   2204 C49D 48                                   pha                   ;protect
   2205 C49E 20 87 CC                             jsr lodbnk            ;load banks
   2206 C4A1 20 23 CA                             jsr cprvsup           ;do reverse copy setup
   2207 C4A4 68                                   pla                   ;get bytes to copy
   2208 C4A5 AA                                   tax                   ;save a copy
   2209 C4A6 18                                   clc
   2210 C4A7 65 BD                                adc operand           ;change target to...
   2211 C4A9 A8                                   tay                   ;target end
   2212 C4AA 8A                                   txa                   ;recover bytes to copy
   2213 C4AB A6 A6                                ldx addrb             ;source end
   2214 C4AD 80 0C                                bra .0000030
                                        ;
   2216 C4AF A5 B1                      .0000020 lda facb              ;get bytes to copy
   2217 C4B1 48                                   pha                   ;protect
   2218 C4B2 20 87 CC                             jsr lodbnk            ;load banks
   2219 C4B5 20 1C CA                             jsr cpfwsup           ;do forward copy setup
   2220 C4B8 68                                   pla                   ;get bytes to copy
   2221 C4B9 A6 A2                                ldx addra             ;source start
                                        ;
   2223 C4BB 4C D4 00                   .0000030 jmp mcftwork          ;copy memory
                                        ;
   2225 C4BE 4C 3D C1                   .0000040 jmp monce             ;back to executive
                                        ;
   2227 C4C1 4C 7C C1                   .0000050 jmp monerr            ;error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;mondmp: DISPLAY MEMORY RANGE
                                        ;
                                        ;	—————————————————————————————
                                        ;	syntax: M [<addr1> [<addr2>]]
                                        ;	—————————————————————————————
                                        ;
   2237 C4C4 B0 0F                      mondmp   bcs .0000010          ;no parameters
                                        ;
   2239 C4C6 20 C1 CA                             jsr facasize          ;check address...
   2240 C4C9 C9 04                                cmp #s_dword          ;range
   2241 C4CB B0 46                                bcs .0000050          ;address out of range
                                        ;
   2243 C4CD 20 A3 CA                             jsr facaddra          ;copy starting address
   2244 C4D0 20 D5 CA                             jsr getparm           ;get ending address
   2245 C4D3 90 17                                bcc .0000020          ;gotten
                                        ;
   2247 C4D5 20 8F C9                   .0000010 jsr clrfaca           ;clear accumulator
   2248 C4D8 C2 20                    +            .byte $c2,$20
                                        
   2249 C4DA 18                                   clc
   2250 C4DB A5 A2                                lda addra             ;starting address
   2251 C4DD 69 FF                    +            adc #<n_mbytes
   2251 C4DF 00                       +            .byte >n_mbytes
                                        ;default bytes
   2252 C4E0 85 A9                                sta faca              ;effective ending address
   2253 C4E2 E2 20                    +            .byte $e2,$20
                                        
   2254 C4E4 A5 A4                                lda addra+s_word      ;starting bank
   2255 C4E6 69 00                                adc #0
   2256 C4E8 85 AB                                sta faca+s_word       ;effective ending bank
   2257 C4EA B0 27                                bcs .0000050          ;end address > $FFFFFF
                                        ;
   2259 C4EC 20 C1 CA                   .0000020 jsr facasize          ;check ending address...
   2260 C4EF C9 04                                cmp #s_dword          ;range
   2261 C4F1 B0 20                                bcs .0000050          ;out of range — error
                                        ;
   2263 C4F3 20 AD CA                             jsr facaddrb          ;copy ending address
   2264 C4F6 20 D5 CA                             jsr getparm           ;check for excess input
   2265 C4F9 90 18                                bcc .0000050          ;error
                                        ;
   2267 C4FB 20 FB C9                             jsr calccnt           ;calculate bytes to dump
   2268 C4FE 90 13                                bcc .0000050          ;end < start
                                        ;
   2270 C500 20 A1 CC                   .0000030 jsr teststop          ;test for display stop
   2271 C503 B0 0B                                bcs .0000040          ;stopped
                                        ;
   2273 C505 20 FC C7                             jsr newline           ;next line
   2274 C508 20 79 C7                             jsr dpymem            ;display
   2275 C50B 20 59 CA                             jsr decdcnt           ;decrement byte count
   2276 C50E 90 F0                                bcc .0000030          ;not done
                                        ;
   2278 C510 4C 3D C1                   .0000040 jmp monce             ;back to main loop
                                        ;
   2280 C513 4C 7C C1                   .0000050 jmp monerr            ;address range error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monfil: FILL MEMORY
                                        ;
                                        ;	—————————————————————————————————————————
                                        ;	syntax: F <start> <end> <fill>
                                        ;
                                        ;	<start> & <end> must be in the same bank.
                                        ;	—————————————————————————————————————————
                                        ;
   2292 C516 B0 5E                      monfil   bcs .0000010          ;start not given — quit
                                        ;
   2294 C518 20 C1 CA                             jsr facasize          ;check size
   2295 C51B C9 04                                cmp #s_dword
   2296 C51D B0 5A                                bcs .0000020          ;out of range — error...
                                        ;
   2298 C51F 20 A3 CA                             jsr facaddra          ;store start
   2299 C522 20 D5 CA                             jsr getparm           ;evaluate end
   2300 C525 B0 52                                bcs .0000020          ;not entered — error
                                        ;
   2302 C527 20 C1 CA                             jsr facasize          ;check size
   2303 C52A C9 04                                cmp #s_dword
   2304 C52C B0 4B                                bcs .0000020          ;out of range — error
                                        ;
   2306 C52E A5 AB                                lda faca+s_word       ;end bank
   2307 C530 C5 A4                                cmp addra+s_word      ;start bank
   2308 C532 D0 45                                bne .0000020          ;not same — error
                                        ;
   2310 C534 20 AD CA                             jsr facaddrb          ;store <end>
   2311 C537 C2 20                    +            .byte $c2,$20
                                        
   2312 C539 38                                   sec
   2313 C53A A5 A6                                lda addrb             ;ending address
   2314 C53C E5 A2                                sbc addra             ;starting address
   2315 C53E 90 39                                bcc .0000020          ;start > end — error
                                        ;
   2317 C540 85 B1                                sta facb              ;bytes to copy
   2318 C542 E2 20                    +            .byte $e2,$20
                                        
   2319 C544 20 D5 CA                             jsr getparm           ;evaluate <fill>
   2320 C547 B0 30                                bcs .0000020          ;not entered — error
                                        ;
   2322 C549 20 C1 CA                             jsr facasize          ;<fill> should be...
   2323 C54C C9 02                                cmp #s_word           ;8 bits
   2324 C54E B0 29                                bcs .0000020          ;it isn't — error
                                        ;
   2326 C550 20 B7 CA                             jsr facaoper          ;store <fill>
   2327 C553 20 D5 CA                             jsr getparm           ;should be no more parameters
   2328 C556 90 21                                bcc .0000020          ;there are — error
                                        ;
   2330 C558 A5 BD                                lda operand           ;<fill>
   2331 C55A 87 A2                    +            .byte $87,addra
                                        ;fill 1st location
   2332 C55C C2 30                    +            .byte $c2,$30
                                                         ;16 bit operations
   2333 C55E A5 B1                                lda facb              ;
   2334 C560 F0 14                                beq .0000010          ;only 1 location — finished
                                        ;
   2336 C562 3A                                   dea                   ;zero align &...
   2337 C563 48                                   pha                   ;protect
   2338 C564 E2 20                    +            .byte $e2,$20
                                        
   2339 C566 A5 A4                                lda addra+s_word      ;start bank
   2340 C568 EB                       +            .byte $eb
                                        
   2341 C569 A5 A8                                lda addrb+s_word      ;end bank
   2342 C56B 20 1C CA                             jsr cpfwsup           ;do forward copy setup
   2343 C56E 68                                   pla                   ;recover fill count
   2344 C56F A6 A2                                ldx addra             ;fill-from starting location
   2345 C571 9B                       +            .byte $9b
                                        
   2346 C572 C8                                   iny                   ;fill-to starting location
   2347 C573 4C D4 00                             jmp mcftwork          ;fill memory
                                        ;
   2349 C576 4C 3D C1                   .0000010 jmp monce             ;goto command executive
                                        ;
   2351 C579 4C 7C C1                   .0000020 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monhnt: SEARCH (hunt) MEMORY
                                        ;
                                        ;	———————————————————————————————————
                                        ;	syntax: H <addr1> <addr2> <pattern>
                                        ;	———————————————————————————————————
                                        ;
   2361 C57C B0 40                      monhnt   bcs .0000050          ;no start address
                                        ;
   2363 C57E 20 C1 CA                             jsr facasize          ;size starting address
   2364 C581 C9 04                                cmp #s_dword
   2365 C583 B0 3C                                bcs .0000060          ;address out of range — error
                                        ;
   2367 C585 20 A3 CA                             jsr facaddra          ;store starting address
   2368 C588 20 D5 CA                             jsr getparm           ;evaluate ending address
   2369 C58B B0 34                                bcs .0000060          ;no address — error
                                        ;
   2371 C58D 20 C1 CA                             jsr facasize          ;size ending address
   2372 C590 C9 04                                cmp #s_dword
   2373 C592 B0 2D                                bcs .0000060          ;address out of range — error
                                        ;
   2375 C594 20 AD CA                             jsr facaddrb          ;store ending address
   2376 C597 20 FB C9                             jsr calccnt           ;calculate byte range
   2377 C59A 90 25                                bcc .0000060          ;end < start
                                        ;
   2379 C59C 20 D6 CB                             jsr getpat            ;evaluate search pattern
   2380 C59F B0 20                                bcs .0000060          ;error
                                        ;
   2382 C5A1 64 CE                                stz xrtemp            ;clear column counter
                                        ;
   2384 C5A3 20 A1 CC                   .0000010 jsr teststop          ;check for stop
   2385 C5A6 B0 16                                bcs .0000050          ;abort
                                        ;
   2387 C5A8 A4 C0                                ldy auxbufix          ;pattern index
                                        ;
   2389 C5AA 88                         .0000020 dey
   2390 C5AB 30 09                                bmi .0000030          ;pattern match
                                        ;
   2392 C5AD B7 A2                    +            .byte $b7,addra
                                        ;get from memory
   2393 C5AF D9 51 02                             cmp auxbuf,y          ;test against pattern
   2394 C5B2 D0 05                                bne .0000040          ;mismatch, next location
                                        ;
   2396 C5B4 F0 F4                                beq .0000020          ;match, keep testing
                                        ;
   2398 C5B6 20 4B C6                   .0000030 jsr dpycaddr          ;display current location
                                        ;
   2400 C5B9 20 FD CA                   .0000040 jsr nxtaddra          ;next location
   2401 C5BC 90 E5                                bcc .0000010          ;not done
                                        ;
   2403 C5BE 4C 3D C1                   .0000050 jmp monce             ;back to executive
                                        ;
   2405 C5C1 4C 7C C1                   .0000060 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monenv: CONVERT NUMERIC VALUE
                                        ;
                                        ;	——————————————————————
                                        ;	syntax: <radix><value>
                                        ;	——————————————————————
                                        ;
   2415 C5C4 20 D3 CA                   monenv   jsr getparmr          ;reread & evaluate parameter
   2416 C5C7 B0 26                                bcs .0000020          ;none entered
                                        ;
   2418 C5C9 A2 00                                ldx #0                ;radix index
   2419 C5CB A0 04                                ldy #n_radix          ;number of radices
                                        ;
   2421 C5CD 5A                         .0000010 phy                   ;save counter
   2422 C5CE DA                                   phx                   ;save radix index
   2423 C5CF 20 FC C7                             jsr newline           ;next line &...
   2424 C5D2 20 6F C7                             jsr clearlin          ;clear it
   2425 C5D5 A9 20                                lda #a_blank
   2426 C5D7 A2 04                                ldx #halftab
   2427 C5D9 20 EF C7                             jsr multspc           ;indent 1/2 tab
   2428 C5DC FA                                   plx                   ;get radix index but...
   2429 C5DD DA                                   phx                   ;put it back
   2430 C5DE BD E7 CC                             lda radxtab,x         ;get radix
   2431 C5E1 20 E8 C8                             jsr binasc            ;convert to ASCII
   2432 C5E4 5A                                   phy                   ;string address MSB
   2433 C5E5 DA                                   phx                   ;string address LSB
   2434 C5E6 20 11 C8                             jsr sprint            ;print
   2435 C5E9 FA                                   plx                   ;get index again
   2436 C5EA 7A                                   ply                   ;get counter
   2437 C5EB E8                                   inx
   2438 C5EC 88                                   dey
   2439 C5ED D0 DE                                bne .0000010          ;no
                                        
   2441 C5EF 4C 3D C1                   .0000020 jmp monce             ;back to command exec
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monchr: CHANGE REGISTERS
                                        ;
                                        ;	——————————————————————————————————————————————————————
                                        ;	syntax: ; [PB [PC [.S [.C [.X [.Y [SP [DP [DB]]]]]]]]]
                                        ;
                                        ;	; with no parameters is the same as the R command.
                                        ;	——————————————————————————————————————————————————————
                                        ;
   2453 C5F2 B0 33                      monchr   bcs .0000040          ;dump registers & quit
                                        ;
   2455 C5F4 A0 00                                ldy #0                ;register counter
   2456 C5F6 84 B7                                sty facc              ;initialize register index
                                        ;
   2458 C5F8 20 C1 CA                   .0000010 jsr facasize          ;get parameter size
   2459 C5FB D9 EB CC                             cmp rcvltab,y         ;check against size table
   2460 C5FE B0 2A                                bcs .0000050          ;out of range
                                        ;
   2462 C600 B9 EB CC                             lda rcvltab,y         ;determine number of bytes...
   2463 C603 C9 03                                cmp #s_word+1         ;to store
   2464 C605 66 B8                                ror facc+s_byte       ;condition flag
   2465 C607 10 02                                bpl .0000020          ;8 bit register size
                                        ;
   2467 C609 C2 20                    +            .byte $c2,$20
                                                         ;16 bit register size
                                        ;
   2469 C60B A6 B7                      .0000020 ldx facc              ;get register index
   2470 C60D A5 A9                                lda faca              ;get parm
   2471 C60F 95 8A                                sta reg_pbx,x         ;put in shadow storage
   2472 C611 E2 20                    +            .byte $e2,$20
                                        
   2473 C613 06 B8                                asl facc+s_byte       ;mode flag to carry
   2474 C615 8A                                   txa                   ;register index
   2475 C616 69 01                                adc #s_byte           ;at least 1 byte stored
   2476 C618 85 B7                                sta facc              ;save new index
   2477 C61A 20 D5 CA                             jsr getparm           ;get a parameter
   2478 C61D B0 08                                bcs .0000040          ;EOI
                                        ;
   2480 C61F C8                                   iny                   ;bump register count
   2481 C620 C0 09                                cpy #n_regchv         ;all registers processed?
   2482 C622 D0 D4                                bne .0000010          ;no, keep going
                                        ;
   2484 C624 20 08 C8                   .0000030 jsr alert             ;excessive input
                                        ;
   2486 C627 4C 98 C0                   .0000040 jmp monreg            ;display changes
                                        ;
   2488 C62A 4C 7C C1                   .0000050 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monxit: EXIT TO OPERATING ENVIRONMENT
                                        ;
                                        ;	—————————
                                        ;	syntax: X
                                        ;	—————————
                                        ;
   2498 C62D 90 19                      monxit   bcc .0000020          ;no parameters allowed
                                        ;
   2500 C62F C2 20                    +            .byte $c2,$20
                                        
   2501 C631 AD 02 01                             lda vecbrki           ;BRK indirect vector
   2502 C634 C9 59                    +            cmp #<monbrk
   2502 C636 C0                       +            .byte >monbrk
                                        ;we intercept it?
   2503 C637 D0 09                                bne .0000010          ;no, don't change it
                                        ;
   2505 C639 AD 05 01                             lda vecbrkia          ;old vector
   2506 C63C 8D 02 01                             sta vecbrki           ;restore it
   2507 C63F 9C 05 01                             stz vecbrkia          ;invalidate old vector
                                        ;         
   2509 C642 E2 30                      .0000010 +         .byte $e2,$30
                                        
   2510 C644 5C 03 F4 00                          jml vecexit           ;long jump to exit
                                        ;
   2512 C648 4C 7C C1                   .0000020 jmp monerr            ;goto error handler
                                        ;
                                        ; * * * * * * * * * * * * * * * * * * * * * * * *
                                        ; * * * * * * * * * * * * * * * * * * * * * * * *
                                        ; * *                                         * *
                                        ; * * S T A R T   o f   S U B R O U T I N E S * *
                                        ; * *                                         * *
                                        ; * * * * * * * * * * * * * * * * * * * * * * * *
                                        ; * * * * * * * * * * * * * * * * * * * * * * * *
                                        ;
                                        ;dpycaddr: DISPLAY CURRENT ADDRESS IN COLUMNS
                                        ;
   2524 C64B A6 CE                      dpycaddr ldx xrtemp            ;column count
   2525 C64D D0 05                                bne .0000010          ;not at right side
                                        ;
   2527 C64F 20 FC C7                             jsr newline           ;next row
   2528 C652 A2 08                                ldx #n_hccols         ;max columns
                                        ;
   2530 C654 E0 08                      .0000010 cpx #n_hccols         ;max columns
   2531 C656 F0 05                                beq .0000020          ;at left margin
                                        ;
   2533 C658 A9 09                                lda #a_ht
   2534 C65A 20 06 F4                             jsr putcha            ;tab a column
                                        ;
   2536 C65D CA                         .0000020 dex                   ;one less column
   2537 C65E 86 CE                                stx xrtemp            ;save column counter
   2538 C660 4C C8 C7                             jmp prntladr          ;print reference address
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpycod: DISASSEMBLE & DISPLAY CODE
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	This function disassembles & displays the machine code at  the  location
                                        ;	pointed to by ADDRA.  Upon return, ADDRA will point to the opcode of the
                                        ;	next instruction.   The entry point at DPYCODAA  should be called with a
                                        ;	disassembly prefix character loaded in .A.   If entered  at  DPYCOD, the
                                        ;	default character will be display at the beginning of each  disassembled
                                        ;	instruction.
                                        ;
                                        ;	The disassembly of immediate mode instructions that can take an 8 or  16
                                        ;	bit operand is affected by the bit pattern that is  stored  in  FLIMFLAG
                                        ;	upon entry to this function:
                                        ;
                                        ;	    FLIMFLAG: xx000000
                                        ;	              ||
                                        ;	              |+—————————> 0:  8 bit .X or .Y operand
                                        ;	              |            1: 16 bit .X or .Y operand
                                        ;	              +——————————> 0:  8 bit .A or BIT # operand
                                        ;	                           1: 16 bit .A or BIT # operand
                                        ;
                                        ;	FLIMFLAG is conditioned according to the operand of  the  most  recently
                                        ;	disassembled REP or SEP instruction.   Hence repetitive  calls  to  this
                                        ;	subroutine will usually result in the correct disassembly of 16 bit imm-
                                        ;	ediate mode instructions.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
   2569 C663 A9 2E                       public dpycod   lda #disprfx          ;default prefix
                                        ;
                                        ;
                                        ;	alternate prefix display entry point...
                                        ;
   2574 C665 20 06 F4                   dpycodaa jsr putcha            ;print prefix
   2575 C668 20 0C C8                             jsr printspc          ;space
   2576 C66B 20 C8 C7                             jsr prntladr          ;print long address
   2577 C66E 20 0C C8                             jsr printspc          ;space to opcode field
   2578 C671 20 CF CA                             jsr getbyte           ;get opcode
   2579 C674 85 CC                                sta opcode            ;save &...
   2580 C676 20 01 C8                             jsr printbyt          ;display as hex
                                        ;
                                        ;
                                        ;	decode menmonic & addressing info...
                                        ;
   2585 C679 A6 CC                                ldx opcode            ;current mnemonic
   2586 C67B BD AC CD                             lda mnetabix,x        ;get mnemonic index
   2587 C67E 0A                                   asl                   ;double for...
   2588 C67F A8                                   tay                   ;mnemonic table offset
   2589 C680 C2 20                    +            .byte $c2,$20
                                                         ;16 bit load
   2590 C682 B9 F4 CC                             lda mnetab,y          ;copy encoded mnemonic to...
   2591 C685 85 CA                                sta mnepck            ;working storage
   2592 C687 E2 20                    +            .byte $e2,$20
                                                        ;back to 8 bits
   2593 C689 20 31 CB                             jsr instdata          ;extract mode & size data
   2594 C68C 85 D3                                sta vopsflag          ;save mode flags
   2595 C68E 84 C5                                sty admodidx          ;save mode index
   2596 C690 0A                                   asl                   ;variable immediate instruction?
   2597 C691 90 1F                                bcc dpycod01          ;no, effective operand size in .X
                                        ;
                                        ;
                                        ;	determine immediate mode operand size...
                                        ;
   2602 C693 A5 CC                                lda opcode            ;current opcode
   2603 C695 24 D0                                bit flimflag          ;operand display mode
   2604 C697 10 08                                bpl .0000010          ;8 bit .A & BIT immediate mode
                                        ;
   2606 C699 29 1F                                and #aimmaska         ;determine if...
   2607 C69B C9 09                                cmp #aimmaskb         ;.A or BIT immediate
   2608 C69D F0 10                                beq .0000030          ;display 16 bit operand
                                        ;
   2610 C69F A5 CC                                lda opcode            ;not .A or BIT immediate
                                        ;
   2612 C6A1 50 0F                      .0000010 bvc dpycod01          ;8 bit .X/.Y immediate mode
                                        ;
   2614 C6A3 A0 03                                ldy #n_vopidx-1       ;opcodes to test
                                        ;
   2616 C6A5 D9 AC CF                   .0000020 cmp vopidx,y          ;looking for LDX #, CPY #, etc.
   2617 C6A8 F0 07                                beq .0000040          ;disassemble a 16 bit operand
                                        ;
   2619 C6AA 88                                   dey
   2620 C6AB 10 F8                                bpl .0000020          ;keep trying
                                        ;
   2622 C6AD 80 03                                bra dpycod01          ;not .X or .Y immediate
                                        ;
   2624 C6AF A5 CC                      .0000030 lda opcode            ;reload
                                        ;
   2626 C6B1 E8                         .0000040 inx                   ;16 bit operand
                                        ;
                                        ;
                                        ;	get & display operand bytes...
                                        ;
   2631 C6B2 86 D1                      dpycod01 stx iopsize           ;operand size...
   2632 C6B4 E8                                   inx                   ;plus opcode becomes...
   2633 C6B5 86 C8                                stx instsize          ;instruction size
   2634 C6B7 86 C6                                stx charcnt           ;total bytes to process
   2635 C6B9 A9 0B                                lda #n_opcols+2       ;total operand columns plus WS
   2636 C6BB 85 CE                                sta xrtemp            ;initialize counter
   2637 C6BD 20 10 CA                             jsr clroper           ;clear operand
   2638 C6C0 A4 D1                                ldy iopsize           ;operand size
   2639 C6C2 F0 16                                beq .0000020          ;no operand
                                        ;
   2641 C6C4 A2 00                                ldx #0                ;operand index
                                        ;
   2643 C6C6 20 CF CA                   .0000010 jsr getbyte           ;get operand byte
   2644 C6C9 95 BD                                sta operand,x         ;save
   2645 C6CB DA                                   phx                   ;protect operand index
   2646 C6CC 20 01 C8                             jsr printbyt          ;print operand byte
   2647 C6CF C6 CE                                dec xrtemp            ;3 columns used, 2 for...
   2648 C6D1 C6 CE                                dec xrtemp            ;operand nybbles &...
   2649 C6D3 C6 CE                                dec xrtemp            ;1 for whitespace
   2650 C6D5 FA                                   plx                   ;get operand index
   2651 C6D6 E8                                   inx                   ;bump it
   2652 C6D7 88                                   dey
   2653 C6D8 D0 EC                                bne .0000010          ;next
                                        ;
   2655 C6DA A6 CE                      .0000020 ldx xrtemp            ;operand columns remaining
   2656 C6DC 20 EF C7                             jsr multspc           ;space to mnemonic field
                                        ;
                                        ;
                                        ;	display mnemonic...
                                        ;
   2661 C6DF A0 03                                ldy #s_mnemon         ;size of ASCII mnemonic
                                        ;
   2663 C6E1 A9 00                      .0000030 lda #0                ;initialize char
   2664 C6E3 A2 05                                ldx #n_shfenc         ;shifts to execute
                                        ;
   2666 C6E5 06 CA                      .0000040 asl mnepck            ;shift encoded mnemonic
   2667 C6E7 26 CB                                rol mnepck+s_byte
   2668 C6E9 2A                                   rol
   2669 C6EA CA                                   dex
   2670 C6EB D0 F8                                bne .0000040
                                        ;
   2672 C6ED 69 3F                                adc #a_mnecvt         ;convert to ASCII &...
   2673 C6EF 48                                   pha                   ;stash
   2674 C6F0 88                                   dey
   2675 C6F1 D0 EE                                bne .0000030          ;continue with mnemonic
                                        ;
   2677 C6F3 A0 03                                ldy #s_mnemon
                                        ;
   2679 C6F5 68                         .0000050 pla                   ;get mnenmonic byte
   2680 C6F6 20 06 F4                             jsr putcha            ;print it
   2681 C6F9 88                                   dey
   2682 C6FA D0 F9                                bne .0000050
                                        ;
                                        ;
                                        ;	display operand...
                                        ;
   2687 C6FC A5 D1                                lda iopsize           ;operand size
   2688 C6FE F0 6F                                beq clearlin          ;zero, disassembly finished
                                        ;
   2690 C700 20 0C C8                             jsr printspc          ;space to operand field
   2691 C703 24 D3                                bit vopsflag          ;check mode flags
   2692 C705 50 08                                bvc dpycod02          ;not a branch
                                        ;
   2694 C707 20 47 CB                             jsr offtarg           ;compute branch target
   2695 C70A A6 C8                                ldx instsize          ;effective instruction size
   2696 C70C CA                                   dex
   2697 C70D 86 D1                                stx iopsize           ;effective operand size
                                        ;
   2699 C70F 64 D3                      dpycod02 stz vopsflag          ;clear
   2700 C711 A5 C5                                lda admodidx          ;instruction addressing mode
   2701 C713 C9 0B                                cmp #am_move          ;block move instruction?
   2702 C715 D0 02                                bne .0000010          ;no
                                        ;
   2704 C717 66 D3                                ror vopsflag          ;yes
                                        ;
   2706 C719 0A                         .0000010 asl                   ;convert addressing mode to...
   2707 C71A AA                                   tax                   ;symbology table index
   2708 C71B C2 20                    +            .byte $c2,$20
                                                         ;do a 16 bit load
   2709 C71D BD B0 CF                             lda ms_lutab,x        ;addressing symbol pointer
   2710 C720 48                                   pha
   2711 C721 E2 20                    +            .byte $e2,$20
                                                        ;back to 8 bit loads
   2712 C723 A0 00                                ldy #0
   2713 C725 B3 01                    +            .byte $b3,1
                                        ;get 1st char
   2714 C727 C9 20                                cmp #a_blank
   2715 C729 F0 03                                beq .0000020          ;no addresing mode preamble
                                        ;
   2717 C72B 20 06 F4                             jsr putcha            ;print preamble
                                        ;
   2719 C72E A9 24                      .0000020 lda #c_hex
   2720 C730 20 06 F4                             jsr putcha            ;operand displayed as hex
   2721 C733 A4 D1                                ldy iopsize           ;operand size = index
                                        ;
   2723 C735 88                         .0000030 dey
   2724 C736 30 16                                bmi .0000040          ;done with operand
                                        ;
   2726 C738 B9 BD 00                             lda operand,y         ;get operand byte
   2727 C73B 20 E5 C7                             jsr dpyhex            ;print operand byte
   2728 C73E 24 D3                                bit vopsflag          ;block move?
   2729 C740 10 F3                                bpl .0000030          ;no
                                        ;
   2731 C742 64 D3                                stz vopsflag          ;reset
   2732 C744 5A                                   phy                   ;protect operand index
   2733 C745 F4                       +            .byte $f4
   2733 C746 E9 CF                    +            .word ms_move
                                        
   2734 C748 20 11 C8                             jsr sprint            ;display MVN/MVP operand separator
   2735 C74B 7A                                   ply                   ;recover operand index again
   2736 C74C 80 E7                                bra .0000030          ;continue
                                        ;
   2738 C74E FA                         .0000040 plx                   ;symbology LSB
   2739 C74F 7A                                   ply                   ;symbology MSB
   2740 C750 E8                                   inx                   ;move past preamble
   2741 C751 D0 01                                bne .0000050
                                        ;
   2743 C753 C8                                   iny
                                        ;
   2745 C754 5A                         .0000050 phy
   2746 C755 DA                                   phx
   2747 C756 20 11 C8                             jsr sprint            ;print postamble, if any
                                        ;
                                        ;
                                        ;	condition immediate mode display format...
                                        ;
   2752 C759 A5 BD                      dpycod03 lda operand           ;operand LSB
   2753 C75B 29 30                                and #pfmxmask         ;isolate M & X bits
   2754 C75D 0A                                   asl                   ;shift to match...
   2755 C75E 0A                                   asl                   ;FLIMFLAG alignment
   2756 C75F A6 CC                                ldx opcode            ;current instruction
   2757 C761 E0 C2                                cpx #opc_rep          ;was it REP?
   2758 C763 D0 04                                bne .0000010          ;no
                                        ;
   2760 C765 04 D0                                tsb flimflag          ;set flag bits as required
   2761 C767 80 06                                bra clearlin
                                        ;
   2763 C769 E0 E2                      .0000010 cpx #opc_sep          ;was it SEP?
   2764 C76B D0 02                                bne clearlin          ;no, just exit
                                        ;
   2766 C76D 14 D0                                trb flimflag          ;clear flag bits as required
                                        ;
                                        ;================================================================================
                                        ;
                                        ;clearlin: CLEAR DISPLAY LINE
                                        ;
   2772 C76F F4                         clearlin +         .byte $f4
   2772 C770 01 D0                    +            .word dc_cl
                                        
   2773 C772 80 4B                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpyibuf: DISPLAY MONITOR INPUT BUFFER CONTENTS
                                        ;
   2779 C774 F4                         dpyibuf +         .byte $f4
   2779 C775 00 02                    +            .word ibuffer
                                        
   2780 C777 80 46                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpymem: DISPLAY MEMORY
                                        ;
                                        ;	————————————————————————————————————————————————————————————
                                        ;	This function displays 16 bytes of memory as hex values & as
                                        ;	ASCII equivalents.  The starting address for the display is
                                        ;	in ADDRA & is expected to be a 24 bit address.  Upon return,
                                        ;	ADDRA will point to the start of the next 16 bytes.
                                        ;	————————————————————————————————————————————————————————————
                                        ;
   2793 C779 E2 30                      dpymem +         .byte $e2,$30
                                        
   2794 C77B 64 C6                                stz charcnt           ;reset
   2795 C77D A9 3E                                lda #memprfx
   2796 C77F 20 06 F4                             jsr putcha            ;display prefix
   2797 C782 20 C8 C7                             jsr prntladr          ;print 24 bit address
   2798 C785 A2 00                                ldx #0                ;string buffer index
   2799 C787 A0 08                                ldy #n_dump           ;bytes per line
                                        ;
   2801 C789 20 CF CA                   .0000010 jsr getbyte           ;get from RAM, also...
   2802 C78C 48                                   pha                   ;save for decoding
   2803 C78D DA                                   phx                   ;save string index
   2804 C78E 20 01 C8                             jsr printbyt          ;display as hex ASCII
   2805 C791 E6 C6                                inc charcnt           ;bytes displayed +1
   2806 C793 FA                                   plx                   ;recover string index &...
   2807 C794 68                                   pla                   ;byte
   2808 C795 C9 20                                cmp #a_blank          ;printable?
   2809 C797 90 04                                bcc .0000020          ;no
                                        ;
   2811 C799 C9 7F                                cmp #a_del
   2812 C79B 90 02                                bcc .0000030          ;is printable
                                        ;
   2814 C79D A9 2E                      .0000020 lda #memsubch         ;substitute character
                                        ;
   2816 C79F 9D 00 02                   .0000030 sta ibuffer,x         ;save char
   2817 C7A2 E8                                   inx                   ;bump index
   2818 C7A3 88                                   dey                   ;byte count -= 1
   2819 C7A4 D0 E3                                bne .0000010          ;not done
                                        ;
   2821 C7A6 9E 00 02                             stz ibuffer,x         ;terminate ASCII string
   2822 C7A9 A9 3A                                lda #memsepch
   2823 C7AB 20 06 F4                             jsr putcha            ;separate ASCII from bytes
   2824 C7AE F4                       +            .byte $f4
   2824 C7AF F7 CF                    +            .word dc_bf
                                        
   2825 C7B1 20 11 C8                             jsr sprint            ;select reverse video
   2826 C7B4 20 74 C7                             jsr dpyibuf           ;display ASCII equivalents
   2827 C7B7 F4                       +            .byte $f4
   2827 C7B8 0C D0                    +            .word dc_er
                                        ;normal video
   2828 C7BA 80 03                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpyerr: DISPLAY ERROR SIGNAL
                                        ;
   2834 C7BC F4                         dpyerr +         .byte $f4
   2834 C7BD 39 D0                    +            .word mm_err
                                        ;"*ERR"
                                        ;
   2836 C7BF 20 11 C8                   dpyerraa jsr sprint
   2837 C7C2 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;gendbs: GENERATE DESTRUCTIVE BACKSPACE
                                        ;
   2843 C7C3 F4                         gendbs +         .byte $f4
   2843 C7C4 FD CF                    +            .word dc_bs
                                        ;destructive backspace
   2844 C7C6 80 F7                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;prntladr: PRINT 24 BIT CURRENT ADDRESS
                                        ;
   2850 C7C8 08                         prntladr php                   ;protect register sizes
   2851 C7C9 E2 20                    +            .byte $e2,$20
                                        
   2852 C7CB A5 A4                                lda addra+s_word      ;get bank byte &...
   2853 C7CD 20 E5 C7                             jsr dpyhex            ;display it
   2854 C7D0 C2 20                    +            .byte $c2,$20
                                        
   2855 C7D2 A5 A2                                lda addra             ;get 16 bit address
   2856 C7D4 28                                   plp                   ;restore register sizes
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpyhexw: DISPLAY BINARY WORD AS HEX ASCII
                                        ;
                                        ;	————————————————————————————————————
                                        ;	Preparatory Ops: .C: word to display
                                        ;
                                        ;	Returned Values: .C: used
                                        ;	                 .X: used
                                        ;	                 .Y: entry value
                                        ;	————————————————————————————————————
                                        ;
   2870 C7D5 08                         dpyhexw  php                   ;save register sizes
   2871 C7D6 C2 20                    +            .byte $c2,$20
                                        
   2872 C7D8 48                                   pha                   ;protect value
   2873 C7D9 E2 20                    +            .byte $e2,$20
                                        
   2874 C7DB EB                       +            .byte $eb
                                                           ;get MSB &...
   2875 C7DC 20 E5 C7                             jsr dpyhex            ;display
   2876 C7DF C2 20                    +            .byte $c2,$20
                                        
   2877 C7E1 68                                   pla                   ;recover value
   2878 C7E2 E2 20                    +            .byte $e2,$20
                                                        ;only LSB visible
   2879 C7E4 28                                   plp                   ;reset register sizes
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpyhex: DISPLAY BINARY BYTE AS HEX ASCII
                                        ;
                                        ;	————————————————————————————————————
                                        ;	Preparatory Ops: .A: byte to display
                                        ;
                                        ;	Returned Values: .A: used
                                        ;	                 .X: used
                                        ;	                 .Y: entry value
                                        ;	————————————————————————————————————
                                        ;
   2893 C7E5 20 7C C9                   dpyhex   jsr binhex            ;convert to hex ASCII
   2894 C7E8 20 06 F4                             jsr putcha            ;print MSN
   2895 C7EB 8A                                   txa
   2896 C7EC 4C 06 F4                             jmp putcha            ;print LSN
                                        ;
                                        ;================================================================================
                                        ;
                                        ;multspc: PRINT MULTIPLE BLANKS
                                        ;
                                        ;	————————————————————————————————————————————————
                                        ;	Preparatory Ops : .X: number of blanks to print
                                        ;
                                        ;	Register Returns: none
                                        ;
                                        ;	Calling Example : ldx #3
                                        ;	                  jsr multspc    ;print 3 spaces
                                        ;
                                        ;	Notes: This sub will print 1 blank if .X=0.
                                        ;	————————————————————————————————————————————————
                                        ;
   2913 C7EF 8A                         multspc  txa
   2914 C7F0 D0 01                                bne .0000010          ;blank count specified
                                        ;
   2916 C7F2 E8                                   inx                   ;default to 1 blank
                                        ;
   2918 C7F3 A9 20                      .0000010 lda #a_blank
                                        ;
   2920 C7F5 20 06 F4                   .0000020 jsr putcha
   2921 C7F8 CA                                   dex
   2922 C7F9 D0 FA                                bne .0000020
                                        ;
   2924 C7FB 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;newline: PRINT NEWLINE (CRLF)
                                        ;
   2930 C7FC F4                         newline +         .byte $f4
   2930 C7FD 12 D0                    +            .word dc_lf
                                        
   2931 C7FF 80 BE                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;printbyt: PRINT A BYTE WITH LEADING SPACE
                                        ;
   2937 C801 48                         printbyt pha                   ;protect byte
   2938 C802 20 0C C8                             jsr printspc          ;print leading space
   2939 C805 68                                   pla                   ;restore &...
   2940 C806 80 DD                                bra dpyhex            ;print byte
                                        ;         
                                        ;================================================================================
                                        ;
                                        ;alert: ALERT USER w/TERMINAL BELL
                                        ;
   2946 C808 A9 07                      alert    lda #a_bel
   2947 C80A 80 02                                bra printcmn
                                        ;
                                        ;================================================================================
                                        ;
                                        ;printspc: PRINT A SPACE
                                        ;
   2953 C80C A9 20                      printspc lda #a_blank
                                        ;
   2955 C80E 4C 06 F4                   printcmn jmp putcha
                                        ;
                                        ;================================================================================
                                        ;
                                        ;sprint: PRINT NULL-TERMINATED CHARACTER STRING
                                        ;
                                        ;	—————————————————————————————————————————————————————————
                                        ;	Preparatory Ops : SP+1: string address LSB
                                        ;	                  SP+2: string address MSB
                                        ;
                                        ;	Register Returns: .A: used
                                        ;	                  .B: entry value
                                        ;	                  .X: used
                                        ;	                  .Y: used
                                        ;
                                        ;	MPU Flags: NVmxDIZC
                                        ;	           ||||||||
                                        ;	           |||||||+———> 0: okay
                                        ;	           |||||||      1: string too long (1)
                                        ;	           ||||+++————> not defined
                                        ;	           |||+———————> 1
                                        ;	           ||+————————> 1
                                        ;	           ++—————————> not defined
                                        ;
                                        ;	Example: PER STRING
                                        ;	         JSR SPRINT
                                        ;	         BCS TOOLONG
                                        ;
                                        ;	Notes: 1) Maximum permissible string length including the
                                        ;	          terminator is 32,767 bytes.
                                        ;	       2) All registers are forced to 8 bits.
                                        ;	       3) DO NOT JUMP OR BRANCH INTO THIS FUNCTION!
                                        ;	—————————————————————————————————————————————————————————
                                        ;
   2989 C811 E2 20                      sprint +         .byte $e2,$20
                                                        ;8 bit accumulator
   2990 C813 C2 10                    +            .byte $c2,$10
                                                         ;16 bit index
                                        ;
                                        ;—————————————————————————————————————————————————————————
   3142 = 0000000000000001                            .reetaddr =1                    ;return address
                                        
   3144 = 00000003                      .src     =.reetaddr+s_word      ;string address stack offset
                                        
                                        ;—————————————————————————————————————————————————————————
                                        ;
   2999 C815 A0 00                    +            ldy #<0
   2999 C817 00                       +            .byte >0
                                        
   3000 C818 18                                   clc                   ;no initial error
                                        ;
   3002 C819 B3 03                      .0000010 +         .byte $b3,.src
                                        ;get a byte
   3003 C81B F0 07                                beq .0000020          ;done
                                        ;
   3005 C81D 20 06 F4                             jsr putcha            ;write to console port
   3006 C820 C8                                   iny
   3007 C821 10 F6                                bpl .0000010          ;next
                                        ;
   3009 C823 38                                   sec                   ;string too long
                                        ;
   3011 C824 FA                         .0000020 plx                   ;pull RTS address
   3012 C825 7A                                   ply                   ;clear string pointer
   3013 C826 DA                                   phx                   ;replace RTS
   3014 C827 E2 10                    +            .byte $e2,$10
                                        
   3015 C829 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;ascbin: CONVERT NULL-TERMINATED ASCII NUMBER STRING TO BINARY
                                        ;
                                        ;	———————————————————————————————————————————————————
                                        ;	Preparatory Ops: ASCII number string in IBUFFER
                                        ;
                                        ;	Returned Values: FACA: converted parameter
                                        ;	                   .A: used
                                        ;	                   .X: used
                                        ;	                   .Y: used
                                        ;	                   .C: 1 = conversion error
                                        ;	                   .Z: 1 = nothing to convert
                                        ;
                                        ;	Notes: 1) Conversion stops when a non-numeric char-
                                        ;	          acter is encountered.
                                        ;	       2) Radix symbols are as follows:
                                        ;
                                        ;	          % binary
                                        ;	          @ octal
                                        ;	          + decimal
                                        ;	          $ hexadecimal
                                        ;
                                        ;	          Hex is the default if no radix is speci-
                                        ;	          fied in the 1st character of the string.
                                        ;	———————————————————————————————————————————————————
                                        ;
   3044 C82A E2 30                      ascbin +         .byte $e2,$30
                                        
   3045 C82C 20 8F C9                             jsr clrfaca           ;clear accumulator
   3046 C82F 64 C6                                stz charcnt           ;zero char count
   3047 C831 64 C4                                stz radix             ;initialize
                                        ;
                                        ;
                                        ;	process radix if present...
                                        ;
   3052 C833 20 22 CC                             jsr getcharw          ;get next non-WS char
   3053 C836 D0 02                                bne .0000010          ;got something
                                        ;
   3055 C838 18                                   clc                   ;no more input
   3056 C839 60                                   rts
                                        ;
   3058 C83A A2 03                      .0000010 ldx #n_radix-1        ;number of radices
                                        ;
   3060 C83C DD E7 CC                   .0000020 cmp radxtab,x         ;recognized radix?
   3061 C83F F0 06                                beq .0000030          ;yes
                                        ;
   3063 C841 CA                                   dex
   3064 C842 10 F8                                bpl .0000020          ;try next
                                        ;
   3066 C844 C6 C1                                dec ibufidx           ;reposition to previous char
   3067 C846 E8                                   inx                   ;not recognized, assume hex
                                        ;
   3069 C847 C9 2B                      .0000030 cmp #c_dec            ;decimal radix?
   3070 C849 D0 02                                bne .0000040          ;not decimal
                                        ;
   3072 C84B 66 C4                                ror radix             ;flag decimal conversion
                                        ;
   3074 C84D BD D3 CC                   .0000040 lda basetab,x         ;number bases table
   3075 C850 85 D2                                sta range             ;set valid numeral range
   3076 C852 BD D7 CC                             lda bitsdtab,x        ;get bits per digit
   3077 C855 85 C2                                sta bitsdig           ;store
                                        ;
                                        ;
                                        ;	process numerals...
                                        ;
   3082 C857 20 C4 CB                   ascbin01 jsr getchar           ;get next char
   3083 C85A F0 70                                beq ascbin03          ;EOI
                                        ;
   3085 C85C C9 20                                cmp #' '
   3086 C85E F0 6C                                beq ascbin03          ;blank — EOF
                                        ;
   3088 C860 C9 2C                                cmp #','
   3089 C862 F0 68                                beq ascbin03          ;comma — EOF
                                        ;
   3091 C864 C9 09                                cmp #a_ht
   3092 C866 F0 64                                beq ascbin03          ;tab — EOF
                                        ;
   3094 C868 20 E9 C9                             jsr nybtobin          ;change to binary
   3095 C86B B0 60                                bcs ascbin04          ;not a recognized numeral
                                        ;
   3097 C86D C5 D2                                cmp range             ;check range
   3098 C86F B0 5C                                bcs ascbin04          ;not valid for base
                                        ;
   3100 C871 85 C3                                sta numeral           ;save processed numeral
   3101 C873 E6 C6                                inc charcnt           ;bump numeral count
   3102 C875 24 C4                                bit radix             ;working in base 10?
   3103 C877 10 15                                bpl .0000030          ;no
                                        ;
                                        ;
                                        ;	compute N*2 for decimal conversion...
                                        ;
   3108 C879 A2 00                                ldx #0                ;accumulator index
   3109 C87B A0 02                                ldy #s_pfac/2         ;iterations
   3110 C87D C2 20                    +            .byte $c2,$20
                                        
   3111 C87F 18                                   clc
                                        ;
   3113 C880 B5 A9                      .0000020 lda faca,x            ;N
   3114 C882 2A                                   rol                   ;N=N*2
   3115 C883 95 B1                                sta facb,x
   3116 C885 E8                                   inx
   3117 C886 E8                                   inx
   3118 C887 88                                   dey
   3119 C888 D0 F6                                bne .0000020
                                        ;
   3121 C88A B0 41                                bcs ascbin04          ;overflow — error
                                        ;
   3123 C88C E2 20                    +            .byte $e2,$20
                                        
                                        ;
                                        ;
                                        ;	compute N*base for binary, octal or hex...
                                        ;	or N*8 for decimal...
                                        ;
   3129 C88E A6 C2                      .0000030 ldx bitsdig           ;bits per digit
   3130 C890 C2 20                    +            .byte $c2,$20
                                                         ;16 bit shifts
                                        ;
   3132 C892 06 A9                      .0000040 asl faca
   3133 C894 26 AB                                rol faca+s_word
   3134 C896 B0 35                                bcs ascbin04          ;overflow — error
                                        ;
   3136 C898 CA                                   dex
   3137 C899 D0 F7                                bne .0000040          ;next shift
                                        ;
   3139 C89B E2 20                    +            .byte $e2,$20
                                                        ;back to 8 bits
   3140 C89D 24 C4                                bit radix             ;check base
   3141 C89F 10 13                                bpl ascbin02          ;not decimal
                                        ;
                                        ;
                                        ;	compute N*10 for decimal (N*8 + N*2)...
                                        ;
   3146 C8A1 A0 04                                ldy #s_pfac
   3147 C8A3 C2 20                    +            .byte $c2,$20
                                        
                                        ;
   3149 C8A5 B5 A9                      .0000050 lda faca,x            ;N*8
   3150 C8A7 75 B1                                adc facb,x            ;N*2
   3151 C8A9 95 A9                                sta faca,x            ;now N*10
   3152 C8AB E8                                   inx
   3153 C8AC E8                                   inx
   3154 C8AD 88                                   dey
   3155 C8AE D0 F5                                bne .0000050
                                        ;
   3157 C8B0 B0 1B                                bcs ascbin04          ;overflow — error
                                        ;
   3159 C8B2 E2 20                    +            .byte $e2,$20
                                        
                                        ;
                                        ;
                                        ;	add current numeral to partial result...
                                        ;
   3164 C8B4 A5 A9                      ascbin02 lda faca              ;N
   3165 C8B6 65 C3                                adc numeral           ;N=N+D
   3166 C8B8 85 A9                                sta faca
   3167 C8BA A2 01                                ldx #1
   3168 C8BC A0 03                                ldy #s_pfac-1
                                        ;
   3170 C8BE B5 A9                      .0000010 lda faca,x
   3171 C8C0 69 00                                adc #0                ;account for carry
   3172 C8C2 95 A9                                sta faca,x
   3173 C8C4 E8                                   inx
   3174 C8C5 88                                   dey
   3175 C8C6 D0 F6                                bne .0000010
                                        ;
   3177 C8C8 90 8D                                bcc ascbin01          ;next if no overflow
                                        ;
   3179 C8CA B0 01                                bcs ascbin04          ;overflow — error
                                        ;
                                        ;
                                        ;	finish up...
                                        ;
   3184 C8CC 18                         ascbin03 clc                   ;no error
                                        ;
   3186 C8CD E2 20                      ascbin04 +         .byte $e2,$20
                                                        ;reset if necessary
   3187 C8CF A5 C6                                lda charcnt           ;load char count
   3188 C8D1 60                                   rts                   ;done
                                        ;
                                        ;================================================================================
                                        ;
                                        ;bcdasc: CONVERT BCD DIGIT TO ASCII
                                        ;
                                        ;	———————————————————————————————————————
                                        ;	Preparatory Ops: .A: BCD digit, $00-$99
                                        ;
                                        ;	Returned Values: .A: ASCII MSD
                                        ;	                 .X: ASCII LSD
                                        ;	                 .Y: entry value
                                        ;	———————————————————————————————————————
                                        ;
   3202 C8D2 20 DE C8                   bcdasc   jsr bintonyb          ;extract nybbles
   3203 C8D5 48                                   pha                   ;save tens
   3204 C8D6 8A                                   txa                 
   3205 C8D7 09 30                                ora #btoamask         ;change units to ASCII
   3206 C8D9 AA                                   tax                   ;store
   3207 C8DA 68                                   pla                   ;get tens
   3208 C8DB 09 30                                ora #btoamask         ;change to ASCII
   3209 C8DD 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;bintonyb: EXTRACT BINARY NYBBLES
                                        ;
                                        ;	—————————————————————————————————
                                        ;	Preparatory Ops: .A: binary value
                                        ;
                                        ;	Returned Values: .A: MSN
                                        ;	                 .X: LSN
                                        ;	                 .Y: entry value
                                        ;	—————————————————————————————————
                                        ;
   3223 C8DE 48                         bintonyb pha                   ;save
   3224 C8DF 29 0F                                and #bcdumask         ;extract LSN
   3225 C8E1 AA                                   tax                   ;save it
   3226 C8E2 68                                   pla
                                        ;         .rept s_bnybbl        ;extract MSN
   3228 C8E3 4A                                     lsr
   3229 C8E4 4A                                     lsr
   3230 C8E5 4A                                     lsr
   3231 C8E6 4A                                     lsr
                                        ;         .endr
   3233 C8E7 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;binasc: CONVERT 32-BIT BINARY TO NULL-TERMINATED ASCII NUMBER STRING
                                        ;
                                        ;	——————————————————————————————————————————————————————
                                        ;	Preparatory Ops: FACA: 32-bit operand
                                        ;	                   .A: radix character, w/bit 7 set to
                                        ;	                       suppress radix symbol in the
                                        ;	                       conversion string
                                        ;
                                        ;	Returned Values: ibuffer: conversion string
                                        ;	                      .A: string length
                                        ;	                      .X: string address LSB
                                        ;	                      .Y: string address MSB
                                        ;
                                        ;	Execution Notes: ibufidx & instsize are overwritten.
                                        ;	——————————————————————————————————————————————————————
                                        ;
   3253 C8E8 64 C1                      binasc   stz ibufidx           ;initialize string index
   3254 C8EA 64 C8                                stz instsize          ;clear format flag
                                        ;
                                        ;
                                        ;	evaluate radix...
                                        ;
   3259 C8EC 0A                                   asl                   ;extract format flag &...
   3260 C8ED 66 C8                                ror instsize          ;save it
   3261 C8EF 4A                                   lsr                   ;extract radix character
   3262 C8F0 A2 03                                ldx #n_radix-1        ;total radices
                                        ;
   3264 C8F2 DD E7 CC                   .0000010 cmp radxtab,x         ;recognized radix?
   3265 C8F5 F0 04                                beq .0000020          ;yes
                                        ;
   3267 C8F7 CA                                   dex
   3268 C8F8 10 F8                                bpl .0000010          ;try next
                                        ;
   3270 C8FA E8                                   inx                   ;assume hex
                                        ;
   3272 C8FB 86 C4                      .0000020 stx radix             ;save radix index for later
   3273 C8FD 24 C8                                bit instsize
   3274 C8FF 30 08                                bmi .0000030          ;no radix symbol wanted
                                        ;
   3276 C901 BD E7 CC                             lda radxtab,x         ;radix table
   3277 C904 8D 00 02                             sta ibuffer           ;prepend to string
   3278 C907 E6 C1                                inc ibufidx           ;bump string index
                                        ;
   3280 C909 C9 2B                      .0000030 cmp #c_dec            ;converting to decimal?
   3281 C90B D0 07                                bne .0000040          ;no
                                        ;
   3283 C90D 20 A1 C9                             jsr facabcd           ;convert operand to BCD
   3284 C910 A9 00                                lda #0
   3285 C912 80 17                                bra .0000070          ;skip binary stuff
                                        ;
                                        ;
                                        ;	prepare for binary, octal or hex conversion...
                                        ;
   3290 C914 A2 00                      .0000040 ldx #0                ;operand index
   3291 C916 A0 05                                ldy #s_sfac-1         ;workspace index
                                        ;
   3293 C918 B5 A9                      .0000050 lda faca,x            ;copy operand to...
   3294 C91A 99 B1 00                             sta facb,y            ;workspace in...
   3295 C91D 88                                   dey                   ;big-endian order
   3296 C91E E8                                   inx
   3297 C91F E0 04                                cpx #s_pfac
   3298 C921 D0 F5                                bne .0000050
                                        ;
   3300 C923 A9 00                                lda #0
   3301 C925 BB                       +            .byte $bb
                                        
                                        ;
   3303 C926 95 B1                      .0000060 sta facb,x            ;pad workspace
   3304 C928 CA                                   dex
   3305 C929 10 FB                                bpl .0000060
                                        ;
                                        ;
                                        ;	set up conversion parameters...
                                        ;
   3310 C92B 85 B7                      .0000070 sta facc              ;initialize byte counter
   3311 C92D A4 C4                                ldy radix             ;radix index
   3312 C92F B9 E3 CC                             lda numstab,y         ;numerals in string
   3313 C932 85 B8                                sta facc+s_byte       ;set remaining numeral count
   3314 C934 B9 DB CC                             lda bitsntab,y        ;bits per numeral
   3315 C937 85 B9                                sta facc+s_word       ;set
   3316 C939 B9 DF CC                             lda lzsttab,y         ;leading zero threshold
   3317 C93C 85 BA                                sta facc+s_xword      ;set
                                        ;
                                        ;
                                        ;	generate conversion string...
                                        ;
   3322 C93E A9 00                      .0000080 lda #0
   3323 C940 A4 B9                                ldy facc+s_word       ;bits per numeral
                                        ;
   3325 C942 A2 05                      .0000090 ldx #s_sfac-1         ;workspace size
   3326 C944 18                                   clc                   ;avoid starting carry
                                        ;
   3328 C945 36 B1                      .0000100 rol facb,x            ;shift out a bit...
   3329 C947 CA                                   dex                   ;from the operand or...
   3330 C948 10 FB                                bpl .0000100          ;BCD conversion result
                                        ;
   3332 C94A 2A                                   rol                   ;bit to .A
   3333 C94B 88                                   dey
   3334 C94C D0 F4                                bne .0000090          ;more bits to grab
                                        ;
   3336 C94E A8                                   tay                   ;if numeral isn't zero...
   3337 C94F D0 0A                                bne .0000110          ;skip leading zero tests
                                        ;
   3339 C951 A6 B8                                ldx facc+s_byte       ;remaining numerals
   3340 C953 E4 BA                                cpx facc+s_xword      ;leading zero threshold
   3341 C955 90 04                                bcc .0000110          ;below it, must convert
                                        ;
   3343 C957 A6 B7                                ldx facc              ;processed byte count
   3344 C959 F0 11                                beq .0000130          ;discard leading zero
                                        ;
   3346 C95B C9 0A                      .0000110 cmp #10               ;check range
   3347 C95D 90 02                                bcc .0000120          ;is 0-9
                                        ;
   3349 C95F 69 06                                adc #a_hexdec         ;apply hex adjust
                                        ;
   3351 C961 69 30                      .0000120 adc #'0'              ;change to ASCII
   3352 C963 A4 C1                                ldy ibufidx           ;string index
   3353 C965 99 00 02                             sta ibuffer,y         ;save numeral in buffer
   3354 C968 E6 C1                                inc ibufidx           ;next buffer position
   3355 C96A E6 B7                                inc facc              ;bytes=bytes+1
                                        ;
   3357 C96C C6 B8                      .0000130 dec facc+s_byte       ;numerals=numerals-1
   3358 C96E D0 CE                                bne .0000080          ;not done
                                        ;
                                        ;
                                        ;	terminate string & exit...
                                        ;
   3363 C970 A6 C1                                ldx ibufidx           ;printable string length
   3364 C972 9E 00 02                             stz ibuffer,x         ;terminate string
   3365 C975 8A                                   txa
   3366 C976 A2 00                                ldx #<ibuffer         ;converted string
   3367 C978 A0 02                                ldy #>ibuffer
   3368 C97A 18                                   clc                   ;all okay
   3369 C97B 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;binhex: CONVERT BINARY BYTE TO HEX ASCII CHARS
                                        ;
                                        ;	————————————————————————————————————————————
                                        ;	Preparatory Ops: .A: byte to convert
                                        ;
                                        ;	Returned Values: .A: MSN ASCII char
                                        ;	                 .X: LSN ASCII char
                                        ;	                 .Y: entry value
                                        ;	————————————————————————————————————————————
                                        ;
   3383 C97C 20 DE C8                   binhex   jsr bintonyb          ;generate binary values
   3384 C97F 48                                   pha                   ;save MSN
   3385 C980 8A                                   txa
   3386 C981 20 86 C9                             jsr .0000010          ;generate ASCII LSN
   3387 C984 AA                                   tax                   ;save
   3388 C985 68                                   pla                   ;get input
                                        ;
                                        ;
                                        ;	convert nybble to hex ASCII equivalent...
                                        ;
   3393 C986 C9 0A                      .0000010 cmp #10
   3394 C988 90 02                                bcc .0000020          ;in decimal range
                                        ;
   3396 C98A 69 66                                adc #k_hex            ;hex compensate
                                        ;         
   3398 C98C 49 30                      .0000020 eor #'0'              ;finalize nybble
   3399 C98E 60                                   rts                   ;done
                                        ;
                                        ;================================================================================
                                        ;
                                        ;clrfaca: CLEAR FLOATING ACCUMULATOR A
                                        ;
   3405 C98F 08                         clrfaca  php
   3406 C990 C2 20                    +            .byte $c2,$20
                                        
   3407 C992 64 A9                                stz faca
   3408 C994 64 AB                                stz faca+s_word
   3409 C996 28                                   plp
   3410 C997 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;clrfacb: CLEAR FLOATING ACCUMULATOR B
                                        ;
   3416 C998 08                         clrfacb  php
   3417 C999 C2 20                    +            .byte $c2,$20
                                        
   3418 C99B 64 B1                                stz facb
   3419 C99D 64 B3                                stz facb+s_word
   3420 C99F 28                                   plp
   3421 C9A0 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facabcd: CONVERT FACA INTO BCD
                                        ;
   3427 C9A1 A2 03                      facabcd  ldx #s_pfac-1         ;primary accumulator size -1
                                        ;
   3429 C9A3 B5 A9                      .0000010 lda faca,x            ;value to be converted
   3430 C9A5 48                                   pha                   ;preserve
   3431 C9A6 CA                                   dex
   3432 C9A7 10 FA                                bpl .0000010          ;next
                                        ;
   3434 C9A9 A2 05                                ldx #s_sfac-1         ;workspace size
                                        ;
   3436 C9AB 74 B1                      .0000020 stz facb,x            ;clear final result
   3437 C9AD 74 B7                                stz facc,x            ;clear scratchpad
   3438 C9AF CA                                   dex
   3439 C9B0 10 F9                                bpl .0000020
                                        ;
   3441 C9B2 E6 BC                                inc facc+s_sfac-s_byte
   3442 C9B4 F8                                   sed                   ;select decimal mode
   3443 C9B5 A0 1F                                ldy #m_bits-1         ;bits to convert -1
                                        ;
   3445 C9B7 A2 03                      .0000030 ldx #s_pfac-1         ;operand size
   3446 C9B9 18                                   clc                   ;no carry at start
                                        ;
   3448 C9BA 76 A9                      .0000040 ror faca,x            ;grab LS bit in operand
   3449 C9BC CA                                   dex
   3450 C9BD 10 FB                                bpl .0000040
                                        ;
   3452 C9BF 90 0D                                bcc .0000060          ;LS bit clear
                                        ;
   3454 C9C1 18                                   clc
   3455 C9C2 A2 05                                ldx #s_sfac-1
                                        ;
   3457 C9C4 B5 B1                      .0000050 lda facb,x            ;partial result
   3458 C9C6 75 B7                                adc facc,x            ;scratchpad
   3459 C9C8 95 B1                                sta facb,x            ;new partial result
   3460 C9CA CA                                   dex
   3461 C9CB 10 F7                                bpl .0000050
                                        ;
   3463 C9CD 18                                   clc
                                        ;
   3465 C9CE A2 05                      .0000060 ldx #s_sfac-1
                                        ;
   3467 C9D0 B5 B7                      .0000070 lda facc,x            ;scratchpad
   3468 C9D2 75 B7                                adc facc,x            ;double &...
   3469 C9D4 95 B7                                sta facc,x            ;save
   3470 C9D6 CA                                   dex
   3471 C9D7 10 F7                                bpl .0000070
                                        ;
   3473 C9D9 88                                   dey
   3474 C9DA 10 DB                                bpl .0000030          ;next operand bit
                                        ;
   3476 C9DC D8                                   cld
   3477 C9DD A2 00                                ldx #0
   3478 C9DF A0 04                                ldy #s_pfac
                                        ;
   3480 C9E1 68                         .0000080 pla                   ;operand
   3481 C9E2 95 A9                                sta faca,x            ;restore
   3482 C9E4 E8                                   inx
   3483 C9E5 88                                   dey
   3484 C9E6 D0 F9                                bne .0000080          ;next
                                        ;
   3486 C9E8 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;nybtobin: CONVERT ASCII NYBBLE TO BINARY
                                        ;
   3492 C9E9 20 94 CC                   nybtobin jsr toupper           ;convert case if necessary
   3493 C9EC 38                                   sec
   3494 C9ED E9 30                                sbc #'0'              ;change to binary
   3495 C9EF 90 08                                bcc .0000020          ;not a numeral — error
                                        ;
   3497 C9F1 C9 0A                                cmp #10
   3498 C9F3 90 03                                bcc .0000010          ;numeral is 0-9
                                        ;
   3500 C9F5 E9 07                                sbc #a_hexdec+1       ;10-15 ——> A-F
   3501 C9F7 18                                   clc                   ;no conversion error
                                        ;
   3503 C9F8 60                         .0000010 rts
                                        ;
   3505 C9F9 38                         .0000020 sec                   ;conversion error
   3506 C9FA 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;calccnt: COMPUTE BYTE COUNT FROM ADDRESS RANGE
                                        ;
   3512 C9FB 20 98 C9                   calccnt  jsr clrfacb           ;clear accumulator
   3513 C9FE C2 20                    +            .byte $c2,$20
                                        
   3514 CA00 38                                   sec
   3515 CA01 A5 A6                                lda addrb             ;ending address
   3516 CA03 E5 A2                                sbc addra             ;starting address
   3517 CA05 85 B1                                sta facb              ;byte count
   3518 CA07 E2 20                    +            .byte $e2,$20
                                        
   3519 CA09 A5 A8                                lda addrb+s_word      ;handle banks
   3520 CA0B E5 A4                                sbc addra+s_word
   3521 CA0D 85 B3                                sta facb+s_word
   3522 CA0F 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;clroper: CLEAR OPERAND
                                        ;
   3528 CA10 DA                         clroper  phx
   3529 CA11 A2 02                                ldx #s_oper-1
                                        ;
   3531 CA13 74 BD                      .0000010 stz operand,x
   3532 CA15 CA                                   dex
   3533 CA16 10 FB                                bpl .0000010
                                        ;
   3535 CA18 64 CF                                stz eopsize
   3536 CA1A FA                                   plx
   3537 CA1B 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;cpfwsup: FOWARD COPY MEMORY SETUP
                                        ;
   3543 CA1C C2 30                      cpfwsup +         .byte $c2,$30
                                        
   3544 CA1E A2 54                    +            ldx #<opc_mvn
   3544 CA20 00                       +            .byte >opc_mvn
                                        ;"move next" opcode
   3545 CA21 80 05                                bra cpsup
                                        ;         
                                        ;================================================================================
                                        ;
                                        ;cprvsup: REVERSE COPY MEMORY SETUP
                                        ;
   3551 CA23 C2 30                      cprvsup +         .byte $c2,$30
                                        
   3552 CA25 A2 44                    +            ldx #<opc_mvp
   3552 CA27 00                       +            .byte >opc_mvp
                                        ;"move previous" opcode
                                        ;         
                                        ;================================================================================
                                        ;
                                        ;cpsup: COPY MEMORY SETUP
                                        ;
   3558 CA28 48                         cpsup    pha                   ;save banks
   3559 CA29 8A                                   txa                   ;protect...
   3560 CA2A EB                       +            .byte $eb
                                                           ;opcode
   3561 CA2B E2 20                    +            .byte $e2,$20
                                        
   3562 CA2D A2 08                    +            ldx #<(cpcodeee-cpcode-1)
   3562 CA2F 00                       +            .byte >(cpcodeee-cpcode-1)
                                        
                                        ;
   3564 CA30 BF                         .0000010 +         .byte $bf
   3564 CA31 50 CA 00                 +   +         .byte <cpcode,>cpcode,cpcode >> 16
                                     +   
                                        ;transfer copy code to...
   3565 CA34 95 D4                                sta mcftwork,x        ;to workspace
   3566 CA36 CA                                   dex
   3567 CA37 10 F7                                bpl .0000010
                                        ;
   3569 CA39 EB                       +            .byte $eb
                                                           ;recover opcode &...
   3570 CA3A 85 D5                                sta mcftopc           ;set it
   3571 CA3C C2 20                    +            .byte $c2,$20
                                        
   3572 CA3E 68                                   pla                   ;get banks &...
   3573 CA3F 85 D6                                sta mcftbnk           ;set them
                                         
                                        ; We just dynamically created a routine, so the cache (if one is present) has
                                        ; to be invalidated. Otherwise the processor could execute dead code from the
                                        ; cache. Two lines are invalidated in case the code crosses a line boundary.
                                        ;
                                        ;	acc = 16 bit address to invalidate
                                        ;
                                        ; If there is no cache in the processor then these lines can be deleted.
                                        ;-------------------------------------------------------------------------------
                                           		 CPU	FT832
                                           		 MEM	16
   3585 00CA41 48                                    pha
   3586 00CA42 A9 D4 00                              lda	#mcftwork
   3587 00CA45 42 E0 01                     		 cache	#1				; 1= invalidate line identified by address in acc
   3588 00CA48 A9 E4 00                              lda	#mcftwork+16
   3589 00CA4B 42 E0 01                     		 cache	#1
   3590 00CA4E 68                                    pla
                                        		 CPU	W65C02
   3592 CA4F                            		 MEM	8
                                        ;---------------------------------------------
   3594 CA4F 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;cpcode: COPY MEMORY CODE
                                        ;
                                        ;	———————————————————————————————————————————
                                        ;	This code is transfered to workspace when a
                                        ;	copy or fill operation is to be performed.
                                        ;	———————————————————————————————————————————
                                        ;
   3605 CA50 8B                         cpcode +         .byte $8b
                                                           ;must preserve data bank
                                        ;         .rept s_mvinst
   3607 CA51 EA                                     nop                 ;placeholder
   3608 CA52 EA                                     nop
   3609 CA53 EA                                     nop
                                        ;         .endr
   3611 CA54 AB                       +            .byte $ab
                                                           ;restore data bank
   3612 CA55 5C 3D C1 00                          jml monce             ;return to command executive
   3796 = 0000CA59                      cpcodeee =*                    ;placeholder — do not delete
                                        ;
                                        ;================================================================================
                                        ;
                                        ;decdcnt: DECREMENT DUMP COUNT
                                        ;
                                        ;	———————————————————————————————————————————
                                        ;	Preparatory Ops: bytes to process in FACB
                                        ;	                 bytes processed in CHARCNT
                                        ;
                                        ;	Returned Values: .A: used
                                        ;	                 .X: entry value
                                        ;	                 .Y: entry value
                                        ;	                 .C: 1 = count = zero
                                        ;	———————————————————————————————————————————
                                        ;
   3629 CA59 E2 20                      decdcnt +         .byte $e2,$20
                                        
   3630 CA5B A9 00                                lda #0
   3631 CA5D EB                       +            .byte $eb
                                                           ;clear .B
   3632 CA5E A5 B3                                lda facb+s_word       ;count MSW
   3633 CA60 C2 20                    +            .byte $c2,$20
                                        
   3634 CA62 38                                   sec
   3635 CA63 05 B1                                ora facb              ;count LSW
   3636 CA65 F0 13                                beq .0000020          ;zero, just exit
                                        ;
   3638 CA67 A5 B1                                lda facb
   3639 CA69 E5 C6                                sbc charcnt           ;bytes processed
   3640 CA6B 85 B1                                sta facb
   3641 CA6D E2 20                    +            .byte $e2,$20
                                        
   3642 CA6F A5 B3                                lda facb+s_word
   3643 CA71 E9 00                                sbc #0                ;handle borrow
   3644 CA73 90 04                                bcc .0000010          ;underflow
                                        ;
   3646 CA75 85 B3                                sta facb+s_word
   3647 CA77 18                                   clc                   ;count > 0
   3648 CA78 60                                   rts
                                        ;
   3650 CA79 38                         .0000010 sec
                                        ;
   3652 CA7A E2 20                      .0000020 +         .byte $e2,$20
                                        
   3653 CA7C 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;enddest: GET 2ND & 3RD ADDRESSES FOR COMPARE & TRANSFER
                                        ;
   3659 CA7D 20 C1 CA                   enddest  jsr facasize          ;check start...
   3660 CA80 C9 04                                cmp #s_dword          ;for range
   3661 CA82 B0 1E                                bcs .0000010          ;out of range — error
                                        ;
   3663 CA84 20 A3 CA                             jsr facaddra          ;store start
   3664 CA87 20 D5 CA                             jsr getparm           ;get end
   3665 CA8A B0 16                                bcs .0000010          ;not entered — error
                                        ;
   3667 CA8C 20 C1 CA                             jsr facasize          ;check end...
   3668 CA8F C9 04                                cmp #s_dword          ;for range
   3669 CA91 B0 0F                                bcs .0000010          ;out of range — error
                                        ;
   3671 CA93 20 AD CA                             jsr facaddrb          ;store end
   3672 CA96 20 D5 CA                             jsr getparm           ;get destination
   3673 CA99 B0 07                                bcs .0000010          ;not entered — error
                                        ;
   3675 CA9B 20 C1 CA                             jsr facasize          ;check destination...
   3676 CA9E C9 04                                cmp #s_dword          ;for range
   3677 CAA0 90 15                                bcc facaoper          ;store dest address
                                        ;
   3679 CAA2 60                         .0000010 rts                   ;exit w/error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facaddra: COPY FACA TO ADDRA
                                        ;
   3685 CAA3 A2 02                      facaddra ldx #s_xword-1
                                        ;
   3687 CAA5 B5 A9                      .0000010 lda faca,x
   3688 CAA7 95 A2                                sta addra,x
   3689 CAA9 CA                                   dex
   3690 CAAA 10 F9                                bpl .0000010
                                        ;
   3692 CAAC 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facaddrb: COPY FACA TO ADDRB
                                        ;
   3698 CAAD A2 02                      facaddrb ldx #s_xword-1
                                        ;
   3700 CAAF B5 A9                      .0000010 lda faca,x
   3701 CAB1 95 A6                                sta addrb,x
   3702 CAB3 CA                                   dex
   3703 CAB4 10 F9                                bpl .0000010
                                        ;
   3705 CAB6 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facaoper: COPY FACA TO OPERAND
                                        ;
   3711 CAB7 A2 02                      facaoper ldx #s_oper-1
                                        ;
   3713 CAB9 B5 A9                      .0000010 lda faca,x
   3714 CABB 95 BD                                sta operand,x
   3715 CABD CA                                   dex
   3716 CABE 10 F9                                bpl .0000010
                                        ;
   3718 CAC0 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facasize: REPORT OPERAND SIZE IN FACA
                                        ;
                                        ;	——————————————————————————————————————————
                                        ;	Preparatory Ops: operand in FACA
                                        ;
                                        ;	Returned Values: .A: s_byte  (1)
                                        ;	                     s_word  (2)
                                        ;	                     s_xword (3)
                                        ;	                     s_dword (4)
                                        ;
                                        ;	Notes: 1) This function will always report
                                        ;	          a non-zero result.
                                        ;	——————————————————————————————————————————
                                        ;
   3736 CAC1 E2 30                      facasize +         .byte $e2,$30
                                        
   3737 CAC3 A2 03                                ldx #s_dword-1
                                        ;
   3739 CAC5 B5 A9                      .0000010 lda faca,x            ;get byte
   3740 CAC7 D0 03                                bne .0000020          ;done
                                        ;
   3742 CAC9 CA                                   dex
   3743 CACA D0 F9                                bne .0000010          ;next byte
                                        ;
   3745 CACC E8                         .0000020 inx                   ;count=index+1
   3746 CACD 8A                                   txa
   3747 CACE 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getbyte: GET A BYTE FROM MEMORY
                                        ;
   3753 CACF A7 A2                      getbyte +         .byte $a7,addra
                                        ;get a byte
   3754 CAD1 80 3F                                bra incaddra          ;bump address
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getparm: GET A PARAMETER
                                        ;
                                        ;	—————————————————————————————————————————————————
                                        ;	Preparatory Ops: null-terminated input in IBUFFER
                                        ;
                                        ;	Returned Values: .A: chars in converted parameter
                                        ;	                 .X: used
                                        ;	                 .Y: entry value
                                        ;	                 .C: 1 = no parameter entered
                                        ;	—————————————————————————————————————————————————
                                        ;
   3769 CAD3 C6 C1                      getparmr dec ibufidx           ;reread previous char
                                        ;
   3771 CAD5 5A                         getparm  phy                   ;preserve
   3772 CAD6 20 2A C8                             jsr ascbin            ;convert parameter to binary
   3773 CAD9 B0 1C                                bcs .0000040          ;conversion error
                                        ;
   3775 CADB 20 C2 CB                             jsr getcharr          ;reread last char
   3776 CADE D0 08                                bne .0000010          ;not end-of-input
                                        ;
   3778 CAE0 C6 C1                                dec ibufidx           ;reindex to terminator
   3779 CAE2 A5 C6                                lda charcnt           ;get chars processed so far
   3780 CAE4 F0 0C                                beq .0000030          ;none
                                        ;
   3782 CAE6 D0 08                                bne .0000020          ;some
                                        ;
   3784 CAE8 C9 20                      .0000010 cmp #a_blank          ;recognized delimiter
   3785 CAEA F0 04                                beq .0000020          ;end of parameter
                                        ;
   3787 CAEC C9 2C                                cmp #','              ;recognized delimiter
   3788 CAEE D0 07                                bne .0000040          ;unknown delimter
                                        ;
   3790 CAF0 18                         .0000020 clc
   3791 CAF1 24                                   .byte bitzp           ;skip SEC below
                                        ;
   3793 CAF2 38                         .0000030 sec
   3794 CAF3 7A                                   ply                   ;restore
   3795 CAF4 A5 C6                                lda charcnt           ;get count
   3796 CAF6 60                                   rts                   ;done
                                        ;
   3798 CAF7                            .0000040 
                                        ;.rept 3               ;clean up stack
   3800 CAF7 68                          			pla
   3801 CAF8 68                          			pla
   3802 CAF9 68                                     pla
                                        ;        .endr
   3804 CAFA 4C 7C C1                             jmp monerr            ;abort w/error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;nxtaddra: TEST & INCREMENT WORKING ADDRESS 'A'
                                        ;
                                        ;	——————————————————————————————————————————————————
                                        ;	Calling syntax: JSR NXTADDRA
                                        ;
                                        ;	Exit registers: .A: used
                                        ;	                .B: used
                                        ;	                .X: entry value
                                        ;	                .Y: entry value
                                        ;	                DB: entry value
                                        ;	                DP: entry value
                                        ;	                PB: entry value
                                        ;	                SR: NVmxDIZC
                                        ;	                    ||||||||
                                        ;	                    |||||||+———> 0: ADDRA < ADDRB
                                        ;	                    |||||||      1: ADDRA >= ADDRB
                                        ;	                    ||||||+————> undefined
                                        ;	                    |||+++—————> entry value
                                        ;	                    ||+————————> 1
                                        ;	                    ++—————————> undefined
                                        ;	——————————————————————————————————————————————————
                                        ;
   3830 CAFD E2 20                      nxtaddra +         .byte $e2,$20
                                        
   3831 CAFF A5 A4                                lda addra+s_word      ;bits 16-23
   3832 CB01 C5 A8                                cmp addrb+s_word
   3833 CB03 90 0D                                bcc incaddra          ;increment
                                        ;
   3835 CB05 D0 0A                                bne .0000010          ;don't increment
                                        ;
   3837 CB07 C2 20                    +            .byte $c2,$20
                                        
   3838 CB09 A5 A2                                lda addra             ;bits 0-15
   3839 CB0B C5 A6                                cmp addrb             ;condition flags
   3840 CB0D E2 20                    +            .byte $e2,$20
                                        
   3841 CB0F 90 01                                bcc incaddra          ;increment
                                        ;
   3843 CB11 60                         .0000010 rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;incaddra: INCREMENT WORKING ADDRESS 'A'
                                        ;
                                        ;	——————————————————————————————————————————————————
                                        ;	Calling syntax: JSR INCADDRA
                                        ;
                                        ;	Exit registers: .A: entry value
                                        ;	                .B: entry value
                                        ;	                .X: entry value
                                        ;	                .Y: entry value
                                        ;	                DB: entry value
                                        ;	                DP: entry value
                                        ;	                PB: entry value
                                        ;	                SR: NVmxDIZC
                                        ;	                    ||||||||
                                        ;	                    ++++++++———> entry value
                                        ;	——————————————————————————————————————————————————
                                        ;
   3864 CB12 08                         incaddra php
   3865 CB13 C2 20                    +            .byte $c2,$20
                                        
   3866 CB15 E6 A2                                inc addra             ;bump bits 0-15
   3867 CB17 D0 04                                bne .0000010
                                        ;
   3869 CB19 E2 20                    +            .byte $e2,$20
                                        
   3870 CB1B E6 A4                                inc addra+s_word      ;bump bits 16-23
                                        ;
   3872 CB1D 28                         .0000010 plp
   3873 CB1E 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;incoper: INCREMENT OPERAND ADDRESS
                                        ;
   3879 CB1F 18                         incoper  clc
   3880 CB20 08                                   php
   3881 CB21 C2 30                    +            .byte $c2,$30
                                        
   3882 CB23 48                                   pha
   3883 CB24 E6 BD                                inc operand           ;handle base address
   3884 CB26 D0 06                                bne .0000010
                                        ;              
   3886 CB28 E2 20                    +            .byte $e2,$20
                                        
   3887 CB2A E6 BF                                inc operand+s_word    ;handle bank
   3888 CB2C C2 20                    +            .byte $c2,$20
                                        
                                        ;
   3890 CB2E 68                         .0000010 pla
   3891 CB2F 28                                   plp
   3892 CB30 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;instdata: GET INSTRUCTION SIZE & ADDRESSING MODE DATA
                                        ;
                                        ;	——————————————————————————————————
                                        ;	Preparatory Ops: .X: 65C816 opcode
                                        ;
                                        ;	Returned Values: .A: mode flags
                                        ;	                 .X: operand size
                                        ;	                 .Y: mode index
                                        ;	——————————————————————————————————
                                        ;
   3906 CB31 E2 30                      instdata +         .byte $e2,$30
                                        
   3907 CB33 BD AC CE                             lda mnetabam,x        ;addressing mode data
   3908 CB36 48                                   pha                   ;save mode flag bits
   3909 CB37 48                                   pha                   ;save size data
   3910 CB38 29 0F                                and #amodmask         ;extract mode index &...
   3911 CB3A A8                                   tay                   ;save
   3912 CB3B 68                                   pla                   ;recover data
   3913 CB3C 29 30                                and #opsmask          ;mask mode fields &...
                                        ;         .rept n_opslsr        ;extract operand size
   3915 CB3E 4A                                     lsr
   3916 CB3F 4A                                     lsr
   3917 CB40 4A                                     lsr
   3918 CB41 4A                                     lsr
                                        ;         .endr
   3920 CB42 AA                                   tax                   ;operand size
   3921 CB43 68                                   pla                   ;recover mode flags
   3922 CB44 29 C0                                and #vopsmask         ;discard mode & size fields
   3923 CB46 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;offtarg: CONVERT BRANCH OFFSET TO TARGET ADDRESS
                                        ;
                                        ;	———————————————————————————————————————————————
                                        ;	Preparatory Ops:    ADDRA: base address
                                        ;	                 INSTSIZE: instruction size
                                        ;	                  OPERAND: offset
                                        ;
                                        ;	Returned Values:  OPERAND: target address (L/H)
                                        ;	                       .A: used
                                        ;	                       .X: entry value
                                        ;                              .Y: entry value
                                        ;	———————————————————————————————————————————————
                                        ;
   3940 CB47 C2 20                      offtarg +         .byte $c2,$20
                                        
   3941 CB49 A5 A2                                lda addra             ;base address
   3942 CB4B E2 20                    +            .byte $e2,$20
                                        
   3943 CB4D 46 C8                                lsr instsize          ;bit 0 will be set if...
   3944 CB4F B0 07                                bcs .0000010          ;a long branch
                                        ;
   3946 CB51 24 BD                                bit operand           ;short forward or backward?
   3947 CB53 10 03                                bpl .0000010          ;forward
                                        ;
   3949 CB55 EB                       +            .byte $eb
                                                           ;expose address MSB
   3950 CB56 3A                                   dea                   ;back a page
   3951 CB57 EB                       +            .byte $eb
                                                           ;expose address LSB
                                        ;
   3953 CB58 C2 20                      .0000010 +         .byte $c2,$20
                                        
   3954 CB5A 18                                   clc
   3955 CB5B 65 BD                                adc operand           ;calculate target address
   3956 CB5D 85 BD                                sta operand           ;new operand
   3957 CB5F E2 20                    +            .byte $e2,$20
                                        
   3958 CB61 A9 03                                lda #s_xword
   3959 CB63 85 C8                                sta instsize          ;effective instruction size
   3960 CB65 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;setxaddr: SET EXECUTION ADDRESS
                                        ;
   3966 CB66 B0 13                      setxaddr bcs .0000010          ;no address given
                                        ;
   3968 CB68 20 C1 CA                             jsr facasize          ;check address...
   3969 CB6B C9 04                                cmp #s_dword          ;range
   3970 CB6D B0 0D                                bcs .0000020          ;out of range
                                        ;
   3972 CB6F C2 20                    +            .byte $c2,$20
                                        
   3973 CB71 A5 A9                                lda faca              ;execution address
   3974 CB73 85 88                                sta reg_pcx           ;set new PC value
   3975 CB75 E2 20                    +            .byte $e2,$20
                                        
   3976 CB77 A5 AB                                lda faca+s_word
   3977 CB79 85 8A                                sta reg_pbx           ;set new PB value
                                        ;
   3979 CB7B 18                         .0000010 clc                   ;no error
                                        ;
   3981 CB7C 60                         .0000020 rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;targoff: CONVERT BRANCH TARGET ADDRESS TO BRANCH OFFSET                   
                                        ;
                                        ;	—————————————————————————————————————————————————
                                        ;	Preparatory Ops:   ADDRA: instruction address
                                        ;	                 OPERAND: target address
                                        ;
                                        ;	Returned Values: OPERAND: computed offset
                                        ;	                      .A: effective operand size
                                        ;	                      .X: entry value
                                        ;                             .Y: entry value
                                        ;	                      .C: 1 = branch out of range
                                        ;
                                        ;	Execution notes: ADDRB is set to the branch base
                                        ;	                 address.
                                        ;	—————————————————————————————————————————————————
                                        ;
   4001 CB7D 64 C9                      targoff  stz instsize+s_byte   ;always zero
   4002 CB7F A5 C8                                lda instsize          ;instruction size will tell...
   4003 CB81 4A                                   lsr                   ;if long or short branch
                                        ;
                                        ;—————————————————————————————————————————————————
   4213 = 000000BC                      .btype   =facc+5               ;branch type flag
                                        ;—————————————————————————————————————————————————
                                        ;
   4009 CB82 66 BC                                ror .btype            ;set branch type...
                                        ;
                                        ;	x0000000
                                        ;	|
                                        ;	+——————————> 0: short
                                        ;	             1: long
                                        ;
   4016 CB84 C2 20                    +            .byte $c2,$20
                                        
   4017 CB86 18                                   clc
   4018 CB87 A5 A2                                lda addra             ;instruction address
   4019 CB89 65 C8                                adc instsize          ;instruction size
   4020 CB8B 85 A6                                sta addrb             ;base address
   4021 CB8D 38                                   sec
   4022 CB8E A5 BD                                lda operand           ;target address
   4023 CB90 E5 A6                                sbc addrb             ;base address
   4024 CB92 85 BD                                sta operand           ;offset
   4025 CB94 E2 20                    +            .byte $e2,$20
                                        
   4026 CB96 90 15                                bcc .0000040          ;backward branch
                                        ;
   4028 CB98 24 BC                                bit .btype            ;check branch range
   4029 CB9A 30 0A                                bmi .0000020          ;long
                                        ;
                                        ;
                                        ;	process short forward branch...
                                        ;
   4034 CB9C EB                       +            .byte $eb
                                                           ;offset MSB should be zero
   4035 CB9D D0 21                                bne .0000060          ;it isn't — out of range
                                        ;
   4037 CB9F EB                       +            .byte $eb
                                                           ;offset LSB should be $00-$7F
   4038 CBA0 30 1E                                bmi .0000060          ;it isn't — out of range
                                        ;
   4040 CBA2 A9 01                      .0000010 lda #s_byte           ;final instruction size
   4041 CBA4 18                                   clc                   ;branch in range
   4042 CBA5 60                                   rts
                                        ;
                                        ;
                                        ;	process long forward branch...
                                        ;
   4047 CBA6 EB                         .0000020 +         .byte $eb
                                                           ;offset MSB should be positive
   4048 CBA7 30 17                                bmi .0000060          ;it isn't — branch out of range
                                        ;
   4050 CBA9 A9 02                      .0000030 lda #s_word
   4051 CBAB 18                                   clc
   4052 CBAC 60                                   rts
                                        ;
                                        ;
                                        ;	process backward branch...
                                        ;
   4057 CBAD 24 BC                      .0000040 bit .btype            ;long or short?
   4058 CBAF 30 0C                                bmi .0000050          ;long
                                        ;
                                        ;
                                        ;	process short backward branch...
                                        ;
   4063 CBB1 EB                       +            .byte $eb
                                                           ;offset MSB should be negative
   4064 CBB2 10 0C                                bpl .0000060          ;it isn't — out of range
                                        ;
   4066 CBB4 49 FF                                eor #%11111111        ;complement offset MSB 2s 
   4067 CBB6 D0 08                                bne .0000060          ;out of range
                                        ;
   4069 CBB8 EB                       +            .byte $eb
                                                           ;offset LSB should be $80-$FF
   4070 CBB9 30 E7                                bmi .0000010          ;it is — branch in range
                                        ;
   4072 CBBB 80 03                                bra .0000060          ;branch out of range
                                        ;
                                        ;
                                        ;	process long backward branch...
                                        ;
   4077 CBBD EB                         .0000050 +         .byte $eb
                                                           ;offset MSB should be negative
   4078 CBBE 30 E9                                bmi .0000030          ;it is — branch in range
                                        ;
   4080 CBC0 38                         .0000060 sec                   ;range error
   4081 CBC1 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getcharr: GET PREVIOUS INPUT BUFFER CHARACTER
                                        ;
   4087 CBC2 C6 C1                      getcharr dec ibufidx           ;move back a char
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getchar: GET A CHARACTER FROM INPUT BUFFER
                                        ;
                                        ;	——————————————————————————————————————————————
                                        ;	Preparatory Ops : none
                                        ;
                                        ;	Register Returns: .A: character or <NUL>
                                        ;	                  .B: entry value
                                        ;	                  .X: entry value
                                        ;	                  .Y: entry value
                                        ;
                                        ;	MPU Flags: NVmxDIZC
                                        ;	           ||||||||
                                        ;	           |||||||+———> entry value
                                        ;	           ||||||+————> 1: <NUL> gotten
                                        ;	           |||||+—————> entry value
                                        ;	           ||||+——————> entry value
                                        ;	           |||+———————> entry value
                                        ;	           ||+————————> entry value
                                        ;	           |+—————————> not defined
                                        ;	           +——————————> not defined
                                        ;	——————————————————————————————————————————————
                                        ;
   4113 CBC4 DA                         getchar  phx
   4114 CBC5 5A                                   phy
   4115 CBC6 08                                   php                   ;save register sizes
   4116 CBC7 E2 30                    +            .byte $e2,$30
                                                        ;force 8 bits
   4117 CBC9 A6 C1                                ldx ibufidx           ;buffer index
   4118 CBCB BD 00 02                             lda ibuffer,x         ;get char
   4119 CBCE E6 C1                                inc ibufidx           ;bump index
   4120 CBD0 28                                   plp                   ;restore register widths
   4121 CBD1 7A                                   ply
   4122 CBD2 FA                                   plx
                                        ; Changed the following to XBA instruction which seems to work as well.
                                        ; XBA doesn't access the stack memory saving a data memory access,
                                        ; and hence is faster.
   4126 CBD3 EB                       +            .byte $eb
                                        		;	pha                   ;condition...
   4127 CBD4 EB                       +            .byte $eb
                                        		;   pla                   ;.Z
   4128 CBD5 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getpat: GET PATTERN FOR MEMORY CHANGE or SEARCH
                                        ;
                                        ;	—————————————————————————————————————————————————————
                                        ;	Preparatory Ops: Null-terminated pattern in IBUFFER.
                                        ;
                                        ;	Returned Values: .A: used
                                        ;	                 .X: used
                                        ;	                 .Y: pattern length if entered
                                        ;	                 .C: 0 = pattern valid
                                        ;	                     1 = exception:
                                        ;	                 .N  0 = no pattern entered
                                        ;	                     1 = evaluation error
                                        ;
                                        ;	Notes: 1) If pattern is preceded by "'" the following
                                        ;	          characters are interpreted as ASCII.
                                        ;	       2) A maximum of 32 bytes or characters is
                                        ;	          accepted.  Excess input will be discarded.
                                        ;	—————————————————————————————————————————————————————
                                        ;
   4151 CBD6 64 CD                      getpat   stz status            ;clear pattern type indicator
   4152 CBD8 A0 00                                ldy #0                ;pattern index
   4153 CBDA 20 C2 CB                             jsr getcharr          ;get last char
   4154 CBDD F0 3C                                beq .0000070          ;EOS
                                        ;
   4156 CBDF A6 C1                                ldx ibufidx           ;current buffer index
   4157 CBE1 20 22 CC                             jsr getcharw          ;get next
   4158 CBE4 F0 35                                beq .0000070          ;EOS
                                        ;
   4160 CBE6 C9 27                                cmp #''''			; *** watch syntax here, the following line of code was omitted when only ''' was present
   4161 CBE8 D0 04                                bne .0000010          ;not ASCII input
                                        ;
   4163 CBEA 66 CD                                ror status            ;condition flag
   4164 CBEC 80 12                                bra .0000030          ;balance of input is ASCII
                                        ;
   4166 CBEE 86 C1                      .0000010 stx ibufidx           ;restore buffer index
                                        ;
   4168 CBF0 20 D5 CA                   .0000020 jsr getparm           ;evaluate numeric pattern
   4169 CBF3 B0 21                                bcs .0000060          ;done w/pattern
                                        ;
   4171 CBF5 20 C1 CA                             jsr facasize          ;size
   4172 CBF8 C9 02                                cmp #s_word
   4173 CBFA B0 1F                                bcs .0000070          ;not a byte — error
                                        ;
   4175 CBFC A5 A9                                lda faca              ;get byte &...
   4176 CBFE 80 05                                bra .0000040          ;store
                                        ;
   4178 CC00 20 C4 CB                   .0000030 jsr getchar           ;get ASCII char
   4179 CC03 F0 11                                beq .0000060          ;done w/pattern
                                        ;
   4181 CC05 C0 20                      .0000040 cpy #s_auxbuf         ;pattern buffer full?
   4182 CC07 F0 0A                                beq .0000050          ;yes
                                        ;
   4184 CC09 99 51 02                             sta auxbuf,y          ;store pattern
   4185 CC0C C8                                   iny
   4186 CC0D 24 CD                                bit status
   4187 CC0F 10 DF                                bpl .0000020          ;get next numeric value
                                        ;
   4189 CC11 80 ED                                bra .0000030          ;get next ASCII char
                                        ;
   4191 CC13 20 08 C8                   .0000050 jsr alert             ;excess input
                                        ;
   4193 CC16 84 C0                      .0000060 sty auxbufix          ;save pattern size
   4194 CC18 98                                   tya                   ;condition .Z
   4195 CC19 18                                   clc                   ;pattern valid
   4196 CC1A 60                                   rts
                                        ;
                                        ;
                                        ;	no pattern entered...
                                        ;
   4201 CC1B C2 80                      .0000070 +         .byte $c2,%10000000
                                        
   4202 CC1D 38                                   sec
   4203 CC1E 60                                   rts
                                        ;
                                        ;
                                        ;	evaluation error...
                                        ;
   4208 CC1F E2 81                      .0000080 +         .byte $e2,%10000001
                                        
   4209 CC21 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getcharw: GET FROM INPUT BUFFER, DISCARDING WHITESPACE
                                        ;
                                        ;	——————————————————————————————————————————————————
                                        ;	Preparatory Ops: Null-terminated input in IBUFFER.
                                        ;
                                        ;	Returned Values: .A: char or null
                                        ;	                 .X: entry value
                                        ;	                 .Y: entry value
                                        ;	                 .Z: 1 = null terminator detected
                                        ;
                                        ;	Notes: Whitespace is defined as a blank ($20) or a
                                        ;	       horizontal tab ($09).
                                        ;	——————————————————————————————————————————————————
                                        ;
   4227 CC22 20 C4 CB                   getcharw jsr getchar           ;get from buffer
   4228 CC25 F0 08                                beq .0000010          ;EOI
                                        ;
   4230 CC27 C9 20                                cmp #' '
   4231 CC29 F0 F7                                beq getcharw          ;discard whitespace
                                        ;
   4233 CC2B C9 09                                cmp #a_ht             ;also whitespace
   4234 CC2D F0 F3                                beq getcharw
                                        ;
   4236 CC2F 18                         .0000010 clc
   4237 CC30 60                                   rts  
                                        ;
                                        ;================================================================================
                                        ;
                                        ;input: INTERACTIVE INPUT FROM CONSOLE CHANNEL
                                        ;
                                        ;	———————————————————————————————————————————————————————————
                                        ;	Preparatory Ops: Zero IBUFIDX or load IBUFFER with default
                                        ;	                 input & set IBUFIDX to the number of chars
                                        ;	                 loaded into the buffer.
                                        ;
                                        ;	Returned Values: .A: used
                                        ;	                 .X: characters entered
                                        ;	                 .Y: used
                                        ;
                                        ;	Example: STZ IBUFIDX
                                        ;	         JSR INPUT
                                        ;
                                        ;	Notes: Input is collected in IBUFFER & is null-terminated.
                                        ;	       IBUFIDX is reset to zero upon exit.
                                        ;	———————————————————————————————————————————————————————————
                                        ;
   4259 CC31                            input:
   4260 CC31 A6 C1                       	    ldx ibufidx
   4261 CC33 9E 00 02                             stz ibuffer,x         ;be sure buffer is terminated
   4262 CC36 20 74 C7                             jsr dpyibuf           ;print default input if any
   4263 CC39 F4                       +            .byte $f4
   4263 CC3A 04 D0                    +            .word dc_cn
                                        
   4264 CC3C 20 11 C8                             jsr sprint            ;enable cursor
   4265 CC3F A6 C1                                ldx ibufidx           ;starting buffer index
                                        ;
                                        ;
                                        ;	main input loop...
                                        ;
   4270 CC41 20 00 F4                   .0000010 jsr getcha            ;poll for input
   4271 CC44 90 02                                bcc .0000020          ;got something
                                        ;
                                        ;         jsr	$F409          ;wait 'til any IRQ &... (Reschedule tasks)
   4274 CC46 80 F9                                bra .0000010          ;try again
                                        ;
   4276 CC48                            .0000020
   4277 CC48 C9 7F                       		cmp #a_del            ;above ASCII range?
   4278 CC4A B0 F5                                bcs .0000010          ;yes, ignore
                                        ;
   4280 CC4C C9 09                                cmp #a_ht             ;horizontal tab?
   4281 CC4E D0 02                                bne .0000030          ;no
                                        ;
   4283 CC50 A9 20                                lda #a_blank          ;replace <HT> w/blank
                                        ;
   4285 CC52 C9 20                      .0000030 cmp #a_blank          ;control char?
   4286 CC54 90 10                                bcc .0000050          ;yes
                                        ;
                                        ;
                                        ;	process QWERTY character...
                                        ;
   4291 CC56 E0 50                                cpx #s_ibuf           ;room in buffer?
   4292 CC58 B0 05                                bcs .0000040          ;no
                                        ;
   4294 CC5A 9D 00 02                             sta ibuffer,x         ;store char
   4295 CC5D E8                                   inx                   ;bump index
   4296 CC5E 2C                                   .byte bitabs          ;echo char
                                        ;
   4298 CC5F A9 07                      .0000040 lda #a_bel            ;alert user
   4299 CC61 20 06 F4                             jsr putcha
   4300 CC64 80 DB                                bra .0000010          ;get some more
                                        ;
                                        ;
                                        ;	process carriage return...
                                        ;
   4305 CC66 C9 0D                      .0000050 cmp #a_cr             ;carriage return?
   4306 CC68 D0 0E                                bne .0000060          ;no
                                        ;
   4308 CC6A DA                                   phx                   ;protect input count
   4309 CC6B F4                       +            .byte $f4
   4309 CC6C 08 D0                    +            .word dc_co
                                        
   4310 CC6E 20 11 C8                             jsr sprint            ;cursor off
   4311 CC71 FA                                   plx                   ;recover input count
   4312 CC72 9E 00 02                             stz ibuffer,x         ;terminate input &...
   4313 CC75 64 C1                                stz ibufidx           ;reset buffer index
   4314 CC77 60                                   rts                   ;done
                                        ;
                                        ;
                                        ;	process backspace...
                                        ;
   4319 CC78 C9 08                      .0000060 cmp #a_bs             ;backspace?
   4320 CC7A D0 C5                                bne .0000010          ;no
                                        ;
   4322 CC7C 8A                                   txa
   4323 CC7D F0 C2                                beq .0000010          ;no input, ignore <BS>
                                        ;
   4325 CC7F CA                                   dex                   ;1 less char
   4326 CC80 DA                                   phx                   ;preserve count
   4327 CC81 20 C3 C7                             jsr gendbs            ;destructive backspace
   4328 CC84 FA                                   plx                   ;restore count
   4329 CC85 80 BA                                bra .0000010          ;get more input
                                        ;
                                        ;================================================================================
                                        ;
                                        ;lodbnk: LOAD SOURCE & DESTINATION BANKS
                                        ;
   4335 CC87 E2 20                      lodbnk +         .byte $e2,$20
                                        
   4336 CC89 A5 BF                                lda operand+s_word    ;destination bank
   4337 CC8B EB                       +            .byte $eb
                                                           ;make it MSB
   4338 CC8C A5 A4                                lda addra+s_word      ;source bank is LSB
   4339 CC8E 60                                   rts
                                        ;         
                                        ;================================================================================
                                        ;
                                        ;getcharc: GET A CHARACTER FROM INPUT BUFFER & CONVERT CASE
                                        ;
                                        ;	——————————————————————————————————————————————————
                                        ;	Preparatory Ops: Null-terminated input in IBUFFER.
                                        ;
                                        ;	Returned Values: .A: char or null
                                        ;	                 .X: entry value
                                        ;	                 .Y: entry value
                                        ;	                 .Z: 1 = null terminator detected
                                        ;	——————————————————————————————————————————————————
                                        ;
   4354 CC8F 20 C4 CB                   getcharc jsr getchar           ;get from buffer
   4355 CC92 F0 0C                                beq touppera          ;just return
                                        ;
                                        ;================================================================================
                                        ;
                                        ;toupper: FORCE CHARACTER TO UPPER CASE
                                        ;
                                        ;	————————————————————————————————————————————————
                                        ;	Preparatory Ops : .A: character to convert
                                        ;
                                        ;	Register Returns: .A: converted character
                                        ;	                  .B: entry value
                                        ;	                  .X: entry value
                                        ;	                  .Y: entry value
                                        ;
                                        ;	MPU Flags: no change
                                        ;
                                        ;	Notes: 1) This subroutine has no effect on char-
                                        ;	          acters that are not alpha.
                                        ;	————————————————————————————————————————————————
                                        ;
   4375 CC94 08                         toupper  php                   ;protect flags
   4376 CC95 C9 61                                cmp #a_asclcl         ;check char range
   4377 CC97 90 06                                bcc .0000010          ;not LC alpha
                                        ;
   4379 CC99 C9 7B                                cmp #a_asclch+s_byte
   4380 CC9B B0 02                                bcs .0000010          ;not LC alpha
                                        ;
   4382 CC9D 29 5F                                and #a_lctouc         ;force to UC
                                        ;
   4384 CC9F 28                         .0000010 plp                   ;restore flags
                                        ;
   4386 CCA0 60                         touppera rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;teststop: TEST FOR STOP KEY
                                        ;
                                        ;	——————————————————————————————————————————————
                                        ;	Preparatory Ops: none
                                        ;
                                        ;	Returned Values: .A: detected keypress, if any
                                        ;	                 .X: entry value
                                        ;	                 .Y: entry value
                                        ;
                                        ;	MPU Flags: NVmxDIZC
                                        ;	           ||||||||
                                        ;	           |||||||+———> 0: normal key detected
                                        ;	           |||||||      1: <STOP> detected
                                        ;	           +++++++————> not defined
                                        ;
                                        ;	Example: jsr teststop
                                        ;	         bcs stopped
                                        ;
                                        ;	Notes: The symbol STOPKEY defines the ASCII
                                        ;	       value of the "stop key."
                                        ;	——————————————————————————————————————————————
                                        ;
   4412 CCA1 20 00 F4                   teststop jsr getcha            ;poll console
   4413 CCA4 B0 04                                bcs .0000010          ;no input
                                        ;
   4415 CCA6 C9 03                                cmp #stopkey          ;stop key pressed?
   4416 CCA8 F0 01                                beq .0000020          ;yes
                                        ;
   4418 CCAA 18                         .0000010 clc
                                        ;
   4420 CCAB 60                         .0000020 rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;COMMAND PROCESSING DATA TABLES
                                        ;
                                        ;
                                        ;	monitor commands...
                                        ;
   4429 CCAC 41                         mpctab   .byte "A"             ;assemble code
   4430 CCAD 43                                   .byte "C"             ;compare memory ranges
   4431 CCAE 44                                   .byte "D"             ;disassemble code
   4432 CCAF 46                                   .byte "F"             ;fill memory
   4433 CCB0 47                                   .byte "G"             ;execute code
   4434 CCB1 48                                   .byte "H"             ;search memory
   4435 CCB2 4A                                   .byte "J"             ;execute code as subroutine
   4436 CCB3 4D                                   .byte "M"             ;dump memory range
   4437 CCB4 52                                   .byte "R"             ;dump registers
   4438 CCB5 54                                   .byte "T"             ;copy memory range
   4439 CCB6 58                                   .byte "X"             ;exit from monitor
   4440 CCB7 3E                                   .byte ">"             ;change memory
   4441 CCB8 3B                                   .byte ";"             ;change registers
   4668 = 0000000D                      n_mpctab =*-mpctab             ;entries in above table
                                        ;
                                        ;
                                        ;	monitor command jump table...
                                        ;
   4447 CCB9 82 C1                      mpcextab .word monasc-s_byte   ; A  assemble code
   4448 CCBB 44 C4                                .word moncmp-s_byte   ; C  compare memory ranges
   4449 CCBD 5E C3                                .word mondsc-s_byte   ; D  disassemble code
   4450 CCBF 15 C5                                .word monfil-s_byte   ; F  fill memory
   4451 CCC1 B2 C3                                .word monjmp-s_byte   ; G  execute code
   4452 CCC3 7B C5                                .word monhnt-s_byte   ; H  search memory
   4453 CCC5 E3 C3                                .word monjsr-s_byte   ; J  execute code as subroutine
   4454 CCC7 C3 C4                                .word mondmp-s_byte   ; M  dump memory range
   4455 CCC9 97 C0                                .word monreg-s_byte   ; R  dump registers
   4456 CCCB 72 C4                                .word moncpy-s_byte   ; T  copy memory range
   4457 CCCD 2C C6                                .word monxit-s_byte   ; X  exit from monitor
   4458 CCCF 19 C4                                .word monchm-s_byte   ; >  change memory
   4459 CCD1 F1 C5                                .word monchr-s_byte   ; ;  change registers
                                        ;
                                        ;
                                        ;	number conversion...
                                        ;        
   4464 CCD3 10 0A 08 02                basetab  .byte 16,10,8,2       ;supported number bases
   4465 CCD7 04 03 03 01                bitsdtab .byte 4,3,3,1         ;bits per binary digit
   4466 CCDB 04 04 03 01                bitsntab .byte 4,4,3,1         ;bits per ASCII character
   4467 CCDF 03 02 09 02                lzsttab  .byte 3,2,9,2         ;leading zero suppression thresholds
   4468 CCE3 0C 0C 10 30                numstab  .byte 12,12,16,48     ;bin to ASCII conversion numerals
   4469 CCE7 24                         radxtab  .byte c_hex           ;hexadecimal radix
   4470 CCE8 2B                                   .byte c_dec           ;decimal radix
   4471 CCE9 40                                   .byte c_oct           ;octal radix
   4472 CCEA 25                                   .byte c_bin           ;binary radix
   4699 = 00000004                      n_radix  =*-radxtab            ;number of recognized radices
                                        ;
                                        ;
                                        ;	shadow MPU register sizes...
                                        ;
   4478 CCEB 02                         rcvltab  .byte s_mpupbx+s_byte ; PB
   4479 CCEC 03                                   .byte s_mpupcx+s_byte ; PC
   4480 CCED 02                                   .byte s_mpusrx+s_byte ; SR
   4481 CCEE 03                                   .byte s_word+s_byte   ; .C
   4482 CCEF 03                                   .byte s_word+s_byte   ; .X
   4483 CCF0 03                                   .byte s_word+s_byte   ; .Y
   4484 CCF1 03                                   .byte s_mpuspx+s_byte ; SP
   4485 CCF2 03                                   .byte s_mpudpx+s_byte ; DP
   4486 CCF3 02                                   .byte s_mpudbx+s_byte ; DB
   4713 = 00000009                      n_regchv =*-rcvltab            ;total shadow registers
                                        ;
                                        ;================================================================================
                                        ;
                                        ;ASSEMBLER/DISASSEMBLER DATA TABLES
                                        ;
                                        ;
                                        ;	numerically sorted & encoded W65C816S mnemonics...
                                        ;
   4496 CCF4 F2 10                      mnetab   .word mne_xba         ;  0 — XBA
   4497 CCF6 5A 11                                .word mne_lda         ;  1 — LDA
   4498 CCF8 A2 11                                .word mne_pea         ;  2 — PEA
   4499 CCFA 62 12                                .word mne_pha         ;  3 — PHA
   4500 CCFC 62 13                                .word mne_pla         ;  4 — PLA
   4501 CCFE C6 14                                .word mne_bra         ;  5 — BRA
   4502 CD00 E0 14                                .word mne_ora         ;  6 — ORA
   4503 CD02 68 15                                .word mne_sta         ;  7 — STA
   4504 CD04 6A 16                                .word mne_txa         ;  8 — TXA
   4505 CD06 AA 16                                .word mne_tya         ;  9 — TYA
   4506 CD08 62 1A                                .word mne_phb         ; 10 — PHB
   4507 CD0A 62 1B                                .word mne_plb         ; 11 — PLB
   4508 CD0C EA 1C                                .word mne_trb         ; 12 — TRB
   4509 CD0E 2A 1D                                .word mne_tsb         ; 13 — TSB
   4510 CD10 E8 20                                .word mne_sbc         ; 14 — SBC
   4511 CD12 06 21                                .word mne_bcc         ; 15 — BCC
   4512 CD14 44 21                                .word mne_adc         ; 16 — ADC
   4513 CD16 6A 21                                .word mne_tdc         ; 17 — TDC
   4514 CD18 8A 21                                .word mne_dec         ; 18 — DEC
   4515 CD1A A8 21                                .word mne_sec         ; 19 — SEC
   4516 CD1C 48 23                                .word mne_clc         ; 20 — CLC
   4517 CD1E D4 23                                .word mne_inc         ; 21 — INC
   4518 CD20 2A 25                                .word mne_tsc         ; 22 — TSC
   4519 CD22 C6 25                                .word mne_bvc         ; 23 — BVC
   4520 CD24 2A 29                                .word mne_tcd         ; 24 — TCD
   4521 CD26 A8 29                                .word mne_sed         ; 25 — SED
   4522 CD28 62 2A                                .word mne_phd         ; 26 — PHD
   4523 CD2A 48 2B                                .word mne_cld         ; 27 — CLD
   4524 CD2C 62 2B                                .word mne_pld         ; 28 — PLD
   4525 CD2E C4 2B                                .word mne_and         ; 29 — AND
   4526 CD30 32 31                                .word mne_xce         ; 30 — XCE
   4527 CD32 C6 33                                .word mne_bne         ; 31 — BNE
   4528 CD34 B0 50                                .word mne_wai         ; 32 — WAI
   4529 CD36 A2 51                                .word mne_pei         ; 33 — PEI
   4530 CD38 A8 51                                .word mne_sei         ; 34 — SEI
   4531 CD3A 48 53                                .word mne_cli         ; 35 — CLI
   4532 CD3C 86 53                                .word mne_bmi         ; 36 — BMI
   4533 CD3E 66 55                                .word mne_rti         ; 37 — RTI
   4534 CD40 62 62                                .word mne_phk         ; 38 — PHK
   4535 CD42 C6 64                                .word mne_brk         ; 39 — BRK
   4536 CD44 96 6B                                .word mne_jml         ; 40 — JML
   4537 CD46 26 6C                                .word mne_rol         ; 41 — ROL
   4538 CD48 46 6C                                .word mne_bpl         ; 42 — BPL
   4539 CD4A C6 6C                                .word mne_brl         ; 43 — BRL
   4540 CD4C 04 6D                                .word mne_asl         ; 44 — ASL
   4541 CD4E 16 6D                                .word mne_jsl         ; 45 — JSL
   4542 CD50 66 6D                                .word mne_rtl         ; 46 — RTL
   4543 CD52 70 71                                .word mne_wdm         ; 47 — WDM
   4544 CD54 DC 7D                                .word mne_mvn         ; 48 — MVN
   4545 CD56 A6 89                                .word mne_rep         ; 49 — REP
   4546 CD58 A8 89                                .word mne_sep         ; 50 — SEP
   4547 CD5A 62 8A                                .word mne_php         ; 51 — PHP
   4548 CD5C 62 8B                                .word mne_plp         ; 52 — PLP
   4549 CD5E 88 8B                                .word mne_cmp         ; 53 — CMP
   4550 CD60 96 8B                                .word mne_jmp         ; 54 — JMP
   4551 CD62 08 8C                                .word mne_cop         ; 55 — COP
   4552 CD64 1E 8C                                .word mne_nop         ; 56 — NOP
   4553 CD66 68 8D                                .word mne_stp         ; 57 — STP
   4554 CD68 DC 8D                                .word mne_mvp         ; 58 — MVP
   4555 CD6A 86 91                                .word mne_beq         ; 59 — BEQ
   4556 CD6C A2 99                                .word mne_per         ; 60 — PER
   4557 CD6E 0C 9C                                .word mne_eor         ; 61 — EOR
   4558 CD70 26 9C                                .word mne_ror         ; 62 — ROR
   4559 CD72 16 9D                                .word mne_jsr         ; 63 — JSR
   4560 CD74 1A 9D                                .word mne_lsr         ; 64 — LSR
   4561 CD76 06 A1                                .word mne_bcs         ; 65 — BCS
   4562 CD78 2A A1                                .word mne_tcs         ; 66 — TCS
   4563 CD7A 66 A5                                .word mne_rts         ; 67 — RTS
   4564 CD7C C6 A5                                .word mne_bvs         ; 68 — BVS
   4565 CD7E 6A A6                                .word mne_txs         ; 69 — TXS
   4566 CD80 86 AA                                .word mne_bit         ; 70 — BIT
   4567 CD82 48 BB                                .word mne_clv         ; 71 — CLV
   4568 CD84 AA C8                                .word mne_tax         ; 72 — TAX
   4569 CD86 5A C9                                .word mne_ldx         ; 73 — LDX
   4570 CD88 8A C9                                .word mne_dex         ; 74 — DEX
   4571 CD8A 62 CA                                .word mne_phx         ; 75 — PHX
   4572 CD8C 62 CB                                .word mne_plx         ; 76 — PLX
   4573 CD8E D4 CB                                .word mne_inx         ; 77 — INX
   4574 CD90 48 CC                                .word mne_cpx         ; 78 — CPX
   4575 CD92 2A CD                                .word mne_tsx         ; 79 — TSX
   4576 CD94 68 CD                                .word mne_stx         ; 80 — STX
   4577 CD96 AA CE                                .word mne_tyx         ; 81 — TYX
   4578 CD98 AA D0                                .word mne_tay         ; 82 — TAY
   4579 CD9A 5A D1                                .word mne_ldy         ; 83 — LDY
   4580 CD9C 8A D1                                .word mne_dey         ; 84 — DEY
   4581 CD9E 62 D2                                .word mne_phy         ; 85 — PHY
   4582 CDA0 62 D3                                .word mne_ply         ; 86 — PLY
   4583 CDA2 D4 D3                                .word mne_iny         ; 87 — INY
   4584 CDA4 48 D4                                .word mne_cpy         ; 88 — CPY
   4585 CDA6 68 D5                                .word mne_sty         ; 89 — STY
   4586 CDA8 6A D6                                .word mne_txy         ; 90 — TXY
   4587 CDAA 68 DD                                .word mne_stz         ; 91 — STZ
                                        ;
   4815 = 000000B8                      s_mnetab =*-mnetab             ;mnemonic table size
   4816 = 0000005C                      n_mnemon =s_mnetab/s_word      ;total mnemonics
                                        ;
                                        ;
                                        ;	mnemonic lookup indices in opcode order...
                                        ;
   4595 CDAC 27                         mnetabix .byte mne_brkx        ; $00  BRK
   4596 CDAD 06                                   .byte mne_orax        ; $01  ORA (dp,X)
   4597 CDAE 37                                   .byte mne_copx        ; $02  COP
   4598 CDAF 06                                   .byte mne_orax        ; $03  ORA offset,S
   4599 CDB0 0D                                   .byte mne_tsbx        ; $04  TSB dp
   4600 CDB1 06                                   .byte mne_orax        ; $05  ORA dp
   4601 CDB2 2C                                   .byte mne_aslx        ; $06  ASL dp
   4602 CDB3 06                                   .byte mne_orax        ; $07  ORA [dp]
   4603 CDB4 33                                   .byte mne_phpx        ; $08  PHP
   4604 CDB5 06                                   .byte mne_orax        ; $09  ORA #
   4605 CDB6 2C                                   .byte mne_aslx        ; $0A  ASL A
   4606 CDB7 1A                                   .byte mne_phdx        ; $0B  PHD
   4607 CDB8 0D                                   .byte mne_tsbx        ; $0C  TSB abs
   4608 CDB9 06                                   .byte mne_orax        ; $0D  ORA abs
   4609 CDBA 2C                                   .byte mne_aslx        ; $0E  ASL abs
   4610 CDBB 06                                   .byte mne_orax        ; $0F  ORA absl
                                        ;
   4612 CDBC 2A                                   .byte mne_bplx        ; $10  BPL abs
   4613 CDBD 06                                   .byte mne_orax        ; $11  ORA (dp),Y
   4614 CDBE 06                                   .byte mne_orax        ; $12  ORA (dp)
   4615 CDBF 06                                   .byte mne_orax        ; $13  ORA (offset,S),Y
   4616 CDC0 0C                                   .byte mne_trbx        ; $14  TRB dp
   4617 CDC1 06                                   .byte mne_orax        ; $15  ORA dp,X
   4618 CDC2 2C                                   .byte mne_aslx        ; $16  ASL dp,X
   4619 CDC3 06                                   .byte mne_orax        ; $17  ORA [dp],Y
   4620 CDC4 14                                   .byte mne_clcx        ; $18  CLC
   4621 CDC5 06                                   .byte mne_orax        ; $19  ORA abs
   4622 CDC6 15                                   .byte mne_incx        ; $1A  INC A
   4623 CDC7 42                                   .byte mne_tcsx        ; $1B  TCS
   4624 CDC8 0C                                   .byte mne_trbx        ; $1C  TRB abs
   4625 CDC9 06                                   .byte mne_orax        ; $1D  ORA abs,X
   4626 CDCA 2C                                   .byte mne_aslx        ; $1E  ASL abs,X
   4627 CDCB 06                                   .byte mne_orax        ; $1F  ORA absl,X
                                        ;
   4629 CDCC 3F                                   .byte mne_jsrx        ; $20  JSR abs
   4630 CDCD 1D                                   .byte mne_andx        ; $21  AND (dp,X)
   4631 CDCE 2D                                   .byte mne_jslx        ; $22  JSL absl
   4632 CDCF 1D                                   .byte mne_andx        ; $23  AND offset,S
   4633 CDD0 46                                   .byte mne_bitx        ; $24  BIT dp
   4634 CDD1 1D                                   .byte mne_andx        ; $25  AND dp
   4635 CDD2 29                                   .byte mne_rolx        ; $26  ROL dp
   4636 CDD3 1D                                   .byte mne_andx        ; $27  AND [dp]
   4637 CDD4 34                                   .byte mne_plpx        ; $28  PLP
   4638 CDD5 1D                                   .byte mne_andx        ; $29  AND #
   4639 CDD6 29                                   .byte mne_rolx        ; $2A  ROL A
   4640 CDD7 1C                                   .byte mne_pldx        ; $2B  PLD
   4641 CDD8 46                                   .byte mne_bitx        ; $2C  BIT abs
   4642 CDD9 1D                                   .byte mne_andx        ; $2D  AND abs
   4643 CDDA 29                                   .byte mne_rolx        ; $2E  ROL abs
   4644 CDDB 1D                                   .byte mne_andx        ; $2F  AND absl
                                        ;
   4646 CDDC 24                                   .byte mne_bmix        ; $30  BMI abs
   4647 CDDD 1D                                   .byte mne_andx        ; $31  AND (dp),Y
   4648 CDDE 1D                                   .byte mne_andx        ; $32  AND (dp)
   4649 CDDF 1D                                   .byte mne_andx        ; $33  AND (offset,S),Y
   4650 CDE0 46                                   .byte mne_bitx        ; $34  BIT dp,X
   4651 CDE1 1D                                   .byte mne_andx        ; $35  AND dp,X
   4652 CDE2 29                                   .byte mne_rolx        ; $36  ROL dp,X
   4653 CDE3 1D                                   .byte mne_andx        ; $37  AND [dp],Y
   4654 CDE4 13                                   .byte mne_secx        ; $38  SEC
   4655 CDE5 1D                                   .byte mne_andx        ; $39  AND abs,Y
   4656 CDE6 12                                   .byte mne_decx        ; $3A  DEC A
   4657 CDE7 16                                   .byte mne_tscx        ; $3B  TSC
   4658 CDE8 46                                   .byte mne_bitx        ; $3C  BIT abs,X
   4659 CDE9 1D                                   .byte mne_andx        ; $3D  AND abs,X
   4660 CDEA 29                                   .byte mne_rolx        ; $3E  ROL abs,X
   4661 CDEB 1D                                   .byte mne_andx        ; $3F  AND absl,X
                                        ;
   4663 CDEC 25                                   .byte mne_rtix        ; $40  RTI
   4664 CDED 3D                                   .byte mne_eorx        ; $41  EOR (dp,X)
   4665 CDEE 2F                                   .byte mne_wdmx        ; $42  WDM
   4666 CDEF 3D                                   .byte mne_eorx        ; $43  EOR offset,S
   4667 CDF0 3A                                   .byte mne_mvpx        ; $44  MVP sb,db
   4668 CDF1 3D                                   .byte mne_eorx        ; $45  EOR dp
   4669 CDF2 40                                   .byte mne_lsrx        ; $46  LSR dp
   4670 CDF3 3D                                   .byte mne_eorx        ; $47  EOR [dp]
   4671 CDF4 03                                   .byte mne_phax        ; $48  PHA
   4672 CDF5 3D                                   .byte mne_eorx        ; $49  EOR #
   4673 CDF6 40                                   .byte mne_lsrx        ; $4A  LSR A
   4674 CDF7 26                                   .byte mne_phkx        ; $4B  PHK
   4675 CDF8 36                                   .byte mne_jmpx        ; $4C  JMP abs
   4676 CDF9 3D                                   .byte mne_eorx        ; $4D  EOR abs
   4677 CDFA 40                                   .byte mne_lsrx        ; $4E  LSR abs
   4678 CDFB 3D                                   .byte mne_eorx        ; $4F  EOR absl
                                        ;
   4680 CDFC 17                                   .byte mne_bvcx        ; $50  BVC abs
   4681 CDFD 3D                                   .byte mne_eorx        ; $51  EOR (dp),Y
   4682 CDFE 3D                                   .byte mne_eorx        ; $52  EOR (dp)
   4683 CDFF 3D                                   .byte mne_eorx        ; $53  EOR (offset,S),Y
   4684 CE00 30                                   .byte mne_mvnx        ; $54  MVN sb,db
   4685 CE01 3D                                   .byte mne_eorx        ; $55  EOR dp,X
   4686 CE02 40                                   .byte mne_lsrx        ; $56  LSR dp,X
   4687 CE03 3D                                   .byte mne_eorx        ; $57  EOR [dp],Y
   4688 CE04 23                                   .byte mne_clix        ; $58  CLI
   4689 CE05 3D                                   .byte mne_eorx        ; $59  EOR abs,Y
   4690 CE06 55                                   .byte mne_phyx        ; $5A  PHY
   4691 CE07 18                                   .byte mne_tcdx        ; $5B  TCD
   4692 CE08 28                                   .byte mne_jmlx        ; $5C  JML absl
   4693 CE09 3D                                   .byte mne_eorx        ; $5D  EOR abs,X
   4694 CE0A 40                                   .byte mne_lsrx        ; $5E  LSR abs,X
   4695 CE0B 3D                                   .byte mne_eorx        ; $5F  EOR absl,X
                                        ;
   4697 CE0C 43                                   .byte mne_rtsx        ; $60  RTS
   4698 CE0D 10                                   .byte mne_adcx        ; $61  ADC (dp,X)
   4699 CE0E 3C                                   .byte mne_perx        ; $62  PER
   4700 CE0F 10                                   .byte mne_adcx        ; $63  ADC offset,S
   4701 CE10 5B                                   .byte mne_stzx        ; $64  STZ dp
   4702 CE11 10                                   .byte mne_adcx        ; $65  ADC dp
   4703 CE12 3E                                   .byte mne_rorx        ; $66  ROR dp
   4704 CE13 10                                   .byte mne_adcx        ; $67  ADC [dp]
   4705 CE14 04                                   .byte mne_plax        ; $68  PLA
   4706 CE15 10                                   .byte mne_adcx        ; $69  ADC #
   4707 CE16 3E                                   .byte mne_rorx        ; $6A  ROR A
   4708 CE17 2E                                   .byte mne_rtlx        ; $6B  RTL
   4709 CE18 36                                   .byte mne_jmpx        ; $6C  JMP (abs)
   4710 CE19 10                                   .byte mne_adcx        ; $6D  ADC abs
   4711 CE1A 3E                                   .byte mne_rorx        ; $6E  ROR abs
   4712 CE1B 10                                   .byte mne_adcx        ; $6F  ADC absl
                                        ;
   4714 CE1C 44                                   .byte mne_bvsx        ; $70  BVS abs
   4715 CE1D 10                                   .byte mne_adcx        ; $71  ADC (dp),Y
   4716 CE1E 10                                   .byte mne_adcx        ; $72  ADC (dp)
   4717 CE1F 10                                   .byte mne_adcx        ; $73  ADC (offset,S),Y
   4718 CE20 5B                                   .byte mne_stzx        ; $74  STZ dp,X
   4719 CE21 10                                   .byte mne_adcx        ; $75  ADC dp,X
   4720 CE22 3E                                   .byte mne_rorx        ; $76  ROR dp,X
   4721 CE23 10                                   .byte mne_adcx        ; $77  ADC [dp],Y
   4722 CE24 22                                   .byte mne_seix        ; $78  SEI
   4723 CE25 10                                   .byte mne_adcx        ; $79  ADC abs,Y
   4724 CE26 56                                   .byte mne_plyx        ; $7A  PLY
   4725 CE27 11                                   .byte mne_tdcx        ; $7B  TDC
   4726 CE28 36                                   .byte mne_jmpx        ; $7C  JMP (abs,X)
   4727 CE29 10                                   .byte mne_adcx        ; $7D  ADC abs,X
   4728 CE2A 3E                                   .byte mne_rorx        ; $7E  ROR abs,X
   4729 CE2B 10                                   .byte mne_adcx        ; $7F  ADC absl,X
                                        ;
   4731 CE2C 05                                   .byte mne_brax        ; $80  BRA abs
   4732 CE2D 07                                   .byte mne_stax        ; $81  STA (dp,X)
   4733 CE2E 2B                                   .byte mne_brlx        ; $82  BRL abs
   4734 CE2F 07                                   .byte mne_stax        ; $83  STA offset,S
   4735 CE30 59                                   .byte mne_styx        ; $84  STY dp
   4736 CE31 07                                   .byte mne_stax        ; $85  STA dp
   4737 CE32 50                                   .byte mne_stxx        ; $86  STX dp
   4738 CE33 07                                   .byte mne_stax        ; $87  STA [dp]
   4739 CE34 54                                   .byte mne_deyx        ; $88  DEY
   4740 CE35 46                                   .byte mne_bitx        ; $89  BIT #
   4741 CE36 08                                   .byte mne_txax        ; $8A  TXA
   4742 CE37 0A                                   .byte mne_phbx        ; $8B  PHB
   4743 CE38 59                                   .byte mne_styx        ; $8C  STY abs
   4744 CE39 07                                   .byte mne_stax        ; $8D  STA abs
   4745 CE3A 50                                   .byte mne_stxx        ; $8E  STX abs
   4746 CE3B 07                                   .byte mne_stax        ; $8F  STA absl
                                        ;
   4748 CE3C 0F                                   .byte mne_bccx        ; $90  BCC abs
   4749 CE3D 07                                   .byte mne_stax        ; $91  STA (dp),Y
   4750 CE3E 07                                   .byte mne_stax        ; $92  STA (dp)
   4751 CE3F 07                                   .byte mne_stax        ; $93  STA (offset,S),Y
   4752 CE40 59                                   .byte mne_styx        ; $94  STY dp,X
   4753 CE41 07                                   .byte mne_stax        ; $95  STA dp,X
   4754 CE42 50                                   .byte mne_stxx        ; $96  STX dp,Y
   4755 CE43 07                                   .byte mne_stax        ; $97  STA [dp],Y
   4756 CE44 09                                   .byte mne_tyax        ; $98  TYA
   4757 CE45 07                                   .byte mne_stax        ; $99  STA abs,Y
   4758 CE46 45                                   .byte mne_txsx        ; $9A  TXS
   4759 CE47 5A                                   .byte mne_txyx        ; $9B  TXY
   4760 CE48 5B                                   .byte mne_stzx        ; $9C  STZ abs
   4761 CE49 07                                   .byte mne_stax        ; $9D  STA abs,X
   4762 CE4A 5B                                   .byte mne_stzx        ; $9E  STZ abs,X
   4763 CE4B 07                                   .byte mne_stax        ; $9F  STA absl,X
                                        ;
   4765 CE4C 53                                   .byte mne_ldyx        ; $A0  LDY #
   4766 CE4D 01                                   .byte mne_ldax        ; $A1  LDA (dp,X)
   4767 CE4E 49                                   .byte mne_ldxx        ; $A2  LDX #
   4768 CE4F 01                                   .byte mne_ldax        ; $A3  LDA offset,S
   4769 CE50 53                                   .byte mne_ldyx        ; $A4  LDY dp
   4770 CE51 01                                   .byte mne_ldax        ; $A5  LDA dp
   4771 CE52 49                                   .byte mne_ldxx        ; $A6  LDX dp
   4772 CE53 01                                   .byte mne_ldax        ; $A7  LDA [dp]
   4773 CE54 52                                   .byte mne_tayx        ; $A8  TAY
   4774 CE55 01                                   .byte mne_ldax        ; $A9  LDA #
   4775 CE56 48                                   .byte mne_taxx        ; $AA  TAX
   4776 CE57 0B                                   .byte mne_plbx        ; $AB  PLB
   4777 CE58 53                                   .byte mne_ldyx        ; $AC  LDY abs
   4778 CE59 01                                   .byte mne_ldax        ; $AD  LDA abs
   4779 CE5A 49                                   .byte mne_ldxx        ; $AE  LDX abs
   4780 CE5B 01                                   .byte mne_ldax        ; $AF  LDA absl
                                        ;
   4782 CE5C 41                                   .byte mne_bcsx        ; $B0  BCS abs
   4783 CE5D 01                                   .byte mne_ldax        ; $B1  LDA (dp),Y
   4784 CE5E 01                                   .byte mne_ldax        ; $B2  LDA (dp)
   4785 CE5F 01                                   .byte mne_ldax        ; $B3  LDA (offset,S),Y
   4786 CE60 53                                   .byte mne_ldyx        ; $B4  LDY dp,X
   4787 CE61 01                                   .byte mne_ldax        ; $B5  LDA dp,X
   4788 CE62 49                                   .byte mne_ldxx        ; $B6  LDX dp,Y
   4789 CE63 01                                   .byte mne_ldax        ; $B7  LDA [dp],Y
   4790 CE64 47                                   .byte mne_clvx        ; $B8  CLV
   4791 CE65 01                                   .byte mne_ldax        ; $B9  LDA abs,Y
   4792 CE66 4F                                   .byte mne_tsxx        ; $BA  TSX
   4793 CE67 51                                   .byte mne_tyxx        ; $BB  TYX
   4794 CE68 53                                   .byte mne_ldyx        ; $BC  LDY abs,X
   4795 CE69 01                                   .byte mne_ldax        ; $BD  LDA abs,X
   4796 CE6A 49                                   .byte mne_ldxx        ; $BE  LDX abs,Y
   4797 CE6B 01                                   .byte mne_ldax        ; $BF  LDA absl,X
                                        ;
   4799 CE6C 58                                   .byte mne_cpyx        ; $C0  CPY #
   4800 CE6D 35                                   .byte mne_cmpx        ; $C1  CMP (dp,X)
   4801 CE6E 31                                   .byte mne_repx        ; $C2  REP #
   4802 CE6F 35                                   .byte mne_cmpx        ; $C3  CMP offset,S
   4803 CE70 58                                   .byte mne_cpyx        ; $C4  CPY dp
   4804 CE71 35                                   .byte mne_cmpx        ; $C5  CMP dp
   4805 CE72 12                                   .byte mne_decx        ; $C6  DEC dp
   4806 CE73 35                                   .byte mne_cmpx        ; $C7  CMP [dp]
   4807 CE74 57                                   .byte mne_inyx        ; $C8  INY
   4808 CE75 35                                   .byte mne_cmpx        ; $C9  CMP #
   4809 CE76 4A                                   .byte mne_dexx        ; $CA  DEX
   4810 CE77 20                                   .byte mne_waix        ; $CB  WAI
   4811 CE78 58                                   .byte mne_cpyx        ; $CC  CPY abs
   4812 CE79 35                                   .byte mne_cmpx        ; $CD  CMP abs
   4813 CE7A 12                                   .byte mne_decx        ; $CE  DEC abs
   4814 CE7B 35                                   .byte mne_cmpx        ; $CF  CMP absl
                                        ;
   4816 CE7C 1F                                   .byte mne_bnex        ; $D0  BNE abs
   4817 CE7D 35                                   .byte mne_cmpx        ; $D1  CMP (dp),Y
   4818 CE7E 35                                   .byte mne_cmpx        ; $D2  CMP (dp)
   4819 CE7F 35                                   .byte mne_cmpx        ; $D3  CMP (offset,S),Y
   4820 CE80 21                                   .byte mne_peix        ; $D4  PEI dp
   4821 CE81 35                                   .byte mne_cmpx        ; $D5  CMP dp,X
   4822 CE82 12                                   .byte mne_decx        ; $D6  DEC dp,X
   4823 CE83 35                                   .byte mne_cmpx        ; $D7  CMP [dp],Y
   4824 CE84 1B                                   .byte mne_cldx        ; $D8  CLD
   4825 CE85 35                                   .byte mne_cmpx        ; $D9  CMP abs,Y
   4826 CE86 4B                                   .byte mne_phxx        ; $DA  PHX
   4827 CE87 39                                   .byte mne_stpx        ; $DB  STP
   4828 CE88 36                                   .byte mne_jmpx        ; $DC  JMP [abs]
   4829 CE89 35                                   .byte mne_cmpx        ; $DD  CMP abs,X
   4830 CE8A 12                                   .byte mne_decx        ; $DE  DEC abs,X
   4831 CE8B 35                                   .byte mne_cmpx        ; $DF  CMP absl,X
                                        ;
   4833 CE8C 4E                                   .byte mne_cpxx        ; $E0  CPX #
   4834 CE8D 0E                                   .byte mne_sbcx        ; $E1  SBC (dp,X)
   4835 CE8E 32                                   .byte mne_sepx        ; $E2  SEP #
   4836 CE8F 0E                                   .byte mne_sbcx        ; $E3  SBC offset,S
   4837 CE90 4E                                   .byte mne_cpxx        ; $E4  CPX dp
   4838 CE91 0E                                   .byte mne_sbcx        ; $E5  SBC dp
   4839 CE92 15                                   .byte mne_incx        ; $E6  INC dp
   4840 CE93 0E                                   .byte mne_sbcx        ; $E7  SBC [dp]
   4841 CE94 4D                                   .byte mne_inxx        ; $E8  INX
   4842 CE95 0E                                   .byte mne_sbcx        ; $E9  SBC #
   4843 CE96 38                                   .byte mne_nopx        ; $EA  NOP
   4844 CE97 00                                   .byte mne_xbax        ; $EB  XBA
   4845 CE98 4E                                   .byte mne_cpxx        ; $EC  CPX abs
   4846 CE99 0E                                   .byte mne_sbcx        ; $ED  SBC abs
   4847 CE9A 15                                   .byte mne_incx        ; $EE  INC abs
   4848 CE9B 0E                                   .byte mne_sbcx        ; $EF  SBC absl
                                        ;
   4850 CE9C 3B                                   .byte mne_beqx        ; $F0  BEQ abs
   4851 CE9D 0E                                   .byte mne_sbcx        ; $F1  SBC (dp),Y
   4852 CE9E 0E                                   .byte mne_sbcx        ; $F2  SBC (dp)
   4853 CE9F 0E                                   .byte mne_sbcx        ; $F3  SBC (offset,S),Y
   4854 CEA0 02                                   .byte mne_peax        ; $F4  PEA #
   4855 CEA1 0E                                   .byte mne_sbcx        ; $F5  SBC dp,X
   4856 CEA2 15                                   .byte mne_incx        ; $F6  INC dp,X
   4857 CEA3 0E                                   .byte mne_sbcx        ; $F7  SBC [dp],Y
   4858 CEA4 19                                   .byte mne_sedx        ; $F8  SED
   4859 CEA5 0E                                   .byte mne_sbcx        ; $F9  SBC abs,Y
   4860 CEA6 4C                                   .byte mne_plxx        ; $FA  PLX
   4861 CEA7 1E                                   .byte mne_xcex        ; $FB  XCE
   4862 CEA8 3F                                   .byte mne_jsrx        ; $FC  JSR (abs,X)
   4863 CEA9 0E                                   .byte mne_sbcx        ; $FD  SBC abs,X
   4864 CEAA 15                                   .byte mne_incx        ; $FE  INC abs,X
   4865 CEAB 0E                                   .byte mne_sbcx        ; $FF  SBC absl,X
                                        ;
                                        ;
                                        ;	instruction addressing modes & sizes in opcode order...
                                        ;
                                        ;	    xxxxxxxx
                                        ;	    ||||||||
                                        ;	    ||||++++———> Addressing Mode
                                        ;	    ||||         ——————————————————————————————————
                                        ;	    ||||          0000  dp, abs, absl, implied or A
                                        ;	    ||||          0001  #
                                        ;	    ||||          0010  dp,X, abs,X or absl,X
                                        ;	    ||||          0011  dp,Y or abs,Y
                                        ;	    ||||          0100  (dp) or (abs)
                                        ;	    ||||          0101  [dp] or [abs]
                                        ;	    ||||          0110  [dp],Y
                                        ;	    ||||          0111  (dp,X) or (abs,X)
                                        ;	    ||||          1000  (dp),Y
                                        ;	    ||||          1001  offset,S
                                        ;	    ||||          1010  (offset,S),Y
                                        ;	    ||||          1011  sbnk,dbnk (MVN or MVP)
                                        ;	    ||||          —-—-—-—-—-—-—-—-—-—-—-—-—-—-—-—-—
                                        ;	    ||||           #    = immediate
                                        ;	    ||||           A    = accumulator
                                        ;	    ||||           abs  = absolute
                                        ;	    ||||           absl = absolute long
                                        ;	    ||||           dbnk = destination bank
                                        ;	    ||||           dp   = direct (zero) page
                                        ;	    ||||           S    = stack relative
                                        ;	    ||||           sbnk = source bank
                                        ;	    ||||         ——————————————————————————————————
                                        ;	    ||||
                                        ;	    ||++———————> binary-encoded operand size
                                        ;	    |+—————————> 1: relative branch instruction
                                        ;	    +——————————> 1: variable operand size...
                                        ;
                                        ;	    —————————————————————————————————————————————————————————————
                                        ;	    Variable operand size refers to an immediate mode instruction
                                        ;	    that can accept either an 8 or 16 bit operand.  During instr-
                                        ;	    uction assembly, an 8 bit operand can be forced to 16 bits by
                                        ;	    preceding the operand field with !,  e.g.,  LDA !#$01,  which
                                        ;	    will assemble as $A9 $01 $00.
                                        ;	    —————————————————————————————————————————————————————————————
                                        ;
   4909 CEAC 00                         mnetabam .byte ops0 | am_nam   ; $00  BRK
   4910 CEAD 17                                   .byte ops1 | am_indx  ; $01  ORA (dp,X)
   4911 CEAE 10                                   .byte ops1 | am_nam   ; $02  COP
   4912 CEAF 19                                   .byte ops1 | am_stk   ; $03  ORA offset,S
   4913 CEB0 10                                   .byte ops1 | am_nam   ; $04  TSB dp
   4914 CEB1 10                                   .byte ops1 | am_nam   ; $05  ORA dp
   4915 CEB2 10                                   .byte ops1 | am_nam   ; $06  ASL dp
   4916 CEB3 15                                   .byte ops1 | am_indl  ; $07  ORA [dp]
   4917 CEB4 00                                   .byte ops0 | am_nam   ; $08  PHP
   4918 CEB5 91                                   .byte vops | am_imm   ; $09  ORA #
   4919 CEB6 00                                   .byte ops0 | am_nam   ; $0A  ASL A
   4920 CEB7 00                                   .byte ops0 | am_nam   ; $0B  PHD
   4921 CEB8 20                                   .byte ops2 | am_nam   ; $0C  TSB abs
   4922 CEB9 20                                   .byte ops2 | am_nam   ; $0D  ORA abs
   4923 CEBA 20                                   .byte ops2 | am_nam   ; $0E  ASL abs
   4924 CEBB 30                                   .byte ops3 | am_nam   ; $0F  ORA absl
                                        ;
   4926 CEBC 50                                   .byte bop1 | am_nam   ; $10  BPL abs
   4927 CEBD 18                                   .byte ops1 | am_indy  ; $11  ORA (dp),Y
   4928 CEBE 14                                   .byte ops1 | am_ind   ; $12  ORA (dp)
   4929 CEBF 1A                                   .byte ops1 | am_stky  ; $13  ORA (offset,S),Y
   4930 CEC0 10                                   .byte ops1 | am_nam   ; $14  TRB dp
   4931 CEC1 12                                   .byte ops1 | am_adrx  ; $15  ORA dp,X
   4932 CEC2 12                                   .byte ops1 | am_adrx  ; $16  ASL dp,X
   4933 CEC3 16                                   .byte ops1 | am_indly ; $17  ORA [dp],Y
   4934 CEC4 00                                   .byte ops0 | am_nam   ; $18  CLC
   4935 CEC5 20                                   .byte ops2 | am_nam   ; $19  ORA abs
   4936 CEC6 00                                   .byte ops0 | am_nam   ; $1A  INC A
   4937 CEC7 00                                   .byte ops0 | am_nam   ; $1B  TCS
   4938 CEC8 20                                   .byte ops2 | am_nam   ; $1C  TRB abs
   4939 CEC9 22                                   .byte ops2 | am_adrx  ; $1D  ORA abs,X
   4940 CECA 22                                   .byte ops2 | am_adrx  ; $1E  ASL abs,X
   4941 CECB 32                                   .byte ops3 | am_adrx  ; $1F  ORA absl,X
                                        ;
   4943 CECC 20                                   .byte ops2 | am_nam   ; $20  JSR abs
   4944 CECD 17                                   .byte ops1 | am_indx  ; $21  AND (dp,X)
   4945 CECE 30                                   .byte ops3 | am_nam   ; $22  JSL absl
   4946 CECF 19                                   .byte ops1 | am_stk   ; $23  AND offset,S
   4947 CED0 10                                   .byte ops1 | am_nam   ; $24  BIT dp
   4948 CED1 10                                   .byte ops1 | am_nam   ; $25  AND dp
   4949 CED2 10                                   .byte ops1 | am_nam   ; $26  ROL dp
   4950 CED3 15                                   .byte ops1 | am_indl  ; $27  AND [dp]
   4951 CED4 00                                   .byte ops0 | am_nam   ; $28  PLP
   4952 CED5 91                                   .byte vops | am_imm   ; $29  AND #
   4953 CED6 00                                   .byte ops0 | am_nam   ; $2A  ROL A
   4954 CED7 00                                   .byte ops0 | am_nam   ; $2B  PLD
   4955 CED8 20                                   .byte ops2 | am_nam   ; $2C  BIT abs
   4956 CED9 20                                   .byte ops2 | am_nam   ; $2D  AND abs
   4957 CEDA 20                                   .byte ops2 | am_nam   ; $2E  ROL abs
   4958 CEDB 30                                   .byte ops3 | am_nam   ; $2F  AND absl
                                        ;
   4960 CEDC 50                                   .byte bop1 | am_nam   ; $30  BMI abs
   4961 CEDD 18                                   .byte ops1 | am_indy  ; $31  AND (dp),Y
   4962 CEDE 14                                   .byte ops1 | am_ind   ; $32  AND (dp)
   4963 CEDF 1A                                   .byte ops1 | am_stky  ; $33  AND (offset,S),Y
   4964 CEE0 12                                   .byte ops1 | am_adrx  ; $34  BIT dp,X
   4965 CEE1 12                                   .byte ops1 | am_adrx  ; $35  AND dp,X
   4966 CEE2 12                                   .byte ops1 | am_adrx  ; $36  ROL dp,X
   4967 CEE3 16                                   .byte ops1 | am_indly ; $37  AND [dp],Y
   4968 CEE4 00                                   .byte ops0 | am_nam   ; $38  SEC
   4969 CEE5 23                                   .byte ops2 | am_adry  ; $39  AND abs,Y
   4970 CEE6 00                                   .byte ops0 | am_nam   ; $3A  DEC A
   4971 CEE7 00                                   .byte ops0 | am_nam   ; $3B  TSC
   4972 CEE8 22                                   .byte ops2 | am_adrx  ; $3C  BIT abs,X
   4973 CEE9 22                                   .byte ops2 | am_adrx  ; $3D  AND abs,X
   4974 CEEA 22                                   .byte ops2 | am_adrx  ; $3E  ROL abs,X
   4975 CEEB 32                                   .byte ops3 | am_adrx  ; $3F  AND absl,X
                                        ;
   4977 CEEC 00                                   .byte ops0 | am_nam   ; $40  RTI
   4978 CEED 17                                   .byte ops1 | am_indx  ; $41  EOR (dp,X)
   4979 CEEE 00                                   .byte ops0 | am_nam   ; $42  WDM
   4980 CEEF 19                                   .byte ops1 | am_stk   ; $43  EOR offset,S
   4981 CEF0 2B                                   .byte ops2 | am_move  ; $44  MVP sb,db
   4982 CEF1 10                                   .byte ops1 | am_nam   ; $45  EOR dp
   4983 CEF2 10                                   .byte ops1 | am_nam   ; $46  LSR dp
   4984 CEF3 15                                   .byte ops1 | am_indl  ; $47  EOR [dp]
   4985 CEF4 00                                   .byte ops0 | am_nam   ; $48  PHA
   4986 CEF5 91                                   .byte vops | am_imm   ; $49  EOR #
   4987 CEF6 00                                   .byte ops0 | am_nam   ; $4A  LSR A
   4988 CEF7 00                                   .byte ops0 | am_nam   ; $4B  PHK
   4989 CEF8 20                                   .byte ops2 | am_nam   ; $4C  JMP abs
   4990 CEF9 20                                   .byte ops2 | am_nam   ; $4D  EOR abs
   4991 CEFA 20                                   .byte ops2 | am_nam   ; $4E  LSR abs
   4992 CEFB 30                                   .byte ops3 | am_nam   ; $4F  EOR absl
                                        ;
   4994 CEFC 50                                   .byte bop1 | am_nam   ; $50  BVC abs
   4995 CEFD 18                                   .byte ops1 | am_indy  ; $51  EOR (dp),Y
   4996 CEFE 14                                   .byte ops1 | am_ind   ; $52  EOR (dp)
   4997 CEFF 1A                                   .byte ops1 | am_stky  ; $53  EOR (offset,S),Y
   4998 CF00 2B                                   .byte ops2 | am_move  ; $54  MVN sb,db
   4999 CF01 12                                   .byte ops1 | am_adrx  ; $55  EOR dp,X
   5000 CF02 12                                   .byte ops1 | am_adrx  ; $56  LSR dp,X
   5001 CF03 16                                   .byte ops1 | am_indly ; $57  EOR [dp],Y
   5002 CF04 00                                   .byte ops0 | am_nam   ; $58  CLI
   5003 CF05 23                                   .byte ops2 | am_adry  ; $59  EOR abs,Y
   5004 CF06 00                                   .byte ops0 | am_nam   ; $5A  PHY
   5005 CF07 00                                   .byte ops0 | am_nam   ; $5B  TCD
   5006 CF08 30                                   .byte ops3 | am_nam   ; $5C  JML absl
   5007 CF09 22                                   .byte ops2 | am_adrx  ; $5D  EOR abs,X
   5008 CF0A 22                                   .byte ops2 | am_adrx  ; $5E  LSR abs,X
   5009 CF0B 32                                   .byte ops3 | am_adrx  ; $5F  EOR absl,X
                                        ;
   5011 CF0C 00                                   .byte ops0 | am_nam   ; $60  RTS
   5012 CF0D 17                                   .byte ops1 | am_indx  ; $61  ADC (dp,X)
   5013 CF0E 60                                   .byte bop2 | am_nam   ; $62  PER
   5014 CF0F 19                                   .byte ops1 | am_stk   ; $63  ADC offset,S
   5015 CF10 10                                   .byte ops1 | am_nam   ; $64  STZ dp
   5016 CF11 10                                   .byte ops1 | am_nam   ; $65  ADC dp
   5017 CF12 10                                   .byte ops1 | am_nam   ; $66  ROR dp
   5018 CF13 15                                   .byte ops1 | am_indl  ; $67  ADC [dp]
   5019 CF14 00                                   .byte ops0 | am_nam   ; $68  PLA
   5020 CF15 91                                   .byte vops | am_imm   ; $69  ADC #
   5021 CF16 00                                   .byte ops0 | am_nam   ; $6A  ROR A
   5022 CF17 00                                   .byte ops0 | am_nam   ; $6B  RTL
   5023 CF18 24                                   .byte ops2 | am_ind   ; $6C  JMP (abs)
   5024 CF19 20                                   .byte ops2 | am_nam   ; $6D  ADC abs
   5025 CF1A 20                                   .byte ops2 | am_nam   ; $6E  ROR abs
   5026 CF1B 30                                   .byte ops3 | am_nam   ; $6F  ADC absl
                                        ;
   5028 CF1C 50                                   .byte bop1 | am_nam   ; $70  BVS abs
   5029 CF1D 18                                   .byte ops1 | am_indy  ; $71  ADC (dp),Y
   5030 CF1E 14                                   .byte ops1 | am_ind   ; $72  ADC (dp)
   5031 CF1F 1A                                   .byte ops1 | am_stky  ; $73  ADC (offset,S),Y
   5032 CF20 12                                   .byte ops1 | am_adrx  ; $74  STZ dp,X
   5033 CF21 12                                   .byte ops1 | am_adrx  ; $75  ADC dp,X
   5034 CF22 12                                   .byte ops1 | am_adrx  ; $76  ROR dp,X
   5035 CF23 16                                   .byte ops1 | am_indly ; $77  ADC [dp],Y
   5036 CF24 00                                   .byte ops0 | am_nam   ; $78  SEI
   5037 CF25 23                                   .byte ops2 | am_adry  ; $79  ADC abs,Y
   5038 CF26 00                                   .byte ops0 | am_nam   ; $7A  PLY
   5039 CF27 00                                   .byte ops0 | am_nam   ; $7B  TDC
   5040 CF28 27                                   .byte ops2 | am_indx  ; $7C  JMP (abs,X)
   5041 CF29 22                                   .byte ops2 | am_adrx  ; $7D  ADC abs,X
   5042 CF2A 22                                   .byte ops2 | am_adrx  ; $7E  ROR abs,X
   5043 CF2B 32                                   .byte ops3 | am_adrx  ; $7F  ADC absl,X
                                        ;
   5045 CF2C 50                                   .byte bop1 | am_nam   ; $80  BRA abs
   5046 CF2D 17                                   .byte ops1 | am_indx  ; $81  STA (dp,X)
   5047 CF2E 60                                   .byte bop2 | am_nam   ; $82  BRL abs
   5048 CF2F 19                                   .byte ops1 | am_stk   ; $83  STA offset,S
   5049 CF30 10                                   .byte ops1 | am_nam   ; $84  STY dp
   5050 CF31 10                                   .byte ops1 | am_nam   ; $85  STA dp
   5051 CF32 10                                   .byte ops1 | am_nam   ; $86  STX dp
   5052 CF33 15                                   .byte ops1 | am_indl  ; $87  STA [dp]
   5053 CF34 00                                   .byte ops0 | am_nam   ; $88  DEY
   5054 CF35 91                                   .byte vops | am_imm   ; $89  BIT #
   5055 CF36 00                                   .byte ops0 | am_nam   ; $8A  TXA
   5056 CF37 00                                   .byte ops0 | am_nam   ; $8B  PHB
   5057 CF38 20                                   .byte ops2 | am_nam   ; $8C  STY abs
   5058 CF39 20                                   .byte ops2 | am_nam   ; $8D  STA abs
   5059 CF3A 20                                   .byte ops2 | am_nam   ; $8E  STX abs
   5060 CF3B 30                                   .byte ops3 | am_nam   ; $8F  STA absl
                                        ;
   5062 CF3C 50                                   .byte bop1 | am_nam   ; $90  BCC abs
   5063 CF3D 18                                   .byte ops1 | am_indy  ; $91  STA (dp),Y
   5064 CF3E 14                                   .byte ops1 | am_ind   ; $92  STA (dp)
   5065 CF3F 1A                                   .byte ops1 | am_stky  ; $93  STA (offset,S),Y
   5066 CF40 12                                   .byte ops1 | am_adrx  ; $94  STY dp,X
   5067 CF41 12                                   .byte ops1 | am_adrx  ; $95  STA dp,X
   5068 CF42 13                                   .byte ops1 | am_adry  ; $96  STX dp,Y
   5069 CF43 16                                   .byte ops1 | am_indly ; $97  STA [dp],Y
   5070 CF44 00                                   .byte ops0 | am_nam   ; $98  TYA
   5071 CF45 23                                   .byte ops2 | am_adry  ; $99  STA abs,Y
   5072 CF46 00                                   .byte ops0 | am_nam   ; $9A  TXS
   5073 CF47 00                                   .byte ops0 | am_nam   ; $9B  TXY
   5074 CF48 20                                   .byte ops2 | am_nam   ; $9C  STZ abs
   5075 CF49 22                                   .byte ops2 | am_adrx  ; $9D  STA abs,X
   5076 CF4A 22                                   .byte ops2 | am_adrx  ; $9E  STZ abs,X
   5077 CF4B 32                                   .byte ops3 | am_adrx  ; $9F  STA absl,X
                                        ;
   5079 CF4C 91                                   .byte vops | am_imm   ; $A0  LDY #
   5080 CF4D 17                                   .byte ops1 | am_indx  ; $A1  LDA (dp,X)
   5081 CF4E 91                                   .byte vops | am_imm   ; $A2  LDX #
   5082 CF4F 19                                   .byte ops1 | am_stk   ; $A3  LDA offset,S
   5083 CF50 10                                   .byte ops1 | am_nam   ; $A4  LDY dp
   5084 CF51 10                                   .byte ops1 | am_nam   ; $A5  LDA dp
   5085 CF52 10                                   .byte ops1 | am_nam   ; $A6  LDX dp
   5086 CF53 15                                   .byte ops1 | am_indl  ; $A7  LDA [dp]
   5087 CF54 00                                   .byte ops0 | am_nam   ; $A8  TAY
   5088 CF55 91                                   .byte vops | am_imm   ; $A9  LDA #
   5089 CF56 00                                   .byte ops0 | am_nam   ; $AA  TAX
   5090 CF57 00                                   .byte ops0 | am_nam   ; $AB  PLB
   5091 CF58 20                                   .byte ops2 | am_nam   ; $AC  LDY abs
   5092 CF59 20                                   .byte ops2 | am_nam   ; $AD  LDA abs
   5093 CF5A 20                                   .byte ops2 | am_nam   ; $AE  LDX abs
   5094 CF5B 30                                   .byte ops3 | am_nam   ; $AF  LDA absl
                                        ;
   5096 CF5C 50                                   .byte bop1 | am_nam   ; $B0  BCS abs
   5097 CF5D 18                                   .byte ops1 | am_indy  ; $B1  LDA (dp),Y
   5098 CF5E 14                                   .byte ops1 | am_ind   ; $B2  LDA (dp)
   5099 CF5F 1A                                   .byte ops1 | am_stky  ; $B3  LDA (offset,S),Y
   5100 CF60 12                                   .byte ops1 | am_adrx  ; $B4  LDY dp,X
   5101 CF61 12                                   .byte ops1 | am_adrx  ; $B5  LDA dp,X
   5102 CF62 13                                   .byte ops1 | am_adry  ; $B6  LDX dp,Y
   5103 CF63 16                                   .byte ops1 | am_indly ; $B7  LDA [dp],Y
   5104 CF64 00                                   .byte ops0 | am_nam   ; $B8  CLV
   5105 CF65 23                                   .byte ops2 | am_adry  ; $B9  LDA abs,Y
   5106 CF66 00                                   .byte ops0 | am_nam   ; $BA  TSX
   5107 CF67 00                                   .byte ops0 | am_nam   ; $BB  TYX
   5108 CF68 22                                   .byte ops2 | am_adrx  ; $BC  LDY abs,X
   5109 CF69 22                                   .byte ops2 | am_adrx  ; $BD  LDA abs,X
   5110 CF6A 23                                   .byte ops2 | am_adry  ; $BE  LDX abs,Y
   5111 CF6B 32                                   .byte ops3 | am_adrx  ; $BF  LDA absl,X
                                        ;
   5113 CF6C 91                                   .byte vops | am_imm   ; $C0  CPY #
   5114 CF6D 17                                   .byte ops1 | am_indx  ; $C1  CMP (dp,X)
   5115 CF6E 11                                   .byte ops1 | am_imm   ; $C2  REP #
   5116 CF6F 19                                   .byte ops1 | am_stk   ; $C3  CMP offset,S
   5117 CF70 10                                   .byte ops1 | am_nam   ; $C4  CPY dp
   5118 CF71 10                                   .byte ops1 | am_nam   ; $C5  CMP dp
   5119 CF72 10                                   .byte ops1 | am_nam   ; $C6  DEC dp
   5120 CF73 15                                   .byte ops1 | am_indl  ; $C7  CMP [dp]
   5121 CF74 00                                   .byte ops0 | am_nam   ; $C8  INY
   5122 CF75 91                                   .byte vops | am_imm   ; $C9  CMP #
   5123 CF76 00                                   .byte ops0 | am_nam   ; $CA  DEX
   5124 CF77 00                                   .byte ops0 | am_nam   ; $CB  WAI
   5125 CF78 20                                   .byte ops2 | am_nam   ; $CC  CPY abs
   5126 CF79 20                                   .byte ops2 | am_nam   ; $CD  CMP abs
   5127 CF7A 20                                   .byte ops2 | am_nam   ; $CE  DEC abs
   5128 CF7B 30                                   .byte ops3 | am_nam   ; $CF  CMP absl
                                        ;
   5130 CF7C 50                                   .byte bop1 | am_nam   ; $D0  BNE abs
   5131 CF7D 18                                   .byte ops1 | am_indy  ; $D1  CMP (dp),Y
   5132 CF7E 14                                   .byte ops1 | am_ind   ; $D2  CMP (dp)
   5133 CF7F 1A                                   .byte ops1 | am_stky  ; $D3  CMP (offset,S),Y
   5134 CF80 10                                   .byte ops1 | am_nam   ; $D4  PEI dp
   5135 CF81 12                                   .byte ops1 | am_adrx  ; $D5  CMP dp,X
   5136 CF82 12                                   .byte ops1 | am_adrx  ; $D6  DEC dp,X
   5137 CF83 16                                   .byte ops1 | am_indly ; $D7  CMP [dp],Y
   5138 CF84 00                                   .byte ops0 | am_nam   ; $D8  CLD
   5139 CF85 23                                   .byte ops2 | am_adry  ; $D9  CMP abs,Y
   5140 CF86 00                                   .byte ops0 | am_nam   ; $DA  PHX
   5141 CF87 00                                   .byte ops0 | am_nam   ; $DB  STP
   5142 CF88 25                                   .byte ops2 | am_indl  ; $DC  JMP [abs]
   5143 CF89 22                                   .byte ops2 | am_adrx  ; $DD  CMP abs,X
   5144 CF8A 22                                   .byte ops2 | am_adrx  ; $DE  DEC abs,X
   5145 CF8B 32                                   .byte ops3 | am_adrx  ; $DF  CMP absl,X
                                        ;
   5147 CF8C 91                                   .byte vops | am_imm   ; $E0  CPX #
   5148 CF8D 17                                   .byte ops1 | am_indx  ; $E1  SBC (dp,X)
   5149 CF8E 11                                   .byte ops1 | am_imm   ; $E2  SEP #
   5150 CF8F 19                                   .byte ops1 | am_stk   ; $E3  SBC offset,S
   5151 CF90 10                                   .byte ops1 | am_nam   ; $E4  CPX dp
   5152 CF91 10                                   .byte ops1 | am_nam   ; $E5  SBC dp
   5153 CF92 10                                   .byte ops1 | am_nam   ; $E6  INC dp
   5154 CF93 15                                   .byte ops1 | am_indl  ; $E7  SBC [dp]
   5155 CF94 00                                   .byte ops0 | am_nam   ; $E8  INX
   5156 CF95 91                                   .byte vops | am_imm   ; $E9  SBC #
   5157 CF96 00                                   .byte ops0 | am_nam   ; $EA  NOP
   5158 CF97 00                                   .byte ops0 | am_nam   ; $EB  XBA
   5159 CF98 20                                   .byte ops2 | am_nam   ; $EC  CPX abs
   5160 CF99 20                                   .byte ops2 | am_nam   ; $ED  SBC abs
   5161 CF9A 20                                   .byte ops2 | am_nam   ; $EE  INC abs
   5162 CF9B 30                                   .byte ops3 | am_nam   ; $EF  SBC absl
                                        ;
   5164 CF9C 50                                   .byte bop1 | am_nam   ; $F0  BEQ abs
   5165 CF9D 18                                   .byte ops1 | am_indy  ; $F1  SBC (dp),Y
   5166 CF9E 14                                   .byte ops1 | am_ind   ; $F2  SBC (dp)
   5167 CF9F 1A                                   .byte ops1 | am_stky  ; $F3  SBC (offset,S),Y
   5168 CFA0 21                                   .byte ops2 | am_imm   ; $F4  PEA #
   5169 CFA1 12                                   .byte ops1 | am_adrx  ; $F5  SBC dp,X
   5170 CFA2 12                                   .byte ops1 | am_adrx  ; $F6  INC dp,X
   5171 CFA3 16                                   .byte ops1 | am_indly ; $F7  SBC [dp],Y
   5172 CFA4 00                                   .byte ops0 | am_nam   ; $F8  SED
   5173 CFA5 23                                   .byte ops2 | am_adry  ; $F9  SBC abs,Y
   5174 CFA6 00                                   .byte ops0 | am_nam   ; $FA  PLX
   5175 CFA7 00                                   .byte ops0 | am_nam   ; $FB  XCE
   5176 CFA8 27                                   .byte ops2 | am_indx  ; $FC  JSR (abs,X)
   5177 CFA9 22                                   .byte ops2 | am_adrx  ; $FD  SBC abs,X
   5178 CFAA 22                                   .byte ops2 | am_adrx  ; $FE  INC abs,X
   5179 CFAB 32                                   .byte ops3 | am_adrx  ; $FF  SBC absl,X
                                        ;
                                        ;
                                        ;	.X & .Y immediate mode opcodes...
                                        ;
   5184 CFAC A0                         vopidx   .byte $a0             ;LDY #
   5185 CFAD A2                                   .byte $a2             ;LDX #
   5186 CFAE C0                                   .byte $c0             ;CPY #
   5187 CFAF E0                                   .byte $e0             ;CPX #
   5414 = 00000004                      n_vopidx =*-vopidx             ;number of opcodes
                                        ;
                                        ;
                                        ;	addressing mode symbology lookup...
                                        ;
   5193 CFB0 C8 CF                      ms_lutab .word ms_nam          ;(0000)  no symbol
   5194 CFB2 D2 CF                                .word ms_imm          ;(0001)  #
   5195 CFB4 CA CF                                .word ms_addrx        ;(0010)  dp,X or abs,X
   5196 CFB6 CE CF                                .word ms_addry        ;(0011)  dp,Y or abs,Y
   5197 CFB8 D4 CF                                .word ms_ind          ;(0100)  (dp) or (abs)
   5198 CFBA D7 CF                                .word ms_indl         ;(0101)  [dp] or [abs]
   5199 CFBC DA CF                                .word ms_indly        ;(0110)  [dp],Y
   5200 CFBE DF CF                                .word ms_indx         ;(0111)  (dp,X) or (abs,X)
   5201 CFC0 E4 CF                                .word ms_indy         ;(1000)  (dp),Y
   5202 CFC2 EC CF                                .word ms_stk          ;(1001)  offset,S
   5203 CFC4 F0 CF                                .word ms_stky         ;(1010) (offset,S),Y
   5204 CFC6 C8 CF                                .word ms_nam          ;(1011) sbnk,dbnk
                                        ;
                                        ;
                                        ;	addressing mode symbology strings...
                                        ;
   5209 CFC8 20 00                      ms_nam   .byte " ",0           ;no symbol
   5210 CFCA 20 2C 58 00                ms_addrx .byte " ,X",0         ;dp,X or addr,X
   5211 CFCE 20 2C 59 00                ms_addry .byte " ,Y",0         ;dp,Y or addr,Y
   5212 CFD2 23 00                      ms_imm   .byte "#",0           ;immediate
   5213 CFD4 28 29 00                   ms_ind   .byte "()",0          ;(dp) or (abs)
   5214 CFD7 5B 5D 00                   ms_indl  .byte "[]",0          ;[dp] or [abs]
   5215 CFDA 5B 5D 2C 59 00             ms_indly .byte "[],Y",0        ;[dp],Y
   5216 CFDF 28 2C 58 29 00             ms_indx  .byte "(,X)",0        ;(dp,X) or (abs,X)
   5217 CFE4 28 29 2C 59 00             ms_indy  .byte "(),Y",0        ;(dp),Y
   5218 CFE9 2C 24 00                   ms_move  .byte ",$",0          ;MVN/MVP sbnk,dbnk
   5219 CFEC 20 2C 53 00                ms_stk   .byte " ,S",0         ;offset,S
   5220 CFF0 28 2C 53 29 2C 59 00       ms_stky  .byte "(,S),Y",0      ;(offset,S),Y
                                        ;
                                        ;================================================================================
                                        ;
                                        ;CONSOLE DISPLAY CONTROL STRINGS
                                        ;
   5226 CFF7 1B 28                      dc_bf +         .byte a_esc,"("
   5226 CFF9 1B 47 34                 +            .byte a_esc,"G4"
                                                            ;enable reverse foreground
   5227 CFFC 00                                   .byte 0
                                        ;
   5229 CFFD 08                         dc_bs +         .byte a_bs
   5229 CFFE 1B 57                    +   +         .byte a_esc,"W"
                                        
                                                            ;destructive backspace
   5231 D000 00                                   .byte 0
                                        ;
   5233 D001 1B 54                      dc_cl +         .byte a_esc,"T"
                                                            ;clear to end of line 
   5234 D003 00                                   .byte 0
                                        ;
   5236 D004 1B 60 31                   dc_cn +         .byte a_esc,"`1"
                                                            ;cursor on
   5237 D007 00                                   .byte 0
                                        ;
   5239 D008 1B 60 30                   dc_co +         .byte a_esc,"`0"
                                                            ;cursor off
   5240 D00B 00                                   .byte 0
                                        ;
   5242 D00C 1B 28                      dc_er +         .byte a_esc,"("
   5242 D00E 1B 47 30                 +            .byte a_esc,"G0"
                                                            ;enable normal foreground
   5243 D011 00                                   .byte 0
                                        ;
   5245 D012 0D                         dc_lf ++         .byte a_cr
                                     +   
   5245 D013 0A                       +            .byte a_lf
                                                            ;newline
   5246 D014 00                                   .byte 0
                                        ;
                                        ;================================================================================
                                        ;
                                        ;TEXT STRINGS
                                        ;
   5252 D015 07                         mm_brk +         .byte a_bel
                                        
   5253 D016 0D                       +   +         .byte a_cr
                                     +   
   5253 D017 0A                       +            .byte a_lf
                                        
   5254 D018 2A 2A 42 52 4B                       .byte "**BRK"
   5255 D01D 0D                       +   +         .byte a_cr
                                     +   
   5255 D01E 0A                       +            .byte a_lf
                                        
   5256 D01F 00                                   .byte 0
                                        ;
   5258 D020 0D                         mm_entry ++         .byte a_cr
                                     +   
   5258 D021 0A                       +            .byte a_lf
                                        
   5259 D022 0A 53 75 70 65 72 6D 6F              .byte a_lf,"Supermon 832 "
   5259 D02A 6E 20 38 33 32 20         
   5260 D030 31                       +            .byte "1"
   5260 D031 2E                       +            .byte "."
   5260 D032 30                       +            .byte "0"
   5260 D033 2E                       +            .byte "."
   5260 D034 30                       +            .byte "0"
                                        
   5261 D035 20                                   .byte " "
   5262 D036 0D                       +   +         .byte a_cr
                                     +   
   5262 D037 0A                       +            .byte a_lf
                                        
   5263 D038 00                                   .byte 0
                                        ;
   5265 D039 20 2A 2A 45 52 52 20 20    mm_err   .byte " **ERR  ",0
   5265 D041 00                        
                                        ;
   5267 D042 0D                         mm_prmpt ++         .byte a_cr
                                     +   
   5267 D043 0A                       +            .byte a_lf
                                        
   5268 D044 1B 28                    +            .byte a_esc,"("
   5268 D046 1B 47 30                 +            .byte a_esc,"G0"
                                        
   5269 D049 2E 00                                .byte ".",0
                                        ;
   5271 D04B 0D                         mm_regs ++         .byte a_cr
                                     +   
   5271 D04C 0A                       +            .byte a_lf
                                        
   5272 D04D 20 20 20 20 20 20 20 20              .byte "                    31"
   5272 D055 20 20 20 20 20 20 20 20   
   5272 D05D 20 20 20 20 33 31         
   5273 D063 0D                       +   +         .byte a_cr
                                     +   
   5273 D064 0A                       +            .byte a_lf
                                        
   5274 D065 20 20 20 20 20 43 53 20              .byte "     CS    PB  PC   26NVmxDIZC    .A       .X       .Y       SP  "
   5274 D06D 20 20 20 50 42 20 20 50   
   5274 D075 43 20 20 20 32 36 4E 56   
   5274 D07D 6D 78 44 49 5A 43 20 20   
   5274 D085 20 20 2E 41 20 20 20 20   
   5274 D08D 20 20 20 2E 58 20 20 20   
   5274 D095 20 20 20 20 2E 59 20 20   
   5274 D09D 20 20 20 20 20 53 50 20   
   5274 D0A5 20                        
   5275 D0A6 0D                       +   +         .byte a_cr
                                     +   
   5275 D0A7 0A                       +            .byte a_lf
                                        
   5276 D0A8 3B 20 00                             .byte "; ",0
   5277 D0AB 0D                         mm_regs2 ++         .byte a_cr
                                     +   
   5277 D0AC 0A                       +            .byte a_lf
                                        
   5278 D0AD 20 20 20 20 20 44 53 20              .byte "     DS    DP  DB"
   5278 D0B5 20 20 20 44 50 20 20 44   
   5278 D0BD 42                        
   5279 D0BE 0D                       +   +         .byte a_cr
                                     +   
   5279 D0BF 0A                       +            .byte a_lf
                                        
   5280 D0C0 3B 20 00                             .byte "; ",0
                                        ;
   5282 D0C3 07                         mm_rts +         .byte a_bel
                                        
   5283 D0C4 0D                       +   +         .byte a_cr
                                     +   
   5283 D0C5 0A                       +            .byte a_lf
                                        
   5284 D0C6 2A 2A 52 54 53                       .byte "**RTS"
   5285 D0CB 0D                       +   +         .byte a_cr
                                     +   
   5285 D0CC 0A                       +            .byte a_lf
                                        
   5286 D0CD 00                                   .byte 0
                                        ;
                                        ;================================================================================
                                        ;
                                        ;VECTOR STORAGE
                                        ;
                                        ;
   5590 = 0000D0CE                      _txtend_ =*                     ;end of program text
                                        ;
                                        ;================================================================================
                                        	;.end
Finitron FT832 assembler   version 1.4   Wed Nov 18 20:01:03 2015     Page 1
FTBios816.asm


                                        .include "supermon832.asm"
Finitron FT832 assembler   version 1.4   Wed Nov 18 20:01:03 2015     Page 1
FAC1ToString.asm

                                        ; ============================================================================
                                        ; FAC1ToString.asm
                                        ;        __
                                        ;   \\__/ o\    (C) 2014  Robert Finch, Stratford
                                        ;    \  __ /    All rights reserved.
                                        ;     \/_//     robfinch<remove>@finitron.ca
                                        ;       ||
                                        ;  
                                        ;
                                        ; This source file is free software: you can redistribute it and/or modify 
                                        ; it under the terms of the GNU Lesser General Public License as published 
                                        ; by the Free Software Foundation, either version 3 of the License, or     
                                        ; (at your option) any later version.                                      
                                        ;                                                                          
                                        ; This source file is distributed in the hope that it will be useful,      
                                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                                        ; GNU General Public License for more details.                             
                                        ;                                                                          
                                        ; You should have received a copy of the GNU General Public License        
                                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                                        ;                                                                          
                                        ; ============================================================================
                                        ;
                                        ; This code is a heavily modified version of the floating point to string
                                        ; conversion routine which is a part of Lee Davison's EhBASIC.
                                        ;
   5622 = 0000000000000095                            Cvaral		= $95		; current var address low byte
   5623 = 00000096                      Cvarah		= Cvaral+1	; current var address high byte
   5624 = 00000000000000A8                            numexp		= $A8		; string to float number exponent count
   5625 = 00000000000000AA                            expcnt		= $AA		; string to float exponent count
   5626 = 00000000000000BA                            Sendl			= $BA	; BASIC pointer temp low byte
   5627 = 00000000000000BB                            Sendh			= $BB	; BASIC pointer temp low byte
                                        
   5629 = 00000000000003A0                            Decss		= $3A0		; number to decimal string start
   5630 = 000003A1                      Decssp1		= Decss+1	; number to decimal string start
   5631 = 0000000000000001                            FP_ADD		EQU		1
   5632 = 0000000000000002                            FP_SUB		EQU		2
   5633 = 0000000000000003                            FP_MUL		EQU		3
   5634 = 0000000000000004                            FP_DIV		EQU		4
   5635 = 0000000000000005                            FP_FIX2FLT	EQU		5
   5636 = 0000000000000006                            FP_FLT2FIX	EQU		6
   5637 = 0000000000000007                            FP_ABS		EQU		7
   5638 = 0000000000000010                            FP_NEG		EQU		16
   5639 = 0000000000000011                            FP_SWAP		EQU		17
   5640 = 0000000000000083                            FIXED_MUL	EQU		$83
   5641 = 0000000000000081                            FIXED_ADD	EQU		$81
   5642 = 0000000000000082                            FIXED_SUB	EQU		$82
                                        ;parameter FIXED_DIV = 8'h84;
                                        ;parameter FIXED_ABS = 8'h87;
                                        ;parameter FIXED_NEG = 8'h90;
   5646 = 0000000000FEA20E                            FP_CMDREG	EQU		$FEA20E
   5647 = 0000000000FEA20E                            FP_STATREG	EQU		$FEA20E
   5648 = 0000000000FEA200                            FAC1		EQU		$FEA200
   5649 = 0000000000FEA200                            FAC1_5		EQU		$FEA200
   5650 = 0000000000FEA202                            FAC1_4		EQU		$FEA202
   5651 = 0000000000FEA204                            FAC1_3		EQU		$FEA204
   5652 = 0000000000FEA206                            FAC1_2		EQU		$FEA206
   5653 = 0000000000FEA208                            FAC1_1		EQU		$FEA208
   5654 = 0000000000FEA208                            FAC1_msw	EQU		$FEA208
   5655 = 0000000000FEA20A                            FAC1_e		EQU		$FEA20A
   5656 = 0000000000FEA210                            FAC2		EQU		$FEA210
                                        
                                           	CPU		W65C816S
                                           	NDX		16
                                           	MEM		16
                                           	
                                           public FAC1ToString:
                                           
                                           ; The first chunk of code determines if the number is positive or negative
                                           ; and spits out the appropriate sign. Next it takes the absolute value of
                                           ; the accumulator so following code only has to deal with positive numbers.
                                           
   5371 00D0CE A0 00 00                     	LDY	#$00			; set index = 1
   5372 00D0D1 AF 08 A2 FE                  	LDA	FAC1_msw		; test FAC1 sign (b15) (Can't use BIT)
   5373 00D0D5 10 0E                        	BPL	.0002		; branch if +ve
   5374 00D0D7 A9 2D 00                     	LDA	#'-'			; else character = "-"
   5375 00D0DA 99 A0 03                     	STA	Decss,Y		; save leading character (" " or "-")
   5376 00D0DD A9 10 00                     	LDA	#FP_NEG		; make the FAC positive
   5377 00D0E0 20 07 D3                     	JSR	FPCommandWait
   5378 00D0E3 80 06                        	BRA	.0001
   5379 00D0E5                             .0002:
   5380 00D0E5 A9 20 00                     	LDA	#$20			; character = " " (assume +ve)
   5381 00D0E8 99 A0 03                     	STA	Decss,Y
   5382 00D0EB                             .0001:
   5383 00D0EB 84 BA                        	STY	Sendl			; save index
                                           
                                           ; This little bit of code check for a zero exponent which indicates a
                                           ; value of zero.
                                           
   5388 00D0ED AF 0A A2 FE                  	LDA	FAC1_e		; get FAC1 exponent
   5389 00D0F1 AA                           	TAX
   5390 00D0F2 D0 06                        	BNE	LAB_2989		; branch if FAC1<>0
                                           					; exponent was $00 so FAC1 is 0
   5392 00D0F4 A9 30 00                     	LDA	#'0'			; set character = "0"
   5393 00D0F7 82 93 01                     	BRL	LAB_2A89		; save last character, [EOT] and exit
                                           
                                           ; This loop attempts to make small values more significant, so that there are
                                           ; fewer leading zeros in the value. (The exponent is decremented so that it
                                           ; corresponds). Because of the potential for extremely small values looping is
                                           ; limited. The problem is the 16 bit exponent can allow for much smaller
                                           ; values than an 8 bit exponent would and we don't want to loop for thousands
                                           ; of iterations in order to display a value that's almost zero.
                                           
                                           					; FAC1 is some non zero value
   5403 00D0FA                             LAB_2989
   5404 00D0FA 84 BA                        	STY	Sendl			; save off .Y
   5405 00D0FC A0 67 06                     	LDY #1639			; max number of retries
   5406 00D0FF A9 00 00                     	LDA	#$00			; clear (number exponent count)
   5407 00D102 85 A8                        	STA numexp
   5408 00D104                             LOOP_MBMILLION:
   5409 00D104 E0 00 80                     	CPX	#$8000			; compare FAC1 exponent with $8000 (>1.00000)
   5410 00D107 B0 1A                        	BCS	LAB_299A		; branch if FAC1=>1
                                           					; FAC1<1
   5412 00D109 F4 48 D3                     	PEA	A_MILLION		; multiply FAC * 1,000,000
   5413 00D10C 20 BC D2                     	JSR	LOAD_FAC2		; 
   5414 00D10F 68                           	PLA					; get rid of parameter
   5415 00D110 20 B6 D2                     	JSR	FMUL
   5416 00D113 A5 A8                        	LDA numexp
   5417 00D115 38                           	SEC
   5418 00D116 E9 06 00                     	SBC	#6				; set number exponent count (-6)
   5419 00D119 85 A8                        	STA numexp
   5420 00D11B AF 0A A2 FE                  	LDA FAC1_e
   5421 00D11F AA                           	TAX
   5422 00D120 88                           	DEY
   5423 00D121 10 E1                        	BPL	LOOP_MBMILLION
                                           
   5425 00D123                             LAB_299A
   5426 00D123 A4 BA                        	LDY	Sendl		; get back .Y
                                           
                                           ; These two loops coerce the value of the FAC to be between 100,000 and
                                           ; 1,000,000. This gives a maximum of six digits before the decimal point
                                           ; in scientific notation.
                                           
                                           ; This loop divides by 10 until the value in the FAC is less than 1,000,000
                                           ;
   5434 00D125                             LOOP_DB10:
   5435 00D125 F4 60 D3                     	PEA	MAX_BEFORE_SCI	; set pointer low byte to 999999.4375 (max before sci note)
   5436 00D128 20 BC D2                     	JSR	LOAD_FAC2		; compare FAC1 with (AY)
   5437 00D12B 68                           	PLA					; get rid of parameter
   5438 00D12C AF 0E A2 FE                  	LDA FP_CMDREG
   5439 00D130 89 08 00                     	BIT	#$08			; test equals bit
   5440 00D133 D0 28                        	BNE	LAB_29C3		; exit if FAC1 = (AY)
   5441 00D135 89 04 00                     	BIT	#$04			; test greater than bit
   5442 00D138 F0 07                        	BEQ	LOOP_MB10		; go do *10 if FAC1 < (AY)
                                           
   5444 00D13A                             LAB_29B9
   5445 00D13A 20 F4 D2                     	JSR	DivideByTen		; divide by 10
   5446 00D13D E6 A8                        	INC	numexp			; increment number exponent count
   5447 00D13F 80 E4                        	BRA	LOOP_DB10		; go test again (branch always)
                                           
                                           ; This loop multiplies the value by 10 until it's greater than
                                           ; 100,000.
                                           					; FAC1 < (AY)
   5452 00D141                             LOOP_MB10
   5453 00D141 F4 78 D3                     	PEA CONST_9375		; set pointer to 99999.9375
   5454 00D144 20 BC D2                     	JSR	LOAD_FAC2		; compare FAC1 with (AY)
   5455 00D147 68                           	PLA					; get rid of parameter
   5456 00D148 AF 0E A2 FE                  	LDA FP_CMDREG
   5457 00D14C 89 08 00                     	BIT #$08
   5458 00D14F D0 05                        	BNE	LAB_29B2		; branch if FAC1 = (AY) (allow decimal places)
   5459 00D151 89 04 00                     	BIT #$04
   5460 00D154 D0 07                        	BNE	LAB_29C0		; branch if FAC1 > (AY) (no decimal places)
                                           					; FAC1 <= (AY)
   5462 00D156                             LAB_29B2
   5463 00D156 20 E7 D2                     	JSR	MultiplyByTen	; multiply by 10
   5464 00D159 C6 A8                        	DEC	numexp		; decrement number exponent count
   5465 00D15B 80 E4                        	BRA	LOOP_MB10		; go test again (branch always)
                                           
                                           ; now we have just the digits to do
                                           
   5469 00D15D                             LAB_29C0
                                           ;	JSR	AddPoint5		; add 0.5 to FAC1 (round FAC1)
   5471 00D15D                             LAB_29C3
                                           ;	JSR	FloatToFixed	; convert FAC1 floating-to-fixed
   5473 00D15D A2 01 00                     	LDX	#$01			; set default digits before dp = 1
   5474 00D160 A5 A8                        	LDA	numexp		; get number exponent count
   5475 00D162 18                           	CLC				; clear carry for add
   5476 00D163 69 07 00                     	ADC	#$07			; up to 6 digits before point
   5477 00D166 30 0A                        	BMI	LAB_29D8		; if -ve then 1 digit before dp
                                           
   5479 00D168 C9 08 00                     	CMP	#$08			; A>=8 if n>=1E6
   5480 00D16B B0 06                        	BCS	LAB_29D9		; branch if >= $08
                                           
                                           					; carry is clear
   5483 00D16D AA                           	TAX				; copy to A
   5484 00D16E CA                           	DEX				; take 1 from digit count
   5485 00D16F A9 02 00                     	LDA	#$02			;.set exponent adjust
                                           
   5487 00D172                             LAB_29D8
   5488 00D172 38                           	SEC				; set carry for subtract
   5489 00D173                             LAB_29D9
   5490 00D173 E9 02 00                     	SBC	#$02			; -2
   5491 00D176 85 AA                        	STA	expcnt		;.save exponent adjust
   5492 00D178 86 A8                        	STX	numexp		; save digits before dp count
   5493 00D17A 8A                           	TXA				; copy to A
   5494 00D17B F0 02                        	BEQ	LAB_29E4		; branch if no digits before dp
                                           
   5496 00D17D 10 15                        	BPL	LAB_29F7		; branch if digits before dp
                                           
   5498 00D17F                             LAB_29E4
   5499 00D17F A4 BA                        	LDY	Sendl			; get output string index
   5500 00D181 A9 2E 00                     	LDA	#'.'			; character "."
   5501 00D184 C8                           	INY				; increment index
   5502 00D185 99 A0 03                     	STA	Decss,Y		; save to output string
   5503 00D188 8A                           	TXA				;.
   5504 00D189 F0 07                        	BEQ	LAB_29F5		;.
                                           
   5506 00D18B A9 30 00                     	LDA	#'0'			; character "0"
   5507 00D18E C8                           	INY				; increment index
   5508 00D18F 99 A0 03                     	STA	Decss,Y		; save to output string
   5509 00D192                             LAB_29F5
   5510 00D192 84 BA                        	STY	Sendl			; save output string index
                                           
   5512 00D194                             LAB_29F7
   5513 00D194 A2 30 00                     	LDX	#'0'			; holds onto the digit value
                                           
                                           ; Now loop subtracting 100,000 as many times as we can. The value was coerced
                                           ; to be between 100,000 and 1,000,000. Count the number of times subtraction
                                           ; can be done successfully.
                                           ;
   5519 00D197                             LAB_29FB
   5520 00D197 F4 54 D3                     	PEA CONST_100000
   5521 00D19A 20 BC D2                     	JSR LOAD_FAC2	; load FAC2 with 100,000
   5522 00D19D 68                           	PLA				; get rid of parameter
   5523 00D19E AF 0E A2 FE                  	LDA FP_STATREG
   5524 00D1A2 89 04 00                     	BIT #$04		; Is FAC1 > 100,000 ?
   5525 00D1A5 F0 0F                        	BEQ	.0005		; branch if not
   5526 00D1A7 A9 11 00                     	LDA #FP_SWAP	; subtract is FAC2-FAC1!
   5527 00D1AA 20 07 D3                     	JSR FPCommandWait;
   5528 00D1AD A9 02 00                     	LDA #FP_SUB		; subtract 100,000 from the mantissa.
   5529 00D1B0 20 07 D3                     	JSR FPCommandWait
   5530 00D1B3 E8                           	INX				; increment the value of the digit
   5531 00D1B4 80 E1                        	BRA	LAB_29FB	; try again
   5532 00D1B6                             .0005:
   5533 00D1B6 8A                           	TXA
   5534 00D1B7 A4 BA                        	LDY	Sendl			; get output string index
   5535 00D1B9 C8                           	INY				; increment output string index
   5536 00D1BA 8A                           	TXA
   5537 00D1BB 99 A0 03                     	STA	Decss,Y		; save to output string
   5538 00D1BE C6 A8                        	DEC	numexp		; decrement # of characters before the dp
   5539 00D1C0 D0 07                        	BNE	LAB_2A3B		; branch if still characters to do
                                           				; else output the point
   5541 00D1C2 A9 2E 00                     	LDA	#'.'			; character "."
   5542 00D1C5 C8                           	INY				; increment output string index
   5543 00D1C6 99 A0 03                     	STA	Decss,Y		; save to output string
   5544 00D1C9                             LAB_2A3B
   5545 00D1C9 84 BA                        	STY	Sendl		; save output string index
                                           	; We subtracted until the value was < 100,000 so multiply the
                                           	; remainder upwards to get the next digit.
   5548 00D1CB 20 E7 D2                     	JSR	MultiplyByTen	; If not, multiply by 10
   5549 00D1CE C0 1B 00                     	CPY #27			; converted (+/- . incl)
   5550 00D1D1 90 C1                        	BCC	LAB_29F7
                                           					; now remove trailing zeroes
   5552 00D1D3                             .RemoveTrailingZeros
   5553 00D1D3 B9 A0 03                     	LDA	Decss,Y		; get character from output string
   5554 00D1D6 29 FF 00                     	AND	#$FF		; mask to a byte
   5555 00D1D9 88                           	DEY				; decrement output string index
   5556 00D1DA C9 30 00                     	CMP	#'0'			; compare with "0"
   5557 00D1DD F0 F4                        	BEQ	.RemoveTrailingZeros	; loop until non "0" character found
                                           
   5559 00D1DF C9 2E 00                     	CMP	#'.'			; compare with "."
   5560 00D1E2 F0 01                        	BEQ	LAB_2A58		; branch if was dp
                                           
                                           					; restore last character
   5563 00D1E4 C8                           	INY				; increment output string index
   5564 00D1E5                             LAB_2A58
   5565 00D1E5 A9 2B 00                     	LDA	#'+'			; character "+"
   5566 00D1E8 A6 AA                        	LDX	expcnt		; get exponent count
   5567 00D1EA F0 FF A2 00                  	LBEQ	LAB_2A8C		; if zero go set null terminator and exit
                                           
                                           					; exponent isn't zero so write exponent
   5570 00D1EE 10 0A                        	BPL	LAB_2A68		; branch if exponent count +ve
                                           
   5572 00D1F0 A9 00 00                     	LDA	#$00			; clear A
   5573 00D1F3 38                           	SEC				; set carry for subtract
   5574 00D1F4 E5 AA                        	SBC	expcnt		; subtract exponent count adjust (convert -ve to +ve)
   5575 00D1F6 AA                           	TAX				; copy exponent count to X
   5576 00D1F7 A9 2D 00                     	LDA	#'-'			; character "-"
                                           
                                           ; We must keep moving forwards through the string because the acc is storing
                                           ; two bytes.
                                           
   5581 00D1FA                             LAB_2A68
   5582 00D1FA 48                           	PHA
   5583 00D1FB A9 45 00                     	LDA	#'E'			; character "E"
   5584 00D1FE 99 A1 03                     	STA	Decss+1,Y		; save exponent sign to output string
   5585 00D201 68                           	PLA
   5586 00D202 99 A2 03                     	STA	Decss+2,Y		; save to output string
   5587 00D205 8A                           	TXA				; get exponent count back
                                           
                                           ; do highest exponent digit
   5590 00D206 64 BA                        	STZ Sendl
   5591 00D208 A2 2F 00                     	LDX	#'0'-1		; one less than "0" character
   5592 00D20B 38                           	SEC				; set carry for subtract
   5593 00D20C E8                          .0001:				
   5594 00D20D E9 10 27                     	SBC	#10000
   5595 00D210 B0 FA                        	BCS .0001
   5596 00D212 69 10 27                     	ADC #10000
   5597 00D215 E0 30 00                     	CPX #'0'
   5598 00D218 F0 09                        	BEQ .0005
   5599 00D21A E6 BA                        	INC Sendl
   5600 00D21C 48                           	PHA
   5601 00D21D 8A                           	TXA
   5602 00D21E 99 A3 03                     	STA Decss+3,Y
   5603 00D221 68                           	PLA
   5604 00D222 C8                           	INY
                                           ; do the next exponent digit
   5606 00D223                             .0005:
   5607 00D223 A2 2F 00                     	LDX #'0'-1
   5608 00D226 38                           	SEC
   5609 00D227                             .0002:
   5610 00D227 E8                           	INX
   5611 00D228 E9 E8 03                     	SBC #1000
   5612 00D22B B0 FA                        	BCS .0002
   5613 00D22D 69 E8 03                     	ADC #1000
   5614 00D230 46 BA                        	LSR Sendl
   5615 00D232 B0 05                        	BCS .00010
   5616 00D234 E0 30 00                     	CPX #'0'
   5617 00D237 F0 09                        	BEQ .0006
   5618 00D239                             .00010:
   5619 00D239 E6 BA                        	INC Sendl
   5620 00D23B 48                           	PHA
   5621 00D23C 8A                           	TXA
   5622 00D23D 99 A3 03                     	STA Decss+3,Y
   5623 00D240 68                           	PLA
   5624 00D241 C8                           	INY
                                           ; and the next
   5626 00D242                             .0006:
   5627 00D242 A2 2F 00                     	LDX	#'0'-1
   5628 00D245 38                           	SEC
   5629 00D246                             .0003:
   5630 00D246 E8                           	INX
   5631 00D247 E9 64 00                     	SBC #100
   5632 00D24A B0 FA                        	BCS .0003
   5633 00D24C 69 64 00                     	ADC #100
   5634 00D24F 46 BA                        	LSR Sendl
   5635 00D251 B0 05                        	BCS .00011
   5636 00D253 E0 30 00                     	CPX #'0'
   5637 00D256 F0 09                        	BEQ .0007
   5638 00D258                             .00011:
   5639 00D258 E6 BA                        	INC Sendl
   5640 00D25A 48                           	PHA
   5641 00D25B 8A                           	TXA
   5642 00D25C 99 A3 03                     	STA Decss+3,Y
   5643 00D25F 68                           	PLA
   5644 00D260 C8                           	INY
                                           
   5646 00D261                             .0007:
   5647 00D261 A2 2F 00                     	LDX #'0'-1
   5648 00D264 38                           	SEC
   5649 00D265                             .0004:
   5650 00D265 E8                           	INX
   5651 00D266 E9 0A 00                     	SBC #10
   5652 00D269 B0 FA                        	BCS .0004
   5653 00D26B 69 0A 00                     	ADC #10
   5654 00D26E 46 BA                        	LSR Sendl
   5655 00D270 B0 05                        	BCS .00012
   5656 00D272 E0 30 00                     	CPX #'0'
   5657 00D275 F0 09                        	BEQ .0008
   5658 00D277                             .00012:
   5659 00D277 E6 BA                        	INC Sendl
   5660 00D279 48                           	PHA
   5661 00D27A 8A                           	TXA
   5662 00D27B 99 A3 03                     	STA Decss+3,Y
   5663 00D27E 68                           	PLA
   5664 00D27F C8                           	INY
                                           
   5666 00D280                             .0008:
   5667 00D280 69 30 00                     	ADC #'0'
   5668 00D283 99 A3 03                     	STA Decss+3,Y
   5669 00D286 A9 00 00                     	LDA	#$00			; set null terminator
   5670 00D289 99 A4 03                     	STA	Decss+4,Y		; save to output string
   5671 00D28C 60                           	RTS					; go set string pointer (AY) and exit (branch always)
                                           
   5673 00D28D                             LAB_2A89
   5674 00D28D 99 A0 03                     	STA	Decss,Y		; save last character to output string
                                           					; set null terminator and exit
   5676 00D290                             LAB_2A8C
   5677 00D290 A9 00 00                     	LDA	#$00			; set null terminator
   5678 00D293 99 A1 03                     	STA	Decss+1,Y		; save after last character
                                           
   5680 00D296                             LAB_2A91
                                           ;	LDA	#<Decssp1		; set result string low pointer
                                           ;	LDY	#>Decssp1		; set result string high pointer
   5683 00D296 60                           	RTS
                                           
   5685 00D297                             LAB_25FB:
   5686 00D297 A9 11 00                     	LDA		#FP_SWAP
   5687 00D29A 20 07 D3                     	JSR		FPCommandWait
   5688 00D29D A0 00 00                     	LDY		#0
   5689 00D2A0 BB                           	TYX
   5690 00D2A1                             .0002:
   5691 00D2A1 B3 03                        	LDA		(3,S),Y
   5692 00D2A3 9F 00 A2 FE                  	STA		FAC1,X
   5693 00D2A7 C8                           	INY
   5694 00D2A8 C8                           	INY
   5695 00D2A9 E8                           	INX
   5696 00D2AA E8                           	INX
   5697 00D2AB E0 0C 00                     	CPX		#12
   5698 00D2AE D0 F1                        	BNE		.0002
   5699 00D2B0 A9 05 00                     	LDA		#FP_FIX2FLT
   5700 00D2B3 20 07 D3                     	JSR		FPCommandWait
   5701 00D2B6                             FMUL:
   5702 00D2B6 A9 03 00                     	LDA		#FP_MUL
   5703 00D2B9 4C 07 D3                     	JMP		FPCommandWait
   5704 00D2BC                             	
   5705 00D2BC DA                           	PHX
   5706 00D2BD 5A                           	PHY
   5707 00D2BE A0 00 00                     	LDY		#0
   5708 00D2C1 BB                           	TYX
   5709 00D2C2                             .0002:
   5710 00D2C2 B3 07                        	LDA		(7,s),Y
   5711 00D2C4 9F 10 A2 FE                  	STA		FAC2,X
   5712 00D2C8 C8                           	INY
   5713 00D2C9 C8                           	INY
   5714 00D2CA E8                           	INX
   5715 00D2CB E8                           	INX
   5716 00D2CC E0 0C 00                     	CPX		#12
   5717 00D2CF D0 F1                        	BNE		.0002
   5718 00D2D1 7A                           	PLY
   5719 00D2D2 FA                           	PLX
   5720 00D2D3 60                           	RTS
   5721 00D2D4                             	
   5722 00D2D4 A9 06 00                     	LDA		#FP_FLT2FIX
   5723 00D2D7 4C 07 D3                     	JMP		FPCommandWait
   5724 00D2DA                             	
   5725 00D2DA F4 84 D3                     	PEA		CONST_POINT5
   5726 00D2DD 20 BC D2                     	JSR		LOAD_FAC2
   5727 00D2E0 68                           	PLA
   5728 00D2E1 A9 01 00                     	LDA		#FP_ADD
   5729 00D2E4 4C 07 D3                     	JMP		FPCommandWait
   5730 00D2E7                             	
   5731 00D2E7 F4 6C D3                     	PEA		TEN_AS_FLOAT
   5732 00D2EA 20 BC D2                     	JSR		LOAD_FAC2
   5733 00D2ED 68                           	PLA
   5734 00D2EE A9 03 00                     	LDA		#FP_MUL
   5735 00D2F1 4C 07 D3                     	JMP		FPCommandWait
                                           	
   5737 00D2F4 F4 6C D3                     	PEA		TEN_AS_FLOAT
   5738 00D2F7 20 BC D2                     	JSR		LOAD_FAC2
   5739 00D2FA 68                           	PLA
   5740 00D2FB 20 04 D3                     	JSR		SwapFACs
   5741 00D2FE A9 04 00                     	LDA		#FP_DIV
   5742 00D301 4C 07 D3                     	JMP		FPCommandWait
   5743 00D304                             	
   5744 00D304 A9 11 00                     	LDA		#FP_SWAP
                                           
                                           ; Issue a command to the FP unit and wait for it to complete
                                           ;
                                           public FPCommandWait:
   5749 00D307 48                           	PHA
   5750 00D308                             .0001:
   5751 00D308 AF 0E A2 FE                  	LDA		FP_STATREG	; get the status register
   5752 00D30C 89 80 00                     	BIT		#$80		; check for busy bit
   5753 00D30F D0 F7                        	BNE		.0001		; if busy go back
   5754 00D311 68                           	PLA					; to pop acc
   5755 00D312 8F 0E A2 FE                  	STA		FP_CMDREG	; store the command
   5756 00D316 60                           	RTS
                                           
                                           ; Display the FAC1 as a hex number
                                           ;
                                           public DispFAC1:
   5761 00D317 AF 0A A2 FE                  	LDA FAC1_e
   5762 00D31B 20 C4 E5                     	JSR DispWord
   5763 00D31E AF 08 A2 FE                  	LDA	FAC1_1
   5764 00D322 20 C4 E5                     	JSR	DispWord
   5765 00D325 AF 06 A2 FE                  	LDA FAC1_2
   5766 00D329 20 C4 E5                     	JSR	DispWord
   5767 00D32C AF 04 A2 FE                  	LDA FAC1_3
   5768 00D330 20 C4 E5                     	JSR DispWord
   5769 00D333 AF 02 A2 FE                  	LDA FAC1_4
   5770 00D337 20 C4 E5                     	JSR DispWord
   5771 00D33A AF 00 A2 FE                  	LDA FAC1_5
   5772 00D33E 20 C4 E5                     	JSR DispWord
   5773 00D341 A9 20 00                     	LDA #' '
   5774 00D344 20 33 E5                     	JSR OutChar
   5775 00D347 60                           	RTS
                                           ;
                                           ; 1,000,000 as a floating point number
                                           ;
   5779 00D348                             A_MILLION:	; $F4240
   5780 00D348 00 00                        	dw		$0000
   5781 00D34A 00 00                        	dw		$0000
   5782 00D34C 00 00                        	dw		$0000
   5783 00D34E 00 00                        	dW		$0000
   5784 00D350 12 7A                        	dw		$7A12
   5785 00D352 13 80                        	dw		$8013
                                           
   5787 00D354                             CONST_100000:
                                           	;186A0
   5789 00D354 00 00                        	dw		$0000
   5790 00D356 00 00                        	dw		$0000
   5791 00D358 00 00                        	dw		$0000
   5792 00D35A 00 00                        	dw		$0000
   5793 00D35C A8 61                        	dw		$61A8
   5794 00D35E 10 80                        	dw		$8010
                                           ; The constant 999999.4375 as hex
                                           ; 01.11_1010_0001_0001_1111_1011_1000_00000000000000000000000000
   5797 00D360                             MAX_BEFORE_SCI:
   5798 00D360 00 00                        	dw  $0000
   5799 00D362 00 00                        	dw  $0000
   5800 00D364 00 00                        	dw	$0000
   5801 00D366 80 FB                        	dw	$FB80
   5802 00D368 11 7A                        	dw	$7A11
   5803 00D36A 13 80                        	dw	$8013
                                           
   5805 00D36C                             TEN_AS_FLOAT:
   5806 00D36C 00 00                        	dw	$0000
   5807 00D36E 00 00                        	dw	$0000
   5808 00D370 00 00                        	dw	$0000
   5809 00D372 00 00                        	dw	$0000
   5810 00D374 00 50                        	dw	$5000
   5811 00D376 03 80                        	dw	$8003
                                           
                                           ; 99999.9375
                                           ; 01.10_0001_1010_0111_1111_1100_000000000000000000000000000000
                                           ;
   5816 00D378                             CONST_9375:
   5817 00D378 00 00                        	dw	$0000
   5818 00D37A 00 00                        	dw	$0000
   5819 00D37C 00 00                        	dw	$0000
   5820 00D37E 00 FC                        	dw	$FC00
   5821 00D380 A7 61                        	dw	$61A7
   5822 00D382 10 80                        	dw	$8010
                                           
                                           ; 0.5
   5825 00D384                             CONST_POINT5:
   5826 00D384 00 00                        	dw	$0000
   5827 00D386 00 00                        	dw	$0000
   5828 00D388 00 00                        	dw	$0000
   5829 00D38A 00 00                        	dw	$0000
   5830 00D38C 00 40                        	dw	$4000
   5831 00D38E FF 7F                        	dw	$7FFF
                                           
                                           ; This table is used in converting numbers to ASCII.
                                           
   5835 00D390                             LAB_2A9A
   6133 = 0000D391                         LAB_2A9B = LAB_2A9A+1
   6134 = 0000D392                         LAB_2A9C = LAB_2A9B+1
                                           ;	.word	$FFFF,$F21F,$494C,$589C,$0000
                                           ;	.word	$0000,$0163,$4578,$5D8A,$0000
                                           ;	.word	$FFFF,$FFDC,$790D,$903F,$0000
                                           ;	.word	$0000,$0003,$8D7E,$A4C6,$8000
                                           ;	.word	$FFFF,$FFFF,$A50C,$EF85,$C000
                                           ;	.word	$0000,$0000,$0918,$4E72,$A000
                                           ;	.word	$FFFF,$FFFF,$FF17,$2B5A,$F000
                                           ;	.word	$0000,$0000,$0017,$4876,$E800
                                           ;	.word	$FFFF,$FFFF,$FFFD,$ABF4,$1C00
                                           ;	.word	$0000,$0000,$0000,$3B9A,$CA00
                                           ;	.word	$FFFF,$FFFF,$FFFF,$FF67,$6980
                                           ;	.word	$0000,$0000,$0000,$05F5,$E100		; 100000000
                                           ;	.word	$0000,$0000,$0098,$9680		; 10000000
                                           ;	.word   $4240,$000F,$0000,$0000,$0000,$804E		; 1000000
   5852 00D390 A0 86 01 00 00 00 00 00      	.word	$86A0,$0001,$0000,$0000,$0000,$804E		; 100000
   5852 00D398 00 00 4E 80                
   5853 00D39C 10 27 00 00 00 00 00 00      	.word	$2710,$0000,$0000,$0000,$0000,$804E		; 10000
   5853 00D3A4 00 00 4E 80                
   5854 00D3A8 E8 03 00 00 00 00 00 00      	.word	$03E8,$0000,$0000,$0000,$0000,$804E		; 1000
   5854 00D3B0 00 00 4E 80                
   5855 00D3B4 64 00 00 00 00 00 00 00      	.word	$0064,$0000,$0000,$0000,$0000,$804E		; 100
   5855 00D3BC 00 00 4E 80                
   5856 00D3C0                             FIXED10:
   5857 00D3C0 0A 00 00 00 00 00 00 00      	.word	$000A,$0000,$0000,$0000,$0000,$804E		; 10
   5857 00D3C8 00 00 4E 80                
   5858 00D3CC 01 00 00 00 00 00 00 00      	.word	$0001,$0000,$0000,$0000,$0000,$804E		; 1
   5858 00D3D4 00 00 4E 80                
                                           
                                           		 MEM	16
                                           		 NDX	16
Finitron FT832 assembler   version 1.4   Wed Nov 18 20:01:03 2015     Page 1
FTBios816.asm


                                           .include "FAC1ToString.asm"
Finitron FT832 assembler   version 1.4   Wed Nov 18 20:01:03 2015     Page 1
invaders.asm

                                           	CPU		FT832
                                           
   6168 = 0000000000FEA100                               PRNG		EQU		$FEA100
   6169 = 0000000000FEA108                               PRNG_NUM	EQU		$FEA108
   6170 = 0000000000FEA10E                               PRNG_ADV	EQU		$FEA10E
   6171 = 0000000000000001                               MAN_EXPLODING	EQU		1
                                           
                                           ; which invaders are still active (not destroyed)
                                           ; These var addresses are segment offsets into seg $7800
   6175 = 0000000000000000                               active				EQU		$00
   6176 = 000000000000005E                               left_right			EQU		$5E
   6177 = 0000000000000060                               rightmost_column	EQU		$60
   6178 = 0000000000000062                               leftmost_column		EQU		$62
   6179 = 0000000000000064                               bottom_row			EQU		$64
   6180 = 0000000000000066                               top_row				EQU		$66
   6181 = 000000000000006A                               inv_tick			EQU		$6A
   6182 = 000000000000006C                               inv_tick2			EQU		$6C
   6183 = 000000000000006E                               manX				EQU		$6E
   6184 = 0000000000000070                               manY				EQU		$70
   6185 = 0000000000000072                               manState			EQU		$72
   6186 = 0000000000000100                               InvadersX			EQU		$100
   6187 = 0000000000000200                               InvadersY			EQU		$200
   6188 = 0000000000000300                               min_right			EQU		$300
   6189 = 0000000000000310                               max_left			EQU		$310
   6190 = 0000000000000320                               bombX				EQU		$320
   6191 = 0000000000000330                               bombY				EQU		$330
   6192 = 0000000000000400                               inv_state			EQU		$400
                                           
                                           ; This var is shared, must be referenced ZS:
   6195 = 0000000000007868                               do_invaders			EQU		$7868
                                           
                                           	; minimum right +         .byte a_esc,"`0"
                                           -ordinate for each column of invaders
   5896 00D3D8                             st_min_right:
   5897 00D3D8 01 00                        	.word	1
   5898 00D3DA 05 00                        	.word	5
   5899 00D3DC 09 00                        	.word	9
   5900 00D3DE 0D 00                        	.word	13
   5901 00D3E0 11 00                        	.word	17
   5902 00D3E2 15 00                        	.word	21
   5903 00D3E4 19 00                        	.word	25
   5904 00D3E6 1D 00                        	.word	29
                                           
                                           	; maximum left +         .byte a_esc,"`0"
                                           -ordinate for each column of invaders
   5908 00D3E8 34 00                        	.word	52
   5909 00D3EA 38 00                        	.word	56
   5910 00D3EC 3C 00                        	.word	60
   5911 00D3EE 40 00                        	.word	64
   5912 00D3F0 44 00                        	.word	68
   5913 00D3F2 48 00                        	.word	72
   5914 00D3F4 4C 00                        	.word	76
   5915 00D3F6 50 00                        	.word	80
                                           
   5917 00D3F8 00 00                        	.word	0		; rightmost column
   5918 00D3FA 07 00                        	.word	7		; lefmost column
   5919 00D3FC 01 00                        	.word	1		; dx
                                           
                                           	MEM		16
                                           	NDX		16
                                           
                                           	code
                                           
   5926 00D3FE                             InvBomb:
   5927 00D3FE A2 00 00                     	LDX		#0
   5928 00D401                             .0001:
   5929 00D401 B5 00                        	LDA		active,X
   5930 00D403 F0 23                        	BEQ		.0002
   5931 00D405 20 D9 D4                     	JSR		CanDropBomb
   5932 00D408 F0 1E                        	BEQ		.0002
   5933 00D40A AF 08 A1 FE                  	LDA		PRNG_NUM
   5934 00D40E 8F 0E A1 FE                  	STA		PRNG_ADV
   5935 00D412 29 63 00                     	AND		#$63
   5936 00D415 D0 11                        	BNE		.0002
   5937 00D417 20 30 D4                     	JSR		FindEmptyBomb
   5938 00D41A 30 13                        	BMI		.0003
   5939 00D41C BD 00 01                     	LDA		InvadersX,X
   5940 00D41F 99 20 03                     	STA		bombX,Y
   5941 00D422 BD 00 02                     	LDA		InvadersY,X
   5942 00D425 99 30 03                     	STA		bombY,Y
   5943 00D428                             .0002:
   5944 00D428 E8                           	INX
   5945 00D429 E8                           	INX
   5946 00D42A E0 50 00                     	CPX		#80
   5947 00D42D 30 D2                        	BMI		.0001
   5948 00D42F                             .0003:
   5949 00D42F 60                           	RTS
                                           
   5951 00D430                             FindEmptyBomb:
   5952 00D430 A0 00 00                     	LDY		#0
   5953 00D433                             .0001:
   5954 00D433 B9 20 03                     	LDA		bombX,Y
   5955 00D436 F0 0A                        	BEQ		.0002
   5956 00D438 C8                           	INY
   5957 00D439 C8                           	INY
   5958 00D43A C0 10 00                     	CPY		#16
   5959 00D43D 30 F4                        	BMI		.0001
   5960 00D43F A0 FF FF                     	LDY		#-1
   5961 00D442                             .0002:
   5962 00D442 60                           	RTS
                                           
   5964 00D443                             MoveBombs:
   5965 00D443 A2 00 00                     	LDX		#0
   5966 00D446                             .0002:
   5967 00D446 BD 20 03                     	LDA		bombX,X
   5968 00D449 F0 14                        	BEQ		.0001
   5969 00D44B BD 30 03                     	LDA		bombY,X
   5970 00D44E C9 1E 00                     	CMP		#30			; has the bomb fallen all the way to the ground ?
   5971 00D451 10 06                        	BPL		.0003		; if yes, reset bomb
   5972 00D453 1A                           	INA
   5973 00D454 9D 30 03                     	STA		bombY,X
   5974 00D457 80 06                        	BRA		.0001
   5975 00D459                             .0003:
   5976 00D459 9E 20 03                     	STZ		bombX,X
   5977 00D45C 9E 30 03                     	STZ		bombY,X
   5978 00D45F                             .0001:
   5979 00D45F E8                           	INX
   5980 00D460 E8                           	INX
   5981 00D461 E0 10 00                     	CPX		#16
   5982 00D464 30 E0                        	BMI		.0002
   5983 00D466 60                           	RTS
                                           
   5985 00D467                             GetBombOffset:
   5986 00D467 B9 30 03                     	LDA		bombY,Y
   5987 00D46A 0A                           	ASL
   5988 00D46B AA                           	TAX
   5989 00D46C 42 5B BD 31 ED               	LDA		ZS:LineTbl,X
   5990 00D471 18                           	CLC
   5991 00D472 79 20 03                     	ADC		bombX,Y
   5992 00D475 79 20 03                     	ADC		bombX,Y
   5993 00D478 AA                           	TAX
   5994 00D479 60                           	RTS
                                           
   5996 00D47A                             RenderBombs:
   5997 00D47A A0 00 00                     	LDY		#0
   5998 00D47D                             .0001:
   5999 00D47D B9 30 03                     	LDA		bombY,Y
   6000 00D480 F0 0C                        	BEQ		.0002
   6001 00D482 20 67 D4                     	JSR		GetBombOffset
   6002 00D485 A9 24 00                     	LDA		#'$'
   6003 00D488 42 5B 9F 00 00 FD            	STA		ZS:VIDBUF,X
   6004 00D48E                             .0002:
   6005 00D48E C8                           	INY
   6006 00D48F C8                           	INY
   6007 00D490 C0 10 00                     	CPY		#16
   6008 00D493 30 E8                        	BMI		.0001
   6009 00D495 60                           	RTS
                                           
   6011 00D496                             TestBombsIntercept:
   6012 00D496 A0 00 00                     	LDY		#0
   6013 00D499                             .0001:
   6014 00D499 20 A4 D4                     	JSR		TestBombIntercept
   6015 00D49C C8                           	INY
   6016 00D49D C8                           	INY
   6017 00D49E C0 10 00                     	CPY		#16
   6018 00D4A1 30 F6                        	BMI		.0001
   6019 00D4A3 60                           	RTS
                                           
   6021 00D4A4                             TestBombIntercept:
   6022 00D4A4 20 67 D4                     	JSR		GetBombOffset
   6023 00D4A7 42 5B BF 00 00 FD            	LDA		ZS:VIDBUF,X
   6024 00D4AD C9 20 00                     	CMP		#' '
   6025 00D4B0 F0 1D                        	BEQ		.0001
   6026 00D4B2 B9 30 03                     	LDA		bombY,Y
   6027 00D4B5 C9 1D 00                     	CMP		#29
   6028 00D4B8 D0 16                        	BNE		.0002
   6029 00D4BA B9 20 03                     	LDA		bombX,Y
   6030 00D4BD D9 6E 00                     	CMP		manX,Y
   6031 00D4C0 D0 05                        	BNE		.0003
   6032 00D4C2 A9 01 00                     	LDA		#MAN_EXPLODING
   6033 00D4C5 85 72                        	STA		manState
   6034 00D4C7                             .0003:
   6035 00D4C7 BB                           	TYX
   6036 00D4C8 9E 30 03                     	STZ		bombY,X
   6037 00D4CB 9E 20 03                     	STZ		bombX,X
   6038 00D4CE 60                           	RTS
   6039 00D4CF                             .0001:
   6040 00D4CF 60                           	RTS
   6041 00D4D0                             .0002:
   6042 00D4D0 A9 20 00                     	LDA		#' '
   6043 00D4D3 9F 00 00 FD                  	STA		VIDBUF,X
   6044 00D4D7 80 EE                        	BRA		.0003
                                           
                                           ; An invader can drop a bomb only if there are no invaders underneath it.
                                           
   6048 00D4D9                             CanDropBomb:
   6049 00D4D9 E0 0F 00                     	CPX		#15
   6050 00D4DC 42 90 0C                     	BGE		.0001
   6051 00D4DF B5 10                        	LDA		active+16,X
   6052 00D4E1 15 20                        	ORA		active+32,X
   6053 00D4E3 15 30                        	ORA		active+48,X
   6054 00D4E5 15 40                        	ORA		active+64,X
   6055 00D4E7 49 01 00                     	EOR		#1
   6056 00D4EA 60                           	RTS
   6057 00D4EB                             .0001:
   6058 00D4EB E0 1F 00                     	CPX		#31
   6059 00D4EE 42 90 0A                     	BGE		.0002
   6060 00D4F1 B5 10                        	LDA		active+16,X
   6061 00D4F3 15 20                        	ORA		active+32,X
   6062 00D4F5 15 30                        	ORA		active+48,X
   6063 00D4F7 49 01 00                     	EOR		#1
   6064 00D4FA 60                           	RTS
   6065 00D4FB                             .0002:
   6066 00D4FB E0 2F 00                     	CPX		#47
   6067 00D4FE 42 90 08                     	BGE		.0003
   6068 00D501 B5 10                        	LDA		active+16,X
   6069 00D503 15 20                        	ORA		active+32,X
   6070 00D505 49 01 00                     	EOR		#1
   6071 00D508 60                           	RTS
   6072 00D509                             .0003:
   6073 00D509 E0 3F 00                     	CPX		#63
   6074 00D50C 42 90 06                     	BGE		.0004
   6075 00D50F B5 10                        	LDA		active+16,X
   6076 00D511 49 01 00                     	EOR		#1
   6077 00D514 60                           	RTS
   6078 00D515                             .0004:
   6079 00D515 A9 01 00                     	LDA		#1
   6080 00D518 60                           	RTS
                                           
                                           
                                           ; Test if it's possible to move to the left anymore.
                                           ;
   6085 00D519                             CanMoveLeft:
   6086 00D519 A5 62                        	LDA		leftmost_column
   6087 00D51B 0A                           	ASL
   6088 00D51C AA                           	TAX
   6089 00D51D BD 10 03                     	LDA		max_left,X
   6090 00D520 DD 00 01                     	CMP		InvadersX,X
   6091 00D523 30 04                        	BMI		.0001
   6092 00D525 A9 00 00                     	LDA		#0
   6093 00D528 60                           	RTS
   6094 00D529                             .0001:
   6095 00D529 A9 01 00                     	LDA		#1
   6096 00D52C 60                           	RTS
                                           
                                           ; Test if it's possible to move to the right anymore.
                                           ;
   6100 00D52D                             CanMoveRight:
   6101 00D52D A5 60                        	LDA		rightmost_column
   6102 00D52F 0A                           	ASL
   6103 00D530 AA                           	TAX
   6104 00D531 BD 00 03                     	LDA		min_right,X
   6105 00D534 DD 00 01                     	CMP		InvadersX,X
   6106 00D537 10 04                        	BPL		.0001
   6107 00D539 A9 00 00                     	LDA		#0
   6108 00D53C 60                           	RTS
   6109 00D53D                             .0001:
   6110 00D53D A9 01 00                     	LDA		#1
   6111 00D540 60                           	RTS
                                           
                                           ; Test if it's possible to move down anymore
                                           ;
   6115 00D541                             CanMoveDown:
   6116 00D541 A5 64                        	LDA		bottom_row
   6117 00D543 0A                           	ASL
   6118 00D544 0A                           	ASL
   6119 00D545 0A                           	ASL
   6120 00D546 0A                           	ASL
   6121 00D547 AA                           	TAX
   6122 00D548 BD 00 02                     	LDA		InvadersY,X
   6123 00D54B C9 1E 00                     	CMP		#30
   6124 00D54E 30 04                        	BMI		.0001
   6125 00D550 A9 00 00                     	LDA		#0
   6126 00D553 60                           	RTS
   6127 00D554                             .0001:
   6128 00D554 A9 01 00                     	LDA		#1
   6129 00D557 60                           	RTS
                                           
                                           ; Move all the invaders to the left
                                           ; Means incrementing the X co-ordinate
                                           ;
   6134 00D558                             MoveLeft:
   6135 00D558 A2 00 00                     	LDX		#00
   6136 00D55B                             .0002:
   6137 00D55B FE 00 01                     	INC		InvadersX,X
   6138 00D55E E8                           	INX
   6139 00D55F E8                           	INX
   6140 00D560 E0 50 00                     	CPX		#80
   6141 00D563 D0 F6                        	BNE		.0002
   6142 00D565 60                           	RTS
                                           
                                           ; Move all the invaders to the right.
                                           ; means decrementing the X co-ordinate
                                           ;
   6147 00D566                             MoveRight:
   6148 00D566 A2 00 00                     	LDX		#0
   6149 00D569                             .0002:
   6150 00D569 DE 00 01                     	DEC		InvadersX,X
   6151 00D56C E8                           	INX
   6152 00D56D E8                           	INX
   6153 00D56E E0 50 00                     	CPX		#80
   6154 00D571 D0 F6                        	BNE		.0002
   6155 00D573 60                           	RTS
                                           
                                           ; Move all the invaders down a row.
                                           ; Means incrementing the Y co-ordinate
                                           ;
   6160 00D574                             MoveDown:
   6161 00D574 A2 00 00                     	LDX		#00
   6162 00D577                             .0002:
   6163 00D577 FE 00 02                     	INC		InvadersY,X
   6164 00D57A E8                           	INX
   6165 00D57B E8                           	INX
   6166 00D57C E0 50 00                     	CPX		#80
   6167 00D57F D0 F6                        	BNE		.0002
   6168 00D581 60                           	RTS
                                           
                                           ; Move the invaders
                                           ; Retuns
                                           ; .A = 1 if it was possible to do a move, 0 otherwise
                                           ;
   6174 00D582                             Move:
   6175 00D582 24 5E                        	BIT		left_right
   6176 00D584 30 0A                        	BMI		.0002
   6177 00D586 20 19 D5                     	JSR		CanMoveLeft
   6178 00D589 F0 0F                        	BEQ		.0001
   6179 00D58B 20 58 D5                     	JSR		MoveLeft
   6180 00D58E 80 19                        	BRA		.0003
   6181 00D590                             .0002:
   6182 00D590 20 2D D5                     	JSR		CanMoveRight
   6183 00D593 F0 05                        	BEQ		.0001
   6184 00D595 20 66 D5                     	JSR		MoveRight
   6185 00D598 80 0F                        	BRA		.0003
   6186 00D59A                             .0001:
   6187 00D59A 20 41 D5                     	JSR		CanMoveDown
   6188 00D59D F0 0E                        	BEQ		.0004
   6189 00D59F A5 5E                        	LDA		left_right
   6190 00D5A1 49 FF FF                     	EOR		#$FFFF
   6191 00D5A4 85 5E                        	STA		left_right
   6192 00D5A6 20 74 D5                     	JSR		MoveDown
   6193 00D5A9                             .0003:
   6194 00D5A9 A9 01 00                     	LDA		#1
   6195 00D5AC 60                           	RTS
   6196 00D5AD                             .0004:
   6197 00D5AD A9 00 00                     	LDA		#0
   6198 00D5B0 60                           	RTS
                                           
   6200 00D5B1                             Initialize:
   6201 00D5B1 64 60                        	STZ		rightmost_column
   6202 00D5B3 A9 07 00                     	LDA		#7
   6203 00D5B6 85 62                        	STA		leftmost_column
   6204 00D5B8 64 66                        	STZ		top_row
   6205 00D5BA A9 04 00                     	LDA		#4
   6206 00D5BD 85 64                        	STA		bottom_row
   6207 00D5BF 64 5E                        	STZ		left_right
   6208 00D5C1 20 09 D6                     	JSR		ActivateAllInvaders
   6209 00D5C4 A2 00 00                     	LDX		#0
   6210 00D5C7                             .0001:
   6211 00D5C7 42 1B BD 18 DA               	LDA		CS:StartX,X
   6212 00D5CC 9D 00 01                     	STA		InvadersX,X
   6213 00D5CF 42 1B BD C8 D9               	LDA		CS:StartY,X
   6214 00D5D4 9D 00 02                     	STA		InvadersY,X
   6215 00D5D7 E8                           	INX
   6216 00D5D8 E8                           	INX
   6217 00D5D9 E0 50 00                     	CPX		#80
   6218 00D5DC 30 E9                        	BMI		.0001
   6219 00D5DE A2 00 00                     	LDX		#0
   6220 00D5E1                             .0002:
   6221 00D5E1 42 1B BD D8 D3               	LDA		CS:st_min_right,X
   6222 00D5E6 9D 00 03                     	STA		min_right,X
   6223 00D5E9 E8                           	INX
   6224 00D5EA E8                           	INX
   6225 00D5EB E0 20 00                     	CPX		#32
   6226 00D5EE 30 F1                        	BMI		.0002
                                           	; Initialize Bombs
   6228 00D5F0 A2 00 00                     	LDX		#0
   6229 00D5F3                             .0003:
   6230 00D5F3 9E 20 03                     	STZ		bombX,X
   6231 00D5F6 9E 30 03                     	STZ		bombY,X
   6232 00D5F9 E8                           	INX
   6233 00D5FA E8                           	INX
   6234 00D5FB E0 10 00                     	CPX		#16
   6235 00D5FE 30 F3                        	BMI		.0003
   6236 00D600 A9 FE FF                     	LDA		#$FFFE
   6237 00D603 42 5B 8D 68 78               	STA		ZS:do_invaders
   6238 00D608 60                           	RTS
                                           
   6240 00D609                             ActivateAllInvaders:
   6241 00D609 A2 00 00                     	LDX		#0
   6242 00D60C A9 01 00                     	LDA		#1
   6243 00D60F                             .0001:
   6244 00D60F 95 00                        	STA		active,X
   6245 00D611 E8                           	INX
   6246 00D612 E8                           	INX
   6247 00D613 E0 50 00                     	CPX		#80
   6248 00D616 D0 F7                        	BNE		.0001
   6249 00D618 60                           	RTS
                                           
   6251 00D619                             IsAllDestroyed:
   6252 00D619 20 A1 D6                     	JSR		IsRightmostColumnDestroyed
   6253 00D61C F0 2C                        	BEQ		.0001
   6254 00D61E E6 60                        	INC		rightmost_column
   6255 00D620 AD 0C 03                     	LDA		min_right+12
   6256 00D623 8D 0E 03                     	STA		min_right+14
   6257 00D626 AD 0A 03                     	LDA		min_right+10
   6258 00D629 8D 0C 03                     	STA		min_right+12
   6259 00D62C AD 08 03                     	LDA		min_right+8
   6260 00D62F 8D 0A 03                     	STA		min_right+10
   6261 00D632 AD 06 03                     	LDA		min_right+6
   6262 00D635 8D 08 03                     	STA		min_right+8
   6263 00D638 AD 04 03                     	LDA		min_right+4
   6264 00D63B 8D 06 03                     	STA		min_right+6
   6265 00D63E AD 02 03                     	LDA		min_right+2
   6266 00D641 8D 04 03                     	STA		min_right+4
   6267 00D644 AD 00 03                     	LDA		min_right
   6268 00D647 8D 02 03                     	STA		min_right+2
   6269 00D64A                             .0001:
   6270 00D64A 20 9D D6                     	JSR		IsLeftmostColumnDestroyed
   6271 00D64D F0 2C                        	BEQ		.0002
   6272 00D64F C6 62                        	DEC		leftmost_column
   6273 00D651 AD 12 03                     	LDA		max_left+2
   6274 00D654 8D 10 03                     	STA		max_left
   6275 00D657 AD 14 03                     	LDA		max_left+4
   6276 00D65A 8D 12 03                     	STA		max_left+2
   6277 00D65D AD 16 03                     	LDA		max_left+6
   6278 00D660 8D 14 03                     	STA		max_left+4
   6279 00D663 AD 18 03                     	LDA		max_left+8
   6280 00D666 8D 16 03                     	STA		max_left+6
   6281 00D669 AD 1A 03                     	LDA		max_left+10
   6282 00D66C 8D 18 03                     	STA		max_left+8
   6283 00D66F AD 1C 03                     	LDA		max_left+12
   6284 00D672 8D 1A 03                     	STA		max_left+10
   6285 00D675 AD 1E 03                     	LDA		max_left+14
   6286 00D678 8D 1C 03                     	STA		max_left+12
   6287 00D67B                             .0002:
   6288 00D67B A5 62                        	LDA		leftmost_column
   6289 00D67D C5 60                        	CMP		rightmost_column
   6290 00D67F 30 18                        	BMI		.allDestroyed
   6291 00D681 20 BD D6                     	JSR		IsBottomRowDestroyed
   6292 00D684 F0 02                        	BEQ		.0003
   6293 00D686 C6 64                        	DEC		bottom_row
   6294 00D688                             .0003:
   6295 00D688 20 B9 D6                     	JSR		IsTopRowDestroyed
   6296 00D68B F0 02                        	BEQ		.0004
   6297 00D68D E6 66                        	INC		top_row
   6298 00D68F                             .0004:
   6299 00D68F A5 64                        	LDA		bottom_row
   6300 00D691 C5 66                        	CMP		top_row
   6301 00D693 30 04                        	BMI		.allDestroyed
   6302 00D695 A9 00 00                     	LDA		#0
   6303 00D698 60                           	RTS
   6304 00D699                             .allDestroyed:
   6305 00D699 A9 01 00                     	LDA		#1
   6306 00D69C 60                           	RTS
                                           
                                           
   6309 00D69D                             IsLeftmostColumnDestroyed:
   6310 00D69D A5 62                        	LDA		leftmost_column
   6311 00D69F 80 02                        	BRA		IsColumnDestroyed
   6312 00D6A1                             IsRightmostColumnDestroyed:
   6313 00D6A1 A5 60                        	LDA		rightmost_column
   6314 00D6A3                             IsColumnDestroyed:
   6315 00D6A3 0A                           	ASL
   6316 00D6A4 AA                           	TAX
   6317 00D6A5 B5 00                        	LDA		active,X
   6318 00D6A7 15 10                        	ORA		active+16,X
   6319 00D6A9 15 20                        	ORA		active+32,X
   6320 00D6AB 15 30                        	ORA		active+48,X
   6321 00D6AD 15 40                        	ORA		active+64,X
   6322 00D6AF 15 50                        	ORA		active+80,X
   6323 00D6B1 15 60                        	ORA		active+96,X
   6324 00D6B3 15 70                        	ORA		active+112,X
   6325 00D6B5 49 01 00                     	EOR		#1
   6326 00D6B8 60                           	RTS
                                           
   6328 00D6B9                             IsTopRowDestroyed:
   6329 00D6B9 A5 66                        	LDA		top_row
   6330 00D6BB 80 02                        	BRA		IsRowDestroyed
   6331 00D6BD                             IsBottomRowDestroyed:
   6332 00D6BD A5 64                        	LDA		bottom_row
   6333 00D6BF                             IsRowDestroyed:
   6334 00D6BF 0A                           	ASL
   6335 00D6C0 0A                           	ASL
   6336 00D6C1 0A                           	ASL
   6337 00D6C2 0A                           	ASL
   6338 00D6C3 B5 00                        	LDA		active,X
   6339 00D6C5 15 02                        	ORA		active+2,X
   6340 00D6C7 15 04                        	ORA		active+4,X
   6341 00D6C9 15 06                        	ORA		active+6,X
   6342 00D6CB 15 08                        	ORA		active+8,X
   6343 00D6CD 15 0A                        	ORA		active+10,X
   6344 00D6CF 15 0C                        	ORA		active+12,X
   6345 00D6D1 15 0E                        	ORA		active+14,X
   6346 00D6D3 49 01 00                     	EOR		#1
   6347 00D6D6 60                           	RTS
                                           
                                           ; TickCount counts 1/100 of a second. We want to animate the graphics at a much
                                           ; slower rate, so we use bit 6 of the tick count to indicate when to animate.
                                           ;
   6352 00D6D7                             ShiftTick:
   6353 00D6D7 42 5B A5 04                  	LDA		ZS:TickCount
   6354 00D6DB 4A                           	LSR
   6355 00D6DC 4A                           	LSR
   6356 00D6DD 4A                           	LSR
   6357 00D6DE 4A                           	LSR
   6358 00D6DF 4A                           	LSR
   6359 00D6E0 4A                           	LSR
   6360 00D6E1 60                           	RTS
                                           
   6362 00D6E2                             RenderInvaders:
                                           	; First, clear the screen
   6364 00D6E2 A2 00 00                     	LDX		#0
   6365 00D6E5 A9 20 00                     	LDA		#' '
   6366 00D6E8 09 00 BF                     	ORA		#$BF00
   6367 00D6EB                             .0003:
   6368 00D6EB 42 5B 9F 00 00 FD            	STA		ZS:VIDBUF,X
   6369 00D6F1 E8                           	INX
   6370 00D6F2 E8                           	INX
   6371 00D6F3 E0 58 14                     	CPX		#84*31*2
   6372 00D6F6 30 F3                        	BMI		.0003
   6373 00D6F8 A2 00 00                     	LDX		#0
   6374 00D6FB                             .0002:
   6375 00D6FB C2 30                        	REP		#$30
                                           	MEM		16
                                           	NDX		16
   6378 00D6FD B5 00                        	LDA		active,X
   6379 00D6FF F0 FF BD 01                  	LBEQ	.0001
   6380 00D703 BD 00 04                     	LDA		inv_state,X
   6381 00D706 BD 00 02                     	LDA		InvadersY,X
   6382 00D709 0A                           	ASL
   6383 00D70A A8                           	TAY
   6384 00D70B 42 5B B9 31 ED               	LDA		ZS:LineTbl,Y
   6385 00D710 18                           	CLC
   6386 00D711 7D 00 01                     	ADC		InvadersX,X
   6387 00D714 18                           	CLC
   6388 00D715 7D 00 01                     	ADC		InvadersX,X
   6389 00D718 A8                           	TAY
   6390 00D719 E2 20                        	SEP		#$20			; eight bit acc
                                           	MEM		8
   6392 00D71B 42 1B BD 68 DA               	LDA		CS:InvaderType,X
   6393 00D720 C9 01                        	CMP		#1
   6394 00D722 D0 46                        	BNE		.0004
   6395 00D724 A9 E9                        	LDA		#233
   6396 00D726 42 5B 42 99 00 00 FD 00      	STA		ZS:VIDBUF,Y
                                         
   6397 00D72E A9 F2                        	LDA		#242
   6398 00D730 42 5B 42 99 02 00 FD 00      	STA		ZS:VIDBUF+2,Y
                                         
   6399 00D738 A9 DF                        	LDA		#223
   6400 00D73A 42 5B 42 99 04 00 FD 00      	STA		ZS:VIDBUF+4,Y
                                         
   6401 00D742 20 D7 D6                     	JSR		ShiftTick
   6402 00D745 90 04                        	BCC		.0005
   6403 00D747 A9 58                        	LDA		#'X'
   6404 00D749 80 02                        	BRA		.0006
   6405 00D74B                             .0005:
   6406 00D74B A9 56                        	LDA		#'V'
   6407 00D74D                             .0006:
   6408 00D74D 42 5B 42 99 54 00 FD 00      	STA		ZS:VIDBUF+84,Y
                                         
   6409 00D755 42 5B 42 99 58 00 FD 00      	STA		ZS:VIDBUF+88,Y
                                         
   6410 00D75D A9 20                        	LDA		#' '
   6411 00D75F 42 5B 42 99 56 00 FD 00      	STA		ZS:VIDBUF+86,Y
                                         
   6412 00D767 82 E4 00                     	BRL		.0007
   6413 00D76A                             .0004:
   6414 00D76A C9 02                        	CMP		#2
   6415 00D76C D0 FF 83 00                  	LBNE	.0008
   6416 00D770 20 D7 D6                     	JSR		ShiftTick
   6417 00D773 90 3F                        	BCC		.0009
   6418 00D775 A9 FC                        	LDA		#252
   6419 00D777 42 5B 42 99 00 00 FD 00      	STA		ZS:VIDBUF,Y
                                         
   6420 00D77F A9 99                        	LDA		#153
   6421 00D781 42 5B 42 99 02 00 FD 00      	STA		ZS:VIDBUF+2,Y
                                         
   6422 00D789 A9 FE                        	LDA		#254
   6423 00D78B 42 5B 42 99 04 00 FD 00      	STA		ZS:VIDBUF+4,Y
                                         
   6424 00D793 A9 E2                        	LDA		#226
   6425 00D795 42 5B 42 99 54 00 FD 00      	STA		ZS:VIDBUF+84,Y
                                         
   6426 00D79D A9 62                        	LDA		#98
   6427 00D79F 42 5B 42 99 56 00 FD 00      	STA		ZS:VIDBUF+86,Y
                                         
   6428 00D7A7 A9 E2                        	LDA		#226
   6429 00D7A9 42 5B 42 99 58 00 FD 00      	STA		ZS:VIDBUF+88,Y
                                         
   6430 00D7B1 82 9A 00                     	BRL		.0007
   6431 00D7B4                             .0009:
   6432 00D7B4 A9 62                        	LDA		#98
   6433 00D7B6 42 5B 42 99 00 00 FD 00      	STA		ZS:VIDBUF,Y
                                         
   6434 00D7BE A9 99                        	LDA		#153
   6435 00D7C0 42 5B 42 99 02 00 FD 00      	STA		ZS:VIDBUF+2,Y
                                         
   6436 00D7C8 A9 62                        	LDA		#98
   6437 00D7CA 42 5B 42 99 04 00 FD 00      	STA		ZS:VIDBUF+4,Y
                                         
   6438 00D7D2 A9 EC                        	LDA		#236
   6439 00D7D4 42 5B 42 99 54 00 FD 00      	STA		ZS:VIDBUF+84,Y
                                         
   6440 00D7DC A9 62                        	LDA		#98
   6441 00D7DE 42 5B 42 99 56 00 FD 00      	STA		ZS:VIDBUF+86,Y
                                         
   6442 00D7E6 A9 FB                        	LDA		#251
   6443 00D7E8 42 5B 42 99 58 00 FD 00      	STA		ZS:VIDBUF+88,Y
                                         
   6444 00D7F0 82 5B 00                     	BRL		.0007
   6445 00D7F3                             .0008:
   6446 00D7F3 A9 FF                        	LDA		#255
   6447 00D7F5 42 5B 42 99 00 00 FD 00      	STA		ZS:VIDBUF,Y
                                         
   6448 00D7FD A9 F8                        	LDA		#248
   6449 00D7FF 42 5B 42 99 02 00 FD 00      	STA		ZS:VIDBUF+2,Y
                                         
   6450 00D807 A9 7F                        	LDA		#127
   6451 00D809 42 5B 99 02 D8               	STA		ZS:VIDBUf+4,Y
   6452 00D80E 20 D7 D6                     	JSR		ShiftTick
   6453 00D811 90 20                        	BCC		.0010
   6454 00D813 A9 FF                        	LDA		#255
   6455 00D815 42 5B 42 99 54 00 FD 00      	STA		ZS:VIDBUF+84,Y
                                         
   6456 00D81D A9 F9                        	LDA		#249
   6457 00D81F 42 5B 42 99 56 00 FD 00      	STA		ZS:VIDBUF+86,Y
                                         
   6458 00D827 A9 7F                        	LDA		#127
   6459 00D829 42 5B 42 99 58 00 FD 00      	STA		ZS:VIDBUF+88,Y
                                         
   6460 00D831 80 1B                        	BRA		.0007
   6461 00D833                             .0010:
   6462 00D833 A9 E1                        	LDA		#225
   6463 00D835 42 5B 99 52 D8               	STA		ZS:VIDBUf+84,Y
   6464 00D83A A9 F9                        	LDA		#249
   6465 00D83C 42 5B 42 99 56 00 FD 00      	STA		ZS:VIDBUF+86,Y
                                         
   6466 00D844 A9 60                        	LDA		#96
   6467 00D846 42 5B 42 99 58 00 FD 00      	STA		ZS:VIDBUF+88,Y
                                         
   6468 00D84E                             .0007:
                                           	; Surround the alien with spaces
   6470 00D84E A9 20                        	LDA		#' '
   6471 00D850 42 5B 42 99 AA FF FC 00      	STA		ZS:VIDBUF-86,Y
                                         
   6472 00D858 42 5B 42 99 AC FF FC 00      	STA		ZS:VIDBUF-84,Y
                                         
   6473 00D860 42 5B 42 99 AE FF FC 00      	STA		ZS:VIDBUF-82,Y
                                         
   6474 00D868 42 5B 42 99 B0 FF FC 00      	STA		ZS:VIDBUF-80,Y
                                         
   6475 00D870 42 5B 42 99 B2 FF FC 00      	STA		ZS:VIDBUF-78,Y
                                         
   6476 00D878 42 5B 42 99 FE FF FC 00      	STA		ZS:VIDBUF-2,Y
                                         
   6477 00D880 42 5B 42 99 06 00 FD 00      	STA		ZS:VIDBUF+6,Y
                                         
   6478 00D888 42 5B 42 99 52 00 FD 00      	STA		ZS:VIDBUF+82,Y
                                         
   6479 00D890 42 5B 42 99 5A 00 FD 00      	STA		ZS:VIDBUF+90,Y
                                         
   6480 00D898 42 5B 42 99 A6 00 FD 00      	STA		ZS:VIDBUF+166,Y
                                         
   6481 00D8A0 42 5B 42 99 A8 00 FD 00      	STA		ZS:VIDBUF+168,Y
                                         
   6482 00D8A8 42 5B 42 99 AA 00 FD 00      	STA		ZS:VIDBUF+170,Y
                                         
   6483 00D8B0 42 5B 42 99 AC 00 FD 00      	STA		ZS:VIDBUF+172,Y
                                         
   6484 00D8B8 42 5B 42 99 AE 00 FD 00      	STA		ZS:VIDBUF+174,Y
                                         
   6485 00D8C0                             .0001:
   6486 00D8C0 E8                           	INX
   6487 00D8C1 E8                           	INX
   6488 00D8C2 E0 50 00                     	CPX		#80
   6489 00D8C5 D0 FF 32 FE                  	LBNE	.0002
   6490 00D8C9 C2 20                        	REP		#$20
                                           	MEM		16
   6492 00D8CB 60                           	RTS
                                           
                                           public InvadersTask:
   6495 00D8CC                             .0001:
   6496 00D8CC F4 00 00                     	PEA		0				; set data segment to $7800
   6497 00D8CF F4 00 78                     	PEA		$7800
   6498 00D8D2 42 2B                        	PLDS
   6499 00D8D4 A9 FF 2B                     	LDA		#$2BFF			; set stack to $2BFF
   6500 00D8D7 1B                           	TAS
   6501 00D8D8 20 B1 D5                     	JSR		Initialize
   6502 00D8DB 20 E2 D6                     	JSR		RenderInvaders
   6503 00D8DE                             .0002:
   6504 00D8DE 42 20 E1 E7 07               	JCR 	KeybdGetCharNoWaitCtx,7	; check for char at keyboard
   6505 00D8E3                             .0004:
   6506 00D8E3 A2 00 00                     	LDX		#0
   6507 00D8E6                             .0006:
   6508 00D8E6 E8                           	INX
   6509 00D8E7 E0 D0 07                     	CPX		#2000
   6510 00D8EA D0 FA                        	BNE		.0006
   6511 00D8EC 42 5B A5 04                  	LDA		ZS:TickCount
   6512 00D8F0 29 03 00                     	AND		#$3
   6513 00D8F3 D0 E9                        	BNE		.0002
   6514 00D8F5 20 FE D3                     	JSR		InvBomb
   6515 00D8F8 20 E2 D6                     	JSR		RenderInvaders
   6516 00D8FB 20 7A D4                     	JSR		RenderBombs
   6517 00D8FE 20 43 D4                     	JSR		MoveBombs
   6518 00D901 42 5B A5 04                  	LDA		ZS:TickCount
   6519 00D905 29 0F 00                     	AND		#$F
   6520 00D908 D0 D4                        	BNE		.0002
   6521 00D90A 20 19 D6                     	JSR		IsAllDestroyed
   6522 00D90D D0 BD                        	BNE		.0001
   6523 00D90F 20 82 D5                     	JSR		Move
   6524 00D912 F0 B8                        	BEQ		.0001				; Can't move, re-initialize
   6525 00D914 80 C8                        	BRA		.0002
   6526 00D916                             .0005:
   6527 00D916 85 6A                        	STA		inv_tick
   6528 00D918 80 C4                        	BRA		.0002
   6529 00D91A                             .0003:
   6530 00D91A C9 03 00                     	CMP		#3
   6531 00D91D D0 C4                        	BNE		.0004
   6532 00D91F 42 5B 9C 68 78               	STZ		ZS:do_invaders
   6533 00D924 42 60                        	RTT
   6534 00D926 80 A4                        	BRA		.0001
                                           
   6536 00D928                             InvaderRow:
   6537 00D928 00 00                        	.word	0
   6538 00D92A 00 00                        	.word	0
   6539 00D92C 00 00                        	.word	0
   6540 00D92E 00 00                        	.word	0
   6541 00D930 00 00                        	.word	0
   6542 00D932 00 00                        	.word	0
   6543 00D934 00 00                        	.word	0
   6544 00D936 00 00                        	.word	0
                                           
   6546 00D938 01 00                        	.word	1
   6547 00D93A 01 00                        	.word	1
   6548 00D93C 01 00                        	.word	1
   6549 00D93E 01 00                        	.word	1
   6550 00D940 01 00                        	.word	1
   6551 00D942 01 00                        	.word	1
   6552 00D944 01 00                        	.word	1
   6553 00D946 01 00                        	.word	1
                                           
   6555 00D948 02 00                        	.word	2
   6556 00D94A 02 00                        	.word	2
   6557 00D94C 02 00                        	.word	2
   6558 00D94E 02 00                        	.word	2
   6559 00D950 02 00                        	.word	2
   6560 00D952 02 00                        	.word	2
   6561 00D954 02 00                        	.word	2
   6562 00D956 02 00                        	.word	2
                                           
   6564 00D958 03 00                        	.word	3
   6565 00D95A 03 00                        	.word	3
   6566 00D95C 03 00                        	.word	3
   6567 00D95E 03 00                        	.word	3
   6568 00D960 03 00                        	.word	3
   6569 00D962 03 00                        	.word	3
   6570 00D964 03 00                        	.word	3
   6571 00D966 03 00                        	.word	3
                                           
   6573 00D968 04 00                        	.word	4
   6574 00D96A 04 00                        	.word	4
   6575 00D96C 04 00                        	.word	4
   6576 00D96E 04 00                        	.word	4
   6577 00D970 04 00                        	.word	4
   6578 00D972 04 00                        	.word	4
   6579 00D974 04 00                        	.word	4
   6580 00D976 04 00                        	.word	4
                                           
   6582 00D978                             InvaderCol:
   6583 00D978 00 00                        	.word	0
   6584 00D97A 01 00                        	.word	1
   6585 00D97C 02 00                        	.word	2
   6586 00D97E 03 00                        	.word	3
   6587 00D980 04 00                        	.word	4
   6588 00D982 05 00                        	.word	5
   6589 00D984 06 00                        	.word	6
   6590 00D986 07 00                        	.word	7
                                           
   6592 00D988 00 00                        	.word	0
   6593 00D98A 01 00                        	.word	1
   6594 00D98C 02 00                        	.word	2
   6595 00D98E 03 00                        	.word	3
   6596 00D990 04 00                        	.word	4
   6597 00D992 05 00                        	.word	5
   6598 00D994 06 00                        	.word	6
   6599 00D996 07 00                        	.word	7
                                           
   6601 00D998 00 00                        	.word	0
   6602 00D99A 01 00                        	.word	1
   6603 00D99C 02 00                        	.word	2
   6604 00D99E 03 00                        	.word	3
   6605 00D9A0 04 00                        	.word	4
   6606 00D9A2 05 00                        	.word	5
   6607 00D9A4 06 00                        	.word	6
   6608 00D9A6 07 00                        	.word	7
                                           
   6610 00D9A8 00 00                        	.word	0
   6611 00D9AA 01 00                        	.word	1
   6612 00D9AC 02 00                        	.word	2
   6613 00D9AE 03 00                        	.word	3
   6614 00D9B0 04 00                        	.word	4
   6615 00D9B2 05 00                        	.word	5
   6616 00D9B4 06 00                        	.word	6
   6617 00D9B6 07 00                        	.word	7
                                           
   6619 00D9B8 00 00                        	.word	0
   6620 00D9BA 01 00                        	.word	1
   6621 00D9BC 02 00                        	.word	2
   6622 00D9BE 03 00                        	.word	3
   6623 00D9C0 04 00                        	.word	4
   6624 00D9C2 05 00                        	.word	5
   6625 00D9C4 06 00                        	.word	6
   6626 00D9C6 07 00                        	.word	7
                                           
                                           ; Starting Y co-ordinate for each invader
                                           
   6630 00D9C8                             StartY:
   6631 00D9C8 03 00                        	.word	3
   6632 00D9CA 03 00                        	.word	3
   6633 00D9CC 03 00                        	.word	3
   6634 00D9CE 03 00                        	.word	3
   6635 00D9D0 03 00                        	.word	3
   6636 00D9D2 03 00                        	.word	3
   6637 00D9D4 03 00                        	.word	3
   6638 00D9D6 03 00                        	.word	3
                                           
   6640 00D9D8 06 00                        	.word	6
   6641 00D9DA 06 00                        	.word	6
   6642 00D9DC 06 00                        	.word	6
   6643 00D9DE 06 00                        	.word	6
   6644 00D9E0 06 00                        	.word	6
   6645 00D9E2 06 00                        	.word	6
   6646 00D9E4 06 00                        	.word	6
   6647 00D9E6 06 00                        	.word	6
                                           
   6649 00D9E8 09 00                        	.word	9
   6650 00D9EA 09 00                        	.word	9
   6651 00D9EC 09 00                        	.word	9
   6652 00D9EE 09 00                        	.word	9
   6653 00D9F0 09 00                        	.word	9
   6654 00D9F2 09 00                        	.word	9
   6655 00D9F4 09 00                        	.word	9
   6656 00D9F6 09 00                        	.word	9
                                           
   6658 00D9F8 0C 00                        	.word	12
   6659 00D9FA 0C 00                        	.word	12
   6660 00D9FC 0C 00                        	.word	12
   6661 00D9FE 0C 00                        	.word	12
   6662 00DA00 0C 00                        	.word	12
   6663 00DA02 0C 00                        	.word	12
   6664 00DA04 0C 00                        	.word	12
   6665 00DA06 0C 00                        	.word	12
                                           
   6667 00DA08 0F 00                        	.word	15
   6668 00DA0A 0F 00                        	.word	15
   6669 00DA0C 0F 00                        	.word	15
   6670 00DA0E 0F 00                        	.word	15
   6671 00DA10 0F 00                        	.word	15
   6672 00DA12 0F 00                        	.word	15
   6673 00DA14 0F 00                        	.word	15
   6674 00DA16 0F 00                        	.word	15
                                           
                                           ; Starting X co-ordinate for each invader
                                           
   6678 00DA18                             StartX:
   6679 00DA18 01 00                        	.word	1
   6680 00DA1A 05 00                        	.word	5
   6681 00DA1C 09 00                        	.word	9
   6682 00DA1E 0D 00                        	.word	13
   6683 00DA20 11 00                        	.word	17
   6684 00DA22 15 00                        	.word	21
   6685 00DA24 19 00                        	.word	25
   6686 00DA26 1D 00                        	.word	29
                                           
   6688 00DA28 01 00                        	.word	1
   6689 00DA2A 05 00                        	.word	5
   6690 00DA2C 09 00                        	.word	9
   6691 00DA2E 0D 00                        	.word	13
   6692 00DA30 11 00                        	.word	17
   6693 00DA32 15 00                        	.word	21
   6694 00DA34 19 00                        	.word	25
   6695 00DA36 1D 00                        	.word	29
                                           
   6697 00DA38 01 00                        	.word	1
   6698 00DA3A 05 00                        	.word	5
   6699 00DA3C 09 00                        	.word	9
   6700 00DA3E 0D 00                        	.word	13
   6701 00DA40 11 00                        	.word	17
   6702 00DA42 15 00                        	.word	21
   6703 00DA44 19 00                        	.word	25
   6704 00DA46 1D 00                        	.word	29
                                           
   6706 00DA48 01 00                        	.word	1
   6707 00DA4A 05 00                        	.word	5
   6708 00DA4C 09 00                        	.word	9
   6709 00DA4E 0D 00                        	.word	13
   6710 00DA50 11 00                        	.word	17
   6711 00DA52 15 00                        	.word	21
   6712 00DA54 19 00                        	.word	25
   6713 00DA56 1D 00                        	.word	29
                                           
   6715 00DA58 01 00                        	.word	1
   6716 00DA5A 05 00                        	.word	5
   6717 00DA5C 09 00                        	.word	9
   6718 00DA5E 0D 00                        	.word	13
   6719 00DA60 11 00                        	.word	17
   6720 00DA62 15 00                        	.word	21
   6721 00DA64 19 00                        	.word	25
   6722 00DA66 1D 00                        	.word	29
                                           
   6724 00DA68                             InvaderType:
   6725 00DA68 01 00                        	.word	1
   6726 00DA6A 01 00                        	.word	1
   6727 00DA6C 01 00                        	.word	1
   6728 00DA6E 01 00                        	.word	1
   6729 00DA70 01 00                        	.word	1
   6730 00DA72 01 00                        	.word	1
   6731 00DA74 01 00                        	.word	1
   6732 00DA76 01 00                        	.word	1
                                           
   6734 00DA78 02 00                        	.word	2
   6735 00DA7A 02 00                        	.word	2
   6736 00DA7C 02 00                        	.word	2
   6737 00DA7E 02 00                        	.word	2
   6738 00DA80 02 00                        	.word	2
   6739 00DA82 02 00                        	.word	2
   6740 00DA84 02 00                        	.word	2
   6741 00DA86 02 00                        	.word	2
                                           
   6743 00DA88 02 00                        	.word	2
   6744 00DA8A 02 00                        	.word	2
   6745 00DA8C 02 00                        	.word	2
   6746 00DA8E 02 00                        	.word	2
   6747 00DA90 02 00                        	.word	2
   6748 00DA92 02 00                        	.word	2
   6749 00DA94 02 00                        	.word	2
   6750 00DA96 02 00                        	.word	2
                                           
   6752 00DA98 03 00                        	.word	3
   6753 00DA9A 03 00                        	.word	3
   6754 00DA9C 03 00                        	.word	3
   6755 00DA9E 03 00                        	.word	3
   6756 00DAA0 03 00                        	.word	3
   6757 00DAA2 03 00                        	.word	3
   6758 00DAA4 03 00                        	.word	3
   6759 00DAA6 03 00                        	.word	3
                                           
   6761 00DAA8 03 00                        	.word	3
   6762 00DAAA 03 00                        	.word	3
   6763 00DAAC 03 00                        	.word	3
   6764 00DAAE 03 00                        	.word	3
   6765 00DAB0 03 00                        	.word	3
   6766 00DAB2 03 00                        	.word	3
   6767 00DAB4 03 00                        	.word	3
   6768 00DAB6 03 00                        	.word	3
                                           			
Finitron FT832 assembler   version 1.4   Wed Nov 18 20:01:03 2015     Page 1
FTBios816.asm


                                           .include "invaders.asm"
                                           
                                           ;	cpu		W65C816S
                                           	cpu		FT832
   6773 00DAB8 FF FF FF FF FF FF FF FF      	.org	$E000
   6773 00DAC0 FF FF FF FF FF FF FF FF    
   6773 00DAC8 FF FF FF FF FF FF FF FF    
   6773 00DAD0 FF FF FF FF FF FF FF FF    
   6773 00DAD8 FF FF FF FF FF FF FF FF    
   6773 00DAE0 FF FF FF FF FF FF FF FF    
   6773 00DAE8 FF FF FF FF FF FF FF FF    
   6773 00DAF0 FF FF FF FF FF FF FF FF    
   6773 00DAF8 FF FF FF FF FF FF FF FF    
   6773 00DB00 FF FF FF FF FF FF FF FF    
   6773 00DB08 FF FF FF FF FF FF FF FF    
   6773 00DB10 FF FF FF FF FF FF FF FF    
   6773 00DB18 FF FF FF FF FF FF FF FF    
   6773 00DB20 FF FF FF FF FF FF FF FF    
   6773 00DB28 FF FF FF FF FF FF FF FF    
   6773 00DB30 FF FF FF FF FF FF FF FF    
   6773 00DB38 FF FF FF FF FF FF FF FF    
   6773 00DB40 FF FF FF FF FF FF FF FF    
   6773 00DB48 FF FF FF FF FF FF FF FF    
   6773 00DB50 FF FF FF FF FF FF FF FF    
   6773 00DB58 FF FF FF FF FF FF FF FF    
   6773 00DB60 FF FF FF FF FF FF FF FF    
   6773 00DB68 FF FF FF FF FF FF FF FF    
   6773 00DB70 FF FF FF FF FF FF FF FF    
   6773 00DB78 FF FF FF FF FF FF FF FF    
   6773 00DB80 FF FF FF FF FF FF FF FF    
   6773 00DB88 FF FF FF FF FF FF FF FF    
   6773 00DB90 FF FF FF FF FF FF FF FF    
   6773 00DB98 FF FF FF FF FF FF FF FF    
   6773 00DBA0 FF FF FF FF FF FF FF FF    
   6773 00DBA8 FF FF FF FF FF FF FF FF    
   6773 00DBB0 FF FF FF FF FF FF FF FF    
   6773 00DBB8 FF FF FF FF FF FF FF FF    
   6773 00DBC0 FF FF FF FF FF FF FF FF    
   6773 00DBC8 FF FF FF FF FF FF FF FF    
   6773 00DBD0 FF FF FF FF FF FF FF FF    
   6773 00DBD8 FF FF FF FF FF FF FF FF    
   6773 00DBE0 FF FF FF FF FF FF FF FF    
   6773 00DBE8 FF FF FF FF FF FF FF FF    
   6773 00DBF0 FF FF FF FF FF FF FF FF    
   6773 00DBF8 FF FF FF FF FF FF FF FF    
   6773 00DC00 FF FF FF FF FF FF FF FF    
   6773 00DC08 FF FF FF FF FF FF FF FF    
   6773 00DC10 FF FF FF FF FF FF FF FF    
   6773 00DC18 FF FF FF FF FF FF FF FF    
   6773 00DC20 FF FF FF FF FF FF FF FF    
   6773 00DC28 FF FF FF FF FF FF FF FF    
   6773 00DC30 FF FF FF FF FF FF FF FF    
   6773 00DC38 FF FF FF FF FF FF FF FF    
   6773 00DC40 FF FF FF FF FF FF FF FF    
   6773 00DC48 FF FF FF FF FF FF FF FF    
   6773 00DC50 FF FF FF FF FF FF FF FF    
   6773 00DC58 FF FF FF FF FF FF FF FF    
   6773 00DC60 FF FF FF FF FF FF FF FF    
   6773 00DC68 FF FF FF FF FF FF FF FF    
   6773 00DC70 FF FF FF FF FF FF FF FF    
   6773 00DC78 FF FF FF FF FF FF FF FF    
   6773 00DC80 FF FF FF FF FF FF FF FF    
   6773 00DC88 FF FF FF FF FF FF FF FF    
   6773 00DC90 FF FF FF FF FF FF FF FF    
   6773 00DC98 FF FF FF FF FF FF FF FF    
   6773 00DCA0 FF FF FF FF FF FF FF FF    
   6773 00DCA8 FF FF FF FF FF FF FF FF    
   6773 00DCB0 FF FF FF FF FF FF FF FF    
   6773 00DCB8 FF FF FF FF FF FF FF FF    
   6773 00DCC0 FF FF FF FF FF FF FF FF    
   6773 00DCC8 FF FF FF FF FF FF FF FF    
   6773 00DCD0 FF FF FF FF FF FF FF FF    
   6773 00DCD8 FF FF FF FF FF FF FF FF    
   6773 00DCE0 FF FF FF FF FF FF FF FF    
   6773 00DCE8 FF FF FF FF FF FF FF FF    
   6773 00DCF0 FF FF FF FF FF FF FF FF    
   6773 00DCF8 FF FF FF FF FF FF FF FF    
   6773 00DD00 FF FF FF FF FF FF FF FF    
   6773 00DD08 FF FF FF FF FF FF FF FF    
   6773 00DD10 FF FF FF FF FF FF FF FF    
   6773 00DD18 FF FF FF FF FF FF FF FF    
   6773 00DD20 FF FF FF FF FF FF FF FF    
   6773 00DD28 FF FF FF FF FF FF FF FF    
   6773 00DD30 FF FF FF FF FF FF FF FF    
   6773 00DD38 FF FF FF FF FF FF FF FF    
   6773 00DD40 FF FF FF FF FF FF FF FF    
   6773 00DD48 FF FF FF FF FF FF FF FF    
   6773 00DD50 FF FF FF FF FF FF FF FF    
   6773 00DD58 FF FF FF FF FF FF FF FF    
   6773 00DD60 FF FF FF FF FF FF FF FF    
   6773 00DD68 FF FF FF FF FF FF FF FF    
   6773 00DD70 FF FF FF FF FF FF FF FF    
   6773 00DD78 FF FF FF FF FF FF FF FF    
   6773 00DD80 FF FF FF FF FF FF FF FF    
   6773 00DD88 FF FF FF FF FF FF FF FF    
   6773 00DD90 FF FF FF FF FF FF FF FF    
   6773 00DD98 FF FF FF FF FF FF FF FF    
   6773 00DDA0 FF FF FF FF FF FF FF FF    
   6773 00DDA8 FF FF FF FF FF FF FF FF    
   6773 00DDB0 FF FF FF FF FF FF FF FF    
   6773 00DDB8 FF FF FF FF FF FF FF FF    
   6773 00DDC0 FF FF FF FF FF FF FF FF    
   6773 00DDC8 FF FF FF FF FF FF FF FF    
   6773 00DDD0 FF FF FF FF FF FF FF FF    
   6773 00DDD8 FF FF FF FF FF FF FF FF    
   6773 00DDE0 FF FF FF FF FF FF FF FF    
   6773 00DDE8 FF FF FF FF FF FF FF FF    
   6773 00DDF0 FF FF FF FF FF FF FF FF    
   6773 00DDF8 FF FF FF FF FF FF FF FF    
   6773 00DE00 FF FF FF FF FF FF FF FF    
   6773 00DE08 FF FF FF FF FF FF FF FF    
   6773 00DE10 FF FF FF FF FF FF FF FF    
   6773 00DE18 FF FF FF FF FF FF FF FF    
   6773 00DE20 FF FF FF FF FF FF FF FF    
   6773 00DE28 FF FF FF FF FF FF FF FF    
   6773 00DE30 FF FF FF FF FF FF FF FF    
   6773 00DE38 FF FF FF FF FF FF FF FF    
   6773 00DE40 FF FF FF FF FF FF FF FF    
   6773 00DE48 FF FF FF FF FF FF FF FF    
   6773 00DE50 FF FF FF FF FF FF FF FF    
   6773 00DE58 FF FF FF FF FF FF FF FF    
   6773 00DE60 FF FF FF FF FF FF FF FF    
   6773 00DE68 FF FF FF FF FF FF FF FF    
   6773 00DE70 FF FF FF FF FF FF FF FF    
   6773 00DE78 FF FF FF FF FF FF FF FF    
   6773 00DE80 FF FF FF FF FF FF FF FF    
   6773 00DE88 FF FF FF FF FF FF FF FF    
   6773 00DE90 FF FF FF FF FF FF FF FF    
   6773 00DE98 FF FF FF FF FF FF FF FF    
   6773 00DEA0 FF FF FF FF FF FF FF FF    
   6773 00DEA8 FF FF FF FF FF FF FF FF    
   6773 00DEB0 FF FF FF FF FF FF FF FF    
   6773 00DEB8 FF FF FF FF FF FF FF FF    
   6773 00DEC0 FF FF FF FF FF FF FF FF    
   6773 00DEC8 FF FF FF FF FF FF FF FF    
   6773 00DED0 FF FF FF FF FF FF FF FF    
   6773 00DED8 FF FF FF FF FF FF FF FF    
   6773 00DEE0 FF FF FF FF FF FF FF FF    
   6773 00DEE8 FF FF FF FF FF FF FF FF    
   6773 00DEF0 FF FF FF FF FF FF FF FF    
   6773 00DEF8 FF FF FF FF FF FF FF FF    
   6773 00DF00 FF FF FF FF FF FF FF FF    
   6773 00DF08 FF FF FF FF FF FF FF FF    
   6773 00DF10 FF FF FF FF FF FF FF FF    
   6773 00DF18 FF FF FF FF FF FF FF FF    
   6773 00DF20 FF FF FF FF FF FF FF FF    
   6773 00DF28 FF FF FF FF FF FF FF FF    
   6773 00DF30 FF FF FF FF FF FF FF FF    
   6773 00DF38 FF FF FF FF FF FF FF FF    
   6773 00DF40 FF FF FF FF FF FF FF FF    
   6773 00DF48 FF FF FF FF FF FF FF FF    
   6773 00DF50 FF FF FF FF FF FF FF FF    
   6773 00DF58 FF FF FF FF FF FF FF FF    
   6773 00DF60 FF FF FF FF FF FF FF FF    
   6773 00DF68 FF FF FF FF FF FF FF FF    
   6773 00DF70 FF FF FF FF FF FF FF FF    
   6773 00DF78 FF FF FF FF FF FF FF FF    
   6773 00DF80 FF FF FF FF FF FF FF FF    
   6773 00DF88 FF FF FF FF FF FF FF FF    
   6773 00DF90 FF FF FF FF FF FF FF FF    
   6773 00DF98 FF FF FF FF FF FF FF FF    
   6773 00DFA0 FF FF FF FF FF FF FF FF    
   6773 00DFA8 FF FF FF FF FF FF FF FF    
   6773 00DFB0 FF FF FF FF FF FF FF FF    
   6773 00DFB8 FF FF FF FF FF FF FF FF    
   6773 00DFC0 FF FF FF FF FF FF FF FF    
   6773 00DFC8 FF FF FF FF FF FF FF FF    
   6773 00DFD0 FF FF FF FF FF FF FF FF    
   6773 00DFD8 FF FF FF FF FF FF FF FF    
   6773 00DFE0 FF FF FF FF FF FF FF FF    
   6773 00DFE8 FF FF FF FF FF FF FF FF    
   6773 00DFF0 FF FF FF FF FF FF FF FF    
   6773 00DFF8 FF FF FF FF FF FF FF FF    
                                         
                                           
   6775 00E000                             start:
   6776 00E000 78                           	SEI
   6777 00E001 D8                           	CLD
                                           ;	CLV					; overflow low
                                           ;	SEC					; carry high
                                           ;	XCE					; sets 32 bit mode, 32 bit registers
                                           ;	REP		#$30		; 32 bit registers
                                           ;	MEM		32
                                           ;	NDX		32
                                           ;	LDA		#$3FFF
                                           ;	TAS
                                           ;
   6787 00E002 18                           	CLC					; switch to '816 mode
   6788 00E003 2C 00 E0                     	BIT		start		; set overflow bit
   6789 00E006 FB                           	XCE
   6790 00E007 C2 30                        	REP		#$30		; set 16 bit regs & mem
                                           	NDX 	16
                                           	MEM		16
   6793 00E009 A9 FF 3F                     	LDA		#$3FFF		; set top of stack
   6794 00E00C 1B                           	TAS
   6795 00E00D A9 70 00                     	LDA		#$0070		; program chip selects for I/O
   6796 00E010 8D 00 F0                     	STA		$F000		; at $007000
   6797 00E013 A9 71 00                     	LDA		#$0071
   6798 00E016 8D 02 F0                     	STA		$F002
                                           ;	LDA		#$FEA1		; select $FEA1xx I/O
                                           ;	STA		$F006
   6801 00E019 A9 00 00                     	LDA		#$0000		; select zero page ram
   6802 00E01C 8D 0A F0                     	STA		$F00A
                                           
                                           	; Setup the counters
   6805 00E01F E2 30                        	SEP		#$30		; set 8 bit regs
                                           	NDX		8			; tell the assembler
                                           	MEM		8
                                           	; Counter #0 is setup as a free running tick count
   6809 00E021 A9 FF                        	LDA		#$FF		; set limit to $FFFFFF
   6810 00E023 8D 10 F0                     	STA		$F010
   6811 00E026 8D 11 F0                     	STA		$F011
   6812 00E029 8D 12 F0                     	STA		$F012
   6813 00E02C A9 14                        	LDA		#$14		; count up, on mpu clock
   6814 00E02E 8D 13 F0                     	STA		$F013
                                           	; Counter #1 is set to interrupt at a 100Hz rate
   6816 00E031 A9 94                        	LDA		#$94		; divide by 95794 (for 100Hz)
   6817 00E033 8D 14 F0                     	STA		$F014
   6818 00E036 A9 57                        	LDA		#$57
   6819 00E038 8D 15 F0                     	STA		$F015
   6820 00E03B A9 09                        	LDA		#$09
   6821 00E03D 8D 16 F0                     	STA		$F016
   6822 00E040 A9 05                        	LDA		#$05		; count down, on mpu clock, irq disenabled
   6823 00E042 8D 17 F0                     	STA		$F017
                                           	; Counter #2 isn't setup
                                           
   6826 00E045 C2 30                        	REP		#$30		; set 16 bit regs & mem
                                           	NDX 	16
                                           	MEM		16
                                           
                                           	; Setup the task registers
   6831 00E047 A0 05 00                     	LDY		#5			; # tasks to setup
   6832 00E04A A2 01 00                     	LDX		#1
   6833 00E04D                             .0001:
   6834 00E04D 42 4C 6F ED 00 00            	LDT		TaskStartTbl,X
   6835 00E053 E8                           	INX
   6836 00E054 88                           	DEY
   6837 00E055 D0 F6                        	BNE		.0001
                                           
   6839 00E057 64 A0                        	STZ		running_task
                                           
   6841 00E059 A9 04 ED                     	LDA		#BrkRout1
   6842 00E05C 8D 02 01                     	STA		$0102
                                           
   6844 00E05F 64 04                        	STZ		TickCount
   6845 00E061 64 06                        	STZ		TickCount+2
   6846 00E063                             Task0:
   6847 00E063 58                           	CLI
   6848 00E064                             .0001:
   6849 00E064 A9 54 E3                     	LDA		#DisplayChar
   6850 00E067 8D F0 03                     	STA		OutputVec
   6851 00E06A AD F0 03                     	LDA		OutputVec
   6852 00E06D C9 54 E3                     	CMP		#DisplayChar
   6853 00E070 D0 F2                        	BNE		.0001
   6854 00E072 A9 01 00                     	LDA		#$01
   6855 00E075 8D 00 70                     	STA		$7000
   6856 00E078 A9 00 BF                     	LDA		#$BF00
   6857 00E07B 85 36                        	STA		NormAttr
   6858 00E07D 20 7D E5                     	JSR		ClearScreen
   6859 00E080 20 0F E5                     	JSR		HomeCursor
   6860 00E083 A9 02 00                     	LDA		#$02
   6861 00E086 8D 00 70                     	STA		$7000
   6862 00E089 F4 08 E3                     	PEA		msgStarting
   6863 00E08C 20 3E E5                     	JSR		DisplayString
   6864 00E08F 68                           	PLA
   6865 00E090 A9 00 00                     	LDA		#0
   6866 00E093 8F 00 A2 FE                  	STA		FAC1
   6867 00E097 8F 02 A2 FE                  	STA		FAC1+2
   6868 00E09B 8F 04 A2 FE                  	STA		FAC1+4
   6869 00E09F 8F 06 A2 FE                  	STA		FAC1+6
   6870 00E0A3 8F 08 A2 FE                  	STA		FAC1+8
   6871 00E0A7 8F 0A A2 FE                  	STA		FAC1+10
   6872 00E0AB A9 D2 04                     	LDA		#1234
   6873 00E0AE 8F 00 A2 FE                  	STA		FAC1
   6874 00E0B2 A9 05 00                     	LDA		#5			; FIX2FLT
   6875 00E0B5 20 07 D3                     	JSR 	FPCommandWait
   6876 00E0B8 20 F4 D2                     	JSR		DivideByTen
   6877 00E0BB 20 CE D0                     	JSR		FAC1ToString
   6878 00E0BE F4 A0 03                     	PEA		$3A0
   6879 00E0C1 20 3E E5                     	JSR		DisplayString
   6880 00E0C4 68                           	PLA
   6881 00E0C5 A9 20 00                     	LDA		#' '
   6882 00E0C8 20 33 E5                     	JSR		OutChar
   6883 00E0CB 20 17 D3                     	JSR		DispFAC1
   6884 00E0CE 42 A0 07 00                  	FORK	#7			; fork a BIOS context
   6885 00E0D2 42 1A                        	TTA
   6886 00E0D4 C9 07 00                     	CMP		#7
   6887 00E0D7 D0 02                        	BNE		.0002
   6888 00E0D9 42 60                        	RTT
   6889 00E0DB                             .0002:
   6890 00E0DB 42 A0 06 00                  	FORK	#6
   6891 00E0DF 42 1A                        	TTA
   6892 00E0E1 C9 06 00                     	CMP		#6
   6893 00E0E4 F0 FF D1 05                  	LBEQ	KeybdInit
                                           
   6895 00E0E8                             Mon1:
   6896 00E0E8                             .mon1:
   6897 00E0E8 20 2A E5                     	JSR		OutCRLF
   6898 00E0EB A9 24 00                     	LDA		#'$'
   6899 00E0EE                             .mon3:
   6900 00E0EE 20 33 E5                     	JSR		OutChar
   6901 00E0F1 20 F2 E7                     	JSR		KeybdGetCharWait
   6902 00E0F4 29 FF 00                     	AND		#$FF
                                           ;	CMP		#'.'
                                           ;	BEQ		.mon3
   6905 00E0F7 C9 0D 00                     	CMP		#CR
   6906 00E0FA D0 F2                        	BNE		.mon3
   6907 00E0FC A5 32                        	LDA		CursorY
   6908 00E0FE 0A                           	ASL
   6909 00E0FF AA                           	TAX
   6910 00E100 BD 31 ED                     	LDA		LineTbl,X
   6911 00E103 0A                           	ASL
   6912 00E104 AA                           	TAX
   6913 00E105                             .mon4:
   6914 00E105 20 AC E2                     	JSR		IgnoreBlanks
   6915 00E108 20 5A E1                     	JSR		MonGetch
   6916 00E10B C9 24 00                     	CMP		#'$'
   6917 00E10E F0 F5                        	BEQ		.mon4
   6918 00E110 C9 53 00                     	CMP		#'S'
   6919 00E113 D0 03                        	BNE		.mon2
   6920 00E115 4C 00 C0                     	JMP		$C000		; invoke Supermon816
   6921 00E118                             .mon2:
   6922 00E118 C9 43 00                     	CMP		#'C'
   6923 00E11B D0 08                        	BNE		.mon5
   6924 00E11D 20 7D E5                     	JSR		ClearScreen
   6925 00E120 20 0F E5                     	JSR		HomeCursor
   6926 00E123 80 C3                        	BRA		.mon1
   6927 00E125                             .mon5:
   6928 00E125 C9 4D 00                     	CMP		#'M'
   6929 00E128 F0 FF 58 00                  	LBEQ	doMemoryDump
   6930 00E12C C9 44 00                     	CMP		#'D'
   6931 00E12F F0 FF F9 00                  	LBEQ	doDisassemble
   6932 00E133 C9 3E 00                     	CMP		#'>'
   6933 00E136 F0 FF B8 00                  	LBEQ	doMemoryEdit
   6934 00E13A C9 4A 00                     	CMP		#'J'
   6935 00E13D F0 FF 3B 01                  	LBEQ	doJump
   6936 00E141 C9 54 00                     	CMP		#'T'
   6937 00E144 F0 FF 1F 00                  	LBEQ	doTask2
   6938 00E148 C9 49 00                     	CMP		#'I'
   6939 00E14B F0 FF 1F 00                  	LBEQ	doInvaders
   6940 00E14F 80 97                        	BRA		Mon1
                                           
                                           ; Get a character from the screen, skipping over spaces and tabs
                                           ;
   6944 00E151                             MonGetNonSpace:
   6945 00E151                             .0001:
   6946 00E151 20 5A E1                     	JSR		MonGetch
   6947 00E154 C9 20 00                     	CMP		#' '
   6948 00E157 F0 F8                        	BEQ		.0001
   6949 00E159 60                           	RTS
                                           
                                           ; Get a character from the screen.
                                           ;
   6953 00E15A                             MonGetch:
   6954 00E15A BF 00 00 FD                  	LDA		VIDBUF,X
   6955 00E15E E8                           	INX
   6956 00E15F E8                           	INX
   6957 00E160 29 FF 00                     	AND		#$FF
   6958 00E163 20 48 E3                     	JSR		ScreenToAscii
   6959 00E166 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ;------------------------------------------------------------------------------
   6963 00E167                             doTask2:
   6964 00E167 42 A2 02 00                  	TSK		#2
   6965 00E16B 82 7A FF                     	BRL		Mon1
                                           
   6967 00E16E                             doInvaders:
   6968 00E16E A9 FF FF                     	LDA		#$FFFF
   6969 00E171 8D 68 78                     	STA		do_invaders
   6970 00E174 42 A0 05 00                  	FORK	#5
   6971 00E178 42 1A                        	TTA
   6972 00E17A C9 05 00                     	CMP		#5
   6973 00E17D F0 FF 4B F7                  	LBEQ	InvadersTask
   6974 00E181 82 64 FF                     	BRL		Mon1
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Dump memory.
                                           ;------------------------------------------------------------------------------
                                           
   6980 00E184                             doMemoryDump:
   6981 00E184 20 AC E2                     	JSR		IgnoreBlanks
   6982 00E187 20 EB E5                     	JSR		GetRange
   6983 00E18A 20 2A E5                     	JSR		OutCRLF
   6984 00E18D                             .0007:
   6985 00E18D A9 3E 00                     	LDA		#'>'
   6986 00E190 20 33 E5                     	JSR		OutChar
   6987 00E193 20 9C E2                     	JSR		DispRangeStart
   6988 00E196 A0 00 00                     	LDY		#0
   6989 00E199                             .0001:
   6990 00E199 B7 20                        	LDA		[RangeStart],Y
   6991 00E19B 20 C9 E5                     	JSR		DispByte
   6992 00E19E A9 20 00                     	LDA		#' '
   6993 00E1A1 20 33 E5                     	JSR		OutChar
   6994 00E1A4 C8                           	INY
   6995 00E1A5 C0 08 00                     	CPY		#8
   6996 00E1A8 D0 EF                        	BNE		.0001
   6997 00E1AA A0 00 00                     	LDY 	#0
   6998 00E1AD                             .0005:
   6999 00E1AD B7 20                        	LDA		[RangeStart],Y
   7000 00E1AF C9 00 00                     	CMP		#$' '
   7001 00E1B2 B0 05                        	BCS		.0002
   7002 00E1B4                             .0004:
   7003 00E1B4 A9 2E 00                     	LDA		#'.'
   7004 00E1B7 80 05                        	BRA		.0003
   7005 00E1B9                             .0002:
   7006 00E1B9 C9 7F 00                     	CMP		#$7f
   7007 00E1BC 90 F6                        	BCC		.0004
   7008 00E1BE                             .0003:
   7009 00E1BE 20 33 E5                     	JSR		OutChar
   7010 00E1C1 C8                           	INY
   7011 00E1C2 C0 08 00                     	CPY		#8
   7012 00E1C5 D0 E6                        	BNE		.0005
   7013 00E1C7 20 2A E5                     	JSR		OutCRLF
   7014 00E1CA 18                           	CLC
   7015 00E1CB A5 20                        	LDA		RangeStart
   7016 00E1CD 69 08 00                     	ADC		#8
   7017 00E1D0 85 20                        	STA		RangeStart
   7018 00E1D2 90 02                        	BCC		.0006
   7019 00E1D4 E6 22                        	INC		RangeStart+2
   7020 00E1D6                             .0006:
   7021 00E1D6 38                           	SEC
   7022 00E1D7 A5 24                        	LDA		RangeEnd
   7023 00E1D9 E5 20                        	SBC		RangeStart
   7024 00E1DB A5 26                        	LDA		RangeEnd+2
   7025 00E1DD E5 22                        	SBC		RangeStart+2
   7026 00E1DF 08                           	PHP
   7027 00E1E0 20 E7 E7                     	JSR		KeybdGetCharNoWait
   7028 00E1E3 C9 03 00                     	CMP		#CTRLC
   7029 00E1E6 F0 06                        	BEQ		.0009
   7030 00E1E8 28                           	PLP
   7031 00E1E9 10 A2                        	BPL		.0007
   7032 00E1EB                             .0008:
   7033 00E1EB 4C E8 E0                     	JMP		Mon1
   7034 00E1EE                             .0009:
   7035 00E1EE 28                           	PLP
   7036 00E1EF 4C E8 E0                     	JMP		Mon1
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Edit memory.
                                           ;------------------------------------------------------------------------------
                                           
   7042 00E1F2                             doMemoryEdit:
   7043 00E1F2 20 AC E2                     	JSR		IgnoreBlanks
   7044 00E1F5 20 16 E6                     	JSR		GetHexNumber
   7045 00E1F8 C0 00 00                     	CPY		#0
   7046 00E1FB F0 FF E9 FE                  	LBEQ	Mon1
   7047 00E1FF A5 0C                        	LDA		NumWorkArea
   7048 00E201 85 20                        	STA		RangeStart
   7049 00E203 A5 0D                        	LDA		NumWorkArea+1
   7050 00E205 85 21                        	STA		RangeStart+1
   7051 00E207 A0 00 00                     	LDY		#0
   7052 00E20A                             .0001:
   7053 00E20A 5A                           	PHY
   7054 00E20B 20 AC E2                     	JSR		IgnoreBlanks
   7055 00E20E 20 16 E6                     	JSR		GetHexNumber
   7056 00E211 C0 00 00                     	CPY		#0
   7057 00E214 F0 12                        	BEQ		.0002
   7058 00E216 7A                           	PLY
   7059 00E217 E2 20                        	SEP		#$20
   7060 00E219 A5 0C                        	LDA		NumWorkArea
   7061 00E21B 97 20                        	STA		[RangeStart],Y
   7062 00E21D C2 20                        	REP		#$20
   7063 00E21F C8                           	INY
   7064 00E220 C0 08 00                     	CPY		#8
   7065 00E223 D0 E5                        	BNE		.0001
   7066 00E225 82 C0 FE                     	BRL		Mon1
   7067 00E228                             .0002:
   7068 00E228 7A                           	PLY
   7069 00E229 82 BC FE                     	BRL		Mon1
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Disassemble code
                                           ;------------------------------------------------------------------------------
                                           
   7075 00E22C                             doDisassemble:
   7076 00E22C 20 5A E1                     	JSR		MonGetch
   7077 00E22F C9 4D 00                     	CMP		#'M'
   7078 00E232 F0 11                        	BEQ		.0002
   7079 00E234                             .0004:
   7080 00E234 C9 4E 00                     	CMP		#'N'
   7081 00E237 D0 1B                        	BNE		.0003
   7082 00E239 E2 20                        	SEP		#$20
                                           	MEM		8
   7084 00E23B A5 BC                        	LDA		$BC
   7085 00E23D 09 40                        	ORA		#$40
   7086 00E23F 85 BC                        	STA		$BC
   7087 00E241 C2 20                        	REP		#$20
   7088 00E243 80 11                        	BRA		.0005
   7089 00E245                             .0002:
   7090 00E245 E2 20                        	SEP		#$20
   7091 00E247 A5 BC                        	LDA		$BC
   7092 00E249 09 80                        	ORA		#$80
   7093 00E24B 85 BC                        	STA		$BC
   7094 00E24D C2 20                        	REP		#$20
   7095 00E24F 20 5A E1                     	JSR		MonGetch
   7096 00E252 80 E0                        	BRA		.0004
                                           	MEM		16
   7098 00E254                             .0003:
   7099 00E254 CA                           	DEX
   7100 00E255 CA                           	DEX
   7101 00E256                             .0005:
   7102 00E256 20 AC E2                     	JSR		IgnoreBlanks
   7103 00E259 20 EB E5                     	JSR		GetRange
   7104 00E25C A5 20                        	LDA		RangeStart
   7105 00E25E 85 8F                        	STA		$8F				; addra
   7106 00E260 A5 21                        	LDA		RangeStart+1
   7107 00E262 85 90                        	STA		$90
   7108 00E264 20 2A E5                     	JSR		OutCRLF
   7109 00E267 A0 14 00                     	LDY		#20
   7110 00E26A                             .0001:
   7111 00E26A 5A                           	PHY
   7112 00E26B E2 30                        	SEP		#$30
   7113 00E26D 20 63 C6                     	JSR		dpycod
   7114 00E270 C2 30                        	REP		#$30
   7115 00E272 20 2A E5                     	JSR		OutCRLF
   7116 00E275 7A                           	PLY
   7117 00E276 88                           	DEY
   7118 00E277 D0 F1                        	BNE		.0001
   7119 00E279 4C E8 E0                     	JMP		Mon1
                                           
                                           ;$BC flimflag
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Jump to subroutine
                                           ;------------------------------------------------------------------------------
                                           
   7127 00E27C                             doJump:
   7128 00E27C 20 AC E2                     	JSR		IgnoreBlanks
   7129 00E27F 20 16 E6                     	JSR		GetHexNumber
   7130 00E282 C0 00 00                     	CPY		#0
   7131 00E285 F0 FF 5F FE                  	LBEQ	Mon1
   7132 00E289 A9 5C 00                     	LDA		#$5C			; JML opcode
   7133 00E28C 85 23                        	STA		RangeEnd-1
   7134 00E28E A5 0C                        	LDA		NumWorkArea
   7135 00E290 85 24                        	STA		RangeEnd
   7136 00E292 A5 0D                        	LDA		NumWorkArea+1
   7137 00E294 85 25                        	STA		RangeEnd+1
   7138 00E296 22 24 00                     	JSL		RangeEnd
   7139 00E299 82 4C FE                     	BRL		Mon1
                                           
   7141 00E29C                             DispRangeStart:
   7142 00E29C A5 21                        	LDA		RangeStart+1
   7143 00E29E 20 C4 E5                     	JSR		DispWord
   7144 00E2A1 A5 20                        	LDA		RangeStart
   7145 00E2A3 20 C9 E5                     	JSR		DispByte
   7146 00E2A6 A9 20 00                     	LDA		#' '
   7147 00E2A9 4C 33 E5                     	JMP		OutChar
                                           	
                                           ; Skip over blanks in the input
                                           ;------------------------------------------------------------------------------
                                           
   7152 00E2AC                             IgnoreBlanks:
   7153 00E2AC                             .0001:
   7154 00E2AC 20 5A E1                     	JSR		MonGetch
   7155 00E2AF C9 20 00                     	CMP		#' '
   7156 00E2B2 F0 F8                        	BEQ		.0001
   7157 00E2B4 CA                           	DEX
   7158 00E2B5 CA                           	DEX
   7159 00E2B6 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ; BIOSInput allows full screen editing of text until a carriage return is keyed
                                           ; at which point the line the cursor is on is copied to a buffer. The buffer
                                           ; must be at least TEXTCOLS characters in size.
                                           ;------------------------------------------------------------------------------
                                           ;
   7167 00E2B7                             BIOSInput:
   7168 00E2B7                             .bin1:
   7169 00E2B7 20 F2 E7                     	JSR		KeybdGetCharWait
   7170 00E2BA 29 FF 00                     	AND		#$FF
   7171 00E2BD C9 0D 00                     	CMP		#CR
   7172 00E2C0 F0 05                        	BEQ		.bin2
   7173 00E2C2 20 33 E5                     	JSR		OutChar
   7174 00E2C5 80 F0                        	BRA		.bin1
   7175 00E2C7                             .bin2:
   7176 00E2C7 A5 30                        	LDA		CursorX
   7177 00E2C9 F0 1A                        	BEQ		.bin4
   7178 00E2CB A5 34                        	LDA		VideoPos	; get current video position
   7179 00E2CD 38                           	SEC
   7180 00E2CE E5 30                        	SBC		CursorX		; go back to the start of the line
   7181 00E2D0 0A                           	ASL
   7182 00E2D1 AA                           	TAX
   7183 00E2D2                             .bin3:
   7184 00E2D2 BF 00 00 FD                  	LDA		VIDBUF,X
   7185 00E2D6 29 FF 00                     	AND		#$FF
   7186 00E2D9 93 03                        	STA		(3,s),Y
   7187 00E2DB E8                           	INX
   7188 00E2DC E8                           	INX
   7189 00E2DD C8                           	INY
   7190 00E2DE C6 30                        	DEC		CursorX
   7191 00E2E0 D0 F0                        	BNE		.bin3
   7192 00E2E2 A9 00 00                     	LDA		#0
   7193 00E2E5                             .bin4:
   7194 00E2E5 93 03                        	STA		(3,s),Y	; NULL terminate buffer
   7195 00E2E7 60                           	RTS
                                           
   7197 00E2E8                             .st0003:
   7198 00E2E8 AF 10 A1 FE                  	LDA		KEYBD
   7199 00E2EC 10 FA                        	BPL		.st0003
   7200 00E2EE 48                           	PHA					; save off the char (we need to trash acc)
   7201 00E2EF AF 14 A1 FE                  	LDA		KEYBD+4		; clear keyboard strobe (must be a read operation)
   7202 00E2F3 68                           	PLA					; restore char
   7203 00E2F4 20 54 E3                     	JSR		DisplayChar
   7204 00E2F7 80 EF                        	BRA		.st0003
   7205 00E2F9 A0 00 00                     	ldy		#$0000
   7206 00E2FC                             .st0001:
   7207 00E2FC A2 00 00                     	ldx		#$0000
   7208 00E2FF                             .st0002:
   7209 00E2FF E8                           	inx
   7210 00E300 D0 FD                        	bne		.st0002
   7211 00E302 20 25 E3                     	jsr		echo_switch
   7212 00E305 C8                           	iny
   7213 00E306 80 F4                        	bra		.st0001
                                           
   7215 00E308                             msgStarting:
   7216 00E308 46 54 38 33 32 20 54 65      	.byte	"FT832 Test System Starting",CR,LF,0
   7216 00E310 73 74 20 53 79 73 74 65    
   7216 00E318 6D 20 53 74 61 72 74 69    
   7216 00E320 6E 67 0D 0A 00             
                                           
   7218 00E325                             echo_switch:
   7219 00E325 AD 00 71                     	lda		$7100
   7220 00E328 8D 00 70                     	sta		$7000
   7221 00E32B 60                           	rts
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Convert Ascii character to screen character.
                                           ;------------------------------------------------------------------------------
                                           
   7227 00E32C                             AsciiToScreen:
   7228 00E32C 29 FF 00                     	AND		#$FF
   7229 00E32F 89 20 00                     	BIT		#%00100000	; if bit 5 isn't set
   7230 00E332 F0 08                        	BEQ		.00001
   7231 00E334 89 40 00                     	BIT		#%01000000	; or bit 6 isn't set
   7232 00E337 F0 03                        	BEQ		.00001
   7233 00E339 29 9F 00                     	AND		#%10011111
   7234 00E33C                             .00001:
   7235 00E33C 60                           	rts
                                           
                                           	MEM		8
   7238 00E33D                             AsciiToScreen8:
   7239 00E33D 89 20                        	BIT		#%00100000	; if bit 5 isn't set
   7240 00E33F F0 06                        	BEQ		.00001
   7241 00E341 89 40                        	BIT		#%01000000	; or bit 6 isn't set
   7242 00E343 F0 02                        	BEQ		.00001
   7243 00E345 29 9F                        	AND		#%10011111
   7244 00E347                             .00001:
   7245 00E347 60                           	rts
                                           
                                           	MEM		16
                                           ;------------------------------------------------------------------------------
                                           ; Convert screen character to ascii character
                                           ;------------------------------------------------------------------------------
                                           ;
   7252 00E348                             ScreenToAscii:
   7253 00E348 29 FF 00                     	AND		#$FF
   7254 00E34B C9 1B 00                     	CMP		#26+1
   7255 00E34E B0 03                        	BCS		.0001
   7256 00E350 69 60 00                     	ADC		#$60
   7257 00E353                             .0001:
   7258 00E353 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Display a character on the screen device
                                           ;------------------------------------------------------------------------------
                                           ;
   7264 00E354                             DisplayChar:
   7265 00E354 29 FF 00                     	AND		#$0FF
   7266 00E357 24 3C                        	BIT		EscState
   7267 00E359 30 FF 8A 00                  	LBMI	processEsc
   7268 00E35D C9 08 00                     	CMP		#BS
   7269 00E360 F0 FF 33 01                  	LBEQ	doBackSpace
   7270 00E364 C9 91 00                     	CMP		#$91			; cursor right
   7271 00E367 F0 FF 7D 01                  	LBEQ	doCursorRight
   7272 00E36B C9 93 00                     	CMP		#$93			; cursor left
   7273 00E36E F0 FF 82 01                  	LBEQ	doCursorLeft
   7274 00E372 C9 90 00                     	CMP		#$90			; cursor up
   7275 00E375 F0 FF 82 01                  	LBEQ	doCursorUp
   7276 00E379 C9 92 00                     	CMP		#$92			; cursor down
   7277 00E37C F0 FF 82 01                  	LBEQ	doCursorDown
   7278 00E380 C9 99 00                     	CMP		#$99			; delete
   7279 00E383 F0 FF 37 01                  	LBEQ	doDelete
   7280 00E387 C9 0D 00                     	CMP		#CR
   7281 00E38A F0 47                        	BEQ		doCR
   7282 00E38C C9 0A 00                     	CMP		#LF
   7283 00E38F F0 47                        	BEQ		doLF
   7284 00E391 C9 94 00                     	CMP		#$94
   7285 00E394 F0 FF 48 01                  	LBEQ	doCursorHome	; cursor home
   7286 00E398 C9 1B 00                     	CMP		#ESC
   7287 00E39B D0 05                        	BNE		.0003
   7288 00E39D 64 3C                        	STZ		EscState		; put a -1 in the escape state
   7289 00E39F C6 3C                        	DEC		EscState
   7290 00E3A1 60                           	RTS
   7291 00E3A2                             .0003:
   7292 00E3A2 20 2C E3                     	JSR		AsciiToScreen
   7293 00E3A5 05 36                        	ORA		NormAttr
   7294 00E3A7 48                           	PHA
   7295 00E3A8 A5 34                        	LDA		VideoPos
   7296 00E3AA 0A                           	ASL
   7297 00E3AB AA                           	TAX
   7298 00E3AC 68                           	PLA
   7299 00E3AD 9F 00 00 FD                  	STA		VIDBUF,X
   7300 00E3B1 A5 30                        	LDA		CursorX
   7301 00E3B3 1A                           	INA
   7302 00E3B4 C9 54 00                     	CMP		#TEXTCOLS
   7303 00E3B7 D0 15                        	BNE		.0001
   7304 00E3B9 64 30                        	STZ		CursorX
   7305 00E3BB A5 32                        	LDA		CursorY
   7306 00E3BD C9 1E 00                     	CMP		#TEXTROWS-1
   7307 00E3C0 F0 06                        	BEQ		.0002
   7308 00E3C2 1A                           	INA
   7309 00E3C3 85 32                        	STA		CursorY
   7310 00E3C5 82 4E 01                     	BRL		SyncVideoPos
   7311 00E3C8                             .0002:
   7312 00E3C8 20 16 E5                     	JSR		SyncVideoPos
   7313 00E3CB 82 C7 01                     	BRL		ScrollUp
   7314 00E3CE                             .0001:
   7315 00E3CE 85 30                        	STA		CursorX
   7316 00E3D0 82 43 01                     	BRL		SyncVideoPos
   7317 00E3D3                             doCR:
   7318 00E3D3 64 30                        	STZ		CursorX
   7319 00E3D5 82 3E 01                     	BRL		SyncVideoPos
   7320 00E3D8                             doLF:
   7321 00E3D8 A5 32                        	LDA		CursorY
   7322 00E3DA C9 1E 00                     	CMP		#TEXTROWS-1
   7323 00E3DD F0 FF B4 01                  	LBEQ	ScrollUp
   7324 00E3E1 1A                           	INA
   7325 00E3E2 85 32                        	STA		CursorY
   7326 00E3E4 82 2F 01                     	BRL		SyncVideoPos
                                           
   7328 00E3E7                             processEsc:
   7329 00E3E7 A6 3C                        	LDX		EscState
   7330 00E3E9 E0 FF FF                     	CPX		#-1
   7331 00E3EC D0 44                        	BNE		.0006
   7332 00E3EE C9 54 00                     	CMP		#'T'	; clear to EOL
   7333 00E3F1 D0 1C                        	BNE		.0003
   7334 00E3F3 A5 34                        	LDA		VideoPos
   7335 00E3F5 0A                           	ASL
   7336 00E3F6 AA                           	TAX
   7337 00E3F7 A4 30                        	LDY		CursorX
   7338 00E3F9                             .0001:
   7339 00E3F9 C0 53 00                     	CPY		#TEXTCOLS-1
   7340 00E3FC F0 0E                        	BEQ		.0002
   7341 00E3FE A9 20 00                     	LDA		#' '
   7342 00E401 05 36                        	ORA		NormAttr
   7343 00E403 9F 00 00 FD                  	STA		VIDBUF,X
   7344 00E407 E8                           	INX
   7345 00E408 E8                           	INX
   7346 00E409 C8                           	INY
   7347 00E40A D0 ED                        	BNE		.0001
   7348 00E40C                             .0002:
   7349 00E40C 64 3C                        	STZ		EscState
   7350 00E40E 60                           	RTS
   7351 00E40F                             .0003:
   7352 00E40F C9 57 00                     	CMP		#'W'
   7353 00E412 D0 05                        	BNE		.0004
   7354 00E414 64 3C                        	STZ		EscState
   7355 00E416 82 A5 00                     	BRL		doDelete
   7356 00E419                             .0004:
   7357 00E419 C9 60 00                     	CMP		#'`'
   7358 00E41C D0 06                        	BNE		.0005
   7359 00E41E A9 FE FF                     	LDA		#-2
   7360 00E421 85 3C                        	STA		EscState
   7361 00E423 60                           	RTS
   7362 00E424                             .0005:
   7363 00E424 C9 28 00                     	CMP		#'('
   7364 00E427 D0 06                        	BNE		.0008
   7365 00E429 A9 FD FF                     	LDA		#-3
   7366 00E42C 85 3C                        	STA		EscState
   7367 00E42E 60                           	RTS
   7368 00E42F                             .0008:
   7369 00E42F 64 3C                        	STZ		EscState
   7370 00E431 60                           	RTS
   7371 00E432                             .0006:
   7372 00E432 E0 FE FF                     	CPX		#-2
   7373 00E435 D0 11                        	BNE		.0007
   7374 00E437 64 3C                        	STZ		EscState
   7375 00E439 C9 31 00                     	CMP		#'1'
   7376 00E43C F0 FF 29 01                  	LBEQ	CursorOn
   7377 00E440 C9 30 00                     	CMP		#'0'
   7378 00E443 F0 FF 2C 01                  	LBEQ	CursorOff
   7379 00E447 60                           	RTS
   7380 00E448                             .0007:
   7381 00E448 E0 FD FF                     	CPX		#-3
   7382 00E44B D0 0B                        	BNE		.0009
   7383 00E44D C9 1B 00                     	CMP		#ESC
   7384 00E450 D0 DD                        	BNE		.0008
   7385 00E452 A9 FC FF                     	LDA		#-4
   7386 00E455 85 3C                        	STA		EscState
   7387 00E457 60                           	RTS
   7388 00E458                             .0009:
   7389 00E458 E0 FC FF                     	CPX		#-4
   7390 00E45B D0 0B                        	BNE		.0010
   7391 00E45D C9 47 00                     	CMP		#'G'
   7392 00E460 D0 CD                        	BNE		.0008
   7393 00E462 A9 FB FF                     	LDA		#-5
   7394 00E465 85 3C                        	STA		EscState
   7395 00E467 60                           	RTS
   7396 00E468                             .0010:
   7397 00E468 E0 FB FF                     	CPX		#-5
   7398 00E46B D0 C2                        	BNE		.0008
   7399 00E46D 64 3C                        	STZ		EscState
   7400 00E46F C9 34 00                     	CMP		#'4'
   7401 00E472 D0 12                        	BNE		.0011
   7402 00E474 A5 36                        	LDA		NormAttr
                                           	; Swap the high nybbles of the attribute
   7404 00E476 EB                           	XBA				
   7405 00E477 E2 30                        	SEP		#$30		; set 8 bit regs
                                           	NDX		8			; tell the assembler
                                           	MEM		8
   7408 00E479 2A                           	ROL
   7409 00E47A 2A                           	ROL
   7410 00E47B 2A                           	ROL
   7411 00E47C 2A                           	ROL
   7412 00E47D C2 30                        	REP		#$30		; set 16 bit regs
                                           	NDX		16			; tell the assembler
                                           	MEM		16
   7415 00E47F EB                           	XBA
   7416 00E480 29 00 FF                     	AND		#$FF00
   7417 00E483 85 36                        	STA		NormAttr
   7418 00E485 60                           	RTS
   7419 00E486                             .0011:
   7420 00E486 C9 30 00                     	CMP		#'0'
   7421 00E489 D0 06                        	BNE		.0012
   7422 00E48B A9 00 BF                     	LDA		#$BF00		; Light Grey on Dark Grey
   7423 00E48E 85 36                        	STA		NormAttr
   7424 00E490 60                           	RTS
   7425 00E491                             .0012:
   7426 00E491 A9 00 BF                     	LDA		#$BF00		; Light Grey on Dark Grey
   7427 00E494 85 36                        	STA		NormAttr
   7428 00E496 60                           	RTS
                                           
   7430 00E497                             doBackSpace:
   7431 00E497 A4 30                        	LDY		CursorX
   7432 00E499 F0 22                        	BEQ		.0001		; Can't backspace anymore
   7433 00E49B A5 34                        	LDA		VideoPos
   7434 00E49D 0A                           	ASL
   7435 00E49E AA                           	TAX
   7436 00E49F                             .0002:
   7437 00E49F BF 00 00 FD                  	LDA		VIDBUF,X
   7438 00E4A3 9F FE FF FC                  	STA		VIDBUF-2,X
   7439 00E4A7 E8                           	INX
   7440 00E4A8 E8                           	INX
   7441 00E4A9 C8                           	INY
   7442 00E4AA C0 54 00                     	CPY		#TEXTCOLS
   7443 00E4AD D0 F0                        	BNE		.0002
   7444 00E4AF                             .0003:
   7445 00E4AF A9 20 00                     	LDA		#' '
   7446 00E4B2 05 36                        	ORA		NormAttr
   7447 00E4B4 9F 00 00 FD                  	STA		VIDBUF,X
   7448 00E4B8 C6 30                        	DEC		CursorX
   7449 00E4BA 82 59 00                     	BRL		SyncVideoPos
   7450 00E4BD                             .0001:
   7451 00E4BD 60                           	RTS
                                           
                                           ; Deleting a character does not change the video position so there's no need
                                           ; to resynchronize it.
                                           
   7456 00E4BE                             doDelete:
   7457 00E4BE A4 30                        	LDY		CursorX
   7458 00E4C0 A5 34                        	LDA		VideoPos
   7459 00E4C2 0A                           	ASL
   7460 00E4C3 AA                           	TAX
   7461 00E4C4                             .0002:
   7462 00E4C4 C0 53 00                     	CPY		#TEXTCOLS-1
   7463 00E4C7 F0 0D                        	BEQ		.0001
   7464 00E4C9 BF 02 00 FD                  	LDA		VIDBUF+2,X
   7465 00E4CD 9F 00 00 FD                  	STA		VIDBUF,X
   7466 00E4D1 E8                           	INX
   7467 00E4D2 E8                           	INX
   7468 00E4D3 C8                           	INY
   7469 00E4D4 80 EE                        	BRA		.0002
   7470 00E4D6                             .0001:
   7471 00E4D6 A9 20 00                     	LDA		#' '
   7472 00E4D9 05 36                        	ORA		NormAttr
   7473 00E4DB 9F 00 00 FD                  	STA		VIDBUF,X
   7474 00E4DF 60                           	RTS
                                           
   7476 00E4E0                             doCursorHome:
   7477 00E4E0 A5 30                        	LDA		CursorX
   7478 00E4E2 F0 26                        	BEQ		doCursor1
   7479 00E4E4 64 30                        	STZ		CursorX
   7480 00E4E6 80 2E                        	BRA		SyncVideoPos
   7481 00E4E8                             doCursorRight:
   7482 00E4E8 A5 30                        	LDA		CursorX
   7483 00E4EA C9 53 00                     	CMP		#TEXTCOLS-1
   7484 00E4ED F0 1F                        	BEQ		doRTS
   7485 00E4EF 1A                           	INA
   7486 00E4F0                             doCursor2:
   7487 00E4F0 85 30                        	STA		CursorX
   7488 00E4F2 80 22                        	BRA		SyncVideoPos
   7489 00E4F4                             doCursorLeft:
   7490 00E4F4 A5 30                        	LDA		CursorX
   7491 00E4F6 F0 16                        	BEQ		doRTS
   7492 00E4F8 3A                           	DEA
   7493 00E4F9 80 F5                        	BRA		doCursor2
   7494 00E4FB                             doCursorUp:
   7495 00E4FB A5 32                        	LDA		CursorY
   7496 00E4FD F0 0F                        	BEQ		doRTS
   7497 00E4FF 3A                           	DEA
   7498 00E500 80 08                        	BRA		doCursor1
   7499 00E502                             doCursorDown:
   7500 00E502 A5 32                        	LDA		CursorY
   7501 00E504 C9 1E 00                     	CMP		#TEXTROWS-1
   7502 00E507 F0 05                        	BEQ		doRTS
   7503 00E509 1A                           	INA
   7504 00E50A                             doCursor1:
   7505 00E50A 85 32                        	STA		CursorY
   7506 00E50C 80 08                        	BRA		SyncVideoPos
   7507 00E50E                             doRTS:
   7508 00E50E 60                           	RTS
                                           
   7510 00E50F                             HomeCursor:
   7511 00E50F A9 00 00                     	LDA		#0
   7512 00E512 64 30                        	STZ		CursorX
   7513 00E514 64 32                        	STZ		CursorY
                                           
                                           ; Synchronize the absolute video position with the cursor co-ordinates.
                                           ;
   7517 00E516                             SyncVideoPos:
   7518 00E516 A5 32                        	LDA		CursorY
   7519 00E518 8D 00 70                     	STA		$7000
   7520 00E51B 0A                           	ASL
   7521 00E51C AA                           	TAX
   7522 00E51D BD 31 ED                     	LDA		LineTbl,X
   7523 00E520 18                           	CLC
   7524 00E521 65 30                        	ADC		CursorX
   7525 00E523 85 34                        	STA		VideoPos
   7526 00E525 8F 0D A0 FE                  	STA		VIDREGS+13		; Update the position in the text controller
   7527 00E529 60                           	RTS
                                           
   7529 00E52A                             OutCRLF:
   7530 00E52A A9 0D 00                     	LDA		#CR
   7531 00E52D 20 33 E5                     	JSR		OutChar
   7532 00E530 A9 0A 00                     	LDA		#LF
                                           
   7534 00E533                             OutChar:
   7535 00E533 DA                           	PHX
   7536 00E534 5A                           	PHY
   7537 00E535 A2 00 00                     	LDX		#0
   7538 00E538 FC F0 03                     	JSR		(OutputVec,x)
   7539 00E53B 7A                           	PLY
   7540 00E53C FA                           	PLX
   7541 00E53D 60                           	RTS
                                           
   7543 00E53E                             DisplayString:
                                           ;	PLA							; pop return address
                                           ;	PLX							; get string address parameter
                                           ;	PHA							; push return address
   7547 00E53E E2 20                        	SEP		#$20				; ACC = 8 bit
                                           	MEM		8
                                           ;	STX		StringPos
   7550 00E540 A0 00 00                     	LDY		#0
   7551 00E543                             .0002:
   7552 00E543 B3 03                        	LDA		(3,S),Y
   7553 00E545 F0 06                        	BEQ		.0001
   7554 00E547 20 55 EC                     	JSR		SuperPutch
   7555 00E54A C8                           	INY
   7556 00E54B 80 F6                        	BRA		.0002
   7557 00E54D                             .0001:
   7558 00E54D C2 20                        	REP		#$20				; ACC 16 bits
                                           	MEM		16
   7560 00E54F 60                           	RTS
                                           
   7562 00E550                             DisplayString2:
   7563 00E550 68                           	PLA							; pop return address
   7564 00E551 FA                           	PLX							; get string address parameter
   7565 00E552 48                           	PHA							; push return address
   7566 00E553 E2 20                        	SEP		#$20				; ACC = 8 bit
   7567 00E555 86 38                        	STX		StringPos
   7568 00E557 A0 00 00                     	LDY		#0
   7569 00E55A A2 32 00                     	LDX		#50
   7570 00E55D                             .0002:
   7571 00E55D B1 38                        	LDA		(StringPos),Y
   7572 00E55F 20 55 EC                     	JSR		SuperPutch
   7573 00E562 C8                           	INY
   7574 00E563 CA                           	DEX
   7575 00E564 D0 F7                        	BNE		.0002
   7576 00E566                             .0001:
   7577 00E566 C2 20                        	REP		#$20				; ACC 16 bits
   7578 00E568 60                           	RTS
                                           
   7580 00E569                             CursorOn:
   7581 00E569 48                           	PHA
   7582 00E56A A9 60 1F                     	LDA		#$1F60
   7583 00E56D 8F 09 A0 FE                  	STA		VIDREGS+9
   7584 00E571 68                           	PLA
   7585 00E572 60                           	RTS
                                           
   7587 00E573                             CursorOff:
   7588 00E573 48                           	PHA
   7589 00E574 A9 20 00                     	LDA		#$0020
   7590 00E577 8F 09 A0 FE                  	STA		VIDREGS+9
   7591 00E57B 68                           	PLA
   7592 00E57C 60                           	RTS
                                           
   7594 00E57D                             ClearScreen:
   7595 00E57D A0 2C 0A                     	LDY		#TEXTROWS*TEXTCOLS
   7596 00E580 A2 00 00                     	LDX		#$00
   7597 00E583 A9 20 00                     	LDA		#' '
   7598 00E586 20 2C E3                     	JSR		AsciiToScreen
   7599 00E589 05 36                        	ORA		NormAttr
   7600 00E58B                             .0001:
   7601 00E58B 9F 00 00 FD                  	STA		VIDBUF,X
   7602 00E58F E8                           	INX
   7603 00E590 E8                           	INX
   7604 00E591 88                           	DEY
   7605 00E592 D0 F7                        	BNE		.0001
   7606 00E594 60                           	RTS
                                           
   7608 00E595                             ScrollUp:
   7609 00E595 A2 00 00                     	LDX		#0
   7610 00E598 A0 2C 0A                     	LDY 	#TEXTROWS*TEXTCOLS
   7611 00E59B                             .0001:
   7612 00E59B BF A8 00 FD                  	LDA		VIDBUF+TEXTCOLS*2,X
   7613 00E59F 9F 00 00 FD                  	STA		VIDBUF,X
   7614 00E5A3 E8                           	INX
   7615 00E5A4 E8                           	INX
   7616 00E5A5 88                           	DEY
   7617 00E5A6 D0 F3                        	BNE		.0001
   7618 00E5A8 A9 1E 00                     	LDA		#TEXTROWS-1
                                           
   7620 00E5AB                             BlankLine:
   7621 00E5AB 0A                           	ASL
   7622 00E5AC AA                           	TAX
   7623 00E5AD BD 31 ED                     	LDA		LineTbl,X
   7624 00E5B0 0A                           	ASL
   7625 00E5B1 AA                           	TAX
   7626 00E5B2 A0 54 00                     	LDY		#TEXTCOLS
   7627 00E5B5 A5 36                        	LDA		NormAttr
   7628 00E5B7 09 20 00                     	ORA		#$20
   7629 00E5BA                             .0001:
   7630 00E5BA 9F 00 00 FD                  	STA		VIDBUF,X
   7631 00E5BE E8                           	INX
   7632 00E5BF E8                           	INX
   7633 00E5C0 88                           	DEY
   7634 00E5C1 D0 F7                        	BNE		.0001
   7635 00E5C3 60                           	RTS
                                           
   7637 00E5C4                             DispWord:
   7638 00E5C4 EB                           	XBA
   7639 00E5C5 20 C9 E5                     	JSR		DispByte
   7640 00E5C8 EB                           	XBA
   7641 00E5C9                             DispByte:
   7642 00E5C9 48                           	PHA
   7643 00E5CA 4A                           	LSR
   7644 00E5CB 4A                           	LSR
   7645 00E5CC 4A                           	LSR
   7646 00E5CD 4A                           	LSR
   7647 00E5CE 20 D2 E5                     	JSR		DispNybble
   7648 00E5D1 68                           	PLA
   7649 00E5D2                             DispNybble:
   7650 00E5D2 48                           	PHA
   7651 00E5D3 29 0F 00                     	AND		#$0F
   7652 00E5D6 C9 0A 00                     	CMP		#10
   7653 00E5D9 90 08                        	BCC		.0001
   7654 00E5DB 69 36 00                     	ADC		#'A'-11			; -11 cause the carry is set
   7655 00E5DE 20 33 E5                     	JSR		OutChar
   7656 00E5E1 68                           	PLA
   7657 00E5E2 60                           	RTS
   7658 00E5E3                             .0001:
   7659 00E5E3 09 30 00                     	ORA		#'0'
   7660 00E5E6 20 33 E5                     	JSR		OutChar
   7661 00E5E9 68                           	PLA
   7662 00E5EA 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Get a range (two hex numbers)
                                           ;------------------------------------------------------------------------------
                                           
   7668 00E5EB                             GetRange:
   7669 00E5EB 20 AC E2                     	JSR		IgnoreBlanks
   7670 00E5EE 20 16 E6                     	JSR		GetHexNumber
   7671 00E5F1 C0 00 00                     	CPY		#0
   7672 00E5F4 F0 1F                        	BEQ		.0001
   7673 00E5F6 A5 0C                        	LDA		NumWorkArea
   7674 00E5F8 85 20                        	STA		RangeStart
   7675 00E5FA 85 24                        	STA		RangeEnd
   7676 00E5FC A5 0E                        	LDA		NumWorkArea+2
   7677 00E5FE 85 22                        	STA		RangeStart+2
   7678 00E600 85 26                        	STA		RangeEnd+2
   7679 00E602 20 AC E2                     	JSR		IgnoreBlanks
   7680 00E605 20 16 E6                     	JSR		GetHexNumber
   7681 00E608 C0 00 00                     	CPY		#0
   7682 00E60B F0 08                        	BEQ		.0001
   7683 00E60D A5 0C                        	LDA		NumWorkArea
   7684 00E60F 85 24                        	STA		RangeEnd
   7685 00E611 A5 0E                        	LDA		NumWorkArea+2
   7686 00E613 85 26                        	STA		RangeEnd+2
   7687 00E615                             .0001:
   7688 00E615 60                           	RTS
                                           	
                                           ; Get a hexidecimal number. Maximum of six digits.
                                           ; .X = text pointer (updated)
                                           ;------------------------------------------------------------------------------
                                           ;
   7694 00E616                             GetHexNumber:
   7695 00E616 A0 00 00                     	LDY		#0					; maximum of six digits
   7696 00E619 64 0C                        	STZ		NumWorkArea
   7697 00E61B 64 0E                        	STZ		NumWorkArea+2
   7698 00E61D                             gthxn2:
   7699 00E61D 20 5A E1                     	JSR		MonGetch
   7700 00E620 20 43 E6                     	JSR		AsciiToHexNybble
   7701 00E623 30 1B                        	BMI		gthxn1
   7702 00E625 06 0C                        	ASL		NumWorkArea
   7703 00E627 26 0E                        	ROL		NumWorkArea+2
   7704 00E629 06 0C                        	ASL		NumWorkArea
   7705 00E62B 26 0E                        	ROL		NumWorkArea+2
   7706 00E62D 06 0C                        	ASL		NumWorkArea
   7707 00E62F 26 0E                        	ROL		NumWorkArea+2
   7708 00E631 06 0C                        	ASL		NumWorkArea
   7709 00E633 26 0E                        	ROL		NumWorkArea+2
   7710 00E635 05 0C                        	ORA		NumWorkArea
   7711 00E637 85 0C                        	STA		NumWorkArea
   7712 00E639 C8                           	INY
   7713 00E63A C0 06 00                     	CPY		#6
   7714 00E63D D0 DE                        	BNE		gthxn2
   7715 00E63F 60                           	RTS
   7716 00E640                             gthxn1:
   7717 00E640 CA                           	DEX
   7718 00E641 CA                           	DEX
   7719 00E642 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Convert ASCII character in the range '0' to '9', 'a' to 'f' or 'A' to 'F'
                                           ; to a hex nybble.
                                           ;------------------------------------------------------------------------------
                                           ;
   7726 00E643                             AsciiToHexNybble:
   7727 00E643 C9 30 00                     	CMP		#'0'
   7728 00E646 90 30                        	BCC		gthx3
   7729 00E648 C9 3A 00                     	CMP		#'9'+1
   7730 00E64B B0 05                        	BCS		gthx5
   7731 00E64D 38                           	SEC
   7732 00E64E E9 30 00                     	SBC		#'0'
   7733 00E651 60                           	RTS
   7734 00E652                             gthx5:
   7735 00E652 C9 41 00                     	CMP		#'A'
   7736 00E655 90 21                        	BCC		gthx3
   7737 00E657 C9 47 00                     	CMP		#'F'+1
   7738 00E65A B0 09                        	BCS		gthx6
   7739 00E65C 38                           	SEC
   7740 00E65D E9 41 00                     	SBC		#'A'
   7741 00E660 18                           	CLC
   7742 00E661 69 0A 00                     	ADC		#10
   7743 00E664 60                           	RTS
   7744 00E665                             gthx6:
   7745 00E665 C9 61 00                     	CMP		#'a'
   7746 00E668 90 0E                        	BCC		gthx3
   7747 00E66A C9 7B 00                     	CMP		#'z'+1
   7748 00E66D B0 09                        	BCS		gthx3
   7749 00E66F 38                           	SEC
   7750 00E670 E9 61 00                     	SBC		#'a'
   7751 00E673 18                           	CLC
   7752 00E674 69 0A 00                     	ADC		#10
   7753 00E677 60                           	RTS
   7754 00E678                             gthx3:
   7755 00E678 A9 FF FF                     	LDA		#-1		; not a hex number
   7756 00E67B 60                           	RTS
                                           
   7758 00E67C                             AsciiToDecNybble:
   7759 00E67C C9 30 00                     	CMP		#'0'
   7760 00E67F 90 0A                        	BCC		gtdc3
   7761 00E681 C9 3A 00                     	CMP		#'9'+1
   7762 00E684 B0 05                        	BCS		gtdc3
   7763 00E686 38                           	SEC
   7764 00E687 E9 30 00                     	SBC		#'0'
   7765 00E68A 60                           	RTS
   7766 00E68B                             gtdc3:
   7767 00E68B A9 FF FF                     	LDA		#-1
   7768 00E68E 60                           	RTS
                                           
   7770 00E68F                             getcharNoWait:
   7771 00E68F A9 01 00                     	LDA		#1
   7772 00E692 42 5B 85 A4                  	STA		ZS:keybd_cmd
   7773 00E696 42 A2 06 00                  	TSK		#6
   7774 00E69A 42 5B A5 A2                  	LDA		ZS:keybd_char
   7775 00E69E 10 02                        	BPL		.0001
   7776 00E6A0 38                           	SEC
   7777 00E6A1 60                           	RTS
   7778 00E6A2                             .0001:
   7779 00E6A2 18                           	CLC
   7780 00E6A3 60                           	RTS
                                           
   7782 00E6A4                             getcharWait:
   7783 00E6A4 A9 02 00                     	LDA		#2
   7784 00E6A7 42 5B 85 A4                  	STA		ZS:keybd_cmd
   7785 00E6AB 42 A2 06 00                  	TSK		#6
   7786 00E6AF 42 5B A5 A2                  	LDA		ZS:keybd_char
   7787 00E6B3 10 02                        	BPL		.0001
   7788 00E6B5 38                           	SEC
   7789 00E6B6 60                           	RTS
   7790 00E6B7                             .0001:
   7791 00E6B7 18                           	CLC
   7792 00E6B8 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ;------------------------------------------------------------------------------
                                           ; Keyboard processing routines follow.
                                           ;------------------------------------------------------------------------------
                                           ;------------------------------------------------------------------------------
                                           
   7800 00E6B9                             KeybdInit:
   7801 00E6B9 A9 00 20                     	LDA		#$2000
   7802 00E6BC 1B                           	TAS
   7803 00E6BD 64 A4                        	STZ		keybd_cmd
   7804 00E6BF E2 30                        	SEP		#$30
                                           	MEM		8
                                           	NDX		8
   7807 00E6C1 64 08                        	STZ		KeyState1
   7808 00E6C3 64 09                        	STZ		KeyState2
   7809 00E6C5 A0 05                        	LDY		#$5
   7810 00E6C7                             .0001:
   7811 00E6C7 20 63 E7                     	JSR		KeybdRecvByte	; Look for $AA
   7812 00E6CA 90 04                        	BCC		.0002
   7813 00E6CC C9 AA                        	CMP		#$AA			;
   7814 00E6CE F0 25                        	BEQ		.config
   7815 00E6D0                             .0002:
   7816 00E6D0 20 B4 E7                     	JSR		Wait10ms
   7817 00E6D3 A9 FF                        	LDA		#$FF			; send reset code to keyboard
   7818 00E6D5 8F 11 A1 FE                  	STA		KEYBD+1			; write to status reg to clear TX state
   7819 00E6D9 20 B4 E7                     	JSR		Wait10ms
   7820 00E6DC A9 FF                        	LDA		#$FF
   7821 00E6DE 8F 10 A1 FE                  	STA		KEYBD			; now write to transmit register
   7822 00E6E2 20 9D E7                     	JSR		KeybdWaitTx		; wait until no longer busy
   7823 00E6E5 20 63 E7                     	JSR		KeybdRecvByte	; look for an ACK ($FA)
   7824 00E6E8 C9 FA                        	CMP		#$FA
   7825 00E6EA 20 63 E7                     	JSR		KeybdRecvByte
   7826 00E6ED C9 FC                        	CMP		#$FC			; reset error ?
   7827 00E6EF F0 18                        	BEQ		.tryAgain
   7828 00E6F1 C9 AA                        	CMP		#$AA			; reset complete okay ?
   7829 00E6F3 D0 14                        	BNE		.tryAgain
   7830 00E6F5                             .config:
   7831 00E6F5 A9 F0                        	LDA		#$F0			; send scan code select
   7832 00E6F7 8F 10 A1 FE                  	STA		KEYBD
   7833 00E6FB 20 9D E7                     	JSR		KeybdWaitTx
   7834 00E6FE 90 09                        	BCC		.tryAgain
   7835 00E700 20 63 E7                     	JSR		KeybdRecvByte	; wait for response from keyboard
   7836 00E703 90 04                        	BCC		.tryAgain
   7837 00E705 C9 FA                        	CMP		#$FA
   7838 00E707 F0 10                        	BEQ		.0004
   7839 00E709                             .tryAgain:
   7840 00E709 88                           	DEY
   7841 00E70A D0 BB                        	BNE		.0001
   7842 00E70C                             .keybdErr:
   7843 00E70C C2 30                        	REP		#$30
   7844 00E70E F4 C4 E7                     	PEA		msgKeybdNR
   7845 00E711 20 3E E5                     	JSR		DisplayString
   7846 00E714 68                           	PLA
   7847 00E715 42 60                        	RTT
   7848 00E717 80 11                        	BRA		KeybdService
   7849 00E719                             .0004:
   7850 00E719 A9 02                        	LDA		#2				; select scan code set #2
   7851 00E71B 8F 10 A1 FE                  	STA		KEYBD
   7852 00E71F 20 9D E7                     	JSR		KeybdWaitTx
   7853 00E722 90 E5                        	BCC		.tryAgain
   7854 00E724 C2 30                        	REP		#$30
   7855 00E726 42 60                        	RTT
   7856 00E728 80 00                        	BRA		KeybdService
                                           
   7858 00E72A                             KeybdService:
   7859 00E72A C2 30                        	REP		#$30
                                           	MEM		16
                                           	NDX		16
   7862 00E72C A9 00 20                     	LDA		#$2000
   7863 00E72F 1B                           	TAS
   7864 00E730 A5 A4                        	LDA		keybd_cmd
   7865 00E732 C9 01 00                     	CMP		#1
   7866 00E735 D0 18                        	BNE		.0001
   7867 00E737 20 E7 E7                     	JSR		KeybdGetCharNoWait
   7868 00E73A B0 08                        	BCS		.nokey
   7869 00E73C 64 A4                        	STZ		keybd_cmd
   7870 00E73E 85 A2                        	STA		keybd_char
   7871 00E740 42 60                        	RTT
   7872 00E742 80 E6                        	BRA		KeybdService
   7873 00E744                             .nokey
   7874 00E744 A9 FF FF                     	LDA		#-1
   7875 00E747 64 A4                        	STZ		keybd_cmd
   7876 00E749 85 A2                        	STA		keybd_char
   7877 00E74B 42 60                        	RTT
   7878 00E74D 80 DB                        	BRA		KeybdService
   7879 00E74F                             .0001:
   7880 00E74F C9 02 00                     	CMP		#2
   7881 00E752 D0 0B                        	BNE		.0002
   7882 00E754 20 F2 E7                     	JSR		KeybdGetCharWait
   7883 00E757 64 A4                        	STZ		keybd_cmd
   7884 00E759 85 A2                        	STA		keybd_char
   7885 00E75B 42 60                        	RTT
   7886 00E75D 80 CB                        	BRA		KeybdService
   7887 00E75F                             .0002:
   7888 00E75F 42 60                        	RTT
   7889 00E761 80 C7                        	BRA		KeybdService
                                           
                                           	MEM		8
                                           	NDX		8
                                           ; Recieve a byte from the keyboard, used after a command is sent to the
                                           ; keyboard in order to wait for a response.
                                           ;
   7896 00E763                             KeybdRecvByte:
   7897 00E763 5A                           	PHY
   7898 00E764 A0 64                        	LDY		#100			; wait up to 1s
   7899 00E766                             .0003:
   7900 00E766 AF 11 A1 FE                  	LDA		KEYBD+1			; wait for response from keyboard
   7901 00E76A 89 80                        	BIT		#$80			; is input buffer full ?
   7902 00E76C D0 09                        	BNE		.0004			; yes, branch
   7903 00E76E 20 B4 E7                     	JSR		Wait10ms		; wait a bit
   7904 00E771 88                           	DEY
   7905 00E772 D0 F2                        	BNE		.0003			; go back and try again
   7906 00E774 7A                           	PLY						; timeout
   7907 00E775 18                           	CLC						; carry clear = no code
   7908 00E776 60                           	RTS
   7909 00E777                             .0004:
   7910 00E777 AF 10 A1 FE                  	LDA		KEYBD			;
   7911 00E77B 48                           	PHA
   7912 00E77C A9 00                        	LDA		#0				; clear recieve state
   7913 00E77E 8F 11 A1 FE                  	STA		KEYBD+1
   7914 00E782 68                           	PLA
   7915 00E783 7A                           	PLY
   7916 00E784 38                           	SEC						; carry set = code available
   7917 00E785 60                           	RTS
                                           
                                           ; Wait until the keyboard status is non-busy
                                           ; Returns .CF = 1 if successful, .CF=0 timeout
                                           ;
   7922 00E786                             KeybdWaitBusy:
   7923 00E786 5A                           	PHY
   7924 00E787 A0 64                        	LDY		#100			; wait a max of 1s
   7925 00E789                             .0001:
   7926 00E789 AF 11 A1 FE                  	LDA		KEYBD+1
   7927 00E78D 89 01                        	BIT		#1
   7928 00E78F F0 09                        	BEQ		.0002
   7929 00E791 20 B4 E7                     	JSR		Wait10ms
   7930 00E794 88                           	DEY
   7931 00E795 D0 F2                        	BNE		.0001
   7932 00E797 7A                           	PLY
   7933 00E798 18                           	CLC
   7934 00E799 60                           	RTS
   7935 00E79A                             .0002:
   7936 00E79A 7A                           	PLY
   7937 00E79B 38                           	SEC
   7938 00E79C 60                           	RTS
                                           
                                           ; Wait until the keyboard transmit is complete
                                           ; Returns .CF = 1 if successful, .CF=0 timeout
                                           ;
   7943 00E79D                             KeybdWaitTx:
   7944 00E79D 5A                           	PHY
   7945 00E79E A0 64                        	LDY		#100			; wait a max of 1s
   7946 00E7A0                             .0001:
   7947 00E7A0 AF 11 A1 FE                  	LDA		KEYBD+1
   7948 00E7A4 89 40                        	BIT		#$40			; check for transmit complete bit
   7949 00E7A6 D0 09                        	BNE		.0002			; branch if bit set
   7950 00E7A8 20 B4 E7                     	JSR		Wait10ms		; delay a little bit
   7951 00E7AB 88                           	DEY						; go back and try again
   7952 00E7AC D0 F2                        	BNE		.0001
   7953 00E7AE 7A                           	PLY						; timed out
   7954 00E7AF 18                           	CLC						; return carry clear
   7955 00E7B0 60                           	RTS
   7956 00E7B1                             .0002:
   7957 00E7B1 7A                           	PLY						; wait complete, return 
   7958 00E7B2 38                           	SEC						; carry set
   7959 00E7B3 60                           	RTS
                                           
                                           ; Wait approximately 10ms. Used by keyboard routines. Makes use of the free
                                           ; running counter #0.
                                           ; .A = trashed (=-5)
                                           ;
   7965 00E7B4                             Wait10ms:
   7966 00E7B4 DA                           	PHX				; save .X
   7967 00E7B5 A5 12                        	LDA		CNT0H	; get starting count
   7968 00E7B7 AA                           	TAX				; save it off in .X
   7969 00E7B8                             .0002:
   7970 00E7B8 38                           	SEC				; compare to current counter value
   7971 00E7B9 E5 12                        	SBC		CNT0H
   7972 00E7BB 10 05                        	BPL		.0001	; teh result should be -ve, unless counter overflowed.
   7973 00E7BD C9 FB                        	CMP		#-5		; 5 ticks pass ? 
   7974 00E7BF 8A                           	TXA				; prepare for next check, get startcount in .A
   7975 00E7C0 B0 F6                        	BCS		.0002	; go back if less than 5 ticks
   7976 00E7C2                             .0001:
   7977 00E7C2 FA                           	PLX				; restore .X
   7978 00E7C3 60                           	RTS
                                           
                                           	MEM		16
                                           	NDX		16
                                           
   7983 00E7C4                             msgKeybdNR:
   7984 00E7C4 0D 0A 4B 65 79 62 6F 61      	.byte	CR,LF,"Keyboard not responding.",CR,LF,0
   7984 00E7CC 72 64 20 6E 6F 74 20 72    
   7984 00E7D4 65 73 70 6F 6E 64 69 6E    
   7984 00E7DC 67 2E 0D 0A 00             
                                           
                                           	cpu		FT832
                                           
   7988 00E7E1                             KeybdGetCharNoWaitCtx:
   7989 00E7E1 20 E7 E7                     	JSR		KeybdGetCharNoWait
   7990 00E7E4 40 42 00                     	RTC		#0
   7991 00E7E7                             	
   7992 00E7E7 08                           	PHP
   7993 00E7E8 E2 20                        	SEP		#$20
   7994 00E7EA C2 10                        	REP		#$10
                                           	MEM		8
                                           	NDX		16
   7997 00E7EC A9 00                        	LDA		#0
   7998 00E7EE 85 0B                        	STA		KeybdWaitFlag
   7999 00E7F0 80 10                        	BRA		KeybdGetChar1
                                           
   8001 00E7F2                             KeybdGetCharWait:
   8002 00E7F2 08                           	PHP
   8003 00E7F3 E2 20                        	SEP		#$20
   8004 00E7F5 C2 10                        	REP		#$10
                                           	MEM		8
                                           	NDX		16
   8007 00E7F7 A9 FF                        	LDA		#$FF
   8008 00E7F9 85 0B                        	STA		KeybdWaitFlag
   8009 00E7FB 80 05                        	BRA		KeybdGetChar1
                                           
                                           ; Wait for a keyboard character to be available
                                           ; Returns (CF=1) if no key available
                                           ; Return key (CF=0) if key is available
                                           ;
                                           ;
   8016 00E7FD                             KeybdGetChar:
   8017 00E7FD 08                           	PHP
   8018 00E7FE E2 20                        	SEP		#$20		; 8 bit acc
   8019 00E800 C2 10                        	REP		#$10
                                           	MEM		8
                                           	NDX		16
   8022 00E802                             KeybdGetChar1:
   8023 00E802 DA                           	PHX
   8024 00E803 EB                           	XBA					; force .B to zero for TAX
   8025 00E804 A9 00                        	LDA		#0
   8026 00E806 EB                           	XBA
   8027 00E807                             .0002:
   8028 00E807                             .0003:
   8029 00E807 AF 11 A1 FE                  	LDA		KEYBD+1		; check MSB of keyboard status reg.
   8030 00E80B 0A                           	ASL
   8031 00E80C B0 08                        	BCS		.0006		; branch if keystroke ready
   8032 00E80E 24 0B                        	BIT		KeybdWaitFlag
   8033 00E810 30 F5                        	BMI		.0003
   8034 00E812 FA                           	PLX
   8035 00E813 28                           	PLP
   8036 00E814 38                           	SEC
   8037 00E815 60                           	RTS
   8038 00E816                             .0006:
   8039 00E816 AF 10 A1 FE                  	LDA		KEYBD		; get scan code value
   8040 00E81A 48                           	PHA
   8041 00E81B A9 00                        	LDA		#0			; write a zero to the status reg
   8042 00E81D 8F 11 A1 FE                  	STA		KEYBD+1		; to clear recieve register
   8043 00E821 68                           	PLA
   8044 00E822                             .0001:
   8045 00E822 C9 F0                        	CMP		#SC_KEYUP	; keyup scan code ?
   8046 00E824 F0 FF 69 00                  	LBEQ	.doKeyup	; 
   8047 00E828 C9 E0                        	CMP		#SC_EXTEND	; extended scan code ?
   8048 00E82A F0 FF 6A 00                  	LBEQ	.doExtend
   8049 00E82E C9 14                        	CMP		#$14		; control ?
   8050 00E830 F0 FF 6D 00                  	LBEQ	.doCtrl
   8051 00E834 C9 12                        	CMP		#$12		; left shift
   8052 00E836 F0 FF 77 00                  	LBEQ	.doShift
   8053 00E83A C9 59                        	CMP		#$59		; right shift
   8054 00E83C F0 FF 71 00                  	LBEQ	.doShift
   8055 00E840 C9 77                        	CMP		#SC_NUMLOCK
   8056 00E842 F0 FF 7B 00                  	LBEQ	.doNumLock
   8057 00E846 C9 58                        	CMP		#SC_CAPSLOCK
   8058 00E848 F0 FF 81 00                  	LBEQ	.doCapsLock
   8059 00E84C C9 7E                        	CMP		#SC_SCROLLLOCK
   8060 00E84E F0 FF 87 00                  	LBEQ	.doScrollLock
   8061 00E852 46 08                        	LSR		KeyState1
   8062 00E854 B0 B1                        	BCS		.0003
   8063 00E856 AA                           	TAX
   8064 00E857 A9 80                        	LDA		#$80
   8065 00E859 24 09                        	BIT		KeyState2	; Is extended code ?
   8066 00E85B F0 11                        	BEQ		.0010
   8067 00E85D A9 7F                        	LDA		#$7F
   8068 00E85F 25 09                        	AND		KeyState2
   8069 00E861 85 09                        	STA		KeyState2
   8070 00E863 46 08                        	LSR		KeyState1	; clear keyup
   8071 00E865 8A                           	TXA
   8072 00E866 29 7F                        	AND		#$7F
   8073 00E868 AA                           	TAX
   8074 00E869 BD C4 EB                     	LDA		keybdExtendedCodes,X
   8075 00E86C 80 1D                        	BRA		.0008
   8076 00E86E                             .0010:
   8077 00E86E A9 04                        	LDA		#4
   8078 00E870 24 09                        	BIT		KeyState2	; Is Cntrl down ?
   8079 00E872 F0 09                        	BEQ		.0009
   8080 00E874 8A                           	TXA
   8081 00E875 29 7F                        	AND		#$7F		; table is 128 chars
   8082 00E877 AA                           	TAX
   8083 00E878 BD 44 EB                     	LDA		keybdControlCodes,X
   8084 00E87B 80 0E                        	BRA		.0008
   8085 00E87D                             .0009:
   8086 00E87D A9 01                        	LDA		#$1			; Is shift down ?
   8087 00E87F 24 09                        	BIT		KeyState2
   8088 00E881 F0 05                        	BEQ		.0007
   8089 00E883 BD 44 EA                     	LDA		shiftedScanCodes,X
   8090 00E886 80 03                        	BRA		.0008
   8091 00E888                             .0007:
   8092 00E888 BD 44 E9                     	LDA		unshiftedScanCodes,X
   8093 00E88B                             .0008:
   8094 00E88B C2 20                        	REP		#$20
                                           	MEM		16
   8096 00E88D FA                           	PLX
   8097 00E88E 28                           	PLP
   8098 00E88F 18                           	CLC
   8099 00E890 60                           	RTS
                                           	MEM		8
   8101 00E891                             .doKeyup:
   8102 00E891 A9 01                        	LDA		#1
   8103 00E893 04 08                        	TSB		KeyState1
   8104 00E895 82 6F FF                     	BRL		.0003
   8105 00E898                             .doExtend:				; set extended key flag
   8106 00E898 A5 09                        	LDA		KeyState2
   8107 00E89A 09 80                        	ORA		#$80
   8108 00E89C 85 09                        	STA		KeyState2
   8109 00E89E 82 66 FF                     	BRL		.0003
   8110 00E8A1                             .doCtrl:
   8111 00E8A1 A9 04                        	LDA		#4
   8112 00E8A3 46 08                        	LSR		KeyState1	; check key up/down	
   8113 00E8A5 90 05                        	BCC		.0004		; keydown = carry clear
   8114 00E8A7 14 09                        	TRB		KeyState2
   8115 00E8A9 82 5B FF                     	BRL		.0003
   8116 00E8AC                             .0004:
   8117 00E8AC 04 09                        	TSB		KeyState2	; set control active bit
   8118 00E8AE 82 56 FF                     	BRL		.0003
   8119 00E8B1                             .doShift:
   8120 00E8B1 A9 01                        	LDA		#1
   8121 00E8B3 46 08                        	LSR		KeyState1	; check key up/down	
   8122 00E8B5 90 05                        	BCC		.0005
   8123 00E8B7 14 09                        	TRB		KeyState2
   8124 00E8B9 82 4B FF                     	BRL		.0003
   8125 00E8BC                             .0005:
   8126 00E8BC 04 09                        	TSB		KeyState2
   8127 00E8BE 82 46 FF                     	BRL		.0003
   8128 00E8C1                             .doNumLock:
   8129 00E8C1 A5 09                        	LDA		KeyState2
   8130 00E8C3 49 10                        	EOR		#16
   8131 00E8C5 85 09                        	STA		KeyState2
   8132 00E8C7 20 E5 E8                     	JSR		KeybdSetLEDStatus
   8133 00E8CA 82 3A FF                     	BRL		.0003
   8134 00E8CD                             .doCapsLock:
   8135 00E8CD A5 09                        	LDA		KeyState2
   8136 00E8CF 49 20                        	EOR		#32
   8137 00E8D1 85 09                        	STA		KeyState2
   8138 00E8D3 20 E5 E8                     	JSR		KeybdSetLEDStatus
   8139 00E8D6 82 2E FF                     	BRL		.0003
   8140 00E8D9                             .doScrollLock:
   8141 00E8D9 A5 09                        	LDA		KeyState2
   8142 00E8DB 49 40                        	EOR		#64
   8143 00E8DD 85 09                        	STA		KeyState2
   8144 00E8DF 20 E5 E8                     	JSR		KeybdSetLEDStatus
   8145 00E8E2 82 22 FF                     	BRL		.0003
                                           
   8147 00E8E5                             KeybdSetLEDStatus:
   8148 00E8E5 42 0B                        	PHDS				; save off DS
   8149 00E8E7 F4 00 00                     	PEA		0			; set DS to zero
   8150 00E8EA F4 00 00                     	PEA		0			; set DS to zero
   8151 00E8ED 42 2B                        	PLDS
   8152 00E8EF A9 00                        	LDA		#0
   8153 00E8F1 85 0A                        	STA		KeybdLEDs
   8154 00E8F3 A9 10                        	LDA		#16
   8155 00E8F5 24 09                        	BIT		KeyState2
   8156 00E8F7 F0 06                        	BEQ		.0002
   8157 00E8F9 A5 0A                        	LDA		KeybdLEDs	; set bit 1 for Num lock, 0 for scrolllock , 2 for caps lock
   8158 00E8FB 09 02                        	ORA		#$2
   8159 00E8FD 85 0A                        	STA		KeybdLEDs
   8160 00E8FF                             .0002:
   8161 00E8FF A9 20                        	LDA		#32
   8162 00E901 24 09                        	BIT		KeyState2
   8163 00E903 F0 06                        	BEQ		.0003
   8164 00E905 A5 0A                        	LDA		KeybdLEDs
   8165 00E907 09 04                        	ORA		#$4
   8166 00E909 85 0A                        	STA		KeybdLEDs
   8167 00E90B                             .0003:
   8168 00E90B A9 40                        	LDA		#64
   8169 00E90D 24 09                        	BIT		KeyState2
   8170 00E90F F0 06                        	BEQ		.0004
   8171 00E911 A5 0A                        	LDA		KeybdLEDs
   8172 00E913 09 01                        	ORA		#1
   8173 00E915 85 0A                        	STA		KeybdLEDs
   8174 00E917                             .0004:
   8175 00E917 A9 ED                        	LDA		#$ED		; set status LEDs command
   8176 00E919 8F 10 A1 FE                  	STA		KEYBD
   8177 00E91D 20 9D E7                     	JSR		KeybdWaitTx
   8178 00E920 20 63 E7                     	JSR		KeybdRecvByte
   8179 00E923 90 0E                        	BCC		.0001
   8180 00E925 C9 FA                        	CMP		#$FA
   8181 00E927 A5 0A                        	LDA		KeybdLEDs
   8182 00E929 8F 10 A1 FE                  	STA		KEYBD
   8183 00E92D 20 9D E7                     	JSR		KeybdWaitTx
   8184 00E930 20 63 E7                     	JSR		KeybdRecvByte	; wait for $FA byte
   8185 00E933                             .0001:
   8186 00E933 42 2B                        	PLDS				; recover DS
   8187 00E935 60                           	RTS
                                           
                                           	MEM		16
                                           
   8191 00E936 10 D3                        	BPL		.0003
   8192 00E938 48                           	PHA					; save off the char (we need to trash acc)
   8193 00E939 AF 14 A1 FE                  	LDA		KEYBD+4		; clear keyboard strobe (must be a read operation)
   8194 00E93D 68                           	PLA					; restore char
   8195 00E93E 89 00 08                     	BIT		#$800		; Is it a keyup code ?
   8196 00E941 D0 C8                        	BNE		.0003
   8197 00E943 60                           	RTS
                                           
                                           
                                           
                                           	;--------------------------------------------------------------------------
                                           	; PS2 scan codes to ascii conversion tables.
                                           	;--------------------------------------------------------------------------
                                           	;
   8205 00E944                             unshiftedScanCodes:
   8206 00E944 2E A9 2E A5 A3 A1 A2 AC      	.byte	$2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
                                         
   8207 00E94C 2E AA A8 A6 A4 09 60 2E      	.byte	$2e,$aa,$a8,$a6,$a4,$09,$60,$2e
                                         
   8208 00E954 2E 2E 2E 2E 2E 71 31 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$71,$31,$2e
                                         
   8209 00E95C 2E 2E 7A 73 61 77 32 2E      	.byte	$2e,$2e,$7a,$73,$61,$77,$32,$2e
                                         
   8210 00E964 2E 63 78 64 65 34 33 2E      	.byte	$2e,$63,$78,$64,$65,$34,$33,$2e
                                         
   8211 00E96C 2E 20 76 66 74 72 35 2E      	.byte	$2e,$20,$76,$66,$74,$72,$35,$2e
                                         
   8212 00E974 2E 6E 62 68 67 79 36 2E      	.byte	$2e,$6e,$62,$68,$67,$79,$36,$2e
                                         
   8213 00E97C 2E 2E 6D 6A 75 37 38 2E      	.byte	$2e,$2e,$6d,$6a,$75,$37,$38,$2e
                                         
   8214 00E984 2E 2C 6B 69 6F 30 39 2E      	.byte	$2e,$2c,$6b,$69,$6f,$30,$39,$2e
                                         
   8215 00E98C 2E 2E 2F 6C 3B 70 2D 2E      	.byte	$2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
                                         
   8216 00E994 2E 2E 27 2E 5B 3D 2E 2E      	.byte	$2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
                                         
   8217 00E99C AD 2E 0D 5D 2E 5C 2E 2E      	.byte	$ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
                                         
   8218 00E9A4 2E 2E 2E 2E 2E 2E 08 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                         
   8219 00E9AC 2E 95 2E 93 94 2E 2E 2E      	.byte	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
                                         
   8220 00E9B4 98 7F 92 2E 91 90 1B AF      	.byte	$98,$7f,$92,$2e,$91,$90,$1b,$af
                                         
   8221 00E9BC AB 2E 97 2E 2E 96 AE 2E      	.byte	$ab,$2e,$97,$2e,$2e,$96,$ae,$2e
                                         
                                           
   8223 00E9C4 2E 2E 2E A7 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
                                         
   8224 00E9CC 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8225 00E9D4 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8226 00E9DC 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8227 00E9E4 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8228 00E9EC 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8229 00E9F4 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8230 00E9FC 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8231 00EA04 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8232 00EA0C 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8233 00EA14 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8234 00EA1C 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8235 00EA24 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8236 00EA2C 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8237 00EA34 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8238 00EA3C 2E 2E FA 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
                                         
                                           
   8240 00EA44                             shiftedScanCodes:
   8241 00EA44 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8242 00EA4C 2E 2E 2E 2E 2E 09 7E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
                                         
   8243 00EA54 2E 2E 2E 2E 2E 51 21 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$51,$21,$2e
                                         
   8244 00EA5C 2E 2E 5A 53 41 57 40 2E      	.byte	$2e,$2e,$5a,$53,$41,$57,$40,$2e
                                         
   8245 00EA64 2E 43 58 44 45 24 23 2E      	.byte	$2e,$43,$58,$44,$45,$24,$23,$2e
                                         
   8246 00EA6C 2E 20 56 46 54 52 25 2E      	.byte	$2e,$20,$56,$46,$54,$52,$25,$2e
                                         
   8247 00EA74 2E 4E 42 48 47 59 5E 2E      	.byte	$2e,$4e,$42,$48,$47,$59,$5e,$2e
                                         
   8248 00EA7C 2E 2E 4D 4A 55 26 2A 2E      	.byte	$2e,$2e,$4d,$4a,$55,$26,$2a,$2e
                                         
   8249 00EA84 2E 3C 4B 49 4F 29 28 2E      	.byte	$2e,$3c,$4b,$49,$4f,$29,$28,$2e
                                         
   8250 00EA8C 2E 3E 3F 4C 3A 50 5F 2E      	.byte	$2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
                                         
   8251 00EA94 2E 2E 22 2E 7B 2B 2E 2E      	.byte	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
                                         
   8252 00EA9C 2E 2E 0D 7D 2E 7C 2E 2E      	.byte	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
                                         
   8253 00EAA4 2E 2E 2E 2E 2E 2E 08 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                         
   8254 00EAAC 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8255 00EAB4 2E 7F 2E 2E 2E 2E 1B 2E      	.byte	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
                                         
   8256 00EABC 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
                                           
   8258 00EAC4 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8259 00EACC 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8260 00EAD4 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8261 00EADC 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8262 00EAE4 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8263 00EAEC 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8264 00EAF4 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8265 00EAFC 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8266 00EB04 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8267 00EB0C 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8268 00EB14 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8269 00EB1C 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8270 00EB24 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8271 00EB2C 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8272 00EB34 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8273 00EB3C 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
                                           
                                           ; control
   8276 00EB44                             keybdControlCodes:
   8277 00EB44 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8278 00EB4C 2E 2E 2E 2E 2E 09 7E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
                                         
   8279 00EB54 2E 2E 2E 2E 2E 11 21 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$11,$21,$2e
                                         
   8280 00EB5C 2E 2E 1A 13 01 17 40 2E      	.byte	$2e,$2e,$1a,$13,$01,$17,$40,$2e
                                         
   8281 00EB64 2E 03 18 04 05 24 23 2E      	.byte	$2e,$03,$18,$04,$05,$24,$23,$2e
                                         
   8282 00EB6C 2E 20 16 06 14 12 25 2E      	.byte	$2e,$20,$16,$06,$14,$12,$25,$2e
                                         
   8283 00EB74 2E 0E 02 08 07 19 5E 2E      	.byte	$2e,$0e,$02,$08,$07,$19,$5e,$2e
                                         
   8284 00EB7C 2E 2E 0D 0A 15 26 2A 2E      	.byte	$2e,$2e,$0d,$0a,$15,$26,$2a,$2e
                                         
   8285 00EB84 2E 3C 0B 09 0F 29 28 2E      	.byte	$2e,$3c,$0b,$09,$0f,$29,$28,$2e
                                         
   8286 00EB8C 2E 3E 3F 0C 3A 10 5F 2E      	.byte	$2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
                                         
   8287 00EB94 2E 2E 22 2E 7B 2B 2E 2E      	.byte	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
                                         
   8288 00EB9C 2E 2E 0D 7D 2E 7C 2E 2E      	.byte	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
                                         
   8289 00EBA4 2E 2E 2E 2E 2E 2E 08 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                         
   8290 00EBAC 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8291 00EBB4 2E 7F 2E 2E 2E 2E 1B 2E      	.byte	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
                                         
   8292 00EBBC 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
                                           
   8294 00EBC4                             keybdExtendedCodes:
   8295 00EBC4 2E 2E 2E 2E A3 A1 A2 2E      	.byte	$2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
                                         
   8296 00EBCC 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8297 00EBD4 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8298 00EBDC 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8299 00EBE4 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8300 00EBEC 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8301 00EBF4 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8302 00EBFC 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8303 00EC04 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8304 00EC0C 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8305 00EC14 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8306 00EC1C 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8307 00EC24 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8308 00EC2C 2E 95 2E 93 94 2E 2E 2E      	.byte	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
                                         
   8309 00EC34 98 99 92 2E 91 90 2E 2E      	.byte	$98,$99,$92,$2e,$91,$90,$2e,$2e
                                         
   8310 00EC3C 2E 2E 97 2E 2E 96 2E 2E      	.byte	$2e,$2e,$97,$2e,$2e,$96,$2e,$2e
                                         
                                           
                                           ; Get char routine for Supermon
                                           ; This routine might be called with 8 bit regs.
                                           ;
   8315 00EC44                             SuperGetch:
   8316 00EC44 08                           	PHP
   8317 00EC45 C2 30                        	REP		#$30
                                           	MEM		16
                                           	NDX		16
   8320 00EC47 20 E7 E7                     	JSR		KeybdGetCharNoWait
   8321 00EC4A 29 FF 00                     	AND		#$FF
   8322 00EC4D B0 03                        	BCS		.0001
   8323 00EC4F 28                           	PLP		; to restore reg size
   8324 00EC50 18                           	CLC
   8325 00EC51 60                           	RTS
   8326 00EC52                             .0001:
   8327 00EC52 28                           	PLP
   8328 00EC53 38                           	SEC
   8329 00EC54 60                           	RTS
                                           
                                           ; Put char routine for Supermon
                                           ; This routine might be called with 8 bit regs.
                                           ;
   8334 00EC55                             SuperPutch:
   8335 00EC55 08                           	PHP
   8336 00EC56 C2 30                        	REP		#$30	; 16 bit regs
                                           	MEM		16
                                           	NDX		16
   8339 00EC58 48                           	PHA
   8340 00EC59 DA                           	PHX
   8341 00EC5A 5A                           	PHY
   8342 00EC5B 20 33 E5                     	JSR		OutChar
   8343 00EC5E 7A                           	PLY
   8344 00EC5F FA                           	PLX
   8345 00EC60 68                           	PLA
   8346 00EC61 28                           	PLP
   8347 00EC62 60                           	RTS
                                           
   8349 00EC63                             warm_start:
   8350 00EC63 20 69 E5                     	JSR		CursorOn
   8351 00EC66 82 7F F4                     	BRL		Mon1
                                           
                                           	cpu		FT832
   8354 00EC69                             ICacheIL832:
   8355 00EC69 42 E0 01                     	CACHE	#1			; 1= invalidate instruction line identified by accumulator
   8356 00EC6C 60                           	RTS
                                           
   8358 00EC6D                             ByteIRQRout:
   8359 00EC6D 40                           	RTI
                                           
   8361 00EC6E                             IRQRout:
   8362 00EC6E 42 A2 01 00                  	TSK		#1			; switch to the interrupt handling task
   8363 00EC72 40                           	RTI
                                           
   8365 00EC73 C2 30                        	REP		#$30
                                           	NDX		16
                                           	MEM		16
   8368 00EC75 48                           	PHA
   8369 00EC76 20 7B EC                     	JSR		Task1
   8370 00EC79 68                           	PLA
   8371 00EC7A 40                           	RTI
                                           
   8373 00EC7B                             Task1:
   8374 00EC7B C2 30                        	REP		#$30
                                           	NDX		16
                                           	MEM		16
   8377 00EC7D AD 1F F0                     	LDA		$F01F		; check if counter expired
   8378 00EC80 89 02 00                     	BIT		#2
   8379 00EC83 F0 10                        	BEQ		.0001
   8380 00EC85 A5 04                        	LDA		TickCount	; increment the tick count
   8381 00EC87 1A                           	INA
   8382 00EC88 85 04                        	STA		TickCount
   8383 00EC8A 8F A4 00 FD                  	STA		$FD00A4		; update on-screen IRQ live indicator
   8384 00EC8E E2 30                        	SEP		#$30
                                           	NDX		8
                                           	MEM		8
   8387 00EC90 A9 05                        	LDA		#$05		; count down, on mpu clock, irq enabled (clears irq)
   8388 00EC92 8D 17 F0                     	STA		$F017
   8389 00EC95                             .0001:
   8390 00EC95 C2 30                        	REP		#$30
                                           	NDX		16
                                           	MEM		16
                                           ;	BIT		do_invaders
                                           ;	BPL		.0002
                                           ;	TSK		#5
   8396 00EC97                             .0002:
   8397 00EC97 42 60                        	RTT					; go back to interrupted task
   8398 00EC99 80 E0                        	BRA		Task1		; the next time task1 is run it will start here
                                           
                                           ; IRQ handler task - 32 bit
                                           ;
   8402 00EC9B                             IRQTask:
   8403 00EC9B 42 E2 20 02                  	SEP		#$220		; eight bit accumulator, 32 bit indexes
   8404 00EC9F 42 C2 10 01                  	REP		#$110
                                           	MEM		8
                                           	NDX		32
   8407 00ECA3                             IRQTask1:
   8408 00ECA3 AD 1F F0                     	LDA		$F01F		; check if counter expired
   8409 00ECA6 89 02                        	BIT		#2
   8410 00ECA8 F0 12                        	BEQ		.0001
   8411 00ECAA A6 04                        	LDX		TickCount	; increment the tick count
   8412 00ECAC E8                           	INX
   8413 00ECAD 86 04                        	STX		TickCount
   8414 00ECAF 42 AB 42 8E A2 00 FD 00      	STX.H	$FD00A2		; update on-screen IRQ live indicator
                                         
   8415 00ECB7 A9 05                        	LDA		#$05		; count down, on mpu clock, irq enabled (clears irq)
   8416 00ECB9 8D 17 F0                     	STA		$F017
   8417 00ECBC                             .0001:
                                           ;	BIT		do_invaders
                                           ;	BPL		.0002
                                           ;	TSK		#5
   8421 00ECBC                             .0002:
   8422 00ECBC 42 60                        	RTT					; go back to interrupted task
   8423 00ECBE 80 E3                        	BRA		IRQTask1	; the next time task is run it will start here
                                           
                                           ; This little task sample runs in native 32 bit mode and displays
                                           ; "Hello World!" on the screen.
                                           
                                           	CPU		FT832
                                           	MEM		8
                                           	NDX		32
                                           
   8432 00ECC0                             Task2:
   8433 00ECC0 A2 F8 01 00 00               	LDX		#84*2*3
   8434 00ECC5                             .0003:
   8435 00ECC5 A0 00 00 00 00               	LDY		#0
   8436 00ECCA                             .0002:
   8437 00ECCA B9 DF EC                     	LDA		msgHelloWorld,Y
   8438 00ECCD F0 0C                        	BEQ		.0001
   8439 00ECCF 20 3D E3                     	JSR		AsciiToScreen8
   8440 00ECD2 9F 00 00 FD                  	STA		VIDBUF,X
   8441 00ECD6 E8                           	INX
   8442 00ECD7 E8                           	INX
   8443 00ECD8 C8                           	INY
   8444 00ECD9 80 EF                        	BRA		.0002
   8445 00ECDB                             .0001:
   8446 00ECDB 42 60                        	RTT
   8447 00ECDD 80 E6                        	BRA		.0003
                                           
   8449 00ECDF                             msgHelloWorld:
   8450 00ECDF 0D 0A 48 65 6C 6C 6F 20      	.byte	CR,LF,"Hello World!",CR,LF,0
   8450 00ECE7 57 6F 72 6C 64 21 0D 0A    
   8450 00ECEF 00                         
                                           
                                           	NDX		16
                                           	MEM		16
                                           
   8455 00ECF0                             BrkTask:
   8456 00ECF0 42 EE 00 00 D0 FF            	INC		$FFD00000
   8457 00ECF6 42 60                        	RTT
   8458 00ECF8 80 F6                        	BRA		BrkTask
                                           
                                           ; The following store sequence for the benefit of Supermon816
                                           ;
   8462 00ECFA                             BrkRout:
   8463 00ECFA 0B                           	PHD
   8464 00ECFB 8B                           	PHB
   8465 00ECFC C2 30                        	REP		#$30
   8466 00ECFE 48                           	PHA
   8467 00ECFF DA                           	PHX
   8468 00ED00 5A                           	PHY
   8469 00ED01 6C 02 01                     	JMP		($0102)		; This jump normally points to BrkRout1
   8470 00ED04                             BrkRout1:
   8471 00ED04 C2 30                        	REP		#$30
   8472 00ED06 7A                           	PLY
   8473 00ED07 FA                           	PLX
   8474 00ED08 68                           	PLA
   8475 00ED09 AB                           	PLB
   8476 00ED0A 2B                           	PLD
   8477 00ED0B E2 20                        	SEP		#$20
   8478 00ED0D 68                           	PLA
   8479 00ED0E C2 30                        	REP		#$30
   8480 00ED10 68                           	PLA
   8481 00ED11 20 C4 E5                     	JSR		DispWord
   8482 00ED14 A2 00 00                     	LDX		#0
   8483 00ED17 A0 40 00                     	LDY		#64
   8484 00ED1A                             .0001:
   8485 00ED1A 42 F0                        	.word	$f042		; pchist
   8486 00ED1C 20 C4 E5                     	JSR		DispWord
   8487 00ED1F A9 20 00                     	LDA		#' '
   8488 00ED22 20 33 E5                     	JSR		OutChar
   8489 00ED25 E8                           	INX
   8490 00ED26 88                           	DEY
   8491 00ED27 D0 F1                        	BNE		.0001
   8492 00ED29 A9 FF FF                     	LDA		#$FFFF
   8493 00ED2C 8D 00 70                     	STA		$7000
   8494 00ED2F                             Hung:
   8495 00ED2F 80 FE                        	BRA		Hung
   8496 00ED31                             	
   8497 00ED31 00 00                        	.WORD	0
   8498 00ED33 54 00                        	.WORD	TEXTCOLS
   8499 00ED35 A8 00                        	.WORD	TEXTCOLS*2
   8500 00ED37 FC 00                        	.WORD	TEXTCOLS*3
   8501 00ED39 50 01                        	.WORD	TEXTCOLS*4
   8502 00ED3B A4 01                        	.WORD	TEXTCOLS*5
   8503 00ED3D F8 01                        	.WORD	TEXTCOLS*6
   8504 00ED3F 4C 02                        	.WORD	TEXTCOLS*7
   8505 00ED41 A0 02                        	.WORD	TEXTCOLS*8
   8506 00ED43 F4 02                        	.WORD	TEXTCOLS*9
   8507 00ED45 48 03                        	.WORD	TEXTCOLS*10
   8508 00ED47 9C 03                        	.WORD	TEXTCOLS*11
   8509 00ED49 F0 03                        	.WORD	TEXTCOLS*12
   8510 00ED4B 44 04                        	.WORD	TEXTCOLS*13
   8511 00ED4D 98 04                        	.WORD	TEXTCOLS*14
   8512 00ED4F EC 04                        	.WORD	TEXTCOLS*15
   8513 00ED51 40 05                        	.WORD	TEXTCOLS*16
   8514 00ED53 94 05                        	.WORD	TEXTCOLS*17
   8515 00ED55 E8 05                        	.WORD	TEXTCOLS*18
   8516 00ED57 3C 06                        	.WORD	TEXTCOLS*19
   8517 00ED59 90 06                        	.WORD	TEXTCOLS*20
   8518 00ED5B E4 06                        	.WORD	TEXTCOLS*21
   8519 00ED5D 38 07                        	.WORD	TEXTCOLS*22
   8520 00ED5F 8C 07                        	.WORD	TEXTCOLS*23
   8521 00ED61 E0 07                        	.WORD	TEXTCOLS*24
   8522 00ED63 34 08                        	.WORD	TEXTCOLS*25
   8523 00ED65 88 08                        	.WORD	TEXTCOLS*26
   8524 00ED67 DC 08                        	.WORD	TEXTCOLS*27
   8525 00ED69 30 09                        	.WORD	TEXTCOLS*28
   8526 00ED6B 84 09                        	.WORD	TEXTCOLS*29
   8527 00ED6D D8 09                        	.WORD	TEXTCOLS*30
                                           
   8529 00ED6F                             TaskStartTbl:
   8530 00ED6F 00 00                        	.WORD	0			; CS
   8531 00ED71 00 00                        	.WORD	0
   8532 00ED73 00 00                        	.WORD	0			; DS
   8533 00ED75 00 00                        	.WORD	0
   8534 00ED77 63 E0                        	.WORD	Task0		; PC
   8535 00ED79 00                           	.BYTE	Task0>>16
   8536 00ED7A 00 00                        	.WORD	0			; acc
   8537 00ED7C 00 00                        	.WORD	0
   8538 00ED7E 00 00                        	.WORD	0			; x
   8539 00ED80 00 00                        	.WORD	0
   8540 00ED82 00 00                        	.WORD	0			; y
   8541 00ED84 00 00                        	.WORD	0
   8542 00ED86 FF 3F                        	.WORD	$3FFF		; sp
   8543 00ED88 00 00                        	.WORD	0
   8544 00ED8A 04                           	.BYTE	4			; SR
   8545 00ED8B 01                           	.BYTE	1			; SR extension
   8546 00ED8C 00                           	.BYTE	0			; DB
   8547 00ED8D 00 00                        	.WORD	0			; DPR
                                           
   8549 00ED8F 00 00                        	.WORD	0			; CS
   8550 00ED91 00 00                        	.WORD	0
   8551 00ED93 00 00                        	.WORD	0			; DS
   8552 00ED95 00 00                        	.WORD	0
   8553 00ED97 7B EC                        	.WORD	Task1		; PC
   8554 00ED99 00                           	.BYTE	Task1>>16
   8555 00ED9A 00 00                        	.WORD	0			; acc
   8556 00ED9C 00 00                        	.WORD	0
   8557 00ED9E 00 00                        	.WORD	0			; x
   8558 00EDA0 00 00                        	.WORD	0
   8559 00EDA2 00 00                        	.WORD	0			; y
   8560 00EDA4 00 00                        	.WORD	0
   8561 00EDA6 FF 3B                        	.WORD	$3BFF		; sp
   8562 00EDA8 00 00                        	.WORD	0
   8563 00EDAA 04                           	.BYTE	4			; SR
   8564 00EDAB 01                           	.BYTE	1			; SR extension
   8565 00EDAC 00                           	.BYTE	0			; DB
   8566 00EDAD 00 00                        	.WORD	0			; DPR
                                           
   8568 00EDAF 00 00                        	.WORD	0			; CS
   8569 00EDB1 00 00                        	.WORD	0
   8570 00EDB3 00 00                        	.WORD	0			; DS
   8571 00EDB5 00 00                        	.WORD	0
   8572 00EDB7 C0 EC                        	.WORD	Task2		; PC
   8573 00EDB9 00                           	.BYTE	Task2>>16
   8574 00EDBA 00 00                        	.WORD	0			; acc
   8575 00EDBC 00 00                        	.WORD	0
   8576 00EDBE 00 00                        	.WORD	0			; x
   8577 00EDC0 00 00                        	.WORD	0
   8578 00EDC2 00 00                        	.WORD	0			; y
   8579 00EDC4 00 00                        	.WORD	0
   8580 00EDC6 FF 37                        	.WORD	$37FF		; sp
   8581 00EDC8 00 00                        	.WORD	0
   8582 00EDCA 20                           	.BYTE	$20			; SR			; eight bit mem
   8583 00EDCB 02                           	.BYTE	2			; SR extension
   8584 00EDCC 00                           	.BYTE	0			; DB
   8585 00EDCD 00 00                        	.WORD	0			; DPR
                                           
   8587 00EDCF 00 00                        	.WORD	0			; CS
   8588 00EDD1 00 00                        	.WORD	0
   8589 00EDD3 00 00                        	.WORD	0			; DS
   8590 00EDD5 00 00                        	.WORD	0
   8591 00EDD7 9B EC                        	.WORD	IRQTask		; PC
   8592 00EDD9 00                           	.BYTE	IRQTask>>16
   8593 00EDDA 00 00                        	.WORD	0			; acc
   8594 00EDDC 00 00                        	.WORD	0
   8595 00EDDE 00 00                        	.WORD	0			; x
   8596 00EDE0 00 00                        	.WORD	0
   8597 00EDE2 00 00                        	.WORD	0			; y
   8598 00EDE4 00 00                        	.WORD	0
   8599 00EDE6 FF 33                        	.WORD	$33FF		; sp
   8600 00EDE8 00 00                        	.WORD	0
   8601 00EDEA 24                           	.BYTE	$24			; SR	eight bit acc, mask interrupts
   8602 00EDEB 02                           	.BYTE	2			; SR extension
   8603 00EDEC 00                           	.BYTE	0			; DB
   8604 00EDED 00 00                        	.WORD	0			; DPR
                                           
   8606 00EDEF 00 00                        	.WORD	0			; CS
   8607 00EDF1 00 00                        	.WORD	0
   8608 00EDF3 00 00                        	.WORD	0			; DS
   8609 00EDF5 00 00                        	.WORD	0
   8610 00EDF7 F0 EC                        	.WORD	BrkTask		; PC
   8611 00EDF9 00                           	.BYTE	BrkTask>>16
   8612 00EDFA 00 00                        	.WORD	0			; acc
   8613 00EDFC 00 00                        	.WORD	0
   8614 00EDFE 00 00                        	.WORD	0			; x
   8615 00EE00 00 00                        	.WORD	0
   8616 00EE02 00 00                        	.WORD	0			; y
   8617 00EE04 00 00                        	.WORD	0
   8618 00EE06 FF 2F                        	.WORD	$2FFF		; sp
   8619 00EE08 00 00                        	.WORD	0
   8620 00EE0A 00                           	.BYTE	0			; SR
   8621 00EE0B 01                           	.BYTE	1			; SR extension
   8622 00EE0C 00                           	.BYTE	0			; DB
   8623 00EE0D 00 00                        	.WORD	0			; DPR
                                           
                                           	; task #5
                                           	; DS is placed at $10000
   8627 00EE0F 00 00                        	.WORD	0			; CS
   8628 00EE11 00 00                        	.WORD	0
   8629 00EE13 00 00                        	.WORD	0			; DS
   8630 00EE15 01 00                        	.WORD	1
   8631 00EE17 CC D8                        	.WORD	InvadersTask	; PC
   8632 00EE19 00                           	.BYTE	InvadersTask>>16
   8633 00EE1A 00 00                        	.WORD	0			; acc
   8634 00EE1C 00 00                        	.WORD	0
   8635 00EE1E 00 00                        	.WORD	0			; x
   8636 00EE20 00 00                        	.WORD	0
   8637 00EE22 00 00                        	.WORD	0			; y
   8638 00EE24 00 00                        	.WORD	0
   8639 00EE26 FF 2B                        	.WORD	$2BFF		; sp
   8640 00EE28 00 00                        	.WORD	0
   8641 00EE2A 00                           	.BYTE	0			; SR
   8642 00EE2B 01                           	.BYTE	1			; SR extension
   8643 00EE2C 00                           	.BYTE	0			; DB
   8644 00EE2D 00 00                        	.WORD	0			; DPR
                                           
                                           	cpu		FT832
                                           	MEM		32
                                           	NDX		32
   8649 00EE2F A9 78 56 34 12               	LDA		#$12345678
   8650 00EE34 A2 32 54 76 98               	LDX		#$98765432
   8651 00EE39 42 8B 42 97 23               	STA.B	{$23},Y
   8652 00EE3E 42 BB 42 BC 56 55 45 44      	LDY.UH	$44455556,X
                                         
   8653 00EE46 42 1B 42 AB 42 BD 56 55      	LDA.H	CS:$44455556,X
   8653 00EE4E 45 44                      
   8654 00EE50 42 3B 88 88 88 88 42 9B      	LDA.UB	SEG $88888888:$1234,Y
   8654 00EE58 B9 34 12                   
   8655 00EE5B 42 20 00 E0 00 00 00 00      	JSF	    $0000:start
   8655 00EE63 00                         
   8656 00EE64 42 6B                        	RTF
   8657 00EE66 42 A2 02 00                  	TSK		#2
   8658 00EE6A 42 3A                        	TSK
   8659 00EE6C 42 4C 00 00 01 00            	LDT		$10000,X
                                           
   8661 00EE72 FF FF FF FF FF FF FF FF      	.org	$F400
   8661 00EE7A FF FF FF FF FF FF FF FF    
   8661 00EE82 FF FF FF FF FF FF FF FF    
   8661 00EE8A FF FF FF FF FF FF FF FF    
   8661 00EE92 FF FF FF FF FF FF FF FF    
   8661 00EE9A FF FF FF FF FF FF FF FF    
   8661 00EEA2 FF FF FF FF FF FF FF FF    
   8661 00EEAA FF FF FF FF FF FF FF FF    
   8661 00EEB2 FF FF FF FF FF FF FF FF    
   8661 00EEBA FF FF FF FF FF FF FF FF    
   8661 00EEC2 FF FF FF FF FF FF FF FF    
   8661 00EECA FF FF FF FF FF FF FF FF    
   8661 00EED2 FF FF FF FF FF FF FF FF    
   8661 00EEDA FF FF FF FF FF FF FF FF    
   8661 00EEE2 FF FF FF FF FF FF FF FF    
   8661 00EEEA FF FF FF FF FF FF FF FF    
   8661 00EEF2 FF FF FF FF FF FF FF FF    
   8661 00EEFA FF FF FF FF FF FF FF FF    
   8661 00EF02 FF FF FF FF FF FF FF FF    
   8661 00EF0A FF FF FF FF FF FF FF FF    
   8661 00EF12 FF FF FF FF FF FF FF FF    
   8661 00EF1A FF FF FF FF FF FF FF FF    
   8661 00EF22 FF FF FF FF FF FF FF FF    
   8661 00EF2A FF FF FF FF FF FF FF FF    
   8661 00EF32 FF FF FF FF FF FF FF FF    
   8661 00EF3A FF FF FF FF FF FF FF FF    
   8661 00EF42 FF FF FF FF FF FF FF FF    
   8661 00EF4A FF FF FF FF FF FF FF FF    
   8661 00EF52 FF FF FF FF FF FF FF FF    
   8661 00EF5A FF FF FF FF FF FF FF FF    
   8661 00EF62 FF FF FF FF FF FF FF FF    
   8661 00EF6A FF FF FF FF FF FF FF FF    
   8661 00EF72 FF FF FF FF FF FF FF FF    
   8661 00EF7A FF FF FF FF FF FF FF FF    
   8661 00EF82 FF FF FF FF FF FF FF FF    
   8661 00EF8A FF FF FF FF FF FF FF FF    
   8661 00EF92 FF FF FF FF FF FF FF FF    
   8661 00EF9A FF FF FF FF FF FF FF FF    
   8661 00EFA2 FF FF FF FF FF FF FF FF    
   8661 00EFAA FF FF FF FF FF FF FF FF    
   8661 00EFB2 FF FF FF FF FF FF FF FF    
   8661 00EFBA FF FF FF FF FF FF FF FF    
   8661 00EFC2 FF FF FF FF FF FF FF FF    
   8661 00EFCA FF FF FF FF FF FF FF FF    
   8661 00EFD2 FF FF FF FF FF FF FF FF    
   8661 00EFDA FF FF FF FF FF FF FF FF    
   8661 00EFE2 FF FF FF FF FF FF FF FF    
   8661 00EFEA FF FF FF FF FF FF FF FF    
   8661 00EFF2 FF FF FF FF FF FF FF FF    
   8661 00EFFA FF FF FF FF FF FF FF FF    
   8661 00F002 FF FF FF FF FF FF FF FF    
   8661 00F00A FF FF FF FF FF FF FF FF    
   8661 00F012 FF FF FF FF FF FF FF FF    
   8661 00F01A FF FF FF FF FF FF FF FF    
   8661 00F022 FF FF FF FF FF FF FF FF    
   8661 00F02A FF FF FF FF FF FF FF FF    
   8661 00F032 FF FF FF FF FF FF FF FF    
   8661 00F03A FF FF FF FF FF FF FF FF    
   8661 00F042 FF FF FF FF FF FF FF FF    
   8661 00F04A FF FF FF FF FF FF FF FF    
   8661 00F052 FF FF FF FF FF FF FF FF    
   8661 00F05A FF FF FF FF FF FF FF FF    
   8661 00F062 FF FF FF FF FF FF FF FF    
   8661 00F06A FF FF FF FF FF FF FF FF    
   8661 00F072 FF FF FF FF FF FF FF FF    
   8661 00F07A FF FF FF FF FF FF FF FF    
   8661 00F082 FF FF FF FF FF FF FF FF    
   8661 00F08A FF FF FF FF FF FF FF FF    
   8661 00F092 FF FF FF FF FF FF FF FF    
   8661 00F09A FF FF FF FF FF FF FF FF    
   8661 00F0A2 FF FF FF FF FF FF FF FF    
   8661 00F0AA FF FF FF FF FF FF FF FF    
   8661 00F0B2 FF FF FF FF FF FF FF FF    
   8661 00F0BA FF FF FF FF FF FF FF FF    
   8661 00F0C2 FF FF FF FF FF FF FF FF    
   8661 00F0CA FF FF FF FF FF FF FF FF    
   8661 00F0D2 FF FF FF FF FF FF FF FF    
   8661 00F0DA FF FF FF FF FF FF FF FF    
   8661 00F0E2 FF FF FF FF FF FF FF FF    
   8661 00F0EA FF FF FF FF FF FF FF FF    
   8661 00F0F2 FF FF FF FF FF FF FF FF    
   8661 00F0FA FF FF FF FF FF FF FF FF    
   8661 00F102 FF FF FF FF FF FF FF FF    
   8661 00F10A FF FF FF FF FF FF FF FF    
   8661 00F112 FF FF FF FF FF FF FF FF    
   8661 00F11A FF FF FF FF FF FF FF FF    
   8661 00F122 FF FF FF FF FF FF FF FF    
   8661 00F12A FF FF FF FF FF FF FF FF    
   8661 00F132 FF FF FF FF FF FF FF FF    
   8661 00F13A FF FF FF FF FF FF FF FF    
   8661 00F142 FF FF FF FF FF FF FF FF    
   8661 00F14A FF FF FF FF FF FF FF FF    
   8661 00F152 FF FF FF FF FF FF FF FF    
   8661 00F15A FF FF FF FF FF FF FF FF    
   8661 00F162 FF FF FF FF FF FF FF FF    
   8661 00F16A FF FF FF FF FF FF FF FF    
   8661 00F172 FF FF FF FF FF FF FF FF    
   8661 00F17A FF FF FF FF FF FF FF FF    
   8661 00F182 FF FF FF FF FF FF FF FF    
   8661 00F18A FF FF FF FF FF FF FF FF    
   8661 00F192 FF FF FF FF FF FF FF FF    
   8661 00F19A FF FF FF FF FF FF FF FF    
   8661 00F1A2 FF FF FF FF FF FF FF FF    
   8661 00F1AA FF FF FF FF FF FF FF FF    
   8661 00F1B2 FF FF FF FF FF FF FF FF    
   8661 00F1BA FF FF FF FF FF FF FF FF    
   8661 00F1C2 FF FF FF FF FF FF FF FF    
   8661 00F1CA FF FF FF FF FF FF FF FF    
   8661 00F1D2 FF FF FF FF FF FF FF FF    
   8661 00F1DA FF FF FF FF FF FF FF FF    
   8661 00F1E2 FF FF FF FF FF FF FF FF    
   8661 00F1EA FF FF FF FF FF FF FF FF    
   8661 00F1F2 FF FF FF FF FF FF FF FF    
   8661 00F1FA FF FF FF FF FF FF FF FF    
   8661 00F202 FF FF FF FF FF FF FF FF    
   8661 00F20A FF FF FF FF FF FF FF FF    
   8661 00F212 FF FF FF FF FF FF FF FF    
   8661 00F21A FF FF FF FF FF FF FF FF    
   8661 00F222 FF FF FF FF FF FF FF FF    
   8661 00F22A FF FF FF FF FF FF FF FF    
   8661 00F232 FF FF FF FF FF FF FF FF    
   8661 00F23A FF FF FF FF FF FF FF FF    
   8661 00F242 FF FF FF FF FF FF FF FF    
   8661 00F24A FF FF FF FF FF FF FF FF    
   8661 00F252 FF FF FF FF FF FF FF FF    
   8661 00F25A FF FF FF FF FF FF FF FF    
   8661 00F262 FF FF FF FF FF FF FF FF    
   8661 00F26A FF FF FF FF FF FF FF FF    
   8661 00F272 FF FF FF FF FF FF FF FF    
   8661 00F27A FF FF FF FF FF FF FF FF    
   8661 00F282 FF FF FF FF FF FF FF FF    
   8661 00F28A FF FF FF FF FF FF FF FF    
   8661 00F292 FF FF FF FF FF FF FF FF    
   8661 00F29A FF FF FF FF FF FF FF FF    
   8661 00F2A2 FF FF FF FF FF FF FF FF    
   8661 00F2AA FF FF FF FF FF FF FF FF    
   8661 00F2B2 FF FF FF FF FF FF FF FF    
   8661 00F2BA FF FF FF FF FF FF FF FF    
   8661 00F2C2 FF FF FF FF FF FF FF FF    
   8661 00F2CA FF FF FF FF FF FF FF FF    
   8661 00F2D2 FF FF FF FF FF FF FF FF    
   8661 00F2DA FF FF FF FF FF FF FF FF    
   8661 00F2E2 FF FF FF FF FF FF FF FF    
   8661 00F2EA FF FF FF FF FF FF FF FF    
   8661 00F2F2 FF FF FF FF FF FF FF FF    
   8661 00F2FA FF FF FF FF FF FF FF FF    
   8661 00F302 FF FF FF FF FF FF FF FF    
   8661 00F30A FF FF FF FF FF FF FF FF    
   8661 00F312 FF FF FF FF FF FF FF FF    
   8661 00F31A FF FF FF FF FF FF FF FF    
   8661 00F322 FF FF FF FF FF FF FF FF    
   8661 00F32A FF FF FF FF FF FF FF FF    
   8661 00F332 FF FF FF FF FF FF FF FF    
   8661 00F33A FF FF FF FF FF FF FF FF    
   8661 00F342 FF FF FF FF FF FF FF FF    
   8661 00F34A FF FF FF FF FF FF FF FF    
   8661 00F352 FF FF FF FF FF FF FF FF    
   8661 00F35A FF FF FF FF FF FF FF FF    
   8661 00F362 FF FF FF FF FF FF FF FF    
   8661 00F36A FF FF FF FF FF FF FF FF    
   8661 00F372 FF FF FF FF FF FF FF FF    
   8661 00F37A FF FF FF FF FF FF FF FF    
   8661 00F382 FF FF FF FF FF FF FF FF    
   8661 00F38A FF FF FF FF FF FF FF FF    
   8661 00F392 FF FF FF FF FF FF FF FF    
   8661 00F39A FF FF FF FF FF FF FF FF    
   8661 00F3A2 FF FF FF FF FF FF FF FF    
   8661 00F3AA FF FF FF FF FF FF FF FF    
   8661 00F3B2 FF FF FF FF FF FF FF FF    
   8661 00F3BA FF FF FF FF FF FF FF FF    
   8661 00F3C2 FF FF FF FF FF FF FF FF    
   8661 00F3CA FF FF FF FF FF FF FF FF    
   8661 00F3D2 FF FF FF FF FF FF FF FF    
   8661 00F3DA FF FF FF FF FF FF FF FF    
   8661 00F3E2 FF FF FF FF FF FF FF FF    
   8661 00F3EA FF FF FF FF FF FF FF FF    
   8661 00F3F2 FF FF FF FF FF FF FF FF    
   8661 00F3FA FF FF FF FF FF FF          
   8662 00F400 4C 44 EC                     	JMP		SuperGetch
   8663 00F403 4C 63 EC                     	JMP		warm_start
   8664 00F406 4C 55 EC                     	JMP		SuperPutch
   8665 00F409 4C B7 E2                     	JMP		BIOSInput
                                           
   8667 00F40C FF FF FF FF FF FF FF FF      	.org 	$FFD6
   8667 00F414 FF FF FF FF FF FF FF FF    
   8667 00F41C FF FF FF FF FF FF FF FF    
   8667 00F424 FF FF FF FF FF FF FF FF    
   8667 00F42C FF FF FF FF FF FF FF FF    
   8667 00F434 FF FF FF FF FF FF FF FF    
   8667 00F43C FF FF FF FF FF FF FF FF    
   8667 00F444 FF FF FF FF FF FF FF FF    
   8667 00F44C FF FF FF FF FF FF FF FF    
   8667 00F454 FF FF FF FF FF FF FF FF    
   8667 00F45C FF FF FF FF FF FF FF FF    
   8667 00F464 FF FF FF FF FF FF FF FF    
   8667 00F46C FF FF FF FF FF FF FF FF    
   8667 00F474 FF FF FF FF FF FF FF FF    
   8667 00F47C FF FF FF FF FF FF FF FF    
   8667 00F484 FF FF FF FF FF FF FF FF    
   8667 00F48C FF FF FF FF FF FF FF FF    
   8667 00F494 FF FF FF FF FF FF FF FF    
   8667 00F49C FF FF FF FF FF FF FF FF    
   8667 00F4A4 FF FF FF FF FF FF FF FF    
   8667 00F4AC FF FF FF FF FF FF FF FF    
   8667 00F4B4 FF FF FF FF FF FF FF FF    
   8667 00F4BC FF FF FF FF FF FF FF FF    
   8667 00F4C4 FF FF FF FF FF FF FF FF    
   8667 00F4CC FF FF FF FF FF FF FF FF    
   8667 00F4D4 FF FF FF FF FF FF FF FF    
   8667 00F4DC FF FF FF FF FF FF FF FF    
   8667 00F4E4 FF FF FF FF FF FF FF FF    
   8667 00F4EC FF FF FF FF FF FF FF FF    
   8667 00F4F4 FF FF FF FF FF FF FF FF    
   8667 00F4FC FF FF FF FF FF FF FF FF    
   8667 00F504 FF FF FF FF FF FF FF FF    
   8667 00F50C FF FF FF FF FF FF FF FF    
   8667 00F514 FF FF FF FF FF FF FF FF    
   8667 00F51C FF FF FF FF FF FF FF FF    
   8667 00F524 FF FF FF FF FF FF FF FF    
   8667 00F52C FF FF FF FF FF FF FF FF    
   8667 00F534 FF FF FF FF FF FF FF FF    
   8667 00F53C FF FF FF FF FF FF FF FF    
   8667 00F544 FF FF FF FF FF FF FF FF    
   8667 00F54C FF FF FF FF FF FF FF FF    
   8667 00F554 FF FF FF FF FF FF FF FF    
   8667 00F55C FF FF FF FF FF FF FF FF    
   8667 00F564 FF FF FF FF FF FF FF FF    
   8667 00F56C FF FF FF FF FF FF FF FF    
   8667 00F574 FF FF FF FF FF FF FF FF    
   8667 00F57C FF FF FF FF FF FF FF FF    
   8667 00F584 FF FF FF FF FF FF FF FF    
   8667 00F58C FF FF FF FF FF FF FF FF    
   8667 00F594 FF FF FF FF FF FF FF FF    
   8667 00F59C FF FF FF FF FF FF FF FF    
   8667 00F5A4 FF FF FF FF FF FF FF FF    
   8667 00F5AC FF FF FF FF FF FF FF FF    
   8667 00F5B4 FF FF FF FF FF FF FF FF    
   8667 00F5BC FF FF FF FF FF FF FF FF    
   8667 00F5C4 FF FF FF FF FF FF FF FF    
   8667 00F5CC FF FF FF FF FF FF FF FF    
   8667 00F5D4 FF FF FF FF FF FF FF FF    
   8667 00F5DC FF FF FF FF FF FF FF FF    
   8667 00F5E4 FF FF FF FF FF FF FF FF    
   8667 00F5EC FF FF FF FF FF FF FF FF    
   8667 00F5F4 FF FF FF FF FF FF FF FF    
   8667 00F5FC FF FF FF FF FF FF FF FF    
   8667 00F604 FF FF FF FF FF FF FF FF    
   8667 00F60C FF FF FF FF FF FF FF FF    
   8667 00F614 FF FF FF FF FF FF FF FF    
   8667 00F61C FF FF FF FF FF FF FF FF    
   8667 00F624 FF FF FF FF FF FF FF FF    
   8667 00F62C FF FF FF FF FF FF FF FF    
   8667 00F634 FF FF FF FF FF FF FF FF    
   8667 00F63C FF FF FF FF FF FF FF FF    
   8667 00F644 FF FF FF FF FF FF FF FF    
   8667 00F64C FF FF FF FF FF FF FF FF    
   8667 00F654 FF FF FF FF FF FF FF FF    
   8667 00F65C FF FF FF FF FF FF FF FF    
   8667 00F664 FF FF FF FF FF FF FF FF    
   8667 00F66C FF FF FF FF FF FF FF FF    
   8667 00F674 FF FF FF FF FF FF FF FF    
   8667 00F67C FF FF FF FF FF FF FF FF    
   8667 00F684 FF FF FF FF FF FF FF FF    
   8667 00F68C FF FF FF FF FF FF FF FF    
   8667 00F694 FF FF FF FF FF FF FF FF    
   8667 00F69C FF FF FF FF FF FF FF FF    
   8667 00F6A4 FF FF FF FF FF FF FF FF    
   8667 00F6AC FF FF FF FF FF FF FF FF    
   8667 00F6B4 FF FF FF FF FF FF FF FF    
   8667 00F6BC FF FF FF FF FF FF FF FF    
   8667 00F6C4 FF FF FF FF FF FF FF FF    
   8667 00F6CC FF FF FF FF FF FF FF FF    
   8667 00F6D4 FF FF FF FF FF FF FF FF    
   8667 00F6DC FF FF FF FF FF FF FF FF    
   8667 00F6E4 FF FF FF FF FF FF FF FF    
   8667 00F6EC FF FF FF FF FF FF FF FF    
   8667 00F6F4 FF FF FF FF FF FF FF FF    
   8667 00F6FC FF FF FF FF FF FF FF FF    
   8667 00F704 FF FF FF FF FF FF FF FF    
   8667 00F70C FF FF FF FF FF FF FF FF    
   8667 00F714 FF FF FF FF FF FF FF FF    
   8667 00F71C FF FF FF FF FF FF FF FF    
   8667 00F724 FF FF FF FF FF FF FF FF    
   8667 00F72C FF FF FF FF FF FF FF FF    
   8667 00F734 FF FF FF FF FF FF FF FF    
   8667 00F73C FF FF FF FF FF FF FF FF    
   8667 00F744 FF FF FF FF FF FF FF FF    
   8667 00F74C FF FF FF FF FF FF FF FF    
   8667 00F754 FF FF FF FF FF FF FF FF    
   8667 00F75C FF FF FF FF FF FF FF FF    
   8667 00F764 FF FF FF FF FF FF FF FF    
   8667 00F76C FF FF FF FF FF FF FF FF    
   8667 00F774 FF FF FF FF FF FF FF FF    
   8667 00F77C FF FF FF FF FF FF FF FF    
   8667 00F784 FF FF FF FF FF FF FF FF    
   8667 00F78C FF FF FF FF FF FF FF FF    
   8667 00F794 FF FF FF FF FF FF FF FF    
   8667 00F79C FF FF FF FF FF FF FF FF    
   8667 00F7A4 FF FF FF FF FF FF FF FF    
   8667 00F7AC FF FF FF FF FF FF FF FF    
   8667 00F7B4 FF FF FF FF FF FF FF FF    
   8667 00F7BC FF FF FF FF FF FF FF FF    
   8667 00F7C4 FF FF FF FF FF FF FF FF    
   8667 00F7CC FF FF FF FF FF FF FF FF    
   8667 00F7D4 FF FF FF FF FF FF FF FF    
   8667 00F7DC FF FF FF FF FF FF FF FF    
   8667 00F7E4 FF FF FF FF FF FF FF FF    
   8667 00F7EC FF FF FF FF FF FF FF FF    
   8667 00F7F4 FF FF FF FF FF FF FF FF    
   8667 00F7FC FF FF FF FF FF FF FF FF    
   8667 00F804 FF FF FF FF FF FF FF FF    
   8667 00F80C FF FF FF FF FF FF FF FF    
   8667 00F814 FF FF FF FF FF FF FF FF    
   8667 00F81C FF FF FF FF FF FF FF FF    
   8667 00F824 FF FF FF FF FF FF FF FF    
   8667 00F82C FF FF FF FF FF FF FF FF    
   8667 00F834 FF FF FF FF FF FF FF FF    
   8667 00F83C FF FF FF FF FF FF FF FF    
   8667 00F844 FF FF FF FF FF FF FF FF    
   8667 00F84C FF FF FF FF FF FF FF FF    
   8667 00F854 FF FF FF FF FF FF FF FF    
   8667 00F85C FF FF FF FF FF FF FF FF    
   8667 00F864 FF FF FF FF FF FF FF FF    
   8667 00F86C FF FF FF FF FF FF FF FF    
   8667 00F874 FF FF FF FF FF FF FF FF    
   8667 00F87C FF FF FF FF FF FF FF FF    
   8667 00F884 FF FF FF FF FF FF FF FF    
   8667 00F88C FF FF FF FF FF FF FF FF    
   8667 00F894 FF FF FF FF FF FF FF FF    
   8667 00F89C FF FF FF FF FF FF FF FF    
   8667 00F8A4 FF FF FF FF FF FF FF FF    
   8667 00F8AC FF FF FF FF FF FF FF FF    
   8667 00F8B4 FF FF FF FF FF FF FF FF    
   8667 00F8BC FF FF FF FF FF FF FF FF    
   8667 00F8C4 FF FF FF FF FF FF FF FF    
   8667 00F8CC FF FF FF FF FF FF FF FF    
   8667 00F8D4 FF FF FF FF FF FF FF FF    
   8667 00F8DC FF FF FF FF FF FF FF FF    
   8667 00F8E4 FF FF FF FF FF FF FF FF    
   8667 00F8EC FF FF FF FF FF FF FF FF    
   8667 00F8F4 FF FF FF FF FF FF FF FF    
   8667 00F8FC FF FF FF FF FF FF FF FF    
   8667 00F904 FF FF FF FF FF FF FF FF    
   8667 00F90C FF FF FF FF FF FF FF FF    
   8667 00F914 FF FF FF FF FF FF FF FF    
   8667 00F91C FF FF FF FF FF FF FF FF    
   8667 00F924 FF FF FF FF FF FF FF FF    
   8667 00F92C FF FF FF FF FF FF FF FF    
   8667 00F934 FF FF FF FF FF FF FF FF    
   8667 00F93C FF FF FF FF FF FF FF FF    
   8667 00F944 FF FF FF FF FF FF FF FF    
   8667 00F94C FF FF FF FF FF FF FF FF    
   8667 00F954 FF FF FF FF FF FF FF FF    
   8667 00F95C FF FF FF FF FF FF FF FF    
   8667 00F964 FF FF FF FF FF FF FF FF    
   8667 00F96C FF FF FF FF FF FF FF FF    
   8667 00F974 FF FF FF FF FF FF FF FF    
   8667 00F97C FF FF FF FF FF FF FF FF    
   8667 00F984 FF FF FF FF FF FF FF FF    
   8667 00F98C FF FF FF FF FF FF FF FF    
   8667 00F994 FF FF FF FF FF FF FF FF    
   8667 00F99C FF FF FF FF FF FF FF FF    
   8667 00F9A4 FF FF FF FF FF FF FF FF    
   8667 00F9AC FF FF FF FF FF FF FF FF    
   8667 00F9B4 FF FF FF FF FF FF FF FF    
   8667 00F9BC FF FF FF FF FF FF FF FF    
   8667 00F9C4 FF FF FF FF FF FF FF FF    
   8667 00F9CC FF FF FF FF FF FF FF FF    
   8667 00F9D4 FF FF FF FF FF FF FF FF    
   8667 00F9DC FF FF FF FF FF FF FF FF    
   8667 00F9E4 FF FF FF FF FF FF FF FF    
   8667 00F9EC FF FF FF FF FF FF FF FF    
   8667 00F9F4 FF FF FF FF FF FF FF FF    
   8667 00F9FC FF FF FF FF FF FF FF FF    
   8667 00FA04 FF FF FF FF FF FF FF FF    
   8667 00FA0C FF FF FF FF FF FF FF FF    
   8667 00FA14 FF FF FF FF FF FF FF FF    
   8667 00FA1C FF FF FF FF FF FF FF FF    
   8667 00FA24 FF FF FF FF FF FF FF FF    
   8667 00FA2C FF FF FF FF FF FF FF FF    
   8667 00FA34 FF FF FF FF FF FF FF FF    
   8667 00FA3C FF FF FF FF FF FF FF FF    
   8667 00FA44 FF FF FF FF FF FF FF FF    
   8667 00FA4C FF FF FF FF FF FF FF FF    
   8667 00FA54 FF FF FF FF FF FF FF FF    
   8667 00FA5C FF FF FF FF FF FF FF FF    
   8667 00FA64 FF FF FF FF FF FF FF FF    
   8667 00FA6C FF FF FF FF FF FF FF FF    
   8667 00FA74 FF FF FF FF FF FF FF FF    
   8667 00FA7C FF FF FF FF FF FF FF FF    
   8667 00FA84 FF FF FF FF FF FF FF FF    
   8667 00FA8C FF FF FF FF FF FF FF FF    
   8667 00FA94 FF FF FF FF FF FF FF FF    
   8667 00FA9C FF FF FF FF FF FF FF FF    
   8667 00FAA4 FF FF FF FF FF FF FF FF    
   8667 00FAAC FF FF FF FF FF FF FF FF    
   8667 00FAB4 FF FF FF FF FF FF FF FF    
   8667 00FABC FF FF FF FF FF FF FF FF    
   8667 00FAC4 FF FF FF FF FF FF FF FF    
   8667 00FACC FF FF FF FF FF FF FF FF    
   8667 00FAD4 FF FF FF FF FF FF FF FF    
   8667 00FADC FF FF FF FF FF FF FF FF    
   8667 00FAE4 FF FF FF FF FF FF FF FF    
   8667 00FAEC FF FF FF FF FF FF FF FF    
   8667 00FAF4 FF FF FF FF FF FF FF FF    
   8667 00FAFC FF FF FF FF FF FF FF FF    
   8667 00FB04 FF FF FF FF FF FF FF FF    
   8667 00FB0C FF FF FF FF FF FF FF FF    
   8667 00FB14 FF FF FF FF FF FF FF FF    
   8667 00FB1C FF FF FF FF FF FF FF FF    
   8667 00FB24 FF FF FF FF FF FF FF FF    
   8667 00FB2C FF FF FF FF FF FF FF FF    
   8667 00FB34 FF FF FF FF FF FF FF FF    
   8667 00FB3C FF FF FF FF FF FF FF FF    
   8667 00FB44 FF FF FF FF FF FF FF FF    
   8667 00FB4C FF FF FF FF FF FF FF FF    
   8667 00FB54 FF FF FF FF FF FF FF FF    
   8667 00FB5C FF FF FF FF FF FF FF FF    
   8667 00FB64 FF FF FF FF FF FF FF FF    
   8667 00FB6C FF FF FF FF FF FF FF FF    
   8667 00FB74 FF FF FF FF FF FF FF FF    
   8667 00FB7C FF FF FF FF FF FF FF FF    
   8667 00FB84 FF FF FF FF FF FF FF FF    
   8667 00FB8C FF FF FF FF FF FF FF FF    
   8667 00FB94 FF FF FF FF FF FF FF FF    
   8667 00FB9C FF FF FF FF FF FF FF FF    
   8667 00FBA4 FF FF FF FF FF FF FF FF    
   8667 00FBAC FF FF FF FF FF FF FF FF    
   8667 00FBB4 FF FF FF FF FF FF FF FF    
   8667 00FBBC FF FF FF FF FF FF FF FF    
   8667 00FBC4 FF FF FF FF FF FF FF FF    
   8667 00FBCC FF FF FF FF FF FF FF FF    
   8667 00FBD4 FF FF FF FF FF FF FF FF    
   8667 00FBDC FF FF FF FF FF FF FF FF    
   8667 00FBE4 FF FF FF FF FF FF FF FF    
   8667 00FBEC FF FF FF FF FF FF FF FF    
   8667 00FBF4 FF FF FF FF FF FF FF FF    
   8667 00FBFC FF FF FF FF FF FF FF FF    
   8667 00FC04 FF FF FF FF FF FF FF FF    
   8667 00FC0C FF FF FF FF FF FF FF FF    
   8667 00FC14 FF FF FF FF FF FF FF FF    
   8667 00FC1C FF FF FF FF FF FF FF FF    
   8667 00FC24 FF FF FF FF FF FF FF FF    
   8667 00FC2C FF FF FF FF FF FF FF FF    
   8667 00FC34 FF FF FF FF FF FF FF FF    
   8667 00FC3C FF FF FF FF FF FF FF FF    
   8667 00FC44 FF FF FF FF FF FF FF FF    
   8667 00FC4C FF FF FF FF FF FF FF FF    
   8667 00FC54 FF FF FF FF FF FF FF FF    
   8667 00FC5C FF FF FF FF FF FF FF FF    
   8667 00FC64 FF FF FF FF FF FF FF FF    
   8667 00FC6C FF FF FF FF FF FF FF FF    
   8667 00FC74 FF FF FF FF FF FF FF FF    
   8667 00FC7C FF FF FF FF FF FF FF FF    
   8667 00FC84 FF FF FF FF FF FF FF FF    
   8667 00FC8C FF FF FF FF FF FF FF FF    
   8667 00FC94 FF FF FF FF FF FF FF FF    
   8667 00FC9C FF FF FF FF FF FF FF FF    
   8667 00FCA4 FF FF FF FF FF FF FF FF    
   8667 00FCAC FF FF FF FF FF FF FF FF    
   8667 00FCB4 FF FF FF FF FF FF FF FF    
   8667 00FCBC FF FF FF FF FF FF FF FF    
   8667 00FCC4 FF FF FF FF FF FF FF FF    
   8667 00FCCC FF FF FF FF FF FF FF FF    
   8667 00FCD4 FF FF FF FF FF FF FF FF    
   8667 00FCDC FF FF FF FF FF FF FF FF    
   8667 00FCE4 FF FF FF FF FF FF FF FF    
   8667 00FCEC FF FF FF FF FF FF FF FF    
   8667 00FCF4 FF FF FF FF FF FF FF FF    
   8667 00FCFC FF FF FF FF FF FF FF FF    
   8667 00FD04 FF FF FF FF FF FF FF FF    
   8667 00FD0C FF FF FF FF FF FF FF FF    
   8667 00FD14 FF FF FF FF FF FF FF FF    
   8667 00FD1C FF FF FF FF FF FF FF FF    
   8667 00FD24 FF FF FF FF FF FF FF FF    
   8667 00FD2C FF FF FF FF FF FF FF FF    
   8667 00FD34 FF FF FF FF FF FF FF FF    
   8667 00FD3C FF FF FF FF FF FF FF FF    
   8667 00FD44 FF FF FF FF FF FF FF FF    
   8667 00FD4C FF FF FF FF FF FF FF FF    
   8667 00FD54 FF FF FF FF FF FF FF FF    
   8667 00FD5C FF FF FF FF FF FF FF FF    
   8667 00FD64 FF FF FF FF FF FF FF FF    
   8667 00FD6C FF FF FF FF FF FF FF FF    
   8667 00FD74 FF FF FF FF FF FF FF FF    
   8667 00FD7C FF FF FF FF FF FF FF FF    
   8667 00FD84 FF FF FF FF FF FF FF FF    
   8667 00FD8C FF FF FF FF FF FF FF FF    
   8667 00FD94 FF FF FF FF FF FF FF FF    
   8667 00FD9C FF FF FF FF FF FF FF FF    
   8667 00FDA4 FF FF FF FF FF FF FF FF    
   8667 00FDAC FF FF FF FF FF FF FF FF    
   8667 00FDB4 FF FF FF FF FF FF FF FF    
   8667 00FDBC FF FF FF FF FF FF FF FF    
   8667 00FDC4 FF FF FF FF FF FF FF FF    
   8667 00FDCC FF FF FF FF FF FF FF FF    
   8667 00FDD4 FF FF FF FF FF FF FF FF    
   8667 00FDDC FF FF FF FF FF FF FF FF    
   8667 00FDE4 FF FF FF FF FF FF FF FF    
   8667 00FDEC FF FF FF FF FF FF FF FF    
   8667 00FDF4 FF FF FF FF FF FF FF FF    
   8667 00FDFC FF FF FF FF FF FF FF FF    
   8667 00FE04 FF FF FF FF FF FF FF FF    
   8667 00FE0C FF FF FF FF FF FF FF FF    
   8667 00FE14 FF FF FF FF FF FF FF FF    
   8667 00FE1C FF FF FF FF FF FF FF FF    
   8667 00FE24 FF FF FF FF FF FF FF FF    
   8667 00FE2C FF FF FF FF FF FF FF FF    
   8667 00FE34 FF FF FF FF FF FF FF FF    
   8667 00FE3C FF FF FF FF FF FF FF FF    
   8667 00FE44 FF FF FF FF FF FF FF FF    
   8667 00FE4C FF FF FF FF FF FF FF FF    
   8667 00FE54 FF FF FF FF FF FF FF FF    
   8667 00FE5C FF FF FF FF FF FF FF FF    
   8667 00FE64 FF FF FF FF FF FF FF FF    
   8667 00FE6C FF FF FF FF FF FF FF FF    
   8667 00FE74 FF FF FF FF FF FF FF FF    
   8667 00FE7C FF FF FF FF FF FF FF FF    
   8667 00FE84 FF FF FF FF FF FF FF FF    
   8667 00FE8C FF FF FF FF FF FF FF FF    
   8667 00FE94 FF FF FF FF FF FF FF FF    
   8667 00FE9C FF FF FF FF FF FF FF FF    
   8667 00FEA4 FF FF FF FF FF FF FF FF    
   8667 00FEAC FF FF FF FF FF FF FF FF    
   8667 00FEB4 FF FF FF FF FF FF FF FF    
   8667 00FEBC FF FF FF FF FF FF FF FF    
   8667 00FEC4 FF FF FF FF FF FF FF FF    
   8667 00FECC FF FF FF FF FF FF FF FF    
   8667 00FED4 FF FF FF FF FF FF FF FF    
   8667 00FEDC FF FF FF FF FF FF FF FF    
   8667 00FEE4 FF FF FF FF FF FF FF FF    
   8667 00FEEC FF FF FF FF FF FF FF FF    
   8667 00FEF4 FF FF FF FF FF FF FF FF    
   8667 00FEFC FF FF FF FF FF FF FF FF    
   8667 00FF04 FF FF FF FF FF FF FF FF    
   8667 00FF0C FF FF FF FF FF FF FF FF    
   8667 00FF14 FF FF FF FF FF FF FF FF    
   8667 00FF1C FF FF FF FF FF FF FF FF    
   8667 00FF24 FF FF FF FF FF FF FF FF    
   8667 00FF2C FF FF FF FF FF FF FF FF    
   8667 00FF34 FF FF FF FF FF FF FF FF    
   8667 00FF3C FF FF FF FF FF FF FF FF    
   8667 00FF44 FF FF FF FF FF FF FF FF    
   8667 00FF4C FF FF FF FF FF FF FF FF    
   8667 00FF54 FF FF FF FF FF FF FF FF    
   8667 00FF5C FF FF FF FF FF FF FF FF    
   8667 00FF64 FF FF FF FF FF FF FF FF    
   8667 00FF6C FF FF FF FF FF FF FF FF    
   8667 00FF74 FF FF FF FF FF FF FF FF    
   8667 00FF7C FF FF FF FF FF FF FF FF    
   8667 00FF84 FF FF FF FF FF FF FF FF    
   8667 00FF8C FF FF FF FF FF FF FF FF    
   8667 00FF94 FF FF FF FF FF FF FF FF    
   8667 00FF9C FF FF FF FF FF FF FF FF    
   8667 00FFA4 FF FF FF FF FF FF FF FF    
   8667 00FFAC FF FF FF FF FF FF FF FF    
   8667 00FFB4 FF FF FF FF FF FF FF FF    
   8667 00FFBC FF FF FF FF FF FF FF FF    
   8667 00FFC4 FF FF FF FF FF FF FF FF    
   8667 00FFCC FF FF FF FF FF FF FF FF    
   8667 00FFD4 FF FF                      
   8668 00FFD6 04 00                        	dw		4			; task #4
                                           
   8670 00FFD8 FF FF FF FF FF FF            	.org	$FFDE
   8671 00FFDE 03 00                        	dw		3			; task #3
                                           
   8673 00FFE0 FF FF FF FF FF FF            	.org 	$FFE6
   8674 00FFE6 FA EC                        	dw		BrkRout
                                           
   8676 00FFE8 FF FF FF FF FF FF            	.org	$FFEE		; IRQ vector
   8677 00FFEE 6E EC                        	dw		IRQRout
                                           
   8679 00FFF0 FF FF FF FF FF FF FF FF      	.org	$FFFC
   8679 00FFF8 FF FF FF FF                
   8680 00FFFC 00 E0                        	dw		$E000
                                           
                                           	.org	$FFFE
   8683 00FFFE 6D EC                        	dw		ByteIRQRout

Checksum=CEAA5CBF

Number of instructions processed: 3432
Number of opcode bytes: 7443
Bytes per instruction: 2.168706 (17.349650 bits)
Clock cycle count: 4916
Clocks per instruction: 1.432401

The above statistics are only estimates.

	The CPI assumes data memory access requires two clock cycles and instruction
	access is single cycle. The actual CPI may be higher if there are memory wait 
	states, or lower if data is found in the cache.
