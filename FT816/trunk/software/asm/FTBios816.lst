Finitron FT832 assembler   version 1.4   Tue Nov 24 12:58:38 2015     Page 1
ftbios816.asm

                                        ; ============================================================================
                                        ; FTBios816.asm
                                        ;        __
                                        ;   \\__/ o\    (C) 2014  Robert Finch, Stratford
                                        ;    \  __ /    All rights reserved.
                                        ;     \/_//     robfinch<remove>@finitron.ca
                                        ;       ||
                                        ;  
                                        ;
                                        ; This source file is free software: you can redistribute it and/or modify 
                                        ; it under the terms of the GNU Lesser General Public License as published 
                                        ; by the Free Software Foundation, either version 3 of the License, or     
                                        ; (at your option) any later version.                                      
                                        ;                                                                          
                                        ; This source file is distributed in the hope that it will be useful,      
                                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                                        ; GNU General Public License for more details.                             
                                        ;                                                                          
                                        ; You should have received a copy of the GNU General Public License        
                                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                                        ;                                                                          
                                        ; ============================================================================
                                        ;
     25 = 000000000000000D                            CR			EQU		13
     26 = 000000000000000A                            LF			EQU		10
     27 = 000000000000001B                            ESC			EQU		$1B
     28 = 0000000000000008                            BS			EQU		8
     29 = 0000000000000003                            CTRLC		EQU		3
                                        
     31 = 0000000000000012                            SC_LSHIFT	EQU		$12
     32 = 0000000000000059                            SC_RSHIFT	EQU		$59
     33 = 00000000000000F0                            SC_KEYUP	EQU		$F0
     34 = 00000000000000E0                            SC_EXTEND	EQU		$E0
     35 = 0000000000000014                            SC_CTRL		EQU		$14
     36 = 0000000000000011                            SC_ALT		EQU		$11
     37 = 0000000000000071                            SC_DEL		EQU		$71		; extend
     38 = 0000000000000058                            SC_LCTRL	EQU		$58
     39 = 0000000000000077                            SC_NUMLOCK	EQU		$77
     40 = 000000000000007E                            SC_SCROLLLOCK	EQU	$7E
     41 = 0000000000000058                            SC_CAPSLOCK	EQU		$58
                                        
     43 = 000000000000001F                            TEXTROWS	EQU		31
     44 = 0000000000000054                            TEXTCOLS	EQU		84
                                        
     46 = 0000000000000004                            TickCount	EQU		$4
     47 = 0000000000000008                            KeyState1	EQU		$8
     48 = 0000000000000009                            KeyState2	EQU		$9
     49 = 000000000000000A                            KeybdLEDs	EQU		$A
     50 = 000000000000000B                            KeybdWaitFlag	EQU	$B
     51 = 000000000000000C                            NumWorkArea	EQU		$C
                                        
                                        ; Range $10 to $1F reserved for hardware counters
     54 = 0000000000000010                            CNT0L		EQU		$10
     55 = 0000000000000011                            CNT0M		EQU		$11
     56 = 0000000000000012                            CNT0H		EQU		$12
     57 = 0000000000000020                            RangeStart	EQU		$20
     58 = 0000000000000024                            RangeEnd	EQU		$24
     59 = 0000000000000030                            CursorX		EQU		$30
     60 = 0000000000000032                            CursorY		EQU		$32
     61 = 0000000000000034                            VideoPos	EQU		$34
     62 = 0000000000000036                            NormAttr	EQU		$36
     63 = 0000000000000038                            StringPos	EQU		$38
     64 = 000000000000003C                            EscState	EQU		$3C
                                        
     66 = 0000000000000080                            reg_cs		EQU		$80
     67 = 00000084                      reg_ds		EQU		reg_cs + 4
     68 = 00000088                      reg_ss		EQU		reg_ds + 4
     69 = 0000008C                      reg_pc		EQU		reg_ss + 4
     70 = 00000090                      reg_a		EQU		reg_pc + 4
     71 = 00000094                      reg_x		EQU		reg_a + 4
     72 = 00000098                      reg_y		EQU		reg_x + 4
     73 = 0000009C                      reg_sp		EQU		reg_y + 4
     74 = 000000A0                      reg_sr		EQU		reg_sp + 4
     75 = 000000A4                      reg_db		EQU		reg_sr + 4
     76 = 000000A8                      reg_dp		EQU		reg_db + 4
     77 = 000000AC                      reg_bl		EQU		reg_dp + 4
                                        
     79 = 0000000000000080                            cs_save		EQU		$80
     80 = 0000000000000084                            ds_save		EQU		$84
     81 = 0000000000000088                            pc_save		EQU		$88
     82 = 000000000000008C                            pb_save		EQU		$8C
     83 = 0000000000000090                            acc_save	EQU		$90
     84 = 0000000000000094                            x_save		EQU		$94
     85 = 0000000000000098                            y_save		EQU		$98
     86 = 000000000000009C                            sp_save		EQU		$9C
     87 = 00000000000000A0                            sr_save		EQU		$A0
     88 = 00000000000000A4                            srx_save	EQU		$A4
     89 = 00000000000000A8                            db_save		EQU		$A8
     90 = 00000000000000AC                            dpr_save	EQU		$AC
                                        
     92 = 00000000000000B8                            running_task	EQU		$B8
                                        
     94 = 00000000000000BA                            keybd_char	EQU		$BA
     95 = 00000000000000BC                            keybd_cmd	EQU		$BC
     96 = 00000000000000BE                            WorkTR		EQU		$BE
     97 = 0000000000000100                            ldtrec		EQU		$100
                                        
     99 = 00000000000003F0                            OutputVec	EQU		$03F0
                                        
    101 = 000000000000B000                            PCS0		EQU		$B000
    102 = 0000B002                      PCS1		EQU		PCS0 + 2
    103 = 0000B004                      PCS2		EQU		PCS1 + 2
    104 = 0000B006                      PCS3		EQU		PCS2 + 2
    105 = 0000B008                      PCS4	    EQU		PCS3 + 2
    106 = 0000B00A                      PCS5		EQU		PCS4 + 2
    107 = 0000B010                      CTR0_LMT	EQU		PCS0 + 16
    108 = 0000B013                      CTR0_CTRL	EQU		CTR0_LMT + 3
    109 = 0000B014                      CTR1_LMT	EQU		CTR0_CTRL + 1
    110 = 0000B017                      CTR1_CTRL	EQU		CTR1_LMT + 3
    111 = 000000000000B01F                            MPU_IRQ_STATUS	EQU		$B01F
                                        
    113 = 0000000000FD0000                            VIDBUF		EQU		$FD0000
    114 = 0000000000FEA000                            VIDREGS		EQU		$FEA000
    115 = 0000000000FEA100                            PRNG		EQU		$FEA100
    116 = 0000000000FEA110                            KEYBD		EQU		$FEA110
    117 = 0000000000FEA200                            FAC1		EQU		$FEA200
                                        
    119 = 0000000000007868                            do_invaders			EQU		$7868
                                        
Finitron FT832 assembler   version 1.4   Tue Nov 24 12:58:38 2015     Page 1
supermon832.asm

                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;	.opt proc65c02,caseinsensitive
                                        	cpu	W65C02
                                        ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                                        ;*                                                                                 *
                                        ;*      SUPERMON 816 MACHINE LANGUAGE MONITOR FOR THE W65C816S MICROPROCESSOR      *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;*      Copyright ©1991-2014 by BCS Technology Limited.  All rights reserved.      *
                                        ;*                                                                                 *
                                        ;* Permission is hereby granted to use, copy, modify and distribute this software, *
                                        ;* provided this copyright notice remains in the source code and  proper  attribu- *
                                        ;* tion is given.  Redistribution, regardless of form, must be at no charge to the *
                                        ;* end  user.  This code or any part thereof, including any derivation, MAY NOT be *
                                        ;* incorporated into any package intended for sale,  unless written permission has * 
                                        ;* been given by the copyright holder.                                             *
                                        ;*                                                                                 *
                                        ;* THERE IS NO WARRANTY OF ANY KIND WITH THIS SOFTWARE.  The user assumes all risk *
                                        ;* in connection with the incorporation of this software into any system.          *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;* Supermon 816 is a salute to Jim Butterfield, who passed away on June 29, 2007.  *
                                        ;*                                                                                 *
                                        ;* Jim, who was the unofficial  spokesman for  Commodore  International during the *  
                                        ;* heyday of the company's 8 bit supremacy, scratch-developed the Supermon machine *
                                        ;* language monitor for the PET & CBM computers.   When the best-selling Commodore *
                                        ;* 64 was introduced, Jim adapted his software to the new machine & gave the adap- *
                                        ;* tation the name Supermon 64.   Commodore  subsequently  integrated a customized *
                                        ;* version of Supermon 64 into the C-128 to act as the resident M/L monitor.       *
                                        ;*                                                                                 *
                                        ;* Although Supermon 816 is not an adaptation of Supermon 64,  it was  decided  to *
                                        ;* keep the Supermon name alive, since Supermon 816's general operation & user in- *
                                        ;* terface is similar to that of Supermon 64.   Supermon 816 is 100 percent native *
                                        ;* mode 65C816 code & was developed from a blank canvas.                           *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;* This version customized for the RTF65002 test system                            *
                                        ;* Finitron.ca                                                                     *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;* Supermon 816 is a full featured monitor and supports the following operations:  *
                                        ;*                                                                                 *
                                        ;*     A — Assemble code                                                           *
                                        ;*     C — Compare memory regions                                                  *
                                        ;*     D — Disassemble code                                                        *
                                        ;*     F — Fill memory region (cannot span banks)                                  *
                                        ;*     G — Execute code (stops at BRK)                                             *
                                        ;*     H — Search (hunt) memory region                                             *
                                        ;*     J — Execute code as a subroutine (stops at BRK or RTS)                      *
                                        ;*     M — Dump & display memory range                                             *
                                        ;*     R — Dump & display 65C816 registers                                         *
                                        ;*     T — Copy (transfer) memory region                                           *
                                        ;*     X — Exit Supermon 816 & return to operating environment                     *
                                        ;*     > — Modify up to 32 bytes of memory                                         *
                                        ;*     ; — Modify 65C816 registers                                                 *
                                        ;*                                                                                 *
                                        ;* Supermon 816 accepts binary (%), octal (@), decimal (+) and hexadecimal ($) as  *
                                        ;* input for numeric parameters.  Additionally, the H and > operations accept an   *
                                        ;* ASCII string in place of numeric values by preceding the string with ', e.g.:   *
                                        ;*                                                                                 *
                                        ;*     h 042000 042FFF 'BCS Technology Limited                                     *
                                        ;*                                                                                 *
                                        ;* If no radix symbol is entered hex is assumed.                                   *
                                        ;*                                                                                 *
                                        ;* Numeric conversion is also available.  For example, typing:                     *
                                        ;*                                                                                 *
                                        ;*     +1234567 <CR>                                                               *
                                        ;*                                                                                 *
                                        ;* will display:                                                                   *
                                        ;*                                                                                 *
                                        ;*         $12D687                                                                 *
                                        ;*         +1234567                                                                *
                                        ;*         @04553207                                                               *
                                        ;*         %100101101011010000111                                                  *
                                        ;*                                                                                 *
                                        ;* In the above example, <CR> means the console keyboard's return or enter key.    *
                                        ;*                                                                                 *
                                        ;* All numeric values are internally processed as 32 bit unsigned integers.  Addr- *
                                        ;* esses may be entered as 8, 16 or 24 bit values.  During instruction assembly,   *
                                        ;* immediate mode operands may be forced to 16 bits by preceding the operand with  *
                                        ;* an exclamation point if the instruction can accept a 16 bit operand, e.g.:      *
                                        ;*                                                                                 *
                                        ;*     a 1f2000 lda !#4                                                            *
                                        ;*                                                                                 *
                                        ;* The above will assemble as:                                                     *
                                        ;*                                                                                 *
                                        ;*     A 1F2000  A9 04 00     LDA #$0004                                           *
                                        ;*                                                                                 *
                                        ;* Entering:                                                                       *
                                        ;*                                                                                 *
                                        ;*     a 1f2000 ldx !#+157                                                         *
                                        ;*                                                                                 *
                                        ;* will assemble as:                                                               *
                                        ;*                                                                                 *
                                        ;*     A 1F2000  A2 9D 00     LDX #$009D                                           *
                                        ;*                                                                                 *
                                        ;* Absent the ! in the operand field, the above would have been assembled as:      *
                                        ;*                                                                                 *
                                        ;*     A 1F2000  A2 9D        LDX #$9D                                             *
                                        ;*                                                                                 *
                                        ;* If an immediate mode operand is greater than $FF assembly of a 16 bit operand   *
                                        ;* is implied.                                                                     *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;* A Note on the PEA & PEI Instructions                                            *
                                        ;* ————————————————————————————————————                                            *
                                        ;*                                                                                 *
                                        ;* The Eyes and Lichty programming manual uses the following syntax for the PEA    *
                                        ;* and PEI instructions:                                                           *
                                        ;*                                                                                 *
                                        ;*     PEA <operand>                                                               *
                                        ;*     PEI (<operand>)                                                             *
                                        ;*                                                                                 *
                                        ;* The WDC data sheet that was published at the time of the 65C816's release in    *
                                        ;* 1984 does not indicate a recommended or preferred syntax for any of the above   *
                                        ;* instructions.  PEA pushes its operand to the stack and hence operates like any  *
                                        ;* other immediate mode instruction, in that the operand is the data (however, PEA *
                                        ;* doesn't affect the status register).  Similarly, PEI pushes the 16 bit value    *
                                        ;* stored at <operand> and <operand>+1, and hence operates like any other direct   *
                                        ;* (zero) page instruction, again without affecting the status register.           *
                                        ;*                                                                                 *
                                        ;* BCS Technology Limited is of the opinion that the developer of the ORCA/M as-   *
                                        ;* sembler, which is the assembler referred to in the Eyes and Lichty manual, mis- *
                                        ;* understood how PEA and PEI behave during runtime, and hence chose an incorrect  *
                                        ;* syntax for these two instructions.  This error was subsequently carried forward *
                                        ;* by Eyes and Lichty.                                                             *
                                        ;*                                                                                 *
                                        ;* Supermon 816's assembler uses the following syntax for PEA and PEI:             *
                                        ;*                                                                                 *
                                        ;*     PEA #<operand>                                                              *
                                        ;*     PEI <operand>                                                               *
                                        ;*                                                                                 *
                                        ;* The operand for PEA is treated as a 16 bit value, even if entered as an 8 bit   *
                                        ;* value.  The operand for PEI must be 8 bits.                                     *
                                        ;*                                                                                 *
                                        ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                                        ;
                                        ;	* * * * * * * * * * * *
                                        ;	* VERSION INFORMATION *
                                        ;	* * * * * * * * * * * *
                                        ;
                                        softvers .macro                ;software version — change with each revision...
                                                 .byte "1"             ;major
                                                 .byte "."
                                                 .byte "0"             ;minor
                                                 .byte "."
                                                 .byte "0"             ;revision
                                                 .endm
                                        ;
                                        ;REVISION TABLE
                                        ;
                                        ;Ver  Rev Date    Description
                                        ;———————————————————————————————————————————————————————————————————————————————
                                        ;1.0  2013/11/01  A) Original derived from the POC V1.1 single-board computer
                                        ;                    firmware.
                                        ;     2013/11/04  A) Fixed a problem where the B-accumulator wasn't always being
                                        ;                    be copied to shadow storage after return from execution of
                                        ;                    a J command.
                                        ;———————————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;
                                        ;	        COMMENT ABBREVIATIONS
                                        ;	————————————————————————————————————————————————————
                                        ;	  BCD   binary-coded decimal
                                        ;	   DP   direct page or page zero
                                        ;	  EOF   end-of-field
                                        ;	  EOI   end-of-input
                                        ;	  LSB   least significant byte/bit
                                        ;	  LSD   least significant digit
                                        ;	  LSN   least significant nybble
                                        ;	  LSW   least significant word
                                        ;	  MPU   microprocessor
                                        ;	  MSB   most significant byte/bit
                                        ;	  MSD   most significant digit
                                        ;	  MSN   most significant nybble
                                        ;	  MSW   most-significant word
                                        ;	  RAM   random access memory
                                        ;	   WS   whitespace, i.e., blanks & horizontal tabs
                                        ;	————————————————————————————————————————————————————
                                        ;	A word is defined as 16 bits.
                                        ;
                                        ;	   MPU REGISTER SYMBOLS
                                        ;	——————————————————————————
                                        ;	   .A   accumulator LSB
                                        ;	   .B   accumulator MSB
                                        ;	   .C   16 bit accumulator
                                        ;	   .X   X-index
                                        ;	   .Y   Y-index
                                        ;      DS   data segment
                                        ;	   DB   data bank
                                        ;	   DP   direct page
                                        ;      CS   code segment
                                        ;	   PB   program bank
                                        ;	   PC   program counter
                                        ;	   SP   stack pointer
                                        ;	   SR   MPU status
                                        ;      SRX  status extension
                                        ;	————————————————————————————
                                        ;
                                        ;	  MPU STATUS REGISTER SYMBOLS
                                        ;	———————————————————————————————
                                        ;	    C   carry
                                        ;	    D   decimal mode
                                        ;	    I   maskable interrupts
                                        ;	    m   accumulator/memory size
                                        ;	    N   result negative
                                        ;	    V   sign overflow
                                        ;	    x   index registers size
                                        ;	    Z   result zero
                                        ;
                                        ;      16   16 bit emulation flag
                                        ;      32   32 bit emulation flag
                                        ;	———————————————————————————————
                                        ;
                                        ;================================================================================
                                        ;
                                        ;SYSTEM INTERFACE DEFINITIONS
                                        ;
                                        ;	——————————————————————————————————————————————————————————————————
                                        ;	This section defines the interface between Supermon 816 & the host
                                        ;	system.   Change these definitions to suit your system, but do not
                                        ;	change any label names.  All definitions must have valid values in
                                        ;	order to assemble Supermon 816.
                                        ;	——————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————
    342 = 000000000000C000                            _origin_ =$00C000              ;assembly address...
                                        ;
                                        ;	Set _ORIGIN_ to Supermon 816's desired assembly address.
                                        ;	————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    348 = 000000000000F403                            vecexit  =$00F403              ;exit to environment address...
                                        ;
                                        ;	Set VECEXIT to where Supermon 816 should go when it exits.  Supermon 816
                                        ;	will do a JML (long jump) to this address, which means VECEXIT must be a
                                        ;	24 bit address.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    356 = 0000000000000102                            vecbrki  =$0102                ;BRK handler indirect vector...
    357 = 0000000000000105                            vecbrkia =$0105                ;system indirect BRK vector
                                        ;
                                        ;	Supermon 816 will modify this vector so that execution of a BRK instruc-
                                        ;	tion is intercepted & the registers  are  captured.   Your BRK front end
                                        ;	should jump through this vector after pushing the registers as follows:
                                        ;
                                        ;	         phb                   ;save DB
                                        ;	         phd                   ;save DP
                                        ;	         rep #%00110000        ;16 bit registers
                                        ;	         pha
                                        ;	         phx
                                        ;	         phy
                                        ;	         jmp (vecbrki)         ;indirect vector
                                        ;
                                        ;	When a G or J command is issued, the above sequence will be reversed be-
                                        ;	fore a jump is made to the code to be executed.  Upon exit from Supermon
                                        ;	816, the original address at VECBRKI will be restored.
                                        ;
                                        ;	If your BRK front end doesn't conform to the above you will have to mod-
                                        ;	ify Supermon 816 to accommodate the differences.  The most likely needed
                                        ;	changes will be in the order in which registers are pushed to the stack.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    381 = 0000000000003FFF                            hwstack  =$3fff                ;top of hardware stack...
                                        ;
                                        ;	Supermon 816 initializes the stack pointer to this address when the cold
                                        ;	start at MONCOLD is called to enter the monitor.  The stack pointer will
                                        ;	be undisturbed when entry into Supermon 816 is through JMONBRK (see jump
                                        ;	table definitions).
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    390 = 0000000000000080                            zeropage =$80                  ;Supermon 816's direct page...
                                        ;
                                        ;	Supermon 816 uses direct page starting at this address.  Be sure that no
                                        ;	conflict occurs with other software.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    397 = 000000000000F400                            getcha   =$F400                ;get keystroke from console...
                                        ;
                                        ;	GETCHA refers to an operating system API call that returns a keystroke
                                        ;	in the 8 bit accumulator.  Supermon 816  assumes that GETCHA is a non-
                                        ;	blocking subroutine & returns with carry clear to indicate that a key-
                                        ;	stroke is in .A, or with carry set to indicate that no keystroke was
                                        ;	available.  GETCHA will be called with a JSR instruction.
                                        ;
                                        ;	Supermon 816 expects .X & .Y to be preserved upon return from GETCHA.
                                        ;	You may have to modify Supermon 816 at all calls to GETCHA if your "get
                                        ;	keystroke" routine works differently than described.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    411 = 000000000000F406                            putcha   =$F406                ;print character on console...
                                        ;
                                        ;	PUTCHA refers to an operating system API call that prints a character to
                                        ;	the console screen.  The character to be printed will be in .A, which
                                        ;	will be set to 8-bit width.  Supermon 816 assumes that PUTCHA will block
                                        ;	until the character can be processed.  PUTCHA will be called with a JSR
                                        ;	instructions.
                                        ;
                                        ;	Supermon 816 expects .X & .Y to be preserved upon return from PUTCHA.
                                        ;	You may have to modify Supermon 816 at all calls to PUTCHA if your "put
                                        ;	character" routine works differently than described.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    425 = 0000000000000003                            stopkey  =$03                  ;display abort key...
                                        ;
                                        ;	Supermon 816 will poll for a "stop key" during display operations, such
                                        ;	as code disassembly & memory dumps, so as to abort further processing &
                                        ;	return to the command prompt.  STOPKEY must be defined with the ASCII
                                        ;	value that the "stop key" will emit when typed.  The polling is via a
                                        ;	call to GETCHA (described above).  The default STOPKEY definition of $03
                                        ;	is for ASCII <ETX> or [Ctrl-C].
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
    435 = 0000000000000200                            ibuffer  =$000200               ;input buffer &...
    436 = 00000251                      auxbuf   =ibuffer+s_ibuf+1 ;auxiliary buffer...
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	Supermon 816 will use the above definitions for input buffers.  These
                                        ;	buffers may be located anywhere in RAM that is convenient.  The buffers
                                        ;	are stateless, which means that unless Supermon 816 has control of your
                                        ;	system, they may be overwritten without consequence.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;================================================================================
                                        ;
                                        ;W65C816S INSTRUCTION SYNTHESIS MACROS —— !!!!! DO NOT EDIT !!!!!
                                        ;
                                        _asm24_  .macro .ad
                                                 .byte <.ad,>.ad,.ad >> 16
                                                 .endm
                                        ;
                                        brl      .macro .ad
                                        .ba      =*+3
                                                 .byte $82
                                                 .word .ad-.ba
                                                 .endm
                                        ;
                                        ; jml is supported for the RTF65002 in 65c02 mode. And the opcode is supported
                                        ; by the assembler.
                                        ;jml      .macro .ad
                                        ; ;        .byte $5c
                                        ;         _asm24_ .ad
                                        ;         .endm
                                        ;
                                        mvn      .macro .s,.d
                                                 .byte $54,.d,.s
                                                 .endm
                                        ;
                                        mvp      .macro .s,.d
                                                 .byte $44,.d,.s
                                                 .endm
                                        ;
                                        pea      .macro .op
                                                 .byte $f4
                                                 .word .op
                                                 .endm
                                        ;
                                        phb      .macro
                                                 .byte $8b
                                                 .endm
                                        ;
                                        phk      .macro
                                                 .byte $4b
                                                 .endm
                                        ;
                                        plb      .macro
                                                 .byte $ab
                                                 .endm
                                        ;
                                        rep      .macro .op
                                                 .byte $c2,.op
                                                 .endm
                                        ;
                                        sep      .macro .op
                                                 .byte $e2,.op
                                                 .endm
                                        ;
                                        tcd      .macro
                                                 .byte $5b
                                                 .endm
                                        ;
                                        tcs      .macro
                                                 .byte $1b
                                                 .endm
                                        ;
                                        tdc      .macro
                                                 .byte $7b
                                                 .endm
                                        ;
                                        tsc      .macro
                                                 .byte $3b
                                                 .endm
                                        ;
                                        txy      .macro
                                                 .byte $9b
                                                 .endm
                                        ;
                                        tyx      .macro
                                                 .byte $bb
                                                 .endm
                                        ;
                                        wai      .macro
                                                 .byte $cb
                                                 .endm
                                        ;
                                        xba      .macro
                                                 .byte $eb
                                                 .endm
                                        ;
                                        adcw     .macro .op
                                                 adc #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        andw     .macro .op
                                                 and #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        bitw     .macro .op
                                                 bit #<.op
                                                 .byte >.op
                                                 .endm
                                        ;         
                                        cmpw     .macro .op
                                                 cmp #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        cpxw     .macro .op
                                                 cpx #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        cpyw     .macro .op
                                                 cpy #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        eorw     .macro .op
                                                 eor #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        ldaw     .macro .op
                                                 lda #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        ldxw     .macro .op
                                                 ldx #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        ldyw     .macro .op
                                                 ldy #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        oraw     .macro .op
                                                 ora #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        sbcw     .macro .op
                                                 sbc #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        ldalx    .macro .ad
                                                 .byte $+         .byte a_esc,"("
                                     +            .byte a_esc,"G4"
                                        
                                     +            .byte <.ad,>.ad,.ad >> 16
                                        
                                                 .endm
                                        ;
                                        adcil    .macro .ad
                                                 .byte $67,.ad
                                                 .endm
                                        ;
                                        adcily   .macro .ad
                                                 .byte $77,.ad
                                                 .endm
                                        ;
                                        andil    .macro .ad
                                                 .byte $27,.ad
                                                 .endm
                                        ;
                                        andily   .macro .ad
                                                 .byte $37,.ad
                                                 .endm
                                        ;
                                        cmpil    .macro .ad
                                                 .byte $c7,.ad
                                                 .endm
                                        ;
                                        cmpily   .macro .ad
                                                 .byte $d7,.ad
                                                 .endm
                                        ;
                                        eoril    .macro .ad
                                                 .byte $47,.ad
                                                 .endm
                                        ;
                                        eorily   .macro .ad
                                                 .byte $57,.ad
                                                 .endm
                                        ;
                                        ldail    .macro .ad
                                                 .byte $a7,.ad
                                                 .endm
                                        ;
                                        ldaily   .macro .ad
                                                 .byte $b7,.ad
                                                 .endm
                                        ;
                                        orail    .macro .ad
                                                 .byte $07,.ad
                                                 .endm
                                        ;
                                        oraily   .macro .ad
                                                 .byte $17,.ad
                                                 .endm
                                        ;
                                        sbcil    .macro .ad
                                                 .byte $e7,.ad
                                                 .endm
                                        ;
                                        sbcily   .macro .ad
                                                 .byte $f7,.ad
                                                 .endm
                                        ;
                                        stail    .macro .ad
                                                 .byte $87,.ad
                                                 .endm
                                        ;
                                        staily   .macro .ad
                                                 .byte $97,.ad
                                                 .endm
                                        ;
                                        adcs     .macro .of
                                                 .byte $63,.of
                                                 .endm
                                        ;
                                        adcsi    .macro .of
                                                 .byte $73,.of
                                                 .endm
                                        ;
                                        ands     .macro .of
                                                 .byte $23,.of
                                                 .endm
                                        ;
                                        andsi    .macro .of
                                                 .byte $33,.of
                                                 .endm
                                        ;
                                        cmps     .macro .of
                                                 .byte $c3,.of
                                                 .endm
                                        ;
                                        cmpsi    .macro .of
                                                 .byte $d3,.of
                                                 .endm
                                        ;
                                        eors     .macro .of
                                                 .byte $43,.of
                                                 .endm
                                        ;
                                        eorsi    .macro .of
                                                 .byte $53,.of
                                                 .endm
                                        ;
                                        ldas     .macro .of
                                                 .byte $a3,.of
                                                 .endm
                                        ;
                                        ldasi    .macro .of
                                                 .byte $b3,.of
                                                 .endm
                                        ;
                                        oras     .macro .of
                                                 .byte $03,.of
                                                 .endm
                                        ;
                                        orasi    .macro .of
                                                 .byte $13,.of
                                                 .endm
                                        ;
                                        sbcs     .macro .of
                                                 .byte $e3,.of
                                                 .endm
                                        ;
                                        sbcsi    .macro .of
                                                 .byte $f3,.of
                                                 .endm
                                        ;
                                        stas     .macro .of
                                                 .byte $83,.of
                                                 .endm
                                        ;
                                        stasi    .macro .of
                                                 .byte $93,.of
                                                 .endm
                                        ;
                                        longa    .macro
                                                 .byte $c2,$20
                                                 .endm
                                        ;
                                        longr    .macro
                                                 .byte $c2,$30
                                                 .endm
                                        ;
                                        longx    .macro
                                                 .byte $c2,$10
                                                 .endm
                                        ;
                                        shorta   .macro
                                                 .byte $e2,$20
                                                 .endm
                                        ;
                                        shorti   .macro
                                                 .byte $e2,$10
                                                 .endm
                                        ;
                                        shortr   .macro
                                                 .byte $e2,$30
                                                 .endm
                                        ;
                                        shortx   .macro
                                                 .byte $e2,$10
                                                 .endm
                                        ;
                                        ;================================================================================
                                        ;
                                        ;CONSOLE DISPLAY CONTROL MACROS
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	The following macros execute terminal  control procedures  that  perform
                                        ;	such tasks as clearing the screen,  switching  between  normal & reverse
                                        ;	video, etc.  These macros are for WYSE 60 & compatible displays, such as
                                        ;	the WYSE 150, WYSE 160, WYSE 325 & WYSE GPT.   Only the functions needed
                                        ;	by Supermon 816 are included.
                                        ;
                                        ;	If your console is not WYSE 60 compatible, you will need to  edit  these
                                        ;	macros as required to control your particular console or terminal.  Note
                                        ;	that in some cases one macro may call another.  Exercise caution in your
                                        ;	edits to avoid introducing display bugs.
                                        ;
                                        ;	If your console display cannot execute one of these procedures,  such as
                                        ;	'CL' (clear to end of line), you will have to develop an alternative.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;
                                        ;	clearing data...
                                        ;
                                        bs       .macro                ;destructive backspace
                                                 .byte a_bs
                                     +            .byte a_esc,"W"
                                        
                                                 .endm
                                        ;
                                        cl       .macro                ;clear to end of line 
                                                 .byte a_esc,"T"
                                                 .endm
                                        ;
                                        ;
                                        ;	cursor control...
                                        ;
                                        cn       .macro                ;cursor on
                                                 .byte a_esc,"`1"
                                                 .endm
                                        ;
                                        co       .macro                ;cursor off
                                                 .byte a_esc,"`0"
                                                 .endm
                                        ;
                                        cr       .macro                ;carriage return
                                                 .byte a_cr
                                                 .endm
                                        ;
                                        lf       .macro                ;carriage return/line feed
                                     +            .byte a_cr
                                        
                                                 .byte a_lf
                                                 .endm
                                        ;
                                        ;
                                        ;	display attributes...
                                        ;
                                        bf       .macro                ;reverse foreground
                                                 .byte a_esc,"("
                                                 .byte a_esc,"G4"
                                                 .endm
                                        ;
                                        er       .macro                ;enable normal foreground
                                                 .byte a_esc,"("
                                                 .byte a_esc,"G0"
                                                 .endm
                                        ;
                                        sf       .macro                ;set foreground
                                                 .byte a_esc,"("
                                                 .byte a_esc,"G0"
                                                 .endm
                                        ;
                                        ;
                                        ;	display editing...
                                        ;
                                        dcuc     .macro                ;delete char under cursor
                                                 .byte a_esc,"W"
                                                 .endm
                                        ;
                                        ;
                                        ;	miscellaneous control...
                                        ;
                                        rb       .macro                ;ring "bell"
                                                 .byte a_bel
                                                 .endm
                                        ;
                                        ;================================================================================
                                        ;
                                        ;ASCII CONTROL DEFINITIONS (menmonic order)
                                        ;
    845 = 0000000000000007                            a_bel    =$07                  ;<BEL> alert/ring bell
    846 = 0000000000000008                            a_bs     =$08                  ;<BS>  backspace
    847 = 000000000000000D                            a_cr     =$0d                  ;<CR>  carriage return
    848 = 000000000000007F                            a_del    =$7f                  ;<DEL> delete
    849 = 000000000000001B                            a_esc    =$1b                  ;<ESC> escape
    850 = 0000000000000009                            a_ht     =$09                  ;<HT>  horizontal tabulation
    851 = 000000000000000A                            a_lf     =$0a                  ;<LF>  linefeed
                                        ;
                                        ;
                                        ;	miscellaneous (description order)...
                                        ;
    856 = 20                            a_blank  =' '                  ;blank (whitespace)
    857 = 7A                            a_asclch ='z'                  ;end of lowercase ASCII
    858 = 000000000000005F                            a_lctouc =$5f                  ;LC to UC conversion mask
    859 = 61                            a_asclcl ='a'                  ;start of lowercase ASCII
                                        ;
                                        ;================================================================================
                                        ;
                                        ;GLOBAL ATOMIC CONSTANTS
                                        ;
                                        ;
                                        ;	data type sizes...
                                        ;
    868 = 0000000000000001                            s_byte   =1                    ;byte
    869 = 0000000000000002                            s_word   =2                    ;word (16 bits)
    870 = 0000000000000003                            s_xword  =3                    ;extended word (24 bits)
    871 = 0000000000000004                            s_dword  =4                    ;double word (32 bits)
    872 = 0000000000000100                            s_rampag =$0100                ;65xx RAM page
                                        ;
                                        ;
                                        ;	data type sizes in bits...
                                        ;
    877 = 0000000000000008                            s_bibyte =8                    ;byte
    878 = 0000000000000004                            s_bnybbl =4                    ;nybble
                                        ;
                                        ;
                                        ;	miscellaneous...
                                        ;
    883 = 000000000000002C                            bitabs   =$2c                  ;absolute BIT opcode
    884 = 0000000000000024                            bitzp    =$24                  ;zero page BIT opcode
                                        ;
                                        ;================================================================================
                                        ;
                                        ;W65C816S NATIVE MODE STATUS REGISTER DEFINITIONS
                                        ;
    890 = 00000001                      s_mpudbx =s_byte               ;data bank size
    891 = 00000002                      s_mpudpx =s_word               ;direct page size
    892 = 00000001                      s_mpupbx =s_byte               ;program bank size
    893 = 00000002                      s_mpupcx =s_word               ;program counter size
    894 = 00000002                      s_mpuspx =s_word               ;stack pointer size
    895 = 00000001                      s_mpusrx =s_byte               ;status size
                                        ;
                                        ;
                                        ;	status register flags...
                                        ;
    900 = 0000000000000001                            sr_car   =%00000001            ;C
    901 = 00000002                      sr_zer   =sr_car << 1          ;Z
    902 = 00000004                      sr_irq   =sr_zer << 1          ;I
    903 = 00000008                      sr_bdm   =sr_irq << 1          ;D
    904 = 00000010                      sr_ixw   =sr_bdm << 1          ;x
    905 = 00000020                      sr_amw   =sr_ixw << 1          ;m
    906 = 00000040                      sr_ovl   =sr_amw << 1          ;V
    907 = 00000080                      sr_neg   =sr_ovl << 1          ;N
    908 = 00000100                      sr_16	 =sr_neg << 1
    909 = 00000200                      sr_32    =sr_16 << 1
                                        ;
                                        ;	NVmxDIZC
                                        ;	xxxxxxxx
                                        ;	||||||||
                                        ;	|||||||+———> 1 = carry set/generated
                                        ;	||||||+————> 1 = result = zero
                                        ;	|||||+—————> 1 = IRQs ignored
                                        ;	||||+——————> 0 = binary arithmetic mode
                                        ;	||||         1 = decimal arithmetic mode
                                        ;	|||+———————> 0 = 16 bit index
                                        ;	|||          1 = 8 bit index
                                        ;	||+————————> 0 = 16 bit .A & memory
                                        ;	||           1 = 8 bit .A & memory
                                        ;	|+—————————> 1 = sign overflow
                                        ;	+——————————> 1 = result = negative
                                        ;
                                        ;================================================================================
                                        ;
                                        ;"SIZE-OF" CONSTANTS
                                        ;
    930 = 00000003                      s_addr   =s_xword              ;24 bit address
    931 = 0000000000000020                            s_auxbuf =32                   ;auxiliary buffer
    932 = 0000000000000050                            s_ibuf   =80                   ;input buffer
    933 = 0000000000000003                            s_mnemon =3                    ;MPU ASCII mnemonic
    934 = 0000000000000002                            s_mnepck =2                    ;MPU encoded mnemonic
    935 = 0000000000000003                            s_mvinst =3                    ;MVN/MVP instruction
    936 = 00000001                      s_opcode =s_byte               ;MPU opcode
    937 = 00000003                      s_oper   =s_xword              ;operand
    938 = 00000004                      s_pfac   =s_dword              ;primary math accumulator
    939 = 00000006                      s_sfac   =s_dword+s_word       ;secondary math accumulators
                                        ;
                                        ;================================================================================
                                        ;
                                        ;"NUMBER-OF" CONSTANTS
                                        ;
    945 = 0000000000000015                            n_dbytes =21                   ;default disassembly bytes
    946 = 0000000000000008                            n_dump   =8                    ;bytes per memory dump line
    947 = 000000FF                      n_mbytes =s_rampag-1           ;default memory dump bytes
    948 = 0000000000000008                            n_hccols =8                    ;compare/hunt display columns
    949 = 00000009                      n_opcols =3*s_oper             ;disassembly operand columns
    950 = 0000000000000004                            n_opslsr =4                    ;LSRs to extract instruction size
    951 = 0000000000000005                            n_shfenc =5                    ;shifts to encode/decode mnemonic
                                        ;
                                        ;================================================================================
                                        ;
                                        ;NUMERIC CONVERSION CONSTANTS
                                        ;
    957 = 0000000000000006                            a_hexdec ='A'-'9'-2            ;hex to decimal difference
    958 = 25                            c_bin    ='%'                  ;binary prefix
    959 = 2B                            c_dec    ='+'                  ;decimal prefix
    960 = 24                            c_hex    ='$'                  ;hexadecimal prefix
    961 = 40                            c_oct    ='@'                  ;octal prefix
    962 = 66                            k_hex    ='f'                  ;hex ASCII conversion
    963 = 00000020                      m_bits   =s_pfac*s_bibyte      ;operand bit size
    964 = 00000030                      m_cbits  =s_sfac*s_bibyte      ;workspace bit size
    965 = 000000000000000F                            bcdumask =%00001111            ;isolate BCD units mask
    966 = 0000000000000030                            btoamask =%00110000            ;binary to ASCII mask
                                        ;
                                        ;================================================================================
                                        ;
                                        ;ASSEMBLER/DISASSEMBLER CONSTANTS
                                        ;
    972 = 3F                            a_mnecvt ='?'                  ;encoded mnemonic conversion base
    973 = 000000000000001F                            aimmaska =%00011111            ;.A immediate opcode test #1
    974 = 0000000000000009                            aimmaskb =%00001001            ;.A immediate opcode test #2
    975 = 41                            asmprfx  ='A'                  ;assemble code prefix
    976 = 0000000000000009                            ascprmct =9                    ;assembler prompt "size-of"
    977 = 2E                            disprfx  ='.'                  ;disassemble code prefix
    978 = 00000000000000C0                            flimmask =%11000000            ;force long immediate flag
    979 = 0000000000000054                            opc_mvn  =$54                  ;MVN opcode
    980 = 0000000000000044                            opc_mvp  =$44                  ;MVP opcode
    981 = 00000000000000C2                            opc_rep  =$c2                  ;REP opcode
    982 = 00000000000000E2                            opc_sep  =$e2                  ;SEP opcode
    983 = 00000030                      pfmxmask =sr_amw | sr_ixw      ;MPU m & x flag bits mask
                                        ;
                                        ;
                                        ;	assembler prompt buffer offsets...
                                        ;
    988 = 00000002                      apadrbkh =s_word               ;instruction address bank MSN
    989 = 00000003                      apadrbkl =apadrbkh+s_byte      ;instruction address bank LSN
    990 = 00000004                      apadrmbh =apadrbkl+s_byte      ;instruction address MSB MSN
    991 = 00000005                      apadrmbl =apadrmbh+s_byte      ;instruction address MSB LSN
    992 = 00000006                      apadrlbh =apadrmbl+s_byte      ;instruction address LSB MSN
    993 = 00000007                      apadrlbl =apadrlbh+s_byte      ;instruction address LSB LSN
                                        ;
                                        ;
                                        ;	addressing mode preamble symbols...
                                        ;
    998 = 21                            amp_flim ='!'                  ;force long immediate
    999 = 23                            amp_imm  ='#'                  ;immediate
   1000 = 28                            amp_ind  ='('                  ;indirect
   1001 = 5B                            amp_indl ='['                  ;indirect long
                                        ;
                                        ;
                                        ;	addressing mode symbolic translation indices...
                                        ;
   1006 = 0000000000000000                            am_nam   =%0000                ;(0)  no symbol
   1007 = 0000000000000001                            am_imm   =%0001                ;(1)  #
   1008 = 0000000000000002                            am_adrx  =%0010                ;(2)  dp,X or addr,X
   1009 = 0000000000000003                            am_adry  =%0011                ;(3)  dp,Y or addr,Y
   1010 = 0000000000000004                            am_ind   =%0100                ;(4)  (dp) or (addr)
   1011 = 0000000000000005                            am_indl  =%0101                ;(5)  [dp] or [addr]
   1012 = 0000000000000006                            am_indly =%0110                ;(6)  [dp],Y
   1013 = 0000000000000007                            am_indx  =%0111                ;(7)  (dp,X) or (addr,X)
   1014 = 0000000000000008                            am_indy  =%1000                ;(8)  (dp),Y
   1015 = 0000000000000009                            am_stk   =%1001                ;(9)  offset,S
   1016 = 000000000000000A                            am_stky  =%1010                ;(10) (offset,S),Y
   1017 = 000000000000000B                            am_move  =%1011                ;(11) MVN/MVP sbnk,dbnk
                                        ;
                                        ;
                                        ;	operand size translation indices...
                                        ;
   1022 = 0000000000000000                            ops0     =%0000 << 4           ;no operand
   1023 = 0000000000000010                            ops1     =%0001 << 4           ;8 bit operand
   1024 = 0000000000000020                            ops2     =%0010 << 4           ;16 bit operand
   1025 = 0000000000000030                            ops3     =%0011 << 4           ;24 bit operand
   1026 = 0000000000000050                            bop1     =%0101 << 4           ;8 bit relative branch
   1027 = 0000000000000060                            bop2     =%0110 << 4           ;16 bit relative branch
   1028 = 0000000000000090                            vops     =%1001 << 4           ;8 or 16 bit operand
                                        ;
                                        ;
                                        ;	operand size & addressing mode extraction masks...
                                        ;
   1033 = 000000000000000F                            amodmask =%00001111            ;addressing mode index
   1034 = 0000000000000030                            opsmask  =%00110000            ;operand size
   1035 = 00000000000000C0                            vopsmask =%11000000            ;BOPx & VOPS flag bits
                                        ;
                                        ;
                                        ;	instruction mnemonic encoding...
                                        ;
   1040 = 0000000000002144                            mne_adc  =$2144                ;ADC
   1041 = 0000000000002BC4                            mne_and  =$2bc4                ;AND
   1042 = 0000000000006D04                            mne_asl  =$6d04                ;ASL
   1043 = 0000000000002106                            mne_bcc  =$2106                ;BCC
   1044 = 000000000000A106                            mne_bcs  =$a106                ;BCS
   1045 = 0000000000009186                            mne_beq  =$9186                ;BEQ
   1046 = 000000000000AA86                            mne_bit  =$aa86                ;BIT
   1047 = 0000000000005386                            mne_bmi  =$5386                ;BMI
   1048 = 00000000000033C6                            mne_bne  =$33c6                ;BNE
   1049 = 0000000000006C46                            mne_bpl  =$6c46                ;BPL
   1050 = 00000000000014C6                            mne_bra  =$14c6                ;BRA
   1051 = 00000000000064C6                            mne_brk  =$64c6                ;BRK
   1052 = 0000000000006CC6                            mne_brl  =$6cc6                ;BRL
   1053 = 00000000000025C6                            mne_bvc  =$25c6                ;BVC
   1054 = 000000000000A5C6                            mne_bvs  =$a5c6                ;BVS
   1055 = 0000000000002348                            mne_clc  =$2348                ;CLC
   1056 = 0000000000002B48                            mne_cld  =$2b48                ;CLD
   1057 = 0000000000005348                            mne_cli  =$5348                ;CLI
   1058 = 000000000000BB48                            mne_clv  =$bb48                ;CLV
   1059 = 0000000000008B88                            mne_cmp  =$8b88                ;CMP
   1060 = 0000000000008C08                            mne_cop  =$8c08                ;COP
   1061 = 000000000000CC48                            mne_cpx  =$cc48                ;CPX
   1062 = 000000000000D448                            mne_cpy  =$d448                ;CPY
   1063 = 000000000000218A                            mne_dec  =$218a                ;DEC
   1064 = 000000000000C98A                            mne_dex  =$c98a                ;DEX
   1065 = 000000000000D18A                            mne_dey  =$d18a                ;DEY
   1066 = 0000000000009C0C                            mne_eor  =$9c0c                ;EOR
   1067 = 00000000000023D4                            mne_inc  =$23d4                ;INC
   1068 = 000000000000CBD4                            mne_inx  =$cbd4                ;INX
   1069 = 000000000000D3D4                            mne_iny  =$d3d4                ;INY
   1070 = 0000000000006B96                            mne_jml  =$6b96                ;JML
   1071 = 0000000000008B96                            mne_jmp  =$8b96                ;JMP
   1072 = 0000000000006D16                            mne_jsl  =$6d16                ;JSL
   1073 = 0000000000009D16                            mne_jsr  =$9d16                ;JSR
   1074 = 000000000000115A                            mne_lda  =$115a                ;LDA
   1075 = 000000000000C95A                            mne_ldx  =$c95a                ;LDX
   1076 = 000000000000D15A                            mne_ldy  =$d15a                ;LDY
   1077 = 0000000000009D1A                            mne_lsr  =$9d1a                ;LSR
   1078 = 0000000000007DDC                            mne_mvn  =$7ddc                ;MVN
   1079 = 0000000000008DDC                            mne_mvp  =$8ddc                ;MVP
   1080 = 0000000000008C1E                            mne_nop  =$8c1e                ;NOP
   1081 = 00000000000014E0                            mne_ora  =$14e0                ;ORA
   1082 = 00000000000011A2                            mne_pea  =$11a2                ;PEA
   1083 = 00000000000051A2                            mne_pei  =$51a2                ;PEI
   1084 = 00000000000099A2                            mne_per  =$99a2                ;PER
   1085 = 0000000000001262                            mne_pha  =$1262                ;PHA
   1086 = 0000000000001A62                            mne_phb  =$1a62                ;PHB
   1087 = 0000000000002A62                            mne_phd  =$2a62                ;PHD
   1088 = 0000000000006262                            mne_phk  =$6262                ;PHK
   1089 = 0000000000008A62                            mne_php  =$8a62                ;PHP
   1090 = 000000000000CA62                            mne_phx  =$ca62                ;PHX
   1091 = 000000000000D262                            mne_phy  =$d262                ;PHY
   1092 = 0000000000001362                            mne_pla  =$1362                ;PLA
   1093 = 0000000000001B62                            mne_plb  =$1b62                ;PLB
   1094 = 0000000000002B62                            mne_pld  =$2b62                ;PLD
   1095 = 0000000000008B62                            mne_plp  =$8b62                ;PLP
   1096 = 000000000000CB62                            mne_plx  =$cb62                ;PLX
   1097 = 000000000000D362                            mne_ply  =$d362                ;PLY
   1098 = 00000000000089A6                            mne_rep  =$89a6                ;REP
   1099 = 0000000000006C26                            mne_rol  =$6c26                ;ROL
   1100 = 0000000000009C26                            mne_ror  =$9c26                ;ROR
   1101 = 0000000000005566                            mne_rti  =$5566                ;RTI
   1102 = 0000000000006D66                            mne_rtl  =$6d66                ;RTL
   1103 = 000000000000A566                            mne_rts  =$a566                ;RTS
   1104 = 00000000000020E8                            mne_sbc  =$20e8                ;SBC
   1105 = 00000000000021A8                            mne_sec  =$21a8                ;SEC
   1106 = 00000000000029A8                            mne_sed  =$29a8                ;SED
   1107 = 00000000000051A8                            mne_sei  =$51a8                ;SEI
   1108 = 00000000000089A8                            mne_sep  =$89a8                ;SEP
   1109 = 0000000000001568                            mne_sta  =$1568                ;STA
   1110 = 0000000000008D68                            mne_stp  =$8d68                ;STP
   1111 = 000000000000CD68                            mne_stx  =$cd68                ;STX
   1112 = 000000000000D568                            mne_sty  =$d568                ;STY
   1113 = 000000000000DD68                            mne_stz  =$dd68                ;STZ
   1114 = 000000000000C8AA                            mne_tax  =$c8aa                ;TAX
   1115 = 000000000000D0AA                            mne_tay  =$d0aa                ;TAY
   1116 = 000000000000292A                            mne_tcd  =$292a                ;TCD
   1117 = 000000000000A12A                            mne_tcs  =$a12a                ;TCS
   1118 = 000000000000216A                            mne_tdc  =$216a                ;TDC
   1119 = 0000000000001CEA                            mne_trb  =$1cea                ;TRB
   1120 = 0000000000001D2A                            mne_tsb  =$1d2a                ;TSB
   1121 = 000000000000252A                            mne_tsc  =$252a                ;TSC
   1122 = 000000000000CD2A                            mne_tsx  =$cd2a                ;TSX
   1123 = 000000000000166A                            mne_txa  =$166a                ;TXA
   1124 = 000000000000A66A                            mne_txs  =$a66a                ;TXS
   1125 = 000000000000D66A                            mne_txy  =$d66a                ;TXY
   1126 = 00000000000016AA                            mne_tya  =$16aa                ;TYA
   1127 = 000000000000CEAA                            mne_tyx  =$ceaa                ;TYX
   1128 = 00000000000050B0                            mne_wai  =$50b0                ;WAI
   1129 = 0000000000007170                            mne_wdm  =$7170                ;WDM
   1130 = 00000000000010F2                            mne_xba  =$10f2                ;XBA
   1131 = 0000000000003132                            mne_xce  =$3132                ;XCE
                                        ;
                                        ;
                                        ;	encoded instruction mnemonic indices...
                                        ;
   1136 = 0000000000000010                            mne_adcx =16                   ;ADC
   1137 = 000000000000001D                            mne_andx =29                   ;AND
   1138 = 000000000000002C                            mne_aslx =44                   ;ASL
   1139 = 000000000000000F                            mne_bccx =15                   ;BCC
   1140 = 0000000000000041                            mne_bcsx =65                   ;BCS
   1141 = 000000000000003B                            mne_beqx =59                   ;BEQ
   1142 = 0000000000000046                            mne_bitx =70                   ;BIT
   1143 = 0000000000000024                            mne_bmix =36                   ;BMI
   1144 = 000000000000001F                            mne_bnex =31                   ;BNE
   1145 = 000000000000002A                            mne_bplx =42                   ;BPL
   1146 = 0000000000000005                            mne_brax =5                    ;BRA
   1147 = 0000000000000027                            mne_brkx =39                   ;BRK
   1148 = 000000000000002B                            mne_brlx =43                   ;BRL
   1149 = 0000000000000017                            mne_bvcx =23                   ;BVC
   1150 = 0000000000000044                            mne_bvsx =68                   ;BVS
   1151 = 0000000000000014                            mne_clcx =20                   ;CLC
   1152 = 000000000000001B                            mne_cldx =27                   ;CLD
   1153 = 0000000000000023                            mne_clix =35                   ;CLI
   1154 = 0000000000000047                            mne_clvx =71                   ;CLV
   1155 = 0000000000000035                            mne_cmpx =53                   ;CMP
   1156 = 0000000000000037                            mne_copx =55                   ;COP
   1157 = 000000000000004E                            mne_cpxx =78                   ;CPX
   1158 = 0000000000000058                            mne_cpyx =88                   ;CPY
   1159 = 0000000000000012                            mne_decx =18                   ;DEC
   1160 = 000000000000004A                            mne_dexx =74                   ;DEX
   1161 = 0000000000000054                            mne_deyx =84                   ;DEY
   1162 = 000000000000003D                            mne_eorx =61                   ;EOR
   1163 = 0000000000000015                            mne_incx =21                   ;INC
   1164 = 000000000000004D                            mne_inxx =77                   ;INX
   1165 = 0000000000000057                            mne_inyx =87                   ;INY
   1166 = 0000000000000028                            mne_jmlx =40                   ;JML
   1167 = 0000000000000036                            mne_jmpx =54                   ;JMP
   1168 = 000000000000002D                            mne_jslx =45                   ;JSL
   1169 = 000000000000003F                            mne_jsrx =63                   ;JSR
   1170 = 0000000000000001                            mne_ldax =1                    ;LDA
   1171 = 0000000000000049                            mne_ldxx =73                   ;LDX
   1172 = 0000000000000053                            mne_ldyx =83                   ;LDY
   1173 = 0000000000000040                            mne_lsrx =64                   ;LSR
   1174 = 0000000000000030                            mne_mvnx =48                   ;MVN
   1175 = 000000000000003A                            mne_mvpx =58                   ;MVP
   1176 = 0000000000000038                            mne_nopx =56                   ;NOP
   1177 = 0000000000000006                            mne_orax =6                    ;ORA
   1178 = 0000000000000002                            mne_peax =2                    ;PEA
   1179 = 0000000000000021                            mne_peix =33                   ;PEI
   1180 = 000000000000003C                            mne_perx =60                   ;PER
   1181 = 0000000000000003                            mne_phax =3                    ;PHA
   1182 = 000000000000000A                            mne_phbx =10                   ;PHB
   1183 = 000000000000001A                            mne_phdx =26                   ;PHD
   1184 = 0000000000000026                            mne_phkx =38                   ;PHK
   1185 = 0000000000000033                            mne_phpx =51                   ;PHP
   1186 = 000000000000004B                            mne_phxx =75                   ;PHX
   1187 = 0000000000000055                            mne_phyx =85                   ;PHY
   1188 = 0000000000000004                            mne_plax =4                    ;PLA
   1189 = 000000000000000B                            mne_plbx =11                   ;PLB
   1190 = 000000000000001C                            mne_pldx =28                   ;PLD
   1191 = 0000000000000034                            mne_plpx =52                   ;PLP
   1192 = 000000000000004C                            mne_plxx =76                   ;PLX
   1193 = 0000000000000056                            mne_plyx =86                   ;PLY
   1194 = 0000000000000031                            mne_repx =49                   ;REP
   1195 = 0000000000000029                            mne_rolx =41                   ;ROL
   1196 = 000000000000003E                            mne_rorx =62                   ;ROR
   1197 = 0000000000000025                            mne_rtix =37                   ;RTI
   1198 = 000000000000002E                            mne_rtlx =46                   ;RTL
   1199 = 0000000000000043                            mne_rtsx =67                   ;RTS
   1200 = 000000000000000E                            mne_sbcx =14                   ;SBC
   1201 = 0000000000000013                            mne_secx =19                   ;SEC
   1202 = 0000000000000019                            mne_sedx =25                   ;SED
   1203 = 0000000000000022                            mne_seix =34                   ;SEI
   1204 = 0000000000000032                            mne_sepx =50                   ;SEP
   1205 = 0000000000000007                            mne_stax =7                    ;STA
   1206 = 0000000000000039                            mne_stpx =57                   ;STP
   1207 = 0000000000000050                            mne_stxx =80                   ;STX
   1208 = 0000000000000059                            mne_styx =89                   ;STY
   1209 = 000000000000005B                            mne_stzx =91                   ;STZ
   1210 = 0000000000000048                            mne_taxx =72                   ;TAX
   1211 = 0000000000000052                            mne_tayx =82                   ;TAY
   1212 = 0000000000000018                            mne_tcdx =24                   ;TCD
   1213 = 0000000000000042                            mne_tcsx =66                   ;TCS
   1214 = 0000000000000011                            mne_tdcx =17                   ;TDC
   1215 = 000000000000000C                            mne_trbx =12                   ;TRB
   1216 = 000000000000000D                            mne_tsbx =13                   ;TSB
   1217 = 0000000000000016                            mne_tscx =22                   ;TSC
   1218 = 000000000000004F                            mne_tsxx =79                   ;TSX
   1219 = 0000000000000008                            mne_txax =8                    ;TXA
   1220 = 0000000000000045                            mne_txsx =69                   ;TXS
   1221 = 000000000000005A                            mne_txyx =90                   ;TXY
   1222 = 0000000000000009                            mne_tyax =9                    ;TYA
   1223 = 0000000000000051                            mne_tyxx =81                   ;TYX
   1224 = 0000000000000020                            mne_waix =32                   ;WAI
   1225 = 000000000000002F                            mne_wdmx =47                   ;WDM
   1226 = 0000000000000000                            mne_xbax =0                    ;XBA
   1227 = 000000000000001E                            mne_xcex =30                   ;XCE
                                        ;
                                        ;================================================================================
                                        ;
                                        ;MISCELLANEOUS CONSTANTS
                                        ;
   1233 = 0000000000000004                            halftab  =4                    ;1/2 tabulation spacing
   1234 = 3E                            memprfx  ='>'                  ;memory dump prefix
   1235 = 3A                            memsepch =':'                  ;memory dump separator
   1236 = 2E                            memsubch ='.'                  ;memory dump non-print char
   1237 = 0000000000000030                            srinit   =%00110000            ;SR initialization value
                                        ;
                                        ;================================================================================
                                        ;
                                        ;DIRECT PAGE STORAGE
                                        ;
   1243 = 00000080                      reg_csx  =zeropage			;CS
   1244 = 00000084                      reg_dsx  =reg_csx + 4		;DS
   1245 = 00000088                      reg_pcx  =reg_dsx + 4	    ;PC
   1246 = 0000008A                      reg_pbx  =reg_pcx + 2       ;PB
   1247 = 0000008B                      reg_ax   =reg_pbx + 1       ;.C
   1248 = 0000008F                      reg_xx   =reg_ax + 4        ;.X
   1249 = 00000093                      reg_yx   =reg_xx + 4        ;.Y
   1250 = 00000097                      reg_spx  =reg_yx + 4        ;SP
   1251 = 0000009B                      reg_srx  =reg_spx + 4       ;SR
   1252 = 0000009C                      reg_srxx =reg_srx + 1       ;SRX
   1253 = 0000009D                      reg_dbx  =reg_srxx + 1      ;DB
   1254 = 0000009E                      reg_dpx  =reg_dbx + 1       ;DP
                                        ;
                                        ;
                                        ;	general workspace...
                                        ;
   1259 = 000000A2                      addra    =reg_dpx+4            ;address #1
   1260 = 000000A6                      addrb    =addra+4              ;address #2
   1261 = 000000A9                      faca     =addrb+s_addr         ;primary accumulator
   1262 = 000000AD                      facax    =faca+s_pfac          ;extended primary accumulator
   1263 = 000000B1                      facb     =facax+s_pfac         ;secondary accumulator
   1264 = 000000B7                      facc     =facb+s_sfac          ;tertiary accumulator
   1265 = 000000BD                      operand  =facc+s_sfac          ;instruction operand
   1266 = 000000C0                      auxbufix =operand+s_oper       ;auxiliary buffer index
   1267 = 000000C1                      ibufidx  =auxbufix+s_byte      ;input buffer index
   1268 = 000000C2                      bitsdig  =ibufidx+s_byte       ;bits per numeral
   1269 = 000000C3                      numeral  =bitsdig+s_byte       ;numeral buffer
   1270 = 000000C4                      radix    =numeral+s_byte       ;radix index
   1271 = 000000C5                      admodidx =radix+s_byte         ;addressing mode index
   1272 = 000000C6                      charcnt  =admodidx+s_byte      ;character counter
   1273 = 000000C8                      instsize =charcnt+s_word       ;instruction size
   1274 = 000000CA                      mnepck   =instsize+s_word      ;encoded mnemonic
   1275 = 000000CC                      opcode   =mnepck+s_mnepck      ;current opcode
   1276 = 000000CD                      status   =opcode+s_byte        ;I/O status flag
   1277 = 000000CE                      xrtemp   =status+s_byte        ;temp .X storage
   1278 = 000000CF                      eopsize  =xrtemp+s_byte        ;entered operand size
   1279 = 000000D0                      flimflag =eopsize+s_byte       ;forced long immediate...
                                        ;
                                        ;	xx000000
                                        ;	||
                                        ;	|+—————————> 0: .X/.Y = 8 bits
                                        ;	|            1: .X/.Y = 18 bits
                                        ;	+——————————> 0: .A = 8 bits
                                        ;	             1: .A = 16 bits
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	During assembly, FLIMFLAG indicates the operand size used with an immed-
                                        ;	iate mode instruction, thus causing the following disassembly to display
                                        ;	the assembled  operand size.   During disassembly,  FLIMFLAG will mirror
                                        ;	the effect of the most recent REP or SEP instruction.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
   1295 = 000000D1                      iopsize  =flimflag+s_byte      ;operand size
   1296 = 000000D2                      range    =iopsize+s_byte       ;allowable radix range
   1297 = 000000D3                      vopsflag =range+s_byte         ;VOPS & ROPS mode bits
                                        ;
                                        ;
                                        ;	copy/fill workspace (overlaps some of the above)...
                                        ;
   1302 = 000000D4                      mcftwork =vopsflag+s_byte	;faca                 ;start of copy/fill code
   1303 = 000000D5                      mcftopc  =mcftwork+s_byte      ;instruction opcode
   1304 = 000000D6                      mcftbnk  =mcftopc+s_byte       ;banks
                                        ;
                                        ;================================================================================
                                        ;
                                        ;SUPERMON 816 JUMP TABLE
                                        ;
                                                 org	_origin_
                                        ;
                                           		 CPU	W65C816S
                                           		 MEM	16
                                           		 NDX	16
   1316 00C000 A9 D0 00                     		 LDA	#$D0
   1317 00C003 8D 00 70                     		 STA	$7000
                                           		 MEM	8
                                           		 NDX	8
                                        		 CPU	W65C02
   1321 C006 80 02                      JMON     bra mon               ;cold start entry
   1322 C008 80 4F                      JMONBRK  bra monbrk            ;software interrupt intercept
                                        ;
                                        ;================================================================================
                                        ;
                                        ;mon: SUPERMON 816 COLD START
                                        ;
   1328 C00A C2 20                      mon +         .byte $c2,$20
                                        
   1329 C00C AD 02 01                             lda vecbrki           ;BRK vector
   1330 C00F C9 59                    +            cmp #<monbrk
   1330 C011 C0                       +            .byte >monbrk
                                        ;pointing at monitor?
   1331 C012 D0 03                                bne .2            ;yes, ignore cold start
   1332 C014 4C A4 C0                             jmp	monreg			; got a branch out of range here when debugging code
                                        								; was included
   1334 C017                            .2
                                        ;
   1336 C017 8D 05 01                             sta vecbrkia          ;save vector for exit
   1337 C01A A9 AB                       		 LDA	#$AB
   1338 C01C 00                          		 .byte	$00
   1339 C01D 8D 00 70                    		 STA	$7000
   1340 C020 A9 59                    +            lda #<monbrk
   1340 C022 C0                       +            .byte >monbrk
                                        ;Supermon 816 intercepts...
   1341 C023 8D 02 01                             sta vecbrki           ;BRK handler
   1342 C026 E2 30                    +            .byte $e2,$30
                                                        ;8 bit registers
   1343 C028 A2 49                                ldx #vopsflag-reg_pbx
                                        ;
   1345 C02A 74 8A                      .0000010 stz reg_pbx,x         ;clear DP storage
   1346 C02C CA                                   dex
   1347 C02D 10 FB                                bpl .0000010
                                        ;
   1349 C02F A9 AC                       		 LDA	#$AC
   1350 C031 8D 00 70                    		 STA	$7000
   1351 C034 A9 30                                lda #srinit
   1352 C036 85 9B                                sta reg_srx           ;status register
   1353 C038 C2 20                    +            .byte $c2,$20
                                                         ;16 bit .A
   1354 C03A A9 FF                    +            lda #<hwstack
   1354 C03C 3F                       +            .byte >hwstack
                                        ;top of hardware stack
   1355 C03D 1B                       +            .byte $1b
                                                           ;set SP
   1356 C03E 7B                       +            .byte $7b
                                                           ;get & save...
   1357 C03F 85 9E                                sta reg_dpx           ;DP register
   1358 C041 A9 AD                       		 LDA	#$AD
   1359 C043 00                          		 .byte	$00
   1360 C044 8D 00 70                    		 STA	$7000
   1361 C047 A9 00                    +            lda #<0
   1361 C049 00                       +            .byte >0
                                        
   1362 C04A E2 20                    +            .byte $e2,$20
                                        
   1363 C04C 4B                       +            .byte $4b
                                        
   1364 C04D 68                                   pla                   ;capture PB &...
   1365 C04E 85 8A                                sta reg_pbx           ;set
   1366 C050 8B                       +            .byte $8b
                                        
   1367 C051 68                                   pla                   ;capture DB &...
   1368 C052 85 9D                                sta reg_dbx           ;set
   1369 C054 F4                       +            .byte $f4
   1369 C055 2C D0                    +            .word mm_entry
                                        ;"...ready..."
   1370 C057 80 2E                                bra moncom
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monbrk: SOFTWARE INTERRUPT INTERCEPT
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	This is the entry point taken when a BRK instruction is executed.  It is
                                        ;	assumed that the BRK  handler has pushed the registers to the stack that
                                        ;	are not automatically pushed by the MPU in response to BRK.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
   1382 C059 58                         monbrk   cli                   ;reenable IRQs
   1383 C05A                            		 phcs
   1384 C05A 68                          		 pla
   1385 C05B 85 80                       		 sta reg_csx
   1386 C05D 68                          		 pla
   1387 C05E 85 82                       		 sta reg_csx+2
   1388 C060                            		 phds
   1389 C060 68                          		 pla
   1390 C061 85 84                       		 sta reg_dsx
   1391 C063 68                          		 pla
   1392 C064 85 86                       		 sta reg_dsx+2
   1393 C066 7A                                   ply                   ;recover registers
   1394 C067 FA                                   plx
   1395 C068 68                                   pla
   1396 C069 C2 30                    +            .byte $c2,$30
                                                         ;store 16 bit registers
   1397 C06B 85 8B                                sta reg_ax            ;.A
   1398 C06D 86 8F                                stx reg_xx            ;.X
   1399 C06F 84 93                                sty reg_yx            ;.Y
   1400 C071 E2 10                    +            .byte $e2,$10
                                                        ;8 bit index registers
   1401 C073 68                                   pla                   ;get DP &...
   1402 C074 85 9E                                sta reg_dpx           ;store
   1403 C076 FA                                   plx                   ;get DB &...
   1404 C077 86 9D                                stx reg_dbx           ;store
   1405 C079 FA                                   plx                   ;get SR &...
   1406 C07A 86 9B                                stx reg_srx           ;store
   1407 C07C 68                                   pla                   ;get PC &...
   1408 C07D 85 88                                sta reg_pcx           ;store
   1409 C07F E2 20                    +            .byte $e2,$20
                                        
   1410 C081 68                                   pla                   ;get PB &...
   1411 C082 85 8A                                sta reg_pbx           ;store
   1412 C084 F4                       +            .byte $f4
   1412 C085 21 D0                    +            .word mm_brk
                                        ;"*BRK"
                                        ;
                                        ;================================================================================
                                        ;
                                        ;moncom: COMMON ENTRY POINT
                                        ;
                                        ;	——————————————————————————————————————
                                        ;	DO NOT directly call this entry point!
                                        ;	——————————————————————————————————————
                                        ;
   1422 C087                            moncom   
   1423 C087 A9 AE                       		 LDA	#$AE
   1424 C089 8D 00 70                    		 STA	$7000
   1425 C08C 20 1D C8                    		 jsr sprint            ;print heading
   1426 C08F A9 AF                       		 LDA	#$AF
   1427 C091 8D 00 70                    		 STA	$7000
   1428 C094 C2 20                    +            .byte $c2,$20
                                        
   1429 C096 3B                       +            .byte $3b
                                                           ;get SP &...
   1430 C097 85 97                                sta reg_spx           ;store
   1431 C099 A9 B0                       		 LDA	#$B0
   1432 C09B 00                          		 .byte	$00
   1433 C09C 8D 00 70                    		 STA	$7000
   1434 C09F C2 FF                    +            .byte $c2,%11111111
                                        ;clear SR &...
   1435 C0A1 E2 30                    +            .byte $e2,srinit
                                        ;set default state
   1436 C0A3 38                                   sec                   ;see next
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monreg: DISPLAY MPU REGISTERS
                                        ;
                                        ;	—————————
                                        ;	syntax: R
                                        ;	—————————
                                        ;
   1446 C0A4 B0 03                      monreg   bcs .0000010          ;okay to proceed
                                        ;
   1448 C0A6 4C 88 C1                             jmp monerr            ;error if called with a parm
                                        ;
   1450 C0A9 F4                         .0000010 +         .byte $f4
   1450 C0AA 57 D0                    +            .word mm_regs
                                        
   1451 C0AC 20 1D C8                             jsr sprint            ;display heading
                                        ;
                                        ;
                                        ;	display program bank & counter...
                                        ;
   1456 C0AF C2 20                    +            .byte $c2,$20
                                        
   1457 C0B1 A5 82                       		 lda	reg_csx+2
   1458 C0B3 E2 20                    +            .byte $e2,$20
                                        
   1459 C0B5 20 E1 C7                    		 jsr	dpyhexw
   1460 C0B8 C2 20                    +            .byte $c2,$20
                                        
   1461 C0BA A5 80                       		 lda	reg_csx
   1462 C0BC E2 20                    +            .byte $e2,$20
                                        
   1463 C0BE 20 E1 C7                    		 jsr    dpyhexw
   1464 C0C1 E2 20                    +            .byte $e2,$20
                                        
   1465 C0C3 20 18 C8                             jsr printspc          ;inter-field space
   1466 C0C6 A5 8A                                lda reg_pbx           ;PB
   1467 C0C8 20 F1 C7                             jsr dpyhex            ;display as hex ASCII
   1468 C0CB 20 18 C8                             jsr printspc          ;inter-field space
   1469 C0CE C2 20                    +            .byte $c2,$20
                                        
   1470 C0D0 A5 88                                lda reg_pcx
   1471 C0D2 E2 20                    +            .byte $e2,$20
                                        
   1472 C0D4 20 E1 C7                             jsr dpyhexw           ;display PC
   1473 C0D7 A2 02                                ldx #2
   1474 C0D9 20 FB C7                             jsr multspc           ;inter-field spacing
                                        ;
                                        ;
                                        ;	display SR in bitwise fashion...
                                        ;
   1479 C0DC A5 9C                       		 lda reg_srxx
   1480 C0DE 4A                          		 lsr
   1481 C0DF 4A                          		 lsr
   1482 C0E0 69 30                       		 adc #'0'
   1483 C0E2 20 06 F4                    		 jsr putcha
   1484 C0E5 A5 9C                       		 lda reg_srxx
   1485 C0E7 4A                          		 lsr
   1486 C0E8 69 30                       		 adc #'0'
   1487 C0EA 20 06 F4                    		 jsr putcha
                                        
   1489 C0ED A6 9B                                ldx reg_srx           ;SR
   1490 C0EF A0 08                                ldy #s_bibyte         ;bits in a byte
                                        ;
   1492 C0F1 8A                         .0000020 txa                   ;remaining SR bits
   1493 C0F2 0A                                   asl                   ;grab one of them
   1494 C0F3 AA                                   tax                   ;save remainder
   1495 C0F4 A9 30                                lda #'0'              ;a clear bit but...
   1496 C0F6 69 00                                adc #0                ;adjust if set &...
   1497 C0F8 20 06 F4                             jsr putcha            ;print
   1498 C0FB 88                                   dey                   ;bit processed
   1499 C0FC D0 F3                                bne .0000020          ;do another
                                        ;
                                        ;
                                        ;	display .C, .X, .Y, SP & DP...
                                        ;
   1504 C0FE 20 18 C8                   .0000030 jsr printspc          ;spacing
   1505 C101 C2 20                    +            .byte $c2,$20
                                        
   1506 C103 B9 8D 00                             lda reg_ax+2,y        ;get register value
   1507 C106 E2 20                    +            .byte $e2,$20
                                        
   1508 C108 20 E1 C7                             jsr dpyhexw           ;convert & display
   1509 C10B C2 20                    +            .byte $c2,$20
                                        
   1510 C10D B9 8B 00                             lda reg_ax,y          ;get register value
   1511 C110 E2 20                    +            .byte $e2,$20
                                        
   1512 C112 20 E1 C7                             jsr dpyhexw           ;convert & display
                                        ;         .rept s_word
   1514 C115 C8                                     iny
   1515 C116 C8                                     iny
                                        ;         .endr
                                        ;         .rept s_word
   1518 C117 C8                                     iny
   1519 C118 C8                                     iny
                                        ;         .endr
   1521 C119 C0 0F                                cpy #reg_spx-reg_ax+3
   1522 C11B 90 E1                                bcc .0000030          ;next
                                        ;
                                        ;
                                        ;	display DS DB...
                                        ;
   1527 C11D F4                       +            .byte $f4
   1527 C11E B7 D0                    +            .word mm_regs2
                                        
   1528 C120 20 1D C8                    		 jsr sprint
   1529 C123 C2 20                    +            .byte $c2,$20
                                        
   1530 C125 A5 86                                lda reg_dsx+2         ;get DS &...
   1531 C127 E2 20                    +            .byte $e2,$20
                                        
   1532 C129 20 E1 C7                             jsr dpyhexw           ;convert & display
   1533 C12C C2 20                    +            .byte $c2,$20
                                        
   1534 C12E A5 84                                lda reg_dsx           ;get DS &...
   1535 C130 E2 20                    +            .byte $e2,$20
                                        
   1536 C132 20 E1 C7                             jsr dpyhexw           ;convert & display
   1537 C135 20 18 C8                             jsr printspc          ;more spacing
   1538 C138 A5 9D                                lda reg_dbx           ;get DB &...
   1539 C13A 20 F1 C7                             jsr dpyhex            ;display it
   1540 C13D 20 18 C8                             jsr printspc          ;more spacing
   1541 C140 C2 20                    +            .byte $c2,$20
                                        
   1542 C142 A5 9E                                lda reg_dpx           ;get DPR &...
   1543 C144 E2 20                    +            .byte $e2,$20
                                        
   1544 C146 20 E1 C7                             jsr dpyhexw           ;convert & display
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monce: COMMAND EXECUTIVE
                                        ;	
   1550 C149 E2 20                      monce +         .byte $e2,$20
                                        
   1551 C14B A9 00                                lda #0                ;default buffer index
                                        ;
   1553 C14D E2 30                      moncea +         .byte $e2,$30
                                                        ;alternate entry point
   1554 C14F 85 C1                                sta ibufidx           ;(re)set buffer index
   1555 C151 F4                       +            .byte $f4
   1555 C152 4E D0                    +            .word mm_prmpt
                                        
   1556 C154 20 1D C8                             jsr sprint            ;display input prompt
   1557 C157 20 3D CC                             jsr input             ;await some input
                                        ;
   1559 C15A                            .0000010:
   1560 C15A 20 9B CC                    		jsr getcharc          ;read from buffer
   1561 C15D F0 EA                                beq monce             ;terminator, just loop
                                        ;
   1563 C15F C9 20                                cmp #a_blank
   1564 C161 F0 F7                                beq .0000010          ;strip leading blanks
                                        ;
   1566 C163 A2 0C                                ldx #n_mpctab-1       ;number of primary commands
                                        ;
   1568 C165 DD B8 CC                   .0000020 cmp mpctab,x          ;search primary command list
   1569 C168 D0 0E                                bne .0000030
                                        ;
   1571 C16A 8A                                   txa                   ;get index
   1572 C16B 0A                                   asl                   ;double for offset
   1573 C16C AA                                   tax
   1574 C16D C2 20                    +            .byte $c2,$20
                                        
   1575 C16F BD C5 CC                             lda mpcextab,x        ;command address -1
   1576 C172 48                                   pha                   ;prime the stack
   1577 C173 E2 20                    +            .byte $e2,$20
                                        
   1578 C175 4C E1 CA                             jmp getparm           ;evaluate parm & execute command
                                        ;
   1580 C178 CA                         .0000030 dex
   1581 C179 10 EA                                bpl .0000020          ;continue searching primary commands
                                        ;
   1583 C17B A2 03                                ldx #n_radix-1        ;number of radices
                                        ;
   1585 C17D DD F3 CC                   .0000040 cmp radxtab,x         ;search conversion command list
   1586 C180 D0 03                                bne .0000050
                                        ;
   1588 C182 4C D0 C5                             jmp monenv            ;convert & display parameter
                                        ;
   1590 C185 CA                         .0000050 dex
   1591 C186 10 F5                                bpl .0000040
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monerr: COMMON ERROR HANDLER
                                        ;
   1597 C188 E2 30                      monerr +         .byte $e2,$30
                                                        ;8 bit registers
                                        ;
   1599 C18A 20 C8 C7                   monerraa jsr dpyerr            ;indicate an error &...
   1600 C18D 80 BA                                bra monce             ;return to input loop
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monasc: ASSEMBLE CODE
                                        ;
                                        ;	———————————————————————————————————————————————————————————————————————
                                        ;	syntax: A <addr> <mnemonic> [<argument>]
                                        ;
                                        ;	After a line of code has been successfully assembled it will be disass-
                                        ;	embled & displayed,  & the monitor will prompt with the next address to
                                        ;	which code may be assembled.
                                        ;	———————————————————————————————————————————————————————————————————————
                                        ;
   1614 C18F 90 03                      monasc   bcc .0000020          ;assembly address entered
                                        ;
   1616 C191 4C 88 C1                   .0000010 jmp monerr            ;terminate w/error
                                        ;
                                        ;
                                        ;	evaluate assembly address...
                                        ;
   1621 C194 20 CD CA                   .0000020 jsr facasize          ;check address...
   1622 C197 C9 04                                cmp #s_dword          ;range
   1623 C199 B0 F6                                bcs .0000010          ;out of range — error
                                        ;
   1625 C19B 20 AF CA                             jsr facaddra          ;store assembly address
                                        ;
                                        ;
                                        ;	initialize workspace...
                                        ;
   1630 C19E A2 1F                                ldx #s_auxbuf-s_byte
                                        ;
   1632 C1A0 9E 51 02                   .0000030 stz auxbuf,x          ;clear addressing mode buffer
   1633 C1A3 CA                                   dex
   1634 C1A4 D0 FA                                bne .0000030
                                        ;
   1636 C1A6 A9 20                                lda #a_blank
   1637 C1A8 8D 51 02                             sta auxbuf            ;preamble placeholder
   1638 C1AB 20 1C CA                             jsr clroper           ;clear operand
   1639 C1AE 64 C0                                stz auxbufix          ;reset addressing mode index
   1640 C1B0 64 D0                                stz flimflag          ;clear forced long immediate
   1641 C1B2 64 CA                                stz mnepck            ;clear encoded...
   1642 C1B4 64 CB                                stz mnepck+s_byte     ;mnemonic workspace
   1643 C1B6 64 D3                                stz vopsflag          ;clear 8/16 or relative flag
                                        ;
                                        ;
                                        ;	encode mnemonic...
                                        ;
   1648 C1B8 A0 03                                ldy #s_mnemon         ;expected mnemonic size
                                        ;
   1650 C1BA 20 2E CC                   .0000040 jsr getcharw          ;get from buffer wo/whitespace
   1651 C1BD D0 0A                                bne .0000060          ;gotten
                                        ;
   1653 C1BF C0 03                                cpy #s_mnemon         ;any input at all?
   1654 C1C1 90 03                                bcc .0000050          ;yes
                                        ;
   1656 C1C3 4C 49 C1                             jmp monce             ;no, abort further assembly
                                        ;
   1658 C1C6 4C 66 C3                   .0000050 jmp monasc10          ;incomplete mnemonic — error
                                        ;
   1660 C1C9 38                         .0000060 sec
   1661 C1CA E9 3F                                sbc #a_mnecvt         ;ASCII to binary factor
   1662 C1CC A2 05                                ldx #n_shfenc         ;shifts required to encode
                                        ;
   1664 C1CE 4A                         .0000070 lsr                   ;shift out a bit...
   1665 C1CF 66 CB                                ror mnepck+s_byte     ;into...
   1666 C1D1 66 CA                                ror mnepck            ;encoded mnemonic
   1667 C1D3 CA                                   dex
   1668 C1D4 D0 F8                                bne .0000070          ;next bit
                                        ;
   1670 C1D6 88                                   dey
   1671 C1D7 D0 E1                                bne .0000040          ;get next char
                                        ;
                                        ;
                                        ;	test for copy instruction...
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	The MVN & MVP instructions accept two operands & hence have an irregular
                                        ;	syntax.  Therefore, special handling is necessary to assemble either of
                                        ;	these instructions.
                                        ;
                                        ;	The official WDC syntax has the programmer entering a pair of 24 bit ad-
                                        ;	dresses as operands, with the assembler isolating bits 16-23 to	use as
                                        ;	operands.  This formality has been dispensed with in this monitor & the
                                        ;	operands are expected to be 8 bit bank values.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
   1686 C1D9 C2 20                    +            .byte $c2,$20
                                                         ;16 bit load
   1687 C1DB A5 CA                                lda mnepck            ;packed menmonic
   1688 C1DD A2 54                                ldx #opc_mvn          ;MVN opcode
   1689 C1DF C9 DC                    +            cmp #<mne_mvn
   1689 C1E1 7D                       +            .byte >mne_mvn
                                        ;is it MVN?
   1690 C1E2 F0 07                                beq monasc01          ;yes
                                        ;
   1692 C1E4 A2 44                                ldx #opc_mvp          ;MVP opcode
   1693 C1E6 C9 DC                    +            cmp #<mne_mvp
   1693 C1E8 8D                       +            .byte >mne_mvp
                                        ;is it MVP?
   1694 C1E9 D0 30                                bne monasc02          ;no
                                        ;
                                        ;
                                        ;	assemble copy instruction...
                                        ;
   1699 C1EB 86 CC                      monasc01 stx opcode            ;store relevant opcode
   1700 C1ED E2 20                    +            .byte $e2,$20
                                        
   1701 C1EF 20 3D CB                             jsr instdata          ;get instruction data
   1702 C1F2 86 CF                                stx eopsize           ;effective operand size
   1703 C1F4 E8                                   inx
   1704 C1F5 86 C8                                stx instsize          ;instruction size
   1705 C1F7 A2 01                                ldx #s_oper-s_word    ;operand index
   1706 C1F9 86 CE                                stx xrtemp            ;set it
                                        ;
   1708 C1FB 20 36 C8                   .0000010 jsr ascbin            ;evaluate bank number
   1709 C1FE B0 50                                bcs monasc04          ;conversion error
                                        ;
   1711 C200 F0 4E                                beq monasc04          ;nothing returned — error
                                        ;
   1713 C202 20 CD CA                             jsr facasize          ;bank must be...
   1714 C205 C9 02                                cmp #s_word           ;8 bits
   1715 C207 B0 47                                bcs monasc04          ;it isn't — error
                                        ;
   1717 C209 A5 A9                                lda faca              ;bank
   1718 C20B A6 CE                                ldx xrtemp            ;operand index
   1719 C20D 95 BD                                sta operand,x         ;store
   1720 C20F C6 CE                                dec xrtemp            ;index=index-1
   1721 C211 10 E8                                bpl .0000010          ;get destination bank
                                        ;
   1723 C213 20 CE CB                             jsr getcharr          ;should be no more input
   1724 C216 D0 38                                bne monasc04          ;there is — error
                                        ;
   1726 C218 4C 16 C3                             jmp monasc08          ;finish MVN/MVP assembly 
                                        ;
                                        ;
                                        ;	continue with normal assembly...
                                        ;
   1731 C21B E2 20                      monasc02 +         .byte $e2,$20
                                                        ;back to 8 bits
                                        ;
   1733 C21D 20 2E CC                   monasc03 jsr getcharw          ;get next char
   1734 C220 F0 3D                                beq monasc06          ;EOI, no argument
                                        ;
   1736 C222 C9 21                                cmp #amp_flim
   1737 C224 D0 0A                                bne .0000010          ;no forced long immediate
                                        ;
   1739 C226 A5 D0                                lda flimflag          ;FLIM already set?
   1740 C228 D0 26                                bne monasc04          ;yes — error
                                        ;
   1742 C22A A9 C0                                lda #flimmask
   1743 C22C 85 D0                                sta flimflag          ;set flag &...
   1744 C22E 80 ED                                bra monasc03          ;get next char
                                        ;
   1746 C230 C9 23                      .0000010 cmp #amp_imm          ;immediate mode?
   1747 C232 F0 08                                beq .0000020          ;yes
                                        ;
   1749 C234 C9 28                                cmp #amp_ind          ;indirect mode?
   1750 C236 F0 04                                beq .0000020          ;yes
                                        ;
   1752 C238 C9 5B                                cmp #amp_indl         ;indirect long mode?
   1753 C23A D0 07                                bne .0000030          ;no
                                        ;
   1755 C23C 8D 51 02                   .0000020 sta auxbuf            ;set addressing mode preamble
   1756 C23F E6 C0                                inc auxbufix          ;bump aux buffer index &...
   1757 C241 80 02                                bra .0000040          ;evaluate operand
                                        ;
   1759 C243 C6 C1                      .0000030 dec ibufidx           ;position back to char
                                        ;
   1761 C245 20 36 C8                   .0000040 jsr ascbin            ;evaluate operand
   1762 C248 D0 09                                bne monasc05          ;evaluated
                                        ;
   1764 C24A B0 04                                bcs monasc04          ;conversion error
                                        ;
   1766 C24C A5 C0                                lda auxbufix          ;no operand...any preamble?
   1767 C24E F0 0F                                beq monasc06          ;no, syntax is okay so far
                                        ;
   1769 C250 4C 66 C3                   monasc04 jmp monasc10          ;abort w/error
                                        ;
   1771 C253 20 CD CA                   monasc05 jsr facasize          ;size operand
   1772 C256 C9 04                                cmp #s_dword          ;max is 24 bits
   1773 C258 B0 F6                                bcs monasc04          ;too big
                                        ;
   1775 C25A 85 CF                                sta eopsize           ;save operand size
   1776 C25C 20 C3 CA                             jsr facaoper          ;store operand
                                        ;
   1778 C25F C6 C1                      monasc06 dec ibufidx           ;back to last char
   1779 C261 A6 C0                                ldx auxbufix          ;mode buffer index
   1780 C263 D0 01                                bne .0000010          ;preamble in buffer
                                        ;
   1782 C265 E8                                   inx                   ;step past preamble position
                                        ;
   1784 C266 20 9B CC                   .0000010 jsr getcharc          ;get a char w/forced UC
   1785 C269 F0 0A                                beq .0000030          ;EOI
                                        ;
   1787 C26B E0 20                                cpx #s_auxbuf         ;mode buffer full?
   1788 C26D B0 E1                                bcs monasc04          ;yes, too much input
                                        ;
   1790 C26F 9D 51 02                   .0000020 sta auxbuf,x          ;store for comparison
   1791 C272 E8                                   inx
   1792 C273 D0 F1                                bne .0000010
                                        ;
                                        ;
                                        ;	evaluate mnemonic...
                                        ;
   1797 C275 A2 5B                      .0000030 ldx #n_mnemon-1       ;starting mnemonic index
                                        ;
   1799 C277 8A                         monasc07 txa                   ;convert index...
   1800 C278 0A                                   asl                   ;to offset
   1801 C279 A8                                   tay                   ;now mnemonic table index
   1802 C27A C2 20                    +            .byte $c2,$20
                                                         ;16 bit compare
   1803 C27C B9 00 CD                             lda mnetab,y          ;get mnemonic from table
   1804 C27F C5 CA                                cmp mnepck            ;compare to entered mnemonic
   1805 C281 E2 20                    +            .byte $e2,$20
                                                        ;back to 8 bits
   1806 C283 F0 05                                beq .0000020          ;match
                                        ;
   1808 C285 CA                         .0000010 dex                   ;try next mnemonic
   1809 C286 30 C8                                bmi monasc04          ;unknown mnemonic — error
                                        ;
   1811 C288 80 ED                                bra monasc07          ;keep going
                                        ;
   1813 C28A 86 CA                      .0000020 stx mnepck            ;save mnemonic index
   1814 C28C 8A                                   txa
   1815 C28D A2 00                                ldx #0                ;trial opcode
                                        ;
   1817 C28F DD B8 CD                   .0000030 cmp mnetabix,x        ;search index table...
   1818 C292 F0 05                                beq .0000050          ;for a match
                                        ;
   1820 C294 E8                         .0000040 inx                   ;keep going until we...
   1821 C295 D0 F8                                bne .0000030          ;search entire table
                                        ;
   1823 C297 80 B7                                bra monasc04          ;this shouldn't happen!
                                        ;
                                        ;	—————————————————————————————————————————————————————————————————————
                                        ;	If the mnemonic index table search fails then there is a coding error
                                        ;	somewhere, as every entry in the mnemonic table is supposed to have a
                                        ;	matching cardinal index.
                                        ;	—————————————————————————————————————————————————————————————————————
                                        ;
                                        ;
                                        ;	evaluate addressing mode...
                                        ;
   1834 C299 86 CC                      .0000050 stx opcode            ;save trial opcode
   1835 C29B 20 3D CB                             jsr instdata          ;get related instruction data
   1836 C29E 85 D3                                sta vopsflag          ;save 8/16 or relative flag
   1837 C2A0 86 D1                                stx iopsize           ;operand size
   1838 C2A2 E8                                   inx
   1839 C2A3 86 C8                                stx instsize          ;instruction size
   1840 C2A5 A6 CC                                ldx opcode            ;recover trial opcode
   1841 C2A7 98                                   tya                   ;addressing mode
   1842 C2A8 0A                                   asl                   ;create table index
   1843 C2A9 A8                                   tay
   1844 C2AA C2 20                    +            .byte $c2,$20
                                        
   1845 C2AC B9 BC CF                             lda ms_lutab,y        ;mode lookup table
   1846 C2AF 85 A6                                sta addrb             ;set pointer
   1847 C2B1 E2 20                    +            .byte $e2,$20
                                        
   1848 C2B3 A0 00                                ldy #0
                                        ;
   1850 C2B5 B1 A6                      .0000060 lda (addrb),y         ;table addressing mode
   1851 C2B7 D9 51 02                             cmp auxbuf,y          ;entered addressing mode
   1852 C2BA F0 04                                beq .0000080          ;okay so far
                                        ;
   1854 C2BC A5 CA                      .0000070 lda mnepck            ;reload mnemonic index        
   1855 C2BE 80 D4                                bra .0000040          ;wrong opcode for addresing mode
                                        ;
   1857 C2C0 09 00                      .0000080 ora #0                ;last char the terminator?
   1858 C2C2 F0 03                                beq .0000090          ;yes, evaluate operand
                                        ;
   1860 C2C4 C8                                   iny
   1861 C2C5 80 EE                                bra .0000060          ;keep testing
                                        ;
                                        ;
                                        ;	evaluate operand...
                                        ;
   1866 C2C7 A5 CF                      .0000090 lda eopsize           ;entered operand size
   1867 C2C9 D0 06                                bne .0000100          ;non-zero
                                        ;
   1869 C2CB 05 D1                                ora iopsize           ;instruction operand size
   1870 C2CD D0 ED                                bne .0000070          ;wrong opcode — keep trying
                                        ;
   1872 C2CF 80 45                                bra monasc08          ;assemble instruction
                                        ;
   1874 C2D1 24 D3                      .0000100 bit vopsflag          ;is this a branch?
   1875 C2D3 70 3A                                bvs .0000160          ;yes, evaluate
                                        ;
   1877 C2D5 A5 D1                                lda iopsize           ;instruction operand size
   1878 C2D7 24 D3                                bit vopsflag          ;variable size operand allowed?
   1879 C2D9 30 15                                bmi .0000130          ;yes
                                        ;
   1881 C2DB 24 D0                                bit flimflag          ;was forced immediate set?
   1882 C2DD 10 03                                bpl .0000110          ;no
                                        ;         
   1884 C2DF 4C 66 C3                             jmp monasc10          ;yes — error
                                        ;
   1886 C2E2 C5 CF                      .0000110 cmp eopsize           ;entered operand size
   1887 C2E4 90 D6                                bcc .0000070          ;operand too big
                                        ;
   1889 C2E6 85 CF                                sta eopsize           ;new operand size
   1890 C2E8 80 2C                                bra monasc08          ;assemble, otherwise...
                                        ;
   1892 C2EA C5 CF                      .0000120 cmp eopsize           ;exact size match required
   1893 C2EC D0 CE                                bne .0000070          ;mismatch — wrong opcode
                                        ;
   1895 C2EE 80 26                                bra monasc08          ;assemble
                                        ;
                                        ;
                                        ;	process variable size immediate mode operand...
                                        ;
   1900 C2F0 A6 CF                      .0000130 ldx eopsize           ;entered operand size
   1901 C2F2 E0 03                                cpx #s_xword          ;check size
   1902 C2F4 B0 70                                bcs monasc10          ;too big — error
                                        ;
   1904 C2F6 24 D0                                bit flimflag          ;forced long immediate?
   1905 C2F8 10 06                                bpl .0000140          ;no
                                        ;
   1907 C2FA A2 02                                ldx #s_word           ;promote operand size to...
   1908 C2FC 86 CF                                stx eopsize           ;16 bits
   1909 C2FE 80 08                                bra .0000150
                                        ;
   1911 C300 E0 02                      .0000140 cpx #s_word           ;16 bits?
   1912 C302 D0 04                                bne .0000150          ;no
                                        ;
   1914 C304 A0 C0                                ldy #flimmask         ;yes so force long...
   1915 C306 84 D0                                sty flimflag          ;immediate disassembly
                                        ;
   1917 C308 1A                         .0000150 ina                   ;new instruction operand size
   1918 C309 C5 CF                                cmp eopsize           ;compare against operand size
   1919 C30B 90 AF                                bcc .0000070          ;mismatch — can't assemble
                                        ;
   1921 C30D 80 07                                bra monasc08          ;okay, assemble
                                        ;
                                        ;
                                        ;	process relative branch...
                                        ;
   1926 C30F 20 89 CB                   .0000160 jsr targoff           ;compute branch offset
   1927 C312 B0 52                                bcs monasc10          ;branch out of range
                                        ;
   1929 C314 85 CF                                sta eopsize           ;effective operand size
                                        ;
                                        ;
                                        ;	assemble instruction...
                                        ;
   1934 C316 A5 CC                      monasc08 lda opcode            ;opcode
   1935 C318 87 A2                    +            .byte $87,addra
                                        ;store at assembly address
   1936 C31A A6 CF                                ldx eopsize           ;any operand to process?
   1937 C31C F0 09                                beq .0000020          ;no
                                        ;
   1939 C31E 9B                       +            .byte $9b
                                                           ;also storage offset
                                        ;
   1941 C31F CA                         .0000010 dex
   1942 C320 B5 BD                                lda operand,x         ;get operand byte &...
   1943 C322 97 A2                    +            .byte $97,addra
                                        ;poke into memory
   1944 C324 88                                   dey
   1945 C325 D0 F8                                bne .0000010          ;next
                                        ;
   1947 C327 A9 0D                      .0000020 lda #a_cr
   1948 C329 20 06 F4                             jsr putcha            ;return to left margin
   1949 C32C A9 41                                lda #asmprfx          ;assembly prefix
   1950 C32E 20 71 C6                             jsr dpycodaa          ;disassemble & display
                                        ;
                                        ;
                                        ;	prompt for next instruction...
                                        ;
   1955 C331 A9 20                      monasc09 lda #a_blank
   1956 C333 A2 08                                ldx #ascprmct-1
                                        ;
   1958 C335 9D 00 02                   .0000010 sta ibuffer,x         ;prepare buffer for...
   1959 C338 CA                                   dex                   ;next instruction
   1960 C339 10 FA                                bpl .0000010
                                        ;
   1962 C33B A9 41                                lda #asmprfx          ;assemble code...
   1963 C33D 8D 00 02                             sta ibuffer           ;prompt prefix
   1964 C340 A5 A4                                lda addra+s_word      ;next instruction address bank
   1965 C342 20 88 C9                             jsr binhex            ;convert to ASCII
   1966 C345 8D 02 02                             sta ibuffer+apadrbkh  ;store MSN in buffer
   1967 C348 8E 03 02                             stx ibuffer+apadrbkl  ;store LSN in buffer
   1968 C34B A5 A3                                lda addra+s_byte      ;next instruction address MSB
   1969 C34D 20 88 C9                             jsr binhex
   1970 C350 8D 04 02                             sta ibuffer+apadrmbh
   1971 C353 8E 05 02                             stx ibuffer+apadrmbl
   1972 C356 A5 A2                                lda addra             ;next instruction address LSB
   1973 C358 20 88 C9                             jsr binhex
   1974 C35B 8D 06 02                             sta ibuffer+apadrlbh
   1975 C35E 8E 07 02                             stx ibuffer+apadrlbl
   1976 C361 A9 09                                lda #ascprmct         ;effective input count
   1977 C363 4C 4D C1                             jmp moncea            ;reenter input loop
                                        ;
                                        ;
                                        ;	process assembly error...
                                        ;
   1982 C366 20 C8 C7                   monasc10 jsr dpyerr            ;indicate error &...
   1983 C369 80 C6                                bra monasc09          ;prompt w/same assembly address
                                        ;
                                        ;================================================================================
                                        ;
                                        ;mondsc: DISASSEMBLE CODE
                                        ;
                                        ;	—————————————————————————————
                                        ;	syntax: D [<addr1> [<addr2>]]
                                        ;	—————————————————————————————
                                        ;
   1993 C36B B0 11                      mondsc   bcs .0000010          ;no parameters
                                        ;
   1995 C36D 64 D0                                stz flimflag          ;reset to 8 bit mode
   1996 C36F 20 CD CA                             jsr facasize          ;check starting...
   1997 C372 C9 04                                cmp #s_dword          ;address
   1998 C374 B0 46                                bcs .0000050          ;out of range — error
                                        ;
   2000 C376 20 AF CA                             jsr facaddra          ;copy starting address
   2001 C379 20 E1 CA                             jsr getparm           ;get ending address
   2002 C37C 90 17                                bcc .0000020          ;gotten
                                        ;
   2004 C37E 20 9B C9                   .0000010 jsr clrfaca           ;clear accumulator
   2005 C381 C2 20                    +            .byte $c2,$20
                                        
   2006 C383 18                                   clc
   2007 C384 A5 A2                                lda addra             ;starting address
   2008 C386 69 15                    +            adc #<n_dbytes
   2008 C388 00                       +            .byte >n_dbytes
                                        ;default bytes
   2009 C389 85 A9                                sta faca              ;effective ending address
   2010 C38B E2 20                    +            .byte $e2,$20
                                        
   2011 C38D A5 A4                                lda addra+s_word      ;starting bank
   2012 C38F 69 00                                adc #0
   2013 C391 85 AB                                sta faca+s_word       ;effective ending bank
   2014 C393 B0 27                                bcs .0000050          ;end address > $FFFFFF
                                        ;
   2016 C395 20 CD CA                   .0000020 jsr facasize          ;check ending...
   2017 C398 C9 04                                cmp #s_dword          ;address
   2018 C39A B0 20                                bcs .0000050          ;out of range — error
                                        ;
   2020 C39C 20 B9 CA                             jsr facaddrb          ;set ending address
   2021 C39F 20 E1 CA                             jsr getparm           ;check for excess input
   2022 C3A2 90 18                                bcc .0000050          ;present — error
                                        ;
   2024 C3A4 20 07 CA                             jsr calccnt           ;calculate bytes
   2025 C3A7 90 13                                bcc .0000050          ;end < start
                                        ;
   2027 C3A9 20 AD CC                   .0000030 jsr teststop          ;test for display stop
   2028 C3AC B0 0B                                bcs .0000040          ;stopped
                                        ;
   2030 C3AE 20 08 C8                             jsr newline           ;next line
   2031 C3B1 20 6F C6                             jsr dpycod            ;disassemble & display
   2032 C3B4 20 65 CA                             jsr decdcnt           ;decrement byte count
   2033 C3B7 90 F0                                bcc .0000030          ;not done
                                        ;
   2035 C3B9 4C 49 C1                   .0000040 jmp monce             ;back to main loop
                                        ;
   2037 C3BC 4C 88 C1                   .0000050 jmp monerr            ;address range error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monjmp: EXECUTE CODE
                                        ;
                                        ;	—————————————————————————————————————————————————————————————
                                        ;	syntax: G [<addr>]
                                        ;
                                        ;	If no address is specified, the current values in the PB & PC
                                        ;	shadow registers are used.
                                        ;	—————————————————————————————————————————————————————————————
                                        ;
   2050 C3BF 20 72 CB                   monjmp   jsr setxaddr          ;set execution address
   2051 C3C2 B0 29                                bcs monjmpab          ;out of range — error
                                        ;
   2053 C3C4 20 E1 CA                             jsr getparm           ;check for excess input
   2054 C3C7 90 24                                bcc monjmpab          ;too much input — error
                                        ;
   2056 C3C9 C2 20                    +            .byte $c2,$20
                                                         ;16 bit .A
   2057 C3CB A5 97                                lda reg_spx
   2058 C3CD 1B                       +            .byte $1b
                                                           ;restore SP
                                        ;
   2060 C3CE E2 20                      monjmpaa +         .byte $e2,$20
                                        
   2061 C3D0 A5 8A                                lda reg_pbx
   2062 C3D2 48                                   pha                   ;restore PB
   2063 C3D3 C2 20                    +            .byte $c2,$20
                                        
   2064 C3D5 A5 88                                lda reg_pcx
   2065 C3D7 48                                   pha                   ;restore PC
   2066 C3D8 E2 20                    +            .byte $e2,$20
                                        
   2067 C3DA A5 9B                                lda reg_srx
   2068 C3DC 48                                   pha                   ;restore SR
   2069 C3DD A5 9D                                lda reg_dbx
   2070 C3DF 48                                   pha
   2071 C3E0 AB                       +            .byte $ab
                                                           ;restore DB
   2072 C3E1 C2 30                    +            .byte $c2,$30
                                        
   2073 C3E3 A5 9E                                lda reg_dpx
   2074 C3E5 5B                       +            .byte $5b
                                                           ;restore DP
   2075 C3E6 A5 8B                                lda reg_ax            ;restore .C
   2076 C3E8 A6 8F                                ldx reg_xx            ;restore .X
   2077 C3EA A4 93                                ldy reg_yx            ;restore .Y
   2078 C3EC 40                                   rti                   ;execute code
                                        ;
   2080 C3ED 4C 88 C1                   monjmpab jmp monerr            ;error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monjsr: EXECUTE CODE AS SUBROUTINE
                                        ;
                                        ;	————————————————————————————————————————————————————————————
                                        ;	syntax: J [<addr>]
                                        ;
                                        ;	If no address is specified the current values in the PB & PC
                                        ;	shadow registers are used.   An RTS at the end of the called
                                        ;	subroutine will return control to the monitor  provided  the
                                        ;	stack remains in balance.
                                        ;	————————————————————————————————————————————————————————————
                                        ;
   2095 C3F0 20 72 CB                   monjsr   jsr setxaddr          ;set execution address
   2096 C3F3 B0 F8                                bcs monjmpab          ;out of range — error
                                        ;
   2098 C3F5 20 E1 CA                             jsr getparm           ;check for excess input
   2099 C3F8 90 F3                                bcc monjmpab          ;too much input — error
                                        ;
   2101 C3FA C2 20                    +            .byte $c2,$20
                                        
   2102 C3FC A5 97                                lda reg_spx
   2103 C3FE 1B                       +            .byte $1b
                                                           ;restore SP &...
   2104 C3FF 20 CE C3                             jsr monjmpaa          ;call subroutine
   2105 C402 08                                   php                   ;push SR
   2106 C403 C2 30                    +            .byte $c2,$30
                                        
   2107 C405 85 8B                                sta reg_ax            ;save...
   2108 C407 86 8F                                stx reg_xx            ;register...
   2109 C409 84 93                                sty reg_yx            ;returns
   2110 C40B E2 10                    +            .byte $e2,$10
                                                        ;8 bit .X & .Y
   2111 C40D FA                                   plx                   ;get & save...
   2112 C40E 86 9B                                stx reg_srx           ;return SR
   2113 C410 3B                       +            .byte $3b
                                                           ;get & save...
   2114 C411 85 97                                sta reg_spx           ;return SP
   2115 C413 7B                       +            .byte $7b
                                                           ;get & save...
   2116 C414 85 9E                                sta reg_dpx           ;DP pointer
   2117 C416 E2 20                    +            .byte $e2,$20
                                                        ;8 bit .A
   2118 C418 4B                       +            .byte $4b
                                                           ;get &...
   2119 C419 68                                   pla                   ;save...
   2120 C41A 85 8A                                sta reg_pbx           ;return PB
   2121 C41C 8B                       +            .byte $8b
                                                           ;get &...
   2122 C41D 68                                   pla                   ;save...
   2123 C41E 85 9D                                sta reg_dbx           ;return DB
   2124 C420 F4                       +            .byte $f4
   2124 C421 CF D0                    +            .word mm_rts
                                        ;"*RET"
   2125 C423 4C 87 C0                             jmp moncom            ;return to monitor
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monchm: CHANGE and/or DUMP MEMORY
                                        ;
                                        ;	————————————————————————————————————————————
                                        ;	syntax: > [<addr> <operand> [<operand>]...]
                                        ;
                                        ;	> <addr> without operands will dump 16 bytes
                                        ;	of memory, starting at <addr>.
                                        ;	————————————————————————————————————————————
                                        ;
   2138 C426 B0 23                      monchm   bcs .0000030          ;no address given — quit
                                        ;
   2140 C428 20 CD CA                             jsr facasize          ;size address
   2141 C42B C9 04                                cmp #s_dword
   2142 C42D B0 1F                                bcs .0000040          ;address out of range — error
                                        ;
   2144 C42F 20 AF CA                             jsr facaddra          ;set starting address
   2145 C432 20 E2 CB                             jsr getpat            ;evaluate change pattern
   2146 C435 90 04                                bcc .0000010          ;entered
                                        ;
   2148 C437 10 0C                                bpl .0000020          ;not entered
                                        ;
   2150 C439 80 13                                bra .0000040          ;evaluation error
                                        ;
   2152 C43B 88                         .0000010 dey                   ;next byte
   2153 C43C 30 07                                bmi .0000020          ;done
                                        ;
   2155 C43E B9 51 02                             lda auxbuf,y          ;write pattern...
   2156 C441 97 A2                    +            .byte $97,addra
                                        ;to memory
   2157 C443 80 F6                                bra .0000010          ;next
                                        ;
   2159 C445 20 08 C8                   .0000020 jsr newline           ;next line
   2160 C448 20 85 C7                             jsr dpymem            ;regurgitate changes
                                        ;
   2162 C44B 4C 49 C1                   .0000030 jmp monce             ;back to command loop
                                        ;
   2164 C44E 4C 88 C1                   .0000040 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;moncmp: COMPARE MEMORY
                                        ;
                                        ;	—————————————————————————————
                                        ;	syntax: C <start> <end> <ref>
                                        ;	—————————————————————————————
                                        ;
   2174 C451 B0 26                      moncmp   bcs .0000030          ;start not given — quit
                                        ;
   2176 C453 20 89 CA                             jsr enddest           ;get end & reference addresses
   2177 C456 B0 24                                bcs .0000040          ;range or other error
                                        ;
   2179 C458 64 CE                                stz xrtemp            ;column counter
                                        ;
   2181 C45A 20 AD CC                   .0000010 jsr teststop          ;check for stop
   2182 C45D B0 1A                                bcs .0000030          ;abort
                                        ;
   2184 C45F A7 A2                    +            .byte $a7,addra
                                        ;get from reference location
   2185 C461 C7 BD                    +            .byte $c7,operand
                                        ;test against compare location
   2186 C463 F0 03                                beq .0000020          ;match, don't display address
                                        ;
   2188 C465 20 57 C6                             jsr dpycaddr          ;display current location
                                        ;
   2190 C468 20 09 CB                   .0000020 jsr nxtaddra          ;next reference location
   2191 C46B B0 0C                                bcs .0000030          ;done
                                        ;
   2193 C46D C2 20                    +            .byte $c2,$20
                                        
   2194 C46F E6 BD                                inc operand           ;bump bits 0-15
   2195 C471 E2 20                    +            .byte $e2,$20
                                        
   2196 C473 D0 E5                                bne .0000010
                                        ;
   2198 C475 E6 BF                                inc operand+s_word    ;bump bits 16-23
   2199 C477 80 E1                                bra .0000010
                                        ;
   2201 C479 4C 49 C1                   .0000030 jmp monce             ;return to command exec
                                        ;
   2203 C47C 4C 88 C1                   .0000040 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;moncpy: COPY (transfer) MEMORY
                                        ;
                                        ;	————————————————————————————————
                                        ;	syntax: T <start> <end> <target>
                                        ;	————————————————————————————————
                                        ;
   2213 C47F B0 49                      moncpy   bcs .0000040          ;start not given — quit
                                        ;
   2215 C481 20 89 CA                             jsr enddest           ;get end & target addresses
   2216 C484 B0 47                                bcs .0000050          ;range or other error
                                        ;
   2218 C486 C2 20                    +            .byte $c2,$20
                                        
   2219 C488 38                                   sec
   2220 C489 A5 A6                                lda addrb             ;ending address
   2221 C48B E5 A2                                sbc addra             ;starting address
   2222 C48D 90 3E                                bcc .0000050          ;start > end — error
                                        ;
   2224 C48F 85 B1                                sta facb              ;bytes to copy
   2225 C491 E2 20                    +            .byte $e2,$20
                                        
   2226 C493 C2 10                    +            .byte $c2,$10
                                        
   2227 C495 A5 BF                                lda operand+s_word    ;target bank
   2228 C497 A4 BD                                ldy operand           ;target address
   2229 C499 C5 A4                                cmp addra+s_word      ;source bank
   2230 C49B C2 20                    +            .byte $c2,$20
                                        
   2231 C49D D0 1C                                bne .0000020          ;can use forward copy
                                        ;
   2233 C49F C4 A2                                cpy addra             ;source address
   2234 C4A1 90 18                                bcc .0000020          ;can use forward copy
                                        ;
   2236 C4A3 D0 02                                bne .0000010          ;must use reverse copy
                                        ;
   2238 C4A5 80 26                                bra .0000050          ;copy in place — error
                                        ;
   2240 C4A7 A5 B1                      .0000010 lda facb              ;get bytes to copy
   2241 C4A9 48                                   pha                   ;protect
   2242 C4AA 20 93 CC                             jsr lodbnk            ;load banks
   2243 C4AD 20 2F CA                             jsr cprvsup           ;do reverse copy setup
   2244 C4B0 68                                   pla                   ;get bytes to copy
   2245 C4B1 AA                                   tax                   ;save a copy
   2246 C4B2 18                                   clc
   2247 C4B3 65 BD                                adc operand           ;change target to...
   2248 C4B5 A8                                   tay                   ;target end
   2249 C4B6 8A                                   txa                   ;recover bytes to copy
   2250 C4B7 A6 A6                                ldx addrb             ;source end
   2251 C4B9 80 0C                                bra .0000030
                                        ;
   2253 C4BB A5 B1                      .0000020 lda facb              ;get bytes to copy
   2254 C4BD 48                                   pha                   ;protect
   2255 C4BE 20 93 CC                             jsr lodbnk            ;load banks
   2256 C4C1 20 28 CA                             jsr cpfwsup           ;do forward copy setup
   2257 C4C4 68                                   pla                   ;get bytes to copy
   2258 C4C5 A6 A2                                ldx addra             ;source start
                                        ;
   2260 C4C7 4C D4 00                   .0000030 jmp mcftwork          ;copy memory
                                        ;
   2262 C4CA 4C 49 C1                   .0000040 jmp monce             ;back to executive
                                        ;
   2264 C4CD 4C 88 C1                   .0000050 jmp monerr            ;error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;mondmp: DISPLAY MEMORY RANGE
                                        ;
                                        ;	—————————————————————————————
                                        ;	syntax: M [<addr1> [<addr2>]]
                                        ;	—————————————————————————————
                                        ;
   2274 C4D0 B0 0F                      mondmp   bcs .0000010          ;no parameters
                                        ;
   2276 C4D2 20 CD CA                             jsr facasize          ;check address...
   2277 C4D5 C9 04                                cmp #s_dword          ;range
   2278 C4D7 B0 46                                bcs .0000050          ;address out of range
                                        ;
   2280 C4D9 20 AF CA                             jsr facaddra          ;copy starting address
   2281 C4DC 20 E1 CA                             jsr getparm           ;get ending address
   2282 C4DF 90 17                                bcc .0000020          ;gotten
                                        ;
   2284 C4E1 20 9B C9                   .0000010 jsr clrfaca           ;clear accumulator
   2285 C4E4 C2 20                    +            .byte $c2,$20
                                        
   2286 C4E6 18                                   clc
   2287 C4E7 A5 A2                                lda addra             ;starting address
   2288 C4E9 69 FF                    +            adc #<n_mbytes
   2288 C4EB 00                       +            .byte >n_mbytes
                                        ;default bytes
   2289 C4EC 85 A9                                sta faca              ;effective ending address
   2290 C4EE E2 20                    +            .byte $e2,$20
                                        
   2291 C4F0 A5 A4                                lda addra+s_word      ;starting bank
   2292 C4F2 69 00                                adc #0
   2293 C4F4 85 AB                                sta faca+s_word       ;effective ending bank
   2294 C4F6 B0 27                                bcs .0000050          ;end address > $FFFFFF
                                        ;
   2296 C4F8 20 CD CA                   .0000020 jsr facasize          ;check ending address...
   2297 C4FB C9 04                                cmp #s_dword          ;range
   2298 C4FD B0 20                                bcs .0000050          ;out of range — error
                                        ;
   2300 C4FF 20 B9 CA                             jsr facaddrb          ;copy ending address
   2301 C502 20 E1 CA                             jsr getparm           ;check for excess input
   2302 C505 90 18                                bcc .0000050          ;error
                                        ;
   2304 C507 20 07 CA                             jsr calccnt           ;calculate bytes to dump
   2305 C50A 90 13                                bcc .0000050          ;end < start
                                        ;
   2307 C50C 20 AD CC                   .0000030 jsr teststop          ;test for display stop
   2308 C50F B0 0B                                bcs .0000040          ;stopped
                                        ;
   2310 C511 20 08 C8                             jsr newline           ;next line
   2311 C514 20 85 C7                             jsr dpymem            ;display
   2312 C517 20 65 CA                             jsr decdcnt           ;decrement byte count
   2313 C51A 90 F0                                bcc .0000030          ;not done
                                        ;
   2315 C51C 4C 49 C1                   .0000040 jmp monce             ;back to main loop
                                        ;
   2317 C51F 4C 88 C1                   .0000050 jmp monerr            ;address range error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monfil: FILL MEMORY
                                        ;
                                        ;	—————————————————————————————————————————
                                        ;	syntax: F <start> <end> <fill>
                                        ;
                                        ;	<start> & <end> must be in the same bank.
                                        ;	—————————————————————————————————————————
                                        ;
   2329 C522 B0 5E                      monfil   bcs .0000010          ;start not given — quit
                                        ;
   2331 C524 20 CD CA                             jsr facasize          ;check size
   2332 C527 C9 04                                cmp #s_dword
   2333 C529 B0 5A                                bcs .0000020          ;out of range — error...
                                        ;
   2335 C52B 20 AF CA                             jsr facaddra          ;store start
   2336 C52E 20 E1 CA                             jsr getparm           ;evaluate end
   2337 C531 B0 52                                bcs .0000020          ;not entered — error
                                        ;
   2339 C533 20 CD CA                             jsr facasize          ;check size
   2340 C536 C9 04                                cmp #s_dword
   2341 C538 B0 4B                                bcs .0000020          ;out of range — error
                                        ;
   2343 C53A A5 AB                                lda faca+s_word       ;end bank
   2344 C53C C5 A4                                cmp addra+s_word      ;start bank
   2345 C53E D0 45                                bne .0000020          ;not same — error
                                        ;
   2347 C540 20 B9 CA                             jsr facaddrb          ;store <end>
   2348 C543 C2 20                    +            .byte $c2,$20
                                        
   2349 C545 38                                   sec
   2350 C546 A5 A6                                lda addrb             ;ending address
   2351 C548 E5 A2                                sbc addra             ;starting address
   2352 C54A 90 39                                bcc .0000020          ;start > end — error
                                        ;
   2354 C54C 85 B1                                sta facb              ;bytes to copy
   2355 C54E E2 20                    +            .byte $e2,$20
                                        
   2356 C550 20 E1 CA                             jsr getparm           ;evaluate <fill>
   2357 C553 B0 30                                bcs .0000020          ;not entered — error
                                        ;
   2359 C555 20 CD CA                             jsr facasize          ;<fill> should be...
   2360 C558 C9 02                                cmp #s_word           ;8 bits
   2361 C55A B0 29                                bcs .0000020          ;it isn't — error
                                        ;
   2363 C55C 20 C3 CA                             jsr facaoper          ;store <fill>
   2364 C55F 20 E1 CA                             jsr getparm           ;should be no more parameters
   2365 C562 90 21                                bcc .0000020          ;there are — error
                                        ;
   2367 C564 A5 BD                                lda operand           ;<fill>
   2368 C566 87 A2                    +            .byte $87,addra
                                        ;fill 1st location
   2369 C568 C2 30                    +            .byte $c2,$30
                                                         ;16 bit operations
   2370 C56A A5 B1                                lda facb              ;
   2371 C56C F0 14                                beq .0000010          ;only 1 location — finished
                                        ;
   2373 C56E 3A                                   dea                   ;zero align &...
   2374 C56F 48                                   pha                   ;protect
   2375 C570 E2 20                    +            .byte $e2,$20
                                        
   2376 C572 A5 A4                                lda addra+s_word      ;start bank
   2377 C574 EB                       +            .byte $eb
                                        
   2378 C575 A5 A8                                lda addrb+s_word      ;end bank
   2379 C577 20 28 CA                             jsr cpfwsup           ;do forward copy setup
   2380 C57A 68                                   pla                   ;recover fill count
   2381 C57B A6 A2                                ldx addra             ;fill-from starting location
   2382 C57D 9B                       +            .byte $9b
                                        
   2383 C57E C8                                   iny                   ;fill-to starting location
   2384 C57F 4C D4 00                             jmp mcftwork          ;fill memory
                                        ;
   2386 C582 4C 49 C1                   .0000010 jmp monce             ;goto command executive
                                        ;
   2388 C585 4C 88 C1                   .0000020 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monhnt: SEARCH (hunt) MEMORY
                                        ;
                                        ;	———————————————————————————————————
                                        ;	syntax: H <addr1> <addr2> <pattern>
                                        ;	———————————————————————————————————
                                        ;
   2398 C588 B0 40                      monhnt   bcs .0000050          ;no start address
                                        ;
   2400 C58A 20 CD CA                             jsr facasize          ;size starting address
   2401 C58D C9 04                                cmp #s_dword
   2402 C58F B0 3C                                bcs .0000060          ;address out of range — error
                                        ;
   2404 C591 20 AF CA                             jsr facaddra          ;store starting address
   2405 C594 20 E1 CA                             jsr getparm           ;evaluate ending address
   2406 C597 B0 34                                bcs .0000060          ;no address — error
                                        ;
   2408 C599 20 CD CA                             jsr facasize          ;size ending address
   2409 C59C C9 04                                cmp #s_dword
   2410 C59E B0 2D                                bcs .0000060          ;address out of range — error
                                        ;
   2412 C5A0 20 B9 CA                             jsr facaddrb          ;store ending address
   2413 C5A3 20 07 CA                             jsr calccnt           ;calculate byte range
   2414 C5A6 90 25                                bcc .0000060          ;end < start
                                        ;
   2416 C5A8 20 E2 CB                             jsr getpat            ;evaluate search pattern
   2417 C5AB B0 20                                bcs .0000060          ;error
                                        ;
   2419 C5AD 64 CE                                stz xrtemp            ;clear column counter
                                        ;
   2421 C5AF 20 AD CC                   .0000010 jsr teststop          ;check for stop
   2422 C5B2 B0 16                                bcs .0000050          ;abort
                                        ;
   2424 C5B4 A4 C0                                ldy auxbufix          ;pattern index
                                        ;
   2426 C5B6 88                         .0000020 dey
   2427 C5B7 30 09                                bmi .0000030          ;pattern match
                                        ;
   2429 C5B9 B7 A2                    +            .byte $b7,addra
                                        ;get from memory
   2430 C5BB D9 51 02                             cmp auxbuf,y          ;test against pattern
   2431 C5BE D0 05                                bne .0000040          ;mismatch, next location
                                        ;
   2433 C5C0 F0 F4                                beq .0000020          ;match, keep testing
                                        ;
   2435 C5C2 20 57 C6                   .0000030 jsr dpycaddr          ;display current location
                                        ;
   2437 C5C5 20 09 CB                   .0000040 jsr nxtaddra          ;next location
   2438 C5C8 90 E5                                bcc .0000010          ;not done
                                        ;
   2440 C5CA 4C 49 C1                   .0000050 jmp monce             ;back to executive
                                        ;
   2442 C5CD 4C 88 C1                   .0000060 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monenv: CONVERT NUMERIC VALUE
                                        ;
                                        ;	——————————————————————
                                        ;	syntax: <radix><value>
                                        ;	——————————————————————
                                        ;
   2452 C5D0 20 DF CA                   monenv   jsr getparmr          ;reread & evaluate parameter
   2453 C5D3 B0 26                                bcs .0000020          ;none entered
                                        ;
   2455 C5D5 A2 00                                ldx #0                ;radix index
   2456 C5D7 A0 04                                ldy #n_radix          ;number of radices
                                        ;
   2458 C5D9 5A                         .0000010 phy                   ;save counter
   2459 C5DA DA                                   phx                   ;save radix index
   2460 C5DB 20 08 C8                             jsr newline           ;next line &...
   2461 C5DE 20 7B C7                             jsr clearlin          ;clear it
   2462 C5E1 A9 20                                lda #a_blank
   2463 C5E3 A2 04                                ldx #halftab
   2464 C5E5 20 FB C7                             jsr multspc           ;indent 1/2 tab
   2465 C5E8 FA                                   plx                   ;get radix index but...
   2466 C5E9 DA                                   phx                   ;put it back
   2467 C5EA BD F3 CC                             lda radxtab,x         ;get radix
   2468 C5ED 20 F4 C8                             jsr binasc            ;convert to ASCII
   2469 C5F0 5A                                   phy                   ;string address MSB
   2470 C5F1 DA                                   phx                   ;string address LSB
   2471 C5F2 20 1D C8                             jsr sprint            ;print
   2472 C5F5 FA                                   plx                   ;get index again
   2473 C5F6 7A                                   ply                   ;get counter
   2474 C5F7 E8                                   inx
   2475 C5F8 88                                   dey
   2476 C5F9 D0 DE                                bne .0000010          ;no
                                        
   2478 C5FB 4C 49 C1                   .0000020 jmp monce             ;back to command exec
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monchr: CHANGE REGISTERS
                                        ;
                                        ;	——————————————————————————————————————————————————————
                                        ;	syntax: ; [PB [PC [.S [.C [.X [.Y [SP [DP [DB]]]]]]]]]
                                        ;
                                        ;	; with no parameters is the same as the R command.
                                        ;	——————————————————————————————————————————————————————
                                        ;
   2490 C5FE B0 33                      monchr   bcs .0000040          ;dump registers & quit
                                        ;
   2492 C600 A0 00                                ldy #0                ;register counter
   2493 C602 84 B7                                sty facc              ;initialize register index
                                        ;
   2495 C604 20 CD CA                   .0000010 jsr facasize          ;get parameter size
   2496 C607 D9 F7 CC                             cmp rcvltab,y         ;check against size table
   2497 C60A B0 2A                                bcs .0000050          ;out of range
                                        ;
   2499 C60C B9 F7 CC                             lda rcvltab,y         ;determine number of bytes...
   2500 C60F C9 03                                cmp #s_word+1         ;to store
   2501 C611 66 B8                                ror facc+s_byte       ;condition flag
   2502 C613 10 02                                bpl .0000020          ;8 bit register size
                                        ;
   2504 C615 C2 20                    +            .byte $c2,$20
                                                         ;16 bit register size
                                        ;
   2506 C617 A6 B7                      .0000020 ldx facc              ;get register index
   2507 C619 A5 A9                                lda faca              ;get parm
   2508 C61B 95 8A                                sta reg_pbx,x         ;put in shadow storage
   2509 C61D E2 20                    +            .byte $e2,$20
                                        
   2510 C61F 06 B8                                asl facc+s_byte       ;mode flag to carry
   2511 C621 8A                                   txa                   ;register index
   2512 C622 69 01                                adc #s_byte           ;at least 1 byte stored
   2513 C624 85 B7                                sta facc              ;save new index
   2514 C626 20 E1 CA                             jsr getparm           ;get a parameter
   2515 C629 B0 08                                bcs .0000040          ;EOI
                                        ;
   2517 C62B C8                                   iny                   ;bump register count
   2518 C62C C0 09                                cpy #n_regchv         ;all registers processed?
   2519 C62E D0 D4                                bne .0000010          ;no, keep going
                                        ;
   2521 C630 20 14 C8                   .0000030 jsr alert             ;excessive input
                                        ;
   2523 C633 4C A4 C0                   .0000040 jmp monreg            ;display changes
                                        ;
   2525 C636 4C 88 C1                   .0000050 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monxit: EXIT TO OPERATING ENVIRONMENT
                                        ;
                                        ;	—————————
                                        ;	syntax: X
                                        ;	—————————
                                        ;
   2535 C639 90 19                      monxit   bcc .0000020          ;no parameters allowed
                                        ;
   2537 C63B C2 20                    +            .byte $c2,$20
                                        
   2538 C63D AD 02 01                             lda vecbrki           ;BRK indirect vector
   2539 C640 C9 59                    +            cmp #<monbrk
   2539 C642 C0                       +            .byte >monbrk
                                        ;we intercept it?
   2540 C643 D0 09                                bne .0000010          ;no, don't change it
                                        ;
   2542 C645 AD 05 01                             lda vecbrkia          ;old vector
   2543 C648 8D 02 01                             sta vecbrki           ;restore it
   2544 C64B 9C 05 01                             stz vecbrkia          ;invalidate old vector
                                        ;         
   2546 C64E E2 30                      .0000010 +         .byte $e2,$30
                                        
   2547 C650 5C 03 F4 00                          jml vecexit           ;long jump to exit
                                        ;
   2549 C654 4C 88 C1                   .0000020 jmp monerr            ;goto error handler
                                        ;
                                        ; * * * * * * * * * * * * * * * * * * * * * * * *
                                        ; * * * * * * * * * * * * * * * * * * * * * * * *
                                        ; * *                                         * *
                                        ; * * S T A R T   o f   S U B R O U T I N E S * *
                                        ; * *                                         * *
                                        ; * * * * * * * * * * * * * * * * * * * * * * * *
                                        ; * * * * * * * * * * * * * * * * * * * * * * * *
                                        ;
                                        ;dpycaddr: DISPLAY CURRENT ADDRESS IN COLUMNS
                                        ;
   2561 C657 A6 CE                      dpycaddr ldx xrtemp            ;column count
   2562 C659 D0 05                                bne .0000010          ;not at right side
                                        ;
   2564 C65B 20 08 C8                             jsr newline           ;next row
   2565 C65E A2 08                                ldx #n_hccols         ;max columns
                                        ;
   2567 C660 E0 08                      .0000010 cpx #n_hccols         ;max columns
   2568 C662 F0 05                                beq .0000020          ;at left margin
                                        ;
   2570 C664 A9 09                                lda #a_ht
   2571 C666 20 06 F4                             jsr putcha            ;tab a column
                                        ;
   2573 C669 CA                         .0000020 dex                   ;one less column
   2574 C66A 86 CE                                stx xrtemp            ;save column counter
   2575 C66C 4C D4 C7                             jmp prntladr          ;print reference address
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpycod: DISASSEMBLE & DISPLAY CODE
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	This function disassembles & displays the machine code at  the  location
                                        ;	pointed to by ADDRA.  Upon return, ADDRA will point to the opcode of the
                                        ;	next instruction.   The entry point at DPYCODAA  should be called with a
                                        ;	disassembly prefix character loaded in .A.   If entered  at  DPYCOD, the
                                        ;	default character will be display at the beginning of each  disassembled
                                        ;	instruction.
                                        ;
                                        ;	The disassembly of immediate mode instructions that can take an 8 or  16
                                        ;	bit operand is affected by the bit pattern that is  stored  in  FLIMFLAG
                                        ;	upon entry to this function:
                                        ;
                                        ;	    FLIMFLAG: xx000000
                                        ;	              ||
                                        ;	              |+—————————> 0:  8 bit .X or .Y operand
                                        ;	              |            1: 16 bit .X or .Y operand
                                        ;	              +——————————> 0:  8 bit .A or BIT # operand
                                        ;	                           1: 16 bit .A or BIT # operand
                                        ;
                                        ;	FLIMFLAG is conditioned according to the operand of  the  most  recently
                                        ;	disassembled REP or SEP instruction.   Hence repetitive  calls  to  this
                                        ;	subroutine will usually result in the correct disassembly of 16 bit imm-
                                        ;	ediate mode instructions.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
   2606 C66F A9 2E                       public dpycod   lda #disprfx          ;default prefix
                                        ;
                                        ;
                                        ;	alternate prefix display entry point...
                                        ;
   2611 C671 20 06 F4                   dpycodaa jsr putcha            ;print prefix
   2612 C674 20 18 C8                             jsr printspc          ;space
   2613 C677 20 D4 C7                             jsr prntladr          ;print long address
   2614 C67A 20 18 C8                             jsr printspc          ;space to opcode field
   2615 C67D 20 DB CA                             jsr getbyte           ;get opcode
   2616 C680 85 CC                                sta opcode            ;save &...
   2617 C682 20 0D C8                             jsr printbyt          ;display as hex
                                        ;
                                        ;
                                        ;	decode menmonic & addressing info...
                                        ;
   2622 C685 A6 CC                                ldx opcode            ;current mnemonic
   2623 C687 BD B8 CD                             lda mnetabix,x        ;get mnemonic index
   2624 C68A 0A                                   asl                   ;double for...
   2625 C68B A8                                   tay                   ;mnemonic table offset
   2626 C68C C2 20                    +            .byte $c2,$20
                                                         ;16 bit load
   2627 C68E B9 00 CD                             lda mnetab,y          ;copy encoded mnemonic to...
   2628 C691 85 CA                                sta mnepck            ;working storage
   2629 C693 E2 20                    +            .byte $e2,$20
                                                        ;back to 8 bits
   2630 C695 20 3D CB                             jsr instdata          ;extract mode & size data
   2631 C698 85 D3                                sta vopsflag          ;save mode flags
   2632 C69A 84 C5                                sty admodidx          ;save mode index
   2633 C69C 0A                                   asl                   ;variable immediate instruction?
   2634 C69D 90 1F                                bcc dpycod01          ;no, effective operand size in .X
                                        ;
                                        ;
                                        ;	determine immediate mode operand size...
                                        ;
   2639 C69F A5 CC                                lda opcode            ;current opcode
   2640 C6A1 24 D0                                bit flimflag          ;operand display mode
   2641 C6A3 10 08                                bpl .0000010          ;8 bit .A & BIT immediate mode
                                        ;
   2643 C6A5 29 1F                                and #aimmaska         ;determine if...
   2644 C6A7 C9 09                                cmp #aimmaskb         ;.A or BIT immediate
   2645 C6A9 F0 10                                beq .0000030          ;display 16 bit operand
                                        ;
   2647 C6AB A5 CC                                lda opcode            ;not .A or BIT immediate
                                        ;
   2649 C6AD 50 0F                      .0000010 bvc dpycod01          ;8 bit .X/.Y immediate mode
                                        ;
   2651 C6AF A0 03                                ldy #n_vopidx-1       ;opcodes to test
                                        ;
   2653 C6B1 D9 B8 CF                   .0000020 cmp vopidx,y          ;looking for LDX #, CPY #, etc.
   2654 C6B4 F0 07                                beq .0000040          ;disassemble a 16 bit operand
                                        ;
   2656 C6B6 88                                   dey
   2657 C6B7 10 F8                                bpl .0000020          ;keep trying
                                        ;
   2659 C6B9 80 03                                bra dpycod01          ;not .X or .Y immediate
                                        ;
   2661 C6BB A5 CC                      .0000030 lda opcode            ;reload
                                        ;
   2663 C6BD E8                         .0000040 inx                   ;16 bit operand
                                        ;
                                        ;
                                        ;	get & display operand bytes...
                                        ;
   2668 C6BE 86 D1                      dpycod01 stx iopsize           ;operand size...
   2669 C6C0 E8                                   inx                   ;plus opcode becomes...
   2670 C6C1 86 C8                                stx instsize          ;instruction size
   2671 C6C3 86 C6                                stx charcnt           ;total bytes to process
   2672 C6C5 A9 0B                                lda #n_opcols+2       ;total operand columns plus WS
   2673 C6C7 85 CE                                sta xrtemp            ;initialize counter
   2674 C6C9 20 1C CA                             jsr clroper           ;clear operand
   2675 C6CC A4 D1                                ldy iopsize           ;operand size
   2676 C6CE F0 16                                beq .0000020          ;no operand
                                        ;
   2678 C6D0 A2 00                                ldx #0                ;operand index
                                        ;
   2680 C6D2 20 DB CA                   .0000010 jsr getbyte           ;get operand byte
   2681 C6D5 95 BD                                sta operand,x         ;save
   2682 C6D7 DA                                   phx                   ;protect operand index
   2683 C6D8 20 0D C8                             jsr printbyt          ;print operand byte
   2684 C6DB C6 CE                                dec xrtemp            ;3 columns used, 2 for...
   2685 C6DD C6 CE                                dec xrtemp            ;operand nybbles &...
   2686 C6DF C6 CE                                dec xrtemp            ;1 for whitespace
   2687 C6E1 FA                                   plx                   ;get operand index
   2688 C6E2 E8                                   inx                   ;bump it
   2689 C6E3 88                                   dey
   2690 C6E4 D0 EC                                bne .0000010          ;next
                                        ;
   2692 C6E6 A6 CE                      .0000020 ldx xrtemp            ;operand columns remaining
   2693 C6E8 20 FB C7                             jsr multspc           ;space to mnemonic field
                                        ;
                                        ;
                                        ;	display mnemonic...
                                        ;
   2698 C6EB A0 03                                ldy #s_mnemon         ;size of ASCII mnemonic
                                        ;
   2700 C6ED A9 00                      .0000030 lda #0                ;initialize char
   2701 C6EF A2 05                                ldx #n_shfenc         ;shifts to execute
                                        ;
   2703 C6F1 06 CA                      .0000040 asl mnepck            ;shift encoded mnemonic
   2704 C6F3 26 CB                                rol mnepck+s_byte
   2705 C6F5 2A                                   rol
   2706 C6F6 CA                                   dex
   2707 C6F7 D0 F8                                bne .0000040
                                        ;
   2709 C6F9 69 3F                                adc #a_mnecvt         ;convert to ASCII &...
   2710 C6FB 48                                   pha                   ;stash
   2711 C6FC 88                                   dey
   2712 C6FD D0 EE                                bne .0000030          ;continue with mnemonic
                                        ;
   2714 C6FF A0 03                                ldy #s_mnemon
                                        ;
   2716 C701 68                         .0000050 pla                   ;get mnenmonic byte
   2717 C702 20 06 F4                             jsr putcha            ;print it
   2718 C705 88                                   dey
   2719 C706 D0 F9                                bne .0000050
                                        ;
                                        ;
                                        ;	display operand...
                                        ;
   2724 C708 A5 D1                                lda iopsize           ;operand size
   2725 C70A F0 6F                                beq clearlin          ;zero, disassembly finished
                                        ;
   2727 C70C 20 18 C8                             jsr printspc          ;space to operand field
   2728 C70F 24 D3                                bit vopsflag          ;check mode flags
   2729 C711 50 08                                bvc dpycod02          ;not a branch
                                        ;
   2731 C713 20 53 CB                             jsr offtarg           ;compute branch target
   2732 C716 A6 C8                                ldx instsize          ;effective instruction size
   2733 C718 CA                                   dex
   2734 C719 86 D1                                stx iopsize           ;effective operand size
                                        ;
   2736 C71B 64 D3                      dpycod02 stz vopsflag          ;clear
   2737 C71D A5 C5                                lda admodidx          ;instruction addressing mode
   2738 C71F C9 0B                                cmp #am_move          ;block move instruction?
   2739 C721 D0 02                                bne .0000010          ;no
                                        ;
   2741 C723 66 D3                                ror vopsflag          ;yes
                                        ;
   2743 C725 0A                         .0000010 asl                   ;convert addressing mode to...
   2744 C726 AA                                   tax                   ;symbology table index
   2745 C727 C2 20                    +            .byte $c2,$20
                                                         ;do a 16 bit load
   2746 C729 BD BC CF                             lda ms_lutab,x        ;addressing symbol pointer
   2747 C72C 48                                   pha
   2748 C72D E2 20                    +            .byte $e2,$20
                                                        ;back to 8 bit loads
   2749 C72F A0 00                                ldy #0
   2750 C731 B3 01                    +            .byte $b3,1
                                        ;get 1st char
   2751 C733 C9 20                                cmp #a_blank
   2752 C735 F0 03                                beq .0000020          ;no addresing mode preamble
                                        ;
   2754 C737 20 06 F4                             jsr putcha            ;print preamble
                                        ;
   2756 C73A A9 24                      .0000020 lda #c_hex
   2757 C73C 20 06 F4                             jsr putcha            ;operand displayed as hex
   2758 C73F A4 D1                                ldy iopsize           ;operand size = index
                                        ;
   2760 C741 88                         .0000030 dey
   2761 C742 30 16                                bmi .0000040          ;done with operand
                                        ;
   2763 C744 B9 BD 00                             lda operand,y         ;get operand byte
   2764 C747 20 F1 C7                             jsr dpyhex            ;print operand byte
   2765 C74A 24 D3                                bit vopsflag          ;block move?
   2766 C74C 10 F3                                bpl .0000030          ;no
                                        ;
   2768 C74E 64 D3                                stz vopsflag          ;reset
   2769 C750 5A                                   phy                   ;protect operand index
   2770 C751 F4                       +            .byte $f4
   2770 C752 F5 CF                    +            .word ms_move
                                        
   2771 C754 20 1D C8                             jsr sprint            ;display MVN/MVP operand separator
   2772 C757 7A                                   ply                   ;recover operand index again
   2773 C758 80 E7                                bra .0000030          ;continue
                                        ;
   2775 C75A FA                         .0000040 plx                   ;symbology LSB
   2776 C75B 7A                                   ply                   ;symbology MSB
   2777 C75C E8                                   inx                   ;move past preamble
   2778 C75D D0 01                                bne .0000050
                                        ;
   2780 C75F C8                                   iny
                                        ;
   2782 C760 5A                         .0000050 phy
   2783 C761 DA                                   phx
   2784 C762 20 1D C8                             jsr sprint            ;print postamble, if any
                                        ;
                                        ;
                                        ;	condition immediate mode display format...
                                        ;
   2789 C765 A5 BD                      dpycod03 lda operand           ;operand LSB
   2790 C767 29 30                                and #pfmxmask         ;isolate M & X bits
   2791 C769 0A                                   asl                   ;shift to match...
   2792 C76A 0A                                   asl                   ;FLIMFLAG alignment
   2793 C76B A6 CC                                ldx opcode            ;current instruction
   2794 C76D E0 C2                                cpx #opc_rep          ;was it REP?
   2795 C76F D0 04                                bne .0000010          ;no
                                        ;
   2797 C771 04 D0                                tsb flimflag          ;set flag bits as required
   2798 C773 80 06                                bra clearlin
                                        ;
   2800 C775 E0 E2                      .0000010 cpx #opc_sep          ;was it SEP?
   2801 C777 D0 02                                bne clearlin          ;no, just exit
                                        ;
   2803 C779 14 D0                                trb flimflag          ;clear flag bits as required
                                        ;
                                        ;================================================================================
                                        ;
                                        ;clearlin: CLEAR DISPLAY LINE
                                        ;
   2809 C77B F4                         clearlin +         .byte $f4
   2809 C77C 0D D0                    +            .word dc_cl
                                        
   2810 C77E 80 4B                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpyibuf: DISPLAY MONITOR INPUT BUFFER CONTENTS
                                        ;
   2816 C780 F4                         dpyibuf +         .byte $f4
   2816 C781 00 02                    +            .word ibuffer
                                        
   2817 C783 80 46                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpymem: DISPLAY MEMORY
                                        ;
                                        ;	————————————————————————————————————————————————————————————
                                        ;	This function displays 16 bytes of memory as hex values & as
                                        ;	ASCII equivalents.  The starting address for the display is
                                        ;	in ADDRA & is expected to be a 24 bit address.  Upon return,
                                        ;	ADDRA will point to the start of the next 16 bytes.
                                        ;	————————————————————————————————————————————————————————————
                                        ;
   2830 C785 E2 30                      dpymem +         .byte $e2,$30
                                        
   2831 C787 64 C6                                stz charcnt           ;reset
   2832 C789 A9 3E                                lda #memprfx
   2833 C78B 20 06 F4                             jsr putcha            ;display prefix
   2834 C78E 20 D4 C7                             jsr prntladr          ;print 24 bit address
   2835 C791 A2 00                                ldx #0                ;string buffer index
   2836 C793 A0 08                                ldy #n_dump           ;bytes per line
                                        ;
   2838 C795 20 DB CA                   .0000010 jsr getbyte           ;get from RAM, also...
   2839 C798 48                                   pha                   ;save for decoding
   2840 C799 DA                                   phx                   ;save string index
   2841 C79A 20 0D C8                             jsr printbyt          ;display as hex ASCII
   2842 C79D E6 C6                                inc charcnt           ;bytes displayed +1
   2843 C79F FA                                   plx                   ;recover string index &...
   2844 C7A0 68                                   pla                   ;byte
   2845 C7A1 C9 20                                cmp #a_blank          ;printable?
   2846 C7A3 90 04                                bcc .0000020          ;no
                                        ;
   2848 C7A5 C9 7F                                cmp #a_del
   2849 C7A7 90 02                                bcc .0000030          ;is printable
                                        ;
   2851 C7A9 A9 2E                      .0000020 lda #memsubch         ;substitute character
                                        ;
   2853 C7AB 9D 00 02                   .0000030 sta ibuffer,x         ;save char
   2854 C7AE E8                                   inx                   ;bump index
   2855 C7AF 88                                   dey                   ;byte count -= 1
   2856 C7B0 D0 E3                                bne .0000010          ;not done
                                        ;
   2858 C7B2 9E 00 02                             stz ibuffer,x         ;terminate ASCII string
   2859 C7B5 A9 3A                                lda #memsepch
   2860 C7B7 20 06 F4                             jsr putcha            ;separate ASCII from bytes
   2861 C7BA F4                       +            .byte $f4
   2861 C7BB 03 D0                    +            .word dc_bf
                                        
   2862 C7BD 20 1D C8                             jsr sprint            ;select reverse video
   2863 C7C0 20 80 C7                             jsr dpyibuf           ;display ASCII equivalents
   2864 C7C3 F4                       +            .byte $f4
   2864 C7C4 18 D0                    +            .word dc_er
                                        ;normal video
   2865 C7C6 80 03                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpyerr: DISPLAY ERROR SIGNAL
                                        ;
   2871 C7C8 F4                         dpyerr +         .byte $f4
   2871 C7C9 45 D0                    +            .word mm_err
                                        ;"*ERR"
                                        ;
   2873 C7CB 20 1D C8                   dpyerraa jsr sprint
   2874 C7CE 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;gendbs: GENERATE DESTRUCTIVE BACKSPACE
                                        ;
   2880 C7CF F4                         gendbs +         .byte $f4
   2880 C7D0 09 D0                    +            .word dc_bs
                                        ;destructive backspace
   2881 C7D2 80 F7                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;prntladr: PRINT 24 BIT CURRENT ADDRESS
                                        ;
   2887 C7D4 08                         prntladr php                   ;protect register sizes
   2888 C7D5 E2 20                    +            .byte $e2,$20
                                        
   2889 C7D7 A5 A4                                lda addra+s_word      ;get bank byte &...
   2890 C7D9 20 F1 C7                             jsr dpyhex            ;display it
   2891 C7DC C2 20                    +            .byte $c2,$20
                                        
   2892 C7DE A5 A2                                lda addra             ;get 16 bit address
   2893 C7E0 28                                   plp                   ;restore register sizes
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpyhexw: DISPLAY BINARY WORD AS HEX ASCII
                                        ;
                                        ;	————————————————————————————————————
                                        ;	Preparatory Ops: .C: word to display
                                        ;
                                        ;	Returned Values: .C: used
                                        ;	                 .X: used
                                        ;	                 .Y: entry value
                                        ;	————————————————————————————————————
                                        ;
   2907 C7E1 08                         dpyhexw  php                   ;save register sizes
   2908 C7E2 C2 20                    +            .byte $c2,$20
                                        
   2909 C7E4 48                                   pha                   ;protect value
   2910 C7E5 E2 20                    +            .byte $e2,$20
                                        
   2911 C7E7 EB                       +            .byte $eb
                                                           ;get MSB &...
   2912 C7E8 20 F1 C7                             jsr dpyhex            ;display
   2913 C7EB C2 20                    +            .byte $c2,$20
                                        
   2914 C7ED 68                                   pla                   ;recover value
   2915 C7EE E2 20                    +            .byte $e2,$20
                                                        ;only LSB visible
   2916 C7F0 28                                   plp                   ;reset register sizes
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpyhex: DISPLAY BINARY BYTE AS HEX ASCII
                                        ;
                                        ;	————————————————————————————————————
                                        ;	Preparatory Ops: .A: byte to display
                                        ;
                                        ;	Returned Values: .A: used
                                        ;	                 .X: used
                                        ;	                 .Y: entry value
                                        ;	————————————————————————————————————
                                        ;
   2930 C7F1 20 88 C9                   dpyhex   jsr binhex            ;convert to hex ASCII
   2931 C7F4 20 06 F4                             jsr putcha            ;print MSN
   2932 C7F7 8A                                   txa
   2933 C7F8 4C 06 F4                             jmp putcha            ;print LSN
                                        ;
                                        ;================================================================================
                                        ;
                                        ;multspc: PRINT MULTIPLE BLANKS
                                        ;
                                        ;	————————————————————————————————————————————————
                                        ;	Preparatory Ops : .X: number of blanks to print
                                        ;
                                        ;	Register Returns: none
                                        ;
                                        ;	Calling Example : ldx #3
                                        ;	                  jsr multspc    ;print 3 spaces
                                        ;
                                        ;	Notes: This sub will print 1 blank if .X=0.
                                        ;	————————————————————————————————————————————————
                                        ;
   2950 C7FB 8A                         multspc  txa
   2951 C7FC D0 01                                bne .0000010          ;blank count specified
                                        ;
   2953 C7FE E8                                   inx                   ;default to 1 blank
                                        ;
   2955 C7FF A9 20                      .0000010 lda #a_blank
                                        ;
   2957 C801 20 06 F4                   .0000020 jsr putcha
   2958 C804 CA                                   dex
   2959 C805 D0 FA                                bne .0000020
                                        ;
   2961 C807 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;newline: PRINT NEWLINE (CRLF)
                                        ;
   2967 C808 F4                         newline +         .byte $f4
   2967 C809 1E D0                    +            .word dc_lf
                                        
   2968 C80B 80 BE                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;printbyt: PRINT A BYTE WITH LEADING SPACE
                                        ;
   2974 C80D 48                         printbyt pha                   ;protect byte
   2975 C80E 20 18 C8                             jsr printspc          ;print leading space
   2976 C811 68                                   pla                   ;restore &...
   2977 C812 80 DD                                bra dpyhex            ;print byte
                                        ;         
                                        ;================================================================================
                                        ;
                                        ;alert: ALERT USER w/TERMINAL BELL
                                        ;
   2983 C814 A9 07                      alert    lda #a_bel
   2984 C816 80 02                                bra printcmn
                                        ;
                                        ;================================================================================
                                        ;
                                        ;printspc: PRINT A SPACE
                                        ;
   2990 C818 A9 20                      printspc lda #a_blank
                                        ;
   2992 C81A 4C 06 F4                   printcmn jmp putcha
                                        ;
                                        ;================================================================================
                                        ;
                                        ;sprint: PRINT NULL-TERMINATED CHARACTER STRING
                                        ;
                                        ;	—————————————————————————————————————————————————————————
                                        ;	Preparatory Ops : SP+1: string address LSB
                                        ;	                  SP+2: string address MSB
                                        ;
                                        ;	Register Returns: .A: used
                                        ;	                  .B: entry value
                                        ;	                  .X: used
                                        ;	                  .Y: used
                                        ;
                                        ;	MPU Flags: NVmxDIZC
                                        ;	           ||||||||
                                        ;	           |||||||+———> 0: okay
                                        ;	           |||||||      1: string too long (1)
                                        ;	           ||||+++————> not defined
                                        ;	           |||+———————> 1
                                        ;	           ||+————————> 1
                                        ;	           ++—————————> not defined
                                        ;
                                        ;	Example: PER STRING
                                        ;	         JSR SPRINT
                                        ;	         BCS TOOLONG
                                        ;
                                        ;	Notes: 1) Maximum permissible string length including the
                                        ;	          terminator is 32,767 bytes.
                                        ;	       2) All registers are forced to 8 bits.
                                        ;	       3) DO NOT JUMP OR BRANCH INTO THIS FUNCTION!
                                        ;	—————————————————————————————————————————————————————————
                                        ;
   3026 C81D E2 20                      sprint +         .byte $e2,$20
                                                        ;8 bit accumulator
   3027 C81F C2 10                    +            .byte $c2,$10
                                                         ;16 bit index
                                        ;
                                        ;—————————————————————————————————————————————————————————
   3179 = 0000000000000001                            .reetaddr =1                    ;return address
                                        
   3181 = 00000003                      .src     =.reetaddr+s_word      ;string address stack offset
                                        
                                        ;—————————————————————————————————————————————————————————
                                        ;
   3036 C821 A0 00                    +            ldy #<0
   3036 C823 00                       +            .byte >0
                                        
   3037 C824 18                                   clc                   ;no initial error
                                        ;
   3039 C825 B3 03                      .0000010 +         .byte $b3,.src
                                        ;get a byte
   3040 C827 F0 07                                beq .0000020          ;done
                                        ;
   3042 C829 20 06 F4                             jsr putcha            ;write to console port
   3043 C82C C8                                   iny
   3044 C82D 10 F6                                bpl .0000010          ;next
                                        ;
   3046 C82F 38                                   sec                   ;string too long
                                        ;
   3048 C830 FA                         .0000020 plx                   ;pull RTS address
   3049 C831 7A                                   ply                   ;clear string pointer
   3050 C832 DA                                   phx                   ;replace RTS
   3051 C833 E2 10                    +            .byte $e2,$10
                                        
   3052 C835 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;ascbin: CONVERT NULL-TERMINATED ASCII NUMBER STRING TO BINARY
                                        ;
                                        ;	———————————————————————————————————————————————————
                                        ;	Preparatory Ops: ASCII number string in IBUFFER
                                        ;
                                        ;	Returned Values: FACA: converted parameter
                                        ;	                   .A: used
                                        ;	                   .X: used
                                        ;	                   .Y: used
                                        ;	                   .C: 1 = conversion error
                                        ;	                   .Z: 1 = nothing to convert
                                        ;
                                        ;	Notes: 1) Conversion stops when a non-numeric char-
                                        ;	          acter is encountered.
                                        ;	       2) Radix symbols are as follows:
                                        ;
                                        ;	          % binary
                                        ;	          @ octal
                                        ;	          + decimal
                                        ;	          $ hexadecimal
                                        ;
                                        ;	          Hex is the default if no radix is speci-
                                        ;	          fied in the 1st character of the string.
                                        ;	———————————————————————————————————————————————————
                                        ;
   3081 C836 E2 30                      ascbin +         .byte $e2,$30
                                        
   3082 C838 20 9B C9                             jsr clrfaca           ;clear accumulator
   3083 C83B 64 C6                                stz charcnt           ;zero char count
   3084 C83D 64 C4                                stz radix             ;initialize
                                        ;
                                        ;
                                        ;	process radix if present...
                                        ;
   3089 C83F 20 2E CC                             jsr getcharw          ;get next non-WS char
   3090 C842 D0 02                                bne .0000010          ;got something
                                        ;
   3092 C844 18                                   clc                   ;no more input
   3093 C845 60                                   rts
                                        ;
   3095 C846 A2 03                      .0000010 ldx #n_radix-1        ;number of radices
                                        ;
   3097 C848 DD F3 CC                   .0000020 cmp radxtab,x         ;recognized radix?
   3098 C84B F0 06                                beq .0000030          ;yes
                                        ;
   3100 C84D CA                                   dex
   3101 C84E 10 F8                                bpl .0000020          ;try next
                                        ;
   3103 C850 C6 C1                                dec ibufidx           ;reposition to previous char
   3104 C852 E8                                   inx                   ;not recognized, assume hex
                                        ;
   3106 C853 C9 2B                      .0000030 cmp #c_dec            ;decimal radix?
   3107 C855 D0 02                                bne .0000040          ;not decimal
                                        ;
   3109 C857 66 C4                                ror radix             ;flag decimal conversion
                                        ;
   3111 C859 BD DF CC                   .0000040 lda basetab,x         ;number bases table
   3112 C85C 85 D2                                sta range             ;set valid numeral range
   3113 C85E BD E3 CC                             lda bitsdtab,x        ;get bits per digit
   3114 C861 85 C2                                sta bitsdig           ;store
                                        ;
                                        ;
                                        ;	process numerals...
                                        ;
   3119 C863 20 D0 CB                   ascbin01 jsr getchar           ;get next char
   3120 C866 F0 70                                beq ascbin03          ;EOI
                                        ;
   3122 C868 C9 20                                cmp #' '
   3123 C86A F0 6C                                beq ascbin03          ;blank — EOF
                                        ;
   3125 C86C C9 2C                                cmp #','
   3126 C86E F0 68                                beq ascbin03          ;comma — EOF
                                        ;
   3128 C870 C9 09                                cmp #a_ht
   3129 C872 F0 64                                beq ascbin03          ;tab — EOF
                                        ;
   3131 C874 20 F5 C9                             jsr nybtobin          ;change to binary
   3132 C877 B0 60                                bcs ascbin04          ;not a recognized numeral
                                        ;
   3134 C879 C5 D2                                cmp range             ;check range
   3135 C87B B0 5C                                bcs ascbin04          ;not valid for base
                                        ;
   3137 C87D 85 C3                                sta numeral           ;save processed numeral
   3138 C87F E6 C6                                inc charcnt           ;bump numeral count
   3139 C881 24 C4                                bit radix             ;working in base 10?
   3140 C883 10 15                                bpl .0000030          ;no
                                        ;
                                        ;
                                        ;	compute N*2 for decimal conversion...
                                        ;
   3145 C885 A2 00                                ldx #0                ;accumulator index
   3146 C887 A0 02                                ldy #s_pfac/2         ;iterations
   3147 C889 C2 20                    +            .byte $c2,$20
                                        
   3148 C88B 18                                   clc
                                        ;
   3150 C88C B5 A9                      .0000020 lda faca,x            ;N
   3151 C88E 2A                                   rol                   ;N=N*2
   3152 C88F 95 B1                                sta facb,x
   3153 C891 E8                                   inx
   3154 C892 E8                                   inx
   3155 C893 88                                   dey
   3156 C894 D0 F6                                bne .0000020
                                        ;
   3158 C896 B0 41                                bcs ascbin04          ;overflow — error
                                        ;
   3160 C898 E2 20                    +            .byte $e2,$20
                                        
                                        ;
                                        ;
                                        ;	compute N*base for binary, octal or hex...
                                        ;	or N*8 for decimal...
                                        ;
   3166 C89A A6 C2                      .0000030 ldx bitsdig           ;bits per digit
   3167 C89C C2 20                    +            .byte $c2,$20
                                                         ;16 bit shifts
                                        ;
   3169 C89E 06 A9                      .0000040 asl faca
   3170 C8A0 26 AB                                rol faca+s_word
   3171 C8A2 B0 35                                bcs ascbin04          ;overflow — error
                                        ;
   3173 C8A4 CA                                   dex
   3174 C8A5 D0 F7                                bne .0000040          ;next shift
                                        ;
   3176 C8A7 E2 20                    +            .byte $e2,$20
                                                        ;back to 8 bits
   3177 C8A9 24 C4                                bit radix             ;check base
   3178 C8AB 10 13                                bpl ascbin02          ;not decimal
                                        ;
                                        ;
                                        ;	compute N*10 for decimal (N*8 + N*2)...
                                        ;
   3183 C8AD A0 04                                ldy #s_pfac
   3184 C8AF C2 20                    +            .byte $c2,$20
                                        
                                        ;
   3186 C8B1 B5 A9                      .0000050 lda faca,x            ;N*8
   3187 C8B3 75 B1                                adc facb,x            ;N*2
   3188 C8B5 95 A9                                sta faca,x            ;now N*10
   3189 C8B7 E8                                   inx
   3190 C8B8 E8                                   inx
   3191 C8B9 88                                   dey
   3192 C8BA D0 F5                                bne .0000050
                                        ;
   3194 C8BC B0 1B                                bcs ascbin04          ;overflow — error
                                        ;
   3196 C8BE E2 20                    +            .byte $e2,$20
                                        
                                        ;
                                        ;
                                        ;	add current numeral to partial result...
                                        ;
   3201 C8C0 A5 A9                      ascbin02 lda faca              ;N
   3202 C8C2 65 C3                                adc numeral           ;N=N+D
   3203 C8C4 85 A9                                sta faca
   3204 C8C6 A2 01                                ldx #1
   3205 C8C8 A0 03                                ldy #s_pfac-1
                                        ;
   3207 C8CA B5 A9                      .0000010 lda faca,x
   3208 C8CC 69 00                                adc #0                ;account for carry
   3209 C8CE 95 A9                                sta faca,x
   3210 C8D0 E8                                   inx
   3211 C8D1 88                                   dey
   3212 C8D2 D0 F6                                bne .0000010
                                        ;
   3214 C8D4 90 8D                                bcc ascbin01          ;next if no overflow
                                        ;
   3216 C8D6 B0 01                                bcs ascbin04          ;overflow — error
                                        ;
                                        ;
                                        ;	finish up...
                                        ;
   3221 C8D8 18                         ascbin03 clc                   ;no error
                                        ;
   3223 C8D9 E2 20                      ascbin04 +         .byte $e2,$20
                                                        ;reset if necessary
   3224 C8DB A5 C6                                lda charcnt           ;load char count
   3225 C8DD 60                                   rts                   ;done
                                        ;
                                        ;================================================================================
                                        ;
                                        ;bcdasc: CONVERT BCD DIGIT TO ASCII
                                        ;
                                        ;	———————————————————————————————————————
                                        ;	Preparatory Ops: .A: BCD digit, $00-$99
                                        ;
                                        ;	Returned Values: .A: ASCII MSD
                                        ;	                 .X: ASCII LSD
                                        ;	                 .Y: entry value
                                        ;	———————————————————————————————————————
                                        ;
   3239 C8DE 20 EA C8                   bcdasc   jsr bintonyb          ;extract nybbles
   3240 C8E1 48                                   pha                   ;save tens
   3241 C8E2 8A                                   txa                 
   3242 C8E3 09 30                                ora #btoamask         ;change units to ASCII
   3243 C8E5 AA                                   tax                   ;store
   3244 C8E6 68                                   pla                   ;get tens
   3245 C8E7 09 30                                ora #btoamask         ;change to ASCII
   3246 C8E9 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;bintonyb: EXTRACT BINARY NYBBLES
                                        ;
                                        ;	—————————————————————————————————
                                        ;	Preparatory Ops: .A: binary value
                                        ;
                                        ;	Returned Values: .A: MSN
                                        ;	                 .X: LSN
                                        ;	                 .Y: entry value
                                        ;	—————————————————————————————————
                                        ;
   3260 C8EA 48                         bintonyb pha                   ;save
   3261 C8EB 29 0F                                and #bcdumask         ;extract LSN
   3262 C8ED AA                                   tax                   ;save it
   3263 C8EE 68                                   pla
                                        ;         .rept s_bnybbl        ;extract MSN
   3265 C8EF 4A                                     lsr
   3266 C8F0 4A                                     lsr
   3267 C8F1 4A                                     lsr
   3268 C8F2 4A                                     lsr
                                        ;         .endr
   3270 C8F3 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;binasc: CONVERT 32-BIT BINARY TO NULL-TERMINATED ASCII NUMBER STRING
                                        ;
                                        ;	——————————————————————————————————————————————————————
                                        ;	Preparatory Ops: FACA: 32-bit operand
                                        ;	                   .A: radix character, w/bit 7 set to
                                        ;	                       suppress radix symbol in the
                                        ;	                       conversion string
                                        ;
                                        ;	Returned Values: ibuffer: conversion string
                                        ;	                      .A: string length
                                        ;	                      .X: string address LSB
                                        ;	                      .Y: string address MSB
                                        ;
                                        ;	Execution Notes: ibufidx & instsize are overwritten.
                                        ;	——————————————————————————————————————————————————————
                                        ;
   3290 C8F4 64 C1                      binasc   stz ibufidx           ;initialize string index
   3291 C8F6 64 C8                                stz instsize          ;clear format flag
                                        ;
                                        ;
                                        ;	evaluate radix...
                                        ;
   3296 C8F8 0A                                   asl                   ;extract format flag &...
   3297 C8F9 66 C8                                ror instsize          ;save it
   3298 C8FB 4A                                   lsr                   ;extract radix character
   3299 C8FC A2 03                                ldx #n_radix-1        ;total radices
                                        ;
   3301 C8FE DD F3 CC                   .0000010 cmp radxtab,x         ;recognized radix?
   3302 C901 F0 04                                beq .0000020          ;yes
                                        ;
   3304 C903 CA                                   dex
   3305 C904 10 F8                                bpl .0000010          ;try next
                                        ;
   3307 C906 E8                                   inx                   ;assume hex
                                        ;
   3309 C907 86 C4                      .0000020 stx radix             ;save radix index for later
   3310 C909 24 C8                                bit instsize
   3311 C90B 30 08                                bmi .0000030          ;no radix symbol wanted
                                        ;
   3313 C90D BD F3 CC                             lda radxtab,x         ;radix table
   3314 C910 8D 00 02                             sta ibuffer           ;prepend to string
   3315 C913 E6 C1                                inc ibufidx           ;bump string index
                                        ;
   3317 C915 C9 2B                      .0000030 cmp #c_dec            ;converting to decimal?
   3318 C917 D0 07                                bne .0000040          ;no
                                        ;
   3320 C919 20 AD C9                             jsr facabcd           ;convert operand to BCD
   3321 C91C A9 00                                lda #0
   3322 C91E 80 17                                bra .0000070          ;skip binary stuff
                                        ;
                                        ;
                                        ;	prepare for binary, octal or hex conversion...
                                        ;
   3327 C920 A2 00                      .0000040 ldx #0                ;operand index
   3328 C922 A0 05                                ldy #s_sfac-1         ;workspace index
                                        ;
   3330 C924 B5 A9                      .0000050 lda faca,x            ;copy operand to...
   3331 C926 99 B1 00                             sta facb,y            ;workspace in...
   3332 C929 88                                   dey                   ;big-endian order
   3333 C92A E8                                   inx
   3334 C92B E0 04                                cpx #s_pfac
   3335 C92D D0 F5                                bne .0000050
                                        ;
   3337 C92F A9 00                                lda #0
   3338 C931 BB                       +            .byte $bb
                                        
                                        ;
   3340 C932 95 B1                      .0000060 sta facb,x            ;pad workspace
   3341 C934 CA                                   dex
   3342 C935 10 FB                                bpl .0000060
                                        ;
                                        ;
                                        ;	set up conversion parameters...
                                        ;
   3347 C937 85 B7                      .0000070 sta facc              ;initialize byte counter
   3348 C939 A4 C4                                ldy radix             ;radix index
   3349 C93B B9 EF CC                             lda numstab,y         ;numerals in string
   3350 C93E 85 B8                                sta facc+s_byte       ;set remaining numeral count
   3351 C940 B9 E7 CC                             lda bitsntab,y        ;bits per numeral
   3352 C943 85 B9                                sta facc+s_word       ;set
   3353 C945 B9 EB CC                             lda lzsttab,y         ;leading zero threshold
   3354 C948 85 BA                                sta facc+s_xword      ;set
                                        ;
                                        ;
                                        ;	generate conversion string...
                                        ;
   3359 C94A A9 00                      .0000080 lda #0
   3360 C94C A4 B9                                ldy facc+s_word       ;bits per numeral
                                        ;
   3362 C94E A2 05                      .0000090 ldx #s_sfac-1         ;workspace size
   3363 C950 18                                   clc                   ;avoid starting carry
                                        ;
   3365 C951 36 B1                      .0000100 rol facb,x            ;shift out a bit...
   3366 C953 CA                                   dex                   ;from the operand or...
   3367 C954 10 FB                                bpl .0000100          ;BCD conversion result
                                        ;
   3369 C956 2A                                   rol                   ;bit to .A
   3370 C957 88                                   dey
   3371 C958 D0 F4                                bne .0000090          ;more bits to grab
                                        ;
   3373 C95A A8                                   tay                   ;if numeral isn't zero...
   3374 C95B D0 0A                                bne .0000110          ;skip leading zero tests
                                        ;
   3376 C95D A6 B8                                ldx facc+s_byte       ;remaining numerals
   3377 C95F E4 BA                                cpx facc+s_xword      ;leading zero threshold
   3378 C961 90 04                                bcc .0000110          ;below it, must convert
                                        ;
   3380 C963 A6 B7                                ldx facc              ;processed byte count
   3381 C965 F0 11                                beq .0000130          ;discard leading zero
                                        ;
   3383 C967 C9 0A                      .0000110 cmp #10               ;check range
   3384 C969 90 02                                bcc .0000120          ;is 0-9
                                        ;
   3386 C96B 69 06                                adc #a_hexdec         ;apply hex adjust
                                        ;
   3388 C96D 69 30                      .0000120 adc #'0'              ;change to ASCII
   3389 C96F A4 C1                                ldy ibufidx           ;string index
   3390 C971 99 00 02                             sta ibuffer,y         ;save numeral in buffer
   3391 C974 E6 C1                                inc ibufidx           ;next buffer position
   3392 C976 E6 B7                                inc facc              ;bytes=bytes+1
                                        ;
   3394 C978 C6 B8                      .0000130 dec facc+s_byte       ;numerals=numerals-1
   3395 C97A D0 CE                                bne .0000080          ;not done
                                        ;
                                        ;
                                        ;	terminate string & exit...
                                        ;
   3400 C97C A6 C1                                ldx ibufidx           ;printable string length
   3401 C97E 9E 00 02                             stz ibuffer,x         ;terminate string
   3402 C981 8A                                   txa
   3403 C982 A2 00                                ldx #<ibuffer         ;converted string
   3404 C984 A0 02                                ldy #>ibuffer
   3405 C986 18                                   clc                   ;all okay
   3406 C987 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;binhex: CONVERT BINARY BYTE TO HEX ASCII CHARS
                                        ;
                                        ;	————————————————————————————————————————————
                                        ;	Preparatory Ops: .A: byte to convert
                                        ;
                                        ;	Returned Values: .A: MSN ASCII char
                                        ;	                 .X: LSN ASCII char
                                        ;	                 .Y: entry value
                                        ;	————————————————————————————————————————————
                                        ;
   3420 C988 20 EA C8                   binhex   jsr bintonyb          ;generate binary values
   3421 C98B 48                                   pha                   ;save MSN
   3422 C98C 8A                                   txa
   3423 C98D 20 92 C9                             jsr .0000010          ;generate ASCII LSN
   3424 C990 AA                                   tax                   ;save
   3425 C991 68                                   pla                   ;get input
                                        ;
                                        ;
                                        ;	convert nybble to hex ASCII equivalent...
                                        ;
   3430 C992 C9 0A                      .0000010 cmp #10
   3431 C994 90 02                                bcc .0000020          ;in decimal range
                                        ;
   3433 C996 69 66                                adc #k_hex            ;hex compensate
                                        ;         
   3435 C998 49 30                      .0000020 eor #'0'              ;finalize nybble
   3436 C99A 60                                   rts                   ;done
                                        ;
                                        ;================================================================================
                                        ;
                                        ;clrfaca: CLEAR FLOATING ACCUMULATOR A
                                        ;
   3442 C99B 08                         clrfaca  php
   3443 C99C C2 20                    +            .byte $c2,$20
                                        
   3444 C99E 64 A9                                stz faca
   3445 C9A0 64 AB                                stz faca+s_word
   3446 C9A2 28                                   plp
   3447 C9A3 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;clrfacb: CLEAR FLOATING ACCUMULATOR B
                                        ;
   3453 C9A4 08                         clrfacb  php
   3454 C9A5 C2 20                    +            .byte $c2,$20
                                        
   3455 C9A7 64 B1                                stz facb
   3456 C9A9 64 B3                                stz facb+s_word
   3457 C9AB 28                                   plp
   3458 C9AC 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facabcd: CONVERT FACA INTO BCD
                                        ;
   3464 C9AD A2 03                      facabcd  ldx #s_pfac-1         ;primary accumulator size -1
                                        ;
   3466 C9AF B5 A9                      .0000010 lda faca,x            ;value to be converted
   3467 C9B1 48                                   pha                   ;preserve
   3468 C9B2 CA                                   dex
   3469 C9B3 10 FA                                bpl .0000010          ;next
                                        ;
   3471 C9B5 A2 05                                ldx #s_sfac-1         ;workspace size
                                        ;
   3473 C9B7 74 B1                      .0000020 stz facb,x            ;clear final result
   3474 C9B9 74 B7                                stz facc,x            ;clear scratchpad
   3475 C9BB CA                                   dex
   3476 C9BC 10 F9                                bpl .0000020
                                        ;
   3478 C9BE E6 BC                                inc facc+s_sfac-s_byte
   3479 C9C0 F8                                   sed                   ;select decimal mode
   3480 C9C1 A0 1F                                ldy #m_bits-1         ;bits to convert -1
                                        ;
   3482 C9C3 A2 03                      .0000030 ldx #s_pfac-1         ;operand size
   3483 C9C5 18                                   clc                   ;no carry at start
                                        ;
   3485 C9C6 76 A9                      .0000040 ror faca,x            ;grab LS bit in operand
   3486 C9C8 CA                                   dex
   3487 C9C9 10 FB                                bpl .0000040
                                        ;
   3489 C9CB 90 0D                                bcc .0000060          ;LS bit clear
                                        ;
   3491 C9CD 18                                   clc
   3492 C9CE A2 05                                ldx #s_sfac-1
                                        ;
   3494 C9D0 B5 B1                      .0000050 lda facb,x            ;partial result
   3495 C9D2 75 B7                                adc facc,x            ;scratchpad
   3496 C9D4 95 B1                                sta facb,x            ;new partial result
   3497 C9D6 CA                                   dex
   3498 C9D7 10 F7                                bpl .0000050
                                        ;
   3500 C9D9 18                                   clc
                                        ;
   3502 C9DA A2 05                      .0000060 ldx #s_sfac-1
                                        ;
   3504 C9DC B5 B7                      .0000070 lda facc,x            ;scratchpad
   3505 C9DE 75 B7                                adc facc,x            ;double &...
   3506 C9E0 95 B7                                sta facc,x            ;save
   3507 C9E2 CA                                   dex
   3508 C9E3 10 F7                                bpl .0000070
                                        ;
   3510 C9E5 88                                   dey
   3511 C9E6 10 DB                                bpl .0000030          ;next operand bit
                                        ;
   3513 C9E8 D8                                   cld
   3514 C9E9 A2 00                                ldx #0
   3515 C9EB A0 04                                ldy #s_pfac
                                        ;
   3517 C9ED 68                         .0000080 pla                   ;operand
   3518 C9EE 95 A9                                sta faca,x            ;restore
   3519 C9F0 E8                                   inx
   3520 C9F1 88                                   dey
   3521 C9F2 D0 F9                                bne .0000080          ;next
                                        ;
   3523 C9F4 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;nybtobin: CONVERT ASCII NYBBLE TO BINARY
                                        ;
   3529 C9F5 20 A0 CC                   nybtobin jsr toupper           ;convert case if necessary
   3530 C9F8 38                                   sec
   3531 C9F9 E9 30                                sbc #'0'              ;change to binary
   3532 C9FB 90 08                                bcc .0000020          ;not a numeral — error
                                        ;
   3534 C9FD C9 0A                                cmp #10
   3535 C9FF 90 03                                bcc .0000010          ;numeral is 0-9
                                        ;
   3537 CA01 E9 07                                sbc #a_hexdec+1       ;10-15 ——> A-F
   3538 CA03 18                                   clc                   ;no conversion error
                                        ;
   3540 CA04 60                         .0000010 rts
                                        ;
   3542 CA05 38                         .0000020 sec                   ;conversion error
   3543 CA06 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;calccnt: COMPUTE BYTE COUNT FROM ADDRESS RANGE
                                        ;
   3549 CA07 20 A4 C9                   calccnt  jsr clrfacb           ;clear accumulator
   3550 CA0A C2 20                    +            .byte $c2,$20
                                        
   3551 CA0C 38                                   sec
   3552 CA0D A5 A6                                lda addrb             ;ending address
   3553 CA0F E5 A2                                sbc addra             ;starting address
   3554 CA11 85 B1                                sta facb              ;byte count
   3555 CA13 E2 20                    +            .byte $e2,$20
                                        
   3556 CA15 A5 A8                                lda addrb+s_word      ;handle banks
   3557 CA17 E5 A4                                sbc addra+s_word
   3558 CA19 85 B3                                sta facb+s_word
   3559 CA1B 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;clroper: CLEAR OPERAND
                                        ;
   3565 CA1C DA                         clroper  phx
   3566 CA1D A2 02                                ldx #s_oper-1
                                        ;
   3568 CA1F 74 BD                      .0000010 stz operand,x
   3569 CA21 CA                                   dex
   3570 CA22 10 FB                                bpl .0000010
                                        ;
   3572 CA24 64 CF                                stz eopsize
   3573 CA26 FA                                   plx
   3574 CA27 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;cpfwsup: FOWARD COPY MEMORY SETUP
                                        ;
   3580 CA28 C2 30                      cpfwsup +         .byte $c2,$30
                                        
   3581 CA2A A2 54                    +            ldx #<opc_mvn
   3581 CA2C 00                       +            .byte >opc_mvn
                                        ;"move next" opcode
   3582 CA2D 80 05                                bra cpsup
                                        ;         
                                        ;================================================================================
                                        ;
                                        ;cprvsup: REVERSE COPY MEMORY SETUP
                                        ;
   3588 CA2F C2 30                      cprvsup +         .byte $c2,$30
                                        
   3589 CA31 A2 44                    +            ldx #<opc_mvp
   3589 CA33 00                       +            .byte >opc_mvp
                                        ;"move previous" opcode
                                        ;         
                                        ;================================================================================
                                        ;
                                        ;cpsup: COPY MEMORY SETUP
                                        ;
   3595 CA34 48                         cpsup    pha                   ;save banks
   3596 CA35 8A                                   txa                   ;protect...
   3597 CA36 EB                       +            .byte $eb
                                                           ;opcode
   3598 CA37 E2 20                    +            .byte $e2,$20
                                        
   3599 CA39 A2 08                    +            ldx #<(cpcodeee-cpcode-1)
   3599 CA3B 00                       +            .byte >(cpcodeee-cpcode-1)
                                        
                                        ;
   3601 CA3C BF                         .0000010 +         .byte $bf
   3601 CA3D 5C CA 00                 +   +         .byte <cpcode,>cpcode,cpcode >> 16
                                     +   
                                        ;transfer copy code to...
   3602 CA40 95 D4                                sta mcftwork,x        ;to workspace
   3603 CA42 CA                                   dex
   3604 CA43 10 F7                                bpl .0000010
                                        ;
   3606 CA45 EB                       +            .byte $eb
                                                           ;recover opcode &...
   3607 CA46 85 D5                                sta mcftopc           ;set it
   3608 CA48 C2 20                    +            .byte $c2,$20
                                        
   3609 CA4A 68                                   pla                   ;get banks &...
   3610 CA4B 85 D6                                sta mcftbnk           ;set them
                                         
                                        ; We just dynamically created a routine, so the cache (if one is present) has
                                        ; to be invalidated. Otherwise the processor could execute dead code from the
                                        ; cache. Two lines are invalidated in case the code crosses a line boundary.
                                        ;
                                        ;	acc = 16 bit address to invalidate
                                        ;
                                        ; If there is no cache in the processor then these lines can be deleted.
                                        ;-------------------------------------------------------------------------------
                                           		 CPU	FT832
                                           		 MEM	16
   3622 00CA4D 48                                    pha
   3623 00CA4E A9 D4 00                              lda	#mcftwork
   3624 00CA51 42 E0 01                     		 cache	#1				; 1= invalidate line identified by address in acc
   3625 00CA54 A9 E4 00                              lda	#mcftwork+16
   3626 00CA57 42 E0 01                     		 cache	#1
   3627 00CA5A 68                                    pla
                                        		 CPU	W65C02
   3629 CA5B                            		 MEM	8
                                        ;---------------------------------------------
   3631 CA5B 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;cpcode: COPY MEMORY CODE
                                        ;
                                        ;	———————————————————————————————————————————
                                        ;	This code is transfered to workspace when a
                                        ;	copy or fill operation is to be performed.
                                        ;	———————————————————————————————————————————
                                        ;
   3642 CA5C 8B                         cpcode +         .byte $8b
                                                           ;must preserve data bank
                                        ;         .rept s_mvinst
   3644 CA5D EA                                     nop                 ;placeholder
   3645 CA5E EA                                     nop
   3646 CA5F EA                                     nop
                                        ;         .endr
   3648 CA60 AB                       +            .byte $ab
                                                           ;restore data bank
   3649 CA61 5C 49 C1 00                          jml monce             ;return to command executive
   3833 = 0000CA65                      cpcodeee =*                    ;placeholder — do not delete
                                        ;
                                        ;================================================================================
                                        ;
                                        ;decdcnt: DECREMENT DUMP COUNT
                                        ;
                                        ;	———————————————————————————————————————————
                                        ;	Preparatory Ops: bytes to process in FACB
                                        ;	                 bytes processed in CHARCNT
                                        ;
                                        ;	Returned Values: .A: used
                                        ;	                 .X: entry value
                                        ;	                 .Y: entry value
                                        ;	                 .C: 1 = count = zero
                                        ;	———————————————————————————————————————————
                                        ;
   3666 CA65 E2 20                      decdcnt +         .byte $e2,$20
                                        
   3667 CA67 A9 00                                lda #0
   3668 CA69 EB                       +            .byte $eb
                                                           ;clear .B
   3669 CA6A A5 B3                                lda facb+s_word       ;count MSW
   3670 CA6C C2 20                    +            .byte $c2,$20
                                        
   3671 CA6E 38                                   sec
   3672 CA6F 05 B1                                ora facb              ;count LSW
   3673 CA71 F0 13                                beq .0000020          ;zero, just exit
                                        ;
   3675 CA73 A5 B1                                lda facb
   3676 CA75 E5 C6                                sbc charcnt           ;bytes processed
   3677 CA77 85 B1                                sta facb
   3678 CA79 E2 20                    +            .byte $e2,$20
                                        
   3679 CA7B A5 B3                                lda facb+s_word
   3680 CA7D E9 00                                sbc #0                ;handle borrow
   3681 CA7F 90 04                                bcc .0000010          ;underflow
                                        ;
   3683 CA81 85 B3                                sta facb+s_word
   3684 CA83 18                                   clc                   ;count > 0
   3685 CA84 60                                   rts
                                        ;
   3687 CA85 38                         .0000010 sec
                                        ;
   3689 CA86 E2 20                      .0000020 +         .byte $e2,$20
                                        
   3690 CA88 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;enddest: GET 2ND & 3RD ADDRESSES FOR COMPARE & TRANSFER
                                        ;
   3696 CA89 20 CD CA                   enddest  jsr facasize          ;check start...
   3697 CA8C C9 04                                cmp #s_dword          ;for range
   3698 CA8E B0 1E                                bcs .0000010          ;out of range — error
                                        ;
   3700 CA90 20 AF CA                             jsr facaddra          ;store start
   3701 CA93 20 E1 CA                             jsr getparm           ;get end
   3702 CA96 B0 16                                bcs .0000010          ;not entered — error
                                        ;
   3704 CA98 20 CD CA                             jsr facasize          ;check end...
   3705 CA9B C9 04                                cmp #s_dword          ;for range
   3706 CA9D B0 0F                                bcs .0000010          ;out of range — error
                                        ;
   3708 CA9F 20 B9 CA                             jsr facaddrb          ;store end
   3709 CAA2 20 E1 CA                             jsr getparm           ;get destination
   3710 CAA5 B0 07                                bcs .0000010          ;not entered — error
                                        ;
   3712 CAA7 20 CD CA                             jsr facasize          ;check destination...
   3713 CAAA C9 04                                cmp #s_dword          ;for range
   3714 CAAC 90 15                                bcc facaoper          ;store dest address
                                        ;
   3716 CAAE 60                         .0000010 rts                   ;exit w/error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facaddra: COPY FACA TO ADDRA
                                        ;
   3722 CAAF A2 02                      facaddra ldx #s_xword-1
                                        ;
   3724 CAB1 B5 A9                      .0000010 lda faca,x
   3725 CAB3 95 A2                                sta addra,x
   3726 CAB5 CA                                   dex
   3727 CAB6 10 F9                                bpl .0000010
                                        ;
   3729 CAB8 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facaddrb: COPY FACA TO ADDRB
                                        ;
   3735 CAB9 A2 02                      facaddrb ldx #s_xword-1
                                        ;
   3737 CABB B5 A9                      .0000010 lda faca,x
   3738 CABD 95 A6                                sta addrb,x
   3739 CABF CA                                   dex
   3740 CAC0 10 F9                                bpl .0000010
                                        ;
   3742 CAC2 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facaoper: COPY FACA TO OPERAND
                                        ;
   3748 CAC3 A2 02                      facaoper ldx #s_oper-1
                                        ;
   3750 CAC5 B5 A9                      .0000010 lda faca,x
   3751 CAC7 95 BD                                sta operand,x
   3752 CAC9 CA                                   dex
   3753 CACA 10 F9                                bpl .0000010
                                        ;
   3755 CACC 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facasize: REPORT OPERAND SIZE IN FACA
                                        ;
                                        ;	——————————————————————————————————————————
                                        ;	Preparatory Ops: operand in FACA
                                        ;
                                        ;	Returned Values: .A: s_byte  (1)
                                        ;	                     s_word  (2)
                                        ;	                     s_xword (3)
                                        ;	                     s_dword (4)
                                        ;
                                        ;	Notes: 1) This function will always report
                                        ;	          a non-zero result.
                                        ;	——————————————————————————————————————————
                                        ;
   3773 CACD E2 30                      facasize +         .byte $e2,$30
                                        
   3774 CACF A2 03                                ldx #s_dword-1
                                        ;
   3776 CAD1 B5 A9                      .0000010 lda faca,x            ;get byte
   3777 CAD3 D0 03                                bne .0000020          ;done
                                        ;
   3779 CAD5 CA                                   dex
   3780 CAD6 D0 F9                                bne .0000010          ;next byte
                                        ;
   3782 CAD8 E8                         .0000020 inx                   ;count=index+1
   3783 CAD9 8A                                   txa
   3784 CADA 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getbyte: GET A BYTE FROM MEMORY
                                        ;
   3790 CADB A7 A2                      getbyte +         .byte $a7,addra
                                        ;get a byte
   3791 CADD 80 3F                                bra incaddra          ;bump address
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getparm: GET A PARAMETER
                                        ;
                                        ;	—————————————————————————————————————————————————
                                        ;	Preparatory Ops: null-terminated input in IBUFFER
                                        ;
                                        ;	Returned Values: .A: chars in converted parameter
                                        ;	                 .X: used
                                        ;	                 .Y: entry value
                                        ;	                 .C: 1 = no parameter entered
                                        ;	—————————————————————————————————————————————————
                                        ;
   3806 CADF C6 C1                      getparmr dec ibufidx           ;reread previous char
                                        ;
   3808 CAE1 5A                         getparm  phy                   ;preserve
   3809 CAE2 20 36 C8                             jsr ascbin            ;convert parameter to binary
   3810 CAE5 B0 1C                                bcs .0000040          ;conversion error
                                        ;
   3812 CAE7 20 CE CB                             jsr getcharr          ;reread last char
   3813 CAEA D0 08                                bne .0000010          ;not end-of-input
                                        ;
   3815 CAEC C6 C1                                dec ibufidx           ;reindex to terminator
   3816 CAEE A5 C6                                lda charcnt           ;get chars processed so far
   3817 CAF0 F0 0C                                beq .0000030          ;none
                                        ;
   3819 CAF2 D0 08                                bne .0000020          ;some
                                        ;
   3821 CAF4 C9 20                      .0000010 cmp #a_blank          ;recognized delimiter
   3822 CAF6 F0 04                                beq .0000020          ;end of parameter
                                        ;
   3824 CAF8 C9 2C                                cmp #','              ;recognized delimiter
   3825 CAFA D0 07                                bne .0000040          ;unknown delimter
                                        ;
   3827 CAFC 18                         .0000020 clc
   3828 CAFD 24                                   .byte bitzp           ;skip SEC below
                                        ;
   3830 CAFE 38                         .0000030 sec
   3831 CAFF 7A                                   ply                   ;restore
   3832 CB00 A5 C6                                lda charcnt           ;get count
   3833 CB02 60                                   rts                   ;done
                                        ;
   3835 CB03                            .0000040 
                                        ;.rept 3               ;clean up stack
   3837 CB03 68                          			pla
   3838 CB04 68                          			pla
   3839 CB05 68                                     pla
                                        ;        .endr
   3841 CB06 4C 88 C1                             jmp monerr            ;abort w/error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;nxtaddra: TEST & INCREMENT WORKING ADDRESS 'A'
                                        ;
                                        ;	——————————————————————————————————————————————————
                                        ;	Calling syntax: JSR NXTADDRA
                                        ;
                                        ;	Exit registers: .A: used
                                        ;	                .B: used
                                        ;	                .X: entry value
                                        ;	                .Y: entry value
                                        ;	                DB: entry value
                                        ;	                DP: entry value
                                        ;	                PB: entry value
                                        ;	                SR: NVmxDIZC
                                        ;	                    ||||||||
                                        ;	                    |||||||+———> 0: ADDRA < ADDRB
                                        ;	                    |||||||      1: ADDRA >= ADDRB
                                        ;	                    ||||||+————> undefined
                                        ;	                    |||+++—————> entry value
                                        ;	                    ||+————————> 1
                                        ;	                    ++—————————> undefined
                                        ;	——————————————————————————————————————————————————
                                        ;
   3867 CB09 E2 20                      nxtaddra +         .byte $e2,$20
                                        
   3868 CB0B A5 A4                                lda addra+s_word      ;bits 16-23
   3869 CB0D C5 A8                                cmp addrb+s_word
   3870 CB0F 90 0D                                bcc incaddra          ;increment
                                        ;
   3872 CB11 D0 0A                                bne .0000010          ;don't increment
                                        ;
   3874 CB13 C2 20                    +            .byte $c2,$20
                                        
   3875 CB15 A5 A2                                lda addra             ;bits 0-15
   3876 CB17 C5 A6                                cmp addrb             ;condition flags
   3877 CB19 E2 20                    +            .byte $e2,$20
                                        
   3878 CB1B 90 01                                bcc incaddra          ;increment
                                        ;
   3880 CB1D 60                         .0000010 rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;incaddra: INCREMENT WORKING ADDRESS 'A'
                                        ;
                                        ;	——————————————————————————————————————————————————
                                        ;	Calling syntax: JSR INCADDRA
                                        ;
                                        ;	Exit registers: .A: entry value
                                        ;	                .B: entry value
                                        ;	                .X: entry value
                                        ;	                .Y: entry value
                                        ;	                DB: entry value
                                        ;	                DP: entry value
                                        ;	                PB: entry value
                                        ;	                SR: NVmxDIZC
                                        ;	                    ||||||||
                                        ;	                    ++++++++———> entry value
                                        ;	——————————————————————————————————————————————————
                                        ;
   3901 CB1E 08                         incaddra php
   3902 CB1F C2 20                    +            .byte $c2,$20
                                        
   3903 CB21 E6 A2                                inc addra             ;bump bits 0-15
   3904 CB23 D0 04                                bne .0000010
                                        ;
   3906 CB25 E2 20                    +            .byte $e2,$20
                                        
   3907 CB27 E6 A4                                inc addra+s_word      ;bump bits 16-23
                                        ;
   3909 CB29 28                         .0000010 plp
   3910 CB2A 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;incoper: INCREMENT OPERAND ADDRESS
                                        ;
   3916 CB2B 18                         incoper  clc
   3917 CB2C 08                                   php
   3918 CB2D C2 30                    +            .byte $c2,$30
                                        
   3919 CB2F 48                                   pha
   3920 CB30 E6 BD                                inc operand           ;handle base address
   3921 CB32 D0 06                                bne .0000010
                                        ;              
   3923 CB34 E2 20                    +            .byte $e2,$20
                                        
   3924 CB36 E6 BF                                inc operand+s_word    ;handle bank
   3925 CB38 C2 20                    +            .byte $c2,$20
                                        
                                        ;
   3927 CB3A 68                         .0000010 pla
   3928 CB3B 28                                   plp
   3929 CB3C 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;instdata: GET INSTRUCTION SIZE & ADDRESSING MODE DATA
                                        ;
                                        ;	——————————————————————————————————
                                        ;	Preparatory Ops: .X: 65C816 opcode
                                        ;
                                        ;	Returned Values: .A: mode flags
                                        ;	                 .X: operand size
                                        ;	                 .Y: mode index
                                        ;	——————————————————————————————————
                                        ;
   3943 CB3D E2 30                      instdata +         .byte $e2,$30
                                        
   3944 CB3F BD B8 CE                             lda mnetabam,x        ;addressing mode data
   3945 CB42 48                                   pha                   ;save mode flag bits
   3946 CB43 48                                   pha                   ;save size data
   3947 CB44 29 0F                                and #amodmask         ;extract mode index &...
   3948 CB46 A8                                   tay                   ;save
   3949 CB47 68                                   pla                   ;recover data
   3950 CB48 29 30                                and #opsmask          ;mask mode fields &...
                                        ;         .rept n_opslsr        ;extract operand size
   3952 CB4A 4A                                     lsr
   3953 CB4B 4A                                     lsr
   3954 CB4C 4A                                     lsr
   3955 CB4D 4A                                     lsr
                                        ;         .endr
   3957 CB4E AA                                   tax                   ;operand size
   3958 CB4F 68                                   pla                   ;recover mode flags
   3959 CB50 29 C0                                and #vopsmask         ;discard mode & size fields
   3960 CB52 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;offtarg: CONVERT BRANCH OFFSET TO TARGET ADDRESS
                                        ;
                                        ;	———————————————————————————————————————————————
                                        ;	Preparatory Ops:    ADDRA: base address
                                        ;	                 INSTSIZE: instruction size
                                        ;	                  OPERAND: offset
                                        ;
                                        ;	Returned Values:  OPERAND: target address (L/H)
                                        ;	                       .A: used
                                        ;	                       .X: entry value
                                        ;                              .Y: entry value
                                        ;	———————————————————————————————————————————————
                                        ;
   3977 CB53 C2 20                      offtarg +         .byte $c2,$20
                                        
   3978 CB55 A5 A2                                lda addra             ;base address
   3979 CB57 E2 20                    +            .byte $e2,$20
                                        
   3980 CB59 46 C8                                lsr instsize          ;bit 0 will be set if...
   3981 CB5B B0 07                                bcs .0000010          ;a long branch
                                        ;
   3983 CB5D 24 BD                                bit operand           ;short forward or backward?
   3984 CB5F 10 03                                bpl .0000010          ;forward
                                        ;
   3986 CB61 EB                       +            .byte $eb
                                                           ;expose address MSB
   3987 CB62 3A                                   dea                   ;back a page
   3988 CB63 EB                       +            .byte $eb
                                                           ;expose address LSB
                                        ;
   3990 CB64 C2 20                      .0000010 +         .byte $c2,$20
                                        
   3991 CB66 18                                   clc
   3992 CB67 65 BD                                adc operand           ;calculate target address
   3993 CB69 85 BD                                sta operand           ;new operand
   3994 CB6B E2 20                    +            .byte $e2,$20
                                        
   3995 CB6D A9 03                                lda #s_xword
   3996 CB6F 85 C8                                sta instsize          ;effective instruction size
   3997 CB71 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;setxaddr: SET EXECUTION ADDRESS
                                        ;
   4003 CB72 B0 13                      setxaddr bcs .0000010          ;no address given
                                        ;
   4005 CB74 20 CD CA                             jsr facasize          ;check address...
   4006 CB77 C9 04                                cmp #s_dword          ;range
   4007 CB79 B0 0D                                bcs .0000020          ;out of range
                                        ;
   4009 CB7B C2 20                    +            .byte $c2,$20
                                        
   4010 CB7D A5 A9                                lda faca              ;execution address
   4011 CB7F 85 88                                sta reg_pcx           ;set new PC value
   4012 CB81 E2 20                    +            .byte $e2,$20
                                        
   4013 CB83 A5 AB                                lda faca+s_word
   4014 CB85 85 8A                                sta reg_pbx           ;set new PB value
                                        ;
   4016 CB87 18                         .0000010 clc                   ;no error
                                        ;
   4018 CB88 60                         .0000020 rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;targoff: CONVERT BRANCH TARGET ADDRESS TO BRANCH OFFSET                   
                                        ;
                                        ;	—————————————————————————————————————————————————
                                        ;	Preparatory Ops:   ADDRA: instruction address
                                        ;	                 OPERAND: target address
                                        ;
                                        ;	Returned Values: OPERAND: computed offset
                                        ;	                      .A: effective operand size
                                        ;	                      .X: entry value
                                        ;                             .Y: entry value
                                        ;	                      .C: 1 = branch out of range
                                        ;
                                        ;	Execution notes: ADDRB is set to the branch base
                                        ;	                 address.
                                        ;	—————————————————————————————————————————————————
                                        ;
   4038 CB89 64 C9                      targoff  stz instsize+s_byte   ;always zero
   4039 CB8B A5 C8                                lda instsize          ;instruction size will tell...
   4040 CB8D 4A                                   lsr                   ;if long or short branch
                                        ;
                                        ;—————————————————————————————————————————————————
   4250 = 000000BC                      .btype   =facc+5               ;branch type flag
                                        ;—————————————————————————————————————————————————
                                        ;
   4046 CB8E 66 BC                                ror .btype            ;set branch type...
                                        ;
                                        ;	x0000000
                                        ;	|
                                        ;	+——————————> 0: short
                                        ;	             1: long
                                        ;
   4053 CB90 C2 20                    +            .byte $c2,$20
                                        
   4054 CB92 18                                   clc
   4055 CB93 A5 A2                                lda addra             ;instruction address
   4056 CB95 65 C8                                adc instsize          ;instruction size
   4057 CB97 85 A6                                sta addrb             ;base address
   4058 CB99 38                                   sec
   4059 CB9A A5 BD                                lda operand           ;target address
   4060 CB9C E5 A6                                sbc addrb             ;base address
   4061 CB9E 85 BD                                sta operand           ;offset
   4062 CBA0 E2 20                    +            .byte $e2,$20
                                        
   4063 CBA2 90 15                                bcc .0000040          ;backward branch
                                        ;
   4065 CBA4 24 BC                                bit .btype            ;check branch range
   4066 CBA6 30 0A                                bmi .0000020          ;long
                                        ;
                                        ;
                                        ;	process short forward branch...
                                        ;
   4071 CBA8 EB                       +            .byte $eb
                                                           ;offset MSB should be zero
   4072 CBA9 D0 21                                bne .0000060          ;it isn't — out of range
                                        ;
   4074 CBAB EB                       +            .byte $eb
                                                           ;offset LSB should be $00-$7F
   4075 CBAC 30 1E                                bmi .0000060          ;it isn't — out of range
                                        ;
   4077 CBAE A9 01                      .0000010 lda #s_byte           ;final instruction size
   4078 CBB0 18                                   clc                   ;branch in range
   4079 CBB1 60                                   rts
                                        ;
                                        ;
                                        ;	process long forward branch...
                                        ;
   4084 CBB2 EB                         .0000020 +         .byte $eb
                                                           ;offset MSB should be positive
   4085 CBB3 30 17                                bmi .0000060          ;it isn't — branch out of range
                                        ;
   4087 CBB5 A9 02                      .0000030 lda #s_word
   4088 CBB7 18                                   clc
   4089 CBB8 60                                   rts
                                        ;
                                        ;
                                        ;	process backward branch...
                                        ;
   4094 CBB9 24 BC                      .0000040 bit .btype            ;long or short?
   4095 CBBB 30 0C                                bmi .0000050          ;long
                                        ;
                                        ;
                                        ;	process short backward branch...
                                        ;
   4100 CBBD EB                       +            .byte $eb
                                                           ;offset MSB should be negative
   4101 CBBE 10 0C                                bpl .0000060          ;it isn't — out of range
                                        ;
   4103 CBC0 49 FF                                eor #%11111111        ;complement offset MSB 2s 
   4104 CBC2 D0 08                                bne .0000060          ;out of range
                                        ;
   4106 CBC4 EB                       +            .byte $eb
                                                           ;offset LSB should be $80-$FF
   4107 CBC5 30 E7                                bmi .0000010          ;it is — branch in range
                                        ;
   4109 CBC7 80 03                                bra .0000060          ;branch out of range
                                        ;
                                        ;
                                        ;	process long backward branch...
                                        ;
   4114 CBC9 EB                         .0000050 +         .byte $eb
                                                           ;offset MSB should be negative
   4115 CBCA 30 E9                                bmi .0000030          ;it is — branch in range
                                        ;
   4117 CBCC 38                         .0000060 sec                   ;range error
   4118 CBCD 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getcharr: GET PREVIOUS INPUT BUFFER CHARACTER
                                        ;
   4124 CBCE C6 C1                      getcharr dec ibufidx           ;move back a char
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getchar: GET A CHARACTER FROM INPUT BUFFER
                                        ;
                                        ;	——————————————————————————————————————————————
                                        ;	Preparatory Ops : none
                                        ;
                                        ;	Register Returns: .A: character or <NUL>
                                        ;	                  .B: entry value
                                        ;	                  .X: entry value
                                        ;	                  .Y: entry value
                                        ;
                                        ;	MPU Flags: NVmxDIZC
                                        ;	           ||||||||
                                        ;	           |||||||+———> entry value
                                        ;	           ||||||+————> 1: <NUL> gotten
                                        ;	           |||||+—————> entry value
                                        ;	           ||||+——————> entry value
                                        ;	           |||+———————> entry value
                                        ;	           ||+————————> entry value
                                        ;	           |+—————————> not defined
                                        ;	           +——————————> not defined
                                        ;	——————————————————————————————————————————————
                                        ;
   4150 CBD0 DA                         getchar  phx
   4151 CBD1 5A                                   phy
   4152 CBD2 08                                   php                   ;save register sizes
   4153 CBD3 E2 30                    +            .byte $e2,$30
                                                        ;force 8 bits
   4154 CBD5 A6 C1                                ldx ibufidx           ;buffer index
   4155 CBD7 BD 00 02                             lda ibuffer,x         ;get char
   4156 CBDA E6 C1                                inc ibufidx           ;bump index
   4157 CBDC 28                                   plp                   ;restore register widths
   4158 CBDD 7A                                   ply
   4159 CBDE FA                                   plx
                                        ; Changed the following to XBA instruction which seems to work as well.
                                        ; XBA doesn't access the stack memory saving a data memory access,
                                        ; and hence is faster.
   4163 CBDF EB                       +            .byte $eb
                                        		;	pha                   ;condition...
   4164 CBE0 EB                       +            .byte $eb
                                        		;   pla                   ;.Z
   4165 CBE1 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getpat: GET PATTERN FOR MEMORY CHANGE or SEARCH
                                        ;
                                        ;	—————————————————————————————————————————————————————
                                        ;	Preparatory Ops: Null-terminated pattern in IBUFFER.
                                        ;
                                        ;	Returned Values: .A: used
                                        ;	                 .X: used
                                        ;	                 .Y: pattern length if entered
                                        ;	                 .C: 0 = pattern valid
                                        ;	                     1 = exception:
                                        ;	                 .N  0 = no pattern entered
                                        ;	                     1 = evaluation error
                                        ;
                                        ;	Notes: 1) If pattern is preceded by "'" the following
                                        ;	          characters are interpreted as ASCII.
                                        ;	       2) A maximum of 32 bytes or characters is
                                        ;	          accepted.  Excess input will be discarded.
                                        ;	—————————————————————————————————————————————————————
                                        ;
   4188 CBE2 64 CD                      getpat   stz status            ;clear pattern type indicator
   4189 CBE4 A0 00                                ldy #0                ;pattern index
   4190 CBE6 20 CE CB                             jsr getcharr          ;get last char
   4191 CBE9 F0 3C                                beq .0000070          ;EOS
                                        ;
   4193 CBEB A6 C1                                ldx ibufidx           ;current buffer index
   4194 CBED 20 2E CC                             jsr getcharw          ;get next
   4195 CBF0 F0 35                                beq .0000070          ;EOS
                                        ;
   4197 CBF2 C9 27                                cmp #''''			; *** watch syntax here, the following line of code was omitted when only ''' was present
   4198 CBF4 D0 04                                bne .0000010          ;not ASCII input
                                        ;
   4200 CBF6 66 CD                                ror status            ;condition flag
   4201 CBF8 80 12                                bra .0000030          ;balance of input is ASCII
                                        ;
   4203 CBFA 86 C1                      .0000010 stx ibufidx           ;restore buffer index
                                        ;
   4205 CBFC 20 E1 CA                   .0000020 jsr getparm           ;evaluate numeric pattern
   4206 CBFF B0 21                                bcs .0000060          ;done w/pattern
                                        ;
   4208 CC01 20 CD CA                             jsr facasize          ;size
   4209 CC04 C9 02                                cmp #s_word
   4210 CC06 B0 1F                                bcs .0000070          ;not a byte — error
                                        ;
   4212 CC08 A5 A9                                lda faca              ;get byte &...
   4213 CC0A 80 05                                bra .0000040          ;store
                                        ;
   4215 CC0C 20 D0 CB                   .0000030 jsr getchar           ;get ASCII char
   4216 CC0F F0 11                                beq .0000060          ;done w/pattern
                                        ;
   4218 CC11 C0 20                      .0000040 cpy #s_auxbuf         ;pattern buffer full?
   4219 CC13 F0 0A                                beq .0000050          ;yes
                                        ;
   4221 CC15 99 51 02                             sta auxbuf,y          ;store pattern
   4222 CC18 C8                                   iny
   4223 CC19 24 CD                                bit status
   4224 CC1B 10 DF                                bpl .0000020          ;get next numeric value
                                        ;
   4226 CC1D 80 ED                                bra .0000030          ;get next ASCII char
                                        ;
   4228 CC1F 20 14 C8                   .0000050 jsr alert             ;excess input
                                        ;
   4230 CC22 84 C0                      .0000060 sty auxbufix          ;save pattern size
   4231 CC24 98                                   tya                   ;condition .Z
   4232 CC25 18                                   clc                   ;pattern valid
   4233 CC26 60                                   rts
                                        ;
                                        ;
                                        ;	no pattern entered...
                                        ;
   4238 CC27 C2 80                      .0000070 +         .byte $c2,%10000000
                                        
   4239 CC29 38                                   sec
   4240 CC2A 60                                   rts
                                        ;
                                        ;
                                        ;	evaluation error...
                                        ;
   4245 CC2B E2 81                      .0000080 +         .byte $e2,%10000001
                                        
   4246 CC2D 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getcharw: GET FROM INPUT BUFFER, DISCARDING WHITESPACE
                                        ;
                                        ;	——————————————————————————————————————————————————
                                        ;	Preparatory Ops: Null-terminated input in IBUFFER.
                                        ;
                                        ;	Returned Values: .A: char or null
                                        ;	                 .X: entry value
                                        ;	                 .Y: entry value
                                        ;	                 .Z: 1 = null terminator detected
                                        ;
                                        ;	Notes: Whitespace is defined as a blank ($20) or a
                                        ;	       horizontal tab ($09).
                                        ;	——————————————————————————————————————————————————
                                        ;
   4264 CC2E 20 D0 CB                   getcharw jsr getchar           ;get from buffer
   4265 CC31 F0 08                                beq .0000010          ;EOI
                                        ;
   4267 CC33 C9 20                                cmp #' '
   4268 CC35 F0 F7                                beq getcharw          ;discard whitespace
                                        ;
   4270 CC37 C9 09                                cmp #a_ht             ;also whitespace
   4271 CC39 F0 F3                                beq getcharw
                                        ;
   4273 CC3B 18                         .0000010 clc
   4274 CC3C 60                                   rts  
                                        ;
                                        ;================================================================================
                                        ;
                                        ;input: INTERACTIVE INPUT FROM CONSOLE CHANNEL
                                        ;
                                        ;	———————————————————————————————————————————————————————————
                                        ;	Preparatory Ops: Zero IBUFIDX or load IBUFFER with default
                                        ;	                 input & set IBUFIDX to the number of chars
                                        ;	                 loaded into the buffer.
                                        ;
                                        ;	Returned Values: .A: used
                                        ;	                 .X: characters entered
                                        ;	                 .Y: used
                                        ;
                                        ;	Example: STZ IBUFIDX
                                        ;	         JSR INPUT
                                        ;
                                        ;	Notes: Input is collected in IBUFFER & is null-terminated.
                                        ;	       IBUFIDX is reset to zero upon exit.
                                        ;	———————————————————————————————————————————————————————————
                                        ;
   4296 CC3D                            input:
   4297 CC3D A6 C1                       	    ldx ibufidx
   4298 CC3F 9E 00 02                             stz ibuffer,x         ;be sure buffer is terminated
   4299 CC42 20 80 C7                             jsr dpyibuf           ;print default input if any
   4300 CC45 F4                       +            .byte $f4
   4300 CC46 10 D0                    +            .word dc_cn
                                        
   4301 CC48 20 1D C8                             jsr sprint            ;enable cursor
   4302 CC4B A6 C1                                ldx ibufidx           ;starting buffer index
                                        ;
                                        ;
                                        ;	main input loop...
                                        ;
   4307 CC4D 20 00 F4                   .0000010 jsr getcha            ;poll for input
   4308 CC50 90 02                                bcc .0000020          ;got something
                                        ;
                                        ;         jsr	$F409          ;wait 'til any IRQ &... (Reschedule tasks)
   4311 CC52 80 F9                                bra .0000010          ;try again
                                        ;
   4313 CC54                            .0000020
   4314 CC54 C9 7F                       		cmp #a_del            ;above ASCII range?
   4315 CC56 B0 F5                                bcs .0000010          ;yes, ignore
                                        ;
   4317 CC58 C9 09                                cmp #a_ht             ;horizontal tab?
   4318 CC5A D0 02                                bne .0000030          ;no
                                        ;
   4320 CC5C A9 20                                lda #a_blank          ;replace <HT> w/blank
                                        ;
   4322 CC5E C9 20                      .0000030 cmp #a_blank          ;control char?
   4323 CC60 90 10                                bcc .0000050          ;yes
                                        ;
                                        ;
                                        ;	process QWERTY character...
                                        ;
   4328 CC62 E0 50                                cpx #s_ibuf           ;room in buffer?
   4329 CC64 B0 05                                bcs .0000040          ;no
                                        ;
   4331 CC66 9D 00 02                             sta ibuffer,x         ;store char
   4332 CC69 E8                                   inx                   ;bump index
   4333 CC6A 2C                                   .byte bitabs          ;echo char
                                        ;
   4335 CC6B A9 07                      .0000040 lda #a_bel            ;alert user
   4336 CC6D 20 06 F4                             jsr putcha
   4337 CC70 80 DB                                bra .0000010          ;get some more
                                        ;
                                        ;
                                        ;	process carriage return...
                                        ;
   4342 CC72 C9 0D                      .0000050 cmp #a_cr             ;carriage return?
   4343 CC74 D0 0E                                bne .0000060          ;no
                                        ;
   4345 CC76 DA                                   phx                   ;protect input count
   4346 CC77 F4                       +            .byte $f4
   4346 CC78 14 D0                    +            .word dc_co
                                        
   4347 CC7A 20 1D C8                             jsr sprint            ;cursor off
   4348 CC7D FA                                   plx                   ;recover input count
   4349 CC7E 9E 00 02                             stz ibuffer,x         ;terminate input &...
   4350 CC81 64 C1                                stz ibufidx           ;reset buffer index
   4351 CC83 60                                   rts                   ;done
                                        ;
                                        ;
                                        ;	process backspace...
                                        ;
   4356 CC84 C9 08                      .0000060 cmp #a_bs             ;backspace?
   4357 CC86 D0 C5                                bne .0000010          ;no
                                        ;
   4359 CC88 8A                                   txa
   4360 CC89 F0 C2                                beq .0000010          ;no input, ignore <BS>
                                        ;
   4362 CC8B CA                                   dex                   ;1 less char
   4363 CC8C DA                                   phx                   ;preserve count
   4364 CC8D 20 CF C7                             jsr gendbs            ;destructive backspace
   4365 CC90 FA                                   plx                   ;restore count
   4366 CC91 80 BA                                bra .0000010          ;get more input
                                        ;
                                        ;================================================================================
                                        ;
                                        ;lodbnk: LOAD SOURCE & DESTINATION BANKS
                                        ;
   4372 CC93 E2 20                      lodbnk +         .byte $e2,$20
                                        
   4373 CC95 A5 BF                                lda operand+s_word    ;destination bank
   4374 CC97 EB                       +            .byte $eb
                                                           ;make it MSB
   4375 CC98 A5 A4                                lda addra+s_word      ;source bank is LSB
   4376 CC9A 60                                   rts
                                        ;         
                                        ;================================================================================
                                        ;
                                        ;getcharc: GET A CHARACTER FROM INPUT BUFFER & CONVERT CASE
                                        ;
                                        ;	——————————————————————————————————————————————————
                                        ;	Preparatory Ops: Null-terminated input in IBUFFER.
                                        ;
                                        ;	Returned Values: .A: char or null
                                        ;	                 .X: entry value
                                        ;	                 .Y: entry value
                                        ;	                 .Z: 1 = null terminator detected
                                        ;	——————————————————————————————————————————————————
                                        ;
   4391 CC9B 20 D0 CB                   getcharc jsr getchar           ;get from buffer
   4392 CC9E F0 0C                                beq touppera          ;just return
                                        ;
                                        ;================================================================================
                                        ;
                                        ;toupper: FORCE CHARACTER TO UPPER CASE
                                        ;
                                        ;	————————————————————————————————————————————————
                                        ;	Preparatory Ops : .A: character to convert
                                        ;
                                        ;	Register Returns: .A: converted character
                                        ;	                  .B: entry value
                                        ;	                  .X: entry value
                                        ;	                  .Y: entry value
                                        ;
                                        ;	MPU Flags: no change
                                        ;
                                        ;	Notes: 1) This subroutine has no effect on char-
                                        ;	          acters that are not alpha.
                                        ;	————————————————————————————————————————————————
                                        ;
   4412 CCA0 08                         toupper  php                   ;protect flags
   4413 CCA1 C9 61                                cmp #a_asclcl         ;check char range
   4414 CCA3 90 06                                bcc .0000010          ;not LC alpha
                                        ;
   4416 CCA5 C9 7B                                cmp #a_asclch+s_byte
   4417 CCA7 B0 02                                bcs .0000010          ;not LC alpha
                                        ;
   4419 CCA9 29 5F                                and #a_lctouc         ;force to UC
                                        ;
   4421 CCAB 28                         .0000010 plp                   ;restore flags
                                        ;
   4423 CCAC 60                         touppera rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;teststop: TEST FOR STOP KEY
                                        ;
                                        ;	——————————————————————————————————————————————
                                        ;	Preparatory Ops: none
                                        ;
                                        ;	Returned Values: .A: detected keypress, if any
                                        ;	                 .X: entry value
                                        ;	                 .Y: entry value
                                        ;
                                        ;	MPU Flags: NVmxDIZC
                                        ;	           ||||||||
                                        ;	           |||||||+———> 0: normal key detected
                                        ;	           |||||||      1: <STOP> detected
                                        ;	           +++++++————> not defined
                                        ;
                                        ;	Example: jsr teststop
                                        ;	         bcs stopped
                                        ;
                                        ;	Notes: The symbol STOPKEY defines the ASCII
                                        ;	       value of the "stop key."
                                        ;	——————————————————————————————————————————————
                                        ;
   4449 CCAD 20 00 F4                   teststop jsr getcha            ;poll console
   4450 CCB0 B0 04                                bcs .0000010          ;no input
                                        ;
   4452 CCB2 C9 03                                cmp #stopkey          ;stop key pressed?
   4453 CCB4 F0 01                                beq .0000020          ;yes
                                        ;
   4455 CCB6 18                         .0000010 clc
                                        ;
   4457 CCB7 60                         .0000020 rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;COMMAND PROCESSING DATA TABLES
                                        ;
                                        ;
                                        ;	monitor commands...
                                        ;
   4466 CCB8 41                         mpctab   .byte "A"             ;assemble code
   4467 CCB9 43                                   .byte "C"             ;compare memory ranges
   4468 CCBA 44                                   .byte "D"             ;disassemble code
   4469 CCBB 46                                   .byte "F"             ;fill memory
   4470 CCBC 47                                   .byte "G"             ;execute code
   4471 CCBD 48                                   .byte "H"             ;search memory
   4472 CCBE 4A                                   .byte "J"             ;execute code as subroutine
   4473 CCBF 4D                                   .byte "M"             ;dump memory range
   4474 CCC0 52                                   .byte "R"             ;dump registers
   4475 CCC1 54                                   .byte "T"             ;copy memory range
   4476 CCC2 58                                   .byte "X"             ;exit from monitor
   4477 CCC3 3E                                   .byte ">"             ;change memory
   4478 CCC4 3B                                   .byte ";"             ;change registers
   4705 = 0000000D                      n_mpctab =*-mpctab             ;entries in above table
                                        ;
                                        ;
                                        ;	monitor command jump table...
                                        ;
   4484 CCC5 8E C1                      mpcextab .word monasc-s_byte   ; A  assemble code
   4485 CCC7 50 C4                                .word moncmp-s_byte   ; C  compare memory ranges
   4486 CCC9 6A C3                                .word mondsc-s_byte   ; D  disassemble code
   4487 CCCB 21 C5                                .word monfil-s_byte   ; F  fill memory
   4488 CCCD BE C3                                .word monjmp-s_byte   ; G  execute code
   4489 CCCF 87 C5                                .word monhnt-s_byte   ; H  search memory
   4490 CCD1 EF C3                                .word monjsr-s_byte   ; J  execute code as subroutine
   4491 CCD3 CF C4                                .word mondmp-s_byte   ; M  dump memory range
   4492 CCD5 A3 C0                                .word monreg-s_byte   ; R  dump registers
   4493 CCD7 7E C4                                .word moncpy-s_byte   ; T  copy memory range
   4494 CCD9 38 C6                                .word monxit-s_byte   ; X  exit from monitor
   4495 CCDB 25 C4                                .word monchm-s_byte   ; >  change memory
   4496 CCDD FD C5                                .word monchr-s_byte   ; ;  change registers
                                        ;
                                        ;
                                        ;	number conversion...
                                        ;        
   4501 CCDF 10 0A 08 02                basetab  .byte 16,10,8,2       ;supported number bases
   4502 CCE3 04 03 03 01                bitsdtab .byte 4,3,3,1         ;bits per binary digit
   4503 CCE7 04 04 03 01                bitsntab .byte 4,4,3,1         ;bits per ASCII character
   4504 CCEB 03 02 09 02                lzsttab  .byte 3,2,9,2         ;leading zero suppression thresholds
   4505 CCEF 0C 0C 10 30                numstab  .byte 12,12,16,48     ;bin to ASCII conversion numerals
   4506 CCF3 24                         radxtab  .byte c_hex           ;hexadecimal radix
   4507 CCF4 2B                                   .byte c_dec           ;decimal radix
   4508 CCF5 40                                   .byte c_oct           ;octal radix
   4509 CCF6 25                                   .byte c_bin           ;binary radix
   4736 = 00000004                      n_radix  =*-radxtab            ;number of recognized radices
                                        ;
                                        ;
                                        ;	shadow MPU register sizes...
                                        ;
   4515 CCF7 02                         rcvltab  .byte s_mpupbx+s_byte ; PB
   4516 CCF8 03                                   .byte s_mpupcx+s_byte ; PC
   4517 CCF9 02                                   .byte s_mpusrx+s_byte ; SR
   4518 CCFA 03                                   .byte s_word+s_byte   ; .C
   4519 CCFB 03                                   .byte s_word+s_byte   ; .X
   4520 CCFC 03                                   .byte s_word+s_byte   ; .Y
   4521 CCFD 03                                   .byte s_mpuspx+s_byte ; SP
   4522 CCFE 03                                   .byte s_mpudpx+s_byte ; DP
   4523 CCFF 02                                   .byte s_mpudbx+s_byte ; DB
   4750 = 00000009                      n_regchv =*-rcvltab            ;total shadow registers
                                        ;
                                        ;================================================================================
                                        ;
                                        ;ASSEMBLER/DISASSEMBLER DATA TABLES
                                        ;
                                        ;
                                        ;	numerically sorted & encoded W65C816S mnemonics...
                                        ;
   4533 CD00 F2 10                      mnetab   .word mne_xba         ;  0 — XBA
   4534 CD02 5A 11                                .word mne_lda         ;  1 — LDA
   4535 CD04 A2 11                                .word mne_pea         ;  2 — PEA
   4536 CD06 62 12                                .word mne_pha         ;  3 — PHA
   4537 CD08 62 13                                .word mne_pla         ;  4 — PLA
   4538 CD0A C6 14                                .word mne_bra         ;  5 — BRA
   4539 CD0C E0 14                                .word mne_ora         ;  6 — ORA
   4540 CD0E 68 15                                .word mne_sta         ;  7 — STA
   4541 CD10 6A 16                                .word mne_txa         ;  8 — TXA
   4542 CD12 AA 16                                .word mne_tya         ;  9 — TYA
   4543 CD14 62 1A                                .word mne_phb         ; 10 — PHB
   4544 CD16 62 1B                                .word mne_plb         ; 11 — PLB
   4545 CD18 EA 1C                                .word mne_trb         ; 12 — TRB
   4546 CD1A 2A 1D                                .word mne_tsb         ; 13 — TSB
   4547 CD1C E8 20                                .word mne_sbc         ; 14 — SBC
   4548 CD1E 06 21                                .word mne_bcc         ; 15 — BCC
   4549 CD20 44 21                                .word mne_adc         ; 16 — ADC
   4550 CD22 6A 21                                .word mne_tdc         ; 17 — TDC
   4551 CD24 8A 21                                .word mne_dec         ; 18 — DEC
   4552 CD26 A8 21                                .word mne_sec         ; 19 — SEC
   4553 CD28 48 23                                .word mne_clc         ; 20 — CLC
   4554 CD2A D4 23                                .word mne_inc         ; 21 — INC
   4555 CD2C 2A 25                                .word mne_tsc         ; 22 — TSC
   4556 CD2E C6 25                                .word mne_bvc         ; 23 — BVC
   4557 CD30 2A 29                                .word mne_tcd         ; 24 — TCD
   4558 CD32 A8 29                                .word mne_sed         ; 25 — SED
   4559 CD34 62 2A                                .word mne_phd         ; 26 — PHD
   4560 CD36 48 2B                                .word mne_cld         ; 27 — CLD
   4561 CD38 62 2B                                .word mne_pld         ; 28 — PLD
   4562 CD3A C4 2B                                .word mne_and         ; 29 — AND
   4563 CD3C 32 31                                .word mne_xce         ; 30 — XCE
   4564 CD3E C6 33                                .word mne_bne         ; 31 — BNE
   4565 CD40 B0 50                                .word mne_wai         ; 32 — WAI
   4566 CD42 A2 51                                .word mne_pei         ; 33 — PEI
   4567 CD44 A8 51                                .word mne_sei         ; 34 — SEI
   4568 CD46 48 53                                .word mne_cli         ; 35 — CLI
   4569 CD48 86 53                                .word mne_bmi         ; 36 — BMI
   4570 CD4A 66 55                                .word mne_rti         ; 37 — RTI
   4571 CD4C 62 62                                .word mne_phk         ; 38 — PHK
   4572 CD4E C6 64                                .word mne_brk         ; 39 — BRK
   4573 CD50 96 6B                                .word mne_jml         ; 40 — JML
   4574 CD52 26 6C                                .word mne_rol         ; 41 — ROL
   4575 CD54 46 6C                                .word mne_bpl         ; 42 — BPL
   4576 CD56 C6 6C                                .word mne_brl         ; 43 — BRL
   4577 CD58 04 6D                                .word mne_asl         ; 44 — ASL
   4578 CD5A 16 6D                                .word mne_jsl         ; 45 — JSL
   4579 CD5C 66 6D                                .word mne_rtl         ; 46 — RTL
   4580 CD5E 70 71                                .word mne_wdm         ; 47 — WDM
   4581 CD60 DC 7D                                .word mne_mvn         ; 48 — MVN
   4582 CD62 A6 89                                .word mne_rep         ; 49 — REP
   4583 CD64 A8 89                                .word mne_sep         ; 50 — SEP
   4584 CD66 62 8A                                .word mne_php         ; 51 — PHP
   4585 CD68 62 8B                                .word mne_plp         ; 52 — PLP
   4586 CD6A 88 8B                                .word mne_cmp         ; 53 — CMP
   4587 CD6C 96 8B                                .word mne_jmp         ; 54 — JMP
   4588 CD6E 08 8C                                .word mne_cop         ; 55 — COP
   4589 CD70 1E 8C                                .word mne_nop         ; 56 — NOP
   4590 CD72 68 8D                                .word mne_stp         ; 57 — STP
   4591 CD74 DC 8D                                .word mne_mvp         ; 58 — MVP
   4592 CD76 86 91                                .word mne_beq         ; 59 — BEQ
   4593 CD78 A2 99                                .word mne_per         ; 60 — PER
   4594 CD7A 0C 9C                                .word mne_eor         ; 61 — EOR
   4595 CD7C 26 9C                                .word mne_ror         ; 62 — ROR
   4596 CD7E 16 9D                                .word mne_jsr         ; 63 — JSR
   4597 CD80 1A 9D                                .word mne_lsr         ; 64 — LSR
   4598 CD82 06 A1                                .word mne_bcs         ; 65 — BCS
   4599 CD84 2A A1                                .word mne_tcs         ; 66 — TCS
   4600 CD86 66 A5                                .word mne_rts         ; 67 — RTS
   4601 CD88 C6 A5                                .word mne_bvs         ; 68 — BVS
   4602 CD8A 6A A6                                .word mne_txs         ; 69 — TXS
   4603 CD8C 86 AA                                .word mne_bit         ; 70 — BIT
   4604 CD8E 48 BB                                .word mne_clv         ; 71 — CLV
   4605 CD90 AA C8                                .word mne_tax         ; 72 — TAX
   4606 CD92 5A C9                                .word mne_ldx         ; 73 — LDX
   4607 CD94 8A C9                                .word mne_dex         ; 74 — DEX
   4608 CD96 62 CA                                .word mne_phx         ; 75 — PHX
   4609 CD98 62 CB                                .word mne_plx         ; 76 — PLX
   4610 CD9A D4 CB                                .word mne_inx         ; 77 — INX
   4611 CD9C 48 CC                                .word mne_cpx         ; 78 — CPX
   4612 CD9E 2A CD                                .word mne_tsx         ; 79 — TSX
   4613 CDA0 68 CD                                .word mne_stx         ; 80 — STX
   4614 CDA2 AA CE                                .word mne_tyx         ; 81 — TYX
   4615 CDA4 AA D0                                .word mne_tay         ; 82 — TAY
   4616 CDA6 5A D1                                .word mne_ldy         ; 83 — LDY
   4617 CDA8 8A D1                                .word mne_dey         ; 84 — DEY
   4618 CDAA 62 D2                                .word mne_phy         ; 85 — PHY
   4619 CDAC 62 D3                                .word mne_ply         ; 86 — PLY
   4620 CDAE D4 D3                                .word mne_iny         ; 87 — INY
   4621 CDB0 48 D4                                .word mne_cpy         ; 88 — CPY
   4622 CDB2 68 D5                                .word mne_sty         ; 89 — STY
   4623 CDB4 6A D6                                .word mne_txy         ; 90 — TXY
   4624 CDB6 68 DD                                .word mne_stz         ; 91 — STZ
                                        ;
   4852 = 000000B8                      s_mnetab =*-mnetab             ;mnemonic table size
   4853 = 0000005C                      n_mnemon =s_mnetab/s_word      ;total mnemonics
                                        ;
                                        ;
                                        ;	mnemonic lookup indices in opcode order...
                                        ;
   4632 CDB8 27                         mnetabix .byte mne_brkx        ; $00  BRK
   4633 CDB9 06                                   .byte mne_orax        ; $01  ORA (dp,X)
   4634 CDBA 37                                   .byte mne_copx        ; $02  COP
   4635 CDBB 06                                   .byte mne_orax        ; $03  ORA offset,S
   4636 CDBC 0D                                   .byte mne_tsbx        ; $04  TSB dp
   4637 CDBD 06                                   .byte mne_orax        ; $05  ORA dp
   4638 CDBE 2C                                   .byte mne_aslx        ; $06  ASL dp
   4639 CDBF 06                                   .byte mne_orax        ; $07  ORA [dp]
   4640 CDC0 33                                   .byte mne_phpx        ; $08  PHP
   4641 CDC1 06                                   .byte mne_orax        ; $09  ORA #
   4642 CDC2 2C                                   .byte mne_aslx        ; $0A  ASL A
   4643 CDC3 1A                                   .byte mne_phdx        ; $0B  PHD
   4644 CDC4 0D                                   .byte mne_tsbx        ; $0C  TSB abs
   4645 CDC5 06                                   .byte mne_orax        ; $0D  ORA abs
   4646 CDC6 2C                                   .byte mne_aslx        ; $0E  ASL abs
   4647 CDC7 06                                   .byte mne_orax        ; $0F  ORA absl
                                        ;
   4649 CDC8 2A                                   .byte mne_bplx        ; $10  BPL abs
   4650 CDC9 06                                   .byte mne_orax        ; $11  ORA (dp),Y
   4651 CDCA 06                                   .byte mne_orax        ; $12  ORA (dp)
   4652 CDCB 06                                   .byte mne_orax        ; $13  ORA (offset,S),Y
   4653 CDCC 0C                                   .byte mne_trbx        ; $14  TRB dp
   4654 CDCD 06                                   .byte mne_orax        ; $15  ORA dp,X
   4655 CDCE 2C                                   .byte mne_aslx        ; $16  ASL dp,X
   4656 CDCF 06                                   .byte mne_orax        ; $17  ORA [dp],Y
   4657 CDD0 14                                   .byte mne_clcx        ; $18  CLC
   4658 CDD1 06                                   .byte mne_orax        ; $19  ORA abs
   4659 CDD2 15                                   .byte mne_incx        ; $1A  INC A
   4660 CDD3 42                                   .byte mne_tcsx        ; $1B  TCS
   4661 CDD4 0C                                   .byte mne_trbx        ; $1C  TRB abs
   4662 CDD5 06                                   .byte mne_orax        ; $1D  ORA abs,X
   4663 CDD6 2C                                   .byte mne_aslx        ; $1E  ASL abs,X
   4664 CDD7 06                                   .byte mne_orax        ; $1F  ORA absl,X
                                        ;
   4666 CDD8 3F                                   .byte mne_jsrx        ; $20  JSR abs
   4667 CDD9 1D                                   .byte mne_andx        ; $21  AND (dp,X)
   4668 CDDA 2D                                   .byte mne_jslx        ; $22  JSL absl
   4669 CDDB 1D                                   .byte mne_andx        ; $23  AND offset,S
   4670 CDDC 46                                   .byte mne_bitx        ; $24  BIT dp
   4671 CDDD 1D                                   .byte mne_andx        ; $25  AND dp
   4672 CDDE 29                                   .byte mne_rolx        ; $26  ROL dp
   4673 CDDF 1D                                   .byte mne_andx        ; $27  AND [dp]
   4674 CDE0 34                                   .byte mne_plpx        ; $28  PLP
   4675 CDE1 1D                                   .byte mne_andx        ; $29  AND #
   4676 CDE2 29                                   .byte mne_rolx        ; $2A  ROL A
   4677 CDE3 1C                                   .byte mne_pldx        ; $2B  PLD
   4678 CDE4 46                                   .byte mne_bitx        ; $2C  BIT abs
   4679 CDE5 1D                                   .byte mne_andx        ; $2D  AND abs
   4680 CDE6 29                                   .byte mne_rolx        ; $2E  ROL abs
   4681 CDE7 1D                                   .byte mne_andx        ; $2F  AND absl
                                        ;
   4683 CDE8 24                                   .byte mne_bmix        ; $30  BMI abs
   4684 CDE9 1D                                   .byte mne_andx        ; $31  AND (dp),Y
   4685 CDEA 1D                                   .byte mne_andx        ; $32  AND (dp)
   4686 CDEB 1D                                   .byte mne_andx        ; $33  AND (offset,S),Y
   4687 CDEC 46                                   .byte mne_bitx        ; $34  BIT dp,X
   4688 CDED 1D                                   .byte mne_andx        ; $35  AND dp,X
   4689 CDEE 29                                   .byte mne_rolx        ; $36  ROL dp,X
   4690 CDEF 1D                                   .byte mne_andx        ; $37  AND [dp],Y
   4691 CDF0 13                                   .byte mne_secx        ; $38  SEC
   4692 CDF1 1D                                   .byte mne_andx        ; $39  AND abs,Y
   4693 CDF2 12                                   .byte mne_decx        ; $3A  DEC A
   4694 CDF3 16                                   .byte mne_tscx        ; $3B  TSC
   4695 CDF4 46                                   .byte mne_bitx        ; $3C  BIT abs,X
   4696 CDF5 1D                                   .byte mne_andx        ; $3D  AND abs,X
   4697 CDF6 29                                   .byte mne_rolx        ; $3E  ROL abs,X
   4698 CDF7 1D                                   .byte mne_andx        ; $3F  AND absl,X
                                        ;
   4700 CDF8 25                                   .byte mne_rtix        ; $40  RTI
   4701 CDF9 3D                                   .byte mne_eorx        ; $41  EOR (dp,X)
   4702 CDFA 2F                                   .byte mne_wdmx        ; $42  WDM
   4703 CDFB 3D                                   .byte mne_eorx        ; $43  EOR offset,S
   4704 CDFC 3A                                   .byte mne_mvpx        ; $44  MVP sb,db
   4705 CDFD 3D                                   .byte mne_eorx        ; $45  EOR dp
   4706 CDFE 40                                   .byte mne_lsrx        ; $46  LSR dp
   4707 CDFF 3D                                   .byte mne_eorx        ; $47  EOR [dp]
   4708 CE00 03                                   .byte mne_phax        ; $48  PHA
   4709 CE01 3D                                   .byte mne_eorx        ; $49  EOR #
   4710 CE02 40                                   .byte mne_lsrx        ; $4A  LSR A
   4711 CE03 26                                   .byte mne_phkx        ; $4B  PHK
   4712 CE04 36                                   .byte mne_jmpx        ; $4C  JMP abs
   4713 CE05 3D                                   .byte mne_eorx        ; $4D  EOR abs
   4714 CE06 40                                   .byte mne_lsrx        ; $4E  LSR abs
   4715 CE07 3D                                   .byte mne_eorx        ; $4F  EOR absl
                                        ;
   4717 CE08 17                                   .byte mne_bvcx        ; $50  BVC abs
   4718 CE09 3D                                   .byte mne_eorx        ; $51  EOR (dp),Y
   4719 CE0A 3D                                   .byte mne_eorx        ; $52  EOR (dp)
   4720 CE0B 3D                                   .byte mne_eorx        ; $53  EOR (offset,S),Y
   4721 CE0C 30                                   .byte mne_mvnx        ; $54  MVN sb,db
   4722 CE0D 3D                                   .byte mne_eorx        ; $55  EOR dp,X
   4723 CE0E 40                                   .byte mne_lsrx        ; $56  LSR dp,X
   4724 CE0F 3D                                   .byte mne_eorx        ; $57  EOR [dp],Y
   4725 CE10 23                                   .byte mne_clix        ; $58  CLI
   4726 CE11 3D                                   .byte mne_eorx        ; $59  EOR abs,Y
   4727 CE12 55                                   .byte mne_phyx        ; $5A  PHY
   4728 CE13 18                                   .byte mne_tcdx        ; $5B  TCD
   4729 CE14 28                                   .byte mne_jmlx        ; $5C  JML absl
   4730 CE15 3D                                   .byte mne_eorx        ; $5D  EOR abs,X
   4731 CE16 40                                   .byte mne_lsrx        ; $5E  LSR abs,X
   4732 CE17 3D                                   .byte mne_eorx        ; $5F  EOR absl,X
                                        ;
   4734 CE18 43                                   .byte mne_rtsx        ; $60  RTS
   4735 CE19 10                                   .byte mne_adcx        ; $61  ADC (dp,X)
   4736 CE1A 3C                                   .byte mne_perx        ; $62  PER
   4737 CE1B 10                                   .byte mne_adcx        ; $63  ADC offset,S
   4738 CE1C 5B                                   .byte mne_stzx        ; $64  STZ dp
   4739 CE1D 10                                   .byte mne_adcx        ; $65  ADC dp
   4740 CE1E 3E                                   .byte mne_rorx        ; $66  ROR dp
   4741 CE1F 10                                   .byte mne_adcx        ; $67  ADC [dp]
   4742 CE20 04                                   .byte mne_plax        ; $68  PLA
   4743 CE21 10                                   .byte mne_adcx        ; $69  ADC #
   4744 CE22 3E                                   .byte mne_rorx        ; $6A  ROR A
   4745 CE23 2E                                   .byte mne_rtlx        ; $6B  RTL
   4746 CE24 36                                   .byte mne_jmpx        ; $6C  JMP (abs)
   4747 CE25 10                                   .byte mne_adcx        ; $6D  ADC abs
   4748 CE26 3E                                   .byte mne_rorx        ; $6E  ROR abs
   4749 CE27 10                                   .byte mne_adcx        ; $6F  ADC absl
                                        ;
   4751 CE28 44                                   .byte mne_bvsx        ; $70  BVS abs
   4752 CE29 10                                   .byte mne_adcx        ; $71  ADC (dp),Y
   4753 CE2A 10                                   .byte mne_adcx        ; $72  ADC (dp)
   4754 CE2B 10                                   .byte mne_adcx        ; $73  ADC (offset,S),Y
   4755 CE2C 5B                                   .byte mne_stzx        ; $74  STZ dp,X
   4756 CE2D 10                                   .byte mne_adcx        ; $75  ADC dp,X
   4757 CE2E 3E                                   .byte mne_rorx        ; $76  ROR dp,X
   4758 CE2F 10                                   .byte mne_adcx        ; $77  ADC [dp],Y
   4759 CE30 22                                   .byte mne_seix        ; $78  SEI
   4760 CE31 10                                   .byte mne_adcx        ; $79  ADC abs,Y
   4761 CE32 56                                   .byte mne_plyx        ; $7A  PLY
   4762 CE33 11                                   .byte mne_tdcx        ; $7B  TDC
   4763 CE34 36                                   .byte mne_jmpx        ; $7C  JMP (abs,X)
   4764 CE35 10                                   .byte mne_adcx        ; $7D  ADC abs,X
   4765 CE36 3E                                   .byte mne_rorx        ; $7E  ROR abs,X
   4766 CE37 10                                   .byte mne_adcx        ; $7F  ADC absl,X
                                        ;
   4768 CE38 05                                   .byte mne_brax        ; $80  BRA abs
   4769 CE39 07                                   .byte mne_stax        ; $81  STA (dp,X)
   4770 CE3A 2B                                   .byte mne_brlx        ; $82  BRL abs
   4771 CE3B 07                                   .byte mne_stax        ; $83  STA offset,S
   4772 CE3C 59                                   .byte mne_styx        ; $84  STY dp
   4773 CE3D 07                                   .byte mne_stax        ; $85  STA dp
   4774 CE3E 50                                   .byte mne_stxx        ; $86  STX dp
   4775 CE3F 07                                   .byte mne_stax        ; $87  STA [dp]
   4776 CE40 54                                   .byte mne_deyx        ; $88  DEY
   4777 CE41 46                                   .byte mne_bitx        ; $89  BIT #
   4778 CE42 08                                   .byte mne_txax        ; $8A  TXA
   4779 CE43 0A                                   .byte mne_phbx        ; $8B  PHB
   4780 CE44 59                                   .byte mne_styx        ; $8C  STY abs
   4781 CE45 07                                   .byte mne_stax        ; $8D  STA abs
   4782 CE46 50                                   .byte mne_stxx        ; $8E  STX abs
   4783 CE47 07                                   .byte mne_stax        ; $8F  STA absl
                                        ;
   4785 CE48 0F                                   .byte mne_bccx        ; $90  BCC abs
   4786 CE49 07                                   .byte mne_stax        ; $91  STA (dp),Y
   4787 CE4A 07                                   .byte mne_stax        ; $92  STA (dp)
   4788 CE4B 07                                   .byte mne_stax        ; $93  STA (offset,S),Y
   4789 CE4C 59                                   .byte mne_styx        ; $94  STY dp,X
   4790 CE4D 07                                   .byte mne_stax        ; $95  STA dp,X
   4791 CE4E 50                                   .byte mne_stxx        ; $96  STX dp,Y
   4792 CE4F 07                                   .byte mne_stax        ; $97  STA [dp],Y
   4793 CE50 09                                   .byte mne_tyax        ; $98  TYA
   4794 CE51 07                                   .byte mne_stax        ; $99  STA abs,Y
   4795 CE52 45                                   .byte mne_txsx        ; $9A  TXS
   4796 CE53 5A                                   .byte mne_txyx        ; $9B  TXY
   4797 CE54 5B                                   .byte mne_stzx        ; $9C  STZ abs
   4798 CE55 07                                   .byte mne_stax        ; $9D  STA abs,X
   4799 CE56 5B                                   .byte mne_stzx        ; $9E  STZ abs,X
   4800 CE57 07                                   .byte mne_stax        ; $9F  STA absl,X
                                        ;
   4802 CE58 53                                   .byte mne_ldyx        ; $A0  LDY #
   4803 CE59 01                                   .byte mne_ldax        ; $A1  LDA (dp,X)
   4804 CE5A 49                                   .byte mne_ldxx        ; $A2  LDX #
   4805 CE5B 01                                   .byte mne_ldax        ; $A3  LDA offset,S
   4806 CE5C 53                                   .byte mne_ldyx        ; $A4  LDY dp
   4807 CE5D 01                                   .byte mne_ldax        ; $A5  LDA dp
   4808 CE5E 49                                   .byte mne_ldxx        ; $A6  LDX dp
   4809 CE5F 01                                   .byte mne_ldax        ; $A7  LDA [dp]
   4810 CE60 52                                   .byte mne_tayx        ; $A8  TAY
   4811 CE61 01                                   .byte mne_ldax        ; $A9  LDA #
   4812 CE62 48                                   .byte mne_taxx        ; $AA  TAX
   4813 CE63 0B                                   .byte mne_plbx        ; $AB  PLB
   4814 CE64 53                                   .byte mne_ldyx        ; $AC  LDY abs
   4815 CE65 01                                   .byte mne_ldax        ; $AD  LDA abs
   4816 CE66 49                                   .byte mne_ldxx        ; $AE  LDX abs
   4817 CE67 01                                   .byte mne_ldax        ; $AF  LDA absl
                                        ;
   4819 CE68 41                                   .byte mne_bcsx        ; $B0  BCS abs
   4820 CE69 01                                   .byte mne_ldax        ; $B1  LDA (dp),Y
   4821 CE6A 01                                   .byte mne_ldax        ; $B2  LDA (dp)
   4822 CE6B 01                                   .byte mne_ldax        ; $B3  LDA (offset,S),Y
   4823 CE6C 53                                   .byte mne_ldyx        ; $B4  LDY dp,X
   4824 CE6D 01                                   .byte mne_ldax        ; $B5  LDA dp,X
   4825 CE6E 49                                   .byte mne_ldxx        ; $B6  LDX dp,Y
   4826 CE6F 01                                   .byte mne_ldax        ; $B7  LDA [dp],Y
   4827 CE70 47                                   .byte mne_clvx        ; $B8  CLV
   4828 CE71 01                                   .byte mne_ldax        ; $B9  LDA abs,Y
   4829 CE72 4F                                   .byte mne_tsxx        ; $BA  TSX
   4830 CE73 51                                   .byte mne_tyxx        ; $BB  TYX
   4831 CE74 53                                   .byte mne_ldyx        ; $BC  LDY abs,X
   4832 CE75 01                                   .byte mne_ldax        ; $BD  LDA abs,X
   4833 CE76 49                                   .byte mne_ldxx        ; $BE  LDX abs,Y
   4834 CE77 01                                   .byte mne_ldax        ; $BF  LDA absl,X
                                        ;
   4836 CE78 58                                   .byte mne_cpyx        ; $C0  CPY #
   4837 CE79 35                                   .byte mne_cmpx        ; $C1  CMP (dp,X)
   4838 CE7A 31                                   .byte mne_repx        ; $C2  REP #
   4839 CE7B 35                                   .byte mne_cmpx        ; $C3  CMP offset,S
   4840 CE7C 58                                   .byte mne_cpyx        ; $C4  CPY dp
   4841 CE7D 35                                   .byte mne_cmpx        ; $C5  CMP dp
   4842 CE7E 12                                   .byte mne_decx        ; $C6  DEC dp
   4843 CE7F 35                                   .byte mne_cmpx        ; $C7  CMP [dp]
   4844 CE80 57                                   .byte mne_inyx        ; $C8  INY
   4845 CE81 35                                   .byte mne_cmpx        ; $C9  CMP #
   4846 CE82 4A                                   .byte mne_dexx        ; $CA  DEX
   4847 CE83 20                                   .byte mne_waix        ; $CB  WAI
   4848 CE84 58                                   .byte mne_cpyx        ; $CC  CPY abs
   4849 CE85 35                                   .byte mne_cmpx        ; $CD  CMP abs
   4850 CE86 12                                   .byte mne_decx        ; $CE  DEC abs
   4851 CE87 35                                   .byte mne_cmpx        ; $CF  CMP absl
                                        ;
   4853 CE88 1F                                   .byte mne_bnex        ; $D0  BNE abs
   4854 CE89 35                                   .byte mne_cmpx        ; $D1  CMP (dp),Y
   4855 CE8A 35                                   .byte mne_cmpx        ; $D2  CMP (dp)
   4856 CE8B 35                                   .byte mne_cmpx        ; $D3  CMP (offset,S),Y
   4857 CE8C 21                                   .byte mne_peix        ; $D4  PEI dp
   4858 CE8D 35                                   .byte mne_cmpx        ; $D5  CMP dp,X
   4859 CE8E 12                                   .byte mne_decx        ; $D6  DEC dp,X
   4860 CE8F 35                                   .byte mne_cmpx        ; $D7  CMP [dp],Y
   4861 CE90 1B                                   .byte mne_cldx        ; $D8  CLD
   4862 CE91 35                                   .byte mne_cmpx        ; $D9  CMP abs,Y
   4863 CE92 4B                                   .byte mne_phxx        ; $DA  PHX
   4864 CE93 39                                   .byte mne_stpx        ; $DB  STP
   4865 CE94 36                                   .byte mne_jmpx        ; $DC  JMP [abs]
   4866 CE95 35                                   .byte mne_cmpx        ; $DD  CMP abs,X
   4867 CE96 12                                   .byte mne_decx        ; $DE  DEC abs,X
   4868 CE97 35                                   .byte mne_cmpx        ; $DF  CMP absl,X
                                        ;
   4870 CE98 4E                                   .byte mne_cpxx        ; $E0  CPX #
   4871 CE99 0E                                   .byte mne_sbcx        ; $E1  SBC (dp,X)
   4872 CE9A 32                                   .byte mne_sepx        ; $E2  SEP #
   4873 CE9B 0E                                   .byte mne_sbcx        ; $E3  SBC offset,S
   4874 CE9C 4E                                   .byte mne_cpxx        ; $E4  CPX dp
   4875 CE9D 0E                                   .byte mne_sbcx        ; $E5  SBC dp
   4876 CE9E 15                                   .byte mne_incx        ; $E6  INC dp
   4877 CE9F 0E                                   .byte mne_sbcx        ; $E7  SBC [dp]
   4878 CEA0 4D                                   .byte mne_inxx        ; $E8  INX
   4879 CEA1 0E                                   .byte mne_sbcx        ; $E9  SBC #
   4880 CEA2 38                                   .byte mne_nopx        ; $EA  NOP
   4881 CEA3 00                                   .byte mne_xbax        ; $EB  XBA
   4882 CEA4 4E                                   .byte mne_cpxx        ; $EC  CPX abs
   4883 CEA5 0E                                   .byte mne_sbcx        ; $ED  SBC abs
   4884 CEA6 15                                   .byte mne_incx        ; $EE  INC abs
   4885 CEA7 0E                                   .byte mne_sbcx        ; $EF  SBC absl
                                        ;
   4887 CEA8 3B                                   .byte mne_beqx        ; $F0  BEQ abs
   4888 CEA9 0E                                   .byte mne_sbcx        ; $F1  SBC (dp),Y
   4889 CEAA 0E                                   .byte mne_sbcx        ; $F2  SBC (dp)
   4890 CEAB 0E                                   .byte mne_sbcx        ; $F3  SBC (offset,S),Y
   4891 CEAC 02                                   .byte mne_peax        ; $F4  PEA #
   4892 CEAD 0E                                   .byte mne_sbcx        ; $F5  SBC dp,X
   4893 CEAE 15                                   .byte mne_incx        ; $F6  INC dp,X
   4894 CEAF 0E                                   .byte mne_sbcx        ; $F7  SBC [dp],Y
   4895 CEB0 19                                   .byte mne_sedx        ; $F8  SED
   4896 CEB1 0E                                   .byte mne_sbcx        ; $F9  SBC abs,Y
   4897 CEB2 4C                                   .byte mne_plxx        ; $FA  PLX
   4898 CEB3 1E                                   .byte mne_xcex        ; $FB  XCE
   4899 CEB4 3F                                   .byte mne_jsrx        ; $FC  JSR (abs,X)
   4900 CEB5 0E                                   .byte mne_sbcx        ; $FD  SBC abs,X
   4901 CEB6 15                                   .byte mne_incx        ; $FE  INC abs,X
   4902 CEB7 0E                                   .byte mne_sbcx        ; $FF  SBC absl,X
                                        ;
                                        ;
                                        ;	instruction addressing modes & sizes in opcode order...
                                        ;
                                        ;	    xxxxxxxx
                                        ;	    ||||||||
                                        ;	    ||||++++———> Addressing Mode
                                        ;	    ||||         ——————————————————————————————————
                                        ;	    ||||          0000  dp, abs, absl, implied or A
                                        ;	    ||||          0001  #
                                        ;	    ||||          0010  dp,X, abs,X or absl,X
                                        ;	    ||||          0011  dp,Y or abs,Y
                                        ;	    ||||          0100  (dp) or (abs)
                                        ;	    ||||          0101  [dp] or [abs]
                                        ;	    ||||          0110  [dp],Y
                                        ;	    ||||          0111  (dp,X) or (abs,X)
                                        ;	    ||||          1000  (dp),Y
                                        ;	    ||||          1001  offset,S
                                        ;	    ||||          1010  (offset,S),Y
                                        ;	    ||||          1011  sbnk,dbnk (MVN or MVP)
                                        ;	    ||||          —-—-—-—-—-—-—-—-—-—-—-—-—-—-—-—-—
                                        ;	    ||||           #    = immediate
                                        ;	    ||||           A    = accumulator
                                        ;	    ||||           abs  = absolute
                                        ;	    ||||           absl = absolute long
                                        ;	    ||||           dbnk = destination bank
                                        ;	    ||||           dp   = direct (zero) page
                                        ;	    ||||           S    = stack relative
                                        ;	    ||||           sbnk = source bank
                                        ;	    ||||         ——————————————————————————————————
                                        ;	    ||||
                                        ;	    ||++———————> binary-encoded operand size
                                        ;	    |+—————————> 1: relative branch instruction
                                        ;	    +——————————> 1: variable operand size...
                                        ;
                                        ;	    —————————————————————————————————————————————————————————————
                                        ;	    Variable operand size refers to an immediate mode instruction
                                        ;	    that can accept either an 8 or 16 bit operand.  During instr-
                                        ;	    uction assembly, an 8 bit operand can be forced to 16 bits by
                                        ;	    preceding the operand field with !,  e.g.,  LDA !#$01,  which
                                        ;	    will assemble as $A9 $01 $00.
                                        ;	    —————————————————————————————————————————————————————————————
                                        ;
   4946 CEB8 00                         mnetabam .byte ops0 | am_nam   ; $00  BRK
   4947 CEB9 17                                   .byte ops1 | am_indx  ; $01  ORA (dp,X)
   4948 CEBA 10                                   .byte ops1 | am_nam   ; $02  COP
   4949 CEBB 19                                   .byte ops1 | am_stk   ; $03  ORA offset,S
   4950 CEBC 10                                   .byte ops1 | am_nam   ; $04  TSB dp
   4951 CEBD 10                                   .byte ops1 | am_nam   ; $05  ORA dp
   4952 CEBE 10                                   .byte ops1 | am_nam   ; $06  ASL dp
   4953 CEBF 15                                   .byte ops1 | am_indl  ; $07  ORA [dp]
   4954 CEC0 00                                   .byte ops0 | am_nam   ; $08  PHP
   4955 CEC1 91                                   .byte vops | am_imm   ; $09  ORA #
   4956 CEC2 00                                   .byte ops0 | am_nam   ; $0A  ASL A
   4957 CEC3 00                                   .byte ops0 | am_nam   ; $0B  PHD
   4958 CEC4 20                                   .byte ops2 | am_nam   ; $0C  TSB abs
   4959 CEC5 20                                   .byte ops2 | am_nam   ; $0D  ORA abs
   4960 CEC6 20                                   .byte ops2 | am_nam   ; $0E  ASL abs
   4961 CEC7 30                                   .byte ops3 | am_nam   ; $0F  ORA absl
                                        ;
   4963 CEC8 50                                   .byte bop1 | am_nam   ; $10  BPL abs
   4964 CEC9 18                                   .byte ops1 | am_indy  ; $11  ORA (dp),Y
   4965 CECA 14                                   .byte ops1 | am_ind   ; $12  ORA (dp)
   4966 CECB 1A                                   .byte ops1 | am_stky  ; $13  ORA (offset,S),Y
   4967 CECC 10                                   .byte ops1 | am_nam   ; $14  TRB dp
   4968 CECD 12                                   .byte ops1 | am_adrx  ; $15  ORA dp,X
   4969 CECE 12                                   .byte ops1 | am_adrx  ; $16  ASL dp,X
   4970 CECF 16                                   .byte ops1 | am_indly ; $17  ORA [dp],Y
   4971 CED0 00                                   .byte ops0 | am_nam   ; $18  CLC
   4972 CED1 20                                   .byte ops2 | am_nam   ; $19  ORA abs
   4973 CED2 00                                   .byte ops0 | am_nam   ; $1A  INC A
   4974 CED3 00                                   .byte ops0 | am_nam   ; $1B  TCS
   4975 CED4 20                                   .byte ops2 | am_nam   ; $1C  TRB abs
   4976 CED5 22                                   .byte ops2 | am_adrx  ; $1D  ORA abs,X
   4977 CED6 22                                   .byte ops2 | am_adrx  ; $1E  ASL abs,X
   4978 CED7 32                                   .byte ops3 | am_adrx  ; $1F  ORA absl,X
                                        ;
   4980 CED8 20                                   .byte ops2 | am_nam   ; $20  JSR abs
   4981 CED9 17                                   .byte ops1 | am_indx  ; $21  AND (dp,X)
   4982 CEDA 30                                   .byte ops3 | am_nam   ; $22  JSL absl
   4983 CEDB 19                                   .byte ops1 | am_stk   ; $23  AND offset,S
   4984 CEDC 10                                   .byte ops1 | am_nam   ; $24  BIT dp
   4985 CEDD 10                                   .byte ops1 | am_nam   ; $25  AND dp
   4986 CEDE 10                                   .byte ops1 | am_nam   ; $26  ROL dp
   4987 CEDF 15                                   .byte ops1 | am_indl  ; $27  AND [dp]
   4988 CEE0 00                                   .byte ops0 | am_nam   ; $28  PLP
   4989 CEE1 91                                   .byte vops | am_imm   ; $29  AND #
   4990 CEE2 00                                   .byte ops0 | am_nam   ; $2A  ROL A
   4991 CEE3 00                                   .byte ops0 | am_nam   ; $2B  PLD
   4992 CEE4 20                                   .byte ops2 | am_nam   ; $2C  BIT abs
   4993 CEE5 20                                   .byte ops2 | am_nam   ; $2D  AND abs
   4994 CEE6 20                                   .byte ops2 | am_nam   ; $2E  ROL abs
   4995 CEE7 30                                   .byte ops3 | am_nam   ; $2F  AND absl
                                        ;
   4997 CEE8 50                                   .byte bop1 | am_nam   ; $30  BMI abs
   4998 CEE9 18                                   .byte ops1 | am_indy  ; $31  AND (dp),Y
   4999 CEEA 14                                   .byte ops1 | am_ind   ; $32  AND (dp)
   5000 CEEB 1A                                   .byte ops1 | am_stky  ; $33  AND (offset,S),Y
   5001 CEEC 12                                   .byte ops1 | am_adrx  ; $34  BIT dp,X
   5002 CEED 12                                   .byte ops1 | am_adrx  ; $35  AND dp,X
   5003 CEEE 12                                   .byte ops1 | am_adrx  ; $36  ROL dp,X
   5004 CEEF 16                                   .byte ops1 | am_indly ; $37  AND [dp],Y
   5005 CEF0 00                                   .byte ops0 | am_nam   ; $38  SEC
   5006 CEF1 23                                   .byte ops2 | am_adry  ; $39  AND abs,Y
   5007 CEF2 00                                   .byte ops0 | am_nam   ; $3A  DEC A
   5008 CEF3 00                                   .byte ops0 | am_nam   ; $3B  TSC
   5009 CEF4 22                                   .byte ops2 | am_adrx  ; $3C  BIT abs,X
   5010 CEF5 22                                   .byte ops2 | am_adrx  ; $3D  AND abs,X
   5011 CEF6 22                                   .byte ops2 | am_adrx  ; $3E  ROL abs,X
   5012 CEF7 32                                   .byte ops3 | am_adrx  ; $3F  AND absl,X
                                        ;
   5014 CEF8 00                                   .byte ops0 | am_nam   ; $40  RTI
   5015 CEF9 17                                   .byte ops1 | am_indx  ; $41  EOR (dp,X)
   5016 CEFA 00                                   .byte ops0 | am_nam   ; $42  WDM
   5017 CEFB 19                                   .byte ops1 | am_stk   ; $43  EOR offset,S
   5018 CEFC 2B                                   .byte ops2 | am_move  ; $44  MVP sb,db
   5019 CEFD 10                                   .byte ops1 | am_nam   ; $45  EOR dp
   5020 CEFE 10                                   .byte ops1 | am_nam   ; $46  LSR dp
   5021 CEFF 15                                   .byte ops1 | am_indl  ; $47  EOR [dp]
   5022 CF00 00                                   .byte ops0 | am_nam   ; $48  PHA
   5023 CF01 91                                   .byte vops | am_imm   ; $49  EOR #
   5024 CF02 00                                   .byte ops0 | am_nam   ; $4A  LSR A
   5025 CF03 00                                   .byte ops0 | am_nam   ; $4B  PHK
   5026 CF04 20                                   .byte ops2 | am_nam   ; $4C  JMP abs
   5027 CF05 20                                   .byte ops2 | am_nam   ; $4D  EOR abs
   5028 CF06 20                                   .byte ops2 | am_nam   ; $4E  LSR abs
   5029 CF07 30                                   .byte ops3 | am_nam   ; $4F  EOR absl
                                        ;
   5031 CF08 50                                   .byte bop1 | am_nam   ; $50  BVC abs
   5032 CF09 18                                   .byte ops1 | am_indy  ; $51  EOR (dp),Y
   5033 CF0A 14                                   .byte ops1 | am_ind   ; $52  EOR (dp)
   5034 CF0B 1A                                   .byte ops1 | am_stky  ; $53  EOR (offset,S),Y
   5035 CF0C 2B                                   .byte ops2 | am_move  ; $54  MVN sb,db
   5036 CF0D 12                                   .byte ops1 | am_adrx  ; $55  EOR dp,X
   5037 CF0E 12                                   .byte ops1 | am_adrx  ; $56  LSR dp,X
   5038 CF0F 16                                   .byte ops1 | am_indly ; $57  EOR [dp],Y
   5039 CF10 00                                   .byte ops0 | am_nam   ; $58  CLI
   5040 CF11 23                                   .byte ops2 | am_adry  ; $59  EOR abs,Y
   5041 CF12 00                                   .byte ops0 | am_nam   ; $5A  PHY
   5042 CF13 00                                   .byte ops0 | am_nam   ; $5B  TCD
   5043 CF14 30                                   .byte ops3 | am_nam   ; $5C  JML absl
   5044 CF15 22                                   .byte ops2 | am_adrx  ; $5D  EOR abs,X
   5045 CF16 22                                   .byte ops2 | am_adrx  ; $5E  LSR abs,X
   5046 CF17 32                                   .byte ops3 | am_adrx  ; $5F  EOR absl,X
                                        ;
   5048 CF18 00                                   .byte ops0 | am_nam   ; $60  RTS
   5049 CF19 17                                   .byte ops1 | am_indx  ; $61  ADC (dp,X)
   5050 CF1A 60                                   .byte bop2 | am_nam   ; $62  PER
   5051 CF1B 19                                   .byte ops1 | am_stk   ; $63  ADC offset,S
   5052 CF1C 10                                   .byte ops1 | am_nam   ; $64  STZ dp
   5053 CF1D 10                                   .byte ops1 | am_nam   ; $65  ADC dp
   5054 CF1E 10                                   .byte ops1 | am_nam   ; $66  ROR dp
   5055 CF1F 15                                   .byte ops1 | am_indl  ; $67  ADC [dp]
   5056 CF20 00                                   .byte ops0 | am_nam   ; $68  PLA
   5057 CF21 91                                   .byte vops | am_imm   ; $69  ADC #
   5058 CF22 00                                   .byte ops0 | am_nam   ; $6A  ROR A
   5059 CF23 00                                   .byte ops0 | am_nam   ; $6B  RTL
   5060 CF24 24                                   .byte ops2 | am_ind   ; $6C  JMP (abs)
   5061 CF25 20                                   .byte ops2 | am_nam   ; $6D  ADC abs
   5062 CF26 20                                   .byte ops2 | am_nam   ; $6E  ROR abs
   5063 CF27 30                                   .byte ops3 | am_nam   ; $6F  ADC absl
                                        ;
   5065 CF28 50                                   .byte bop1 | am_nam   ; $70  BVS abs
   5066 CF29 18                                   .byte ops1 | am_indy  ; $71  ADC (dp),Y
   5067 CF2A 14                                   .byte ops1 | am_ind   ; $72  ADC (dp)
   5068 CF2B 1A                                   .byte ops1 | am_stky  ; $73  ADC (offset,S),Y
   5069 CF2C 12                                   .byte ops1 | am_adrx  ; $74  STZ dp,X
   5070 CF2D 12                                   .byte ops1 | am_adrx  ; $75  ADC dp,X
   5071 CF2E 12                                   .byte ops1 | am_adrx  ; $76  ROR dp,X
   5072 CF2F 16                                   .byte ops1 | am_indly ; $77  ADC [dp],Y
   5073 CF30 00                                   .byte ops0 | am_nam   ; $78  SEI
   5074 CF31 23                                   .byte ops2 | am_adry  ; $79  ADC abs,Y
   5075 CF32 00                                   .byte ops0 | am_nam   ; $7A  PLY
   5076 CF33 00                                   .byte ops0 | am_nam   ; $7B  TDC
   5077 CF34 27                                   .byte ops2 | am_indx  ; $7C  JMP (abs,X)
   5078 CF35 22                                   .byte ops2 | am_adrx  ; $7D  ADC abs,X
   5079 CF36 22                                   .byte ops2 | am_adrx  ; $7E  ROR abs,X
   5080 CF37 32                                   .byte ops3 | am_adrx  ; $7F  ADC absl,X
                                        ;
   5082 CF38 50                                   .byte bop1 | am_nam   ; $80  BRA abs
   5083 CF39 17                                   .byte ops1 | am_indx  ; $81  STA (dp,X)
   5084 CF3A 60                                   .byte bop2 | am_nam   ; $82  BRL abs
   5085 CF3B 19                                   .byte ops1 | am_stk   ; $83  STA offset,S
   5086 CF3C 10                                   .byte ops1 | am_nam   ; $84  STY dp
   5087 CF3D 10                                   .byte ops1 | am_nam   ; $85  STA dp
   5088 CF3E 10                                   .byte ops1 | am_nam   ; $86  STX dp
   5089 CF3F 15                                   .byte ops1 | am_indl  ; $87  STA [dp]
   5090 CF40 00                                   .byte ops0 | am_nam   ; $88  DEY
   5091 CF41 91                                   .byte vops | am_imm   ; $89  BIT #
   5092 CF42 00                                   .byte ops0 | am_nam   ; $8A  TXA
   5093 CF43 00                                   .byte ops0 | am_nam   ; $8B  PHB
   5094 CF44 20                                   .byte ops2 | am_nam   ; $8C  STY abs
   5095 CF45 20                                   .byte ops2 | am_nam   ; $8D  STA abs
   5096 CF46 20                                   .byte ops2 | am_nam   ; $8E  STX abs
   5097 CF47 30                                   .byte ops3 | am_nam   ; $8F  STA absl
                                        ;
   5099 CF48 50                                   .byte bop1 | am_nam   ; $90  BCC abs
   5100 CF49 18                                   .byte ops1 | am_indy  ; $91  STA (dp),Y
   5101 CF4A 14                                   .byte ops1 | am_ind   ; $92  STA (dp)
   5102 CF4B 1A                                   .byte ops1 | am_stky  ; $93  STA (offset,S),Y
   5103 CF4C 12                                   .byte ops1 | am_adrx  ; $94  STY dp,X
   5104 CF4D 12                                   .byte ops1 | am_adrx  ; $95  STA dp,X
   5105 CF4E 13                                   .byte ops1 | am_adry  ; $96  STX dp,Y
   5106 CF4F 16                                   .byte ops1 | am_indly ; $97  STA [dp],Y
   5107 CF50 00                                   .byte ops0 | am_nam   ; $98  TYA
   5108 CF51 23                                   .byte ops2 | am_adry  ; $99  STA abs,Y
   5109 CF52 00                                   .byte ops0 | am_nam   ; $9A  TXS
   5110 CF53 00                                   .byte ops0 | am_nam   ; $9B  TXY
   5111 CF54 20                                   .byte ops2 | am_nam   ; $9C  STZ abs
   5112 CF55 22                                   .byte ops2 | am_adrx  ; $9D  STA abs,X
   5113 CF56 22                                   .byte ops2 | am_adrx  ; $9E  STZ abs,X
   5114 CF57 32                                   .byte ops3 | am_adrx  ; $9F  STA absl,X
                                        ;
   5116 CF58 91                                   .byte vops | am_imm   ; $A0  LDY #
   5117 CF59 17                                   .byte ops1 | am_indx  ; $A1  LDA (dp,X)
   5118 CF5A 91                                   .byte vops | am_imm   ; $A2  LDX #
   5119 CF5B 19                                   .byte ops1 | am_stk   ; $A3  LDA offset,S
   5120 CF5C 10                                   .byte ops1 | am_nam   ; $A4  LDY dp
   5121 CF5D 10                                   .byte ops1 | am_nam   ; $A5  LDA dp
   5122 CF5E 10                                   .byte ops1 | am_nam   ; $A6  LDX dp
   5123 CF5F 15                                   .byte ops1 | am_indl  ; $A7  LDA [dp]
   5124 CF60 00                                   .byte ops0 | am_nam   ; $A8  TAY
   5125 CF61 91                                   .byte vops | am_imm   ; $A9  LDA #
   5126 CF62 00                                   .byte ops0 | am_nam   ; $AA  TAX
   5127 CF63 00                                   .byte ops0 | am_nam   ; $AB  PLB
   5128 CF64 20                                   .byte ops2 | am_nam   ; $AC  LDY abs
   5129 CF65 20                                   .byte ops2 | am_nam   ; $AD  LDA abs
   5130 CF66 20                                   .byte ops2 | am_nam   ; $AE  LDX abs
   5131 CF67 30                                   .byte ops3 | am_nam   ; $AF  LDA absl
                                        ;
   5133 CF68 50                                   .byte bop1 | am_nam   ; $B0  BCS abs
   5134 CF69 18                                   .byte ops1 | am_indy  ; $B1  LDA (dp),Y
   5135 CF6A 14                                   .byte ops1 | am_ind   ; $B2  LDA (dp)
   5136 CF6B 1A                                   .byte ops1 | am_stky  ; $B3  LDA (offset,S),Y
   5137 CF6C 12                                   .byte ops1 | am_adrx  ; $B4  LDY dp,X
   5138 CF6D 12                                   .byte ops1 | am_adrx  ; $B5  LDA dp,X
   5139 CF6E 13                                   .byte ops1 | am_adry  ; $B6  LDX dp,Y
   5140 CF6F 16                                   .byte ops1 | am_indly ; $B7  LDA [dp],Y
   5141 CF70 00                                   .byte ops0 | am_nam   ; $B8  CLV
   5142 CF71 23                                   .byte ops2 | am_adry  ; $B9  LDA abs,Y
   5143 CF72 00                                   .byte ops0 | am_nam   ; $BA  TSX
   5144 CF73 00                                   .byte ops0 | am_nam   ; $BB  TYX
   5145 CF74 22                                   .byte ops2 | am_adrx  ; $BC  LDY abs,X
   5146 CF75 22                                   .byte ops2 | am_adrx  ; $BD  LDA abs,X
   5147 CF76 23                                   .byte ops2 | am_adry  ; $BE  LDX abs,Y
   5148 CF77 32                                   .byte ops3 | am_adrx  ; $BF  LDA absl,X
                                        ;
   5150 CF78 91                                   .byte vops | am_imm   ; $C0  CPY #
   5151 CF79 17                                   .byte ops1 | am_indx  ; $C1  CMP (dp,X)
   5152 CF7A 11                                   .byte ops1 | am_imm   ; $C2  REP #
   5153 CF7B 19                                   .byte ops1 | am_stk   ; $C3  CMP offset,S
   5154 CF7C 10                                   .byte ops1 | am_nam   ; $C4  CPY dp
   5155 CF7D 10                                   .byte ops1 | am_nam   ; $C5  CMP dp
   5156 CF7E 10                                   .byte ops1 | am_nam   ; $C6  DEC dp
   5157 CF7F 15                                   .byte ops1 | am_indl  ; $C7  CMP [dp]
   5158 CF80 00                                   .byte ops0 | am_nam   ; $C8  INY
   5159 CF81 91                                   .byte vops | am_imm   ; $C9  CMP #
   5160 CF82 00                                   .byte ops0 | am_nam   ; $CA  DEX
   5161 CF83 00                                   .byte ops0 | am_nam   ; $CB  WAI
   5162 CF84 20                                   .byte ops2 | am_nam   ; $CC  CPY abs
   5163 CF85 20                                   .byte ops2 | am_nam   ; $CD  CMP abs
   5164 CF86 20                                   .byte ops2 | am_nam   ; $CE  DEC abs
   5165 CF87 30                                   .byte ops3 | am_nam   ; $CF  CMP absl
                                        ;
   5167 CF88 50                                   .byte bop1 | am_nam   ; $D0  BNE abs
   5168 CF89 18                                   .byte ops1 | am_indy  ; $D1  CMP (dp),Y
   5169 CF8A 14                                   .byte ops1 | am_ind   ; $D2  CMP (dp)
   5170 CF8B 1A                                   .byte ops1 | am_stky  ; $D3  CMP (offset,S),Y
   5171 CF8C 10                                   .byte ops1 | am_nam   ; $D4  PEI dp
   5172 CF8D 12                                   .byte ops1 | am_adrx  ; $D5  CMP dp,X
   5173 CF8E 12                                   .byte ops1 | am_adrx  ; $D6  DEC dp,X
   5174 CF8F 16                                   .byte ops1 | am_indly ; $D7  CMP [dp],Y
   5175 CF90 00                                   .byte ops0 | am_nam   ; $D8  CLD
   5176 CF91 23                                   .byte ops2 | am_adry  ; $D9  CMP abs,Y
   5177 CF92 00                                   .byte ops0 | am_nam   ; $DA  PHX
   5178 CF93 00                                   .byte ops0 | am_nam   ; $DB  STP
   5179 CF94 25                                   .byte ops2 | am_indl  ; $DC  JMP [abs]
   5180 CF95 22                                   .byte ops2 | am_adrx  ; $DD  CMP abs,X
   5181 CF96 22                                   .byte ops2 | am_adrx  ; $DE  DEC abs,X
   5182 CF97 32                                   .byte ops3 | am_adrx  ; $DF  CMP absl,X
                                        ;
   5184 CF98 91                                   .byte vops | am_imm   ; $E0  CPX #
   5185 CF99 17                                   .byte ops1 | am_indx  ; $E1  SBC (dp,X)
   5186 CF9A 11                                   .byte ops1 | am_imm   ; $E2  SEP #
   5187 CF9B 19                                   .byte ops1 | am_stk   ; $E3  SBC offset,S
   5188 CF9C 10                                   .byte ops1 | am_nam   ; $E4  CPX dp
   5189 CF9D 10                                   .byte ops1 | am_nam   ; $E5  SBC dp
   5190 CF9E 10                                   .byte ops1 | am_nam   ; $E6  INC dp
   5191 CF9F 15                                   .byte ops1 | am_indl  ; $E7  SBC [dp]
   5192 CFA0 00                                   .byte ops0 | am_nam   ; $E8  INX
   5193 CFA1 91                                   .byte vops | am_imm   ; $E9  SBC #
   5194 CFA2 00                                   .byte ops0 | am_nam   ; $EA  NOP
   5195 CFA3 00                                   .byte ops0 | am_nam   ; $EB  XBA
   5196 CFA4 20                                   .byte ops2 | am_nam   ; $EC  CPX abs
   5197 CFA5 20                                   .byte ops2 | am_nam   ; $ED  SBC abs
   5198 CFA6 20                                   .byte ops2 | am_nam   ; $EE  INC abs
   5199 CFA7 30                                   .byte ops3 | am_nam   ; $EF  SBC absl
                                        ;
   5201 CFA8 50                                   .byte bop1 | am_nam   ; $F0  BEQ abs
   5202 CFA9 18                                   .byte ops1 | am_indy  ; $F1  SBC (dp),Y
   5203 CFAA 14                                   .byte ops1 | am_ind   ; $F2  SBC (dp)
   5204 CFAB 1A                                   .byte ops1 | am_stky  ; $F3  SBC (offset,S),Y
   5205 CFAC 21                                   .byte ops2 | am_imm   ; $F4  PEA #
   5206 CFAD 12                                   .byte ops1 | am_adrx  ; $F5  SBC dp,X
   5207 CFAE 12                                   .byte ops1 | am_adrx  ; $F6  INC dp,X
   5208 CFAF 16                                   .byte ops1 | am_indly ; $F7  SBC [dp],Y
   5209 CFB0 00                                   .byte ops0 | am_nam   ; $F8  SED
   5210 CFB1 23                                   .byte ops2 | am_adry  ; $F9  SBC abs,Y
   5211 CFB2 00                                   .byte ops0 | am_nam   ; $FA  PLX
   5212 CFB3 00                                   .byte ops0 | am_nam   ; $FB  XCE
   5213 CFB4 27                                   .byte ops2 | am_indx  ; $FC  JSR (abs,X)
   5214 CFB5 22                                   .byte ops2 | am_adrx  ; $FD  SBC abs,X
   5215 CFB6 22                                   .byte ops2 | am_adrx  ; $FE  INC abs,X
   5216 CFB7 32                                   .byte ops3 | am_adrx  ; $FF  SBC absl,X
                                        ;
                                        ;
                                        ;	.X & .Y immediate mode opcodes...
                                        ;
   5221 CFB8 A0                         vopidx   .byte $a0             ;LDY #
   5222 CFB9 A2                                   .byte $a2             ;LDX #
   5223 CFBA C0                                   .byte $c0             ;CPY #
   5224 CFBB E0                                   .byte $e0             ;CPX #
   5451 = 00000004                      n_vopidx =*-vopidx             ;number of opcodes
                                        ;
                                        ;
                                        ;	addressing mode symbology lookup...
                                        ;
   5230 CFBC D4 CF                      ms_lutab .word ms_nam          ;(0000)  no symbol
   5231 CFBE DE CF                                .word ms_imm          ;(0001)  #
   5232 CFC0 D6 CF                                .word ms_addrx        ;(0010)  dp,X or abs,X
   5233 CFC2 DA CF                                .word ms_addry        ;(0011)  dp,Y or abs,Y
   5234 CFC4 E0 CF                                .word ms_ind          ;(0100)  (dp) or (abs)
   5235 CFC6 E3 CF                                .word ms_indl         ;(0101)  [dp] or [abs]
   5236 CFC8 E6 CF                                .word ms_indly        ;(0110)  [dp],Y
   5237 CFCA EB CF                                .word ms_indx         ;(0111)  (dp,X) or (abs,X)
   5238 CFCC F0 CF                                .word ms_indy         ;(1000)  (dp),Y
   5239 CFCE F8 CF                                .word ms_stk          ;(1001)  offset,S
   5240 CFD0 FC CF                                .word ms_stky         ;(1010) (offset,S),Y
   5241 CFD2 D4 CF                                .word ms_nam          ;(1011) sbnk,dbnk
                                        ;
                                        ;
                                        ;	addressing mode symbology strings...
                                        ;
   5246 CFD4 20 00                      ms_nam   .byte " ",0           ;no symbol
   5247 CFD6 20 2C 58 00                ms_addrx .byte " ,X",0         ;dp,X or addr,X
   5248 CFDA 20 2C 59 00                ms_addry .byte " ,Y",0         ;dp,Y or addr,Y
   5249 CFDE 23 00                      ms_imm   .byte "#",0           ;immediate
   5250 CFE0 28 29 00                   ms_ind   .byte "()",0          ;(dp) or (abs)
   5251 CFE3 5B 5D 00                   ms_indl  .byte "[]",0          ;[dp] or [abs]
   5252 CFE6 5B 5D 2C 59 00             ms_indly .byte "[],Y",0        ;[dp],Y
   5253 CFEB 28 2C 58 29 00             ms_indx  .byte "(,X)",0        ;(dp,X) or (abs,X)
   5254 CFF0 28 29 2C 59 00             ms_indy  .byte "(),Y",0        ;(dp),Y
   5255 CFF5 2C 24 00                   ms_move  .byte ",$",0          ;MVN/MVP sbnk,dbnk
   5256 CFF8 20 2C 53 00                ms_stk   .byte " ,S",0         ;offset,S
   5257 CFFC 28 2C 53 29 2C 59 00       ms_stky  .byte "(,S),Y",0      ;(offset,S),Y
                                        ;
                                        ;================================================================================
                                        ;
                                        ;CONSOLE DISPLAY CONTROL STRINGS
                                        ;
   5263 D003 1B 28                      dc_bf +         .byte a_esc,"("
   5263 D005 1B 47 34                 +            .byte a_esc,"G4"
                                                            ;enable reverse foreground
   5264 D008 00                                   .byte 0
                                        ;
   5266 D009 08                         dc_bs +         .byte a_bs
   5266 D00A 1B 57                    +   +         .byte a_esc,"W"
                                        
                                                            ;destructive backspace
   5268 D00C 00                                   .byte 0
                                        ;
   5270 D00D 1B 54                      dc_cl +         .byte a_esc,"T"
                                                            ;clear to end of line 
   5271 D00F 00                                   .byte 0
                                        ;
   5273 D010 1B 60 31                   dc_cn +         .byte a_esc,"`1"
                                                            ;cursor on
   5274 D013 00                                   .byte 0
                                        ;
   5276 D014 1B 60 30                   dc_co +         .byte a_esc,"`0"
                                                            ;cursor off
   5277 D017 00                                   .byte 0
                                        ;
   5279 D018 1B 28                      dc_er +         .byte a_esc,"("
   5279 D01A 1B 47 30                 +            .byte a_esc,"G0"
                                                            ;enable normal foreground
   5280 D01D 00                                   .byte 0
                                        ;
   5282 D01E 0D                         dc_lf ++         .byte a_cr
                                     +   
   5282 D01F 0A                       +            .byte a_lf
                                                            ;newline
   5283 D020 00                                   .byte 0
                                        ;
                                        ;================================================================================
                                        ;
                                        ;TEXT STRINGS
                                        ;
   5289 D021 07                         mm_brk +         .byte a_bel
                                        
   5290 D022 0D                       +   +         .byte a_cr
                                     +   
   5290 D023 0A                       +            .byte a_lf
                                        
   5291 D024 2A 2A 42 52 4B                       .byte "**BRK"
   5292 D029 0D                       +   +         .byte a_cr
                                     +   
   5292 D02A 0A                       +            .byte a_lf
                                        
   5293 D02B 00                                   .byte 0
                                        ;
   5295 D02C 0D                         mm_entry ++         .byte a_cr
                                     +   
   5295 D02D 0A                       +            .byte a_lf
                                        
   5296 D02E 0A 53 75 70 65 72 6D 6F              .byte a_lf,"Supermon 832 "
   5296 D036 6E 20 38 33 32 20         
   5297 D03C 31                       +            .byte "1"
   5297 D03D 2E                       +            .byte "."
   5297 D03E 30                       +            .byte "0"
   5297 D03F 2E                       +            .byte "."
   5297 D040 30                       +            .byte "0"
                                        
   5298 D041 20                                   .byte " "
   5299 D042 0D                       +   +         .byte a_cr
                                     +   
   5299 D043 0A                       +            .byte a_lf
                                        
   5300 D044 00                                   .byte 0
                                        ;
   5302 D045 20 2A 2A 45 52 52 20 20    mm_err   .byte " **ERR  ",0
   5302 D04D 00                        
                                        ;
   5304 D04E 0D                         mm_prmpt ++         .byte a_cr
                                     +   
   5304 D04F 0A                       +            .byte a_lf
                                        
   5305 D050 1B 28                    +            .byte a_esc,"("
   5305 D052 1B 47 30                 +            .byte a_esc,"G0"
                                        
   5306 D055 2E 00                                .byte ".",0
                                        ;
   5308 D057 0D                         mm_regs ++         .byte a_cr
                                     +   
   5308 D058 0A                       +            .byte a_lf
                                        
   5309 D059 20 20 20 20 20 20 20 20              .byte "                    31"
   5309 D061 20 20 20 20 20 20 20 20   
   5309 D069 20 20 20 20 33 31         
   5310 D06F 0D                       +   +         .byte a_cr
                                     +   
   5310 D070 0A                       +            .byte a_lf
                                        
   5311 D071 20 20 20 20 20 43 53 20              .byte "     CS    PB  PC   26NVmxDIZC    .A       .X       .Y       SP  "
   5311 D079 20 20 20 50 42 20 20 50   
   5311 D081 43 20 20 20 32 36 4E 56   
   5311 D089 6D 78 44 49 5A 43 20 20   
   5311 D091 20 20 2E 41 20 20 20 20   
   5311 D099 20 20 20 2E 58 20 20 20   
   5311 D0A1 20 20 20 20 2E 59 20 20   
   5311 D0A9 20 20 20 20 20 53 50 20   
   5311 D0B1 20                        
   5312 D0B2 0D                       +   +         .byte a_cr
                                     +   
   5312 D0B3 0A                       +            .byte a_lf
                                        
   5313 D0B4 3B 20 00                             .byte "; ",0
   5314 D0B7 0D                         mm_regs2 ++         .byte a_cr
                                     +   
   5314 D0B8 0A                       +            .byte a_lf
                                        
   5315 D0B9 20 20 20 20 20 44 53 20              .byte "     DS    DP  DB"
   5315 D0C1 20 20 20 44 50 20 20 44   
   5315 D0C9 42                        
   5316 D0CA 0D                       +   +         .byte a_cr
                                     +   
   5316 D0CB 0A                       +            .byte a_lf
                                        
   5317 D0CC 3B 20 00                             .byte "; ",0
                                        ;
   5319 D0CF 07                         mm_rts +         .byte a_bel
                                        
   5320 D0D0 0D                       +   +         .byte a_cr
                                     +   
   5320 D0D1 0A                       +            .byte a_lf
                                        
   5321 D0D2 2A 2A 52 54 53                       .byte "**RTS"
   5322 D0D7 0D                       +   +         .byte a_cr
                                     +   
   5322 D0D8 0A                       +            .byte a_lf
                                        
   5323 D0D9 00                                   .byte 0
                                        ;
                                        ;================================================================================
                                        ;
                                        ;VECTOR STORAGE
                                        ;
                                        ;
   5627 = 0000D0DA                      _txtend_ =*                     ;end of program text
                                        ;
                                        ;================================================================================
                                        	;.end
Finitron FT832 assembler   version 1.4   Tue Nov 24 12:58:38 2015     Page 1
ftbios816.asm


                                        .include "supermon832.asm"
Finitron FT832 assembler   version 1.4   Tue Nov 24 12:58:38 2015     Page 1
FAC1ToString.asm

                                        ; ============================================================================
                                        ; FAC1ToString.asm
                                        ;        __
                                        ;   \\__/ o\    (C) 2014  Robert Finch, Stratford
                                        ;    \  __ /    All rights reserved.
                                        ;     \/_//     robfinch<remove>@finitron.ca
                                        ;       ||
                                        ;  
                                        ;
                                        ; This source file is free software: you can redistribute it and/or modify 
                                        ; it under the terms of the GNU Lesser General Public License as published 
                                        ; by the Free Software Foundation, either version 3 of the License, or     
                                        ; (at your option) any later version.                                      
                                        ;                                                                          
                                        ; This source file is distributed in the hope that it will be useful,      
                                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                                        ; GNU General Public License for more details.                             
                                        ;                                                                          
                                        ; You should have received a copy of the GNU General Public License        
                                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                                        ;                                                                          
                                        ; ============================================================================
                                        ;
                                        ; This code is a heavily modified version of the floating point to string
                                        ; conversion routine which is a part of Lee Davison's EhBASIC.
                                        ;
   5659 = 0000000000000095                            Cvaral		= $95		; current var address low byte
   5660 = 00000096                      Cvarah		= Cvaral+1	; current var address high byte
   5661 = 00000000000000A8                            numexp		= $A8		; string to float number exponent count
   5662 = 00000000000000AA                            expcnt		= $AA		; string to float exponent count
   5663 = 00000000000000BA                            Sendl			= $BA	; BASIC pointer temp low byte
   5664 = 00000000000000BB                            Sendh			= $BB	; BASIC pointer temp low byte
                                        
   5666 = 00000000000003A0                            Decss		= $3A0		; number to decimal string start
   5667 = 000003A1                      Decssp1		= Decss+1	; number to decimal string start
   5668 = 0000000000000001                            FP_ADD		EQU		1
   5669 = 0000000000000002                            FP_SUB		EQU		2
   5670 = 0000000000000003                            FP_MUL		EQU		3
   5671 = 0000000000000004                            FP_DIV		EQU		4
   5672 = 0000000000000005                            FP_FIX2FLT	EQU		5
   5673 = 0000000000000006                            FP_FLT2FIX	EQU		6
   5674 = 0000000000000007                            FP_ABS		EQU		7
   5675 = 0000000000000010                            FP_NEG		EQU		16
   5676 = 0000000000000011                            FP_SWAP		EQU		17
   5677 = 0000000000000083                            FIXED_MUL	EQU		$83
   5678 = 0000000000000081                            FIXED_ADD	EQU		$81
   5679 = 0000000000000082                            FIXED_SUB	EQU		$82
                                        ;parameter FIXED_DIV = 8'h84;
                                        ;parameter FIXED_ABS = 8'h87;
                                        ;parameter FIXED_NEG = 8'h90;
   5683 = 0000000000FEA20E                            FP_CMDREG	EQU		$FEA20E
   5684 = 0000000000FEA20E                            FP_STATREG	EQU		$FEA20E
   5685 = 0000000000FEA200                            FAC1		EQU		$FEA200
   5686 = 0000000000FEA200                            FAC1_5		EQU		$FEA200
   5687 = 0000000000FEA202                            FAC1_4		EQU		$FEA202
   5688 = 0000000000FEA204                            FAC1_3		EQU		$FEA204
   5689 = 0000000000FEA206                            FAC1_2		EQU		$FEA206
   5690 = 0000000000FEA208                            FAC1_1		EQU		$FEA208
   5691 = 0000000000FEA208                            FAC1_msw	EQU		$FEA208
   5692 = 0000000000FEA20A                            FAC1_e		EQU		$FEA20A
   5693 = 0000000000FEA210                            FAC2		EQU		$FEA210
                                        
                                           	CPU		W65C816S
                                           	NDX		16
                                           	MEM		16
                                           	
                                           public FAC1ToString:
                                           
                                           ; The first chunk of code determines if the number is positive or negative
                                           ; and spits out the appropriate sign. Next it takes the absolute value of
                                           ; the accumulator so following code only has to deal with positive numbers.
                                           
   5408 00D0DA A0 00 00                     	LDY	#$00			; set index = 1
   5409 00D0DD AF 08 A2 FE                  	LDA	FAC1_msw		; test FAC1 sign (b15) (Can't use BIT)
   5410 00D0E1 10 0E                        	BPL	.0002		; branch if +ve
   5411 00D0E3 A9 2D 00                     	LDA	#'-'			; else character = "-"
   5412 00D0E6 99 A0 03                     	STA	Decss,Y		; save leading character (" " or "-")
   5413 00D0E9 A9 10 00                     	LDA	#FP_NEG		; make the FAC positive
   5414 00D0EC 20 13 D3                     	JSR	FPCommandWait
   5415 00D0EF 80 06                        	BRA	.0001
   5416 00D0F1                             .0002:
   5417 00D0F1 A9 20 00                     	LDA	#$20			; character = " " (assume +ve)
   5418 00D0F4 99 A0 03                     	STA	Decss,Y
   5419 00D0F7                             .0001:
   5420 00D0F7 84 BA                        	STY	Sendl			; save index
                                           
                                           ; This little bit of code check for a zero exponent which indicates a
                                           ; value of zero.
                                           
   5425 00D0F9 AF 0A A2 FE                  	LDA	FAC1_e		; get FAC1 exponent
   5426 00D0FD AA                           	TAX
   5427 00D0FE D0 06                        	BNE	LAB_2989		; branch if FAC1<>0
                                           					; exponent was $00 so FAC1 is 0
   5429 00D100 A9 30 00                     	LDA	#'0'			; set character = "0"
   5430 00D103 82 93 01                     	BRL	LAB_2A89		; save last character, [EOT] and exit
                                           
                                           ; This loop attempts to make small values more significant, so that there are
                                           ; fewer leading zeros in the value. (The exponent is decremented so that it
                                           ; corresponds). Because of the potential for extremely small values looping is
                                           ; limited. The problem is the 16 bit exponent can allow for much smaller
                                           ; values than an 8 bit exponent would and we don't want to loop for thousands
                                           ; of iterations in order to display a value that's almost zero.
                                           
                                           					; FAC1 is some non zero value
   5440 00D106                             LAB_2989
   5441 00D106 84 BA                        	STY	Sendl			; save off .Y
   5442 00D108 A0 67 06                     	LDY #1639			; max number of retries
   5443 00D10B A9 00 00                     	LDA	#$00			; clear (number exponent count)
   5444 00D10E 85 A8                        	STA numexp
   5445 00D110                             LOOP_MBMILLION:
   5446 00D110 E0 00 80                     	CPX	#$8000			; compare FAC1 exponent with $8000 (>1.00000)
   5447 00D113 B0 1A                        	BCS	LAB_299A		; branch if FAC1=>1
                                           					; FAC1<1
   5449 00D115 F4 54 D3                     	PEA	A_MILLION		; multiply FAC * 1,000,000
   5450 00D118 20 C8 D2                     	JSR	LOAD_FAC2		; 
   5451 00D11B 68                           	PLA					; get rid of parameter
   5452 00D11C 20 C2 D2                     	JSR	FMUL
   5453 00D11F A5 A8                        	LDA numexp
   5454 00D121 38                           	SEC
   5455 00D122 E9 06 00                     	SBC	#6				; set number exponent count (-6)
   5456 00D125 85 A8                        	STA numexp
   5457 00D127 AF 0A A2 FE                  	LDA FAC1_e
   5458 00D12B AA                           	TAX
   5459 00D12C 88                           	DEY
   5460 00D12D 10 E1                        	BPL	LOOP_MBMILLION
                                           
   5462 00D12F                             LAB_299A
   5463 00D12F A4 BA                        	LDY	Sendl		; get back .Y
                                           
                                           ; These two loops coerce the value of the FAC to be between 100,000 and
                                           ; 1,000,000. This gives a maximum of six digits before the decimal point
                                           ; in scientific notation.
                                           
                                           ; This loop divides by 10 until the value in the FAC is less than 1,000,000
                                           ;
   5471 00D131                             LOOP_DB10:
   5472 00D131 F4 6C D3                     	PEA	MAX_BEFORE_SCI	; set pointer low byte to 999999.4375 (max before sci note)
   5473 00D134 20 C8 D2                     	JSR	LOAD_FAC2		; compare FAC1 with (AY)
   5474 00D137 68                           	PLA					; get rid of parameter
   5475 00D138 AF 0E A2 FE                  	LDA FP_CMDREG
   5476 00D13C 89 08 00                     	BIT	#$08			; test equals bit
   5477 00D13F D0 28                        	BNE	LAB_29C3		; exit if FAC1 = (AY)
   5478 00D141 89 04 00                     	BIT	#$04			; test greater than bit
   5479 00D144 F0 07                        	BEQ	LOOP_MB10		; go do *10 if FAC1 < (AY)
                                           
   5481 00D146                             LAB_29B9
   5482 00D146 20 00 D3                     	JSR	DivideByTen		; divide by 10
   5483 00D149 E6 A8                        	INC	numexp			; increment number exponent count
   5484 00D14B 80 E4                        	BRA	LOOP_DB10		; go test again (branch always)
                                           
                                           ; This loop multiplies the value by 10 until it's greater than
                                           ; 100,000.
                                           					; FAC1 < (AY)
   5489 00D14D                             LOOP_MB10
   5490 00D14D F4 84 D3                     	PEA CONST_9375		; set pointer to 99999.9375
   5491 00D150 20 C8 D2                     	JSR	LOAD_FAC2		; compare FAC1 with (AY)
   5492 00D153 68                           	PLA					; get rid of parameter
   5493 00D154 AF 0E A2 FE                  	LDA FP_CMDREG
   5494 00D158 89 08 00                     	BIT #$08
   5495 00D15B D0 05                        	BNE	LAB_29B2		; branch if FAC1 = (AY) (allow decimal places)
   5496 00D15D 89 04 00                     	BIT #$04
   5497 00D160 D0 07                        	BNE	LAB_29C0		; branch if FAC1 > (AY) (no decimal places)
                                           					; FAC1 <= (AY)
   5499 00D162                             LAB_29B2
   5500 00D162 20 F3 D2                     	JSR	MultiplyByTen	; multiply by 10
   5501 00D165 C6 A8                        	DEC	numexp		; decrement number exponent count
   5502 00D167 80 E4                        	BRA	LOOP_MB10		; go test again (branch always)
                                           
                                           ; now we have just the digits to do
                                           
   5506 00D169                             LAB_29C0
                                           ;	JSR	AddPoint5		; add 0.5 to FAC1 (round FAC1)
   5508 00D169                             LAB_29C3
                                           ;	JSR	FloatToFixed	; convert FAC1 floating-to-fixed
   5510 00D169 A2 01 00                     	LDX	#$01			; set default digits before dp = 1
   5511 00D16C A5 A8                        	LDA	numexp		; get number exponent count
   5512 00D16E 18                           	CLC				; clear carry for add
   5513 00D16F 69 07 00                     	ADC	#$07			; up to 6 digits before point
   5514 00D172 30 0A                        	BMI	LAB_29D8		; if -ve then 1 digit before dp
                                           
   5516 00D174 C9 08 00                     	CMP	#$08			; A>=8 if n>=1E6
   5517 00D177 B0 06                        	BCS	LAB_29D9		; branch if >= $08
                                           
                                           					; carry is clear
   5520 00D179 AA                           	TAX				; copy to A
   5521 00D17A CA                           	DEX				; take 1 from digit count
   5522 00D17B A9 02 00                     	LDA	#$02			;.set exponent adjust
                                           
   5524 00D17E                             LAB_29D8
   5525 00D17E 38                           	SEC				; set carry for subtract
   5526 00D17F                             LAB_29D9
   5527 00D17F E9 02 00                     	SBC	#$02			; -2
   5528 00D182 85 AA                        	STA	expcnt		;.save exponent adjust
   5529 00D184 86 A8                        	STX	numexp		; save digits before dp count
   5530 00D186 8A                           	TXA				; copy to A
   5531 00D187 F0 02                        	BEQ	LAB_29E4		; branch if no digits before dp
                                           
   5533 00D189 10 15                        	BPL	LAB_29F7		; branch if digits before dp
                                           
   5535 00D18B                             LAB_29E4
   5536 00D18B A4 BA                        	LDY	Sendl			; get output string index
   5537 00D18D A9 2E 00                     	LDA	#'.'			; character "."
   5538 00D190 C8                           	INY				; increment index
   5539 00D191 99 A0 03                     	STA	Decss,Y		; save to output string
   5540 00D194 8A                           	TXA				;.
   5541 00D195 F0 07                        	BEQ	LAB_29F5		;.
                                           
   5543 00D197 A9 30 00                     	LDA	#'0'			; character "0"
   5544 00D19A C8                           	INY				; increment index
   5545 00D19B 99 A0 03                     	STA	Decss,Y		; save to output string
   5546 00D19E                             LAB_29F5
   5547 00D19E 84 BA                        	STY	Sendl			; save output string index
                                           
   5549 00D1A0                             LAB_29F7
   5550 00D1A0 A2 30 00                     	LDX	#'0'			; holds onto the digit value
                                           
                                           ; Now loop subtracting 100,000 as many times as we can. The value was coerced
                                           ; to be between 100,000 and 1,000,000. Count the number of times subtraction
                                           ; can be done successfully.
                                           ;
   5556 00D1A3                             LAB_29FB
   5557 00D1A3 F4 60 D3                     	PEA CONST_100000
   5558 00D1A6 20 C8 D2                     	JSR LOAD_FAC2	; load FAC2 with 100,000
   5559 00D1A9 68                           	PLA				; get rid of parameter
   5560 00D1AA AF 0E A2 FE                  	LDA FP_STATREG
   5561 00D1AE 89 04 00                     	BIT #$04		; Is FAC1 > 100,000 ?
   5562 00D1B1 F0 0F                        	BEQ	.0005		; branch if not
   5563 00D1B3 A9 11 00                     	LDA #FP_SWAP	; subtract is FAC2-FAC1!
   5564 00D1B6 20 13 D3                     	JSR FPCommandWait;
   5565 00D1B9 A9 02 00                     	LDA #FP_SUB		; subtract 100,000 from the mantissa.
   5566 00D1BC 20 13 D3                     	JSR FPCommandWait
   5567 00D1BF E8                           	INX				; increment the value of the digit
   5568 00D1C0 80 E1                        	BRA	LAB_29FB	; try again
   5569 00D1C2                             .0005:
   5570 00D1C2 8A                           	TXA
   5571 00D1C3 A4 BA                        	LDY	Sendl			; get output string index
   5572 00D1C5 C8                           	INY				; increment output string index
   5573 00D1C6 8A                           	TXA
   5574 00D1C7 99 A0 03                     	STA	Decss,Y		; save to output string
   5575 00D1CA C6 A8                        	DEC	numexp		; decrement # of characters before the dp
   5576 00D1CC D0 07                        	BNE	LAB_2A3B		; branch if still characters to do
                                           				; else output the point
   5578 00D1CE A9 2E 00                     	LDA	#'.'			; character "."
   5579 00D1D1 C8                           	INY				; increment output string index
   5580 00D1D2 99 A0 03                     	STA	Decss,Y		; save to output string
   5581 00D1D5                             LAB_2A3B
   5582 00D1D5 84 BA                        	STY	Sendl		; save output string index
                                           	; We subtracted until the value was < 100,000 so multiply the
                                           	; remainder upwards to get the next digit.
   5585 00D1D7 20 F3 D2                     	JSR	MultiplyByTen	; If not, multiply by 10
   5586 00D1DA C0 1B 00                     	CPY #27			; converted (+/- . incl)
   5587 00D1DD 90 C1                        	BCC	LAB_29F7
                                           					; now remove trailing zeroes
   5589 00D1DF                             .RemoveTrailingZeros
   5590 00D1DF B9 A0 03                     	LDA	Decss,Y		; get character from output string
   5591 00D1E2 29 FF 00                     	AND	#$FF		; mask to a byte
   5592 00D1E5 88                           	DEY				; decrement output string index
   5593 00D1E6 C9 30 00                     	CMP	#'0'			; compare with "0"
   5594 00D1E9 F0 F4                        	BEQ	.RemoveTrailingZeros	; loop until non "0" character found
                                           
   5596 00D1EB C9 2E 00                     	CMP	#'.'			; compare with "."
   5597 00D1EE F0 01                        	BEQ	LAB_2A58		; branch if was dp
                                           
                                           					; restore last character
   5600 00D1F0 C8                           	INY				; increment output string index
   5601 00D1F1                             LAB_2A58
   5602 00D1F1 A9 2B 00                     	LDA	#'+'			; character "+"
   5603 00D1F4 A6 AA                        	LDX	expcnt		; get exponent count
   5604 00D1F6 F0 FF A2 00                  	LBEQ	LAB_2A8C		; if zero go set null terminator and exit
                                           
                                           					; exponent isn't zero so write exponent
   5607 00D1FA 10 0A                        	BPL	LAB_2A68		; branch if exponent count +ve
                                           
   5609 00D1FC A9 00 00                     	LDA	#$00			; clear A
   5610 00D1FF 38                           	SEC				; set carry for subtract
   5611 00D200 E5 AA                        	SBC	expcnt		; subtract exponent count adjust (convert -ve to +ve)
   5612 00D202 AA                           	TAX				; copy exponent count to X
   5613 00D203 A9 2D 00                     	LDA	#'-'			; character "-"
                                           
                                           ; We must keep moving forwards through the string because the acc is storing
                                           ; two bytes.
                                           
   5618 00D206                             LAB_2A68
   5619 00D206 48                           	PHA
   5620 00D207 A9 45 00                     	LDA	#'E'			; character "E"
   5621 00D20A 99 A1 03                     	STA	Decss+1,Y		; save exponent sign to output string
   5622 00D20D 68                           	PLA
   5623 00D20E 99 A2 03                     	STA	Decss+2,Y		; save to output string
   5624 00D211 8A                           	TXA				; get exponent count back
                                           
                                           ; do highest exponent digit
   5627 00D212 64 BA                        	STZ Sendl
   5628 00D214 A2 2F 00                     	LDX	#'0'-1		; one less than "0" character
   5629 00D217 38                           	SEC				; set carry for subtract
   5630 00D218 E8                          .0001:				
   5631 00D219 E9 10 27                     	SBC	#10000
   5632 00D21C B0 FA                        	BCS .0001
   5633 00D21E 69 10 27                     	ADC #10000
   5634 00D221 E0 30 00                     	CPX #'0'
   5635 00D224 F0 09                        	BEQ .0005
   5636 00D226 E6 BA                        	INC Sendl
   5637 00D228 48                           	PHA
   5638 00D229 8A                           	TXA
   5639 00D22A 99 A3 03                     	STA Decss+3,Y
   5640 00D22D 68                           	PLA
   5641 00D22E C8                           	INY
                                           ; do the next exponent digit
   5643 00D22F                             .0005:
   5644 00D22F A2 2F 00                     	LDX #'0'-1
   5645 00D232 38                           	SEC
   5646 00D233                             .0002:
   5647 00D233 E8                           	INX
   5648 00D234 E9 E8 03                     	SBC #1000
   5649 00D237 B0 FA                        	BCS .0002
   5650 00D239 69 E8 03                     	ADC #1000
   5651 00D23C 46 BA                        	LSR Sendl
   5652 00D23E B0 05                        	BCS .00010
   5653 00D240 E0 30 00                     	CPX #'0'
   5654 00D243 F0 09                        	BEQ .0006
   5655 00D245                             .00010:
   5656 00D245 E6 BA                        	INC Sendl
   5657 00D247 48                           	PHA
   5658 00D248 8A                           	TXA
   5659 00D249 99 A3 03                     	STA Decss+3,Y
   5660 00D24C 68                           	PLA
   5661 00D24D C8                           	INY
                                           ; and the next
   5663 00D24E                             .0006:
   5664 00D24E A2 2F 00                     	LDX	#'0'-1
   5665 00D251 38                           	SEC
   5666 00D252                             .0003:
   5667 00D252 E8                           	INX
   5668 00D253 E9 64 00                     	SBC #100
   5669 00D256 B0 FA                        	BCS .0003
   5670 00D258 69 64 00                     	ADC #100
   5671 00D25B 46 BA                        	LSR Sendl
   5672 00D25D B0 05                        	BCS .00011
   5673 00D25F E0 30 00                     	CPX #'0'
   5674 00D262 F0 09                        	BEQ .0007
   5675 00D264                             .00011:
   5676 00D264 E6 BA                        	INC Sendl
   5677 00D266 48                           	PHA
   5678 00D267 8A                           	TXA
   5679 00D268 99 A3 03                     	STA Decss+3,Y
   5680 00D26B 68                           	PLA
   5681 00D26C C8                           	INY
                                           
   5683 00D26D                             .0007:
   5684 00D26D A2 2F 00                     	LDX #'0'-1
   5685 00D270 38                           	SEC
   5686 00D271                             .0004:
   5687 00D271 E8                           	INX
   5688 00D272 E9 0A 00                     	SBC #10
   5689 00D275 B0 FA                        	BCS .0004
   5690 00D277 69 0A 00                     	ADC #10
   5691 00D27A 46 BA                        	LSR Sendl
   5692 00D27C B0 05                        	BCS .00012
   5693 00D27E E0 30 00                     	CPX #'0'
   5694 00D281 F0 09                        	BEQ .0008
   5695 00D283                             .00012:
   5696 00D283 E6 BA                        	INC Sendl
   5697 00D285 48                           	PHA
   5698 00D286 8A                           	TXA
   5699 00D287 99 A3 03                     	STA Decss+3,Y
   5700 00D28A 68                           	PLA
   5701 00D28B C8                           	INY
                                           
   5703 00D28C                             .0008:
   5704 00D28C 69 30 00                     	ADC #'0'
   5705 00D28F 99 A3 03                     	STA Decss+3,Y
   5706 00D292 A9 00 00                     	LDA	#$00			; set null terminator
   5707 00D295 99 A4 03                     	STA	Decss+4,Y		; save to output string
   5708 00D298 60                           	RTS					; go set string pointer (AY) and exit (branch always)
                                           
   5710 00D299                             LAB_2A89
   5711 00D299 99 A0 03                     	STA	Decss,Y		; save last character to output string
                                           					; set null terminator and exit
   5713 00D29C                             LAB_2A8C
   5714 00D29C A9 00 00                     	LDA	#$00			; set null terminator
   5715 00D29F 99 A1 03                     	STA	Decss+1,Y		; save after last character
                                           
   5717 00D2A2                             LAB_2A91
                                           ;	LDA	#<Decssp1		; set result string low pointer
                                           ;	LDY	#>Decssp1		; set result string high pointer
   5720 00D2A2 60                           	RTS
                                           
   5722 00D2A3                             LAB_25FB:
   5723 00D2A3 A9 11 00                     	LDA		#FP_SWAP
   5724 00D2A6 20 13 D3                     	JSR		FPCommandWait
   5725 00D2A9 A0 00 00                     	LDY		#0
   5726 00D2AC BB                           	TYX
   5727 00D2AD                             .0002:
   5728 00D2AD B3 03                        	LDA		(3,S),Y
   5729 00D2AF 9F 00 A2 FE                  	STA		FAC1,X
   5730 00D2B3 C8                           	INY
   5731 00D2B4 C8                           	INY
   5732 00D2B5 E8                           	INX
   5733 00D2B6 E8                           	INX
   5734 00D2B7 E0 0C 00                     	CPX		#12
   5735 00D2BA D0 F1                        	BNE		.0002
   5736 00D2BC A9 05 00                     	LDA		#FP_FIX2FLT
   5737 00D2BF 20 13 D3                     	JSR		FPCommandWait
   5738 00D2C2                             FMUL:
   5739 00D2C2 A9 03 00                     	LDA		#FP_MUL
   5740 00D2C5 4C 13 D3                     	JMP		FPCommandWait
   5741 00D2C8                             	
   5742 00D2C8 DA                           	PHX
   5743 00D2C9 5A                           	PHY
   5744 00D2CA A0 00 00                     	LDY		#0
   5745 00D2CD BB                           	TYX
   5746 00D2CE                             .0002:
   5747 00D2CE B3 07                        	LDA		(7,s),Y
   5748 00D2D0 9F 10 A2 FE                  	STA		FAC2,X
   5749 00D2D4 C8                           	INY
   5750 00D2D5 C8                           	INY
   5751 00D2D6 E8                           	INX
   5752 00D2D7 E8                           	INX
   5753 00D2D8 E0 0C 00                     	CPX		#12
   5754 00D2DB D0 F1                        	BNE		.0002
   5755 00D2DD 7A                           	PLY
   5756 00D2DE FA                           	PLX
   5757 00D2DF 60                           	RTS
   5758 00D2E0                             	
   5759 00D2E0 A9 06 00                     	LDA		#FP_FLT2FIX
   5760 00D2E3 4C 13 D3                     	JMP		FPCommandWait
   5761 00D2E6                             	
   5762 00D2E6 F4 90 D3                     	PEA		CONST_POINT5
   5763 00D2E9 20 C8 D2                     	JSR		LOAD_FAC2
   5764 00D2EC 68                           	PLA
   5765 00D2ED A9 01 00                     	LDA		#FP_ADD
   5766 00D2F0 4C 13 D3                     	JMP		FPCommandWait
   5767 00D2F3                             	
   5768 00D2F3 F4 78 D3                     	PEA		TEN_AS_FLOAT
   5769 00D2F6 20 C8 D2                     	JSR		LOAD_FAC2
   5770 00D2F9 68                           	PLA
   5771 00D2FA A9 03 00                     	LDA		#FP_MUL
   5772 00D2FD 4C 13 D3                     	JMP		FPCommandWait
                                           	
   5774 00D300 F4 78 D3                     	PEA		TEN_AS_FLOAT
   5775 00D303 20 C8 D2                     	JSR		LOAD_FAC2
   5776 00D306 68                           	PLA
   5777 00D307 20 10 D3                     	JSR		SwapFACs
   5778 00D30A A9 04 00                     	LDA		#FP_DIV
   5779 00D30D 4C 13 D3                     	JMP		FPCommandWait
   5780 00D310                             	
   5781 00D310 A9 11 00                     	LDA		#FP_SWAP
                                           
                                           ; Issue a command to the FP unit and wait for it to complete
                                           ;
                                           public FPCommandWait:
   5786 00D313 48                           	PHA
   5787 00D314                             .0001:
   5788 00D314 AF 0E A2 FE                  	LDA		FP_STATREG	; get the status register
   5789 00D318 89 80 00                     	BIT		#$80		; check for busy bit
   5790 00D31B D0 F7                        	BNE		.0001		; if busy go back
   5791 00D31D 68                           	PLA					; to pop acc
   5792 00D31E 8F 0E A2 FE                  	STA		FP_CMDREG	; store the command
   5793 00D322 60                           	RTS
                                           
                                           ; Display the FAC1 as a hex number
                                           ;
                                           public DispFAC1:
   5798 00D323 AF 0A A2 FE                  	LDA FAC1_e
   5799 00D327 20 39 E9                     	JSR DispWord
   5800 00D32A AF 08 A2 FE                  	LDA	FAC1_1
   5801 00D32E 20 39 E9                     	JSR	DispWord
   5802 00D331 AF 06 A2 FE                  	LDA FAC1_2
   5803 00D335 20 39 E9                     	JSR	DispWord
   5804 00D338 AF 04 A2 FE                  	LDA FAC1_3
   5805 00D33C 20 39 E9                     	JSR DispWord
   5806 00D33F AF 02 A2 FE                  	LDA FAC1_4
   5807 00D343 20 39 E9                     	JSR DispWord
   5808 00D346 AF 00 A2 FE                  	LDA FAC1_5
   5809 00D34A 20 39 E9                     	JSR DispWord
   5810 00D34D A9 20 00                     	LDA #' '
   5811 00D350 20 9B E8                     	JSR OutChar
   5812 00D353 60                           	RTS
                                           ;
                                           ; 1,000,000 as a floating point number
                                           ;
   5816 00D354                             A_MILLION:	; $F4240
   5817 00D354 00 00                        	dw		$0000
   5818 00D356 00 00                        	dw		$0000
   5819 00D358 00 00                        	dw		$0000
   5820 00D35A 00 00                        	dW		$0000
   5821 00D35C 12 7A                        	dw		$7A12
   5822 00D35E 13 80                        	dw		$8013
                                           
   5824 00D360                             CONST_100000:
                                           	;186A0
   5826 00D360 00 00                        	dw		$0000
   5827 00D362 00 00                        	dw		$0000
   5828 00D364 00 00                        	dw		$0000
   5829 00D366 00 00                        	dw		$0000
   5830 00D368 A8 61                        	dw		$61A8
   5831 00D36A 10 80                        	dw		$8010
                                           ; The constant 999999.4375 as hex
                                           ; 01.11_1010_0001_0001_1111_1011_1000_00000000000000000000000000
   5834 00D36C                             MAX_BEFORE_SCI:
   5835 00D36C 00 00                        	dw  $0000
   5836 00D36E 00 00                        	dw  $0000
   5837 00D370 00 00                        	dw	$0000
   5838 00D372 80 FB                        	dw	$FB80
   5839 00D374 11 7A                        	dw	$7A11
   5840 00D376 13 80                        	dw	$8013
                                           
   5842 00D378                             TEN_AS_FLOAT:
   5843 00D378 00 00                        	dw	$0000
   5844 00D37A 00 00                        	dw	$0000
   5845 00D37C 00 00                        	dw	$0000
   5846 00D37E 00 00                        	dw	$0000
   5847 00D380 00 50                        	dw	$5000
   5848 00D382 03 80                        	dw	$8003
                                           
                                           ; 99999.9375
                                           ; 01.10_0001_1010_0111_1111_1100_000000000000000000000000000000
                                           ;
   5853 00D384                             CONST_9375:
   5854 00D384 00 00                        	dw	$0000
   5855 00D386 00 00                        	dw	$0000
   5856 00D388 00 00                        	dw	$0000
   5857 00D38A 00 FC                        	dw	$FC00
   5858 00D38C A7 61                        	dw	$61A7
   5859 00D38E 10 80                        	dw	$8010
                                           
                                           ; 0.5
   5862 00D390                             CONST_POINT5:
   5863 00D390 00 00                        	dw	$0000
   5864 00D392 00 00                        	dw	$0000
   5865 00D394 00 00                        	dw	$0000
   5866 00D396 00 00                        	dw	$0000
   5867 00D398 00 40                        	dw	$4000
   5868 00D39A FF 7F                        	dw	$7FFF
                                           
                                           ; This table is used in converting numbers to ASCII.
                                           
   5872 00D39C                             LAB_2A9A
   6170 = 0000D39D                         LAB_2A9B = LAB_2A9A+1
   6171 = 0000D39E                         LAB_2A9C = LAB_2A9B+1
                                           ;	.word	$FFFF,$F21F,$494C,$589C,$0000
                                           ;	.word	$0000,$0163,$4578,$5D8A,$0000
                                           ;	.word	$FFFF,$FFDC,$790D,$903F,$0000
                                           ;	.word	$0000,$0003,$8D7E,$A4C6,$8000
                                           ;	.word	$FFFF,$FFFF,$A50C,$EF85,$C000
                                           ;	.word	$0000,$0000,$0918,$4E72,$A000
                                           ;	.word	$FFFF,$FFFF,$FF17,$2B5A,$F000
                                           ;	.word	$0000,$0000,$0017,$4876,$E800
                                           ;	.word	$FFFF,$FFFF,$FFFD,$ABF4,$1C00
                                           ;	.word	$0000,$0000,$0000,$3B9A,$CA00
                                           ;	.word	$FFFF,$FFFF,$FFFF,$FF67,$6980
                                           ;	.word	$0000,$0000,$0000,$05F5,$E100		; 100000000
                                           ;	.word	$0000,$0000,$0098,$9680		; 10000000
                                           ;	.word   $4240,$000F,$0000,$0000,$0000,$804E		; 1000000
   5889 00D39C A0 86 01 00 00 00 00 00      	.word	$86A0,$0001,$0000,$0000,$0000,$804E		; 100000
   5889 00D3A4 00 00 4E 80                
   5890 00D3A8 10 27 00 00 00 00 00 00      	.word	$2710,$0000,$0000,$0000,$0000,$804E		; 10000
   5890 00D3B0 00 00 4E 80                
   5891 00D3B4 E8 03 00 00 00 00 00 00      	.word	$03E8,$0000,$0000,$0000,$0000,$804E		; 1000
   5891 00D3BC 00 00 4E 80                
   5892 00D3C0 64 00 00 00 00 00 00 00      	.word	$0064,$0000,$0000,$0000,$0000,$804E		; 100
   5892 00D3C8 00 00 4E 80                
   5893 00D3CC                             FIXED10:
   5894 00D3CC 0A 00 00 00 00 00 00 00      	.word	$000A,$0000,$0000,$0000,$0000,$804E		; 10
   5894 00D3D4 00 00 4E 80                
   5895 00D3D8 01 00 00 00 00 00 00 00      	.word	$0001,$0000,$0000,$0000,$0000,$804E		; 1
   5895 00D3E0 00 00 4E 80                
                                           
                                           		 MEM	16
                                           		 NDX	16
Finitron FT832 assembler   version 1.4   Tue Nov 24 12:58:38 2015     Page 1
ftbios816.asm


                                           .include "FAC1ToString.asm"
Finitron FT832 assembler   version 1.4   Tue Nov 24 12:58:38 2015     Page 1
invaders.asm

                                           	CPU		FT832
                                           
   6205 = 0000000000FEA100                               PRNG		EQU		$FEA100
   6206 = 0000000000FEA108                               PRNG_NUM	EQU		$FEA108
   6207 = 0000000000FEA10E                               PRNG_ADV	EQU		$FEA10E
   6208 = 0000000000000001                               MAN_EXPLODING	EQU		1
                                           
                                           ; which invaders are still active (not destroyed)
                                           ; These var addresses are segment offsets into seg $7800
   6212 = 0000000000000000                               active				EQU		$00
   6213 = 000000000000005E                               left_right			EQU		$5E
   6214 = 0000000000000060                               rightmost_column	EQU		$60
   6215 = 0000000000000062                               leftmost_column		EQU		$62
   6216 = 0000000000000064                               bottom_row			EQU		$64
   6217 = 0000000000000066                               top_row				EQU		$66
   6218 = 000000000000006A                               inv_tick			EQU		$6A
   6219 = 000000000000006C                               inv_tick2			EQU		$6C
   6220 = 000000000000006E                               manX				EQU		$6E
   6221 = 0000000000000070                               manY				EQU		$70
   6222 = 0000000000000072                               manState			EQU		$72
   6223 = 0000000000000100                               InvadersX			EQU		$100
   6224 = 0000000000000200                               InvadersY			EQU		$200
   6225 = 0000000000000300                               min_right			EQU		$300
   6226 = 0000000000000310                               max_left			EQU		$310
   6227 = 0000000000000320                               bombX				EQU		$320
   6228 = 0000000000000330                               bombY				EQU		$330
   6229 = 0000000000000400                               inv_state			EQU		$400
                                           
                                           ; This var is shared, must be referenced ZS:
   6232 = 0000000000007868                               do_invaders			EQU		$7868
                                           
                                           	; minimum right +         .byte a_esc,"`0"
                                           -ordinate for each column of invaders
   5933 00D3E4                             st_min_right:
   5934 00D3E4 01 00                        	.word	1
   5935 00D3E6 05 00                        	.word	5
   5936 00D3E8 09 00                        	.word	9
   5937 00D3EA 0D 00                        	.word	13
   5938 00D3EC 11 00                        	.word	17
   5939 00D3EE 15 00                        	.word	21
   5940 00D3F0 19 00                        	.word	25
   5941 00D3F2 1D 00                        	.word	29
                                           
                                           	; maximum left +         .byte a_esc,"`0"
                                           -ordinate for each column of invaders
   5945 00D3F4 34 00                        	.word	52
   5946 00D3F6 38 00                        	.word	56
   5947 00D3F8 3C 00                        	.word	60
   5948 00D3FA 40 00                        	.word	64
   5949 00D3FC 44 00                        	.word	68
   5950 00D3FE 48 00                        	.word	72
   5951 00D400 4C 00                        	.word	76
   5952 00D402 50 00                        	.word	80
                                           
   5954 00D404 00 00                        	.word	0		; rightmost column
   5955 00D406 07 00                        	.word	7		; lefmost column
   5956 00D408 01 00                        	.word	1		; dx
                                           
                                           	MEM		16
                                           	NDX		16
                                           
                                           	code
                                           
   5963 00D40A                             InvBomb:
   5964 00D40A A2 00 00                     	LDX		#0
   5965 00D40D                             .0001:
   5966 00D40D B5 00                        	LDA		active,X
   5967 00D40F F0 27                        	BEQ		.0002
   5968 00D411 20 E9 D4                     	JSR		CanDropBomb
   5969 00D414 F0 22                        	BEQ		.0002
   5970 00D416 42 5B AF 08 A1 FE            	LDA		ZS:PRNG_NUM
   5971 00D41C 42 5B 8F 0E A1 FE            	STA		ZS:PRNG_ADV
   5972 00D422 29 63 00                     	AND		#$63
   5973 00D425 D0 11                        	BNE		.0002
   5974 00D427 20 40 D4                     	JSR		FindEmptyBomb
   5975 00D42A 30 13                        	BMI		.0003
   5976 00D42C BD 00 01                     	LDA		InvadersX,X
   5977 00D42F 99 20 03                     	STA		bombX,Y
   5978 00D432 BD 00 02                     	LDA		InvadersY,X
   5979 00D435 99 30 03                     	STA		bombY,Y
   5980 00D438                             .0002:
   5981 00D438 E8                           	INX
   5982 00D439 E8                           	INX
   5983 00D43A E0 50 00                     	CPX		#80
   5984 00D43D 30 CE                        	BMI		.0001
   5985 00D43F                             .0003:
   5986 00D43F 60                           	RTS
                                           
   5988 00D440                             FindEmptyBomb:
   5989 00D440 A0 00 00                     	LDY		#0
   5990 00D443                             .0001:
   5991 00D443 B9 20 03                     	LDA		bombX,Y
   5992 00D446 F0 0A                        	BEQ		.0002
   5993 00D448 C8                           	INY
   5994 00D449 C8                           	INY
   5995 00D44A C0 10 00                     	CPY		#16
   5996 00D44D 30 F4                        	BMI		.0001
   5997 00D44F A0 FF FF                     	LDY		#-1
   5998 00D452                             .0002:
   5999 00D452 60                           	RTS
                                           
   6001 00D453                             MoveBombs:
   6002 00D453 A2 00 00                     	LDX		#0
   6003 00D456                             .0002:
   6004 00D456 BD 20 03                     	LDA		bombX,X
   6005 00D459 F0 14                        	BEQ		.0001
   6006 00D45B BD 30 03                     	LDA		bombY,X
   6007 00D45E C9 1E 00                     	CMP		#30			; has the bomb fallen all the way to the ground ?
   6008 00D461 10 06                        	BPL		.0003		; if yes, reset bomb
   6009 00D463 1A                           	INA
   6010 00D464 9D 30 03                     	STA		bombY,X
   6011 00D467 80 06                        	BRA		.0001
   6012 00D469                             .0003:
   6013 00D469 9E 20 03                     	STZ		bombX,X
   6014 00D46C 9E 30 03                     	STZ		bombY,X
   6015 00D46F                             .0001:
   6016 00D46F E8                           	INX
   6017 00D470 E8                           	INX
   6018 00D471 E0 10 00                     	CPX		#16
   6019 00D474 30 E0                        	BMI		.0002
   6020 00D476 60                           	RTS
                                           
   6022 00D477                             GetBombOffset:
   6023 00D477 B9 30 03                     	LDA		bombY,Y
   6024 00D47A 0A                           	ASL
   6025 00D47B AA                           	TAX
   6026 00D47C 42 5B BD B6 F0               	LDA		ZS:LineTbl,X
   6027 00D481 18                           	CLC
   6028 00D482 79 20 03                     	ADC		bombX,Y
   6029 00D485 79 20 03                     	ADC		bombX,Y
   6030 00D488 AA                           	TAX
   6031 00D489 60                           	RTS
                                           
   6033 00D48A                             RenderBombs:
   6034 00D48A A0 00 00                     	LDY		#0
   6035 00D48D                             .0001:
   6036 00D48D B9 30 03                     	LDA		bombY,Y
   6037 00D490 F0 0C                        	BEQ		.0002
   6038 00D492 20 77 D4                     	JSR		GetBombOffset
   6039 00D495 A9 24 00                     	LDA		#'$'
   6040 00D498 42 5B 9F 00 00 FD            	STA		ZS:VIDBUF,X
   6041 00D49E                             .0002:
   6042 00D49E C8                           	INY
   6043 00D49F C8                           	INY
   6044 00D4A0 C0 10 00                     	CPY		#16
   6045 00D4A3 30 E8                        	BMI		.0001
   6046 00D4A5 60                           	RTS
                                           
   6048 00D4A6                             TestBombsIntercept:
   6049 00D4A6 A0 00 00                     	LDY		#0
   6050 00D4A9                             .0001:
   6051 00D4A9 20 B4 D4                     	JSR		TestBombIntercept
   6052 00D4AC C8                           	INY
   6053 00D4AD C8                           	INY
   6054 00D4AE C0 10 00                     	CPY		#16
   6055 00D4B1 30 F6                        	BMI		.0001
   6056 00D4B3 60                           	RTS
                                           
   6058 00D4B4                             TestBombIntercept:
   6059 00D4B4 20 77 D4                     	JSR		GetBombOffset
   6060 00D4B7 42 5B BF 00 00 FD            	LDA		ZS:VIDBUF,X
   6061 00D4BD C9 20 00                     	CMP		#' '
   6062 00D4C0 F0 1D                        	BEQ		.0001
   6063 00D4C2 B9 30 03                     	LDA		bombY,Y
   6064 00D4C5 C9 1D 00                     	CMP		#29
   6065 00D4C8 D0 16                        	BNE		.0002
   6066 00D4CA B9 20 03                     	LDA		bombX,Y
   6067 00D4CD D9 6E 00                     	CMP		manX,Y
   6068 00D4D0 D0 05                        	BNE		.0003
   6069 00D4D2 A9 01 00                     	LDA		#MAN_EXPLODING
   6070 00D4D5 85 72                        	STA		manState
   6071 00D4D7                             .0003:
   6072 00D4D7 BB                           	TYX
   6073 00D4D8 9E 30 03                     	STZ		bombY,X
   6074 00D4DB 9E 20 03                     	STZ		bombX,X
   6075 00D4DE 60                           	RTS
   6076 00D4DF                             .0001:
   6077 00D4DF 60                           	RTS
   6078 00D4E0                             .0002:
   6079 00D4E0 A9 20 00                     	LDA		#' '
   6080 00D4E3 9F 00 00 FD                  	STA		VIDBUF,X
   6081 00D4E7 80 EE                        	BRA		.0003
                                           
                                           ; An invader can drop a bomb only if there are no invaders underneath it.
                                           
   6085 00D4E9                             CanDropBomb:
   6086 00D4E9 E0 0F 00                     	CPX		#15
   6087 00D4EC 10 0C                        	BGE		.0001
   6088 00D4EE B5 10                        	LDA		active+16,X
   6089 00D4F0 15 20                        	ORA		active+32,X
   6090 00D4F2 15 30                        	ORA		active+48,X
   6091 00D4F4 15 40                        	ORA		active+64,X
   6092 00D4F6 49 01 00                     	EOR		#1
   6093 00D4F9 60                           	RTS
   6094 00D4FA                             .0001:
   6095 00D4FA E0 1F 00                     	CPX		#31
   6096 00D4FD 10 0A                        	BGE		.0002
   6097 00D4FF B5 10                        	LDA		active+16,X
   6098 00D501 15 20                        	ORA		active+32,X
   6099 00D503 15 30                        	ORA		active+48,X
   6100 00D505 49 01 00                     	EOR		#1
   6101 00D508 60                           	RTS
   6102 00D509                             .0002:
   6103 00D509 E0 2F 00                     	CPX		#47
   6104 00D50C 10 08                        	BGE		.0003
   6105 00D50E B5 10                        	LDA		active+16,X
   6106 00D510 15 20                        	ORA		active+32,X
   6107 00D512 49 01 00                     	EOR		#1
   6108 00D515 60                           	RTS
   6109 00D516                             .0003:
   6110 00D516 E0 3F 00                     	CPX		#63
   6111 00D519 10 06                        	BGE		.0004
   6112 00D51B B5 10                        	LDA		active+16,X
   6113 00D51D 49 01 00                     	EOR		#1
   6114 00D520 60                           	RTS
   6115 00D521                             .0004:
   6116 00D521 A9 01 00                     	LDA		#1
   6117 00D524 60                           	RTS
                                           
                                           
                                           ; Test if it's possible to move to the left anymore.
                                           ;
   6122 00D525                             CanMoveLeft:
   6123 00D525 A5 62                        	LDA		leftmost_column
   6124 00D527 0A                           	ASL
   6125 00D528 AA                           	TAX
   6126 00D529 BD 10 03                     	LDA		max_left,X
   6127 00D52C DD 00 01                     	CMP		InvadersX,X
   6128 00D52F 30 04                        	BMI		.0001
   6129 00D531 A9 00 00                     	LDA		#0
   6130 00D534 60                           	RTS
   6131 00D535                             .0001:
   6132 00D535 A9 01 00                     	LDA		#1
   6133 00D538 60                           	RTS
                                           
                                           ; Test if it's possible to move to the right anymore.
                                           ;
   6137 00D539                             CanMoveRight:
   6138 00D539 A5 60                        	LDA		rightmost_column
   6139 00D53B 0A                           	ASL
   6140 00D53C AA                           	TAX
   6141 00D53D BD 00 03                     	LDA		min_right,X
   6142 00D540 DD 00 01                     	CMP		InvadersX,X
   6143 00D543 10 04                        	BPL		.0001
   6144 00D545 A9 00 00                     	LDA		#0
   6145 00D548 60                           	RTS
   6146 00D549                             .0001:
   6147 00D549 A9 01 00                     	LDA		#1
   6148 00D54C 60                           	RTS
                                           
                                           ; Test if it's possible to move down anymore
                                           ;
   6152 00D54D                             CanMoveDown:
   6153 00D54D A5 64                        	LDA		bottom_row
   6154 00D54F 0A                           	ASL
   6155 00D550 0A                           	ASL
   6156 00D551 0A                           	ASL
   6157 00D552 0A                           	ASL
   6158 00D553 AA                           	TAX
   6159 00D554 BD 00 02                     	LDA		InvadersY,X
   6160 00D557 C9 1E 00                     	CMP		#30
   6161 00D55A 30 04                        	BMI		.0001
   6162 00D55C A9 00 00                     	LDA		#0
   6163 00D55F 60                           	RTS
   6164 00D560                             .0001:
   6165 00D560 A9 01 00                     	LDA		#1
   6166 00D563 60                           	RTS
                                           
                                           ; Move all the invaders to the left
                                           ; Means incrementing the X co-ordinate
                                           ;
   6171 00D564                             MoveLeft:
   6172 00D564 A2 00 00                     	LDX		#00
   6173 00D567                             .0002:
   6174 00D567 FE 00 01                     	INC		InvadersX,X
   6175 00D56A E8                           	INX
   6176 00D56B E8                           	INX
   6177 00D56C E0 50 00                     	CPX		#80
   6178 00D56F D0 F6                        	BNE		.0002
   6179 00D571 60                           	RTS
                                           
                                           ; Move all the invaders to the right.
                                           ; means decrementing the X co-ordinate
                                           ;
   6184 00D572                             MoveRight:
   6185 00D572 A2 00 00                     	LDX		#0
   6186 00D575                             .0002:
   6187 00D575 DE 00 01                     	DEC		InvadersX,X
   6188 00D578 E8                           	INX
   6189 00D579 E8                           	INX
   6190 00D57A E0 50 00                     	CPX		#80
   6191 00D57D D0 F6                        	BNE		.0002
   6192 00D57F 60                           	RTS
                                           
                                           ; Move all the invaders down a row.
                                           ; Means incrementing the Y co-ordinate
                                           ;
   6197 00D580                             MoveDown:
   6198 00D580 A2 00 00                     	LDX		#00
   6199 00D583                             .0002:
   6200 00D583 FE 00 02                     	INC		InvadersY,X
   6201 00D586 E8                           	INX
   6202 00D587 E8                           	INX
   6203 00D588 E0 50 00                     	CPX		#80
   6204 00D58B D0 F6                        	BNE		.0002
   6205 00D58D 60                           	RTS
                                           
                                           ; Move the invaders
                                           ; Retuns
                                           ; .A = 1 if it was possible to do a move, 0 otherwise
                                           ;
   6211 00D58E                             Move:
   6212 00D58E 24 5E                        	BIT		left_right
   6213 00D590 30 0A                        	BMI		.0002
   6214 00D592 20 25 D5                     	JSR		CanMoveLeft
   6215 00D595 F0 0F                        	BEQ		.0001
   6216 00D597 20 64 D5                     	JSR		MoveLeft
   6217 00D59A 80 19                        	BRA		.0003
   6218 00D59C                             .0002:
   6219 00D59C 20 39 D5                     	JSR		CanMoveRight
   6220 00D59F F0 05                        	BEQ		.0001
   6221 00D5A1 20 72 D5                     	JSR		MoveRight
   6222 00D5A4 80 0F                        	BRA		.0003
   6223 00D5A6                             .0001:
   6224 00D5A6 20 4D D5                     	JSR		CanMoveDown
   6225 00D5A9 F0 0E                        	BEQ		.0004
   6226 00D5AB A5 5E                        	LDA		left_right
   6227 00D5AD 49 FF FF                     	EOR		#$FFFF
   6228 00D5B0 85 5E                        	STA		left_right
   6229 00D5B2 20 80 D5                     	JSR		MoveDown
   6230 00D5B5                             .0003:
   6231 00D5B5 A9 01 00                     	LDA		#1
   6232 00D5B8 60                           	RTS
   6233 00D5B9                             .0004:
   6234 00D5B9 A9 00 00                     	LDA		#0
   6235 00D5BC 60                           	RTS
                                           
   6237 00D5BD                             Initialize:
   6238 00D5BD 64 60                        	STZ		rightmost_column
   6239 00D5BF A9 07 00                     	LDA		#7
   6240 00D5C2 85 62                        	STA		leftmost_column
   6241 00D5C4 64 66                        	STZ		top_row
   6242 00D5C6 A9 04 00                     	LDA		#4
   6243 00D5C9 85 64                        	STA		bottom_row
   6244 00D5CB 64 5E                        	STZ		left_right
   6245 00D5CD 20 15 D6                     	JSR		ActivateAllInvaders
   6246 00D5D0 A2 00 00                     	LDX		#0
   6247 00D5D3                             .0001:
   6248 00D5D3 42 1B BD 28 DA               	LDA		CS:StartX,X
   6249 00D5D8 9D 00 01                     	STA		InvadersX,X
   6250 00D5DB 42 1B BD D8 D9               	LDA		CS:StartY,X
   6251 00D5E0 9D 00 02                     	STA		InvadersY,X
   6252 00D5E3 E8                           	INX
   6253 00D5E4 E8                           	INX
   6254 00D5E5 E0 50 00                     	CPX		#80
   6255 00D5E8 30 E9                        	BMI		.0001
   6256 00D5EA A2 00 00                     	LDX		#0
   6257 00D5ED                             .0002:
   6258 00D5ED 42 1B BD E4 D3               	LDA		CS:st_min_right,X
   6259 00D5F2 9D 00 03                     	STA		min_right,X
   6260 00D5F5 E8                           	INX
   6261 00D5F6 E8                           	INX
   6262 00D5F7 E0 20 00                     	CPX		#32
   6263 00D5FA 30 F1                        	BMI		.0002
                                           	; Initialize Bombs
   6265 00D5FC A2 00 00                     	LDX		#0
   6266 00D5FF                             .0003:
   6267 00D5FF 9E 20 03                     	STZ		bombX,X
   6268 00D602 9E 30 03                     	STZ		bombY,X
   6269 00D605 E8                           	INX
   6270 00D606 E8                           	INX
   6271 00D607 E0 10 00                     	CPX		#16
   6272 00D60A 30 F3                        	BMI		.0003
   6273 00D60C A9 FE FF                     	LDA		#$FFFE
   6274 00D60F 42 5B 8D 68 78               	STA		ZS:do_invaders
   6275 00D614 60                           	RTS
                                           
   6277 00D615                             ActivateAllInvaders:
   6278 00D615 A2 00 00                     	LDX		#0
   6279 00D618 A9 01 00                     	LDA		#1
   6280 00D61B                             .0001:
   6281 00D61B 95 00                        	STA		active,X
   6282 00D61D E8                           	INX
   6283 00D61E E8                           	INX
   6284 00D61F E0 50 00                     	CPX		#80
   6285 00D622 D0 F7                        	BNE		.0001
   6286 00D624 60                           	RTS
                                           
   6288 00D625                             IsAllDestroyed:
   6289 00D625 20 AD D6                     	JSR		IsRightmostColumnDestroyed
   6290 00D628 F0 2C                        	BEQ		.0001
   6291 00D62A E6 60                        	INC		rightmost_column
   6292 00D62C AD 0C 03                     	LDA		min_right+12
   6293 00D62F 8D 0E 03                     	STA		min_right+14
   6294 00D632 AD 0A 03                     	LDA		min_right+10
   6295 00D635 8D 0C 03                     	STA		min_right+12
   6296 00D638 AD 08 03                     	LDA		min_right+8
   6297 00D63B 8D 0A 03                     	STA		min_right+10
   6298 00D63E AD 06 03                     	LDA		min_right+6
   6299 00D641 8D 08 03                     	STA		min_right+8
   6300 00D644 AD 04 03                     	LDA		min_right+4
   6301 00D647 8D 06 03                     	STA		min_right+6
   6302 00D64A AD 02 03                     	LDA		min_right+2
   6303 00D64D 8D 04 03                     	STA		min_right+4
   6304 00D650 AD 00 03                     	LDA		min_right
   6305 00D653 8D 02 03                     	STA		min_right+2
   6306 00D656                             .0001:
   6307 00D656 20 A9 D6                     	JSR		IsLeftmostColumnDestroyed
   6308 00D659 F0 2C                        	BEQ		.0002
   6309 00D65B C6 62                        	DEC		leftmost_column
   6310 00D65D AD 12 03                     	LDA		max_left+2
   6311 00D660 8D 10 03                     	STA		max_left
   6312 00D663 AD 14 03                     	LDA		max_left+4
   6313 00D666 8D 12 03                     	STA		max_left+2
   6314 00D669 AD 16 03                     	LDA		max_left+6
   6315 00D66C 8D 14 03                     	STA		max_left+4
   6316 00D66F AD 18 03                     	LDA		max_left+8
   6317 00D672 8D 16 03                     	STA		max_left+6
   6318 00D675 AD 1A 03                     	LDA		max_left+10
   6319 00D678 8D 18 03                     	STA		max_left+8
   6320 00D67B AD 1C 03                     	LDA		max_left+12
   6321 00D67E 8D 1A 03                     	STA		max_left+10
   6322 00D681 AD 1E 03                     	LDA		max_left+14
   6323 00D684 8D 1C 03                     	STA		max_left+12
   6324 00D687                             .0002:
   6325 00D687 A5 62                        	LDA		leftmost_column
   6326 00D689 C5 60                        	CMP		rightmost_column
   6327 00D68B 30 18                        	BMI		.allDestroyed
   6328 00D68D 20 C9 D6                     	JSR		IsBottomRowDestroyed
   6329 00D690 F0 02                        	BEQ		.0003
   6330 00D692 C6 64                        	DEC		bottom_row
   6331 00D694                             .0003:
   6332 00D694 20 C5 D6                     	JSR		IsTopRowDestroyed
   6333 00D697 F0 02                        	BEQ		.0004
   6334 00D699 E6 66                        	INC		top_row
   6335 00D69B                             .0004:
   6336 00D69B A5 64                        	LDA		bottom_row
   6337 00D69D C5 66                        	CMP		top_row
   6338 00D69F 30 04                        	BMI		.allDestroyed
   6339 00D6A1 A9 00 00                     	LDA		#0
   6340 00D6A4 60                           	RTS
   6341 00D6A5                             .allDestroyed:
   6342 00D6A5 A9 01 00                     	LDA		#1
   6343 00D6A8 60                           	RTS
                                           
                                           
   6346 00D6A9                             IsLeftmostColumnDestroyed:
   6347 00D6A9 A5 62                        	LDA		leftmost_column
   6348 00D6AB 80 02                        	BRA		IsColumnDestroyed
   6349 00D6AD                             IsRightmostColumnDestroyed:
   6350 00D6AD A5 60                        	LDA		rightmost_column
   6351 00D6AF                             IsColumnDestroyed:
   6352 00D6AF 0A                           	ASL
   6353 00D6B0 AA                           	TAX
   6354 00D6B1 B5 00                        	LDA		active,X
   6355 00D6B3 15 10                        	ORA		active+16,X
   6356 00D6B5 15 20                        	ORA		active+32,X
   6357 00D6B7 15 30                        	ORA		active+48,X
   6358 00D6B9 15 40                        	ORA		active+64,X
   6359 00D6BB 15 50                        	ORA		active+80,X
   6360 00D6BD 15 60                        	ORA		active+96,X
   6361 00D6BF 15 70                        	ORA		active+112,X
   6362 00D6C1 49 01 00                     	EOR		#1
   6363 00D6C4 60                           	RTS
                                           
   6365 00D6C5                             IsTopRowDestroyed:
   6366 00D6C5 A5 66                        	LDA		top_row
   6367 00D6C7 80 02                        	BRA		IsRowDestroyed
   6368 00D6C9                             IsBottomRowDestroyed:
   6369 00D6C9 A5 64                        	LDA		bottom_row
   6370 00D6CB                             IsRowDestroyed:
   6371 00D6CB 0A                           	ASL
   6372 00D6CC 0A                           	ASL
   6373 00D6CD 0A                           	ASL
   6374 00D6CE 0A                           	ASL
   6375 00D6CF B5 00                        	LDA		active,X
   6376 00D6D1 15 02                        	ORA		active+2,X
   6377 00D6D3 15 04                        	ORA		active+4,X
   6378 00D6D5 15 06                        	ORA		active+6,X
   6379 00D6D7 15 08                        	ORA		active+8,X
   6380 00D6D9 15 0A                        	ORA		active+10,X
   6381 00D6DB 15 0C                        	ORA		active+12,X
   6382 00D6DD 15 0E                        	ORA		active+14,X
   6383 00D6DF 49 01 00                     	EOR		#1
   6384 00D6E2 60                           	RTS
                                           
                                           ; TickCount counts 1/100 of a second. We want to animate the graphics at a much
                                           ; slower rate, so we use bit 6 of the tick count to indicate when to animate.
                                           ;
   6389 00D6E3                             ShiftTick:
   6390 00D6E3 42 5B A5 04                  	LDA		ZS:TickCount
   6391 00D6E7 4A                           	LSR
   6392 00D6E8 4A                           	LSR
   6393 00D6E9 4A                           	LSR
   6394 00D6EA 4A                           	LSR
   6395 00D6EB 4A                           	LSR
   6396 00D6EC 4A                           	LSR
   6397 00D6ED 60                           	RTS
                                           
   6399 00D6EE                             RenderInvaders:
                                           	; First, clear the screen
   6401 00D6EE A2 00 00                     	LDX		#0
   6402 00D6F1 A9 20 00                     	LDA		#' '
   6403 00D6F4 09 00 BF                     	ORA		#$BF00
   6404 00D6F7                             .0003:
   6405 00D6F7 42 5B 9F 00 00 FD            	STA		ZS:VIDBUF,X
   6406 00D6FD E8                           	INX
   6407 00D6FE E8                           	INX
   6408 00D6FF E0 58 14                     	CPX		#84*31*2
   6409 00D702 30 F3                        	BMI		.0003
   6410 00D704 A2 00 00                     	LDX		#0
   6411 00D707                             .0002:
   6412 00D707 C2 30                        	REP		#$30
                                           	MEM		16
                                           	NDX		16
   6415 00D709 B5 00                        	LDA		active,X
   6416 00D70B F0 FF BD 01                  	LBEQ	.0001
   6417 00D70F BD 00 04                     	LDA		inv_state,X
   6418 00D712 BD 00 02                     	LDA		InvadersY,X
   6419 00D715 0A                           	ASL
   6420 00D716 A8                           	TAY
   6421 00D717 42 5B B9 B6 F0               	LDA		ZS:LineTbl,Y
   6422 00D71C 18                           	CLC
   6423 00D71D 7D 00 01                     	ADC		InvadersX,X
   6424 00D720 18                           	CLC
   6425 00D721 7D 00 01                     	ADC		InvadersX,X
   6426 00D724 A8                           	TAY
   6427 00D725 E2 20                        	SEP		#$20			; eight bit acc
                                           	MEM		8
   6429 00D727 42 1B BD 78 DA               	LDA		CS:InvaderType,X
   6430 00D72C C9 01                        	CMP		#1
   6431 00D72E D0 46                        	BNE		.0004
   6432 00D730 A9 E9                        	LDA		#233
   6433 00D732 42 5B 42 99 00 00 FD 00      	STA		ZS:VIDBUF,Y
                                         
   6434 00D73A A9 F2                        	LDA		#242
   6435 00D73C 42 5B 42 99 02 00 FD 00      	STA		ZS:VIDBUF+2,Y
                                         
   6436 00D744 A9 DF                        	LDA		#223
   6437 00D746 42 5B 42 99 04 00 FD 00      	STA		ZS:VIDBUF+4,Y
                                         
   6438 00D74E 20 E3 D6                     	JSR		ShiftTick
   6439 00D751 90 04                        	BCC		.0005
   6440 00D753 A9 58                        	LDA		#'X'
   6441 00D755 80 02                        	BRA		.0006
   6442 00D757                             .0005:
   6443 00D757 A9 56                        	LDA		#'V'
   6444 00D759                             .0006:
   6445 00D759 42 5B 42 99 54 00 FD 00      	STA		ZS:VIDBUF+84,Y
                                         
   6446 00D761 42 5B 42 99 58 00 FD 00      	STA		ZS:VIDBUF+88,Y
                                         
   6447 00D769 A9 20                        	LDA		#' '
   6448 00D76B 42 5B 42 99 56 00 FD 00      	STA		ZS:VIDBUF+86,Y
                                         
   6449 00D773 82 E4 00                     	BRL		.0007
   6450 00D776                             .0004:
   6451 00D776 C9 02                        	CMP		#2
   6452 00D778 D0 FF 83 00                  	LBNE	.0008
   6453 00D77C 20 E3 D6                     	JSR		ShiftTick
   6454 00D77F 90 3F                        	BCC		.0009
   6455 00D781 A9 FC                        	LDA		#252
   6456 00D783 42 5B 42 99 00 00 FD 00      	STA		ZS:VIDBUF,Y
                                         
   6457 00D78B A9 99                        	LDA		#153
   6458 00D78D 42 5B 42 99 02 00 FD 00      	STA		ZS:VIDBUF+2,Y
                                         
   6459 00D795 A9 FE                        	LDA		#254
   6460 00D797 42 5B 42 99 04 00 FD 00      	STA		ZS:VIDBUF+4,Y
                                         
   6461 00D79F A9 E2                        	LDA		#226
   6462 00D7A1 42 5B 42 99 54 00 FD 00      	STA		ZS:VIDBUF+84,Y
                                         
   6463 00D7A9 A9 62                        	LDA		#98
   6464 00D7AB 42 5B 42 99 56 00 FD 00      	STA		ZS:VIDBUF+86,Y
                                         
   6465 00D7B3 A9 E2                        	LDA		#226
   6466 00D7B5 42 5B 42 99 58 00 FD 00      	STA		ZS:VIDBUF+88,Y
                                         
   6467 00D7BD 82 9A 00                     	BRL		.0007
   6468 00D7C0                             .0009:
   6469 00D7C0 A9 62                        	LDA		#98
   6470 00D7C2 42 5B 42 99 00 00 FD 00      	STA		ZS:VIDBUF,Y
                                         
   6471 00D7CA A9 99                        	LDA		#153
   6472 00D7CC 42 5B 42 99 02 00 FD 00      	STA		ZS:VIDBUF+2,Y
                                         
   6473 00D7D4 A9 62                        	LDA		#98
   6474 00D7D6 42 5B 42 99 04 00 FD 00      	STA		ZS:VIDBUF+4,Y
                                         
   6475 00D7DE A9 EC                        	LDA		#236
   6476 00D7E0 42 5B 42 99 54 00 FD 00      	STA		ZS:VIDBUF+84,Y
                                         
   6477 00D7E8 A9 62                        	LDA		#98
   6478 00D7EA 42 5B 42 99 56 00 FD 00      	STA		ZS:VIDBUF+86,Y
                                         
   6479 00D7F2 A9 FB                        	LDA		#251
   6480 00D7F4 42 5B 42 99 58 00 FD 00      	STA		ZS:VIDBUF+88,Y
                                         
   6481 00D7FC 82 5B 00                     	BRL		.0007
   6482 00D7FF                             .0008:
   6483 00D7FF A9 FF                        	LDA		#255
   6484 00D801 42 5B 42 99 00 00 FD 00      	STA		ZS:VIDBUF,Y
                                         
   6485 00D809 A9 F8                        	LDA		#248
   6486 00D80B 42 5B 42 99 02 00 FD 00      	STA		ZS:VIDBUF+2,Y
                                         
   6487 00D813 A9 7F                        	LDA		#127
   6488 00D815 42 5B 99 0E D8               	STA		ZS:VIDBUf+4,Y
   6489 00D81A 20 E3 D6                     	JSR		ShiftTick
   6490 00D81D 90 20                        	BCC		.0010
   6491 00D81F A9 FF                        	LDA		#255
   6492 00D821 42 5B 42 99 54 00 FD 00      	STA		ZS:VIDBUF+84,Y
                                         
   6493 00D829 A9 F9                        	LDA		#249
   6494 00D82B 42 5B 42 99 56 00 FD 00      	STA		ZS:VIDBUF+86,Y
                                         
   6495 00D833 A9 7F                        	LDA		#127
   6496 00D835 42 5B 42 99 58 00 FD 00      	STA		ZS:VIDBUF+88,Y
                                         
   6497 00D83D 80 1B                        	BRA		.0007
   6498 00D83F                             .0010:
   6499 00D83F A9 E1                        	LDA		#225
   6500 00D841 42 5B 99 5E D8               	STA		ZS:VIDBUf+84,Y
   6501 00D846 A9 F9                        	LDA		#249
   6502 00D848 42 5B 42 99 56 00 FD 00      	STA		ZS:VIDBUF+86,Y
                                         
   6503 00D850 A9 60                        	LDA		#96
   6504 00D852 42 5B 42 99 58 00 FD 00      	STA		ZS:VIDBUF+88,Y
                                         
   6505 00D85A                             .0007:
                                           	; Surround the alien with spaces
   6507 00D85A A9 20                        	LDA		#' '
   6508 00D85C 42 5B 42 99 AA FF FC 00      	STA		ZS:VIDBUF-86,Y
                                         
   6509 00D864 42 5B 42 99 AC FF FC 00      	STA		ZS:VIDBUF-84,Y
                                         
   6510 00D86C 42 5B 42 99 AE FF FC 00      	STA		ZS:VIDBUF-82,Y
                                         
   6511 00D874 42 5B 42 99 B0 FF FC 00      	STA		ZS:VIDBUF-80,Y
                                         
   6512 00D87C 42 5B 42 99 B2 FF FC 00      	STA		ZS:VIDBUF-78,Y
                                         
   6513 00D884 42 5B 42 99 FE FF FC 00      	STA		ZS:VIDBUF-2,Y
                                         
   6514 00D88C 42 5B 42 99 06 00 FD 00      	STA		ZS:VIDBUF+6,Y
                                         
   6515 00D894 42 5B 42 99 52 00 FD 00      	STA		ZS:VIDBUF+82,Y
                                         
   6516 00D89C 42 5B 42 99 5A 00 FD 00      	STA		ZS:VIDBUF+90,Y
                                         
   6517 00D8A4 42 5B 42 99 A6 00 FD 00      	STA		ZS:VIDBUF+166,Y
                                         
   6518 00D8AC 42 5B 42 99 A8 00 FD 00      	STA		ZS:VIDBUF+168,Y
                                         
   6519 00D8B4 42 5B 42 99 AA 00 FD 00      	STA		ZS:VIDBUF+170,Y
                                         
   6520 00D8BC 42 5B 42 99 AC 00 FD 00      	STA		ZS:VIDBUF+172,Y
                                         
   6521 00D8C4 42 5B 42 99 AE 00 FD 00      	STA		ZS:VIDBUF+174,Y
                                         
   6522 00D8CC                             .0001:
   6523 00D8CC E8                           	INX
   6524 00D8CD E8                           	INX
   6525 00D8CE E0 50 00                     	CPX		#80
   6526 00D8D1 D0 FF 32 FE                  	LBNE	.0002
   6527 00D8D5 C2 20                        	REP		#$20
                                           	MEM		16
   6529 00D8D7 60                           	RTS
                                           
                                           public InvadersTask:
   6532 00D8D8                             .0001:
   6533 00D8D8 F4 00 00                     	PEA		0				; set data segment to $7800
   6534 00D8DB F4 00 78                     	PEA		$7800
   6535 00D8DE 42 2B                        	PLDS
   6536 00D8E0 A9 FF 2B                     	LDA		#$2BFF			; set stack to $2BFF
   6537 00D8E3 1B                           	TAS
   6538 00D8E4 20 BD D5                     	JSR		Initialize
   6539 00D8E7 42 E2 00 10                  	SEP		#$1000			; turn on single step mode
   6540 00D8EB 20 EE D6                     	JSR		RenderInvaders
   6541 00D8EE                             .0002:
   6542 00D8EE 42 20 5E EB 07               	JCR 	KeybdGetCharNoWaitCtx,7	; check for char at keyboard
   6543 00D8F3                             .0004:
   6544 00D8F3 A2 00 00                     	LDX		#0
   6545 00D8F6                             .0006:
   6546 00D8F6 E8                           	INX
   6547 00D8F7 E0 D0 07                     	CPX		#2000
   6548 00D8FA D0 FA                        	BNE		.0006
   6549 00D8FC 42 5B A5 04                  	LDA		ZS:TickCount
   6550 00D900 29 03 00                     	AND		#$3
   6551 00D903 D0 E9                        	BNE		.0002
   6552 00D905 20 0A D4                     	JSR		InvBomb
   6553 00D908 20 EE D6                     	JSR		RenderInvaders
   6554 00D90B 20 8A D4                     	JSR		RenderBombs
   6555 00D90E 20 53 D4                     	JSR		MoveBombs
   6556 00D911 42 5B A5 04                  	LDA		ZS:TickCount
   6557 00D915 29 0F 00                     	AND		#$F
   6558 00D918 D0 D4                        	BNE		.0002
   6559 00D91A 20 25 D6                     	JSR		IsAllDestroyed
   6560 00D91D D0 B9                        	BNE		.0001
   6561 00D91F 20 8E D5                     	JSR		Move
   6562 00D922 F0 B4                        	BEQ		.0001				; Can't move, re-initialize
   6563 00D924 80 C8                        	BRA		.0002
   6564 00D926                             .0005:
   6565 00D926 85 6A                        	STA		inv_tick
   6566 00D928 80 C4                        	BRA		.0002
   6567 00D92A                             .0003:
   6568 00D92A C9 03 00                     	CMP		#3
   6569 00D92D D0 C4                        	BNE		.0004
   6570 00D92F 42 5B 9C 68 78               	STZ		ZS:do_invaders
   6571 00D934 42 60                        	RTT
   6572 00D936 80 A0                        	BRA		.0001
                                           
   6574 00D938                             InvaderRow:
   6575 00D938 00 00                        	.word	0
   6576 00D93A 00 00                        	.word	0
   6577 00D93C 00 00                        	.word	0
   6578 00D93E 00 00                        	.word	0
   6579 00D940 00 00                        	.word	0
   6580 00D942 00 00                        	.word	0
   6581 00D944 00 00                        	.word	0
   6582 00D946 00 00                        	.word	0
                                           
   6584 00D948 01 00                        	.word	1
   6585 00D94A 01 00                        	.word	1
   6586 00D94C 01 00                        	.word	1
   6587 00D94E 01 00                        	.word	1
   6588 00D950 01 00                        	.word	1
   6589 00D952 01 00                        	.word	1
   6590 00D954 01 00                        	.word	1
   6591 00D956 01 00                        	.word	1
                                           
   6593 00D958 02 00                        	.word	2
   6594 00D95A 02 00                        	.word	2
   6595 00D95C 02 00                        	.word	2
   6596 00D95E 02 00                        	.word	2
   6597 00D960 02 00                        	.word	2
   6598 00D962 02 00                        	.word	2
   6599 00D964 02 00                        	.word	2
   6600 00D966 02 00                        	.word	2
                                           
   6602 00D968 03 00                        	.word	3
   6603 00D96A 03 00                        	.word	3
   6604 00D96C 03 00                        	.word	3
   6605 00D96E 03 00                        	.word	3
   6606 00D970 03 00                        	.word	3
   6607 00D972 03 00                        	.word	3
   6608 00D974 03 00                        	.word	3
   6609 00D976 03 00                        	.word	3
                                           
   6611 00D978 04 00                        	.word	4
   6612 00D97A 04 00                        	.word	4
   6613 00D97C 04 00                        	.word	4
   6614 00D97E 04 00                        	.word	4
   6615 00D980 04 00                        	.word	4
   6616 00D982 04 00                        	.word	4
   6617 00D984 04 00                        	.word	4
   6618 00D986 04 00                        	.word	4
                                           
   6620 00D988                             InvaderCol:
   6621 00D988 00 00                        	.word	0
   6622 00D98A 01 00                        	.word	1
   6623 00D98C 02 00                        	.word	2
   6624 00D98E 03 00                        	.word	3
   6625 00D990 04 00                        	.word	4
   6626 00D992 05 00                        	.word	5
   6627 00D994 06 00                        	.word	6
   6628 00D996 07 00                        	.word	7
                                           
   6630 00D998 00 00                        	.word	0
   6631 00D99A 01 00                        	.word	1
   6632 00D99C 02 00                        	.word	2
   6633 00D99E 03 00                        	.word	3
   6634 00D9A0 04 00                        	.word	4
   6635 00D9A2 05 00                        	.word	5
   6636 00D9A4 06 00                        	.word	6
   6637 00D9A6 07 00                        	.word	7
                                           
   6639 00D9A8 00 00                        	.word	0
   6640 00D9AA 01 00                        	.word	1
   6641 00D9AC 02 00                        	.word	2
   6642 00D9AE 03 00                        	.word	3
   6643 00D9B0 04 00                        	.word	4
   6644 00D9B2 05 00                        	.word	5
   6645 00D9B4 06 00                        	.word	6
   6646 00D9B6 07 00                        	.word	7
                                           
   6648 00D9B8 00 00                        	.word	0
   6649 00D9BA 01 00                        	.word	1
   6650 00D9BC 02 00                        	.word	2
   6651 00D9BE 03 00                        	.word	3
   6652 00D9C0 04 00                        	.word	4
   6653 00D9C2 05 00                        	.word	5
   6654 00D9C4 06 00                        	.word	6
   6655 00D9C6 07 00                        	.word	7
                                           
   6657 00D9C8 00 00                        	.word	0
   6658 00D9CA 01 00                        	.word	1
   6659 00D9CC 02 00                        	.word	2
   6660 00D9CE 03 00                        	.word	3
   6661 00D9D0 04 00                        	.word	4
   6662 00D9D2 05 00                        	.word	5
   6663 00D9D4 06 00                        	.word	6
   6664 00D9D6 07 00                        	.word	7
                                           
                                           ; Starting Y co-ordinate for each invader
                                           
   6668 00D9D8                             StartY:
   6669 00D9D8 03 00                        	.word	3
   6670 00D9DA 03 00                        	.word	3
   6671 00D9DC 03 00                        	.word	3
   6672 00D9DE 03 00                        	.word	3
   6673 00D9E0 03 00                        	.word	3
   6674 00D9E2 03 00                        	.word	3
   6675 00D9E4 03 00                        	.word	3
   6676 00D9E6 03 00                        	.word	3
                                           
   6678 00D9E8 06 00                        	.word	6
   6679 00D9EA 06 00                        	.word	6
   6680 00D9EC 06 00                        	.word	6
   6681 00D9EE 06 00                        	.word	6
   6682 00D9F0 06 00                        	.word	6
   6683 00D9F2 06 00                        	.word	6
   6684 00D9F4 06 00                        	.word	6
   6685 00D9F6 06 00                        	.word	6
                                           
   6687 00D9F8 09 00                        	.word	9
   6688 00D9FA 09 00                        	.word	9
   6689 00D9FC 09 00                        	.word	9
   6690 00D9FE 09 00                        	.word	9
   6691 00DA00 09 00                        	.word	9
   6692 00DA02 09 00                        	.word	9
   6693 00DA04 09 00                        	.word	9
   6694 00DA06 09 00                        	.word	9
                                           
   6696 00DA08 0C 00                        	.word	12
   6697 00DA0A 0C 00                        	.word	12
   6698 00DA0C 0C 00                        	.word	12
   6699 00DA0E 0C 00                        	.word	12
   6700 00DA10 0C 00                        	.word	12
   6701 00DA12 0C 00                        	.word	12
   6702 00DA14 0C 00                        	.word	12
   6703 00DA16 0C 00                        	.word	12
                                           
   6705 00DA18 0F 00                        	.word	15
   6706 00DA1A 0F 00                        	.word	15
   6707 00DA1C 0F 00                        	.word	15
   6708 00DA1E 0F 00                        	.word	15
   6709 00DA20 0F 00                        	.word	15
   6710 00DA22 0F 00                        	.word	15
   6711 00DA24 0F 00                        	.word	15
   6712 00DA26 0F 00                        	.word	15
                                           
                                           ; Starting X co-ordinate for each invader
                                           
   6716 00DA28                             StartX:
   6717 00DA28 01 00                        	.word	1
   6718 00DA2A 05 00                        	.word	5
   6719 00DA2C 09 00                        	.word	9
   6720 00DA2E 0D 00                        	.word	13
   6721 00DA30 11 00                        	.word	17
   6722 00DA32 15 00                        	.word	21
   6723 00DA34 19 00                        	.word	25
   6724 00DA36 1D 00                        	.word	29
                                           
   6726 00DA38 01 00                        	.word	1
   6727 00DA3A 05 00                        	.word	5
   6728 00DA3C 09 00                        	.word	9
   6729 00DA3E 0D 00                        	.word	13
   6730 00DA40 11 00                        	.word	17
   6731 00DA42 15 00                        	.word	21
   6732 00DA44 19 00                        	.word	25
   6733 00DA46 1D 00                        	.word	29
                                           
   6735 00DA48 01 00                        	.word	1
   6736 00DA4A 05 00                        	.word	5
   6737 00DA4C 09 00                        	.word	9
   6738 00DA4E 0D 00                        	.word	13
   6739 00DA50 11 00                        	.word	17
   6740 00DA52 15 00                        	.word	21
   6741 00DA54 19 00                        	.word	25
   6742 00DA56 1D 00                        	.word	29
                                           
   6744 00DA58 01 00                        	.word	1
   6745 00DA5A 05 00                        	.word	5
   6746 00DA5C 09 00                        	.word	9
   6747 00DA5E 0D 00                        	.word	13
   6748 00DA60 11 00                        	.word	17
   6749 00DA62 15 00                        	.word	21
   6750 00DA64 19 00                        	.word	25
   6751 00DA66 1D 00                        	.word	29
                                           
   6753 00DA68 01 00                        	.word	1
   6754 00DA6A 05 00                        	.word	5
   6755 00DA6C 09 00                        	.word	9
   6756 00DA6E 0D 00                        	.word	13
   6757 00DA70 11 00                        	.word	17
   6758 00DA72 15 00                        	.word	21
   6759 00DA74 19 00                        	.word	25
   6760 00DA76 1D 00                        	.word	29
                                           
   6762 00DA78                             InvaderType:
   6763 00DA78 01 00                        	.word	1
   6764 00DA7A 01 00                        	.word	1
   6765 00DA7C 01 00                        	.word	1
   6766 00DA7E 01 00                        	.word	1
   6767 00DA80 01 00                        	.word	1
   6768 00DA82 01 00                        	.word	1
   6769 00DA84 01 00                        	.word	1
   6770 00DA86 01 00                        	.word	1
                                           
   6772 00DA88 02 00                        	.word	2
   6773 00DA8A 02 00                        	.word	2
   6774 00DA8C 02 00                        	.word	2
   6775 00DA8E 02 00                        	.word	2
   6776 00DA90 02 00                        	.word	2
   6777 00DA92 02 00                        	.word	2
   6778 00DA94 02 00                        	.word	2
   6779 00DA96 02 00                        	.word	2
                                           
   6781 00DA98 02 00                        	.word	2
   6782 00DA9A 02 00                        	.word	2
   6783 00DA9C 02 00                        	.word	2
   6784 00DA9E 02 00                        	.word	2
   6785 00DAA0 02 00                        	.word	2
   6786 00DAA2 02 00                        	.word	2
   6787 00DAA4 02 00                        	.word	2
   6788 00DAA6 02 00                        	.word	2
                                           
   6790 00DAA8 03 00                        	.word	3
   6791 00DAAA 03 00                        	.word	3
   6792 00DAAC 03 00                        	.word	3
   6793 00DAAE 03 00                        	.word	3
   6794 00DAB0 03 00                        	.word	3
   6795 00DAB2 03 00                        	.word	3
   6796 00DAB4 03 00                        	.word	3
   6797 00DAB6 03 00                        	.word	3
                                           
   6799 00DAB8 03 00                        	.word	3
   6800 00DABA 03 00                        	.word	3
   6801 00DABC 03 00                        	.word	3
   6802 00DABE 03 00                        	.word	3
   6803 00DAC0 03 00                        	.word	3
   6804 00DAC2 03 00                        	.word	3
   6805 00DAC4 03 00                        	.word	3
   6806 00DAC6 03 00                        	.word	3
                                           			
Finitron FT832 assembler   version 1.4   Tue Nov 24 12:58:38 2015     Page 1
ftbios816.asm


                                           .include "invaders.asm"
                                           
                                           ;	cpu		W65C816S
                                           	cpu		FT832
   6811 00DAC8 FF FF FF FF FF FF FF FF      	.org	$E000
   6811 00DAD0 FF FF FF FF FF FF FF FF    
   6811 00DAD8 FF FF FF FF FF FF FF FF    
   6811 00DAE0 FF FF FF FF FF FF FF FF    
   6811 00DAE8 FF FF FF FF FF FF FF FF    
   6811 00DAF0 FF FF FF FF FF FF FF FF    
   6811 00DAF8 FF FF FF FF FF FF FF FF    
   6811 00DB00 FF FF FF FF FF FF FF FF    
   6811 00DB08 FF FF FF FF FF FF FF FF    
   6811 00DB10 FF FF FF FF FF FF FF FF    
   6811 00DB18 FF FF FF FF FF FF FF FF    
   6811 00DB20 FF FF FF FF FF FF FF FF    
   6811 00DB28 FF FF FF FF FF FF FF FF    
   6811 00DB30 FF FF FF FF FF FF FF FF    
   6811 00DB38 FF FF FF FF FF FF FF FF    
   6811 00DB40 FF FF FF FF FF FF FF FF    
   6811 00DB48 FF FF FF FF FF FF FF FF    
   6811 00DB50 FF FF FF FF FF FF FF FF    
   6811 00DB58 FF FF FF FF FF FF FF FF    
   6811 00DB60 FF FF FF FF FF FF FF FF    
   6811 00DB68 FF FF FF FF FF FF FF FF    
   6811 00DB70 FF FF FF FF FF FF FF FF    
   6811 00DB78 FF FF FF FF FF FF FF FF    
   6811 00DB80 FF FF FF FF FF FF FF FF    
   6811 00DB88 FF FF FF FF FF FF FF FF    
   6811 00DB90 FF FF FF FF FF FF FF FF    
   6811 00DB98 FF FF FF FF FF FF FF FF    
   6811 00DBA0 FF FF FF FF FF FF FF FF    
   6811 00DBA8 FF FF FF FF FF FF FF FF    
   6811 00DBB0 FF FF FF FF FF FF FF FF    
   6811 00DBB8 FF FF FF FF FF FF FF FF    
   6811 00DBC0 FF FF FF FF FF FF FF FF    
   6811 00DBC8 FF FF FF FF FF FF FF FF    
   6811 00DBD0 FF FF FF FF FF FF FF FF    
   6811 00DBD8 FF FF FF FF FF FF FF FF    
   6811 00DBE0 FF FF FF FF FF FF FF FF    
   6811 00DBE8 FF FF FF FF FF FF FF FF    
   6811 00DBF0 FF FF FF FF FF FF FF FF    
   6811 00DBF8 FF FF FF FF FF FF FF FF    
   6811 00DC00 FF FF FF FF FF FF FF FF    
   6811 00DC08 FF FF FF FF FF FF FF FF    
   6811 00DC10 FF FF FF FF FF FF FF FF    
   6811 00DC18 FF FF FF FF FF FF FF FF    
   6811 00DC20 FF FF FF FF FF FF FF FF    
   6811 00DC28 FF FF FF FF FF FF FF FF    
   6811 00DC30 FF FF FF FF FF FF FF FF    
   6811 00DC38 FF FF FF FF FF FF FF FF    
   6811 00DC40 FF FF FF FF FF FF FF FF    
   6811 00DC48 FF FF FF FF FF FF FF FF    
   6811 00DC50 FF FF FF FF FF FF FF FF    
   6811 00DC58 FF FF FF FF FF FF FF FF    
   6811 00DC60 FF FF FF FF FF FF FF FF    
   6811 00DC68 FF FF FF FF FF FF FF FF    
   6811 00DC70 FF FF FF FF FF FF FF FF    
   6811 00DC78 FF FF FF FF FF FF FF FF    
   6811 00DC80 FF FF FF FF FF FF FF FF    
   6811 00DC88 FF FF FF FF FF FF FF FF    
   6811 00DC90 FF FF FF FF FF FF FF FF    
   6811 00DC98 FF FF FF FF FF FF FF FF    
   6811 00DCA0 FF FF FF FF FF FF FF FF    
   6811 00DCA8 FF FF FF FF FF FF FF FF    
   6811 00DCB0 FF FF FF FF FF FF FF FF    
   6811 00DCB8 FF FF FF FF FF FF FF FF    
   6811 00DCC0 FF FF FF FF FF FF FF FF    
   6811 00DCC8 FF FF FF FF FF FF FF FF    
   6811 00DCD0 FF FF FF FF FF FF FF FF    
   6811 00DCD8 FF FF FF FF FF FF FF FF    
   6811 00DCE0 FF FF FF FF FF FF FF FF    
   6811 00DCE8 FF FF FF FF FF FF FF FF    
   6811 00DCF0 FF FF FF FF FF FF FF FF    
   6811 00DCF8 FF FF FF FF FF FF FF FF    
   6811 00DD00 FF FF FF FF FF FF FF FF    
   6811 00DD08 FF FF FF FF FF FF FF FF    
   6811 00DD10 FF FF FF FF FF FF FF FF    
   6811 00DD18 FF FF FF FF FF FF FF FF    
   6811 00DD20 FF FF FF FF FF FF FF FF    
   6811 00DD28 FF FF FF FF FF FF FF FF    
   6811 00DD30 FF FF FF FF FF FF FF FF    
   6811 00DD38 FF FF FF FF FF FF FF FF    
   6811 00DD40 FF FF FF FF FF FF FF FF    
   6811 00DD48 FF FF FF FF FF FF FF FF    
   6811 00DD50 FF FF FF FF FF FF FF FF    
   6811 00DD58 FF FF FF FF FF FF FF FF    
   6811 00DD60 FF FF FF FF FF FF FF FF    
   6811 00DD68 FF FF FF FF FF FF FF FF    
   6811 00DD70 FF FF FF FF FF FF FF FF    
   6811 00DD78 FF FF FF FF FF FF FF FF    
   6811 00DD80 FF FF FF FF FF FF FF FF    
   6811 00DD88 FF FF FF FF FF FF FF FF    
   6811 00DD90 FF FF FF FF FF FF FF FF    
   6811 00DD98 FF FF FF FF FF FF FF FF    
   6811 00DDA0 FF FF FF FF FF FF FF FF    
   6811 00DDA8 FF FF FF FF FF FF FF FF    
   6811 00DDB0 FF FF FF FF FF FF FF FF    
   6811 00DDB8 FF FF FF FF FF FF FF FF    
   6811 00DDC0 FF FF FF FF FF FF FF FF    
   6811 00DDC8 FF FF FF FF FF FF FF FF    
   6811 00DDD0 FF FF FF FF FF FF FF FF    
   6811 00DDD8 FF FF FF FF FF FF FF FF    
   6811 00DDE0 FF FF FF FF FF FF FF FF    
   6811 00DDE8 FF FF FF FF FF FF FF FF    
   6811 00DDF0 FF FF FF FF FF FF FF FF    
   6811 00DDF8 FF FF FF FF FF FF FF FF    
   6811 00DE00 FF FF FF FF FF FF FF FF    
   6811 00DE08 FF FF FF FF FF FF FF FF    
   6811 00DE10 FF FF FF FF FF FF FF FF    
   6811 00DE18 FF FF FF FF FF FF FF FF    
   6811 00DE20 FF FF FF FF FF FF FF FF    
   6811 00DE28 FF FF FF FF FF FF FF FF    
   6811 00DE30 FF FF FF FF FF FF FF FF    
   6811 00DE38 FF FF FF FF FF FF FF FF    
   6811 00DE40 FF FF FF FF FF FF FF FF    
   6811 00DE48 FF FF FF FF FF FF FF FF    
   6811 00DE50 FF FF FF FF FF FF FF FF    
   6811 00DE58 FF FF FF FF FF FF FF FF    
   6811 00DE60 FF FF FF FF FF FF FF FF    
   6811 00DE68 FF FF FF FF FF FF FF FF    
   6811 00DE70 FF FF FF FF FF FF FF FF    
   6811 00DE78 FF FF FF FF FF FF FF FF    
   6811 00DE80 FF FF FF FF FF FF FF FF    
   6811 00DE88 FF FF FF FF FF FF FF FF    
   6811 00DE90 FF FF FF FF FF FF FF FF    
   6811 00DE98 FF FF FF FF FF FF FF FF    
   6811 00DEA0 FF FF FF FF FF FF FF FF    
   6811 00DEA8 FF FF FF FF FF FF FF FF    
   6811 00DEB0 FF FF FF FF FF FF FF FF    
   6811 00DEB8 FF FF FF FF FF FF FF FF    
   6811 00DEC0 FF FF FF FF FF FF FF FF    
   6811 00DEC8 FF FF FF FF FF FF FF FF    
   6811 00DED0 FF FF FF FF FF FF FF FF    
   6811 00DED8 FF FF FF FF FF FF FF FF    
   6811 00DEE0 FF FF FF FF FF FF FF FF    
   6811 00DEE8 FF FF FF FF FF FF FF FF    
   6811 00DEF0 FF FF FF FF FF FF FF FF    
   6811 00DEF8 FF FF FF FF FF FF FF FF    
   6811 00DF00 FF FF FF FF FF FF FF FF    
   6811 00DF08 FF FF FF FF FF FF FF FF    
   6811 00DF10 FF FF FF FF FF FF FF FF    
   6811 00DF18 FF FF FF FF FF FF FF FF    
   6811 00DF20 FF FF FF FF FF FF FF FF    
   6811 00DF28 FF FF FF FF FF FF FF FF    
   6811 00DF30 FF FF FF FF FF FF FF FF    
   6811 00DF38 FF FF FF FF FF FF FF FF    
   6811 00DF40 FF FF FF FF FF FF FF FF    
   6811 00DF48 FF FF FF FF FF FF FF FF    
   6811 00DF50 FF FF FF FF FF FF FF FF    
   6811 00DF58 FF FF FF FF FF FF FF FF    
   6811 00DF60 FF FF FF FF FF FF FF FF    
   6811 00DF68 FF FF FF FF FF FF FF FF    
   6811 00DF70 FF FF FF FF FF FF FF FF    
   6811 00DF78 FF FF FF FF FF FF FF FF    
   6811 00DF80 FF FF FF FF FF FF FF FF    
   6811 00DF88 FF FF FF FF FF FF FF FF    
   6811 00DF90 FF FF FF FF FF FF FF FF    
   6811 00DF98 FF FF FF FF FF FF FF FF    
   6811 00DFA0 FF FF FF FF FF FF FF FF    
   6811 00DFA8 FF FF FF FF FF FF FF FF    
   6811 00DFB0 FF FF FF FF FF FF FF FF    
   6811 00DFB8 FF FF FF FF FF FF FF FF    
   6811 00DFC0 FF FF FF FF FF FF FF FF    
   6811 00DFC8 FF FF FF FF FF FF FF FF    
   6811 00DFD0 FF FF FF FF FF FF FF FF    
   6811 00DFD8 FF FF FF FF FF FF FF FF    
   6811 00DFE0 FF FF FF FF FF FF FF FF    
   6811 00DFE8 FF FF FF FF FF FF FF FF    
   6811 00DFF0 FF FF FF FF FF FF FF FF    
   6811 00DFF8 FF FF FF FF FF FF FF FF    
                                         
                                           
   6813 00E000                             start:
   6814 00E000 78                           	SEI
   6815 00E001 D8                           	CLD
                                           ;	CLV					; overflow low
                                           ;	SEC					; carry high
                                           ;	XCE					; sets 32 bit mode, 32 bit registers
                                           ;	REP		#$30		; 32 bit registers
                                           ;	MEM		32
                                           ;	NDX		32
                                           ;	LDA		#$3FFF
                                           ;	TAS
                                           ;
   6825 00E002 18                           	CLC					; switch to '816 mode
   6826 00E003 2C 00 E0                     	BIT		start		; set overflow bit
   6827 00E006 FB                           	XCE
   6828 00E007 C2 30                        	REP		#$30		; set 16 bit regs & mem
                                           	NDX 	16
                                           	MEM		16
                                           
                                           	; Setup all the segment descriptors
                                           	; This must be done before the stack can be accessed, and
                                           	; before subroutine calls and task switching can be made.
                                           
                                           	; First setup segment #0, the segment the core starts running under.
                                           	; It's setup for flat addressing.
   6838 00E009 A9 00 00                     	LDA		#0
   6839 00E00C 42 EB                        	XBAW
   6840 00E00E A9 00 00                     	LDA		#0
   6841 00E011 A2 8D 09                     	LDX		#$98D		; present, writeable, executable, max size.
   6842 00E014 A8                           	TAY
   6843 00E015 42 BA                        	SDU
   6844 00E017 C8                           	INY
                                           
                                           	; Flag remaining segments as not present 
   6847 00E018 A2 00 00                     	LDX		#$000		; not present, non-executable, non-writeable, min size
   6848 00E01B                             .0003:
   6849 00E01B 42 BA                        	SDU					; update segment descriptor
   6850 00E01D C8                           	INY
   6851 00E01E C0 00 10                     	CPY		#4096
   6852 00E021 D0 F8                        	BNE		.0003
                                           
                                           	; setup code segment #1
   6855 00E023 A2 04 09                     	LDX		#$904		; executable, 64k
   6856 00E026 A8                           	TAY
   6857 00E027 C8                           	INY
   6858 00E028 42 BA                        	SDU
                                           	; setup data segment #2
   6860 00E02A A2 8A 08                     	LDX		#$88A		; writeable, 256M
   6861 00E02D C8                           	INY
   6862 00E02E 42 BA                        	SDU
                                           	; setup stack segment #3 (for 65c02 mode)
   6864 00E030 A2 81 08                     	LDX		#$881		; writeable, 1k (based at zero)
   6865 00E033 C8                           	INY
   6866 00E034 42 BA                        	SDU
                                           	; setup stack segment #4 (for 65c816 mode)
   6868 00E036 A2 84 08                     	LDX		#$884		; writeable, 64k (based at zero)
   6869 00E039 C8                           	INY
   6870 00E03A 42 BA                        	SDU
                                           	; seg #5 is the maxed out segment
   6872 00E03C A2 8D 09                     	LDX		#$98D		; executable, writable, max size
   6873 00E03F C8                           	INY
   6874 00E040 42 BA                        	SDU
                                           	; now set the code segment (test far jump)
   6876 00E042 42 5C 49 E0 00 01 00         	JMF		1:.0004
   6877 00E049                             .0004:
                                           	; set the stack segment
                                           	; (must be before PEA/PLDS)
   6880 00E049 A9 04 00                     	LDA		#4
   6881 00E04C 42 5A                        	TASS
   6882 00E04E A9 FF 3F                     	LDA		#$3FFF		; set top of stack
   6883 00E051 1B                           	TAS
                                           
                                           	; setup the programmable address decodes
   6886 00E052 A9 70 00                     	LDA		#$0070		; program chip selects for I/O
   6887 00E055 8D 00 B0                     	STA		PCS0		; at $007000
   6888 00E058 A9 71 00                     	LDA		#$0071
   6889 00E05B 8D 02 B0                     	STA		PCS1
                                           ;	LDA		#$FEA1		; select $FEA1xx I/O
                                           ;	STA		PCS3
   6892 00E05E A9 00 00                     	LDA		#$0000		; select zero page ram
   6893 00E061 8D 0A B0                     	STA		PCS5
                                           
                                           	; set the data segment
                                           	; this must be setup after address decoding is setup
   6897 00E064 F4 02 00                     	PEA		2
   6898 00E067 42 2B                        	PLDS
                                           
                                           	; Setup the counters
   6901 00E069 E2 30                        	SEP		#$30		; set 8 bit regs
                                           	NDX		8			; tell the assembler
                                           	MEM		8
                                           	; Counter #0 is setup as a free running tick count
   6905 00E06B A9 FF                        	LDA		#$FF		; set limit to $FFFFFF
   6906 00E06D 8D 10 B0                     	STA		CTR0_LMT
   6907 00E070 8D 11 B0                     	STA		CTR0_LMT+1
   6908 00E073 8D 12 B0                     	STA		CTR0_LMT+2
   6909 00E076 A9 14                        	LDA		#$14		; count up, on mpu clock
   6910 00E078 8D 13 B0                     	STA		CTR0_CTRL
                                           	; Counter #1 is set to interrupt at a 100Hz rate
   6912 00E07B A9 94                        	LDA		#$94		; divide by 95794 (for 100Hz)
   6913 00E07D 8D 14 B0                     	STA		CTR1_LMT
   6914 00E080 A9 57                        	LDA		#$57
   6915 00E082 8D 15 B0                     	STA		CTR1_LMT+1
   6916 00E085 A9 09                        	LDA		#$09
   6917 00E087 8D 16 B0                     	STA		CTR1_LMT+2
   6918 00E08A A9 05                        	LDA		#$05		; count down, on mpu clock, irq disenabled
   6919 00E08C 8D 17 B0                     	STA		CTR1_CTRL
                                           	; Counter #2 isn't setup
                                           
   6922 00E08F C2 30                        	REP		#$30		; set 16 bit regs & mem
                                           	NDX 	16
                                           	MEM		16
                                           
                                           ;	FORK	#7			; fork a BIOS context
                                           ;	TTA
                                           ;	CMP		#7
                                           ;	BNE		.0002
                                           ;	RTT
                                           ;.0002:
                                           	; Setup the task registers
   6933 00E091 A0 06 00                     	LDY		#6			; # tasks to setup
   6934 00E094 A2 01 00                     	LDX		#1
   6935 00E097                             .0001:
   6936 00E097 42 4C F4 F0 00 00            	LDT		TaskStartTbl,X
   6937 00E09D E8                           	INX
   6938 00E09E 88                           	DEY
   6939 00E09F D0 F6                        	BNE		.0001
                                           
   6941 00E0A1 64 B8                        	STZ		running_task
                                           
   6943 00E0A3 A9 89 F0                     	LDA		#BrkRout1
   6944 00E0A6 8D 02 01                     	STA		$0102
                                           
   6946 00E0A9 64 04                        	STZ		TickCount
   6947 00E0AB 64 06                        	STZ		TickCount+2
   6948 00E0AD                             Task0:
                                           ;	CLI
   6950 00E0AD                             .0001:
   6951 00E0AD A9 BC E6                     	LDA		#DisplayChar
   6952 00E0B0 8D F0 03                     	STA		OutputVec
   6953 00E0B3 AD F0 03                     	LDA		OutputVec
   6954 00E0B6 C9 BC E6                     	CMP		#DisplayChar
   6955 00E0B9 D0 F2                        	BNE		.0001
   6956 00E0BB A9 01 00                     	LDA		#$01
   6957 00E0BE 8D 00 70                     	STA		$7000
   6958 00E0C1 A9 00 BF                     	LDA		#$BF00
   6959 00E0C4 85 36                        	STA		NormAttr
   6960 00E0C6 20 EB E8                     	JSR		ClearScreen
   6961 00E0C9 20 77 E8                     	JSR		HomeCursor
   6962 00E0CC A9 02 00                     	LDA		#$02
   6963 00E0CF 8D 00 70                     	STA		$7000
   6964 00E0D2 F4 F7 E5                     	PEA		msgStarting
   6965 00E0D5 20 AA E8                     	JSR		DisplayString
   6966 00E0D8 A9 00 00                     	LDA		#0
   6967 00E0DB 8F 00 A2 FE                  	STA		FAC1
   6968 00E0DF 8F 02 A2 FE                  	STA		FAC1+2
   6969 00E0E3 8F 04 A2 FE                  	STA		FAC1+4
   6970 00E0E7 8F 06 A2 FE                  	STA		FAC1+6
   6971 00E0EB 8F 08 A2 FE                  	STA		FAC1+8
   6972 00E0EF 8F 0A A2 FE                  	STA		FAC1+10
   6973 00E0F3 A9 D2 04                     	LDA		#1234
   6974 00E0F6 8F 00 A2 FE                  	STA		FAC1
   6975 00E0FA A9 05 00                     	LDA		#5			; FIX2FLT
   6976 00E0FD 20 13 D3                     	JSR 	FPCommandWait
   6977 00E100 20 00 D3                     	JSR		DivideByTen
   6978 00E103 20 DA D0                     	JSR		FAC1ToString
   6979 00E106 F4 A0 03                     	PEA		$3A0
   6980 00E109 20 AA E8                     	JSR		DisplayString
   6981 00E10C A9 20 00                     	LDA		#' '
   6982 00E10F 20 9B E8                     	JSR		OutChar
   6983 00E112 20 23 D3                     	JSR		DispFAC1
   6984 00E115 78                           	SEI
   6985 00E116 42 A0 07 00                  	FORK	#7			; fork a BIOS context
   6986 00E11A 42 1A                        	TTA
   6987 00E11C C9 07 00                     	CMP		#7
   6988 00E11F D0 06                        	BNE		.0002
   6989 00E121 A2 FF 23                     	LDX		#$23FF
   6990 00E124 9A                           	TXS
   6991 00E125 42 60                        	RTT
   6992 00E127                             .0002:
   6993 00E127 42 A0 0B 00                  	FORK	#11
   6994 00E12B 42 1A                        	TTA
   6995 00E12D C9 0B 00                     	CMP		#11
   6996 00E130 F0 FF 03 09                  	LBEQ	KeybdInit
                                           ;	CLI
                                           
   6999 00E134                             Mon1:
   7000 00E134                             .mon1:
   7001 00E134 20 92 E8                     	JSR		OutCRLF
   7002 00E137 A9 24 00                     	LDA		#'$'
   7003 00E13A                             .mon3:
   7004 00E13A 20 9B E8                     	JSR		OutChar
   7005 00E13D 20 6F EB                     	JSR		KeybdGetCharWait
   7006 00E140 29 FF 00                     	AND		#$FF
                                           ;	CMP		#'.'
                                           ;	BEQ		.mon3
   7009 00E143 C9 0D 00                     	CMP		#CR
   7010 00E146 D0 F2                        	BNE		.mon3
   7011 00E148 A5 32                        	LDA		CursorY
   7012 00E14A 0A                           	ASL
   7013 00E14B AA                           	TAX
   7014 00E14C BD B6 F0                     	LDA		LineTbl,X
   7015 00E14F 0A                           	ASL
   7016 00E150 AA                           	TAX
   7017 00E151                             .mon4:
   7018 00E151 20 9B E5                     	JSR		IgnoreBlanks
   7019 00E154 20 B8 E1                     	JSR		MonGetch
   7020 00E157 C9 24 00                     	CMP		#'$'
   7021 00E15A F0 F5                        	BEQ		.mon4
   7022 00E15C C9 53 00                     	CMP		#'S'
   7023 00E15F D0 03                        	BNE		.mon2
   7024 00E161 4C 00 C0                     	JMP		$C000		; invoke Supermon816
   7025 00E164                             .mon2:
   7026 00E164 C9 43 00                     	CMP		#'C'
   7027 00E167 D0 08                        	BNE		.mon5
   7028 00E169 20 EB E8                     	JSR		ClearScreen
   7029 00E16C 20 77 E8                     	JSR		HomeCursor
   7030 00E16F 80 C3                        	BRA		.mon1
   7031 00E171                             .mon5:
   7032 00E171 C9 4D 00                     	CMP		#'M'
   7033 00E174 D0 05                        	BNE		.mon6
   7034 00E176 20 18 E4                     	JSR		doMemoryDump
   7035 00E179 80 B9                        	BRA		Mon1
   7036 00E17B                             .mon6:
   7037 00E17B C9 44 00                     	CMP		#'D'
   7038 00E17E F0 FF 99 03                  	LBEQ	doDisassemble
   7039 00E182 C9 3E 00                     	CMP		#'>'
   7040 00E185 F0 FF 01 03                  	LBEQ	doMemoryEdit
   7041 00E189 C9 46 00                     	CMP		#'F'
   7042 00E18C F0 FF 35 03                  	LBEQ	doFill
   7043 00E190 C9 4A 00                     	CMP		#'J'
   7044 00E193 F0 FF D4 03                  	LBEQ	doJump
   7045 00E197 C9 54 00                     	CMP		#'T'
   7046 00E19A F0 FF 30 00                  	LBEQ	doTask2
   7047 00E19E C9 49 00                     	CMP		#'I'
   7048 00E1A1 F0 FF 30 00                  	LBEQ	doInvaders
   7049 00E1A5 C9 52 00                     	CMP		#'R'
   7050 00E1A8 F0 FF 36 00                  	LBEQ	doRegs
   7051 00E1AC 82 85 FF                     	BRL		Mon1
                                           
                                           ; Get a character from the screen, skipping over spaces and tabs
                                           ;
   7055 00E1AF                             MonGetNonSpace:
   7056 00E1AF                             .0001:
   7057 00E1AF 20 B8 E1                     	JSR		MonGetch
   7058 00E1B2 C9 20 00                     	CMP		#' '
   7059 00E1B5 F0 F8                        	BEQ		.0001
   7060 00E1B7 60                           	RTS
                                           
                                           ; Get a character from the screen.
                                           ;
   7064 00E1B8                             MonGetch:
   7065 00E1B8 BF 00 00 FD                  	LDA		VIDBUF,X
   7066 00E1BC E8                           	INX
   7067 00E1BD E8                           	INX
   7068 00E1BE 29 FF 00                     	AND		#$FF
   7069 00E1C1 20 B0 E6                     	JSR		ScreenToAscii
   7070 00E1C4 60                           	RTS
                                           
   7072 00E1C5                             MonErr:
   7073 00E1C5 F4 4B F2                     	PEA		msgErr
   7074 00E1C8 20 AA E8                     	JSR		DisplayString
   7075 00E1CB 82 66 FF                     	BRL		Mon1
                                           
                                           ;------------------------------------------------------------------------------
                                           ;------------------------------------------------------------------------------
   7079 00E1CE                             doTask2:
   7080 00E1CE 42 A2 02 00                  	TSK		#2
   7081 00E1D2 82 5F FF                     	BRL		Mon1
                                           
   7083 00E1D5                             doInvaders:
   7084 00E1D5 A9 FF FF                     	LDA		#$FFFF
   7085 00E1D8 8D 68 78                     	STA		do_invaders
   7086 00E1DB 42 A2 05 00                  	TSK		#5
                                           ;	FORK	#5
                                           ;	TTA
                                           ;	CMP		#5
                                           ;	LBEQ	InvadersTask
   7091 00E1DF 82 52 FF                     	BRL		Mon1
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Display Registers
                                           ; R<xx>		xx = context register to display
                                           ; Update Registers
                                           ; R.<reg> <val>
                                           ;	reg = CS PB PC A X Y SP SR DS DB or DP
                                           ;------------------------------------------------------------------------------
                                           
   7101 00E1E2                             doRegs:
   7102 00E1E2 20 B8 E1                     	JSR		MonGetch
   7103 00E1E5 C9 2E 00                     	CMP		#'.'
   7104 00E1E8 D0 FF 13 01                  	LBNE	.0004
   7105 00E1EC 20 B8 E1                     	JSR		MonGetch
   7106 00E1EF C9 43 00                     	CMP		#'C'
   7107 00E1F2 D0 26                        	BNE		.0005
   7108 00E1F4 20 B8 E1                     	JSR		MonGetch
   7109 00E1F7 C9 53 00                     	CMP		#'S'
   7110 00E1FA D0 FF 36 FF                  	LBNE	Mon1
   7111 00E1FE 20 9B E5                     	JSR		IgnoreBlanks
   7112 00E201 20 94 E9                     	JSR		GetHexNumber
   7113 00E204 A5 0C                        	LDA		NumWorkArea
   7114 00E206 85 80                        	STA		reg_cs
   7115 00E208 A5 0E                        	LDA		NumWorkArea+2
   7116 00E20A 85 82                        	STA		reg_cs+2
   7117 00E20C                             .buildrec
   7118 00E20C 20 B3 E3                     	JSR		BuildRec
   7119 00E20F A6 BE                        	LDX		WorkTR
   7120 00E211 42 6C 00 01 00 00            	LDT		ldtrec
   7121 00E217 82 1A FF                     	BRL		Mon1
   7122 00E21A                             .0005:
   7123 00E21A C9 50 00                     	CMP		#'P'
   7124 00E21D D0 27                        	BNE		.0006
   7125 00E21F 20 B8 E1                     	JSR		MonGetch
   7126 00E222 C9 42 00                     	CMP		#'B'
   7127 00E225 D0 0C                        	BNE		.0007
   7128 00E227 20 9B E5                     	JSR		IgnoreBlanks
   7129 00E22A 20 94 E9                     	JSR		GetHexNumber
   7130 00E22D A5 0E                        	LDA		NumWorkArea+2
   7131 00E22F 85 8E                        	STA		reg_pc+2
   7132 00E231 80 D9                        	BRA		.buildrec
   7133 00E233                             .0007:
   7134 00E233 C9 43 00                     	CMP		#'C'
   7135 00E236 D0 FF FA FE                  	LBNE	Mon1
   7136 00E23A 20 9B E5                     	JSR		IgnoreBlanks
   7137 00E23D 20 94 E9                     	JSR		GetHexNumber
   7138 00E240 A5 0C                        	LDA		NumWorkArea
   7139 00E242 85 8C                        	STA		reg_pc
   7140 00E244 80 C6                        	BRA		.buildrec
   7141 00E246                             .0006:
   7142 00E246 C9 41 00                     	CMP		#'A'
   7143 00E249 D0 10                        	BNE		.0008
   7144 00E24B 20 9B E5                     	JSR		IgnoreBlanks
   7145 00E24E 20 94 E9                     	JSR		GetHexNumber
   7146 00E251 A5 0C                        	LDA		NumWorkArea
   7147 00E253 85 90                        	STA		reg_a
   7148 00E255 A5 0E                        	LDA		NumWorkArea+2
   7149 00E257 85 92                        	STA		reg_a+2
   7150 00E259 80 B1                        	BRA		.buildrec
   7151 00E25B                             .0008:
   7152 00E25B C9 58 00                     	CMP		#'X'
   7153 00E25E D0 11                        	BNE		.0009
   7154 00E260 20 9B E5                     	JSR		IgnoreBlanks
   7155 00E263 20 94 E9                     	JSR		GetHexNumber
   7156 00E266 A5 0C                        	LDA		NumWorkArea
   7157 00E268 85 94                        	STA		reg_x
   7158 00E26A A5 0E                        	LDA		NumWorkArea+2
   7159 00E26C 85 96                        	STA		reg_x+2
   7160 00E26E 82 9B FF                     	BRL		.buildrec
   7161 00E271                             .0009:
   7162 00E271 C9 59 00                     	CMP		#'Y'
   7163 00E274 D0 11                        	BNE		.0010
   7164 00E276 20 9B E5                     	JSR		IgnoreBlanks
   7165 00E279 20 94 E9                     	JSR		GetHexNumber
   7166 00E27C A5 0C                        	LDA		NumWorkArea
   7167 00E27E 85 98                        	STA		reg_y
   7168 00E280 A5 0E                        	LDA		NumWorkArea+2
   7169 00E282 85 9A                        	STA		reg_y+2
   7170 00E284 82 85 FF                     	BRL		.buildrec
   7171 00E287                             .0010:
   7172 00E287 C9 53 00                     	CMP		#'S'
   7173 00E28A D0 2D                        	BNE		.0011
   7174 00E28C 20 B8 E1                     	JSR		MonGetch
   7175 00E28F C9 50 00                     	CMP		#'P'
   7176 00E292 D0 11                        	BNE		.0015
   7177 00E294 20 9B E5                     	JSR		IgnoreBlanks
   7178 00E297 20 94 E9                     	JSR		GetHexNumber
   7179 00E29A A5 0C                        	LDA		NumWorkArea
   7180 00E29C 85 9C                        	STA		reg_sp
   7181 00E29E A5 0E                        	LDA		NumWorkArea+2
   7182 00E2A0 85 9E                        	STA		reg_sp+2
   7183 00E2A2 82 67 FF                     	BRL		.buildrec
   7184 00E2A5                             .0015:
   7185 00E2A5 C9 52 00                     	CMP		#'R'
   7186 00E2A8 D0 FF 88 FE                  	LBNE	Mon1
   7187 00E2AC 20 9B E5                     	JSR		IgnoreBlanks
   7188 00E2AF 20 94 E9                     	JSR		GetHexNumber
   7189 00E2B2 A5 0C                        	LDA		NumWorkArea
   7190 00E2B4 85 A0                        	STA		reg_sr
   7191 00E2B6 82 53 FF                     	BRL		.buildrec
   7192 00E2B9                             .0011:
   7193 00E2B9 C9 44 00                     	CMP		#'D'
   7194 00E2BC D0 FF 74 FE                  	LBNE	Mon1
   7195 00E2C0 20 B8 E1                     	JSR		MonGetch
   7196 00E2C3 C9 53 00                     	CMP		#'S'
   7197 00E2C6 D0 11                        	BNE		.0012
   7198 00E2C8 20 9B E5                     	JSR		IgnoreBlanks
   7199 00E2CB 20 94 E9                     	JSR		GetHexNumber
   7200 00E2CE A5 0C                        	LDA		NumWorkArea
   7201 00E2D0 85 84                        	STA		reg_ds
   7202 00E2D2 A5 0E                        	LDA		NumWorkArea+2
   7203 00E2D4 85 86                        	STA		reg_ds+2
   7204 00E2D6 82 33 FF                     	BRL		.buildrec
   7205 00E2D9                             .0012:
   7206 00E2D9 C9 42 00                     	CMP		#'B'
   7207 00E2DC D0 0D                        	BNE		.0013
   7208 00E2DE 20 9B E5                     	JSR		IgnoreBlanks
   7209 00E2E1 20 94 E9                     	JSR		GetHexNumber
   7210 00E2E4 A5 0C                        	LDA		NumWorkArea
   7211 00E2E6 85 A4                        	STA		reg_db
   7212 00E2E8 82 21 FF                     	BRL		.buildrec
   7213 00E2EB                             .0013:
   7214 00E2EB C9 50 00                     	CMP		#'P'
   7215 00E2EE D0 FF 42 FE                  	LBNE	Mon1
   7216 00E2F2 20 9B E5                     	JSR		IgnoreBlanks
   7217 00E2F5 20 94 E9                     	JSR		GetHexNumber
   7218 00E2F8 A5 0C                        	LDA		NumWorkArea
   7219 00E2FA 85 A8                        	STA		reg_dp
   7220 00E2FC 82 0D FF                     	BRL		.buildrec
                                           
   7222 00E2FF                             .0004:
   7223 00E2FF CA                           	DEX
   7224 00E300 CA                           	DEX
                                           ;	JSR		IgnoreBlanks
   7226 00E301 20 94 E9                     	JSR		GetHexNumber
   7227 00E304 C0 00 00                     	CPY		#0
   7228 00E307 F0 FF 29 FE                  	LBEQ	Mon1
   7229 00E30B A5 0C                        	LDA		NumWorkArea
   7230 00E30D 85 BE                        	STA		WorkTR
   7231 00E30F 42 28 03 00                  	BSR		DispRegs
   7232 00E313 82 1E FE                     	BRL		Mon1
                                           
   7234 00E316                             DispRegs:
   7235 00E316 F4 D4 F1                     	PEA		msgRegs
   7236 00E319 20 AA E8                     	JSR		DisplayString
   7237 00E31C 20 60 E9                     	JSR		space
                                           
   7239 00E31F A5 BE                        	LDA		WorkTR
   7240 00E321 0A                           	ASL
   7241 00E322 0A                           	ASL
   7242 00E323 0A                           	ASL
   7243 00E324 0A                           	ASL
   7244 00E325 AA                           	TAX
                                           
   7246 00E326 A0 00 00                     	LDY		#0
   7247 00E329                             .0001:
   7248 00E329 42 4A                        	INF
   7249 00E32B E8                           	INX
   7250 00E32C 99 80 00                     	STA		reg_cs,Y
   7251 00E32F 42 EB                        	XBAW
   7252 00E331 99 82 00                     	STA		reg_cs+2,Y
   7253 00E334 42 C8                        	INY4
   7254 00E336 C0 30 00                     	CPY		#48
   7255 00E339 D0 EE                        	BNE		.0001
                                           
                                           	; Display CS
   7258 00E33B A5 80                        	LDA		reg_cs
   7259 00E33D 20 39 E9                     	JSR		DispWord
   7260 00E340 A9 3A 00                     	LDA		#':'
   7261 00E343 20 9B E8                     	JSR		OutChar
                                           
                                           	; Display PB PC
   7264 00E346 A5 8E                        	LDA		reg_pc+2
   7265 00E348 20 3E E9                     	JSR		DispByte
   7266 00E34B A5 8C                        	LDA		reg_pc
   7267 00E34D 20 39 E9                     	JSR		DispWord
   7268 00E350 20 60 E9                     	JSR		space
                                           
                                           	; Display SRX,SR
   7271 00E353 A5 A0                        	LDA		reg_cs+32
   7272 00E355 A2 10 00                     	LDX		#16
   7273 00E358                             .0003:
   7274 00E358 0A                           	ASL
   7275 00E359 48                           	PHA
   7276 00E35A A9 30 00                     	LDA		#'0'
   7277 00E35D 69 00 00                     	ADC		#0
   7278 00E360 20 47 E9                     	JSR		DispNybble
   7279 00E363 68                           	PLA
   7280 00E364 CA                           	DEX
   7281 00E365 D0 F1                        	BNE		.0003
   7282 00E367 20 60 E9                     	JSR		space
                                           
   7284 00E36A A2 10 00                     	LDX		#16
   7285 00E36D                             .0002
                                           	; display Acc,.X,.Y,.SP
   7287 00E36D B5 82                        	LDA		reg_cs+2,X
   7288 00E36F 20 39 E9                     	JSR		DispWord
   7289 00E372 B5 80                        	LDA		reg_cs,X
   7290 00E374 20 39 E9                     	JSR		DispWord
   7291 00E377 20 60 E9                     	JSR		space
   7292 00E37A 42 E8                        	INX4
   7293 00E37C E0 20 00                     	CPX		#32
   7294 00E37F D0 EC                        	BNE		.0002
                                           
   7296 00E381 F4 30 F2                     	PEA		msgRegs2
   7297 00E384 20 AA E8                     	JSR		DisplayString
   7298 00E387 20 60 E9                     	JSR		space
                                           
                                           	; Display SS
   7301 00E38A A5 88                        	LDA		reg_ss
   7302 00E38C 20 39 E9                     	JSR		DispWord
   7303 00E38F 20 60 E9                     	JSR		space
                                           
                                           	; Display DS
   7306 00E392 A5 84                        	LDA		reg_ds
   7307 00E394 20 39 E9                     	JSR		DispWord
   7308 00E397 20 60 E9                     	JSR		space
                                           
                                           	; Display DB
   7311 00E39A A5 A4                        	LDA		reg_db
   7312 00E39C 20 3E E9                     	JSR		DispByte
   7313 00E39F 20 60 E9                     	JSR		space
                                           
                                           	; Display DPR
   7316 00E3A2 A5 A8                        	LDA		reg_dp
   7317 00E3A4 20 39 E9                     	JSR		DispWord
   7318 00E3A7 20 60 E9                     	JSR		space
                                           
                                           	; Display back link
   7321 00E3AA A5 AC                        	LDA		reg_bl
   7322 00E3AC 20 39 E9                     	JSR		DispWord
                                           
   7324 00E3AF 20 92 E8                     	JSR		OutCRLF
   7325 00E3B2 60                           	RTS
                                           
                                           ; Build a startup record from the register values so that a context reg
                                           ; may be loaded
                                           
   7330 00E3B3                             BuildRec:
   7331 00E3B3 A5 80                        	LDA		reg_cs
   7332 00E3B5 8D 00 01                     	STA		ldtrec
   7333 00E3B8 A5 84                        	LDA		reg_ds
   7334 00E3BA 8D 02 01                     	STA		ldtrec+2
   7335 00E3BD A5 88                        	LDA		reg_ss
   7336 00E3BF 8D 04 01                     	STA		ldtrec+4
   7337 00E3C2 A5 8C                        	LDA		reg_pc
   7338 00E3C4 8D 06 01                     	STA		ldtrec+6
   7339 00E3C7 A5 8E                        	LDA		reg_pc+2
   7340 00E3C9 29 FF 00                     	AND		#$FF
   7341 00E3CC E2 30                        	SEP		#$30		; 8 bit regs
                                           	MEM		8
   7343 00E3CE EB                           	XBA
   7344 00E3CF A5 90                        	LDA		reg_a
   7345 00E3D1 EB                           	XBA
   7346 00E3D2 C2 30                        	REP		#$30
                                           	MEM		16
   7348 00E3D4 8D 08 01                     	STA		ldtrec+8
   7349 00E3D7 A5 91                        	LDA		reg_a+1
   7350 00E3D9 8D 0A 01                     	STA		ldtrec+10
   7351 00E3DC A5 93                        	LDA		reg_a+3
   7352 00E3DE 8D 0C 01                     	STA		ldtrec+12
   7353 00E3E1 A5 95                        	LDA		reg_x+1
   7354 00E3E3 8D 0E 01                     	STA		ldtrec+14
   7355 00E3E6 A5 97                        	LDA		reg_x+3
   7356 00E3E8 8D 10 01                     	STA		ldtrec+16
   7357 00E3EB A5 99                        	LDA		reg_y+1
   7358 00E3ED 8D 12 01                     	STA		ldtrec+18
   7359 00E3F0 A5 9B                        	LDA		reg_y+3
   7360 00E3F2 8D 14 01                     	STA		ldtrec+20
   7361 00E3F5 A5 9D                        	LDA		reg_sp+1
   7362 00E3F7 8D 16 01                     	STA		ldtrec+22
   7363 00E3FA A5 9F                        	LDA		reg_sp+3
   7364 00E3FC 8D 18 01                     	STA		ldtrec+24
   7365 00E3FF E2 30                        	SEP		#$30
   7366 00E401 A5 A1                        	LDA		reg_sr+1
   7367 00E403 8D 1A 01                     	STA		ldtrec+26
   7368 00E406 A5 A4                        	LDA		reg_db
   7369 00E408 8D 1B 01                     	STA		ldtrec+27
   7370 00E40B A5 A8                        	LDA		reg_dp
   7371 00E40D 8D 1C 01                     	STA		ldtrec+28
   7372 00E410 A5 A9                        	LDA		reg_dp+1
   7373 00E412 8D 1D 01                     	STA		ldtrec+29
   7374 00E415 C2 30                        	REP		#$30
   7375 00E417 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Dump memory.
                                           ;------------------------------------------------------------------------------
                                           
   7381 00E418                             doMemoryDump:
   7382 00E418 20 9B E5                     	JSR		IgnoreBlanks
   7383 00E41B 20 69 E9                     	JSR		GetRange
   7384 00E41E 20 92 E8                     	JSR		OutCRLF
   7385 00E421                             .0007:
   7386 00E421 A9 3E 00                     	LDA		#'>'
   7387 00E424 20 9B E8                     	JSR		OutChar
   7388 00E427 20 8B E5                     	JSR		DispRangeStart
   7389 00E42A A0 00 00                     	LDY		#0
   7390 00E42D                             .0001:
   7391 00E42D 42 B7 20                     	LDA		{RangeStart},Y
   7392 00E430 20 3E E9                     	JSR		DispByte
   7393 00E433 A9 20 00                     	LDA		#' '
   7394 00E436 20 9B E8                     	JSR		OutChar
   7395 00E439 C8                           	INY
   7396 00E43A C0 08 00                     	CPY		#8
   7397 00E43D D0 EE                        	BNE		.0001
   7398 00E43F A0 00 00                     	LDY 	#0
   7399 00E442                             .0005:
   7400 00E442 42 B7 20                     	LDA		{RangeStart},Y
   7401 00E445 29 FF 00                     	AND		#$FF
   7402 00E448 C9 20 00                     	CMP		#' '
   7403 00E44B B0 05                        	BCS		.0002
   7404 00E44D                             .0004:
   7405 00E44D A9 2E 00                     	LDA		#'.'
   7406 00E450 80 05                        	BRA		.0003
   7407 00E452                             .0002:
   7408 00E452 C9 7F 00                     	CMP		#$7f
   7409 00E455 B0 F6                        	BCS		.0004
   7410 00E457                             .0003:
   7411 00E457 20 9B E8                     	JSR		OutChar
   7412 00E45A C8                           	INY
   7413 00E45B C0 08 00                     	CPY		#8
   7414 00E45E D0 E2                        	BNE		.0005
   7415 00E460 20 92 E8                     	JSR		OutCRLF
   7416 00E463 18                           	CLC
   7417 00E464 A5 20                        	LDA		RangeStart
   7418 00E466 69 08 00                     	ADC		#8
   7419 00E469 85 20                        	STA		RangeStart
   7420 00E46B 90 02                        	BCC		.0006
   7421 00E46D E6 22                        	INC		RangeStart+2
   7422 00E46F                             .0006:
   7423 00E46F 38                           	SEC
   7424 00E470 A5 24                        	LDA		RangeEnd
   7425 00E472 E5 20                        	SBC		RangeStart
   7426 00E474 A5 26                        	LDA		RangeEnd+2
   7427 00E476 E5 22                        	SBC		RangeStart+2
   7428 00E478 08                           	PHP
   7429 00E479 20 64 EB                     	JSR		KeybdGetCharNoWait;Ctx,7
   7430 00E47C 29 FF 00                     	AND		#$FF
   7431 00E47F C9 03 00                     	CMP		#CTRLC
   7432 00E482 F0 04                        	BEQ		.0009
   7433 00E484 28                           	PLP
   7434 00E485 10 9A                        	BPL		.0007
   7435 00E487                             .0008:
   7436 00E487 60                           	RTS
   7437 00E488                             .0009:
   7438 00E488 28                           	PLP
   7439 00E489 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Edit memory.
                                           ; ><memory address> <val1> <val2> ... <val8>
                                           ;------------------------------------------------------------------------------
                                           
   7446 00E48A                             doMemoryEdit:
   7447 00E48A 20 9B E5                     	JSR		IgnoreBlanks
   7448 00E48D 20 94 E9                     	JSR		GetHexNumber
   7449 00E490 C0 00 00                     	CPY		#0
   7450 00E493 F0 FF 9D FC                  	LBEQ	Mon1
   7451 00E497 A5 0C                        	LDA		NumWorkArea
   7452 00E499 85 20                        	STA		RangeStart
   7453 00E49B A5 0E                        	LDA		NumWorkArea+2
   7454 00E49D 85 22                        	STA		RangeStart+2
   7455 00E49F A0 00 00                     	LDY		#0
   7456 00E4A2                             .0001:
   7457 00E4A2 5A                           	PHY
   7458 00E4A3 20 9B E5                     	JSR		IgnoreBlanks
   7459 00E4A6 20 94 E9                     	JSR		GetHexNumber
   7460 00E4A9 C0 00 00                     	CPY		#0
   7461 00E4AC F0 13                        	BEQ		.0002
   7462 00E4AE 7A                           	PLY
   7463 00E4AF E2 20                        	SEP		#$20
   7464 00E4B1 A5 0C                        	LDA		NumWorkArea
   7465 00E4B3 42 97 20                     	STA		{RangeStart},Y
   7466 00E4B6 C2 20                        	REP		#$20
   7467 00E4B8 C8                           	INY
   7468 00E4B9 C0 08 00                     	CPY		#8
   7469 00E4BC D0 E4                        	BNE		.0001
   7470 00E4BE 82 73 FC                     	BRL		Mon1
   7471 00E4C1                             .0002:
   7472 00E4C1 7A                           	PLY
   7473 00E4C2 82 6F FC                     	BRL		Mon1
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Fill memory.
                                           ; $F <start address> <end address> <val1>
                                           ;------------------------------------------------------------------------------
                                           
   7480 00E4C5                             doFill:
   7481 00E4C5 20 9B E5                     	JSR		IgnoreBlanks
   7482 00E4C8 20 94 E9                     	JSR		GetHexNumber
   7483 00E4CB C0 00 00                     	CPY		#0
   7484 00E4CE F0 FF F3 FC                  	LBEQ	MonErr
   7485 00E4D2 A5 0C                        	LDA		NumWorkArea
   7486 00E4D4 85 20                        	STA		RangeStart
   7487 00E4D6 A5 0E                        	LDA		NumWorkArea+2
   7488 00E4D8 85 22                        	STA		RangeStart+2
   7489 00E4DA 20 9B E5                     	JSR		IgnoreBlanks
   7490 00E4DD 20 94 E9                     	JSR		GetHexNumber
   7491 00E4E0 C0 00 00                     	CPY		#0
   7492 00E4E3 F0 FF DE FC                  	LBEQ	MonErr
   7493 00E4E7 A5 0C                        	LDA		NumWorkArea
   7494 00E4E9 85 24                        	STA		RangeEnd
   7495 00E4EB A5 0E                        	LDA		NumWorkArea+2
   7496 00E4ED 85 26                        	STA		RangeEnd+2
   7497 00E4EF 20 9B E5                     	JSR		IgnoreBlanks
   7498 00E4F2 20 94 E9                     	JSR		GetHexNumber
   7499 00E4F5 C0 00 00                     	CPY		#0
   7500 00E4F8 F0 FF C9 FC                  	LBEQ	MonErr
   7501 00E4FC A6 0C                        	LDX		NumWorkArea
                                           	; Process in 32 bit mode
   7503 00E4FE 42 E2 00 02                  	SEP		#$200
   7504 00E502 42 C2 00 01                  	REP		#$100
   7505 00E506 A5 24                        	LDA		RangeEnd
   7506 00E508 38                           	SEC
   7507 00E509 E5 20                        	SBC		RangeStart
   7508 00E50B A4 20                        	LDY		RangeStart
   7509 00E50D 42 44 00                     	FIL		$00
                                           	; Back to 16 bits mode
   7511 00E510 42 C2 00 02                  	REP		#$200
   7512 00E514 42 E2 00 01                  	SEP		#$100
   7513 00E518 82 19 FC                     	BRL		Mon1
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Disassemble code
                                           ;------------------------------------------------------------------------------
                                           
   7519 00E51B                             doDisassemble:
   7520 00E51B 20 B8 E1                     	JSR		MonGetch
   7521 00E51E C9 4D 00                     	CMP		#'M'
   7522 00E521 F0 11                        	BEQ		.0002
   7523 00E523                             .0004:
   7524 00E523 C9 4E 00                     	CMP		#'N'
   7525 00E526 D0 1B                        	BNE		.0003
   7526 00E528 E2 20                        	SEP		#$20
                                           	MEM		8
   7528 00E52A A5 BC                        	LDA		$BC
   7529 00E52C 09 40                        	ORA		#$40
   7530 00E52E 85 BC                        	STA		$BC
   7531 00E530 C2 20                        	REP		#$20
   7532 00E532 80 11                        	BRA		.0005
   7533 00E534                             .0002:
   7534 00E534 E2 20                        	SEP		#$20
   7535 00E536 A5 BC                        	LDA		$BC
   7536 00E538 09 80                        	ORA		#$80
   7537 00E53A 85 BC                        	STA		$BC
   7538 00E53C C2 20                        	REP		#$20
   7539 00E53E 20 B8 E1                     	JSR		MonGetch
   7540 00E541 80 E0                        	BRA		.0004
                                           	MEM		16
   7542 00E543                             .0003:
   7543 00E543 CA                           	DEX
   7544 00E544 CA                           	DEX
   7545 00E545                             .0005:
   7546 00E545 20 9B E5                     	JSR		IgnoreBlanks
   7547 00E548 20 69 E9                     	JSR		GetRange
   7548 00E54B A5 20                        	LDA		RangeStart
   7549 00E54D 85 8F                        	STA		$8F				; addra
   7550 00E54F A5 21                        	LDA		RangeStart+1
   7551 00E551 85 90                        	STA		$90
   7552 00E553 20 92 E8                     	JSR		OutCRLF
   7553 00E556 A0 14 00                     	LDY		#20
   7554 00E559                             .0001:
   7555 00E559 5A                           	PHY
   7556 00E55A E2 30                        	SEP		#$30
   7557 00E55C 20 6F C6                     	JSR		dpycod
   7558 00E55F C2 30                        	REP		#$30
   7559 00E561 20 92 E8                     	JSR		OutCRLF
   7560 00E564 7A                           	PLY
   7561 00E565 88                           	DEY
   7562 00E566 D0 F1                        	BNE		.0001
   7563 00E568 4C 34 E1                     	JMP		Mon1
                                           
                                           ;$BC flimflag
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Jump to subroutine
                                           ;------------------------------------------------------------------------------
                                           
   7571 00E56B                             doJump:
   7572 00E56B 20 9B E5                     	JSR		IgnoreBlanks
   7573 00E56E 20 94 E9                     	JSR		GetHexNumber
   7574 00E571 C0 00 00                     	CPY		#0
   7575 00E574 F0 FF BC FB                  	LBEQ	Mon1
   7576 00E578 A9 5C 00                     	LDA		#$5C			; JML opcode
   7577 00E57B 85 23                        	STA		RangeEnd-1
   7578 00E57D A5 0C                        	LDA		NumWorkArea
   7579 00E57F 85 24                        	STA		RangeEnd
   7580 00E581 A5 0D                        	LDA		NumWorkArea+1
   7581 00E583 85 25                        	STA		RangeEnd+1
   7582 00E585 22 24 00                     	JSL		RangeEnd
   7583 00E588 82 A9 FB                     	BRL		Mon1
                                           
   7585 00E58B                             DispRangeStart:
   7586 00E58B A5 21                        	LDA		RangeStart+1
   7587 00E58D 20 39 E9                     	JSR		DispWord
   7588 00E590 A5 20                        	LDA		RangeStart
   7589 00E592 20 3E E9                     	JSR		DispByte
   7590 00E595 A9 20 00                     	LDA		#' '
   7591 00E598 4C 9B E8                     	JMP		OutChar
                                           	
                                           ; Skip over blanks in the input
                                           ;------------------------------------------------------------------------------
                                           
   7596 00E59B                             IgnoreBlanks:
   7597 00E59B                             .0001:
   7598 00E59B 20 B8 E1                     	JSR		MonGetch
   7599 00E59E C9 20 00                     	CMP		#' '
   7600 00E5A1 F0 F8                        	BEQ		.0001
   7601 00E5A3 CA                           	DEX
   7602 00E5A4 CA                           	DEX
   7603 00E5A5 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ; BIOSInput allows full screen editing of text until a carriage return is keyed
                                           ; at which point the line the cursor is on is copied to a buffer. The buffer
                                           ; must be at least TEXTCOLS characters in size.
                                           ;------------------------------------------------------------------------------
                                           ;
   7611 00E5A6                             BIOSInput:
   7612 00E5A6                             .bin1:
   7613 00E5A6 20 6F EB                     	JSR		KeybdGetCharWait
   7614 00E5A9 29 FF 00                     	AND		#$FF
   7615 00E5AC C9 0D 00                     	CMP		#CR
   7616 00E5AF F0 05                        	BEQ		.bin2
   7617 00E5B1 20 9B E8                     	JSR		OutChar
   7618 00E5B4 80 F0                        	BRA		.bin1
   7619 00E5B6                             .bin2:
   7620 00E5B6 A5 30                        	LDA		CursorX
   7621 00E5B8 F0 1A                        	BEQ		.bin4
   7622 00E5BA A5 34                        	LDA		VideoPos	; get current video position
   7623 00E5BC 38                           	SEC
   7624 00E5BD E5 30                        	SBC		CursorX		; go back to the start of the line
   7625 00E5BF 0A                           	ASL
   7626 00E5C0 AA                           	TAX
   7627 00E5C1                             .bin3:
   7628 00E5C1 BF 00 00 FD                  	LDA		VIDBUF,X
   7629 00E5C5 29 FF 00                     	AND		#$FF
   7630 00E5C8 93 03                        	STA		(3,s),Y
   7631 00E5CA E8                           	INX
   7632 00E5CB E8                           	INX
   7633 00E5CC C8                           	INY
   7634 00E5CD C6 30                        	DEC		CursorX
   7635 00E5CF D0 F0                        	BNE		.bin3
   7636 00E5D1 A9 00 00                     	LDA		#0
   7637 00E5D4                             .bin4:
   7638 00E5D4 93 03                        	STA		(3,s),Y	; NULL terminate buffer
   7639 00E5D6 60                           	RTS
                                           
   7641 00E5D7                             .st0003:
   7642 00E5D7 AF 10 A1 FE                  	LDA		KEYBD
   7643 00E5DB 10 FA                        	BPL		.st0003
   7644 00E5DD 48                           	PHA					; save off the char (we need to trash acc)
   7645 00E5DE AF 14 A1 FE                  	LDA		KEYBD+4		; clear keyboard strobe (must be a read operation)
   7646 00E5E2 68                           	PLA					; restore char
   7647 00E5E3 20 BC E6                     	JSR		DisplayChar
   7648 00E5E6 80 EF                        	BRA		.st0003
   7649 00E5E8 A0 00 00                     	ldy		#$0000
   7650 00E5EB                             .st0001:
   7651 00E5EB A2 00 00                     	ldx		#$0000
   7652 00E5EE                             .st0002:
   7653 00E5EE E8                           	inx
   7654 00E5EF D0 FD                        	bne		.st0002
   7655 00E5F1 20 14 E6                     	jsr		echo_switch
   7656 00E5F4 C8                           	iny
   7657 00E5F5 80 F4                        	bra		.st0001
                                           
   7659 00E5F7                             msgStarting:
   7660 00E5F7 46 54 38 33 32 20 54 65      	.byte	"FT832 Test System Starting",CR,LF,0
   7660 00E5FF 73 74 20 53 79 73 74 65    
   7660 00E607 6D 20 53 74 61 72 74 69    
   7660 00E60F 6E 67 0D 0A 00             
                                           
   7662 00E614                             echo_switch:
   7663 00E614 AD 00 71                     	lda		$7100
   7664 00E617 8D 00 70                     	sta		$7000
   7665 00E61A 60                           	rts
                                           
                                           ;------------------------------------------------------------------------------
                                           ; On entry to the SSM task the .A register will be set to the task number
                                           ; being single stepped. The .X register will contain the address of the
                                           ; next instruction to execute.
                                           ;------------------------------------------------------------------------------
                                           
   7673 00E61B                             SSMTask:
   7674 00E61B 85 BE                        	STA		WorkTR
   7675 00E61D 64 30                        	STZ		CursorX
   7676 00E61F A9 18 00                     	LDA		#24
   7677 00E622 85 32                        	STA		CursorY
   7678 00E624 20 7E E8                     	JSR		SyncVideoPos
   7679 00E627 20 16 E3                     	JSR		DispRegs
   7680 00E62A                             .0004:
   7681 00E62A A9 53 00                     	LDA		#'S'
   7682 00E62D 20 9B E8                     	JSR		OutChar
   7683 00E630 A9 53 00                     	LDA		#'S'
   7684 00E633 20 9B E8                     	JSR		OutChar
   7685 00E636 A9 4D 00                     	LDA		#'M'
   7686 00E639 20 9B E8                     	JSR		OutChar
   7687 00E63C A9 3E 00                     	LDA		#'>'
   7688 00E63F                             .0005:
   7689 00E63F 20 9B E8                     	JSR		OutChar
   7690 00E642 20 6F EB                     	JSR		KeybdGetCharWait
   7691 00E645 29 FF 00                     	AND		#$FF
   7692 00E648 C9 53 00                     	CMP		#'S'		; step
   7693 00E64B D0 04                        	BNE		.0001
   7694 00E64D                             .0002:
   7695 00E64D 42 60                        	RTT
   7696 00E64F 80 CA                        	BRA		SSMTask
   7697 00E651                             .0001:
   7698 00E651 C9 58 00                     	CMP		#'X'
   7699 00E654 D0 16                        	BNE		.0006
   7700 00E656 A5 A0                        	LDA		reg_sr
   7701 00E658 29 FF EF                     	AND		#$EFFF
   7702 00E65B 85 A0                        	STA		reg_sr
   7703 00E65D 20 B3 E3                     	JSR		BuildRec
   7704 00E660 A6 BE                        	LDX		WorkTR
   7705 00E662 42 6C 00 01 00 00            	LDT		ldtrec
   7706 00E668 42 60                        	RTT
   7707 00E66A 80 AF                        	BRA		SSMTask
   7708 00E66C                             .0006:
   7709 00E66C C9 0D 00                     	CMP		#CR
   7710 00E66F D0 CE                        	BNE		.0005
   7711 00E671 A5 32                        	LDA		CursorY
   7712 00E673 0A                           	ASL
   7713 00E674 AA                           	TAX
   7714 00E675 BD B6 F0                     	LDA		LineTbl,X
   7715 00E678 18                           	CLC
   7716 00E679 69 04 00                     	ADC		#4
   7717 00E67C 0A                           	ASL
   7718 00E67D AA                           	TAX
   7719 00E67E 20 9B E5                     	JSR		IgnoreBlanks
   7720 00E681 20 B8 E1                     	JSR		MonGetch
   7721 00E684 C9 4D 00                     	CMP		#'M'
   7722 00E687 D0 03                        	BNE		.0007
   7723 00E689 20 18 E4                     	JSR		doMemoryDump
   7724 00E68C                             .0007:
   7725 00E68C 82 B0 FF                     	BRL		.0005
   7726 00E68F 42 60                        	RTT
   7727 00E691 82 87 FF                     	BRL		SSMTask
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Convert Ascii character to screen character.
                                           ;------------------------------------------------------------------------------
                                           
   7733 00E694                             AsciiToScreen:
   7734 00E694 29 FF 00                     	AND		#$FF
   7735 00E697 89 20 00                     	BIT		#%00100000	; if bit 5 isn't set
   7736 00E69A F0 08                        	BEQ		.00001
   7737 00E69C 89 40 00                     	BIT		#%01000000	; or bit 6 isn't set
   7738 00E69F F0 03                        	BEQ		.00001
   7739 00E6A1 29 9F 00                     	AND		#%10011111
   7740 00E6A4                             .00001:
   7741 00E6A4 60                           	rts
                                           
                                           	MEM		8
   7744 00E6A5                             AsciiToScreen8:
   7745 00E6A5 89 20                        	BIT		#%00100000	; if bit 5 isn't set
   7746 00E6A7 F0 06                        	BEQ		.00001
   7747 00E6A9 89 40                        	BIT		#%01000000	; or bit 6 isn't set
   7748 00E6AB F0 02                        	BEQ		.00001
   7749 00E6AD 29 9F                        	AND		#%10011111
   7750 00E6AF                             .00001:
   7751 00E6AF 60                           	rts
                                           
                                           	MEM		16
                                           ;------------------------------------------------------------------------------
                                           ; Convert screen character to ascii character
                                           ;------------------------------------------------------------------------------
                                           ;
   7758 00E6B0                             ScreenToAscii:
   7759 00E6B0 29 FF 00                     	AND		#$FF
   7760 00E6B3 C9 1B 00                     	CMP		#26+1
   7761 00E6B6 B0 03                        	BCS		.0001
   7762 00E6B8 69 60 00                     	ADC		#$60
   7763 00E6BB                             .0001:
   7764 00E6BB 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Display a character on the screen device
                                           ; Expects the processor to be in 16 bit mode with 16 bit acc and 16 bit indexes
                                           ;------------------------------------------------------------------------------
                                           ;
   7771 00E6BC                             DisplayChar:
   7772 00E6BC 29 FF 00                     	AND		#$0FF
   7773 00E6BF 24 3C                        	BIT		EscState
   7774 00E6C1 30 FF 8A 00                  	LBMI	processEsc
   7775 00E6C5 C9 08 00                     	CMP		#BS
   7776 00E6C8 F0 FF 33 01                  	LBEQ	doBackSpace
   7777 00E6CC C9 91 00                     	CMP		#$91			; cursor right
   7778 00E6CF F0 FF 7D 01                  	LBEQ	doCursorRight
   7779 00E6D3 C9 93 00                     	CMP		#$93			; cursor left
   7780 00E6D6 F0 FF 82 01                  	LBEQ	doCursorLeft
   7781 00E6DA C9 90 00                     	CMP		#$90			; cursor up
   7782 00E6DD F0 FF 82 01                  	LBEQ	doCursorUp
   7783 00E6E1 C9 92 00                     	CMP		#$92			; cursor down
   7784 00E6E4 F0 FF 82 01                  	LBEQ	doCursorDown
   7785 00E6E8 C9 99 00                     	CMP		#$99			; delete
   7786 00E6EB F0 FF 37 01                  	LBEQ	doDelete
   7787 00E6EF C9 0D 00                     	CMP		#CR
   7788 00E6F2 F0 47                        	BEQ		doCR
   7789 00E6F4 C9 0A 00                     	CMP		#LF
   7790 00E6F7 F0 47                        	BEQ		doLF
   7791 00E6F9 C9 94 00                     	CMP		#$94
   7792 00E6FC F0 FF 48 01                  	LBEQ	doCursorHome	; cursor home
   7793 00E700 C9 1B 00                     	CMP		#ESC
   7794 00E703 D0 05                        	BNE		.0003
   7795 00E705 64 3C                        	STZ		EscState		; put a -1 in the escape state
   7796 00E707 C6 3C                        	DEC		EscState
   7797 00E709 60                           	RTS
   7798 00E70A                             .0003:
   7799 00E70A 20 94 E6                     	JSR		AsciiToScreen
   7800 00E70D 05 36                        	ORA		NormAttr
   7801 00E70F 48                           	PHA
   7802 00E710 A5 34                        	LDA		VideoPos
   7803 00E712 0A                           	ASL
   7804 00E713 AA                           	TAX
   7805 00E714 68                           	PLA
   7806 00E715 9F 00 00 FD                  	STA		VIDBUF,X
   7807 00E719 A5 30                        	LDA		CursorX
   7808 00E71B 1A                           	INA
   7809 00E71C C9 54 00                     	CMP		#TEXTCOLS
   7810 00E71F D0 15                        	BNE		.0001
   7811 00E721 64 30                        	STZ		CursorX
   7812 00E723 A5 32                        	LDA		CursorY
   7813 00E725 C9 1E 00                     	CMP		#TEXTROWS-1
   7814 00E728 F0 06                        	BEQ		.0002
   7815 00E72A 1A                           	INA
   7816 00E72B 85 32                        	STA		CursorY
   7817 00E72D 82 4E 01                     	BRL		SyncVideoPos
   7818 00E730                             .0002:
   7819 00E730 20 7E E8                     	JSR		SyncVideoPos
   7820 00E733 82 CD 01                     	BRL		ScrollUp
   7821 00E736                             .0001:
   7822 00E736 85 30                        	STA		CursorX
   7823 00E738 82 43 01                     	BRL		SyncVideoPos
   7824 00E73B                             doCR:
   7825 00E73B 64 30                        	STZ		CursorX
   7826 00E73D 82 3E 01                     	BRL		SyncVideoPos
   7827 00E740                             doLF:
   7828 00E740 A5 32                        	LDA		CursorY
   7829 00E742 C9 1E 00                     	CMP		#TEXTROWS-1
   7830 00E745 F0 FF BA 01                  	LBEQ	ScrollUp
   7831 00E749 1A                           	INA
   7832 00E74A 85 32                        	STA		CursorY
   7833 00E74C 82 2F 01                     	BRL		SyncVideoPos
                                           
   7835 00E74F                             processEsc:
   7836 00E74F A6 3C                        	LDX		EscState
   7837 00E751 E0 FF FF                     	CPX		#-1
   7838 00E754 D0 44                        	BNE		.0006
   7839 00E756 C9 54 00                     	CMP		#'T'	; clear to EOL
   7840 00E759 D0 1C                        	BNE		.0003
   7841 00E75B A5 34                        	LDA		VideoPos
   7842 00E75D 0A                           	ASL
   7843 00E75E AA                           	TAX
   7844 00E75F A4 30                        	LDY		CursorX
   7845 00E761                             .0001:
   7846 00E761 C0 53 00                     	CPY		#TEXTCOLS-1
   7847 00E764 F0 0E                        	BEQ		.0002
   7848 00E766 A9 20 00                     	LDA		#' '
   7849 00E769 05 36                        	ORA		NormAttr
   7850 00E76B 9F 00 00 FD                  	STA		VIDBUF,X
   7851 00E76F E8                           	INX
   7852 00E770 E8                           	INX
   7853 00E771 C8                           	INY
   7854 00E772 D0 ED                        	BNE		.0001
   7855 00E774                             .0002:
   7856 00E774 64 3C                        	STZ		EscState
   7857 00E776 60                           	RTS
   7858 00E777                             .0003:
   7859 00E777 C9 57 00                     	CMP		#'W'
   7860 00E77A D0 05                        	BNE		.0004
   7861 00E77C 64 3C                        	STZ		EscState
   7862 00E77E 82 A5 00                     	BRL		doDelete
   7863 00E781                             .0004:
   7864 00E781 C9 60 00                     	CMP		#'`'
   7865 00E784 D0 06                        	BNE		.0005
   7866 00E786 A9 FE FF                     	LDA		#-2
   7867 00E789 85 3C                        	STA		EscState
   7868 00E78B 60                           	RTS
   7869 00E78C                             .0005:
   7870 00E78C C9 28 00                     	CMP		#'('
   7871 00E78F D0 06                        	BNE		.0008
   7872 00E791 A9 FD FF                     	LDA		#-3
   7873 00E794 85 3C                        	STA		EscState
   7874 00E796 60                           	RTS
   7875 00E797                             .0008:
   7876 00E797 64 3C                        	STZ		EscState
   7877 00E799 60                           	RTS
   7878 00E79A                             .0006:
   7879 00E79A E0 FE FF                     	CPX		#-2
   7880 00E79D D0 11                        	BNE		.0007
   7881 00E79F 64 3C                        	STZ		EscState
   7882 00E7A1 C9 31 00                     	CMP		#'1'
   7883 00E7A4 F0 FF 2F 01                  	LBEQ	CursorOn
   7884 00E7A8 C9 30 00                     	CMP		#'0'
   7885 00E7AB F0 FF 32 01                  	LBEQ	CursorOff
   7886 00E7AF 60                           	RTS
   7887 00E7B0                             .0007:
   7888 00E7B0 E0 FD FF                     	CPX		#-3
   7889 00E7B3 D0 0B                        	BNE		.0009
   7890 00E7B5 C9 1B 00                     	CMP		#ESC
   7891 00E7B8 D0 DD                        	BNE		.0008
   7892 00E7BA A9 FC FF                     	LDA		#-4
   7893 00E7BD 85 3C                        	STA		EscState
   7894 00E7BF 60                           	RTS
   7895 00E7C0                             .0009:
   7896 00E7C0 E0 FC FF                     	CPX		#-4
   7897 00E7C3 D0 0B                        	BNE		.0010
   7898 00E7C5 C9 47 00                     	CMP		#'G'
   7899 00E7C8 D0 CD                        	BNE		.0008
   7900 00E7CA A9 FB FF                     	LDA		#-5
   7901 00E7CD 85 3C                        	STA		EscState
   7902 00E7CF 60                           	RTS
   7903 00E7D0                             .0010:
   7904 00E7D0 E0 FB FF                     	CPX		#-5
   7905 00E7D3 D0 C2                        	BNE		.0008
   7906 00E7D5 64 3C                        	STZ		EscState
   7907 00E7D7 C9 34 00                     	CMP		#'4'
   7908 00E7DA D0 12                        	BNE		.0011
   7909 00E7DC A5 36                        	LDA		NormAttr
                                           	; Swap the high nybbles of the attribute
   7911 00E7DE EB                           	XBA				
   7912 00E7DF E2 30                        	SEP		#$30		; set 8 bit regs
                                           	NDX		8			; tell the assembler
                                           	MEM		8
   7915 00E7E1 2A                           	ROL
   7916 00E7E2 2A                           	ROL
   7917 00E7E3 2A                           	ROL
   7918 00E7E4 2A                           	ROL
   7919 00E7E5 C2 30                        	REP		#$30		; set 16 bit regs
                                           	NDX		16			; tell the assembler
                                           	MEM		16
   7922 00E7E7 EB                           	XBA
   7923 00E7E8 29 00 FF                     	AND		#$FF00
   7924 00E7EB 85 36                        	STA		NormAttr
   7925 00E7ED 60                           	RTS
   7926 00E7EE                             .0011:
   7927 00E7EE C9 30 00                     	CMP		#'0'
   7928 00E7F1 D0 06                        	BNE		.0012
   7929 00E7F3 A9 00 BF                     	LDA		#$BF00		; Light Grey on Dark Grey
   7930 00E7F6 85 36                        	STA		NormAttr
   7931 00E7F8 60                           	RTS
   7932 00E7F9                             .0012:
   7933 00E7F9 A9 00 BF                     	LDA		#$BF00		; Light Grey on Dark Grey
   7934 00E7FC 85 36                        	STA		NormAttr
   7935 00E7FE 60                           	RTS
                                           
   7937 00E7FF                             doBackSpace:
   7938 00E7FF A4 30                        	LDY		CursorX
   7939 00E801 F0 22                        	BEQ		.0001		; Can't backspace anymore
   7940 00E803 A5 34                        	LDA		VideoPos
   7941 00E805 0A                           	ASL
   7942 00E806 AA                           	TAX
   7943 00E807                             .0002:
   7944 00E807 BF 00 00 FD                  	LDA		VIDBUF,X
   7945 00E80B 9F FE FF FC                  	STA		VIDBUF-2,X
   7946 00E80F E8                           	INX
   7947 00E810 E8                           	INX
   7948 00E811 C8                           	INY
   7949 00E812 C0 54 00                     	CPY		#TEXTCOLS
   7950 00E815 D0 F0                        	BNE		.0002
   7951 00E817                             .0003:
   7952 00E817 A9 20 00                     	LDA		#' '
   7953 00E81A 05 36                        	ORA		NormAttr
   7954 00E81C 9F 00 00 FD                  	STA		VIDBUF,X
   7955 00E820 C6 30                        	DEC		CursorX
   7956 00E822 82 59 00                     	BRL		SyncVideoPos
   7957 00E825                             .0001:
   7958 00E825 60                           	RTS
                                           
                                           ; Deleting a character does not change the video position so there's no need
                                           ; to resynchronize it.
                                           
   7963 00E826                             doDelete:
   7964 00E826 A4 30                        	LDY		CursorX
   7965 00E828 A5 34                        	LDA		VideoPos
   7966 00E82A 0A                           	ASL
   7967 00E82B AA                           	TAX
   7968 00E82C                             .0002:
   7969 00E82C C0 53 00                     	CPY		#TEXTCOLS-1
   7970 00E82F F0 0D                        	BEQ		.0001
   7971 00E831 BF 02 00 FD                  	LDA		VIDBUF+2,X
   7972 00E835 9F 00 00 FD                  	STA		VIDBUF,X
   7973 00E839 E8                           	INX
   7974 00E83A E8                           	INX
   7975 00E83B C8                           	INY
   7976 00E83C 80 EE                        	BRA		.0002
   7977 00E83E                             .0001:
   7978 00E83E A9 20 00                     	LDA		#' '
   7979 00E841 05 36                        	ORA		NormAttr
   7980 00E843 9F 00 00 FD                  	STA		VIDBUF,X
   7981 00E847 60                           	RTS
                                           
   7983 00E848                             doCursorHome:
   7984 00E848 A5 30                        	LDA		CursorX
   7985 00E84A F0 26                        	BEQ		doCursor1
   7986 00E84C 64 30                        	STZ		CursorX
   7987 00E84E 80 2E                        	BRA		SyncVideoPos
   7988 00E850                             doCursorRight:
   7989 00E850 A5 30                        	LDA		CursorX
   7990 00E852 C9 53 00                     	CMP		#TEXTCOLS-1
   7991 00E855 F0 1F                        	BEQ		doRTS
   7992 00E857 1A                           	INA
   7993 00E858                             doCursor2:
   7994 00E858 85 30                        	STA		CursorX
   7995 00E85A 80 22                        	BRA		SyncVideoPos
   7996 00E85C                             doCursorLeft:
   7997 00E85C A5 30                        	LDA		CursorX
   7998 00E85E F0 16                        	BEQ		doRTS
   7999 00E860 3A                           	DEA
   8000 00E861 80 F5                        	BRA		doCursor2
   8001 00E863                             doCursorUp:
   8002 00E863 A5 32                        	LDA		CursorY
   8003 00E865 F0 0F                        	BEQ		doRTS
   8004 00E867 3A                           	DEA
   8005 00E868 80 08                        	BRA		doCursor1
   8006 00E86A                             doCursorDown:
   8007 00E86A A5 32                        	LDA		CursorY
   8008 00E86C C9 1E 00                     	CMP		#TEXTROWS-1
   8009 00E86F F0 05                        	BEQ		doRTS
   8010 00E871 1A                           	INA
   8011 00E872                             doCursor1:
   8012 00E872 85 32                        	STA		CursorY
   8013 00E874 80 08                        	BRA		SyncVideoPos
   8014 00E876                             doRTS:
   8015 00E876 60                           	RTS
                                           
   8017 00E877                             HomeCursor:
   8018 00E877 A9 00 00                     	LDA		#0
   8019 00E87A 64 30                        	STZ		CursorX
   8020 00E87C 64 32                        	STZ		CursorY
                                           
                                           ; Synchronize the absolute video position with the cursor co-ordinates.
                                           ;
   8024 00E87E                             SyncVideoPos:
   8025 00E87E A5 32                        	LDA		CursorY
   8026 00E880 8D 00 70                     	STA		$7000
   8027 00E883 0A                           	ASL
   8028 00E884 AA                           	TAX
   8029 00E885 BD B6 F0                     	LDA		LineTbl,X
   8030 00E888 18                           	CLC
   8031 00E889 65 30                        	ADC		CursorX
   8032 00E88B 85 34                        	STA		VideoPos
   8033 00E88D 8F 0D A0 FE                  	STA		VIDREGS+13		; Update the position in the text controller
   8034 00E891 60                           	RTS
                                           
   8036 00E892                             OutCRLF:
   8037 00E892 A9 0D 00                     	LDA		#CR
   8038 00E895 20 9B E8                     	JSR		OutChar
   8039 00E898 A9 0A 00                     	LDA		#LF
                                           
   8041 00E89B                             OutChar:
   8042 00E89B 08                           	PHP
   8043 00E89C C2 30                        	REP		#$30
   8044 00E89E DA                           	PHX
   8045 00E89F 5A                           	PHY
   8046 00E8A0 A2 00 00                     	LDX		#0
   8047 00E8A3 FC F0 03                     	JSR		(OutputVec,x)
   8048 00E8A6 7A                           	PLY
   8049 00E8A7 FA                           	PLX
   8050 00E8A8 28                           	PLP
   8051 00E8A9 60                           	RTS
                                           
   8053 00E8AA                             DisplayString:
                                           ;	PLA							; pop return address
                                           ;	PLX							; get string address parameter
                                           ;	PHA							; push return address
   8057 00E8AA 08                           	PHP							; push reg settings
   8058 00E8AB E2 20                        	SEP		#$20				; ACC = 8 bit
                                           	MEM		8
                                           ;	STX		StringPos
   8061 00E8AD A0 00 00                     	LDY		#0
   8062 00E8B0                             .0002:
   8063 00E8B0 B3 04                        	LDA		(4,S),Y
   8064 00E8B2 F0 06                        	BEQ		.0001
   8065 00E8B4 20 D9 EF                     	JSR		SuperPutch
   8066 00E8B7 C8                           	INY
   8067 00E8B8 80 F6                        	BRA		.0002
   8068 00E8BA                             .0001:
   8069 00E8BA 28                           	PLP							; restore regs settings
                                           ;	REP		#$20				; ACC 16 bits
                                           	MEM		16
   8072 00E8BB 42 C0 02                     	RTS		#2					; pop stack argument
                                           
   8074 00E8BE                             DisplayString2:
   8075 00E8BE 68                           	PLA							; pop return address
   8076 00E8BF FA                           	PLX							; get string address parameter
   8077 00E8C0 48                           	PHA							; push return address
   8078 00E8C1 E2 20                        	SEP		#$20				; ACC = 8 bit
   8079 00E8C3 86 38                        	STX		StringPos
   8080 00E8C5 A0 00 00                     	LDY		#0
   8081 00E8C8 A2 32 00                     	LDX		#50
   8082 00E8CB                             .0002:
   8083 00E8CB B1 38                        	LDA		(StringPos),Y
   8084 00E8CD 20 D9 EF                     	JSR		SuperPutch
   8085 00E8D0 C8                           	INY
   8086 00E8D1 CA                           	DEX
   8087 00E8D2 D0 F7                        	BNE		.0002
   8088 00E8D4                             .0001:
   8089 00E8D4 C2 20                        	REP		#$20				; ACC 16 bits
   8090 00E8D6 60                           	RTS
                                           
   8092 00E8D7                             CursorOn:
   8093 00E8D7 48                           	PHA
   8094 00E8D8 A9 60 1F                     	LDA		#$1F60
   8095 00E8DB 8F 09 A0 FE                  	STA		VIDREGS+9
   8096 00E8DF 68                           	PLA
   8097 00E8E0 60                           	RTS
                                           
   8099 00E8E1                             CursorOff:
   8100 00E8E1 48                           	PHA
   8101 00E8E2 A9 20 00                     	LDA		#$0020
   8102 00E8E5 8F 09 A0 FE                  	STA		VIDREGS+9
   8103 00E8E9 68                           	PLA
   8104 00E8EA 60                           	RTS
                                           
   8106 00E8EB                             ClearScreen:
   8107 00E8EB A0 2C 0A                     	LDY		#TEXTROWS*TEXTCOLS
   8108 00E8EE A2 00 00                     	LDX		#$00
   8109 00E8F1 A9 20 00                     	LDA		#' '
   8110 00E8F4 20 94 E6                     	JSR		AsciiToScreen
   8111 00E8F7 05 36                        	ORA		NormAttr
   8112 00E8F9                             .0001:
   8113 00E8F9 9F 00 00 FD                  	STA		VIDBUF,X
   8114 00E8FD E8                           	INX
   8115 00E8FE E8                           	INX
   8116 00E8FF 88                           	DEY
   8117 00E900 D0 F7                        	BNE		.0001
   8118 00E902 60                           	RTS
                                           
   8120 00E903                             ScrollUp:
   8121 00E903 A2 00 00                     	LDX		#0
   8122 00E906 A0 2C 0A                     	LDY 	#TEXTROWS*TEXTCOLS
   8123 00E909                             .0001:
   8124 00E909 BF A8 00 FD                  	LDA		VIDBUF+TEXTCOLS*2,X
   8125 00E90D 9F 00 00 FD                  	STA		VIDBUF,X
   8126 00E911 E8                           	INX
   8127 00E912 E8                           	INX
   8128 00E913 88                           	DEY
   8129 00E914 D0 F3                        	BNE		.0001
   8130 00E916 A9 1E 00                     	LDA		#TEXTROWS-1
                                           
   8132 00E919                             BlankLine:
   8133 00E919 0A                           	ASL
   8134 00E91A AA                           	TAX
   8135 00E91B BD B6 F0                     	LDA		LineTbl,X
   8136 00E91E 0A                           	ASL
   8137 00E91F AA                           	TAX
   8138 00E920 A0 54 00                     	LDY		#TEXTCOLS
   8139 00E923 A5 36                        	LDA		NormAttr
   8140 00E925 09 20 00                     	ORA		#$20
   8141 00E928                             .0001:
   8142 00E928 9F 00 00 FD                  	STA		VIDBUF,X
   8143 00E92C E8                           	INX
   8144 00E92D E8                           	INX
   8145 00E92E 88                           	DEY
   8146 00E92F D0 F7                        	BNE		.0001
   8147 00E931 60                           	RTS
                                           
   8149 00E932                             DispDWord:
   8150 00E932 42 EB                        	XBAW
   8151 00E934 20 39 E9                     	JSR		DispWord
   8152 00E937 42 EB                        	XBAW
   8153 00E939                             DispWord:
   8154 00E939 EB                           	XBA
   8155 00E93A 20 3E E9                     	JSR		DispByte
   8156 00E93D EB                           	XBA
   8157 00E93E                             DispByte:
   8158 00E93E 48                           	PHA
   8159 00E93F 4A                           	LSR
   8160 00E940 4A                           	LSR
   8161 00E941 4A                           	LSR
   8162 00E942 4A                           	LSR
   8163 00E943 20 47 E9                     	JSR		DispNybble
   8164 00E946 68                           	PLA
   8165 00E947                             DispNybble:
   8166 00E947 48                           	PHA
   8167 00E948 29 0F 00                     	AND		#$0F
   8168 00E94B C9 0A 00                     	CMP		#10
   8169 00E94E 90 08                        	BCC		.0001
   8170 00E950 69 36 00                     	ADC		#'A'-11			; -11 cause the carry is set
   8171 00E953 20 9B E8                     	JSR		OutChar
   8172 00E956 68                           	PLA
   8173 00E957 60                           	RTS
   8174 00E958                             .0001:
   8175 00E958 09 30 00                     	ORA		#'0'
   8176 00E95B 20 9B E8                     	JSR		OutChar
   8177 00E95E 68                           	PLA
   8178 00E95F 60                           	RTS
                                           
   8180 00E960                             space:
   8181 00E960 48                           	PHA
   8182 00E961 A9 20 00                     	LDA		#' '
   8183 00E964 20 9B E8                     	JSR		OutChar
   8184 00E967 68                           	PLA
   8185 00E968 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Get a range (two hex numbers)
                                           ;------------------------------------------------------------------------------
                                           
   8191 00E969                             GetRange:
   8192 00E969 20 9B E5                     	JSR		IgnoreBlanks
   8193 00E96C 20 94 E9                     	JSR		GetHexNumber
   8194 00E96F C0 00 00                     	CPY		#0
   8195 00E972 F0 1F                        	BEQ		.0001
   8196 00E974 A5 0C                        	LDA		NumWorkArea
   8197 00E976 85 20                        	STA		RangeStart
   8198 00E978 85 24                        	STA		RangeEnd
   8199 00E97A A5 0E                        	LDA		NumWorkArea+2
   8200 00E97C 85 22                        	STA		RangeStart+2
   8201 00E97E 85 26                        	STA		RangeEnd+2
   8202 00E980 20 9B E5                     	JSR		IgnoreBlanks
   8203 00E983 20 94 E9                     	JSR		GetHexNumber
   8204 00E986 C0 00 00                     	CPY		#0
   8205 00E989 F0 08                        	BEQ		.0001
   8206 00E98B A5 0C                        	LDA		NumWorkArea
   8207 00E98D 85 24                        	STA		RangeEnd
   8208 00E98F A5 0E                        	LDA		NumWorkArea+2
   8209 00E991 85 26                        	STA		RangeEnd+2
   8210 00E993                             .0001:
   8211 00E993 60                           	RTS
                                           	
                                           ; Get a hexidecimal number. Maximum of six digits.
                                           ; .X = text pointer (updated)
                                           ;------------------------------------------------------------------------------
                                           ;
   8217 00E994                             GetHexNumber:
   8218 00E994 A0 00 00                     	LDY		#0					; maximum of eight digits
   8219 00E997 64 0C                        	STZ		NumWorkArea
   8220 00E999 64 0E                        	STZ		NumWorkArea+2
   8221 00E99B                             gthxn2:
   8222 00E99B 20 B8 E1                     	JSR		MonGetch
   8223 00E99E 20 C1 E9                     	JSR		AsciiToHexNybble
   8224 00E9A1 30 1B                        	BMI		gthxn1
   8225 00E9A3 06 0C                        	ASL		NumWorkArea
   8226 00E9A5 26 0E                        	ROL		NumWorkArea+2
   8227 00E9A7 06 0C                        	ASL		NumWorkArea
   8228 00E9A9 26 0E                        	ROL		NumWorkArea+2
   8229 00E9AB 06 0C                        	ASL		NumWorkArea
   8230 00E9AD 26 0E                        	ROL		NumWorkArea+2
   8231 00E9AF 06 0C                        	ASL		NumWorkArea
   8232 00E9B1 26 0E                        	ROL		NumWorkArea+2
   8233 00E9B3 05 0C                        	ORA		NumWorkArea
   8234 00E9B5 85 0C                        	STA		NumWorkArea
   8235 00E9B7 C8                           	INY
   8236 00E9B8 C0 08 00                     	CPY		#8
   8237 00E9BB D0 DE                        	BNE		gthxn2
   8238 00E9BD 60                           	RTS
   8239 00E9BE                             gthxn1:
   8240 00E9BE CA                           	DEX
   8241 00E9BF CA                           	DEX
   8242 00E9C0 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Convert ASCII character in the range '0' to '9', 'a' to 'f' or 'A' to 'F'
                                           ; to a hex nybble.
                                           ;------------------------------------------------------------------------------
                                           ;
   8249 00E9C1                             AsciiToHexNybble:
   8250 00E9C1 C9 30 00                     	CMP		#'0'
   8251 00E9C4 90 30                        	BCC		gthx3
   8252 00E9C6 C9 3A 00                     	CMP		#'9'+1
   8253 00E9C9 B0 05                        	BCS		gthx5
   8254 00E9CB 38                           	SEC
   8255 00E9CC E9 30 00                     	SBC		#'0'
   8256 00E9CF 60                           	RTS
   8257 00E9D0                             gthx5:
   8258 00E9D0 C9 41 00                     	CMP		#'A'
   8259 00E9D3 90 21                        	BCC		gthx3
   8260 00E9D5 C9 47 00                     	CMP		#'F'+1
   8261 00E9D8 B0 09                        	BCS		gthx6
   8262 00E9DA 38                           	SEC
   8263 00E9DB E9 41 00                     	SBC		#'A'
   8264 00E9DE 18                           	CLC
   8265 00E9DF 69 0A 00                     	ADC		#10
   8266 00E9E2 60                           	RTS
   8267 00E9E3                             gthx6:
   8268 00E9E3 C9 61 00                     	CMP		#'a'
   8269 00E9E6 90 0E                        	BCC		gthx3
   8270 00E9E8 C9 7B 00                     	CMP		#'z'+1
   8271 00E9EB B0 09                        	BCS		gthx3
   8272 00E9ED 38                           	SEC
   8273 00E9EE E9 61 00                     	SBC		#'a'
   8274 00E9F1 18                           	CLC
   8275 00E9F2 69 0A 00                     	ADC		#10
   8276 00E9F5 60                           	RTS
   8277 00E9F6                             gthx3:
   8278 00E9F6 A9 FF FF                     	LDA		#-1		; not a hex number
   8279 00E9F9 60                           	RTS
                                           
   8281 00E9FA                             AsciiToDecNybble:
   8282 00E9FA C9 30 00                     	CMP		#'0'
   8283 00E9FD 90 0A                        	BCC		gtdc3
   8284 00E9FF C9 3A 00                     	CMP		#'9'+1
   8285 00EA02 B0 05                        	BCS		gtdc3
   8286 00EA04 38                           	SEC
   8287 00EA05 E9 30 00                     	SBC		#'0'
   8288 00EA08 60                           	RTS
   8289 00EA09                             gtdc3:
   8290 00EA09 A9 FF FF                     	LDA		#-1
   8291 00EA0C 60                           	RTS
                                           
   8293 00EA0D                             getcharNoWait:
   8294 00EA0D A9 01 00                     	LDA		#1
   8295 00EA10 42 5B 85 BC                  	STA		ZS:keybd_cmd
   8296 00EA14 42 A2 06 00                  	TSK		#6
   8297 00EA18 42 5B A5 BA                  	LDA		ZS:keybd_char
   8298 00EA1C 10 02                        	BPL		.0001
   8299 00EA1E 38                           	SEC
   8300 00EA1F 60                           	RTS
   8301 00EA20                             .0001:
   8302 00EA20 18                           	CLC
   8303 00EA21 60                           	RTS
                                           
   8305 00EA22                             getcharWait:
   8306 00EA22 A9 02 00                     	LDA		#2
   8307 00EA25 42 5B 85 BC                  	STA		ZS:keybd_cmd
   8308 00EA29 42 A2 06 00                  	TSK		#6
   8309 00EA2D 42 5B A5 BA                  	LDA		ZS:keybd_char
   8310 00EA31 10 02                        	BPL		.0001
   8311 00EA33 38                           	SEC
   8312 00EA34 60                           	RTS
   8313 00EA35                             .0001:
   8314 00EA35 18                           	CLC
   8315 00EA36 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ;------------------------------------------------------------------------------
                                           ; Keyboard processing routines follow.
                                           ;------------------------------------------------------------------------------
                                           ;------------------------------------------------------------------------------
                                           
   8323 00EA37                             KeybdInit:
   8324 00EA37 A9 00 20                     	LDA		#$2000
   8325 00EA3A 1B                           	TAS
   8326 00EA3B 64 BC                        	STZ		keybd_cmd
   8327 00EA3D E2 30                        	SEP		#$30
                                           	MEM		8
                                           	NDX		8
   8330 00EA3F 64 08                        	STZ		KeyState1
   8331 00EA41 64 09                        	STZ		KeyState2
   8332 00EA43 A0 05                        	LDY		#$5
   8333 00EA45                             .0001:
   8334 00EA45 20 E0 EA                     	JSR		KeybdRecvByte	; Look for $AA
   8335 00EA48 90 04                        	BCC		.0002
   8336 00EA4A C9 AA                        	CMP		#$AA			;
   8337 00EA4C F0 25                        	BEQ		.config
   8338 00EA4E                             .0002:
   8339 00EA4E 20 31 EB                     	JSR		Wait10ms
   8340 00EA51 A9 FF                        	LDA		#$FF			; send reset code to keyboard
   8341 00EA53 8F 11 A1 FE                  	STA		KEYBD+1			; write to status reg to clear TX state
   8342 00EA57 20 31 EB                     	JSR		Wait10ms
   8343 00EA5A A9 FF                        	LDA		#$FF
   8344 00EA5C 8F 10 A1 FE                  	STA		KEYBD			; now write to transmit register
   8345 00EA60 20 1A EB                     	JSR		KeybdWaitTx		; wait until no longer busy
   8346 00EA63 20 E0 EA                     	JSR		KeybdRecvByte	; look for an ACK ($FA)
   8347 00EA66 C9 FA                        	CMP		#$FA
   8348 00EA68 20 E0 EA                     	JSR		KeybdRecvByte
   8349 00EA6B C9 FC                        	CMP		#$FC			; reset error ?
   8350 00EA6D F0 18                        	BEQ		.tryAgain
   8351 00EA6F C9 AA                        	CMP		#$AA			; reset complete okay ?
   8352 00EA71 D0 14                        	BNE		.tryAgain
   8353 00EA73                             .config:
   8354 00EA73 A9 F0                        	LDA		#$F0			; send scan code select
   8355 00EA75 8F 10 A1 FE                  	STA		KEYBD
   8356 00EA79 20 1A EB                     	JSR		KeybdWaitTx
   8357 00EA7C 90 09                        	BCC		.tryAgain
   8358 00EA7E 20 E0 EA                     	JSR		KeybdRecvByte	; wait for response from keyboard
   8359 00EA81 90 04                        	BCC		.tryAgain
   8360 00EA83 C9 FA                        	CMP		#$FA
   8361 00EA85 F0 0F                        	BEQ		.0004
   8362 00EA87                             .tryAgain:
   8363 00EA87 88                           	DEY
   8364 00EA88 D0 BB                        	BNE		.0001
   8365 00EA8A                             .keybdErr:
   8366 00EA8A C2 30                        	REP		#$30
   8367 00EA8C F4 41 EB                     	PEA		msgKeybdNR
   8368 00EA8F 20 AA E8                     	JSR		DisplayString
   8369 00EA92 42 60                        	RTT
   8370 00EA94 80 11                        	BRA		KeybdService
   8371 00EA96                             .0004:
   8372 00EA96 A9 02                        	LDA		#2				; select scan code set #2
   8373 00EA98 8F 10 A1 FE                  	STA		KEYBD
   8374 00EA9C 20 1A EB                     	JSR		KeybdWaitTx
   8375 00EA9F 90 E6                        	BCC		.tryAgain
   8376 00EAA1 C2 30                        	REP		#$30
   8377 00EAA3 42 60                        	RTT
   8378 00EAA5 80 00                        	BRA		KeybdService
                                           
   8380 00EAA7                             KeybdService:
   8381 00EAA7 C2 30                        	REP		#$30
                                           	MEM		16
                                           	NDX		16
   8384 00EAA9 A9 00 20                     	LDA		#$2000
   8385 00EAAC 1B                           	TAS
   8386 00EAAD A5 BC                        	LDA		keybd_cmd
   8387 00EAAF C9 01 00                     	CMP		#1
   8388 00EAB2 D0 18                        	BNE		.0001
   8389 00EAB4 20 64 EB                     	JSR		KeybdGetCharNoWait
   8390 00EAB7 B0 08                        	BCS		.nokey
   8391 00EAB9 64 BC                        	STZ		keybd_cmd
   8392 00EABB 85 BA                        	STA		keybd_char
   8393 00EABD 42 60                        	RTT
   8394 00EABF 80 E6                        	BRA		KeybdService
   8395 00EAC1                             .nokey
   8396 00EAC1 A9 FF FF                     	LDA		#-1
   8397 00EAC4 64 BC                        	STZ		keybd_cmd
   8398 00EAC6 85 BA                        	STA		keybd_char
   8399 00EAC8 42 60                        	RTT
   8400 00EACA 80 DB                        	BRA		KeybdService
   8401 00EACC                             .0001:
   8402 00EACC C9 02 00                     	CMP		#2
   8403 00EACF D0 0B                        	BNE		.0002
   8404 00EAD1 20 6F EB                     	JSR		KeybdGetCharWait
   8405 00EAD4 64 BC                        	STZ		keybd_cmd
   8406 00EAD6 85 BA                        	STA		keybd_char
   8407 00EAD8 42 60                        	RTT
   8408 00EADA 80 CB                        	BRA		KeybdService
   8409 00EADC                             .0002:
   8410 00EADC 42 60                        	RTT
   8411 00EADE 80 C7                        	BRA		KeybdService
                                           
                                           	MEM		8
                                           	NDX		8
                                           ; Recieve a byte from the keyboard, used after a command is sent to the
                                           ; keyboard in order to wait for a response.
                                           ;
   8418 00EAE0                             KeybdRecvByte:
   8419 00EAE0 5A                           	PHY
   8420 00EAE1 A0 64                        	LDY		#100			; wait up to 1s
   8421 00EAE3                             .0003:
   8422 00EAE3 AF 11 A1 FE                  	LDA		KEYBD+1			; wait for response from keyboard
   8423 00EAE7 89 80                        	BIT		#$80			; is input buffer full ?
   8424 00EAE9 D0 09                        	BNE		.0004			; yes, branch
   8425 00EAEB 20 31 EB                     	JSR		Wait10ms		; wait a bit
   8426 00EAEE 88                           	DEY
   8427 00EAEF D0 F2                        	BNE		.0003			; go back and try again
   8428 00EAF1 7A                           	PLY						; timeout
   8429 00EAF2 18                           	CLC						; carry clear = no code
   8430 00EAF3 60                           	RTS
   8431 00EAF4                             .0004:
   8432 00EAF4 AF 10 A1 FE                  	LDA		KEYBD			;
   8433 00EAF8 48                           	PHA
   8434 00EAF9 A9 00                        	LDA		#0				; clear recieve state
   8435 00EAFB 8F 11 A1 FE                  	STA		KEYBD+1
   8436 00EAFF 68                           	PLA
   8437 00EB00 7A                           	PLY
   8438 00EB01 38                           	SEC						; carry set = code available
   8439 00EB02 60                           	RTS
                                           
                                           ; Wait until the keyboard status is non-busy
                                           ; Returns .CF = 1 if successful, .CF=0 timeout
                                           ;
   8444 00EB03                             KeybdWaitBusy:
   8445 00EB03 5A                           	PHY
   8446 00EB04 A0 64                        	LDY		#100			; wait a max of 1s
   8447 00EB06                             .0001:
   8448 00EB06 AF 11 A1 FE                  	LDA		KEYBD+1
   8449 00EB0A 89 01                        	BIT		#1
   8450 00EB0C F0 09                        	BEQ		.0002
   8451 00EB0E 20 31 EB                     	JSR		Wait10ms
   8452 00EB11 88                           	DEY
   8453 00EB12 D0 F2                        	BNE		.0001
   8454 00EB14 7A                           	PLY
   8455 00EB15 18                           	CLC
   8456 00EB16 60                           	RTS
   8457 00EB17                             .0002:
   8458 00EB17 7A                           	PLY
   8459 00EB18 38                           	SEC
   8460 00EB19 60                           	RTS
                                           
                                           ; Wait until the keyboard transmit is complete
                                           ; Returns .CF = 1 if successful, .CF=0 timeout
                                           ;
   8465 00EB1A                             KeybdWaitTx:
   8466 00EB1A 5A                           	PHY
   8467 00EB1B A0 64                        	LDY		#100			; wait a max of 1s
   8468 00EB1D                             .0001:
   8469 00EB1D AF 11 A1 FE                  	LDA		KEYBD+1
   8470 00EB21 89 40                        	BIT		#$40			; check for transmit complete bit
   8471 00EB23 D0 09                        	BNE		.0002			; branch if bit set
   8472 00EB25 20 31 EB                     	JSR		Wait10ms		; delay a little bit
   8473 00EB28 88                           	DEY						; go back and try again
   8474 00EB29 D0 F2                        	BNE		.0001
   8475 00EB2B 7A                           	PLY						; timed out
   8476 00EB2C 18                           	CLC						; return carry clear
   8477 00EB2D 60                           	RTS
   8478 00EB2E                             .0002:
   8479 00EB2E 7A                           	PLY						; wait complete, return 
   8480 00EB2F 38                           	SEC						; carry set
   8481 00EB30 60                           	RTS
                                           
                                           ; Wait approximately 10ms. Used by keyboard routines. Makes use of the free
                                           ; running counter #0.
                                           ; .A = trashed (=-5)
                                           ;
   8487 00EB31                             Wait10ms:
   8488 00EB31 DA                           	PHX				; save .X
   8489 00EB32 A5 12                        	LDA		CNT0H	; get starting count
   8490 00EB34 AA                           	TAX				; save it off in .X
   8491 00EB35                             .0002:
   8492 00EB35 38                           	SEC				; compare to current counter value
   8493 00EB36 E5 12                        	SBC		CNT0H
   8494 00EB38 10 05                        	BPL		.0001	; teh result should be -ve, unless counter overflowed.
   8495 00EB3A C9 FB                        	CMP		#-5		; 5 ticks pass ? 
   8496 00EB3C 8A                           	TXA				; prepare for next check, get startcount in .A
   8497 00EB3D B0 F6                        	BCS		.0002	; go back if less than 5 ticks
   8498 00EB3F                             .0001:
   8499 00EB3F FA                           	PLX				; restore .X
   8500 00EB40 60                           	RTS
                                           
                                           	MEM		16
                                           	NDX		16
                                           
   8505 00EB41                             msgKeybdNR:
   8506 00EB41 0D 0A 4B 65 79 62 6F 61      	.byte	CR,LF,"Keyboard not responding.",CR,LF,0
   8506 00EB49 72 64 20 6E 6F 74 20 72    
   8506 00EB51 65 73 70 6F 6E 64 69 6E    
   8506 00EB59 67 2E 0D 0A 00             
                                           
                                           	cpu		FT832
                                           
   8510 00EB5E                             KeybdGetCharNoWaitCtx:
   8511 00EB5E 20 64 EB                     	JSR		KeybdGetCharNoWait
   8512 00EB61 42 40 00                     	RTC		#0
   8513 00EB64                             	
   8514 00EB64 08                           	PHP
   8515 00EB65 E2 20                        	SEP		#$20
   8516 00EB67 C2 10                        	REP		#$10
                                           	MEM		8
                                           	NDX		16
   8519 00EB69 A9 00                        	LDA		#0
   8520 00EB6B 85 0B                        	STA		KeybdWaitFlag
   8521 00EB6D 80 10                        	BRA		KeybdGetChar1
                                           
   8523 00EB6F                             KeybdGetCharWait:
   8524 00EB6F 08                           	PHP
   8525 00EB70 E2 20                        	SEP		#$20
   8526 00EB72 C2 10                        	REP		#$10
                                           	MEM		8
                                           	NDX		16
   8529 00EB74 A9 FF                        	LDA		#$FF
   8530 00EB76 85 0B                        	STA		KeybdWaitFlag
   8531 00EB78 80 05                        	BRA		KeybdGetChar1
                                           
                                           ; Wait for a keyboard character to be available
                                           ; Returns (CF=1) if no key available
                                           ; Return key (CF=0) if key is available
                                           ;
                                           ;
   8538 00EB7A                             KeybdGetChar:
   8539 00EB7A 08                           	PHP
   8540 00EB7B E2 20                        	SEP		#$20		; 8 bit acc
   8541 00EB7D C2 10                        	REP		#$10
                                           	MEM		8
                                           	NDX		16
   8544 00EB7F                             KeybdGetChar1:
   8545 00EB7F DA                           	PHX
   8546 00EB80 EB                           	XBA					; force .B to zero for TAX
   8547 00EB81 A9 00                        	LDA		#0
   8548 00EB83 EB                           	XBA
   8549 00EB84                             .0002:
   8550 00EB84                             .0003:
   8551 00EB84 AF 11 A1 FE                  	LDA		KEYBD+1		; check MSB of keyboard status reg.
   8552 00EB88 0A                           	ASL
   8553 00EB89 B0 08                        	BCS		.0006		; branch if keystroke ready
   8554 00EB8B 24 0B                        	BIT		KeybdWaitFlag
   8555 00EB8D 30 F5                        	BMI		.0003
   8556 00EB8F FA                           	PLX
   8557 00EB90 28                           	PLP
   8558 00EB91 38                           	SEC
   8559 00EB92 60                           	RTS
   8560 00EB93                             .0006:
   8561 00EB93 AF 10 A1 FE                  	LDA		KEYBD		; get scan code value
   8562 00EB97 42 9C 11 A1 FE 00            	STZ		KEYBD+1		; to clear recieve register
   8563 00EB9D                             .0001:
   8564 00EB9D C9 F0                        	CMP		#SC_KEYUP	; keyup scan code ?
   8565 00EB9F F0 FF 69 00                  	LBEQ	.doKeyup	; 
   8566 00EBA3 C9 E0                        	CMP		#SC_EXTEND	; extended scan code ?
   8567 00EBA5 F0 FF 6A 00                  	LBEQ	.doExtend
   8568 00EBA9 C9 14                        	CMP		#$14		; control ?
   8569 00EBAB F0 FF 6D 00                  	LBEQ	.doCtrl
   8570 00EBAF C9 12                        	CMP		#$12		; left shift
   8571 00EBB1 F0 FF 77 00                  	LBEQ	.doShift
   8572 00EBB5 C9 59                        	CMP		#$59		; right shift
   8573 00EBB7 F0 FF 71 00                  	LBEQ	.doShift
   8574 00EBBB C9 77                        	CMP		#SC_NUMLOCK
   8575 00EBBD F0 FF 7B 00                  	LBEQ	.doNumLock
   8576 00EBC1 C9 58                        	CMP		#SC_CAPSLOCK
   8577 00EBC3 F0 FF 85 00                  	LBEQ	.doCapsLock
   8578 00EBC7 C9 7E                        	CMP		#SC_SCROLLLOCK
   8579 00EBC9 F0 FF 8F 00                  	LBEQ	.doScrollLock
   8580 00EBCD 46 08                        	LSR		KeyState1
   8581 00EBCF B0 B3                        	BCS		.0003
   8582 00EBD1 AA                           	TAX
   8583 00EBD2 A9 80                        	LDA		#$80
   8584 00EBD4 24 09                        	BIT		KeyState2	; Is extended code ?
   8585 00EBD6 F0 11                        	BEQ		.0010
   8586 00EBD8 A9 7F                        	LDA		#$7F
   8587 00EBDA 25 09                        	AND		KeyState2
   8588 00EBDC 85 09                        	STA		KeyState2
   8589 00EBDE 46 08                        	LSR		KeyState1	; clear keyup
   8590 00EBE0 8A                           	TXA
   8591 00EBE1 29 7F                        	AND		#$7F
   8592 00EBE3 AA                           	TAX
   8593 00EBE4 BD 48 EF                     	LDA		keybdExtendedCodes,X
   8594 00EBE7 80 1D                        	BRA		.0008
   8595 00EBE9                             .0010:
   8596 00EBE9 A9 04                        	LDA		#4
   8597 00EBEB 24 09                        	BIT		KeyState2	; Is Cntrl down ?
   8598 00EBED F0 09                        	BEQ		.0009
   8599 00EBEF 8A                           	TXA
   8600 00EBF0 29 7F                        	AND		#$7F		; table is 128 chars
   8601 00EBF2 AA                           	TAX
   8602 00EBF3 BD C8 EE                     	LDA		keybdControlCodes,X
   8603 00EBF6 80 0E                        	BRA		.0008
   8604 00EBF8                             .0009:
   8605 00EBF8 A9 01                        	LDA		#$1			; Is shift down ?
   8606 00EBFA 24 09                        	BIT		KeyState2
   8607 00EBFC F0 05                        	BEQ		.0007
   8608 00EBFE BD C8 ED                     	LDA		shiftedScanCodes,X
   8609 00EC01 80 03                        	BRA		.0008
   8610 00EC03                             .0007:
   8611 00EC03 BD C8 EC                     	LDA		unshiftedScanCodes,X
   8612 00EC06                             .0008:
   8613 00EC06 C2 20                        	REP		#$20
                                           	MEM		16
   8615 00EC08 FA                           	PLX
   8616 00EC09 28                           	PLP
   8617 00EC0A 18                           	CLC
   8618 00EC0B 60                           	RTS
                                           	MEM		8
   8620 00EC0C                             .doKeyup:
   8621 00EC0C A9 01                        	LDA		#1
   8622 00EC0E 04 08                        	TSB		KeyState1
   8623 00EC10 82 71 FF                     	BRL		.0003
   8624 00EC13                             .doExtend:				; set extended key flag
   8625 00EC13 A5 09                        	LDA		KeyState2
   8626 00EC15 09 80                        	ORA		#$80
   8627 00EC17 85 09                        	STA		KeyState2
   8628 00EC19 82 68 FF                     	BRL		.0003
   8629 00EC1C                             .doCtrl:
   8630 00EC1C A9 04                        	LDA		#4
   8631 00EC1E 46 08                        	LSR		KeyState1	; check key up/down	
   8632 00EC20 90 05                        	BCC		.0004		; keydown = carry clear
   8633 00EC22 14 09                        	TRB		KeyState2
   8634 00EC24 82 5D FF                     	BRL		.0003
   8635 00EC27                             .0004:
   8636 00EC27 04 09                        	TSB		KeyState2	; set control active bit
   8637 00EC29 82 58 FF                     	BRL		.0003
   8638 00EC2C                             .doShift:
   8639 00EC2C A9 01                        	LDA		#1
   8640 00EC2E 46 08                        	LSR		KeyState1	; check key up/down	
   8641 00EC30 90 05                        	BCC		.0005
   8642 00EC32 14 09                        	TRB		KeyState2
   8643 00EC34 82 4D FF                     	BRL		.0003
   8644 00EC37                             .0005:
   8645 00EC37 04 09                        	TSB		KeyState2
   8646 00EC39 82 48 FF                     	BRL		.0003
   8647 00EC3C                             .doNumLock:
   8648 00EC3C A5 09                        	LDA		KeyState2
   8649 00EC3E 49 10                        	EOR		#16
   8650 00EC40 85 09                        	STA		KeyState2
   8651 00EC42 E2 30                        	SEP		#$30
   8652 00EC44 20 6C EC                     	JSR		KeybdSetLEDStatus
   8653 00EC47 C2 10                        	REP		#$10
   8654 00EC49 82 38 FF                     	BRL		.0003
   8655 00EC4C                             .doCapsLock:
   8656 00EC4C A5 09                        	LDA		KeyState2
   8657 00EC4E 49 20                        	EOR		#32
   8658 00EC50 85 09                        	STA		KeyState2
   8659 00EC52 E2 30                        	SEP		#$30
   8660 00EC54 20 6C EC                     	JSR		KeybdSetLEDStatus
   8661 00EC57 C2 10                        	REP		#$10
   8662 00EC59 82 28 FF                     	BRL		.0003
   8663 00EC5C                             .doScrollLock:
   8664 00EC5C A5 09                        	LDA		KeyState2
   8665 00EC5E 49 40                        	EOR		#64
   8666 00EC60 85 09                        	STA		KeyState2
   8667 00EC62 E2 30                        	SEP		#$30
   8668 00EC64 20 6C EC                     	JSR		KeybdSetLEDStatus
   8669 00EC67 C2 10                        	REP		#$10
   8670 00EC69 82 18 FF                     	BRL		.0003
                                           
   8672 00EC6C                             KeybdSetLEDStatus:
   8673 00EC6C 42 0B                        	PHDS				; save off DS
   8674 00EC6E F4 05 00                     	PEA		5			; set DS to zero
   8675 00EC71 42 2B                        	PLDS
   8676 00EC73 A9 00                        	LDA		#0
   8677 00EC75 85 0A                        	STA		KeybdLEDs
   8678 00EC77 A9 10                        	LDA		#16
   8679 00EC79 24 09                        	BIT		KeyState2
   8680 00EC7B F0 06                        	BEQ		.0002
   8681 00EC7D A5 0A                        	LDA		KeybdLEDs	; set bit 1 for Num lock, 0 for scrolllock , 2 for caps lock
   8682 00EC7F 09 02                        	ORA		#$2
   8683 00EC81 85 0A                        	STA		KeybdLEDs
   8684 00EC83                             .0002:
   8685 00EC83 A9 20                        	LDA		#32
   8686 00EC85 24 09                        	BIT		KeyState2
   8687 00EC87 F0 06                        	BEQ		.0003
   8688 00EC89 A5 0A                        	LDA		KeybdLEDs
   8689 00EC8B 09 04                        	ORA		#$4
   8690 00EC8D 85 0A                        	STA		KeybdLEDs
   8691 00EC8F                             .0003:
   8692 00EC8F A9 40                        	LDA		#64
   8693 00EC91 24 09                        	BIT		KeyState2
   8694 00EC93 F0 06                        	BEQ		.0004
   8695 00EC95 A5 0A                        	LDA		KeybdLEDs
   8696 00EC97 09 01                        	ORA		#1
   8697 00EC99 85 0A                        	STA		KeybdLEDs
   8698 00EC9B                             .0004:
   8699 00EC9B A9 ED                        	LDA		#$ED		; set status LEDs command
   8700 00EC9D 8F 10 A1 FE                  	STA		KEYBD
   8701 00ECA1 20 1A EB                     	JSR		KeybdWaitTx
   8702 00ECA4 20 E0 EA                     	JSR		KeybdRecvByte
   8703 00ECA7 90 0E                        	BCC		.0001
   8704 00ECA9 C9 FA                        	CMP		#$FA
   8705 00ECAB A5 0A                        	LDA		KeybdLEDs
   8706 00ECAD 8F 10 A1 FE                  	STA		KEYBD
   8707 00ECB1 20 1A EB                     	JSR		KeybdWaitTx
   8708 00ECB4 20 E0 EA                     	JSR		KeybdRecvByte	; wait for $FA byte
   8709 00ECB7                             .0001:
   8710 00ECB7 42 2B                        	PLDS				; recover DS
   8711 00ECB9 60                           	RTS
                                           
                                           	MEM		16
                                           
   8715 00ECBA 10 D3                        	BPL		.0003
   8716 00ECBC 48                           	PHA					; save off the char (we need to trash acc)
   8717 00ECBD AF 14 A1 FE                  	LDA		KEYBD+4		; clear keyboard strobe (must be a read operation)
   8718 00ECC1 68                           	PLA					; restore char
   8719 00ECC2 89 00 08                     	BIT		#$800		; Is it a keyup code ?
   8720 00ECC5 D0 C8                        	BNE		.0003
   8721 00ECC7 60                           	RTS
                                           
                                           
                                           
                                           	;--------------------------------------------------------------------------
                                           	; PS2 scan codes to ascii conversion tables.
                                           	;--------------------------------------------------------------------------
                                           	;
   8729 00ECC8                             unshiftedScanCodes:
   8730 00ECC8 2E A9 2E A5 A3 A1 A2 AC      	.byte	$2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
                                         
   8731 00ECD0 2E AA A8 A6 A4 09 60 2E      	.byte	$2e,$aa,$a8,$a6,$a4,$09,$60,$2e
                                         
   8732 00ECD8 2E 2E 2E 2E 2E 71 31 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$71,$31,$2e
                                         
   8733 00ECE0 2E 2E 7A 73 61 77 32 2E      	.byte	$2e,$2e,$7a,$73,$61,$77,$32,$2e
                                         
   8734 00ECE8 2E 63 78 64 65 34 33 2E      	.byte	$2e,$63,$78,$64,$65,$34,$33,$2e
                                         
   8735 00ECF0 2E 20 76 66 74 72 35 2E      	.byte	$2e,$20,$76,$66,$74,$72,$35,$2e
                                         
   8736 00ECF8 2E 6E 62 68 67 79 36 2E      	.byte	$2e,$6e,$62,$68,$67,$79,$36,$2e
                                         
   8737 00ED00 2E 2E 6D 6A 75 37 38 2E      	.byte	$2e,$2e,$6d,$6a,$75,$37,$38,$2e
                                         
   8738 00ED08 2E 2C 6B 69 6F 30 39 2E      	.byte	$2e,$2c,$6b,$69,$6f,$30,$39,$2e
                                         
   8739 00ED10 2E 2E 2F 6C 3B 70 2D 2E      	.byte	$2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
                                         
   8740 00ED18 2E 2E 27 2E 5B 3D 2E 2E      	.byte	$2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
                                         
   8741 00ED20 AD 2E 0D 5D 2E 5C 2E 2E      	.byte	$ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
                                         
   8742 00ED28 2E 2E 2E 2E 2E 2E 08 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                         
   8743 00ED30 2E 95 2E 93 94 2E 2E 2E      	.byte	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
                                         
   8744 00ED38 98 7F 92 2E 91 90 1B AF      	.byte	$98,$7f,$92,$2e,$91,$90,$1b,$af
                                         
   8745 00ED40 AB 2E 97 2E 2E 96 AE 2E      	.byte	$ab,$2e,$97,$2e,$2e,$96,$ae,$2e
                                         
                                           
   8747 00ED48 2E 2E 2E A7 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
                                         
   8748 00ED50 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8749 00ED58 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8750 00ED60 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8751 00ED68 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8752 00ED70 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8753 00ED78 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8754 00ED80 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8755 00ED88 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8756 00ED90 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8757 00ED98 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8758 00EDA0 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8759 00EDA8 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8760 00EDB0 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8761 00EDB8 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8762 00EDC0 2E 2E FA 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
                                         
                                           
   8764 00EDC8                             shiftedScanCodes:
   8765 00EDC8 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8766 00EDD0 2E 2E 2E 2E 2E 09 7E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
                                         
   8767 00EDD8 2E 2E 2E 2E 2E 51 21 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$51,$21,$2e
                                         
   8768 00EDE0 2E 2E 5A 53 41 57 40 2E      	.byte	$2e,$2e,$5a,$53,$41,$57,$40,$2e
                                         
   8769 00EDE8 2E 43 58 44 45 24 23 2E      	.byte	$2e,$43,$58,$44,$45,$24,$23,$2e
                                         
   8770 00EDF0 2E 20 56 46 54 52 25 2E      	.byte	$2e,$20,$56,$46,$54,$52,$25,$2e
                                         
   8771 00EDF8 2E 4E 42 48 47 59 5E 2E      	.byte	$2e,$4e,$42,$48,$47,$59,$5e,$2e
                                         
   8772 00EE00 2E 2E 4D 4A 55 26 2A 2E      	.byte	$2e,$2e,$4d,$4a,$55,$26,$2a,$2e
                                         
   8773 00EE08 2E 3C 4B 49 4F 29 28 2E      	.byte	$2e,$3c,$4b,$49,$4f,$29,$28,$2e
                                         
   8774 00EE10 2E 3E 3F 4C 3A 50 5F 2E      	.byte	$2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
                                         
   8775 00EE18 2E 2E 22 2E 7B 2B 2E 2E      	.byte	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
                                         
   8776 00EE20 2E 2E 0D 7D 2E 7C 2E 2E      	.byte	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
                                         
   8777 00EE28 2E 2E 2E 2E 2E 2E 08 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                         
   8778 00EE30 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8779 00EE38 2E 7F 2E 2E 2E 2E 1B 2E      	.byte	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
                                         
   8780 00EE40 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
                                           
   8782 00EE48 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8783 00EE50 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8784 00EE58 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8785 00EE60 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8786 00EE68 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8787 00EE70 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8788 00EE78 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8789 00EE80 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8790 00EE88 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8791 00EE90 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8792 00EE98 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8793 00EEA0 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8794 00EEA8 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8795 00EEB0 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8796 00EEB8 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8797 00EEC0 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
                                           
                                           ; control
   8800 00EEC8                             keybdControlCodes:
   8801 00EEC8 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8802 00EED0 2E 2E 2E 2E 2E 09 7E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
                                         
   8803 00EED8 2E 2E 2E 2E 2E 11 21 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$11,$21,$2e
                                         
   8804 00EEE0 2E 2E 1A 13 01 17 40 2E      	.byte	$2e,$2e,$1a,$13,$01,$17,$40,$2e
                                         
   8805 00EEE8 2E 03 18 04 05 24 23 2E      	.byte	$2e,$03,$18,$04,$05,$24,$23,$2e
                                         
   8806 00EEF0 2E 20 16 06 14 12 25 2E      	.byte	$2e,$20,$16,$06,$14,$12,$25,$2e
                                         
   8807 00EEF8 2E 0E 02 08 07 19 5E 2E      	.byte	$2e,$0e,$02,$08,$07,$19,$5e,$2e
                                         
   8808 00EF00 2E 2E 0D 0A 15 26 2A 2E      	.byte	$2e,$2e,$0d,$0a,$15,$26,$2a,$2e
                                         
   8809 00EF08 2E 3C 0B 09 0F 29 28 2E      	.byte	$2e,$3c,$0b,$09,$0f,$29,$28,$2e
                                         
   8810 00EF10 2E 3E 3F 0C 3A 10 5F 2E      	.byte	$2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
                                         
   8811 00EF18 2E 2E 22 2E 7B 2B 2E 2E      	.byte	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
                                         
   8812 00EF20 2E 2E 0D 7D 2E 7C 2E 2E      	.byte	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
                                         
   8813 00EF28 2E 2E 2E 2E 2E 2E 08 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                         
   8814 00EF30 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8815 00EF38 2E 7F 2E 2E 2E 2E 1B 2E      	.byte	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
                                         
   8816 00EF40 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
                                           
   8818 00EF48                             keybdExtendedCodes:
   8819 00EF48 2E 2E 2E 2E A3 A1 A2 2E      	.byte	$2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
                                         
   8820 00EF50 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8821 00EF58 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8822 00EF60 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8823 00EF68 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8824 00EF70 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8825 00EF78 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8826 00EF80 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8827 00EF88 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8828 00EF90 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8829 00EF98 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8830 00EFA0 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8831 00EFA8 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   8832 00EFB0 2E 95 2E 93 94 2E 2E 2E      	.byte	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
                                         
   8833 00EFB8 98 99 92 2E 91 90 2E 2E      	.byte	$98,$99,$92,$2e,$91,$90,$2e,$2e
                                         
   8834 00EFC0 2E 2E 97 2E 2E 96 2E 2E      	.byte	$2e,$2e,$97,$2e,$2e,$96,$2e,$2e
                                         
                                           
                                           ; Get char routine for Supermon
                                           ; This routine might be called with 8 bit regs.
                                           ;
   8839 00EFC8                             SuperGetch:
   8840 00EFC8 08                           	PHP
   8841 00EFC9 C2 30                        	REP		#$30
                                           	MEM		16
                                           	NDX		16
   8844 00EFCB 20 64 EB                     	JSR		KeybdGetCharNoWait
   8845 00EFCE 29 FF 00                     	AND		#$FF
   8846 00EFD1 B0 03                        	BCS		.0001
   8847 00EFD3 28                           	PLP		; to restore reg size
   8848 00EFD4 18                           	CLC
   8849 00EFD5 60                           	RTS
   8850 00EFD6                             .0001:
   8851 00EFD6 28                           	PLP
   8852 00EFD7 38                           	SEC
   8853 00EFD8 60                           	RTS
                                           
                                           ; Put char routine for Supermon
                                           ; This routine might be called with 8 bit regs.
                                           ;
   8858 00EFD9                             SuperPutch:
   8859 00EFD9 08                           	PHP
   8860 00EFDA C2 30                        	REP		#$30	; 16 bit regs
                                           	MEM		16
                                           	NDX		16
   8863 00EFDC 48                           	PHA
   8864 00EFDD DA                           	PHX
   8865 00EFDE 5A                           	PHY
   8866 00EFDF 20 9B E8                     	JSR		OutChar
   8867 00EFE2 7A                           	PLY
   8868 00EFE3 FA                           	PLX
   8869 00EFE4 68                           	PLA
   8870 00EFE5 28                           	PLP
   8871 00EFE6 60                           	RTS
                                           
   8873 00EFE7                             warm_start:
   8874 00EFE7 42 E2 00 01                  	SEP		#$100		; 16 bit mode
   8875 00EFEB C2 30                        	REP		#$30		; 16 bit MEM,NDX
                                           	MEM		16
                                           	NDX		16
   8878 00EFED A9 FF 3F                     	LDA		#$3FFF
   8879 00EFF0 1B                           	TAS
   8880 00EFF1 20 D7 E8                     	JSR		CursorOn
   8881 00EFF4 82 3D F1                     	BRL		Mon1
                                           
                                           	cpu		FT832
   8884 00EFF7                             ICacheIL832:
   8885 00EFF7 42 E0 01                     	CACHE	#1			; 1= invalidate instruction line identified by accumulator
   8886 00EFFA 60                           	RTS
                                           
   8888 00EFFB                             ByteIRQRout:
   8889 00EFFB 40                           	RTI
                                           
   8891 00EFFC                             IRQRout:
   8892 00EFFC 42 A2 01 00                  	TSK		#1			; switch to the interrupt handling task
   8893 00F000 40                           	RTI
                                           
   8895 00F001                             Task1:
   8896 00F001 AD 1F B0                     	LDA		MPU_IRQ_STATUS	; check if counter expired
   8897 00F004 89 02 00                     	BIT		#2
   8898 00F007 F0 13                        	BEQ		.0001
   8899 00F009 A5 04                        	LDA		TickCount		; increment the tick count
   8900 00F00B 1A                           	INA
   8901 00F00C 85 04                        	STA		TickCount
   8902 00F00E 42 8B 8F A4 00 FD            	STA.B	$FD00A4			; update on-screen IRQ live indicator
   8903 00F014 A9 05 00                     	LDA		#$05			; count down, on mpu clock, irq enabled (clears irq)
   8904 00F017 42 8B 8D 17 B0               	STA.B	CTR1_CTRL
   8905 00F01C                             .0001:
   8906 00F01C 42 60                        	RTT					; go back to interrupted task
   8907 00F01E 80 E1                        	BRA		Task1		; the next time task1 is run it will start here
                                           
                                           ; IRQ handler task - 32 bit
                                           ;
   8911 00F020                             IRQTask:
   8912 00F020 42 E2 20 02                  	SEP		#$220		; eight bit accumulator, 32 bit indexes
   8913 00F024 42 C2 10 01                  	REP		#$110
                                           	MEM		8
                                           	NDX		32
   8916 00F028                             IRQTask1:
   8917 00F028 AD 1F B0                     	LDA		MPU_IRQ_STATUS	; check if counter expired
   8918 00F02B 89 02                        	BIT		#2
   8919 00F02D F0 12                        	BEQ		.0001
   8920 00F02F A6 04                        	LDX		TickCount		; increment the tick count
   8921 00F031 E8                           	INX
   8922 00F032 86 04                        	STX		TickCount
   8923 00F034 42 8B 42 8E A2 00 FD 00      	STX.B	$FD00A2			; update on-screen IRQ live indicator
                                         
   8924 00F03C A9 05                        	LDA		#$05			; count down, on mpu clock, irq enabled (clears irq)
   8925 00F03E 8D 17 B0                     	STA		CTR1_CTRL
   8926 00F041                             .0001:
                                           ;	BIT		do_invaders
                                           ;	BPL		.0002
                                           ;	TSK		#5
   8930 00F041                             .0002:
   8931 00F041 42 60                        	RTT					; go back to interrupted task
   8932 00F043 80 E3                        	BRA		IRQTask1	; the next time task is run it will start here
                                           
                                           ; This little task sample runs in native 32 bit mode and displays
                                           ; "Hello World!" on the screen.
                                           
                                           	CPU		FT832
                                           	MEM		8
                                           	NDX		32
                                           
   8941 00F045                             Task2:
   8942 00F045 A2 F8 01 00 00               	LDX		#84*2*3
   8943 00F04A                             .0003:
   8944 00F04A A0 00 00 00 00               	LDY		#0
   8945 00F04F                             .0002:
   8946 00F04F B9 64 F0                     	LDA		msgHelloWorld,Y
   8947 00F052 F0 0C                        	BEQ		.0001
   8948 00F054 20 A5 E6                     	JSR		AsciiToScreen8
   8949 00F057 9F 00 00 FD                  	STA		VIDBUF,X
   8950 00F05B E8                           	INX
   8951 00F05C E8                           	INX
   8952 00F05D C8                           	INY
   8953 00F05E 80 EF                        	BRA		.0002
   8954 00F060                             .0001:
   8955 00F060 42 60                        	RTT
   8956 00F062 80 E6                        	BRA		.0003
                                           
   8958 00F064                             msgHelloWorld:
   8959 00F064 0D 0A 48 65 6C 6C 6F 20      	.byte	CR,LF,"Hello World!",CR,LF,0
   8959 00F06C 57 6F 72 6C 64 21 0D 0A    
   8959 00F074 00                         
                                           
                                           	NDX		16
                                           	MEM		16
                                           
   8964 00F075                             BrkTask:
   8965 00F075 42 EE 00 00 D0 FF            	INC		$FFD00000
   8966 00F07B 42 60                        	RTT
   8967 00F07D 80 F6                        	BRA		BrkTask
                                           
                                           ; The following store sequence for the benefit of Supermon816
                                           ;
   8971 00F07F                             BrkRout:
   8972 00F07F 0B                           	PHD
   8973 00F080 8B                           	PHB
   8974 00F081 C2 30                        	REP		#$30
   8975 00F083 48                           	PHA
   8976 00F084 DA                           	PHX
   8977 00F085 5A                           	PHY
   8978 00F086 6C 02 01                     	JMP		($0102)		; This jump normally points to BrkRout1
   8979 00F089                             BrkRout1:
   8980 00F089 C2 30                        	REP		#$30
   8981 00F08B 7A                           	PLY
   8982 00F08C FA                           	PLX
   8983 00F08D 68                           	PLA
   8984 00F08E AB                           	PLB
   8985 00F08F 2B                           	PLD
   8986 00F090 E2 20                        	SEP		#$20
   8987 00F092 68                           	PLA
   8988 00F093 C2 30                        	REP		#$30
   8989 00F095 68                           	PLA
   8990 00F096 20 39 E9                     	JSR		DispWord
   8991 00F099 A2 00 00                     	LDX		#0
   8992 00F09C A0 40 00                     	LDY		#64
   8993 00F09F                             .0001:
   8994 00F09F 42 F0                        	.word	$f042		; pchist
   8995 00F0A1 20 39 E9                     	JSR		DispWord
   8996 00F0A4 A9 20 00                     	LDA		#' '
   8997 00F0A7 20 9B E8                     	JSR		OutChar
   8998 00F0AA E8                           	INX
   8999 00F0AB 88                           	DEY
   9000 00F0AC D0 F1                        	BNE		.0001
   9001 00F0AE A9 FF FF                     	LDA		#$FFFF
   9002 00F0B1 8D 00 70                     	STA		$7000
   9003 00F0B4                             Hung:
   9004 00F0B4 80 FE                        	BRA		Hung
                                           
                                           	;--------------------------------------------------------
                                           	;--------------------------------------------------------
                                           	; I/O page is located at $F0xx
                                           	;--------------------------------------------------------
                                           	;--------------------------------------------------------	
                                           	;org		$F100
                                           
   9013 00F0B6                             LineTbl:
   9014 00F0B6 00 00                        	.WORD	0
   9015 00F0B8 54 00                        	.WORD	TEXTCOLS
   9016 00F0BA A8 00                        	.WORD	TEXTCOLS*2
   9017 00F0BC FC 00                        	.WORD	TEXTCOLS*3
   9018 00F0BE 50 01                        	.WORD	TEXTCOLS*4
   9019 00F0C0 A4 01                        	.WORD	TEXTCOLS*5
   9020 00F0C2 F8 01                        	.WORD	TEXTCOLS*6
   9021 00F0C4 4C 02                        	.WORD	TEXTCOLS*7
   9022 00F0C6 A0 02                        	.WORD	TEXTCOLS*8
   9023 00F0C8 F4 02                        	.WORD	TEXTCOLS*9
   9024 00F0CA 48 03                        	.WORD	TEXTCOLS*10
   9025 00F0CC 9C 03                        	.WORD	TEXTCOLS*11
   9026 00F0CE F0 03                        	.WORD	TEXTCOLS*12
   9027 00F0D0 44 04                        	.WORD	TEXTCOLS*13
   9028 00F0D2 98 04                        	.WORD	TEXTCOLS*14
   9029 00F0D4 EC 04                        	.WORD	TEXTCOLS*15
   9030 00F0D6 40 05                        	.WORD	TEXTCOLS*16
   9031 00F0D8 94 05                        	.WORD	TEXTCOLS*17
   9032 00F0DA E8 05                        	.WORD	TEXTCOLS*18
   9033 00F0DC 3C 06                        	.WORD	TEXTCOLS*19
   9034 00F0DE 90 06                        	.WORD	TEXTCOLS*20
   9035 00F0E0 E4 06                        	.WORD	TEXTCOLS*21
   9036 00F0E2 38 07                        	.WORD	TEXTCOLS*22
   9037 00F0E4 8C 07                        	.WORD	TEXTCOLS*23
   9038 00F0E6 E0 07                        	.WORD	TEXTCOLS*24
   9039 00F0E8 34 08                        	.WORD	TEXTCOLS*25
   9040 00F0EA 88 08                        	.WORD	TEXTCOLS*26
   9041 00F0EC DC 08                        	.WORD	TEXTCOLS*27
   9042 00F0EE 30 09                        	.WORD	TEXTCOLS*28
   9043 00F0F0 84 09                        	.WORD	TEXTCOLS*29
   9044 00F0F2 D8 09                        	.WORD	TEXTCOLS*30
                                           
   9046 00F0F4                             TaskStartTbl:
   9047 00F0F4 00 00                        	.WORD	0			; CS
   9048 00F0F6 00 00                        	.WORD	0			; DS
   9049 00F0F8 00 00                        	.WORD	0			; SS
   9050 00F0FA AD E0                        	.WORD	Task0		; PC
   9051 00F0FC 00                           	.BYTE	Task0>>16	; PB
   9052 00F0FD 00 00                        	.WORD	0			; acc
   9053 00F0FF 00 00                        	.WORD	0
   9054 00F101 00 00                        	.WORD	0			; x
   9055 00F103 00 00                        	.WORD	0
   9056 00F105 00 00                        	.WORD	0			; y
   9057 00F107 00 00                        	.WORD	0
   9058 00F109 FF 3F                        	.WORD	$3FFF		; sp
   9059 00F10B 00 00                        	.WORD	0
   9060 00F10D 04                           	.BYTE	4			; SR
   9061 00F10E 01                           	.BYTE	1			; SR extension
   9062 00F10F 00                           	.BYTE	0			; DB
   9063 00F110 00 00                        	.WORD	0			; DPR
   9064 00F112 00 00                        	.WORD	0
                                           
   9066 00F114 00 00                        	.WORD	0			; CS
   9067 00F116 00 00                        	.WORD	0			; DS
   9068 00F118 00 00                        	.WORD	0			; SS
   9069 00F11A 01 F0                        	.WORD	Task1		; PC
   9070 00F11C 00                           	.BYTE	Task1>>16
   9071 00F11D 00 00                        	.WORD	0			; acc
   9072 00F11F 00 00                        	.WORD	0
   9073 00F121 00 00                        	.WORD	0			; x
   9074 00F123 00 00                        	.WORD	0
   9075 00F125 00 00                        	.WORD	0			; y
   9076 00F127 00 00                        	.WORD	0
   9077 00F129 FF 3B                        	.WORD	$3BFF		; sp
   9078 00F12B 00 00                        	.WORD	0
   9079 00F12D 04                           	.BYTE	4			; SR
   9080 00F12E 01                           	.BYTE	1			; SR extension
   9081 00F12F 00                           	.BYTE	0			; DB
   9082 00F130 00 00                        	.WORD	0			; DPR
   9083 00F132 00 00                        	.WORD	0
                                           
   9085 00F134 00 00                        	.WORD	0			; CS
   9086 00F136 00 00                        	.WORD	0			; DS
   9087 00F138 00 00                        	.WORD	0			; SS
   9088 00F13A 45 F0                        	.WORD	Task2		; PC
   9089 00F13C 00                           	.BYTE	Task2>>16
   9090 00F13D 00 00                        	.WORD	0			; acc
   9091 00F13F 00 00                        	.WORD	0
   9092 00F141 00 00                        	.WORD	0			; x
   9093 00F143 00 00                        	.WORD	0
   9094 00F145 00 00                        	.WORD	0			; y
   9095 00F147 00 00                        	.WORD	0
   9096 00F149 FF 37                        	.WORD	$37FF		; sp
   9097 00F14B 00 00                        	.WORD	0
   9098 00F14D 20                           	.BYTE	$20			; SR			; eight bit mem
   9099 00F14E 02                           	.BYTE	2			; SR extension
   9100 00F14F 00                           	.BYTE	0			; DB
   9101 00F150 00 00                        	.WORD	0			; DPR
   9102 00F152 00 00                        	.WORD	0
                                           
   9104 00F154 00 00                        	.WORD	0			; CS
   9105 00F156 00 00                        	.WORD	0			; DS
   9106 00F158 00 00                        	.WORD	0			; SS
   9107 00F15A 1B E6                        	.WORD	SSMTask		; PC
   9108 00F15C 00                           	.BYTE	SSMTask>>16
   9109 00F15D 00 00                        	.WORD	0			; acc
   9110 00F15F 00 00                        	.WORD	0
   9111 00F161 00 00                        	.WORD	0			; x
   9112 00F163 00 00                        	.WORD	0
   9113 00F165 00 00                        	.WORD	0			; y
   9114 00F167 00 00                        	.WORD	0
   9115 00F169 FF 33                        	.WORD	$33FF		; sp
   9116 00F16B 00 00                        	.WORD	0
   9117 00F16D 04                           	.BYTE	$4			; SR	16 bit regs, mask interrupts
   9118 00F16E 01                           	.BYTE	1			; SR extension - 816 mode
   9119 00F16F 00                           	.BYTE	0			; DB
   9120 00F170 00 00                        	.WORD	0			; DPR
   9121 00F172 00 00                        	.WORD	0
                                           
   9123 00F174 00 00                        	.WORD	0			; CS
   9124 00F176 00 00                        	.WORD	0			; DS
   9125 00F178 00 00                        	.WORD	0			; SS
   9126 00F17A 75 F0                        	.WORD	BrkTask		; PC
   9127 00F17C 00                           	.BYTE	BrkTask>>16
   9128 00F17D 00 00                        	.WORD	0			; acc
   9129 00F17F 00 00                        	.WORD	0
   9130 00F181 00 00                        	.WORD	0			; x
   9131 00F183 00 00                        	.WORD	0
   9132 00F185 00 00                        	.WORD	0			; y
   9133 00F187 00 00                        	.WORD	0
   9134 00F189 FF 2F                        	.WORD	$2FFF		; sp
   9135 00F18B 00 00                        	.WORD	0
   9136 00F18D 00                           	.BYTE	0			; SR
   9137 00F18E 01                           	.BYTE	1			; SR extension
   9138 00F18F 00                           	.BYTE	0			; DB
   9139 00F190 00 00                        	.WORD	0			; DPR
   9140 00F192 00 00                        	.WORD	0
                                           
                                           	; task #5
                                           	; DS is placed at $7800
   9144 00F194 00 00                        	.WORD	0			; CS
   9145 00F196 00 00                        	.WORD	0    		; DS
   9146 00F198 00 00                        	.WORD	0			; SS
   9147 00F19A D8 D8                        	.WORD	InvadersTask	; PC
   9148 00F19C 00                           	.BYTE	InvadersTask>>16
   9149 00F19D 00 00                        	.WORD	0			; acc
   9150 00F19F 00 00                        	.WORD	0
   9151 00F1A1 00 00                        	.WORD	0			; x
   9152 00F1A3 00 00                        	.WORD	0
   9153 00F1A5 00 00                        	.WORD	0			; y
   9154 00F1A7 00 00                        	.WORD	0
   9155 00F1A9 FF 2B                        	.WORD	$2BFF		; sp
   9156 00F1AB 00 00                        	.WORD	0
   9157 00F1AD 00                           	.BYTE	0			; SR
   9158 00F1AE 01                           	.BYTE	1			; SR extension
   9159 00F1AF 00                           	.BYTE	0			; DB
   9160 00F1B0 00 00                        	.WORD	0			; DPR
   9161 00F1B2 00 00                        	.WORD	0
                                           
   9163 00F1B4 00 00                        	.WORD	0			; CS
   9164 00F1B6 00 00                        	.WORD	0			; DS
   9165 00F1B8 00 00                        	.WORD	0			; SS
   9166 00F1BA 20 F0                        	.WORD	IRQTask		; PC
   9167 00F1BC 00                           	.BYTE	IRQTask>>16
   9168 00F1BD 00 00                        	.WORD	0			; acc
   9169 00F1BF 00 00                        	.WORD	0
   9170 00F1C1 00 00                        	.WORD	0			; x
   9171 00F1C3 00 00                        	.WORD	0
   9172 00F1C5 00 00                        	.WORD	0			; y
   9173 00F1C7 00 00                        	.WORD	0
   9174 00F1C9 FF 27                        	.WORD	$27FF		; sp
   9175 00F1CB 00 00                        	.WORD	0
   9176 00F1CD 24                           	.BYTE	$24			; SR	8 bit acc, mask interrupts
   9177 00F1CE 02                           	.BYTE	2			; SR extension - 832 mode
   9178 00F1CF 00                           	.BYTE	0			; DB
   9179 00F1D0 00 00                        	.WORD	0			; DPR
   9180 00F1D2 00 00                        	.WORD	0
                                           
   9182 00F1D4                             msgRegs:
   9183 00F1D4 0D 0A                        	.byte	CR,LF
   9184 00F1D6 20 20 20 20 20 20 20 20          .byte   "             xxxsxi31",CR,LF
   9184 00F1DE 20 20 20 20 20 78 78 78    
   9184 00F1E6 73 78 69 33 31 0D 0A       
   9185 00F1ED 20 20 43 53 20 20 50 42          .byte   "  CS  PB PC  xxxsxn26NVmxDIZC    .A       .X       .Y       SP  ",CR,LF,0
   9185 00F1F5 20 50 43 20 20 78 78 78    
   9185 00F1FD 73 78 6E 32 36 4E 56 6D    
   9185 00F205 78 44 49 5A 43 20 20 20    
   9185 00F20D 20 2E 41 20 20 20 20 20    
   9185 00F215 20 20 2E 58 20 20 20 20    
   9185 00F21D 20 20 20 2E 59 20 20 20    
   9185 00F225 20 20 20 20 53 50 20 20    
   9185 00F22D 0D 0A 00                   
   9186 00F230                             msgRegs2:
   9187 00F230 0D 0A                        	.byte	CR,LF
   9188 00F232 20 20 53 53 20 20 20 44      	.byte	"  SS   DS  DB  DP   BL",CR,LF,0
   9188 00F23A 53 20 20 44 42 20 20 44    
   9188 00F242 50 20 20 20 42 4C 0D 0A    
   9188 00F24A 00                         
   9189 00F24B                             msgErr:
   9190 00F24B 2A 2A 2A 45 72 72 0D 0A      	.byte	"***Err",CR,LF,0
   9190 00F253 00                         
                                           
                                           	cpu		FT832
                                           	MEM		32
                                           	NDX		32
   9195 00F254 A9 78 56 34 12               	LDA		#$12345678
   9196 00F259 A2 32 54 76 98               	LDX		#$98765432
   9197 00F25E 42 8B 42 97 23               	STA.B	{$23},Y
   9198 00F263 42 BB 42 BC 56 55 45 44      	LDY.UH	$44455556,X
                                         
   9199 00F26B 42 1B 42 AB 42 BD 56 55      	LDA.H	CS:$44455556,X
   9199 00F273 45 44                      
   9200 00F275 42 3B 88 88 88 88 42 9B      	LDA.UB	SEG $88888888:$1234,Y
   9200 00F27D B9 34 12                   
   9201 00F280 42 20 00 E0 00 00 00         	JSF	    $0000:start
   9202 00F287 42 6B                        	RTF
   9203 00F289 42 A2 02 00                  	TSK		#2
   9204 00F28D 42 3A                        	TSK
   9205 00F28F 42 4C 00 00 01 00            	LDT		$10000,X
                                           
   9207 00F295 FF FF FF FF FF FF FF FF      	.org	$F400
   9207 00F29D FF FF FF FF FF FF FF FF    
   9207 00F2A5 FF FF FF FF FF FF FF FF    
   9207 00F2AD FF FF FF FF FF FF FF FF    
   9207 00F2B5 FF FF FF FF FF FF FF FF    
   9207 00F2BD FF FF FF FF FF FF FF FF    
   9207 00F2C5 FF FF FF FF FF FF FF FF    
   9207 00F2CD FF FF FF FF FF FF FF FF    
   9207 00F2D5 FF FF FF FF FF FF FF FF    
   9207 00F2DD FF FF FF FF FF FF FF FF    
   9207 00F2E5 FF FF FF FF FF FF FF FF    
   9207 00F2ED FF FF FF FF FF FF FF FF    
   9207 00F2F5 FF FF FF FF FF FF FF FF    
   9207 00F2FD FF FF FF FF FF FF FF FF    
   9207 00F305 FF FF FF FF FF FF FF FF    
   9207 00F30D FF FF FF FF FF FF FF FF    
   9207 00F315 FF FF FF FF FF FF FF FF    
   9207 00F31D FF FF FF FF FF FF FF FF    
   9207 00F325 FF FF FF FF FF FF FF FF    
   9207 00F32D FF FF FF FF FF FF FF FF    
   9207 00F335 FF FF FF FF FF FF FF FF    
   9207 00F33D FF FF FF FF FF FF FF FF    
   9207 00F345 FF FF FF FF FF FF FF FF    
   9207 00F34D FF FF FF FF FF FF FF FF    
   9207 00F355 FF FF FF FF FF FF FF FF    
   9207 00F35D FF FF FF FF FF FF FF FF    
   9207 00F365 FF FF FF FF FF FF FF FF    
   9207 00F36D FF FF FF FF FF FF FF FF    
   9207 00F375 FF FF FF FF FF FF FF FF    
   9207 00F37D FF FF FF FF FF FF FF FF    
   9207 00F385 FF FF FF FF FF FF FF FF    
   9207 00F38D FF FF FF FF FF FF FF FF    
   9207 00F395 FF FF FF FF FF FF FF FF    
   9207 00F39D FF FF FF FF FF FF FF FF    
   9207 00F3A5 FF FF FF FF FF FF FF FF    
   9207 00F3AD FF FF FF FF FF FF FF FF    
   9207 00F3B5 FF FF FF FF FF FF FF FF    
   9207 00F3BD FF FF FF FF FF FF FF FF    
   9207 00F3C5 FF FF FF FF FF FF FF FF    
   9207 00F3CD FF FF FF FF FF FF FF FF    
   9207 00F3D5 FF FF FF FF FF FF FF FF    
   9207 00F3DD FF FF FF FF FF FF FF FF    
   9207 00F3E5 FF FF FF FF FF FF FF FF    
   9207 00F3ED FF FF FF FF FF FF FF FF    
   9207 00F3F5 FF FF FF FF FF FF FF FF    
   9207 00F3FD FF FF FF                   
   9208 00F400 4C C8 EF                     	JMP		SuperGetch
   9209 00F403 4C E7 EF                     	JMP		warm_start
   9210 00F406 4C D9 EF                     	JMP		SuperPutch
   9211 00F409 4C A6 E5                     	JMP		BIOSInput
                                           
   9213 00F40C FF FF FF FF FF FF FF FF      	.org 	$FFD6
   9213 00F414 FF FF FF FF FF FF FF FF    
   9213 00F41C FF FF FF FF FF FF FF FF    
   9213 00F424 FF FF FF FF FF FF FF FF    
   9213 00F42C FF FF FF FF FF FF FF FF    
   9213 00F434 FF FF FF FF FF FF FF FF    
   9213 00F43C FF FF FF FF FF FF FF FF    
   9213 00F444 FF FF FF FF FF FF FF FF    
   9213 00F44C FF FF FF FF FF FF FF FF    
   9213 00F454 FF FF FF FF FF FF FF FF    
   9213 00F45C FF FF FF FF FF FF FF FF    
   9213 00F464 FF FF FF FF FF FF FF FF    
   9213 00F46C FF FF FF FF FF FF FF FF    
   9213 00F474 FF FF FF FF FF FF FF FF    
   9213 00F47C FF FF FF FF FF FF FF FF    
   9213 00F484 FF FF FF FF FF FF FF FF    
   9213 00F48C FF FF FF FF FF FF FF FF    
   9213 00F494 FF FF FF FF FF FF FF FF    
   9213 00F49C FF FF FF FF FF FF FF FF    
   9213 00F4A4 FF FF FF FF FF FF FF FF    
   9213 00F4AC FF FF FF FF FF FF FF FF    
   9213 00F4B4 FF FF FF FF FF FF FF FF    
   9213 00F4BC FF FF FF FF FF FF FF FF    
   9213 00F4C4 FF FF FF FF FF FF FF FF    
   9213 00F4CC FF FF FF FF FF FF FF FF    
   9213 00F4D4 FF FF FF FF FF FF FF FF    
   9213 00F4DC FF FF FF FF FF FF FF FF    
   9213 00F4E4 FF FF FF FF FF FF FF FF    
   9213 00F4EC FF FF FF FF FF FF FF FF    
   9213 00F4F4 FF FF FF FF FF FF FF FF    
   9213 00F4FC FF FF FF FF FF FF FF FF    
   9213 00F504 FF FF FF FF FF FF FF FF    
   9213 00F50C FF FF FF FF FF FF FF FF    
   9213 00F514 FF FF FF FF FF FF FF FF    
   9213 00F51C FF FF FF FF FF FF FF FF    
   9213 00F524 FF FF FF FF FF FF FF FF    
   9213 00F52C FF FF FF FF FF FF FF FF    
   9213 00F534 FF FF FF FF FF FF FF FF    
   9213 00F53C FF FF FF FF FF FF FF FF    
   9213 00F544 FF FF FF FF FF FF FF FF    
   9213 00F54C FF FF FF FF FF FF FF FF    
   9213 00F554 FF FF FF FF FF FF FF FF    
   9213 00F55C FF FF FF FF FF FF FF FF    
   9213 00F564 FF FF FF FF FF FF FF FF    
   9213 00F56C FF FF FF FF FF FF FF FF    
   9213 00F574 FF FF FF FF FF FF FF FF    
   9213 00F57C FF FF FF FF FF FF FF FF    
   9213 00F584 FF FF FF FF FF FF FF FF    
   9213 00F58C FF FF FF FF FF FF FF FF    
   9213 00F594 FF FF FF FF FF FF FF FF    
   9213 00F59C FF FF FF FF FF FF FF FF    
   9213 00F5A4 FF FF FF FF FF FF FF FF    
   9213 00F5AC FF FF FF FF FF FF FF FF    
   9213 00F5B4 FF FF FF FF FF FF FF FF    
   9213 00F5BC FF FF FF FF FF FF FF FF    
   9213 00F5C4 FF FF FF FF FF FF FF FF    
   9213 00F5CC FF FF FF FF FF FF FF FF    
   9213 00F5D4 FF FF FF FF FF FF FF FF    
   9213 00F5DC FF FF FF FF FF FF FF FF    
   9213 00F5E4 FF FF FF FF FF FF FF FF    
   9213 00F5EC FF FF FF FF FF FF FF FF    
   9213 00F5F4 FF FF FF FF FF FF FF FF    
   9213 00F5FC FF FF FF FF FF FF FF FF    
   9213 00F604 FF FF FF FF FF FF FF FF    
   9213 00F60C FF FF FF FF FF FF FF FF    
   9213 00F614 FF FF FF FF FF FF FF FF    
   9213 00F61C FF FF FF FF FF FF FF FF    
   9213 00F624 FF FF FF FF FF FF FF FF    
   9213 00F62C FF FF FF FF FF FF FF FF    
   9213 00F634 FF FF FF FF FF FF FF FF    
   9213 00F63C FF FF FF FF FF FF FF FF    
   9213 00F644 FF FF FF FF FF FF FF FF    
   9213 00F64C FF FF FF FF FF FF FF FF    
   9213 00F654 FF FF FF FF FF FF FF FF    
   9213 00F65C FF FF FF FF FF FF FF FF    
   9213 00F664 FF FF FF FF FF FF FF FF    
   9213 00F66C FF FF FF FF FF FF FF FF    
   9213 00F674 FF FF FF FF FF FF FF FF    
   9213 00F67C FF FF FF FF FF FF FF FF    
   9213 00F684 FF FF FF FF FF FF FF FF    
   9213 00F68C FF FF FF FF FF FF FF FF    
   9213 00F694 FF FF FF FF FF FF FF FF    
   9213 00F69C FF FF FF FF FF FF FF FF    
   9213 00F6A4 FF FF FF FF FF FF FF FF    
   9213 00F6AC FF FF FF FF FF FF FF FF    
   9213 00F6B4 FF FF FF FF FF FF FF FF    
   9213 00F6BC FF FF FF FF FF FF FF FF    
   9213 00F6C4 FF FF FF FF FF FF FF FF    
   9213 00F6CC FF FF FF FF FF FF FF FF    
   9213 00F6D4 FF FF FF FF FF FF FF FF    
   9213 00F6DC FF FF FF FF FF FF FF FF    
   9213 00F6E4 FF FF FF FF FF FF FF FF    
   9213 00F6EC FF FF FF FF FF FF FF FF    
   9213 00F6F4 FF FF FF FF FF FF FF FF    
   9213 00F6FC FF FF FF FF FF FF FF FF    
   9213 00F704 FF FF FF FF FF FF FF FF    
   9213 00F70C FF FF FF FF FF FF FF FF    
   9213 00F714 FF FF FF FF FF FF FF FF    
   9213 00F71C FF FF FF FF FF FF FF FF    
   9213 00F724 FF FF FF FF FF FF FF FF    
   9213 00F72C FF FF FF FF FF FF FF FF    
   9213 00F734 FF FF FF FF FF FF FF FF    
   9213 00F73C FF FF FF FF FF FF FF FF    
   9213 00F744 FF FF FF FF FF FF FF FF    
   9213 00F74C FF FF FF FF FF FF FF FF    
   9213 00F754 FF FF FF FF FF FF FF FF    
   9213 00F75C FF FF FF FF FF FF FF FF    
   9213 00F764 FF FF FF FF FF FF FF FF    
   9213 00F76C FF FF FF FF FF FF FF FF    
   9213 00F774 FF FF FF FF FF FF FF FF    
   9213 00F77C FF FF FF FF FF FF FF FF    
   9213 00F784 FF FF FF FF FF FF FF FF    
   9213 00F78C FF FF FF FF FF FF FF FF    
   9213 00F794 FF FF FF FF FF FF FF FF    
   9213 00F79C FF FF FF FF FF FF FF FF    
   9213 00F7A4 FF FF FF FF FF FF FF FF    
   9213 00F7AC FF FF FF FF FF FF FF FF    
   9213 00F7B4 FF FF FF FF FF FF FF FF    
   9213 00F7BC FF FF FF FF FF FF FF FF    
   9213 00F7C4 FF FF FF FF FF FF FF FF    
   9213 00F7CC FF FF FF FF FF FF FF FF    
   9213 00F7D4 FF FF FF FF FF FF FF FF    
   9213 00F7DC FF FF FF FF FF FF FF FF    
   9213 00F7E4 FF FF FF FF FF FF FF FF    
   9213 00F7EC FF FF FF FF FF FF FF FF    
   9213 00F7F4 FF FF FF FF FF FF FF FF    
   9213 00F7FC FF FF FF FF FF FF FF FF    
   9213 00F804 FF FF FF FF FF FF FF FF    
   9213 00F80C FF FF FF FF FF FF FF FF    
   9213 00F814 FF FF FF FF FF FF FF FF    
   9213 00F81C FF FF FF FF FF FF FF FF    
   9213 00F824 FF FF FF FF FF FF FF FF    
   9213 00F82C FF FF FF FF FF FF FF FF    
   9213 00F834 FF FF FF FF FF FF FF FF    
   9213 00F83C FF FF FF FF FF FF FF FF    
   9213 00F844 FF FF FF FF FF FF FF FF    
   9213 00F84C FF FF FF FF FF FF FF FF    
   9213 00F854 FF FF FF FF FF FF FF FF    
   9213 00F85C FF FF FF FF FF FF FF FF    
   9213 00F864 FF FF FF FF FF FF FF FF    
   9213 00F86C FF FF FF FF FF FF FF FF    
   9213 00F874 FF FF FF FF FF FF FF FF    
   9213 00F87C FF FF FF FF FF FF FF FF    
   9213 00F884 FF FF FF FF FF FF FF FF    
   9213 00F88C FF FF FF FF FF FF FF FF    
   9213 00F894 FF FF FF FF FF FF FF FF    
   9213 00F89C FF FF FF FF FF FF FF FF    
   9213 00F8A4 FF FF FF FF FF FF FF FF    
   9213 00F8AC FF FF FF FF FF FF FF FF    
   9213 00F8B4 FF FF FF FF FF FF FF FF    
   9213 00F8BC FF FF FF FF FF FF FF FF    
   9213 00F8C4 FF FF FF FF FF FF FF FF    
   9213 00F8CC FF FF FF FF FF FF FF FF    
   9213 00F8D4 FF FF FF FF FF FF FF FF    
   9213 00F8DC FF FF FF FF FF FF FF FF    
   9213 00F8E4 FF FF FF FF FF FF FF FF    
   9213 00F8EC FF FF FF FF FF FF FF FF    
   9213 00F8F4 FF FF FF FF FF FF FF FF    
   9213 00F8FC FF FF FF FF FF FF FF FF    
   9213 00F904 FF FF FF FF FF FF FF FF    
   9213 00F90C FF FF FF FF FF FF FF FF    
   9213 00F914 FF FF FF FF FF FF FF FF    
   9213 00F91C FF FF FF FF FF FF FF FF    
   9213 00F924 FF FF FF FF FF FF FF FF    
   9213 00F92C FF FF FF FF FF FF FF FF    
   9213 00F934 FF FF FF FF FF FF FF FF    
   9213 00F93C FF FF FF FF FF FF FF FF    
   9213 00F944 FF FF FF FF FF FF FF FF    
   9213 00F94C FF FF FF FF FF FF FF FF    
   9213 00F954 FF FF FF FF FF FF FF FF    
   9213 00F95C FF FF FF FF FF FF FF FF    
   9213 00F964 FF FF FF FF FF FF FF FF    
   9213 00F96C FF FF FF FF FF FF FF FF    
   9213 00F974 FF FF FF FF FF FF FF FF    
   9213 00F97C FF FF FF FF FF FF FF FF    
   9213 00F984 FF FF FF FF FF FF FF FF    
   9213 00F98C FF FF FF FF FF FF FF FF    
   9213 00F994 FF FF FF FF FF FF FF FF    
   9213 00F99C FF FF FF FF FF FF FF FF    
   9213 00F9A4 FF FF FF FF FF FF FF FF    
   9213 00F9AC FF FF FF FF FF FF FF FF    
   9213 00F9B4 FF FF FF FF FF FF FF FF    
   9213 00F9BC FF FF FF FF FF FF FF FF    
   9213 00F9C4 FF FF FF FF FF FF FF FF    
   9213 00F9CC FF FF FF FF FF FF FF FF    
   9213 00F9D4 FF FF FF FF FF FF FF FF    
   9213 00F9DC FF FF FF FF FF FF FF FF    
   9213 00F9E4 FF FF FF FF FF FF FF FF    
   9213 00F9EC FF FF FF FF FF FF FF FF    
   9213 00F9F4 FF FF FF FF FF FF FF FF    
   9213 00F9FC FF FF FF FF FF FF FF FF    
   9213 00FA04 FF FF FF FF FF FF FF FF    
   9213 00FA0C FF FF FF FF FF FF FF FF    
   9213 00FA14 FF FF FF FF FF FF FF FF    
   9213 00FA1C FF FF FF FF FF FF FF FF    
   9213 00FA24 FF FF FF FF FF FF FF FF    
   9213 00FA2C FF FF FF FF FF FF FF FF    
   9213 00FA34 FF FF FF FF FF FF FF FF    
   9213 00FA3C FF FF FF FF FF FF FF FF    
   9213 00FA44 FF FF FF FF FF FF FF FF    
   9213 00FA4C FF FF FF FF FF FF FF FF    
   9213 00FA54 FF FF FF FF FF FF FF FF    
   9213 00FA5C FF FF FF FF FF FF FF FF    
   9213 00FA64 FF FF FF FF FF FF FF FF    
   9213 00FA6C FF FF FF FF FF FF FF FF    
   9213 00FA74 FF FF FF FF FF FF FF FF    
   9213 00FA7C FF FF FF FF FF FF FF FF    
   9213 00FA84 FF FF FF FF FF FF FF FF    
   9213 00FA8C FF FF FF FF FF FF FF FF    
   9213 00FA94 FF FF FF FF FF FF FF FF    
   9213 00FA9C FF FF FF FF FF FF FF FF    
   9213 00FAA4 FF FF FF FF FF FF FF FF    
   9213 00FAAC FF FF FF FF FF FF FF FF    
   9213 00FAB4 FF FF FF FF FF FF FF FF    
   9213 00FABC FF FF FF FF FF FF FF FF    
   9213 00FAC4 FF FF FF FF FF FF FF FF    
   9213 00FACC FF FF FF FF FF FF FF FF    
   9213 00FAD4 FF FF FF FF FF FF FF FF    
   9213 00FADC FF FF FF FF FF FF FF FF    
   9213 00FAE4 FF FF FF FF FF FF FF FF    
   9213 00FAEC FF FF FF FF FF FF FF FF    
   9213 00FAF4 FF FF FF FF FF FF FF FF    
   9213 00FAFC FF FF FF FF FF FF FF FF    
   9213 00FB04 FF FF FF FF FF FF FF FF    
   9213 00FB0C FF FF FF FF FF FF FF FF    
   9213 00FB14 FF FF FF FF FF FF FF FF    
   9213 00FB1C FF FF FF FF FF FF FF FF    
   9213 00FB24 FF FF FF FF FF FF FF FF    
   9213 00FB2C FF FF FF FF FF FF FF FF    
   9213 00FB34 FF FF FF FF FF FF FF FF    
   9213 00FB3C FF FF FF FF FF FF FF FF    
   9213 00FB44 FF FF FF FF FF FF FF FF    
   9213 00FB4C FF FF FF FF FF FF FF FF    
   9213 00FB54 FF FF FF FF FF FF FF FF    
   9213 00FB5C FF FF FF FF FF FF FF FF    
   9213 00FB64 FF FF FF FF FF FF FF FF    
   9213 00FB6C FF FF FF FF FF FF FF FF    
   9213 00FB74 FF FF FF FF FF FF FF FF    
   9213 00FB7C FF FF FF FF FF FF FF FF    
   9213 00FB84 FF FF FF FF FF FF FF FF    
   9213 00FB8C FF FF FF FF FF FF FF FF    
   9213 00FB94 FF FF FF FF FF FF FF FF    
   9213 00FB9C FF FF FF FF FF FF FF FF    
   9213 00FBA4 FF FF FF FF FF FF FF FF    
   9213 00FBAC FF FF FF FF FF FF FF FF    
   9213 00FBB4 FF FF FF FF FF FF FF FF    
   9213 00FBBC FF FF FF FF FF FF FF FF    
   9213 00FBC4 FF FF FF FF FF FF FF FF    
   9213 00FBCC FF FF FF FF FF FF FF FF    
   9213 00FBD4 FF FF FF FF FF FF FF FF    
   9213 00FBDC FF FF FF FF FF FF FF FF    
   9213 00FBE4 FF FF FF FF FF FF FF FF    
   9213 00FBEC FF FF FF FF FF FF FF FF    
   9213 00FBF4 FF FF FF FF FF FF FF FF    
   9213 00FBFC FF FF FF FF FF FF FF FF    
   9213 00FC04 FF FF FF FF FF FF FF FF    
   9213 00FC0C FF FF FF FF FF FF FF FF    
   9213 00FC14 FF FF FF FF FF FF FF FF    
   9213 00FC1C FF FF FF FF FF FF FF FF    
   9213 00FC24 FF FF FF FF FF FF FF FF    
   9213 00FC2C FF FF FF FF FF FF FF FF    
   9213 00FC34 FF FF FF FF FF FF FF FF    
   9213 00FC3C FF FF FF FF FF FF FF FF    
   9213 00FC44 FF FF FF FF FF FF FF FF    
   9213 00FC4C FF FF FF FF FF FF FF FF    
   9213 00FC54 FF FF FF FF FF FF FF FF    
   9213 00FC5C FF FF FF FF FF FF FF FF    
   9213 00FC64 FF FF FF FF FF FF FF FF    
   9213 00FC6C FF FF FF FF FF FF FF FF    
   9213 00FC74 FF FF FF FF FF FF FF FF    
   9213 00FC7C FF FF FF FF FF FF FF FF    
   9213 00FC84 FF FF FF FF FF FF FF FF    
   9213 00FC8C FF FF FF FF FF FF FF FF    
   9213 00FC94 FF FF FF FF FF FF FF FF    
   9213 00FC9C FF FF FF FF FF FF FF FF    
   9213 00FCA4 FF FF FF FF FF FF FF FF    
   9213 00FCAC FF FF FF FF FF FF FF FF    
   9213 00FCB4 FF FF FF FF FF FF FF FF    
   9213 00FCBC FF FF FF FF FF FF FF FF    
   9213 00FCC4 FF FF FF FF FF FF FF FF    
   9213 00FCCC FF FF FF FF FF FF FF FF    
   9213 00FCD4 FF FF FF FF FF FF FF FF    
   9213 00FCDC FF FF FF FF FF FF FF FF    
   9213 00FCE4 FF FF FF FF FF FF FF FF    
   9213 00FCEC FF FF FF FF FF FF FF FF    
   9213 00FCF4 FF FF FF FF FF FF FF FF    
   9213 00FCFC FF FF FF FF FF FF FF FF    
   9213 00FD04 FF FF FF FF FF FF FF FF    
   9213 00FD0C FF FF FF FF FF FF FF FF    
   9213 00FD14 FF FF FF FF FF FF FF FF    
   9213 00FD1C FF FF FF FF FF FF FF FF    
   9213 00FD24 FF FF FF FF FF FF FF FF    
   9213 00FD2C FF FF FF FF FF FF FF FF    
   9213 00FD34 FF FF FF FF FF FF FF FF    
   9213 00FD3C FF FF FF FF FF FF FF FF    
   9213 00FD44 FF FF FF FF FF FF FF FF    
   9213 00FD4C FF FF FF FF FF FF FF FF    
   9213 00FD54 FF FF FF FF FF FF FF FF    
   9213 00FD5C FF FF FF FF FF FF FF FF    
   9213 00FD64 FF FF FF FF FF FF FF FF    
   9213 00FD6C FF FF FF FF FF FF FF FF    
   9213 00FD74 FF FF FF FF FF FF FF FF    
   9213 00FD7C FF FF FF FF FF FF FF FF    
   9213 00FD84 FF FF FF FF FF FF FF FF    
   9213 00FD8C FF FF FF FF FF FF FF FF    
   9213 00FD94 FF FF FF FF FF FF FF FF    
   9213 00FD9C FF FF FF FF FF FF FF FF    
   9213 00FDA4 FF FF FF FF FF FF FF FF    
   9213 00FDAC FF FF FF FF FF FF FF FF    
   9213 00FDB4 FF FF FF FF FF FF FF FF    
   9213 00FDBC FF FF FF FF FF FF FF FF    
   9213 00FDC4 FF FF FF FF FF FF FF FF    
   9213 00FDCC FF FF FF FF FF FF FF FF    
   9213 00FDD4 FF FF FF FF FF FF FF FF    
   9213 00FDDC FF FF FF FF FF FF FF FF    
   9213 00FDE4 FF FF FF FF FF FF FF FF    
   9213 00FDEC FF FF FF FF FF FF FF FF    
   9213 00FDF4 FF FF FF FF FF FF FF FF    
   9213 00FDFC FF FF FF FF FF FF FF FF    
   9213 00FE04 FF FF FF FF FF FF FF FF    
   9213 00FE0C FF FF FF FF FF FF FF FF    
   9213 00FE14 FF FF FF FF FF FF FF FF    
   9213 00FE1C FF FF FF FF FF FF FF FF    
   9213 00FE24 FF FF FF FF FF FF FF FF    
   9213 00FE2C FF FF FF FF FF FF FF FF    
   9213 00FE34 FF FF FF FF FF FF FF FF    
   9213 00FE3C FF FF FF FF FF FF FF FF    
   9213 00FE44 FF FF FF FF FF FF FF FF    
   9213 00FE4C FF FF FF FF FF FF FF FF    
   9213 00FE54 FF FF FF FF FF FF FF FF    
   9213 00FE5C FF FF FF FF FF FF FF FF    
   9213 00FE64 FF FF FF FF FF FF FF FF    
   9213 00FE6C FF FF FF FF FF FF FF FF    
   9213 00FE74 FF FF FF FF FF FF FF FF    
   9213 00FE7C FF FF FF FF FF FF FF FF    
   9213 00FE84 FF FF FF FF FF FF FF FF    
   9213 00FE8C FF FF FF FF FF FF FF FF    
   9213 00FE94 FF FF FF FF FF FF FF FF    
   9213 00FE9C FF FF FF FF FF FF FF FF    
   9213 00FEA4 FF FF FF FF FF FF FF FF    
   9213 00FEAC FF FF FF FF FF FF FF FF    
   9213 00FEB4 FF FF FF FF FF FF FF FF    
   9213 00FEBC FF FF FF FF FF FF FF FF    
   9213 00FEC4 FF FF FF FF FF FF FF FF    
   9213 00FECC FF FF FF FF FF FF FF FF    
   9213 00FED4 FF FF FF FF FF FF FF FF    
   9213 00FEDC FF FF FF FF FF FF FF FF    
   9213 00FEE4 FF FF FF FF FF FF FF FF    
   9213 00FEEC FF FF FF FF FF FF FF FF    
   9213 00FEF4 FF FF FF FF FF FF FF FF    
   9213 00FEFC FF FF FF FF FF FF FF FF    
   9213 00FF04 FF FF FF FF FF FF FF FF    
   9213 00FF0C FF FF FF FF FF FF FF FF    
   9213 00FF14 FF FF FF FF FF FF FF FF    
   9213 00FF1C FF FF FF FF FF FF FF FF    
   9213 00FF24 FF FF FF FF FF FF FF FF    
   9213 00FF2C FF FF FF FF FF FF FF FF    
   9213 00FF34 FF FF FF FF FF FF FF FF    
   9213 00FF3C FF FF FF FF FF FF FF FF    
   9213 00FF44 FF FF FF FF FF FF FF FF    
   9213 00FF4C FF FF FF FF FF FF FF FF    
   9213 00FF54 FF FF FF FF FF FF FF FF    
   9213 00FF5C FF FF FF FF FF FF FF FF    
   9213 00FF64 FF FF FF FF FF FF FF FF    
   9213 00FF6C FF FF FF FF FF FF FF FF    
   9213 00FF74 FF FF FF FF FF FF FF FF    
   9213 00FF7C FF FF FF FF FF FF FF FF    
   9213 00FF84 FF FF FF FF FF FF FF FF    
   9213 00FF8C FF FF FF FF FF FF FF FF    
   9213 00FF94 FF FF FF FF FF FF FF FF    
   9213 00FF9C FF FF FF FF FF FF FF FF    
   9213 00FFA4 FF FF FF FF FF FF FF FF    
   9213 00FFAC FF FF FF FF FF FF FF FF    
   9213 00FFB4 FF FF FF FF FF FF FF FF    
   9213 00FFBC FF FF FF FF FF FF FF FF    
   9213 00FFC4 FF FF FF FF FF FF FF FF    
   9213 00FFCC FF FF FF FF FF FF FF FF    
   9213 00FFD4 FF FF                      
   9214 00FFD6 04 00                        	dw		4			; task #4
                                           
   9216 00FFD8 FF FF FF FF FF FF            	.org	$FFDE
   9217 00FFDE 06 00                        	dw		6			; task #6
                                           
   9219 00FFE0 FF FF FF FF FF FF            	.org 	$FFE6
   9220 00FFE6 7F F0                        	dw		BrkRout
                                           
   9222 00FFE8 FF FF FF FF FF FF            	.org	$FFEE		; IRQ vector
   9223 00FFEE FC EF                        	dw		IRQRout
                                           
   9225 00FFF0 FF FF FF FF FF FF FF FF      	.org	$FFFC
   9225 00FFF8 FF FF FF FF                
   9226 00FFFC 00 E0                        	dw		$E000
                                           
                                           	.org	$FFFE
   9229 00FFFE FB EF                        	dw		ByteIRQRout

Checksum=0F96C6A5

Number of instructions processed: 3792
Number of opcode bytes: 8358
Bytes per instruction: 2.204114 (17.632911 bits)
Clock cycle count: 5422
Clocks per instruction: 1.429852

The above statistics are only estimates.

	The CPI assumes data memory access requires two clock cycles and instruction
	access is single cycle. The actual CPI may be higher if there are memory wait 
	states, or lower if data is found in the cache.
