Finitron 65002 assembler   version 1.3   Mon Dec 08 00:44:59 2014     Page 1
FTBios816.asm

                                        ; ============================================================================
                                        ; FTBios816.asm
                                        ;        __
                                        ;   \\__/ o\    (C) 2014  Robert Finch, Stratford
                                        ;    \  __ /    All rights reserved.
                                        ;     \/_//     robfinch<remove>@finitron.ca
                                        ;       ||
                                        ;  
                                        ;
                                        ; This source file is free software: you can redistribute it and/or modify 
                                        ; it under the terms of the GNU Lesser General Public License as published 
                                        ; by the Free Software Foundation, either version 3 of the License, or     
                                        ; (at your option) any later version.                                      
                                        ;                                                                          
                                        ; This source file is distributed in the hope that it will be useful,      
                                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                                        ; GNU General Public License for more details.                             
                                        ;                                                                          
                                        ; You should have received a copy of the GNU General Public License        
                                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                                        ;                                                                          
                                        ; ============================================================================
                                        ;
     25 = 000000000000000D                            CR			EQU		13
     26 = 000000000000000A                            LF			EQU		10
     27 = 000000000000001B                            ESC			EQU		$1B
     28 = 0000000000000008                            BS			EQU		8
                                        
     30 = 0000000000000012                            SC_LSHIFT	EQU		$12
     31 = 0000000000000059                            SC_RSHIFT	EQU		$59
     32 = 00000000000000F0                            SC_KEYUP	EQU		$F0
     33 = 00000000000000E0                            SC_EXTEND	EQU		$E0
     34 = 0000000000000014                            SC_CTRL		EQU		$14
     35 = 0000000000000011                            SC_ALT		EQU		$11
     36 = 0000000000000071                            SC_DEL		EQU		$71		; extend
     37 = 0000000000000058                            SC_LCTRL	EQU		$58
     38 = 0000000000000077                            SC_NUMLOCK	EQU		$77
     39 = 000000000000007E                            SC_SCROLLLOCK	EQU	$7E
     40 = 0000000000000058                            SC_CAPSLOCK	EQU		$58
                                        
     42 = 000000000000001F                            TEXTROWS	EQU		31
     43 = 0000000000000054                            TEXTCOLS	EQU		84
                                        
     45 = 0000000000000004                            TickCount	EQU		$4
     46 = 0000000000000008                            KeyState1	EQU		$8
     47 = 0000000000000009                            KeyState2	EQU		$9
     48 = 000000000000000A                            KeybdLEDs	EQU		$A
     49 = 000000000000000B                            KeybdWaitFlag	EQU	$B
                                        
                                        ; Range $10 to $1F reserved for hardware counters
     52 = 0000000000000010                            CNT0L		EQU		$10
     53 = 0000000000000011                            CNT0M		EQU		$11
     54 = 0000000000000012                            CNT0H		EQU		$12
                                        ; Range $20 to $2F reserved for tri-byte pointers
     56 = 0000000000000030                            CursorX		EQU		$30
     57 = 0000000000000032                            CursorY		EQU		$32
     58 = 0000000000000034                            VideoPos	EQU		$34
     59 = 0000000000000036                            NormAttr	EQU		$36
     60 = 0000000000000038                            StringPos	EQU		$38
     61 = 000000000000003C                            EscState	EQU		$3C
     62 = 00000000000003F0                            OutputVec	EQU		$03F0
                                        
     64 = 0000000000FD0000                            VIDBUF		EQU		$FD0000
     65 = 0000000000FEA000                            VIDREGS		EQU		$FEA000
     66 = 0000000000FEA100                            PRNG		EQU		$FEA100
     67 = 0000000000FEA110                            KEYBD		EQU		$FEA110
     68 = 0000000000FEA200                            FAC1		EQU		$FEA200
                                        
Finitron 65002 assembler   version 1.3   Mon Dec 08 00:44:59 2014     Page 1
supermon816.asm

                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;	.opt proc65c02,caseinsensitive
                                        	cpu	W65C02
                                        ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                                        ;*                                                                                 *
                                        ;*      SUPERMON 816 MACHINE LANGUAGE MONITOR FOR THE W65C816S MICROPROCESSOR      *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;*      Copyright ©1991-2014 by BCS Technology Limited.  All rights reserved.      *
                                        ;*                                                                                 *
                                        ;* Permission is hereby granted to use, copy, modify and distribute this software, *
                                        ;* provided this copyright notice remains in the source code and  proper  attribu- *
                                        ;* tion is given.  Redistribution, regardless of form, must be at no charge to the *
                                        ;* end  user.  This code or any part thereof, including any derivation, MAY NOT be *
                                        ;* incorporated into any package intended for sale,  unless written permission has * 
                                        ;* been given by the copyright holder.                                             *
                                        ;*                                                                                 *
                                        ;* THERE IS NO WARRANTY OF ANY KIND WITH THIS SOFTWARE.  The user assumes all risk *
                                        ;* in connection with the incorporation of this software into any system.          *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;* Supermon 816 is a salute to Jim Butterfield, who passed away on June 29, 2007.  *
                                        ;*                                                                                 *
                                        ;* Jim, who was the unofficial  spokesman for  Commodore  International during the *  
                                        ;* heyday of the company's 8 bit supremacy, scratch-developed the Supermon machine *
                                        ;* language monitor for the PET & CBM computers.   When the best-selling Commodore *
                                        ;* 64 was introduced, Jim adapted his software to the new machine & gave the adap- *
                                        ;* tation the name Supermon 64.   Commodore  subsequently  integrated a customized *
                                        ;* version of Supermon 64 into the C-128 to act as the resident M/L monitor.       *
                                        ;*                                                                                 *
                                        ;* Although Supermon 816 is not an adaptation of Supermon 64,  it was  decided  to *
                                        ;* keep the Supermon name alive, since Supermon 816's general operation & user in- *
                                        ;* terface is similar to that of Supermon 64.   Supermon 816 is 100 percent native *
                                        ;* mode 65C816 code & was developed from a blank canvas.                           *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;* This version customized for the RTF65002 test system                            *
                                        ;* Finitron.ca                                                                     *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;* Supermon 816 is a full featured monitor and supports the following operations:  *
                                        ;*                                                                                 *
                                        ;*     A — Assemble code                                                           *
                                        ;*     C — Compare memory regions                                                  *
                                        ;*     D — Disassemble code                                                        *
                                        ;*     F — Fill memory region (cannot span banks)                                  *
                                        ;*     G — Execute code (stops at BRK)                                             *
                                        ;*     H — Search (hunt) memory region                                             *
                                        ;*     J — Execute code as a subroutine (stops at BRK or RTS)                      *
                                        ;*     M — Dump & display memory range                                             *
                                        ;*     R — Dump & display 65C816 registers                                         *
                                        ;*     T — Copy (transfer) memory region                                           *
                                        ;*     X — Exit Supermon 816 & return to operating environment                     *
                                        ;*     > — Modify up to 32 bytes of memory                                         *
                                        ;*     ; — Modify 65C816 registers                                                 *
                                        ;*                                                                                 *
                                        ;* Supermon 816 accepts binary (%), octal (@), decimal (+) and hexadecimal ($) as  *
                                        ;* input for numeric parameters.  Additionally, the H and > operations accept an   *
                                        ;* ASCII string in place of numeric values by preceding the string with ', e.g.:   *
                                        ;*                                                                                 *
                                        ;*     h 042000 042FFF 'BCS Technology Limited                                     *
                                        ;*                                                                                 *
                                        ;* If no radix symbol is entered hex is assumed.                                   *
                                        ;*                                                                                 *
                                        ;* Numeric conversion is also available.  For example, typing:                     *
                                        ;*                                                                                 *
                                        ;*     +1234567 <CR>                                                               *
                                        ;*                                                                                 *
                                        ;* will display:                                                                   *
                                        ;*                                                                                 *
                                        ;*         $12D687                                                                 *
                                        ;*         +1234567                                                                *
                                        ;*         @04553207                                                               *
                                        ;*         %100101101011010000111                                                  *
                                        ;*                                                                                 *
                                        ;* In the above example, <CR> means the console keyboard's return or enter key.    *
                                        ;*                                                                                 *
                                        ;* All numeric values are internally processed as 32 bit unsigned integers.  Addr- *
                                        ;* esses may be entered as 8, 16 or 24 bit values.  During instruction assembly,   *
                                        ;* immediate mode operands may be forced to 16 bits by preceding the operand with  *
                                        ;* an exclamation point if the instruction can accept a 16 bit operand, e.g.:      *
                                        ;*                                                                                 *
                                        ;*     a 1f2000 lda !#4                                                            *
                                        ;*                                                                                 *
                                        ;* The above will assemble as:                                                     *
                                        ;*                                                                                 *
                                        ;*     A 1F2000  A9 04 00     LDA #$0004                                           *
                                        ;*                                                                                 *
                                        ;* Entering:                                                                       *
                                        ;*                                                                                 *
                                        ;*     a 1f2000 ldx !#+157                                                         *
                                        ;*                                                                                 *
                                        ;* will assemble as:                                                               *
                                        ;*                                                                                 *
                                        ;*     A 1F2000  A2 9D 00     LDX #$009D                                           *
                                        ;*                                                                                 *
                                        ;* Absent the ! in the operand field, the above would have been assembled as:      *
                                        ;*                                                                                 *
                                        ;*     A 1F2000  A2 9D        LDX #$9D                                             *
                                        ;*                                                                                 *
                                        ;* If an immediate mode operand is greater than $FF assembly of a 16 bit operand   *
                                        ;* is implied.                                                                     *
                                        ;* ——————————————————————————————————————————————————————————————————————————————— *
                                        ;* A Note on the PEA & PEI Instructions                                            *
                                        ;* ————————————————————————————————————                                            *
                                        ;*                                                                                 *
                                        ;* The Eyes and Lichty programming manual uses the following syntax for the PEA    *
                                        ;* and PEI instructions:                                                           *
                                        ;*                                                                                 *
                                        ;*     PEA <operand>                                                               *
                                        ;*     PEI (<operand>)                                                             *
                                        ;*                                                                                 *
                                        ;* The WDC data sheet that was published at the time of the 65C816's release in    *
                                        ;* 1984 does not indicate a recommended or preferred syntax for any of the above   *
                                        ;* instructions.  PEA pushes its operand to the stack and hence operates like any  *
                                        ;* other immediate mode instruction, in that the operand is the data (however, PEA *
                                        ;* doesn't affect the status register).  Similarly, PEI pushes the 16 bit value    *
                                        ;* stored at <operand> and <operand>+1, and hence operates like any other direct   *
                                        ;* (zero) page instruction, again without affecting the status register.           *
                                        ;*                                                                                 *
                                        ;* BCS Technology Limited is of the opinion that the developer of the ORCA/M as-   *
                                        ;* sembler, which is the assembler referred to in the Eyes and Lichty manual, mis- *
                                        ;* understood how PEA and PEI behave during runtime, and hence chose an incorrect  *
                                        ;* syntax for these two instructions.  This error was subsequently carried forward *
                                        ;* by Eyes and Lichty.                                                             *
                                        ;*                                                                                 *
                                        ;* Supermon 816's assembler uses the following syntax for PEA and PEI:             *
                                        ;*                                                                                 *
                                        ;*     PEA #<operand>                                                              *
                                        ;*     PEI <operand>                                                               *
                                        ;*                                                                                 *
                                        ;* The operand for PEA is treated as a 16 bit value, even if entered as an 8 bit   *
                                        ;* value.  The operand for PEI must be 8 bits.                                     *
                                        ;*                                                                                 *
                                        ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                                        ;
                                        ;	* * * * * * * * * * * *
                                        ;	* VERSION INFORMATION *
                                        ;	* * * * * * * * * * * *
                                        ;
                                        softvers .macro                ;software version — change with each revision...
                                                 .byte "1"             ;major
                                                 .byte "."
                                                 .byte "0"             ;minor
                                                 .byte "."
                                                 .byte "1"             ;revision
                                                 .endm
                                        ;
                                        ;REVISION TABLE
                                        ;
                                        ;Ver  Rev Date    Description
                                        ;———————————————————————————————————————————————————————————————————————————————
                                        ;1.0  2013/11/01  A) Original derived from the POC V1.1 single-board computer
                                        ;                    firmware.
                                        ;     2013/11/04  A) Fixed a problem where the B-accumulator wasn't always being
                                        ;                    be copied to shadow storage after return from execution of
                                        ;                    a J command.
                                        ;———————————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;
                                        ;	        COMMENT ABBREVIATIONS
                                        ;	————————————————————————————————————————————————————
                                        ;	  BCD   binary-coded decimal
                                        ;	   DP   direct page or page zero
                                        ;	  EOF   end-of-field
                                        ;	  EOI   end-of-input
                                        ;	  LSB   least significant byte/bit
                                        ;	  LSD   least significant digit
                                        ;	  LSN   least significant nybble
                                        ;	  LSW   least significant word
                                        ;	  MPU   microprocessor
                                        ;	  MSB   most significant byte/bit
                                        ;	  MSD   most significant digit
                                        ;	  MSN   most significant nybble
                                        ;	  MSW   most-significant word
                                        ;	  RAM   random access memory
                                        ;	   WS   whitespace, i.e., blanks & horizontal tabs
                                        ;	————————————————————————————————————————————————————
                                        ;	A word is defined as 16 bits.
                                        ;
                                        ;	   MPU REGISTER SYMBOLS
                                        ;	——————————————————————————
                                        ;	   .A   accumulator LSB
                                        ;	   .B   accumulator MSB
                                        ;	   .C   16 bit accumulator
                                        ;	   .X   X-index
                                        ;	   .Y   Y-index
                                        ;	   DB   data bank
                                        ;	   DP   direct page
                                        ;	   PB   program bank
                                        ;	   PC   program counter
                                        ;	   SP   stack pointer
                                        ;	   SR   MPU status
                                        ;	————————————————————————————
                                        ;
                                        ;	  MPU STATUS REGISTER SYMBOLS
                                        ;	———————————————————————————————
                                        ;	    C   carry
                                        ;	    D   decimal mode
                                        ;	    I   maskable interrupts
                                        ;	    m   accumulator/memory size
                                        ;	    N   result negative
                                        ;	    V   sign overflow
                                        ;	    x   index registers size
                                        ;	    Z   result zero
                                        ;	———————————————————————————————
                                        ;
                                        ;================================================================================
                                        ;
                                        ;SYSTEM INTERFACE DEFINITIONS
                                        ;
                                        ;	——————————————————————————————————————————————————————————————————
                                        ;	This section defines the interface between Supermon 816 & the host
                                        ;	system.   Change these definitions to suit your system, but do not
                                        ;	change any label names.  All definitions must have valid values in
                                        ;	order to assemble Supermon 816.
                                        ;	——————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————
    285 = 000000000000C000                            _origin_ =$00C000              ;assembly address...
                                        ;
                                        ;	Set _ORIGIN_ to Supermon 816's desired assembly address.
                                        ;	————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    291 = 000000000000F403                            vecexit  =$00F403              ;exit to environment address...
                                        ;
                                        ;	Set VECEXIT to where Supermon 816 should go when it exits.  Supermon 816
                                        ;	will do a JML (long jump) to this address, which means VECEXIT must be a
                                        ;	24 bit address.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    299 = 0000000000000102                            vecbrki  =$0102                ;BRK handler indirect vector...
    300 = 0000000000000105                            vecbrkia =$0105                ;system indirect BRK vector
                                        ;
                                        ;	Supermon 816 will modify this vector so that execution of a BRK instruc-
                                        ;	tion is intercepted & the registers  are  captured.   Your BRK front end
                                        ;	should jump through this vector after pushing the registers as follows:
                                        ;
                                        ;	         phb                   ;save DB
                                        ;	         phd                   ;save DP
                                        ;	         rep #%00110000        ;16 bit registers
                                        ;	         pha
                                        ;	         phx
                                        ;	         phy
                                        ;	         jmp (vecbrki)         ;indirect vector
                                        ;
                                        ;	When a G or J command is issued, the above sequence will be reversed be-
                                        ;	fore a jump is made to the code to be executed.  Upon exit from Supermon
                                        ;	816, the original address at VECBRKI will be restored.
                                        ;
                                        ;	If your BRK front end doesn't conform to the above you will have to mod-
                                        ;	ify Supermon 816 to accommodate the differences.  The most likely needed
                                        ;	changes will be in the order in which registers are pushed to the stack.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    324 = 0000000000003FFF                            hwstack  =$3fff                ;top of hardware stack...
                                        ;
                                        ;	Supermon 816 initializes the stack pointer to this address when the cold
                                        ;	start at MONCOLD is called to enter the monitor.  The stack pointer will
                                        ;	be undisturbed when entry into Supermon 816 is through JMONBRK (see jump
                                        ;	table definitions).
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    333 = 0000000000000080                            zeropage =$80                  ;Supermon 816's direct page...
                                        ;
                                        ;	Supermon 816 uses direct page starting at this address.  Be sure that no
                                        ;	conflict occurs with other software.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    340 = 000000000000F400                            getcha   =$F400                ;get keystroke from console...
                                        ;
                                        ;	GETCHA refers to an operating system API call that returns a keystroke
                                        ;	in the 8 bit accumulator.  Supermon 816  assumes that GETCHA is a non-
                                        ;	blocking subroutine & returns with carry clear to indicate that a key-
                                        ;	stroke is in .A, or with carry set to indicate that no keystroke was
                                        ;	available.  GETCHA will be called with a JSR instruction.
                                        ;
                                        ;	Supermon 816 expects .X & .Y to be preserved upon return from GETCHA.
                                        ;	You may have to modify Supermon 816 at all calls to GETCHA if your "get
                                        ;	keystroke" routine works differently than described.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    354 = 000000000000F406                            putcha   =$F406                ;print character on console...
                                        ;
                                        ;	PUTCHA refers to an operating system API call that prints a character to
                                        ;	the console screen.  The character to be printed will be in .A, which
                                        ;	will be set to 8-bit width.  Supermon 816 assumes that PUTCHA will block
                                        ;	until the character can be processed.  PUTCHA will be called with a JSR
                                        ;	instructions.
                                        ;
                                        ;	Supermon 816 expects .X & .Y to be preserved upon return from PUTCHA.
                                        ;	You may have to modify Supermon 816 at all calls to PUTCHA if your "put
                                        ;	character" routine works differently than described.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
    368 = 0000000000000003                            stopkey  =$03                  ;display abort key...
                                        ;
                                        ;	Supermon 816 will poll for a "stop key" during display operations, such
                                        ;	as code disassembly & memory dumps, so as to abort further processing &
                                        ;	return to the command prompt.  STOPKEY must be defined with the ASCII
                                        ;	value that the "stop key" will emit when typed.  The polling is via a
                                        ;	call to GETCHA (described above).  The default STOPKEY definition of $03
                                        ;	is for ASCII <ETX> or [Ctrl-C].
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
    378 = 0000000000000200                            ibuffer  =$000200               ;input buffer &...
    379 = 00000246                      auxbuf   =ibuffer+s_ibuf+s_byte ;auxiliary buffer...
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	Supermon 816 will use the above definitions for input buffers.  These
                                        ;	buffers may be located anywhere in RAM that is convenient.  The buffers
                                        ;	are stateless, which means that unless Supermon 816 has control of your
                                        ;	system, they may be overwritten without consequence.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;================================================================================
                                        ;
                                        ;W65C816S INSTRUCTION SYNTHESIS MACROS —— !!!!! DO NOT EDIT !!!!!
                                        ;
                                        _asm24_  .macro .ad
                                                 .byte <.ad,>.ad,.ad >> 16
                                                 .endm
                                        ;
                                        brl      .macro .ad
                                        .ba      =*+3
                                                 .byte $82
                                                 .word .ad-.ba
                                                 .endm
                                        ;
                                        ; jml is supported for the RTF65002 in 65c02 mode. And the opcode is supported
                                        ; by the assembler.
                                        ;jml      .macro .ad
                                        ; ;        .byte $5c
                                        ;         _asm24_ .ad
                                        ;         .endm
                                        ;
                                        mvn      .macro .s,.d
                                                 .byte $54,.d,.s
                                                 .endm
                                        ;
                                        mvp      .macro .s,.d
                                                 .byte $44,.d,.s
                                                 .endm
                                        ;
                                        pea      .macro .op
                                                 .byte $f4
                                                 .word .op
                                                 .endm
                                        ;
                                        phb      .macro
                                                 .byte $8b
                                                 .endm
                                        ;
                                        phk      .macro
                                                 .byte $4b
                                                 .endm
                                        ;
                                        plb      .macro
                                                 .byte $ab
                                                 .endm
                                        ;
                                        rep      .macro .op
                                                 .byte $c2,.op
                                                 .endm
                                        ;
                                        sep      .macro .op
                                                 .byte $e2,.op
                                                 .endm
                                        ;
                                        tcd      .macro
                                                 .byte $5b
                                                 .endm
                                        ;
                                        tcs      .macro
                                                 .byte $1b
                                                 .endm
                                        ;
                                        tdc      .macro
                                                 .byte $7b
                                                 .endm
                                        ;
                                        tsc      .macro
                                                 .byte $3b
                                                 .endm
                                        ;
                                        txy      .macro
                                                 .byte $9b
                                                 .endm
                                        ;
                                        tyx      .macro
                                                 .byte $bb
                                                 .endm
                                        ;
                                        wai      .macro
                                                 .byte $cb
                                                 .endm
                                        ;
                                        xba      .macro
                                                 .byte $eb
                                                 .endm
                                        ;
                                        adcw     .macro .op
                                                 adc #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        andw     .macro .op
                                                 and #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        bitw     .macro .op
                                                 bit #<.op
                                                 .byte >.op
                                                 .endm
                                        ;         
                                        cmpw     .macro .op
                                                 cmp #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        cpxw     .macro .op
                                                 cpx #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        cpyw     .macro .op
                                                 cpy #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        eorw     .macro .op
                                                 eor #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        ldaw     .macro .op
                                                 lda #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        ldxw     .macro .op
                                                 ldx #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        ldyw     .macro .op
                                                 ldy #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        oraw     .macro .op
                                                 ora #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        sbcw     .macro .op
                                                 sbc #<.op
                                                 .byte >.op
                                                 .endm
                                        ;
                                        ldalx    .macro .ad
                                                 .byte $+         .byte a_esc,"("
                                     +            .byte a_esc,"G4"
                                        
                                     +            .byte <.ad,>.ad,.ad >> 16
                                        
                                                 .endm
                                        ;
                                        adcil    .macro .ad
                                                 .byte $67,.ad
                                                 .endm
                                        ;
                                        adcily   .macro .ad
                                                 .byte $77,.ad
                                                 .endm
                                        ;
                                        andil    .macro .ad
                                                 .byte $27,.ad
                                                 .endm
                                        ;
                                        andily   .macro .ad
                                                 .byte $37,.ad
                                                 .endm
                                        ;
                                        cmpil    .macro .ad
                                                 .byte $c7,.ad
                                                 .endm
                                        ;
                                        cmpily   .macro .ad
                                                 .byte $d7,.ad
                                                 .endm
                                        ;
                                        eoril    .macro .ad
                                                 .byte $47,.ad
                                                 .endm
                                        ;
                                        eorily   .macro .ad
                                                 .byte $57,.ad
                                                 .endm
                                        ;
                                        ldail    .macro .ad
                                                 .byte $a7,.ad
                                                 .endm
                                        ;
                                        ldaily   .macro .ad
                                                 .byte $b7,.ad
                                                 .endm
                                        ;
                                        orail    .macro .ad
                                                 .byte $07,.ad
                                                 .endm
                                        ;
                                        oraily   .macro .ad
                                                 .byte $17,.ad
                                                 .endm
                                        ;
                                        sbcil    .macro .ad
                                                 .byte $e7,.ad
                                                 .endm
                                        ;
                                        sbcily   .macro .ad
                                                 .byte $f7,.ad
                                                 .endm
                                        ;
                                        stail    .macro .ad
                                                 .byte $87,.ad
                                                 .endm
                                        ;
                                        staily   .macro .ad
                                                 .byte $97,.ad
                                                 .endm
                                        ;
                                        adcs     .macro .of
                                                 .byte $63,.of
                                                 .endm
                                        ;
                                        adcsi    .macro .of
                                                 .byte $73,.of
                                                 .endm
                                        ;
                                        ands     .macro .of
                                                 .byte $23,.of
                                                 .endm
                                        ;
                                        andsi    .macro .of
                                                 .byte $33,.of
                                                 .endm
                                        ;
                                        cmps     .macro .of
                                                 .byte $c3,.of
                                                 .endm
                                        ;
                                        cmpsi    .macro .of
                                                 .byte $d3,.of
                                                 .endm
                                        ;
                                        eors     .macro .of
                                                 .byte $43,.of
                                                 .endm
                                        ;
                                        eorsi    .macro .of
                                                 .byte $53,.of
                                                 .endm
                                        ;
                                        ldas     .macro .of
                                                 .byte $a3,.of
                                                 .endm
                                        ;
                                        ldasi    .macro .of
                                                 .byte $b3,.of
                                                 .endm
                                        ;
                                        oras     .macro .of
                                                 .byte $03,.of
                                                 .endm
                                        ;
                                        orasi    .macro .of
                                                 .byte $13,.of
                                                 .endm
                                        ;
                                        sbcs     .macro .of
                                                 .byte $e3,.of
                                                 .endm
                                        ;
                                        sbcsi    .macro .of
                                                 .byte $f3,.of
                                                 .endm
                                        ;
                                        stas     .macro .of
                                                 .byte $83,.of
                                                 .endm
                                        ;
                                        stasi    .macro .of
                                                 .byte $93,.of
                                                 .endm
                                        ;
                                        longa    .macro
                                                 .byte $c2,$20
                                                 .endm
                                        ;
                                        longr    .macro
                                                 .byte $c2,$30
                                                 .endm
                                        ;
                                        longx    .macro
                                                 .byte $c2,$10
                                                 .endm
                                        ;
                                        shorta   .macro
                                                 .byte $e2,$20
                                                 .endm
                                        ;
                                        shorti   .macro
                                                 .byte $e2,$10
                                                 .endm
                                        ;
                                        shortr   .macro
                                                 .byte $e2,$30
                                                 .endm
                                        ;
                                        shortx   .macro
                                                 .byte $e2,$10
                                                 .endm
                                        ;
                                        ;================================================================================
                                        ;
                                        ;CONSOLE DISPLAY CONTROL MACROS
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	The following macros execute terminal  control procedures  that  perform
                                        ;	such tasks as clearing the screen,  switching  between  normal & reverse
                                        ;	video, etc.  These macros are for WYSE 60 & compatible displays, such as
                                        ;	the WYSE 150, WYSE 160, WYSE 325 & WYSE GPT.   Only the functions needed
                                        ;	by Supermon 816 are included.
                                        ;
                                        ;	If your console is not WYSE 60 compatible, you will need to  edit  these
                                        ;	macros as required to control your particular console or terminal.  Note
                                        ;	that in some cases one macro may call another.  Exercise caution in your
                                        ;	edits to avoid introducing display bugs.
                                        ;
                                        ;	If your console display cannot execute one of these procedures,  such as
                                        ;	'CL' (clear to end of line), you will have to develop an alternative.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
                                        ;
                                        ;	clearing data...
                                        ;
                                        bs       .macro                ;destructive backspace
                                                 .byte a_bs
                                     +            .byte a_esc,"W"
                                        
                                                 .endm
                                        ;
                                        cl       .macro                ;clear to end of line 
                                                 .byte a_esc,"T"
                                                 .endm
                                        ;
                                        ;
                                        ;	cursor control...
                                        ;
                                        cn       .macro                ;cursor on
                                                 .byte a_esc,"`1"
                                                 .endm
                                        ;
                                        co       .macro                ;cursor off
                                                 .byte a_esc,"`0"
                                                 .endm
                                        ;
                                        cr       .macro                ;carriage return
                                                 .byte a_cr
                                                 .endm
                                        ;
                                        lf       .macro                ;carriage return/line feed
                                     +            .byte a_cr
                                        
                                                 .byte a_lf
                                                 .endm
                                        ;
                                        ;
                                        ;	display attributes...
                                        ;
                                        bf       .macro                ;reverse foreground
                                                 .byte a_esc,"("
                                                 .byte a_esc,"G4"
                                                 .endm
                                        ;
                                        er       .macro                ;enable normal foreground
                                                 .byte a_esc,"("
                                                 .byte a_esc,"G0"
                                                 .endm
                                        ;
                                        sf       .macro                ;set foreground
                                                 .byte a_esc,"("
                                                 .byte a_esc,"G0"
                                                 .endm
                                        ;
                                        ;
                                        ;	display editing...
                                        ;
                                        dcuc     .macro                ;delete char under cursor
                                                 .byte a_esc,"W"
                                                 .endm
                                        ;
                                        ;
                                        ;	miscellaneous control...
                                        ;
                                        rb       .macro                ;ring "bell"
                                                 .byte a_bel
                                                 .endm
                                        ;
                                        ;================================================================================
                                        ;
                                        ;ASCII CONTROL DEFINITIONS (menmonic order)
                                        ;
    788 = 0000000000000007                            a_bel    =$07                  ;<BEL> alert/ring bell
    789 = 0000000000000008                            a_bs     =$08                  ;<BS>  backspace
    790 = 000000000000000D                            a_cr     =$0d                  ;<CR>  carriage return
    791 = 000000000000007F                            a_del    =$7f                  ;<DEL> delete
    792 = 000000000000001B                            a_esc    =$1b                  ;<ESC> escape
    793 = 0000000000000009                            a_ht     =$09                  ;<HT>  horizontal tabulation
    794 = 000000000000000A                            a_lf     =$0a                  ;<LF>  linefeed
                                        ;
                                        ;
                                        ;	miscellaneous (description order)...
                                        ;
    799 = 20                            a_blank  =' '                  ;blank (whitespace)
    800 = 7A                            a_asclch ='z'                  ;end of lowercase ASCII
    801 = 000000000000005F                            a_lctouc =$5f                  ;LC to UC conversion mask
    802 = 61                            a_asclcl ='a'                  ;start of lowercase ASCII
                                        ;
                                        ;================================================================================
                                        ;
                                        ;GLOBAL ATOMIC CONSTANTS
                                        ;
                                        ;
                                        ;	data type sizes...
                                        ;
    811 = 0000000000000001                            s_byte   =1                    ;byte
    812 = 0000000000000002                            s_word   =2                    ;word (16 bits)
    813 = 0000000000000003                            s_xword  =3                    ;extended word (24 bits)
    814 = 0000000000000004                            s_dword  =4                    ;double word (32 bits)
    815 = 0000000000000100                            s_rampag =$0100                ;65xx RAM page
                                        ;
                                        ;
                                        ;	data type sizes in bits...
                                        ;
    820 = 0000000000000008                            s_bibyte =8                    ;byte
    821 = 0000000000000004                            s_bnybbl =4                    ;nybble
                                        ;
                                        ;
                                        ;	miscellaneous...
                                        ;
    826 = 000000000000002C                            bitabs   =$2c                  ;absolute BIT opcode
    827 = 0000000000000024                            bitzp    =$24                  ;zero page BIT opcode
                                        ;
                                        ;================================================================================
                                        ;
                                        ;W65C816S NATIVE MODE STATUS REGISTER DEFINITIONS
                                        ;
    833 = 00000001                      s_mpudbx =s_byte               ;data bank size
    834 = 00000002                      s_mpudpx =s_word               ;direct page size
    835 = 00000001                      s_mpupbx =s_byte               ;program bank size
    836 = 00000002                      s_mpupcx =s_word               ;program counter size
    837 = 00000002                      s_mpuspx =s_word               ;stack pointer size
    838 = 00000001                      s_mpusrx =s_byte               ;status size
                                        ;
                                        ;
                                        ;	status register flags...
                                        ;
    843 = 0000000000000001                            sr_car   =%00000001            ;C
    844 = 00000002                      sr_zer   =sr_car << 1          ;Z
    845 = 00000004                      sr_irq   =sr_zer << 1          ;I
    846 = 00000008                      sr_bdm   =sr_irq << 1          ;D
    847 = 00000010                      sr_ixw   =sr_bdm << 1          ;x
    848 = 00000020                      sr_amw   =sr_ixw << 1          ;m
    849 = 00000040                      sr_ovl   =sr_amw << 1          ;V
    850 = 00000080                      sr_neg   =sr_ovl << 1          ;N
                                        ;
                                        ;	NVmxDIZC
                                        ;	xxxxxxxx
                                        ;	||||||||
                                        ;	|||||||+———> 1 = carry set/generated
                                        ;	||||||+————> 1 = result = zero
                                        ;	|||||+—————> 1 = IRQs ignored
                                        ;	||||+——————> 0 = binary arithmetic mode
                                        ;	||||         1 = decimal arithmetic mode
                                        ;	|||+———————> 0 = 16 bit index
                                        ;	|||          1 = 8 bit index
                                        ;	||+————————> 0 = 16 bit .A & memory
                                        ;	||           1 = 8 bit .A & memory
                                        ;	|+—————————> 1 = sign overflow
                                        ;	+——————————> 1 = result = negative
                                        ;
                                        ;================================================================================
                                        ;
                                        ;"SIZE-OF" CONSTANTS
                                        ;
    871 = 00000003                      s_addr   =s_xword              ;24 bit address
    872 = 0000000000000020                            s_auxbuf =32                   ;auxiliary buffer
    873 = 0000000000000045                            s_ibuf   =69                   ;input buffer
    874 = 0000000000000003                            s_mnemon =3                    ;MPU ASCII mnemonic
    875 = 0000000000000002                            s_mnepck =2                    ;MPU encoded mnemonic
    876 = 0000000000000003                            s_mvinst =3                    ;MVN/MVP instruction
    877 = 00000001                      s_opcode =s_byte               ;MPU opcode
    878 = 00000003                      s_oper   =s_xword              ;operand
    879 = 00000004                      s_pfac   =s_dword              ;primary math accumulator
    880 = 00000006                      s_sfac   =s_dword+s_word       ;secondary math accumulators
                                        ;
                                        ;================================================================================
                                        ;
                                        ;"NUMBER-OF" CONSTANTS
                                        ;
    886 = 0000000000000015                            n_dbytes =21                   ;default disassembly bytes
    887 = 0000000000000008                            n_dump   =8                    ;bytes per memory dump line
    888 = 000000FF                      n_mbytes =s_rampag-1           ;default memory dump bytes
    889 = 0000000000000008                            n_hccols =8                    ;compare/hunt display columns
    890 = 00000009                      n_opcols =3*s_oper             ;disassembly operand columns
    891 = 0000000000000004                            n_opslsr =4                    ;LSRs to extract instruction size
    892 = 0000000000000005                            n_shfenc =5                    ;shifts to encode/decode mnemonic
                                        ;
                                        ;================================================================================
                                        ;
                                        ;NUMERIC CONVERSION CONSTANTS
                                        ;
    898 = 0000000000000006                            a_hexdec ='A'-'9'-2            ;hex to decimal difference
    899 = 25                            c_bin    ='%'                  ;binary prefix
    900 = 2B                            c_dec    ='+'                  ;decimal prefix
    901 = 24                            c_hex    ='$'                  ;hexadecimal prefix
    902 = 40                            c_oct    ='@'                  ;octal prefix
    903 = 66                            k_hex    ='f'                  ;hex ASCII conversion
    904 = 00000020                      m_bits   =s_pfac*s_bibyte      ;operand bit size
    905 = 00000030                      m_cbits  =s_sfac*s_bibyte      ;workspace bit size
    906 = 000000000000000F                            bcdumask =%00001111            ;isolate BCD units mask
    907 = 0000000000000030                            btoamask =%00110000            ;binary to ASCII mask
                                        ;
                                        ;================================================================================
                                        ;
                                        ;ASSEMBLER/DISASSEMBLER CONSTANTS
                                        ;
    913 = 3F                            a_mnecvt ='?'                  ;encoded mnemonic conversion base
    914 = 000000000000001F                            aimmaska =%00011111            ;.A immediate opcode test #1
    915 = 0000000000000009                            aimmaskb =%00001001            ;.A immediate opcode test #2
    916 = 41                            asmprfx  ='A'                  ;assemble code prefix
    917 = 0000000000000009                            ascprmct =9                    ;assembler prompt "size-of"
    918 = 2E                            disprfx  ='.'                  ;disassemble code prefix
    919 = 00000000000000C0                            flimmask =%11000000            ;force long immediate flag
    920 = 0000000000000054                            opc_mvn  =$54                  ;MVN opcode
    921 = 0000000000000044                            opc_mvp  =$44                  ;MVP opcode
    922 = 00000000000000C2                            opc_rep  =$c2                  ;REP opcode
    923 = 00000000000000E2                            opc_sep  =$e2                  ;SEP opcode
    924 = 00000030                      pfmxmask =sr_amw | sr_ixw      ;MPU m & x flag bits mask
                                        ;
                                        ;
                                        ;	assembler prompt buffer offsets...
                                        ;
    929 = 00000002                      apadrbkh =s_word               ;instruction address bank MSN
    930 = 00000003                      apadrbkl =apadrbkh+s_byte      ;instruction address bank LSN
    931 = 00000004                      apadrmbh =apadrbkl+s_byte      ;instruction address MSB MSN
    932 = 00000005                      apadrmbl =apadrmbh+s_byte      ;instruction address MSB LSN
    933 = 00000006                      apadrlbh =apadrmbl+s_byte      ;instruction address LSB MSN
    934 = 00000007                      apadrlbl =apadrlbh+s_byte      ;instruction address LSB LSN
                                        ;
                                        ;
                                        ;	addressing mode preamble symbols...
                                        ;
    939 = 21                            amp_flim ='!'                  ;force long immediate
    940 = 23                            amp_imm  ='#'                  ;immediate
    941 = 28                            amp_ind  ='('                  ;indirect
    942 = 5B                            amp_indl ='['                  ;indirect long
                                        ;
                                        ;
                                        ;	addressing mode symbolic translation indices...
                                        ;
    947 = 0000000000000000                            am_nam   =%0000                ;(0)  no symbol
    948 = 0000000000000001                            am_imm   =%0001                ;(1)  #
    949 = 0000000000000002                            am_adrx  =%0010                ;(2)  dp,X or addr,X
    950 = 0000000000000003                            am_adry  =%0011                ;(3)  dp,Y or addr,Y
    951 = 0000000000000004                            am_ind   =%0100                ;(4)  (dp) or (addr)
    952 = 0000000000000005                            am_indl  =%0101                ;(5)  [dp] or [addr]
    953 = 0000000000000006                            am_indly =%0110                ;(6)  [dp],Y
    954 = 0000000000000007                            am_indx  =%0111                ;(7)  (dp,X) or (addr,X)
    955 = 0000000000000008                            am_indy  =%1000                ;(8)  (dp),Y
    956 = 0000000000000009                            am_stk   =%1001                ;(9)  offset,S
    957 = 000000000000000A                            am_stky  =%1010                ;(10) (offset,S),Y
    958 = 000000000000000B                            am_move  =%1011                ;(11) MVN/MVP sbnk,dbnk
                                        ;
                                        ;
                                        ;	operand size translation indices...
                                        ;
    963 = 0000000000000000                            ops0     =%0000 << 4           ;no operand
    964 = 0000000000000010                            ops1     =%0001 << 4           ;8 bit operand
    965 = 0000000000000020                            ops2     =%0010 << 4           ;16 bit operand
    966 = 0000000000000030                            ops3     =%0011 << 4           ;24 bit operand
    967 = 0000000000000050                            bop1     =%0101 << 4           ;8 bit relative branch
    968 = 0000000000000060                            bop2     =%0110 << 4           ;16 bit relative branch
    969 = 0000000000000090                            vops     =%1001 << 4           ;8 or 16 bit operand
                                        ;
                                        ;
                                        ;	operand size & addressing mode extraction masks...
                                        ;
    974 = 000000000000000F                            amodmask =%00001111            ;addressing mode index
    975 = 0000000000000030                            opsmask  =%00110000            ;operand size
    976 = 00000000000000C0                            vopsmask =%11000000            ;BOPx & VOPS flag bits
                                        ;
                                        ;
                                        ;	instruction mnemonic encoding...
                                        ;
    981 = 0000000000002144                            mne_adc  =$2144                ;ADC
    982 = 0000000000002BC4                            mne_and  =$2bc4                ;AND
    983 = 0000000000006D04                            mne_asl  =$6d04                ;ASL
    984 = 0000000000002106                            mne_bcc  =$2106                ;BCC
    985 = 000000000000A106                            mne_bcs  =$a106                ;BCS
    986 = 0000000000009186                            mne_beq  =$9186                ;BEQ
    987 = 000000000000AA86                            mne_bit  =$aa86                ;BIT
    988 = 0000000000005386                            mne_bmi  =$5386                ;BMI
    989 = 00000000000033C6                            mne_bne  =$33c6                ;BNE
    990 = 0000000000006C46                            mne_bpl  =$6c46                ;BPL
    991 = 00000000000014C6                            mne_bra  =$14c6                ;BRA
    992 = 00000000000064C6                            mne_brk  =$64c6                ;BRK
    993 = 0000000000006CC6                            mne_brl  =$6cc6                ;BRL
    994 = 00000000000025C6                            mne_bvc  =$25c6                ;BVC
    995 = 000000000000A5C6                            mne_bvs  =$a5c6                ;BVS
    996 = 0000000000002348                            mne_clc  =$2348                ;CLC
    997 = 0000000000002B48                            mne_cld  =$2b48                ;CLD
    998 = 0000000000005348                            mne_cli  =$5348                ;CLI
    999 = 000000000000BB48                            mne_clv  =$bb48                ;CLV
   1000 = 0000000000008B88                            mne_cmp  =$8b88                ;CMP
   1001 = 0000000000008C08                            mne_cop  =$8c08                ;COP
   1002 = 000000000000CC48                            mne_cpx  =$cc48                ;CPX
   1003 = 000000000000D448                            mne_cpy  =$d448                ;CPY
   1004 = 000000000000218A                            mne_dec  =$218a                ;DEC
   1005 = 000000000000C98A                            mne_dex  =$c98a                ;DEX
   1006 = 000000000000D18A                            mne_dey  =$d18a                ;DEY
   1007 = 0000000000009C0C                            mne_eor  =$9c0c                ;EOR
   1008 = 00000000000023D4                            mne_inc  =$23d4                ;INC
   1009 = 000000000000CBD4                            mne_inx  =$cbd4                ;INX
   1010 = 000000000000D3D4                            mne_iny  =$d3d4                ;INY
   1011 = 0000000000006B96                            mne_jml  =$6b96                ;JML
   1012 = 0000000000008B96                            mne_jmp  =$8b96                ;JMP
   1013 = 0000000000006D16                            mne_jsl  =$6d16                ;JSL
   1014 = 0000000000009D16                            mne_jsr  =$9d16                ;JSR
   1015 = 000000000000115A                            mne_lda  =$115a                ;LDA
   1016 = 000000000000C95A                            mne_ldx  =$c95a                ;LDX
   1017 = 000000000000D15A                            mne_ldy  =$d15a                ;LDY
   1018 = 0000000000009D1A                            mne_lsr  =$9d1a                ;LSR
   1019 = 0000000000007DDC                            mne_mvn  =$7ddc                ;MVN
   1020 = 0000000000008DDC                            mne_mvp  =$8ddc                ;MVP
   1021 = 0000000000008C1E                            mne_nop  =$8c1e                ;NOP
   1022 = 00000000000014E0                            mne_ora  =$14e0                ;ORA
   1023 = 00000000000011A2                            mne_pea  =$11a2                ;PEA
   1024 = 00000000000051A2                            mne_pei  =$51a2                ;PEI
   1025 = 00000000000099A2                            mne_per  =$99a2                ;PER
   1026 = 0000000000001262                            mne_pha  =$1262                ;PHA
   1027 = 0000000000001A62                            mne_phb  =$1a62                ;PHB
   1028 = 0000000000002A62                            mne_phd  =$2a62                ;PHD
   1029 = 0000000000006262                            mne_phk  =$6262                ;PHK
   1030 = 0000000000008A62                            mne_php  =$8a62                ;PHP
   1031 = 000000000000CA62                            mne_phx  =$ca62                ;PHX
   1032 = 000000000000D262                            mne_phy  =$d262                ;PHY
   1033 = 0000000000001362                            mne_pla  =$1362                ;PLA
   1034 = 0000000000001B62                            mne_plb  =$1b62                ;PLB
   1035 = 0000000000002B62                            mne_pld  =$2b62                ;PLD
   1036 = 0000000000008B62                            mne_plp  =$8b62                ;PLP
   1037 = 000000000000CB62                            mne_plx  =$cb62                ;PLX
   1038 = 000000000000D362                            mne_ply  =$d362                ;PLY
   1039 = 00000000000089A6                            mne_rep  =$89a6                ;REP
   1040 = 0000000000006C26                            mne_rol  =$6c26                ;ROL
   1041 = 0000000000009C26                            mne_ror  =$9c26                ;ROR
   1042 = 0000000000005566                            mne_rti  =$5566                ;RTI
   1043 = 0000000000006D66                            mne_rtl  =$6d66                ;RTL
   1044 = 000000000000A566                            mne_rts  =$a566                ;RTS
   1045 = 00000000000020E8                            mne_sbc  =$20e8                ;SBC
   1046 = 00000000000021A8                            mne_sec  =$21a8                ;SEC
   1047 = 00000000000029A8                            mne_sed  =$29a8                ;SED
   1048 = 00000000000051A8                            mne_sei  =$51a8                ;SEI
   1049 = 00000000000089A8                            mne_sep  =$89a8                ;SEP
   1050 = 0000000000001568                            mne_sta  =$1568                ;STA
   1051 = 0000000000008D68                            mne_stp  =$8d68                ;STP
   1052 = 000000000000CD68                            mne_stx  =$cd68                ;STX
   1053 = 000000000000D568                            mne_sty  =$d568                ;STY
   1054 = 000000000000DD68                            mne_stz  =$dd68                ;STZ
   1055 = 000000000000C8AA                            mne_tax  =$c8aa                ;TAX
   1056 = 000000000000D0AA                            mne_tay  =$d0aa                ;TAY
   1057 = 000000000000292A                            mne_tcd  =$292a                ;TCD
   1058 = 000000000000A12A                            mne_tcs  =$a12a                ;TCS
   1059 = 000000000000216A                            mne_tdc  =$216a                ;TDC
   1060 = 0000000000001CEA                            mne_trb  =$1cea                ;TRB
   1061 = 0000000000001D2A                            mne_tsb  =$1d2a                ;TSB
   1062 = 000000000000252A                            mne_tsc  =$252a                ;TSC
   1063 = 000000000000CD2A                            mne_tsx  =$cd2a                ;TSX
   1064 = 000000000000166A                            mne_txa  =$166a                ;TXA
   1065 = 000000000000A66A                            mne_txs  =$a66a                ;TXS
   1066 = 000000000000D66A                            mne_txy  =$d66a                ;TXY
   1067 = 00000000000016AA                            mne_tya  =$16aa                ;TYA
   1068 = 000000000000CEAA                            mne_tyx  =$ceaa                ;TYX
   1069 = 00000000000050B0                            mne_wai  =$50b0                ;WAI
   1070 = 0000000000007170                            mne_wdm  =$7170                ;WDM
   1071 = 00000000000010F2                            mne_xba  =$10f2                ;XBA
   1072 = 0000000000003132                            mne_xce  =$3132                ;XCE
                                        ;
                                        ;
                                        ;	encoded instruction mnemonic indices...
                                        ;
   1077 = 0000000000000010                            mne_adcx =16                   ;ADC
   1078 = 000000000000001D                            mne_andx =29                   ;AND
   1079 = 000000000000002C                            mne_aslx =44                   ;ASL
   1080 = 000000000000000F                            mne_bccx =15                   ;BCC
   1081 = 0000000000000041                            mne_bcsx =65                   ;BCS
   1082 = 000000000000003B                            mne_beqx =59                   ;BEQ
   1083 = 0000000000000046                            mne_bitx =70                   ;BIT
   1084 = 0000000000000024                            mne_bmix =36                   ;BMI
   1085 = 000000000000001F                            mne_bnex =31                   ;BNE
   1086 = 000000000000002A                            mne_bplx =42                   ;BPL
   1087 = 0000000000000005                            mne_brax =5                    ;BRA
   1088 = 0000000000000027                            mne_brkx =39                   ;BRK
   1089 = 000000000000002B                            mne_brlx =43                   ;BRL
   1090 = 0000000000000017                            mne_bvcx =23                   ;BVC
   1091 = 0000000000000044                            mne_bvsx =68                   ;BVS
   1092 = 0000000000000014                            mne_clcx =20                   ;CLC
   1093 = 000000000000001B                            mne_cldx =27                   ;CLD
   1094 = 0000000000000023                            mne_clix =35                   ;CLI
   1095 = 0000000000000047                            mne_clvx =71                   ;CLV
   1096 = 0000000000000035                            mne_cmpx =53                   ;CMP
   1097 = 0000000000000037                            mne_copx =55                   ;COP
   1098 = 000000000000004E                            mne_cpxx =78                   ;CPX
   1099 = 0000000000000058                            mne_cpyx =88                   ;CPY
   1100 = 0000000000000012                            mne_decx =18                   ;DEC
   1101 = 000000000000004A                            mne_dexx =74                   ;DEX
   1102 = 0000000000000054                            mne_deyx =84                   ;DEY
   1103 = 000000000000003D                            mne_eorx =61                   ;EOR
   1104 = 0000000000000015                            mne_incx =21                   ;INC
   1105 = 000000000000004D                            mne_inxx =77                   ;INX
   1106 = 0000000000000057                            mne_inyx =87                   ;INY
   1107 = 0000000000000028                            mne_jmlx =40                   ;JML
   1108 = 0000000000000036                            mne_jmpx =54                   ;JMP
   1109 = 000000000000002D                            mne_jslx =45                   ;JSL
   1110 = 000000000000003F                            mne_jsrx =63                   ;JSR
   1111 = 0000000000000001                            mne_ldax =1                    ;LDA
   1112 = 0000000000000049                            mne_ldxx =73                   ;LDX
   1113 = 0000000000000053                            mne_ldyx =83                   ;LDY
   1114 = 0000000000000040                            mne_lsrx =64                   ;LSR
   1115 = 0000000000000030                            mne_mvnx =48                   ;MVN
   1116 = 000000000000003A                            mne_mvpx =58                   ;MVP
   1117 = 0000000000000038                            mne_nopx =56                   ;NOP
   1118 = 0000000000000006                            mne_orax =6                    ;ORA
   1119 = 0000000000000002                            mne_peax =2                    ;PEA
   1120 = 0000000000000021                            mne_peix =33                   ;PEI
   1121 = 000000000000003C                            mne_perx =60                   ;PER
   1122 = 0000000000000003                            mne_phax =3                    ;PHA
   1123 = 000000000000000A                            mne_phbx =10                   ;PHB
   1124 = 000000000000001A                            mne_phdx =26                   ;PHD
   1125 = 0000000000000026                            mne_phkx =38                   ;PHK
   1126 = 0000000000000033                            mne_phpx =51                   ;PHP
   1127 = 000000000000004B                            mne_phxx =75                   ;PHX
   1128 = 0000000000000055                            mne_phyx =85                   ;PHY
   1129 = 0000000000000004                            mne_plax =4                    ;PLA
   1130 = 000000000000000B                            mne_plbx =11                   ;PLB
   1131 = 000000000000001C                            mne_pldx =28                   ;PLD
   1132 = 0000000000000034                            mne_plpx =52                   ;PLP
   1133 = 000000000000004C                            mne_plxx =76                   ;PLX
   1134 = 0000000000000056                            mne_plyx =86                   ;PLY
   1135 = 0000000000000031                            mne_repx =49                   ;REP
   1136 = 0000000000000029                            mne_rolx =41                   ;ROL
   1137 = 000000000000003E                            mne_rorx =62                   ;ROR
   1138 = 0000000000000025                            mne_rtix =37                   ;RTI
   1139 = 000000000000002E                            mne_rtlx =46                   ;RTL
   1140 = 0000000000000043                            mne_rtsx =67                   ;RTS
   1141 = 000000000000000E                            mne_sbcx =14                   ;SBC
   1142 = 0000000000000013                            mne_secx =19                   ;SEC
   1143 = 0000000000000019                            mne_sedx =25                   ;SED
   1144 = 0000000000000022                            mne_seix =34                   ;SEI
   1145 = 0000000000000032                            mne_sepx =50                   ;SEP
   1146 = 0000000000000007                            mne_stax =7                    ;STA
   1147 = 0000000000000039                            mne_stpx =57                   ;STP
   1148 = 0000000000000050                            mne_stxx =80                   ;STX
   1149 = 0000000000000059                            mne_styx =89                   ;STY
   1150 = 000000000000005B                            mne_stzx =91                   ;STZ
   1151 = 0000000000000048                            mne_taxx =72                   ;TAX
   1152 = 0000000000000052                            mne_tayx =82                   ;TAY
   1153 = 0000000000000018                            mne_tcdx =24                   ;TCD
   1154 = 0000000000000042                            mne_tcsx =66                   ;TCS
   1155 = 0000000000000011                            mne_tdcx =17                   ;TDC
   1156 = 000000000000000C                            mne_trbx =12                   ;TRB
   1157 = 000000000000000D                            mne_tsbx =13                   ;TSB
   1158 = 0000000000000016                            mne_tscx =22                   ;TSC
   1159 = 000000000000004F                            mne_tsxx =79                   ;TSX
   1160 = 0000000000000008                            mne_txax =8                    ;TXA
   1161 = 0000000000000045                            mne_txsx =69                   ;TXS
   1162 = 000000000000005A                            mne_txyx =90                   ;TXY
   1163 = 0000000000000009                            mne_tyax =9                    ;TYA
   1164 = 0000000000000051                            mne_tyxx =81                   ;TYX
   1165 = 0000000000000020                            mne_waix =32                   ;WAI
   1166 = 000000000000002F                            mne_wdmx =47                   ;WDM
   1167 = 0000000000000000                            mne_xbax =0                    ;XBA
   1168 = 000000000000001E                            mne_xcex =30                   ;XCE
                                        ;
                                        ;================================================================================
                                        ;
                                        ;MISCELLANEOUS CONSTANTS
                                        ;
   1174 = 0000000000000004                            halftab  =4                    ;1/2 tabulation spacing
   1175 = 3E                            memprfx  ='>'                  ;memory dump prefix
   1176 = 3A                            memsepch =':'                  ;memory dump separator
   1177 = 2E                            memsubch ='.'                  ;memory dump non-print char
   1178 = 0000000000000030                            srinit   =%00110000            ;SR initialization value
                                        ;
                                        ;================================================================================
                                        ;
                                        ;DIRECT PAGE STORAGE
                                        ;
   1184 = 00000080                      reg_pbx  =zeropage             ;PB
   1185 = 00000081                      reg_pcx  =reg_pbx+s_mpupbx     ;PC
   1186 = 00000083                      reg_srx  =reg_pcx+s_mpupcx     ;SR
   1187 = 00000084                      reg_ax   =reg_srx+s_mpusrx     ;.C
   1188 = 00000086                      reg_xx   =reg_ax+s_word        ;.X
   1189 = 00000088                      reg_yx   =reg_xx+s_word        ;.Y
   1190 = 0000008A                      reg_spx  =reg_yx+s_word        ;SP
   1191 = 0000008C                      reg_dpx  =reg_spx+s_mpuspx     ;DP
   1192 = 0000008E                      reg_dbx  =reg_dpx+s_mpudpx     ;DB
                                        ;
                                        ;
                                        ;	general workspace...
                                        ;
   1197 = 0000008F                      addra    =reg_dbx+s_mpudbx     ;address #1
   1198 = 00000092                      addrb    =addra+s_addr         ;address #2
   1199 = 00000095                      faca     =addrb+s_addr         ;primary accumulator
   1200 = 00000099                      facax    =faca+s_pfac          ;extended primary accumulator
   1201 = 0000009D                      facb     =facax+s_pfac         ;secondary accumulator
   1202 = 000000A3                      facc     =facb+s_sfac          ;tertiary accumulator
   1203 = 000000A9                      operand  =facc+s_sfac          ;instruction operand
   1204 = 000000AC                      auxbufix =operand+s_oper       ;auxiliary buffer index
   1205 = 000000AD                      ibufidx  =auxbufix+s_byte      ;input buffer index
   1206 = 000000AE                      bitsdig  =ibufidx+s_byte       ;bits per numeral
   1207 = 000000AF                      numeral  =bitsdig+s_byte       ;numeral buffer
   1208 = 000000B0                      radix    =numeral+s_byte       ;radix index
   1209 = 000000B1                      admodidx =radix+s_byte         ;addressing mode index
   1210 = 000000B2                      charcnt  =admodidx+s_byte      ;character counter
   1211 = 000000B4                      instsize =charcnt+s_word       ;instruction size
   1212 = 000000B6                      mnepck   =instsize+s_word      ;encoded mnemonic
   1213 = 000000B8                      opcode   =mnepck+s_mnepck      ;current opcode
   1214 = 000000B9                      status   =opcode+s_byte        ;I/O status flag
   1215 = 000000BA                      xrtemp   =status+s_byte        ;temp .X storage
   1216 = 000000BB                      eopsize  =xrtemp+s_byte        ;entered operand size
   1217 = 000000BC                      flimflag =eopsize+s_byte       ;forced long immediate...
                                        ;
                                        ;	xx000000
                                        ;	||
                                        ;	|+—————————> 0: .X/.Y = 8 bits
                                        ;	|            1: .X/.Y = 18 bits
                                        ;	+——————————> 0: .A = 8 bits
                                        ;	             1: .A = 16 bits
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	During assembly, FLIMFLAG indicates the operand size used with an immed-
                                        ;	iate mode instruction, thus causing the following disassembly to display
                                        ;	the assembled  operand size.   During disassembly,  FLIMFLAG will mirror
                                        ;	the effect of the most recent REP or SEP instruction.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
   1233 = 000000BD                      iopsize  =flimflag+s_byte      ;operand size
   1234 = 000000BE                      range    =iopsize+s_byte       ;allowable radix range
   1235 = 000000BF                      vopsflag =range+s_byte         ;VOPS & ROPS mode bits
                                        ;
                                        ;
                                        ;	copy/fill workspace (overlaps some of the above)...
                                        ;
   1240 = 000000C0                      mcftwork =vopsflag+s_byte	;faca                 ;start of copy/fill code
   1241 = 000000C1                      mcftopc  =mcftwork+s_byte      ;instruction opcode
   1242 = 000000C2                      mcftbnk  =mcftopc+s_byte       ;banks
                                        ;
                                        ;================================================================================
                                        ;
                                        ;SUPERMON 816 JUMP TABLE
                                        ;
                                                 org	_origin_
                                        ;
                                           		 CPU	W65C816S
                                           		 MEM	16
                                           		 NDX	16
   1254 00C000 A9 D0 00                     		 LDA	#$D0
   1255 00C003 8D 00 70                     		 STA	$7000
                                           		 MEM	8
                                           		 NDX	8
                                        		 CPU	W65C02
   1259 C006 80 02                      JMON     bra mon               ;cold start entry
   1260 C008 80 4F                      JMONBRK  bra monbrk            ;software interrupt intercept
                                        ;
                                        ;================================================================================
                                        ;
                                        ;mon: SUPERMON 816 COLD START
                                        ;
   1266 C00A C2 20                      mon +         .byte $c2,$20
                                        
   1267 C00C AD 02 01                             lda vecbrki           ;BRK vector
   1268 C00F C9 59                    +            cmp #<monbrk
   1268 C011 C0                       +            .byte >monbrk
                                        ;pointing at monitor?
   1269 C012 D0 03                                bne .2            ;yes, ignore cold start
   1270 C014 4C 98 C0                             jmp	monreg			; got a branch out of range here when debugging code
                                        								; was included
   1272 C017                            .2
                                        ;
   1274 C017 8D 05 01                             sta vecbrkia          ;save vector for exit
   1275 C01A A9 AB                       		 LDA	#$AB
   1276 C01C 00                          		 .byte	$00
   1277 C01D 8D 00 70                    		 STA	$7000
   1278 C020 A9 59                    +            lda #<monbrk
   1278 C022 C0                       +            .byte >monbrk
                                        ;Supermon 816 intercepts...
   1279 C023 8D 02 01                             sta vecbrki           ;BRK handler
   1280 C026 E2 30                    +            .byte $e2,$30
                                                        ;8 bit registers
   1281 C028 A2 3F                                ldx #vopsflag-reg_pbx
                                        ;
   1283 C02A 74 80                      .0000010 stz reg_pbx,x         ;clear DP storage
   1284 C02C CA                                   dex
   1285 C02D 10 FB                                bpl .0000010
                                        ;
   1287 C02F A9 AC                       		 LDA	#$AC
   1288 C031 8D 00 70                    		 STA	$7000
   1289 C034 A9 30                                lda #srinit
   1290 C036 85 83                                sta reg_srx           ;status register
   1291 C038 C2 20                    +            .byte $c2,$20
                                                         ;16 bit .A
   1292 C03A A9 FF                    +            lda #<hwstack
   1292 C03C 3F                       +            .byte >hwstack
                                        ;top of hardware stack
   1293 C03D 1B                       +            .byte $1b
                                                           ;set SP
   1294 C03E 7B                       +            .byte $7b
                                                           ;get & save...
   1295 C03F 85 8C                                sta reg_dpx           ;DP register
   1296 C041 A9 AD                       		 LDA	#$AD
   1297 C043 00                          		 .byte	$00
   1298 C044 8D 00 70                    		 STA	$7000
   1299 C047 A9 00                    +            lda #<0
   1299 C049 00                       +            .byte >0
                                        
   1300 C04A E2 20                    +            .byte $e2,$20
                                        
   1301 C04C 4B                       +            .byte $4b
                                        
   1302 C04D 68                                   pla                   ;capture PB &...
   1303 C04E 85 80                                sta reg_pbx           ;set
   1304 C050 8B                       +            .byte $8b
                                        
   1305 C051 68                                   pla                   ;capture DB &...
   1306 C052 85 8E                                sta reg_dbx           ;set
   1307 C054 F4                       +            .byte $f4
   1307 C055 C4 CF                    +            .word mm_entry
                                        ;"...ready..."
   1308 C057 80 22                                bra moncom
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monbrk: SOFTWARE INTERRUPT INTERCEPT
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	This is the entry point taken when a BRK instruction is executed.  It is
                                        ;	assumed that the BRK  handler has pushed the registers to the stack that
                                        ;	are not automatically pushed by the MPU in response to BRK.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
   1320 C059 58                         monbrk   cli                   ;reenable IRQs
   1321 C05A 7A                                   ply                   ;recover registers
   1322 C05B FA                                   plx
   1323 C05C 68                                   pla
   1324 C05D C2 30                    +            .byte $c2,$30
                                                         ;store 16 bit registers
   1325 C05F 85 84                                sta reg_ax            ;.A
   1326 C061 86 86                                stx reg_xx            ;.X
   1327 C063 84 88                                sty reg_yx            ;.Y
   1328 C065 E2 10                    +            .byte $e2,$10
                                                        ;8 bit index registers
   1329 C067 68                                   pla                   ;get DP &...
   1330 C068 85 8C                                sta reg_dpx           ;store
   1331 C06A FA                                   plx                   ;get DB &...
   1332 C06B 86 8E                                stx reg_dbx           ;store
   1333 C06D FA                                   plx                   ;get SR &...
   1334 C06E 86 83                                stx reg_srx           ;store
   1335 C070 68                                   pla                   ;get PC &...
   1336 C071 85 81                                sta reg_pcx           ;store
   1337 C073 E2 20                    +            .byte $e2,$20
                                        
   1338 C075 68                                   pla                   ;get PB &...
   1339 C076 85 80                                sta reg_pbx           ;store
   1340 C078 F4                       +            .byte $f4
   1340 C079 B9 CF                    +            .word mm_brk
                                        ;"*BRK"
                                        ;
                                        ;================================================================================
                                        ;
                                        ;moncom: COMMON ENTRY POINT
                                        ;
                                        ;	——————————————————————————————————————
                                        ;	DO NOT directly call this entry point!
                                        ;	——————————————————————————————————————
                                        ;
   1350 C07B                            moncom   
   1351 C07B A9 AE                       		 LDA	#$AE
   1352 C07D 8D 00 70                    		 STA	$7000
   1353 C080 20 B9 C7                    		 jsr sprint            ;print heading
   1354 C083 A9 AF                       		 LDA	#$AF
   1355 C085 8D 00 70                    		 STA	$7000
   1356 C088 C2 20                    +            .byte $c2,$20
                                        
   1357 C08A 3B                       +            .byte $3b
                                                           ;get SP &...
   1358 C08B 85 8A                                sta reg_spx           ;store
   1359 C08D A9 B0                       		 LDA	#$B0
   1360 C08F 00                          		 .byte	$00
   1361 C090 8D 00 70                    		 STA	$7000
   1362 C093 C2 FF                    +            .byte $c2,%11111111
                                        ;clear SR &...
   1363 C095 E2 30                    +            .byte $e2,srinit
                                        ;set default state
   1364 C097 38                                   sec                   ;see next
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monreg: DISPLAY MPU REGISTERS
                                        ;
                                        ;	—————————
                                        ;	syntax: R
                                        ;	—————————
                                        ;
   1374 C098 B0 03                      monreg   bcs .0000010          ;okay to proceed
                                        ;
   1376 C09A 4C 24 C1                             jmp monerr            ;error if called with a parm
                                        ;
   1378 C09D F4                         .0000010 +         .byte $f4
   1378 C09E EF CF                    +            .word mm_regs
                                        
   1379 C0A0 20 B9 C7                             jsr sprint            ;display heading
                                        ;
                                        ;
                                        ;	display program bank & counter...
                                        ;
   1384 C0A3 A5 80                                lda reg_pbx           ;PB
   1385 C0A5 20 8D C7                             jsr dpyhex            ;display as hex ASCII
   1386 C0A8 20 B4 C7                             jsr printspc          ;inter-field space
   1387 C0AB C2 20                    +            .byte $c2,$20
                                        
   1388 C0AD A5 81                                lda reg_pcx
   1389 C0AF E2 20                    +            .byte $e2,$20
                                        
   1390 C0B1 20 7D C7                             jsr dpyhexw           ;display PC
   1391 C0B4 A2 02                                ldx #2
   1392 C0B6 20 97 C7                             jsr multspc           ;inter-field spacing
                                        ;
                                        ;
                                        ;	display SR in bitwise fashion...
                                        ;
   1397 C0B9 A6 83                                ldx reg_srx           ;SR
   1398 C0BB A0 08                                ldy #s_bibyte         ;bits in a byte
                                        ;
   1400 C0BD 8A                         .0000020 txa                   ;remaining SR bits
   1401 C0BE 0A                                   asl                   ;grab one of them
   1402 C0BF AA                                   tax                   ;save remainder
   1403 C0C0 A9 30                                lda #'0'              ;a clear bit but...
   1404 C0C2 69 00                                adc #0                ;adjust if set &...
   1405 C0C4 20 06 F4                             jsr putcha            ;print
   1406 C0C7 88                                   dey                   ;bit processed
   1407 C0C8 D0 F3                                bne .0000020          ;do another
                                        ;
                                        ;
                                        ;	display .C, .X, .Y, SP & DP...
                                        ;
   1412 C0CA 20 B4 C7                   .0000030 jsr printspc          ;spacing
   1413 C0CD C2 20                    +            .byte $c2,$20
                                        
   1414 C0CF B9 84 00                             lda reg_ax,y          ;get register value
   1415 C0D2 E2 20                    +            .byte $e2,$20
                                        
   1416 C0D4 20 7D C7                             jsr dpyhexw           ;convert & display
                                        ;         .rept s_word
   1418 C0D7 C8                                     iny
   1419 C0D8 C8                                     iny
                                        ;         .endr
   1421 C0D9 C0 0A                                cpy #reg_dbx-reg_ax
   1422 C0DB 90 ED                                bcc .0000030          ;next
                                        ;
                                        ;
                                        ;	display DB...
                                        ;
   1427 C0DD 20 B4 C7                             jsr printspc          ;more spacing
   1428 C0E0 A5 8E                                lda reg_dbx           ;get DB &...
   1429 C0E2 20 8D C7                             jsr dpyhex            ;display it
                                               
                                        ;================================================================================
                                        ;
                                        ;monce: COMMAND EXECUTIVE
                                        ;	
   1435 C0E5 E2 20                      monce +         .byte $e2,$20
                                        
   1436 C0E7 A9 00                                lda #0                ;default buffer index
                                        ;
   1438 C0E9 E2 30                      moncea +         .byte $e2,$30
                                                        ;alternate entry point
   1439 C0EB 85 AD                                sta ibufidx           ;(re)set buffer index
   1440 C0ED F4                       +            .byte $f4
   1440 C0EE E6 CF                    +            .word mm_prmpt
                                        
   1441 C0F0 20 B9 C7                             jsr sprint            ;display input prompt
   1442 C0F3 20 D5 CB                             jsr input             ;await some input
                                        ;
   1444 C0F6                            .0000010:
   1445 C0F6 20 33 CC                    		jsr getcharc          ;read from buffer
   1446 C0F9 F0 EA                                beq monce             ;terminator, just loop
                                        ;
   1448 C0FB C9 20                                cmp #a_blank
   1449 C0FD F0 F7                                beq .0000010          ;strip leading blanks
                                        ;
   1451 C0FF A2 0C                                ldx #n_mpctab-1       ;number of primary commands
                                        ;
   1453 C101 DD 50 CC                   .0000020 cmp mpctab,x          ;search primary command list
   1454 C104 D0 0E                                bne .0000030
                                        ;
   1456 C106 8A                                   txa                   ;get index
   1457 C107 0A                                   asl                   ;double for offset
   1458 C108 AA                                   tax
   1459 C109 C2 20                    +            .byte $c2,$20
                                        
   1460 C10B BD 5D CC                             lda mpcextab,x        ;command address -1
   1461 C10E 48                                   pha                   ;prime the stack
   1462 C10F E2 20                    +            .byte $e2,$20
                                        
   1463 C111 4C 7B CA                             jmp getparm           ;evaluate parm & execute command
                                        ;
   1465 C114 CA                         .0000030 dex
   1466 C115 10 EA                                bpl .0000020          ;continue searching primary commands
                                        ;
   1468 C117 A2 03                                ldx #n_radix-1        ;number of radices
                                        ;
   1470 C119 DD 8B CC                   .0000040 cmp radxtab,x         ;search conversion command list
   1471 C11C D0 03                                bne .0000050
                                        ;
   1473 C11E 4C 6C C5                             jmp monenv            ;convert & display parameter
                                        ;
   1475 C121 CA                         .0000050 dex
   1476 C122 10 F5                                bpl .0000040
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monerr: COMMON ERROR HANDLER
                                        ;
   1482 C124 E2 30                      monerr +         .byte $e2,$30
                                                        ;8 bit registers
                                        ;
   1484 C126 20 64 C7                   monerraa jsr dpyerr            ;indicate an error &...
   1485 C129 80 BA                                bra monce             ;return to input loop
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monasc: ASSEMBLE CODE
                                        ;
                                        ;	———————————————————————————————————————————————————————————————————————
                                        ;	syntax: A <addr> <mnemonic> [<argument>]
                                        ;
                                        ;	After a line of code has been successfully assembled it will be disass-
                                        ;	embled & displayed,  & the monitor will prompt with the next address to
                                        ;	which code may be assembled.
                                        ;	———————————————————————————————————————————————————————————————————————
                                        ;
   1499 C12B 90 03                      monasc   bcc .0000020          ;assembly address entered
                                        ;
   1501 C12D 4C 24 C1                   .0000010 jmp monerr            ;terminate w/error
                                        ;
                                        ;
                                        ;	evaluate assembly address...
                                        ;
   1506 C130 20 67 CA                   .0000020 jsr facasize          ;check address...
   1507 C133 C9 04                                cmp #s_dword          ;range
   1508 C135 B0 F6                                bcs .0000010          ;out of range — error
                                        ;
   1510 C137 20 49 CA                             jsr facaddra          ;store assembly address
                                        ;
                                        ;
                                        ;	initialize workspace...
                                        ;
   1515 C13A A2 1F                                ldx #s_auxbuf-s_byte
                                        ;
   1517 C13C 9E 46 02                   .0000030 stz auxbuf,x          ;clear addressing mode buffer
   1518 C13F CA                                   dex
   1519 C140 D0 FA                                bne .0000030
                                        ;
   1521 C142 A9 20                                lda #a_blank
   1522 C144 8D 46 02                             sta auxbuf            ;preamble placeholder
   1523 C147 20 B8 C9                             jsr clroper           ;clear operand
   1524 C14A 64 AC                                stz auxbufix          ;reset addressing mode index
   1525 C14C 64 BC                                stz flimflag          ;clear forced long immediate
   1526 C14E 64 B6                                stz mnepck            ;clear encoded...
   1527 C150 64 B7                                stz mnepck+s_byte     ;mnemonic workspace
   1528 C152 64 BF                                stz vopsflag          ;clear 8/16 or relative flag
                                        ;
                                        ;
                                        ;	encode mnemonic...
                                        ;
   1533 C154 A0 03                                ldy #s_mnemon         ;expected mnemonic size
                                        ;
   1535 C156 20 C6 CB                   .0000040 jsr getcharw          ;get from buffer wo/whitespace
   1536 C159 D0 0A                                bne .0000060          ;gotten
                                        ;
   1538 C15B C0 03                                cpy #s_mnemon         ;any input at all?
   1539 C15D 90 03                                bcc .0000050          ;yes
                                        ;
   1541 C15F 4C E5 C0                             jmp monce             ;no, abort further assembly
                                        ;
   1543 C162 4C 02 C3                   .0000050 jmp monasc10          ;incomplete mnemonic — error
                                        ;
   1545 C165 38                         .0000060 sec
   1546 C166 E9 3F                                sbc #a_mnecvt         ;ASCII to binary factor
   1547 C168 A2 05                                ldx #n_shfenc         ;shifts required to encode
                                        ;
   1549 C16A 4A                         .0000070 lsr                   ;shift out a bit...
   1550 C16B 66 B7                                ror mnepck+s_byte     ;into...
   1551 C16D 66 B6                                ror mnepck            ;encoded mnemonic
   1552 C16F CA                                   dex
   1553 C170 D0 F8                                bne .0000070          ;next bit
                                        ;
   1555 C172 88                                   dey
   1556 C173 D0 E1                                bne .0000040          ;get next char
                                        ;
                                        ;
                                        ;	test for copy instruction...
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	The MVN & MVP instructions accept two operands & hence have an irregular
                                        ;	syntax.  Therefore, special handling is necessary to assemble either of
                                        ;	these instructions.
                                        ;
                                        ;	The official WDC syntax has the programmer entering a pair of 24 bit ad-
                                        ;	dresses as operands, with the assembler isolating bits 16-23 to	use as
                                        ;	operands.  This formality has been dispensed with in this monitor & the
                                        ;	operands are expected to be 8 bit bank values.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
   1571 C175 C2 20                    +            .byte $c2,$20
                                                         ;16 bit load
   1572 C177 A5 B6                                lda mnepck            ;packed menmonic
   1573 C179 A2 54                                ldx #opc_mvn          ;MVN opcode
   1574 C17B C9 DC                    +            cmp #<mne_mvn
   1574 C17D 7D                       +            .byte >mne_mvn
                                        ;is it MVN?
   1575 C17E F0 07                                beq monasc01          ;yes
                                        ;
   1577 C180 A2 44                                ldx #opc_mvp          ;MVP opcode
   1578 C182 C9 DC                    +            cmp #<mne_mvp
   1578 C184 8D                       +            .byte >mne_mvp
                                        ;is it MVP?
   1579 C185 D0 30                                bne monasc02          ;no
                                        ;
                                        ;
                                        ;	assemble copy instruction...
                                        ;
   1584 C187 86 B8                      monasc01 stx opcode            ;store relevant opcode
   1585 C189 E2 20                    +            .byte $e2,$20
                                        
   1586 C18B 20 D7 CA                             jsr instdata          ;get instruction data
   1587 C18E 86 BB                                stx eopsize           ;effective operand size
   1588 C190 E8                                   inx
   1589 C191 86 B4                                stx instsize          ;instruction size
   1590 C193 A2 01                                ldx #s_oper-s_word    ;operand index
   1591 C195 86 BA                                stx xrtemp            ;set it
                                        ;
   1593 C197 20 D2 C7                   .0000010 jsr ascbin            ;evaluate bank number
   1594 C19A B0 50                                bcs monasc04          ;conversion error
                                        ;
   1596 C19C F0 4E                                beq monasc04          ;nothing returned — error
                                        ;
   1598 C19E 20 67 CA                             jsr facasize          ;bank must be...
   1599 C1A1 C9 02                                cmp #s_word           ;8 bits
   1600 C1A3 B0 47                                bcs monasc04          ;it isn't — error
                                        ;
   1602 C1A5 A5 95                                lda faca              ;bank
   1603 C1A7 A6 BA                                ldx xrtemp            ;operand index
   1604 C1A9 95 A9                                sta operand,x         ;store
   1605 C1AB C6 BA                                dec xrtemp            ;index=index-1
   1606 C1AD 10 E8                                bpl .0000010          ;get destination bank
                                        ;
   1608 C1AF 20 68 CB                             jsr getcharr          ;should be no more input
   1609 C1B2 D0 38                                bne monasc04          ;there is — error
                                        ;
   1611 C1B4 4C B2 C2                             jmp monasc08          ;finish MVN/MVP assembly 
                                        ;
                                        ;
                                        ;	continue with normal assembly...
                                        ;
   1616 C1B7 E2 20                      monasc02 +         .byte $e2,$20
                                                        ;back to 8 bits
                                        ;
   1618 C1B9 20 C6 CB                   monasc03 jsr getcharw          ;get next char
   1619 C1BC F0 3D                                beq monasc06          ;EOI, no argument
                                        ;
   1621 C1BE C9 21                                cmp #amp_flim
   1622 C1C0 D0 0A                                bne .0000010          ;no forced long immediate
                                        ;
   1624 C1C2 A5 BC                                lda flimflag          ;FLIM already set?
   1625 C1C4 D0 26                                bne monasc04          ;yes — error
                                        ;
   1627 C1C6 A9 C0                                lda #flimmask
   1628 C1C8 85 BC                                sta flimflag          ;set flag &...
   1629 C1CA 80 ED                                bra monasc03          ;get next char
                                        ;
   1631 C1CC C9 23                      .0000010 cmp #amp_imm          ;immediate mode?
   1632 C1CE F0 08                                beq .0000020          ;yes
                                        ;
   1634 C1D0 C9 28                                cmp #amp_ind          ;indirect mode?
   1635 C1D2 F0 04                                beq .0000020          ;yes
                                        ;
   1637 C1D4 C9 5B                                cmp #amp_indl         ;indirect long mode?
   1638 C1D6 D0 07                                bne .0000030          ;no
                                        ;
   1640 C1D8 8D 46 02                   .0000020 sta auxbuf            ;set addressing mode preamble
   1641 C1DB E6 AC                                inc auxbufix          ;bump aux buffer index &...
   1642 C1DD 80 02                                bra .0000040          ;evaluate operand
                                        ;
   1644 C1DF C6 AD                      .0000030 dec ibufidx           ;position back to char
                                        ;
   1646 C1E1 20 D2 C7                   .0000040 jsr ascbin            ;evaluate operand
   1647 C1E4 D0 09                                bne monasc05          ;evaluated
                                        ;
   1649 C1E6 B0 04                                bcs monasc04          ;conversion error
                                        ;
   1651 C1E8 A5 AC                                lda auxbufix          ;no operand...any preamble?
   1652 C1EA F0 0F                                beq monasc06          ;no, syntax is okay so far
                                        ;
   1654 C1EC 4C 02 C3                   monasc04 jmp monasc10          ;abort w/error
                                        ;
   1656 C1EF 20 67 CA                   monasc05 jsr facasize          ;size operand
   1657 C1F2 C9 04                                cmp #s_dword          ;max is 24 bits
   1658 C1F4 B0 F6                                bcs monasc04          ;too big
                                        ;
   1660 C1F6 85 BB                                sta eopsize           ;save operand size
   1661 C1F8 20 5D CA                             jsr facaoper          ;store operand
                                        ;
   1663 C1FB C6 AD                      monasc06 dec ibufidx           ;back to last char
   1664 C1FD A6 AC                                ldx auxbufix          ;mode buffer index
   1665 C1FF D0 01                                bne .0000010          ;preamble in buffer
                                        ;
   1667 C201 E8                                   inx                   ;step past preamble position
                                        ;
   1669 C202 20 33 CC                   .0000010 jsr getcharc          ;get a char w/forced UC
   1670 C205 F0 0A                                beq .0000030          ;EOI
                                        ;
   1672 C207 E0 20                                cpx #s_auxbuf         ;mode buffer full?
   1673 C209 B0 E1                                bcs monasc04          ;yes, too much input
                                        ;
   1675 C20B 9D 46 02                   .0000020 sta auxbuf,x          ;store for comparison
   1676 C20E E8                                   inx
   1677 C20F D0 F1                                bne .0000010
                                        ;
                                        ;
                                        ;	evaluate mnemonic...
                                        ;
   1682 C211 A2 5B                      .0000030 ldx #n_mnemon-1       ;starting mnemonic index
                                        ;
   1684 C213 8A                         monasc07 txa                   ;convert index...
   1685 C214 0A                                   asl                   ;to offset
   1686 C215 A8                                   tay                   ;now mnemonic table index
   1687 C216 C2 20                    +            .byte $c2,$20
                                                         ;16 bit compare
   1688 C218 B9 98 CC                             lda mnetab,y          ;get mnemonic from table
   1689 C21B C5 B6                                cmp mnepck            ;compare to entered mnemonic
   1690 C21D E2 20                    +            .byte $e2,$20
                                                        ;back to 8 bits
   1691 C21F F0 05                                beq .0000020          ;match
                                        ;
   1693 C221 CA                         .0000010 dex                   ;try next mnemonic
   1694 C222 30 C8                                bmi monasc04          ;unknown mnemonic — error
                                        ;
   1696 C224 80 ED                                bra monasc07          ;keep going
                                        ;
   1698 C226 86 B6                      .0000020 stx mnepck            ;save mnemonic index
   1699 C228 8A                                   txa
   1700 C229 A2 00                                ldx #0                ;trial opcode
                                        ;
   1702 C22B DD 50 CD                   .0000030 cmp mnetabix,x        ;search index table...
   1703 C22E F0 05                                beq .0000050          ;for a match
                                        ;
   1705 C230 E8                         .0000040 inx                   ;keep going until we...
   1706 C231 D0 F8                                bne .0000030          ;search entire table
                                        ;
   1708 C233 80 B7                                bra monasc04          ;this shouldn't happen!
                                        ;
                                        ;	—————————————————————————————————————————————————————————————————————
                                        ;	If the mnemonic index table search fails then there is a coding error
                                        ;	somewhere, as every entry in the mnemonic table is supposed to have a
                                        ;	matching cardinal index.
                                        ;	—————————————————————————————————————————————————————————————————————
                                        ;
                                        ;
                                        ;	evaluate addressing mode...
                                        ;
   1719 C235 86 B8                      .0000050 stx opcode            ;save trial opcode
   1720 C237 20 D7 CA                             jsr instdata          ;get related instruction data
   1721 C23A 85 BF                                sta vopsflag          ;save 8/16 or relative flag
   1722 C23C 86 BD                                stx iopsize           ;operand size
   1723 C23E E8                                   inx
   1724 C23F 86 B4                                stx instsize          ;instruction size
   1725 C241 A6 B8                                ldx opcode            ;recover trial opcode
   1726 C243 98                                   tya                   ;addressing mode
   1727 C244 0A                                   asl                   ;create table index
   1728 C245 A8                                   tay
   1729 C246 C2 20                    +            .byte $c2,$20
                                        
   1730 C248 B9 54 CF                             lda ms_lutab,y        ;mode lookup table
   1731 C24B 85 92                                sta addrb             ;set pointer
   1732 C24D E2 20                    +            .byte $e2,$20
                                        
   1733 C24F A0 00                                ldy #0
                                        ;
   1735 C251 B1 92                      .0000060 lda (addrb),y         ;table addressing mode
   1736 C253 D9 46 02                             cmp auxbuf,y          ;entered addressing mode
   1737 C256 F0 04                                beq .0000080          ;okay so far
                                        ;
   1739 C258 A5 B6                      .0000070 lda mnepck            ;reload mnemonic index        
   1740 C25A 80 D4                                bra .0000040          ;wrong opcode for addresing mode
                                        ;
   1742 C25C 09 00                      .0000080 ora #0                ;last char the terminator?
   1743 C25E F0 03                                beq .0000090          ;yes, evaluate operand
                                        ;
   1745 C260 C8                                   iny
   1746 C261 80 EE                                bra .0000060          ;keep testing
                                        ;
                                        ;
                                        ;	evaluate operand...
                                        ;
   1751 C263 A5 BB                      .0000090 lda eopsize           ;entered operand size
   1752 C265 D0 06                                bne .0000100          ;non-zero
                                        ;
   1754 C267 05 BD                                ora iopsize           ;instruction operand size
   1755 C269 D0 ED                                bne .0000070          ;wrong opcode — keep trying
                                        ;
   1757 C26B 80 45                                bra monasc08          ;assemble instruction
                                        ;
   1759 C26D 24 BF                      .0000100 bit vopsflag          ;is this a branch?
   1760 C26F 70 3A                                bvs .0000160          ;yes, evaluate
                                        ;
   1762 C271 A5 BD                                lda iopsize           ;instruction operand size
   1763 C273 24 BF                                bit vopsflag          ;variable size operand allowed?
   1764 C275 30 15                                bmi .0000130          ;yes
                                        ;
   1766 C277 24 BC                                bit flimflag          ;was forced immediate set?
   1767 C279 10 03                                bpl .0000110          ;no
                                        ;         
   1769 C27B 4C 02 C3                             jmp monasc10          ;yes — error
                                        ;
   1771 C27E C5 BB                      .0000110 cmp eopsize           ;entered operand size
   1772 C280 90 D6                                bcc .0000070          ;operand too big
                                        ;
   1774 C282 85 BB                                sta eopsize           ;new operand size
   1775 C284 80 2C                                bra monasc08          ;assemble, otherwise...
                                        ;
   1777 C286 C5 BB                      .0000120 cmp eopsize           ;exact size match required
   1778 C288 D0 CE                                bne .0000070          ;mismatch — wrong opcode
                                        ;
   1780 C28A 80 26                                bra monasc08          ;assemble
                                        ;
                                        ;
                                        ;	process variable size immediate mode operand...
                                        ;
   1785 C28C A6 BB                      .0000130 ldx eopsize           ;entered operand size
   1786 C28E E0 03                                cpx #s_xword          ;check size
   1787 C290 B0 70                                bcs monasc10          ;too big — error
                                        ;
   1789 C292 24 BC                                bit flimflag          ;forced long immediate?
   1790 C294 10 06                                bpl .0000140          ;no
                                        ;
   1792 C296 A2 02                                ldx #s_word           ;promote operand size to...
   1793 C298 86 BB                                stx eopsize           ;16 bits
   1794 C29A 80 08                                bra .0000150
                                        ;
   1796 C29C E0 02                      .0000140 cpx #s_word           ;16 bits?
   1797 C29E D0 04                                bne .0000150          ;no
                                        ;
   1799 C2A0 A0 C0                                ldy #flimmask         ;yes so force long...
   1800 C2A2 84 BC                                sty flimflag          ;immediate disassembly
                                        ;
   1802 C2A4 1A                         .0000150 ina                   ;new instruction operand size
   1803 C2A5 C5 BB                                cmp eopsize           ;compare against operand size
   1804 C2A7 90 AF                                bcc .0000070          ;mismatch — can't assemble
                                        ;
   1806 C2A9 80 07                                bra monasc08          ;okay, assemble
                                        ;
                                        ;
                                        ;	process relative branch...
                                        ;
   1811 C2AB 20 23 CB                   .0000160 jsr targoff           ;compute branch offset
   1812 C2AE B0 52                                bcs monasc10          ;branch out of range
                                        ;
   1814 C2B0 85 BB                                sta eopsize           ;effective operand size
                                        ;
                                        ;
                                        ;	assemble instruction...
                                        ;
   1819 C2B2 A5 B8                      monasc08 lda opcode            ;opcode
   1820 C2B4 87 8F                    +            .byte $87,addra
                                        ;store at assembly address
   1821 C2B6 A6 BB                                ldx eopsize           ;any operand to process?
   1822 C2B8 F0 09                                beq .0000020          ;no
                                        ;
   1824 C2BA 9B                       +            .byte $9b
                                                           ;also storage offset
                                        ;
   1826 C2BB CA                         .0000010 dex
   1827 C2BC B5 A9                                lda operand,x         ;get operand byte &...
   1828 C2BE 97 8F                    +            .byte $97,addra
                                        ;poke into memory
   1829 C2C0 88                                   dey
   1830 C2C1 D0 F8                                bne .0000010          ;next
                                        ;
   1832 C2C3 A9 0D                      .0000020 lda #a_cr
   1833 C2C5 20 06 F4                             jsr putcha            ;return to left margin
   1834 C2C8 A9 41                                lda #asmprfx          ;assembly prefix
   1835 C2CA 20 0D C6                             jsr dpycodaa          ;disassemble & display
                                        ;
                                        ;
                                        ;	prompt for next instruction...
                                        ;
   1840 C2CD A9 20                      monasc09 lda #a_blank
   1841 C2CF A2 08                                ldx #ascprmct-1
                                        ;
   1843 C2D1 9D 00 02                   .0000010 sta ibuffer,x         ;prepare buffer for...
   1844 C2D4 CA                                   dex                   ;next instruction
   1845 C2D5 10 FA                                bpl .0000010
                                        ;
   1847 C2D7 A9 41                                lda #asmprfx          ;assemble code...
   1848 C2D9 8D 00 02                             sta ibuffer           ;prompt prefix
   1849 C2DC A5 91                                lda addra+s_word      ;next instruction address bank
   1850 C2DE 20 24 C9                             jsr binhex            ;convert to ASCII
   1851 C2E1 8D 02 02                             sta ibuffer+apadrbkh  ;store MSN in buffer
   1852 C2E4 8E 03 02                             stx ibuffer+apadrbkl  ;store LSN in buffer
   1853 C2E7 A5 90                                lda addra+s_byte      ;next instruction address MSB
   1854 C2E9 20 24 C9                             jsr binhex
   1855 C2EC 8D 04 02                             sta ibuffer+apadrmbh
   1856 C2EF 8E 05 02                             stx ibuffer+apadrmbl
   1857 C2F2 A5 8F                                lda addra             ;next instruction address LSB
   1858 C2F4 20 24 C9                             jsr binhex
   1859 C2F7 8D 06 02                             sta ibuffer+apadrlbh
   1860 C2FA 8E 07 02                             stx ibuffer+apadrlbl
   1861 C2FD A9 09                                lda #ascprmct         ;effective input count
   1862 C2FF 4C E9 C0                             jmp moncea            ;reenter input loop
                                        ;
                                        ;
                                        ;	process assembly error...
                                        ;
   1867 C302 20 64 C7                   monasc10 jsr dpyerr            ;indicate error &...
   1868 C305 80 C6                                bra monasc09          ;prompt w/same assembly address
                                        ;
                                        ;================================================================================
                                        ;
                                        ;mondsc: DISASSEMBLE CODE
                                        ;
                                        ;	—————————————————————————————
                                        ;	syntax: D [<addr1> [<addr2>]]
                                        ;	—————————————————————————————
                                        ;
   1878 C307 B0 11                      mondsc   bcs .0000010          ;no parameters
                                        ;
   1880 C309 64 BC                                stz flimflag          ;reset to 8 bit mode
   1881 C30B 20 67 CA                             jsr facasize          ;check starting...
   1882 C30E C9 04                                cmp #s_dword          ;address
   1883 C310 B0 46                                bcs .0000050          ;out of range — error
                                        ;
   1885 C312 20 49 CA                             jsr facaddra          ;copy starting address
   1886 C315 20 7B CA                             jsr getparm           ;get ending address
   1887 C318 90 17                                bcc .0000020          ;gotten
                                        ;
   1889 C31A 20 37 C9                   .0000010 jsr clrfaca           ;clear accumulator
   1890 C31D C2 20                    +            .byte $c2,$20
                                        
   1891 C31F 18                                   clc
   1892 C320 A5 8F                                lda addra             ;starting address
   1893 C322 69 15                    +            adc #<n_dbytes
   1893 C324 00                       +            .byte >n_dbytes
                                        ;default bytes
   1894 C325 85 95                                sta faca              ;effective ending address
   1895 C327 E2 20                    +            .byte $e2,$20
                                        
   1896 C329 A5 91                                lda addra+s_word      ;starting bank
   1897 C32B 69 00                                adc #0
   1898 C32D 85 97                                sta faca+s_word       ;effective ending bank
   1899 C32F B0 27                                bcs .0000050          ;end address > $FFFFFF
                                        ;
   1901 C331 20 67 CA                   .0000020 jsr facasize          ;check ending...
   1902 C334 C9 04                                cmp #s_dword          ;address
   1903 C336 B0 20                                bcs .0000050          ;out of range — error
                                        ;
   1905 C338 20 53 CA                             jsr facaddrb          ;set ending address
   1906 C33B 20 7B CA                             jsr getparm           ;check for excess input
   1907 C33E 90 18                                bcc .0000050          ;present — error
                                        ;
   1909 C340 20 A3 C9                             jsr calccnt           ;calculate bytes
   1910 C343 90 13                                bcc .0000050          ;end < start
                                        ;
   1912 C345 20 45 CC                   .0000030 jsr teststop          ;test for display stop
   1913 C348 B0 0B                                bcs .0000040          ;stopped
                                        ;
   1915 C34A 20 A4 C7                             jsr newline           ;next line
   1916 C34D 20 0B C6                             jsr dpycod            ;disassemble & display
   1917 C350 20 FF C9                             jsr decdcnt           ;decrement byte count
   1918 C353 90 F0                                bcc .0000030          ;not done
                                        ;
   1920 C355 4C E5 C0                   .0000040 jmp monce             ;back to main loop
                                        ;
   1922 C358 4C 24 C1                   .0000050 jmp monerr            ;address range error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monjmp: EXECUTE CODE
                                        ;
                                        ;	—————————————————————————————————————————————————————————————
                                        ;	syntax: G [<addr>]
                                        ;
                                        ;	If no address is specified, the current values in the PB & PC
                                        ;	shadow registers are used.
                                        ;	—————————————————————————————————————————————————————————————
                                        ;
   1935 C35B 20 0C CB                   monjmp   jsr setxaddr          ;set execution address
   1936 C35E B0 29                                bcs monjmpab          ;out of range — error
                                        ;
   1938 C360 20 7B CA                             jsr getparm           ;check for excess input
   1939 C363 90 24                                bcc monjmpab          ;too much input — error
                                        ;
   1941 C365 C2 20                    +            .byte $c2,$20
                                                         ;16 bit .A
   1942 C367 A5 8A                                lda reg_spx
   1943 C369 1B                       +            .byte $1b
                                                           ;restore SP
                                        ;
   1945 C36A E2 20                      monjmpaa +         .byte $e2,$20
                                        
   1946 C36C A5 80                                lda reg_pbx
   1947 C36E 48                                   pha                   ;restore PB
   1948 C36F C2 20                    +            .byte $c2,$20
                                        
   1949 C371 A5 81                                lda reg_pcx
   1950 C373 48                                   pha                   ;restore PC
   1951 C374 E2 20                    +            .byte $e2,$20
                                        
   1952 C376 A5 83                                lda reg_srx
   1953 C378 48                                   pha                   ;restore SR
   1954 C379 A5 8E                                lda reg_dbx
   1955 C37B 48                                   pha
   1956 C37C AB                       +            .byte $ab
                                                           ;restore DB
   1957 C37D C2 30                    +            .byte $c2,$30
                                        
   1958 C37F A5 8C                                lda reg_dpx
   1959 C381 5B                       +            .byte $5b
                                                           ;restore DP
   1960 C382 A5 84                                lda reg_ax            ;restore .C
   1961 C384 A6 86                                ldx reg_xx            ;restore .X
   1962 C386 A4 88                                ldy reg_yx            ;restore .Y
   1963 C388 40                                   rti                   ;execute code
                                        ;
   1965 C389 4C 24 C1                   monjmpab jmp monerr            ;error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monjsr: EXECUTE CODE AS SUBROUTINE
                                        ;
                                        ;	————————————————————————————————————————————————————————————
                                        ;	syntax: J [<addr>]
                                        ;
                                        ;	If no address is specified the current values in the PB & PC
                                        ;	shadow registers are used.   An RTS at the end of the called
                                        ;	subroutine will return control to the monitor  provided  the
                                        ;	stack remains in balance.
                                        ;	————————————————————————————————————————————————————————————
                                        ;
   1980 C38C 20 0C CB                   monjsr   jsr setxaddr          ;set execution address
   1981 C38F B0 F8                                bcs monjmpab          ;out of range — error
                                        ;
   1983 C391 20 7B CA                             jsr getparm           ;check for excess input
   1984 C394 90 F3                                bcc monjmpab          ;too much input — error
                                        ;
   1986 C396 C2 20                    +            .byte $c2,$20
                                        
   1987 C398 A5 8A                                lda reg_spx
   1988 C39A 1B                       +            .byte $1b
                                                           ;restore SP &...
   1989 C39B 20 6A C3                             jsr monjmpaa          ;call subroutine
   1990 C39E 08                                   php                   ;push SR
   1991 C39F C2 30                    +            .byte $c2,$30
                                        
   1992 C3A1 85 84                                sta reg_ax            ;save...
   1993 C3A3 86 86                                stx reg_xx            ;register...
   1994 C3A5 84 88                                sty reg_yx            ;returns
   1995 C3A7 E2 10                    +            .byte $e2,$10
                                                        ;8 bit .X & .Y
   1996 C3A9 FA                                   plx                   ;get & save...
   1997 C3AA 86 83                                stx reg_srx           ;return SR
   1998 C3AC 3B                       +            .byte $3b
                                                           ;get & save...
   1999 C3AD 85 8A                                sta reg_spx           ;return SP
   2000 C3AF 7B                       +            .byte $7b
                                                           ;get & save...
   2001 C3B0 85 8C                                sta reg_dpx           ;DP pointer
   2002 C3B2 E2 20                    +            .byte $e2,$20
                                                        ;8 bit .A
   2003 C3B4 4B                       +            .byte $4b
                                                           ;get &...
   2004 C3B5 68                                   pla                   ;save...
   2005 C3B6 85 80                                sta reg_pbx           ;return PB
   2006 C3B8 8B                       +            .byte $8b
                                                           ;get &...
   2007 C3B9 68                                   pla                   ;save...
   2008 C3BA 85 8E                                sta reg_dbx           ;return DB
   2009 C3BC F4                       +            .byte $f4
   2009 C3BD 25 D0                    +            .word mm_rts
                                        ;"*RET"
   2010 C3BF 4C 7B C0                             jmp moncom            ;return to monitor
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monchm: CHANGE and/or DUMP MEMORY
                                        ;
                                        ;	————————————————————————————————————————————
                                        ;	syntax: > [<addr> <operand> [<operand>]...]
                                        ;
                                        ;	> <addr> without operands will dump 16 bytes
                                        ;	of memory, starting at <addr>.
                                        ;	————————————————————————————————————————————
                                        ;
   2023 C3C2 B0 23                      monchm   bcs .0000030          ;no address given — quit
                                        ;
   2025 C3C4 20 67 CA                             jsr facasize          ;size address
   2026 C3C7 C9 04                                cmp #s_dword
   2027 C3C9 B0 1F                                bcs .0000040          ;address out of range — error
                                        ;
   2029 C3CB 20 49 CA                             jsr facaddra          ;set starting address
   2030 C3CE 20 7C CB                             jsr getpat            ;evaluate change pattern
   2031 C3D1 90 04                                bcc .0000010          ;entered
                                        ;
   2033 C3D3 10 0C                                bpl .0000020          ;not entered
                                        ;
   2035 C3D5 80 13                                bra .0000040          ;evaluation error
                                        ;
   2037 C3D7 88                         .0000010 dey                   ;next byte
   2038 C3D8 30 07                                bmi .0000020          ;done
                                        ;
   2040 C3DA B9 46 02                             lda auxbuf,y          ;write pattern...
   2041 C3DD 97 8F                    +            .byte $97,addra
                                        ;to memory
   2042 C3DF 80 F6                                bra .0000010          ;next
                                        ;
   2044 C3E1 20 A4 C7                   .0000020 jsr newline           ;next line
   2045 C3E4 20 21 C7                             jsr dpymem            ;regurgitate changes
                                        ;
   2047 C3E7 4C E5 C0                   .0000030 jmp monce             ;back to command loop
                                        ;
   2049 C3EA 4C 24 C1                   .0000040 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;moncmp: COMPARE MEMORY
                                        ;
                                        ;	—————————————————————————————
                                        ;	syntax: C <start> <end> <ref>
                                        ;	—————————————————————————————
                                        ;
   2059 C3ED B0 26                      moncmp   bcs .0000030          ;start not given — quit
                                        ;
   2061 C3EF 20 23 CA                             jsr enddest           ;get end & reference addresses
   2062 C3F2 B0 24                                bcs .0000040          ;range or other error
                                        ;
   2064 C3F4 64 BA                                stz xrtemp            ;column counter
                                        ;
   2066 C3F6 20 45 CC                   .0000010 jsr teststop          ;check for stop
   2067 C3F9 B0 1A                                bcs .0000030          ;abort
                                        ;
   2069 C3FB A7 8F                    +            .byte $a7,addra
                                        ;get from reference location
   2070 C3FD C7 A9                    +            .byte $c7,operand
                                        ;test against compare location
   2071 C3FF F0 03                                beq .0000020          ;match, don't display address
                                        ;
   2073 C401 20 F3 C5                             jsr dpycaddr          ;display current location
                                        ;
   2075 C404 20 A3 CA                   .0000020 jsr nxtaddra          ;next reference location
   2076 C407 B0 0C                                bcs .0000030          ;done
                                        ;
   2078 C409 C2 20                    +            .byte $c2,$20
                                        
   2079 C40B E6 A9                                inc operand           ;bump bits 0-15
   2080 C40D E2 20                    +            .byte $e2,$20
                                        
   2081 C40F D0 E5                                bne .0000010
                                        ;
   2083 C411 E6 AB                                inc operand+s_word    ;bump bits 16-23
   2084 C413 80 E1                                bra .0000010
                                        ;
   2086 C415 4C E5 C0                   .0000030 jmp monce             ;return to command exec
                                        ;
   2088 C418 4C 24 C1                   .0000040 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;moncpy: COPY (transfer) MEMORY
                                        ;
                                        ;	————————————————————————————————
                                        ;	syntax: T <start> <end> <target>
                                        ;	————————————————————————————————
                                        ;
   2098 C41B B0 49                      moncpy   bcs .0000040          ;start not given — quit
                                        ;
   2100 C41D 20 23 CA                             jsr enddest           ;get end & target addresses
   2101 C420 B0 47                                bcs .0000050          ;range or other error
                                        ;
   2103 C422 C2 20                    +            .byte $c2,$20
                                        
   2104 C424 38                                   sec
   2105 C425 A5 92                                lda addrb             ;ending address
   2106 C427 E5 8F                                sbc addra             ;starting address
   2107 C429 90 3E                                bcc .0000050          ;start > end — error
                                        ;
   2109 C42B 85 9D                                sta facb              ;bytes to copy
   2110 C42D E2 20                    +            .byte $e2,$20
                                        
   2111 C42F C2 10                    +            .byte $c2,$10
                                        
   2112 C431 A5 AB                                lda operand+s_word    ;target bank
   2113 C433 A4 A9                                ldy operand           ;target address
   2114 C435 C5 91                                cmp addra+s_word      ;source bank
   2115 C437 C2 20                    +            .byte $c2,$20
                                        
   2116 C439 D0 1C                                bne .0000020          ;can use forward copy
                                        ;
   2118 C43B C4 8F                                cpy addra             ;source address
   2119 C43D 90 18                                bcc .0000020          ;can use forward copy
                                        ;
   2121 C43F D0 02                                bne .0000010          ;must use reverse copy
                                        ;
   2123 C441 80 26                                bra .0000050          ;copy in place — error
                                        ;
   2125 C443 A5 9D                      .0000010 lda facb              ;get bytes to copy
   2126 C445 48                                   pha                   ;protect
   2127 C446 20 2B CC                             jsr lodbnk            ;load banks
   2128 C449 20 CB C9                             jsr cprvsup           ;do reverse copy setup
   2129 C44C 68                                   pla                   ;get bytes to copy
   2130 C44D AA                                   tax                   ;save a copy
   2131 C44E 18                                   clc
   2132 C44F 65 A9                                adc operand           ;change target to...
   2133 C451 A8                                   tay                   ;target end
   2134 C452 8A                                   txa                   ;recover bytes to copy
   2135 C453 A6 92                                ldx addrb             ;source end
   2136 C455 80 0C                                bra .0000030
                                        ;
   2138 C457 A5 9D                      .0000020 lda facb              ;get bytes to copy
   2139 C459 48                                   pha                   ;protect
   2140 C45A 20 2B CC                             jsr lodbnk            ;load banks
   2141 C45D 20 C4 C9                             jsr cpfwsup           ;do forward copy setup
   2142 C460 68                                   pla                   ;get bytes to copy
   2143 C461 A6 8F                                ldx addra             ;source start
                                        ;
   2145 C463 4C C0 00                   .0000030 jmp mcftwork          ;copy memory
                                        ;
   2147 C466 4C E5 C0                   .0000040 jmp monce             ;back to executive
                                        ;
   2149 C469 4C 24 C1                   .0000050 jmp monerr            ;error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;mondmp: DISPLAY MEMORY RANGE
                                        ;
                                        ;	—————————————————————————————
                                        ;	syntax: M [<addr1> [<addr2>]]
                                        ;	—————————————————————————————
                                        ;
   2159 C46C B0 0F                      mondmp   bcs .0000010          ;no parameters
                                        ;
   2161 C46E 20 67 CA                             jsr facasize          ;check address...
   2162 C471 C9 04                                cmp #s_dword          ;range
   2163 C473 B0 46                                bcs .0000050          ;address out of range
                                        ;
   2165 C475 20 49 CA                             jsr facaddra          ;copy starting address
   2166 C478 20 7B CA                             jsr getparm           ;get ending address
   2167 C47B 90 17                                bcc .0000020          ;gotten
                                        ;
   2169 C47D 20 37 C9                   .0000010 jsr clrfaca           ;clear accumulator
   2170 C480 C2 20                    +            .byte $c2,$20
                                        
   2171 C482 18                                   clc
   2172 C483 A5 8F                                lda addra             ;starting address
   2173 C485 69 FF                    +            adc #<n_mbytes
   2173 C487 00                       +            .byte >n_mbytes
                                        ;default bytes
   2174 C488 85 95                                sta faca              ;effective ending address
   2175 C48A E2 20                    +            .byte $e2,$20
                                        
   2176 C48C A5 91                                lda addra+s_word      ;starting bank
   2177 C48E 69 00                                adc #0
   2178 C490 85 97                                sta faca+s_word       ;effective ending bank
   2179 C492 B0 27                                bcs .0000050          ;end address > $FFFFFF
                                        ;
   2181 C494 20 67 CA                   .0000020 jsr facasize          ;check ending address...
   2182 C497 C9 04                                cmp #s_dword          ;range
   2183 C499 B0 20                                bcs .0000050          ;out of range — error
                                        ;
   2185 C49B 20 53 CA                             jsr facaddrb          ;copy ending address
   2186 C49E 20 7B CA                             jsr getparm           ;check for excess input
   2187 C4A1 90 18                                bcc .0000050          ;error
                                        ;
   2189 C4A3 20 A3 C9                             jsr calccnt           ;calculate bytes to dump
   2190 C4A6 90 13                                bcc .0000050          ;end < start
                                        ;
   2192 C4A8 20 45 CC                   .0000030 jsr teststop          ;test for display stop
   2193 C4AB B0 0B                                bcs .0000040          ;stopped
                                        ;
   2195 C4AD 20 A4 C7                             jsr newline           ;next line
   2196 C4B0 20 21 C7                             jsr dpymem            ;display
   2197 C4B3 20 FF C9                             jsr decdcnt           ;decrement byte count
   2198 C4B6 90 F0                                bcc .0000030          ;not done
                                        ;
   2200 C4B8 4C E5 C0                   .0000040 jmp monce             ;back to main loop
                                        ;
   2202 C4BB 4C 24 C1                   .0000050 jmp monerr            ;address range error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monfil: FILL MEMORY
                                        ;
                                        ;	—————————————————————————————————————————
                                        ;	syntax: F <start> <end> <fill>
                                        ;
                                        ;	<start> & <end> must be in the same bank.
                                        ;	—————————————————————————————————————————
                                        ;
   2214 C4BE B0 5E                      monfil   bcs .0000010          ;start not given — quit
                                        ;
   2216 C4C0 20 67 CA                             jsr facasize          ;check size
   2217 C4C3 C9 04                                cmp #s_dword
   2218 C4C5 B0 5A                                bcs .0000020          ;out of range — error...
                                        ;
   2220 C4C7 20 49 CA                             jsr facaddra          ;store start
   2221 C4CA 20 7B CA                             jsr getparm           ;evaluate end
   2222 C4CD B0 52                                bcs .0000020          ;not entered — error
                                        ;
   2224 C4CF 20 67 CA                             jsr facasize          ;check size
   2225 C4D2 C9 04                                cmp #s_dword
   2226 C4D4 B0 4B                                bcs .0000020          ;out of range — error
                                        ;
   2228 C4D6 A5 97                                lda faca+s_word       ;end bank
   2229 C4D8 C5 91                                cmp addra+s_word      ;start bank
   2230 C4DA D0 45                                bne .0000020          ;not same — error
                                        ;
   2232 C4DC 20 53 CA                             jsr facaddrb          ;store <end>
   2233 C4DF C2 20                    +            .byte $c2,$20
                                        
   2234 C4E1 38                                   sec
   2235 C4E2 A5 92                                lda addrb             ;ending address
   2236 C4E4 E5 8F                                sbc addra             ;starting address
   2237 C4E6 90 39                                bcc .0000020          ;start > end — error
                                        ;
   2239 C4E8 85 9D                                sta facb              ;bytes to copy
   2240 C4EA E2 20                    +            .byte $e2,$20
                                        
   2241 C4EC 20 7B CA                             jsr getparm           ;evaluate <fill>
   2242 C4EF B0 30                                bcs .0000020          ;not entered — error
                                        ;
   2244 C4F1 20 67 CA                             jsr facasize          ;<fill> should be...
   2245 C4F4 C9 02                                cmp #s_word           ;8 bits
   2246 C4F6 B0 29                                bcs .0000020          ;it isn't — error
                                        ;
   2248 C4F8 20 5D CA                             jsr facaoper          ;store <fill>
   2249 C4FB 20 7B CA                             jsr getparm           ;should be no more parameters
   2250 C4FE 90 21                                bcc .0000020          ;there are — error
                                        ;
   2252 C500 A5 A9                                lda operand           ;<fill>
   2253 C502 87 8F                    +            .byte $87,addra
                                        ;fill 1st location
   2254 C504 C2 30                    +            .byte $c2,$30
                                                         ;16 bit operations
   2255 C506 A5 9D                                lda facb              ;
   2256 C508 F0 14                                beq .0000010          ;only 1 location — finished
                                        ;
   2258 C50A 3A                                   dea                   ;zero align &...
   2259 C50B 48                                   pha                   ;protect
   2260 C50C E2 20                    +            .byte $e2,$20
                                        
   2261 C50E A5 91                                lda addra+s_word      ;start bank
   2262 C510 EB                       +            .byte $eb
                                        
   2263 C511 A5 94                                lda addrb+s_word      ;end bank
   2264 C513 20 C4 C9                             jsr cpfwsup           ;do forward copy setup
   2265 C516 68                                   pla                   ;recover fill count
   2266 C517 A6 8F                                ldx addra             ;fill-from starting location
   2267 C519 9B                       +            .byte $9b
                                        
   2268 C51A C8                                   iny                   ;fill-to starting location
   2269 C51B 4C C0 00                             jmp mcftwork          ;fill memory
                                        ;
   2271 C51E 4C E5 C0                   .0000010 jmp monce             ;goto command executive
                                        ;
   2273 C521 4C 24 C1                   .0000020 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monhnt: SEARCH (hunt) MEMORY
                                        ;
                                        ;	———————————————————————————————————
                                        ;	syntax: H <addr1> <addr2> <pattern>
                                        ;	———————————————————————————————————
                                        ;
   2283 C524 B0 40                      monhnt   bcs .0000050          ;no start address
                                        ;
   2285 C526 20 67 CA                             jsr facasize          ;size starting address
   2286 C529 C9 04                                cmp #s_dword
   2287 C52B B0 3C                                bcs .0000060          ;address out of range — error
                                        ;
   2289 C52D 20 49 CA                             jsr facaddra          ;store starting address
   2290 C530 20 7B CA                             jsr getparm           ;evaluate ending address
   2291 C533 B0 34                                bcs .0000060          ;no address — error
                                        ;
   2293 C535 20 67 CA                             jsr facasize          ;size ending address
   2294 C538 C9 04                                cmp #s_dword
   2295 C53A B0 2D                                bcs .0000060          ;address out of range — error
                                        ;
   2297 C53C 20 53 CA                             jsr facaddrb          ;store ending address
   2298 C53F 20 A3 C9                             jsr calccnt           ;calculate byte range
   2299 C542 90 25                                bcc .0000060          ;end < start
                                        ;
   2301 C544 20 7C CB                             jsr getpat            ;evaluate search pattern
   2302 C547 B0 20                                bcs .0000060          ;error
                                        ;
   2304 C549 64 BA                                stz xrtemp            ;clear column counter
                                        ;
   2306 C54B 20 45 CC                   .0000010 jsr teststop          ;check for stop
   2307 C54E B0 16                                bcs .0000050          ;abort
                                        ;
   2309 C550 A4 AC                                ldy auxbufix          ;pattern index
                                        ;
   2311 C552 88                         .0000020 dey
   2312 C553 30 09                                bmi .0000030          ;pattern match
                                        ;
   2314 C555 B7 8F                    +            .byte $b7,addra
                                        ;get from memory
   2315 C557 D9 46 02                             cmp auxbuf,y          ;test against pattern
   2316 C55A D0 05                                bne .0000040          ;mismatch, next location
                                        ;
   2318 C55C F0 F4                                beq .0000020          ;match, keep testing
                                        ;
   2320 C55E 20 F3 C5                   .0000030 jsr dpycaddr          ;display current location
                                        ;
   2322 C561 20 A3 CA                   .0000040 jsr nxtaddra          ;next location
   2323 C564 90 E5                                bcc .0000010          ;not done
                                        ;
   2325 C566 4C E5 C0                   .0000050 jmp monce             ;back to executive
                                        ;
   2327 C569 4C 24 C1                   .0000060 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monenv: CONVERT NUMERIC VALUE
                                        ;
                                        ;	——————————————————————
                                        ;	syntax: <radix><value>
                                        ;	——————————————————————
                                        ;
   2337 C56C 20 79 CA                   monenv   jsr getparmr          ;reread & evaluate parameter
   2338 C56F B0 26                                bcs .0000020          ;none entered
                                        ;
   2340 C571 A2 00                                ldx #0                ;radix index
   2341 C573 A0 04                                ldy #n_radix          ;number of radices
                                        ;
   2343 C575 5A                         .0000010 phy                   ;save counter
   2344 C576 DA                                   phx                   ;save radix index
   2345 C577 20 A4 C7                             jsr newline           ;next line &...
   2346 C57A 20 17 C7                             jsr clearlin          ;clear it
   2347 C57D A9 20                                lda #a_blank
   2348 C57F A2 04                                ldx #halftab
   2349 C581 20 97 C7                             jsr multspc           ;indent 1/2 tab
   2350 C584 FA                                   plx                   ;get radix index but...
   2351 C585 DA                                   phx                   ;put it back
   2352 C586 BD 8B CC                             lda radxtab,x         ;get radix
   2353 C589 20 90 C8                             jsr binasc            ;convert to ASCII
   2354 C58C 5A                                   phy                   ;string address MSB
   2355 C58D DA                                   phx                   ;string address LSB
   2356 C58E 20 B9 C7                             jsr sprint            ;print
   2357 C591 FA                                   plx                   ;get index again
   2358 C592 7A                                   ply                   ;get counter
   2359 C593 E8                                   inx
   2360 C594 88                                   dey
   2361 C595 D0 DE                                bne .0000010          ;no
                                        
   2363 C597 4C E5 C0                   .0000020 jmp monce             ;back to command exec
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monchr: CHANGE REGISTERS
                                        ;
                                        ;	——————————————————————————————————————————————————————
                                        ;	syntax: ; [PB [PC [.S [.C [.X [.Y [SP [DP [DB]]]]]]]]]
                                        ;
                                        ;	; with no parameters is the same as the R command.
                                        ;	——————————————————————————————————————————————————————
                                        ;
   2375 C59A B0 33                      monchr   bcs .0000040          ;dump registers & quit
                                        ;
   2377 C59C A0 00                                ldy #0                ;register counter
   2378 C59E 84 A3                                sty facc              ;initialize register index
                                        ;
   2380 C5A0 20 67 CA                   .0000010 jsr facasize          ;get parameter size
   2381 C5A3 D9 8F CC                             cmp rcvltab,y         ;check against size table
   2382 C5A6 B0 2A                                bcs .0000050          ;out of range
                                        ;
   2384 C5A8 B9 8F CC                             lda rcvltab,y         ;determine number of bytes...
   2385 C5AB C9 03                                cmp #s_word+1         ;to store
   2386 C5AD 66 A4                                ror facc+s_byte       ;condition flag
   2387 C5AF 10 02                                bpl .0000020          ;8 bit register size
                                        ;
   2389 C5B1 C2 20                    +            .byte $c2,$20
                                                         ;16 bit register size
                                        ;
   2391 C5B3 A6 A3                      .0000020 ldx facc              ;get register index
   2392 C5B5 A5 95                                lda faca              ;get parm
   2393 C5B7 95 80                                sta reg_pbx,x         ;put in shadow storage
   2394 C5B9 E2 20                    +            .byte $e2,$20
                                        
   2395 C5BB 06 A4                                asl facc+s_byte       ;mode flag to carry
   2396 C5BD 8A                                   txa                   ;register index
   2397 C5BE 69 01                                adc #s_byte           ;at least 1 byte stored
   2398 C5C0 85 A3                                sta facc              ;save new index
   2399 C5C2 20 7B CA                             jsr getparm           ;get a parameter
   2400 C5C5 B0 08                                bcs .0000040          ;EOI
                                        ;
   2402 C5C7 C8                                   iny                   ;bump register count
   2403 C5C8 C0 09                                cpy #n_regchv         ;all registers processed?
   2404 C5CA D0 D4                                bne .0000010          ;no, keep going
                                        ;
   2406 C5CC 20 B0 C7                   .0000030 jsr alert             ;excessive input
                                        ;
   2408 C5CF 4C 98 C0                   .0000040 jmp monreg            ;display changes
                                        ;
   2410 C5D2 4C 24 C1                   .0000050 jmp monerr            ;goto error handler
                                        ;
                                        ;================================================================================
                                        ;
                                        ;monxit: EXIT TO OPERATING ENVIRONMENT
                                        ;
                                        ;	—————————
                                        ;	syntax: X
                                        ;	—————————
                                        ;
   2420 C5D5 90 19                      monxit   bcc .0000020          ;no parameters allowed
                                        ;
   2422 C5D7 C2 20                    +            .byte $c2,$20
                                        
   2423 C5D9 AD 02 01                             lda vecbrki           ;BRK indirect vector
   2424 C5DC C9 59                    +            cmp #<monbrk
   2424 C5DE C0                       +            .byte >monbrk
                                        ;we intercept it?
   2425 C5DF D0 09                                bne .0000010          ;no, don't change it
                                        ;
   2427 C5E1 AD 05 01                             lda vecbrkia          ;old vector
   2428 C5E4 8D 02 01                             sta vecbrki           ;restore it
   2429 C5E7 9C 05 01                             stz vecbrkia          ;invalidate old vector
                                        ;         
   2431 C5EA E2 30                      .0000010 +         .byte $e2,$30
                                        
   2432 C5EC 5C 03 F4 00                          jml vecexit           ;long jump to exit
                                        ;
   2434 C5F0 4C 24 C1                   .0000020 jmp monerr            ;goto error handler
                                        ;
                                        ; * * * * * * * * * * * * * * * * * * * * * * * *
                                        ; * * * * * * * * * * * * * * * * * * * * * * * *
                                        ; * *                                         * *
                                        ; * * S T A R T   o f   S U B R O U T I N E S * *
                                        ; * *                                         * *
                                        ; * * * * * * * * * * * * * * * * * * * * * * * *
                                        ; * * * * * * * * * * * * * * * * * * * * * * * *
                                        ;
                                        ;dpycaddr: DISPLAY CURRENT ADDRESS IN COLUMNS
                                        ;
   2446 C5F3 A6 BA                      dpycaddr ldx xrtemp            ;column count
   2447 C5F5 D0 05                                bne .0000010          ;not at right side
                                        ;
   2449 C5F7 20 A4 C7                             jsr newline           ;next row
   2450 C5FA A2 08                                ldx #n_hccols         ;max columns
                                        ;
   2452 C5FC E0 08                      .0000010 cpx #n_hccols         ;max columns
   2453 C5FE F0 05                                beq .0000020          ;at left margin
                                        ;
   2455 C600 A9 09                                lda #a_ht
   2456 C602 20 06 F4                             jsr putcha            ;tab a column
                                        ;
   2458 C605 CA                         .0000020 dex                   ;one less column
   2459 C606 86 BA                                stx xrtemp            ;save column counter
   2460 C608 4C 70 C7                             jmp prntladr          ;print reference address
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpycod: DISASSEMBLE & DISPLAY CODE
                                        ;
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;	This function disassembles & displays the machine code at  the  location
                                        ;	pointed to by ADDRA.  Upon return, ADDRA will point to the opcode of the
                                        ;	next instruction.   The entry point at DPYCODAA  should be called with a
                                        ;	disassembly prefix character loaded in .A.   If entered  at  DPYCOD, the
                                        ;	default character will be display at the beginning of each  disassembled
                                        ;	instruction.
                                        ;
                                        ;	The disassembly of immediate mode instructions that can take an 8 or  16
                                        ;	bit operand is affected by the bit pattern that is  stored  in  FLIMFLAG
                                        ;	upon entry to this function:
                                        ;
                                        ;	    FLIMFLAG: xx000000
                                        ;	              ||
                                        ;	              |+—————————> 0:  8 bit .X or .Y operand
                                        ;	              |            1: 16 bit .X or .Y operand
                                        ;	              +——————————> 0:  8 bit .A or BIT # operand
                                        ;	                           1: 16 bit .A or BIT # operand
                                        ;
                                        ;	FLIMFLAG is conditioned according to the operand of  the  most  recently
                                        ;	disassembled REP or SEP instruction.   Hence repetitive  calls  to  this
                                        ;	subroutine will usually result in the correct disassembly of 16 bit imm-
                                        ;	ediate mode instructions.
                                        ;	————————————————————————————————————————————————————————————————————————
                                        ;
   2491 C60B A9 2E                      dpycod   lda #disprfx          ;default prefix
                                        ;
                                        ;
                                        ;	alternate prefix display entry point...
                                        ;
   2496 C60D 20 06 F4                   dpycodaa jsr putcha            ;print prefix
   2497 C610 20 B4 C7                             jsr printspc          ;space
   2498 C613 20 70 C7                             jsr prntladr          ;print long address
   2499 C616 20 B4 C7                             jsr printspc          ;space to opcode field
   2500 C619 20 75 CA                             jsr getbyte           ;get opcode
   2501 C61C 85 B8                                sta opcode            ;save &...
   2502 C61E 20 A9 C7                             jsr printbyt          ;display as hex
                                        ;
                                        ;
                                        ;	decode menmonic & addressing info...
                                        ;
   2507 C621 A6 B8                                ldx opcode            ;current mnemonic
   2508 C623 BD 50 CD                             lda mnetabix,x        ;get mnemonic index
   2509 C626 0A                                   asl                   ;double for...
   2510 C627 A8                                   tay                   ;mnemonic table offset
   2511 C628 C2 20                    +            .byte $c2,$20
                                                         ;16 bit load
   2512 C62A B9 98 CC                             lda mnetab,y          ;copy encoded mnemonic to...
   2513 C62D 85 B6                                sta mnepck            ;working storage
   2514 C62F E2 20                    +            .byte $e2,$20
                                                        ;back to 8 bits
   2515 C631 20 D7 CA                             jsr instdata          ;extract mode & size data
   2516 C634 85 BF                                sta vopsflag          ;save mode flags
   2517 C636 84 B1                                sty admodidx          ;save mode index
   2518 C638 0A                                   asl                   ;variable immediate instruction?
   2519 C639 90 1F                                bcc dpycod01          ;no, effective operand size in .X
                                        ;
                                        ;
                                        ;	determine immediate mode operand size...
                                        ;
   2524 C63B A5 B8                                lda opcode            ;current opcode
   2525 C63D 24 BC                                bit flimflag          ;operand display mode
   2526 C63F 10 08                                bpl .0000010          ;8 bit .A & BIT immediate mode
                                        ;
   2528 C641 29 1F                                and #aimmaska         ;determine if...
   2529 C643 C9 09                                cmp #aimmaskb         ;.A or BIT immediate
   2530 C645 F0 10                                beq .0000030          ;display 16 bit operand
                                        ;
   2532 C647 A5 B8                                lda opcode            ;not .A or BIT immediate
                                        ;
   2534 C649 50 0F                      .0000010 bvc dpycod01          ;8 bit .X/.Y immediate mode
                                        ;
   2536 C64B A0 03                                ldy #n_vopidx-1       ;opcodes to test
                                        ;
   2538 C64D D9 50 CF                   .0000020 cmp vopidx,y          ;looking for LDX #, CPY #, etc.
   2539 C650 F0 07                                beq .0000040          ;disassemble a 16 bit operand
                                        ;
   2541 C652 88                                   dey
   2542 C653 10 F8                                bpl .0000020          ;keep trying
                                        ;
   2544 C655 80 03                                bra dpycod01          ;not .X or .Y immediate
                                        ;
   2546 C657 A5 B8                      .0000030 lda opcode            ;reload
                                        ;
   2548 C659 E8                         .0000040 inx                   ;16 bit operand
                                        ;
                                        ;
                                        ;	get & display operand bytes...
                                        ;
   2553 C65A 86 BD                      dpycod01 stx iopsize           ;operand size...
   2554 C65C E8                                   inx                   ;plus opcode becomes...
   2555 C65D 86 B4                                stx instsize          ;instruction size
   2556 C65F 86 B2                                stx charcnt           ;total bytes to process
   2557 C661 A9 0B                                lda #n_opcols+2       ;total operand columns plus WS
   2558 C663 85 BA                                sta xrtemp            ;initialize counter
   2559 C665 20 B8 C9                             jsr clroper           ;clear operand
   2560 C668 A4 BD                                ldy iopsize           ;operand size
   2561 C66A F0 16                                beq .0000020          ;no operand
                                        ;
   2563 C66C A2 00                                ldx #0                ;operand index
                                        ;
   2565 C66E 20 75 CA                   .0000010 jsr getbyte           ;get operand byte
   2566 C671 95 A9                                sta operand,x         ;save
   2567 C673 DA                                   phx                   ;protect operand index
   2568 C674 20 A9 C7                             jsr printbyt          ;print operand byte
   2569 C677 C6 BA                                dec xrtemp            ;3 columns used, 2 for...
   2570 C679 C6 BA                                dec xrtemp            ;operand nybbles &...
   2571 C67B C6 BA                                dec xrtemp            ;1 for whitespace
   2572 C67D FA                                   plx                   ;get operand index
   2573 C67E E8                                   inx                   ;bump it
   2574 C67F 88                                   dey
   2575 C680 D0 EC                                bne .0000010          ;next
                                        ;
   2577 C682 A6 BA                      .0000020 ldx xrtemp            ;operand columns remaining
   2578 C684 20 97 C7                             jsr multspc           ;space to mnemonic field
                                        ;
                                        ;
                                        ;	display mnemonic...
                                        ;
   2583 C687 A0 03                                ldy #s_mnemon         ;size of ASCII mnemonic
                                        ;
   2585 C689 A9 00                      .0000030 lda #0                ;initialize char
   2586 C68B A2 05                                ldx #n_shfenc         ;shifts to execute
                                        ;
   2588 C68D 06 B6                      .0000040 asl mnepck            ;shift encoded mnemonic
   2589 C68F 26 B7                                rol mnepck+s_byte
   2590 C691 2A                                   rol
   2591 C692 CA                                   dex
   2592 C693 D0 F8                                bne .0000040
                                        ;
   2594 C695 69 3F                                adc #a_mnecvt         ;convert to ASCII &...
   2595 C697 48                                   pha                   ;stash
   2596 C698 88                                   dey
   2597 C699 D0 EE                                bne .0000030          ;continue with mnemonic
                                        ;
   2599 C69B A0 03                                ldy #s_mnemon
                                        ;
   2601 C69D 68                         .0000050 pla                   ;get mnenmonic byte
   2602 C69E 20 06 F4                             jsr putcha            ;print it
   2603 C6A1 88                                   dey
   2604 C6A2 D0 F9                                bne .0000050
                                        ;
                                        ;
                                        ;	display operand...
                                        ;
   2609 C6A4 A5 BD                                lda iopsize           ;operand size
   2610 C6A6 F0 6F                                beq clearlin          ;zero, disassembly finished
                                        ;
   2612 C6A8 20 B4 C7                             jsr printspc          ;space to operand field
   2613 C6AB 24 BF                                bit vopsflag          ;check mode flags
   2614 C6AD 50 08                                bvc dpycod02          ;not a branch
                                        ;
   2616 C6AF 20 ED CA                             jsr offtarg           ;compute branch target
   2617 C6B2 A6 B4                                ldx instsize          ;effective instruction size
   2618 C6B4 CA                                   dex
   2619 C6B5 86 BD                                stx iopsize           ;effective operand size
                                        ;
   2621 C6B7 64 BF                      dpycod02 stz vopsflag          ;clear
   2622 C6B9 A5 B1                                lda admodidx          ;instruction addressing mode
   2623 C6BB C9 0B                                cmp #am_move          ;block move instruction?
   2624 C6BD D0 02                                bne .0000010          ;no
                                        ;
   2626 C6BF 66 BF                                ror vopsflag          ;yes
                                        ;
   2628 C6C1 0A                         .0000010 asl                   ;convert addressing mode to...
   2629 C6C2 AA                                   tax                   ;symbology table index
   2630 C6C3 C2 20                    +            .byte $c2,$20
                                                         ;do a 16 bit load
   2631 C6C5 BD 54 CF                             lda ms_lutab,x        ;addressing symbol pointer
   2632 C6C8 48                                   pha
   2633 C6C9 E2 20                    +            .byte $e2,$20
                                                        ;back to 8 bit loads
   2634 C6CB A0 00                                ldy #0
   2635 C6CD B3 01                    +            .byte $b3,1
                                        ;get 1st char
   2636 C6CF C9 20                                cmp #a_blank
   2637 C6D1 F0 03                                beq .0000020          ;no addresing mode preamble
                                        ;
   2639 C6D3 20 06 F4                             jsr putcha            ;print preamble
                                        ;
   2641 C6D6 A9 24                      .0000020 lda #c_hex
   2642 C6D8 20 06 F4                             jsr putcha            ;operand displayed as hex
   2643 C6DB A4 BD                                ldy iopsize           ;operand size = index
                                        ;
   2645 C6DD 88                         .0000030 dey
   2646 C6DE 30 16                                bmi .0000040          ;done with operand
                                        ;
   2648 C6E0 B9 A9 00                             lda operand,y         ;get operand byte
   2649 C6E3 20 8D C7                             jsr dpyhex            ;print operand byte
   2650 C6E6 24 BF                                bit vopsflag          ;block move?
   2651 C6E8 10 F3                                bpl .0000030          ;no
                                        ;
   2653 C6EA 64 BF                                stz vopsflag          ;reset
   2654 C6EC 5A                                   phy                   ;protect operand index
   2655 C6ED F4                       +            .byte $f4
   2655 C6EE 8D CF                    +            .word ms_move
                                        
   2656 C6F0 20 B9 C7                             jsr sprint            ;display MVN/MVP operand separator
   2657 C6F3 7A                                   ply                   ;recover operand index again
   2658 C6F4 80 E7                                bra .0000030          ;continue
                                        ;
   2660 C6F6 FA                         .0000040 plx                   ;symbology LSB
   2661 C6F7 7A                                   ply                   ;symbology MSB
   2662 C6F8 E8                                   inx                   ;move past preamble
   2663 C6F9 D0 01                                bne .0000050
                                        ;
   2665 C6FB C8                                   iny
                                        ;
   2667 C6FC 5A                         .0000050 phy
   2668 C6FD DA                                   phx
   2669 C6FE 20 B9 C7                             jsr sprint            ;print postamble, if any
                                        ;
                                        ;
                                        ;	condition immediate mode display format...
                                        ;
   2674 C701 A5 A9                      dpycod03 lda operand           ;operand LSB
   2675 C703 29 30                                and #pfmxmask         ;isolate M & X bits
   2676 C705 0A                                   asl                   ;shift to match...
   2677 C706 0A                                   asl                   ;FLIMFLAG alignment
   2678 C707 A6 B8                                ldx opcode            ;current instruction
   2679 C709 E0 C2                                cpx #opc_rep          ;was it REP?
   2680 C70B D0 04                                bne .0000010          ;no
                                        ;
   2682 C70D 04 BC                                tsb flimflag          ;set flag bits as required
   2683 C70F 80 06                                bra clearlin
                                        ;
   2685 C711 E0 E2                      .0000010 cpx #opc_sep          ;was it SEP?
   2686 C713 D0 02                                bne clearlin          ;no, just exit
                                        ;
   2688 C715 14 BC                                trb flimflag          ;clear flag bits as required
                                        ;
                                        ;================================================================================
                                        ;
                                        ;clearlin: CLEAR DISPLAY LINE
                                        ;
   2694 C717 F4                         clearlin +         .byte $f4
   2694 C718 A5 CF                    +            .word dc_cl
                                        
   2695 C71A 80 4B                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpyibuf: DISPLAY MONITOR INPUT BUFFER CONTENTS
                                        ;
   2701 C71C F4                         dpyibuf +         .byte $f4
   2701 C71D 00 02                    +            .word ibuffer
                                        
   2702 C71F 80 46                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpymem: DISPLAY MEMORY
                                        ;
                                        ;	————————————————————————————————————————————————————————————
                                        ;	This function displays 16 bytes of memory as hex values & as
                                        ;	ASCII equivalents.  The starting address for the display is
                                        ;	in ADDRA & is expected to be a 24 bit address.  Upon return,
                                        ;	ADDRA will point to the start of the next 16 bytes.
                                        ;	————————————————————————————————————————————————————————————
                                        ;
   2715 C721 E2 30                      dpymem +         .byte $e2,$30
                                        
   2716 C723 64 B2                                stz charcnt           ;reset
   2717 C725 A9 3E                                lda #memprfx
   2718 C727 20 06 F4                             jsr putcha            ;display prefix
   2719 C72A 20 70 C7                             jsr prntladr          ;print 24 bit address
   2720 C72D A2 00                                ldx #0                ;string buffer index
   2721 C72F A0 08                                ldy #n_dump           ;bytes per line
                                        ;
   2723 C731 20 75 CA                   .0000010 jsr getbyte           ;get from RAM, also...
   2724 C734 48                                   pha                   ;save for decoding
   2725 C735 DA                                   phx                   ;save string index
   2726 C736 20 A9 C7                             jsr printbyt          ;display as hex ASCII
   2727 C739 E6 B2                                inc charcnt           ;bytes displayed +1
   2728 C73B FA                                   plx                   ;recover string index &...
   2729 C73C 68                                   pla                   ;byte
   2730 C73D C9 20                                cmp #a_blank          ;printable?
   2731 C73F 90 04                                bcc .0000020          ;no
                                        ;
   2733 C741 C9 7F                                cmp #a_del
   2734 C743 90 02                                bcc .0000030          ;is printable
                                        ;
   2736 C745 A9 2E                      .0000020 lda #memsubch         ;substitute character
                                        ;
   2738 C747 9D 00 02                   .0000030 sta ibuffer,x         ;save char
   2739 C74A E8                                   inx                   ;bump index
   2740 C74B 88                                   dey                   ;byte count -= 1
   2741 C74C D0 E3                                bne .0000010          ;not done
                                        ;
   2743 C74E 9E 00 02                             stz ibuffer,x         ;terminate ASCII string
   2744 C751 A9 3A                                lda #memsepch
   2745 C753 20 06 F4                             jsr putcha            ;separate ASCII from bytes
   2746 C756 F4                       +            .byte $f4
   2746 C757 9B CF                    +            .word dc_bf
                                        
   2747 C759 20 B9 C7                             jsr sprint            ;select reverse video
   2748 C75C 20 1C C7                             jsr dpyibuf           ;display ASCII equivalents
   2749 C75F F4                       +            .byte $f4
   2749 C760 B0 CF                    +            .word dc_er
                                        ;normal video
   2750 C762 80 03                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpyerr: DISPLAY ERROR SIGNAL
                                        ;
   2756 C764 F4                         dpyerr +         .byte $f4
   2756 C765 DD CF                    +            .word mm_err
                                        ;"*ERR"
                                        ;
   2758 C767 20 B9 C7                   dpyerraa jsr sprint
   2759 C76A 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;gendbs: GENERATE DESTRUCTIVE BACKSPACE
                                        ;
   2765 C76B F4                         gendbs +         .byte $f4
   2765 C76C A1 CF                    +            .word dc_bs
                                        ;destructive backspace
   2766 C76E 80 F7                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;prntladr: PRINT 24 BIT CURRENT ADDRESS
                                        ;
   2772 C770 08                         prntladr php                   ;protect register sizes
   2773 C771 E2 20                    +            .byte $e2,$20
                                        
   2774 C773 A5 91                                lda addra+s_word      ;get bank byte &...
   2775 C775 20 8D C7                             jsr dpyhex            ;display it
   2776 C778 C2 20                    +            .byte $c2,$20
                                        
   2777 C77A A5 8F                                lda addra             ;get 16 bit address
   2778 C77C 28                                   plp                   ;restore register sizes
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpyhexw: DISPLAY BINARY WORD AS HEX ASCII
                                        ;
                                        ;	————————————————————————————————————
                                        ;	Preparatory Ops: .C: word to display
                                        ;
                                        ;	Returned Values: .C: used
                                        ;	                 .X: used
                                        ;	                 .Y: entry value
                                        ;	————————————————————————————————————
                                        ;
   2792 C77D 08                         dpyhexw  php                   ;save register sizes
   2793 C77E C2 20                    +            .byte $c2,$20
                                        
   2794 C780 48                                   pha                   ;protect value
   2795 C781 E2 20                    +            .byte $e2,$20
                                        
   2796 C783 EB                       +            .byte $eb
                                                           ;get MSB &...
   2797 C784 20 8D C7                             jsr dpyhex            ;display
   2798 C787 C2 20                    +            .byte $c2,$20
                                        
   2799 C789 68                                   pla                   ;recover value
   2800 C78A E2 20                    +            .byte $e2,$20
                                                        ;only LSB visible
   2801 C78C 28                                   plp                   ;reset register sizes
                                        ;
                                        ;================================================================================
                                        ;
                                        ;dpyhex: DISPLAY BINARY BYTE AS HEX ASCII
                                        ;
                                        ;	————————————————————————————————————
                                        ;	Preparatory Ops: .A: byte to display
                                        ;
                                        ;	Returned Values: .A: used
                                        ;	                 .X: used
                                        ;	                 .Y: entry value
                                        ;	————————————————————————————————————
                                        ;
   2815 C78D 20 24 C9                   dpyhex   jsr binhex            ;convert to hex ASCII
   2816 C790 20 06 F4                             jsr putcha            ;print MSN
   2817 C793 8A                                   txa
   2818 C794 4C 06 F4                             jmp putcha            ;print LSN
                                        ;
                                        ;================================================================================
                                        ;
                                        ;multspc: PRINT MULTIPLE BLANKS
                                        ;
                                        ;	————————————————————————————————————————————————
                                        ;	Preparatory Ops : .X: number of blanks to print
                                        ;
                                        ;	Register Returns: none
                                        ;
                                        ;	Calling Example : ldx #3
                                        ;	                  jsr multspc    ;print 3 spaces
                                        ;
                                        ;	Notes: This sub will print 1 blank if .X=0.
                                        ;	————————————————————————————————————————————————
                                        ;
   2835 C797 8A                         multspc  txa
   2836 C798 D0 01                                bne .0000010          ;blank count specified
                                        ;
   2838 C79A E8                                   inx                   ;default to 1 blank
                                        ;
   2840 C79B A9 20                      .0000010 lda #a_blank
                                        ;
   2842 C79D 20 06 F4                   .0000020 jsr putcha
   2843 C7A0 CA                                   dex
   2844 C7A1 D0 FA                                bne .0000020
                                        ;
   2846 C7A3 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;newline: PRINT NEWLINE (CRLF)
                                        ;
   2852 C7A4 F4                         newline +         .byte $f4
   2852 C7A5 B6 CF                    +            .word dc_lf
                                        
   2853 C7A7 80 BE                                bra dpyerraa
                                        ;
                                        ;================================================================================
                                        ;
                                        ;printbyt: PRINT A BYTE WITH LEADING SPACE
                                        ;
   2859 C7A9 48                         printbyt pha                   ;protect byte
   2860 C7AA 20 B4 C7                             jsr printspc          ;print leading space
   2861 C7AD 68                                   pla                   ;restore &...
   2862 C7AE 80 DD                                bra dpyhex            ;print byte
                                        ;         
                                        ;================================================================================
                                        ;
                                        ;alert: ALERT USER w/TERMINAL BELL
                                        ;
   2868 C7B0 A9 07                      alert    lda #a_bel
   2869 C7B2 80 02                                bra printcmn
                                        ;
                                        ;================================================================================
                                        ;
                                        ;printspc: PRINT A SPACE
                                        ;
   2875 C7B4 A9 20                      printspc lda #a_blank
                                        ;
   2877 C7B6 4C 06 F4                   printcmn jmp putcha
                                        ;
                                        ;================================================================================
                                        ;
                                        ;sprint: PRINT NULL-TERMINATED CHARACTER STRING
                                        ;
                                        ;	—————————————————————————————————————————————————————————
                                        ;	Preparatory Ops : SP+1: string address LSB
                                        ;	                  SP+2: string address MSB
                                        ;
                                        ;	Register Returns: .A: used
                                        ;	                  .B: entry value
                                        ;	                  .X: used
                                        ;	                  .Y: used
                                        ;
                                        ;	MPU Flags: NVmxDIZC
                                        ;	           ||||||||
                                        ;	           |||||||+———> 0: okay
                                        ;	           |||||||      1: string too long (1)
                                        ;	           ||||+++————> not defined
                                        ;	           |||+———————> 1
                                        ;	           ||+————————> 1
                                        ;	           ++—————————> not defined
                                        ;
                                        ;	Example: PER STRING
                                        ;	         JSR SPRINT
                                        ;	         BCS TOOLONG
                                        ;
                                        ;	Notes: 1) Maximum permissible string length including the
                                        ;	          terminator is 32,767 bytes.
                                        ;	       2) All registers are forced to 8 bits.
                                        ;	       3) DO NOT JUMP OR BRANCH INTO THIS FUNCTION!
                                        ;	—————————————————————————————————————————————————————————
                                        ;
   2911 C7B9 E2 20                      sprint +         .byte $e2,$20
                                                        ;8 bit accumulator
   2912 C7BB C2 10                    +            .byte $c2,$10
                                                         ;16 bit index
                                        ;
                                        ;—————————————————————————————————————————————————————————
   3049 = 0000000000000001                            .reetaddr =1                    ;return address
                                        
   3051 = 00000003                      .src     =.reetaddr+s_word      ;string address stack offset
                                        
                                        ;—————————————————————————————————————————————————————————
                                        ;
   2921 C7BD A0 00                    +            ldy #<0
   2921 C7BF 00                       +            .byte >0
                                        
   2922 C7C0 18                                   clc                   ;no initial error
                                        ;
   2924 C7C1 B3 03                      .0000010 +         .byte $b3,.src
                                        ;get a byte
   2925 C7C3 F0 07                                beq .0000020          ;done
                                        ;
   2927 C7C5 20 06 F4                             jsr putcha            ;write to console port
   2928 C7C8 C8                                   iny
   2929 C7C9 10 F6                                bpl .0000010          ;next
                                        ;
   2931 C7CB 38                                   sec                   ;string too long
                                        ;
   2933 C7CC FA                         .0000020 plx                   ;pull RTS address
   2934 C7CD 7A                                   ply                   ;clear string pointer
   2935 C7CE DA                                   phx                   ;replace RTS
   2936 C7CF E2 10                    +            .byte $e2,$10
                                        
   2937 C7D1 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;ascbin: CONVERT NULL-TERMINATED ASCII NUMBER STRING TO BINARY
                                        ;
                                        ;	———————————————————————————————————————————————————
                                        ;	Preparatory Ops: ASCII number string in IBUFFER
                                        ;
                                        ;	Returned Values: FACA: converted parameter
                                        ;	                   .A: used
                                        ;	                   .X: used
                                        ;	                   .Y: used
                                        ;	                   .C: 1 = conversion error
                                        ;	                   .Z: 1 = nothing to convert
                                        ;
                                        ;	Notes: 1) Conversion stops when a non-numeric char-
                                        ;	          acter is encountered.
                                        ;	       2) Radix symbols are as follows:
                                        ;
                                        ;	          % binary
                                        ;	          @ octal
                                        ;	          + decimal
                                        ;	          $ hexadecimal
                                        ;
                                        ;	          Hex is the default if no radix is speci-
                                        ;	          fied in the 1st character of the string.
                                        ;	———————————————————————————————————————————————————
                                        ;
   2966 C7D2 E2 30                      ascbin +         .byte $e2,$30
                                        
   2967 C7D4 20 37 C9                             jsr clrfaca           ;clear accumulator
   2968 C7D7 64 B2                                stz charcnt           ;zero char count
   2969 C7D9 64 B0                                stz radix             ;initialize
                                        ;
                                        ;
                                        ;	process radix if present...
                                        ;
   2974 C7DB 20 C6 CB                             jsr getcharw          ;get next non-WS char
   2975 C7DE D0 02                                bne .0000010          ;got something
                                        ;
   2977 C7E0 18                                   clc                   ;no more input
   2978 C7E1 60                                   rts
                                        ;
   2980 C7E2 A2 03                      .0000010 ldx #n_radix-1        ;number of radices
                                        ;
   2982 C7E4 DD 8B CC                   .0000020 cmp radxtab,x         ;recognized radix?
   2983 C7E7 F0 06                                beq .0000030          ;yes
                                        ;
   2985 C7E9 CA                                   dex
   2986 C7EA 10 F8                                bpl .0000020          ;try next
                                        ;
   2988 C7EC C6 AD                                dec ibufidx           ;reposition to previous char
   2989 C7EE E8                                   inx                   ;not recognized, assume hex
                                        ;
   2991 C7EF C9 2B                      .0000030 cmp #c_dec            ;decimal radix?
   2992 C7F1 D0 02                                bne .0000040          ;not decimal
                                        ;
   2994 C7F3 66 B0                                ror radix             ;flag decimal conversion
                                        ;
   2996 C7F5 BD 77 CC                   .0000040 lda basetab,x         ;number bases table
   2997 C7F8 85 BE                                sta range             ;set valid numeral range
   2998 C7FA BD 7B CC                             lda bitsdtab,x        ;get bits per digit
   2999 C7FD 85 AE                                sta bitsdig           ;store
                                        ;
                                        ;
                                        ;	process numerals...
                                        ;
   3004 C7FF 20 6A CB                   ascbin01 jsr getchar           ;get next char
   3005 C802 F0 70                                beq ascbin03          ;EOI
                                        ;
   3007 C804 C9 20                                cmp #' '
   3008 C806 F0 6C                                beq ascbin03          ;blank — EOF
                                        ;
   3010 C808 C9 2C                                cmp #','
   3011 C80A F0 68                                beq ascbin03          ;comma — EOF
                                        ;
   3013 C80C C9 09                                cmp #a_ht
   3014 C80E F0 64                                beq ascbin03          ;tab — EOF
                                        ;
   3016 C810 20 91 C9                             jsr nybtobin          ;change to binary
   3017 C813 B0 60                                bcs ascbin04          ;not a recognized numeral
                                        ;
   3019 C815 C5 BE                                cmp range             ;check range
   3020 C817 B0 5C                                bcs ascbin04          ;not valid for base
                                        ;
   3022 C819 85 AF                                sta numeral           ;save processed numeral
   3023 C81B E6 B2                                inc charcnt           ;bump numeral count
   3024 C81D 24 B0                                bit radix             ;working in base 10?
   3025 C81F 10 15                                bpl .0000030          ;no
                                        ;
                                        ;
                                        ;	compute N*2 for decimal conversion...
                                        ;
   3030 C821 A2 00                                ldx #0                ;accumulator index
   3031 C823 A0 02                                ldy #s_pfac/2         ;iterations
   3032 C825 C2 20                    +            .byte $c2,$20
                                        
   3033 C827 18                                   clc
                                        ;
   3035 C828 B5 95                      .0000020 lda faca,x            ;N
   3036 C82A 2A                                   rol                   ;N=N*2
   3037 C82B 95 9D                                sta facb,x
   3038 C82D E8                                   inx
   3039 C82E E8                                   inx
   3040 C82F 88                                   dey
   3041 C830 D0 F6                                bne .0000020
                                        ;
   3043 C832 B0 41                                bcs ascbin04          ;overflow — error
                                        ;
   3045 C834 E2 20                    +            .byte $e2,$20
                                        
                                        ;
                                        ;
                                        ;	compute N*base for binary, octal or hex...
                                        ;	or N*8 for decimal...
                                        ;
   3051 C836 A6 AE                      .0000030 ldx bitsdig           ;bits per digit
   3052 C838 C2 20                    +            .byte $c2,$20
                                                         ;16 bit shifts
                                        ;
   3054 C83A 06 95                      .0000040 asl faca
   3055 C83C 26 97                                rol faca+s_word
   3056 C83E B0 35                                bcs ascbin04          ;overflow — error
                                        ;
   3058 C840 CA                                   dex
   3059 C841 D0 F7                                bne .0000040          ;next shift
                                        ;
   3061 C843 E2 20                    +            .byte $e2,$20
                                                        ;back to 8 bits
   3062 C845 24 B0                                bit radix             ;check base
   3063 C847 10 13                                bpl ascbin02          ;not decimal
                                        ;
                                        ;
                                        ;	compute N*10 for decimal (N*8 + N*2)...
                                        ;
   3068 C849 A0 04                                ldy #s_pfac
   3069 C84B C2 20                    +            .byte $c2,$20
                                        
                                        ;
   3071 C84D B5 95                      .0000050 lda faca,x            ;N*8
   3072 C84F 75 9D                                adc facb,x            ;N*2
   3073 C851 95 95                                sta faca,x            ;now N*10
   3074 C853 E8                                   inx
   3075 C854 E8                                   inx
   3076 C855 88                                   dey
   3077 C856 D0 F5                                bne .0000050
                                        ;
   3079 C858 B0 1B                                bcs ascbin04          ;overflow — error
                                        ;
   3081 C85A E2 20                    +            .byte $e2,$20
                                        
                                        ;
                                        ;
                                        ;	add current numeral to partial result...
                                        ;
   3086 C85C A5 95                      ascbin02 lda faca              ;N
   3087 C85E 65 AF                                adc numeral           ;N=N+D
   3088 C860 85 95                                sta faca
   3089 C862 A2 01                                ldx #1
   3090 C864 A0 03                                ldy #s_pfac-1
                                        ;
   3092 C866 B5 95                      .0000010 lda faca,x
   3093 C868 69 00                                adc #0                ;account for carry
   3094 C86A 95 95                                sta faca,x
   3095 C86C E8                                   inx
   3096 C86D 88                                   dey
   3097 C86E D0 F6                                bne .0000010
                                        ;
   3099 C870 90 8D                                bcc ascbin01          ;next if no overflow
                                        ;
   3101 C872 B0 01                                bcs ascbin04          ;overflow — error
                                        ;
                                        ;
                                        ;	finish up...
                                        ;
   3106 C874 18                         ascbin03 clc                   ;no error
                                        ;
   3108 C875 E2 20                      ascbin04 +         .byte $e2,$20
                                                        ;reset if necessary
   3109 C877 A5 B2                                lda charcnt           ;load char count
   3110 C879 60                                   rts                   ;done
                                        ;
                                        ;================================================================================
                                        ;
                                        ;bcdasc: CONVERT BCD DIGIT TO ASCII
                                        ;
                                        ;	———————————————————————————————————————
                                        ;	Preparatory Ops: .A: BCD digit, $00-$99
                                        ;
                                        ;	Returned Values: .A: ASCII MSD
                                        ;	                 .X: ASCII LSD
                                        ;	                 .Y: entry value
                                        ;	———————————————————————————————————————
                                        ;
   3124 C87A 20 86 C8                   bcdasc   jsr bintonyb          ;extract nybbles
   3125 C87D 48                                   pha                   ;save tens
   3126 C87E 8A                                   txa                 
   3127 C87F 09 30                                ora #btoamask         ;change units to ASCII
   3128 C881 AA                                   tax                   ;store
   3129 C882 68                                   pla                   ;get tens
   3130 C883 09 30                                ora #btoamask         ;change to ASCII
   3131 C885 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;bintonyb: EXTRACT BINARY NYBBLES
                                        ;
                                        ;	—————————————————————————————————
                                        ;	Preparatory Ops: .A: binary value
                                        ;
                                        ;	Returned Values: .A: MSN
                                        ;	                 .X: LSN
                                        ;	                 .Y: entry value
                                        ;	—————————————————————————————————
                                        ;
   3145 C886 48                         bintonyb pha                   ;save
   3146 C887 29 0F                                and #bcdumask         ;extract LSN
   3147 C889 AA                                   tax                   ;save it
   3148 C88A 68                                   pla
                                        ;         .rept s_bnybbl        ;extract MSN
   3150 C88B 4A                                     lsr
   3151 C88C 4A                                     lsr
   3152 C88D 4A                                     lsr
   3153 C88E 4A                                     lsr
                                        ;         .endr
   3155 C88F 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;binasc: CONVERT 32-BIT BINARY TO NULL-TERMINATED ASCII NUMBER STRING
                                        ;
                                        ;	——————————————————————————————————————————————————————
                                        ;	Preparatory Ops: FACA: 32-bit operand
                                        ;	                   .A: radix character, w/bit 7 set to
                                        ;	                       suppress radix symbol in the
                                        ;	                       conversion string
                                        ;
                                        ;	Returned Values: ibuffer: conversion string
                                        ;	                      .A: string length
                                        ;	                      .X: string address LSB
                                        ;	                      .Y: string address MSB
                                        ;
                                        ;	Execution Notes: ibufidx & instsize are overwritten.
                                        ;	——————————————————————————————————————————————————————
                                        ;
   3175 C890 64 AD                      binasc   stz ibufidx           ;initialize string index
   3176 C892 64 B4                                stz instsize          ;clear format flag
                                        ;
                                        ;
                                        ;	evaluate radix...
                                        ;
   3181 C894 0A                                   asl                   ;extract format flag &...
   3182 C895 66 B4                                ror instsize          ;save it
   3183 C897 4A                                   lsr                   ;extract radix character
   3184 C898 A2 03                                ldx #n_radix-1        ;total radices
                                        ;
   3186 C89A DD 8B CC                   .0000010 cmp radxtab,x         ;recognized radix?
   3187 C89D F0 04                                beq .0000020          ;yes
                                        ;
   3189 C89F CA                                   dex
   3190 C8A0 10 F8                                bpl .0000010          ;try next
                                        ;
   3192 C8A2 E8                                   inx                   ;assume hex
                                        ;
   3194 C8A3 86 B0                      .0000020 stx radix             ;save radix index for later
   3195 C8A5 24 B4                                bit instsize
   3196 C8A7 30 08                                bmi .0000030          ;no radix symbol wanted
                                        ;
   3198 C8A9 BD 8B CC                             lda radxtab,x         ;radix table
   3199 C8AC 8D 00 02                             sta ibuffer           ;prepend to string
   3200 C8AF E6 AD                                inc ibufidx           ;bump string index
                                        ;
   3202 C8B1 C9 2B                      .0000030 cmp #c_dec            ;converting to decimal?
   3203 C8B3 D0 07                                bne .0000040          ;no
                                        ;
   3205 C8B5 20 49 C9                             jsr facabcd           ;convert operand to BCD
   3206 C8B8 A9 00                                lda #0
   3207 C8BA 80 17                                bra .0000070          ;skip binary stuff
                                        ;
                                        ;
                                        ;	prepare for binary, octal or hex conversion...
                                        ;
   3212 C8BC A2 00                      .0000040 ldx #0                ;operand index
   3213 C8BE A0 05                                ldy #s_sfac-1         ;workspace index
                                        ;
   3215 C8C0 B5 95                      .0000050 lda faca,x            ;copy operand to...
   3216 C8C2 99 9D 00                             sta facb,y            ;workspace in...
   3217 C8C5 88                                   dey                   ;big-endian order
   3218 C8C6 E8                                   inx
   3219 C8C7 E0 04                                cpx #s_pfac
   3220 C8C9 D0 F5                                bne .0000050
                                        ;
   3222 C8CB A9 00                                lda #0
   3223 C8CD BB                       +            .byte $bb
                                        
                                        ;
   3225 C8CE 95 9D                      .0000060 sta facb,x            ;pad workspace
   3226 C8D0 CA                                   dex
   3227 C8D1 10 FB                                bpl .0000060
                                        ;
                                        ;
                                        ;	set up conversion parameters...
                                        ;
   3232 C8D3 85 A3                      .0000070 sta facc              ;initialize byte counter
   3233 C8D5 A4 B0                                ldy radix             ;radix index
   3234 C8D7 B9 87 CC                             lda numstab,y         ;numerals in string
   3235 C8DA 85 A4                                sta facc+s_byte       ;set remaining numeral count
   3236 C8DC B9 7F CC                             lda bitsntab,y        ;bits per numeral
   3237 C8DF 85 A5                                sta facc+s_word       ;set
   3238 C8E1 B9 83 CC                             lda lzsttab,y         ;leading zero threshold
   3239 C8E4 85 A6                                sta facc+s_xword      ;set
                                        ;
                                        ;
                                        ;	generate conversion string...
                                        ;
   3244 C8E6 A9 00                      .0000080 lda #0
   3245 C8E8 A4 A5                                ldy facc+s_word       ;bits per numeral
                                        ;
   3247 C8EA A2 05                      .0000090 ldx #s_sfac-1         ;workspace size
   3248 C8EC 18                                   clc                   ;avoid starting carry
                                        ;
   3250 C8ED 36 9D                      .0000100 rol facb,x            ;shift out a bit...
   3251 C8EF CA                                   dex                   ;from the operand or...
   3252 C8F0 10 FB                                bpl .0000100          ;BCD conversion result
                                        ;
   3254 C8F2 2A                                   rol                   ;bit to .A
   3255 C8F3 88                                   dey
   3256 C8F4 D0 F4                                bne .0000090          ;more bits to grab
                                        ;
   3258 C8F6 A8                                   tay                   ;if numeral isn't zero...
   3259 C8F7 D0 0A                                bne .0000110          ;skip leading zero tests
                                        ;
   3261 C8F9 A6 A4                                ldx facc+s_byte       ;remaining numerals
   3262 C8FB E4 A6                                cpx facc+s_xword      ;leading zero threshold
   3263 C8FD 90 04                                bcc .0000110          ;below it, must convert
                                        ;
   3265 C8FF A6 A3                                ldx facc              ;processed byte count
   3266 C901 F0 11                                beq .0000130          ;discard leading zero
                                        ;
   3268 C903 C9 0A                      .0000110 cmp #10               ;check range
   3269 C905 90 02                                bcc .0000120          ;is 0-9
                                        ;
   3271 C907 69 06                                adc #a_hexdec         ;apply hex adjust
                                        ;
   3273 C909 69 30                      .0000120 adc #'0'              ;change to ASCII
   3274 C90B A4 AD                                ldy ibufidx           ;string index
   3275 C90D 99 00 02                             sta ibuffer,y         ;save numeral in buffer
   3276 C910 E6 AD                                inc ibufidx           ;next buffer position
   3277 C912 E6 A3                                inc facc              ;bytes=bytes+1
                                        ;
   3279 C914 C6 A4                      .0000130 dec facc+s_byte       ;numerals=numerals-1
   3280 C916 D0 CE                                bne .0000080          ;not done
                                        ;
                                        ;
                                        ;	terminate string & exit...
                                        ;
   3285 C918 A6 AD                                ldx ibufidx           ;printable string length
   3286 C91A 9E 00 02                             stz ibuffer,x         ;terminate string
   3287 C91D 8A                                   txa
   3288 C91E A2 00                                ldx #<ibuffer         ;converted string
   3289 C920 A0 02                                ldy #>ibuffer
   3290 C922 18                                   clc                   ;all okay
   3291 C923 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;binhex: CONVERT BINARY BYTE TO HEX ASCII CHARS
                                        ;
                                        ;	————————————————————————————————————————————
                                        ;	Preparatory Ops: .A: byte to convert
                                        ;
                                        ;	Returned Values: .A: MSN ASCII char
                                        ;	                 .X: LSN ASCII char
                                        ;	                 .Y: entry value
                                        ;	————————————————————————————————————————————
                                        ;
   3305 C924 20 86 C8                   binhex   jsr bintonyb          ;generate binary values
   3306 C927 48                                   pha                   ;save MSN
   3307 C928 8A                                   txa
   3308 C929 20 2E C9                             jsr .0000010          ;generate ASCII LSN
   3309 C92C AA                                   tax                   ;save
   3310 C92D 68                                   pla                   ;get input
                                        ;
                                        ;
                                        ;	convert nybble to hex ASCII equivalent...
                                        ;
   3315 C92E C9 0A                      .0000010 cmp #10
   3316 C930 90 02                                bcc .0000020          ;in decimal range
                                        ;
   3318 C932 69 66                                adc #k_hex            ;hex compensate
                                        ;         
   3320 C934 49 30                      .0000020 eor #'0'              ;finalize nybble
   3321 C936 60                                   rts                   ;done
                                        ;
                                        ;================================================================================
                                        ;
                                        ;clrfaca: CLEAR FLOATING ACCUMULATOR A
                                        ;
   3327 C937 08                         clrfaca  php
   3328 C938 C2 20                    +            .byte $c2,$20
                                        
   3329 C93A 64 95                                stz faca
   3330 C93C 64 97                                stz faca+s_word
   3331 C93E 28                                   plp
   3332 C93F 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;clrfacb: CLEAR FLOATING ACCUMULATOR B
                                        ;
   3338 C940 08                         clrfacb  php
   3339 C941 C2 20                    +            .byte $c2,$20
                                        
   3340 C943 64 9D                                stz facb
   3341 C945 64 9F                                stz facb+s_word
   3342 C947 28                                   plp
   3343 C948 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facabcd: CONVERT FACA INTO BCD
                                        ;
   3349 C949 A2 03                      facabcd  ldx #s_pfac-1         ;primary accumulator size -1
                                        ;
   3351 C94B B5 95                      .0000010 lda faca,x            ;value to be converted
   3352 C94D 48                                   pha                   ;preserve
   3353 C94E CA                                   dex
   3354 C94F 10 FA                                bpl .0000010          ;next
                                        ;
   3356 C951 A2 05                                ldx #s_sfac-1         ;workspace size
                                        ;
   3358 C953 74 9D                      .0000020 stz facb,x            ;clear final result
   3359 C955 74 A3                                stz facc,x            ;clear scratchpad
   3360 C957 CA                                   dex
   3361 C958 10 F9                                bpl .0000020
                                        ;
   3363 C95A E6 A8                                inc facc+s_sfac-s_byte
   3364 C95C F8                                   sed                   ;select decimal mode
   3365 C95D A0 1F                                ldy #m_bits-1         ;bits to convert -1
                                        ;
   3367 C95F A2 03                      .0000030 ldx #s_pfac-1         ;operand size
   3368 C961 18                                   clc                   ;no carry at start
                                        ;
   3370 C962 76 95                      .0000040 ror faca,x            ;grab LS bit in operand
   3371 C964 CA                                   dex
   3372 C965 10 FB                                bpl .0000040
                                        ;
   3374 C967 90 0D                                bcc .0000060          ;LS bit clear
                                        ;
   3376 C969 18                                   clc
   3377 C96A A2 05                                ldx #s_sfac-1
                                        ;
   3379 C96C B5 9D                      .0000050 lda facb,x            ;partial result
   3380 C96E 75 A3                                adc facc,x            ;scratchpad
   3381 C970 95 9D                                sta facb,x            ;new partial result
   3382 C972 CA                                   dex
   3383 C973 10 F7                                bpl .0000050
                                        ;
   3385 C975 18                                   clc
                                        ;
   3387 C976 A2 05                      .0000060 ldx #s_sfac-1
                                        ;
   3389 C978 B5 A3                      .0000070 lda facc,x            ;scratchpad
   3390 C97A 75 A3                                adc facc,x            ;double &...
   3391 C97C 95 A3                                sta facc,x            ;save
   3392 C97E CA                                   dex
   3393 C97F 10 F7                                bpl .0000070
                                        ;
   3395 C981 88                                   dey
   3396 C982 10 DB                                bpl .0000030          ;next operand bit
                                        ;
   3398 C984 D8                                   cld
   3399 C985 A2 00                                ldx #0
   3400 C987 A0 04                                ldy #s_pfac
                                        ;
   3402 C989 68                         .0000080 pla                   ;operand
   3403 C98A 95 95                                sta faca,x            ;restore
   3404 C98C E8                                   inx
   3405 C98D 88                                   dey
   3406 C98E D0 F9                                bne .0000080          ;next
                                        ;
   3408 C990 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;nybtobin: CONVERT ASCII NYBBLE TO BINARY
                                        ;
   3414 C991 20 38 CC                   nybtobin jsr toupper           ;convert case if necessary
   3415 C994 38                                   sec
   3416 C995 E9 30                                sbc #'0'              ;change to binary
   3417 C997 90 08                                bcc .0000020          ;not a numeral — error
                                        ;
   3419 C999 C9 0A                                cmp #10
   3420 C99B 90 03                                bcc .0000010          ;numeral is 0-9
                                        ;
   3422 C99D E9 07                                sbc #a_hexdec+1       ;10-15 ——> A-F
   3423 C99F 18                                   clc                   ;no conversion error
                                        ;
   3425 C9A0 60                         .0000010 rts
                                        ;
   3427 C9A1 38                         .0000020 sec                   ;conversion error
   3428 C9A2 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;calccnt: COMPUTE BYTE COUNT FROM ADDRESS RANGE
                                        ;
   3434 C9A3 20 40 C9                   calccnt  jsr clrfacb           ;clear accumulator
   3435 C9A6 C2 20                    +            .byte $c2,$20
                                        
   3436 C9A8 38                                   sec
   3437 C9A9 A5 92                                lda addrb             ;ending address
   3438 C9AB E5 8F                                sbc addra             ;starting address
   3439 C9AD 85 9D                                sta facb              ;byte count
   3440 C9AF E2 20                    +            .byte $e2,$20
                                        
   3441 C9B1 A5 94                                lda addrb+s_word      ;handle banks
   3442 C9B3 E5 91                                sbc addra+s_word
   3443 C9B5 85 9F                                sta facb+s_word
   3444 C9B7 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;clroper: CLEAR OPERAND
                                        ;
   3450 C9B8 DA                         clroper  phx
   3451 C9B9 A2 02                                ldx #s_oper-1
                                        ;
   3453 C9BB 74 A9                      .0000010 stz operand,x
   3454 C9BD CA                                   dex
   3455 C9BE 10 FB                                bpl .0000010
                                        ;
   3457 C9C0 64 BB                                stz eopsize
   3458 C9C2 FA                                   plx
   3459 C9C3 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;cpfwsup: FOWARD COPY MEMORY SETUP
                                        ;
   3465 C9C4 C2 30                      cpfwsup +         .byte $c2,$30
                                        
   3466 C9C6 A2 54                    +            ldx #<opc_mvn
   3466 C9C8 00                       +            .byte >opc_mvn
                                        ;"move next" opcode
   3467 C9C9 80 05                                bra cpsup
                                        ;         
                                        ;================================================================================
                                        ;
                                        ;cprvsup: REVERSE COPY MEMORY SETUP
                                        ;
   3473 C9CB C2 30                      cprvsup +         .byte $c2,$30
                                        
   3474 C9CD A2 44                    +            ldx #<opc_mvp
   3474 C9CF 00                       +            .byte >opc_mvp
                                        ;"move previous" opcode
                                        ;         
                                        ;================================================================================
                                        ;
                                        ;cpsup: COPY MEMORY SETUP
                                        ;
   3480 C9D0 48                         cpsup    pha                   ;save banks
   3481 C9D1 8A                                   txa                   ;protect...
   3482 C9D2 EB                       +            .byte $eb
                                                           ;opcode
   3483 C9D3 E2 20                    +            .byte $e2,$20
                                        
   3484 C9D5 A2 08                    +            ldx #<(cpcodeee-cpcode-1)
   3484 C9D7 00                       +            .byte >(cpcodeee-cpcode-1)
                                        
                                        ;
   3486 C9D8 BF                         .0000010 +         .byte $bf
   3486 C9D9 F6 C9 00                 +   +         .byte <cpcode,>cpcode,cpcode >> 16
                                     +   
                                        ;transfer copy code to...
   3487 C9DC 95 C0                                sta mcftwork,x        ;to workspace
   3488 C9DE CA                                   dex
   3489 C9DF 10 F7                                bpl .0000010
                                        ;
   3491 C9E1 EB                       +            .byte $eb
                                                           ;recover opcode &...
   3492 C9E2 85 C1                                sta mcftopc           ;set it
   3493 C9E4 C2 20                    +            .byte $c2,$20
                                        
   3494 C9E6 68                                   pla                   ;get banks &...
   3495 C9E7 85 C2                                sta mcftbnk           ;set them
                                         
                                        ; We just dynamically created a routine, so the cache (if one is present) has
                                        ; to be invalidated. Otherwise the processor could execute dead code from the
                                        ; cache. Two lines are invalidated in case the code crosses a line boundary.
                                        ;
                                        ; Parameters to ICacheIL816:
                                        ;	acc = 16 bit address to invalidate
                                        ;
                                        ; The ICacheIL816 routine should invalidate the cache line and return. If there
                                        ; is no cache in the processor then these lines can be deleted.
                                        ;-------------------------------------------------------------------------------
   3507 C9E9 48                                   pha
   3508 C9EA A9 C0                                lda	#mcftwork
   3509 C9EC 20 E6 C9                             jsr	ICacheIL816
   3510 C9EF A9 C8                                lda	#mcftwork+8
   3511 C9F1 20 E6 C9                             jsr	ICacheIL816
   3512 C9F4 68                                   pla
                                        ;---------------------------------------------
   3514 C9F5 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;cpcode: COPY MEMORY CODE
                                        ;
                                        ;	———————————————————————————————————————————
                                        ;	This code is transfered to workspace when a
                                        ;	copy or fill operation is to be performed.
                                        ;	———————————————————————————————————————————
                                        ;
   3525 C9F6 8B                         cpcode +         .byte $8b
                                                           ;must preserve data bank
                                        ;         .rept s_mvinst
   3527 C9F7 EA                                     nop                 ;placeholder
   3528 C9F8 EA                                     nop
   3529 C9F9 EA                                     nop
                                        ;         .endr
   3531 C9FA AB                       +            .byte $ab
                                                           ;restore data bank
   3532 C9FB 5C E5 C0 00                          jml monce             ;return to command executive
   3701 = 0000C9FF                      cpcodeee =*                    ;placeholder — do not delete
                                        ;
                                        ;================================================================================
                                        ;
                                        ;decdcnt: DECREMENT DUMP COUNT
                                        ;
                                        ;	———————————————————————————————————————————
                                        ;	Preparatory Ops: bytes to process in FACB
                                        ;	                 bytes processed in CHARCNT
                                        ;
                                        ;	Returned Values: .A: used
                                        ;	                 .X: entry value
                                        ;	                 .Y: entry value
                                        ;	                 .C: 1 = count = zero
                                        ;	———————————————————————————————————————————
                                        ;
   3549 C9FF E2 20                      decdcnt +         .byte $e2,$20
                                        
   3550 CA01 A9 00                                lda #0
   3551 CA03 EB                       +            .byte $eb
                                                           ;clear .B
   3552 CA04 A5 9F                                lda facb+s_word       ;count MSW
   3553 CA06 C2 20                    +            .byte $c2,$20
                                        
   3554 CA08 38                                   sec
   3555 CA09 05 9D                                ora facb              ;count LSW
   3556 CA0B F0 13                                beq .0000020          ;zero, just exit
                                        ;
   3558 CA0D A5 9D                                lda facb
   3559 CA0F E5 B2                                sbc charcnt           ;bytes processed
   3560 CA11 85 9D                                sta facb
   3561 CA13 E2 20                    +            .byte $e2,$20
                                        
   3562 CA15 A5 9F                                lda facb+s_word
   3563 CA17 E9 00                                sbc #0                ;handle borrow
   3564 CA19 90 04                                bcc .0000010          ;underflow
                                        ;
   3566 CA1B 85 9F                                sta facb+s_word
   3567 CA1D 18                                   clc                   ;count > 0
   3568 CA1E 60                                   rts
                                        ;
   3570 CA1F 38                         .0000010 sec
                                        ;
   3572 CA20 E2 20                      .0000020 +         .byte $e2,$20
                                        
   3573 CA22 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;enddest: GET 2ND & 3RD ADDRESSES FOR COMPARE & TRANSFER
                                        ;
   3579 CA23 20 67 CA                   enddest  jsr facasize          ;check start...
   3580 CA26 C9 04                                cmp #s_dword          ;for range
   3581 CA28 B0 1E                                bcs .0000010          ;out of range — error
                                        ;
   3583 CA2A 20 49 CA                             jsr facaddra          ;store start
   3584 CA2D 20 7B CA                             jsr getparm           ;get end
   3585 CA30 B0 16                                bcs .0000010          ;not entered — error
                                        ;
   3587 CA32 20 67 CA                             jsr facasize          ;check end...
   3588 CA35 C9 04                                cmp #s_dword          ;for range
   3589 CA37 B0 0F                                bcs .0000010          ;out of range — error
                                        ;
   3591 CA39 20 53 CA                             jsr facaddrb          ;store end
   3592 CA3C 20 7B CA                             jsr getparm           ;get destination
   3593 CA3F B0 07                                bcs .0000010          ;not entered — error
                                        ;
   3595 CA41 20 67 CA                             jsr facasize          ;check destination...
   3596 CA44 C9 04                                cmp #s_dword          ;for range
   3597 CA46 90 15                                bcc facaoper          ;store dest address
                                        ;
   3599 CA48 60                         .0000010 rts                   ;exit w/error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facaddra: COPY FACA TO ADDRA
                                        ;
   3605 CA49 A2 02                      facaddra ldx #s_xword-1
                                        ;
   3607 CA4B B5 95                      .0000010 lda faca,x
   3608 CA4D 95 8F                                sta addra,x
   3609 CA4F CA                                   dex
   3610 CA50 10 F9                                bpl .0000010
                                        ;
   3612 CA52 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facaddrb: COPY FACA TO ADDRB
                                        ;
   3618 CA53 A2 02                      facaddrb ldx #s_xword-1
                                        ;
   3620 CA55 B5 95                      .0000010 lda faca,x
   3621 CA57 95 92                                sta addrb,x
   3622 CA59 CA                                   dex
   3623 CA5A 10 F9                                bpl .0000010
                                        ;
   3625 CA5C 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facaoper: COPY FACA TO OPERAND
                                        ;
   3631 CA5D A2 02                      facaoper ldx #s_oper-1
                                        ;
   3633 CA5F B5 95                      .0000010 lda faca,x
   3634 CA61 95 A9                                sta operand,x
   3635 CA63 CA                                   dex
   3636 CA64 10 F9                                bpl .0000010
                                        ;
   3638 CA66 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;facasize: REPORT OPERAND SIZE IN FACA
                                        ;
                                        ;	——————————————————————————————————————————
                                        ;	Preparatory Ops: operand in FACA
                                        ;
                                        ;	Returned Values: .A: s_byte  (1)
                                        ;	                     s_word  (2)
                                        ;	                     s_xword (3)
                                        ;	                     s_dword (4)
                                        ;
                                        ;	Notes: 1) This function will always report
                                        ;	          a non-zero result.
                                        ;	——————————————————————————————————————————
                                        ;
   3656 CA67 E2 30                      facasize +         .byte $e2,$30
                                        
   3657 CA69 A2 03                                ldx #s_dword-1
                                        ;
   3659 CA6B B5 95                      .0000010 lda faca,x            ;get byte
   3660 CA6D D0 03                                bne .0000020          ;done
                                        ;
   3662 CA6F CA                                   dex
   3663 CA70 D0 F9                                bne .0000010          ;next byte
                                        ;
   3665 CA72 E8                         .0000020 inx                   ;count=index+1
   3666 CA73 8A                                   txa
   3667 CA74 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getbyte: GET A BYTE FROM MEMORY
                                        ;
   3673 CA75 A7 8F                      getbyte +         .byte $a7,addra
                                        ;get a byte
   3674 CA77 80 3F                                bra incaddra          ;bump address
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getparm: GET A PARAMETER
                                        ;
                                        ;	—————————————————————————————————————————————————
                                        ;	Preparatory Ops: null-terminated input in IBUFFER
                                        ;
                                        ;	Returned Values: .A: chars in converted parameter
                                        ;	                 .X: used
                                        ;	                 .Y: entry value
                                        ;	                 .C: 1 = no parameter entered
                                        ;	—————————————————————————————————————————————————
                                        ;
   3689 CA79 C6 AD                      getparmr dec ibufidx           ;reread previous char
                                        ;
   3691 CA7B 5A                         getparm  phy                   ;preserve
   3692 CA7C 20 D2 C7                             jsr ascbin            ;convert parameter to binary
   3693 CA7F B0 1C                                bcs .0000040          ;conversion error
                                        ;
   3695 CA81 20 68 CB                             jsr getcharr          ;reread last char
   3696 CA84 D0 08                                bne .0000010          ;not end-of-input
                                        ;
   3698 CA86 C6 AD                                dec ibufidx           ;reindex to terminator
   3699 CA88 A5 B2                                lda charcnt           ;get chars processed so far
   3700 CA8A F0 0C                                beq .0000030          ;none
                                        ;
   3702 CA8C D0 08                                bne .0000020          ;some
                                        ;
   3704 CA8E C9 20                      .0000010 cmp #a_blank          ;recognized delimiter
   3705 CA90 F0 04                                beq .0000020          ;end of parameter
                                        ;
   3707 CA92 C9 2C                                cmp #','              ;recognized delimiter
   3708 CA94 D0 07                                bne .0000040          ;unknown delimter
                                        ;
   3710 CA96 18                         .0000020 clc
   3711 CA97 24                                   .byte bitzp           ;skip SEC below
                                        ;
   3713 CA98 38                         .0000030 sec
   3714 CA99 7A                                   ply                   ;restore
   3715 CA9A A5 B2                                lda charcnt           ;get count
   3716 CA9C 60                                   rts                   ;done
                                        ;
   3718 CA9D                            .0000040 
                                        ;.rept 3               ;clean up stack
   3720 CA9D 68                          			pla
   3721 CA9E 68                          			pla
   3722 CA9F 68                                     pla
                                        ;        .endr
   3724 CAA0 4C 24 C1                             jmp monerr            ;abort w/error
                                        ;
                                        ;================================================================================
                                        ;
                                        ;nxtaddra: TEST & INCREMENT WORKING ADDRESS 'A'
                                        ;
                                        ;	——————————————————————————————————————————————————
                                        ;	Calling syntax: JSR NXTADDRA
                                        ;
                                        ;	Exit registers: .A: used
                                        ;	                .B: used
                                        ;	                .X: entry value
                                        ;	                .Y: entry value
                                        ;	                DB: entry value
                                        ;	                DP: entry value
                                        ;	                PB: entry value
                                        ;	                SR: NVmxDIZC
                                        ;	                    ||||||||
                                        ;	                    |||||||+———> 0: ADDRA < ADDRB
                                        ;	                    |||||||      1: ADDRA >= ADDRB
                                        ;	                    ||||||+————> undefined
                                        ;	                    |||+++—————> entry value
                                        ;	                    ||+————————> 1
                                        ;	                    ++—————————> undefined
                                        ;	——————————————————————————————————————————————————
                                        ;
   3750 CAA3 E2 20                      nxtaddra +         .byte $e2,$20
                                        
   3751 CAA5 A5 91                                lda addra+s_word      ;bits 16-23
   3752 CAA7 C5 94                                cmp addrb+s_word
   3753 CAA9 90 0D                                bcc incaddra          ;increment
                                        ;
   3755 CAAB D0 0A                                bne .0000010          ;don't increment
                                        ;
   3757 CAAD C2 20                    +            .byte $c2,$20
                                        
   3758 CAAF A5 8F                                lda addra             ;bits 0-15
   3759 CAB1 C5 92                                cmp addrb             ;condition flags
   3760 CAB3 E2 20                    +            .byte $e2,$20
                                        
   3761 CAB5 90 01                                bcc incaddra          ;increment
                                        ;
   3763 CAB7 60                         .0000010 rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;incaddra: INCREMENT WORKING ADDRESS 'A'
                                        ;
                                        ;	——————————————————————————————————————————————————
                                        ;	Calling syntax: JSR INCADDRA
                                        ;
                                        ;	Exit registers: .A: entry value
                                        ;	                .B: entry value
                                        ;	                .X: entry value
                                        ;	                .Y: entry value
                                        ;	                DB: entry value
                                        ;	                DP: entry value
                                        ;	                PB: entry value
                                        ;	                SR: NVmxDIZC
                                        ;	                    ||||||||
                                        ;	                    ++++++++———> entry value
                                        ;	——————————————————————————————————————————————————
                                        ;
   3784 CAB8 08                         incaddra php
   3785 CAB9 C2 20                    +            .byte $c2,$20
                                        
   3786 CABB E6 8F                                inc addra             ;bump bits 0-15
   3787 CABD D0 04                                bne .0000010
                                        ;
   3789 CABF E2 20                    +            .byte $e2,$20
                                        
   3790 CAC1 E6 91                                inc addra+s_word      ;bump bits 16-23
                                        ;
   3792 CAC3 28                         .0000010 plp
   3793 CAC4 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;incoper: INCREMENT OPERAND ADDRESS
                                        ;
   3799 CAC5 18                         incoper  clc
   3800 CAC6 08                                   php
   3801 CAC7 C2 30                    +            .byte $c2,$30
                                        
   3802 CAC9 48                                   pha
   3803 CACA E6 A9                                inc operand           ;handle base address
   3804 CACC D0 06                                bne .0000010
                                        ;              
   3806 CACE E2 20                    +            .byte $e2,$20
                                        
   3807 CAD0 E6 AB                                inc operand+s_word    ;handle bank
   3808 CAD2 C2 20                    +            .byte $c2,$20
                                        
                                        ;
   3810 CAD4 68                         .0000010 pla
   3811 CAD5 28                                   plp
   3812 CAD6 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;instdata: GET INSTRUCTION SIZE & ADDRESSING MODE DATA
                                        ;
                                        ;	——————————————————————————————————
                                        ;	Preparatory Ops: .X: 65C816 opcode
                                        ;
                                        ;	Returned Values: .A: mode flags
                                        ;	                 .X: operand size
                                        ;	                 .Y: mode index
                                        ;	——————————————————————————————————
                                        ;
   3826 CAD7 E2 30                      instdata +         .byte $e2,$30
                                        
   3827 CAD9 BD 50 CE                             lda mnetabam,x        ;addressing mode data
   3828 CADC 48                                   pha                   ;save mode flag bits
   3829 CADD 48                                   pha                   ;save size data
   3830 CADE 29 0F                                and #amodmask         ;extract mode index &...
   3831 CAE0 A8                                   tay                   ;save
   3832 CAE1 68                                   pla                   ;recover data
   3833 CAE2 29 30                                and #opsmask          ;mask mode fields &...
                                        ;         .rept n_opslsr        ;extract operand size
   3835 CAE4 4A                                     lsr
   3836 CAE5 4A                                     lsr
   3837 CAE6 4A                                     lsr
   3838 CAE7 4A                                     lsr
                                        ;         .endr
   3840 CAE8 AA                                   tax                   ;operand size
   3841 CAE9 68                                   pla                   ;recover mode flags
   3842 CAEA 29 C0                                and #vopsmask         ;discard mode & size fields
   3843 CAEC 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;offtarg: CONVERT BRANCH OFFSET TO TARGET ADDRESS
                                        ;
                                        ;	———————————————————————————————————————————————
                                        ;	Preparatory Ops:    ADDRA: base address
                                        ;	                 INSTSIZE: instruction size
                                        ;	                  OPERAND: offset
                                        ;
                                        ;	Returned Values:  OPERAND: target address (L/H)
                                        ;	                       .A: used
                                        ;	                       .X: entry value
                                        ;                              .Y: entry value
                                        ;	———————————————————————————————————————————————
                                        ;
   3860 CAED C2 20                      offtarg +         .byte $c2,$20
                                        
   3861 CAEF A5 8F                                lda addra             ;base address
   3862 CAF1 E2 20                    +            .byte $e2,$20
                                        
   3863 CAF3 46 B4                                lsr instsize          ;bit 0 will be set if...
   3864 CAF5 B0 07                                bcs .0000010          ;a long branch
                                        ;
   3866 CAF7 24 A9                                bit operand           ;short forward or backward?
   3867 CAF9 10 03                                bpl .0000010          ;forward
                                        ;
   3869 CAFB EB                       +            .byte $eb
                                                           ;expose address MSB
   3870 CAFC 3A                                   dea                   ;back a page
   3871 CAFD EB                       +            .byte $eb
                                                           ;expose address LSB
                                        ;
   3873 CAFE C2 20                      .0000010 +         .byte $c2,$20
                                        
   3874 CB00 18                                   clc
   3875 CB01 65 A9                                adc operand           ;calculate target address
   3876 CB03 85 A9                                sta operand           ;new operand
   3877 CB05 E2 20                    +            .byte $e2,$20
                                        
   3878 CB07 A9 03                                lda #s_xword
   3879 CB09 85 B4                                sta instsize          ;effective instruction size
   3880 CB0B 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;setxaddr: SET EXECUTION ADDRESS
                                        ;
   3886 CB0C B0 13                      setxaddr bcs .0000010          ;no address given
                                        ;
   3888 CB0E 20 67 CA                             jsr facasize          ;check address...
   3889 CB11 C9 04                                cmp #s_dword          ;range
   3890 CB13 B0 0D                                bcs .0000020          ;out of range
                                        ;
   3892 CB15 C2 20                    +            .byte $c2,$20
                                        
   3893 CB17 A5 95                                lda faca              ;execution address
   3894 CB19 85 81                                sta reg_pcx           ;set new PC value
   3895 CB1B E2 20                    +            .byte $e2,$20
                                        
   3896 CB1D A5 97                                lda faca+s_word
   3897 CB1F 85 80                                sta reg_pbx           ;set new PB value
                                        ;
   3899 CB21 18                         .0000010 clc                   ;no error
                                        ;
   3901 CB22 60                         .0000020 rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;targoff: CONVERT BRANCH TARGET ADDRESS TO BRANCH OFFSET                   
                                        ;
                                        ;	—————————————————————————————————————————————————
                                        ;	Preparatory Ops:   ADDRA: instruction address
                                        ;	                 OPERAND: target address
                                        ;
                                        ;	Returned Values: OPERAND: computed offset
                                        ;	                      .A: effective operand size
                                        ;	                      .X: entry value
                                        ;                             .Y: entry value
                                        ;	                      .C: 1 = branch out of range
                                        ;
                                        ;	Execution notes: ADDRB is set to the branch base
                                        ;	                 address.
                                        ;	—————————————————————————————————————————————————
                                        ;
   3921 CB23 64 B5                      targoff  stz instsize+s_byte   ;always zero
   3922 CB25 A5 B4                                lda instsize          ;instruction size will tell...
   3923 CB27 4A                                   lsr                   ;if long or short branch
                                        ;
                                        ;—————————————————————————————————————————————————
   4118 = 000000A8                      .btype   =facc+5               ;branch type flag
                                        ;—————————————————————————————————————————————————
                                        ;
   3929 CB28 66 A8                                ror .btype            ;set branch type...
                                        ;
                                        ;	x0000000
                                        ;	|
                                        ;	+——————————> 0: short
                                        ;	             1: long
                                        ;
   3936 CB2A C2 20                    +            .byte $c2,$20
                                        
   3937 CB2C 18                                   clc
   3938 CB2D A5 8F                                lda addra             ;instruction address
   3939 CB2F 65 B4                                adc instsize          ;instruction size
   3940 CB31 85 92                                sta addrb             ;base address
   3941 CB33 38                                   sec
   3942 CB34 A5 A9                                lda operand           ;target address
   3943 CB36 E5 92                                sbc addrb             ;base address
   3944 CB38 85 A9                                sta operand           ;offset
   3945 CB3A E2 20                    +            .byte $e2,$20
                                        
   3946 CB3C 90 15                                bcc .0000040          ;backward branch
                                        ;
   3948 CB3E 24 A8                                bit .btype            ;check branch range
   3949 CB40 30 0A                                bmi .0000020          ;long
                                        ;
                                        ;
                                        ;	process short forward branch...
                                        ;
   3954 CB42 EB                       +            .byte $eb
                                                           ;offset MSB should be zero
   3955 CB43 D0 21                                bne .0000060          ;it isn't — out of range
                                        ;
   3957 CB45 EB                       +            .byte $eb
                                                           ;offset LSB should be $00-$7F
   3958 CB46 30 1E                                bmi .0000060          ;it isn't — out of range
                                        ;
   3960 CB48 A9 01                      .0000010 lda #s_byte           ;final instruction size
   3961 CB4A 18                                   clc                   ;branch in range
   3962 CB4B 60                                   rts
                                        ;
                                        ;
                                        ;	process long forward branch...
                                        ;
   3967 CB4C EB                         .0000020 +         .byte $eb
                                                           ;offset MSB should be positive
   3968 CB4D 30 17                                bmi .0000060          ;it isn't — branch out of range
                                        ;
   3970 CB4F A9 02                      .0000030 lda #s_word
   3971 CB51 18                                   clc
   3972 CB52 60                                   rts
                                        ;
                                        ;
                                        ;	process backward branch...
                                        ;
   3977 CB53 24 A8                      .0000040 bit .btype            ;long or short?
   3978 CB55 30 0C                                bmi .0000050          ;long
                                        ;
                                        ;
                                        ;	process short backward branch...
                                        ;
   3983 CB57 EB                       +            .byte $eb
                                                           ;offset MSB should be negative
   3984 CB58 10 0C                                bpl .0000060          ;it isn't — out of range
                                        ;
   3986 CB5A 49 FF                                eor #%11111111        ;complement offset MSB 2s 
   3987 CB5C D0 08                                bne .0000060          ;out of range
                                        ;
   3989 CB5E EB                       +            .byte $eb
                                                           ;offset LSB should be $80-$FF
   3990 CB5F 30 E7                                bmi .0000010          ;it is — branch in range
                                        ;
   3992 CB61 80 03                                bra .0000060          ;branch out of range
                                        ;
                                        ;
                                        ;	process long backward branch...
                                        ;
   3997 CB63 EB                         .0000050 +         .byte $eb
                                                           ;offset MSB should be negative
   3998 CB64 30 E9                                bmi .0000030          ;it is — branch in range
                                        ;
   4000 CB66 38                         .0000060 sec                   ;range error
   4001 CB67 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getcharr: GET PREVIOUS INPUT BUFFER CHARACTER
                                        ;
   4007 CB68 C6 AD                      getcharr dec ibufidx           ;move back a char
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getchar: GET A CHARACTER FROM INPUT BUFFER
                                        ;
                                        ;	——————————————————————————————————————————————
                                        ;	Preparatory Ops : none
                                        ;
                                        ;	Register Returns: .A: character or <NUL>
                                        ;	                  .B: entry value
                                        ;	                  .X: entry value
                                        ;	                  .Y: entry value
                                        ;
                                        ;	MPU Flags: NVmxDIZC
                                        ;	           ||||||||
                                        ;	           |||||||+———> entry value
                                        ;	           ||||||+————> 1: <NUL> gotten
                                        ;	           |||||+—————> entry value
                                        ;	           ||||+——————> entry value
                                        ;	           |||+———————> entry value
                                        ;	           ||+————————> entry value
                                        ;	           |+—————————> not defined
                                        ;	           +——————————> not defined
                                        ;	——————————————————————————————————————————————
                                        ;
   4033 CB6A DA                         getchar  phx
   4034 CB6B 5A                                   phy
   4035 CB6C 08                                   php                   ;save register sizes
   4036 CB6D E2 30                    +            .byte $e2,$30
                                                        ;force 8 bits
   4037 CB6F A6 AD                                ldx ibufidx           ;buffer index
   4038 CB71 BD 00 02                             lda ibuffer,x         ;get char
   4039 CB74 E6 AD                                inc ibufidx           ;bump index
   4040 CB76 28                                   plp                   ;restore register widths
   4041 CB77 7A                                   ply
   4042 CB78 FA                                   plx
                                        ; Changed the following to XBA instruction which seems to work as well.
                                        ; XBA doesn't access the stack memory saving a data memory access,
                                        ; and hence is faster.
   4046 CB79 EB                       +            .byte $eb
                                        		;	pha                   ;condition...
   4047 CB7A EB                       +            .byte $eb
                                        		;   pla                   ;.Z
   4048 CB7B 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getpat: GET PATTERN FOR MEMORY CHANGE or SEARCH
                                        ;
                                        ;	—————————————————————————————————————————————————————
                                        ;	Preparatory Ops: Null-terminated pattern in IBUFFER.
                                        ;
                                        ;	Returned Values: .A: used
                                        ;	                 .X: used
                                        ;	                 .Y: pattern length if entered
                                        ;	                 .C: 0 = pattern valid
                                        ;	                     1 = exception:
                                        ;	                 .N  0 = no pattern entered
                                        ;	                     1 = evaluation error
                                        ;
                                        ;	Notes: 1) If pattern is preceded by "'" the following
                                        ;	          characters are interpreted as ASCII.
                                        ;	       2) A maximum of 32 bytes or characters is
                                        ;	          accepted.  Excess input will be discarded.
                                        ;	—————————————————————————————————————————————————————
                                        ;
   4071 CB7C 64 B9                      getpat   stz status            ;clear pattern type indicator
   4072 CB7E A0 00                                ldy #0                ;pattern index
   4073 CB80 20 68 CB                             jsr getcharr          ;get last char
   4074 CB83 F0 3A                                beq .0000070          ;EOS
                                        ;
   4076 CB85 A6 AD                                ldx ibufidx           ;current buffer index
   4077 CB87 20 C6 CB                             jsr getcharw          ;get next
   4078 CB8A F0 33                                beq .0000070          ;EOS
                                        ;
   4080 CB8C C9 27                                cmp #'''
                                        ;
   4082 CB8E 66 B9                                ror status            ;condition flag
   4083 CB90 80 12                                bra .0000030          ;balance of input is ASCII
                                        ;
   4085 CB92 86 AD                      .0000010 stx ibufidx           ;restore buffer index
                                        ;
   4087 CB94 20 7B CA                   .0000020 jsr getparm           ;evaluate numeric pattern
   4088 CB97 B0 21                                bcs .0000060          ;done w/pattern
                                        ;
   4090 CB99 20 67 CA                             jsr facasize          ;size
   4091 CB9C C9 02                                cmp #s_word
   4092 CB9E B0 1F                                bcs .0000070          ;not a byte — error
                                        ;
   4094 CBA0 A5 95                                lda faca              ;get byte &...
   4095 CBA2 80 05                                bra .0000040          ;store
                                        ;
   4097 CBA4 20 6A CB                   .0000030 jsr getchar           ;get ASCII char
   4098 CBA7 F0 11                                beq .0000060          ;done w/pattern
                                        ;
   4100 CBA9 C0 20                      .0000040 cpy #s_auxbuf         ;pattern buffer full?
   4101 CBAB F0 0A                                beq .0000050          ;yes
                                        ;
   4103 CBAD 99 46 02                             sta auxbuf,y          ;store pattern
   4104 CBB0 C8                                   iny
   4105 CBB1 24 B9                                bit status
   4106 CBB3 10 DF                                bpl .0000020          ;get next numeric value
                                        ;
   4108 CBB5 80 ED                                bra .0000030          ;get next ASCII char
                                        ;
   4110 CBB7 20 B0 C7                   .0000050 jsr alert             ;excess input
                                        ;
   4112 CBBA 84 AC                      .0000060 sty auxbufix          ;save pattern size
   4113 CBBC 98                                   tya                   ;condition .Z
   4114 CBBD 18                                   clc                   ;pattern valid
   4115 CBBE 60                                   rts
                                        ;
                                        ;
                                        ;	no pattern entered...
                                        ;
   4120 CBBF C2 80                      .0000070 +         .byte $c2,%10000000
                                        
   4121 CBC1 38                                   sec
   4122 CBC2 60                                   rts
                                        ;
                                        ;
                                        ;	evaluation error...
                                        ;
   4127 CBC3 E2 81                      .0000080 +         .byte $e2,%10000001
                                        
   4128 CBC5 60                                   rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;getcharw: GET FROM INPUT BUFFER, DISCARDING WHITESPACE
                                        ;
                                        ;	——————————————————————————————————————————————————
                                        ;	Preparatory Ops: Null-terminated input in IBUFFER.
                                        ;
                                        ;	Returned Values: .A: char or null
                                        ;	                 .X: entry value
                                        ;	                 .Y: entry value
                                        ;	                 .Z: 1 = null terminator detected
                                        ;
                                        ;	Notes: Whitespace is defined as a blank ($20) or a
                                        ;	       horizontal tab ($09).
                                        ;	——————————————————————————————————————————————————
                                        ;
   4146 CBC6 20 6A CB                   getcharw jsr getchar           ;get from buffer
   4147 CBC9 F0 08                                beq .0000010          ;EOI
                                        ;
   4149 CBCB C9 20                                cmp #' '
   4150 CBCD F0 F7                                beq getcharw          ;discard whitespace
                                        ;
   4152 CBCF C9 09                                cmp #a_ht             ;also whitespace
   4153 CBD1 F0 F3                                beq getcharw
                                        ;
   4155 CBD3 18                         .0000010 clc
   4156 CBD4 60                                   rts  
                                        ;
                                        ;================================================================================
                                        ;
                                        ;input: INTERACTIVE INPUT FROM CONSOLE CHANNEL
                                        ;
                                        ;	———————————————————————————————————————————————————————————
                                        ;	Preparatory Ops: Zero IBUFIDX or load IBUFFER with default
                                        ;	                 input & set IBUFIDX to the number of chars
                                        ;	                 loaded into the buffer.
                                        ;
                                        ;	Returned Values: .A: used
                                        ;	                 .X: characters entered
                                        ;	                 .Y: used
                                        ;
                                        ;	Example: STZ IBUFIDX
                                        ;	         JSR INPUT
                                        ;
                                        ;	Notes: Input is collected in IBUFFER & is null-terminated.
                                        ;	       IBUFIDX is reset to zero upon exit.
                                        ;	———————————————————————————————————————————————————————————
                                        ;
   4178 CBD5                            input:
   4179 CBD5 A6 AD                       	    ldx ibufidx
   4180 CBD7 9E 00 02                             stz ibuffer,x         ;be sure buffer is terminated
   4181 CBDA 20 1C C7                             jsr dpyibuf           ;print default input if any
   4182 CBDD F4                       +            .byte $f4
   4182 CBDE A8 CF                    +            .word dc_cn
                                        
   4183 CBE0 20 B9 C7                             jsr sprint            ;enable cursor
   4184 CBE3 A6 AD                                ldx ibufidx           ;starting buffer index
                                        ;
                                        ;
                                        ;	main input loop...
                                        ;
   4189 CBE5 20 00 F4                   .0000010 jsr getcha            ;poll for input
   4190 CBE8 90 02                                bcc .0000020          ;got something
                                        ;
                                        ;         jsr	$F409          ;wait 'til any IRQ &... (Reschedule tasks)
   4193 CBEA 80 F9                                bra .0000010          ;try again
                                        ;
   4195 CBEC                            .0000020
   4196 CBEC C9 7F                       		cmp #a_del            ;above ASCII range?
   4197 CBEE B0 F5                                bcs .0000010          ;yes, ignore
                                        ;
   4199 CBF0 C9 09                                cmp #a_ht             ;horizontal tab?
   4200 CBF2 D0 02                                bne .0000030          ;no
                                        ;
   4202 CBF4 A9 20                                lda #a_blank          ;replace <HT> w/blank
                                        ;
   4204 CBF6 C9 20                      .0000030 cmp #a_blank          ;control char?
   4205 CBF8 90 10                                bcc .0000050          ;yes
                                        ;
                                        ;
                                        ;	process QWERTY character...
                                        ;
   4210 CBFA E0 45                                cpx #s_ibuf           ;room in buffer?
   4211 CBFC B0 05                                bcs .0000040          ;no
                                        ;
   4213 CBFE 9D 00 02                             sta ibuffer,x         ;store char
   4214 CC01 E8                                   inx                   ;bump index
   4215 CC02 2C                                   .byte bitabs          ;echo char
                                        ;
   4217 CC03 A9 07                      .0000040 lda #a_bel            ;alert user
   4218 CC05 20 06 F4                             jsr putcha
   4219 CC08 80 DB                                bra .0000010          ;get some more
                                        ;
                                        ;
                                        ;	process carriage return...
                                        ;
   4224 CC0A C9 0D                      .0000050 cmp #a_cr             ;carriage return?
   4225 CC0C D0 0E                                bne .0000060          ;no
                                        ;
   4227 CC0E DA                                   phx                   ;protect input count
   4228 CC0F F4                       +            .byte $f4
   4228 CC10 AC CF                    +            .word dc_co
                                        
   4229 CC12 20 B9 C7                             jsr sprint            ;cursor off
   4230 CC15 FA                                   plx                   ;recover input count
   4231 CC16 9E 00 02                             stz ibuffer,x         ;terminate input &...
   4232 CC19 64 AD                                stz ibufidx           ;reset buffer index
   4233 CC1B 60                                   rts                   ;done
                                        ;
                                        ;
                                        ;	process backspace...
                                        ;
   4238 CC1C C9 08                      .0000060 cmp #a_bs             ;backspace?
   4239 CC1E D0 C5                                bne .0000010          ;no
                                        ;
   4241 CC20 8A                                   txa
   4242 CC21 F0 C2                                beq .0000010          ;no input, ignore <BS>
                                        ;
   4244 CC23 CA                                   dex                   ;1 less char
   4245 CC24 DA                                   phx                   ;preserve count
   4246 CC25 20 6B C7                             jsr gendbs            ;destructive backspace
   4247 CC28 FA                                   plx                   ;restore count
   4248 CC29 80 BA                                bra .0000010          ;get more input
                                        ;
                                        ;================================================================================
                                        ;
                                        ;lodbnk: LOAD SOURCE & DESTINATION BANKS
                                        ;
   4254 CC2B E2 20                      lodbnk +         .byte $e2,$20
                                        
   4255 CC2D A5 AB                                lda operand+s_word    ;destination bank
   4256 CC2F EB                       +            .byte $eb
                                                           ;make it MSB
   4257 CC30 A5 91                                lda addra+s_word      ;source bank is LSB
   4258 CC32 60                                   rts
                                        ;         
                                        ;================================================================================
                                        ;
                                        ;getcharc: GET A CHARACTER FROM INPUT BUFFER & CONVERT CASE
                                        ;
                                        ;	——————————————————————————————————————————————————
                                        ;	Preparatory Ops: Null-terminated input in IBUFFER.
                                        ;
                                        ;	Returned Values: .A: char or null
                                        ;	                 .X: entry value
                                        ;	                 .Y: entry value
                                        ;	                 .Z: 1 = null terminator detected
                                        ;	——————————————————————————————————————————————————
                                        ;
   4273 CC33 20 6A CB                   getcharc jsr getchar           ;get from buffer
   4274 CC36 F0 0C                                beq touppera          ;just return
                                        ;
                                        ;================================================================================
                                        ;
                                        ;toupper: FORCE CHARACTER TO UPPER CASE
                                        ;
                                        ;	————————————————————————————————————————————————
                                        ;	Preparatory Ops : .A: character to convert
                                        ;
                                        ;	Register Returns: .A: converted character
                                        ;	                  .B: entry value
                                        ;	                  .X: entry value
                                        ;	                  .Y: entry value
                                        ;
                                        ;	MPU Flags: no change
                                        ;
                                        ;	Notes: 1) This subroutine has no effect on char-
                                        ;	          acters that are not alpha.
                                        ;	————————————————————————————————————————————————
                                        ;
   4294 CC38 08                         toupper  php                   ;protect flags
   4295 CC39 C9 61                                cmp #a_asclcl         ;check char range
   4296 CC3B 90 06                                bcc .0000010          ;not LC alpha
                                        ;
   4298 CC3D C9 7B                                cmp #a_asclch+s_byte
   4299 CC3F B0 02                                bcs .0000010          ;not LC alpha
                                        ;
   4301 CC41 29 5F                                and #a_lctouc         ;force to UC
                                        ;
   4303 CC43 28                         .0000010 plp                   ;restore flags
                                        ;
   4305 CC44 60                         touppera rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;teststop: TEST FOR STOP KEY
                                        ;
                                        ;	——————————————————————————————————————————————
                                        ;	Preparatory Ops: none
                                        ;
                                        ;	Returned Values: .A: detected keypress, if any
                                        ;	                 .X: entry value
                                        ;	                 .Y: entry value
                                        ;
                                        ;	MPU Flags: NVmxDIZC
                                        ;	           ||||||||
                                        ;	           |||||||+———> 0: normal key detected
                                        ;	           |||||||      1: <STOP> detected
                                        ;	           +++++++————> not defined
                                        ;
                                        ;	Example: jsr teststop
                                        ;	         bcs stopped
                                        ;
                                        ;	Notes: The symbol STOPKEY defines the ASCII
                                        ;	       value of the "stop key."
                                        ;	——————————————————————————————————————————————
                                        ;
   4331 CC45 20 00 F4                   teststop jsr getcha            ;poll console
   4332 CC48 B0 04                                bcs .0000010          ;no input
                                        ;
   4334 CC4A C9 03                                cmp #stopkey          ;stop key pressed?
   4335 CC4C F0 01                                beq .0000020          ;yes
                                        ;
   4337 CC4E 18                         .0000010 clc
                                        ;
   4339 CC4F 60                         .0000020 rts
                                        ;
                                        ;================================================================================
                                        ;
                                        ;COMMAND PROCESSING DATA TABLES
                                        ;
                                        ;
                                        ;	monitor commands...
                                        ;
   4348 CC50 41                         mpctab   .byte "A"             ;assemble code
   4349 CC51 43                                   .byte "C"             ;compare memory ranges
   4350 CC52 44                                   .byte "D"             ;disassemble code
   4351 CC53 46                                   .byte "F"             ;fill memory
   4352 CC54 47                                   .byte "G"             ;execute code
   4353 CC55 48                                   .byte "H"             ;search memory
   4354 CC56 4A                                   .byte "J"             ;execute code as subroutine
   4355 CC57 4D                                   .byte "M"             ;dump memory range
   4356 CC58 52                                   .byte "R"             ;dump registers
   4357 CC59 54                                   .byte "T"             ;copy memory range
   4358 CC5A 58                                   .byte "X"             ;exit from monitor
   4359 CC5B 3E                                   .byte ">"             ;change memory
   4360 CC5C 3B                                   .byte ";"             ;change registers
   4572 = 0000000D                      n_mpctab =*-mpctab             ;entries in above table
                                        ;
                                        ;
                                        ;	monitor command jump table...
                                        ;
   4366 CC5D 2A C1                      mpcextab .word monasc-s_byte   ; A  assemble code
   4367 CC5F EC C3                                .word moncmp-s_byte   ; C  compare memory ranges
   4368 CC61 06 C3                                .word mondsc-s_byte   ; D  disassemble code
   4369 CC63 BD C4                                .word monfil-s_byte   ; F  fill memory
   4370 CC65 5A C3                                .word monjmp-s_byte   ; G  execute code
   4371 CC67 23 C5                                .word monhnt-s_byte   ; H  search memory
   4372 CC69 8B C3                                .word monjsr-s_byte   ; J  execute code as subroutine
   4373 CC6B 6B C4                                .word mondmp-s_byte   ; M  dump memory range
   4374 CC6D 97 C0                                .word monreg-s_byte   ; R  dump registers
   4375 CC6F 1A C4                                .word moncpy-s_byte   ; T  copy memory range
   4376 CC71 D4 C5                                .word monxit-s_byte   ; X  exit from monitor
   4377 CC73 C1 C3                                .word monchm-s_byte   ; >  change memory
   4378 CC75 99 C5                                .word monchr-s_byte   ; ;  change registers
                                        ;
                                        ;
                                        ;	number conversion...
                                        ;        
   4383 CC77 10 0A 08 02                basetab  .byte 16,10,8,2       ;supported number bases
   4384 CC7B 04 03 03 01                bitsdtab .byte 4,3,3,1         ;bits per binary digit
   4385 CC7F 04 04 03 01                bitsntab .byte 4,4,3,1         ;bits per ASCII character
   4386 CC83 03 02 09 02                lzsttab  .byte 3,2,9,2         ;leading zero suppression thresholds
   4387 CC87 0C 0C 10 30                numstab  .byte 12,12,16,48     ;bin to ASCII conversion numerals
   4388 CC8B 24                         radxtab  .byte c_hex           ;hexadecimal radix
   4389 CC8C 2B                                   .byte c_dec           ;decimal radix
   4390 CC8D 40                                   .byte c_oct           ;octal radix
   4391 CC8E 25                                   .byte c_bin           ;binary radix
   4603 = 00000004                      n_radix  =*-radxtab            ;number of recognized radices
                                        ;
                                        ;
                                        ;	shadow MPU register sizes...
                                        ;
   4397 CC8F 02                         rcvltab  .byte s_mpupbx+s_byte ; PB
   4398 CC90 03                                   .byte s_mpupcx+s_byte ; PC
   4399 CC91 02                                   .byte s_mpusrx+s_byte ; SR
   4400 CC92 03                                   .byte s_word+s_byte   ; .C
   4401 CC93 03                                   .byte s_word+s_byte   ; .X
   4402 CC94 03                                   .byte s_word+s_byte   ; .Y
   4403 CC95 03                                   .byte s_mpuspx+s_byte ; SP
   4404 CC96 03                                   .byte s_mpudpx+s_byte ; DP
   4405 CC97 02                                   .byte s_mpudbx+s_byte ; DB
   4617 = 00000009                      n_regchv =*-rcvltab            ;total shadow registers
                                        ;
                                        ;================================================================================
                                        ;
                                        ;ASSEMBLER/DISASSEMBLER DATA TABLES
                                        ;
                                        ;
                                        ;	numerically sorted & encoded W65C816S mnemonics...
                                        ;
   4415 CC98 F2 10                      mnetab   .word mne_xba         ;  0 — XBA
   4416 CC9A 5A 11                                .word mne_lda         ;  1 — LDA
   4417 CC9C A2 11                                .word mne_pea         ;  2 — PEA
   4418 CC9E 62 12                                .word mne_pha         ;  3 — PHA
   4419 CCA0 62 13                                .word mne_pla         ;  4 — PLA
   4420 CCA2 C6 14                                .word mne_bra         ;  5 — BRA
   4421 CCA4 E0 14                                .word mne_ora         ;  6 — ORA
   4422 CCA6 68 15                                .word mne_sta         ;  7 — STA
   4423 CCA8 6A 16                                .word mne_txa         ;  8 — TXA
   4424 CCAA AA 16                                .word mne_tya         ;  9 — TYA
   4425 CCAC 62 1A                                .word mne_phb         ; 10 — PHB
   4426 CCAE 62 1B                                .word mne_plb         ; 11 — PLB
   4427 CCB0 EA 1C                                .word mne_trb         ; 12 — TRB
   4428 CCB2 2A 1D                                .word mne_tsb         ; 13 — TSB
   4429 CCB4 E8 20                                .word mne_sbc         ; 14 — SBC
   4430 CCB6 06 21                                .word mne_bcc         ; 15 — BCC
   4431 CCB8 44 21                                .word mne_adc         ; 16 — ADC
   4432 CCBA 6A 21                                .word mne_tdc         ; 17 — TDC
   4433 CCBC 8A 21                                .word mne_dec         ; 18 — DEC
   4434 CCBE A8 21                                .word mne_sec         ; 19 — SEC
   4435 CCC0 48 23                                .word mne_clc         ; 20 — CLC
   4436 CCC2 D4 23                                .word mne_inc         ; 21 — INC
   4437 CCC4 2A 25                                .word mne_tsc         ; 22 — TSC
   4438 CCC6 C6 25                                .word mne_bvc         ; 23 — BVC
   4439 CCC8 2A 29                                .word mne_tcd         ; 24 — TCD
   4440 CCCA A8 29                                .word mne_sed         ; 25 — SED
   4441 CCCC 62 2A                                .word mne_phd         ; 26 — PHD
   4442 CCCE 48 2B                                .word mne_cld         ; 27 — CLD
   4443 CCD0 62 2B                                .word mne_pld         ; 28 — PLD
   4444 CCD2 C4 2B                                .word mne_and         ; 29 — AND
   4445 CCD4 32 31                                .word mne_xce         ; 30 — XCE
   4446 CCD6 C6 33                                .word mne_bne         ; 31 — BNE
   4447 CCD8 B0 50                                .word mne_wai         ; 32 — WAI
   4448 CCDA A2 51                                .word mne_pei         ; 33 — PEI
   4449 CCDC A8 51                                .word mne_sei         ; 34 — SEI
   4450 CCDE 48 53                                .word mne_cli         ; 35 — CLI
   4451 CCE0 86 53                                .word mne_bmi         ; 36 — BMI
   4452 CCE2 66 55                                .word mne_rti         ; 37 — RTI
   4453 CCE4 62 62                                .word mne_phk         ; 38 — PHK
   4454 CCE6 C6 64                                .word mne_brk         ; 39 — BRK
   4455 CCE8 96 6B                                .word mne_jml         ; 40 — JML
   4456 CCEA 26 6C                                .word mne_rol         ; 41 — ROL
   4457 CCEC 46 6C                                .word mne_bpl         ; 42 — BPL
   4458 CCEE C6 6C                                .word mne_brl         ; 43 — BRL
   4459 CCF0 04 6D                                .word mne_asl         ; 44 — ASL
   4460 CCF2 16 6D                                .word mne_jsl         ; 45 — JSL
   4461 CCF4 66 6D                                .word mne_rtl         ; 46 — RTL
   4462 CCF6 70 71                                .word mne_wdm         ; 47 — WDM
   4463 CCF8 DC 7D                                .word mne_mvn         ; 48 — MVN
   4464 CCFA A6 89                                .word mne_rep         ; 49 — REP
   4465 CCFC A8 89                                .word mne_sep         ; 50 — SEP
   4466 CCFE 62 8A                                .word mne_php         ; 51 — PHP
   4467 CD00 62 8B                                .word mne_plp         ; 52 — PLP
   4468 CD02 88 8B                                .word mne_cmp         ; 53 — CMP
   4469 CD04 96 8B                                .word mne_jmp         ; 54 — JMP
   4470 CD06 08 8C                                .word mne_cop         ; 55 — COP
   4471 CD08 1E 8C                                .word mne_nop         ; 56 — NOP
   4472 CD0A 68 8D                                .word mne_stp         ; 57 — STP
   4473 CD0C DC 8D                                .word mne_mvp         ; 58 — MVP
   4474 CD0E 86 91                                .word mne_beq         ; 59 — BEQ
   4475 CD10 A2 99                                .word mne_per         ; 60 — PER
   4476 CD12 0C 9C                                .word mne_eor         ; 61 — EOR
   4477 CD14 26 9C                                .word mne_ror         ; 62 — ROR
   4478 CD16 16 9D                                .word mne_jsr         ; 63 — JSR
   4479 CD18 1A 9D                                .word mne_lsr         ; 64 — LSR
   4480 CD1A 06 A1                                .word mne_bcs         ; 65 — BCS
   4481 CD1C 2A A1                                .word mne_tcs         ; 66 — TCS
   4482 CD1E 66 A5                                .word mne_rts         ; 67 — RTS
   4483 CD20 C6 A5                                .word mne_bvs         ; 68 — BVS
   4484 CD22 6A A6                                .word mne_txs         ; 69 — TXS
   4485 CD24 86 AA                                .word mne_bit         ; 70 — BIT
   4486 CD26 48 BB                                .word mne_clv         ; 71 — CLV
   4487 CD28 AA C8                                .word mne_tax         ; 72 — TAX
   4488 CD2A 5A C9                                .word mne_ldx         ; 73 — LDX
   4489 CD2C 8A C9                                .word mne_dex         ; 74 — DEX
   4490 CD2E 62 CA                                .word mne_phx         ; 75 — PHX
   4491 CD30 62 CB                                .word mne_plx         ; 76 — PLX
   4492 CD32 D4 CB                                .word mne_inx         ; 77 — INX
   4493 CD34 48 CC                                .word mne_cpx         ; 78 — CPX
   4494 CD36 2A CD                                .word mne_tsx         ; 79 — TSX
   4495 CD38 68 CD                                .word mne_stx         ; 80 — STX
   4496 CD3A AA CE                                .word mne_tyx         ; 81 — TYX
   4497 CD3C AA D0                                .word mne_tay         ; 82 — TAY
   4498 CD3E 5A D1                                .word mne_ldy         ; 83 — LDY
   4499 CD40 8A D1                                .word mne_dey         ; 84 — DEY
   4500 CD42 62 D2                                .word mne_phy         ; 85 — PHY
   4501 CD44 62 D3                                .word mne_ply         ; 86 — PLY
   4502 CD46 D4 D3                                .word mne_iny         ; 87 — INY
   4503 CD48 48 D4                                .word mne_cpy         ; 88 — CPY
   4504 CD4A 68 D5                                .word mne_sty         ; 89 — STY
   4505 CD4C 6A D6                                .word mne_txy         ; 90 — TXY
   4506 CD4E 68 DD                                .word mne_stz         ; 91 — STZ
                                        ;
   4719 = 000000B8                      s_mnetab =*-mnetab             ;mnemonic table size
   4720 = 0000005C                      n_mnemon =s_mnetab/s_word      ;total mnemonics
                                        ;
                                        ;
                                        ;	mnemonic lookup indices in opcode order...
                                        ;
   4514 CD50 27                         mnetabix .byte mne_brkx        ; $00  BRK
   4515 CD51 06                                   .byte mne_orax        ; $01  ORA (dp,X)
   4516 CD52 37                                   .byte mne_copx        ; $02  COP
   4517 CD53 06                                   .byte mne_orax        ; $03  ORA offset,S
   4518 CD54 0D                                   .byte mne_tsbx        ; $04  TSB dp
   4519 CD55 06                                   .byte mne_orax        ; $05  ORA dp
   4520 CD56 2C                                   .byte mne_aslx        ; $06  ASL dp
   4521 CD57 06                                   .byte mne_orax        ; $07  ORA [dp]
   4522 CD58 33                                   .byte mne_phpx        ; $08  PHP
   4523 CD59 06                                   .byte mne_orax        ; $09  ORA #
   4524 CD5A 2C                                   .byte mne_aslx        ; $0A  ASL A
   4525 CD5B 1A                                   .byte mne_phdx        ; $0B  PHD
   4526 CD5C 0D                                   .byte mne_tsbx        ; $0C  TSB abs
   4527 CD5D 06                                   .byte mne_orax        ; $0D  ORA abs
   4528 CD5E 2C                                   .byte mne_aslx        ; $0E  ASL abs
   4529 CD5F 06                                   .byte mne_orax        ; $0F  ORA absl
                                        ;
   4531 CD60 2A                                   .byte mne_bplx        ; $10  BPL abs
   4532 CD61 06                                   .byte mne_orax        ; $11  ORA (dp),Y
   4533 CD62 06                                   .byte mne_orax        ; $12  ORA (dp)
   4534 CD63 06                                   .byte mne_orax        ; $13  ORA (offset,S),Y
   4535 CD64 0C                                   .byte mne_trbx        ; $14  TRB dp
   4536 CD65 06                                   .byte mne_orax        ; $15  ORA dp,X
   4537 CD66 2C                                   .byte mne_aslx        ; $16  ASL dp,X
   4538 CD67 06                                   .byte mne_orax        ; $17  ORA [dp],Y
   4539 CD68 14                                   .byte mne_clcx        ; $18  CLC
   4540 CD69 06                                   .byte mne_orax        ; $19  ORA abs
   4541 CD6A 15                                   .byte mne_incx        ; $1A  INC A
   4542 CD6B 42                                   .byte mne_tcsx        ; $1B  TCS
   4543 CD6C 0C                                   .byte mne_trbx        ; $1C  TRB abs
   4544 CD6D 06                                   .byte mne_orax        ; $1D  ORA abs,X
   4545 CD6E 2C                                   .byte mne_aslx        ; $1E  ASL abs,X
   4546 CD6F 06                                   .byte mne_orax        ; $1F  ORA absl,X
                                        ;
   4548 CD70 3F                                   .byte mne_jsrx        ; $20  JSR abs
   4549 CD71 1D                                   .byte mne_andx        ; $21  AND (dp,X)
   4550 CD72 2D                                   .byte mne_jslx        ; $22  JSL absl
   4551 CD73 1D                                   .byte mne_andx        ; $23  AND offset,S
   4552 CD74 46                                   .byte mne_bitx        ; $24  BIT dp
   4553 CD75 1D                                   .byte mne_andx        ; $25  AND dp
   4554 CD76 29                                   .byte mne_rolx        ; $26  ROL dp
   4555 CD77 1D                                   .byte mne_andx        ; $27  AND [dp]
   4556 CD78 34                                   .byte mne_plpx        ; $28  PLP
   4557 CD79 1D                                   .byte mne_andx        ; $29  AND #
   4558 CD7A 29                                   .byte mne_rolx        ; $2A  ROL A
   4559 CD7B 1C                                   .byte mne_pldx        ; $2B  PLD
   4560 CD7C 46                                   .byte mne_bitx        ; $2C  BIT abs
   4561 CD7D 1D                                   .byte mne_andx        ; $2D  AND abs
   4562 CD7E 29                                   .byte mne_rolx        ; $2E  ROL abs
   4563 CD7F 1D                                   .byte mne_andx        ; $2F  AND absl
                                        ;
   4565 CD80 24                                   .byte mne_bmix        ; $30  BMI abs
   4566 CD81 1D                                   .byte mne_andx        ; $31  AND (dp),Y
   4567 CD82 1D                                   .byte mne_andx        ; $32  AND (dp)
   4568 CD83 1D                                   .byte mne_andx        ; $33  AND (offset,S),Y
   4569 CD84 46                                   .byte mne_bitx        ; $34  BIT dp,X
   4570 CD85 1D                                   .byte mne_andx        ; $35  AND dp,X
   4571 CD86 29                                   .byte mne_rolx        ; $36  ROL dp,X
   4572 CD87 1D                                   .byte mne_andx        ; $37  AND [dp],Y
   4573 CD88 13                                   .byte mne_secx        ; $38  SEC
   4574 CD89 1D                                   .byte mne_andx        ; $39  AND abs,Y
   4575 CD8A 12                                   .byte mne_decx        ; $3A  DEC A
   4576 CD8B 16                                   .byte mne_tscx        ; $3B  TSC
   4577 CD8C 46                                   .byte mne_bitx        ; $3C  BIT abs,X
   4578 CD8D 1D                                   .byte mne_andx        ; $3D  AND abs,X
   4579 CD8E 29                                   .byte mne_rolx        ; $3E  ROL abs,X
   4580 CD8F 1D                                   .byte mne_andx        ; $3F  AND absl,X
                                        ;
   4582 CD90 25                                   .byte mne_rtix        ; $40  RTI
   4583 CD91 3D                                   .byte mne_eorx        ; $41  EOR (dp,X)
   4584 CD92 2F                                   .byte mne_wdmx        ; $42  WDM
   4585 CD93 3D                                   .byte mne_eorx        ; $43  EOR offset,S
   4586 CD94 3A                                   .byte mne_mvpx        ; $44  MVP sb,db
   4587 CD95 3D                                   .byte mne_eorx        ; $45  EOR dp
   4588 CD96 40                                   .byte mne_lsrx        ; $46  LSR dp
   4589 CD97 3D                                   .byte mne_eorx        ; $47  EOR [dp]
   4590 CD98 03                                   .byte mne_phax        ; $48  PHA
   4591 CD99 3D                                   .byte mne_eorx        ; $49  EOR #
   4592 CD9A 40                                   .byte mne_lsrx        ; $4A  LSR A
   4593 CD9B 26                                   .byte mne_phkx        ; $4B  PHK
   4594 CD9C 36                                   .byte mne_jmpx        ; $4C  JMP abs
   4595 CD9D 3D                                   .byte mne_eorx        ; $4D  EOR abs
   4596 CD9E 40                                   .byte mne_lsrx        ; $4E  LSR abs
   4597 CD9F 3D                                   .byte mne_eorx        ; $4F  EOR absl
                                        ;
   4599 CDA0 17                                   .byte mne_bvcx        ; $50  BVC abs
   4600 CDA1 3D                                   .byte mne_eorx        ; $51  EOR (dp),Y
   4601 CDA2 3D                                   .byte mne_eorx        ; $52  EOR (dp)
   4602 CDA3 3D                                   .byte mne_eorx        ; $53  EOR (offset,S),Y
   4603 CDA4 30                                   .byte mne_mvnx        ; $54  MVN sb,db
   4604 CDA5 3D                                   .byte mne_eorx        ; $55  EOR dp,X
   4605 CDA6 40                                   .byte mne_lsrx        ; $56  LSR dp,X
   4606 CDA7 3D                                   .byte mne_eorx        ; $57  EOR [dp],Y
   4607 CDA8 23                                   .byte mne_clix        ; $58  CLI
   4608 CDA9 3D                                   .byte mne_eorx        ; $59  EOR abs,Y
   4609 CDAA 55                                   .byte mne_phyx        ; $5A  PHY
   4610 CDAB 18                                   .byte mne_tcdx        ; $5B  TCD
   4611 CDAC 28                                   .byte mne_jmlx        ; $5C  JML absl
   4612 CDAD 3D                                   .byte mne_eorx        ; $5D  EOR abs,X
   4613 CDAE 40                                   .byte mne_lsrx        ; $5E  LSR abs,X
   4614 CDAF 3D                                   .byte mne_eorx        ; $5F  EOR absl,X
                                        ;
   4616 CDB0 43                                   .byte mne_rtsx        ; $60  RTS
   4617 CDB1 10                                   .byte mne_adcx        ; $61  ADC (dp,X)
   4618 CDB2 3C                                   .byte mne_perx        ; $62  PER
   4619 CDB3 10                                   .byte mne_adcx        ; $63  ADC offset,S
   4620 CDB4 5B                                   .byte mne_stzx        ; $64  STZ dp
   4621 CDB5 10                                   .byte mne_adcx        ; $65  ADC dp
   4622 CDB6 3E                                   .byte mne_rorx        ; $66  ROR dp
   4623 CDB7 10                                   .byte mne_adcx        ; $67  ADC [dp]
   4624 CDB8 04                                   .byte mne_plax        ; $68  PLA
   4625 CDB9 10                                   .byte mne_adcx        ; $69  ADC #
   4626 CDBA 3E                                   .byte mne_rorx        ; $6A  ROR A
   4627 CDBB 2E                                   .byte mne_rtlx        ; $6B  RTL
   4628 CDBC 36                                   .byte mne_jmpx        ; $6C  JMP (abs)
   4629 CDBD 10                                   .byte mne_adcx        ; $6D  ADC abs
   4630 CDBE 3E                                   .byte mne_rorx        ; $6E  ROR abs
   4631 CDBF 10                                   .byte mne_adcx        ; $6F  ADC absl
                                        ;
   4633 CDC0 44                                   .byte mne_bvsx        ; $70  BVS abs
   4634 CDC1 10                                   .byte mne_adcx        ; $71  ADC (dp),Y
   4635 CDC2 10                                   .byte mne_adcx        ; $72  ADC (dp)
   4636 CDC3 10                                   .byte mne_adcx        ; $73  ADC (offset,S),Y
   4637 CDC4 5B                                   .byte mne_stzx        ; $74  STZ dp,X
   4638 CDC5 10                                   .byte mne_adcx        ; $75  ADC dp,X
   4639 CDC6 3E                                   .byte mne_rorx        ; $76  ROR dp,X
   4640 CDC7 10                                   .byte mne_adcx        ; $77  ADC [dp],Y
   4641 CDC8 22                                   .byte mne_seix        ; $78  SEI
   4642 CDC9 10                                   .byte mne_adcx        ; $79  ADC abs,Y
   4643 CDCA 56                                   .byte mne_plyx        ; $7A  PLY
   4644 CDCB 11                                   .byte mne_tdcx        ; $7B  TDC
   4645 CDCC 36                                   .byte mne_jmpx        ; $7C  JMP (abs,X)
   4646 CDCD 10                                   .byte mne_adcx        ; $7D  ADC abs,X
   4647 CDCE 3E                                   .byte mne_rorx        ; $7E  ROR abs,X
   4648 CDCF 10                                   .byte mne_adcx        ; $7F  ADC absl,X
                                        ;
   4650 CDD0 05                                   .byte mne_brax        ; $80  BRA abs
   4651 CDD1 07                                   .byte mne_stax        ; $81  STA (dp,X)
   4652 CDD2 2B                                   .byte mne_brlx        ; $82  BRL abs
   4653 CDD3 07                                   .byte mne_stax        ; $83  STA offset,S
   4654 CDD4 59                                   .byte mne_styx        ; $84  STY dp
   4655 CDD5 07                                   .byte mne_stax        ; $85  STA dp
   4656 CDD6 50                                   .byte mne_stxx        ; $86  STX dp
   4657 CDD7 07                                   .byte mne_stax        ; $87  STA [dp]
   4658 CDD8 54                                   .byte mne_deyx        ; $88  DEY
   4659 CDD9 46                                   .byte mne_bitx        ; $89  BIT #
   4660 CDDA 08                                   .byte mne_txax        ; $8A  TXA
   4661 CDDB 0A                                   .byte mne_phbx        ; $8B  PHB
   4662 CDDC 59                                   .byte mne_styx        ; $8C  STY abs
   4663 CDDD 07                                   .byte mne_stax        ; $8D  STA abs
   4664 CDDE 50                                   .byte mne_stxx        ; $8E  STX abs
   4665 CDDF 07                                   .byte mne_stax        ; $8F  STA absl
                                        ;
   4667 CDE0 0F                                   .byte mne_bccx        ; $90  BCC abs
   4668 CDE1 07                                   .byte mne_stax        ; $91  STA (dp),Y
   4669 CDE2 07                                   .byte mne_stax        ; $92  STA (dp)
   4670 CDE3 07                                   .byte mne_stax        ; $93  STA (offset,S),Y
   4671 CDE4 59                                   .byte mne_styx        ; $94  STY dp,X
   4672 CDE5 07                                   .byte mne_stax        ; $95  STA dp,X
   4673 CDE6 50                                   .byte mne_stxx        ; $96  STX dp,Y
   4674 CDE7 07                                   .byte mne_stax        ; $97  STA [dp],Y
   4675 CDE8 09                                   .byte mne_tyax        ; $98  TYA
   4676 CDE9 07                                   .byte mne_stax        ; $99  STA abs,Y
   4677 CDEA 45                                   .byte mne_txsx        ; $9A  TXS
   4678 CDEB 5A                                   .byte mne_txyx        ; $9B  TXY
   4679 CDEC 5B                                   .byte mne_stzx        ; $9C  STZ abs
   4680 CDED 07                                   .byte mne_stax        ; $9D  STA abs,X
   4681 CDEE 5B                                   .byte mne_stzx        ; $9E  STZ abs,X
   4682 CDEF 07                                   .byte mne_stax        ; $9F  STA absl,X
                                        ;
   4684 CDF0 53                                   .byte mne_ldyx        ; $A0  LDY #
   4685 CDF1 01                                   .byte mne_ldax        ; $A1  LDA (dp,X)
   4686 CDF2 49                                   .byte mne_ldxx        ; $A2  LDX #
   4687 CDF3 01                                   .byte mne_ldax        ; $A3  LDA offset,S
   4688 CDF4 53                                   .byte mne_ldyx        ; $A4  LDY dp
   4689 CDF5 01                                   .byte mne_ldax        ; $A5  LDA dp
   4690 CDF6 49                                   .byte mne_ldxx        ; $A6  LDX dp
   4691 CDF7 01                                   .byte mne_ldax        ; $A7  LDA [dp]
   4692 CDF8 52                                   .byte mne_tayx        ; $A8  TAY
   4693 CDF9 01                                   .byte mne_ldax        ; $A9  LDA #
   4694 CDFA 48                                   .byte mne_taxx        ; $AA  TAX
   4695 CDFB 0B                                   .byte mne_plbx        ; $AB  PLB
   4696 CDFC 53                                   .byte mne_ldyx        ; $AC  LDY abs
   4697 CDFD 01                                   .byte mne_ldax        ; $AD  LDA abs
   4698 CDFE 49                                   .byte mne_ldxx        ; $AE  LDX abs
   4699 CDFF 01                                   .byte mne_ldax        ; $AF  LDA absl
                                        ;
   4701 CE00 41                                   .byte mne_bcsx        ; $B0  BCS abs
   4702 CE01 01                                   .byte mne_ldax        ; $B1  LDA (dp),Y
   4703 CE02 01                                   .byte mne_ldax        ; $B2  LDA (dp)
   4704 CE03 01                                   .byte mne_ldax        ; $B3  LDA (offset,S),Y
   4705 CE04 53                                   .byte mne_ldyx        ; $B4  LDY dp,X
   4706 CE05 01                                   .byte mne_ldax        ; $B5  LDA dp,X
   4707 CE06 49                                   .byte mne_ldxx        ; $B6  LDX dp,Y
   4708 CE07 01                                   .byte mne_ldax        ; $B7  LDA [dp],Y
   4709 CE08 47                                   .byte mne_clvx        ; $B8  CLV
   4710 CE09 01                                   .byte mne_ldax        ; $B9  LDA abs,Y
   4711 CE0A 4F                                   .byte mne_tsxx        ; $BA  TSX
   4712 CE0B 51                                   .byte mne_tyxx        ; $BB  TYX
   4713 CE0C 53                                   .byte mne_ldyx        ; $BC  LDY abs,X
   4714 CE0D 01                                   .byte mne_ldax        ; $BD  LDA abs,X
   4715 CE0E 49                                   .byte mne_ldxx        ; $BE  LDX abs,Y
   4716 CE0F 01                                   .byte mne_ldax        ; $BF  LDA absl,X
                                        ;
   4718 CE10 58                                   .byte mne_cpyx        ; $C0  CPY #
   4719 CE11 35                                   .byte mne_cmpx        ; $C1  CMP (dp,X)
   4720 CE12 31                                   .byte mne_repx        ; $C2  REP #
   4721 CE13 35                                   .byte mne_cmpx        ; $C3  CMP offset,S
   4722 CE14 58                                   .byte mne_cpyx        ; $C4  CPY dp
   4723 CE15 35                                   .byte mne_cmpx        ; $C5  CMP dp
   4724 CE16 12                                   .byte mne_decx        ; $C6  DEC dp
   4725 CE17 35                                   .byte mne_cmpx        ; $C7  CMP [dp]
   4726 CE18 57                                   .byte mne_inyx        ; $C8  INY
   4727 CE19 35                                   .byte mne_cmpx        ; $C9  CMP #
   4728 CE1A 4A                                   .byte mne_dexx        ; $CA  DEX
   4729 CE1B 20                                   .byte mne_waix        ; $CB  WAI
   4730 CE1C 58                                   .byte mne_cpyx        ; $CC  CPY abs
   4731 CE1D 35                                   .byte mne_cmpx        ; $CD  CMP abs
   4732 CE1E 12                                   .byte mne_decx        ; $CE  DEC abs
   4733 CE1F 35                                   .byte mne_cmpx        ; $CF  CMP absl
                                        ;
   4735 CE20 1F                                   .byte mne_bnex        ; $D0  BNE abs
   4736 CE21 35                                   .byte mne_cmpx        ; $D1  CMP (dp),Y
   4737 CE22 35                                   .byte mne_cmpx        ; $D2  CMP (dp)
   4738 CE23 35                                   .byte mne_cmpx        ; $D3  CMP (offset,S),Y
   4739 CE24 21                                   .byte mne_peix        ; $D4  PEI dp
   4740 CE25 35                                   .byte mne_cmpx        ; $D5  CMP dp,X
   4741 CE26 12                                   .byte mne_decx        ; $D6  DEC dp,X
   4742 CE27 35                                   .byte mne_cmpx        ; $D7  CMP [dp],Y
   4743 CE28 1B                                   .byte mne_cldx        ; $D8  CLD
   4744 CE29 35                                   .byte mne_cmpx        ; $D9  CMP abs,Y
   4745 CE2A 4B                                   .byte mne_phxx        ; $DA  PHX
   4746 CE2B 39                                   .byte mne_stpx        ; $DB  STP
   4747 CE2C 36                                   .byte mne_jmpx        ; $DC  JMP [abs]
   4748 CE2D 35                                   .byte mne_cmpx        ; $DD  CMP abs,X
   4749 CE2E 12                                   .byte mne_decx        ; $DE  DEC abs,X
   4750 CE2F 35                                   .byte mne_cmpx        ; $DF  CMP absl,X
                                        ;
   4752 CE30 4E                                   .byte mne_cpxx        ; $E0  CPX #
   4753 CE31 0E                                   .byte mne_sbcx        ; $E1  SBC (dp,X)
   4754 CE32 32                                   .byte mne_sepx        ; $E2  SEP #
   4755 CE33 0E                                   .byte mne_sbcx        ; $E3  SBC offset,S
   4756 CE34 4E                                   .byte mne_cpxx        ; $E4  CPX dp
   4757 CE35 0E                                   .byte mne_sbcx        ; $E5  SBC dp
   4758 CE36 15                                   .byte mne_incx        ; $E6  INC dp
   4759 CE37 0E                                   .byte mne_sbcx        ; $E7  SBC [dp]
   4760 CE38 4D                                   .byte mne_inxx        ; $E8  INX
   4761 CE39 0E                                   .byte mne_sbcx        ; $E9  SBC #
   4762 CE3A 38                                   .byte mne_nopx        ; $EA  NOP
   4763 CE3B 00                                   .byte mne_xbax        ; $EB  XBA
   4764 CE3C 4E                                   .byte mne_cpxx        ; $EC  CPX abs
   4765 CE3D 0E                                   .byte mne_sbcx        ; $ED  SBC abs
   4766 CE3E 15                                   .byte mne_incx        ; $EE  INC abs
   4767 CE3F 0E                                   .byte mne_sbcx        ; $EF  SBC absl
                                        ;
   4769 CE40 3B                                   .byte mne_beqx        ; $F0  BEQ abs
   4770 CE41 0E                                   .byte mne_sbcx        ; $F1  SBC (dp),Y
   4771 CE42 0E                                   .byte mne_sbcx        ; $F2  SBC (dp)
   4772 CE43 0E                                   .byte mne_sbcx        ; $F3  SBC (offset,S),Y
   4773 CE44 02                                   .byte mne_peax        ; $F4  PEA #
   4774 CE45 0E                                   .byte mne_sbcx        ; $F5  SBC dp,X
   4775 CE46 15                                   .byte mne_incx        ; $F6  INC dp,X
   4776 CE47 0E                                   .byte mne_sbcx        ; $F7  SBC [dp],Y
   4777 CE48 19                                   .byte mne_sedx        ; $F8  SED
   4778 CE49 0E                                   .byte mne_sbcx        ; $F9  SBC abs,Y
   4779 CE4A 4C                                   .byte mne_plxx        ; $FA  PLX
   4780 CE4B 1E                                   .byte mne_xcex        ; $FB  XCE
   4781 CE4C 3F                                   .byte mne_jsrx        ; $FC  JSR (abs,X)
   4782 CE4D 0E                                   .byte mne_sbcx        ; $FD  SBC abs,X
   4783 CE4E 15                                   .byte mne_incx        ; $FE  INC abs,X
   4784 CE4F 0E                                   .byte mne_sbcx        ; $FF  SBC absl,X
                                        ;
                                        ;
                                        ;	instruction addressing modes & sizes in opcode order...
                                        ;
                                        ;	    xxxxxxxx
                                        ;	    ||||||||
                                        ;	    ||||++++———> Addressing Mode
                                        ;	    ||||         ——————————————————————————————————
                                        ;	    ||||          0000  dp, abs, absl, implied or A
                                        ;	    ||||          0001  #
                                        ;	    ||||          0010  dp,X, abs,X or absl,X
                                        ;	    ||||          0011  dp,Y or abs,Y
                                        ;	    ||||          0100  (dp) or (abs)
                                        ;	    ||||          0101  [dp] or [abs]
                                        ;	    ||||          0110  [dp],Y
                                        ;	    ||||          0111  (dp,X) or (abs,X)
                                        ;	    ||||          1000  (dp),Y
                                        ;	    ||||          1001  offset,S
                                        ;	    ||||          1010  (offset,S),Y
                                        ;	    ||||          1011  sbnk,dbnk (MVN or MVP)
                                        ;	    ||||          —-—-—-—-—-—-—-—-—-—-—-—-—-—-—-—-—
                                        ;	    ||||           #    = immediate
                                        ;	    ||||           A    = accumulator
                                        ;	    ||||           abs  = absolute
                                        ;	    ||||           absl = absolute long
                                        ;	    ||||           dbnk = destination bank
                                        ;	    ||||           dp   = direct (zero) page
                                        ;	    ||||           S    = stack relative
                                        ;	    ||||           sbnk = source bank
                                        ;	    ||||         ——————————————————————————————————
                                        ;	    ||||
                                        ;	    ||++———————> binary-encoded operand size
                                        ;	    |+—————————> 1: relative branch instruction
                                        ;	    +——————————> 1: variable operand size...
                                        ;
                                        ;	    —————————————————————————————————————————————————————————————
                                        ;	    Variable operand size refers to an immediate mode instruction
                                        ;	    that can accept either an 8 or 16 bit operand.  During instr-
                                        ;	    uction assembly, an 8 bit operand can be forced to 16 bits by
                                        ;	    preceding the operand field with !,  e.g.,  LDA !#$01,  which
                                        ;	    will assemble as $A9 $01 $00.
                                        ;	    —————————————————————————————————————————————————————————————
                                        ;
   4828 CE50 00                         mnetabam .byte ops0 | am_nam   ; $00  BRK
   4829 CE51 17                                   .byte ops1 | am_indx  ; $01  ORA (dp,X)
   4830 CE52 10                                   .byte ops1 | am_nam   ; $02  COP
   4831 CE53 19                                   .byte ops1 | am_stk   ; $03  ORA offset,S
   4832 CE54 10                                   .byte ops1 | am_nam   ; $04  TSB dp
   4833 CE55 10                                   .byte ops1 | am_nam   ; $05  ORA dp
   4834 CE56 10                                   .byte ops1 | am_nam   ; $06  ASL dp
   4835 CE57 15                                   .byte ops1 | am_indl  ; $07  ORA [dp]
   4836 CE58 00                                   .byte ops0 | am_nam   ; $08  PHP
   4837 CE59 91                                   .byte vops | am_imm   ; $09  ORA #
   4838 CE5A 00                                   .byte ops0 | am_nam   ; $0A  ASL A
   4839 CE5B 00                                   .byte ops0 | am_nam   ; $0B  PHD
   4840 CE5C 20                                   .byte ops2 | am_nam   ; $0C  TSB abs
   4841 CE5D 20                                   .byte ops2 | am_nam   ; $0D  ORA abs
   4842 CE5E 20                                   .byte ops2 | am_nam   ; $0E  ASL abs
   4843 CE5F 30                                   .byte ops3 | am_nam   ; $0F  ORA absl
                                        ;
   4845 CE60 50                                   .byte bop1 | am_nam   ; $10  BPL abs
   4846 CE61 18                                   .byte ops1 | am_indy  ; $11  ORA (dp),Y
   4847 CE62 14                                   .byte ops1 | am_ind   ; $12  ORA (dp)
   4848 CE63 1A                                   .byte ops1 | am_stky  ; $13  ORA (offset,S),Y
   4849 CE64 10                                   .byte ops1 | am_nam   ; $14  TRB dp
   4850 CE65 12                                   .byte ops1 | am_adrx  ; $15  ORA dp,X
   4851 CE66 12                                   .byte ops1 | am_adrx  ; $16  ASL dp,X
   4852 CE67 16                                   .byte ops1 | am_indly ; $17  ORA [dp],Y
   4853 CE68 00                                   .byte ops0 | am_nam   ; $18  CLC
   4854 CE69 20                                   .byte ops2 | am_nam   ; $19  ORA abs
   4855 CE6A 00                                   .byte ops0 | am_nam   ; $1A  INC A
   4856 CE6B 00                                   .byte ops0 | am_nam   ; $1B  TCS
   4857 CE6C 20                                   .byte ops2 | am_nam   ; $1C  TRB abs
   4858 CE6D 22                                   .byte ops2 | am_adrx  ; $1D  ORA abs,X
   4859 CE6E 22                                   .byte ops2 | am_adrx  ; $1E  ASL abs,X
   4860 CE6F 32                                   .byte ops3 | am_adrx  ; $1F  ORA absl,X
                                        ;
   4862 CE70 20                                   .byte ops2 | am_nam   ; $20  JSR abs
   4863 CE71 17                                   .byte ops1 | am_indx  ; $21  AND (dp,X)
   4864 CE72 30                                   .byte ops3 | am_nam   ; $22  JSL absl
   4865 CE73 19                                   .byte ops1 | am_stk   ; $23  AND offset,S
   4866 CE74 10                                   .byte ops1 | am_nam   ; $24  BIT dp
   4867 CE75 10                                   .byte ops1 | am_nam   ; $25  AND dp
   4868 CE76 10                                   .byte ops1 | am_nam   ; $26  ROL dp
   4869 CE77 15                                   .byte ops1 | am_indl  ; $27  AND [dp]
   4870 CE78 00                                   .byte ops0 | am_nam   ; $28  PLP
   4871 CE79 91                                   .byte vops | am_imm   ; $29  AND #
   4872 CE7A 00                                   .byte ops0 | am_nam   ; $2A  ROL A
   4873 CE7B 00                                   .byte ops0 | am_nam   ; $2B  PLD
   4874 CE7C 20                                   .byte ops2 | am_nam   ; $2C  BIT abs
   4875 CE7D 20                                   .byte ops2 | am_nam   ; $2D  AND abs
   4876 CE7E 20                                   .byte ops2 | am_nam   ; $2E  ROL abs
   4877 CE7F 30                                   .byte ops3 | am_nam   ; $2F  AND absl
                                        ;
   4879 CE80 50                                   .byte bop1 | am_nam   ; $30  BMI abs
   4880 CE81 18                                   .byte ops1 | am_indy  ; $31  AND (dp),Y
   4881 CE82 14                                   .byte ops1 | am_ind   ; $32  AND (dp)
   4882 CE83 1A                                   .byte ops1 | am_stky  ; $33  AND (offset,S),Y
   4883 CE84 12                                   .byte ops1 | am_adrx  ; $34  BIT dp,X
   4884 CE85 12                                   .byte ops1 | am_adrx  ; $35  AND dp,X
   4885 CE86 12                                   .byte ops1 | am_adrx  ; $36  ROL dp,X
   4886 CE87 16                                   .byte ops1 | am_indly ; $37  AND [dp],Y
   4887 CE88 00                                   .byte ops0 | am_nam   ; $38  SEC
   4888 CE89 23                                   .byte ops2 | am_adry  ; $39  AND abs,Y
   4889 CE8A 00                                   .byte ops0 | am_nam   ; $3A  DEC A
   4890 CE8B 00                                   .byte ops0 | am_nam   ; $3B  TSC
   4891 CE8C 22                                   .byte ops2 | am_adrx  ; $3C  BIT abs,X
   4892 CE8D 22                                   .byte ops2 | am_adrx  ; $3D  AND abs,X
   4893 CE8E 22                                   .byte ops2 | am_adrx  ; $3E  ROL abs,X
   4894 CE8F 32                                   .byte ops3 | am_adrx  ; $3F  AND absl,X
                                        ;
   4896 CE90 00                                   .byte ops0 | am_nam   ; $40  RTI
   4897 CE91 17                                   .byte ops1 | am_indx  ; $41  EOR (dp,X)
   4898 CE92 00                                   .byte ops0 | am_nam   ; $42  WDM
   4899 CE93 19                                   .byte ops1 | am_stk   ; $43  EOR offset,S
   4900 CE94 2B                                   .byte ops2 | am_move  ; $44  MVP sb,db
   4901 CE95 10                                   .byte ops1 | am_nam   ; $45  EOR dp
   4902 CE96 10                                   .byte ops1 | am_nam   ; $46  LSR dp
   4903 CE97 15                                   .byte ops1 | am_indl  ; $47  EOR [dp]
   4904 CE98 00                                   .byte ops0 | am_nam   ; $48  PHA
   4905 CE99 91                                   .byte vops | am_imm   ; $49  EOR #
   4906 CE9A 00                                   .byte ops0 | am_nam   ; $4A  LSR A
   4907 CE9B 00                                   .byte ops0 | am_nam   ; $4B  PHK
   4908 CE9C 20                                   .byte ops2 | am_nam   ; $4C  JMP abs
   4909 CE9D 20                                   .byte ops2 | am_nam   ; $4D  EOR abs
   4910 CE9E 20                                   .byte ops2 | am_nam   ; $4E  LSR abs
   4911 CE9F 30                                   .byte ops3 | am_nam   ; $4F  EOR absl
                                        ;
   4913 CEA0 50                                   .byte bop1 | am_nam   ; $50  BVC abs
   4914 CEA1 18                                   .byte ops1 | am_indy  ; $51  EOR (dp),Y
   4915 CEA2 14                                   .byte ops1 | am_ind   ; $52  EOR (dp)
   4916 CEA3 1A                                   .byte ops1 | am_stky  ; $53  EOR (offset,S),Y
   4917 CEA4 2B                                   .byte ops2 | am_move  ; $54  MVN sb,db
   4918 CEA5 12                                   .byte ops1 | am_adrx  ; $55  EOR dp,X
   4919 CEA6 12                                   .byte ops1 | am_adrx  ; $56  LSR dp,X
   4920 CEA7 16                                   .byte ops1 | am_indly ; $57  EOR [dp],Y
   4921 CEA8 00                                   .byte ops0 | am_nam   ; $58  CLI
   4922 CEA9 23                                   .byte ops2 | am_adry  ; $59  EOR abs,Y
   4923 CEAA 00                                   .byte ops0 | am_nam   ; $5A  PHY
   4924 CEAB 00                                   .byte ops0 | am_nam   ; $5B  TCD
   4925 CEAC 30                                   .byte ops3 | am_nam   ; $5C  JML absl
   4926 CEAD 22                                   .byte ops2 | am_adrx  ; $5D  EOR abs,X
   4927 CEAE 22                                   .byte ops2 | am_adrx  ; $5E  LSR abs,X
   4928 CEAF 32                                   .byte ops3 | am_adrx  ; $5F  EOR absl,X
                                        ;
   4930 CEB0 00                                   .byte ops0 | am_nam   ; $60  RTS
   4931 CEB1 17                                   .byte ops1 | am_indx  ; $61  ADC (dp,X)
   4932 CEB2 60                                   .byte bop2 | am_nam   ; $62  PER
   4933 CEB3 19                                   .byte ops1 | am_stk   ; $63  ADC offset,S
   4934 CEB4 10                                   .byte ops1 | am_nam   ; $64  STZ dp
   4935 CEB5 10                                   .byte ops1 | am_nam   ; $65  ADC dp
   4936 CEB6 10                                   .byte ops1 | am_nam   ; $66  ROR dp
   4937 CEB7 15                                   .byte ops1 | am_indl  ; $67  ADC [dp]
   4938 CEB8 00                                   .byte ops0 | am_nam   ; $68  PLA
   4939 CEB9 91                                   .byte vops | am_imm   ; $69  ADC #
   4940 CEBA 00                                   .byte ops0 | am_nam   ; $6A  ROR A
   4941 CEBB 00                                   .byte ops0 | am_nam   ; $6B  RTL
   4942 CEBC 24                                   .byte ops2 | am_ind   ; $6C  JMP (abs)
   4943 CEBD 20                                   .byte ops2 | am_nam   ; $6D  ADC abs
   4944 CEBE 20                                   .byte ops2 | am_nam   ; $6E  ROR abs
   4945 CEBF 30                                   .byte ops3 | am_nam   ; $6F  ADC absl
                                        ;
   4947 CEC0 50                                   .byte bop1 | am_nam   ; $70  BVS abs
   4948 CEC1 18                                   .byte ops1 | am_indy  ; $71  ADC (dp),Y
   4949 CEC2 14                                   .byte ops1 | am_ind   ; $72  ADC (dp)
   4950 CEC3 1A                                   .byte ops1 | am_stky  ; $73  ADC (offset,S),Y
   4951 CEC4 12                                   .byte ops1 | am_adrx  ; $74  STZ dp,X
   4952 CEC5 12                                   .byte ops1 | am_adrx  ; $75  ADC dp,X
   4953 CEC6 12                                   .byte ops1 | am_adrx  ; $76  ROR dp,X
   4954 CEC7 16                                   .byte ops1 | am_indly ; $77  ADC [dp],Y
   4955 CEC8 00                                   .byte ops0 | am_nam   ; $78  SEI
   4956 CEC9 23                                   .byte ops2 | am_adry  ; $79  ADC abs,Y
   4957 CECA 00                                   .byte ops0 | am_nam   ; $7A  PLY
   4958 CECB 00                                   .byte ops0 | am_nam   ; $7B  TDC
   4959 CECC 27                                   .byte ops2 | am_indx  ; $7C  JMP (abs,X)
   4960 CECD 22                                   .byte ops2 | am_adrx  ; $7D  ADC abs,X
   4961 CECE 22                                   .byte ops2 | am_adrx  ; $7E  ROR abs,X
   4962 CECF 32                                   .byte ops3 | am_adrx  ; $7F  ADC absl,X
                                        ;
   4964 CED0 50                                   .byte bop1 | am_nam   ; $80  BRA abs
   4965 CED1 17                                   .byte ops1 | am_indx  ; $81  STA (dp,X)
   4966 CED2 60                                   .byte bop2 | am_nam   ; $82  BRL abs
   4967 CED3 19                                   .byte ops1 | am_stk   ; $83  STA offset,S
   4968 CED4 10                                   .byte ops1 | am_nam   ; $84  STY dp
   4969 CED5 10                                   .byte ops1 | am_nam   ; $85  STA dp
   4970 CED6 10                                   .byte ops1 | am_nam   ; $86  STX dp
   4971 CED7 15                                   .byte ops1 | am_indl  ; $87  STA [dp]
   4972 CED8 00                                   .byte ops0 | am_nam   ; $88  DEY
   4973 CED9 91                                   .byte vops | am_imm   ; $89  BIT #
   4974 CEDA 00                                   .byte ops0 | am_nam   ; $8A  TXA
   4975 CEDB 00                                   .byte ops0 | am_nam   ; $8B  PHB
   4976 CEDC 20                                   .byte ops2 | am_nam   ; $8C  STY abs
   4977 CEDD 20                                   .byte ops2 | am_nam   ; $8D  STA abs
   4978 CEDE 20                                   .byte ops2 | am_nam   ; $8E  STX abs
   4979 CEDF 30                                   .byte ops3 | am_nam   ; $8F  STA absl
                                        ;
   4981 CEE0 50                                   .byte bop1 | am_nam   ; $90  BCC abs
   4982 CEE1 18                                   .byte ops1 | am_indy  ; $91  STA (dp),Y
   4983 CEE2 14                                   .byte ops1 | am_ind   ; $92  STA (dp)
   4984 CEE3 1A                                   .byte ops1 | am_stky  ; $93  STA (offset,S),Y
   4985 CEE4 12                                   .byte ops1 | am_adrx  ; $94  STY dp,X
   4986 CEE5 12                                   .byte ops1 | am_adrx  ; $95  STA dp,X
   4987 CEE6 13                                   .byte ops1 | am_adry  ; $96  STX dp,Y
   4988 CEE7 16                                   .byte ops1 | am_indly ; $97  STA [dp],Y
   4989 CEE8 00                                   .byte ops0 | am_nam   ; $98  TYA
   4990 CEE9 23                                   .byte ops2 | am_adry  ; $99  STA abs,Y
   4991 CEEA 00                                   .byte ops0 | am_nam   ; $9A  TXS
   4992 CEEB 00                                   .byte ops0 | am_nam   ; $9B  TXY
   4993 CEEC 20                                   .byte ops2 | am_nam   ; $9C  STZ abs
   4994 CEED 22                                   .byte ops2 | am_adrx  ; $9D  STA abs,X
   4995 CEEE 22                                   .byte ops2 | am_adrx  ; $9E  STZ abs,X
   4996 CEEF 32                                   .byte ops3 | am_adrx  ; $9F  STA absl,X
                                        ;
   4998 CEF0 91                                   .byte vops | am_imm   ; $A0  LDY #
   4999 CEF1 17                                   .byte ops1 | am_indx  ; $A1  LDA (dp,X)
   5000 CEF2 91                                   .byte vops | am_imm   ; $A2  LDX #
   5001 CEF3 19                                   .byte ops1 | am_stk   ; $A3  LDA offset,S
   5002 CEF4 10                                   .byte ops1 | am_nam   ; $A4  LDY dp
   5003 CEF5 10                                   .byte ops1 | am_nam   ; $A5  LDA dp
   5004 CEF6 10                                   .byte ops1 | am_nam   ; $A6  LDX dp
   5005 CEF7 15                                   .byte ops1 | am_indl  ; $A7  LDA [dp]
   5006 CEF8 00                                   .byte ops0 | am_nam   ; $A8  TAY
   5007 CEF9 91                                   .byte vops | am_imm   ; $A9  LDA #
   5008 CEFA 00                                   .byte ops0 | am_nam   ; $AA  TAX
   5009 CEFB 00                                   .byte ops0 | am_nam   ; $AB  PLB
   5010 CEFC 20                                   .byte ops2 | am_nam   ; $AC  LDY abs
   5011 CEFD 20                                   .byte ops2 | am_nam   ; $AD  LDA abs
   5012 CEFE 20                                   .byte ops2 | am_nam   ; $AE  LDX abs
   5013 CEFF 30                                   .byte ops3 | am_nam   ; $AF  LDA absl
                                        ;
   5015 CF00 50                                   .byte bop1 | am_nam   ; $B0  BCS abs
   5016 CF01 18                                   .byte ops1 | am_indy  ; $B1  LDA (dp),Y
   5017 CF02 14                                   .byte ops1 | am_ind   ; $B2  LDA (dp)
   5018 CF03 1A                                   .byte ops1 | am_stky  ; $B3  LDA (offset,S),Y
   5019 CF04 12                                   .byte ops1 | am_adrx  ; $B4  LDY dp,X
   5020 CF05 12                                   .byte ops1 | am_adrx  ; $B5  LDA dp,X
   5021 CF06 13                                   .byte ops1 | am_adry  ; $B6  LDX dp,Y
   5022 CF07 16                                   .byte ops1 | am_indly ; $B7  LDA [dp],Y
   5023 CF08 00                                   .byte ops0 | am_nam   ; $B8  CLV
   5024 CF09 23                                   .byte ops2 | am_adry  ; $B9  LDA abs,Y
   5025 CF0A 00                                   .byte ops0 | am_nam   ; $BA  TSX
   5026 CF0B 00                                   .byte ops0 | am_nam   ; $BB  TYX
   5027 CF0C 22                                   .byte ops2 | am_adrx  ; $BC  LDY abs,X
   5028 CF0D 22                                   .byte ops2 | am_adrx  ; $BD  LDA abs,X
   5029 CF0E 23                                   .byte ops2 | am_adry  ; $BE  LDX abs,Y
   5030 CF0F 32                                   .byte ops3 | am_adrx  ; $BF  LDA absl,X
                                        ;
   5032 CF10 91                                   .byte vops | am_imm   ; $C0  CPY #
   5033 CF11 17                                   .byte ops1 | am_indx  ; $C1  CMP (dp,X)
   5034 CF12 11                                   .byte ops1 | am_imm   ; $C2  REP #
   5035 CF13 19                                   .byte ops1 | am_stk   ; $C3  CMP offset,S
   5036 CF14 10                                   .byte ops1 | am_nam   ; $C4  CPY dp
   5037 CF15 10                                   .byte ops1 | am_nam   ; $C5  CMP dp
   5038 CF16 10                                   .byte ops1 | am_nam   ; $C6  DEC dp
   5039 CF17 15                                   .byte ops1 | am_indl  ; $C7  CMP [dp]
   5040 CF18 00                                   .byte ops0 | am_nam   ; $C8  INY
   5041 CF19 91                                   .byte vops | am_imm   ; $C9  CMP #
   5042 CF1A 00                                   .byte ops0 | am_nam   ; $CA  DEX
   5043 CF1B 00                                   .byte ops0 | am_nam   ; $CB  WAI
   5044 CF1C 20                                   .byte ops2 | am_nam   ; $CC  CPY abs
   5045 CF1D 20                                   .byte ops2 | am_nam   ; $CD  CMP abs
   5046 CF1E 20                                   .byte ops2 | am_nam   ; $CE  DEC abs
   5047 CF1F 30                                   .byte ops3 | am_nam   ; $CF  CMP absl
                                        ;
   5049 CF20 50                                   .byte bop1 | am_nam   ; $D0  BNE abs
   5050 CF21 18                                   .byte ops1 | am_indy  ; $D1  CMP (dp),Y
   5051 CF22 14                                   .byte ops1 | am_ind   ; $D2  CMP (dp)
   5052 CF23 1A                                   .byte ops1 | am_stky  ; $D3  CMP (offset,S),Y
   5053 CF24 10                                   .byte ops1 | am_nam   ; $D4  PEI dp
   5054 CF25 12                                   .byte ops1 | am_adrx  ; $D5  CMP dp,X
   5055 CF26 12                                   .byte ops1 | am_adrx  ; $D6  DEC dp,X
   5056 CF27 16                                   .byte ops1 | am_indly ; $D7  CMP [dp],Y
   5057 CF28 00                                   .byte ops0 | am_nam   ; $D8  CLD
   5058 CF29 23                                   .byte ops2 | am_adry  ; $D9  CMP abs,Y
   5059 CF2A 00                                   .byte ops0 | am_nam   ; $DA  PHX
   5060 CF2B 00                                   .byte ops0 | am_nam   ; $DB  STP
   5061 CF2C 25                                   .byte ops2 | am_indl  ; $DC  JMP [abs]
   5062 CF2D 22                                   .byte ops2 | am_adrx  ; $DD  CMP abs,X
   5063 CF2E 22                                   .byte ops2 | am_adrx  ; $DE  DEC abs,X
   5064 CF2F 32                                   .byte ops3 | am_adrx  ; $DF  CMP absl,X
                                        ;
   5066 CF30 91                                   .byte vops | am_imm   ; $E0  CPX #
   5067 CF31 17                                   .byte ops1 | am_indx  ; $E1  SBC (dp,X)
   5068 CF32 11                                   .byte ops1 | am_imm   ; $E2  SEP #
   5069 CF33 19                                   .byte ops1 | am_stk   ; $E3  SBC offset,S
   5070 CF34 10                                   .byte ops1 | am_nam   ; $E4  CPX dp
   5071 CF35 10                                   .byte ops1 | am_nam   ; $E5  SBC dp
   5072 CF36 10                                   .byte ops1 | am_nam   ; $E6  INC dp
   5073 CF37 15                                   .byte ops1 | am_indl  ; $E7  SBC [dp]
   5074 CF38 00                                   .byte ops0 | am_nam   ; $E8  INX
   5075 CF39 91                                   .byte vops | am_imm   ; $E9  SBC #
   5076 CF3A 00                                   .byte ops0 | am_nam   ; $EA  NOP
   5077 CF3B 00                                   .byte ops0 | am_nam   ; $EB  XBA
   5078 CF3C 20                                   .byte ops2 | am_nam   ; $EC  CPX abs
   5079 CF3D 20                                   .byte ops2 | am_nam   ; $ED  SBC abs
   5080 CF3E 20                                   .byte ops2 | am_nam   ; $EE  INC abs
   5081 CF3F 30                                   .byte ops3 | am_nam   ; $EF  SBC absl
                                        ;
   5083 CF40 50                                   .byte bop1 | am_nam   ; $F0  BEQ abs
   5084 CF41 18                                   .byte ops1 | am_indy  ; $F1  SBC (dp),Y
   5085 CF42 14                                   .byte ops1 | am_ind   ; $F2  SBC (dp)
   5086 CF43 1A                                   .byte ops1 | am_stky  ; $F3  SBC (offset,S),Y
   5087 CF44 21                                   .byte ops2 | am_imm   ; $F4  PEA #
   5088 CF45 12                                   .byte ops1 | am_adrx  ; $F5  SBC dp,X
   5089 CF46 12                                   .byte ops1 | am_adrx  ; $F6  INC dp,X
   5090 CF47 16                                   .byte ops1 | am_indly ; $F7  SBC [dp],Y
   5091 CF48 00                                   .byte ops0 | am_nam   ; $F8  SED
   5092 CF49 23                                   .byte ops2 | am_adry  ; $F9  SBC abs,Y
   5093 CF4A 00                                   .byte ops0 | am_nam   ; $FA  PLX
   5094 CF4B 00                                   .byte ops0 | am_nam   ; $FB  XCE
   5095 CF4C 27                                   .byte ops2 | am_indx  ; $FC  JSR (abs,X)
   5096 CF4D 22                                   .byte ops2 | am_adrx  ; $FD  SBC abs,X
   5097 CF4E 22                                   .byte ops2 | am_adrx  ; $FE  INC abs,X
   5098 CF4F 32                                   .byte ops3 | am_adrx  ; $FF  SBC absl,X
                                        ;
                                        ;
                                        ;	.X & .Y immediate mode opcodes...
                                        ;
   5103 CF50 A0                         vopidx   .byte $a0             ;LDY #
   5104 CF51 A2                                   .byte $a2             ;LDX #
   5105 CF52 C0                                   .byte $c0             ;CPY #
   5106 CF53 E0                                   .byte $e0             ;CPX #
   5318 = 00000004                      n_vopidx =*-vopidx             ;number of opcodes
                                        ;
                                        ;
                                        ;	addressing mode symbology lookup...
                                        ;
   5112 CF54 6C CF                      ms_lutab .word ms_nam          ;(0000)  no symbol
   5113 CF56 76 CF                                .word ms_imm          ;(0001)  #
   5114 CF58 6E CF                                .word ms_addrx        ;(0010)  dp,X or abs,X
   5115 CF5A 72 CF                                .word ms_addry        ;(0011)  dp,Y or abs,Y
   5116 CF5C 78 CF                                .word ms_ind          ;(0100)  (dp) or (abs)
   5117 CF5E 7B CF                                .word ms_indl         ;(0101)  [dp] or [abs]
   5118 CF60 7E CF                                .word ms_indly        ;(0110)  [dp],Y
   5119 CF62 83 CF                                .word ms_indx         ;(0111)  (dp,X) or (abs,X)
   5120 CF64 88 CF                                .word ms_indy         ;(1000)  (dp),Y
   5121 CF66 90 CF                                .word ms_stk          ;(1001)  offset,S
   5122 CF68 94 CF                                .word ms_stky         ;(1010) (offset,S),Y
   5123 CF6A 6C CF                                .word ms_nam          ;(1011) sbnk,dbnk
                                        ;
                                        ;
                                        ;	addressing mode symbology strings...
                                        ;
   5128 CF6C 20 00                      ms_nam   .byte " ",0           ;no symbol
   5129 CF6E 20 2C 58 00                ms_addrx .byte " ,X",0         ;dp,X or addr,X
   5130 CF72 20 2C 59 00                ms_addry .byte " ,Y",0         ;dp,Y or addr,Y
   5131 CF76 23 00                      ms_imm   .byte "#",0           ;immediate
   5132 CF78 28 29 00                   ms_ind   .byte "()",0          ;(dp) or (abs)
   5133 CF7B 5B 5D 00                   ms_indl  .byte "[]",0          ;[dp] or [abs]
   5134 CF7E 5B 5D 2C 59 00             ms_indly .byte "[],Y",0        ;[dp],Y
   5135 CF83 28 2C 58 29 00             ms_indx  .byte "(,X)",0        ;(dp,X) or (abs,X)
   5136 CF88 28 29 2C 59 00             ms_indy  .byte "(),Y",0        ;(dp),Y
   5137 CF8D 2C 24 00                   ms_move  .byte ",$",0          ;MVN/MVP sbnk,dbnk
   5138 CF90 20 2C 53 00                ms_stk   .byte " ,S",0         ;offset,S
   5139 CF94 28 2C 53 29 2C 59 00       ms_stky  .byte "(,S),Y",0      ;(offset,S),Y
                                        ;
                                        ;================================================================================
                                        ;
                                        ;CONSOLE DISPLAY CONTROL STRINGS
                                        ;
   5145 CF9B 1B 28                      dc_bf +         .byte a_esc,"("
   5145 CF9D 1B 47 34                 +            .byte a_esc,"G4"
                                                            ;enable reverse foreground
   5146 CFA0 00                                   .byte 0
                                        ;
   5148 CFA1 08                         dc_bs +         .byte a_bs
   5148 CFA2 1B 57                    +   +         .byte a_esc,"W"
                                        
                                                            ;destructive backspace
   5150 CFA4 00                                   .byte 0
                                        ;
   5152 CFA5 1B 54                      dc_cl +         .byte a_esc,"T"
                                                            ;clear to end of line 
   5153 CFA7 00                                   .byte 0
                                        ;
   5155 CFA8 1B 60 31                   dc_cn +         .byte a_esc,"`1"
                                                            ;cursor on
   5156 CFAB 00                                   .byte 0
                                        ;
   5158 CFAC 1B 60 30                   dc_co +         .byte a_esc,"`0"
                                                            ;cursor off
   5159 CFAF 00                                   .byte 0
                                        ;
   5161 CFB0 1B 28                      dc_er +         .byte a_esc,"("
   5161 CFB2 1B 47 30                 +            .byte a_esc,"G0"
                                                            ;enable normal foreground
   5162 CFB5 00                                   .byte 0
                                        ;
   5164 CFB6 0D                         dc_lf ++         .byte a_cr
                                     +   
   5164 CFB7 0A                       +            .byte a_lf
                                                            ;newline
   5165 CFB8 00                                   .byte 0
                                        ;
                                        ;================================================================================
                                        ;
                                        ;TEXT STRINGS
                                        ;
   5171 CFB9 07                         mm_brk +         .byte a_bel
                                        
   5172 CFBA 0D                       +   +         .byte a_cr
                                     +   
   5172 CFBB 0A                       +            .byte a_lf
                                        
   5173 CFBC 2A 2A 42 52 4B                       .byte "**BRK"
   5174 CFC1 0D                       +   +         .byte a_cr
                                     +   
   5174 CFC2 0A                       +            .byte a_lf
                                        
   5175 CFC3 00                                   .byte 0
                                        ;
   5177 CFC4 0D                         mm_entry ++         .byte a_cr
                                     +   
   5177 CFC5 0A                       +            .byte a_lf
                                        
   5178 CFC6 0A 53 75 70 65 72 6D 6F              .byte a_lf,"Supermon 816 "
   5178 CFCE 6E 20 38 31 36 20         
   5179 CFD4 31                       +            .byte "1"
   5179 CFD5 2E                       +            .byte "."
   5179 CFD6 30                       +            .byte "0"
   5179 CFD7 2E                       +            .byte "."
   5179 CFD8 31                       +            .byte "1"
                                        
   5180 CFD9 20                                   .byte " "
   5181 CFDA 0D                       +   +         .byte a_cr
                                     +   
   5181 CFDB 0A                       +            .byte a_lf
                                        
   5182 CFDC 00                                   .byte 0
                                        ;
   5184 CFDD 20 2A 2A 45 52 52 20 20    mm_err   .byte " **ERR  ",0
   5184 CFE5 00                        
                                        ;
   5186 CFE6 0D                         mm_prmpt ++         .byte a_cr
                                     +   
   5186 CFE7 0A                       +            .byte a_lf
                                        
   5187 CFE8 1B 28                    +            .byte a_esc,"("
   5187 CFEA 1B 47 30                 +            .byte a_esc,"G0"
                                        
   5188 CFED 2E 00                                .byte ".",0
                                        ;
   5190 CFEF 0D                         mm_regs ++         .byte a_cr
                                     +   
   5190 CFF0 0A                       +            .byte a_lf
                                        
   5191 CFF1 20 20 50 42 20 20 50 43              .byte "  PB  PC   NVmxDIZC  .C   .X   .Y   SP   DP  DB"
   5191 CFF9 20 20 20 4E 56 6D 78 44   
   5191 D001 49 5A 43 20 20 2E 43 20   
   5191 D009 20 20 2E 58 20 20 20 2E   
   5191 D011 59 20 20 20 53 50 20 20   
   5191 D019 20 44 50 20 20 44 42      
   5192 D020 0D                       +   +         .byte a_cr
                                     +   
   5192 D021 0A                       +            .byte a_lf
                                        
   5193 D022 3B 20 00                             .byte "; ",0
                                        ;
   5195 D025 07                         mm_rts +         .byte a_bel
                                        
   5196 D026 0D                       +   +         .byte a_cr
                                     +   
   5196 D027 0A                       +            .byte a_lf
                                        
   5197 D028 2A 2A 52 54 53                       .byte "**RTS"
   5198 D02D 0D                       +   +         .byte a_cr
                                     +   
   5198 D02E 0A                       +            .byte a_lf
                                        
   5199 D02F 00                                   .byte 0
                                        ;
                                        ;================================================================================
                                        ;
                                        ;VECTOR STORAGE
                                        ;
                                        ;
   5472 = 0000D030                      _txtend_ =*                     ;end of program text
                                        ;
                                        ;================================================================================
                                        	;.end
Finitron 65002 assembler   version 1.3   Mon Dec 08 00:44:59 2014     Page 1
FTBios816.asm


                                        .include "supermon816.asm"
Finitron 65002 assembler   version 1.3   Mon Dec 08 00:44:59 2014     Page 1
FAC1ToString.asm

                                        ; ============================================================================
                                        ; FAC1ToString.asm
                                        ;        __
                                        ;   \\__/ o\    (C) 2014  Robert Finch, Stratford
                                        ;    \  __ /    All rights reserved.
                                        ;     \/_//     robfinch<remove>@finitron.ca
                                        ;       ||
                                        ;  
                                        ;
                                        ; This source file is free software: you can redistribute it and/or modify 
                                        ; it under the terms of the GNU Lesser General Public License as published 
                                        ; by the Free Software Foundation, either version 3 of the License, or     
                                        ; (at your option) any later version.                                      
                                        ;                                                                          
                                        ; This source file is distributed in the hope that it will be useful,      
                                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                                        ; GNU General Public License for more details.                             
                                        ;                                                                          
                                        ; You should have received a copy of the GNU General Public License        
                                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                                        ;                                                                          
                                        ; ============================================================================
                                        ;
                                        ; This code is a heavily modified version of the floating point to string
                                        ; conversion routine which is a part of Lee Davison's EhBASIC.
                                        ;
   5504 = 0000000000000095                            Cvaral		= $95		; current var address low byte
   5505 = 00000096                      Cvarah		= Cvaral+1	; current var address high byte
   5506 = 00000000000000A8                            numexp		= $A8		; string to float number exponent count
   5507 = 00000000000000AA                            expcnt		= $AA		; string to float exponent count
   5508 = 00000000000000BA                            Sendl			= $BA	; BASIC pointer temp low byte
   5509 = 00000000000000BB                            Sendh			= $BB	; BASIC pointer temp low byte
                                        
   5511 = 00000000000003A0                            Decss		= $3A0		; number to decimal string start
   5512 = 000003A1                      Decssp1		= Decss+1	; number to decimal string start
   5513 = 0000000000000001                            FP_ADD		EQU		1
   5514 = 0000000000000002                            FP_SUB		EQU		2
   5515 = 0000000000000003                            FP_MUL		EQU		3
   5516 = 0000000000000004                            FP_DIV		EQU		4
   5517 = 0000000000000005                            FP_FIX2FLT	EQU		5
   5518 = 0000000000000006                            FP_FLT2FIX	EQU		6
   5519 = 0000000000000007                            FP_ABS		EQU		7
   5520 = 0000000000000010                            FP_NEG		EQU		16
   5521 = 0000000000000011                            FP_SWAP		EQU		17
   5522 = 0000000000000083                            FIXED_MUL	EQU		$83
   5523 = 0000000000000081                            FIXED_ADD	EQU		$81
   5524 = 0000000000000082                            FIXED_SUB	EQU		$82
                                        ;parameter FIXED_DIV = 8'h84;
                                        ;parameter FIXED_ABS = 8'h87;
                                        ;parameter FIXED_NEG = 8'h90;
   5528 = 0000000000FEA20E                            FP_CMDREG	EQU		$FEA20E
   5529 = 0000000000FEA20E                            FP_STATREG	EQU		$FEA20E
   5530 = 0000000000FEA200                            FAC1		EQU		$FEA200
   5531 = 0000000000FEA200                            FAC1_5		EQU		$FEA200
   5532 = 0000000000FEA202                            FAC1_4		EQU		$FEA202
   5533 = 0000000000FEA204                            FAC1_3		EQU		$FEA204
   5534 = 0000000000FEA206                            FAC1_2		EQU		$FEA206
   5535 = 0000000000FEA208                            FAC1_1		EQU		$FEA208
   5536 = 0000000000FEA208                            FAC1_msw	EQU		$FEA208
   5537 = 0000000000FEA20A                            FAC1_e		EQU		$FEA20A
   5538 = 0000000000FEA210                            FAC2		EQU		$FEA210
                                        
                                           	CPU		W65C816S
                                           	NDX		16
                                           	MEM		16
                                           	
                                           public FAC1ToString:
                                           
                                           ; The first chunk of code determines if the number is positive or negative
                                           ; and spits out the appropriate sign. Next it takes the absolute value of
                                           ; the accumulator so following code only has to deal with positive numbers.
                                           
   5284 00D030 A0 00 00                     	LDY	#$00			; set index = 1
   5285 00D033 AF 08 A2 FE                  	LDA	FAC1_msw		; test FAC1 sign (b15) (Can't use BIT)
   5286 00D037 10 0E                        	BPL	.0002		; branch if +ve
   5287 00D039 A9 2D 00                     	LDA	#'-'			; else character = "-"
   5288 00D03C 99 A0 03                     	STA	Decss,Y		; save leading character (" " or "-")
   5289 00D03F A9 10 00                     	LDA	#FP_NEG		; make the FAC positive
   5290 00D042 20 69 D2                     	JSR	FPCommandWait
   5291 00D045 80 06                        	BRA	.0001
   5292 00D047                             .0002:
   5293 00D047 A9 20 00                     	LDA	#$20			; character = " " (assume +ve)
   5294 00D04A 99 A0 03                     	STA	Decss,Y
   5295 00D04D                             .0001:
   5296 00D04D 84 BA                        	STY	Sendl			; save index
                                           
                                           ; This little bit of code check for a zero exponent which indicates a
                                           ; value of zero.
                                           
   5301 00D04F AF 0A A2 FE                  	LDA	FAC1_e		; get FAC1 exponent
   5302 00D053 AA                           	TAX
   5303 00D054 D0 06                        	BNE	LAB_2989		; branch if FAC1<>0
                                           					; exponent was $00 so FAC1 is 0
   5305 00D056 A9 30 00                     	LDA	#'0'			; set character = "0"
   5306 00D059 82 93 01                     	BRL	LAB_2A89		; save last character, [EOT] and exit
                                           
                                           ; This loop attempts to make small values more significant, so that there are
                                           ; fewer leading zeros in the value. (The exponent is decremented so that it
                                           ; corresponds). Because of the potential for extremely small values looping is
                                           ; limited. The problem is the 16 bit exponent can allow for much smaller
                                           ; values than an 8 bit exponent would and we don't want to loop for thousands
                                           ; of iterations in order to display a value that's almost zero.
                                           
                                           					; FAC1 is some non zero value
   5316 00D05C                             LAB_2989
   5317 00D05C 84 BA                        	STY	Sendl			; save off .Y
   5318 00D05E A0 67 06                     	LDY #1639			; max number of retries
   5319 00D061 A9 00 00                     	LDA	#$00			; clear (number exponent count)
   5320 00D064 85 A8                        	STA numexp
   5321 00D066                             LOOP_MBMILLION:
   5322 00D066 E0 00 80                     	CPX	#$8000			; compare FAC1 exponent with $8000 (>1.00000)
   5323 00D069 B0 1A                        	BCS	LAB_299A		; branch if FAC1=>1
                                           					; FAC1<1
   5325 00D06B F4 AA D2                     	PEA	A_MILLION		; multiply FAC * 1,000,000
   5326 00D06E 20 1E D2                     	JSR	LOAD_FAC2		; 
   5327 00D071 68                           	PLA					; get rid of parameter
   5328 00D072 20 18 D2                     	JSR	FMUL
   5329 00D075 A5 A8                        	LDA numexp
   5330 00D077 38                           	SEC
   5331 00D078 E9 06 00                     	SBC	#6				; set number exponent count (-6)
   5332 00D07B 85 A8                        	STA numexp
   5333 00D07D AF 0A A2 FE                  	LDA FAC1_e
   5334 00D081 AA                           	TAX
   5335 00D082 88                           	DEY
   5336 00D083 10 E1                        	BPL	LOOP_MBMILLION
                                           
   5338 00D085                             LAB_299A
   5339 00D085 A4 BA                        	LDY	Sendl		; get back .Y
                                           
                                           ; These two loops coerce the value of the FAC to be between 100,000 and
                                           ; 1,000,000. This gives a maximum of six digits before the decimal point
                                           ; in scientific notation.
                                           
                                           ; This loop divides by 10 until the value in the FAC is less than 1,000,000
                                           ;
   5347 00D087                             LOOP_DB10:
   5348 00D087 F4 C2 D2                     	PEA	MAX_BEFORE_SCI	; set pointer low byte to 999999.4375 (max before sci note)
   5349 00D08A 20 1E D2                     	JSR	LOAD_FAC2		; compare FAC1 with (AY)
   5350 00D08D 68                           	PLA					; get rid of parameter
   5351 00D08E AF 0E A2 FE                  	LDA FP_CMDREG
   5352 00D092 89 08 00                     	BIT	#$08			; test equals bit
   5353 00D095 D0 28                        	BNE	LAB_29C3		; exit if FAC1 = (AY)
   5354 00D097 89 04 00                     	BIT	#$04			; test greater than bit
   5355 00D09A F0 07                        	BEQ	LOOP_MB10		; go do *10 if FAC1 < (AY)
                                           
   5357 00D09C                             LAB_29B9
   5358 00D09C 20 56 D2                     	JSR	DivideByTen		; divide by 10
   5359 00D09F E6 A8                        	INC	numexp			; increment number exponent count
   5360 00D0A1 80 E4                        	BRA	LOOP_DB10		; go test again (branch always)
                                           
                                           ; This loop multiplies the value by 10 until it's greater than
                                           ; 100,000.
                                           					; FAC1 < (AY)
   5365 00D0A3                             LOOP_MB10
   5366 00D0A3 F4 DA D2                     	PEA CONST_9375		; set pointer to 99999.9375
   5367 00D0A6 20 1E D2                     	JSR	LOAD_FAC2		; compare FAC1 with (AY)
   5368 00D0A9 68                           	PLA					; get rid of parameter
   5369 00D0AA AF 0E A2 FE                  	LDA FP_CMDREG
   5370 00D0AE 89 08 00                     	BIT #$08
   5371 00D0B1 D0 05                        	BNE	LAB_29B2		; branch if FAC1 = (AY) (allow decimal places)
   5372 00D0B3 89 04 00                     	BIT #$04
   5373 00D0B6 D0 07                        	BNE	LAB_29C0		; branch if FAC1 > (AY) (no decimal places)
                                           					; FAC1 <= (AY)
   5375 00D0B8                             LAB_29B2
   5376 00D0B8 20 49 D2                     	JSR	MultiplyByTen	; multiply by 10
   5377 00D0BB C6 A8                        	DEC	numexp		; decrement number exponent count
   5378 00D0BD 80 E4                        	BRA	LOOP_MB10		; go test again (branch always)
                                           
                                           ; now we have just the digits to do
                                           
   5382 00D0BF                             LAB_29C0
                                           ;	JSR	AddPoint5		; add 0.5 to FAC1 (round FAC1)
   5384 00D0BF                             LAB_29C3
                                           ;	JSR	FloatToFixed	; convert FAC1 floating-to-fixed
   5386 00D0BF A2 01 00                     	LDX	#$01			; set default digits before dp = 1
   5387 00D0C2 A5 A8                        	LDA	numexp		; get number exponent count
   5388 00D0C4 18                           	CLC				; clear carry for add
   5389 00D0C5 69 07 00                     	ADC	#$07			; up to 6 digits before point
   5390 00D0C8 30 0A                        	BMI	LAB_29D8		; if -ve then 1 digit before dp
                                           
   5392 00D0CA C9 08 00                     	CMP	#$08			; A>=8 if n>=1E6
   5393 00D0CD B0 06                        	BCS	LAB_29D9		; branch if >= $08
                                           
                                           					; carry is clear
   5396 00D0CF AA                           	TAX				; copy to A
   5397 00D0D0 CA                           	DEX				; take 1 from digit count
   5398 00D0D1 A9 02 00                     	LDA	#$02			;.set exponent adjust
                                           
   5400 00D0D4                             LAB_29D8
   5401 00D0D4 38                           	SEC				; set carry for subtract
   5402 00D0D5                             LAB_29D9
   5403 00D0D5 E9 02 00                     	SBC	#$02			; -2
   5404 00D0D8 85 AA                        	STA	expcnt		;.save exponent adjust
   5405 00D0DA 86 A8                        	STX	numexp		; save digits before dp count
   5406 00D0DC 8A                           	TXA				; copy to A
   5407 00D0DD F0 02                        	BEQ	LAB_29E4		; branch if no digits before dp
                                           
   5409 00D0DF 10 15                        	BPL	LAB_29F7		; branch if digits before dp
                                           
   5411 00D0E1                             LAB_29E4
   5412 00D0E1 A4 BA                        	LDY	Sendl			; get output string index
   5413 00D0E3 A9 2E 00                     	LDA	#'.'			; character "."
   5414 00D0E6 C8                           	INY				; increment index
   5415 00D0E7 99 A0 03                     	STA	Decss,Y		; save to output string
   5416 00D0EA 8A                           	TXA				;.
   5417 00D0EB F0 07                        	BEQ	LAB_29F5		;.
                                           
   5419 00D0ED A9 30 00                     	LDA	#'0'			; character "0"
   5420 00D0F0 C8                           	INY				; increment index
   5421 00D0F1 99 A0 03                     	STA	Decss,Y		; save to output string
   5422 00D0F4                             LAB_29F5
   5423 00D0F4 84 BA                        	STY	Sendl			; save output string index
                                           
   5425 00D0F6                             LAB_29F7
   5426 00D0F6 A2 30 00                     	LDX	#'0'			; holds onto the digit value
                                           
                                           ; Now loop subtracting 100,000 as many times as we can. The value was coerced
                                           ; to be between 100,000 and 1,000,000. Count the number of times subtraction
                                           ; can be done successfully.
                                           ;
   5432 00D0F9                             LAB_29FB
   5433 00D0F9 F4 B6 D2                     	PEA CONST_100000
   5434 00D0FC 20 1E D2                     	JSR LOAD_FAC2	; load FAC2 with 100,000
   5435 00D0FF 68                           	PLA				; get rid of parameter
   5436 00D100 AF 0E A2 FE                  	LDA FP_STATREG
   5437 00D104 89 04 00                     	BIT #$04		; Is FAC1 > 100,000 ?
   5438 00D107 F0 0F                        	BEQ	.0005		; branch if not
   5439 00D109 A9 11 00                     	LDA #FP_SWAP	; subtract is FAC2-FAC1!
   5440 00D10C 20 69 D2                     	JSR FPCommandWait;
   5441 00D10F A9 02 00                     	LDA #FP_SUB		; subtract 100,000 from the mantissa.
   5442 00D112 20 69 D2                     	JSR FPCommandWait
   5443 00D115 E8                           	INX				; increment the value of the digit
   5444 00D116 80 E1                        	BRA	LAB_29FB	; try again
   5445 00D118                             .0005:
   5446 00D118 8A                           	TXA
   5447 00D119 A4 BA                        	LDY	Sendl			; get output string index
   5448 00D11B C8                           	INY				; increment output string index
   5449 00D11C 8A                           	TXA
   5450 00D11D 99 A0 03                     	STA	Decss,Y		; save to output string
   5451 00D120 C6 A8                        	DEC	numexp		; decrement # of characters before the dp
   5452 00D122 D0 07                        	BNE	LAB_2A3B		; branch if still characters to do
                                           				; else output the point
   5454 00D124 A9 2E 00                     	LDA	#'.'			; character "."
   5455 00D127 C8                           	INY				; increment output string index
   5456 00D128 99 A0 03                     	STA	Decss,Y		; save to output string
   5457 00D12B                             LAB_2A3B
   5458 00D12B 84 BA                        	STY	Sendl		; save output string index
                                           	; We subtracted until the value was < 100,000 so multiply the
                                           	; remainder upwards to get the next digit.
   5461 00D12D 20 49 D2                     	JSR	MultiplyByTen	; If not, multiply by 10
   5462 00D130 C0 1B 00                     	CPY #27			; converted (+/- . incl)
   5463 00D133 90 C1                        	BCC	LAB_29F7
                                           					; now remove trailing zeroes
   5465 00D135                             .RemoveTrailingZeros
   5466 00D135 B9 A0 03                     	LDA	Decss,Y		; get character from output string
   5467 00D138 29 FF 00                     	AND	#$FF		; mask to a byte
   5468 00D13B 88                           	DEY				; decrement output string index
   5469 00D13C C9 30 00                     	CMP	#'0'			; compare with "0"
   5470 00D13F F0 F4                        	BEQ	.RemoveTrailingZeros	; loop until non "0" character found
                                           
   5472 00D141 C9 2E 00                     	CMP	#'.'			; compare with "."
   5473 00D144 F0 01                        	BEQ	LAB_2A58		; branch if was dp
                                           
                                           					; restore last character
   5476 00D146 C8                           	INY				; increment output string index
   5477 00D147                             LAB_2A58
   5478 00D147 A9 2B 00                     	LDA	#'+'			; character "+"
   5479 00D14A A6 AA                        	LDX	expcnt		; get exponent count
   5480 00D14C F0 FF A2 00                  	LBEQ	LAB_2A8C		; if zero go set null terminator and exit
                                           
                                           					; exponent isn't zero so write exponent
   5483 00D150 10 0A                        	BPL	LAB_2A68		; branch if exponent count +ve
                                           
   5485 00D152 A9 00 00                     	LDA	#$00			; clear A
   5486 00D155 38                           	SEC				; set carry for subtract
   5487 00D156 E5 AA                        	SBC	expcnt		; subtract exponent count adjust (convert -ve to +ve)
   5488 00D158 AA                           	TAX				; copy exponent count to X
   5489 00D159 A9 2D 00                     	LDA	#'-'			; character "-"
                                           
                                           ; We must keep moving forwards through the string because the acc is storing
                                           ; two bytes.
                                           
   5494 00D15C                             LAB_2A68
   5495 00D15C 48                           	PHA
   5496 00D15D A9 45 00                     	LDA	#'E'			; character "E"
   5497 00D160 99 A1 03                     	STA	Decss+1,Y		; save exponent sign to output string
   5498 00D163 68                           	PLA
   5499 00D164 99 A2 03                     	STA	Decss+2,Y		; save to output string
   5500 00D167 8A                           	TXA				; get exponent count back
                                           
                                           ; do highest exponent digit
   5503 00D168 64 BA                        	STZ Sendl
   5504 00D16A A2 2F 00                     	LDX	#'0'-1		; one less than "0" character
   5505 00D16D 38                           	SEC				; set carry for subtract
   5506 00D16E E8                          .0001:				
   5507 00D16F E9 10 27                     	SBC	#10000
   5508 00D172 B0 FA                        	BCS .0001
   5509 00D174 69 10 27                     	ADC #10000
   5510 00D177 E0 30 00                     	CPX #'0'
   5511 00D17A F0 09                        	BEQ .0005
   5512 00D17C E6 BA                        	INC Sendl
   5513 00D17E 48                           	PHA
   5514 00D17F 8A                           	TXA
   5515 00D180 99 A3 03                     	STA Decss+3,Y
   5516 00D183 68                           	PLA
   5517 00D184 C8                           	INY
                                           ; do the next exponent digit
   5519 00D185                             .0005:
   5520 00D185 A2 2F 00                     	LDX #'0'-1
   5521 00D188 38                           	SEC
   5522 00D189                             .0002:
   5523 00D189 E8                           	INX
   5524 00D18A E9 E8 03                     	SBC #1000
   5525 00D18D B0 FA                        	BCS .0002
   5526 00D18F 69 E8 03                     	ADC #1000
   5527 00D192 46 BA                        	LSR Sendl
   5528 00D194 B0 05                        	BCS .00010
   5529 00D196 E0 30 00                     	CPX #'0'
   5530 00D199 F0 09                        	BEQ .0006
   5531 00D19B                             .00010:
   5532 00D19B E6 BA                        	INC Sendl
   5533 00D19D 48                           	PHA
   5534 00D19E 8A                           	TXA
   5535 00D19F 99 A3 03                     	STA Decss+3,Y
   5536 00D1A2 68                           	PLA
   5537 00D1A3 C8                           	INY
                                           ; and the next
   5539 00D1A4                             .0006:
   5540 00D1A4 A2 2F 00                     	LDX	#'0'-1
   5541 00D1A7 38                           	SEC
   5542 00D1A8                             .0003:
   5543 00D1A8 E8                           	INX
   5544 00D1A9 E9 64 00                     	SBC #100
   5545 00D1AC B0 FA                        	BCS .0003
   5546 00D1AE 69 64 00                     	ADC #100
   5547 00D1B1 46 BA                        	LSR Sendl
   5548 00D1B3 B0 05                        	BCS .00011
   5549 00D1B5 E0 30 00                     	CPX #'0'
   5550 00D1B8 F0 09                        	BEQ .0007
   5551 00D1BA                             .00011:
   5552 00D1BA E6 BA                        	INC Sendl
   5553 00D1BC 48                           	PHA
   5554 00D1BD 8A                           	TXA
   5555 00D1BE 99 A3 03                     	STA Decss+3,Y
   5556 00D1C1 68                           	PLA
   5557 00D1C2 C8                           	INY
                                           
   5559 00D1C3                             .0007:
   5560 00D1C3 A2 2F 00                     	LDX #'0'-1
   5561 00D1C6 38                           	SEC
   5562 00D1C7                             .0004:
   5563 00D1C7 E8                           	INX
   5564 00D1C8 E9 0A 00                     	SBC #10
   5565 00D1CB B0 FA                        	BCS .0004
   5566 00D1CD 69 0A 00                     	ADC #10
   5567 00D1D0 46 BA                        	LSR Sendl
   5568 00D1D2 B0 05                        	BCS .00012
   5569 00D1D4 E0 30 00                     	CPX #'0'
   5570 00D1D7 F0 09                        	BEQ .0008
   5571 00D1D9                             .00012:
   5572 00D1D9 E6 BA                        	INC Sendl
   5573 00D1DB 48                           	PHA
   5574 00D1DC 8A                           	TXA
   5575 00D1DD 99 A3 03                     	STA Decss+3,Y
   5576 00D1E0 68                           	PLA
   5577 00D1E1 C8                           	INY
                                           
   5579 00D1E2                             .0008:
   5580 00D1E2 69 30 00                     	ADC #'0'
   5581 00D1E5 99 A3 03                     	STA Decss+3,Y
   5582 00D1E8 A9 00 00                     	LDA	#$00			; set null terminator
   5583 00D1EB 99 A4 03                     	STA	Decss+4,Y		; save to output string
   5584 00D1EE 60                           	RTS					; go set string pointer (AY) and exit (branch always)
                                           
   5586 00D1EF                             LAB_2A89
   5587 00D1EF 99 A0 03                     	STA	Decss,Y		; save last character to output string
                                           					; set null terminator and exit
   5589 00D1F2                             LAB_2A8C
   5590 00D1F2 A9 00 00                     	LDA	#$00			; set null terminator
   5591 00D1F5 99 A1 03                     	STA	Decss+1,Y		; save after last character
                                           
   5593 00D1F8                             LAB_2A91
                                           ;	LDA	#<Decssp1		; set result string low pointer
                                           ;	LDY	#>Decssp1		; set result string high pointer
   5596 00D1F8 60                           	RTS
                                           
   5598 00D1F9                             LAB_25FB:
   5599 00D1F9 A9 11 00                     	LDA		#FP_SWAP
   5600 00D1FC 20 69 D2                     	JSR		FPCommandWait
   5601 00D1FF A0 00 00                     	LDY		#0
   5602 00D202 BB                           	TYX
   5603 00D203                             .0002:
   5604 00D203 B3 03                        	LDA		(3,S),Y
   5605 00D205 9F 00 A2 FE                  	STA		FAC1,X
   5606 00D209 C8                           	INY
   5607 00D20A C8                           	INY
   5608 00D20B E8                           	INX
   5609 00D20C E8                           	INX
   5610 00D20D E0 0C 00                     	CPX		#12
   5611 00D210 D0 F1                        	BNE		.0002
   5612 00D212 A9 05 00                     	LDA		#FP_FIX2FLT
   5613 00D215 20 69 D2                     	JSR		FPCommandWait
   5614 00D218                             FMUL:
   5615 00D218 A9 03 00                     	LDA		#FP_MUL
   5616 00D21B 4C 69 D2                     	JMP		FPCommandWait
   5617 00D21E                             	
   5618 00D21E DA                           	PHX
   5619 00D21F 5A                           	PHY
   5620 00D220 A0 00 00                     	LDY		#0
   5621 00D223 BB                           	TYX
   5622 00D224                             .0002:
   5623 00D224 B3 07                        	LDA		(7,s),Y
   5624 00D226 9F 10 A2 FE                  	STA		FAC2,X
   5625 00D22A C8                           	INY
   5626 00D22B C8                           	INY
   5627 00D22C E8                           	INX
   5628 00D22D E8                           	INX
   5629 00D22E E0 0C 00                     	CPX		#12
   5630 00D231 D0 F1                        	BNE		.0002
   5631 00D233 7A                           	PLY
   5632 00D234 FA                           	PLX
   5633 00D235 60                           	RTS
   5634 00D236                             	
   5635 00D236 A9 06 00                     	LDA		#FP_FLT2FIX
   5636 00D239 4C 69 D2                     	JMP		FPCommandWait
   5637 00D23C                             	
   5638 00D23C F4 E6 D2                     	PEA		CONST_POINT5
   5639 00D23F 20 1E D2                     	JSR		LOAD_FAC2
   5640 00D242 68                           	PLA
   5641 00D243 A9 01 00                     	LDA		#FP_ADD
   5642 00D246 4C 69 D2                     	JMP		FPCommandWait
   5643 00D249                             	
   5644 00D249 F4 CE D2                     	PEA		TEN_AS_FLOAT
   5645 00D24C 20 1E D2                     	JSR		LOAD_FAC2
   5646 00D24F 68                           	PLA
   5647 00D250 A9 03 00                     	LDA		#FP_MUL
   5648 00D253 4C 69 D2                     	JMP		FPCommandWait
                                           	
   5650 00D256 F4 CE D2                     	PEA		TEN_AS_FLOAT
   5651 00D259 20 1E D2                     	JSR		LOAD_FAC2
   5652 00D25C 68                           	PLA
   5653 00D25D 20 66 D2                     	JSR		SwapFACs
   5654 00D260 A9 04 00                     	LDA		#FP_DIV
   5655 00D263 4C 69 D2                     	JMP		FPCommandWait
   5656 00D266                             	
   5657 00D266 A9 11 00                     	LDA		#FP_SWAP
                                           
                                           ; Issue a command to the FP unit and wait for it to complete
                                           ;
                                           public FPCommandWait:
   5662 00D269 48                           	PHA
   5663 00D26A                             .0001:
   5664 00D26A AF 0E A2 FE                  	LDA		FP_STATREG	; get the status register
   5665 00D26E 89 80 00                     	BIT		#$80		; check for busy bit
   5666 00D271 D0 F7                        	BNE		.0001		; if busy go back
   5667 00D273 68                           	PLA					; to pop acc
   5668 00D274 8F 0E A2 FE                  	STA		FP_CMDREG	; store the command
   5669 00D278 60                           	RTS
                                           
                                           ; Display the FAC1 as a hex number
                                           ;
                                           public DispFAC1:
   5674 00D279 AF 0A A2 FE                  	LDA FAC1_e
   5675 00D27D 20 13 E4                     	JSR DispWord
   5676 00D280 AF 08 A2 FE                  	LDA	FAC1_1
   5677 00D284 20 13 E4                     	JSR	DispWord
   5678 00D287 AF 06 A2 FE                  	LDA FAC1_2
   5679 00D28B 20 13 E4                     	JSR	DispWord
   5680 00D28E AF 04 A2 FE                  	LDA FAC1_3
   5681 00D292 20 13 E4                     	JSR DispWord
   5682 00D295 AF 02 A2 FE                  	LDA FAC1_4
   5683 00D299 20 13 E4                     	JSR DispWord
   5684 00D29C AF 00 A2 FE                  	LDA FAC1_5
   5685 00D2A0 20 13 E4                     	JSR DispWord
   5686 00D2A3 A9 20 00                     	LDA #' '
   5687 00D2A6 20 7A E3                     	JSR OutChar
   5688 00D2A9 60                           	RTS
                                           ;
                                           ; 1,000,000 as a floating point number
                                           ;
   5692 00D2AA                             A_MILLION:	; $F4240
   5693 00D2AA 00 00                        	dw		$0000
   5694 00D2AC 00 00                        	dw		$0000
   5695 00D2AE 00 00                        	dw		$0000
   5696 00D2B0 00 00                        	dW		$0000
   5697 00D2B2 12 7A                        	dw		$7A12
   5698 00D2B4 13 80                        	dw		$8013
                                           
   5700 00D2B6                             CONST_100000:
                                           	;186A0
   5702 00D2B6 00 00                        	dw		$0000
   5703 00D2B8 00 00                        	dw		$0000
   5704 00D2BA 00 00                        	dw		$0000
   5705 00D2BC 00 00                        	dw		$0000
   5706 00D2BE A8 61                        	dw		$61A8
   5707 00D2C0 10 80                        	dw		$8010
                                           ; The constant 999999.4375 as hex
                                           ; 01.11_1010_0001_0001_1111_1011_1000_00000000000000000000000000
   5710 00D2C2                             MAX_BEFORE_SCI:
   5711 00D2C2 00 00                        	dw  $0000
   5712 00D2C4 00 00                        	dw  $0000
   5713 00D2C6 00 00                        	dw	$0000
   5714 00D2C8 80 FB                        	dw	$FB80
   5715 00D2CA 11 7A                        	dw	$7A11
   5716 00D2CC 13 80                        	dw	$8013
                                           
   5718 00D2CE                             TEN_AS_FLOAT:
   5719 00D2CE 00 00                        	dw	$0000
   5720 00D2D0 00 00                        	dw	$0000
   5721 00D2D2 00 00                        	dw	$0000
   5722 00D2D4 00 00                        	dw	$0000
   5723 00D2D6 00 50                        	dw	$5000
   5724 00D2D8 03 80                        	dw	$8003
                                           
                                           ; 99999.9375
                                           ; 01.10_0001_1010_0111_1111_1100_000000000000000000000000000000
                                           ;
   5729 00D2DA                             CONST_9375:
   5730 00D2DA 00 00                        	dw	$0000
   5731 00D2DC 00 00                        	dw	$0000
   5732 00D2DE 00 00                        	dw	$0000
   5733 00D2E0 00 FC                        	dw	$FC00
   5734 00D2E2 A7 61                        	dw	$61A7
   5735 00D2E4 10 80                        	dw	$8010
                                           
                                           ; 0.5
   5738 00D2E6                             CONST_POINT5:
   5739 00D2E6 00 00                        	dw	$0000
   5740 00D2E8 00 00                        	dw	$0000
   5741 00D2EA 00 00                        	dw	$0000
   5742 00D2EC 00 00                        	dw	$0000
   5743 00D2EE 00 40                        	dw	$4000
   5744 00D2F0 FF 7F                        	dw	$7FFF
                                           
                                           ; This table is used in converting numbers to ASCII.
                                           
   5748 00D2F2                             LAB_2A9A
   6015 = 0000D2F3                         LAB_2A9B = LAB_2A9A+1
   6016 = 0000D2F4                         LAB_2A9C = LAB_2A9B+1
                                           ;	.word	$FFFF,$F21F,$494C,$589C,$0000
                                           ;	.word	$0000,$0163,$4578,$5D8A,$0000
                                           ;	.word	$FFFF,$FFDC,$790D,$903F,$0000
                                           ;	.word	$0000,$0003,$8D7E,$A4C6,$8000
                                           ;	.word	$FFFF,$FFFF,$A50C,$EF85,$C000
                                           ;	.word	$0000,$0000,$0918,$4E72,$A000
                                           ;	.word	$FFFF,$FFFF,$FF17,$2B5A,$F000
                                           ;	.word	$0000,$0000,$0017,$4876,$E800
                                           ;	.word	$FFFF,$FFFF,$FFFD,$ABF4,$1C00
                                           ;	.word	$0000,$0000,$0000,$3B9A,$CA00
                                           ;	.word	$FFFF,$FFFF,$FFFF,$FF67,$6980
                                           ;	.word	$0000,$0000,$0000,$05F5,$E100		; 100000000
                                           ;	.word	$0000,$0000,$0098,$9680		; 10000000
                                           ;	.word   $4240,$000F,$0000,$0000,$0000,$804E		; 1000000
   5765 00D2F2 A0 86 01 00 00 00 00 00      	.word	$86A0,$0001,$0000,$0000,$0000,$804E		; 100000
   5765 00D2FA 00 00 4E 80                
   5766 00D2FE 10 27 00 00 00 00 00 00      	.word	$2710,$0000,$0000,$0000,$0000,$804E		; 10000
   5766 00D306 00 00 4E 80                
   5767 00D30A E8 03 00 00 00 00 00 00      	.word	$03E8,$0000,$0000,$0000,$0000,$804E		; 1000
   5767 00D312 00 00 4E 80                
   5768 00D316 64 00 00 00 00 00 00 00      	.word	$0064,$0000,$0000,$0000,$0000,$804E		; 100
   5768 00D31E 00 00 4E 80                
   5769 00D322                             FIXED10:
   5770 00D322 0A 00 00 00 00 00 00 00      	.word	$000A,$0000,$0000,$0000,$0000,$804E		; 10
   5770 00D32A 00 00 4E 80                
   5771 00D32E 01 00 00 00 00 00 00 00      	.word	$0001,$0000,$0000,$0000,$0000,$804E		; 1
   5771 00D336 00 00 4E 80                
                                           
                                           		 MEM	16
                                           		 NDX	16
Finitron 65002 assembler   version 1.3   Mon Dec 08 00:45:00 2014     Page 1
FTBios816.asm


                                           .include "FAC1ToString.asm"
                                           
                                           	cpu		W65C816S
   5777 00D33A FF FF FF FF FF FF FF FF      	.org	$E000
   5777 00D342 FF FF FF FF FF FF FF FF    
   5777 00D34A FF FF FF FF FF FF FF FF    
   5777 00D352 FF FF FF FF FF FF FF FF    
   5777 00D35A FF FF FF FF FF FF FF FF    
   5777 00D362 FF FF FF FF FF FF FF FF    
   5777 00D36A FF FF FF FF FF FF FF FF    
   5777 00D372 FF FF FF FF FF FF FF FF    
   5777 00D37A FF FF FF FF FF FF FF FF    
   5777 00D382 FF FF FF FF FF FF FF FF    
   5777 00D38A FF FF FF FF FF FF FF FF    
   5777 00D392 FF FF FF FF FF FF FF FF    
   5777 00D39A FF FF FF FF FF FF FF FF    
   5777 00D3A2 FF FF FF FF FF FF FF FF    
   5777 00D3AA FF FF FF FF FF FF FF FF    
   5777 00D3B2 FF FF FF FF FF FF FF FF    
   5777 00D3BA FF FF FF FF FF FF FF FF    
   5777 00D3C2 FF FF FF FF FF FF FF FF    
   5777 00D3CA FF FF FF FF FF FF FF FF    
   5777 00D3D2 FF FF FF FF FF FF FF FF    
   5777 00D3DA FF FF FF FF FF FF FF FF    
   5777 00D3E2 FF FF FF FF FF FF FF FF    
   5777 00D3EA FF FF FF FF FF FF FF FF    
   5777 00D3F2 FF FF FF FF FF FF FF FF    
   5777 00D3FA FF FF FF FF FF FF FF FF    
   5777 00D402 FF FF FF FF FF FF FF FF    
   5777 00D40A FF FF FF FF FF FF FF FF    
   5777 00D412 FF FF FF FF FF FF FF FF    
   5777 00D41A FF FF FF FF FF FF FF FF    
   5777 00D422 FF FF FF FF FF FF FF FF    
   5777 00D42A FF FF FF FF FF FF FF FF    
   5777 00D432 FF FF FF FF FF FF FF FF    
   5777 00D43A FF FF FF FF FF FF FF FF    
   5777 00D442 FF FF FF FF FF FF FF FF    
   5777 00D44A FF FF FF FF FF FF FF FF    
   5777 00D452 FF FF FF FF FF FF FF FF    
   5777 00D45A FF FF FF FF FF FF FF FF    
   5777 00D462 FF FF FF FF FF FF FF FF    
   5777 00D46A FF FF FF FF FF FF FF FF    
   5777 00D472 FF FF FF FF FF FF FF FF    
   5777 00D47A FF FF FF FF FF FF FF FF    
   5777 00D482 FF FF FF FF FF FF FF FF    
   5777 00D48A FF FF FF FF FF FF FF FF    
   5777 00D492 FF FF FF FF FF FF FF FF    
   5777 00D49A FF FF FF FF FF FF FF FF    
   5777 00D4A2 FF FF FF FF FF FF FF FF    
   5777 00D4AA FF FF FF FF FF FF FF FF    
   5777 00D4B2 FF FF FF FF FF FF FF FF    
   5777 00D4BA FF FF FF FF FF FF FF FF    
   5777 00D4C2 FF FF FF FF FF FF FF FF    
   5777 00D4CA FF FF FF FF FF FF FF FF    
   5777 00D4D2 FF FF FF FF FF FF FF FF    
   5777 00D4DA FF FF FF FF FF FF FF FF    
   5777 00D4E2 FF FF FF FF FF FF FF FF    
   5777 00D4EA FF FF FF FF FF FF FF FF    
   5777 00D4F2 FF FF FF FF FF FF FF FF    
   5777 00D4FA FF FF FF FF FF FF FF FF    
   5777 00D502 FF FF FF FF FF FF FF FF    
   5777 00D50A FF FF FF FF FF FF FF FF    
   5777 00D512 FF FF FF FF FF FF FF FF    
   5777 00D51A FF FF FF FF FF FF FF FF    
   5777 00D522 FF FF FF FF FF FF FF FF    
   5777 00D52A FF FF FF FF FF FF FF FF    
   5777 00D532 FF FF FF FF FF FF FF FF    
   5777 00D53A FF FF FF FF FF FF FF FF    
   5777 00D542 FF FF FF FF FF FF FF FF    
   5777 00D54A FF FF FF FF FF FF FF FF    
   5777 00D552 FF FF FF FF FF FF FF FF    
   5777 00D55A FF FF FF FF FF FF FF FF    
   5777 00D562 FF FF FF FF FF FF FF FF    
   5777 00D56A FF FF FF FF FF FF FF FF    
   5777 00D572 FF FF FF FF FF FF FF FF    
   5777 00D57A FF FF FF FF FF FF FF FF    
   5777 00D582 FF FF FF FF FF FF FF FF    
   5777 00D58A FF FF FF FF FF FF FF FF    
   5777 00D592 FF FF FF FF FF FF FF FF    
   5777 00D59A FF FF FF FF FF FF FF FF    
   5777 00D5A2 FF FF FF FF FF FF FF FF    
   5777 00D5AA FF FF FF FF FF FF FF FF    
   5777 00D5B2 FF FF FF FF FF FF FF FF    
   5777 00D5BA FF FF FF FF FF FF FF FF    
   5777 00D5C2 FF FF FF FF FF FF FF FF    
   5777 00D5CA FF FF FF FF FF FF FF FF    
   5777 00D5D2 FF FF FF FF FF FF FF FF    
   5777 00D5DA FF FF FF FF FF FF FF FF    
   5777 00D5E2 FF FF FF FF FF FF FF FF    
   5777 00D5EA FF FF FF FF FF FF FF FF    
   5777 00D5F2 FF FF FF FF FF FF FF FF    
   5777 00D5FA FF FF FF FF FF FF FF FF    
   5777 00D602 FF FF FF FF FF FF FF FF    
   5777 00D60A FF FF FF FF FF FF FF FF    
   5777 00D612 FF FF FF FF FF FF FF FF    
   5777 00D61A FF FF FF FF FF FF FF FF    
   5777 00D622 FF FF FF FF FF FF FF FF    
   5777 00D62A FF FF FF FF FF FF FF FF    
   5777 00D632 FF FF FF FF FF FF FF FF    
   5777 00D63A FF FF FF FF FF FF FF FF    
   5777 00D642 FF FF FF FF FF FF FF FF    
   5777 00D64A FF FF FF FF FF FF FF FF    
   5777 00D652 FF FF FF FF FF FF FF FF    
   5777 00D65A FF FF FF FF FF FF FF FF    
   5777 00D662 FF FF FF FF FF FF FF FF    
   5777 00D66A FF FF FF FF FF FF FF FF    
   5777 00D672 FF FF FF FF FF FF FF FF    
   5777 00D67A FF FF FF FF FF FF FF FF    
   5777 00D682 FF FF FF FF FF FF FF FF    
   5777 00D68A FF FF FF FF FF FF FF FF    
   5777 00D692 FF FF FF FF FF FF FF FF    
   5777 00D69A FF FF FF FF FF FF FF FF    
   5777 00D6A2 FF FF FF FF FF FF FF FF    
   5777 00D6AA FF FF FF FF FF FF FF FF    
   5777 00D6B2 FF FF FF FF FF FF FF FF    
   5777 00D6BA FF FF FF FF FF FF FF FF    
   5777 00D6C2 FF FF FF FF FF FF FF FF    
   5777 00D6CA FF FF FF FF FF FF FF FF    
   5777 00D6D2 FF FF FF FF FF FF FF FF    
   5777 00D6DA FF FF FF FF FF FF FF FF    
   5777 00D6E2 FF FF FF FF FF FF FF FF    
   5777 00D6EA FF FF FF FF FF FF FF FF    
   5777 00D6F2 FF FF FF FF FF FF FF FF    
   5777 00D6FA FF FF FF FF FF FF FF FF    
   5777 00D702 FF FF FF FF FF FF FF FF    
   5777 00D70A FF FF FF FF FF FF FF FF    
   5777 00D712 FF FF FF FF FF FF FF FF    
   5777 00D71A FF FF FF FF FF FF FF FF    
   5777 00D722 FF FF FF FF FF FF FF FF    
   5777 00D72A FF FF FF FF FF FF FF FF    
   5777 00D732 FF FF FF FF FF FF FF FF    
   5777 00D73A FF FF FF FF FF FF FF FF    
   5777 00D742 FF FF FF FF FF FF FF FF    
   5777 00D74A FF FF FF FF FF FF FF FF    
   5777 00D752 FF FF FF FF FF FF FF FF    
   5777 00D75A FF FF FF FF FF FF FF FF    
   5777 00D762 FF FF FF FF FF FF FF FF    
   5777 00D76A FF FF FF FF FF FF FF FF    
   5777 00D772 FF FF FF FF FF FF FF FF    
   5777 00D77A FF FF FF FF FF FF FF FF    
   5777 00D782 FF FF FF FF FF FF FF FF    
   5777 00D78A FF FF FF FF FF FF FF FF    
   5777 00D792 FF FF FF FF FF FF FF FF    
   5777 00D79A FF FF FF FF FF FF FF FF    
   5777 00D7A2 FF FF FF FF FF FF FF FF    
   5777 00D7AA FF FF FF FF FF FF FF FF    
   5777 00D7B2 FF FF FF FF FF FF FF FF    
   5777 00D7BA FF FF FF FF FF FF FF FF    
   5777 00D7C2 FF FF FF FF FF FF FF FF    
   5777 00D7CA FF FF FF FF FF FF FF FF    
   5777 00D7D2 FF FF FF FF FF FF FF FF    
   5777 00D7DA FF FF FF FF FF FF FF FF    
   5777 00D7E2 FF FF FF FF FF FF FF FF    
   5777 00D7EA FF FF FF FF FF FF FF FF    
   5777 00D7F2 FF FF FF FF FF FF FF FF    
   5777 00D7FA FF FF FF FF FF FF FF FF    
   5777 00D802 FF FF FF FF FF FF FF FF    
   5777 00D80A FF FF FF FF FF FF FF FF    
   5777 00D812 FF FF FF FF FF FF FF FF    
   5777 00D81A FF FF FF FF FF FF FF FF    
   5777 00D822 FF FF FF FF FF FF FF FF    
   5777 00D82A FF FF FF FF FF FF FF FF    
   5777 00D832 FF FF FF FF FF FF FF FF    
   5777 00D83A FF FF FF FF FF FF FF FF    
   5777 00D842 FF FF FF FF FF FF FF FF    
   5777 00D84A FF FF FF FF FF FF FF FF    
   5777 00D852 FF FF FF FF FF FF FF FF    
   5777 00D85A FF FF FF FF FF FF FF FF    
   5777 00D862 FF FF FF FF FF FF FF FF    
   5777 00D86A FF FF FF FF FF FF FF FF    
   5777 00D872 FF FF FF FF FF FF FF FF    
   5777 00D87A FF FF FF FF FF FF FF FF    
   5777 00D882 FF FF FF FF FF FF FF FF    
   5777 00D88A FF FF FF FF FF FF FF FF    
   5777 00D892 FF FF FF FF FF FF FF FF    
   5777 00D89A FF FF FF FF FF FF FF FF    
   5777 00D8A2 FF FF FF FF FF FF FF FF    
   5777 00D8AA FF FF FF FF FF FF FF FF    
   5777 00D8B2 FF FF FF FF FF FF FF FF    
   5777 00D8BA FF FF FF FF FF FF FF FF    
   5777 00D8C2 FF FF FF FF FF FF FF FF    
   5777 00D8CA FF FF FF FF FF FF FF FF    
   5777 00D8D2 FF FF FF FF FF FF FF FF    
   5777 00D8DA FF FF FF FF FF FF FF FF    
   5777 00D8E2 FF FF FF FF FF FF FF FF    
   5777 00D8EA FF FF FF FF FF FF FF FF    
   5777 00D8F2 FF FF FF FF FF FF FF FF    
   5777 00D8FA FF FF FF FF FF FF FF FF    
   5777 00D902 FF FF FF FF FF FF FF FF    
   5777 00D90A FF FF FF FF FF FF FF FF    
   5777 00D912 FF FF FF FF FF FF FF FF    
   5777 00D91A FF FF FF FF FF FF FF FF    
   5777 00D922 FF FF FF FF FF FF FF FF    
   5777 00D92A FF FF FF FF FF FF FF FF    
   5777 00D932 FF FF FF FF FF FF FF FF    
   5777 00D93A FF FF FF FF FF FF FF FF    
   5777 00D942 FF FF FF FF FF FF FF FF    
   5777 00D94A FF FF FF FF FF FF FF FF    
   5777 00D952 FF FF FF FF FF FF FF FF    
   5777 00D95A FF FF FF FF FF FF FF FF    
   5777 00D962 FF FF FF FF FF FF FF FF    
   5777 00D96A FF FF FF FF FF FF FF FF    
   5777 00D972 FF FF FF FF FF FF FF FF    
   5777 00D97A FF FF FF FF FF FF FF FF    
   5777 00D982 FF FF FF FF FF FF FF FF    
   5777 00D98A FF FF FF FF FF FF FF FF    
   5777 00D992 FF FF FF FF FF FF FF FF    
   5777 00D99A FF FF FF FF FF FF FF FF    
   5777 00D9A2 FF FF FF FF FF FF FF FF    
   5777 00D9AA FF FF FF FF FF FF FF FF    
   5777 00D9B2 FF FF FF FF FF FF FF FF    
   5777 00D9BA FF FF FF FF FF FF FF FF    
   5777 00D9C2 FF FF FF FF FF FF FF FF    
   5777 00D9CA FF FF FF FF FF FF FF FF    
   5777 00D9D2 FF FF FF FF FF FF FF FF    
   5777 00D9DA FF FF FF FF FF FF FF FF    
   5777 00D9E2 FF FF FF FF FF FF FF FF    
   5777 00D9EA FF FF FF FF FF FF FF FF    
   5777 00D9F2 FF FF FF FF FF FF FF FF    
   5777 00D9FA FF FF FF FF FF FF FF FF    
   5777 00DA02 FF FF FF FF FF FF FF FF    
   5777 00DA0A FF FF FF FF FF FF FF FF    
   5777 00DA12 FF FF FF FF FF FF FF FF    
   5777 00DA1A FF FF FF FF FF FF FF FF    
   5777 00DA22 FF FF FF FF FF FF FF FF    
   5777 00DA2A FF FF FF FF FF FF FF FF    
   5777 00DA32 FF FF FF FF FF FF FF FF    
   5777 00DA3A FF FF FF FF FF FF FF FF    
   5777 00DA42 FF FF FF FF FF FF FF FF    
   5777 00DA4A FF FF FF FF FF FF FF FF    
   5777 00DA52 FF FF FF FF FF FF FF FF    
   5777 00DA5A FF FF FF FF FF FF FF FF    
   5777 00DA62 FF FF FF FF FF FF FF FF    
   5777 00DA6A FF FF FF FF FF FF FF FF    
   5777 00DA72 FF FF FF FF FF FF FF FF    
   5777 00DA7A FF FF FF FF FF FF FF FF    
   5777 00DA82 FF FF FF FF FF FF FF FF    
   5777 00DA8A FF FF FF FF FF FF FF FF    
   5777 00DA92 FF FF FF FF FF FF FF FF    
   5777 00DA9A FF FF FF FF FF FF FF FF    
   5777 00DAA2 FF FF FF FF FF FF FF FF    
   5777 00DAAA FF FF FF FF FF FF FF FF    
   5777 00DAB2 FF FF FF FF FF FF FF FF    
   5777 00DABA FF FF FF FF FF FF FF FF    
   5777 00DAC2 FF FF FF FF FF FF FF FF    
   5777 00DACA FF FF FF FF FF FF FF FF    
   5777 00DAD2 FF FF FF FF FF FF FF FF    
   5777 00DADA FF FF FF FF FF FF FF FF    
   5777 00DAE2 FF FF FF FF FF FF FF FF    
   5777 00DAEA FF FF FF FF FF FF FF FF    
   5777 00DAF2 FF FF FF FF FF FF FF FF    
   5777 00DAFA FF FF FF FF FF FF FF FF    
   5777 00DB02 FF FF FF FF FF FF FF FF    
   5777 00DB0A FF FF FF FF FF FF FF FF    
   5777 00DB12 FF FF FF FF FF FF FF FF    
   5777 00DB1A FF FF FF FF FF FF FF FF    
   5777 00DB22 FF FF FF FF FF FF FF FF    
   5777 00DB2A FF FF FF FF FF FF FF FF    
   5777 00DB32 FF FF FF FF FF FF FF FF    
   5777 00DB3A FF FF FF FF FF FF FF FF    
   5777 00DB42 FF FF FF FF FF FF FF FF    
   5777 00DB4A FF FF FF FF FF FF FF FF    
   5777 00DB52 FF FF FF FF FF FF FF FF    
   5777 00DB5A FF FF FF FF FF FF FF FF    
   5777 00DB62 FF FF FF FF FF FF FF FF    
   5777 00DB6A FF FF FF FF FF FF FF FF    
   5777 00DB72 FF FF FF FF FF FF FF FF    
   5777 00DB7A FF FF FF FF FF FF FF FF    
   5777 00DB82 FF FF FF FF FF FF FF FF    
   5777 00DB8A FF FF FF FF FF FF FF FF    
   5777 00DB92 FF FF FF FF FF FF FF FF    
   5777 00DB9A FF FF FF FF FF FF FF FF    
   5777 00DBA2 FF FF FF FF FF FF FF FF    
   5777 00DBAA FF FF FF FF FF FF FF FF    
   5777 00DBB2 FF FF FF FF FF FF FF FF    
   5777 00DBBA FF FF FF FF FF FF FF FF    
   5777 00DBC2 FF FF FF FF FF FF FF FF    
   5777 00DBCA FF FF FF FF FF FF FF FF    
   5777 00DBD2 FF FF FF FF FF FF FF FF    
   5777 00DBDA FF FF FF FF FF FF FF FF    
   5777 00DBE2 FF FF FF FF FF FF FF FF    
   5777 00DBEA FF FF FF FF FF FF FF FF    
   5777 00DBF2 FF FF FF FF FF FF FF FF    
   5777 00DBFA FF FF FF FF FF FF FF FF    
   5777 00DC02 FF FF FF FF FF FF FF FF    
   5777 00DC0A FF FF FF FF FF FF FF FF    
   5777 00DC12 FF FF FF FF FF FF FF FF    
   5777 00DC1A FF FF FF FF FF FF FF FF    
   5777 00DC22 FF FF FF FF FF FF FF FF    
   5777 00DC2A FF FF FF FF FF FF FF FF    
   5777 00DC32 FF FF FF FF FF FF FF FF    
   5777 00DC3A FF FF FF FF FF FF FF FF    
   5777 00DC42 FF FF FF FF FF FF FF FF    
   5777 00DC4A FF FF FF FF FF FF FF FF    
   5777 00DC52 FF FF FF FF FF FF FF FF    
   5777 00DC5A FF FF FF FF FF FF FF FF    
   5777 00DC62 FF FF FF FF FF FF FF FF    
   5777 00DC6A FF FF FF FF FF FF FF FF    
   5777 00DC72 FF FF FF FF FF FF FF FF    
   5777 00DC7A FF FF FF FF FF FF FF FF    
   5777 00DC82 FF FF FF FF FF FF FF FF    
   5777 00DC8A FF FF FF FF FF FF FF FF    
   5777 00DC92 FF FF FF FF FF FF FF FF    
   5777 00DC9A FF FF FF FF FF FF FF FF    
   5777 00DCA2 FF FF FF FF FF FF FF FF    
   5777 00DCAA FF FF FF FF FF FF FF FF    
   5777 00DCB2 FF FF FF FF FF FF FF FF    
   5777 00DCBA FF FF FF FF FF FF FF FF    
   5777 00DCC2 FF FF FF FF FF FF FF FF    
   5777 00DCCA FF FF FF FF FF FF FF FF    
   5777 00DCD2 FF FF FF FF FF FF FF FF    
   5777 00DCDA FF FF FF FF FF FF FF FF    
   5777 00DCE2 FF FF FF FF FF FF FF FF    
   5777 00DCEA FF FF FF FF FF FF FF FF    
   5777 00DCF2 FF FF FF FF FF FF FF FF    
   5777 00DCFA FF FF FF FF FF FF FF FF    
   5777 00DD02 FF FF FF FF FF FF FF FF    
   5777 00DD0A FF FF FF FF FF FF FF FF    
   5777 00DD12 FF FF FF FF FF FF FF FF    
   5777 00DD1A FF FF FF FF FF FF FF FF    
   5777 00DD22 FF FF FF FF FF FF FF FF    
   5777 00DD2A FF FF FF FF FF FF FF FF    
   5777 00DD32 FF FF FF FF FF FF FF FF    
   5777 00DD3A FF FF FF FF FF FF FF FF    
   5777 00DD42 FF FF FF FF FF FF FF FF    
   5777 00DD4A FF FF FF FF FF FF FF FF    
   5777 00DD52 FF FF FF FF FF FF FF FF    
   5777 00DD5A FF FF FF FF FF FF FF FF    
   5777 00DD62 FF FF FF FF FF FF FF FF    
   5777 00DD6A FF FF FF FF FF FF FF FF    
   5777 00DD72 FF FF FF FF FF FF FF FF    
   5777 00DD7A FF FF FF FF FF FF FF FF    
   5777 00DD82 FF FF FF FF FF FF FF FF    
   5777 00DD8A FF FF FF FF FF FF FF FF    
   5777 00DD92 FF FF FF FF FF FF FF FF    
   5777 00DD9A FF FF FF FF FF FF FF FF    
   5777 00DDA2 FF FF FF FF FF FF FF FF    
   5777 00DDAA FF FF FF FF FF FF FF FF    
   5777 00DDB2 FF FF FF FF FF FF FF FF    
   5777 00DDBA FF FF FF FF FF FF FF FF    
   5777 00DDC2 FF FF FF FF FF FF FF FF    
   5777 00DDCA FF FF FF FF FF FF FF FF    
   5777 00DDD2 FF FF FF FF FF FF FF FF    
   5777 00DDDA FF FF FF FF FF FF FF FF    
   5777 00DDE2 FF FF FF FF FF FF FF FF    
   5777 00DDEA FF FF FF FF FF FF FF FF    
   5777 00DDF2 FF FF FF FF FF FF FF FF    
   5777 00DDFA FF FF FF FF FF FF FF FF    
   5777 00DE02 FF FF FF FF FF FF FF FF    
   5777 00DE0A FF FF FF FF FF FF FF FF    
   5777 00DE12 FF FF FF FF FF FF FF FF    
   5777 00DE1A FF FF FF FF FF FF FF FF    
   5777 00DE22 FF FF FF FF FF FF FF FF    
   5777 00DE2A FF FF FF FF FF FF FF FF    
   5777 00DE32 FF FF FF FF FF FF FF FF    
   5777 00DE3A FF FF FF FF FF FF FF FF    
   5777 00DE42 FF FF FF FF FF FF FF FF    
   5777 00DE4A FF FF FF FF FF FF FF FF    
   5777 00DE52 FF FF FF FF FF FF FF FF    
   5777 00DE5A FF FF FF FF FF FF FF FF    
   5777 00DE62 FF FF FF FF FF FF FF FF    
   5777 00DE6A FF FF FF FF FF FF FF FF    
   5777 00DE72 FF FF FF FF FF FF FF FF    
   5777 00DE7A FF FF FF FF FF FF FF FF    
   5777 00DE82 FF FF FF FF FF FF FF FF    
   5777 00DE8A FF FF FF FF FF FF FF FF    
   5777 00DE92 FF FF FF FF FF FF FF FF    
   5777 00DE9A FF FF FF FF FF FF FF FF    
   5777 00DEA2 FF FF FF FF FF FF FF FF    
   5777 00DEAA FF FF FF FF FF FF FF FF    
   5777 00DEB2 FF FF FF FF FF FF FF FF    
   5777 00DEBA FF FF FF FF FF FF FF FF    
   5777 00DEC2 FF FF FF FF FF FF FF FF    
   5777 00DECA FF FF FF FF FF FF FF FF    
   5777 00DED2 FF FF FF FF FF FF FF FF    
   5777 00DEDA FF FF FF FF FF FF FF FF    
   5777 00DEE2 FF FF FF FF FF FF FF FF    
   5777 00DEEA FF FF FF FF FF FF FF FF    
   5777 00DEF2 FF FF FF FF FF FF FF FF    
   5777 00DEFA FF FF FF FF FF FF FF FF    
   5777 00DF02 FF FF FF FF FF FF FF FF    
   5777 00DF0A FF FF FF FF FF FF FF FF    
   5777 00DF12 FF FF FF FF FF FF FF FF    
   5777 00DF1A FF FF FF FF FF FF FF FF    
   5777 00DF22 FF FF FF FF FF FF FF FF    
   5777 00DF2A FF FF FF FF FF FF FF FF    
   5777 00DF32 FF FF FF FF FF FF FF FF    
   5777 00DF3A FF FF FF FF FF FF FF FF    
   5777 00DF42 FF FF FF FF FF FF FF FF    
   5777 00DF4A FF FF FF FF FF FF FF FF    
   5777 00DF52 FF FF FF FF FF FF FF FF    
   5777 00DF5A FF FF FF FF FF FF FF FF    
   5777 00DF62 FF FF FF FF FF FF FF FF    
   5777 00DF6A FF FF FF FF FF FF FF FF    
   5777 00DF72 FF FF FF FF FF FF FF FF    
   5777 00DF7A FF FF FF FF FF FF FF FF    
   5777 00DF82 FF FF FF FF FF FF FF FF    
   5777 00DF8A FF FF FF FF FF FF FF FF    
   5777 00DF92 FF FF FF FF FF FF FF FF    
   5777 00DF9A FF FF FF FF FF FF FF FF    
   5777 00DFA2 FF FF FF FF FF FF FF FF    
   5777 00DFAA FF FF FF FF FF FF FF FF    
   5777 00DFB2 FF FF FF FF FF FF FF FF    
   5777 00DFBA FF FF FF FF FF FF FF FF    
   5777 00DFC2 FF FF FF FF FF FF FF FF    
   5777 00DFCA FF FF FF FF FF FF FF FF    
   5777 00DFD2 FF FF FF FF FF FF FF FF    
   5777 00DFDA FF FF FF FF FF FF FF FF    
   5777 00DFE2 FF FF FF FF FF FF FF FF    
   5777 00DFEA FF FF FF FF FF FF FF FF    
   5777 00DFF2 FF FF FF FF FF FF FF FF    
   5777 00DFFA FF FF FF FF FF FF          
                                           
   5779 00E000                             start:
   5780 00E000 78                           	SEI
   5781 00E001 D8                           	CLD
   5782 00E002 18                           	CLC					; switch to '816 mode
   5783 00E003 FB                           	XCE
   5784 00E004 C2 30                        	REP		#$30		; set 16 bit regs & mem
                                           	NDX 	16
                                           	MEM		16
   5787 00E006 A9 FF 3F                     	LDA		#$3FFF		; set top of stack
   5788 00E009 1B                           	TAS
   5789 00E00A A9 70 00                     	LDA		#$0070		; program chip selects for I/O
   5790 00E00D 8D 00 F0                     	STA		$F000		; at $007000
   5791 00E010 A9 71 00                     	LDA		#$0071
   5792 00E013 8D 02 F0                     	STA		$F002
                                           ;	LDA		#$FEA1		; select $FEA1xx I/O
                                           ;	STA		$F006
   5795 00E016 A9 00 00                     	LDA		#$0000		; select zero page ram
   5796 00E019 8D 0A F0                     	STA		$F00A
                                           
                                           	; Setup the counters
   5799 00E01C E2 30                        	SEP		#$30		; set 8 bit regs
                                           	NDX		8			; tell the assembler
                                           	MEM		8
                                           	; Counter #0 is setup as a free running tick count
   5803 00E01E A9 FF                        	LDA		#$FF		; set limit to $FFFFFF
   5804 00E020 8D 10 F0                     	STA		$F010
   5805 00E023 8D 11 F0                     	STA		$F011
   5806 00E026 8D 12 F0                     	STA		$F012
   5807 00E029 A9 14                        	LDA		#$14		; count up, on mpu clock
   5808 00E02B 8D 13 F0                     	STA		$F013
                                           	; Counter #1 is set to interrupt at a 100Hz rate
   5810 00E02E A9 94                        	LDA		#$94		; divide by 95794 (for 100Hz)
   5811 00E030 8D 14 F0                     	STA		$F014
   5812 00E033 A9 57                        	LDA		#$57
   5813 00E035 8D 15 F0                     	STA		$F015
   5814 00E038 A9 09                        	LDA		#$09
   5815 00E03A 8D 16 F0                     	STA		$F016
   5816 00E03D A9 05                        	LDA		#$05		; count down, on mpu clock, irq disenabled
   5817 00E03F 8D 17 F0                     	STA		$F017
                                           	; Counter #2 isn't setup
                                           
   5820 00E042 C2 30                        	REP		#$30		; set 16 bit regs & mem
                                           	NDX 	16
                                           	MEM		16
                                           	
                                           
   5825 00E044 64 04                        	stz		TickCount
   5826 00E046                             .0001:
   5827 00E046 A9 9E E1                     	LDA		#DisplayChar
   5828 00E049 8D F0 03                     	STA		OutputVec
   5829 00E04C AD F0 03                     	LDA		OutputVec
   5830 00E04F C9 9E E1                     	CMP		#DisplayChar
   5831 00E052 D0 F2                        	BNE		.0001
   5832 00E054 A9 01 00                     	LDA		#$01
   5833 00E057 8D 00 70                     	STA		$7000
   5834 00E05A A9 00 BF                     	LDA		#$BF00
   5835 00E05D 85 36                        	STA		NormAttr
   5836 00E05F 20 CD E3                     	JSR		ClearScreen
   5837 00E062 20 59 E3                     	JSR		HomeCursor
   5838 00E065 A9 02 00                     	LDA		#$02
   5839 00E068 8D 00 70                     	STA		$7000
   5840 00E06B F4 5D E1                     	PEA		msgStarting
   5841 00E06E 20 85 E3                     	JSR		DisplayString
   5842 00E071 A9 00 00                     	LDA		#0
   5843 00E074 8F 00 A2 FE                  	STA		FAC1
   5844 00E078 8F 02 A2 FE                  	STA		FAC1+2
   5845 00E07C 8F 04 A2 FE                  	STA		FAC1+4
   5846 00E080 8F 06 A2 FE                  	STA		FAC1+6
   5847 00E084 8F 08 A2 FE                  	STA		FAC1+8
   5848 00E088 8F 0A A2 FE                  	STA		FAC1+10
   5849 00E08C A9 D2 04                     	LDA		#1234
   5850 00E08F 8F 00 A2 FE                  	STA		FAC1
   5851 00E093 A9 05 00                     	LDA		#5			; FIX2FLT
   5852 00E096 20 69 D2                     	JSR 	FPCommandWait
   5853 00E099 20 56 D2                     	JSR		DivideByTen
   5854 00E09C 20 30 D0                     	JSR		FAC1ToString
   5855 00E09F F4 A0 03                     	PEA		$3A0
   5856 00E0A2 20 85 E3                     	JSR		DisplayString
   5857 00E0A5 A9 20 00                     	LDA		#' '
   5858 00E0A8 20 7A E3                     	JSR		OutChar
   5859 00E0AB 20 79 D2                     	JSR		DispFAC1
   5860 00E0AE 20 3A E4                     	JSR		KeybdInit
   5861 00E0B1                             .mon1:
   5862 00E0B1 20 71 E3                     	JSR		OutCRLF
   5863 00E0B4 A9 24 00                     	LDA		#'$'
   5864 00E0B7                             .mon3:
   5865 00E0B7 20 7A E3                     	JSR		OutChar
   5866 00E0BA 20 20 E5                     	JSR		KeybdGetCharWait
   5867 00E0BD 29 FF 00                     	AND		#$FF
                                           ;	CMP		#'.'
                                           ;	BEQ		.mon3
   5870 00E0C0 C9 0D 00                     	CMP		#CR
   5871 00E0C3 D0 F2                        	BNE		.mon3
   5872 00E0C5 A5 32                        	LDA		CursorY
   5873 00E0C7 0A                           	ASL
   5874 00E0C8 AA                           	TAX
   5875 00E0C9 BD A2 E9                     	LDA		LineTbl,X
   5876 00E0CC AA                           	TAX
   5877 00E0CD                             .mon4:
   5878 00E0CD 20 FF E0                     	JSR		MonGetch
   5879 00E0D0 C9 24 00                     	CMP		#'$'
   5880 00E0D3 F0 F8                        	BEQ		.mon4
   5881 00E0D5 C9 20 00                     	CMP		#' '
   5882 00E0D8 F0 F3                        	BEQ		.mon4
   5883 00E0DA C9 09 00                     	CMP		#'\t'
   5884 00E0DD F0 EE                        	BEQ		.mon4
   5885 00E0DF C9 53 00                     	CMP		#'S'
   5886 00E0E2 D0 03                        	BNE		.mon2
   5887 00E0E4 4C 00 C0                     	JMP		$C000		; invoke Supermon816
   5888 00E0E7                             .mon2:
   5889 00E0E7 C9 43 00                     	CMP		#'C'
   5890 00E0EA D0 C5                        	BNE		.mon1
   5891 00E0EC 20 CD E3                     	JSR		ClearScreen
   5892 00E0EF 80 C0                        	BRA		.mon1
                                           
                                           ; Get a character from the screen, skipping over spaces and tabs
                                           ;
   5896 00E0F1                             MonGetNonSpace:
   5897 00E0F1                             .0001:
   5898 00E0F1 20 FF E0                     	JSR		MonGetch
   5899 00E0F4 C9 20 00                     	CMP		#' '
   5900 00E0F7 F0 F8                        	BEQ		.0001
   5901 00E0F9 C9 09 00                     	CMP		#'\t'
   5902 00E0FC F0 F3                        	BEQ		.0001
   5903 00E0FE 60                           	RTS
                                           
                                           ; Get a character from the screen.
                                           ;
   5907 00E0FF                             MonGetch:
   5908 00E0FF BF 00 00 FD                  	LDA		VIDBUF,X
   5909 00E103 E8                           	INX
   5910 00E104 E8                           	INX
   5911 00E105 29 FF 00                     	AND		#$FF
   5912 00E108 20 92 E1                     	JSR		ScreenToAscii
   5913 00E10B 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ; BIOSInput allows full screen editing of text until a carriage return is keyed
                                           ; at which point the line the cursor is on is copied to a buffer. The buffer
                                           ; must be at least TEXTCOLS characters in size.
                                           ;------------------------------------------------------------------------------
                                           ;
   5921 00E10C                             BIOSInput:
   5922 00E10C                             .bin1:
   5923 00E10C 20 20 E5                     	JSR		KeybdGetCharWait
   5924 00E10F 29 FF 00                     	AND		#$FF
   5925 00E112 C9 0D 00                     	CMP		#CR
   5926 00E115 F0 05                        	BEQ		.bin2
   5927 00E117 20 7A E3                     	JSR		OutChar
   5928 00E11A 80 F0                        	BRA		.bin1
   5929 00E11C                             .bin2:
   5930 00E11C A5 30                        	LDA		CursorX
   5931 00E11E F0 1A                        	BEQ		.bin4
   5932 00E120 A5 34                        	LDA		VideoPos	; get current video position
   5933 00E122 38                           	SEC
   5934 00E123 E5 30                        	SBC		CursorX		; go back to the start of the line
   5935 00E125 0A                           	ASL
   5936 00E126 AA                           	TAX
   5937 00E127                             .bin3:
   5938 00E127 BF 00 00 FD                  	LDA		VIDBUF,X
   5939 00E12B 29 FF 00                     	AND		#$FF
   5940 00E12E 93 03                        	STA		(3,s),Y
   5941 00E130 E8                           	INX
   5942 00E131 E8                           	INX
   5943 00E132 C8                           	INY
   5944 00E133 C6 30                        	DEC		CursorX
   5945 00E135 D0 F0                        	BNE		.bin3
   5946 00E137 A9 00 00                     	LDA		#0
   5947 00E13A                             .bin4:
   5948 00E13A 93 03                        	STA		(3,s),Y	; NULL terminate buffer
   5949 00E13C 60                           	RTS
                                           
   5951 00E13D                             .st0003:
   5952 00E13D AF 10 A1 FE                  	LDA		KEYBD
   5953 00E141 10 FA                        	BPL		.st0003
   5954 00E143 48                           	PHA					; save off the char (we need to trash acc)
   5955 00E144 AF 14 A1 FE                  	LDA		KEYBD+4		; clear keyboard strobe (must be a read operation)
   5956 00E148 68                           	PLA					; restore char
   5957 00E149 20 9E E1                     	JSR		DisplayChar
   5958 00E14C 80 EF                        	BRA		.st0003
   5959 00E14E A0 00 00                     	ldy		#$0000
   5960 00E151                             .st0001:
   5961 00E151 A2 00 00                     	ldx		#$0000
   5962 00E154                             .st0002:
   5963 00E154 E8                           	inx
   5964 00E155 D0 FD                        	bne		.st0002
   5965 00E157 20 7A E1                     	jsr		echo_switch
   5966 00E15A C8                           	iny
   5967 00E15B 80 F4                        	bra		.st0001
                                           
   5969 00E15D                             msgStarting:
   5970 00E15D 46 54 38 31 36 20 54 65      	.byte	"FT816 Test System Starting",CR,LF,0
   5970 00E165 73 74 20 53 79 73 74 65    
   5970 00E16D 6D 20 53 74 61 72 74 69    
   5970 00E175 6E 67 0D 0A 00             
                                           
   5972 00E17A                             echo_switch:
   5973 00E17A AD 00 71                     	lda		$7100
   5974 00E17D 8D 00 70                     	sta		$7000
   5975 00E180 60                           	rts
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Convert Ascii character to screen character.
                                           ;------------------------------------------------------------------------------
                                           
   5981 00E181                             AsciiToScreen:
   5982 00E181 29 FF 00                     	AND		#$FF
   5983 00E184 89 20 00                     	BIT		#%00100000	; if bit 5 isn't set
   5984 00E187 F0 08                        	BEQ		.00001
   5985 00E189 89 40 00                     	BIT		#%01000000	; or bit 6 isn't set
   5986 00E18C F0 03                        	BEQ		.00001
   5987 00E18E 29 9F 00                     	AND		#%10011111
   5988 00E191                             .00001:
   5989 00E191 60                           	rts
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Convert screen character to ascii character
                                           ;------------------------------------------------------------------------------
                                           ;
   5995 00E192                             ScreenToAscii:
   5996 00E192 29 FF 00                     	AND		#$FF
   5997 00E195 C9 1B 00                     	CMP		#26+1
   5998 00E198 B0 03                        	BCS		.0001
   5999 00E19A 69 60 00                     	ADC		#$60
   6000 00E19D                             .0001:
   6001 00E19D 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ; Display a character on the screen device
                                           ;------------------------------------------------------------------------------
                                           ;
   6007 00E19E                             DisplayChar:
   6008 00E19E 29 FF 00                     	AND		#$0FF
   6009 00E1A1 24 3C                        	BIT		EscState
   6010 00E1A3 30 FF 8A 00                  	LBMI	processEsc
   6011 00E1A7 C9 08 00                     	CMP		#BS
   6012 00E1AA F0 FF 33 01                  	LBEQ	doBackSpace
   6013 00E1AE C9 91 00                     	CMP		#$91			; cursor right
   6014 00E1B1 F0 FF 7D 01                  	LBEQ	doCursorRight
   6015 00E1B5 C9 93 00                     	CMP		#$93			; cursor left
   6016 00E1B8 F0 FF 82 01                  	LBEQ	doCursorLeft
   6017 00E1BC C9 90 00                     	CMP		#$90			; cursor up
   6018 00E1BF F0 FF 82 01                  	LBEQ	doCursorUp
   6019 00E1C3 C9 92 00                     	CMP		#$92			; cursor down
   6020 00E1C6 F0 FF 82 01                  	LBEQ	doCursorDown
   6021 00E1CA C9 99 00                     	CMP		#$99			; delete
   6022 00E1CD F0 FF 37 01                  	LBEQ	doDelete
   6023 00E1D1 C9 0D 00                     	CMP		#CR
   6024 00E1D4 F0 47                        	BEQ		doCR
   6025 00E1D6 C9 0A 00                     	CMP		#LF
   6026 00E1D9 F0 47                        	BEQ		doLF
   6027 00E1DB C9 94 00                     	CMP		#$94
   6028 00E1DE F0 FF 48 01                  	LBEQ	doCursorHome	; cursor home
   6029 00E1E2 C9 1B 00                     	CMP		#ESC
   6030 00E1E5 D0 05                        	BNE		.0003
   6031 00E1E7 64 3C                        	STZ		EscState		; put a -1 in the escape state
   6032 00E1E9 C6 3C                        	DEC		EscState
   6033 00E1EB 60                           	RTS
   6034 00E1EC                             .0003:
   6035 00E1EC 20 81 E1                     	JSR		AsciiToScreen
   6036 00E1EF 05 36                        	ORA		NormAttr
   6037 00E1F1 48                           	PHA
   6038 00E1F2 A5 34                        	LDA		VideoPos
   6039 00E1F4 0A                           	ASL
   6040 00E1F5 AA                           	TAX
   6041 00E1F6 68                           	PLA
   6042 00E1F7 9F 00 00 FD                  	STA		VIDBUF,X
   6043 00E1FB A5 30                        	LDA		CursorX
   6044 00E1FD 1A                           	INA
   6045 00E1FE C9 54 00                     	CMP		#TEXTCOLS
   6046 00E201 D0 15                        	BNE		.0001
   6047 00E203 64 30                        	STZ		CursorX
   6048 00E205 A5 32                        	LDA		CursorY
   6049 00E207 C9 1E 00                     	CMP		#TEXTROWS-1
   6050 00E20A F0 06                        	BEQ		.0002
   6051 00E20C 1A                           	INA
   6052 00E20D 85 32                        	STA		CursorY
   6053 00E20F 82 4E 01                     	BRL		SyncVideoPos
   6054 00E212                             .0002:
   6055 00E212 20 60 E3                     	JSR		SyncVideoPos
   6056 00E215 82 CD 01                     	BRL		ScrollUp
   6057 00E218                             .0001:
   6058 00E218 85 30                        	STA		CursorX
   6059 00E21A 82 43 01                     	BRL		SyncVideoPos
   6060 00E21D                             doCR:
   6061 00E21D 64 30                        	STZ		CursorX
   6062 00E21F 82 3E 01                     	BRL		SyncVideoPos
   6063 00E222                             doLF:
   6064 00E222 A5 32                        	LDA		CursorY
   6065 00E224 C9 1E 00                     	CMP		#TEXTROWS-1
   6066 00E227 F0 FF BA 01                  	LBEQ	ScrollUp
   6067 00E22B 1A                           	INA
   6068 00E22C 85 32                        	STA		CursorY
   6069 00E22E 82 2F 01                     	BRL		SyncVideoPos
                                           
   6071 00E231                             processEsc:
   6072 00E231 A6 3C                        	LDX		EscState
   6073 00E233 E0 FF FF                     	CPX		#-1
   6074 00E236 D0 44                        	BNE		.0006
   6075 00E238 C9 54 00                     	CMP		#'T'	; clear to EOL
   6076 00E23B D0 1C                        	BNE		.0003
   6077 00E23D A5 34                        	LDA		VideoPos
   6078 00E23F 0A                           	ASL
   6079 00E240 AA                           	TAX
   6080 00E241 A4 30                        	LDY		CursorX
   6081 00E243                             .0001:
   6082 00E243 C0 53 00                     	CPY		#TEXTCOLS-1
   6083 00E246 F0 0E                        	BEQ		.0002
   6084 00E248 A9 20 00                     	LDA		#' '
   6085 00E24B 05 36                        	ORA		NormAttr
   6086 00E24D 9F 00 00 FD                  	STA		VIDBUF,X
   6087 00E251 E8                           	INX
   6088 00E252 E8                           	INX
   6089 00E253 C8                           	INY
   6090 00E254 D0 ED                        	BNE		.0001
   6091 00E256                             .0002:
   6092 00E256 64 3C                        	STZ		EscState
   6093 00E258 60                           	RTS
   6094 00E259                             .0003:
   6095 00E259 C9 57 00                     	CMP		#'W'
   6096 00E25C D0 05                        	BNE		.0004
   6097 00E25E 64 3C                        	STZ		EscState
   6098 00E260 82 A5 00                     	BRL		doDelete
   6099 00E263                             .0004:
   6100 00E263 C9 60 00                     	CMP		#'`'
   6101 00E266 D0 06                        	BNE		.0005
   6102 00E268 A9 FE FF                     	LDA		#-2
   6103 00E26B 85 3C                        	STA		EscState
   6104 00E26D 60                           	RTS
   6105 00E26E                             .0005:
   6106 00E26E C9 28 00                     	CMP		#'('
   6107 00E271 D0 06                        	BNE		.0008
   6108 00E273 A9 FD FF                     	LDA		#-3
   6109 00E276 85 3C                        	STA		EscState
   6110 00E278 60                           	RTS
   6111 00E279                             .0008:
   6112 00E279 64 3C                        	STZ		EscState
   6113 00E27B 60                           	RTS
   6114 00E27C                             .0006:
   6115 00E27C E0 FE FF                     	CPX		#-2
   6116 00E27F D0 11                        	BNE		.0007
   6117 00E281 64 3C                        	STZ		EscState
   6118 00E283 C9 31 00                     	CMP		#'1'
   6119 00E286 F0 FF 30 01                  	LBEQ	CursorOn
   6120 00E28A C9 30 00                     	CMP		#'0'
   6121 00E28D F0 FF 32 01                  	LBEQ	CursorOff
   6122 00E291 60                           	RTS
   6123 00E292                             .0007:
   6124 00E292 E0 FD FF                     	CPX		#-3
   6125 00E295 D0 0B                        	BNE		.0009
   6126 00E297 C9 1B 00                     	CMP		#ESC
   6127 00E29A D0 DD                        	BNE		.0008
   6128 00E29C A9 FC FF                     	LDA		#-4
   6129 00E29F 85 3C                        	STA		EscState
   6130 00E2A1 60                           	RTS
   6131 00E2A2                             .0009:
   6132 00E2A2 E0 FC FF                     	CPX		#-4
   6133 00E2A5 D0 0B                        	BNE		.0010
   6134 00E2A7 C9 47 00                     	CMP		#'G'
   6135 00E2AA D0 CD                        	BNE		.0008
   6136 00E2AC A9 FB FF                     	LDA		#-5
   6137 00E2AF 85 3C                        	STA		EscState
   6138 00E2B1 60                           	RTS
   6139 00E2B2                             .0010:
   6140 00E2B2 E0 FB FF                     	CPX		#-5
   6141 00E2B5 D0 C2                        	BNE		.0008
   6142 00E2B7 64 3C                        	STZ		EscState
   6143 00E2B9 C9 34 00                     	CMP		#'4'
   6144 00E2BC D0 12                        	BNE		.0011
   6145 00E2BE A5 36                        	LDA		NormAttr
                                           	; Swap the high nybbles of the attribute
   6147 00E2C0 EB                           	XBA				
   6148 00E2C1 E2 30                        	SEP		#$30		; set 8 bit regs
                                           	NDX		8			; tell the assembler
                                           	MEM		8
   6151 00E2C3 2A                           	ROL
   6152 00E2C4 2A                           	ROL
   6153 00E2C5 2A                           	ROL
   6154 00E2C6 2A                           	ROL
   6155 00E2C7 C2 30                        	REP		#$30		; set 16 bit regs
                                           	NDX		16			; tell the assembler
                                           	MEM		16
   6158 00E2C9 EB                           	XBA
   6159 00E2CA 29 00 FF                     	AND		#$FF00
   6160 00E2CD 85 36                        	STA		NormAttr
   6161 00E2CF 60                           	RTS
   6162 00E2D0                             .0011:
   6163 00E2D0 C9 30 00                     	CMP		#'0'
   6164 00E2D3 D0 06                        	BNE		.0012
   6165 00E2D5 A9 00 BF                     	LDA		#$BF00		; Light Grey on Dark Grey
   6166 00E2D8 85 36                        	STA		NormAttr
   6167 00E2DA 60                           	RTS
   6168 00E2DB                             .0012:
   6169 00E2DB A9 00 BF                     	LDA		#$BF00		; Light Grey on Dark Grey
   6170 00E2DE 85 36                        	STA		NormAttr
   6171 00E2E0 60                           	RTS
                                           
   6173 00E2E1                             doBackSpace:
   6174 00E2E1 A4 30                        	LDY		CursorX
   6175 00E2E3 F0 22                        	BEQ		.0001		; Can't backspace anymore
   6176 00E2E5 A5 34                        	LDA		VideoPos
   6177 00E2E7 0A                           	ASL
   6178 00E2E8 AA                           	TAX
   6179 00E2E9                             .0002:
   6180 00E2E9 BF 00 00 FD                  	LDA		VIDBUF,X
   6181 00E2ED 9F FE FF FC                  	STA		VIDBUF-2,X
   6182 00E2F1 E8                           	INX
   6183 00E2F2 E8                           	INX
   6184 00E2F3 C8                           	INY
   6185 00E2F4 C0 54 00                     	CPY		#TEXTCOLS
   6186 00E2F7 D0 F0                        	BNE		.0002
   6187 00E2F9                             .0003:
   6188 00E2F9 A9 20 00                     	LDA		#' '
   6189 00E2FC 05 36                        	ORA		NormAttr
   6190 00E2FE 9F 00 00 FD                  	STA		VIDBUF,X
   6191 00E302 C6 30                        	DEC		CursorX
   6192 00E304 82 59 00                     	BRL		SyncVideoPos
   6193 00E307                             .0001:
   6194 00E307 60                           	RTS
                                           
                                           ; Deleting a character does not change the video position so there's no need
                                           ; to resynchronize it.
                                           
   6199 00E308                             doDelete:
   6200 00E308 A4 30                        	LDY		CursorX
   6201 00E30A A5 34                        	LDA		VideoPos
   6202 00E30C 0A                           	ASL
   6203 00E30D AA                           	TAX
   6204 00E30E                             .0002:
   6205 00E30E C0 53 00                     	CPY		#TEXTCOLS-1
   6206 00E311 F0 0D                        	BEQ		.0001
   6207 00E313 BF 02 00 FD                  	LDA		VIDBUF+2,X
   6208 00E317 9F 00 00 FD                  	STA		VIDBUF,X
   6209 00E31B E8                           	INX
   6210 00E31C E8                           	INX
   6211 00E31D C8                           	INY
   6212 00E31E 80 EE                        	BRA		.0002
   6213 00E320                             .0001:
   6214 00E320 A9 20 00                     	LDA		#' '
   6215 00E323 05 36                        	ORA		NormAttr
   6216 00E325 9F 00 00 FD                  	STA		VIDBUF,X
   6217 00E329 60                           	RTS
                                           
   6219 00E32A                             doCursorHome:
   6220 00E32A A5 30                        	LDA		CursorX
   6221 00E32C F0 26                        	BEQ		doCursor1
   6222 00E32E 64 30                        	STZ		CursorX
   6223 00E330 80 2E                        	BRA		SyncVideoPos
   6224 00E332                             doCursorRight:
   6225 00E332 A5 30                        	LDA		CursorX
   6226 00E334 C9 53 00                     	CMP		#TEXTCOLS-1
   6227 00E337 F0 1F                        	BEQ		doRTS
   6228 00E339 1A                           	INA
   6229 00E33A                             doCursor2:
   6230 00E33A 85 30                        	STA		CursorX
   6231 00E33C 80 22                        	BRA		SyncVideoPos
   6232 00E33E                             doCursorLeft:
   6233 00E33E A5 30                        	LDA		CursorX
   6234 00E340 F0 16                        	BEQ		doRTS
   6235 00E342 3A                           	DEA
   6236 00E343 80 F5                        	BRA		doCursor2
   6237 00E345                             doCursorUp:
   6238 00E345 A5 32                        	LDA		CursorY
   6239 00E347 F0 0F                        	BEQ		doRTS
   6240 00E349 3A                           	DEA
   6241 00E34A 80 08                        	BRA		doCursor1
   6242 00E34C                             doCursorDown:
   6243 00E34C A5 32                        	LDA		CursorY
   6244 00E34E C9 1E 00                     	CMP		#TEXTROWS-1
   6245 00E351 F0 05                        	BEQ		doRTS
   6246 00E353 1A                           	INA
   6247 00E354                             doCursor1:
   6248 00E354 85 32                        	STA		CursorY
   6249 00E356 80 08                        	BRA		SyncVideoPos
   6250 00E358                             doRTS:
   6251 00E358 60                           	RTS
                                           
   6253 00E359                             HomeCursor:
   6254 00E359 A9 00 00                     	LDA		#0
   6255 00E35C 64 30                        	STZ		CursorX
   6256 00E35E 64 32                        	STZ		CursorY
                                           
                                           ; Synchronize the absolute video position with the cursor co-ordinates.
                                           ;
   6260 00E360                             SyncVideoPos:
   6261 00E360 A5 32                        	LDA		CursorY
   6262 00E362 0A                           	ASL
   6263 00E363 AA                           	TAX
   6264 00E364 BD A2 E9                     	LDA		LineTbl,X
   6265 00E367 18                           	CLC
   6266 00E368 65 30                        	ADC		CursorX
   6267 00E36A 85 34                        	STA		VideoPos
   6268 00E36C 8F 0D A0 FE                  	STA		VIDREGS+13		; Update the position in the text controller
   6269 00E370 60                           	RTS
                                           
   6271 00E371                             OutCRLF:
   6272 00E371 A9 0D 00                     	LDA		#CR
   6273 00E374 20 7A E3                     	JSR		OutChar
   6274 00E377 A9 0A 00                     	LDA		#LF
                                           
   6276 00E37A                             OutChar:
   6277 00E37A DA                           	PHX
   6278 00E37B 5A                           	PHY
   6279 00E37C A2 00 00                     	LDX		#0
   6280 00E37F FC F0 03                     	JSR		(OutputVec,x)
   6281 00E382 7A                           	PLY
   6282 00E383 FA                           	PLX
   6283 00E384 60                           	RTS
                                           
   6285 00E385                             DisplayString:
   6286 00E385 68                           	PLA							; pop return address
   6287 00E386 FA                           	PLX							; get string address parameter
   6288 00E387 48                           	PHA							; push return address
   6289 00E388 E2 20                        	SEP		#$20				; ACC = 8 bit
                                           	MEM		8
   6291 00E38A A9 DE                        	LDA		#$DE
   6292 00E38C 8D 00 70                     	STA		$7000
   6293 00E38F 86 38                        	STX		StringPos
   6294 00E391 A0 00 00                     	LDY		#0
   6295 00E394                             .0002:
   6296 00E394 B1 38                        	LDA		(StringPos),Y
   6297 00E396 F0 06                        	BEQ		.0001
   6298 00E398 20 6B E9                     	JSR		SuperPutch
   6299 00E39B C8                           	INY
   6300 00E39C 80 F6                        	BRA		.0002
   6301 00E39E                             .0001:
   6302 00E39E C2 20                        	REP		#$20				; ACC 16 bits
                                           	MEM		16
   6304 00E3A0 60                           	RTS
                                           
   6306 00E3A1                             DisplayString2:
   6307 00E3A1 68                           	PLA							; pop return address
   6308 00E3A2 FA                           	PLX							; get string address parameter
   6309 00E3A3 48                           	PHA							; push return address
   6310 00E3A4 E2 20                        	SEP		#$20				; ACC = 8 bit
   6311 00E3A6 86 38                        	STX		StringPos
   6312 00E3A8 A0 00 00                     	LDY		#0
   6313 00E3AB A2 32 00                     	LDX		#50
   6314 00E3AE                             .0002:
   6315 00E3AE B1 38                        	LDA		(StringPos),Y
   6316 00E3B0 20 6B E9                     	JSR		SuperPutch
   6317 00E3B3 C8                           	INY
   6318 00E3B4 CA                           	DEX
   6319 00E3B5 D0 F7                        	BNE		.0002
   6320 00E3B7                             .0001:
   6321 00E3B7 C2 20                        	REP		#$20				; ACC 16 bits
   6322 00E3B9 60                           	RTS
                                           
   6324 00E3BA                             CursorOn:
   6325 00E3BA 48                           	PHA
   6326 00E3BB A9 60 07                     	LDA		#$0760
   6327 00E3BE 8F 09 A0 FE                  	STA		VIDREGS+9
   6328 00E3C2 60                           	RTS
                                           
   6330 00E3C3                             CursorOff:
   6331 00E3C3 48                           	PHA
   6332 00E3C4 A9 20 00                     	LDA		#$0020
   6333 00E3C7 8F 09 A0 FE                  	STA		VIDREGS+9
   6334 00E3CB 68                           	PLA
   6335 00E3CC 60                           	RTS
                                           
   6337 00E3CD                             ClearScreen:
   6338 00E3CD A0 2C 0A                     	LDY		#TEXTROWS*TEXTCOLS
   6339 00E3D0 A2 00 00                     	LDX		#$00
   6340 00E3D3 A9 20 00                     	LDA		#' '
   6341 00E3D6 20 81 E1                     	JSR		AsciiToScreen
   6342 00E3D9 05 36                        	ORA		NormAttr
   6343 00E3DB                             .0001:
   6344 00E3DB 9F 00 00 FD                  	STA		VIDBUF,X
   6345 00E3DF E8                           	INX
   6346 00E3E0 E8                           	INX
   6347 00E3E1 88                           	DEY
   6348 00E3E2 D0 F7                        	BNE		.0001
   6349 00E3E4 60                           	RTS
                                           
   6351 00E3E5                             ScrollUp:
   6352 00E3E5 A2 00 00                     	LDX		#0
   6353 00E3E8 A0 2C 0A                     	LDY 	#TEXTROWS*TEXTCOLS
   6354 00E3EB                             .0001:
   6355 00E3EB BF 70 00 FD                  	LDA		VIDBUF+112,X
   6356 00E3EF 9F 00 00 FD                  	STA		VIDBUF,X
   6357 00E3F3 E8                           	INX
   6358 00E3F4 E8                           	INX
   6359 00E3F5 88                           	DEY
   6360 00E3F6 D0 F3                        	BNE		.0001
   6361 00E3F8 A9 1E 00                     	LDA		#TEXTROWS-1
                                           
   6363 00E3FB                             BlankLine:
   6364 00E3FB 0A                           	ASL
   6365 00E3FC AA                           	TAX
   6366 00E3FD BD A2 E9                     	LDA		LineTbl,X
   6367 00E400 AA                           	TAX
   6368 00E401 A0 54 00                     	LDY		#TEXTCOLS
   6369 00E404 A5 36                        	LDA		NormAttr
   6370 00E406 09 20 00                     	ORA		#$20
   6371 00E409                             .0001:
   6372 00E409 9F 00 00 FD                  	STA		VIDBUF,X
   6373 00E40D E8                           	INX
   6374 00E40E E8                           	INX
   6375 00E40F 88                           	DEY
   6376 00E410 D0 F7                        	BNE		.0001
   6377 00E412 60                           	RTS
                                           
   6379 00E413                             DispWord:
   6380 00E413 EB                           	XBA
   6381 00E414 20 18 E4                     	JSR		DispByte
   6382 00E417 EB                           	XBA
   6383 00E418                             DispByte:
   6384 00E418 48                           	PHA
   6385 00E419 4A                           	LSR
   6386 00E41A 4A                           	LSR
   6387 00E41B 4A                           	LSR
   6388 00E41C 4A                           	LSR
   6389 00E41D 20 21 E4                     	JSR		DispNybble
   6390 00E420 68                           	PLA
   6391 00E421                             DispNybble:
   6392 00E421 48                           	PHA
   6393 00E422 29 0F 00                     	AND		#$0F
   6394 00E425 C9 0A 00                     	CMP		#10
   6395 00E428 90 08                        	BCC		.0001
   6396 00E42A 69 36 00                     	ADC		#'A'-11			; -11 cause the carry is set
   6397 00E42D 20 7A E3                     	JSR		OutChar
   6398 00E430 68                           	PLA
   6399 00E431 60                           	RTS
   6400 00E432                             .0001:
   6401 00E432 09 30 00                     	ORA		#'0'
   6402 00E435 20 7A E3                     	JSR		OutChar
   6403 00E438 68                           	PLA
   6404 00E439 60                           	RTS
                                           
                                           ;------------------------------------------------------------------------------
                                           ;------------------------------------------------------------------------------
                                           ; Keyboard processing routines follow.
                                           ;------------------------------------------------------------------------------
                                           ;------------------------------------------------------------------------------
                                           
   6412 00E43A                             KeybdInit:
   6413 00E43A E2 30                        	SEP		#$30
                                           	MEM		8
                                           	NDX		8
   6416 00E43C A0 05                        	LDY		#$5
   6417 00E43E                             .0001:
   6418 00E43E 20 9A E4                     	JSR		KeybdRecvByte	; Look for $AA
   6419 00E441 90 04                        	BCC		.0002
   6420 00E443 C9 AA                        	CMP		#$AA			;
   6421 00E445 F0 25                        	BEQ		.config
   6422 00E447                             .0002:
   6423 00E447 20 EB E4                     	JSR		Wait10ms
   6424 00E44A A9 FF                        	LDA		#$FF			; send reset code to keyboard
   6425 00E44C 8F 11 A1 FE                  	STA		KEYBD+1			; write to status reg to clear TX state
   6426 00E450 20 EB E4                     	JSR		Wait10ms
   6427 00E453 A9 FF                        	LDA		#$FF
   6428 00E455 8F 10 A1 FE                  	STA		KEYBD			; now write to transmit register
   6429 00E459 20 D4 E4                     	JSR		KeybdWaitTx		; wait until no longer busy
   6430 00E45C 20 9A E4                     	JSR		KeybdRecvByte	; look for an ACK ($FA)
   6431 00E45F C9 FA                        	CMP		#$FA
   6432 00E461 20 9A E4                     	JSR		KeybdRecvByte
   6433 00E464 C9 FC                        	CMP		#$FC			; reset error ?
   6434 00E466 F0 18                        	BEQ		.tryAgain
   6435 00E468 C9 AA                        	CMP		#$AA			; reset complete okay ?
   6436 00E46A D0 14                        	BNE		.tryAgain
   6437 00E46C                             .config:
   6438 00E46C A9 F0                        	LDA		#$F0			; send scan code select
   6439 00E46E 8F 10 A1 FE                  	STA		KEYBD
   6440 00E472 20 D4 E4                     	JSR		KeybdWaitTx
   6441 00E475 90 09                        	BCC		.tryAgain
   6442 00E477 20 9A E4                     	JSR		KeybdRecvByte	; wait for response from keyboard
   6443 00E47A 90 04                        	BCC		.tryAgain
   6444 00E47C C9 FA                        	CMP		#$FA
   6445 00E47E F0 0C                        	BEQ		.0004
   6446 00E480                             .tryAgain:
   6447 00E480 88                           	DEY
   6448 00E481 D0 BB                        	BNE		.0001
   6449 00E483                             .keybdErr:
   6450 00E483 C2 30                        	REP		#$30
   6451 00E485 F4 FB E4                     	PEA		msgKeybdNR
   6452 00E488 20 85 E3                     	JSR		DisplayString
   6453 00E48B 60                           	RTS
   6454 00E48C                             .0004:
   6455 00E48C A9 02                        	LDA		#2				; select scan code set #2
   6456 00E48E 8F 10 A1 FE                  	STA		KEYBD
   6457 00E492 20 D4 E4                     	JSR		KeybdWaitTx
   6458 00E495 90 E9                        	BCC		.tryAgain
   6459 00E497 C2 30                        	REP		#$30
   6460 00E499 60                           	RTS
                                           
                                           ; Recieve a byte from the keyboard, used after a command is sent to the
                                           ; keyboard in order to wait for a response.
                                           ;
   6465 00E49A                             KeybdRecvByte:
   6466 00E49A 5A                           	PHY
   6467 00E49B A0 64                        	LDY		#100			; wait up to 1s
   6468 00E49D                             .0003:
   6469 00E49D AF 11 A1 FE                  	LDA		KEYBD+1			; wait for response from keyboard
   6470 00E4A1 89 80                        	BIT		#$80			; is input buffer full ?
   6471 00E4A3 D0 09                        	BNE		.0004			; yes, branch
   6472 00E4A5 20 EB E4                     	JSR		Wait10ms		; wait a bit
   6473 00E4A8 88                           	DEY
   6474 00E4A9 D0 F2                        	BNE		.0003			; go back and try again
   6475 00E4AB 7A                           	PLY						; timeout
   6476 00E4AC 18                           	CLC						; carry clear = no code
   6477 00E4AD 60                           	RTS
   6478 00E4AE                             .0004:
   6479 00E4AE AF 10 A1 FE                  	LDA		KEYBD			;
   6480 00E4B2 48                           	PHA
   6481 00E4B3 A9 00                        	LDA		#0				; clear recieve state
   6482 00E4B5 8F 11 A1 FE                  	STA		KEYBD+1
   6483 00E4B9 68                           	PLA
   6484 00E4BA 7A                           	PLY
   6485 00E4BB 38                           	SEC						; carry set = code available
   6486 00E4BC 60                           	RTS
                                           
                                           ; Wait until the keyboard status is non-busy
                                           ; Returns .CF = 1 if successful, .CF=0 timeout
                                           ;
   6491 00E4BD                             KeybdWaitBusy:
   6492 00E4BD 5A                           	PHY
   6493 00E4BE A0 64                        	LDY		#100			; wait a max of 1s
   6494 00E4C0                             .0001:
   6495 00E4C0 AF 11 A1 FE                  	LDA		KEYBD+1
   6496 00E4C4 89 01                        	BIT		#1
   6497 00E4C6 F0 09                        	BEQ		.0002
   6498 00E4C8 20 EB E4                     	JSR		Wait10ms
   6499 00E4CB 88                           	DEY
   6500 00E4CC D0 F2                        	BNE		.0001
   6501 00E4CE 7A                           	PLY
   6502 00E4CF 18                           	CLC
   6503 00E4D0 60                           	RTS
   6504 00E4D1                             .0002:
   6505 00E4D1 7A                           	PLY
   6506 00E4D2 38                           	SEC
   6507 00E4D3 60                           	RTS
                                           
                                           ; Wait until the keyboard transmit is complete
                                           ; Returns .CF = 1 if successful, .CF=0 timeout
                                           ;
   6512 00E4D4                             KeybdWaitTx:
   6513 00E4D4 5A                           	PHY
   6514 00E4D5 A0 64                        	LDY		#100			; wait a max of 1s
   6515 00E4D7                             .0001:
   6516 00E4D7 AF 11 A1 FE                  	LDA		KEYBD+1
   6517 00E4DB 89 40                        	BIT		#$40			; check for transmit complete bit
   6518 00E4DD D0 09                        	BNE		.0002			; branch if bit set
   6519 00E4DF 20 EB E4                     	JSR		Wait10ms		; delay a little bit
   6520 00E4E2 88                           	DEY						; go back and try again
   6521 00E4E3 D0 F2                        	BNE		.0001
   6522 00E4E5 7A                           	PLY						; timed out
   6523 00E4E6 18                           	CLC						; return carry clear
   6524 00E4E7 60                           	RTS
   6525 00E4E8                             .0002:
   6526 00E4E8 7A                           	PLY						; wait complete, return 
   6527 00E4E9 38                           	SEC						; carry set
   6528 00E4EA 60                           	RTS
                                           
                                           ; Wait approximately 10ms. Used by keyboard routines. Makes use of the free
                                           ; running counter #0.
                                           ; .A = trashed (=-5)
                                           ;
   6534 00E4EB                             Wait10ms:
   6535 00E4EB DA                           	PHX				; save .X
   6536 00E4EC A5 12                        	LDA		CNT0H	; get starting count
   6537 00E4EE AA                           	TAX				; save it off in .X
   6538 00E4EF                             .0002:
   6539 00E4EF 38                           	SEC				; compare to current counter value
   6540 00E4F0 E5 12                        	SBC		CNT0H
   6541 00E4F2 10 05                        	BPL		.0001	; teh result should be -ve, unless counter overflowed.
   6542 00E4F4 C9 FB                        	CMP		#-5		; 5 ticks pass ? 
   6543 00E4F6 8A                           	TXA				; prepare for next check, get startcount in .A
   6544 00E4F7 B0 F6                        	BCS		.0002	; go back if less than 5 ticks
   6545 00E4F9                             .0001:
   6546 00E4F9 FA                           	PLX				; restore .X
   6547 00E4FA 60                           	RTS
                                           
                                           	MEM		16
                                           	NDX		16
                                           
   6552 00E4FB                             msgKeybdNR:
   6553 00E4FB 0D 0A 4B 65 79 62 6F 61      	.byte	CR,LF,"Keyboard not responding.",CR,LF,0
   6553 00E503 72 64 20 6E 6F 74 20 72    
   6553 00E50B 65 73 70 6F 6E 64 69 6E    
   6553 00E513 67 2E 0D 0A 00             
                                           
   6555 00E518                             KeybdGetCharNoWait:
   6556 00E518 E2 20                        	SEP		#$20
                                           	MEM		8
   6558 00E51A A9 00                        	LDA		#0
   6559 00E51C 85 0B                        	STA		KeybdWaitFlag
   6560 00E51E 80 06                        	BRA		KeybdGetChar
                                           
   6562 00E520                             KeybdGetCharWait:
   6563 00E520 E2 20                        	SEP		#$20
                                           	MEM		8
   6565 00E522 A9 FF                        	LDA		#$FF
   6566 00E524 85 0B                        	STA		KeybdWaitFlag
                                           
                                           ; Wait for a keyboard character to be available
                                           ; Returns (CF=1) if no key available
                                           ; Return key (CF=0) if key is available
                                           ;
                                           ;
   6573 00E526                             KeybdGetChar:
   6574 00E526 E2 20                        	SEP		#$20		; 8 bit acc
                                           	MEM		8
   6576 00E528 DA                           	PHX
   6577 00E529                             .0002:
   6578 00E529                             .0003:
   6579 00E529 AF 11 A1 FE                  	LDA		KEYBD+1		; check MSB of keyboard status reg.
   6580 00E52D 0A                           	ASL
   6581 00E52E B0 09                        	BCS		.0006		; branch if keystroke ready
   6582 00E530 24 0B                        	BIT		KeybdWaitFlag
   6583 00E532 30 F5                        	BMI		.0003
   6584 00E534 FA                           	PLX
   6585 00E535 38                           	SEC
   6586 00E536 C2 20                        	REP		#$20
   6587 00E538 60                           	RTS
   6588 00E539                             .0006:
   6589 00E539 AF 10 A1 FE                  	LDA		KEYBD		; get scan code value
   6590 00E53D 48                           	PHA
   6591 00E53E A9 00                        	LDA		#0			; write a zero to the status reg
   6592 00E540 8F 11 A1 FE                  	STA		KEYBD+1		; to clear recieve register
   6593 00E544 68                           	PLA
   6594 00E545                             .0001:
   6595 00E545 C9 F0                        	CMP		#SC_KEYUP	; keyup scan code ?
   6596 00E547 F0 FF 68 00                  	LBEQ	.doKeyup	; 
   6597 00E54B C9 E0                        	CMP		#SC_EXTEND	; extended scan code ?
   6598 00E54D F0 FF 69 00                  	LBEQ	.doExtend
   6599 00E551 C9 14                        	CMP		#$14		; control ?
   6600 00E553 F0 FF 6C 00                  	LBEQ	.doCtrl
   6601 00E557 C9 12                        	CMP		#$12		; left shift
   6602 00E559 F0 FF 76 00                  	LBEQ	.doShift
   6603 00E55D C9 59                        	CMP		#$59		; right shift
   6604 00E55F F0 FF 70 00                  	LBEQ	.doShift
   6605 00E563 C9 77                        	CMP		#SC_NUMLOCK
   6606 00E565 F0 FF 7A 00                  	LBEQ	.doNumLock
   6607 00E569 C9 58                        	CMP		#SC_CAPSLOCK
   6608 00E56B F0 FF 80 00                  	LBEQ	.doCapsLock
   6609 00E56F C9 7E                        	CMP		#SC_SCROLLLOCK
   6610 00E571 F0 FF 86 00                  	LBEQ	.doScrollLock
   6611 00E575 46 08                        	LSR		KeyState1
   6612 00E577 B0 B0                        	BCS		.0003
   6613 00E579 AA                           	TAX
   6614 00E57A A9 80                        	LDA		#$80
   6615 00E57C 24 09                        	BIT		KeyState2	; Is extended code ?
   6616 00E57E F0 11                        	BEQ		.0010
   6617 00E580 A9 7F                        	LDA		#$7F
   6618 00E582 25 09                        	AND		KeyState2
   6619 00E584 85 09                        	STA		KeyState2
   6620 00E586 46 08                        	LSR		KeyState1	; clear keyup
   6621 00E588 8A                           	TXA
   6622 00E589 29 7F                        	AND		#$7F
   6623 00E58B AA                           	TAX
   6624 00E58C BD DA E8                     	LDA		keybdExtendedCodes,X
   6625 00E58F 80 1D                        	BRA		.0008
   6626 00E591                             .0010:
   6627 00E591 A9 04                        	LDA		#4
   6628 00E593 24 09                        	BIT		KeyState2	; Is Cntrl down ?
   6629 00E595 F0 09                        	BEQ		.0009
   6630 00E597 8A                           	TXA
   6631 00E598 29 7F                        	AND		#$7F		; table is 128 chars
   6632 00E59A AA                           	TAX
   6633 00E59B BD 5A E8                     	LDA		keybdControlCodes,X
   6634 00E59E 80 0E                        	BRA		.0008
   6635 00E5A0                             .0009:
   6636 00E5A0 A9 01                        	LDA		#$1			; Is shift down ?
   6637 00E5A2 24 09                        	BIT		KeyState2
   6638 00E5A4 F0 05                        	BEQ		.0007
   6639 00E5A6 BD 5A E7                     	LDA		shiftedScanCodes,X
   6640 00E5A9 80 03                        	BRA		.0008
   6641 00E5AB                             .0007:
   6642 00E5AB BD 5A E6                     	LDA		unshiftedScanCodes,X
   6643 00E5AE                             .0008:
   6644 00E5AE C2 20                        	REP		#$20
                                           	MEM		16
   6646 00E5B0 FA                           	PLX
   6647 00E5B1 18                           	CLC
   6648 00E5B2 60                           	RTS
                                           	MEM		8
   6650 00E5B3                             .doKeyup:
   6651 00E5B3 A9 01                        	LDA		#1
   6652 00E5B5 04 08                        	TSB		KeyState1
   6653 00E5B7 82 6F FF                     	BRL		.0003
   6654 00E5BA                             .doExtend:				; set extended key flag
   6655 00E5BA A5 09                        	LDA		KeyState2
   6656 00E5BC 09 80                        	ORA		#$80
   6657 00E5BE 85 09                        	STA		KeyState2
   6658 00E5C0 82 66 FF                     	BRL		.0003
   6659 00E5C3                             .doCtrl:
   6660 00E5C3 A9 04                        	LDA		#4
   6661 00E5C5 46 08                        	LSR		KeyState1	; check key up/down	
   6662 00E5C7 90 05                        	BCC		.0004		; keydown = carry clear
   6663 00E5C9 14 09                        	TRB		KeyState2
   6664 00E5CB 82 5B FF                     	BRL		.0003
   6665 00E5CE                             .0004:
   6666 00E5CE 04 09                        	TSB		KeyState2	; set control active bit
   6667 00E5D0 82 56 FF                     	BRL		.0003
   6668 00E5D3                             .doShift:
   6669 00E5D3 A9 01                        	LDA		#1
   6670 00E5D5 46 08                        	LSR		KeyState1	; check key up/down	
   6671 00E5D7 90 05                        	BCC		.0005
   6672 00E5D9 14 09                        	TRB		KeyState2
   6673 00E5DB 82 4B FF                     	BRL		.0003
   6674 00E5DE                             .0005:
   6675 00E5DE 04 09                        	TSB		KeyState2
   6676 00E5E0 82 46 FF                     	BRL		.0003
   6677 00E5E3                             .doNumLock:
   6678 00E5E3 A5 09                        	LDA		KeyState2
   6679 00E5E5 49 10                        	EOR		#16
   6680 00E5E7 85 09                        	STA		KeyState2
   6681 00E5E9 20 07 E6                     	JSR		KeybdSetLEDStatus
   6682 00E5EC 82 3A FF                     	BRL		.0003
   6683 00E5EF                             .doCapsLock:
   6684 00E5EF A5 09                        	LDA		KeyState2
   6685 00E5F1 49 20                        	EOR		#32
   6686 00E5F3 85 09                        	STA		KeyState2
   6687 00E5F5 20 07 E6                     	JSR		KeybdSetLEDStatus
   6688 00E5F8 82 2E FF                     	BRL		.0003
   6689 00E5FB                             .doScrollLock:
   6690 00E5FB A5 09                        	LDA		KeyState2
   6691 00E5FD 49 40                        	EOR		#64
   6692 00E5FF 85 09                        	STA		KeyState2
   6693 00E601 20 07 E6                     	JSR		KeybdSetLEDStatus
   6694 00E604 82 22 FF                     	BRL		.0003
                                           
   6696 00E607                             KeybdSetLEDStatus:
   6697 00E607 A9 00                        	LDA		#0
   6698 00E609 85 0A                        	STA		KeybdLEDs
   6699 00E60B A9 10                        	LDA		#16
   6700 00E60D 24 09                        	BIT		KeyState2
   6701 00E60F F0 06                        	BEQ		.0002
   6702 00E611 A5 0A                        	LDA		KeybdLEDs	; set bit 1 for Num lock, 0 for scrolllock , 2 for caps lock
   6703 00E613 09 02                        	ORA		#$2
   6704 00E615 85 0A                        	STA		KeybdLEDs
   6705 00E617                             .0002:
   6706 00E617 A9 20                        	LDA		#32
   6707 00E619 24 09                        	BIT		KeyState2
   6708 00E61B F0 06                        	BEQ		.0003
   6709 00E61D A5 0A                        	LDA		KeybdLEDs
   6710 00E61F 09 04                        	ORA		#$4
   6711 00E621 85 0A                        	STA		KeybdLEDs
   6712 00E623                             .0003:
   6713 00E623 A9 40                        	LDA		#64
   6714 00E625 24 09                        	BIT		KeyState2
   6715 00E627 F0 06                        	BEQ		.0004
   6716 00E629 A5 0A                        	LDA		KeybdLEDs
   6717 00E62B 09 01                        	ORA		#1
   6718 00E62D 85 0A                        	STA		KeybdLEDs
   6719 00E62F                             .0004:
   6720 00E62F A9 ED                        	LDA		#$ED		; set status LEDs command
   6721 00E631 8F 10 A1 FE                  	STA		KEYBD
   6722 00E635 20 D4 E4                     	JSR		KeybdWaitTx
   6723 00E638 20 9A E4                     	JSR		KeybdRecvByte
   6724 00E63B 90 0E                        	BCC		.0001
   6725 00E63D C9 FA                        	CMP		#$FA
   6726 00E63F A5 0A                        	LDA		KeybdLEDs
   6727 00E641 8F 10 A1 FE                  	STA		KEYBD
   6728 00E645 20 D4 E4                     	JSR		KeybdWaitTx
   6729 00E648 20 9A E4                     	JSR		KeybdRecvByte	; wait for $FA byte
   6730 00E64B                             .0001:
   6731 00E64B 60                           	RTS
                                           
                                           	MEM		16
                                           
   6735 00E64C 10 D5                        	BPL		.0003
   6736 00E64E 48                           	PHA					; save off the char (we need to trash acc)
   6737 00E64F AF 14 A1 FE                  	LDA		KEYBD+4		; clear keyboard strobe (must be a read operation)
   6738 00E653 68                           	PLA					; restore char
   6739 00E654 89 00 08                     	BIT		#$800		; Is it a keyup code ?
   6740 00E657 D0 CA                        	BNE		.0003
   6741 00E659 60                           	RTS
                                           
                                           
                                           
                                           	;--------------------------------------------------------------------------
                                           	; PS2 scan codes to ascii conversion tables.
                                           	;--------------------------------------------------------------------------
                                           	;
   6749 00E65A                             unshiftedScanCodes:
   6750 00E65A 2E A9 2E A5 A3 A1 A2 AC      	.byte	$2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
                                         
   6751 00E662 2E AA A8 A6 A4 09 60 2E      	.byte	$2e,$aa,$a8,$a6,$a4,$09,$60,$2e
                                         
   6752 00E66A 2E 2E 2E 2E 2E 71 31 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$71,$31,$2e
                                         
   6753 00E672 2E 2E 7A 73 61 77 32 2E      	.byte	$2e,$2e,$7a,$73,$61,$77,$32,$2e
                                         
   6754 00E67A 2E 63 78 64 65 34 33 2E      	.byte	$2e,$63,$78,$64,$65,$34,$33,$2e
                                         
   6755 00E682 2E 20 76 66 74 72 35 2E      	.byte	$2e,$20,$76,$66,$74,$72,$35,$2e
                                         
   6756 00E68A 2E 6E 62 68 67 79 36 2E      	.byte	$2e,$6e,$62,$68,$67,$79,$36,$2e
                                         
   6757 00E692 2E 2E 6D 6A 75 37 38 2E      	.byte	$2e,$2e,$6d,$6a,$75,$37,$38,$2e
                                         
   6758 00E69A 2E 2C 6B 69 6F 30 39 2E      	.byte	$2e,$2c,$6b,$69,$6f,$30,$39,$2e
                                         
   6759 00E6A2 2E 2E 2F 6C 3B 70 2D 2E      	.byte	$2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
                                         
   6760 00E6AA 2E 2E 27 2E 5B 3D 2E 2E      	.byte	$2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
                                         
   6761 00E6B2 AD 2E 0D 5D 2E 5C 2E 2E      	.byte	$ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
                                         
   6762 00E6BA 2E 2E 2E 2E 2E 2E 08 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                         
   6763 00E6C2 2E 95 2E 93 94 2E 2E 2E      	.byte	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
                                         
   6764 00E6CA 98 7F 92 2E 91 90 1B AF      	.byte	$98,$7f,$92,$2e,$91,$90,$1b,$af
                                         
   6765 00E6D2 AB 2E 97 2E 2E 96 AE 2E      	.byte	$ab,$2e,$97,$2e,$2e,$96,$ae,$2e
                                         
                                           
   6767 00E6DA 2E 2E 2E A7 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
                                         
   6768 00E6E2 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6769 00E6EA 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6770 00E6F2 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6771 00E6FA 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6772 00E702 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6773 00E70A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6774 00E712 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6775 00E71A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6776 00E722 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6777 00E72A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6778 00E732 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6779 00E73A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6780 00E742 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6781 00E74A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6782 00E752 2E 2E FA 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
                                         
                                           
   6784 00E75A                             shiftedScanCodes:
   6785 00E75A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6786 00E762 2E 2E 2E 2E 2E 09 7E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
                                         
   6787 00E76A 2E 2E 2E 2E 2E 51 21 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$51,$21,$2e
                                         
   6788 00E772 2E 2E 5A 53 41 57 40 2E      	.byte	$2e,$2e,$5a,$53,$41,$57,$40,$2e
                                         
   6789 00E77A 2E 43 58 44 45 24 23 2E      	.byte	$2e,$43,$58,$44,$45,$24,$23,$2e
                                         
   6790 00E782 2E 20 56 46 54 52 25 2E      	.byte	$2e,$20,$56,$46,$54,$52,$25,$2e
                                         
   6791 00E78A 2E 4E 42 48 47 59 5E 2E      	.byte	$2e,$4e,$42,$48,$47,$59,$5e,$2e
                                         
   6792 00E792 2E 2E 4D 4A 55 26 2A 2E      	.byte	$2e,$2e,$4d,$4a,$55,$26,$2a,$2e
                                         
   6793 00E79A 2E 3C 4B 49 4F 29 28 2E      	.byte	$2e,$3c,$4b,$49,$4f,$29,$28,$2e
                                         
   6794 00E7A2 2E 3E 3F 4C 3A 50 5F 2E      	.byte	$2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
                                         
   6795 00E7AA 2E 2E 22 2E 7B 2B 2E 2E      	.byte	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
                                         
   6796 00E7B2 2E 2E 0D 7D 2E 7C 2E 2E      	.byte	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
                                         
   6797 00E7BA 2E 2E 2E 2E 2E 2E 08 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                         
   6798 00E7C2 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6799 00E7CA 2E 7F 2E 2E 2E 2E 1B 2E      	.byte	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
                                         
   6800 00E7D2 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
                                           
   6802 00E7DA 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6803 00E7E2 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6804 00E7EA 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6805 00E7F2 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6806 00E7FA 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6807 00E802 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6808 00E80A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6809 00E812 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6810 00E81A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6811 00E822 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6812 00E82A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6813 00E832 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6814 00E83A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6815 00E842 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6816 00E84A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6817 00E852 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
                                           
                                           ; control
   6820 00E85A                             keybdControlCodes:
   6821 00E85A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6822 00E862 2E 2E 2E 2E 2E 09 7E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
                                         
   6823 00E86A 2E 2E 2E 2E 2E 11 21 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$11,$21,$2e
                                         
   6824 00E872 2E 2E 1A 13 01 17 40 2E      	.byte	$2e,$2e,$1a,$13,$01,$17,$40,$2e
                                         
   6825 00E87A 2E 03 18 04 05 24 23 2E      	.byte	$2e,$03,$18,$04,$05,$24,$23,$2e
                                         
   6826 00E882 2E 20 16 06 14 12 25 2E      	.byte	$2e,$20,$16,$06,$14,$12,$25,$2e
                                         
   6827 00E88A 2E 0E 02 08 07 19 5E 2E      	.byte	$2e,$0e,$02,$08,$07,$19,$5e,$2e
                                         
   6828 00E892 2E 2E 0D 0A 15 26 2A 2E      	.byte	$2e,$2e,$0d,$0a,$15,$26,$2a,$2e
                                         
   6829 00E89A 2E 3C 0B 09 0F 29 28 2E      	.byte	$2e,$3c,$0b,$09,$0f,$29,$28,$2e
                                         
   6830 00E8A2 2E 3E 3F 0C 3A 10 5F 2E      	.byte	$2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
                                         
   6831 00E8AA 2E 2E 22 2E 7B 2B 2E 2E      	.byte	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
                                         
   6832 00E8B2 2E 2E 0D 7D 2E 7C 2E 2E      	.byte	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
                                         
   6833 00E8BA 2E 2E 2E 2E 2E 2E 08 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                         
   6834 00E8C2 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6835 00E8CA 2E 7F 2E 2E 2E 2E 1B 2E      	.byte	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
                                         
   6836 00E8D2 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
                                           
   6838 00E8DA                             keybdExtendedCodes:
   6839 00E8DA 2E 2E 2E 2E A3 A1 A2 2E      	.byte	$2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
                                         
   6840 00E8E2 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6841 00E8EA 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6842 00E8F2 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6843 00E8FA 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6844 00E902 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6845 00E90A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6846 00E912 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6847 00E91A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6848 00E922 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6849 00E92A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6850 00E932 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6851 00E93A 2E 2E 2E 2E 2E 2E 2E 2E      	.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                         
   6852 00E942 2E 95 2E 93 94 2E 2E 2E      	.byte	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
                                         
   6853 00E94A 98 99 92 2E 91 90 2E 2E      	.byte	$98,$99,$92,$2e,$91,$90,$2e,$2e
                                         
   6854 00E952 2E 2E 97 2E 2E 96 2E 2E      	.byte	$2e,$2e,$97,$2e,$2e,$96,$2e,$2e
                                         
                                           
                                           ; Get char routine for Supermon
                                           ; This routine might be called with 8 bit regs.
                                           ;
   6859 00E95A                             SuperGetch:
   6860 00E95A 08                           	PHP
   6861 00E95B C2 30                        	REP		#$30
                                           	MEM		16
                                           	NDX		16
   6864 00E95D 20 18 E5                     	JSR		KeybdGetCharNoWait
   6865 00E960 29 FF 00                     	AND		#$FF
   6866 00E963 B0 03                        	BCS		.0001
   6867 00E965 28                           	PLP		; to restore reg size
   6868 00E966 18                           	CLC
   6869 00E967 60                           	RTS
   6870 00E968                             .0001:
   6871 00E968 28                           	PLP
   6872 00E969 38                           	SEC
   6873 00E96A 60                           	RTS
                                           
                                           ; Put char routine for Supermon
                                           ; This routine might be called with 8 bit regs.
                                           ;
   6878 00E96B                             SuperPutch:
   6879 00E96B 08                           	PHP
   6880 00E96C C2 30                        	REP		#$30	; 16 bit regs
                                           	MEM		16
                                           	NDX		16
   6883 00E96E 48                           	PHA
   6884 00E96F DA                           	PHX
   6885 00E970 5A                           	PHY
   6886 00E971 20 7A E3                     	JSR		OutChar
   6887 00E974 7A                           	PLY
   6888 00E975 FA                           	PLX
   6889 00E976 68                           	PLA
   6890 00E977 28                           	PLP
   6891 00E978 60                           	RTS
                                           
   6893 00E979                             IRQRout:
   6894 00E979 C2 30                        	REP		#$30
                                           	NDX		16
                                           	MEM		16
   6897 00E97B 48                           	PHA
   6898 00E97C A5 04                        	LDA		TickCount
   6899 00E97E 1A                           	INA
   6900 00E97F 85 04                        	STA		TickCount
   6901 00E981 8F A6 00 FD                  	STA		$FD00A6
   6902 00E985 E2 30                        	SEP		#$30
                                           	NDX		8
                                           	MEM		8
   6905 00E987 AD 1F F0                     	LDA		$F01F		; check if counter expired
   6906 00E98A 89 02                        	BIT		#2
   6907 00E98C F0 05                        	BEQ		.0001
   6908 00E98E A9 05                        	LDA		#$05		; count down, on mpu clock, irq enabled (clears irq)
   6909 00E990 8D 17 F0                     	STA		$F017
   6910 00E993                             .0001:
   6911 00E993 C2 30                        	REP		#$30
                                           	NDX		16
                                           	MEM		16
   6914 00E995 68                           	PLA
   6915 00E996 40                           	RTI
                                           
   6917 00E997                             BrkRout:
   6918 00E997 E2 20                        	SEP		#$20
   6919 00E999 68                           	PLA
   6920 00E99A C2 20                        	REP		#$20
   6921 00E99C 68                           	PLA
   6922 00E99D 20 13 E4                     	JSR		DispWord
   6923 00E9A0                             Hung:
   6924 00E9A0 80 FE                        	BRA		Hung
   6925 00E9A2                             	
   6926 00E9A2 00 00                        	.WORD	0
   6927 00E9A4 54 00                        	.WORD	TEXTCOLS
   6928 00E9A6 A8 00                        	.WORD	TEXTCOLS*2
   6929 00E9A8 FC 00                        	.WORD	TEXTCOLS*3
   6930 00E9AA 50 01                        	.WORD	TEXTCOLS*4
   6931 00E9AC A4 01                        	.WORD	TEXTCOLS*5
   6932 00E9AE F8 01                        	.WORD	TEXTCOLS*6
   6933 00E9B0 4C 02                        	.WORD	TEXTCOLS*7
   6934 00E9B2 A0 02                        	.WORD	TEXTCOLS*8
   6935 00E9B4 F4 02                        	.WORD	TEXTCOLS*9
   6936 00E9B6 48 03                        	.WORD	TEXTCOLS*10
   6937 00E9B8 9C 03                        	.WORD	TEXTCOLS*11
   6938 00E9BA F0 03                        	.WORD	TEXTCOLS*12
   6939 00E9BC 44 04                        	.WORD	TEXTCOLS*13
   6940 00E9BE 98 04                        	.WORD	TEXTCOLS*14
   6941 00E9C0 EC 04                        	.WORD	TEXTCOLS*15
   6942 00E9C2 40 05                        	.WORD	TEXTCOLS*16
   6943 00E9C4 94 05                        	.WORD	TEXTCOLS*17
   6944 00E9C6 E8 05                        	.WORD	TEXTCOLS*18
   6945 00E9C8 3C 06                        	.WORD	TEXTCOLS*19
   6946 00E9CA 90 06                        	.WORD	TEXTCOLS*20
   6947 00E9CC E4 06                        	.WORD	TEXTCOLS*21
   6948 00E9CE 38 07                        	.WORD	TEXTCOLS*22
   6949 00E9D0 8C 07                        	.WORD	TEXTCOLS*23
   6950 00E9D2 E0 07                        	.WORD	TEXTCOLS*24
   6951 00E9D4 34 08                        	.WORD	TEXTCOLS*25
   6952 00E9D6 88 08                        	.WORD	TEXTCOLS*26
   6953 00E9D8 DC 08                        	.WORD	TEXTCOLS*27
   6954 00E9DA 30 09                        	.WORD	TEXTCOLS*28
   6955 00E9DC 84 09                        	.WORD	TEXTCOLS*29
   6956 00E9DE D8 09                        	.WORD	TEXTCOLS*30
                                           
   6958 00E9E0 FF FF FF FF FF FF FF FF      	.org	$F400
   6958 00E9E8 FF FF FF FF FF FF FF FF    
   6958 00E9F0 FF FF FF FF FF FF FF FF    
   6958 00E9F8 FF FF FF FF FF FF FF FF    
   6958 00EA00 FF FF FF FF FF FF FF FF    
   6958 00EA08 FF FF FF FF FF FF FF FF    
   6958 00EA10 FF FF FF FF FF FF FF FF    
   6958 00EA18 FF FF FF FF FF FF FF FF    
   6958 00EA20 FF FF FF FF FF FF FF FF    
   6958 00EA28 FF FF FF FF FF FF FF FF    
   6958 00EA30 FF FF FF FF FF FF FF FF    
   6958 00EA38 FF FF FF FF FF FF FF FF    
   6958 00EA40 FF FF FF FF FF FF FF FF    
   6958 00EA48 FF FF FF FF FF FF FF FF    
   6958 00EA50 FF FF FF FF FF FF FF FF    
   6958 00EA58 FF FF FF FF FF FF FF FF    
   6958 00EA60 FF FF FF FF FF FF FF FF    
   6958 00EA68 FF FF FF FF FF FF FF FF    
   6958 00EA70 FF FF FF FF FF FF FF FF    
   6958 00EA78 FF FF FF FF FF FF FF FF    
   6958 00EA80 FF FF FF FF FF FF FF FF    
   6958 00EA88 FF FF FF FF FF FF FF FF    
   6958 00EA90 FF FF FF FF FF FF FF FF    
   6958 00EA98 FF FF FF FF FF FF FF FF    
   6958 00EAA0 FF FF FF FF FF FF FF FF    
   6958 00EAA8 FF FF FF FF FF FF FF FF    
   6958 00EAB0 FF FF FF FF FF FF FF FF    
   6958 00EAB8 FF FF FF FF FF FF FF FF    
   6958 00EAC0 FF FF FF FF FF FF FF FF    
   6958 00EAC8 FF FF FF FF FF FF FF FF    
   6958 00EAD0 FF FF FF FF FF FF FF FF    
   6958 00EAD8 FF FF FF FF FF FF FF FF    
   6958 00EAE0 FF FF FF FF FF FF FF FF    
   6958 00EAE8 FF FF FF FF FF FF FF FF    
   6958 00EAF0 FF FF FF FF FF FF FF FF    
   6958 00EAF8 FF FF FF FF FF FF FF FF    
   6958 00EB00 FF FF FF FF FF FF FF FF    
   6958 00EB08 FF FF FF FF FF FF FF FF    
   6958 00EB10 FF FF FF FF FF FF FF FF    
   6958 00EB18 FF FF FF FF FF FF FF FF    
   6958 00EB20 FF FF FF FF FF FF FF FF    
   6958 00EB28 FF FF FF FF FF FF FF FF    
   6958 00EB30 FF FF FF FF FF FF FF FF    
   6958 00EB38 FF FF FF FF FF FF FF FF    
   6958 00EB40 FF FF FF FF FF FF FF FF    
   6958 00EB48 FF FF FF FF FF FF FF FF    
   6958 00EB50 FF FF FF FF FF FF FF FF    
   6958 00EB58 FF FF FF FF FF FF FF FF    
   6958 00EB60 FF FF FF FF FF FF FF FF    
   6958 00EB68 FF FF FF FF FF FF FF FF    
   6958 00EB70 FF FF FF FF FF FF FF FF    
   6958 00EB78 FF FF FF FF FF FF FF FF    
   6958 00EB80 FF FF FF FF FF FF FF FF    
   6958 00EB88 FF FF FF FF FF FF FF FF    
   6958 00EB90 FF FF FF FF FF FF FF FF    
   6958 00EB98 FF FF FF FF FF FF FF FF    
   6958 00EBA0 FF FF FF FF FF FF FF FF    
   6958 00EBA8 FF FF FF FF FF FF FF FF    
   6958 00EBB0 FF FF FF FF FF FF FF FF    
   6958 00EBB8 FF FF FF FF FF FF FF FF    
   6958 00EBC0 FF FF FF FF FF FF FF FF    
   6958 00EBC8 FF FF FF FF FF FF FF FF    
   6958 00EBD0 FF FF FF FF FF FF FF FF    
   6958 00EBD8 FF FF FF FF FF FF FF FF    
   6958 00EBE0 FF FF FF FF FF FF FF FF    
   6958 00EBE8 FF FF FF FF FF FF FF FF    
   6958 00EBF0 FF FF FF FF FF FF FF FF    
   6958 00EBF8 FF FF FF FF FF FF FF FF    
   6958 00EC00 FF FF FF FF FF FF FF FF    
   6958 00EC08 FF FF FF FF FF FF FF FF    
   6958 00EC10 FF FF FF FF FF FF FF FF    
   6958 00EC18 FF FF FF FF FF FF FF FF    
   6958 00EC20 FF FF FF FF FF FF FF FF    
   6958 00EC28 FF FF FF FF FF FF FF FF    
   6958 00EC30 FF FF FF FF FF FF FF FF    
   6958 00EC38 FF FF FF FF FF FF FF FF    
   6958 00EC40 FF FF FF FF FF FF FF FF    
   6958 00EC48 FF FF FF FF FF FF FF FF    
   6958 00EC50 FF FF FF FF FF FF FF FF    
   6958 00EC58 FF FF FF FF FF FF FF FF    
   6958 00EC60 FF FF FF FF FF FF FF FF    
   6958 00EC68 FF FF FF FF FF FF FF FF    
   6958 00EC70 FF FF FF FF FF FF FF FF    
   6958 00EC78 FF FF FF FF FF FF FF FF    
   6958 00EC80 FF FF FF FF FF FF FF FF    
   6958 00EC88 FF FF FF FF FF FF FF FF    
   6958 00EC90 FF FF FF FF FF FF FF FF    
   6958 00EC98 FF FF FF FF FF FF FF FF    
   6958 00ECA0 FF FF FF FF FF FF FF FF    
   6958 00ECA8 FF FF FF FF FF FF FF FF    
   6958 00ECB0 FF FF FF FF FF FF FF FF    
   6958 00ECB8 FF FF FF FF FF FF FF FF    
   6958 00ECC0 FF FF FF FF FF FF FF FF    
   6958 00ECC8 FF FF FF FF FF FF FF FF    
   6958 00ECD0 FF FF FF FF FF FF FF FF    
   6958 00ECD8 FF FF FF FF FF FF FF FF    
   6958 00ECE0 FF FF FF FF FF FF FF FF    
   6958 00ECE8 FF FF FF FF FF FF FF FF    
   6958 00ECF0 FF FF FF FF FF FF FF FF    
   6958 00ECF8 FF FF FF FF FF FF FF FF    
   6958 00ED00 FF FF FF FF FF FF FF FF    
   6958 00ED08 FF FF FF FF FF FF FF FF    
   6958 00ED10 FF FF FF FF FF FF FF FF    
   6958 00ED18 FF FF FF FF FF FF FF FF    
   6958 00ED20 FF FF FF FF FF FF FF FF    
   6958 00ED28 FF FF FF FF FF FF FF FF    
   6958 00ED30 FF FF FF FF FF FF FF FF    
   6958 00ED38 FF FF FF FF FF FF FF FF    
   6958 00ED40 FF FF FF FF FF FF FF FF    
   6958 00ED48 FF FF FF FF FF FF FF FF    
   6958 00ED50 FF FF FF FF FF FF FF FF    
   6958 00ED58 FF FF FF FF FF FF FF FF    
   6958 00ED60 FF FF FF FF FF FF FF FF    
   6958 00ED68 FF FF FF FF FF FF FF FF    
   6958 00ED70 FF FF FF FF FF FF FF FF    
   6958 00ED78 FF FF FF FF FF FF FF FF    
   6958 00ED80 FF FF FF FF FF FF FF FF    
   6958 00ED88 FF FF FF FF FF FF FF FF    
   6958 00ED90 FF FF FF FF FF FF FF FF    
   6958 00ED98 FF FF FF FF FF FF FF FF    
   6958 00EDA0 FF FF FF FF FF FF FF FF    
   6958 00EDA8 FF FF FF FF FF FF FF FF    
   6958 00EDB0 FF FF FF FF FF FF FF FF    
   6958 00EDB8 FF FF FF FF FF FF FF FF    
   6958 00EDC0 FF FF FF FF FF FF FF FF    
   6958 00EDC8 FF FF FF FF FF FF FF FF    
   6958 00EDD0 FF FF FF FF FF FF FF FF    
   6958 00EDD8 FF FF FF FF FF FF FF FF    
   6958 00EDE0 FF FF FF FF FF FF FF FF    
   6958 00EDE8 FF FF FF FF FF FF FF FF    
   6958 00EDF0 FF FF FF FF FF FF FF FF    
   6958 00EDF8 FF FF FF FF FF FF FF FF    
   6958 00EE00 FF FF FF FF FF FF FF FF    
   6958 00EE08 FF FF FF FF FF FF FF FF    
   6958 00EE10 FF FF FF FF FF FF FF FF    
   6958 00EE18 FF FF FF FF FF FF FF FF    
   6958 00EE20 FF FF FF FF FF FF FF FF    
   6958 00EE28 FF FF FF FF FF FF FF FF    
   6958 00EE30 FF FF FF FF FF FF FF FF    
   6958 00EE38 FF FF FF FF FF FF FF FF    
   6958 00EE40 FF FF FF FF FF FF FF FF    
   6958 00EE48 FF FF FF FF FF FF FF FF    
   6958 00EE50 FF FF FF FF FF FF FF FF    
   6958 00EE58 FF FF FF FF FF FF FF FF    
   6958 00EE60 FF FF FF FF FF FF FF FF    
   6958 00EE68 FF FF FF FF FF FF FF FF    
   6958 00EE70 FF FF FF FF FF FF FF FF    
   6958 00EE78 FF FF FF FF FF FF FF FF    
   6958 00EE80 FF FF FF FF FF FF FF FF    
   6958 00EE88 FF FF FF FF FF FF FF FF    
   6958 00EE90 FF FF FF FF FF FF FF FF    
   6958 00EE98 FF FF FF FF FF FF FF FF    
   6958 00EEA0 FF FF FF FF FF FF FF FF    
   6958 00EEA8 FF FF FF FF FF FF FF FF    
   6958 00EEB0 FF FF FF FF FF FF FF FF    
   6958 00EEB8 FF FF FF FF FF FF FF FF    
   6958 00EEC0 FF FF FF FF FF FF FF FF    
   6958 00EEC8 FF FF FF FF FF FF FF FF    
   6958 00EED0 FF FF FF FF FF FF FF FF    
   6958 00EED8 FF FF FF FF FF FF FF FF    
   6958 00EEE0 FF FF FF FF FF FF FF FF    
   6958 00EEE8 FF FF FF FF FF FF FF FF    
   6958 00EEF0 FF FF FF FF FF FF FF FF    
   6958 00EEF8 FF FF FF FF FF FF FF FF    
   6958 00EF00 FF FF FF FF FF FF FF FF    
   6958 00EF08 FF FF FF FF FF FF FF FF    
   6958 00EF10 FF FF FF FF FF FF FF FF    
   6958 00EF18 FF FF FF FF FF FF FF FF    
   6958 00EF20 FF FF FF FF FF FF FF FF    
   6958 00EF28 FF FF FF FF FF FF FF FF    
   6958 00EF30 FF FF FF FF FF FF FF FF    
   6958 00EF38 FF FF FF FF FF FF FF FF    
   6958 00EF40 FF FF FF FF FF FF FF FF    
   6958 00EF48 FF FF FF FF FF FF FF FF    
   6958 00EF50 FF FF FF FF FF FF FF FF    
   6958 00EF58 FF FF FF FF FF FF FF FF    
   6958 00EF60 FF FF FF FF FF FF FF FF    
   6958 00EF68 FF FF FF FF FF FF FF FF    
   6958 00EF70 FF FF FF FF FF FF FF FF    
   6958 00EF78 FF FF FF FF FF FF FF FF    
   6958 00EF80 FF FF FF FF FF FF FF FF    
   6958 00EF88 FF FF FF FF FF FF FF FF    
   6958 00EF90 FF FF FF FF FF FF FF FF    
   6958 00EF98 FF FF FF FF FF FF FF FF    
   6958 00EFA0 FF FF FF FF FF FF FF FF    
   6958 00EFA8 FF FF FF FF FF FF FF FF    
   6958 00EFB0 FF FF FF FF FF FF FF FF    
   6958 00EFB8 FF FF FF FF FF FF FF FF    
   6958 00EFC0 FF FF FF FF FF FF FF FF    
   6958 00EFC8 FF FF FF FF FF FF FF FF    
   6958 00EFD0 FF FF FF FF FF FF FF FF    
   6958 00EFD8 FF FF FF FF FF FF FF FF    
   6958 00EFE0 FF FF FF FF FF FF FF FF    
   6958 00EFE8 FF FF FF FF FF FF FF FF    
   6958 00EFF0 FF FF FF FF FF FF FF FF    
   6958 00EFF8 FF FF FF FF FF FF FF FF    
   6958 00F000 FF FF FF FF FF FF FF FF    
   6958 00F008 FF FF FF FF FF FF FF FF    
   6958 00F010 FF FF FF FF FF FF FF FF    
   6958 00F018 FF FF FF FF FF FF FF FF    
   6958 00F020 FF FF FF FF FF FF FF FF    
   6958 00F028 FF FF FF FF FF FF FF FF    
   6958 00F030 FF FF FF FF FF FF FF FF    
   6958 00F038 FF FF FF FF FF FF FF FF    
   6958 00F040 FF FF FF FF FF FF FF FF    
   6958 00F048 FF FF FF FF FF FF FF FF    
   6958 00F050 FF FF FF FF FF FF FF FF    
   6958 00F058 FF FF FF FF FF FF FF FF    
   6958 00F060 FF FF FF FF FF FF FF FF    
   6958 00F068 FF FF FF FF FF FF FF FF    
   6958 00F070 FF FF FF FF FF FF FF FF    
   6958 00F078 FF FF FF FF FF FF FF FF    
   6958 00F080 FF FF FF FF FF FF FF FF    
   6958 00F088 FF FF FF FF FF FF FF FF    
   6958 00F090 FF FF FF FF FF FF FF FF    
   6958 00F098 FF FF FF FF FF FF FF FF    
   6958 00F0A0 FF FF FF FF FF FF FF FF    
   6958 00F0A8 FF FF FF FF FF FF FF FF    
   6958 00F0B0 FF FF FF FF FF FF FF FF    
   6958 00F0B8 FF FF FF FF FF FF FF FF    
   6958 00F0C0 FF FF FF FF FF FF FF FF    
   6958 00F0C8 FF FF FF FF FF FF FF FF    
   6958 00F0D0 FF FF FF FF FF FF FF FF    
   6958 00F0D8 FF FF FF FF FF FF FF FF    
   6958 00F0E0 FF FF FF FF FF FF FF FF    
   6958 00F0E8 FF FF FF FF FF FF FF FF    
   6958 00F0F0 FF FF FF FF FF FF FF FF    
   6958 00F0F8 FF FF FF FF FF FF FF FF    
   6958 00F100 FF FF FF FF FF FF FF FF    
   6958 00F108 FF FF FF FF FF FF FF FF    
   6958 00F110 FF FF FF FF FF FF FF FF    
   6958 00F118 FF FF FF FF FF FF FF FF    
   6958 00F120 FF FF FF FF FF FF FF FF    
   6958 00F128 FF FF FF FF FF FF FF FF    
   6958 00F130 FF FF FF FF FF FF FF FF    
   6958 00F138 FF FF FF FF FF FF FF FF    
   6958 00F140 FF FF FF FF FF FF FF FF    
   6958 00F148 FF FF FF FF FF FF FF FF    
   6958 00F150 FF FF FF FF FF FF FF FF    
   6958 00F158 FF FF FF FF FF FF FF FF    
   6958 00F160 FF FF FF FF FF FF FF FF    
   6958 00F168 FF FF FF FF FF FF FF FF    
   6958 00F170 FF FF FF FF FF FF FF FF    
   6958 00F178 FF FF FF FF FF FF FF FF    
   6958 00F180 FF FF FF FF FF FF FF FF    
   6958 00F188 FF FF FF FF FF FF FF FF    
   6958 00F190 FF FF FF FF FF FF FF FF    
   6958 00F198 FF FF FF FF FF FF FF FF    
   6958 00F1A0 FF FF FF FF FF FF FF FF    
   6958 00F1A8 FF FF FF FF FF FF FF FF    
   6958 00F1B0 FF FF FF FF FF FF FF FF    
   6958 00F1B8 FF FF FF FF FF FF FF FF    
   6958 00F1C0 FF FF FF FF FF FF FF FF    
   6958 00F1C8 FF FF FF FF FF FF FF FF    
   6958 00F1D0 FF FF FF FF FF FF FF FF    
   6958 00F1D8 FF FF FF FF FF FF FF FF    
   6958 00F1E0 FF FF FF FF FF FF FF FF    
   6958 00F1E8 FF FF FF FF FF FF FF FF    
   6958 00F1F0 FF FF FF FF FF FF FF FF    
   6958 00F1F8 FF FF FF FF FF FF FF FF    
   6958 00F200 FF FF FF FF FF FF FF FF    
   6958 00F208 FF FF FF FF FF FF FF FF    
   6958 00F210 FF FF FF FF FF FF FF FF    
   6958 00F218 FF FF FF FF FF FF FF FF    
   6958 00F220 FF FF FF FF FF FF FF FF    
   6958 00F228 FF FF FF FF FF FF FF FF    
   6958 00F230 FF FF FF FF FF FF FF FF    
   6958 00F238 FF FF FF FF FF FF FF FF    
   6958 00F240 FF FF FF FF FF FF FF FF    
   6958 00F248 FF FF FF FF FF FF FF FF    
   6958 00F250 FF FF FF FF FF FF FF FF    
   6958 00F258 FF FF FF FF FF FF FF FF    
   6958 00F260 FF FF FF FF FF FF FF FF    
   6958 00F268 FF FF FF FF FF FF FF FF    
   6958 00F270 FF FF FF FF FF FF FF FF    
   6958 00F278 FF FF FF FF FF FF FF FF    
   6958 00F280 FF FF FF FF FF FF FF FF    
   6958 00F288 FF FF FF FF FF FF FF FF    
   6958 00F290 FF FF FF FF FF FF FF FF    
   6958 00F298 FF FF FF FF FF FF FF FF    
   6958 00F2A0 FF FF FF FF FF FF FF FF    
   6958 00F2A8 FF FF FF FF FF FF FF FF    
   6958 00F2B0 FF FF FF FF FF FF FF FF    
   6958 00F2B8 FF FF FF FF FF FF FF FF    
   6958 00F2C0 FF FF FF FF FF FF FF FF    
   6958 00F2C8 FF FF FF FF FF FF FF FF    
   6958 00F2D0 FF FF FF FF FF FF FF FF    
   6958 00F2D8 FF FF FF FF FF FF FF FF    
   6958 00F2E0 FF FF FF FF FF FF FF FF    
   6958 00F2E8 FF FF FF FF FF FF FF FF    
   6958 00F2F0 FF FF FF FF FF FF FF FF    
   6958 00F2F8 FF FF FF FF FF FF FF FF    
   6958 00F300 FF FF FF FF FF FF FF FF    
   6958 00F308 FF FF FF FF FF FF FF FF    
   6958 00F310 FF FF FF FF FF FF FF FF    
   6958 00F318 FF FF FF FF FF FF FF FF    
   6958 00F320 FF FF FF FF FF FF FF FF    
   6958 00F328 FF FF FF FF FF FF FF FF    
   6958 00F330 FF FF FF FF FF FF FF FF    
   6958 00F338 FF FF FF FF FF FF FF FF    
   6958 00F340 FF FF FF FF FF FF FF FF    
   6958 00F348 FF FF FF FF FF FF FF FF    
   6958 00F350 FF FF FF FF FF FF FF FF    
   6958 00F358 FF FF FF FF FF FF FF FF    
   6958 00F360 FF FF FF FF FF FF FF FF    
   6958 00F368 FF FF FF FF FF FF FF FF    
   6958 00F370 FF FF FF FF FF FF FF FF    
   6958 00F378 FF FF FF FF FF FF FF FF    
   6958 00F380 FF FF FF FF FF FF FF FF    
   6958 00F388 FF FF FF FF FF FF FF FF    
   6958 00F390 FF FF FF FF FF FF FF FF    
   6958 00F398 FF FF FF FF FF FF FF FF    
   6958 00F3A0 FF FF FF FF FF FF FF FF    
   6958 00F3A8 FF FF FF FF FF FF FF FF    
   6958 00F3B0 FF FF FF FF FF FF FF FF    
   6958 00F3B8 FF FF FF FF FF FF FF FF    
   6958 00F3C0 FF FF FF FF FF FF FF FF    
   6958 00F3C8 FF FF FF FF FF FF FF FF    
   6958 00F3D0 FF FF FF FF FF FF FF FF    
   6958 00F3D8 FF FF FF FF FF FF FF FF    
   6958 00F3E0 FF FF FF FF FF FF FF FF    
   6958 00F3E8 FF FF FF FF FF FF FF FF    
   6958 00F3F0 FF FF FF FF FF FF FF FF    
   6958 00F3F8 FF FF FF FF FF FF FF FF    
                                         
   6959 00F400 4C 5A E9                     	JMP		SuperGetch
   6960 00F403 4C 00 E0                     	JMP		start
   6961 00F406 4C 6B E9                     	JMP		SuperPutch
   6962 00F409 4C 0C E1                     	JMP		BIOSInput
                                           
   6964 00F40C FF FF FF FF FF FF FF FF      	.org 	$FFE6
   6964 00F414 FF FF FF FF FF FF FF FF    
   6964 00F41C FF FF FF FF FF FF FF FF    
   6964 00F424 FF FF FF FF FF FF FF FF    
   6964 00F42C FF FF FF FF FF FF FF FF    
   6964 00F434 FF FF FF FF FF FF FF FF    
   6964 00F43C FF FF FF FF FF FF FF FF    
   6964 00F444 FF FF FF FF FF FF FF FF    
   6964 00F44C FF FF FF FF FF FF FF FF    
   6964 00F454 FF FF FF FF FF FF FF FF    
   6964 00F45C FF FF FF FF FF FF FF FF    
   6964 00F464 FF FF FF FF FF FF FF FF    
   6964 00F46C FF FF FF FF FF FF FF FF    
   6964 00F474 FF FF FF FF FF FF FF FF    
   6964 00F47C FF FF FF FF FF FF FF FF    
   6964 00F484 FF FF FF FF FF FF FF FF    
   6964 00F48C FF FF FF FF FF FF FF FF    
   6964 00F494 FF FF FF FF FF FF FF FF    
   6964 00F49C FF FF FF FF FF FF FF FF    
   6964 00F4A4 FF FF FF FF FF FF FF FF    
   6964 00F4AC FF FF FF FF FF FF FF FF    
   6964 00F4B4 FF FF FF FF FF FF FF FF    
   6964 00F4BC FF FF FF FF FF FF FF FF    
   6964 00F4C4 FF FF FF FF FF FF FF FF    
   6964 00F4CC FF FF FF FF FF FF FF FF    
   6964 00F4D4 FF FF FF FF FF FF FF FF    
   6964 00F4DC FF FF FF FF FF FF FF FF    
   6964 00F4E4 FF FF FF FF FF FF FF FF    
   6964 00F4EC FF FF FF FF FF FF FF FF    
   6964 00F4F4 FF FF FF FF FF FF FF FF    
   6964 00F4FC FF FF FF FF FF FF FF FF    
   6964 00F504 FF FF FF FF FF FF FF FF    
   6964 00F50C FF FF FF FF FF FF FF FF    
   6964 00F514 FF FF FF FF FF FF FF FF    
   6964 00F51C FF FF FF FF FF FF FF FF    
   6964 00F524 FF FF FF FF FF FF FF FF    
   6964 00F52C FF FF FF FF FF FF FF FF    
   6964 00F534 FF FF FF FF FF FF FF FF    
   6964 00F53C FF FF FF FF FF FF FF FF    
   6964 00F544 FF FF FF FF FF FF FF FF    
   6964 00F54C FF FF FF FF FF FF FF FF    
   6964 00F554 FF FF FF FF FF FF FF FF    
   6964 00F55C FF FF FF FF FF FF FF FF    
   6964 00F564 FF FF FF FF FF FF FF FF    
   6964 00F56C FF FF FF FF FF FF FF FF    
   6964 00F574 FF FF FF FF FF FF FF FF    
   6964 00F57C FF FF FF FF FF FF FF FF    
   6964 00F584 FF FF FF FF FF FF FF FF    
   6964 00F58C FF FF FF FF FF FF FF FF    
   6964 00F594 FF FF FF FF FF FF FF FF    
   6964 00F59C FF FF FF FF FF FF FF FF    
   6964 00F5A4 FF FF FF FF FF FF FF FF    
   6964 00F5AC FF FF FF FF FF FF FF FF    
   6964 00F5B4 FF FF FF FF FF FF FF FF    
   6964 00F5BC FF FF FF FF FF FF FF FF    
   6964 00F5C4 FF FF FF FF FF FF FF FF    
   6964 00F5CC FF FF FF FF FF FF FF FF    
   6964 00F5D4 FF FF FF FF FF FF FF FF    
   6964 00F5DC FF FF FF FF FF FF FF FF    
   6964 00F5E4 FF FF FF FF FF FF FF FF    
   6964 00F5EC FF FF FF FF FF FF FF FF    
   6964 00F5F4 FF FF FF FF FF FF FF FF    
   6964 00F5FC FF FF FF FF FF FF FF FF    
   6964 00F604 FF FF FF FF FF FF FF FF    
   6964 00F60C FF FF FF FF FF FF FF FF    
   6964 00F614 FF FF FF FF FF FF FF FF    
   6964 00F61C FF FF FF FF FF FF FF FF    
   6964 00F624 FF FF FF FF FF FF FF FF    
   6964 00F62C FF FF FF FF FF FF FF FF    
   6964 00F634 FF FF FF FF FF FF FF FF    
   6964 00F63C FF FF FF FF FF FF FF FF    
   6964 00F644 FF FF FF FF FF FF FF FF    
   6964 00F64C FF FF FF FF FF FF FF FF    
   6964 00F654 FF FF FF FF FF FF FF FF    
   6964 00F65C FF FF FF FF FF FF FF FF    
   6964 00F664 FF FF FF FF FF FF FF FF    
   6964 00F66C FF FF FF FF FF FF FF FF    
   6964 00F674 FF FF FF FF FF FF FF FF    
   6964 00F67C FF FF FF FF FF FF FF FF    
   6964 00F684 FF FF FF FF FF FF FF FF    
   6964 00F68C FF FF FF FF FF FF FF FF    
   6964 00F694 FF FF FF FF FF FF FF FF    
   6964 00F69C FF FF FF FF FF FF FF FF    
   6964 00F6A4 FF FF FF FF FF FF FF FF    
   6964 00F6AC FF FF FF FF FF FF FF FF    
   6964 00F6B4 FF FF FF FF FF FF FF FF    
   6964 00F6BC FF FF FF FF FF FF FF FF    
   6964 00F6C4 FF FF FF FF FF FF FF FF    
   6964 00F6CC FF FF FF FF FF FF FF FF    
   6964 00F6D4 FF FF FF FF FF FF FF FF    
   6964 00F6DC FF FF FF FF FF FF FF FF    
   6964 00F6E4 FF FF FF FF FF FF FF FF    
   6964 00F6EC FF FF FF FF FF FF FF FF    
   6964 00F6F4 FF FF FF FF FF FF FF FF    
   6964 00F6FC FF FF FF FF FF FF FF FF    
   6964 00F704 FF FF FF FF FF FF FF FF    
   6964 00F70C FF FF FF FF FF FF FF FF    
   6964 00F714 FF FF FF FF FF FF FF FF    
   6964 00F71C FF FF FF FF FF FF FF FF    
   6964 00F724 FF FF FF FF FF FF FF FF    
   6964 00F72C FF FF FF FF FF FF FF FF    
   6964 00F734 FF FF FF FF FF FF FF FF    
   6964 00F73C FF FF FF FF FF FF FF FF    
   6964 00F744 FF FF FF FF FF FF FF FF    
   6964 00F74C FF FF FF FF FF FF FF FF    
   6964 00F754 FF FF FF FF FF FF FF FF    
   6964 00F75C FF FF FF FF FF FF FF FF    
   6964 00F764 FF FF FF FF FF FF FF FF    
   6964 00F76C FF FF FF FF FF FF FF FF    
   6964 00F774 FF FF FF FF FF FF FF FF    
   6964 00F77C FF FF FF FF FF FF FF FF    
   6964 00F784 FF FF FF FF FF FF FF FF    
   6964 00F78C FF FF FF FF FF FF FF FF    
   6964 00F794 FF FF FF FF FF FF FF FF    
   6964 00F79C FF FF FF FF FF FF FF FF    
   6964 00F7A4 FF FF FF FF FF FF FF FF    
   6964 00F7AC FF FF FF FF FF FF FF FF    
   6964 00F7B4 FF FF FF FF FF FF FF FF    
   6964 00F7BC FF FF FF FF FF FF FF FF    
   6964 00F7C4 FF FF FF FF FF FF FF FF    
   6964 00F7CC FF FF FF FF FF FF FF FF    
   6964 00F7D4 FF FF FF FF FF FF FF FF    
   6964 00F7DC FF FF FF FF FF FF FF FF    
   6964 00F7E4 FF FF FF FF FF FF FF FF    
   6964 00F7EC FF FF FF FF FF FF FF FF    
   6964 00F7F4 FF FF FF FF FF FF FF FF    
   6964 00F7FC FF FF FF FF FF FF FF FF    
   6964 00F804 FF FF FF FF FF FF FF FF    
   6964 00F80C FF FF FF FF FF FF FF FF    
   6964 00F814 FF FF FF FF FF FF FF FF    
   6964 00F81C FF FF FF FF FF FF FF FF    
   6964 00F824 FF FF FF FF FF FF FF FF    
   6964 00F82C FF FF FF FF FF FF FF FF    
   6964 00F834 FF FF FF FF FF FF FF FF    
   6964 00F83C FF FF FF FF FF FF FF FF    
   6964 00F844 FF FF FF FF FF FF FF FF    
   6964 00F84C FF FF FF FF FF FF FF FF    
   6964 00F854 FF FF FF FF FF FF FF FF    
   6964 00F85C FF FF FF FF FF FF FF FF    
   6964 00F864 FF FF FF FF FF FF FF FF    
   6964 00F86C FF FF FF FF FF FF FF FF    
   6964 00F874 FF FF FF FF FF FF FF FF    
   6964 00F87C FF FF FF FF FF FF FF FF    
   6964 00F884 FF FF FF FF FF FF FF FF    
   6964 00F88C FF FF FF FF FF FF FF FF    
   6964 00F894 FF FF FF FF FF FF FF FF    
   6964 00F89C FF FF FF FF FF FF FF FF    
   6964 00F8A4 FF FF FF FF FF FF FF FF    
   6964 00F8AC FF FF FF FF FF FF FF FF    
   6964 00F8B4 FF FF FF FF FF FF FF FF    
   6964 00F8BC FF FF FF FF FF FF FF FF    
   6964 00F8C4 FF FF FF FF FF FF FF FF    
   6964 00F8CC FF FF FF FF FF FF FF FF    
   6964 00F8D4 FF FF FF FF FF FF FF FF    
   6964 00F8DC FF FF FF FF FF FF FF FF    
   6964 00F8E4 FF FF FF FF FF FF FF FF    
   6964 00F8EC FF FF FF FF FF FF FF FF    
   6964 00F8F4 FF FF FF FF FF FF FF FF    
   6964 00F8FC FF FF FF FF FF FF FF FF    
   6964 00F904 FF FF FF FF FF FF FF FF    
   6964 00F90C FF FF FF FF FF FF FF FF    
   6964 00F914 FF FF FF FF FF FF FF FF    
   6964 00F91C FF FF FF FF FF FF FF FF    
   6964 00F924 FF FF FF FF FF FF FF FF    
   6964 00F92C FF FF FF FF FF FF FF FF    
   6964 00F934 FF FF FF FF FF FF FF FF    
   6964 00F93C FF FF FF FF FF FF FF FF    
   6964 00F944 FF FF FF FF FF FF FF FF    
   6964 00F94C FF FF FF FF FF FF FF FF    
   6964 00F954 FF FF FF FF FF FF FF FF    
   6964 00F95C FF FF FF FF FF FF FF FF    
   6964 00F964 FF FF FF FF FF FF FF FF    
   6964 00F96C FF FF FF FF FF FF FF FF    
   6964 00F974 FF FF FF FF FF FF FF FF    
   6964 00F97C FF FF FF FF FF FF FF FF    
   6964 00F984 FF FF FF FF FF FF FF FF    
   6964 00F98C FF FF FF FF FF FF FF FF    
   6964 00F994 FF FF FF FF FF FF FF FF    
   6964 00F99C FF FF FF FF FF FF FF FF    
   6964 00F9A4 FF FF FF FF FF FF FF FF    
   6964 00F9AC FF FF FF FF FF FF FF FF    
   6964 00F9B4 FF FF FF FF FF FF FF FF    
   6964 00F9BC FF FF FF FF FF FF FF FF    
   6964 00F9C4 FF FF FF FF FF FF FF FF    
   6964 00F9CC FF FF FF FF FF FF FF FF    
   6964 00F9D4 FF FF FF FF FF FF FF FF    
   6964 00F9DC FF FF FF FF FF FF FF FF    
   6964 00F9E4 FF FF FF FF FF FF FF FF    
   6964 00F9EC FF FF FF FF FF FF FF FF    
   6964 00F9F4 FF FF FF FF FF FF FF FF    
   6964 00F9FC FF FF FF FF FF FF FF FF    
   6964 00FA04 FF FF FF FF FF FF FF FF    
   6964 00FA0C FF FF FF FF FF FF FF FF    
   6964 00FA14 FF FF FF FF FF FF FF FF    
   6964 00FA1C FF FF FF FF FF FF FF FF    
   6964 00FA24 FF FF FF FF FF FF FF FF    
   6964 00FA2C FF FF FF FF FF FF FF FF    
   6964 00FA34 FF FF FF FF FF FF FF FF    
   6964 00FA3C FF FF FF FF FF FF FF FF    
   6964 00FA44 FF FF FF FF FF FF FF FF    
   6964 00FA4C FF FF FF FF FF FF FF FF    
   6964 00FA54 FF FF FF FF FF FF FF FF    
   6964 00FA5C FF FF FF FF FF FF FF FF    
   6964 00FA64 FF FF FF FF FF FF FF FF    
   6964 00FA6C FF FF FF FF FF FF FF FF    
   6964 00FA74 FF FF FF FF FF FF FF FF    
   6964 00FA7C FF FF FF FF FF FF FF FF    
   6964 00FA84 FF FF FF FF FF FF FF FF    
   6964 00FA8C FF FF FF FF FF FF FF FF    
   6964 00FA94 FF FF FF FF FF FF FF FF    
   6964 00FA9C FF FF FF FF FF FF FF FF    
   6964 00FAA4 FF FF FF FF FF FF FF FF    
   6964 00FAAC FF FF FF FF FF FF FF FF    
   6964 00FAB4 FF FF FF FF FF FF FF FF    
   6964 00FABC FF FF FF FF FF FF FF FF    
   6964 00FAC4 FF FF FF FF FF FF FF FF    
   6964 00FACC FF FF FF FF FF FF FF FF    
   6964 00FAD4 FF FF FF FF FF FF FF FF    
   6964 00FADC FF FF FF FF FF FF FF FF    
   6964 00FAE4 FF FF FF FF FF FF FF FF    
   6964 00FAEC FF FF FF FF FF FF FF FF    
   6964 00FAF4 FF FF FF FF FF FF FF FF    
   6964 00FAFC FF FF FF FF FF FF FF FF    
   6964 00FB04 FF FF FF FF FF FF FF FF    
   6964 00FB0C FF FF FF FF FF FF FF FF    
   6964 00FB14 FF FF FF FF FF FF FF FF    
   6964 00FB1C FF FF FF FF FF FF FF FF    
   6964 00FB24 FF FF FF FF FF FF FF FF    
   6964 00FB2C FF FF FF FF FF FF FF FF    
   6964 00FB34 FF FF FF FF FF FF FF FF    
   6964 00FB3C FF FF FF FF FF FF FF FF    
   6964 00FB44 FF FF FF FF FF FF FF FF    
   6964 00FB4C FF FF FF FF FF FF FF FF    
   6964 00FB54 FF FF FF FF FF FF FF FF    
   6964 00FB5C FF FF FF FF FF FF FF FF    
   6964 00FB64 FF FF FF FF FF FF FF FF    
   6964 00FB6C FF FF FF FF FF FF FF FF    
   6964 00FB74 FF FF FF FF FF FF FF FF    
   6964 00FB7C FF FF FF FF FF FF FF FF    
   6964 00FB84 FF FF FF FF FF FF FF FF    
   6964 00FB8C FF FF FF FF FF FF FF FF    
   6964 00FB94 FF FF FF FF FF FF FF FF    
   6964 00FB9C FF FF FF FF FF FF FF FF    
   6964 00FBA4 FF FF FF FF FF FF FF FF    
   6964 00FBAC FF FF FF FF FF FF FF FF    
   6964 00FBB4 FF FF FF FF FF FF FF FF    
   6964 00FBBC FF FF FF FF FF FF FF FF    
   6964 00FBC4 FF FF FF FF FF FF FF FF    
   6964 00FBCC FF FF FF FF FF FF FF FF    
   6964 00FBD4 FF FF FF FF FF FF FF FF    
   6964 00FBDC FF FF FF FF FF FF FF FF    
   6964 00FBE4 FF FF FF FF FF FF FF FF    
   6964 00FBEC FF FF FF FF FF FF FF FF    
   6964 00FBF4 FF FF FF FF FF FF FF FF    
   6964 00FBFC FF FF FF FF FF FF FF FF    
   6964 00FC04 FF FF FF FF FF FF FF FF    
   6964 00FC0C FF FF FF FF FF FF FF FF    
   6964 00FC14 FF FF FF FF FF FF FF FF    
   6964 00FC1C FF FF FF FF FF FF FF FF    
   6964 00FC24 FF FF FF FF FF FF FF FF    
   6964 00FC2C FF FF FF FF FF FF FF FF    
   6964 00FC34 FF FF FF FF FF FF FF FF    
   6964 00FC3C FF FF FF FF FF FF FF FF    
   6964 00FC44 FF FF FF FF FF FF FF FF    
   6964 00FC4C FF FF FF FF FF FF FF FF    
   6964 00FC54 FF FF FF FF FF FF FF FF    
   6964 00FC5C FF FF FF FF FF FF FF FF    
   6964 00FC64 FF FF FF FF FF FF FF FF    
   6964 00FC6C FF FF FF FF FF FF FF FF    
   6964 00FC74 FF FF FF FF FF FF FF FF    
   6964 00FC7C FF FF FF FF FF FF FF FF    
   6964 00FC84 FF FF FF FF FF FF FF FF    
   6964 00FC8C FF FF FF FF FF FF FF FF    
   6964 00FC94 FF FF FF FF FF FF FF FF    
   6964 00FC9C FF FF FF FF FF FF FF FF    
   6964 00FCA4 FF FF FF FF FF FF FF FF    
   6964 00FCAC FF FF FF FF FF FF FF FF    
   6964 00FCB4 FF FF FF FF FF FF FF FF    
   6964 00FCBC FF FF FF FF FF FF FF FF    
   6964 00FCC4 FF FF FF FF FF FF FF FF    
   6964 00FCCC FF FF FF FF FF FF FF FF    
   6964 00FCD4 FF FF FF FF FF FF FF FF    
   6964 00FCDC FF FF FF FF FF FF FF FF    
   6964 00FCE4 FF FF FF FF FF FF FF FF    
   6964 00FCEC FF FF FF FF FF FF FF FF    
   6964 00FCF4 FF FF FF FF FF FF FF FF    
   6964 00FCFC FF FF FF FF FF FF FF FF    
   6964 00FD04 FF FF FF FF FF FF FF FF    
   6964 00FD0C FF FF FF FF FF FF FF FF    
   6964 00FD14 FF FF FF FF FF FF FF FF    
   6964 00FD1C FF FF FF FF FF FF FF FF    
   6964 00FD24 FF FF FF FF FF FF FF FF    
   6964 00FD2C FF FF FF FF FF FF FF FF    
   6964 00FD34 FF FF FF FF FF FF FF FF    
   6964 00FD3C FF FF FF FF FF FF FF FF    
   6964 00FD44 FF FF FF FF FF FF FF FF    
   6964 00FD4C FF FF FF FF FF FF FF FF    
   6964 00FD54 FF FF FF FF FF FF FF FF    
   6964 00FD5C FF FF FF FF FF FF FF FF    
   6964 00FD64 FF FF FF FF FF FF FF FF    
   6964 00FD6C FF FF FF FF FF FF FF FF    
   6964 00FD74 FF FF FF FF FF FF FF FF    
   6964 00FD7C FF FF FF FF FF FF FF FF    
   6964 00FD84 FF FF FF FF FF FF FF FF    
   6964 00FD8C FF FF FF FF FF FF FF FF    
   6964 00FD94 FF FF FF FF FF FF FF FF    
   6964 00FD9C FF FF FF FF FF FF FF FF    
   6964 00FDA4 FF FF FF FF FF FF FF FF    
   6964 00FDAC FF FF FF FF FF FF FF FF    
   6964 00FDB4 FF FF FF FF FF FF FF FF    
   6964 00FDBC FF FF FF FF FF FF FF FF    
   6964 00FDC4 FF FF FF FF FF FF FF FF    
   6964 00FDCC FF FF FF FF FF FF FF FF    
   6964 00FDD4 FF FF FF FF FF FF FF FF    
   6964 00FDDC FF FF FF FF FF FF FF FF    
   6964 00FDE4 FF FF FF FF FF FF FF FF    
   6964 00FDEC FF FF FF FF FF FF FF FF    
   6964 00FDF4 FF FF FF FF FF FF FF FF    
   6964 00FDFC FF FF FF FF FF FF FF FF    
   6964 00FE04 FF FF FF FF FF FF FF FF    
   6964 00FE0C FF FF FF FF FF FF FF FF    
   6964 00FE14 FF FF FF FF FF FF FF FF    
   6964 00FE1C FF FF FF FF FF FF FF FF    
   6964 00FE24 FF FF FF FF FF FF FF FF    
   6964 00FE2C FF FF FF FF FF FF FF FF    
   6964 00FE34 FF FF FF FF FF FF FF FF    
   6964 00FE3C FF FF FF FF FF FF FF FF    
   6964 00FE44 FF FF FF FF FF FF FF FF    
   6964 00FE4C FF FF FF FF FF FF FF FF    
   6964 00FE54 FF FF FF FF FF FF FF FF    
   6964 00FE5C FF FF FF FF FF FF FF FF    
   6964 00FE64 FF FF FF FF FF FF FF FF    
   6964 00FE6C FF FF FF FF FF FF FF FF    
   6964 00FE74 FF FF FF FF FF FF FF FF    
   6964 00FE7C FF FF FF FF FF FF FF FF    
   6964 00FE84 FF FF FF FF FF FF FF FF    
   6964 00FE8C FF FF FF FF FF FF FF FF    
   6964 00FE94 FF FF FF FF FF FF FF FF    
   6964 00FE9C FF FF FF FF FF FF FF FF    
   6964 00FEA4 FF FF FF FF FF FF FF FF    
   6964 00FEAC FF FF FF FF FF FF FF FF    
   6964 00FEB4 FF FF FF FF FF FF FF FF    
   6964 00FEBC FF FF FF FF FF FF FF FF    
   6964 00FEC4 FF FF FF FF FF FF FF FF    
   6964 00FECC FF FF FF FF FF FF FF FF    
   6964 00FED4 FF FF FF FF FF FF FF FF    
   6964 00FEDC FF FF FF FF FF FF FF FF    
   6964 00FEE4 FF FF FF FF FF FF FF FF    
   6964 00FEEC FF FF FF FF FF FF FF FF    
   6964 00FEF4 FF FF FF FF FF FF FF FF    
   6964 00FEFC FF FF FF FF FF FF FF FF    
   6964 00FF04 FF FF FF FF FF FF FF FF    
   6964 00FF0C FF FF FF FF FF FF FF FF    
   6964 00FF14 FF FF FF FF FF FF FF FF    
   6964 00FF1C FF FF FF FF FF FF FF FF    
   6964 00FF24 FF FF FF FF FF FF FF FF    
   6964 00FF2C FF FF FF FF FF FF FF FF    
   6964 00FF34 FF FF FF FF FF FF FF FF    
   6964 00FF3C FF FF FF FF FF FF FF FF    
   6964 00FF44 FF FF FF FF FF FF FF FF    
   6964 00FF4C FF FF FF FF FF FF FF FF    
   6964 00FF54 FF FF FF FF FF FF FF FF    
   6964 00FF5C FF FF FF FF FF FF FF FF    
   6964 00FF64 FF FF FF FF FF FF FF FF    
   6964 00FF6C FF FF FF FF FF FF FF FF    
   6964 00FF74 FF FF FF FF FF FF FF FF    
   6964 00FF7C FF FF FF FF FF FF FF FF    
   6964 00FF84 FF FF FF FF FF FF FF FF    
   6964 00FF8C FF FF FF FF FF FF FF FF    
   6964 00FF94 FF FF FF FF FF FF FF FF    
   6964 00FF9C FF FF FF FF FF FF FF FF    
   6964 00FFA4 FF FF FF FF FF FF FF FF    
   6964 00FFAC FF FF FF FF FF FF FF FF    
   6964 00FFB4 FF FF FF FF FF FF FF FF    
   6964 00FFBC FF FF FF FF FF FF FF FF    
   6964 00FFC4 FF FF FF FF FF FF FF FF    
   6964 00FFCC FF FF FF FF FF FF FF FF    
   6964 00FFD4 FF FF FF FF FF FF FF FF    
   6964 00FFDC FF FF FF FF FF FF FF FF    
   6964 00FFE4 FF FF                      
   6965 00FFE6 97 E9                        	dw		BrkRout
                                           
   6967 00FFE8 FF FF FF FF FF FF            	.org	$FFEE		; IRQ vector
   6968 00FFEE 79 E9                        	dw		IRQRout
                                           
   6970 00FFF0 FF FF FF FF FF FF FF FF      	.org	$FFFC
   6970 00FFF8 FF FF FF FF                
   6971 00FFFC 00 E0                        	dw		$E000

Checksum=F5C42DFB

Number of instructions processed: 2505
Number of opcode bytes: 5099
Bytes per instruction: 2.035529 (16.284232 bits)
Clock cycle count: 4712
Clocks per instruction: 1.881038

The above statistics are only estimates.

	The CPI assumes data memory access requires two clock cycles and instruction
	access is single cycle. The actual CPI may be higher if there are memory wait 
	states, or lower if data is found in the cache.
