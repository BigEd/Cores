0 error(s), 84 warning(s) unlisted in pass 1
                      ; ============================================================================
                      ;        __
                      ;   \\__/ o\    (C) 2013  Robert Finch, Stratford
                      ;    \  __ /    All rights reserved.
                      ;     \/_//     robfinch<remove>@opencores.org
                      ;       ||
                      ;  
                      ;
                      ; This source file is free software: you can redistribute it and/or modify 
                      ; it under the terms of the GNU Lesser General Public License as published 
                      ; by the Free Software Foundation, either version 3 of the License, or     
                      ; (at your option) any later version.                                      
                      ;                                                                          
                      ; This source file is distributed in the hope that it will be useful,      
                      ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                      ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                      ; GNU General Public License for more details.                             
                      ;                                                                          
                      ; You should have received a copy of the GNU General Public License        
                      ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                      ;                                                                          
                      ; ============================================================================
                      ;
                      CR      EQU     $0D             ;ASCII equates
                      LF      EQU     $0A
                      TAB     EQU     $09
                      CTRLC   EQU     $03
                      CTRLH   EQU     $08
                      CTRLI   EQU     $09
                      CTRLJ   EQU     $0A
                      CTRLK   EQU     $0B
                      CTRLM   EQU $0D
                      CTRLS   EQU     $13
                      CTRLX   EQU     $18
                      XON             EQU     $11
                      XOFF    EQU     $13
 
                      MAX_TASKNO      EQU 63
                      DRAM_BASE       EQU $10000000
 
                      ScreenLocation          EQU             $10
                      ColorCodeLocation       EQU             $14
                      ScreenLocation2         EQU             $18
                      BlkcpySrc                       EQU             $1C
                      BlkcpyDst                       EQU             $20
                      Strptr                          EQU             $24
                      PICptr                          EQU             $28
 
                      ; Task control blocks, room for 256 tasks
                      TCB_NxtRdy              EQU             $17EF8400       ; next task on ready / timeout list
                      TCB_PrvRdy              EQU             $17EF8500       ; previous task on ready / timeout list
                      TCB_NxtTCB              EQU             $17EF8600
                      TCB_Timeout             EQU             $17EF8700
                      TCB_Priority    EQU             $17EF8800
                      TCB_MSGPTR_D1   EQU             $17EF8900
                      TCB_MSGPTR_D2   EQU             $17EF8A00
                      TCB_hJCB                EQU             $17EF8B00
                      TCB_Status              EQU             $17EF8C00
                      TCB_CursorRow   EQU             $17EF4400
                      TCB_CursorCol   EQU             $17EF4500
                      TCB_hWaitMbx    EQU             $17EF4600       ; handle of mailbox task is waiting at
                      TCB_mbq_next    EQU             $17EF4700       ; mailbox queue next
                      TCB_mbq_prev    EQU             $17EF4800       ; mailbox queue previous
                      TCB_iof_next    EQU             $17EF4900
                      TCB_iof_prev    EQU             $17EF4A00
                      TCB_SP8Save             EQU             $17EF4B00       ; TCB_SP8Save area 
                      TCB_SPSave              EQU             $17EF4C00       ; TCB_SPSave area
                      TCB_ABS8Save    EQU             $17EF4D00
                      TCB_mmu_map             EQU             $17EF4E00
 
                      KeybdHead               EQU             $17EFA800
                      KeybdTail               EQU             $17EFA900
                      KeybdEcho               EQU             $17EFAA00
                      KeybdBad                EQU             $17EFAB00
                      KeybdAck                EQU             $17EFAC00
                      KeybdLocks              EQU             $17EFAD00
                      KeybdBuffer             EQU             $17EFB000       ; buffer is 16 chars
 
                      LEDS            EQU             $FFDC0600
                      TEXTSCR         EQU             $FFD00000
                      TEXTREG         EQU             $FFDA0000
                      TEXT_COLS       EQU             0
                      TEXT_ROWS       EQU             2
                      TEXT_CURPOS     EQU             22
                      KEYBD           EQU             $FFDC0000
                      KEYBDCLR        EQU             $FFDC0002
                      PIC                     EQU             $FFDC0F00
 
                      BIOS_SCREENS    EQU     $17000000       ; $17000000 to $171FFFFF
 
                      ; EhBASIC vars:
                      ;
                      NmiBase         EQU             $DC
                      IrqBase         EQU             $DF
 
                      QNdx0           EQU             $780
                      QNdx1           EQU             QNdx0+2
                      QNdx2           EQU             QNdx1+2
                      QNdx3           EQU             QNdx2+2
                      QNdx4           EQU             QNdx3+2
                      FreeTCB         EQU             QNdx4+2
                      TimeoutList     EQU             FreeTCB+2
                      RunningTCB              EQU             TimeoutList+2
                      FreeMbx         EQU             RunningTCB + 2
                      nMailbox        EQU             FreeMbx + 2
                      FreeMsg         EQU             nMailbox + 2
                      nMsgBlk         EQU             FreeMsg + 2
 
                      ; The IO focus list is a doubly linked list formed into a ring.
                      ;
                      IOFocusNdx      EQU             nMsgBlk + 2
                      IrqSource       EQU             $79A
 
                      CharColor       EQU             $7C0
                      ScreenColor     EQU             $7C2
                      CursorFlash     EQU             $7C4
                      IRQFlag         EQU             $7C6
 
                      CharOutVec      EQU             $800
                      CharInVec       EQU             $804
 
                      ; Register save area for monitor
                      mon_DSAVE       EQU             $900
                      mon_XSAVE       EQU             $902
                      mon_YSAVE       EQU             $904
                      mon_USAVE       EQU             $906
                      mon_SSAVE       EQU             $908
                      mon_PCSAVE      EQU             $90A
                      mon_DPRSAVE     EQU             $90E
                      mon_CCRSAVE     EQU             $90F
 
                      mon_numwka      EQU             $910
                      mon_r1          EQU             $904
                      mon_r2          EQU             $908
 
                              org             $0000D0AF
                      far XBLANK
 0000D0AF 8620                    lda             #' '
 0000D0B1 BDF621                  jsr             OUTCH
 0000D0B4 38                      rtf
 
                              org             $0000D0D2
                      far CRLF
 0000D0D2 860D                    lda             #CR
 0000D0D4 BDF621                  jsr             OUTCH
 0000D0D7 860A                    lda             #LF
 0000D0D9 BDF621                  jsr             OUTCH
 0000D0DC 38                      rtf
 
                              org             $0000D1DC
                      far ONEKEY
 0000D1DC 156E9F0804              jmp             far [CharInVec]
 
                              org             $0000D2C1
                      far LETTER
 0000D2C1 BDF621                  jsr             OUTCH
 0000D2C4 38                      rtf
 
                              org             $0000D2CE
                      far HEX2
 0000D2CE BDF5A6                  jsr             DispByteAsHex
 0000D2D1 38                      rtf
                      far HEX4
 0000D2D2 BDF59D                  jsr             DispWordAsHex
 0000D2D5 38                      rtf
 
                              org             $0000F000
 0000F000 F667                    FDB MonitorNear
 0000F002 F0D3                    FDB DumRts      ;       NEXTCMD
 0000F004 F5ED                    FDB INCH
 0000F006 F606                    FDB INCHE
 0000F008 F60A                    FDB INCHEK
 0000F00A F621                    FDB OUTCH
 0000F00C F593                    FDB PDATA
 0000F00E F586                    FDB PCRLF
 0000F010 F582                    FDB PSTRNG
 0000F012 F0D3                    FDB DumRts                      ; LRA
 0000F014 F0D3                    FDB DumRts
 0000F016 F0D3                    FDB DumRts
 0000F018 F0D3                    FDB DumRts
 0000F01A F0D3                    FDB DumRts                      ; VINIZ
 0000F01C F519                    FDB DisplayCharNear     ;       VOUTCH
 0000F01E F0D3                    FDB DumRts                      ; ACINIZ
 0000F020 F0D3                    FDB DumRts                      ; AOUTCH
 
                      start:
 0000F022 8601                    lda             #1
 0000F024 15B7FFDC0600            sta             LEDS
 0000F02A 328F3FFF                leas    $3FFF
 
                              ; initialize interrupt controller
                              ; first, zero out all the vectors
 0000F02E 8E0040                  ldx             #64
                      st1:
 0000F031 6F8AFFDC0F00            clr             PIC,x
 0000F037 3001                    leax    1,x
 0000F039 8C0080                  cmpx    #128
 0000F03C 25F3                    blo             st1
                              ; set the irq routine vector
 0000F03E CC0000                  ldd             #>irq_rout
 0000F041 15FDFFDC0F48            std             PIC+72
 0000F047 CCF9B3                  ldd             #<irq_rout
 0000F04A 15FDFFDC0F4A            std             PIC+74
 0000F050 8604                    lda             #$04                    ; make the timer interrupt edge sensitive
 0000F052 15B7FFDC0F04            sta             PIC+4                   ; reg #4 is the edge sensitivity setting
 0000F058 15B7FFDC0F00            sta             PIC                             ; reg #0 is interrupt enable
 
 0000F05E 1CEF                    andcc   #$EF                    ; unmask irq
 0000F060 CC00CE                  ldd             #$CE
 0000F063 FD07C2                  std             ScreenColor
 0000F066 FD07C0                  std             CharColor
 0000F069 CF0000F1FA              jsr             ClearScreen
 0000F06E BDF367                  jsr             HomeCursor
 0000F071 CCF40C                  ldd             #DisplayChar
 0000F074 FD0802                  std             CharOutVec+2
 0000F077 CC0000                  ldd             #DisplayChar >> 16
 0000F07A FD0800                  std             CharOutVec
 0000F07D CCF656                  ldd             #KeybdGetCharDirectFar
 0000F080 FD0806                  std             CharInVec+2
 0000F083 CC0000                  ldd             #KeybdGetCharDirectFar >> 16
 0000F086 FD0804                  std             CharInVec
 0000F089 CCF0A3                  ldd             #<msgStartup
 0000F08C DD26                    std             Strptr+2
 0000F08E CC0000                  ldd             #>msgStartup
 0000F091 DD24                    std             Strptr
 0000F093 8605                    lda             #5
 0000F095 15B7FFDC0600            sta             LEDS
 0000F09B CF0000F565              jsr             DisplayString
 0000F0A0 7EF66B                  jmp             Monitor
 
                      msgStartup
 0000F0A3 52544636383039          fcb             "RTF6809 System Starting.",CR,LF,0
 0000F0AA 2053797374656D
 0000F0B1 20537461727469
 0000F0B8 6E672E0D0A00
 
                      ;------------------------------------------------------------------------------
                      ; Convert ASCII character to screen display character.
                      ; Parameter
                      ;       acca = ascii character
                      ; Returns:
                      ;       d = screen character
                      ;------------------------------------------------------------------------------
                      ;
                      AsciiToScreen:
 0000F0BE 5F                      clrb
 0000F0BF 8141                    cmpa    #'A'
 0000F0C1 250E                    blo             atoscr1
 0000F0C3 815A                    cmpa    #'Z'
 0000F0C5 230A                    bls             atoscr1
 0000F0C7 817A                    cmpa    #'z'
 0000F0C9 2206                    bhi             atoscr1
 0000F0CB 8161                    cmpa    #'a'
 0000F0CD 2502                    blo             atoscr1
 0000F0CF 8060                    suba    #$60
                      atoscr1:
 0000F0D1 CA01                    orb             #$1
                      DumRts:
 0000F0D3 39                      rts
 
                      ;------------------------------------------------------------------------------
                      ; Convert screen character to ascii character
                      ;------------------------------------------------------------------------------
                      ;
                      ScreenToAscii:
 0000F0D4 811A                    cmpa    #26
 0000F0D6 2202                    bhi             stasc1
 0000F0D8 8B60                    adda    #$60
                      stasc1:
 0000F0DA 39                      rts
 
                      ;------------------------------------------------------------------------------
                      ;------------------------------------------------------------------------------
                      ShiftLeft5:
 0000F0DB 58                      aslb
 0000F0DC 49                      rola
 0000F0DD 58                      aslb
 0000F0DE 49                      rola
 0000F0DF 58                      aslb
 0000F0E0 49                      rola
 0000F0E1 58                      aslb
 0000F0E2 49                      rola
 0000F0E3 58                      aslb
 0000F0E4 49                      rola
 0000F0E5 39                      rts
 
                      ;------------------------------------------------------------------------------
                      ;------------------------------------------------------------------------------
                      ;
                      BlockCopyWords:
 0000F0E6 108E0000                ldy             #0
                      bcw1:
 0000F0EA 151BECB9001C            ldd             far [BlkcpySrc],y
 0000F0F0 151BEDB90020            std             far [BlkcpyDst],y
 0000F0F6 3122                    leay    2,y
 0000F0F8 301F                    leax    -1,x
 0000F0FA 26EE                    bne             bcw1
 0000F0FC 39                      rts
 
                      ;------------------------------------------------------------------------------
                      ;------------------------------------------------------------------------------
                      ;
                      CopyVirtualScreenToScreen
 0000F0FD 3436                    pshs    d,x,y
 0000F0FF FC0798                  ldd             IOFocusNdx                      ; compute virtual screen location
 0000F102 2B59                    bmi             cvss3
                              ; 8192 bytes per screen
 0000F104 0F1F                    clr             BlkcpySrc+3
 0000F106 0F1C                    clr             BlkcpySrc
 0000F108 BDF0DB                  jsr             ShiftLeft5
*** warning 1: Long branch within short branch range could be optimized
 0000F10B DD1D                    std             BlkcpySrc+1
 
                              ; add in screens array base address
 0000F10D DC1E                    ldd             BlkcpySrc+2
 0000F10F C30000                  addd    #<BIOS_SCREENS
 0000F112 DD1E                    std             BlkcpySrc+2
 0000F114 DC1C                    ldd             BlkcpySrc
 0000F116 C900                    adcb    #0
 0000F118 8900                    adca    #0
 0000F11A C31700                  addd    #>BIOS_SCREENS
 0000F11D DD1C                    std             BlkcpySrc
 
                              ; set destination pointer
 0000F11F CC0000                  ldd             #<TEXTSCR
 0000F122 DD22                    std             BlkcpyDst+2
 0000F124 CCFFD0                  ldd             #>TEXTSCR
 0000F127 DD20                    std             BlkcpyDst
 
 0000F129 8E07FF                  ldx             #2047                           ; number of words to copy-1
 0000F12C BDF0E6                  jsr             BlockCopyWords
*** warning 1: Long branch within short branch range could be optimized
 
                              ; now copy the color codes
 0000F12F FC0798                  ldd             IOFocusNdx                      ; compute virtual screen location
                              ; 8192 bytes per screen
 0000F132 0F1F                    clr             BlkcpySrc+3
 0000F134 0F1C                    clr             BlkcpySrc
 0000F136 BDF0DB                  jsr             ShiftLeft5
*** warning 1: Long branch within short branch range could be optimized
 0000F139 DD1D                    std             BlkcpySrc+1
 
                              ; add in screens array base address
 0000F13B DC1E                    ldd             BlkcpySrc+2
 0000F13D C31000                  addd    #<BIOS_SCREENS+4096
 0000F140 DD1E                    std     BlkcpySrc+2
 0000F142 DC1C                    ldd             BlkcpySrc
 0000F144 C900                    adcb    #0
 0000F146 8900                    adca    #0
 0000F148 C31700                  addd    #>BIOS_SCREENS+4096
 0000F14B DD1C                    std             BlkcpySrc
 
                              ; set destination pointer
 0000F14D CC0000                  ldd             #<TEXTSCR+$10000
 0000F150 DD22                    std             BlkcpyDst+2
 0000F152 CCFFD1                  ldd             #>TEXTSCR+$10000
 0000F155 DD20                    std             BlkcpyDst
 
 0000F157 8E07FF                  ldx             #2047                           ; number of words to copy-1
 0000F15A BDF0E6                  jsr             BlockCopyWords
*** warning 1: Long branch within short branch range could be optimized
 
                      cvss3:
                              ; reset the cursor position in the text controller
 0000F15D 10BE0798                ldy             IOFocusNdx
 0000F161 E6AA17EF4400            ldb             TCB_CursorRow,y
 0000F167 15B6FFDA0000            lda             TEXTREG+TEXT_COLS
 0000F16D 3D                      mul
 0000F16E 1F01                    tfr             d,x
 0000F170 E6AA17EF4500            ldb             TCB_CursorCol,y
 0000F176 3A                      abx
 0000F177 15BFFFDA0016            stx             TEXTREG+TEXT_CURPOS
 0000F17D 3536                    puls    d,x,y
 0000F17F 39                      rts
 
                      CopyScreenToVirtualScreen
 0000F180 3436                    pshs    d,x,y
 0000F182 FC0798                  ldd             IOFocusNdx                      ; compute virtual screen location
 0000F185 2B5B                    bmi             csvs3
                              ; 8192 bytes per screen
 0000F187 0F23                    clr             BlkcpyDst+3
 0000F189 0F20                    clr             BlkcpyDst
 0000F18B BDF0DB                  jsr             ShiftLeft5
 0000F18E DD21                    std             BlkcpyDst+1
 
                              ; add in screens array base address
 0000F190 DC22                    ldd             BlkcpyDst+2
 0000F192 C30000                  addd    #<BIOS_SCREENS
 0000F195 DD22                    std             BlkcpyDst+2
 0000F197 DC20                    ldd             BlkcpyDst
 0000F199 C900                    adcb    #0
 0000F19B 8900                    adca    #0
 0000F19D C31700                  addd    #>BIOS_SCREENS
 0000F1A0 DD20                    std             BlkcpyDst
 
                              ; set destination pointer
 0000F1A2 CC0000                  ldd             #<TEXTSCR
 0000F1A5 DD1E                    std             BlkcpySrc+2
 0000F1A7 CCFFD0                  ldd             #>TEXTSCR
 0000F1AA DD1C                    std             BlkcpySrc
 
 0000F1AC 8E07FF                  ldx             #2047                           ; number of words to copy-1
 0000F1AF BDF0E6                  jsr             BlockCopyWords
 
                              ; now copy the color codes
 0000F1B2 FC0798                  ldd             IOFocusNdx                      ; compute virtual screen location
                              ; 8192 bytes per screen
 0000F1B5 0F23                    clr             BlkcpyDst+3
 0000F1B7 0F20                    clr             BlkcpyDst
 0000F1B9 BDF0DB                  jsr             ShiftLeft5
 0000F1BC DD21                    std             BlkcpyDst+1
 
                              ; add in screens array base address
 0000F1BE DC22                    ldd             BlkcpyDst+2
 0000F1C0 C31000                  addd    #<BIOS_SCREENS+4096
 0000F1C3 DD22                    std             BlkcpyDst+2
 0000F1C5 DC20                    ldd             BlkcpyDst
 0000F1C7 C900                    adcb    #0
 0000F1C9 8900                    adca    #0
 0000F1CB C31700                  addd    #>BIOS_SCREENS+4096
 0000F1CE DD20                    std             BlkcpyDst
 
                              ; set destination pointer
 0000F1D0 CC0000                  ldd             #<TEXTSCR+$10000
 0000F1D3 DD1E                    std             BlkcpySrc+2
 0000F1D5 CCFFD1                  ldd             #>TEXTSCR+$10000
 0000F1D8 DD1C                    std             BlkcpySrc
 
 0000F1DA 8E07FF                  ldx             #2047                           ; number of words to copy-1
 0000F1DD BDF0E6                  jsr             BlockCopyWords
 
 0000F1E0 3536                    puls    d,x,y
                      csvs3:
 0000F1E2 39                      rts
 
                      ;------------------------------------------------------------------------------
                      ;------------------------------------------------------------------------------
 0000F1E3 54455854534352          fcb             "TEXTSCR "
 0000F1EA 20
 0000F1EB F1F5                    fcw             TextOpen
 0000F1ED F1F6                    fcw             TextClose
 0000F1EF F1F7                    fcw             TextRead
 0000F1F1 F1F8                    fcw             TextWrite
 0000F1F3 F1F9                    fcw             TextSeek
 
                      TextOpen:
 0000F1F5 39                      rts
                      TextClose:
 0000F1F6 39                      rts
                      TextRead:
 0000F1F7 39                      rts
                      TextWrite:
 0000F1F8 39                      rts
                      TextSeek:
 0000F1F9 39                      rts
 
                      ;------------------------------------------------------------------------------
                      ; Clear the screen and the screen color memory
                      ; We clear the screen to give a visual indication that the system
                      ; is working at all.
                      ;------------------------------------------------------------------------------
                      ;
                      far ClearScreen:
 0000F1FA 3476                    pshs    d,x,y,u
 0000F1FC 8602                    lda             #2
 0000F1FE 15B7FFDC0600            sta             LEDS
 0000F204 15B6FFDA0000            lda             TEXTREG+TEXT_COLS       ; calc number to clear
 0000F20A 15F6FFDA0002            ldb             TEXTREG+TEXT_ROWS
 0000F210 3D                      mul                                                     ; d = # chars to clear
 0000F211 1F01                    tfr             d,x
 0000F213 1F03                    tfr             d,u
 0000F215 BDF2D7                  jsr             GetScreenLocation
 0000F218 8603                    lda             #3
 0000F21A 15B7FFDC0600            sta             LEDS
 0000F220 8620                    lda             #' '                            ; space char
 0000F222 BDF0BE                  jsr             AsciiToScreen
 0000F225 108E0000                ldy             #0
                      cs1
 0000F229 151BEDB90010            std             far [ScreenLocation],y  ; clear the memory
 0000F22F 3122                    leay    2,y                                     ; increment y
 0000F231 301F                    leax    -1,x                            ; decrement x
 0000F233 26F4                    bne             cs1
 0000F235 8604                    lda             #4
 0000F237 15B7FFDC0600            sta             LEDS
 0000F23D BDF32E                  jsr             GetColorCodeLocation
 0000F240 FC07C2                  ldd             ScreenColor                     ; x = value to use
 0000F243 1E89                    exg             a,b
 0000F245 108E0000                ldy             #0
 0000F249 1F31                    tfr             u,x
                      cs2
 0000F24B 151BEDB90014            std             far [ColorCodeLocation],y       ; clear the memory
 0000F251 3122                    leay    2,y                                     ; increment y
 0000F253 301F                    leax    -1,x                            ; decrement x
 0000F255 26F4                    bne             cs2
 0000F257 3576                    puls    d,x,y,u
 0000F259 38                      rtf
 
                      ;------------------------------------------------------------------------------
                      ; Scroll text on the screen upwards
                      ;------------------------------------------------------------------------------
                      ;
                      far ScrollUp:
 0000F25A 3476                    pshs    d,x,y,u
 0000F25C 15B6FFDA0000            lda             TEXTREG+TEXT_COLS       ; acc = # text columns
 0000F262 15F6FFDA0002            ldb             TEXTREG+TEXT_ROWS
 0000F268 5A                      decb                                            ; one less row
 0000F269 3D                      mul                                                     ; calc number of chars to scroll
 0000F26A 1F02                    tfr             d,y                                     ; y = count of chars to move
 0000F26C BDF2D7                  jsr             GetScreenLocation
 0000F26F BDF32E                  jsr             GetColorCodeLocation
 0000F272 CE0000                  ldu             #0                                      ; u = index to target row
 0000F275 8E0000                  ldx             #0
 0000F278 15F6FFDA0000            ldb             TEXTREG+TEXT_COLS
 0000F27E 3A                      abx                                                     ; x = index to source row
                      scrup1:
 0000F27F 151BEC990010            ldd             far [ScreenLocation],x          ; move character
 0000F285 151BEDD90010            std             far [ScreenLocation],u
 0000F28B 151BEC990014            ldd             far [ColorCodeLocation],x       ; and move color code
 0000F291 151BEDD90014            std             far [ColorCodeLocation],u
 0000F297 3002                    leax    2,x
 0000F299 3342                    leau    2,u
 0000F29B 313F                    leay    -1,y
 0000F29D 26E0                    bne             scrup1
 0000F29F 15B6FFDA0002            lda             TEXTREG+TEXT_ROWS
 0000F2A5 4A                      deca
 0000F2A6 CF0000F2AE              jsr             BlankLine
 0000F2AB 3576                    puls    d,x,y,u
 0000F2AD 38                      rtf
 
                      ;------------------------------------------------------------------------------
                      ; Blank out a line on the display
                      ; line number to blank is in acca
                      ;------------------------------------------------------------------------------
                      ;
                      far BlankLine:
 0000F2AE 3436                    pshs    d,x,y
 0000F2B0 15F6FFDA0000            ldb             TEXTREG+TEXT_COLS       ; b = # chars to blank out from video controller
 0000F2B6 3D                      mul                                                     ; d = screen index (row# * #cols)
 0000F2B7 BDF2D7                  jsr             GetScreenLocation
 0000F2BA 1F02                    tfr             d,y
 0000F2BC 8620                    lda             #' '
 0000F2BE BDF0BE                  jsr             AsciiToScreen
 0000F2C1 1F01                    tfr             d,x
 0000F2C3 15F6FFDA0000            ldb             TEXTREG+TEXT_COLS       ; b = # chars to blank out from video controller
                      blnkln1:
 0000F2C9 151BAFB90010            stx             far [ScreenLocation],y
 0000F2CF 3122                    leay    2,y
 0000F2D1 5A                      decb
 0000F2D2 26F5                    bne             blnkln1
 0000F2D4 3536                    puls    d,x,y
 0000F2D6 38                      rtf
 
                      ;------------------------------------------------------------------------------
                      ; Get the location of the screen and screen attribute memory. The location
                      ; depends on whether or not the task has the output focus.
                      ;------------------------------------------------------------------------------
                      ; private
                      GetScreenLocation:
 0000F2D7 3406                    pshs    d
 0000F2D9 860A                    lda             #10
 0000F2DB 15B7FFDC0600            sta             LEDS
 0000F2E1 FC078E                  ldd             RunningTCB
 0000F2E4 10B30798                cmpd    IOFocusNdx
 0000F2E8 2727                    beq             gsl1
                              ; 8192 words per screen
 0000F2EA 4F                      clra
 0000F2EB BDF0DB                  jsr             ShiftLeft5
 0000F2EE 0F13                    clr             ScreenLocation+3        ; low 8 bits=0
 0000F2F0 DD11                    std             ScreenLocation+1        ; bits 23:8
 0000F2F2 0F10                    clr             ScreenLocation
 0000F2F4 DC12                    ldd             ScreenLocation+2
 0000F2F6 C30000                  addd    #<BIOS_SCREENS
 0000F2F9 DD12                    std             ScreenLocation+2
 0000F2FB DC10                    ldd             ScreenLocation
 0000F2FD C900                    adcb    #0
 0000F2FF 8900                    adca    #0
 0000F301 C31700                  addd    #>BIOS_SCREENS
 0000F304 DD10                    std             ScreenLocation
 0000F306 860D                    lda             #13
 0000F308 15B7FFDC0600            sta             LEDS
 0000F30E 3506                    puls    d
 0000F310 39                      rts
                      gsl1:
 0000F311 860B                    lda             #11
 0000F313 15B7FFDC0600            sta             LEDS
 0000F319 CCFFD0                  ldd             #>TEXTSCR
 0000F31C DD10                    std             ScreenLocation
 0000F31E CC0000                  ldd             #<TEXTSCR
 0000F321 DD12                    std             ScreenLocation+2
 0000F323 860C                    lda             #12
 0000F325 15B7FFDC0600            sta             LEDS
 0000F32B 3506                    puls    d
 0000F32D 39                      rts
 
                      GetColorCodeLocation:
 0000F32E 3406                    pshs    d
 0000F330 FC078E                  ldd             RunningTCB
 0000F333 10B30798                cmpd    IOFocusNdx
 0000F337 2721                    beq             gccl1
                              ; 8192 words per screen
 0000F339 4F                      clra
 0000F33A BDF0DB                  jsr             ShiftLeft5
 0000F33D 0F17                    clr             ColorCodeLocation+3     ; low 8 bits=0
 0000F33F D716                    stb             ColorCodeLocation+2     ; bits 15:8
 0000F341 9715                    sta             ColorCodeLocation+1     ; bits 23:16
 0000F343 0F14                    clr             ColorCodeLocation
 0000F345 DC16                    ldd             ColorCodeLocation+2
 0000F347 C31000                  addd    #<BIOS_SCREENS+4096
 0000F34A DD16                    std             ColorCodeLocation+2
 0000F34C DC14                    ldd             ColorCodeLocation
 0000F34E C900                    adcb    #0
 0000F350 8900                    adca    #0
 0000F352 C31700                  addd    #>BIOS_SCREENS+4096
 0000F355 DD14                    std             ColorCodeLocation
 0000F357 3506                    puls    d
 0000F359 39                      rts
                      gccl1:
 0000F35A CC0000                  ldd             #<TEXTSCR+$10000
 0000F35D DD16                    std             ColorCodeLocation+2
 0000F35F CCFFD1                  ldd             #>TEXTSCR+$10000
 0000F362 DD14                    std             ColorCodeLocation
 0000F364 3506                    puls    d
 0000F366 39                      rts
 
                      ;------------------------------------------------------------------------------
                      ; HomeCursor
                      ; Set the cursor location to the top left of the screen.
                      ;------------------------------------------------------------------------------
                      HomeCursor:
 0000F367 3410                    pshs    x
 0000F369 BE078E                  ldx             RunningTCB
 0000F36C 6F8A17EF4400            clr             TCB_CursorRow,x
 0000F372 6F8A17EF4500            clr             TCB_CursorCol,x
 0000F378 BC0798                  cmpx    IOFocusNdx
 0000F37B 260C                    bne             hc1
 0000F37D 157FFFDA0016            clr             TEXTREG+TEXT_CURPOS
 0000F383 157FFFDA0017            clr             TEXTREG+TEXT_CURPOS+1
                      hc1:
 0000F389 3510                    puls    x
 0000F38B 39                      rts
 
                      ;------------------------------------------------------------------------------
                      ; Update the cursor position in the text controller based on the
                      ;  CursorRow,CursorCol.
                      ;------------------------------------------------------------------------------
                      ;
                      UpdateCursorPos:
 0000F38C 3436                    pshs    d,x,y
 0000F38E BE078E                  ldx             RunningTCB
 0000F391 BC0798                  cmpx    IOFocusNdx                              ; update cursor position in text controller
 0000F394 2628                    bne             ucp1                                    ; only for the task with the output focus
 0000F396 A68A17EF4400            lda             TCB_CursorRow,x
 0000F39C 843F                    anda    #$3F                                    ; limit of 63 rows
 0000F39E 15F6FFDA0000            ldb             TEXTREG+TEXT_COLS
 0000F3A4 3D                      mul
 0000F3A5 1F02                    tfr             d,y
 0000F3A7 E68A17EF4500            ldb             TCB_CursorCol,x
 0000F3AD 1F21                    tfr             y,x
 0000F3AF 3A                      abx
 0000F3B0 1F10                    tfr             x,d
 0000F3B2 15B7FFDA0017            sta             TEXTREG+TEXT_CURPOS+1
 0000F3B8 15F7FFDA0016            stb             TEXTREG+TEXT_CURPOS
                      ucp1:
 0000F3BE 3536                    puls    d,x,y
 0000F3C0 39                      rts
 
                      ;------------------------------------------------------------------------------
                      ; Calculate screen memory location from CursorRow,CursorCol.
                      ; Also refreshes the cursor location.
                      ; Returns:
                      ; r1 = screen location
                      ;------------------------------------------------------------------------------
                      ;
                      CalcScreenLoc:
 0000F3C1 3436                    pshs    d,x,y
 0000F3C3 10BE078E                ldy             RunningTCB
 0000F3C7 A6AA17EF4400            lda             TCB_CursorRow,y
 0000F3CD 843F                    anda    #$3F                                    ; limit to 63 rows
 0000F3CF 15F6FFDA0000            ldb             TEXTREG+TEXT_COLS
 0000F3D5 3D                      mul
 0000F3D6 1F01                    tfr             d,x
 0000F3D8 E6AA17EF4500            ldb             TCB_CursorCol,y
 0000F3DE C47F                    andb    #$7F                                    ; limit to 127 cols
 0000F3E0 3A                      abx
 0000F3E1 10BC0798                cmpy    IOFocusNdx                              ; update cursor position in text controller
 0000F3E5 260E                    bne             csl1                                    ; only for the task with the output focus
 0000F3E7 1F10                    tfr             x,d
 0000F3E9 15B7FFDA0017            sta             TEXTREG+TEXT_CURPOS+1
 0000F3EF 15F7FFDA0016            stb             TEXTREG+TEXT_CURPOS
                      csl1:
 0000F3F5 1F10                    tfr             x,d                                             
 0000F3F7 58                      aslb                                                    ; * 2 for 2 bytes per char displayed.
 0000F3F8 49                      rola
 0000F3F9 BDF2D7                  jsr             GetScreenLocation
 0000F3FC D312                    addd    ScreenLocation+2
 0000F3FE DD12                    std             ScreenLocation+2
 0000F400 2407                    bcc             csl3
 0000F402 DC10                    ldd             ScreenLocation
 0000F404 C30001                  addd    #1
 0000F407 DD10                    std             ScreenLocation
                      csl3:
 0000F409 3536                    puls    d,x,y
 0000F40B 39                      rts
 
                      ;------------------------------------------------------------------------------
                      ; Display a character on the screen.
                      ; If the task doesn't have the I/O focus then the character is written to
                      ; the virtual screen.
                      ; a = char to display
                      ;------------------------------------------------------------------------------
                      ;
                      far DisplayChar:
 0000F40C 3412                    pshs    a,x
 0000F40E BE078E                  ldx             RunningTCB
 0000F411 810D                    cmpa    #CR                                     ; carriage return ?
 0000F413 260C                    bne             dccr
 0000F415 6F8A17EF4500            clr             TCB_CursorCol,x         ; just set cursor column to zero on a CR
 0000F41B BDF38C                  jsr             UpdateCursorPos
                      dcx14:
 0000F41E 3512                    puls    a,x
 0000F420 38                      rtf
                      dccr:
 0000F421 8191                    cmpa    #$91                            ; cursor right ?
 0000F423 2617                    bne             dcx6
 0000F425 A68A17EF4500            lda             TCB_CursorCol,x
 0000F42B 8137                    cmpa    #55
 0000F42D 2407                    bhs             dcx7
 0000F42F 4C                      inca
 0000F430 A78A17EF4500            sta             TCB_CursorCol,x
                      dcx7:
 0000F436 BDF38C                  jsr             UpdateCursorPos
 0000F439 3512                    puls    a,x
 0000F43B 38                      rtf
                      dcx6:
 0000F43C 8190                    cmpa    #$90                            ; cursor up ?
 0000F43E 2611                    bne             dcx8            
 0000F440 A68A17EF4400            lda             TCB_CursorRow,x
 0000F446 27EE                    beq             dcx7
 0000F448 4A                      deca
 0000F449 A78A17EF4400            sta             TCB_CursorRow,x
 0000F44F 20E5                    bra             dcx7
                      dcx8:
 0000F451 8193                    cmpa    #$93                            ; cursor left ?
 0000F453 2611                    bne             dcx9
 0000F455 A68A17EF4500            lda             TCB_CursorCol,x
 0000F45B 27D9                    beq             dcx7
 0000F45D 4A                      deca
 0000F45E A78A17EF4500            sta             TCB_CursorCol,x
 0000F464 20D0                    bra             dcx7
                      dcx9:
 0000F466 8192                    cmpa    #$92                            ; cursor down ?
 0000F468 2613                    bne             dcx10
 0000F46A A68A17EF4400            lda             TCB_CursorRow,x
 0000F470 812E                    cmpa    #46
 0000F472 27C2                    beq             dcx7
 0000F474 4C                      inca
 0000F475 A78A17EF4400            sta             TCB_CursorRow,x
 0000F47B 20B9                    bra             dcx7
                      dcx10:
 0000F47D 8194                    cmpa    #$94                            ; cursor home ?
 0000F47F 2618                    bne             dcx11
 0000F481 A68A17EF4500            lda             TCB_CursorCol,x
 0000F487 2708                    beq             dcx12
 0000F489 6F8A17EF4500            clr             TCB_CursorCol,x
 0000F48F 20A5                    bra             dcx7
                      dcx12:
 0000F491 6F8A17EF4400            clr             TCB_CursorRow,x
 0000F497 209D                    bra             dcx7
                      dcx11:
 0000F499 3460                    pshs    y,u
 0000F49B 8199                    cmpa    #$99                            ; delete ?
 0000F49D 260B                    bne             dcx13
 0000F49F BDF3C1                  jsr             CalcScreenLoc
 0000F4A2 A68A17EF4500            lda             TCB_CursorCol,x         ; acc = cursor column
 0000F4A8 201D                    bra             dcx5
                      dcx13
 0000F4AA 8108                    cmpa    #CTRLH                          ; backspace ?
 0000F4AC 263D                    bne             dcx3
 0000F4AE A68A17EF4500            lda             TCB_CursorCol,x
 0000F4B4 275E                    beq             dcx4
 0000F4B6 4A                      deca
 0000F4B7 A78A17EF4500            sta             TCB_CursorCol,x
 0000F4BD BDF3C1                  jsr             CalcScreenLoc
 0000F4C0 108E0002                ldy             #2
 0000F4C4 CE0000                  ldu             #0
                      dcx5:
 0000F4C7 151BAEB90010            ldx             far [ScreenLocation],y
 0000F4CD 151BAFD90010            stx             far [ScreenLocation],u
 0000F4D3 3122                    leay    2,y
 0000F4D5 3342                    leau    2,u
 0000F4D7 4C                      inca
 0000F4D8 8137                    cmpa    #55
 0000F4DA 25EB                    blo             dcx5
 0000F4DC 8620                    lda             #' '
 0000F4DE BDF0BE                  jsr             AsciiToScreen
 0000F4E1 313E                    leay    -2,y
 0000F4E3 151BEDB90010            std             far [ScreenLocation],y
 0000F4E9 2029                    bra             dcx4
                      dcx3:
 0000F4EB 810A                    cmpa    #LF                             ; linefeed ?
 0000F4ED 2722                    beq             dclf
 0000F4EF BDF3C1                  jsr     CalcScreenLoc
 0000F4F2 BDF0BE                  jsr             AsciiToScreen   ; convert ascii char to screen char
 0000F4F5 15ED9F0010              std             far [ScreenLocation]
 0000F4FA BDF2D7                  jsr             GetScreenLocation
 0000F4FD BDF32E                  jsr             GetColorCodeLocation
 0000F500 9E12                    ldx             ScreenLocation+2
 0000F502 9F16                    stx             ColorCodeLocation+2
 0000F504 FC07C0                  ldd             CharColor
 0000F507 15ED9F0014              std             far [ColorCodeLocation]
 0000F50C BDF51F                  jsr             IncCursorPos
 0000F50F 2003                    bra             dcx4
                      dclf:
 0000F511 BDF53D                  jsr             IncCursorRow
                      dcx4:
 0000F514 3560                    puls    y,u
 0000F516 3512                    puls    a,x
 0000F518 38                      rtf
 
                      DisplayCharNear
 0000F519 CF0000F40C              jsr             DisplayChar
 0000F51E 39                      rts
 
                      ;------------------------------------------------------------------------------
                      ; Increment the cursor position, scroll the screen if needed.
                      ;------------------------------------------------------------------------------
                      ;
                      IncCursorPos:
 0000F51F 3412                    pshs    a,x
 0000F521 BE078E                  ldx             RunningTCB
 0000F524 A68A17EF4500            lda             TCB_CursorCol,x
 0000F52A 4C                      inca
 0000F52B A78A17EF4500            sta             TCB_CursorCol,x
 0000F531 8137                    cmpa    #55
 0000F533 252A                    blo             icc1
 0000F535 6F8A17EF4500            clr             TCB_CursorCol,x         ; column = 0
 0000F53B 2005                    bra             icr1
                      IncCursorRow:
 0000F53D 3412                    pshs    a,x
 0000F53F BE078E                  ldx             RunningTCB
                      icr1:
 0000F542 A68A17EF4400            lda             TCB_CursorRow,x
 0000F548 4C                      inca
 0000F549 A78A17EF4400            sta             TCB_CursorRow,x
 0000F54F 811F                    cmpa    #31
 0000F551 250C                    blo             icc1
 0000F553 4A                      deca                                                    ; backup the cursor row, we are scrolling up
 0000F554 A78A17EF4400            sta             TCB_CursorRow,x
 0000F55A CF0000F25A              jsr             ScrollUp
                      icc1:
 0000F55F BDF38C                  jsr             UpdateCursorPos
                      icc2:
 0000F562 3512                    puls    a,x
 0000F564 39                      rts
 
                      ;------------------------------------------------------------------------------
                      ; Display a string on the screen.
                      ; Parameters:
                      ;       Strptr = pointer to string
                      ;------------------------------------------------------------------------------
                      ;
                      far DisplayString:
 0000F565 3412                    pshs    a,x
 0000F567 8E0000                  ldx             #0
                      dspj1B:
 0000F56A 151BA6990024            lda             far [Strptr],x  ; move string char into acc
 0000F570 2707                    beq             dsretB                  ; is it end of string ?
 0000F572 BDF621                  jsr             OUTCH                   ; display character
 0000F575 3001                    leax    1,x
 0000F577 20F1                    bra             dspj1B
                      dsretB:
 0000F579 3512                    puls    a,x
 0000F57B 38                      rtf
 
                      CRLFNear:
 0000F57C CF0000D0D2              jsr             CRLF
 0000F581 39                      rts
 
                      ;
                      ; PRINT CR, LF, STRING
                      ;
                      PSTRNG
 0000F582 8D02                    BSR             PCRLF
 0000F584 200D                    BRA             PDATA
                      PCRLF
 0000F586 3410                    PSHS    X
 0000F588 8EF59A                  LDX             #CRLFST
 0000F58B 8D06                    BSR             PDATA
 0000F58D 3510                    PULS    X
 0000F58F 39                      RTS
 
                      PRINT
 0000F590 BDF621                  JSR             OUTCH
                      PDATA
 0000F593 A680                    LDA             ,X+
 0000F595 8104                    CMPA    #$04
 0000F597 26F7                    BNE             PRINT
 0000F599 39                      RTS
 
                      CRLFST
 0000F59A 0D0A04                  fcb     CR,LF,4
 
                      DispWordAsHex:
 0000F59D 8D07                    bsr             DispByteAsHex
 0000F59F 1E89                    exg             a,b
 0000F5A1 8D03                    bsr             DispByteAsHex
 0000F5A3 1E89                    exg             a,b
 0000F5A5 39                      rts
 
                      DispByteAsHex:
 0000F5A6 46                      rora
 0000F5A7 46                      rora
 0000F5A8 46                      rora
 0000F5A9 46                      rora
 0000F5AA 8D04                    bsr             DispNyb
 0000F5AC 49                      rola
 0000F5AD 49                      rola
 0000F5AE 49                      rola
 0000F5AF 49                      rola
 
                      DispNyb
 0000F5B0 3402                    pshs    a
 0000F5B2 840F                    anda    #$0F
 0000F5B4 810A                    cmpa    #10
 0000F5B6 2508                    blo             DispNyb1
 0000F5B8 8B37                    adda    #'A'-10
 0000F5BA BDF621                  jsr             OUTCH
 0000F5BD 3502                    puls    a
 0000F5BF 39                      rts
                      DispNyb1
 0000F5C0 8B30                    adda    #'0'
 0000F5C2 BDF621                  jsr             OUTCH
 0000F5C5 3502                    puls    a
 0000F5C7 39                      rts
 
                      ;==============================================================================
                      ; Keyboard I/O
                      ;==============================================================================
 
 0000F5C8 4B4559424F4152          fcb             "KEYBOARD"
 0000F5CF 44
 0000F5D0 F5DA                    fcw             KeybdOpen
 0000F5D2 F5DB                    fcw             KeybdClose
 0000F5D4 F5DC                    fcw             KeybdRead
 0000F5D6 F5DD                    fcw             KeybdWrite
 0000F5D8 F5DE                    fcw             KeybdSeek
 
                      ; Keyboard Open:
                      ; Initialize the keyboard buffer head and tail indexes
                      ;
                      KeybdOpen:
 0000F5DA 39                      rts
 
                      ; Keyboard Close:
                      ; Nothing to do except maybe clear the keyboard buffer
                      ;
                      KeybdClose:
 0000F5DB 39                      rts
                      ;
                      KeybdRead:
 0000F5DC 39                      rts
                      ;
                      KeybdWrite:
 0000F5DD 39                      rts
 
                      KeybdSeek:
 0000F5DE 39                      rts
 
                      ;------------------------------------------------------------------------------
                      ; Check if there is a keyboard character available. If so return true (1)
                      ; otherwise return false (0) in acca.
                      ;------------------------------------------------------------------------------
                      ;
                      KeybdCheckForKeyDirect:
 0000F5DF 15FCFFDC0000            ldd             KEYBD
 0000F5E5 5F                      clrb
 0000F5E6 8480                    anda    #$80
 0000F5E8 2702                    beq             kcfkd1
 0000F5EA 8601                    lda             #1
                      kcfkd1
 0000F5EC 39                      rts
 
                      ;------------------------------------------------------------------------------
                      ;------------------------------------------------------------------------------
                      INCH:
 0000F5ED 3414                    pshs    b,x
                      inch1:
 0000F5EF 15FCFFDC0000            ldd             KEYBD
 0000F5F5 C580                    bitb    #$80                    ; is there a char available ?
 0000F5F7 27F6                    beq             inch1                   ; no, check again
 0000F5F9 15FDFFDC0002            std             KEYBD+2                 ; clear keyboard strobe
 0000F5FF C508                    bitb    #$8                             ; is it a keydown event ?
 0000F601 26EC                    bne             inch1                   ; no, go back check for another char
 0000F603 3514                    puls    b,x
 0000F605 39                      rts
 
                      INCHE:
 0000F606 8DE5                    bsr             INCH
 0000F608 200A                    bra             INCHEK3
 
                      INCHEK:
 0000F60A 8DE1                    bsr             INCH
 0000F60C 157D17EFAA00            tst             KeybdEcho
 0000F612 270C                    beq             INCHEK1
                      INCHEK3:
 0000F614 810D                    cmpa    #CR
 0000F616 2605                    bne             INCHEK2
 0000F618 BDF57C                  jsr             CRLFNear
 0000F61B 2003                    bra             INCHEK1
                      INCHEK2:
 0000F61D BDF519                  jsr             DisplayCharNear
                      INCHEK1:
 0000F620 39                      rts
 
                      OUTCH:
 0000F621 15AD9F0800              jsr             far [CharOutVec]
 0000F626 39                      rts
 
                      ;------------------------------------------------------------------------------
                      ; Get character directly from keyboard. This routine blocks until a key is
                      ; available.
                      ;------------------------------------------------------------------------------
                      ;
                      KeybdGetCharDirect:
 0000F627 3410                    pshs    x
                      kgc1:
 0000F629 15FCFFDC0000            ldd             KEYBD
 0000F62F C580                    bitb    #$80                    ; is there a char available ?
 0000F631 27F6                    beq             kgc1                    ; no, check again
 0000F633 15FDFFDC0002            std             KEYBD+2                 ; clear keyboard strobe
 0000F639 C508                    bitb    #$8                             ; is it a keydown event ?
 0000F63B 26EC                    bne             kgc1                    ; no, go back check for another char
 0000F63D 15F617EFAA00            ldb             KeybdEcho               ; is keyboard echo on ?
 0000F643 270E                    beq             gk1                             ; no keyboard echo, just return char
 0000F645 810D                    cmpa    #CR
 0000F647 2607                    bne             gk2                             ; convert CR keystroke into CRLF
 0000F649 CF0000D0D2              jsr             CRLF
 0000F64E 2003                    bra             gk1
                      gk2:
 0000F650 BDF621                  jsr             OUTCH
*** warning 1: Long branch within short branch range could be optimized
                      gk1:
 0000F653 3510                    puls    x
 0000F655 39                      rts
 
                      far KeybdGetCharDirectFar:
 0000F656 8DCF                    bsr             KeybdGetCharDirect
 0000F658 38                      rtf
 
                      ;------------------------------------------------------------------------------
                      ; r1 0=echo off, non-zero = echo on
                      ;------------------------------------------------------------------------------
                      ;
                      far SetKeyboardEcho:
 0000F659 3410                    pshs    x
 0000F65B BE078E                  ldx             RunningTCB
 0000F65E A78A17EFAA00            sta             KeybdEcho,x
 0000F664 3510                    puls    x
 0000F666 38                      rtf
 
                      ;==============================================================================
                      ; System Monitor
                      ;==============================================================================
                      ;
                      MonitorNear:
 0000F667 BDF66B                  jsr             Monitor
 0000F66A 39                      rts
 
                      Monitor:
 0000F66B 328F3FFF                leas    $3FFF
 0000F66F 8600                    lda             #0                                      ; turn off keyboard echo
 0000F671 CF0000F659              jsr             SetKeyboardEcho
                      ;       jsr             RequestIOFocus
                      PromptLn:
 0000F676 CF0000D0D2              jsr             CRLF
 0000F67B 8624                    lda             #'$'
 0000F67D BDF621                  jsr             OUTCH
*** warning 1: Long branch within short branch range could be optimized
 
                      ; Get characters until a CR is keyed
                      ;
                      Prompt3:
 0000F680 BDF627                  jsr             KeybdGetCharDirect
*** warning 1: Long branch within short branch range could be optimized
 0000F683 810D                    cmpa    #CR
 0000F685 2705                    beq             Prompt1
 0000F687 BDF621                  jsr             OUTCH
*** warning 1: Long branch within short branch range could be optimized
 0000F68A 20F4                    bra             Prompt3
 
                      ; Process the screen line that the CR was keyed on
                      ;
                      Prompt1:
 0000F68C 108E0000                ldy             #0                              ; index to start of line
 0000F690 CC5050                  ldd             #$5050
 0000F693 15FDFFDC0600            std             LEDS
 0000F699 BE078E                  ldx             RunningTCB
 0000F69C 8C003F                  cmpx    #MAX_TASKNO
 0000F69F 22DF                    bhi             Prompt3
 0000F6A1 CC5151                  ldd             #$5151
 0000F6A4 15FDFFDC0600            std             LEDS
 0000F6AA 6F8A17EF4500            clr             TCB_CursorCol,x ; go back to the start of the line
 0000F6B0 BDF3C1                  jsr             CalcScreenLoc   ; calc screen memory location
 0000F6B3 CC5252                  ldd             #$5252
 0000F6B6 15FDFFDC0600            std             LEDS
 0000F6BC BDF72E                  jsr             MonGetNonSpace
 0000F6BF 8124                    cmpa    #'$'
 0000F6C1 260B                    bne             Prompt2                 ; skip over '$' prompt character
 0000F6C3 8653                    lda             #$5353
 0000F6C5 15FDFFDC0600            std             LEDS
 0000F6CB BDF72E                  jsr             MonGetNonSpace
 
                      ; Dispatch based on command character
                      ;
                      Prompt2:
 0000F6CE 813F                    cmpa    #'?'                    ; $? - display help
 0000F6D0 2612                    bne             PromptC
 0000F6D2 CCF7DF                  ldd             #<HelpMsg
 0000F6D5 DD26                    std             Strptr+2
 0000F6D7 CC0000                  ldd             #>HelpMsg
 0000F6DA DD24                    std             Strptr
 0000F6DC CF0000F565              jsr             DisplayString
 0000F6E1 7EF66B                  jmp             Monitor
*** warning 1: Long branch within short branch range could be optimized
                      PromptC:
 0000F6E4 8143                    cmpa    #'C'
 0000F6E6 2608                    bne             PromptD
 0000F6E8 CF0000F1FA              jsr             ClearScreen
 0000F6ED 7EF66B                  jmp             Monitor
                      PromptD:
 0000F6F0 8144                    cmpa    #'D'
 0000F6F2 260A                    bne             PromptF
 0000F6F4 BDF722                  jsr             MonGetch
 0000F6F7 8152                    cmpa    #'R'
 0000F6F9 2685                    bne             Prompt3
 0000F6FB 7EF86C                  jmp             DumpRegs
                      PromptF:
 0000F6FE 8146                    cmpa    #'F'
 0000F700 2617                    bne             PromptJ
 0000F702 BDF722                  jsr             MonGetch
 0000F705 8149                    cmpa    #'I'
 0000F707 1026FF60                lbne    Monitor
 0000F70B BDF722                  jsr             MonGetch
 0000F70E 8147                    cmpa    #'G'
 0000F710 1026FF57                lbne    Monitor
 0000F714 8F00020000              jmp             far $20000
                      PromptJ:
 0000F719 814A                    cmpa    #'J'
 0000F71B 102701D0                lbeq    jump_to_code
 0000F71F 7EF66B                  jmp             Monitor
 
                      MonGetch:
 0000F722 151BECB90010            ldd             far [ScreenLocation],y
 0000F728 3122                    leay    2,y
 0000F72A BDF0D4                  jsr             ScreenToAscii
 0000F72D 39                      rts
 
                      MonGetNonSpace:
 0000F72E 8DF2                    bsr             MonGetCh
 0000F730 8120                    cmpa    #' '
 0000F732 27FA                    beq             MonGetNonSpace
 0000F734 39                      rts
 
                      ;------------------------------------------------------------------------------
                      ; Ignore blanks in the input
                      ; Y = text pointer
                      ; D destroyed
                      ;------------------------------------------------------------------------------
                      ;
                      ignBlanks:
                      ignBlanks1:
 0000F735 8DEB                    bsr             MonGetch
 0000F737 8120                    cmpa    #' '
 0000F739 27FA                    beq             ignBlanks1
 0000F73B 313E                    leay    -2,y
 0000F73D 39                      rts
 
                      ;------------------------------------------------------------------------------
                      ;------------------------------------------------------------------------------
                      GetTwoParams:
 0000F73E BDF735                  jsr             ignBlanks
*** warning 1: Long branch within short branch range could be optimized
 0000F741 BDF75A                  jsr             GetHexNumber    ; get start address of dump
 0000F744 1F01                    tfr             d,x
 0000F746 BDF735                  jsr             ignBlanks
*** warning 1: Long branch within short branch range could be optimized
 0000F749 BDF75A                  jsr             GetHexNumber    ; get end address of dump
 0000F74C 39                      rts
 
                      ;------------------------------------------------------------------------------
                      ; Get a range, the end must be greater or equal to the start.
                      ;------------------------------------------------------------------------------
                      ;GetRange:
                      ;       jsr             GetTwoParams
                      ;       cmp             r2,r1
                      ;       bhi             DisplayErr
                      ;       rts
 
                      shl_numwka:
 0000F74D 780913                  asl             mon_numwka+3
 0000F750 790912                  rol             mon_numwka+2
 0000F753 790911                  rol             mon_numwka+1
 0000F756 790910                  rol             mon_numwka
 0000F759 39                      rts
 
                      ;------------------------------------------------------------------------------
                      ; Get a hexidecimal number. Maximum of eight digits.
                      ; Y = text pointer (updated)
                      ; D = number of digits
                      ; mon_numwka contains number
                      ;------------------------------------------------------------------------------
                      ;
                      GetHexNumber:
 0000F75A 4F5F                    clrd
 0000F75C FD0910                  std             mon_numwka
 0000F75F FD0912                  std             mon_numwka+2
 0000F762 3410                    pshs    x
 0000F764 8E0000                  ldx             #0                                      ; max 8 eight digits
                      gthxn2:
 0000F767 BDF722                  jsr             MonGetch
*** warning 1: Long branch within short branch range could be optimized
 0000F76A BDF78D                  jsr             AsciiToHexNybble
 0000F76D 81FF                    cmpa    #-1
 0000F76F 2717                    beq             gthxn1
 0000F771 8DDA                    bsr             shl_numwka
 0000F773 8DD8                    bsr             shl_numwka
 0000F775 8DD6                    bsr             shl_numwka
 0000F777 8DD4                    bsr             shl_numwka
 0000F779 840F                    anda    #$0f
 0000F77B BA0917                  ora             mon_numwka+7
 0000F77E B70917                  sta             mon_numwka+7
 0000F781 3001                    inx
 0000F783 8C0008                  cmpx    #8
 0000F786 25DF                    blo             gthxn2
                      gthxn1:
 0000F788 1F10                    tfr             x,d
 0000F78A 3510                    puls    x
 0000F78C 39                      rts
 
                      ;GetDecNumber:
                      ;       phx
                      ;       push    r4
                      ;       push    r5
                      ;       ldx             #0
                      ;       ld              r4,#10
                      ;       ld              r5,#10
                      ;gtdcn2:
                      ;       jsr             MonGetch
                      ;       jsr             AsciiToDecNybble
                      ;       cmp             #-1
                      ;       beq             gtdcn1
                      ;       mul             r2,r2,r5
                      ;       add             r2,r1
                      ;       dec             r4
                      ;       bne             gtdcn2
                      ;gtdcn1:
                      ;       txa
                      ;       pop             r5
                      ;       pop             r4
                      ;       plx
                      ;       rts
 
                      ;------------------------------------------------------------------------------
                      ; Convert ASCII character in the range '0' to '9', 'a' to 'f' or 'A' to 'F'
                      ; to a hex nybble.
                      ;------------------------------------------------------------------------------
                      ;
                      AsciiToHexNybble:
 0000F78D 8130                    cmpa    #'0'
 0000F78F 2421                    bcc             gthx3
 0000F791 813A                    cmpa    #'9'+1
 0000F793 2503                    bcs             gthx5
 0000F795 8030                    suba    #'0'
 0000F797 39                      rts
                      gthx5:
 0000F798 8141                    cmpa    #'A'
 0000F79A 2416                    bcc             gthx3
 0000F79C 8147                    cmpa    #'F'+1
 0000F79E 2505                    bcs             gthx6
 0000F7A0 8041                    suba    #'A'
 0000F7A2 8B0A                    adda    #10
 0000F7A4 39                      rts
                      gthx6:
 0000F7A5 8161                    cmpa    #'a'
 0000F7A7 2409                    bcc             gthx3
 0000F7A9 817B                    cmpa    #'z'+1
 0000F7AB 2505                    bcs             gthx3
 0000F7AD 8061                    suba    #'a'
 0000F7AF 8B0A                    adda    #10
 0000F7B1 39                      rts
                      gthx3:
 0000F7B2 86FF                    lda             #-1             ; not a hex number
 0000F7B4 39                      rts
 
                      AsciiToDecNybble:
 0000F7B5 8130                    cmpa    #'0'
 0000F7B7 2407                    bcc             gtdc3
 0000F7B9 813A                    cmpa    #'9'+1
 0000F7BB 2503                    bcs             gtdc3
 0000F7BD 8030                    suba    #'0'
 0000F7BF 39                      rts
                      gtdc3:
 0000F7C0 86FF                    lda             #-1
 0000F7C2 39                      rts
 
                      DisplayErr:
 0000F7C3 8EF7D7                  ldx             #msgErr
 0000F7C6 4F5F                    clrd
 0000F7C8 8D03                    bsr             DisplayStringDX
 0000F7CA 7EF66B                  jmp             Monitor
 
                      DisplayStringDX
 0000F7CD DD24                    std             Strptr
 0000F7CF 9F26                    stx             Strptr+2
 0000F7D1 CF0000F565              jsr             DisplayString
 0000F7D6 39                      rts
 
                      msgErr:
 0000F7D7 2A2A4572720D0A          fcb     "**Err",CR,LF,0
 0000F7DE 00
 
                      HelpMsg:
 0000F7DF 3F203D20446973          fcb             "? = Display help",CR,LF
 0000F7E6 706C6179206865
 0000F7ED 6C700D0A
 0000F7F1 434C53203D2063          fcb     "CLS = clear screen",CR,LF
 0000F7F8 6C656172207363
 0000F7FF 7265656E0D0A
                      ;       db      "S = Boot from SD Card",CR,LF
                      ;       db      ": = Edit memory bytes",CR,LF
                      ;       db      "L = Load sector",CR,LF
                      ;       db      "W = Write sector",CR,LF
 0000F805 4452203D204475          fcb "DR = Dump registers",CR,LF
 0000F80C 6D702072656769
 0000F813 73746572730D0A
                      ;       db      "D = Dump memory",CR,LF
                      ;       db      "F = Fill memory",CR,LF
                      ;       db  "FL = Dump I/O Focus List",CR,LF
 0000F81A 464947203D2073          fcb "FIG = start FIG Forth",CR,LF
 0000F821 74617274204649
 0000F828 4720466F727468
 0000F82F 0D0A
                      ;       db      "KILL n = kill task #n",CR,LF
                      ;       db      "B = start tiny basic",CR,LF
                      ;       db      "b = start EhBasic 6502",CR,LF
 0000F831 4A203D204A756D          fcb     "J = Jump to code",CR,LF
 0000F838 7020746F20636F
 0000F83F 64650D0A
                      ;       db      "R[n] = Set register value",CR,LF
                      ;       db      "r = random lines - test bitmap",CR,LF
                      ;       db      "e = ethernet test",CR,LF
                      ;       db      "T = Dump task list",CR,LF
                      ;       db      "TO = Dump timeout list",CR,LF
                      ;       db      "TI = display date/time",CR,LF
                      ;       db      "TEMP = display temperature",CR,LF
                      ;       db      "P = Piano",CR,LF,0
 0000F843 00                      fcb             0
 
                      msgRegHeadings
 0000F844 20442F41422020          fcb     " D/AB  X   Y   U   S     PC    DP CCR",CR,LF,0
 0000F84B 58202020592020
 0000F852 20552020205320
 0000F859 20202020504320
 0000F860 20202044502043
 0000F867 43520D0A00
 
                      DumpRegs
 0000F86C 8EF844                  ldx             #msgRegHeadings
 0000F86F CC0000                  ldd             #msgRegHeadings>>16
 0000F872 BDF7CD                  jsr             DisplayStringDX
 0000F875 12                      nop
 0000F876 12                      nop
 0000F877 CF0000D0AF              jsr             XBLANK
 0000F87C FC0900                  ldd             mon_DSAVE
 0000F87F CF0000D2D2              jsr             HEX4
 0000F884 CF0000D0AF              jsr             XBLANK
 0000F889 FC0902                  ldd             mon_XSAVE
 0000F88C CF0000D2D2              jsr             HEX4
 0000F891 CF0000D0AF              jsr             XBLANK
 0000F896 FC0904                  ldd             mon_YSAVE
 0000F899 CF0000D2D2              jsr             HEX4
 0000F89E CF0000D0AF              jsr             XBLANK
 0000F8A3 FC0906                  ldd             mon_USAVE
 0000F8A6 CF0000D2D2              jsr             HEX4
 0000F8AB CF0000D0AF              jsr             XBLANK
 0000F8B0 FC0908                  ldd             mon_SSAVE
 0000F8B3 CF0000D2D2              jsr             HEX4
 0000F8B8 CF0000D0AF              jsr             XBLANK
 0000F8BD FC090A                  ldd             mon_PCSAVE
 0000F8C0 CF0000D2D2              jsr             HEX4
 0000F8C5 FC090C                  ldd             mon_PCSAVE+2
 0000F8C8 CF0000D2D2              jsr             HEX4
 0000F8CD CF0000D0AF              jsr             XBLANK
 0000F8D2 FC090E                  ldd             mon_DPRSAVE
 0000F8D5 CF0000D2CE              jsr             HEX2
 0000F8DA CF0000D0AF              jsr             XBLANK
 0000F8DF B6090F                  lda             mon_CCRSAVE
 0000F8E2 CF0000D2CE              jsr             HEX2
 0000F8E7 CF0000D0AF              jsr             XBLANK
 0000F8EC 7EF66B                  jmp             Monitor
 
                      ; Jump to code
                      jump_to_code:
 0000F8EF BDF75A                  jsr             GetHexNumber
 0000F8F2 1A10                    sei
 0000F8F4 10FE0908                lds             mon_SSAVE
 0000F8F8 CCF92D                  ldd             #<jtc_exit
 0000F8FB 3406                    pshs    d
 0000F8FD CC0000                  ldd             #>jtc_exit
 0000F900 3406                    pshs    d
 0000F902 FC0912                  ldd             mon_numwka+2
 0000F905 3406                    pshs    d
 0000F907 FC0910                  ldd             mon_numwka
 0000F90A 3406                    pshs    d
 0000F90C FC0906                  ldd             mon_USAVE
 0000F90F 3406                    pshs    d
 0000F911 FC0904                  ldd             mon_YSAVE
 0000F914 3420                    pshs    y
 0000F916 FC0902                  ldd             mon_XSAVE
 0000F919 3410                    pshs    x
 0000F91B B6090E                  lda             mon_DPRSave
 0000F91E 3402                    pshs    a
 0000F920 FC0900                  ldd             mon_DSAVE
 0000F923 3406                    pshs    d
 0000F925 B6090F                  lda             mon_CCRSAVE
 0000F928 3402                    pshs    a
 0000F92A 1535FF                  puls    far ccr,d,dpr,x,y,u,pc
                      jtc_exit:
 0000F92D 3401                    pshs    ccr
 0000F92F FD0900                  std             mon_DSAVE
 0000F932 BF0902                  stx             mon_XSAVE
 0000F935 10BF0904                sty             mon_YSAVE
 0000F939 FF0906                  stu             mon_USAVE
 0000F93C 1FB8                    tfr             dpr,a
 0000F93E B7090E                  sta             mon_DPRSAVE
 0000F941 3502                    puls    a
 0000F943 B7090F                  sta             mon_CCRSAVE
 0000F946 10FF0908                sts             mon_SSAVE
 0000F94A 10CE3FFF                lds             #$3FFF
 0000F94E 7EF86C                  jmp             DumpRegs
 
                      ;------------------------------------------------------------------------------
                      ;------------------------------------------------------------------------------
                      swi3_rout:
 0000F951 1A10                    sei
 0000F953 3502                    puls    a
 0000F955 B7090F                  sta             mon_CCRSAVE
 0000F958 357E                    puls    D,DPR,X,Y,U
 0000F95A FD0900                  std             mon_DSAVE
 0000F95D BF0902                  stx             mon_XSAVE
 0000F960 10BF0904                sty             mon_YSAVE
 0000F964 FF0906                  stu             mon_USAVE
 0000F967 1FB8                    tfr             dpr,a
 0000F969 B7090E                  sta             mon_DPRSAVE
 0000F96C 3506                    puls    D
 0000F96E FD090A                  std             mon_PCSAVE
 0000F971 3506                    puls    D
 0000F973 FD090C                  std             mon_PCSAVE+2
 0000F976 10FF0908                sts             mon_SSAVE
 0000F97A 10CE3FFF                lds             #$3FFF
 0000F97E 1CEF                    cli
 0000F980 7EF86C                  jmp             DumpRegs
                      swi3_exit:
 0000F983 1A10                    sei
 0000F985 10FE0908                lds             mon_SSAVE
 0000F989 FC090C                  ldd             mon_PCSAVE+2
 0000F98C 3406                    pshs    d
 0000F98E FC090A                  ldd             mon_PCSAVE
 0000F991 3406                    pshs    d
 0000F993 FE0906                  ldu             mon_USAVE
 0000F996 10BE0904                ldy             mon_YSAVE
 0000F99A BE0902                  ldx             mon_XSAVE
 0000F99D 3470                    pshs    x,y,u
 0000F99F B6090E                  lda             mon_DPRSAVE
 0000F9A2 3402                    pshs    a
 0000F9A4 FC0900                  ldd             mon_DSAVE
 0000F9A7 3406                    pshs    d
 0000F9A9 B6090F                  lda             mon_CCRSAVE
 0000F9AC 3402                    pshs    a
 0000F9AE 1F8A                    tfr             a,ccr
 0000F9B0 1CEF                    cli
 0000F9B2 3B                      rti
 
                      ;------------------------------------------------------------------------------
                      ;------------------------------------------------------------------------------
                      irq_rout:
                              ; Reset the edge sense circuit in the PIC
 0000F9B3 8602                    lda             #2                              ; Timer is IRQ #2
 0000F9B5 15B7FFDC0F06            sta             PIC+6                   ; register 6 is edge sense reset reg    
 
 0000F9BB B7079A                  sta             IrqSource               ; stuff a byte indicating the IRQ source for PEEK()
 0000F9BE 96DF                    lda             IrqBase                 ; get the IRQ flag byte
 0000F9C0 44                      lsra
 0000F9C1 9ADF                    ora             IrqBase
 0000F9C3 84E0                    anda    #$E0
 0000F9C5 97DF                    sta             IrqBase
 
 0000F9C7 157CFFD0006E            inc             TEXTSCR+110             ; update IRQ live indicator on screen
                              
                              ; flash the cursor
 0000F9CD BE078E                  ldx             RunningTCB
 0000F9D0 BC0798                  cpx             IOFocusNdx              ; only bother to flash the cursor for the task with the IO focus.
 0000F9D3 2627                    bne             tr1a
 0000F9D5 B607C4                  lda             CursorFlash             ; test if we want a flashing cursor
 0000F9D8 2722                    beq             tr1a
 0000F9DA BDF3C1                  jsr             CalcScreenLoc   ; compute cursor location in memory
 0000F9DD 109E12                  ldy             ScreenLocation+2
 0000F9E0 A6AAFFD10000            lda             $FFD10000,y             ; get color code $10000 higher in memory
 0000F9E6 F607C6                  ldb             IRQFlag                 ; get counter
 0000F9E9 54                      lsrb
 0000F9EA 44                      lsra
 0000F9EB 44                      lsra
 0000F9EC 44                      lsra
 0000F9ED 44                      lsra
 0000F9EE 54                      lsrb
 0000F9EF 49                      rola
 0000F9F0 54                      lsrb
 0000F9F1 49                      rola
 0000F9F2 54                      lsrb
 0000F9F3 49                      rola
 0000F9F4 54                      lsrb
 0000F9F5 49                      rola
 0000F9F6 A7AAFFD10000            sta             $FFD10000,y             ; store the color code back to memory
                      tr1a
 0000F9FC 3B                      rti
 
                              org             $FFF2
 0000FFF2 F951                    fcw             swi3_rout
 
                              org             $FFF8
 0000FFF8 F9B3                    fcw             irq_rout
 0000FFFA F022                    fcw             start           ; SWI
 0000FFFC F022                    fcw             start           ; NMI
 0000FFFE F022                    fcw             start           ; RST

12 warning(s) in pass 2.

SYMBOL TABLE
 ASCIITODECNYBBLE 02 0000F7B5 ASCIITOHEXNYBBLE 02 0000F78D ASCIITOSCREEN 02 0000F0BE   ATOSCR1 02 0000F0D1
      BCW1 02 0000F0EA BIOS_SCREENS 00 17000000 BLANKLINE 02 0000F2AE BLKCPYDST 00 00000020
 BLKCPYSRC 00 0000001C   BLNKLN1 02 0000F2C9 BLOCKCOPYWORDS 02 0000F0E6 CALCSCREENLOC 02 0000F3C1
 CHARCOLOR 00 000007C0 CHARINVEC 00 00000804 CHAROUTVEC 00 00000800 CLEARSCREEN 02 0000F1FA
 COLORCODELOCATION 00 00000014 COPYSCREENTOVIRTUALSCREEN 02 0000F180 COPYVIRTUALSCREENTOSCREEN 02 0000F0FD        CR 00 0000000D
      CRLF 02 0000D0D2  CRLFNEAR 02 0000F57C    CRLFST 02 0000F59A       CS1 02 0000F229
       CS2 02 0000F24B      CSL1 02 0000F3F5      CSL3 02 0000F409     CSVS3 02 0000F1E2
     CTRLC 00 00000003     CTRLH 00 00000008     CTRLI 00 00000009     CTRLJ 00 0000000A
     CTRLK 00 0000000B     CTRLM 00 0000000D     CTRLS 00 00000013     CTRLX 00 00000018
 CURSORFLASH 00 000007C4     CVSS3 02 0000F15D      DCCR 02 0000F421      DCLF 02 0000F511
     DCX10 02 0000F47D     DCX11 02 0000F499     DCX12 02 0000F491     DCX13 02 0000F4AA
     DCX14 02 0000F41E      DCX3 02 0000F4EB      DCX4 02 0000F514      DCX5 02 0000F4C7
      DCX6 02 0000F43C      DCX7 02 0000F436      DCX8 02 0000F451      DCX9 02 0000F466
 DISPBYTEASHEX 02 0000F5A6 DISPLAYCHAR 02 0000F40C DISPLAYCHARNEAR 02 0000F519 DISPLAYERR 02 0000F7C3
 DISPLAYSTRING 02 0000F565 DISPLAYSTRINGDX 02 0000F7CD   DISPNYB 02 0000F5B0  DISPNYB1 02 0000F5C0
 DISPWORDASHEX 02 0000F59D DRAM_BASE 00 10000000    DSPJ1B 02 0000F56A    DSRETB 02 0000F579
  DUMPREGS 02 0000F86C    DUMRTS 02 0000F0D3   FREEMBX 00 00000790   FREEMSG 00 00000794
   FREETCB 00 0000078A     GCCL1 02 0000F35A GETCOLORCODELOCATION 02 0000F32E GETHEXNUMBER 02 0000F75A
 GETSCREENLOCATION 02 0000F2D7 GETTWOPARAMS 02 0000F73E       GK1 02 0000F653       GK2 02 0000F650
      GSL1 02 0000F311     GTDC3 02 0000F7C0     GTHX3 02 0000F7B2     GTHX5 02 0000F798
     GTHX6 02 0000F7A5    GTHXN1 02 0000F788    GTHXN2 02 0000F767       HC1 02 0000F389
   HELPMSG 02 0000F7DF      HEX2 02 0000D2CE      HEX4 02 0000D2D2 HOMECURSOR 02 0000F367
      ICC1 02 0000F55F      ICC2 02 0000F562      ICR1 02 0000F542 IGNBLANKS 02 0000F735
 IGNBLANKS1 02 0000F735 INCCURSORPOS 02 0000F51F INCCURSORROW 02 0000F53D      INCH 02 0000F5ED
     INCH1 02 0000F5EF     INCHE 02 0000F606    INCHEK 02 0000F60A   INCHEK1 02 0000F620
   INCHEK2 02 0000F61D   INCHEK3 02 0000F614 IOFOCUSNDX 00 00000798   IRQBASE 00 000000DF
   IRQFLAG 00 000007C6 IRQSOURCE 00 0000079A  IRQ_ROUT 02 0000F9B3  JTC_EXIT 02 0000F92D
 JUMP_TO_CODE 02 0000F8EF    KCFKD1 02 0000F5EC     KEYBD 00 FFDC0000  KEYBDACK 00 17EFAC00
  KEYBDBAD 00 17EFAB00 KEYBDBUFFER 00 17EFB000 KEYBDCHECKFORKEYDIRECT 02 0000F5DF KEYBDCLOSE 02 0000F5DB
  KEYBDCLR 00 FFDC0002 KEYBDECHO 00 17EFAA00 KEYBDGETCHARDIRECT 02 0000F627 KEYBDGETCHARDIRECTFAR 02 0000F656
 KEYBDHEAD 00 17EFA800 KEYBDLOCKS 00 17EFAD00 KEYBDOPEN 02 0000F5DA KEYBDREAD 02 0000F5DC
 KEYBDSEEK 02 0000F5DE KEYBDTAIL 00 17EFA900 KEYBDWRITE 02 0000F5DD      KGC1 02 0000F629
      LEDS 00 FFDC0600    LETTER 02 0000D2C1        LF 00 0000000A MAX_TASKNO 00 0000003F
  MONGETCH 02 0000F722 MONGETNONSPACE 02 0000F72E   MONITOR 02 0000F66B MONITORNEAR 02 0000F667
 MON_CCRSAVE 00 0000090F MON_DPRSAVE 00 0000090E MON_DSAVE 00 00000900 MON_NUMWKA 00 00000910
 MON_PCSAVE 00 0000090A    MON_R1 00 00000904    MON_R2 00 00000908 MON_SSAVE 00 00000908
 MON_USAVE 00 00000906 MON_XSAVE 00 00000902 MON_YSAVE 00 00000904    MSGERR 02 0000F7D7
 MSGREGHEADINGS 02 0000F844 MSGSTARTUP 02 0000F0A3  NMAILBOX 00 00000792   NMIBASE 00 000000DC
   NMSGBLK 00 00000796    ONEKEY 02 0000D1DC     OUTCH 02 0000F621     PCRLF 02 0000F586
     PDATA 02 0000F593       PIC 00 FFDC0F00    PICPTR 00 00000028     PRINT 02 0000F590
   PROMPT1 02 0000F68C   PROMPT2 02 0000F6CE   PROMPT3 02 0000F680   PROMPTC 02 0000F6E4
   PROMPTD 02 0000F6F0   PROMPTF 02 0000F6FE   PROMPTJ 02 0000F719  PROMPTLN 02 0000F676
    PSTRNG 02 0000F582     QNDX0 00 00000780     QNDX1 00 00000782     QNDX2 00 00000784
     QNDX3 00 00000786     QNDX4 00 00000788 RUNNINGTCB 00 0000078E SCREENCOLOR 00 000007C2
 SCREENLOCATION 00 00000010 SCREENLOCATION2 00 00000018 SCREENTOASCII 02 0000F0D4  SCROLLUP 02 0000F25A
    SCRUP1 02 0000F27F SETKEYBOARDECHO 02 0000F659 SHIFTLEFT5 02 0000F0DB SHL_NUMWKA 02 0000F74D
       ST1 02 0000F031     START 02 0000F022    STASC1 02 0000F0DA    STRPTR 00 00000024
 SWI3_EXIT 02 0000F983 SWI3_ROUT 02 0000F951       TAB 00 00000009 TCB_ABS8SAVE 00 17EF4D00
 TCB_CURSORCOL 00 17EF4500 TCB_CURSORROW 00 17EF4400  TCB_HJCB 00 17EF8B00 TCB_HWAITMBX 00 17EF4600
 TCB_IOF_NEXT 00 17EF4900 TCB_IOF_PREV 00 17EF4A00 TCB_MBQ_NEXT 00 17EF4700 TCB_MBQ_PREV 00 17EF4800
 TCB_MMU_MAP 00 17EF4E00 TCB_MSGPTR_D1 00 17EF8900 TCB_MSGPTR_D2 00 17EF8A00 TCB_NXTRDY 00 17EF8400
 TCB_NXTTCB 00 17EF8600 TCB_PRIORITY 00 17EF8800 TCB_PRVRDY 00 17EF8500 TCB_SP8SAVE 00 17EF4B00
 TCB_SPSAVE 00 17EF4C00 TCB_STATUS 00 17EF8C00 TCB_TIMEOUT 00 17EF8700 TEXTCLOSE 02 0000F1F6
  TEXTOPEN 02 0000F1F5  TEXTREAD 02 0000F1F7   TEXTREG 00 FFDA0000   TEXTSCR 00 FFD00000
  TEXTSEEK 02 0000F1F9 TEXTWRITE 02 0000F1F8 TEXT_COLS 00 00000000 TEXT_CURPOS 00 00000016
 TEXT_ROWS 00 00000002 TIMEOUTLIST 00 0000078C      TR1A 02 0000F9FC      UCP1 02 0000F3BE
 UPDATECURSORPOS 02 0000F38C    XBLANK 02 0000D0AF      XOFF 00 00000013       XON 00 00000011
228 SYMBOLS

0 error(s), 96 warning(s)
